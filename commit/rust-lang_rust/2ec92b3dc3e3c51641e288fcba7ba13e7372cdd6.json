{"sha": "2ec92b3dc3e3c51641e288fcba7ba13e7372cdd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYzkyYjNkYzNlM2M1MTY0MWUyODhmY2JhN2JhMTNlNzM3MmNkZDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-23T10:36:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-23T10:51:30Z"}, "message": "Make code more direct\n\n* Push control flow outwards, as per\n  https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/style.md#preconditions\n\n* Don't re-do the work, pass-in the arguments", "tree": {"sha": "d0419d2d5d7fa5c36697074d309ba5ac14a58f76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0419d2d5d7fa5c36697074d309ba5ac14a58f76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ec92b3dc3e3c51641e288fcba7ba13e7372cdd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec92b3dc3e3c51641e288fcba7ba13e7372cdd6", "html_url": "https://github.com/rust-lang/rust/commit/2ec92b3dc3e3c51641e288fcba7ba13e7372cdd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ec92b3dc3e3c51641e288fcba7ba13e7372cdd6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ced546033973a63cb2ef1644ca099740fdfb1c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ced546033973a63cb2ef1644ca099740fdfb1c2", "html_url": "https://github.com/rust-lang/rust/commit/3ced546033973a63cb2ef1644ca099740fdfb1c2"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "55bc2bceca1460608b3580d3ef3062e3060692fe", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2ec92b3dc3e3c51641e288fcba7ba13e7372cdd6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec92b3dc3e3c51641e288fcba7ba13e7372cdd6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=2ec92b3dc3e3c51641e288fcba7ba13e7372cdd6", "patch": "@@ -5,12 +5,13 @@\n use std::{\n     io::Write as _,\n     process::{self, Stdio},\n+    sync::Arc,\n };\n \n use ide::{\n     AssistConfig, CompletionResolveCapability, FileId, FilePosition, FileRange, HoverAction,\n-    HoverGotoTypeData, NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n-    SymbolKind, TextEdit,\n+    HoverGotoTypeData, LineIndex, NavigationTarget, Query, RangeInfo, Runnable, RunnableKind,\n+    SearchScope, SymbolKind, TextEdit,\n };\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n@@ -867,7 +868,7 @@ pub(crate) fn handle_formatting(\n }\n \n pub(crate) fn handle_code_action(\n-    mut snap: GlobalStateSnapshot,\n+    snap: GlobalStateSnapshot,\n     params: lsp_types::CodeActionParams,\n ) -> Result<Option<Vec<lsp_ext::CodeAction>>> {\n     let _p = profile::span(\"handle_code_action\");\n@@ -894,7 +895,15 @@ pub(crate) fn handle_code_action(\n \n     let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n-    add_quick_fixes(&snap, &params, &mut res)?;\n+    let include_quick_fixes = match &params.context.only {\n+        Some(v) => v.iter().any(|it| {\n+            it == &lsp_types::CodeActionKind::EMPTY || it == &lsp_types::CodeActionKind::QUICKFIX\n+        }),\n+        None => true,\n+    };\n+    if include_quick_fixes {\n+        add_quick_fixes(&snap, frange, &line_index, &mut res)?;\n+    }\n \n     if snap.config.client_caps.code_action_resolve {\n         for (index, assist) in\n@@ -913,31 +922,16 @@ pub(crate) fn handle_code_action(\n \n fn add_quick_fixes(\n     snap: &GlobalStateSnapshot,\n-    params: &lsp_types::CodeActionParams,\n+    frange: FileRange,\n+    line_index: &Arc<LineIndex>,\n     acc: &mut Vec<lsp_ext::CodeAction>,\n ) -> Result<()> {\n-    let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n-    let range = from_proto::text_range(&line_index, params.range);\n-\n-    match &params.context.only {\n-        Some(v) => {\n-            if !v.iter().any(|it| {\n-                it == &lsp_types::CodeActionKind::EMPTY\n-                    || it == &lsp_types::CodeActionKind::QUICKFIX\n-            }) {\n-                return Ok(());\n-            }\n-        }\n-        None => {}\n-    };\n-\n-    let diagnostics = snap.analysis.diagnostics(&snap.config.diagnostics, file_id)?;\n+    let diagnostics = snap.analysis.diagnostics(&snap.config.diagnostics, frange.file_id)?;\n \n     for fix in diagnostics\n         .into_iter()\n         .filter_map(|d| d.fix)\n-        .filter(|fix| fix.fix_trigger_range.intersect(range).is_some())\n+        .filter(|fix| fix.fix_trigger_range.intersect(frange.range).is_some())\n     {\n         let edit = to_proto::snippet_workspace_edit(&snap, fix.source_change)?;\n         let action = lsp_ext::CodeAction {\n@@ -951,12 +945,11 @@ fn add_quick_fixes(\n         acc.push(action);\n     }\n \n-    for fix in snap.check_fixes.get(&file_id).into_iter().flatten() {\n+    for fix in snap.check_fixes.get(&frange.file_id).into_iter().flatten() {\n         let fix_range = from_proto::text_range(&line_index, fix.range);\n-        if fix_range.intersect(range).is_none() {\n-            continue;\n+        if fix_range.intersect(frange.range).is_some() {\n+            acc.push(fix.action.clone());\n         }\n-        acc.push(fix.action.clone());\n     }\n     Ok(())\n }"}]}