{"sha": "2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NTRhNjhjZmJiNjNhYTdiOGUwOWZlMDUxMTRkNWY5OGIyZjk3NDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-04T17:34:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-04T17:34:51Z"}, "message": "Auto merge of #71879 - Dylan-DPC:rollup-n05awny, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71038 (forbid `dyn Trait` in patterns)\n - #71697 (Added MIR constant propagation of Scalars into function call arguments)\n - #71773 (doc: misc rustdoc things)\n - #71810 (Do not try to find binop method on RHS `TyErr`)\n - #71877 (Use f64 in f64 examples)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2bf3c9873f98f1aa38c1716dc4f2e884bc8c4023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bf3c9873f98f1aa38c1716dc4f2e884bc8c4023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "html_url": "https://github.com/rust-lang/rust/commit/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649b6323cd20d4a454264798c189107fd1eda33f", "url": "https://api.github.com/repos/rust-lang/rust/commits/649b6323cd20d4a454264798c189107fd1eda33f", "html_url": "https://github.com/rust-lang/rust/commit/649b6323cd20d4a454264798c189107fd1eda33f"}, {"sha": "fc2837b05abc7cb854f225fe91bb1be53cdc097e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2837b05abc7cb854f225fe91bb1be53cdc097e", "html_url": "https://github.com/rust-lang/rust/commit/fc2837b05abc7cb854f225fe91bb1be53cdc097e"}], "stats": {"total": 216, "additions": 185, "deletions": 31}, "files": [{"sha": "73e760a2ee8b3e7a23dbe8249fa6fc1b15bada6c", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -474,11 +474,11 @@ impl f64 {\n     /// assuming that the value is finite and fits in that type.\n     ///\n     /// ```\n-    /// let value = 4.6_f32;\n+    /// let value = 4.6_f64;\n     /// let rounded = unsafe { value.to_int_unchecked::<u16>() };\n     /// assert_eq!(rounded, 4);\n     ///\n-    /// let value = -128.9_f32;\n+    /// let value = -128.9_f64;\n     /// let rounded = unsafe { value.to_int_unchecked::<i8>() };\n     /// assert_eq!(rounded, i8::MIN);\n     /// ```"}, {"sha": "aca1c69dfd591b760c8f12a9c77d55cf473f8d4e", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -255,8 +255,8 @@ fn generate_test_harness(\n ///\n /// The expansion here can be controlled by two attributes:\n ///\n-/// `reexport_test_harness_main` provides a different name for the `main`\n-/// function and `test_runner` provides a path that replaces\n+/// [`TestCtxt::reexport_test_harness_main`] provides a different name for the `main`\n+/// function and [`TestCtxt::test_runner`] provides a path that replaces\n /// `test::test_main_static`.\n fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     let sp = cx.def_site;"}, {"sha": "521a0d67b59dad839ad171700adefacfd36d0d3c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -6,9 +6,9 @@\n //! other phases of the compiler, which are generally required to hold in order\n //! to compile the program at all.\n //!\n-//! Most lints can be written as `LintPass` instances. These run after\n+//! Most lints can be written as [LintPass] instances. These run after\n //! all other analyses. The `LintPass`es built into rustc are defined\n-//! within `rustc_session::lint::builtin`,\n+//! within [rustc_session::lint::builtin],\n //! which has further comments on how to add such a lint.\n //! rustc can also load user-defined lint plugins via the plugin mechanism.\n //!\n@@ -19,7 +19,7 @@\n //! example) requires more effort. See `emit_lint` and `GatherNodeLevels`\n //! in `context.rs`.\n //!\n-//! Some code also exists in `rustc_session::lint`, `rustc_middle::lint`.\n+//! Some code also exists in [rustc_session::lint], [rustc_middle::lint].\n //!\n //! ## Note\n //!"}, {"sha": "7926bf535b3b714268916933d8c50c145fa0b20f", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -787,6 +787,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             | NonMutatingUse(NonMutatingUseContext::Inspect)\n             | NonMutatingUse(NonMutatingUseContext::Projection)\n             | NonUse(_) => {}\n+            // FIXME(felix91gr): explain the reasoning behind this\n             MutatingUse(MutatingUseContext::Projection) => {\n                 if self.local_kinds[local] != LocalKind::Temp {\n                     self.can_const_prop[local] = ConstPropMode::NoPropagation;\n@@ -969,13 +970,58 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdges { .. }\n             | TerminatorKind::FalseUnwind { .. } => {}\n-            //FIXME(wesleywiser) Call does have Operands that could be const-propagated\n-            TerminatorKind::Call { .. } => {}\n+            // Every argument in our function calls can be const propagated.\n+            TerminatorKind::Call { ref mut args, .. } => {\n+                let mir_opt_level = self.tcx.sess.opts.debugging_opts.mir_opt_level;\n+                // Constant Propagation into function call arguments is gated\n+                // under mir-opt-level 2, because LLVM codegen gives performance\n+                // regressions with it.\n+                if mir_opt_level >= 2 {\n+                    for opr in args {\n+                        /*\n+                          The following code would appear to be incomplete, because\n+                          the function `Operand::place()` returns `None` if the\n+                          `Operand` is of the variant `Operand::Constant`. In this\n+                          context however, that variant will never appear. This is why:\n+\n+                          When constructing the MIR, all function call arguments are\n+                          copied into `Locals` of `LocalKind::Temp`. At least, all arguments\n+                          that are not unsized (Less than 0.1% are unsized. See #71170\n+                          to learn more about those).\n+\n+                          This means that, conversely, all `Operands` found as function call\n+                          arguments are of the variant `Operand::Copy`. This allows us to\n+                          simplify our handling of `Operands` in this case.\n+                        */\n+                        if let Some(l) = opr.place().and_then(|p| p.as_local()) {\n+                            if let Some(value) = self.get_const(l) {\n+                                if self.should_const_prop(value) {\n+                                    // FIXME(felix91gr): this code only handles `Scalar` cases.\n+                                    // For now, we're not handling `ScalarPair` cases because\n+                                    // doing so here would require a lot of code duplication.\n+                                    // We should hopefully generalize `Operand` handling into a fn,\n+                                    // and use it to do const-prop here and everywhere else\n+                                    // where it makes sense.\n+                                    if let interpret::Operand::Immediate(\n+                                        interpret::Immediate::Scalar(\n+                                            interpret::ScalarMaybeUndef::Scalar(scalar),\n+                                        ),\n+                                    ) = *value\n+                                    {\n+                                        *opr = self.operand_from_scalar(\n+                                            scalar,\n+                                            value.layout.ty,\n+                                            source_info.span,\n+                                        );\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         }\n         // We remove all Locals which are restricted in propagation to their containing blocks.\n-        // We wouldn't need to clone, but the borrow checker can't see that we're not aliasing\n-        // the locals_of_current_block field, so we need to clone it first.\n-        // let ecx = &mut self.ecx;\n         for local in self.locals_of_current_block.iter() {\n             Self::remove_const(&mut self.ecx, local);\n         }"}, {"sha": "4cc6a27a6da93b5f5bd7d43c8b47b34a6db0944c", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -111,21 +111,22 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             }\n \n             if let Some(non_sm_ty) = structural {\n-                let adt_def = match non_sm_ty {\n-                    traits::NonStructuralMatchTy::Adt(adt_def) => adt_def,\n+                let msg = match non_sm_ty {\n+                    traits::NonStructuralMatchTy::Adt(adt_def) => {\n+                        let path = self.tcx().def_path_str(adt_def.did);\n+                        format!(\n+                            \"to use a constant of type `{}` in a pattern, \\\n+                             `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                            path, path,\n+                        )\n+                    }\n+                    traits::NonStructuralMatchTy::Dynamic => {\n+                        format!(\"trait objects cannot be used in patterns\")\n+                    }\n                     traits::NonStructuralMatchTy::Param => {\n                         bug!(\"use of constant whose type is a parameter inside a pattern\")\n                     }\n                 };\n-                let path = self.tcx().def_path_str(adt_def.did);\n-\n-                let make_msg = || -> String {\n-                    format!(\n-                        \"to use a constant of type `{}` in a pattern, \\\n-                         `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                        path, path,\n-                    )\n-                };\n \n                 // double-check there even *is* a semantic `PartialEq` to dispatch to.\n                 //\n@@ -155,13 +156,13 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n \n                 if !ty_is_partial_eq {\n                     // span_fatal avoids ICE from resolution of non-existent method (rare case).\n-                    self.tcx().sess.span_fatal(self.span, &make_msg());\n+                    self.tcx().sess.span_fatal(self.span, &msg);\n                 } else if mir_structural_match_violation {\n                     self.tcx().struct_span_lint_hir(\n                         lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                         self.id,\n                         self.span,\n-                        |lint| lint.build(&make_msg()).emit(),\n+                        |lint| lint.build(&msg).emit(),\n                     );\n                 } else {\n                     debug!("}, {"sha": "8007290f35d85be8d1f9730a57d1e77e823fd38a", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -11,6 +11,7 @@ use rustc_span::Span;\n pub enum NonStructuralMatchTy<'tcx> {\n     Adt(&'tcx AdtDef),\n     Param,\n+    Dynamic,\n }\n \n /// This method traverses the structure of `ty`, trying to find an\n@@ -137,6 +138,10 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 self.found = Some(NonStructuralMatchTy::Param);\n                 return true; // Stop visiting.\n             }\n+            ty::Dynamic(..) => {\n+                self.found = Some(NonStructuralMatchTy::Dynamic);\n+                return true; // Stop visiting.\n+            }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n                 // `*const _`/`*mut _`, so skip `super_visit_with`."}, {"sha": "23004cf364725d349e76f9b85e6a45cde516af6d", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -251,7 +251,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             Err(()) => {\n                 // error types are considered \"builtin\"\n-                if !lhs_ty.references_error() {\n+                if !lhs_ty.references_error() && !rhs_ty.references_error() {\n                     let source_map = self.tcx.sess.source_map();\n                     match is_assign {\n                         IsAssign::Yes => {"}, {"sha": "596ddcb43533ba2360545b5b43f7815a6d4ddf4d", "filename": "src/test/mir-opt/const_prop/scalar_literal_propagation/rustc.main.ConstProp.diff", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation%2Frustc.main.ConstProp.diff?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -22,20 +22,27 @@\n           StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n           StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n -         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n+-         _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n +         _3 = const 1u32;                 // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n-+                                          // ty::Const\n+                                           // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000001))\n +                                          // mir::Constant\n +                                          // + span: $DIR/scalar_literal_propagation.rs:4:13: 4:14\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n-          _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n-                                           // ty::Const\n++         _2 = const consume(const 1u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n++                                          // ty::Const\n                                            // + ty: fn(u32) {consume}\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(Scalar(<ZST>)) }\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:15\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {"}, {"sha": "0bd4ba97b3ca0b6ec6e63cbf892f51f562d36bae", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts/rustc.main.SimplifyLocals.diff", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -50,6 +50,7 @@\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:28: 13:29\n -         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+-         StorageLive(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n -         StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n -         _6 = const ();                   // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n -                                          // ty::Const\n@@ -66,6 +67,13 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         _5 = const ((), ());             // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n+-                                          // ty::Const\n+-                                          // + ty: ((), ())\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n+-                                          // + literal: Const { ty: ((), ()), val: Value(Scalar(<ZST>)) }\n -         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         _4 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n@@ -79,13 +87,15 @@\n                                            // + ty: ((), ())\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n                                            // + literal: Const { ty: ((), ()), val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n+-         StorageDead(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:21: 14:22\n -         StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n -         StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n+-         StorageLive(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n -         _11 = const Temp { x: 40u8 };    // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n@@ -105,6 +115,13 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -                                          // + literal: Const { ty: u8, val: Value(Scalar(0x28)) }\n+-         _9 = const 42u8;                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n+-                                          // ty::Const\n+-                                          // + ty: u8\n+-                                          // + val: Value(Scalar(0x2a))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n+-                                          // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n -         StorageDead(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:33: 16:34\n -         _8 = const use_u8(const 42u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n -                                          // ty::Const\n@@ -117,11 +134,12 @@\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x2a))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n       }\n   \n       bb2: {\n+-         StorageDead(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:34: 16:35\n -         StorageDead(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n -         StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n +         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36"}, {"sha": "2bacd6c9a9c5a3e47f0518c72d1614640c221aea", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+trait A {}\n+struct B;\n+impl A for B {}\n+\n+fn test<const T: &'static dyn A>() {\n+    //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    test::<{ &B }>();\n+}"}, {"sha": "c3db6c65a8f4c7e6441cc49f71c32c0ec6615f38", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-63322-forbid-dyn.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/issue-63322-forbid-dyn.rs:8:18\n+   |\n+LL | fn test<const T: &'static dyn A>() {\n+   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "08b10463d3927699119461181943f93513654960", "filename": "src/test/ui/issues-71798.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fissues-71798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fissues-71798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -0,0 +1,7 @@\n+fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n+    *x //~^ ERROR the trait bound `u32: std::future::Future` is not satisfied\n+}\n+\n+fn main() {\n+    let _ = test_ref & u; //~ ERROR cannot find value `u` in this scope\n+}"}, {"sha": "85da87914e768405e59bdb8bff42fdb53f122def", "filename": "src/test/ui/issues-71798.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fissues-71798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fissues-71798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.stderr?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -0,0 +1,20 @@\n+error[E0425]: cannot find value `u` in this scope\n+  --> $DIR/issues-71798.rs:6:24\n+   |\n+LL |     let _ = test_ref & u;\n+   |                        ^ not found in this scope\n+\n+error[E0277]: the trait bound `u32: std::future::Future` is not satisfied\n+  --> $DIR/issues-71798.rs:1:25\n+   |\n+LL | fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `u32`\n+LL |     *x\n+   |     -- this returned value is of type `u32`\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0425.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "a9b2699cafdc4956c95720b3554253ea69227dca", "filename": "src/test/ui/match/issue-70972-dyn-trait.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -0,0 +1,10 @@\n+const F: &'static dyn Send = &7u32;\n+\n+fn main() {\n+    let a: &dyn Send = &7u32;\n+    match a {\n+        F => panic!(),\n+        //~^ ERROR trait objects cannot be used in patterns\n+        _ => {}\n+    }\n+}"}, {"sha": "a4e827357de6bdfec3278c0283c295c794785f6c", "filename": "src/test/ui/match/issue-70972-dyn-trait.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2454a68cfbb63aa7b8e09fe05114d5f98b2f9740/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr?ref=2454a68cfbb63aa7b8e09fe05114d5f98b2f9740", "patch": "@@ -0,0 +1,8 @@\n+error: trait objects cannot be used in patterns\n+  --> $DIR/issue-70972-dyn-trait.rs:6:9\n+   |\n+LL |         F => panic!(),\n+   |         ^\n+\n+error: aborting due to previous error\n+"}]}