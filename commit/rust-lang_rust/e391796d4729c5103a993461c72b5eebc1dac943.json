{"sha": "e391796d4729c5103a993461c72b5eebc1dac943", "node_id": "C_kwDOAAsO6NoAKGUzOTE3OTZkNDcyOWM1MTAzYTk5MzQ2MWM3MmI1ZWViYzFkYWM5NDM", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-16T15:50:56Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-16T23:04:39Z"}, "message": "Better error", "tree": {"sha": "3c5d1a2dae9e8f69d8dbe142e93491c77d0e0dc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c5d1a2dae9e8f69d8dbe142e93491c77d0e0dc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e391796d4729c5103a993461c72b5eebc1dac943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e391796d4729c5103a993461c72b5eebc1dac943", "html_url": "https://github.com/rust-lang/rust/commit/e391796d4729c5103a993461c72b5eebc1dac943", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e391796d4729c5103a993461c72b5eebc1dac943/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82148cdc66d9c704c686d35840f70b213f0a1514", "url": "https://api.github.com/repos/rust-lang/rust/commits/82148cdc66d9c704c686d35840f70b213f0a1514", "html_url": "https://github.com/rust-lang/rust/commit/82148cdc66d9c704c686d35840f70b213f0a1514"}], "stats": {"total": 126, "additions": 81, "deletions": 45}, "files": [{"sha": "0ab9855d3250ad2aa5e0f5759895e89b0ea9707e", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e391796d4729c5103a993461c72b5eebc1dac943/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e391796d4729c5103a993461c72b5eebc1dac943/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e391796d4729c5103a993461c72b5eebc1dac943", "patch": "@@ -288,7 +288,6 @@ fn check_gat_where_clauses(\n         associated_items.in_definition_order().filter(|item| matches!(item.kind, ty::AssocKind::Fn))\n     {\n         let id = hir::HirId::make_owner(item.def_id.expect_local());\n-        let span = DUMMY_SP;\n         let param_env = tcx.param_env(item.def_id.expect_local());\n \n         let sig = tcx.fn_sig(item.def_id);\n@@ -308,7 +307,7 @@ fn check_gat_where_clauses(\n             for (ty, ty_idx) in &visitor.types {\n                 tcx.infer_ctxt().enter(|infcx| {\n                     let mut outlives_environment = OutlivesEnvironment::new(param_env);\n-                    outlives_environment.add_implied_bounds(&infcx, wf_tys.clone(), id, span);\n+                    outlives_environment.add_implied_bounds(&infcx, wf_tys.clone(), id, DUMMY_SP);\n                     outlives_environment.save_implied_bounds(id);\n                     let region_bound_pairs =\n                         outlives_environment.region_bound_pairs_map().get(&id).unwrap();\n@@ -349,7 +348,6 @@ fn check_gat_where_clauses(\n                             name: ty_param.name,\n                         }));\n                         let region_param = generics.param_at(*region_idx, tcx);\n-                        // Then create a clause that is required on the GAT\n                         let region_param =\n                             tcx.mk_region(ty::RegionKind::ReEarlyBound(ty::EarlyBoundRegion {\n                                 def_id: region_param.def_id,\n@@ -372,13 +370,35 @@ fn check_gat_where_clauses(\n     debug!(?clauses);\n     if !clauses.is_empty() {\n         let written_predicates: ty::GenericPredicates<'_> = tcx.predicates_of(trait_item.def_id);\n-        for clause in clauses {\n-            let found = written_predicates.predicates.iter().find(|p| p.0 == clause).is_some();\n-            debug!(?clause, ?found);\n-            let mut error = tcx\n-                .sess\n-                .struct_span_err(trait_item.generics.span, &format!(\"Missing bound: {}\", clause));\n-            error.emit();\n+        let clauses: Vec<_> = clauses\n+            .drain_filter(|clause| {\n+                written_predicates.predicates.iter().find(|p| &p.0 == clause).is_none()\n+            })\n+            .map(|clause| format!(\"{}\", clause))\n+            .collect();\n+        if !clauses.is_empty() {\n+            let mut err = tcx.sess.struct_span_err(\n+                trait_item.span,\n+                &format!(\"Missing required bounds on {}\", trait_item.ident),\n+            );\n+\n+            let suggestion = format!(\n+                \"{} {}\",\n+                if !trait_item.generics.where_clause.predicates.is_empty() {\n+                    \",\"\n+                } else {\n+                    \" where\"\n+                },\n+                clauses.join(\", \"),\n+            );\n+            err.span_suggestion(\n+                trait_item.generics.where_clause.tail_span_for_suggestion(),\n+                \"add the required where clauses\",\n+                suggestion,\n+                Applicability::MachineApplicable,\n+            );\n+\n+            err.emit()\n         }\n     }\n }"}, {"sha": "50afdc23631b9d4874d24ffb1fb5e043f53c18f4", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e391796d4729c5103a993461c72b5eebc1dac943/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e391796d4729c5103a993461c72b5eebc1dac943/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=e391796d4729c5103a993461c72b5eebc1dac943", "patch": "@@ -69,6 +69,7 @@ This API is completely unstable and subject to change.\n #![feature(never_type)]\n #![feature(slice_partition_dedup)]\n #![feature(control_flow_enum)]\n+#![feature(hash_drain_filter)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "76273c5249ec19c000dbe55adf50c915c6cb64df", "filename": "src/test/ui/generic-associated-types/self-outlives-lint.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e391796d4729c5103a993461c72b5eebc1dac943/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e391796d4729c5103a993461c72b5eebc1dac943/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs?ref=e391796d4729c5103a993461c72b5eebc1dac943", "patch": "@@ -2,9 +2,10 @@\n \n // check-fail\n \n+// We have a `&'a self`, so we need a `Self: 'a`\n trait Iterable {\n     type Item<'x>;\n-    //~^ Missing bound\n+    //~^ Missing required bounds\n     fn iter<'a>(&'a self) -> Self::Item<'a>;\n }\n \n@@ -17,9 +18,10 @@ impl<T> Iterable for T {\n }\n */\n \n+// We have a `&'a T`, so we need a `T: 'x`\n trait Deserializer<T> {\n     type Out<'x>;\n-    //~^ Missing bound\n+    //~^ Missing required bounds\n     fn deserialize<'a>(&self, input: &'a T) -> Self::Out<'a>;\n }\n \n@@ -30,56 +32,63 @@ impl<T> Deserializer<T> for () {\n }\n */\n \n+// We have a `&'b T` and a `'b: 'a`, so it is implied that `T: 'a`. Therefore, we need a `T: 'x`\n trait Deserializer2<T> {\n     type Out<'x>;\n-    //~^ Missing bound\n-    fn deserialize2<'a, 'b: 'a>(&self, input: &'a T, input2: &'b T) -> Self::Out<'a>;\n+    //~^ Missing required bounds\n+    fn deserialize2<'a, 'b: 'a>(&self, input1: &'b T) -> Self::Out<'a>;\n }\n \n+// We have a `&'a T` and a `&'b U`, so we need a `T: 'x` and a `U: 'y`\n trait Deserializer3<T, U> {\n     type Out<'x, 'y>;\n-    //~^ Missing bound\n-    //~^^ Missing bound\n+    //~^ Missing required bounds\n     fn deserialize2<'a, 'b>(&self, input: &'a T, input2: &'b U) -> Self::Out<'a, 'b>;\n }\n \n+// `T` is a param on the function, so it can't be named by the associated type\n trait Deserializer4 {\n     type Out<'x>;\n     fn deserialize<'a, T>(&self, input: &'a T) -> Self::Out<'a>;\n }\n \n struct Wrap<T>(T);\n \n+// Even though we might theoretically want `D: 'x`, because we pass `Wrap<T>` and\n+// we see `&'z Wrap<T>`, we are conservative and only add bounds for direct params\n trait Des {\n     type Out<'x, D>;\n     fn des<'z, T>(&self, data: &'z Wrap<T>) -> Self::Out<'z, Wrap<T>>;\n }\n /*\n impl Des for () {\n-    type Out<'x, D> = &'x D;\n+    type Out<'x, D> = &'x D; // Not okay\n     fn des<'a, T>(&self, data: &'a Wrap<T>) -> Self::Out<'a, Wrap<T>> {\n         data\n     }\n }\n */\n \n+// We have `T` and `'z` as GAT substs. Because of `&'z Wrap<T>`, there is an\n+// implied bound that `T: 'z`, so we require `D: 'x`\n trait Des2 {\n     type Out<'x, D>;\n-    //~^ Missing bound\n+    //~^ Missing required bounds\n     fn des<'z, T>(&self, data: &'z Wrap<T>) -> Self::Out<'z, T>;\n }\n /*\n impl Des2 for () {\n     type Out<'x, D> = &'x D;\n     fn des<'a, T>(&self, data: &'a Wrap<T>) -> Self::Out<'a, T> {\n-        data\n+        &data.0\n     }\n }\n */\n \n+// We see `&'z T`, so we require `D: 'x`\n trait Des3 {\n     type Out<'x, D>;\n-    //~^ Missing bound\n+    //~^ Missing required bounds\n     fn des<'z, T>(&self, data: &'z T) -> Self::Out<'z, T>;\n }\n /*"}, {"sha": "077c64421a8ce30b3e0c5d35c4099376ff637eda", "filename": "src/test/ui/generic-associated-types/self-outlives-lint.stderr", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e391796d4729c5103a993461c72b5eebc1dac943/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e391796d4729c5103a993461c72b5eebc1dac943/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr?ref=e391796d4729c5103a993461c72b5eebc1dac943", "patch": "@@ -1,44 +1,50 @@\n-error: Missing bound: Self: 'x\n-  --> $DIR/self-outlives-lint.rs:6:14\n+error: Missing required bounds on Item\n+  --> $DIR/self-outlives-lint.rs:7:5\n    |\n LL |     type Item<'x>;\n-   |              ^^^^\n+   |     ^^^^^^^^^^^^^-\n+   |                  |\n+   |                  help: add the required where clauses: `where Self: 'x`\n \n-error: Missing bound: T: 'x\n-  --> $DIR/self-outlives-lint.rs:21:13\n+error: Missing required bounds on Out\n+  --> $DIR/self-outlives-lint.rs:23:5\n    |\n LL |     type Out<'x>;\n-   |             ^^^^\n+   |     ^^^^^^^^^^^^-\n+   |                 |\n+   |                 help: add the required where clauses: `where T: 'x`\n \n-error: Missing bound: T: 'x\n-  --> $DIR/self-outlives-lint.rs:34:13\n+error: Missing required bounds on Out\n+  --> $DIR/self-outlives-lint.rs:37:5\n    |\n LL |     type Out<'x>;\n-   |             ^^^^\n+   |     ^^^^^^^^^^^^-\n+   |                 |\n+   |                 help: add the required where clauses: `where T: 'x`\n \n-error: Missing bound: U: 'y\n-  --> $DIR/self-outlives-lint.rs:40:13\n+error: Missing required bounds on Out\n+  --> $DIR/self-outlives-lint.rs:44:5\n    |\n LL |     type Out<'x, 'y>;\n-   |             ^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^-\n+   |                     |\n+   |                     help: add the required where clauses: `where U: 'y, T: 'x`\n \n-error: Missing bound: T: 'x\n-  --> $DIR/self-outlives-lint.rs:40:13\n-   |\n-LL |     type Out<'x, 'y>;\n-   |             ^^^^^^^^\n-\n-error: Missing bound: D: 'x\n-  --> $DIR/self-outlives-lint.rs:67:13\n+error: Missing required bounds on Out\n+  --> $DIR/self-outlives-lint.rs:75:5\n    |\n LL |     type Out<'x, D>;\n-   |             ^^^^^^^\n+   |     ^^^^^^^^^^^^^^^-\n+   |                    |\n+   |                    help: add the required where clauses: `where D: 'x`\n \n-error: Missing bound: D: 'x\n-  --> $DIR/self-outlives-lint.rs:81:13\n+error: Missing required bounds on Out\n+  --> $DIR/self-outlives-lint.rs:90:5\n    |\n LL |     type Out<'x, D>;\n-   |             ^^^^^^^\n+   |     ^^^^^^^^^^^^^^^-\n+   |                    |\n+   |                    help: add the required where clauses: `where D: 'x`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n "}]}