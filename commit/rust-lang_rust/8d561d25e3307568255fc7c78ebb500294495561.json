{"sha": "8d561d25e3307568255fc7c78ebb500294495561", "node_id": "C_kwDOAAsO6NoAKDhkNTYxZDI1ZTMzMDc1NjgyNTVmYzdjNzhlYmI1MDAyOTQ0OTU1NjE", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2022-04-24T15:04:31Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2022-04-24T15:04:31Z"}, "message": "Bless tests", "tree": {"sha": "1a98f2e880b24a16d219647af7fcd78ea30edf1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a98f2e880b24a16d219647af7fcd78ea30edf1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d561d25e3307568255fc7c78ebb500294495561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d561d25e3307568255fc7c78ebb500294495561", "html_url": "https://github.com/rust-lang/rust/commit/8d561d25e3307568255fc7c78ebb500294495561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d561d25e3307568255fc7c78ebb500294495561/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53120b59ae7871dfb1cb2b41f04944802fd534f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/53120b59ae7871dfb1cb2b41f04944802fd534f1", "html_url": "https://github.com/rust-lang/rust/commit/53120b59ae7871dfb1cb2b41f04944802fd534f1"}], "stats": {"total": 202, "additions": 136, "deletions": 66}, "files": [{"sha": "0059f729bae2fcb947bf9a84733533a4eeca270d", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -82,10 +82,11 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:41:5\n    |\n+LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n+   |                                 -- help: consider adding an explicit lifetime bound...: `T: 'static +`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 9 previous errors\n "}, {"sha": "5328b077993c5ae2056c4c447e222467b492a56d", "filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -1,10 +1,11 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/type_parameters_captured.rs:10:5\n    |\n+LL | fn foo<T>(x: T) -> impl Any + 'static {\n+   |        - help: consider adding an explicit lifetime bound...: `T: 'static`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "422673b361a95b2ebcdd73de1a64b8f20b83033f", "filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/issue_74400.rs:12:5\n    |\n+LL | fn g<T>(data: &[T]) {\n+   |      - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     f(data, identity)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0308]: mismatched types\n   --> $DIR/issue_74400.rs:12:5"}, {"sha": "b4435fe06bccca5de87f1d50a99492fd9468cb19", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -5,6 +5,7 @@ LL |     bar::<T::Output>()\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n+   = note: ...so that the type `<T as MyTrait<'_>>::Output` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "ddeaf3c1f9e8ca7947add0d32df76dcd5c13bcb2", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -5,6 +5,7 @@ LL |     bar::<<T as MyTrait<'a>>::Output>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n+   = note: ...so that the type `<T as MyTrait<'_>>::Output` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "f7dcaa9d97e7c83abfeacdd45494e64c036bda98", "filename": "src/test/ui/regions/regions-close-associated-type-into-object.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -5,6 +5,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:22:5\n@@ -13,6 +14,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:28:5\n@@ -21,6 +23,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:35:5\n@@ -29,6 +32,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6a2429e51ecdad24b7f61046a63ca6f5cc9578b5", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -1,26 +1,26 @@\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |     ^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: lifetime may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n@@ -42,10 +42,10 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:14\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |              ^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |              ^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: aborting due to 6 previous errors\n "}, {"sha": "54302cc6dca2243a9234c667ab70db41d8144b29", "filename": "src/test/ui/regions/regions-close-object-into-object-5.nll.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -1,26 +1,29 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n@@ -34,10 +37,11 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:14\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |              ^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |              ^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 5 previous errors\n "}, {"sha": "063c3b19a19cccc5bb96ea39e08196eb838a6295", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -1,18 +1,18 @@\n error[E0310]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:12:5\n    |\n+LL | fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n+   |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'static>\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'static`...\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n    |\n+LL | fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n+   |                         -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'b>\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'b`...\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f0464e299bbec169dcafab57725ae04f9742efc0", "filename": "src/test/ui/regions/regions-close-param-into-object.nll.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -1,34 +1,38 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:6:5\n    |\n+LL | fn p1<T>(v: T) -> Box<dyn X + 'static>\n+   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:12:5\n    |\n+LL | fn p2<T>(v: Box<T>) -> Box<dyn X + 'static>\n+   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:18:5\n    |\n+LL | fn p3<'a,T>(v: T) -> Box<dyn X + 'a>\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:24:5\n    |\n+LL | fn p4<'a,T>(v: Box<T>) -> Box<dyn X + 'a>\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0e1db8acf1fae7dc80f65f14306d13a585b007fb", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -1,10 +1,11 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-implied-bounds-projection-gap-1.rs:16:5\n    |\n+LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n+   |             -- help: consider adding an explicit lifetime bound...: `T: 'x +`\n+LL | {\n LL |     wf::<&'x T>();\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'x`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "e88f79a3a8c54c2d5dbb0b6f35832528a9ebf1b3", "filename": "src/test/ui/regions/regions-infer-bound-from-trait-self.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -5,6 +5,7 @@ LL |         check_bound(x, self)\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the type `Self` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "fe077499544048eb0399611dfc431ed06ffc3f81", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -1,18 +1,18 @@\n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:33:5\n    |\n+LL | fn bar1<'a,A>(x: Inv<'a>, a: A) {\n+   |            - help: consider adding an explicit lifetime bound...: `A: 'a`\n LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'a`...\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:37:5\n    |\n+LL | fn bar2<'a,'b,A:Is<'b>>(x: Inv<'a>, y: Inv<'b>, a: A) {\n+   |               -- help: consider adding an explicit lifetime bound...: `A: 'a +`\n LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'a`...\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d38d66c08853c44c3c5e40ac4971016ce5b92ebd", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.nll.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -1,6 +1,8 @@\n error[E0311]: the parameter type `T` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n    |\n+LL |   fn func<T: Test>(foo: &Foo, t: T) {\n+   |           -- help: consider adding an explicit lifetime bound...: `T: 'a +`\n LL | /     foo.bar(move |_| {\n LL | |\n LL | |         t.test();\n@@ -12,6 +14,14 @@ note: the parameter type `T` must be valid for the anonymous lifetime defined he\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n    |                        ^^^\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n+   |\n+LL | /     foo.bar(move |_| {\n+LL | |\n+LL | |         t.test();\n+LL | |     });\n+   | |______^\n \n error: aborting due to previous error\n "}, {"sha": "4a18e0a4f8bbdae43586fa01289f3277e01df8f3", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -26,6 +26,9 @@ LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:32:5\n    |\n+LL |   fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |          - help: consider adding an explicit lifetime bound...: `G: 'a`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n@@ -36,10 +39,20 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                          ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:32:5\n+   |\n+LL | /     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+   | |_____^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:55:5\n    |\n+LL |   fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |              -- help: consider adding an explicit lifetime bound...: `G: 'b +`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n@@ -50,10 +63,20 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                  ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:55:5\n+   |\n+LL | /     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+   | |_____^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:65:9\n    |\n+LL |       fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |                  -- help: consider adding an explicit lifetime bound...: `G: 'c +`\n+...\n LL | /         move || {\n LL | |             *dest = g.get();\n LL | |         }\n@@ -64,10 +87,20 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                               ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:65:9\n+   |\n+LL | /         move || {\n+LL | |             *dest = g.get();\n+LL | |         }\n+   | |_________^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:77:5\n    |\n+LL |   fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+   |              -- help: consider adding an explicit lifetime bound...: `G: 'b +`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n@@ -78,6 +111,13 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                  ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:77:5\n+   |\n+LL | /     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+   | |_____^\n \n error[E0621]: explicit lifetime required in the type of `dest`\n   --> $DIR/missing-lifetimes-in-signature.rs:77:5\n@@ -93,12 +133,13 @@ LL | |     }\n error[E0309]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:89:5\n    |\n+LL |   fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n+   |              - help: consider adding an explicit lifetime bound...: `G: 'a`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `G: 'a`...\n+   | |_____^ ...so that the type `G` will meet its required lifetime bounds\n \n error: aborting due to 8 previous errors\n "}, {"sha": "72354eaaee14722238109e763ec54448bcef449f", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d561d25e3307568255fc7c78ebb500294495561/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr?ref=8d561d25e3307568255fc7c78ebb500294495561", "patch": "@@ -1,10 +1,11 @@\n error[E0310]: the parameter type `impl Debug` may not live long enough\n   --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n    |\n+LL | fn foo(d: impl Debug) {\n+   |           ---------- help: consider adding an explicit lifetime bound...: `impl Debug + 'static`\n+LL |\n LL |     bar(d);\n-   |     ^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `impl Debug: 'static`...\n+   |     ^^^^^^ ...so that the type `impl Debug` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}]}