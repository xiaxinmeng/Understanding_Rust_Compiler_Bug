{"sha": "8dc0ae24bcafeb52259ae20fcad29185acf31fcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYzBhZTI0YmNhZmViNTIyNTlhZTIwZmNhZDI5MTg1YWNmMzFmY2M=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-14T11:54:34Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-14T11:54:34Z"}, "message": "Remove Option::{unwrap_none, expect_none}.", "tree": {"sha": "46ad0aa8536452498ba0510b89a8af16ddc267b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ad0aa8536452498ba0510b89a8af16ddc267b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dc0ae24bcafeb52259ae20fcad29185acf31fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc0ae24bcafeb52259ae20fcad29185acf31fcc", "html_url": "https://github.com/rust-lang/rust/commit/8dc0ae24bcafeb52259ae20fcad29185acf31fcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dc0ae24bcafeb52259ae20fcad29185acf31fcc/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f293f70dd848ae2371b6fad2eb9f4081e920da88", "url": "https://api.github.com/repos/rust-lang/rust/commits/f293f70dd848ae2371b6fad2eb9f4081e920da88", "html_url": "https://github.com/rust-lang/rust/commit/f293f70dd848ae2371b6fad2eb9f4081e920da88"}], "stats": {"total": 118, "additions": 10, "deletions": 108}, "files": [{"sha": "da2c0cf476d1637a5ffe6e770fd9023bbb936fad", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 93, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8dc0ae24bcafeb52259ae20fcad29185acf31fcc/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc0ae24bcafeb52259ae20fcad29185acf31fcc/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=8dc0ae24bcafeb52259ae20fcad29185acf31fcc", "patch": "@@ -150,7 +150,7 @@\n use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n use crate::pin::Pin;\n use crate::{\n-    fmt, hint, mem,\n+    hint, mem,\n     ops::{self, Deref, DerefMut},\n };\n \n@@ -1121,90 +1121,6 @@ impl<T: Clone> Option<&mut T> {\n     }\n }\n \n-impl<T: fmt::Debug> Option<T> {\n-    /// Consumes `self` while expecting [`None`] and returning nothing.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if the value is a [`Some`], with a panic message including the\n-    /// passed message, and the content of the [`Some`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(option_expect_none)]\n-    ///\n-    /// use std::collections::HashMap;\n-    /// let mut squares = HashMap::new();\n-    /// for i in -10..=10 {\n-    ///     // This will not panic, since all keys are unique.\n-    ///     squares.insert(i, i * i).expect_none(\"duplicate key\");\n-    /// }\n-    /// ```\n-    ///\n-    /// ```should_panic\n-    /// #![feature(option_expect_none)]\n-    ///\n-    /// use std::collections::HashMap;\n-    /// let mut sqrts = HashMap::new();\n-    /// for i in -10..=10 {\n-    ///     // This will panic, since both negative and positive `i` will\n-    ///     // insert the same `i * i` key, returning the old `Some(i)`.\n-    ///     sqrts.insert(i * i, i).expect_none(\"duplicate key\");\n-    /// }\n-    /// ```\n-    #[inline]\n-    #[track_caller]\n-    #[unstable(feature = \"option_expect_none\", reason = \"newly added\", issue = \"62633\")]\n-    pub fn expect_none(self, msg: &str) {\n-        if let Some(val) = self {\n-            expect_none_failed(msg, &val);\n-        }\n-    }\n-\n-    /// Consumes `self` while expecting [`None`] and returning nothing.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if the value is a [`Some`], with a custom panic message provided\n-    /// by the [`Some`]'s value.\n-    ///\n-    /// [`Some(v)`]: Some\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(option_unwrap_none)]\n-    ///\n-    /// use std::collections::HashMap;\n-    /// let mut squares = HashMap::new();\n-    /// for i in -10..=10 {\n-    ///     // This will not panic, since all keys are unique.\n-    ///     squares.insert(i, i * i).unwrap_none();\n-    /// }\n-    /// ```\n-    ///\n-    /// ```should_panic\n-    /// #![feature(option_unwrap_none)]\n-    ///\n-    /// use std::collections::HashMap;\n-    /// let mut sqrts = HashMap::new();\n-    /// for i in -10..=10 {\n-    ///     // This will panic, since both negative and positive `i` will\n-    ///     // insert the same `i * i` key, returning the old `Some(i)`.\n-    ///     sqrts.insert(i * i, i).unwrap_none();\n-    /// }\n-    /// ```\n-    #[inline]\n-    #[track_caller]\n-    #[unstable(feature = \"option_unwrap_none\", reason = \"newly added\", issue = \"62633\")]\n-    pub fn unwrap_none(self) {\n-        if let Some(val) = self {\n-            expect_none_failed(\"called `Option::unwrap_none()` on a `Some` value\", &val);\n-        }\n-    }\n-}\n-\n impl<T: Default> Option<T> {\n     /// Returns the contained [`Some`] value or a default\n     ///\n@@ -1321,14 +1237,6 @@ fn expect_failed(msg: &str) -> ! {\n     panic!(\"{}\", msg)\n }\n \n-// This is a separate function to reduce the code size of .expect_none() itself.\n-#[inline(never)]\n-#[cold]\n-#[track_caller]\n-fn expect_none_failed(msg: &str, value: &dyn fmt::Debug) -> ! {\n-    panic!(\"{}: {:?}\", msg, value)\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "4cd79687b53d4c372ace346ad2e67effc279ce91", "filename": "library/core/tests/iter/adapters/chain.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8dc0ae24bcafeb52259ae20fcad29185acf31fcc/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc0ae24bcafeb52259ae20fcad29185acf31fcc/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs?ref=8dc0ae24bcafeb52259ae20fcad29185acf31fcc", "patch": "@@ -174,14 +174,14 @@ fn test_iterator_chain_size_hint() {\n fn test_iterator_chain_unfused() {\n     // Chain shouldn't be fused in its second iterator, depending on direction\n     let mut iter = NonFused::new(empty()).chain(Toggle { is_empty: true });\n-    iter.next().unwrap_none();\n-    iter.next().unwrap();\n-    iter.next().unwrap_none();\n+    assert!(iter.next().is_none());\n+    assert!(iter.next().is_some());\n+    assert!(iter.next().is_none());\n \n     let mut iter = Toggle { is_empty: true }.chain(NonFused::new(empty()));\n-    iter.next_back().unwrap_none();\n-    iter.next_back().unwrap();\n-    iter.next_back().unwrap_none();\n+    assert!(iter.next_back().is_none());\n+    assert!(iter.next_back().is_some());\n+    assert!(iter.next_back().is_none());\n }\n \n #[test]"}, {"sha": "658658d7006f739c64720b3a5ab39034f7e4dbd6", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dc0ae24bcafeb52259ae20fcad29185acf31fcc/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc0ae24bcafeb52259ae20fcad29185acf31fcc/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=8dc0ae24bcafeb52259ae20fcad29185acf31fcc", "patch": "@@ -68,7 +68,6 @@\n #![feature(unwrap_infallible)]\n #![feature(option_result_unwrap_unchecked)]\n #![feature(result_into_ok_or_err)]\n-#![feature(option_unwrap_none)]\n #![feature(peekable_peek_mut)]\n #![cfg_attr(not(bootstrap), feature(ptr_metadata))]\n #![feature(once_cell)]"}, {"sha": "7683f792b8dbfbc0b483e8b30e2ab13eef7d36e0", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8dc0ae24bcafeb52259ae20fcad29185acf31fcc/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc0ae24bcafeb52259ae20fcad29185acf31fcc/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=8dc0ae24bcafeb52259ae20fcad29185acf31fcc", "patch": "@@ -25,7 +25,6 @@\n #![feature(nll)]\n #![feature(available_concurrency)]\n #![feature(internal_output_capture)]\n-#![feature(option_unwrap_none)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]\n #![feature(termination_trait_lib)]\n@@ -298,8 +297,9 @@ where\n             let test = remaining.pop().unwrap();\n             let event = TestEvent::TeWait(test.desc.clone());\n             notify_about_test_event(event)?;\n-            run_test(opts, !opts.run_tests, test, run_strategy, tx.clone(), Concurrent::No)\n-                .unwrap_none();\n+            let join_handle =\n+                run_test(opts, !opts.run_tests, test, run_strategy, tx.clone(), Concurrent::No);\n+            assert!(join_handle.is_none());\n             let completed_test = rx.recv().unwrap();\n \n             let event = TestEvent::TeResult(completed_test);"}, {"sha": "f0850d5c1f1e95ed85e2d24d40d9745da8362d3b", "filename": "src/test/ui/rfc-2091-track-caller/std-panic-locations.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8dc0ae24bcafeb52259ae20fcad29185acf31fcc/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc0ae24bcafeb52259ae20fcad29185acf31fcc/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs?ref=8dc0ae24bcafeb52259ae20fcad29185acf31fcc", "patch": "@@ -3,7 +3,6 @@\n // revisions: default mir-opt\n //[mir-opt] compile-flags: -Zmir-opt-level=4\n \n-#![feature(option_expect_none, option_unwrap_none)]\n #![allow(unconditional_panic)]\n \n //! Test that panic locations for `#[track_caller]` functions in std have the correct\n@@ -32,10 +31,6 @@ fn main() {\n     assert_panicked(|| nope.unwrap());\n     assert_panicked(|| nope.expect(\"\"));\n \n-    let yep: Option<()> = Some(());\n-    assert_panicked(|| yep.unwrap_none());\n-    assert_panicked(|| yep.expect_none(\"\"));\n-\n     let oops: Result<(), ()> = Err(());\n     assert_panicked(|| oops.unwrap());\n     assert_panicked(|| oops.expect(\"\"));"}]}