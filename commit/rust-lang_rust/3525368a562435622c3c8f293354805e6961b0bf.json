{"sha": "3525368a562435622c3c8f293354805e6961b0bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MjUzNjhhNTYyNDM1NjIyYzNjOGYyOTMzNTQ4MDVlNjk2MWIwYmY=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-04-01T04:48:15Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-07-27T14:26:36Z"}, "message": "Use str::repeat", "tree": {"sha": "b17fb0b57d142194d8b5ff62372994bff836c44d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b17fb0b57d142194d8b5ff62372994bff836c44d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3525368a562435622c3c8f293354805e6961b0bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3525368a562435622c3c8f293354805e6961b0bf", "html_url": "https://github.com/rust-lang/rust/commit/3525368a562435622c3c8f293354805e6961b0bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3525368a562435622c3c8f293354805e6961b0bf/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d0e93309d61636585cfe5ac75c0db8cb5ba03e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0e93309d61636585cfe5ac75c0db8cb5ba03e1", "html_url": "https://github.com/rust-lang/rust/commit/3d0e93309d61636585cfe5ac75c0db8cb5ba03e1"}], "stats": {"total": 65, "additions": 24, "deletions": 41}, "files": [{"sha": "3ad694e38adb082743d80045ebd0c08ba87f3fad", "filename": "src/libcore/tests/num/dec2flt/parse.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs?ref=3525368a562435622c3c8f293354805e6961b0bf", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::iter;\n use core::num::dec2flt::parse::{Decimal, parse_decimal};\n use core::num::dec2flt::parse::ParseResult::{Valid, Invalid};\n \n@@ -46,7 +45,7 @@ fn valid() {\n     assert_eq!(parse_decimal(\"1.e300\"), Valid(Decimal::new(b\"1\", b\"\", 300)));\n     assert_eq!(parse_decimal(\".1e300\"), Valid(Decimal::new(b\"\", b\"1\", 300)));\n     assert_eq!(parse_decimal(\"101e-33\"), Valid(Decimal::new(b\"101\", b\"\", -33)));\n-    let zeros: String = iter::repeat('0').take(25).collect();\n+    let zeros = \"0\".repeat(25);\n     let s = format!(\"1.5e{}\", zeros);\n     assert_eq!(parse_decimal(&s), Valid(Decimal::new(b\"1\", b\"5\", 0)));\n }"}, {"sha": "857cabe18b1e2360efeda3367ab2a1338d642d3f", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=3525368a562435622c3c8f293354805e6961b0bf", "patch": "@@ -17,7 +17,6 @@ use std::collections::HashMap;\n use std::ffi::CString;\n use std::fmt::Debug;\n use std::hash::{Hash, BuildHasher};\n-use std::iter::repeat;\n use std::panic;\n use std::env;\n use std::path::Path;\n@@ -219,7 +218,7 @@ fn print_time_passes_entry_internal(what: &str, dur: Duration) {\n         None => \"\".to_owned(),\n     };\n     println!(\"{}time: {}{}\\t{}\",\n-             repeat(\"  \").take(indentation).collect::<String>(),\n+             \"  \".repeat(indentation),\n              duration_to_secs_str(dur),\n              mem_string,\n              what);"}, {"sha": "d896df151a7dcf225fc6f7ffee2e2e1d4b9bb344", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=3525368a562435622c3c8f293354805e6961b0bf", "patch": "@@ -98,7 +98,6 @@ use std::error::Error;\n use std::ffi::OsString;\n use std::fmt::{self, Display};\n use std::io::{self, Read, Write};\n-use std::iter::repeat;\n use std::mem;\n use std::panic;\n use std::path::{PathBuf, Path};\n@@ -1253,9 +1252,7 @@ Available lint options:\n                              .max()\n                              .unwrap_or(0);\n     let padded = |x: &str| {\n-        let mut s = repeat(\" \")\n-                        .take(max_name_len - x.chars().count())\n-                        .collect::<String>();\n+        let mut s = \" \".repeat(max_name_len - x.chars().count());\n         s.push_str(x);\n         s\n     };\n@@ -1287,9 +1284,7 @@ Available lint options:\n                                         .unwrap_or(0));\n \n     let padded = |x: &str| {\n-        let mut s = repeat(\" \")\n-                        .take(max_name_len - x.chars().count())\n-                        .collect::<String>();\n+        let mut s = \" \".repeat(max_name_len - x.chars().count());\n         s.push_str(x);\n         s\n     };"}, {"sha": "a392278cab9822b6fe65e42e3e836d3262169b5d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=3525368a562435622c3c8f293354805e6961b0bf", "patch": "@@ -901,9 +901,7 @@ impl EmitterWriter {\n         //    |  |   length of label\n         //    |  magic `3`\n         //    `max_line_num_len`\n-        let padding = (0..padding + label.len() + 5)\n-            .map(|_| \" \")\n-            .collect::<String>();\n+        let padding = \" \".repeat(padding + label.len() + 5);\n \n         /// Return whether `style`, or the override if present and the style is `NoStyle`.\n         fn style_or_override(style: Style, override_style: Option<Style>) -> Style {"}, {"sha": "5d459557711854f03c8a71a2efd9d82307cf546a", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=3525368a562435622c3c8f293354805e6961b0bf", "patch": "@@ -32,7 +32,7 @@ use arena::TypedArena;\n \n use std::cmp::{self, Ordering};\n use std::fmt;\n-use std::iter::{FromIterator, IntoIterator, repeat};\n+use std::iter::{FromIterator, IntoIterator};\n \n pub fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pattern<'tcx>)\n                                 -> &'a Pattern<'tcx>\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> fmt::Debug for Matrix<'a, 'tcx> {\n         }).collect();\n \n         let total_width = column_widths.iter().cloned().sum::<usize>() + column_count * 3 + 1;\n-        let br = repeat('+').take(total_width).collect::<String>();\n+        let br = \"+\".repeat(total_width);\n         write!(f, \"{}\\n\", br)?;\n         for row in pretty_printed_matrix {\n             write!(f, \"+\")?;"}, {"sha": "0a25e9091deef8a639fbb2e6613e7587fc939971", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3525368a562435622c3c8f293354805e6961b0bf", "patch": "@@ -16,7 +16,6 @@\n //! them in the future to instead emit any format desired.\n \n use std::fmt;\n-use std::iter::repeat;\n \n use rustc::hir::def_id::DefId;\n use rustc_target::spec::abi::Abi;\n@@ -235,10 +234,9 @@ impl<'a> fmt::Display for WhereClause<'a> {\n \n         if !f.alternate() {\n             clause.push_str(\"</span>\");\n-            let padding = repeat(\"&nbsp;\").take(indent + 4).collect::<String>();\n+            let padding = \"&nbsp;\".repeat(indent + 4);\n             clause = clause.replace(\"<br>\", &format!(\"<br>{}\", padding));\n-            clause.insert_str(0, &repeat(\"&nbsp;\").take(indent.saturating_sub(1))\n-                                                  .collect::<String>());\n+            clause.insert_str(0, &\"&nbsp;\".repeat(indent.saturating_sub(1)));\n             if !end_newline {\n                 clause.insert_str(0, \"<br>\");\n             }\n@@ -409,13 +407,13 @@ pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n     let loc = CURRENT_LOCATION_KEY.with(|l| l.borrow().clone());\n     let (fqp, shortty, mut url) = match cache.paths.get(&did) {\n         Some(&(ref fqp, shortty)) => {\n-            (fqp, shortty, repeat(\"../\").take(loc.len()).collect())\n+            (fqp, shortty, \"../\".repeat(loc.len()))\n         }\n         None => {\n             let &(ref fqp, shortty) = cache.external_paths.get(&did)?;\n             (fqp, shortty, match cache.extern_locations[&did.krate] {\n                 (.., render::Remote(ref s)) => s.to_string(),\n-                (.., render::Local) => repeat(\"../\").take(loc.len()).collect(),\n+                (.., render::Local) => \"../\".repeat(loc.len()),\n                 (.., render::Unknown) => return None,\n             })\n         }\n@@ -481,7 +479,7 @@ fn primitive_link(f: &mut fmt::Formatter,\n                 let len = CURRENT_LOCATION_KEY.with(|s| s.borrow().len());\n                 let len = if len == 0 {0} else {len - 1};\n                 write!(f, \"<a class=\\\"primitive\\\" href=\\\"{}primitive.{}.html\\\">\",\n-                       repeat(\"../\").take(len).collect::<String>(),\n+                       \"../\".repeat(len),\n                        prim.to_url_str())?;\n                 needs_termination = true;\n             }\n@@ -492,7 +490,7 @@ fn primitive_link(f: &mut fmt::Formatter,\n                     }\n                     (ref cname, _, render::Local) => {\n                         let len = CURRENT_LOCATION_KEY.with(|s| s.borrow().len());\n-                        Some((cname, repeat(\"../\").take(len).collect::<String>()))\n+                        Some((cname, \"../\".repeat(len)))\n                     }\n                     (.., render::Unknown) => None,\n                 };\n@@ -903,15 +901,15 @@ impl<'a> fmt::Display for Method<'a> {\n             format!(\"{}\", decl.output)\n         };\n \n-        let pad = repeat(\" \").take(name_len).collect::<String>();\n+        let pad = \" \".repeat(name_len);\n         let plain = format!(\"{pad}({args}){arrow}\",\n                         pad = pad,\n                         args = args_plain,\n                         arrow = arrow_plain);\n \n         let output = if plain.len() > 80 {\n-            let full_pad = format!(\"<br>{}\", repeat(\"&nbsp;\").take(indent + 4).collect::<String>());\n-            let close_pad = format!(\"<br>{}\", repeat(\"&nbsp;\").take(indent).collect::<String>());\n+            let full_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent + 4));\n+            let close_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent));\n             format!(\"({args}{close}){arrow}\",\n                     args = args.replace(\"<br>\", &full_pad),\n                     close = close_pad,"}, {"sha": "c06323b22dc80b68d17a55e3151cb9a3dbfc2756", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3525368a562435622c3c8f293354805e6961b0bf", "patch": "@@ -46,7 +46,6 @@ use std::ffi::OsStr;\n use std::fs::{self, File, OpenOptions};\n use std::io::prelude::*;\n use std::io::{self, BufWriter, BufReader};\n-use std::iter::repeat;\n use std::mem;\n use std::path::{PathBuf, Path, Component};\n use std::str;\n@@ -1712,7 +1711,7 @@ impl Context {\n     /// String representation of how to get back to the root path of the 'doc/'\n     /// folder in terms of a relative URL.\n     fn root_path(&self) -> String {\n-        repeat(\"../\").take(self.current.len()).collect::<String>()\n+        \"../\".repeat(self.current.len())\n     }\n \n     /// Recurse in the directory structure and change the \"root path\" to make\n@@ -2113,8 +2112,7 @@ impl<'a> fmt::Display for Item<'a> {\n             let amt = if self.item.is_mod() { cur.len() - 1 } else { cur.len() };\n             for (i, component) in cur.iter().enumerate().take(amt) {\n                 write!(fmt, \"<a href='{}index.html'>{}</a>::<wbr>\",\n-                       repeat(\"../\").take(cur.len() - i - 1)\n-                                    .collect::<String>(),\n+                       \"../\".repeat(cur.len() - i - 1),\n                        component)?;\n             }\n         }"}, {"sha": "8acb8a46d7bf229ff81105161c44a03fb25b659e", "filename": "src/libstd/tests/env.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibstd%2Ftests%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibstd%2Ftests%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftests%2Fenv.rs?ref=3525368a562435622c3c8f293354805e6961b0bf", "patch": "@@ -11,7 +11,6 @@\n extern crate rand;\n \n use std::env::*;\n-use std::iter::repeat;\n use std::ffi::{OsString, OsStr};\n \n use rand::Rng;\n@@ -72,7 +71,7 @@ fn test_var_big() {\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n fn test_env_set_get_huge() {\n     let n = make_rand_name();\n-    let s = repeat(\"x\").take(10000).collect::<String>();\n+    let s = \"x\".repeat(10000);\n     set_var(&n, &s);\n     eq(var_os(&n), Some(&s));\n     remove_var(&n);"}, {"sha": "0ef390beac9508535cabee3dc7f798279198c684", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3525368a562435622c3c8f293354805e6961b0bf", "patch": "@@ -32,7 +32,7 @@ use tokenstream::{self, TokenStream, TokenTree};\n \n use std::ascii;\n use std::io::{self, Write, Read};\n-use std::iter::{self, Peekable};\n+use std::iter::Peekable;\n use std::vec;\n \n pub enum AnnNode<'a> {\n@@ -235,11 +235,11 @@ pub fn token_to_string(tok: &Token) -> String {\n                 token::Integer(c)        => c.to_string(),\n                 token::Str_(s)           => format!(\"\\\"{}\\\"\", s),\n                 token::StrRaw(s, n)      => format!(\"r{delim}\\\"{string}\\\"{delim}\",\n-                                                    delim=repeat(\"#\", n as usize),\n+                                                    delim=\"#\".repeat(n as usize),\n                                                     string=s),\n                 token::ByteStr(v)         => format!(\"b\\\"{}\\\"\", v),\n                 token::ByteStrRaw(s, n)   => format!(\"br{delim}\\\"{string}\\\"{delim}\",\n-                                                    delim=repeat(\"#\", n as usize),\n+                                                    delim=\"#\".repeat(n as usize),\n                                                     string=s),\n             };\n \n@@ -661,7 +661,7 @@ pub trait PrintState<'a> {\n             }\n             ast::StrStyle::Raw(n) => {\n                 (format!(\"r{delim}\\\"{string}\\\"{delim}\",\n-                         delim=repeat(\"#\", n as usize),\n+                         delim=\"#\".repeat(n as usize),\n                          string=st))\n             }\n         };\n@@ -3180,8 +3180,6 @@ impl<'a> State<'a> {\n     }\n }\n \n-fn repeat(s: &str, n: usize) -> String { iter::repeat(s).take(n).collect() }\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "9f670de4f5b4817d646c517511ce32876525a620", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3525368a562435622c3c8f293354805e6961b0bf/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=3525368a562435622c3c8f293354805e6961b0bf", "patch": "@@ -66,7 +66,6 @@ use std::fmt;\n use std::fs::File;\n use std::io::prelude::*;\n use std::io;\n-use std::iter::repeat;\n use std::path::PathBuf;\n use std::process::Termination;\n use std::sync::mpsc::{channel, Sender};\n@@ -145,7 +144,7 @@ impl TestDesc {\n     fn padded_name(&self, column_count: usize, align: NamePadding) -> String {\n         let mut name = String::from(self.name.as_slice());\n         let fill = column_count.saturating_sub(name.len());\n-        let pad = repeat(\" \").take(fill).collect::<String>();\n+        let pad = \" \".repeat(fill);\n         match align {\n             PadNone => name,\n             PadOnRight => {"}]}