{"sha": "7022ede9b338fcd7429977c4cd0d01ca76aecb5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMjJlZGU5YjMzOGZjZDc0Mjk5NzdjNGNkMGQwMWNhNzZhZWNiNWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-20T23:37:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-25T12:45:52Z"}, "message": "make unique pointers inherit mutability from owner", "tree": {"sha": "41728cb1d65152f3a305d75203e2094917ba352c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41728cb1d65152f3a305d75203e2094917ba352c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7022ede9b338fcd7429977c4cd0d01ca76aecb5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7022ede9b338fcd7429977c4cd0d01ca76aecb5f", "html_url": "https://github.com/rust-lang/rust/commit/7022ede9b338fcd7429977c4cd0d01ca76aecb5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7022ede9b338fcd7429977c4cd0d01ca76aecb5f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcd9734190858050e544d103d7bd44f138ad949", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcd9734190858050e544d103d7bd44f138ad949", "html_url": "https://github.com/rust-lang/rust/commit/3bcd9734190858050e544d103d7bd44f138ad949"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "f5879145a9d481fb081b10d101dd5b63052a3750", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7022ede9b338fcd7429977c4cd0d01ca76aecb5f/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7022ede9b338fcd7429977c4cd0d01ca76aecb5f/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=7022ede9b338fcd7429977c4cd0d01ca76aecb5f", "patch": "@@ -97,7 +97,7 @@ fn deref_kind(tcx: ty::ctxt, t: ty::t) -> deref_kind {\n \n impl public_methods for borrowck_ctxt {\n     fn cat_borrow_of_expr(expr: @ast::expr) -> cmt {\n-        // a borrowed expression must be either an @, ~, or a vec/@, vec/~\n+        // a borrowed expression must be either an @, ~, or a @vec, ~vec\n         let expr_ty = ty::expr_ty(self.tcx, expr);\n         alt ty::get(expr_ty).struct {\n           ty::ty_evec(*) | ty::ty_estr(*) {\n@@ -109,6 +109,12 @@ impl public_methods for borrowck_ctxt {\n             self.cat_deref(expr, cmt, 0u, true).get()\n           }\n \n+          /*\n+          ty::ty_fn({proto, _}) {\n+            self.cat_call(expr, expr, proto)\n+          }\n+          */\n+\n           _ {\n             self.tcx.sess.span_bug(\n                 expr.span,\n@@ -341,9 +347,20 @@ impl public_methods for borrowck_ctxt {\n                     }\n                 };\n \n+                // for unique ptrs, we inherit mutability from the\n+                // owning reference.\n+                let m = alt ptr {\n+                  uniq_ptr => {\n+                    self.inherited_mutability(base_cmt.mutbl, mt.mutbl)\n+                  }\n+                  gc_ptr | region_ptr | unsafe_ptr => {\n+                    mt.mutbl\n+                  }\n+                };\n+\n                 @{id:node.id(), span:node.span(),\n                   cat:cat_deref(base_cmt, derefs, ptr), lp:lp,\n-                  mutbl:mt.mutbl, ty:mt.ty}\n+                  mutbl:m, ty:mt.ty}\n               }\n \n               deref_comp(comp) {\n@@ -379,27 +396,38 @@ impl public_methods for borrowck_ctxt {\n               _ => {none}\n             };\n \n-            // (b) the deref is explicit in the resulting cmt\n+            // (b) for unique ptrs, we inherit mutability from the\n+            // owning reference.\n+            let m = alt ptr {\n+              uniq_ptr => {\n+                self.inherited_mutability(base_cmt.mutbl, mt.mutbl)\n+              }\n+              gc_ptr | region_ptr | unsafe_ptr => {\n+                mt.mutbl\n+              }\n+            };\n+\n+            // (c) the deref is explicit in the resulting cmt\n             let deref_cmt = @{id:expr.id, span:expr.span,\n               cat:cat_deref(base_cmt, 0u, ptr), lp:deref_lp,\n-              mutbl:m_imm, ty:mt.ty};\n+              mutbl:m, ty:mt.ty};\n \n-            comp(expr, deref_cmt, base_cmt.ty, mt)\n+            comp(expr, deref_cmt, base_cmt.ty, m, mt.ty)\n           }\n \n           deref_comp(_) {\n             // fixed-length vectors have no deref\n-            comp(expr, base_cmt, base_cmt.ty, mt)\n+            comp(expr, base_cmt, base_cmt.ty, mt.mutbl, mt.ty)\n           }\n         };\n \n         fn comp(expr: @ast::expr, of_cmt: cmt,\n-                vect: ty::t, mt: ty::mt) -> cmt {\n-            let comp = comp_index(vect, mt.mutbl);\n+                vect: ty::t, mutbl: ast::mutability, ty: ty::t) -> cmt {\n+            let comp = comp_index(vect, mutbl);\n             let index_lp = of_cmt.lp.map(|lp| @lp_comp(lp, comp) );\n             @{id:expr.id, span:expr.span,\n               cat:cat_comp(of_cmt, comp), lp:index_lp,\n-              mutbl:mt.mutbl, ty:mt.ty}\n+              mutbl:mutbl, ty:ty}\n         }\n     }\n "}]}