{"sha": "d4bf59b6ef24042653951b69105a3a68542f3bbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YmY1OWI2ZWYyNDA0MjY1Mzk1MWI2OTEwNWEzYTY4NTQyZjNiYmQ=", "commit": {"author": {"name": "Marijn Suijten", "email": "marijn@traverseresearch.nl", "date": "2021-01-12T10:35:44Z"}, "committer": {"name": "Marijn Suijten", "email": "marijn@traverseresearch.nl", "date": "2021-01-19T19:05:40Z"}, "message": "size_of_in_element_count: Disable lint on division by byte-size\n\nIt is fairly common to divide some length in bytes by the byte-size of a\nsingle element before creating a `from_raw_parts` slice or similar\noperation. This lint would erroneously disallow such expressions.\n\nJust in case, instead of simply disabling this lint in the RHS of a\ndivision, keep track of the inversion and enable it again on recursive\ndivision.", "tree": {"sha": "2fad486ca92efe97679f76e2022f2584929325e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fad486ca92efe97679f76e2022f2584929325e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4bf59b6ef24042653951b69105a3a68542f3bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bf59b6ef24042653951b69105a3a68542f3bbd", "html_url": "https://github.com/rust-lang/rust/commit/d4bf59b6ef24042653951b69105a3a68542f3bbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4bf59b6ef24042653951b69105a3a68542f3bbd/comments", "author": {"login": "MarijnS95", "id": 2325264, "node_id": "MDQ6VXNlcjIzMjUyNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2325264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarijnS95", "html_url": "https://github.com/MarijnS95", "followers_url": "https://api.github.com/users/MarijnS95/followers", "following_url": "https://api.github.com/users/MarijnS95/following{/other_user}", "gists_url": "https://api.github.com/users/MarijnS95/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarijnS95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarijnS95/subscriptions", "organizations_url": "https://api.github.com/users/MarijnS95/orgs", "repos_url": "https://api.github.com/users/MarijnS95/repos", "events_url": "https://api.github.com/users/MarijnS95/events{/privacy}", "received_events_url": "https://api.github.com/users/MarijnS95/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MarijnS95", "id": 2325264, "node_id": "MDQ6VXNlcjIzMjUyNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2325264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarijnS95", "html_url": "https://github.com/MarijnS95", "followers_url": "https://api.github.com/users/MarijnS95/followers", "following_url": "https://api.github.com/users/MarijnS95/following{/other_user}", "gists_url": "https://api.github.com/users/MarijnS95/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarijnS95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarijnS95/subscriptions", "organizations_url": "https://api.github.com/users/MarijnS95/orgs", "repos_url": "https://api.github.com/users/MarijnS95/repos", "events_url": "https://api.github.com/users/MarijnS95/events{/privacy}", "received_events_url": "https://api.github.com/users/MarijnS95/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "391bb218b5a79f32ddfacc668838fdfb06835f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/391bb218b5a79f32ddfacc668838fdfb06835f77", "html_url": "https://github.com/rust-lang/rust/commit/391bb218b5a79f32ddfacc668838fdfb06835f77"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "87e386baadc54ec34190b868d9e2ec0a921d444b", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4bf59b6ef24042653951b69105a3a68542f3bbd/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bf59b6ef24042653951b69105a3a68542f3bbd/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=d4bf59b6ef24042653951b69105a3a68542f3bbd", "patch": "@@ -35,10 +35,11 @@ declare_clippy_lint! {\n \n declare_lint_pass!(SizeOfInElementCount => [SIZE_OF_IN_ELEMENT_COUNT]);\n \n-fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<Ty<'tcx>> {\n+fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, inverted: bool) -> Option<Ty<'tcx>> {\n     match expr.kind {\n         ExprKind::Call(count_func, _func_args) => {\n             if_chain! {\n+                if !inverted;\n                 if let ExprKind::Path(ref count_func_qpath) = count_func.kind;\n                 if let Some(def_id) = cx.qpath_res(count_func_qpath, count_func.hir_id).opt_def_id();\n                 if match_def_path(cx, def_id, &paths::MEM_SIZE_OF)\n@@ -50,10 +51,13 @@ fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<Ty<'tc\n                 }\n             }\n         },\n-        ExprKind::Binary(op, left, right) if BinOpKind::Mul == op.node || BinOpKind::Div == op.node => {\n-            get_size_of_ty(cx, left).or_else(|| get_size_of_ty(cx, right))\n+        ExprKind::Binary(op, left, right) if BinOpKind::Mul == op.node => {\n+            get_size_of_ty(cx, left, inverted).or_else(|| get_size_of_ty(cx, right, inverted))\n         },\n-        ExprKind::Cast(expr, _) => get_size_of_ty(cx, expr),\n+        ExprKind::Binary(op, left, right) if BinOpKind::Div == op.node => {\n+            get_size_of_ty(cx, left, inverted).or_else(|| get_size_of_ty(cx, right, !inverted))\n+        },\n+        ExprKind::Cast(expr, _) => get_size_of_ty(cx, expr, inverted),\n         _ => None,\n     }\n }\n@@ -128,7 +132,7 @@ impl<'tcx> LateLintPass<'tcx> for SizeOfInElementCount {\n \n             // Find a size_of call in the count parameter expression and\n             // check that it's the same type\n-            if let Some(ty_used_for_size_of) = get_size_of_ty(cx, count_expr);\n+            if let Some(ty_used_for_size_of) = get_size_of_ty(cx, count_expr, false);\n             if TyS::same_type(pointee_ty, ty_used_for_size_of);\n             then {\n                 span_lint_and_help("}, {"sha": "2594e8fa6ad3e79da5455c23658eb8b1304f765b", "filename": "tests/ui/size_of_in_element_count/expressions.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4bf59b6ef24042653951b69105a3a68542f3bbd/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bf59b6ef24042653951b69105a3a68542f3bbd/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.rs?ref=d4bf59b6ef24042653951b69105a3a68542f3bbd", "patch": "@@ -20,6 +20,15 @@ fn main() {\n     // Count expression involving divisions of size_of (Should trigger the lint)\n     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n \n+    // Count expression involving divisions by size_of (Should not trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / size_of::<u8>()) };\n+\n+    // Count expression involving divisions by multiple size_of (Should not trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / (2 * size_of::<u8>())) };\n+\n+    // Count expression involving recursive divisions by size_of (Should trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / (2 / size_of::<u8>())) };\n+\n     // No size_of calls (Should not trigger the lint)\n     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n "}, {"sha": "0f0dff57f51bd4730a7f39e2553635b80418f88c", "filename": "tests/ui/size_of_in_element_count/expressions.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4bf59b6ef24042653951b69105a3a68542f3bbd/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bf59b6ef24042653951b69105a3a68542f3bbd/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr?ref=d4bf59b6ef24042653951b69105a3a68542f3bbd", "patch": "@@ -23,5 +23,13 @@ LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>()\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: aborting due to 3 previous errors\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/expressions.rs:30:47\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / (2 / size_of::<u8>())) };\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: aborting due to 4 previous errors\n "}]}