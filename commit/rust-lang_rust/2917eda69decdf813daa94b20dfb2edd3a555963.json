{"sha": "2917eda69decdf813daa94b20dfb2edd3a555963", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MTdlZGE2OWRlY2RmODEzZGFhOTRiMjBkZmIyZWRkM2E1NTU5NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-29T16:48:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-29T16:48:45Z"}, "message": "Auto merge of #80839 - tblah:riscv64linux_links, r=Mark-Simulacrum\n\nRiscv64linux Test fixes\n\nGet tests passing again using the riscv64gc-unknown-linux-gnu docker image.\n\nTest with\n```\nsrc/ci/docker/run.sh riscv64gc-linux\n```\n\n## linkcheck\nLinkcheck tests that interdocument links in the documentation are correct. Some interdocument links go between rustc and tools (such as rustdoc and cargo). When cross compiling, rustc is built for the host while some tools are built for the target. This goes for the documentation too. Because of this, links in the rustc documentation reffering to cargo or rustdoc documentation look broken.\n\nThis issue is worked around by disabling linkcheck for cross compilation builds.\n\n## run-make tests\n\n#78911 seems to happen because `--target` was not passed to `rustc`, but the target linker was specified, causing the target linker to be called with options intended for the host.\n\nResolves #78911\n\nIn a separate issue, `issue-36710` was trying to run a binary built for the target on the host system. This will not work for any platform using `remote-test-server`/`client` (such as riscv64). I don't know of a way of skipping those platforms specifically, so I set this test to skip only on riscv64 for now.", "tree": {"sha": "809716f2de1aed3e07a4634a48bdd87d97bb9b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/809716f2de1aed3e07a4634a48bdd87d97bb9b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2917eda69decdf813daa94b20dfb2edd3a555963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2917eda69decdf813daa94b20dfb2edd3a555963", "html_url": "https://github.com/rust-lang/rust/commit/2917eda69decdf813daa94b20dfb2edd3a555963", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2917eda69decdf813daa94b20dfb2edd3a555963/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7750402c5eaf9ed0a73cb34c8483df245c36ac7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7750402c5eaf9ed0a73cb34c8483df245c36ac7b", "html_url": "https://github.com/rust-lang/rust/commit/7750402c5eaf9ed0a73cb34c8483df245c36ac7b"}, {"sha": "1fa48cf181f1fe7e1aba133be199804c652fe55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa48cf181f1fe7e1aba133be199804c652fe55c", "html_url": "https://github.com/rust-lang/rust/commit/1fa48cf181f1fe7e1aba133be199804c652fe55c"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "f4976f2f436fcf6f6d67509d4175655a9ab59b5a", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=2917eda69decdf813daa94b20dfb2edd3a555963", "patch": "@@ -122,7 +122,21 @@ impl Step for Linkcheck {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.path(\"src/tools/linkchecker\").default_condition(builder.config.docs)\n+        let run = run.path(\"src/tools/linkchecker\");\n+        let hosts = &builder.hosts;\n+        let targets = &builder.targets;\n+\n+        // if we have different hosts and targets, some things may be built for\n+        // the host (e.g. rustc) and others for the target (e.g. std). The\n+        // documentation built for each will contain broken links to\n+        // docs built for the other platform (e.g. rustc linking to cargo)\n+        if (hosts != targets) && !hosts.is_empty() && !targets.is_empty() {\n+            panic!(\n+                \"Linkcheck currently does not support builds with different hosts and targets.\n+You can skip linkcheck with --exclude src/tools/linkchecker\"\n+            );\n+        }\n+        run.default_condition(builder.config.docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "4377608700b0c6c891447c61a819598bba5f0590", "filename": "src/ci/docker/host-x86_64/disabled/riscv64gc-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Friscv64gc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Friscv64gc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Friscv64gc-linux%2FDockerfile?ref=2917eda69decdf813daa94b20dfb2edd3a555963", "patch": "@@ -98,6 +98,6 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS --qemu-riscv64-rootfs=/tmp/rootfs\n-ENV SCRIPT python3 ../x.py --stage 2 test --target riscv64gc-unknown-linux-gnu\n+ENV SCRIPT python3 ../x.py --stage 2 test --host='' --target riscv64gc-unknown-linux-gnu\n \n ENV NO_CHANGE_USER=1"}, {"sha": "c34198708c4628761c7857fd51c18b8527a29197", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-10/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-10%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-10%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-10%2FDockerfile?ref=2917eda69decdf813daa94b20dfb2edd3a555963", "patch": "@@ -46,6 +46,7 @@ ENV SCRIPT python2.7 ../x.py --stage 2 test --exclude src/tools/tidy && \\\n            # This is intended to make sure that both `--pass=check` continues to\n            # work.\n            #\n-           python2.7 ../x.py --stage 2 test src/test/ui --pass=check --target=i686-unknown-linux-gnu && \\\n+           python2.7 ../x.py --stage 2 test src/test/ui --pass=check \\\n+                             --host='' --target=i686-unknown-linux-gnu && \\\n            # Run tidy at the very end, after all the other tests.\n            python2.7 ../x.py --stage 2 test src/tools/tidy"}, {"sha": "24eea3acaeacd4a1f4ec798f95c9fff3dc19dc20", "filename": "src/test/run-make/incr-prev-body-beyond-eof/Makefile", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Ftest%2Frun-make%2Fincr-prev-body-beyond-eof%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Ftest%2Frun-make%2Fincr-prev-body-beyond-eof%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fincr-prev-body-beyond-eof%2FMakefile?ref=2917eda69decdf813daa94b20dfb2edd3a555963", "patch": "@@ -1,7 +1,7 @@\n-include ../../run-make-fulldeps/tools.mk\n+# ignore-none no-std is not supported\n+# ignore-nvptx64-nvidia-cuda FIXME: can't find crate for `std`\n \n-# FIXME https://github.com/rust-lang/rust/issues/78911\n-# ignore-32bit wrong/no cross compiler and sometimes we pass wrong gcc args (-m64)\n+include ../../run-make-fulldeps/tools.mk\n \n # Tests that we don't ICE during incremental compilation after modifying a\n # function span such that its previous end line exceeds the number of lines\n@@ -14,6 +14,6 @@ all:\n \tmkdir $(SRC)\n \tmkdir $(INCR)\n \tcp a.rs $(SRC)/main.rs\n-\t$(RUSTC) -C incremental=$(INCR) $(SRC)/main.rs\n+\t$(RUSTC) -C incremental=$(INCR) $(SRC)/main.rs --target $(TARGET)\n \tcp b.rs $(SRC)/main.rs\n-\t$(RUSTC) -C incremental=$(INCR) $(SRC)/main.rs\n+\t$(RUSTC) -C incremental=$(INCR) $(SRC)/main.rs --target $(TARGET)"}, {"sha": "b5270ad2ba9d43fe5492b65219ca99dd74739f59", "filename": "src/test/run-make/issue-36710/Makefile", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Ftest%2Frun-make%2Fissue-36710%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Ftest%2Frun-make%2Fissue-36710%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-36710%2FMakefile?ref=2917eda69decdf813daa94b20dfb2edd3a555963", "patch": "@@ -1,13 +1,20 @@\n-include ../../run-make-fulldeps/tools.mk\n+# ignore-riscv64 $(call RUN,foo) expects to run the target executable natively\n+#                              so it won't work with remote-test-server\n+# ignore-arm Another build using remote-test-server\n+# ignore-none no-std is not supported\n+# ignore-wasm32 FIXME: don't attempt to compile C++ to WASM\n+# ignore-wasm64 FIXME: don't attempt to compile C++ to WASM\n+# ignore-nvptx64-nvidia-cuda FIXME: can't find crate for `std`\n+# ignore-musl FIXME: this makefile needs teaching how to use a musl toolchain\n+#                    (see dist-i586-gnu-i586-i686-musl Dockerfile)\n \n-# FIXME https://github.com/rust-lang/rust/issues/78911\n-# ignore-32bit wrong/no cross compiler and sometimes we pass wrong gcc args (-m64)\n+include ../../run-make-fulldeps/tools.mk\n \n all: foo\n \t$(call RUN,foo)\n \n foo: foo.rs $(call NATIVE_STATICLIB,foo)\n-\t$(RUSTC) $< -lfoo $(EXTRARSCXXFLAGS)\n+\t$(RUSTC) $< -lfoo $(EXTRARSCXXFLAGS) --target $(TARGET)\n \n $(TMPDIR)/libfoo.o: foo.cpp\n \t$(call COMPILE_OBJ_CXX,$@,$<)"}, {"sha": "2f796e5b2fc0754e1552584c220ff4dfc76704df", "filename": "src/test/run-make/issue-83112-incr-test-moved-file/Makefile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Ftest%2Frun-make%2Fissue-83112-incr-test-moved-file%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2917eda69decdf813daa94b20dfb2edd3a555963/src%2Ftest%2Frun-make%2Fissue-83112-incr-test-moved-file%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-83112-incr-test-moved-file%2FMakefile?ref=2917eda69decdf813daa94b20dfb2edd3a555963", "patch": "@@ -1,7 +1,7 @@\n include ../../run-make-fulldeps/tools.mk\n \n-# FIXME https://github.com/rust-lang/rust/issues/78911\n-# ignore-32bit wrong/no cross compiler and sometimes we pass wrong gcc args (-m64)\n+# ignore-none no-std is not supported\n+# ignore-nvptx64-nvidia-cuda FIXME: can't find crate for 'std'\n \n # Regression test for issue #83112\n # The generated test harness code contains spans with a dummy location,\n@@ -20,6 +20,6 @@ all:\n \tmkdir $(SRC)/mydir\n \tmkdir $(INCR)\n \tcp main.rs $(SRC)/main.rs\n-\t$(RUSTC) --test -C incremental=$(INCR) $(SRC)/main.rs\n+\t$(RUSTC) --test -C incremental=$(INCR) $(SRC)/main.rs --target $(TARGET)\n \tmv $(SRC)/main.rs $(SRC)/mydir/main.rs\n-\t$(RUSTC) --test -C incremental=$(INCR) $(SRC)/mydir/main.rs\n+\t$(RUSTC) --test -C incremental=$(INCR) $(SRC)/mydir/main.rs --target $(TARGET)"}]}