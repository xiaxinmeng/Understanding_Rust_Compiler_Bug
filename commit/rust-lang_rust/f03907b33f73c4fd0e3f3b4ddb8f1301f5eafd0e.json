{"sha": "f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMzkwN2IzM2Y3M2M0ZmQwZTNmM2I0ZGRiOGYxMzAxZjVlYWZkMGU=", "commit": {"author": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-12-13T15:32:59Z"}, "committer": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2021-01-07T11:20:58Z"}, "message": "Add pointing const identifier when emitting E0435", "tree": {"sha": "20b1bc1f30117388eaf248cecdf63fba2eef4a9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20b1bc1f30117388eaf248cecdf63fba2eef4a9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e", "html_url": "https://github.com/rust-lang/rust/commit/f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e/comments", "author": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68ec33261183ffc21de96d6f825b02373e22e835", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ec33261183ffc21de96d6f825b02373e22e835", "html_url": "https://github.com/rust-lang/rust/commit/68ec33261183ffc21de96d6f825b02373e22e835"}], "stats": {"total": 86, "additions": 67, "deletions": 19}, "files": [{"sha": "6a181dbab5af76b6a298caa604927c528bdcdd86", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e", "patch": "@@ -398,13 +398,19 @@ impl<'a> Resolver<'a> {\n                 err.help(\"use the `|| { ... }` closure form instead\");\n                 err\n             }\n-            ResolutionError::AttemptToUseNonConstantValueInConstant => {\n+            ResolutionError::AttemptToUseNonConstantValueInConstant(ident, sugg) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n                     E0435,\n                     \"attempt to use a non-constant value in a constant\"\n                 );\n+                err.span_suggestion(\n+                    ident.span,\n+                    &sugg,\n+                    \"\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n                 err.span_label(span, \"non-constant value\");\n                 err\n             }"}, {"sha": "fbaec149d54a62e8086ef39e6231493ae4f835bc", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e", "patch": "@@ -92,6 +92,12 @@ crate enum HasGenericParams {\n     No,\n }\n \n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+crate enum ConstantItemKind {\n+    Const,\n+    Static,\n+}\n+\n /// The rib kind restricts certain accesses,\n /// e.g. to a `Res::Local` of an outer item.\n #[derive(Copy, Clone, Debug)]\n@@ -119,7 +125,7 @@ crate enum RibKind<'a> {\n     ///\n     /// The `bool` indicates if this constant may reference generic parameters\n     /// and is used to only allow generic parameters to be used in trivial constant expressions.\n-    ConstantItemRibKind(bool),\n+    ConstantItemRibKind(bool, Option<(Ident, ConstantItemKind)>),\n \n     /// We passed through a module.\n     ModuleRibKind(Module<'a>),\n@@ -145,7 +151,7 @@ impl RibKind<'_> {\n             NormalRibKind\n             | ClosureOrAsyncRibKind\n             | FnItemRibKind\n-            | ConstantItemRibKind(_)\n+            | ConstantItemRibKind(..)\n             | ModuleRibKind(_)\n             | MacroDefinition(_)\n             | ConstParamTyRibKind => false,\n@@ -634,7 +640,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             // Note that we might not be inside of an repeat expression here,\n                             // but considering that `IsRepeatExpr` is only relevant for\n                             // non-trivial constants this is doesn't matter.\n-                            self.with_constant_rib(IsRepeatExpr::No, true, |this| {\n+                            self.with_constant_rib(IsRepeatExpr::No, true, None, |this| {\n                                 this.smart_resolve_path(\n                                     ty.id,\n                                     qself.as_ref(),\n@@ -843,7 +849,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | ClosureOrAsyncRibKind\n                 | FnItemRibKind\n                 | ItemRibKind(..)\n-                | ConstantItemRibKind(_)\n+                | ConstantItemRibKind(..)\n                 | ModuleRibKind(..)\n                 | ForwardTyParamBanRibKind\n                 | ConstParamTyRibKind => {\n@@ -970,6 +976,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             this.with_constant_rib(\n                                                 IsRepeatExpr::No,\n                                                 true,\n+                                                None,\n                                                 |this| this.visit_expr(expr),\n                                             );\n                                         }\n@@ -1012,11 +1019,19 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     this.visit_ty(ty);\n                     if let Some(expr) = expr {\n+                        let constant_item_kind = match item.kind {\n+                            ItemKind::Const(..) => ConstantItemKind::Const,\n+                            ItemKind::Static(..) => ConstantItemKind::Static,\n+                            _ => unreachable!(),\n+                        };\n                         // We already forbid generic params because of the above item rib,\n                         // so it doesn't matter whether this is a trivial constant.\n-                        this.with_constant_rib(IsRepeatExpr::No, true, |this| {\n-                            this.visit_expr(expr)\n-                        });\n+                        this.with_constant_rib(\n+                            IsRepeatExpr::No,\n+                            true,\n+                            Some((item.ident, constant_item_kind)),\n+                            |this| this.visit_expr(expr),\n+                        );\n                     }\n                 });\n             }\n@@ -1118,15 +1133,16 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         &mut self,\n         is_repeat: IsRepeatExpr,\n         is_trivial: bool,\n+        item: Option<(Ident, ConstantItemKind)>,\n         f: impl FnOnce(&mut Self),\n     ) {\n         debug!(\"with_constant_rib: is_repeat={:?} is_trivial={}\", is_repeat, is_trivial);\n-        self.with_rib(ValueNS, ConstantItemRibKind(is_trivial), |this| {\n+        self.with_rib(ValueNS, ConstantItemRibKind(is_trivial, item), |this| {\n             this.with_rib(\n                 TypeNS,\n-                ConstantItemRibKind(is_repeat == IsRepeatExpr::Yes || is_trivial),\n+                ConstantItemRibKind(is_repeat == IsRepeatExpr::Yes || is_trivial, item),\n                 |this| {\n-                    this.with_label_rib(ConstantItemRibKind(is_trivial), f);\n+                    this.with_label_rib(ConstantItemRibKind(is_trivial, item), f);\n                 },\n             )\n         });\n@@ -1266,6 +1282,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             this.with_constant_rib(\n                                                 IsRepeatExpr::No,\n                                                 true,\n+                                                None,\n                                                 |this| {\n                                                     visit::walk_assoc_item(\n                                                         this,\n@@ -2200,6 +2217,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.with_constant_rib(\n             is_repeat,\n             constant.value.is_potential_trivial_const_param(),\n+            None,\n             |this| {\n                 visit::walk_anon_const(this, constant);\n             },"}, {"sha": "ebfe5301b6918ee3720fcb002378e948eb723a1a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=f03907b33f73c4fd0e3f3b4ddb8f1301f5eafd0e", "patch": "@@ -64,7 +64,7 @@ use tracing::debug;\n use diagnostics::{extend_span_to_previous_binding, find_span_of_binding_until_next_binding};\n use diagnostics::{ImportSuggestion, LabelSuggestion, Suggestion};\n use imports::{Import, ImportKind, ImportResolver, NameResolution};\n-use late::{HasGenericParams, PathSource, Rib, RibKind::*};\n+use late::{ConstantItemKind, HasGenericParams, PathSource, Rib, RibKind::*};\n use macros::{MacroRulesBinding, MacroRulesScope, MacroRulesScopeRef};\n \n type Res = def::Res<NodeId>;\n@@ -210,7 +210,7 @@ enum ResolutionError<'a> {\n     /// Error E0434: can't capture dynamic environment in a fn item.\n     CannotCaptureDynamicEnvironmentInFnItem,\n     /// Error E0435: attempt to use a non-constant value in a constant.\n-    AttemptToUseNonConstantValueInConstant,\n+    AttemptToUseNonConstantValueInConstant(Ident, String),\n     /// Error E0530: `X` bindings cannot shadow `Y`s.\n     BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n@@ -1821,14 +1821,16 @@ impl<'a> Resolver<'a> {\n             // Use the rib kind to determine whether we are resolving parameters\n             // (macro 2.0 hygiene) or local variables (`macro_rules` hygiene).\n             let rib_ident = if ribs[i].kind.contains_params() { normalized_ident } else { ident };\n-            if let Some(res) = ribs[i].bindings.get(&rib_ident).cloned() {\n+            if let Some((original_rib_ident_def, res)) = ribs[i].bindings.get_key_value(&rib_ident)\n+            {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Res(self.validate_res_from_ribs(\n                     i,\n                     rib_ident,\n-                    res,\n+                    *res,\n                     record_used,\n                     path_span,\n+                    *original_rib_ident_def,\n                     ribs,\n                 )));\n             }\n@@ -2540,6 +2542,7 @@ impl<'a> Resolver<'a> {\n         mut res: Res,\n         record_used: bool,\n         span: Span,\n+        original_rib_ident_def: Ident,\n         all_ribs: &[Rib<'a>],\n     ) -> Res {\n         const CG_BUG_STR: &str = \"min_const_generics resolve check didn't stop compilation\";\n@@ -2586,10 +2589,31 @@ impl<'a> Resolver<'a> {\n                                 res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);\n                             }\n                         }\n-                        ConstantItemRibKind(_) => {\n+                        ConstantItemRibKind(_, item) => {\n                             // Still doesn't deal with upvars\n                             if record_used {\n-                                self.report_error(span, AttemptToUseNonConstantValueInConstant);\n+                                let (span, resolution_error) =\n+                                    if let Some((ident, constant_item_kind)) = item {\n+                                        let kind_str = match constant_item_kind {\n+                                            ConstantItemKind::Const => \"const\",\n+                                            ConstantItemKind::Static => \"static\",\n+                                        };\n+                                        let sugg = format!(\n+                                            \"consider using `let` instead of `{}`\",\n+                                            kind_str\n+                                        );\n+                                        (span, AttemptToUseNonConstantValueInConstant(ident, sugg))\n+                                    } else {\n+                                        let sugg = \"consider using `const` instead of `let`\";\n+                                        (\n+                                            rib_ident.span,\n+                                            AttemptToUseNonConstantValueInConstant(\n+                                                original_rib_ident_def,\n+                                                sugg.to_string(),\n+                                            ),\n+                                        )\n+                                    };\n+                                self.report_error(span, resolution_error);\n                             }\n                             return Res::Err;\n                         }\n@@ -2625,7 +2649,7 @@ impl<'a> Resolver<'a> {\n                             in_ty_param_default = true;\n                             continue;\n                         }\n-                        ConstantItemRibKind(trivial) => {\n+                        ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial\n@@ -2718,7 +2742,7 @@ impl<'a> Resolver<'a> {\n                             in_ty_param_default = true;\n                             continue;\n                         }\n-                        ConstantItemRibKind(trivial) => {\n+                        ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial"}]}