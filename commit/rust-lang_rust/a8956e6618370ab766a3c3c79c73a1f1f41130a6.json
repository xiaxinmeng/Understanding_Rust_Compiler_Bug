{"sha": "a8956e6618370ab766a3c3c79c73a1f1f41130a6", "node_id": "C_kwDOAAsO6NoAKGE4OTU2ZTY2MTgzNzBhYjc2NmEzYzNjNzljNzNhMWYxZjQxMTMwYTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-17T21:55:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-17T21:55:03Z"}, "message": "Rollup merge of #94698 - WaffleLapkin:simplify-copy-suggestions, r=estebank\n\nRemove redundant code from copy-suggestions\n\nFollow up to #94375, just remove some code that is not necessary anymore. This may make the perf of such suggestions a little bit worse, but I don't think this is significant.\n\nr? `@estebank`", "tree": {"sha": "f6874c4f7a4700f67d51a3ccec6ea31d1d770e1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6874c4f7a4700f67d51a3ccec6ea31d1d770e1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8956e6618370ab766a3c3c79c73a1f1f41130a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiM643CRBK7hj4Ov3rIwAAWb8IAGdsy6u/oAn2MVhHI0QMMdgn\n51NZqxtY2o8IccJ9PweDOhBUpvG5m0d29wlG5FsTXSnaktSBEDp1bD66ECc1VhBx\nRnUEtd3AmiCQESDpb7XDRuUFnsyQJ+Q5/gEvUpF96zRpx7zX1vGugyg7DyHiylzZ\nAlvyCd6MWc+5bn4YQaAQE9/y77erxRSn0X0Ic/pyDsBa3HwZVPdgF31mecftZNE1\nKHuX709BGAV4qYlzNT5vHVnVOtl+1Uj6FMtJVjh3QphBBANPinvhFdh+cELOd40s\n0qkjEzX7wAD4bXLzhMKSaYPW8pZIaZKp2xusMsthwhmpccm9vUsvUp34VpHKXhY=\n=nkhu\n-----END PGP SIGNATURE-----\n", "payload": "tree f6874c4f7a4700f67d51a3ccec6ea31d1d770e1b\nparent 8499a8ba88dafe76d376d2de2394e6816aaa72de\nparent 74d0866c62daaca5e80fee29b202ffea15daab1b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647554103 +0100\ncommitter GitHub <noreply@github.com> 1647554103 +0100\n\nRollup merge of #94698 - WaffleLapkin:simplify-copy-suggestions, r=estebank\n\nRemove redundant code from copy-suggestions\n\nFollow up to #94375, just remove some code that is not necessary anymore. This may make the perf of such suggestions a little bit worse, but I don't think this is significant.\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8956e6618370ab766a3c3c79c73a1f1f41130a6", "html_url": "https://github.com/rust-lang/rust/commit/a8956e6618370ab766a3c3c79c73a1f1f41130a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8956e6618370ab766a3c3c79c73a1f1f41130a6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8499a8ba88dafe76d376d2de2394e6816aaa72de", "url": "https://api.github.com/repos/rust-lang/rust/commits/8499a8ba88dafe76d376d2de2394e6816aaa72de", "html_url": "https://github.com/rust-lang/rust/commit/8499a8ba88dafe76d376d2de2394e6816aaa72de"}, {"sha": "74d0866c62daaca5e80fee29b202ffea15daab1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d0866c62daaca5e80fee29b202ffea15daab1b", "html_url": "https://github.com/rust-lang/rust/commit/74d0866c62daaca5e80fee29b202ffea15daab1b"}], "stats": {"total": 135, "additions": 55, "deletions": 80}, "files": [{"sha": "66a23eb4125d559e96b94492f684982214d10969", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 55, "deletions": 80, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/a8956e6618370ab766a3c3c79c73a1f1f41130a6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8956e6618370ab766a3c3c79c73a1f1f41130a6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=a8956e6618370ab766a3c3c79c73a1f1f41130a6", "patch": "@@ -12,9 +12,7 @@ use rustc_middle::mir::{\n     FakeReadCause, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n-use rustc_middle::ty::{\n-    self, suggest_constraining_type_param, suggest_constraining_type_params, PredicateKind, Ty,\n-};\n+use rustc_middle::ty::{self, suggest_constraining_type_params, PredicateKind, Ty};\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, MultiSpan, Span};\n@@ -285,86 +283,63 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     Some(ref name) => format!(\"`{}`\", name),\n                     None => \"value\".to_owned(),\n                 };\n-                if let ty::Param(param_ty) = ty.kind() {\n-                    let tcx = self.infcx.tcx;\n-                    let generics = tcx.generics_of(self.mir_def_id());\n-                    let param = generics.type_param(&param_ty, tcx);\n-                    if let Some(generics) = tcx\n-                        .typeck_root_def_id(self.mir_def_id().to_def_id())\n-                        .as_local()\n-                        .and_then(|def_id| tcx.hir().get_generics(def_id))\n-                    {\n-                        suggest_constraining_type_param(\n-                            tcx,\n-                            generics,\n-                            &mut err,\n-                            param.name.as_str(),\n-                            \"Copy\",\n-                            None,\n+\n+                // Try to find predicates on *generic params* that would allow copying `ty`\n+                let tcx = self.infcx.tcx;\n+                let generics = tcx.generics_of(self.mir_def_id());\n+                if let Some(hir_generics) = tcx\n+                    .typeck_root_def_id(self.mir_def_id().to_def_id())\n+                    .as_local()\n+                    .and_then(|def_id| tcx.hir().get_generics(def_id))\n+                {\n+                    let predicates: Result<Vec<_>, _> = tcx.infer_ctxt().enter(|infcx| {\n+                        let mut fulfill_cx =\n+                            <dyn rustc_infer::traits::TraitEngine<'_>>::new(infcx.tcx);\n+\n+                        let copy_did = infcx.tcx.lang_items().copy_trait().unwrap();\n+                        let cause = ObligationCause::new(\n+                            span,\n+                            self.mir_hir_id(),\n+                            rustc_infer::traits::ObligationCauseCode::MiscObligation,\n                         );\n-                    }\n-                } else {\n-                    // Try to find predicates on *generic params* that would allow copying `ty`\n-\n-                    let tcx = self.infcx.tcx;\n-                    let generics = tcx.generics_of(self.mir_def_id());\n-                    if let Some(hir_generics) = tcx\n-                        .typeck_root_def_id(self.mir_def_id().to_def_id())\n-                        .as_local()\n-                        .and_then(|def_id| tcx.hir().get_generics(def_id))\n-                    {\n-                        let predicates: Result<Vec<_>, _> = tcx.infer_ctxt().enter(|infcx| {\n-                            let mut fulfill_cx =\n-                                <dyn rustc_infer::traits::TraitEngine<'_>>::new(infcx.tcx);\n-\n-                            let copy_did = infcx.tcx.lang_items().copy_trait().unwrap();\n-                            let cause = ObligationCause::new(\n-                                span,\n-                                self.mir_hir_id(),\n-                                rustc_infer::traits::ObligationCauseCode::MiscObligation,\n-                            );\n-                            fulfill_cx.register_bound(\n-                                &infcx,\n-                                self.param_env,\n-                                // Erase any region vids from the type, which may not be resolved\n-                                infcx.tcx.erase_regions(ty),\n-                                copy_did,\n-                                cause,\n-                            );\n-                            // Select all, including ambiguous predicates\n-                            let errors = fulfill_cx.select_all_or_error(&infcx);\n-\n-                            // Only emit suggestion if all required predicates are on generic\n-                            errors\n-                                .into_iter()\n-                                .map(|err| match err.obligation.predicate.kind().skip_binder() {\n-                                    PredicateKind::Trait(predicate) => {\n-                                        match predicate.self_ty().kind() {\n-                                            ty::Param(param_ty) => Ok((\n-                                                generics.type_param(param_ty, tcx),\n-                                                predicate\n-                                                    .trait_ref\n-                                                    .print_only_trait_path()\n-                                                    .to_string(),\n-                                            )),\n-                                            _ => Err(()),\n-                                        }\n+                        fulfill_cx.register_bound(\n+                            &infcx,\n+                            self.param_env,\n+                            // Erase any region vids from the type, which may not be resolved\n+                            infcx.tcx.erase_regions(ty),\n+                            copy_did,\n+                            cause,\n+                        );\n+                        // Select all, including ambiguous predicates\n+                        let errors = fulfill_cx.select_all_or_error(&infcx);\n+\n+                        // Only emit suggestion if all required predicates are on generic\n+                        errors\n+                            .into_iter()\n+                            .map(|err| match err.obligation.predicate.kind().skip_binder() {\n+                                PredicateKind::Trait(predicate) => {\n+                                    match predicate.self_ty().kind() {\n+                                        ty::Param(param_ty) => Ok((\n+                                            generics.type_param(param_ty, tcx),\n+                                            predicate.trait_ref.print_only_trait_path().to_string(),\n+                                        )),\n+                                        _ => Err(()),\n                                     }\n-                                    _ => Err(()),\n-                                })\n-                                .collect()\n-                        });\n+                                }\n+                                _ => Err(()),\n+                            })\n+                            .collect()\n+                    });\n \n-                        if let Ok(predicates) = predicates {\n-                            suggest_constraining_type_params(\n-                                tcx,\n-                                hir_generics,\n-                                &mut err,\n-                                predicates.iter().map(|(param, constraint)| {\n-                                    (param.name.as_str(), &**constraint, None)\n-                                }),\n-                            );\n-                        }\n+                    if let Ok(predicates) = predicates {\n+                        suggest_constraining_type_params(\n+                            tcx,\n+                            hir_generics,\n+                            &mut err,\n+                            predicates.iter().map(|(param, constraint)| {\n+                                (param.name.as_str(), &**constraint, None)\n+                            }),\n+                        );\n                     }\n                 }\n "}]}