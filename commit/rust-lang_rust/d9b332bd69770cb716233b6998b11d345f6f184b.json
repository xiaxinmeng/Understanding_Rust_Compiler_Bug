{"sha": "d9b332bd69770cb716233b6998b11d345f6f184b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YjMzMmJkNjk3NzBjYjcxNjIzM2I2OTk4YjExZDM0NWY2ZjE4NGI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-22T16:56:14Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:35Z"}, "message": "Translate union constants\n\nFix alignment for packed unions\nAdd some missing privacy test\nGet rid of `unimplemented_unions` macro", "tree": {"sha": "c83cf2e180339726ea9a9dee387e253d807cd12a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c83cf2e180339726ea9a9dee387e253d807cd12a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9b332bd69770cb716233b6998b11d345f6f184b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b332bd69770cb716233b6998b11d345f6f184b", "html_url": "https://github.com/rust-lang/rust/commit/d9b332bd69770cb716233b6998b11d345f6f184b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9b332bd69770cb716233b6998b11d345f6f184b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc2fc5fc528aab7ba138f1a351df6f846dfec1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc2fc5fc528aab7ba138f1a351df6f846dfec1d", "html_url": "https://github.com/rust-lang/rust/commit/2dc2fc5fc528aab7ba138f1a351df6f846dfec1d"}], "stats": {"total": 226, "additions": 206, "deletions": 20}, "files": [{"sha": "114b5e1331de2392ab25fc5e592f527862af54aa", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=d9b332bd69770cb716233b6998b11d345f6f184b", "patch": "@@ -258,8 +258,7 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 format!(\"floating point constants cannot be used in patterns\"));\n         }\n         ty::TyEnum(adt_def, _) |\n-        ty::TyStruct(adt_def, _) |\n-        ty::TyUnion(adt_def, _) => {\n+        ty::TyStruct(adt_def, _) => {\n             if !tcx.has_attr(adt_def.did, \"structural_match\") {\n                 tcx.sess.add_lint(\n                     lint::builtin::ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n@@ -272,6 +271,10 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             tcx.item_path_str(adt_def.did)));\n             }\n         }\n+        ty::TyUnion(..) => {\n+            // Matching on union fields is unsafe, we can't hide it in constants\n+            tcx.sess.span_err(span, \"cannot use unions in constant patterns\");\n+        }\n         _ => { }\n     }\n     let pat = match expr.node {"}, {"sha": "6b291c69307227e90acd9f82c1dc88ff9ef86b3f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d9b332bd69770cb716233b6998b11d345f6f184b", "patch": "@@ -385,8 +385,9 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n     fn check_field(&mut self, span: Span, def: ty::AdtDef<'tcx>, field: ty::FieldDef<'tcx>) {\n         if def.adt_kind() != ty::AdtKind::Enum &&\n            !field.vis.is_accessible_from(self.curitem, &self.tcx.map) {\n-            struct_span_err!(self.tcx.sess, span, E0451, \"field `{}` of struct `{}` is private\",\n-                      field.name, self.tcx.item_path_str(def.did))\n+            let kind_descr = if def.adt_kind() == ty::AdtKind::Union { \"union\" } else { \"struct\" };\n+            struct_span_err!(self.tcx.sess, span, E0451, \"field `{}` of {} `{}` is private\",\n+                      field.name, kind_descr, self.tcx.item_path_str(def.did))\n                 .span_label(span, &format!(\"field `{}` is private\", field.name))\n                 .emit();\n         }"}, {"sha": "7fd02ab82a3f8698283310e7c34d72f40c11ea05", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=d9b332bd69770cb716233b6998b11d345f6f184b", "patch": "@@ -516,7 +516,7 @@ fn mk_union<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     Union {\n         min_size: min_size,\n-        align: align,\n+        align: if packed { 1 } else { align },\n         packed: packed,\n         fields: tys.to_vec(),\n     }\n@@ -1176,8 +1176,10 @@ pub fn trans_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, r: &Repr<'tcx>, discr\n             contents.extend_from_slice(&[padding(ccx, max_sz - case.size)]);\n             C_struct(ccx, &contents[..], false)\n         }\n-        UntaggedUnion(..) => {\n-            unimplemented_unions!();\n+        UntaggedUnion(ref un) => {\n+            assert_eq!(discr, Disr(0));\n+            let contents = build_const_union(ccx, un, vals[0]);\n+            C_struct(ccx, &contents, un.packed)\n         }\n         Univariant(ref st) => {\n             assert_eq!(discr, Disr(0));\n@@ -1272,6 +1274,21 @@ fn build_const_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     cfields\n }\n \n+fn build_const_union<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                               un: &Union<'tcx>,\n+                               field_val: ValueRef)\n+                               -> Vec<ValueRef> {\n+    let mut cfields = vec![field_val];\n+\n+    let offset = machine::llsize_of_alloc(ccx, val_ty(field_val));\n+    let size = roundup(un.min_size, un.align);\n+    if offset != size {\n+        cfields.push(padding(ccx, size - offset));\n+    }\n+\n+    cfields\n+}\n+\n fn padding(ccx: &CrateContext, size: u64) -> ValueRef {\n     C_undef(Type::array(&Type::i8(ccx), size))\n }"}, {"sha": "00493b018c10e218948b49aff3752c164e49eb7c", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=d9b332bd69770cb716233b6998b11d345f6f184b", "patch": "@@ -786,7 +786,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                     usage_site_span).finalize(cx)\n         }\n         ty::TyUnion(..) => {\n-            unimplemented_unions!();\n+            unimplemented!();\n         }\n         ty::TyTuple(ref elements) => {\n             prepare_tuple_metadata(cx,\n@@ -1302,9 +1302,6 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                     ]\n                 }\n             }\n-            adt::UntaggedUnion(..) => {\n-                unimplemented_unions!();\n-            }\n             adt::RawNullablePointer { nndiscr: non_null_variant_index, nnty, .. } => {\n                 // As far as debuginfo is concerned, the pointer this enum\n                 // represents is still wrapped in a struct. This is to make the\n@@ -1421,7 +1418,9 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                     }\n                 ]\n             },\n-            adt::CEnum(..) => span_bug!(self.span, \"This should be unreachable.\")\n+            adt::CEnum(..) | adt::UntaggedUnion(..) => {\n+                span_bug!(self.span, \"This should be unreachable.\")\n+            }\n         }\n     }\n }"}, {"sha": "25e0428248df4f7a9a6d03ad9ff75babb52582f5", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=d9b332bd69770cb716233b6998b11d345f6f184b", "patch": "@@ -107,13 +107,6 @@ macro_rules! help {\n     })\n }\n \n-#[macro_export]\n-macro_rules! unimplemented_unions {\n-    () => ({\n-        panic!(\"unions are not fully implemented\");\n-    })\n-}\n-\n #[macro_export]\n macro_rules! register_diagnostics {\n     ($($code:tt),*) => ("}, {"sha": "287d33cc3e5b23b56a7f23b7b9656206ed162551", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d9b332bd69770cb716233b6998b11d345f6f184b", "patch": "@@ -959,7 +959,7 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n             ast::ItemKind::Union(..) => {\n                 gate_feature_post!(&self, untagged_unions,\n                                    i.span,\n-                                   \"unions are unstable and not fully implemented\");\n+                                   \"unions are unstable and possibly buggy\");\n             }\n \n             ast::ItemKind::DefaultImpl(..) => {"}, {"sha": "b2bf173c59c8667dd1363d5f036a6374b8cf2f26", "filename": "src/test/compile-fail/union-const-eval.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Ftest%2Fcompile-fail%2Funion-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Ftest%2Fcompile-fail%2Funion-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-const-eval.rs?ref=d9b332bd69770cb716233b6998b11d345f6f184b", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+union U {\n+    a: usize,\n+    b: usize,\n+}\n+\n+const C: U = U { a: 10 };\n+\n+fn main() {\n+    unsafe {\n+        let a: [u8; C.a]; // OK\n+        let b: [u8; C.b]; //~ ERROR constant evaluation error\n+                          //~^ NOTE nonexistent struct field\n+    }\n+}"}, {"sha": "3d168980ed246b957bb7804ecca23989f555d6d7", "filename": "src/test/compile-fail/union-const-pat.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Ftest%2Fcompile-fail%2Funion-const-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Ftest%2Fcompile-fail%2Funion-const-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-const-pat.rs?ref=d9b332bd69770cb716233b6998b11d345f6f184b", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+union U {\n+    a: usize,\n+    b: usize,\n+}\n+\n+const C: U = U { a: 10 };\n+\n+fn main() {\n+    match C {\n+        C => {} //~ ERROR cannot use unions in constant patterns\n+        _ => {}\n+    }\n+}"}, {"sha": "d1f2bbbc3d03c7593747ed151d608cc14176917a", "filename": "src/test/compile-fail/union-field-privacy.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Ftest%2Fcompile-fail%2Funion-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Ftest%2Fcompile-fail%2Funion-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-field-privacy.rs?ref=d9b332bd69770cb716233b6998b11d345f6f184b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+mod m {\n+    pub union U {\n+        a: u8\n+    }\n+}\n+\n+fn main() {\n+    let u = m::U { a: 0 }; //~ ERROR field `a` of union `m::U` is private\n+}"}, {"sha": "bdae1a0eaf88f8accb505083de6303e4ff31abb3", "filename": "src/test/run-pass/union-const-trans.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Ftest%2Frun-pass%2Funion-const-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Ftest%2Frun-pass%2Funion-const-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-const-trans.rs?ref=d9b332bd69770cb716233b6998b11d345f6f184b", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+union U {\n+    a: u64,\n+    b: u64,\n+}\n+\n+const C: U = U { b: 10 };\n+\n+fn main() {\n+    unsafe {\n+        let a = C.a;\n+        let b = C.b;\n+        assert_eq!(a, 10);\n+        assert_eq!(b, 10);\n+     }\n+}"}, {"sha": "b1650ae3a7c154f992ee66f22978db95f5be87ea", "filename": "src/test/run-pass/union-packed.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Ftest%2Frun-pass%2Funion-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b332bd69770cb716233b6998b11d345f6f184b/src%2Ftest%2Frun-pass%2Funion-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-packed.rs?ref=d9b332bd69770cb716233b6998b11d345f6f184b", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+use std::mem::{size_of, size_of_val, align_of, align_of_val};\n+\n+struct S {\n+    a: u16,\n+    b: [u8; 3],\n+}\n+\n+#[repr(packed)]\n+struct Sp {\n+    a: u16,\n+    b: [u8; 3],\n+}\n+\n+union U {\n+    a: u16,\n+    b: [u8; 3],\n+}\n+\n+#[repr(packed)]\n+union Up {\n+    a: u16,\n+    b: [u8; 3],\n+}\n+\n+const CS: S = S { a: 0, b: [0, 0, 0] };\n+const CSP: Sp = Sp { a: 0, b: [0, 0, 0] };\n+const CU: U = U { b: [0, 0, 0] };\n+const CUP: Up = Up { b: [0, 0, 0] };\n+\n+fn main() {\n+    let s = S { a: 0, b: [0, 0, 0] };\n+    assert_eq!(size_of::<S>(), 6);\n+    assert_eq!(size_of_val(&s), 6);\n+    assert_eq!(size_of_val(&CS), 6);\n+    assert_eq!(align_of::<S>(), 2);\n+    assert_eq!(align_of_val(&s), 2);\n+    assert_eq!(align_of_val(&CS), 2);\n+\n+    let sp = Sp { a: 0, b: [0, 0, 0] };\n+    assert_eq!(size_of::<Sp>(), 5);\n+    assert_eq!(size_of_val(&sp), 5);\n+    assert_eq!(size_of_val(&CSP), 5);\n+    assert_eq!(align_of::<Sp>(), 1);\n+    assert_eq!(align_of_val(&sp), 1);\n+    assert_eq!(align_of_val(&CSP), 1);\n+\n+    let u = U { b: [0, 0, 0] };\n+    assert_eq!(size_of::<U>(), 4);\n+    assert_eq!(size_of_val(&u), 4);\n+    assert_eq!(size_of_val(&CU), 4);\n+    assert_eq!(align_of::<U>(), 2);\n+    assert_eq!(align_of_val(&u), 2);\n+    assert_eq!(align_of_val(&CU), 2);\n+\n+    let up = Up { b: [0, 0, 0] };\n+    assert_eq!(size_of::<Up>(), 3);\n+    assert_eq!(size_of_val(&up), 3);\n+    assert_eq!(size_of_val(&CUP), 3);\n+    assert_eq!(align_of::<Up>(), 1);\n+    assert_eq!(align_of_val(&up), 1);\n+    assert_eq!(align_of_val(&CUP), 1);\n+}"}]}