{"sha": "2be403ce3e0bc21b36a6ef783476095d2e921fca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZTQwM2NlM2UwYmMyMWIzNmE2ZWY3ODM0NzYwOTVkMmU5MjFmY2E=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-14T00:06:35Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-20T18:12:42Z"}, "message": "Warn on duplicate `asm!` options", "tree": {"sha": "c87ae1ce0f50f9181618b8f4ca126acd0676a9f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c87ae1ce0f50f9181618b8f4ca126acd0676a9f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be403ce3e0bc21b36a6ef783476095d2e921fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be403ce3e0bc21b36a6ef783476095d2e921fca", "html_url": "https://github.com/rust-lang/rust/commit/2be403ce3e0bc21b36a6ef783476095d2e921fca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be403ce3e0bc21b36a6ef783476095d2e921fca/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "820bba1c467aa5aa54d6db2869b15c643e5c350c", "url": "https://api.github.com/repos/rust-lang/rust/commits/820bba1c467aa5aa54d6db2869b15c643e5c350c", "html_url": "https://github.com/rust-lang/rust/commit/820bba1c467aa5aa54d6db2869b15c643e5c350c"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "b5641fdf2ab0fe45b77cc22fcf917f7e105eadf0", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 58, "deletions": 7, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2be403ce3e0bc21b36a6ef783476095d2e921fca/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be403ce3e0bc21b36a6ef783476095d2e921fca/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=2be403ce3e0bc21b36a6ef783476095d2e921fca", "patch": "@@ -19,6 +19,12 @@ struct AsmArgs {\n     options_spans: Vec<Span>,\n }\n \n+impl AsmArgs {\n+    fn option_is_set(&self, option: ast::InlineAsmOptions) -> bool {\n+        (self.options & option) == option\n+    }\n+}\n+\n fn parse_args<'a>(\n     ecx: &mut ExtCtxt<'a>,\n     sp: Span,\n@@ -283,27 +289,72 @@ fn parse_args<'a>(\n     Ok(args)\n }\n \n+fn warn_duplicate_option<'a>(p: &mut Parser<'a>, span: Span) {\n+    let mut warn = if let Ok(snippet) = p.sess.source_map().span_to_snippet(span) {\n+        p.sess\n+            .span_diagnostic\n+            .struct_span_warn(span, &format!(\"the `{}` option was already provided\", snippet))\n+    } else {\n+        p.sess.span_diagnostic.struct_span_warn(span, \"this option was already provided\")\n+    };\n+    warn.span_suggestion(\n+        span,\n+        \"remove this option\",\n+        String::new(),\n+        Applicability::MachineApplicable,\n+    );\n+    warn.emit();\n+}\n+\n fn parse_options<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> Result<(), DiagnosticBuilder<'a>> {\n     let span_start = p.prev_token.span;\n \n     p.expect(&token::OpenDelim(token::DelimToken::Paren))?;\n \n     while !p.eat(&token::CloseDelim(token::DelimToken::Paren)) {\n         if p.eat(&token::Ident(sym::pure, false)) {\n-            args.options |= ast::InlineAsmOptions::PURE;\n+            if !args.option_is_set(ast::InlineAsmOptions::PURE) {\n+                args.options |= ast::InlineAsmOptions::PURE;\n+            } else {\n+                warn_duplicate_option(p, p.prev_token.span);\n+            }\n         } else if p.eat(&token::Ident(sym::nomem, false)) {\n-            args.options |= ast::InlineAsmOptions::NOMEM;\n+            if !args.option_is_set(ast::InlineAsmOptions::NOMEM) {\n+                args.options |= ast::InlineAsmOptions::NOMEM;\n+            } else {\n+                warn_duplicate_option(p, p.prev_token.span);\n+            }\n         } else if p.eat(&token::Ident(sym::readonly, false)) {\n-            args.options |= ast::InlineAsmOptions::READONLY;\n+            if !args.option_is_set(ast::InlineAsmOptions::READONLY) {\n+                args.options |= ast::InlineAsmOptions::READONLY;\n+            } else {\n+                warn_duplicate_option(p, p.prev_token.span);\n+            }\n         } else if p.eat(&token::Ident(sym::preserves_flags, false)) {\n-            args.options |= ast::InlineAsmOptions::PRESERVES_FLAGS;\n+            if !args.option_is_set(ast::InlineAsmOptions::PRESERVES_FLAGS) {\n+                args.options |= ast::InlineAsmOptions::PRESERVES_FLAGS;\n+            } else {\n+                warn_duplicate_option(p, p.prev_token.span);\n+            }\n         } else if p.eat(&token::Ident(sym::noreturn, false)) {\n-            args.options |= ast::InlineAsmOptions::NORETURN;\n+            if !args.option_is_set(ast::InlineAsmOptions::NORETURN) {\n+                args.options |= ast::InlineAsmOptions::NORETURN;\n+            } else {\n+                warn_duplicate_option(p, p.prev_token.span);\n+            }\n         } else if p.eat(&token::Ident(sym::nostack, false)) {\n-            args.options |= ast::InlineAsmOptions::NOSTACK;\n+            if !args.option_is_set(ast::InlineAsmOptions::NOSTACK) {\n+                args.options |= ast::InlineAsmOptions::NOSTACK;\n+            } else {\n+                warn_duplicate_option(p, p.prev_token.span);\n+            }\n         } else {\n             p.expect(&token::Ident(sym::att_syntax, false))?;\n-            args.options |= ast::InlineAsmOptions::ATT_SYNTAX;\n+            if !args.option_is_set(ast::InlineAsmOptions::ATT_SYNTAX) {\n+                args.options |= ast::InlineAsmOptions::ATT_SYNTAX;\n+            } else {\n+                warn_duplicate_option(p, p.prev_token.span);\n+            }\n         }\n \n         // Allow trailing commas"}]}