{"sha": "668886a6ccaf294bf0ab3742e693997ce39b716b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ODg4NmE2Y2NhZjI5NGJmMGFiMzc0MmU2OTM5OTdjZTM5YjcxNmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-27T17:04:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T18:01:01Z"}, "message": "rewrite `Passes` to have sets of passes\n\nAlso, store the completed set of passes in the tcx.", "tree": {"sha": "2979c5c436dc098fcdb3b6dd2e5042e21fbf473f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2979c5c436dc098fcdb3b6dd2e5042e21fbf473f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/668886a6ccaf294bf0ab3742e693997ce39b716b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/668886a6ccaf294bf0ab3742e693997ce39b716b", "html_url": "https://github.com/rust-lang/rust/commit/668886a6ccaf294bf0ab3742e693997ce39b716b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/668886a6ccaf294bf0ab3742e693997ce39b716b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9e6ccc042696e3334abff8319e769cbffa3ede8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e6ccc042696e3334abff8319e769cbffa3ede8", "html_url": "https://github.com/rust-lang/rust/commit/e9e6ccc042696e3334abff8319e769cbffa3ede8"}], "stats": {"total": 134, "additions": 79, "deletions": 55}, "files": [{"sha": "cfe8254d1bb628b4c9ed0af304e2b620d49d53ab", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/668886a6ccaf294bf0ab3742e693997ce39b716b/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668886a6ccaf294bf0ab3742e693997ce39b716b/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=668886a6ccaf294bf0ab3742e693997ce39b716b", "patch": "@@ -167,24 +167,46 @@ impl<T: MirPass> DefIdPass for T {\n /// A manager for MIR passes.\n #[derive(Clone)]\n pub struct Passes {\n-    passes: Vec<Rc<Pass>>,\n     pass_hooks: Vec<Rc<PassHook>>,\n-    plugin_passes: Vec<Rc<Pass>>\n+    sets: Vec<PassSet>,\n+}\n+\n+#[derive(Clone)]\n+struct PassSet {\n+    passes: Vec<Rc<Pass>>,\n }\n \n+/// The number of \"pass sets\" that we have:\n+///\n+/// - ready for constant evaluation\n+/// - unopt\n+/// - optimized\n+pub const MIR_PASS_SETS: usize = 3;\n+\n+/// Run the passes we need to do constant qualification and evaluation.\n+pub const MIR_CONST: usize = 0;\n+\n+/// Run the passes we need to consider the MIR validated and ready for borrowck etc.\n+pub const MIR_VALIDATED: usize = 1;\n+\n+/// Run the passes we need to consider the MIR *optimized*.\n+pub const MIR_OPTIMIZED: usize = 2;\n+\n impl<'a, 'tcx> Passes {\n     pub fn new() -> Passes {\n-        let passes = Passes {\n-            passes: Vec::new(),\n+        Passes {\n             pass_hooks: Vec::new(),\n-            plugin_passes: Vec::new()\n-        };\n-        passes\n+            sets: (0..MIR_PASS_SETS).map(|_| PassSet { passes: Vec::new() }).collect(),\n+        }\n     }\n \n-    pub fn run_passes(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    pub fn run_passes(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, set_index: usize) {\n+        let set = &self.sets[set_index];\n+\n+        let start_num: usize = self.sets[..set_index].iter().map(|s| s.passes.len()).sum();\n+\n         // NB: passes are numbered from 1, since \"construction\" is zero.\n-        for (pass, pass_num) in self.plugin_passes.iter().chain(&self.passes).zip(1..) {\n+        for (pass, pass_num) in set.passes.iter().zip(start_num + 1..) {\n             for hook in &self.pass_hooks {\n                 hook.on_mir_pass(tcx, &**pass, pass_num, false);\n             }\n@@ -198,19 +220,12 @@ impl<'a, 'tcx> Passes {\n     }\n \n     /// Pushes a built-in pass.\n-    pub fn push_pass<T: Pass + 'static>(&mut self, pass: T) {\n-        self.passes.push(Rc::new(pass));\n+    pub fn push_pass<T: Pass + 'static>(&mut self, set: usize, pass: T) {\n+        self.sets[set].passes.push(Rc::new(pass));\n     }\n \n     /// Pushes a pass hook.\n     pub fn push_hook<T: PassHook + 'static>(&mut self, hook: T) {\n         self.pass_hooks.push(Rc::new(hook));\n     }\n }\n-\n-/// Copies the plugin passes.\n-impl ::std::iter::Extend<Rc<Pass>> for Passes {\n-    fn extend<I: IntoIterator<Item=Rc<Pass>>>(&mut self, it: I) {\n-        self.plugin_passes.extend(it);\n-    }\n-}"}, {"sha": "0c189853c6195efaca60aada70de18a1d93f9742", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/668886a6ccaf294bf0ab3742e693997ce39b716b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668886a6ccaf294bf0ab3742e693997ce39b716b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=668886a6ccaf294bf0ab3742e693997ce39b716b", "patch": "@@ -25,6 +25,7 @@ use middle::region::{CodeExtent, CodeExtentData};\n use middle::resolve_lifetime;\n use middle::stability;\n use mir::Mir;\n+use mir::transform::Passes;\n use ty::subst::{Kind, Substs};\n use ty::ReprOptions;\n use traits;\n@@ -47,11 +48,12 @@ use arena::{TypedArena, DroplessArena};\n use rustc_data_structures::indexed_vec::IndexVec;\n use std::borrow::Borrow;\n use std::cell::{Cell, RefCell};\n+use std::cmp::Ordering;\n use std::hash::{Hash, Hasher};\n use std::mem;\n use std::ops::Deref;\n use std::iter;\n-use std::cmp::Ordering;\n+use std::rc::Rc;\n use syntax::abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n@@ -441,8 +443,11 @@ pub struct GlobalCtxt<'tcx> {\n     pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n     pub hir: hir_map::Map<'tcx>,\n+\n     pub maps: maps::Maps<'tcx>,\n \n+    pub mir_passes: Rc<Passes>,\n+\n     // Records the free variables refrenced by every closure\n     // expression. Do not track deps for this, just recompute it from\n     // scratch every time.\n@@ -712,6 +717,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn create_and_enter<F, R>(s: &'tcx Session,\n                                   local_providers: ty::maps::Providers<'tcx>,\n                                   extern_providers: ty::maps::Providers<'tcx>,\n+                                  mir_passes: Rc<Passes>,\n                                   arenas: &'tcx GlobalArenas<'tcx>,\n                                   arena: &'tcx DroplessArena,\n                                   resolutions: ty::Resolutions,\n@@ -746,6 +752,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             fulfilled_predicates: RefCell::new(fulfilled_predicates),\n             hir: hir,\n             maps: maps::Maps::new(dep_graph, providers),\n+            mir_passes,\n             freevars: RefCell::new(resolutions.freevars),\n             maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n             rcache: RefCell::new(FxHashMap()),"}, {"sha": "89f01226113cbc059a4cdf51773ebb694bae59d0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 38, "deletions": 36, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/668886a6ccaf294bf0ab3742e693997ce39b716b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668886a6ccaf294bf0ab3742e693997ce39b716b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=668886a6ccaf294bf0ab3742e693997ce39b716b", "patch": "@@ -20,6 +20,7 @@ use rustc::session::search_paths::PathKind;\n use rustc::lint;\n use rustc::middle::{self, dependency_format, stability, reachable};\n use rustc::middle::privacy::AccessLevels;\n+use rustc::mir::transform::{MIR_CONST, MIR_VALIDATED, MIR_OPTIMIZED};\n use rustc::ty::{self, TyCtxt, Resolutions, GlobalArenas};\n use rustc::util::common::time;\n use rustc::util::nodemap::NodeSet;\n@@ -903,9 +904,43 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     // FIXME(eddyb) get rid of this once we replace const_eval with miri.\n     rustc_const_eval::provide(&mut extern_providers);\n \n+    // Setup the MIR passes that we want to run.\n+    let mut passes = sess.mir_passes.borrow().clone();\n+    passes.push_hook(mir::transform::dump_mir::DumpMir);\n+\n+    // What we need to do constant evaluation.\n+    passes.push_pass(MIR_CONST, mir::transform::simplify::SimplifyCfg::new(\"initial\"));\n+    passes.push_pass(MIR_CONST, mir::transform::type_check::TypeckMir);\n+\n+    // What we need to run borrowck etc.\n+    passes.push_pass(MIR_VALIDATED, mir::transform::qualify_consts::QualifyAndPromoteConstants);\n+    passes.push_pass(MIR_VALIDATED, mir::transform::simplify_branches::SimplifyBranches::new(\"initial\"));\n+    passes.push_pass(MIR_VALIDATED, mir::transform::simplify::SimplifyCfg::new(\"qualify-consts\"));\n+\n+    // Optimizations begin.\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyCfg::new(\"no-landing-pads\"));\n+\n+    // From here on out, regions are gone.\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::erase_regions::EraseRegions);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::AddCallGuards);\n+    passes.push_pass(MIR_OPTIMIZED, borrowck::ElaborateDrops);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\"));\n+\n+    // No lifetime analysis based on borrowing can be done from here on out.\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::inline::Inline);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::instcombine::InstCombine);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::deaggregator::Deaggregator);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::copy_prop::CopyPropagation);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyLocals);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::AddCallGuards);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::dump_mir::Marker(\"PreTrans\"));\n+\n     TyCtxt::create_and_enter(sess,\n                              local_providers,\n                              extern_providers,\n+                             Rc::new(passes),\n                              arenas,\n                              arena,\n                              resolutions,\n@@ -971,18 +1006,8 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         }\n \n         time(time_passes, \"MIR cleanup and validation\", || {\n-            let mut passes = sess.mir_passes.borrow_mut();\n-            // Push all the built-in validation passes.\n-            // NB: if you\u2019re adding an *optimisation* it ought to go to another set of passes\n-            // in stage 4 below.\n-            passes.push_hook(mir::transform::dump_mir::DumpMir);\n-            passes.push_pass(mir::transform::simplify::SimplifyCfg::new(\"initial\"));\n-            passes.push_pass(mir::transform::type_check::TypeckMir);\n-            passes.push_pass(mir::transform::qualify_consts::QualifyAndPromoteConstants);\n-            passes.push_pass(mir::transform::simplify_branches::SimplifyBranches::new(\"initial\"));\n-            passes.push_pass(mir::transform::simplify::SimplifyCfg::new(\"qualify-consts\"));\n-            // And run everything.\n-            passes.run_passes(tcx);\n+            tcx.mir_passes.run_passes(tcx, MIR_CONST);\n+            tcx.mir_passes.run_passes(tcx, MIR_VALIDATED);\n         });\n \n         time(time_passes,\n@@ -1040,30 +1065,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Run the passes that transform the MIR into a more suitable form for translation to LLVM\n     // code.\n     time(time_passes, \"MIR optimisations\", || {\n-        let mut passes = ::rustc::mir::transform::Passes::new();\n-        passes.push_hook(mir::transform::dump_mir::DumpMir);\n-        passes.push_pass(mir::transform::no_landing_pads::NoLandingPads);\n-        passes.push_pass(mir::transform::simplify::SimplifyCfg::new(\"no-landing-pads\"));\n-\n-        // From here on out, regions are gone.\n-        passes.push_pass(mir::transform::erase_regions::EraseRegions);\n-\n-        passes.push_pass(mir::transform::add_call_guards::AddCallGuards);\n-        passes.push_pass(borrowck::ElaborateDrops);\n-        passes.push_pass(mir::transform::no_landing_pads::NoLandingPads);\n-        passes.push_pass(mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\"));\n-\n-        // No lifetime analysis based on borrowing can be done from here on out.\n-        passes.push_pass(mir::transform::inline::Inline);\n-        passes.push_pass(mir::transform::instcombine::InstCombine);\n-        passes.push_pass(mir::transform::deaggregator::Deaggregator);\n-        passes.push_pass(mir::transform::copy_prop::CopyPropagation);\n-\n-        passes.push_pass(mir::transform::simplify::SimplifyLocals);\n-        passes.push_pass(mir::transform::add_call_guards::AddCallGuards);\n-        passes.push_pass(mir::transform::dump_mir::Marker(\"PreTrans\"));\n-\n-        passes.run_passes(tcx);\n+        tcx.mir_passes.run_passes(tcx, MIR_OPTIMIZED);\n     });\n \n     if tcx.sess.opts.debugging_opts.mir_stats {"}]}