{"sha": "bb6236cd749dc5e708d6846c9b2c004766627851", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNjIzNmNkNzQ5ZGM1ZTcwOGQ2ODQ2YzliMmMwMDQ3NjY2Mjc4NTE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-26T23:56:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-26T23:56:19Z"}, "message": "Rollup merge of #66754 - estebank:rustdoc-capitalization, r=Dylan-DPC\n\nVarious tweaks to diagnostic output", "tree": {"sha": "91b8b5047b7b19a969896a00057916ac68a0c7db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91b8b5047b7b19a969896a00057916ac68a0c7db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb6236cd749dc5e708d6846c9b2c004766627851", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3bujCRBK7hj4Ov3rIwAAdHIIAKhEiSCb7NE+XjoTArH8VGTh\nj69cjL2pbmRmOM27FsrPfOEzZxrHiBChxfPUp4OJ2BoUcLZpSJw7IXxtT2tAuByH\nhdzG88qAOxVc/uHQYES9AoNYpmhDpgCcED37rMvvdC3rbVKWcieGBNNj3cln/M4/\nR98xFpT6RhXgyIiaiwP1CaKMRfXcWAcHA6wdNt2cfHY52qjFfzd4HilxJTVmWrsW\ngC81etkp1ZlZ1U6YrHA6vtgJVvnsuUyn4r13WsqLXINMV20+6LpySJ0Q/O9rcRS2\nxDjRi0KCsmGTlI1rF7BX7PjGdKwo06tehRmnnO7Q4lhATax6qv+OI39pSmsfIQw=\n=zsC/\n-----END PGP SIGNATURE-----\n", "payload": "tree 91b8b5047b7b19a969896a00057916ac68a0c7db\nparent 0b3d4a1fa45c2926fe133a17f42a40b75eafd885\nparent 5ea922aec4a66458728fbe74a6e8096ab76f9aec\nauthor Tyler Mandry <tmandry@gmail.com> 1574812579 -0600\ncommitter GitHub <noreply@github.com> 1574812579 -0600\n\nRollup merge of #66754 - estebank:rustdoc-capitalization, r=Dylan-DPC\n\nVarious tweaks to diagnostic output\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6236cd749dc5e708d6846c9b2c004766627851", "html_url": "https://github.com/rust-lang/rust/commit/bb6236cd749dc5e708d6846c9b2c004766627851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb6236cd749dc5e708d6846c9b2c004766627851/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b3d4a1fa45c2926fe133a17f42a40b75eafd885", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3d4a1fa45c2926fe133a17f42a40b75eafd885", "html_url": "https://github.com/rust-lang/rust/commit/0b3d4a1fa45c2926fe133a17f42a40b75eafd885"}, {"sha": "5ea922aec4a66458728fbe74a6e8096ab76f9aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea922aec4a66458728fbe74a6e8096ab76f9aec", "html_url": "https://github.com/rust-lang/rust/commit/5ea922aec4a66458728fbe74a6e8096ab76f9aec"}], "stats": {"total": 415, "additions": 115, "deletions": 300}, "files": [{"sha": "b670658a10a50702fbd2ee351872dcc2d0ca5394", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -463,7 +463,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         terr: &TypeError<'tcx>,\n-        sp: Span,\n     ) {\n         use hir::def_id::CrateNum;\n         use hir::map::DisambiguatedDefPathData;\n@@ -577,14 +576,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 };\n                 if same_path().unwrap_or(false) {\n                     let crate_name = self.tcx.crate_name(did1.krate);\n-                    err.span_note(\n-                        sp,\n-                        &format!(\n-                            \"Perhaps two different versions \\\n-                             of crate `{}` are being used?\",\n-                            crate_name\n-                        ),\n-                    );\n+                    err.note(&format!(\n+                        \"perhaps two different versions of crate `{}` are being used?\",\n+                        crate_name\n+                    ));\n                 }\n             }\n         };\n@@ -1434,7 +1429,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .unwrap_or_else(|| {\n                 self.tcx.hir().body_owner_def_id(hir::BodyId { hir_id: cause.body_id })\n             });\n-        self.check_and_note_conflicting_crates(diag, terr, span);\n+        self.check_and_note_conflicting_crates(diag, terr);\n         self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id);\n \n         // It reads better to have the error origin as the final"}, {"sha": "7b54b98cbc13ccf031e6df75871a29ca75ad2c87", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -698,7 +698,9 @@ impl<'a> CrateLoader<'a> {\n         let has_global_allocator = match &*global_allocator_spans(krate) {\n             [span1, span2, ..] => {\n                 self.sess.struct_span_err(*span2, \"cannot define multiple global allocators\")\n-                         .span_note(*span1, \"the previous global allocator is defined here\").emit();\n+                    .span_label(*span2, \"cannot define a new global allocator\")\n+                    .span_label(*span1, \"previous global allocator is defined here\")\n+                    .emit();\n                 true\n             }\n             spans => !spans.is_empty()"}, {"sha": "9364bbedb0c587c2cd8d994e24123d3da5eaae18", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -1264,23 +1264,17 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Applicability::MachineApplicable,\n         );\n \n-        match category {\n-            ConstraintCategory::Return => {\n-                err.span_note(constraint_span, \"closure is returned here\");\n-            }\n-            ConstraintCategory::OpaqueType => {\n-                err.span_note(constraint_span, \"generator is returned here\");\n-            }\n+        let msg = match category {\n+            ConstraintCategory::Return => \"closure is returned here\".to_string(),\n+            ConstraintCategory::OpaqueType => \"generator is returned here\".to_string(),\n             ConstraintCategory::CallArgument => {\n                 fr_name.highlight_region_name(&mut err);\n-                err.span_note(\n-                    constraint_span,\n-                    &format!(\"function requires argument type to outlive `{}`\", fr_name),\n-                );\n+                format!(\"function requires argument type to outlive `{}`\", fr_name)\n             }\n             _ => bug!(\"report_escaping_closure_capture called with unexpected constraint \\\n                        category: `{:?}`\", category),\n-        }\n+        };\n+        err.span_note(constraint_span, &msg);\n         err\n     }\n "}, {"sha": "c7cfda79b9383a4e3a4ca343c12a9ed75e5cb06e", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -558,7 +558,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'a>,\n         binds_to: &[Local],\n     ) {\n-        let mut noncopy_var_spans = Vec::new();\n         for (j, local) in binds_to.into_iter().enumerate() {\n             let bind_to = &self.body.local_decls[*local];\n             let binding_span = bind_to.source_info.span;\n@@ -576,16 +575,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     bind_to.ty,\n                     Some(binding_span)\n                 );\n-            } else {\n-                noncopy_var_spans.push(binding_span);\n             }\n         }\n \n         if binds_to.len() > 1 {\n-            err.span_note(\n-                noncopy_var_spans,\n-                \"move occurs because these variables have types that \\\n-                    don't implement the `Copy` trait\",\n+            err.note(\"move occurs because these variables have types that \\\n+                      don't implement the `Copy` trait\",\n             );\n         }\n     }"}, {"sha": "cab9b8b78d30af131a92a0ff9e0139caf274e26d", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -491,9 +491,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a macro invocation inside a `trait`, `impl` or `extern` block.\n-    fn parse_assoc_macro_invoc(&mut self, item_kind: &str, vis: Option<&Visibility>,\n-                               at_end: &mut bool) -> PResult<'a, Option<Mac>>\n-    {\n+    fn parse_assoc_macro_invoc(\n+        &mut self,\n+        item_kind: &str,\n+        vis: Option<&Visibility>,\n+        at_end: &mut bool,\n+    ) -> PResult<'a, Option<Mac>> {\n         if self.token.is_path_start() &&\n                 !(self.is_async_fn() && self.token.span.rust_2015()) {\n             let prev_span = self.prev_span;\n@@ -532,9 +535,11 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn missing_assoc_item_kind_err(&self, item_type: &str, prev_span: Span)\n-                                   -> DiagnosticBuilder<'a>\n-    {\n+    fn missing_assoc_item_kind_err(\n+        &self,\n+        item_type: &str,\n+        prev_span: Span,\n+    ) -> DiagnosticBuilder<'a> {\n         let expected_kinds = if item_type == \"extern\" {\n             \"missing `fn`, `type`, or `static`\"\n         } else {"}, {"sha": "50f0d66b5e3fd3bce91a784731d2ca75b643d53d", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -144,8 +144,8 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                                             \"`continue` pointing to a labeled block\")\n                                 .span_label(e.span,\n                                             \"labeled blocks cannot be `continue`'d\")\n-                                .span_note(block.span,\n-                                            \"labeled block the continue points to\")\n+                                .span_label(block.span,\n+                                            \"labeled block the `continue` points to\")\n                                 .emit();\n                         }\n                     }"}, {"sha": "3ad53737f49693f6888027c296cd8c0cfbe77fb5", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -1160,8 +1160,10 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     .emit();\n             } else {\n                 let msg = format!(\"`{}` is private, and cannot be re-exported\", ident);\n-                let note_msg =\n-                    format!(\"consider marking `{}` as `pub` in the imported module\", ident);\n+                let note_msg = format!(\n+                    \"consider marking `{}` as `pub` in the imported module\",\n+                    ident,\n+                );\n                 struct_span_err!(self.r.session, directive.span, E0364, \"{}\", &msg)\n                     .span_note(directive.span, &note_msg)\n                     .emit();"}, {"sha": "0a95d4209ac6a46dfcfb7aba12005fe433f2ebb6", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -344,7 +344,7 @@ pub fn look_for_tests<'tcx>(\n             lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n             hir_id,\n             sp,\n-            \"Missing code example in this documentation\");\n+            \"missing code example in this documentation\");\n         diag.emit();\n     } else if check_missing_code == false &&\n               tests.found_tests > 0 &&\n@@ -353,7 +353,7 @@ pub fn look_for_tests<'tcx>(\n             lint::builtin::PRIVATE_DOC_TESTS,\n             hir_id,\n             span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n-            \"Documentation test in private item\");\n+            \"documentation test in private item\");\n         diag.emit();\n     }\n }\n@@ -367,7 +367,7 @@ crate fn span_of_attrs(attrs: &clean::Attributes) -> Option<Span> {\n     if start == DUMMY_SP {\n         return None;\n     }\n-    let end = attrs.doc_strings.last().expect(\"No doc strings provided\").span();\n+    let end = attrs.doc_strings.last().expect(\"no doc strings provided\").span();\n     Some(start.to(end))\n }\n "}, {"sha": "ec0eaa568123ab42954528c1bdf0c7c5874e6744", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -688,10 +688,9 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                     crate_edition: Edition, allow_features: &Option<Vec<String>>) -> Features {\n     fn feature_removed(span_handler: &Handler, span: Span, reason: Option<&str>) {\n         let mut err = struct_span_err!(span_handler, span, E0557, \"feature has been removed\");\n+        err.span_label(span, \"feature has been removed\");\n         if let Some(reason) = reason {\n-            err.span_note(span, reason);\n-        } else {\n-            err.span_label(span, \"feature has been removed\");\n+            err.note(reason);\n         }\n         err.emit();\n     }"}, {"sha": "837e04afd34016a1786e96f3a22f826205477218", "filename": "src/libsyntax_expand/mbe/macro_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -269,7 +269,8 @@ fn check_binders(\n                 // for nested macro definitions.\n                 sess.span_diagnostic\n                     .struct_span_err(span, \"duplicate matcher binding\")\n-                    .span_note(prev_info.span, \"previous declaration was here\")\n+                    .span_label(span, \"duplicate binding\")\n+                    .span_label(prev_info.span, \"previous binding\")\n                     .emit();\n                 *valid = false;\n             } else {"}, {"sha": "0a19d64200ce70dbb754b0c269b5570d5a23b7ea", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -172,7 +172,8 @@ fn parse_args<'a>(\n             let e = p.parse_expr()?;\n             if let Some(prev) = names.get(&name) {\n                 ecx.struct_span_err(e.span, &format!(\"duplicate argument named `{}`\", name))\n-                    .span_note(args[*prev].span, \"previously here\")\n+                    .span_label(args[*prev].span, \"previously here\")\n+                    .span_label(e.span, \"duplicate argument\")\n                     .emit();\n                 continue;\n             }"}, {"sha": "604400c3cc2ff5562384c61bbfc84e5ea671d413", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -270,7 +270,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n                     };\n \n                     self.handler.struct_span_err(attr.span, &msg)\n-                        .span_note(prev_attr.span, \"previous attribute here\")\n+                        .span_label(prev_attr.span, \"previous attribute here\")\n                         .emit();\n \n                     return;"}, {"sha": "5ad8e8a826f053b5eff3576942d7b33c648970e6", "filename": "src/test/rustdoc-ui/doc-without-codeblock.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -1,13 +1,13 @@\n-#![deny(missing_doc_code_examples)] //~ ERROR Missing code example in this documentation\n+#![deny(missing_doc_code_examples)] //~ ERROR missing code example in this documentation\n \n /// Some docs.\n-//~^ ERROR Missing code example in this documentation\n+//~^ ERROR missing code example in this documentation\n pub struct Foo;\n \n /// And then, the princess died.\n-//~^ ERROR Missing code example in this documentation\n+//~^ ERROR missing code example in this documentation\n pub mod foo {\n     /// Or maybe not because she saved herself!\n-    //~^ ERROR Missing code example in this documentation\n+    //~^ ERROR missing code example in this documentation\n     pub fn bar() {}\n }"}, {"sha": "bf65fcf19a0d6e56ab140df534b3297917730aeb", "filename": "src/test/rustdoc-ui/doc-without-codeblock.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -1,4 +1,4 @@\n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:1:1\n    |\n LL | / #![deny(missing_doc_code_examples)]\n@@ -16,19 +16,19 @@ note: lint level defined here\n LL | #![deny(missing_doc_code_examples)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:3:1\n    |\n LL | /// Some docs.\n    | ^^^^^^^^^^^^^^\n \n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:7:1\n    |\n LL | /// And then, the princess died.\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:10:5\n    |\n LL |     /// Or maybe not because she saved herself!"}, {"sha": "06766db5335a1eeb4d3c2ec7da0f1db03cac6e7f", "filename": "src/test/rustdoc-ui/lint-group.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -14,11 +14,11 @@\n pub fn link_error() {} //~^^^^^ ERROR cannot be resolved, ignoring it\n \n /// wait, this doesn't have a doctest?\n-pub fn no_doctest() {} //~^ ERROR Missing code example in this documentation\n+pub fn no_doctest() {} //~^ ERROR missing code example in this documentation\n \n /// wait, this *does* have a doctest?\n ///\n /// ```\n /// println!(\"sup\");\n /// ```\n-fn private_doctest() {} //~^^^^^ ERROR Documentation test in private item\n+fn private_doctest() {} //~^^^^^ ERROR documentation test in private item"}, {"sha": "63274ae2be4f639a4cb608d81a41cc9e85cfaade", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -1,4 +1,4 @@\n-error: Documentation test in private item\n+error: documentation test in private item\n   --> $DIR/lint-group.rs:19:1\n    |\n LL | / /// wait, this *does* have a doctest?\n@@ -29,7 +29,7 @@ LL | #![deny(rustdoc)]\n    = note: `#[deny(intra_doc_link_resolution_failure)]` implied by `#[deny(rustdoc)]`\n    = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/lint-group.rs:16:1\n    |\n LL | /// wait, this doesn't have a doctest?"}, {"sha": "179dba17c6d818f0413b3319e0a6d90e44d85582", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -1,4 +1,4 @@\n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/lint-missing-doc-code-example.rs:19:1\n    |\n LL | / mod module1 {\n@@ -11,7 +11,7 @@ note: lint level defined here\n LL | #![deny(missing_doc_code_examples)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/lint-missing-doc-code-example.rs:37:3\n    |\n LL |   /// doc"}, {"sha": "2f1bddc7c75ccdbc4754554838c4a9b12a4df923", "filename": "src/test/rustdoc-ui/private-item-doc-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -6,6 +6,6 @@ mod foo {\n     /// ```\n     /// assert!(false);\n     /// ```\n-    //~^^^^^ ERROR Documentation test in private item\n+    //~^^^^^ ERROR documentation test in private item\n     fn bar() {}\n }"}, {"sha": "8abbdb31ec91acedac122cd87677adf49883877d", "filename": "src/test/rustdoc-ui/private-item-doc-test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -1,4 +1,4 @@\n-error: Documentation test in private item\n+error: documentation test in private item\n   --> $DIR/private-item-doc-test.rs:4:5\n    |\n LL | /     /// private doc test"}, {"sha": "35d9f0f42f00164fcbdd7f30fd4bcb5f6425687d", "filename": "src/test/ui/allocator/two-allocators.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -1,14 +1,11 @@\n error: cannot define multiple global allocators\n   --> $DIR/two-allocators.rs:6:1\n    |\n-LL | static B: System = System;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the previous global allocator is defined here\n-  --> $DIR/two-allocators.rs:4:1\n-   |\n LL | static A: System = System;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | -------------------------- previous global allocator is defined here\n+LL | #[global_allocator]\n+LL | static B: System = System;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot define a new global allocator\n \n error: aborting due to previous error\n "}, {"sha": "26de39101f2117e98f3f4a14c01ea9eee3e3cbeb", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -10,15 +10,7 @@ LL |                   num2) => (),\n LL |         Foo::Foo2(num) => (),\n    |                   --- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:12:19\n-   |\n-LL |         Foo::Foo1(num1,\n-   |                   ^^^^\n-LL |                   num2) => (),\n-   |                   ^^^^\n-LL |         Foo::Foo2(num) => (),\n-   |                   ^^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-error-with-note.rs:28:11\n@@ -31,13 +23,7 @@ LL |             f: _s,\n LL |             g: _t\n    |                -- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:31:16\n-   |\n-LL |             f: _s,\n-   |                ^^\n-LL |             g: _t\n-   |                ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of `a.a` which is behind a shared reference\n   --> $DIR/borrowck-move-error-with-note.rs:46:11"}, {"sha": "8fb4c062c0363772f5e529b179000cbad372f0e9", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -9,13 +9,7 @@ LL |                 &[Foo { string: a },\n LL |                   Foo { string: b }] => {\n    |                                 - ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-move-out-of-vec-tail.rs:21:33\n-   |\n-LL |                 &[Foo { string: a },\n-   |                                 ^\n-LL |                   Foo { string: b }] => {\n-   |                                 ^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n help: consider removing the `&`\n    |\n LL |                 [Foo { string: a },"}, {"sha": "e274d105e05034f4e0fb2512cc98fa981dd60de9", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -75,12 +75,12 @@ fn e() {\n     match vec {\n         //~^ ERROR cannot move out\n         //~| NOTE cannot move out\n+        //~| NOTE move occurs because these variables have types\n         &mut [_a, _b, _c] => {}\n         //~^ NOTE data moved here\n         //~| NOTE and here\n         //~| NOTE and here\n         //~| HELP consider removing the `&mut`\n-        //~| NOTE move occurs because these variables have types\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out"}, {"sha": "a3324f25d0bb5968c52f611958544f5a6366f395", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -97,11 +97,7 @@ LL |         &mut [_a, _b, _c] => {}\n    |         |     data moved here\n    |         help: consider removing the `&mut`: `[_a, _b, _c]`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:78:15\n-   |\n-LL |         &mut [_a, _b, _c] => {}\n-   |               ^^  ^^  ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:86:13"}, {"sha": "c024094dd5610da186114734332eb165b6f2b31f", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -138,13 +138,9 @@ error: duplicate argument named `foo`\n   --> $DIR/ifmt-bad-arg.rs:40:33\n    |\n LL |     format!(\"{foo}\", foo=1, foo=2);\n-   |                                 ^\n-   |\n-note: previously here\n-  --> $DIR/ifmt-bad-arg.rs:40:26\n-   |\n-LL |     format!(\"{foo}\", foo=1, foo=2);\n-   |                          ^\n+   |                          -      ^ duplicate argument\n+   |                          |\n+   |                          previously here\n \n error: positional arguments cannot follow named arguments\n   --> $DIR/ifmt-bad-arg.rs:41:35"}, {"sha": "9d9a88f4f9b06353a1a0a73c1f600d281e712ed4", "filename": "src/test/ui/issues/issue-12567.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -10,14 +10,7 @@ LL |             => println!(\"one empty\"),\n LL |         (&[hd1, ..], &[hd2, ..])\n    |                        --- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/issue-12567.rs:8:17\n-   |\n-LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n-   |                 ^^\n-LL |             => println!(\"one empty\"),\n-LL |         (&[hd1, ..], &[hd2, ..])\n-   |                        ^^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[T]`, a non-copy slice\n   --> $DIR/issue-12567.rs:4:11\n@@ -31,14 +24,7 @@ LL |             => println!(\"one empty\"),\n LL |         (&[hd1, ..], &[hd2, ..])\n    |            --- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/issue-12567.rs:8:17\n-   |\n-LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n-   |                 ^^\n-LL |             => println!(\"one empty\"),\n-LL |         (&[hd1, ..], &[hd2, ..])\n-   |            ^^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d0a4097de6816fcb35321b63fca5900feaf80582", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-2.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -7,11 +7,7 @@ LL |     let (a, b) = x[0];\n    |          |  ...and here\n    |          data moved here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/issue-40402-2.rs:5:10\n-   |\n-LL |     let (a, b) = x[0];\n-   |          ^  ^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "c5f79ed6333ee6f62242c33870cc670754b8bac7", "filename": "src/test/ui/label/label_break_value_continue.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -7,16 +7,11 @@ LL |         continue;\n error[E0696]: `continue` pointing to a labeled block\n   --> $DIR/label_break_value_continue.rs:14:9\n    |\n-LL |         continue 'b;\n-   |         ^^^^^^^^^^^ labeled blocks cannot be `continue`'d\n-   |\n-note: labeled block the continue points to\n-  --> $DIR/label_break_value_continue.rs:13:5\n-   |\n LL | /     'b: {\n LL | |         continue 'b;\n+   | |         ^^^^^^^^^^^ labeled blocks cannot be `continue`'d\n LL | |     }\n-   | |_____^\n+   | |_____- labeled block the `continue` points to\n \n error[E0695]: unlabeled `continue` inside of a labeled block\n   --> $DIR/label_break_value_continue.rs:22:13"}, {"sha": "3ad1297ffb2f3961ab497030ad69d70e5b0a3171", "filename": "src/test/ui/macros/macro-multiple-matcher-bindings.stderr", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -2,49 +2,33 @@ error: duplicate matcher binding\n   --> $DIR/macro-multiple-matcher-bindings.rs:7:16\n    |\n LL |     ($a:ident, $a:ident) => {};\n-   |                ^^^^^^^^\n-   |\n-note: previous declaration was here\n-  --> $DIR/macro-multiple-matcher-bindings.rs:7:6\n-   |\n-LL |     ($a:ident, $a:ident) => {};\n-   |      ^^^^^^^^\n+   |      --------  ^^^^^^^^ duplicate binding\n+   |      |\n+   |      previous binding\n \n error: duplicate matcher binding\n   --> $DIR/macro-multiple-matcher-bindings.rs:8:16\n    |\n LL |     ($a:ident, $a:path) => {};\n-   |                ^^^^^^^\n-   |\n-note: previous declaration was here\n-  --> $DIR/macro-multiple-matcher-bindings.rs:8:6\n-   |\n-LL |     ($a:ident, $a:path) => {};\n-   |      ^^^^^^^^\n+   |      --------  ^^^^^^^ duplicate binding\n+   |      |\n+   |      previous binding\n \n error: duplicate matcher binding\n   --> $DIR/macro-multiple-matcher-bindings.rs:17:18\n    |\n LL |     ($a:ident, $($a:ident),*) => {};\n-   |                  ^^^^^^^^\n-   |\n-note: previous declaration was here\n-  --> $DIR/macro-multiple-matcher-bindings.rs:17:6\n-   |\n-LL |     ($a:ident, $($a:ident),*) => {};\n-   |      ^^^^^^^^\n+   |      --------    ^^^^^^^^ duplicate binding\n+   |      |\n+   |      previous binding\n \n error: duplicate matcher binding\n   --> $DIR/macro-multiple-matcher-bindings.rs:18:25\n    |\n LL |     ($($a:ident)+ # $($($a:path),+);*) => {};\n-   |                         ^^^^^^^\n-   |\n-note: previous declaration was here\n-  --> $DIR/macro-multiple-matcher-bindings.rs:18:8\n-   |\n-LL |     ($($a:ident)+ # $($($a:path),+);*) => {};\n-   |        ^^^^^^^^\n+   |        --------         ^^^^^^^ duplicate binding\n+   |        |\n+   |        previous binding\n \n error: aborting due to 4 previous errors\n "}, {"sha": "475a586ddc083ed4da470db3523c92950fef0e31", "filename": "src/test/ui/macros/macro-reexport-removed.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -2,13 +2,9 @@ error[E0557]: feature has been removed\n   --> $DIR/macro-reexport-removed.rs:3:12\n    |\n LL | #![feature(macro_reexport)]\n-   |            ^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^ feature has been removed\n    |\n-note: subsumed by `pub use`\n-  --> $DIR/macro-reexport-removed.rs:3:12\n-   |\n-LL | #![feature(macro_reexport)]\n-   |            ^^^^^^^^^^^^^^\n+   = note: subsumed by `pub use`\n \n error: cannot find attribute `macro_reexport` in this scope\n   --> $DIR/macro-reexport-removed.rs:5:3"}, {"sha": "d4a0e45648c25ea2653e9568bf4478119c3f592b", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -83,13 +83,7 @@ LL |         B::U(d) => (),\n LL |         B::V(s) => (),\n    |              - ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/move-errors.rs:76:14\n-   |\n-LL |         B::U(d) => (),\n-   |              ^\n-LL |         B::V(s) => (),\n-   |              ^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:83:11\n@@ -138,11 +132,7 @@ LL |         F(s, mut t) => (),\n    |           |\n    |           data moved here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/move-errors.rs:104:11\n-   |\n-LL |         F(s, mut t) => (),\n-   |           ^  ^^^^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of `x.0` which is behind a shared reference\n   --> $DIR/move-errors.rs:110:11"}, {"sha": "1f1211aa198f8ea09a83ccb58a2a60f4b73229ff", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.stderr", "status": "modified", "additions": 17, "deletions": 91, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -8,11 +8,7 @@ LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n    |         |   data moved here\n    |         help: consider removing the `&`: `(X(_t), X(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:39:13\n-   |\n-LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n-   |             ^^     ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:43:50\n@@ -24,11 +20,7 @@ LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) {\n    |            |             data moved here\n    |            help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:43:26\n-   |\n-LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |                          ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:47:53\n@@ -40,11 +32,7 @@ LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone())\n    |               |             data moved here\n    |               help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:47:29\n-   |\n-LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |                             ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:51:11\n@@ -60,14 +48,7 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n LL |         &(Either::Two(_t), Either::One(_u)) => (),\n    |                       -- ...and here   -- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:53:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^               ^^\n-...\n-LL |         &(Either::Two(_t), Either::One(_u)) => (),\n-   |                       ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n help: consider removing the `&`\n    |\n LL |         (Either::One(_t), Either::Two(_u)) => (),\n@@ -90,11 +71,7 @@ LL |         &(Either::One(_t), Either::Two(_u))\n    |         |             data moved here\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:63:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u))\n-   |                       ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:70:11\n@@ -109,11 +86,7 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |         |             data moved here\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:72:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:78:11\n@@ -128,11 +101,7 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |         |             data moved here\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:80:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:91:31\n@@ -144,11 +113,7 @@ LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n    |         |       data moved here\n    |         help: consider removing the `&mut`: `(X(_t), X(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:91:17\n-   |\n-LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n-   |                 ^^     ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:95:54\n@@ -160,11 +125,7 @@ LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.c\n    |            |                 data moved here\n    |            help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:95:30\n-   |\n-LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |                              ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:99:57\n@@ -176,11 +137,7 @@ LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), e\n    |               |                 data moved here\n    |               help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:99:33\n-   |\n-LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |                                 ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:103:11\n@@ -196,14 +153,7 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n    |                           -- ...and here   -- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:105:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n-...\n-LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n-   |                           ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n help: consider removing the `&mut`\n    |\n LL |         (Either::One(_t), Either::Two(_u)) => (),\n@@ -226,11 +176,7 @@ LL |         &mut (Either::One(_t), Either::Two(_u))\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:115:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u))\n-   |                           ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:122:11\n@@ -245,11 +191,7 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:124:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:130:11\n@@ -264,11 +206,7 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:132:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:138:11\n@@ -283,11 +221,7 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:140:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:86:11\n@@ -299,11 +233,7 @@ LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n    |           |   data moved here\n    |           help: consider removing the `&`: `(X(_t), X(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:86:15\n-   |\n-LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n-   |               ^^     ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:146:11\n@@ -315,11 +245,7 @@ LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n    |           |       data moved here\n    |           help: consider removing the `&mut`: `(X(_t), X(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:146:19\n-   |\n-LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n-   |                   ^^     ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error: aborting due to 17 previous errors\n "}, {"sha": "ac91ac43736f95e7b301b640389d6756562fcddc", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -337,14 +337,7 @@ LL |         &mut Either::One(_t) => (),\n LL |         &mut Either::Two(_t) => (),\n    |                          -- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/simple.rs:221:26\n-   |\n-LL |         &mut Either::One(_t) => (),\n-   |                          ^^\n-...\n-LL |         &mut Either::Two(_t) => (),\n-   |                          ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n help: consider removing the `&mut`\n    |\n LL |         Either::One(_t) => (),\n@@ -470,13 +463,7 @@ LL |         (&mut Either::One(_t),) => (),\n LL |         (&mut Either::Two(_t),) => (),\n    |                           -- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/simple.rs:280:27\n-   |\n-LL |         (&mut Either::One(_t),) => (),\n-   |                           ^^\n-LL |         (&mut Either::Two(_t),) => (),\n-   |                           ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:288:18"}, {"sha": "eeda5460ac36acf03eb135fdf4867a3f057475ef", "filename": "src/test/ui/type/type-mismatch-same-crate-name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.rs?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -15,11 +15,11 @@ fn main() {\n         extern crate crate_a1 as a;\n         a::try_foo(foo2);\n         //~^ ERROR mismatched types\n-        //~| Perhaps two different versions of crate `crate_a1`\n+        //~| perhaps two different versions of crate `crate_a1`\n         //~| expected struct `main::a::Foo`\n         a::try_bar(bar2);\n         //~^ ERROR mismatched types\n-        //~| Perhaps two different versions of crate `crate_a1`\n+        //~| perhaps two different versions of crate `crate_a1`\n         //~| expected trait `main::a::Bar`\n         //~| expected struct `std::boxed::Box<(dyn main::a::Bar + 'static)>`\n         //~| found struct `std::boxed::Box<dyn main::a::Bar>`"}, {"sha": "be5406696b7de790747dc7c79e1bad6a19214d4b", "filename": "src/test/ui/type/type-mismatch-same-crate-name.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb6236cd749dc5e708d6846c9b2c004766627851/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr?ref=bb6236cd749dc5e708d6846c9b2c004766627851", "patch": "@@ -4,11 +4,7 @@ error[E0308]: mismatched types\n LL |         a::try_foo(foo2);\n    |                    ^^^^ expected struct `main::a::Foo`, found a different struct `main::a::Foo`\n    |\n-note: Perhaps two different versions of crate `crate_a1` are being used?\n-  --> $DIR/type-mismatch-same-crate-name.rs:16:20\n-   |\n-LL |         a::try_foo(foo2);\n-   |                    ^^^^\n+   = note: perhaps two different versions of crate `crate_a1` are being used?\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-same-crate-name.rs:20:20\n@@ -18,11 +14,7 @@ LL |         a::try_bar(bar2);\n    |\n    = note: expected struct `std::boxed::Box<(dyn main::a::Bar + 'static)>`\n               found struct `std::boxed::Box<dyn main::a::Bar>`\n-note: Perhaps two different versions of crate `crate_a1` are being used?\n-  --> $DIR/type-mismatch-same-crate-name.rs:20:20\n-   |\n-LL |         a::try_bar(bar2);\n-   |                    ^^^^\n+   = note: perhaps two different versions of crate `crate_a1` are being used?\n \n error: aborting due to 2 previous errors\n "}]}