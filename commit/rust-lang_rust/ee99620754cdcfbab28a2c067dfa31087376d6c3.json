{"sha": "ee99620754cdcfbab28a2c067dfa31087376d6c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOTk2MjA3NTRjZGNmYmFiMjhhMmMwNjdkZmEzMTA4NzM3NmQ2YzM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-13T23:26:31Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-16T19:19:06Z"}, "message": "Move autoimport completion into the unqialified_path module", "tree": {"sha": "eeb33e8ba0203636d2114e28fed7030c8e8a3635", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeb33e8ba0203636d2114e28fed7030c8e8a3635"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee99620754cdcfbab28a2c067dfa31087376d6c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee99620754cdcfbab28a2c067dfa31087376d6c3", "html_url": "https://github.com/rust-lang/rust/commit/ee99620754cdcfbab28a2c067dfa31087376d6c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee99620754cdcfbab28a2c067dfa31087376d6c3/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b0fc4d7f2b922a1b7d8d32fc0b065e4023d749b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0fc4d7f2b922a1b7d8d32fc0b065e4023d749b", "html_url": "https://github.com/rust-lang/rust/commit/3b0fc4d7f2b922a1b7d8d32fc0b065e4023d749b"}], "stats": {"total": 295, "additions": 139, "deletions": 156}, "files": [{"sha": "e7df9d955656bcf1b450ed2358b35a5254c42faa", "filename": "crates/completion/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee99620754cdcfbab28a2c067dfa31087376d6c3/crates%2Fcompletion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee99620754cdcfbab28a2c067dfa31087376d6c3/crates%2Fcompletion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2FCargo.toml?ref=ee99620754cdcfbab28a2c067dfa31087376d6c3", "patch": "@@ -22,7 +22,6 @@ text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n-assists = { path = \"../assists\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n \n # completions crate should depend only on the top-level `hir` package. if you need"}, {"sha": "75dbb1a23bb5c8c616d7c2b752994aa573e627e9", "filename": "crates/completion/src/completions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee99620754cdcfbab28a2c067dfa31087376d6c3/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee99620754cdcfbab28a2c067dfa31087376d6c3/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions.rs?ref=ee99620754cdcfbab28a2c067dfa31087376d6c3", "patch": "@@ -13,7 +13,6 @@ pub(crate) mod postfix;\n pub(crate) mod macro_in_item_position;\n pub(crate) mod trait_impl;\n pub(crate) mod mod_;\n-pub(crate) mod magic;\n \n use hir::{ModPath, ScopeDef, Type};\n "}, {"sha": "0c4db01990c710cbdee9f3dcad822648491af70c", "filename": "crates/completion/src/completions/magic.rs", "status": "removed", "additions": 0, "deletions": 151, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/3b0fc4d7f2b922a1b7d8d32fc0b065e4023d749b/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmagic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0fc4d7f2b922a1b7d8d32fc0b065e4023d749b/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmagic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmagic.rs?ref=3b0fc4d7f2b922a1b7d8d32fc0b065e4023d749b", "patch": "@@ -1,151 +0,0 @@\n-//! TODO kb move this into the complete_unqualified_path when starts to work properly\n-\n-use assists::utils::{insert_use, mod_path_to_ast, ImportScope};\n-use either::Either;\n-use hir::{ModuleDef, ScopeDef};\n-use ide_db::imports_locator;\n-use syntax::{algo, AstNode};\n-\n-use crate::{\n-    context::CompletionContext,\n-    render::{render_resolution, RenderContext},\n-};\n-\n-use super::Completions;\n-\n-// TODO kb add a setting toggle for this feature?\n-pub(crate) fn complete_magic(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    if !(ctx.is_trivial_path || ctx.is_pat_binding_or_const) {\n-        return None;\n-    }\n-    let _p = profile::span(\"complete_magic\");\n-    let current_module = ctx.scope.module()?;\n-    let anchor = ctx.name_ref_syntax.as_ref()?;\n-    let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n-\n-    let potential_import_name = ctx.token.to_string();\n-\n-    let possible_imports =\n-        imports_locator::find_similar_imports(&ctx.sema, ctx.krate?, &potential_import_name, 400)\n-            .filter_map(|import_candidate| match import_candidate {\n-                // when completing outside the use declaration, modules are pretty useless\n-                // and tend to bloat the completion suggestions a lot\n-                Either::Left(ModuleDef::Module(_)) => None,\n-                Either::Left(module_def) => Some((\n-                    current_module.find_use_path(ctx.db, module_def)?,\n-                    ScopeDef::ModuleDef(module_def),\n-                )),\n-                Either::Right(macro_def) => Some((\n-                    current_module.find_use_path(ctx.db, macro_def)?,\n-                    ScopeDef::MacroDef(macro_def),\n-                )),\n-            })\n-            .filter_map(|(mod_path, definition)| {\n-                let mut resolution_with_missing_import = render_resolution(\n-                    RenderContext::new(ctx),\n-                    mod_path.segments.last()?.to_string(),\n-                    &definition,\n-                )?;\n-\n-                let mut text_edits =\n-                    resolution_with_missing_import.text_edit().to_owned().into_builder();\n-\n-                let rewriter =\n-                    insert_use(&import_scope, mod_path_to_ast(&mod_path), ctx.config.merge);\n-                let old_ast = rewriter.rewrite_root()?;\n-                algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n-\n-                resolution_with_missing_import.update_text_edit(text_edits.finish());\n-\n-                Some(resolution_with_missing_import)\n-            });\n-\n-    acc.add_all(possible_imports);\n-    Some(())\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::test_utils::check_edit;\n-\n-    #[test]\n-    fn function_magic_completion() {\n-        check_edit(\n-            \"stdin\",\n-            r#\"\n-//- /lib.rs crate:dep\n-pub mod io {\n-    pub fn stdin() {}\n-};\n-\n-//- /main.rs crate:main deps:dep\n-fn main() {\n-    stdi<|>\n-}\n-\"#,\n-            r#\"\n-use dep::io::stdin;\n-\n-fn main() {\n-    stdin()$0\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn macro_magic_completion() {\n-        check_edit(\n-            \"macro_with_curlies!\",\n-            r#\"\n-//- /lib.rs crate:dep\n-/// Please call me as macro_with_curlies! {}\n-#[macro_export]\n-macro_rules! macro_with_curlies {\n-    () => {}\n-}\n-\n-//- /main.rs crate:main deps:dep\n-fn main() {\n-    curli<|>\n-}\n-\"#,\n-            r#\"\n-use dep::macro_with_curlies;\n-\n-fn main() {\n-    macro_with_curlies! {$0}\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn case_insensitive_magic_completion_works() {\n-        check_edit(\n-            \"ThirdStruct\",\n-            r#\"\n-//- /lib.rs crate:dep\n-pub struct FirstStruct;\n-pub mod some_module {\n-    pub struct SecondStruct;\n-    pub struct ThirdStruct;\n-}\n-\n-//- /main.rs crate:main deps:dep\n-use dep::{FirstStruct, some_module::SecondStruct};\n-\n-fn main() {\n-    this<|>\n-}\n-\"#,\n-            r#\"\n-use dep::{FirstStruct, some_module::{SecondStruct, ThirdStruct}};\n-\n-fn main() {\n-    ThirdStruct\n-}\n-\"#,\n-        );\n-    }\n-}"}, {"sha": "ecda37862eb1545d097419213fea6f890cf7626b", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 139, "deletions": 2, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/ee99620754cdcfbab28a2c067dfa31087376d6c3/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee99620754cdcfbab28a2c067dfa31087376d6c3/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=ee99620754cdcfbab28a2c067dfa31087376d6c3", "patch": "@@ -1,10 +1,16 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n+use assists::utils::{insert_use, mod_path_to_ast, ImportScope};\n+use either::Either;\n use hir::{Adt, ModuleDef, ScopeDef, Type};\n-use syntax::AstNode;\n+use ide_db::imports_locator;\n+use syntax::{algo, AstNode};\n use test_utils::mark;\n \n-use crate::{CompletionContext, Completions};\n+use crate::{\n+    render::{render_resolution, RenderContext},\n+    CompletionContext, Completions,\n+};\n \n pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n     if !(ctx.is_trivial_path || ctx.is_pat_binding_or_const) {\n@@ -37,6 +43,56 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         }\n         acc.add_resolution(ctx, name.to_string(), &res)\n     });\n+\n+    fuzzy_completion(acc, ctx).unwrap_or_default()\n+}\n+\n+// TODO kb add a setting toggle for this feature?\n+fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n+    let _p = profile::span(\"fuzzy_completion\u00ae\");\n+    let current_module = ctx.scope.module()?;\n+    let anchor = ctx.name_ref_syntax.as_ref()?;\n+    let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n+\n+    let potential_import_name = ctx.token.to_string();\n+\n+    let possible_imports =\n+        imports_locator::find_similar_imports(&ctx.sema, ctx.krate?, &potential_import_name, 400)\n+            .filter_map(|import_candidate| match import_candidate {\n+                // when completing outside the use declaration, modules are pretty useless\n+                // and tend to bloat the completion suggestions a lot\n+                Either::Left(ModuleDef::Module(_)) => None,\n+                Either::Left(module_def) => Some((\n+                    current_module.find_use_path(ctx.db, module_def)?,\n+                    ScopeDef::ModuleDef(module_def),\n+                )),\n+                Either::Right(macro_def) => Some((\n+                    current_module.find_use_path(ctx.db, macro_def)?,\n+                    ScopeDef::MacroDef(macro_def),\n+                )),\n+            })\n+            .filter_map(|(mod_path, definition)| {\n+                let mut resolution_with_missing_import = render_resolution(\n+                    RenderContext::new(ctx),\n+                    mod_path.segments.last()?.to_string(),\n+                    &definition,\n+                )?;\n+\n+                let mut text_edits =\n+                    resolution_with_missing_import.text_edit().to_owned().into_builder();\n+\n+                let rewriter =\n+                    insert_use(&import_scope, mod_path_to_ast(&mod_path), ctx.config.merge);\n+                let old_ast = rewriter.rewrite_root()?;\n+                algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n+\n+                resolution_with_missing_import.update_text_edit(text_edits.finish());\n+\n+                Some(resolution_with_missing_import)\n+            });\n+\n+    acc.add_all(possible_imports);\n+    Some(())\n }\n \n fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &Type) {\n@@ -676,4 +732,85 @@ impl My<|>\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn function_magic_completion() {\n+        check_edit(\n+            \"stdin\",\n+            r#\"\n+//- /lib.rs crate:dep\n+pub mod io {\n+    pub fn stdin() {}\n+};\n+\n+//- /main.rs crate:main deps:dep\n+fn main() {\n+    stdi<|>\n+}\n+\"#,\n+            r#\"\n+use dep::io::stdin;\n+\n+fn main() {\n+    stdin()$0\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn macro_magic_completion() {\n+        check_edit(\n+            \"macro_with_curlies!\",\n+            r#\"\n+//- /lib.rs crate:dep\n+/// Please call me as macro_with_curlies! {}\n+#[macro_export]\n+macro_rules! macro_with_curlies {\n+    () => {}\n+}\n+\n+//- /main.rs crate:main deps:dep\n+fn main() {\n+    curli<|>\n+}\n+\"#,\n+            r#\"\n+use dep::macro_with_curlies;\n+\n+fn main() {\n+    macro_with_curlies! {$0}\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn case_insensitive_magic_completion_works() {\n+        check_edit(\n+            \"ThirdStruct\",\n+            r#\"\n+//- /lib.rs crate:dep\n+pub struct FirstStruct;\n+pub mod some_module {\n+    pub struct SecondStruct;\n+    pub struct ThirdStruct;\n+}\n+\n+//- /main.rs crate:main deps:dep\n+use dep::{FirstStruct, some_module::SecondStruct};\n+\n+fn main() {\n+    this<|>\n+}\n+\"#,\n+            r#\"\n+use dep::{FirstStruct, some_module::{SecondStruct, ThirdStruct}};\n+\n+fn main() {\n+    ThirdStruct\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "cb6e0554e9a7cededcf6cb4faf49451681b81c62", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee99620754cdcfbab28a2c067dfa31087376d6c3/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee99620754cdcfbab28a2c067dfa31087376d6c3/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=ee99620754cdcfbab28a2c067dfa31087376d6c3", "patch": "@@ -118,7 +118,6 @@ pub fn completions(\n     completions::macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n     completions::trait_impl::complete_trait_impl(&mut acc, &ctx);\n     completions::mod_::complete_mod(&mut acc, &ctx);\n-    completions::magic::complete_magic(&mut acc, &ctx);\n \n     Some(acc)\n }"}]}