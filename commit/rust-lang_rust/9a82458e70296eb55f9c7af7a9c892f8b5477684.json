{"sha": "9a82458e70296eb55f9c7af7a9c892f8b5477684", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhODI0NThlNzAyOTZlYjU1ZjljN2FmN2E5Yzg5MmY4YjU0Nzc2ODQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-25T00:08:39Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-26T11:11:11Z"}, "message": "Move `eval_const_fn_call` to the `const_eval` module", "tree": {"sha": "75454e53abbc83661f054a21c042b381f220b267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75454e53abbc83661f054a21c042b381f220b267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a82458e70296eb55f9c7af7a9c892f8b5477684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a82458e70296eb55f9c7af7a9c892f8b5477684", "html_url": "https://github.com/rust-lang/rust/commit/9a82458e70296eb55f9c7af7a9c892f8b5477684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a82458e70296eb55f9c7af7a9c892f8b5477684/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d67edd32c71ac32c8dafb7106e7187993750629", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d67edd32c71ac32c8dafb7106e7187993750629", "html_url": "https://github.com/rust-lang/rust/commit/2d67edd32c71ac32c8dafb7106e7187993750629"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "875e912b4ce3d7e96a5a0c437a92f6955ba4a19a", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9a82458e70296eb55f9c7af7a9c892f8b5477684/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a82458e70296eb55f9c7af7a9c892f8b5477684/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=9a82458e70296eb55f9c7af7a9c892f8b5477684", "patch": "@@ -149,18 +149,9 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             // sensitive check here.  But we can at least rule out functions that are not const\n             // at all.\n             if ecx.tcx.is_const_fn_raw(def_id) {\n-                // If this function is a `const fn` then as an optimization we can query this\n-                // evaluation immediately.\n-                //\n-                // For the moment we only do this for functions which take no arguments\n-                // (or all arguments are ZSTs) so that we don't memoize too much.\n-                //\n-                // Because `#[track_caller]` adds an implicit non-ZST argument, we also cannot\n-                // perform this optimization on items tagged with it.\n-                let no_implicit_args = !instance.def.requires_caller_location(ecx.tcx());\n-                if args.iter().all(|a| a.layout.is_zst()) && no_implicit_args {\n-                    let gid = GlobalId { instance, promoted: None };\n-                    ecx.eval_const_fn_call(gid, ret)?;\n+                // If this function is a `const fn` then under certain circumstances we\n+                // can evaluate call via the query system, thus memoizing all future calls.\n+                if ecx.try_eval_const_fn_call(instance, ret, args)? {\n                     return Ok(None);\n                 }\n             } else {\n@@ -326,3 +317,43 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         }\n     }\n }\n+\n+impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n+    /// Evaluate a const function where all arguments (if any) are zero-sized types.\n+    /// The evaluation is memoized thanks to the query system.\n+    ///\n+    /// Returns `true` if the call has been evaluated.\n+    fn try_eval_const_fn_call(\n+        &mut self,\n+        instance: ty::Instance<'tcx>,\n+        ret: Option<(PlaceTy<'tcx>, mir::BasicBlock)>,\n+        args: &[OpTy<'tcx>],\n+    ) -> InterpResult<'tcx, bool> {\n+        trace!(\"try_eval_const_fn_call: {:?}\", instance);\n+        // Because `#[track_caller]` adds an implicit non-ZST argument, we also cannot\n+        // perform this optimization on items tagged with it.\n+        if instance.def.requires_caller_location(self.tcx()) {\n+            return Ok(false);\n+        }\n+        // For the moment we only do this for functions which take no arguments\n+        // (or all arguments are ZSTs) so that we don't memoize too much.\n+        if args.iter().any(|a| !a.layout.is_zst()) {\n+            return Ok(false);\n+        }\n+\n+        let gid = GlobalId { instance, promoted: None };\n+\n+        let place = self.const_eval_raw(gid)?;\n+        let dest = match ret {\n+            Some((dest, _)) => dest,\n+            // Don't memoize diverging function calls.\n+            None => return Ok(false),\n+        };\n+\n+        self.copy_op(place.into(), dest)?;\n+\n+        self.return_to_block(ret.map(|r| r.1))?;\n+        self.dump_place(*dest);\n+        return Ok(true);\n+    }\n+}"}, {"sha": "1cc22c03a05f996f7f1c7944c2b0ed11ba563ced", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9a82458e70296eb55f9c7af7a9c892f8b5477684/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a82458e70296eb55f9c7af7a9c892f8b5477684/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=9a82458e70296eb55f9c7af7a9c892f8b5477684", "patch": "@@ -7,8 +7,7 @@ use rustc_target::spec::abi::Abi;\n use syntax::source_map::Span;\n \n use super::{\n-    FnVal, GlobalId, ImmTy, InterpCx, InterpResult, MPlaceTy, Machine, OpTy, PlaceTy,\n-    StackPopCleanup,\n+    FnVal, ImmTy, InterpCx, InterpResult, MPlaceTy, Machine, OpTy, PlaceTy, StackPopCleanup,\n };\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n@@ -402,26 +401,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    /// Evaluate a const function where all arguments (if any) are zero-sized types.\n-    /// The evaluation is memoized thanks to the query system.\n-    // FIXME: Consider moving this to `const_eval.rs`.\n-    pub(crate) fn eval_const_fn_call(\n-        &mut self,\n-        gid: GlobalId<'tcx>,\n-        ret: Option<(PlaceTy<'tcx, M::PointerTag>, mir::BasicBlock)>,\n-    ) -> InterpResult<'tcx> {\n-        trace!(\"eval_const_fn_call: {:?}\", gid);\n-\n-        let place = self.const_eval_raw(gid)?;\n-        let dest = ret.ok_or_else(|| err_ub!(Unreachable))?.0;\n-\n-        self.copy_op(place.into(), dest)?;\n-\n-        self.return_to_block(ret.map(|r| r.1))?;\n-        self.dump_place(*dest);\n-        return Ok(());\n-    }\n-\n     fn drop_in_place(\n         &mut self,\n         place: PlaceTy<'tcx, M::PointerTag>,"}]}