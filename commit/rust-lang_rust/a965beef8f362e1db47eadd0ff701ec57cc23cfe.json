{"sha": "a965beef8f362e1db47eadd0ff701ec57cc23cfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NjViZWVmOGYzNjJlMWRiNDdlYWRkMGZmNzAxZWM1N2NjMjNjZmU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-08-09T22:43:06Z"}, "committer": {"name": "Kornel", "email": "kornel@geekhood.net", "date": "2017-08-09T23:52:50Z"}, "message": "Better diagnostics and recovery for `const` in extern blocks", "tree": {"sha": "481d407c46062f2932fef8e9e748dbac556572cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481d407c46062f2932fef8e9e748dbac556572cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a965beef8f362e1db47eadd0ff701ec57cc23cfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a965beef8f362e1db47eadd0ff701ec57cc23cfe", "html_url": "https://github.com/rust-lang/rust/commit/a965beef8f362e1db47eadd0ff701ec57cc23cfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a965beef8f362e1db47eadd0ff701ec57cc23cfe/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kornelski", "id": 72159, "node_id": "MDQ6VXNlcjcyMTU5", "avatar_url": "https://avatars.githubusercontent.com/u/72159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornelski", "html_url": "https://github.com/kornelski", "followers_url": "https://api.github.com/users/kornelski/followers", "following_url": "https://api.github.com/users/kornelski/following{/other_user}", "gists_url": "https://api.github.com/users/kornelski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornelski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornelski/subscriptions", "organizations_url": "https://api.github.com/users/kornelski/orgs", "repos_url": "https://api.github.com/users/kornelski/repos", "events_url": "https://api.github.com/users/kornelski/events{/privacy}", "received_events_url": "https://api.github.com/users/kornelski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0513c6973523b65f59b8b508ca85dc2944c988", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0513c6973523b65f59b8b508ca85dc2944c988", "html_url": "https://github.com/rust-lang/rust/commit/ff0513c6973523b65f59b8b508ca85dc2944c988"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "cb28f356fe6fb385436566c8e7609c08cf923b39", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a965beef8f362e1db47eadd0ff701ec57cc23cfe/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a965beef8f362e1db47eadd0ff701ec57cc23cfe/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a965beef8f362e1db47eadd0ff701ec57cc23cfe", "patch": "@@ -5518,12 +5518,11 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Parse a static item from a foreign module\n+    /// Parse a static item from a foreign module.\n+    /// Assumes that the `static` keyword is already parsed.\n     fn parse_item_foreign_static(&mut self, vis: ast::Visibility, lo: Span, attrs: Vec<Attribute>)\n                                  -> PResult<'a, ForeignItem> {\n-        self.expect_keyword(keywords::Static)?;\n         let mutbl = self.eat_keyword(keywords::Mut);\n-\n         let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n@@ -5997,21 +5996,22 @@ impl<'a> Parser<'a> {\n         let lo = self.span;\n         let visibility = self.parse_visibility(false)?;\n \n-        if self.check_keyword(keywords::Static) {\n-            // FOREIGN STATIC ITEM\n+        // FOREIGN STATIC ITEM\n+        // Treat `const` as `static` for error recovery, but don't add it to expected tokens.\n+        if self.check_keyword(keywords::Static) || self.token.is_keyword(keywords::Const) {\n+            if self.token.is_keyword(keywords::Const) {\n+                self.diagnostic()\n+                    .struct_span_err(self.span, \"extern items cannot be `const`\")\n+                    .span_label(self.span, \"use `static` instead\").emit();\n+            }\n+            self.bump(); // `static` or `const`\n             return Ok(Some(self.parse_item_foreign_static(visibility, lo, attrs)?));\n         }\n+        // FOREIGN FUNCTION ITEM\n         if self.check_keyword(keywords::Fn) {\n-            // FOREIGN FUNCTION ITEM\n             return Ok(Some(self.parse_item_foreign_fn(visibility, lo, attrs)?));\n         }\n \n-        if self.check_keyword(keywords::Const) {\n-            let mut err = self.span_fatal(self.span, \"extern items cannot be `const`\");\n-            err.help(\"use `static` instead\");\n-            return Err(err);\n-        }\n-\n         // FIXME #5668: this will occur for a macro invocation:\n         match self.parse_macro_use_or_failure(attrs, true, false, lo, visibility)? {\n             Some(item) => {"}, {"sha": "a77d7b118956653e8b5df8dca22188f27a3b21c2", "filename": "src/test/ui/extern-const.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a965beef8f362e1db47eadd0ff701ec57cc23cfe/src%2Ftest%2Fui%2Fextern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a965beef8f362e1db47eadd0ff701ec57cc23cfe/src%2Ftest%2Fui%2Fextern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-const.rs?ref=a965beef8f362e1db47eadd0ff701ec57cc23cfe", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z continue-parse-after-error\n+\n+extern \"C\" {\n+    const C: u8; //~ ERROR extern items cannot be `const`\n+}\n+\n+fn main() {\n+    let x = C;\n+}"}, {"sha": "e6c41a05594e266914c76e1a852febfa2ef7aa43", "filename": "src/test/ui/extern-const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a965beef8f362e1db47eadd0ff701ec57cc23cfe/src%2Ftest%2Fui%2Fextern-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a965beef8f362e1db47eadd0ff701ec57cc23cfe/src%2Ftest%2Fui%2Fextern-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-const.stderr?ref=a965beef8f362e1db47eadd0ff701ec57cc23cfe", "patch": "@@ -0,0 +1,8 @@\n+error: extern items cannot be `const`\n+  --> $DIR/extern-const.rs:14:5\n+   |\n+14 |     const C: u8; //~ ERROR extern items cannot be `const`\n+   |     ^^^^^ use `static` instead\n+\n+error: aborting due to previous error\n+"}]}