{"sha": "94ae60a2a381a143b926450ae5a8cc945c42efc0", "node_id": "C_kwDOAAsO6NoAKDk0YWU2MGEyYTM4MWExNDNiOTI2NDUwYWU1YThjYzk0NWM0MmVmYzA", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-12T21:44:35Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-17T15:52:07Z"}, "message": "rustdoc: Remove Clean impl for `hir::Visibility`\n\nThis should be the last bit of the transition to computed visibility,\nrather than syntactic visibility.", "tree": {"sha": "50a387bb6daf7be9982cc3b514f96d7d4252635f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a387bb6daf7be9982cc3b514f96d7d4252635f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94ae60a2a381a143b926450ae5a8cc945c42efc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94ae60a2a381a143b926450ae5a8cc945c42efc0", "html_url": "https://github.com/rust-lang/rust/commit/94ae60a2a381a143b926450ae5a8cc945c42efc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94ae60a2a381a143b926450ae5a8cc945c42efc0/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a7698aa1bbe479d56ed26e9d559c421882539be", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7698aa1bbe479d56ed26e9d559c421882539be", "html_url": "https://github.com/rust-lang/rust/commit/7a7698aa1bbe479d56ed26e9d559c421882539be"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "6eaea4f3b0695cb9384042a8f2f476e788d64ebc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/94ae60a2a381a143b926450ae5a8cc945c42efc0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ae60a2a381a143b926450ae5a8cc945c42efc0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=94ae60a2a381a143b926450ae5a8cc945c42efc0", "patch": "@@ -1560,14 +1560,23 @@ impl<'tcx> Clean<Constant> for ty::Const<'tcx> {\n \n impl Clean<Item> for hir::FieldDef<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n-        let what_rustc_thinks = Item::from_hir_id_and_parts(\n-            self.hir_id,\n+        let def_id = cx.tcx.hir().local_def_id(self.hir_id).to_def_id();\n+        let what_rustc_thinks = Item::from_def_id_and_parts(\n+            def_id,\n             Some(self.ident.name),\n             StructFieldItem(self.ty.clean(cx)),\n             cx,\n         );\n-        // Don't show `pub` for fields on enum variants; they are always public\n-        Item { visibility: self.vis.clean(cx), ..what_rustc_thinks }\n+        let parent = cx.tcx.parent(def_id).unwrap();\n+        match cx.tcx.def_kind(parent) {\n+            DefKind::Struct | DefKind::Union => what_rustc_thinks,\n+            DefKind::Variant => {\n+                // Variant fields inherit their enum's visibility.\n+                Item { visibility: Visibility::Inherited, ..what_rustc_thinks }\n+            }\n+            // FIXME: what about DefKind::Ctor?\n+            parent_kind => panic!(\"unexpected parent kind: {:?}\", parent_kind),\n+        }\n     }\n }\n \n@@ -1584,24 +1593,6 @@ impl Clean<Item> for ty::FieldDef {\n     }\n }\n \n-impl Clean<Visibility> for hir::Visibility<'_> {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Visibility {\n-        match self.node {\n-            hir::VisibilityKind::Public => Visibility::Public,\n-            hir::VisibilityKind::Inherited => Visibility::Inherited,\n-            hir::VisibilityKind::Crate(_) => {\n-                let krate = DefId::local(CRATE_DEF_INDEX);\n-                Visibility::Restricted(krate)\n-            }\n-            hir::VisibilityKind::Restricted { ref path, .. } => {\n-                let path = path.clean(cx);\n-                let did = register_res(cx, path.res);\n-                Visibility::Restricted(did)\n-            }\n-        }\n-    }\n-}\n-\n impl Clean<Visibility> for ty::Visibility {\n     fn clean(&self, _cx: &mut DocContext<'_>) -> Visibility {\n         match *self {\n@@ -1793,9 +1784,9 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                     clean_fn_or_proc_macro(item, sig, generics, body_id, &mut name, cx)\n                 }\n                 ItemKind::Macro(ref macro_def) => {\n-                    let vis = item.vis.clean(cx);\n+                    let ty_vis = cx.tcx.visibility(def_id).clean(cx);\n                     MacroItem(Macro {\n-                        source: display_macro_source(cx, name, macro_def, def_id, vis),\n+                        source: display_macro_source(cx, name, macro_def, def_id, ty_vis),\n                     })\n                 }\n                 ItemKind::Trait(is_auto, unsafety, ref generics, bounds, item_ids) => {\n@@ -1884,7 +1875,8 @@ fn clean_extern_crate(\n     // this is the ID of the crate itself\n     let crate_def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n     let attrs = cx.tcx.hir().attrs(krate.hir_id());\n-    let please_inline = cx.tcx.visibility(krate.def_id).is_public()\n+    let ty_vis = cx.tcx.visibility(krate.def_id);\n+    let please_inline = ty_vis.is_public()\n         && attrs.iter().any(|a| {\n             a.has_name(sym::doc)\n                 && match a.meta_item_list() {\n@@ -1916,7 +1908,7 @@ fn clean_extern_crate(\n         name: Some(name),\n         attrs: box attrs.clean(cx),\n         def_id: crate_def_id.into(),\n-        visibility: krate.vis.clean(cx),\n+        visibility: ty_vis.clean(cx),\n         kind: box ExternCrateItem { src: orig_name },\n         cfg: attrs.cfg(cx.tcx, &cx.cache.hidden_cfg),\n     }]"}]}