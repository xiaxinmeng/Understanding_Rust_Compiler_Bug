{"sha": "bc0f79f74ad0ab4f663b94772ccbfabed1de625e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMGY3OWY3NGFkMGFiNGY2NjNiOTQ3NzJjY2JmYWJlZDFkZTYyNWU=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-01-14T16:09:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:36:58Z"}, "message": "rename mod", "tree": {"sha": "21c125b75a7b757435ce641788cdcde0b9dd4f14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c125b75a7b757435ce641788cdcde0b9dd4f14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc0f79f74ad0ab4f663b94772ccbfabed1de625e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0f79f74ad0ab4f663b94772ccbfabed1de625e", "html_url": "https://github.com/rust-lang/rust/commit/bc0f79f74ad0ab4f663b94772ccbfabed1de625e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc0f79f74ad0ab4f663b94772ccbfabed1de625e/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b82fe73d1ab9727ff650382d9c86a231b06245be", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82fe73d1ab9727ff650382d9c86a231b06245be", "html_url": "https://github.com/rust-lang/rust/commit/b82fe73d1ab9727ff650382d9c86a231b06245be"}], "stats": {"total": 183, "additions": 148, "deletions": 35}, "files": [{"sha": "3f0de8b5bb731f4a4440a891c4e1d1508fe7f7ce", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 84, "deletions": 6, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/bc0f79f74ad0ab4f663b94772ccbfabed1de625e/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0f79f74ad0ab4f663b94772ccbfabed1de625e/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=bc0f79f74ad0ab4f663b94772ccbfabed1de625e", "patch": "@@ -1,24 +1,27 @@\n use std::sync::Arc;\n \n use hir::{\n-    self, Problem, source_binder,\n+    self, Problem, source_binder::{\n+        self,\n+        module_from_declaration\n+    }, ModuleSource,\n };\n use ra_db::{\n     FilesDatabase, SourceRoot, SourceRootId, SyntaxDatabase,\n     salsa::{self, Database},\n };\n use ra_ide_api_light::{self, assists, LocalEdit, Severity};\n use ra_syntax::{\n-    TextRange, AstNode, SourceFile,\n-    ast::{self, NameOwner},\n-    algo::find_node_at_offset,\n+    algo::find_node_at_offset, ast::{self, NameOwner}, AstNode,\n+    SourceFile,\n+    TextRange,\n };\n \n use crate::{\n     AnalysisChange,\n     CrateId, db, Diagnostic, FileId, FilePosition, FileRange, FileSystemEdit,\n     Query, RootChange, SourceChange, SourceFileEdit,\n-    symbol_index::{LibrarySymbolsQuery, FileSymbol},\n+    symbol_index::{FileSymbol, LibrarySymbolsQuery},\n };\n \n impl db::RootDatabase {\n@@ -110,6 +113,7 @@ impl db::RootDatabase {\n         };\n         vec![krate.crate_id()]\n     }\n+\n     pub(crate) fn find_all_refs(&self, position: FilePosition) -> Vec<(FileId, TextRange)> {\n         let file = self.source_file(position.file_id);\n         // Find the binding associated with the offset\n@@ -230,20 +234,94 @@ impl db::RootDatabase {\n             .collect()\n     }\n \n+<<<<<<< HEAD\n     pub(crate) fn rename(&self, position: FilePosition, new_name: &str) -> Vec<SourceFileEdit> {\n         self.find_all_refs(position)\n             .iter()\n             .map(|(file_id, text_range)| SourceFileEdit {\n                 file_id: *file_id,\n+=======\n+    pub(crate) fn rename(\n+        &self,\n+        position: FilePosition,\n+        new_name: &str,\n+    ) -> Cancelable<Option<SourceChange>> {\n+        let mut source_file_edits = Vec::new();\n+        let mut file_system_edits = Vec::new();\n+\n+        let source_file = self.source_file(position.file_id);\n+        let syntax = source_file.syntax();\n+        // We are rename a mod\n+        if let (Some(ast_module), Some(name)) = (\n+            find_node_at_offset::<ast::Module>(syntax, position.offset),\n+            find_node_at_offset::<ast::Name>(syntax, position.offset),\n+        ) {\n+            if let Some(module) = module_from_declaration(self, position.file_id, &ast_module)? {\n+                let (file_id, module_source) = module.definition_source(self)?;\n+                match module_source {\n+                    ModuleSource::SourceFile(..) => {\n+                        let move_file = FileSystemEdit::MoveFile {\n+                            src: file_id,\n+                            dst_source_root: self.file_source_root(position.file_id),\n+                            dst_path: self\n+                                .file_relative_path(file_id)\n+                                .with_file_name(new_name)\n+                                .with_extension(\"rs\"),\n+                        };\n+                        file_system_edits.push(move_file);\n+                    }\n+                    ModuleSource::Module(..) => {}\n+                }\n+            }\n+\n+            let edit = SourceFileEdit {\n+                file_id: position.file_id,\n+>>>>>>> rename mod\n                 edit: {\n                     let mut builder = ra_text_edit::TextEditBuilder::default();\n-                    builder.replace(*text_range, new_name.into());\n+                    builder.replace(name.syntax().range(), new_name.into());\n                     builder.finish()\n                 },\n+<<<<<<< HEAD\n             })\n             .collect::<Vec<_>>()\n     }\n     pub(crate) fn index_resolve(&self, name_ref: &ast::NameRef) -> Vec<FileSymbol> {\n+=======\n+            };\n+            source_file_edits.push(edit);\n+        }\n+        // rename references\n+        else {\n+            let edit = self\n+                .find_all_refs(position)?\n+                .iter()\n+                .map(|(file_id, text_range)| SourceFileEdit {\n+                    file_id: *file_id,\n+                    edit: {\n+                        let mut builder = ra_text_edit::TextEditBuilder::default();\n+                        builder.replace(*text_range, new_name.into());\n+                        builder.finish()\n+                    },\n+                })\n+                .collect::<Vec<_>>();\n+            if edit.is_empty() {\n+                return Ok(None);\n+            }\n+\n+            source_file_edits = edit;\n+        }\n+\n+        return Ok(Some(SourceChange {\n+            label: \"rename\".to_string(),\n+            source_file_edits,\n+            file_system_edits,\n+            cursor_position: None,\n+        }));\n+    }\n+\n+    pub(crate) fn index_resolve(&self, name_ref: &ast::NameRef) -> Cancelable<Vec<FileSymbol>> {\n+>>>>>>> rename mod\n         let name = name_ref.text();\n         let mut query = Query::new(name.to_string());\n         query.exact();"}, {"sha": "4aa13b0e740ccd7501ba02c67ad817351cc36ac2", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bc0f79f74ad0ab4f663b94772ccbfabed1de625e/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0f79f74ad0ab4f663b94772ccbfabed1de625e/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=bc0f79f74ad0ab4f663b94772ccbfabed1de625e", "patch": "@@ -1,11 +1,13 @@\n+use ra_ide_api::{\n+    AnalysisChange,\n+    CrateGraph, FileId, mock_analysis::{MockAnalysis, single_file, single_file_with_position}, Query,\n+};\n+use ra_ide_api::mock_analysis::analysis_and_position;\n use ra_syntax::TextRange;\n use test_utils::assert_eq_text;\n use insta::assert_debug_snapshot_matches;\n \n-use ra_ide_api::{\n-    mock_analysis::{single_file, single_file_with_position, MockAnalysis},\n-    AnalysisChange, CrateGraph, FileId, Query\n-};\n+mod runnables;\n \n #[test]\n fn test_unresolved_module_diagnostic() {\n@@ -91,6 +93,7 @@ fn test_find_all_refs_for_fn_param() {\n     let refs = get_all_refs(code);\n     assert_eq!(refs.len(), 2);\n }\n+\n #[test]\n fn test_rename_for_local() {\n     test_rename(\n@@ -167,15 +170,35 @@ fn test_rename_for_mut_param() {\n     );\n }\n \n+#[test]\n+fn test_rename_mod() {\n+    let (analysis, position) = analysis_and_position(\n+        \"\n+        //- /bar.rs\n+        mod fo<|>o;\n+        //- /bar/foo.rs\n+        // emtpy\n+    \",\n+    );\n+    let new_name = \"foo2\";\n+    let source_change = analysis.rename(position, new_name).unwrap();\n+    assert_eq_dbg(\n+        r#\"Some(SourceChange { label: \"rename\", source_file_edits: [SourceFileEdit { file_id: FileId(1), edit: TextEdit { atoms: [AtomTextEdit { delete: [4; 7), insert: \"foo2\" }] } }], file_system_edits: [MoveFile { src: FileId(2), dst_source_root: SourceRootId(0), dst_path: \"bar/foo2.rs\" }], cursor_position: None })\"#,\n+        &source_change,\n+    );\n+}\n+\n fn test_rename(text: &str, new_name: &str, expected: &str) {\n     let (analysis, position) = single_file_with_position(text);\n-    let edits = analysis.rename(position, new_name).unwrap();\n+    let source_change = analysis.rename(position, new_name).unwrap();\n     let mut text_edit_bulder = ra_text_edit::TextEditBuilder::default();\n     let mut file_id: Option<FileId> = None;\n-    for edit in edits {\n-        file_id = Some(edit.file_id);\n-        for atom in edit.edit.as_atoms() {\n-            text_edit_bulder.replace(atom.delete, atom.insert.clone());\n+    if let Some(change) = source_change {\n+        for edit in change.source_file_edits {\n+            file_id = Some(edit.file_id);\n+            for atom in edit.edit.as_atoms() {\n+                text_edit_bulder.replace(atom.delete, atom.insert.clone());\n+            }\n         }\n     }\n     let result = text_edit_bulder"}, {"sha": "fa07b194283ed43bcbef093b8d9b3588c3acd84d", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc0f79f74ad0ab4f663b94772ccbfabed1de625e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0f79f74ad0ab4f663b94772ccbfabed1de625e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=bc0f79f74ad0ab4f663b94772ccbfabed1de625e", "patch": "@@ -411,10 +411,7 @@ struct PoolDispatcher<'a> {\n }\n \n impl<'a> PoolDispatcher<'a> {\n-    fn on<'b, R>(\n-        &'b mut self,\n-        f: fn(ServerWorld, R::Params) -> Result<R::Result>,\n-    ) -> Result<&'b mut Self>\n+    fn on<R>(&mut self, f: fn(ServerWorld, R::Params) -> Result<R::Result>) -> Result<&mut Self>\n     where\n         R: req::Request,\n         R::Params: DeserializeOwned + Send + 'static,"}, {"sha": "c010a6ddf5e0c45ef9b852ba35ee14b75be03b18", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bc0f79f74ad0ab4f663b94772ccbfabed1de625e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0f79f74ad0ab4f663b94772ccbfabed1de625e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=bc0f79f74ad0ab4f663b94772ccbfabed1de625e", "patch": "@@ -1,13 +1,11 @@\n-use std::collections::HashMap;\n-\n use gen_lsp_server::ErrorCode;\n use lsp_types::{\n     CodeActionResponse, CodeLens, Command, Diagnostic, DiagnosticSeverity,\n     DocumentFormattingParams, DocumentHighlight, DocumentSymbol, Documentation, FoldingRange,\n     FoldingRangeKind, FoldingRangeParams, Hover, HoverContents, Location, MarkupContent,\n     MarkupKind, ParameterInformation, ParameterLabel, Position, PrepareRenameResponse, Range,\n     RenameParams, SignatureInformation, SymbolInformation, TextDocumentIdentifier, TextEdit,\n-    WorkspaceEdit,\n+    WorkspaceEdit, DocumentChanges, TextDocumentEdit, DocumentChangeOperation, ResourceOp\n };\n use ra_ide_api::{\n     FileId, FilePosition, FileRange, FoldKind, Query, RangeInfo, RunnableKind, Severity,\n@@ -467,26 +465,43 @@ pub fn handle_rename(world: ServerWorld, params: RenameParams) -> Result<Option<\n         .into());\n     }\n \n-    let renames = world\n+    let change = world\n         .analysis()\n         .rename(FilePosition { file_id, offset }, &*params.new_name)?;\n-    if renames.is_empty() {\n+    if change.is_none() {\n         return Ok(None);\n     }\n \n-    let mut changes = HashMap::new();\n-    for edit in renames {\n-        changes\n-            .entry(file_id.try_conv_with(&world)?)\n-            .or_insert_with(Vec::new)\n-            .extend(edit.edit.conv_with(&line_index));\n-    }\n+    let mut source_change = change.unwrap();\n+    let text_document_edits = source_change\n+        .source_file_edits\n+        .drain(..)\n+        .into_iter()\n+        .map(|e| e.try_conv_with(&world))\n+        .collect::<Result<Vec<TextDocumentEdit>>>();\n \n-    Ok(Some(WorkspaceEdit {\n-        changes: Some(changes),\n+    let text_document_ops = source_change\n+        .file_system_edits\n+        .drain(..)\n+        .into_iter()\n+        .map(|e| e.try_conv_with(&world))\n+        .collect::<Result<Vec<ResourceOp>>>();\n \n-        // TODO: return this instead if client/server support it. See #144\n-        document_changes: None,\n+    let mut document_changes = Vec::new();\n+    document_changes.extend(\n+        text_document_edits?\n+            .into_iter()\n+            .map(DocumentChangeOperation::Edit),\n+    );\n+    document_changes.extend(\n+        text_document_ops?\n+            .into_iter()\n+            .map(DocumentChangeOperation::Op),\n+    );\n+\n+    Ok(Some(WorkspaceEdit {\n+        changes: None,\n+        document_changes: Some(DocumentChanges::Operations(document_changes)),\n     }))\n }\n "}]}