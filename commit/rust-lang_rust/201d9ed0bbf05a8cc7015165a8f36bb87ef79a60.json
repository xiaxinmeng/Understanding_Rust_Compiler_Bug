{"sha": "201d9ed0bbf05a8cc7015165a8f36bb87ef79a60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMWQ5ZWQwYmJmMDVhOGNjNzAxNTE2NWE4ZjM2YmI4N2VmNzlhNjA=", "commit": {"author": {"name": "mrmiywj", "email": "jsyangwenjie@gmail.com", "date": "2016-04-30T16:33:39Z"}, "committer": {"name": "mrmiywj", "email": "jsyangwenjie@gmail.com", "date": "2016-05-03T02:00:51Z"}, "message": "add help on pattern guard\n\nfix too long column\n\nfix typo of help on pattern guard\n\none nit\n\nfix compile fail", "tree": {"sha": "73bf727fbe40b049d3f56ec16f86ca618420dd1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73bf727fbe40b049d3f56ec16f86ca618420dd1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/201d9ed0bbf05a8cc7015165a8f36bb87ef79a60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/201d9ed0bbf05a8cc7015165a8f36bb87ef79a60", "html_url": "https://github.com/rust-lang/rust/commit/201d9ed0bbf05a8cc7015165a8f36bb87ef79a60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/201d9ed0bbf05a8cc7015165a8f36bb87ef79a60/comments", "author": {"login": "mrmiywj", "id": 7459820, "node_id": "MDQ6VXNlcjc0NTk4MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/7459820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmiywj", "html_url": "https://github.com/mrmiywj", "followers_url": "https://api.github.com/users/mrmiywj/followers", "following_url": "https://api.github.com/users/mrmiywj/following{/other_user}", "gists_url": "https://api.github.com/users/mrmiywj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmiywj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmiywj/subscriptions", "organizations_url": "https://api.github.com/users/mrmiywj/orgs", "repos_url": "https://api.github.com/users/mrmiywj/repos", "events_url": "https://api.github.com/users/mrmiywj/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmiywj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mrmiywj", "id": 7459820, "node_id": "MDQ6VXNlcjc0NTk4MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/7459820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmiywj", "html_url": "https://github.com/mrmiywj", "followers_url": "https://api.github.com/users/mrmiywj/followers", "following_url": "https://api.github.com/users/mrmiywj/following{/other_user}", "gists_url": "https://api.github.com/users/mrmiywj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmiywj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmiywj/subscriptions", "organizations_url": "https://api.github.com/users/mrmiywj/orgs", "repos_url": "https://api.github.com/users/mrmiywj/repos", "events_url": "https://api.github.com/users/mrmiywj/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmiywj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4751e45521e5a1e70f5cf5086b7712c999546af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4751e45521e5a1e70f5cf5086b7712c999546af8", "html_url": "https://github.com/rust-lang/rust/commit/4751e45521e5a1e70f5cf5086b7712c999546af8"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "c86c22b1e0f3b7f1b56070e2fce4d685554e92ac", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/201d9ed0bbf05a8cc7015165a8f36bb87ef79a60/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201d9ed0bbf05a8cc7015165a8f36bb87ef79a60/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=201d9ed0bbf05a8cc7015165a8f36bb87ef79a60", "patch": "@@ -215,22 +215,63 @@ match Some(\"hi\".to_string()) {\n The variable `s` has type `String`, and its use in the guard is as a variable of\n type `String`. The guard code effectively executes in a separate scope to the\n body of the arm, so the value would be moved into this anonymous scope and\n-therefore become unavailable in the body of the arm. Although this example seems\n-innocuous, the problem is most clear when considering functions that take their\n-argument by value.\n+therefore becomes unavailable in the body of the arm.\n \n-```compile_fail\n+The problem above can be solved by using the `ref` keyword.\n+\n+```\n match Some(\"hi\".to_string()) {\n-    Some(s) if { drop(s); false } => (),\n-    Some(s) => {}, // use s.\n+    Some(ref s) if s.len() == 0 => {},\n     _ => {},\n }\n ```\n \n-The value would be dropped in the guard then become unavailable not only in the\n-body of that arm but also in all subsequent arms! The solution is to bind by\n-reference when using guards or refactor the entire expression, perhaps by\n-putting the condition inside the body of the arm.\n+Though this example seems innocuous and easy to solve, the problem becomes clear\n+when it encounters functions which consume the value:\n+\n+```compile_fail\n+struct A{}\n+\n+impl A {\n+    fn consume(self) -> usize {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let a = Some(A{});\n+    match a {\n+        Some(y) if y.consume() > 0 => {}\n+        _ => {}\n+    }\n+}\n+```\n+\n+In this situation, even the `ref` keyword cannot solve it, since borrowed\n+content cannot be moved. This problem cannot be solved generally. If the value\n+can be cloned, here is a not-so-specific solution:\n+\n+```\n+#[derive(Clone)]\n+struct A{}\n+\n+impl A {\n+    fn consume(self) -> usize {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let a = Some(A{});\n+    match a{\n+        Some(ref y) if y.clone().consume() > 0 => {}\n+        _ => {}\n+    }\n+}\n+```\n+\n+If the value will be consumed in the pattern guard, using its clone will not\n+move its ownership, so the code works.\n \"##,\n \n E0009: r##\""}]}