{"sha": "2edc4195d5b919e0c4d96996b63d661fca9dfb35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZGM0MTk1ZDViOTE5ZTBjNGQ5Njk5NmI2M2Q2NjFmY2E5ZGZiMzU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-09T23:00:27Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-09T23:29:25Z"}, "message": "rustc: Allow import resolutions to be inferred from external crates in resolve3", "tree": {"sha": "391ddaedb41fffac08c0b64f13c300bee2e8eea9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/391ddaedb41fffac08c0b64f13c300bee2e8eea9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2edc4195d5b919e0c4d96996b63d661fca9dfb35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2edc4195d5b919e0c4d96996b63d661fca9dfb35", "html_url": "https://github.com/rust-lang/rust/commit/2edc4195d5b919e0c4d96996b63d661fca9dfb35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2edc4195d5b919e0c4d96996b63d661fca9dfb35/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee1a7175f08670a7ada9071a3e1cf94f1880664", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee1a7175f08670a7ada9071a3e1cf94f1880664", "html_url": "https://github.com/rust-lang/rust/commit/0ee1a7175f08670a7ada9071a3e1cf94f1880664"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "c149f72d0d94bd44a729cc1c36393f9417c09df6", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2edc4195d5b919e0c4d96996b63d661fca9dfb35/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2edc4195d5b919e0c4d96996b63d661fca9dfb35/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=2edc4195d5b919e0c4d96996b63d661fca9dfb35", "patch": "@@ -24,7 +24,8 @@ import syntax::ast::{ty_param, ty_path, ty_str, ty_u, ty_u16, ty_u32, ty_u64};\n import syntax::ast::{ty_u8, ty_uint, variant, view_item, view_item_export};\n import syntax::ast::{view_item_import, view_item_use, view_path_glob};\n import syntax::ast::{view_path_list, view_path_simple};\n-import syntax::ast_util::{def_id_of_def, local_def, new_def_hash, walk_pat};\n+import syntax::ast_util::{def_id_of_def, dummy_sp, local_def, new_def_hash};\n+import syntax::ast_util::{walk_pat};\n import syntax::attr::{attr_metas, contains_name};\n import syntax::codemap::span;\n import syntax::visit::{default_visitor, fk_method, mk_vt, visit_block};\n@@ -1163,6 +1164,8 @@ class Resolver {\n      * crate.\n      */\n     fn build_reduced_graph_for_external_crate(root: @Module) {\n+        let modules = new_def_hash();\n+\n         // Create all the items reachable by paths.\n         for each_path(self.session.cstore, get(root.def_id).crate)\n                 |path_entry| {\n@@ -1220,15 +1223,58 @@ class Resolver {\n                                     let parent_link =\n                                         self.get_parent_link(new_parent,\n                                                              atom);\n-                                    (*child_name_bindings).\n-                                        define_module(parent_link,\n-                                                      some(def_id));\n+\n+                                    alt modules.find(def_id) {\n+                                        none {\n+                                            (*child_name_bindings).\n+                                                define_module(parent_link,\n+                                                              some(def_id));\n+                                            modules.insert(def_id,\n+                                                (*child_name_bindings).\n+                                                    get_module());\n+                                        }\n+                                        some(existing_module) {\n+                                            // Create an import resolution to\n+                                            // avoid creating cycles in the\n+                                            // module graph.\n+\n+                                            let resolution =\n+                                                @ImportResolution(dummy_sp());\n+                                            resolution.\n+                                                outstanding_references = 0;\n+\n+                                            alt existing_module.parent_link {\n+                                                NoParentLink |\n+                                                        BlockParentLink(*) {\n+                                                    fail \"can't happen\";\n+                                                }\n+                                                ModuleParentLink\n+                                                        (parent_module,\n+                                                         atom) {\n+\n+                                                    let name_bindings =\n+                                                        parent_module.\n+                                                            children.get\n+                                                                (atom);\n+\n+                                                    resolution.module_target =\n+                                                        some(Target\n+                                                            (parent_module,\n+                                                             name_bindings));\n+                                                }\n+                                            }\n+\n+                                            new_parent.import_resolutions.\n+                                                insert(atom, resolution);\n+                                        }\n+                                    }\n                                 }\n                                 ModuleDef(module) {\n                                     #debug(\"(building reduced graph for \\\n                                             external crate) already created \\\n                                             module\");\n                                     module.def_id = some(def_id);\n+                                    modules.insert(def_id, module);\n                                 }\n                             }\n                         }"}]}