{"sha": "5fa44c4b5a31b9de0f8306336109fa0913fccfe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYTQ0YzRiNWEzMWI5ZGUwZjgzMDYzMzYxMDlmYTA5MTNmY2NmZTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-15T11:42:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-15T11:42:06Z"}, "message": "Rollup merge of #57352 - arielb1:no-manual-markers, r=nikomatsakis\n\nforbid manually impl'ing one of an object type's marker traits\n\nThis shouldn't break compatibility for crates that do not use\n`feature(optin_builtin_traits)`, because as the test shows, it is\nonly possible to impl a marker trait for a trait object in the crate the\nmarker trait is defined in, which must define\n`feature(optin_builtin_traits)`.\n\nFixes #56934.\n\nr? @nikomatsakis", "tree": {"sha": "fb35f05cc91b2ede331335c9871ddc79d83406c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb35f05cc91b2ede331335c9871ddc79d83406c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fa44c4b5a31b9de0f8306336109fa0913fccfe7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcPccOCRBK7hj4Ov3rIwAAdHIIAC17Z3bs7lKeHxIUtXYGYYnY\niKzdsRcl5T8N1t3pdf7V7OSduD+LDyGuqryTRqaIqXlR70L+U8yOITVTSYtMqnBJ\nQw3RnF9eizD/jDDnPoIQzPqfr3gRovzsPGph1mpvLV54em2j/3twYKLaxv6RIyfb\nORWhGOWQD7rB+oelkK/Pt9HuhGeHwcpiH8i+MY2mS+ZKr3UZ5e70ubPHm1zrZkl3\nryXJ8vsCfca8cMTt+UAbnAt2MxjE0kajPieT6/7MiGNeVdQDKfnfxwe9tq7TMYB5\nsRjmYvtKpIXKYOBfzbNDtz6EHRw7iNnKniNEWIoCWIochaHAlLceescPlDzmI2U=\n=vSrs\n-----END PGP SIGNATURE-----\n", "payload": "tree fb35f05cc91b2ede331335c9871ddc79d83406c0\nparent c4b8735872c127f749c0642bc7b8c3a44a2cbb5d\nparent d38a59f8b5ad8ddbed5294bb4755618d7c2802aa\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547552526 +0100\ncommitter GitHub <noreply@github.com> 1547552526 +0100\n\nRollup merge of #57352 - arielb1:no-manual-markers, r=nikomatsakis\n\nforbid manually impl'ing one of an object type's marker traits\n\nThis shouldn't break compatibility for crates that do not use\n`feature(optin_builtin_traits)`, because as the test shows, it is\nonly possible to impl a marker trait for a trait object in the crate the\nmarker trait is defined in, which must define\n`feature(optin_builtin_traits)`.\n\nFixes #56934.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa44c4b5a31b9de0f8306336109fa0913fccfe7", "html_url": "https://github.com/rust-lang/rust/commit/5fa44c4b5a31b9de0f8306336109fa0913fccfe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fa44c4b5a31b9de0f8306336109fa0913fccfe7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4b8735872c127f749c0642bc7b8c3a44a2cbb5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b8735872c127f749c0642bc7b8c3a44a2cbb5d", "html_url": "https://github.com/rust-lang/rust/commit/c4b8735872c127f749c0642bc7b8c3a44a2cbb5d"}, {"sha": "d38a59f8b5ad8ddbed5294bb4755618d7c2802aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38a59f8b5ad8ddbed5294bb4755618d7c2802aa", "html_url": "https://github.com/rust-lang/rust/commit/d38a59f8b5ad8ddbed5294bb4755618d7c2802aa"}], "stats": {"total": 149, "additions": 145, "deletions": 4}, "files": [{"sha": "8053ed130e91b44c759dea78d7b16ca8b7b54eee", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5fa44c4b5a31b9de0f8306336109fa0913fccfe7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa44c4b5a31b9de0f8306336109fa0913fccfe7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=5fa44c4b5a31b9de0f8306336109fa0913fccfe7", "patch": "@@ -171,13 +171,23 @@ fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeI\n         // This is something like impl Trait1 for Trait2. Illegal\n         // if Trait1 is a supertrait of Trait2 or Trait2 is not object safe.\n \n-        if let Some(principal_def_id) = data.principal_def_id() {\n-            if !tcx.is_object_safe(principal_def_id) {\n+        let component_def_ids = data.iter().flat_map(|predicate| {\n+            match predicate.skip_binder() {\n+                ty::ExistentialPredicate::Trait(tr) => Some(tr.def_id),\n+                ty::ExistentialPredicate::AutoTrait(def_id) => Some(*def_id),\n+                // An associated type projection necessarily comes with\n+                // an additional `Trait` requirement.\n+                ty::ExistentialPredicate::Projection(..) => None,\n+            }\n+        });\n+\n+        for component_def_id in component_def_ids {\n+            if !tcx.is_object_safe(component_def_id) {\n                 // This is an error, but it will be reported by wfcheck.  Ignore it here.\n                 // This is tested by `coherence-impl-trait-for-trait-object-safe.rs`.\n             } else {\n                 let mut supertrait_def_ids =\n-                    traits::supertrait_def_ids(tcx, principal_def_id);\n+                    traits::supertrait_def_ids(tcx, component_def_id);\n                 if supertrait_def_ids.any(|d| d == trait_def_id) {\n                     let sp = tcx.sess.source_map().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n                     struct_span_err!(tcx.sess,\n@@ -193,6 +203,5 @@ fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeI\n                 }\n             }\n         }\n-        // FIXME: also check auto-trait def-ids? (e.g. `impl Sync for Foo+Sync`)?\n     }\n }"}, {"sha": "5ea69190951e1acb6dd60f06254446dcee8098c7", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5fa44c4b5a31b9de0f8306336109fa0913fccfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa44c4b5a31b9de0f8306336109fa0913fccfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs?ref=5fa44c4b5a31b9de0f8306336109fa0913fccfe7", "patch": "@@ -0,0 +1,29 @@\n+#![feature(optin_builtin_traits)]\n+\n+// Test for issue #56934 - that it is impossible to redundantly\n+// implement an auto-trait for a trait object type that contains it.\n+\n+// Negative impl variant.\n+\n+auto trait Marker1 {}\n+auto trait Marker2 {}\n+\n+trait Object: Marker1 {}\n+\n+// A supertrait marker is illegal...\n+impl !Marker1 for dyn Object + Marker2 { }   //~ ERROR E0371\n+// ...and also a direct component.\n+impl !Marker2 for dyn Object + Marker2 { }   //~ ERROR E0371\n+\n+// But implementing a marker if it is not present is OK.\n+impl !Marker2 for dyn Object {} // OK\n+\n+// A non-principal trait-object type is orphan even in its crate.\n+impl !Send for dyn Marker2 {} //~ ERROR E0117\n+\n+// And impl'ing a remote marker for a local trait object is forbidden\n+// by one of these special orphan-like rules.\n+impl !Send for dyn Object {} //~ ERROR E0321\n+impl !Send for dyn Object + Marker2 {} //~ ERROR E0321\n+\n+fn main() { }"}, {"sha": "c8a146cdd445686c5141a852d0f8ea2f467a14bf", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5fa44c4b5a31b9de0f8306336109fa0913fccfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fa44c4b5a31b9de0f8306336109fa0913fccfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr?ref=5fa44c4b5a31b9de0f8306336109fa0913fccfe7", "patch": "@@ -0,0 +1,37 @@\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:14:1\n+   |\n+LL | impl !Marker1 for dyn Object + Marker2 { }   //~ ERROR E0371\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n+\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:16:1\n+   |\n+LL | impl !Marker2 for dyn Object + Marker2 { }   //~ ERROR E0371\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:22:1\n+   |\n+LL | impl !Send for dyn Marker2 {} //~ ERROR E0117\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:26:1\n+   |\n+LL | impl !Send for dyn Object {} //~ ERROR E0321\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n+\n+error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:27:1\n+   |\n+LL | impl !Send for dyn Object + Marker2 {} //~ ERROR E0321\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors occurred: E0117, E0321, E0371.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "6b5689e8260f08fac2071f445aa1ecdff4015035", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5fa44c4b5a31b9de0f8306336109fa0913fccfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fa44c4b5a31b9de0f8306336109fa0913fccfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs?ref=5fa44c4b5a31b9de0f8306336109fa0913fccfe7", "patch": "@@ -0,0 +1,29 @@\n+#![feature(optin_builtin_traits)]\n+\n+// Test for issue #56934 - that it is impossible to redundantly\n+// implement an auto-trait for a trait object type that contains it.\n+\n+// Positive impl variant.\n+\n+auto trait Marker1 {}\n+auto trait Marker2 {}\n+\n+trait Object: Marker1 {}\n+\n+// A supertrait marker is illegal...\n+impl Marker1 for dyn Object + Marker2 { }   //~ ERROR E0371\n+// ...and also a direct component.\n+impl Marker2 for dyn Object + Marker2 { }   //~ ERROR E0371\n+\n+// But implementing a marker if it is not present is OK.\n+impl Marker2 for dyn Object {} // OK\n+\n+// A non-principal trait-object type is orphan even in its crate.\n+unsafe impl Send for dyn Marker2 {} //~ ERROR E0117\n+\n+// And impl'ing a remote marker for a local trait object is forbidden\n+// by one of these special orphan-like rules.\n+unsafe impl Send for dyn Object {} //~ ERROR E0321\n+unsafe impl Send for dyn Object + Marker2 {} //~ ERROR E0321\n+\n+fn main() { }"}, {"sha": "78ca2f5279d634fdaf35d63dade61f1ccd21e2a8", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5fa44c4b5a31b9de0f8306336109fa0913fccfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fa44c4b5a31b9de0f8306336109fa0913fccfe7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr?ref=5fa44c4b5a31b9de0f8306336109fa0913fccfe7", "patch": "@@ -0,0 +1,37 @@\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:14:1\n+   |\n+LL | impl Marker1 for dyn Object + Marker2 { }   //~ ERROR E0371\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n+\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:16:1\n+   |\n+LL | impl Marker2 for dyn Object + Marker2 { }   //~ ERROR E0371\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:22:1\n+   |\n+LL | unsafe impl Send for dyn Marker2 {} //~ ERROR E0117\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:26:1\n+   |\n+LL | unsafe impl Send for dyn Object {} //~ ERROR E0321\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n+\n+error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:27:1\n+   |\n+LL | unsafe impl Send for dyn Object + Marker2 {} //~ ERROR E0321\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors occurred: E0117, E0321, E0371.\n+For more information about an error, try `rustc --explain E0117`."}]}