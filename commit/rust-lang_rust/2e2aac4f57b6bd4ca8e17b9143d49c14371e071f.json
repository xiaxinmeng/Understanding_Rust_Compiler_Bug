{"sha": "2e2aac4f57b6bd4ca8e17b9143d49c14371e071f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMmFhYzRmNTdiNmJkNGNhOGUxN2I5MTQzZDQ5YzE0MzcxZTA3MWY=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-06T10:44:14Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-10T14:37:24Z"}, "message": "add try trait as lang item", "tree": {"sha": "48dfec7f18de579630256ea39e9b48fb212a3889", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48dfec7f18de579630256ea39e9b48fb212a3889"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f", "html_url": "https://github.com/rust-lang/rust/commit/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32a46e91155de70eeca062a1ece74cea56574649", "url": "https://api.github.com/repos/rust-lang/rust/commits/32a46e91155de70eeca062a1ece74cea56574649", "html_url": "https://github.com/rust-lang/rust/commit/32a46e91155de70eeca062a1ece74cea56574649"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "ed8c614b109798800580c656972b091c95234f17", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=2e2aac4f57b6bd4ca8e17b9143d49c14371e071f", "patch": "@@ -25,6 +25,7 @@\n     )\n )]\n #[doc(alias = \"?\")]\n+ #[cfg_attr(not(bootstrap), lang = \"try_trait\")]\n pub trait Try {\n     /// The type of this value when viewed as successful.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]"}, {"sha": "2ffa77031f33b3e4975aff9942018dfae30792e8", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=2e2aac4f57b6bd4ca8e17b9143d49c14371e071f", "patch": "@@ -194,6 +194,7 @@ language_item_table! {\n     ShrAssignTraitLangItem,      \"shr_assign\",         shr_assign_trait,        Target::Trait;\n     IndexTraitLangItem,          \"index\",              index_trait,             Target::Trait;\n     IndexMutTraitLangItem,       \"index_mut\",          index_mut_trait,         Target::Trait;\n+    TryTraitLangItem,            \"try_trait\",                try_trait,               Target::Trait;\n \n     UnsafeCellTypeLangItem,      \"unsafe_cell\",        unsafe_cell_type,        Target::Struct;\n     VaListTypeLangItem,          \"va_list\",            va_list,                 Target::Struct;"}, {"sha": "53891a4fd9fd6b6e487552ae1971885618fe4b67", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2e2aac4f57b6bd4ca8e17b9143d49c14371e071f", "patch": "@@ -5289,6 +5289,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) {\n+        debug!(\"suggest_missing_await: expr={:?} expected={:?}, found={:?}\", expr, expected, found);\n         // `.await` is not permitted outside of `async` bodies, so don't bother to suggest if the\n         // body isn't `async`.\n         let item_id = self.tcx().hir().get_parent_node(self.body_id);\n@@ -5306,22 +5307,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .next()\n                     .unwrap()\n                     .def_id;\n+                // `<T as Future>::Output`\n+                let projection_ty = ty::ProjectionTy {\n+                    // `T`\n+                    substs: self\n+                        .tcx\n+                        .mk_substs_trait(found, self.fresh_substs_for_item(sp, item_def_id)),\n+                    // `Future::Output`\n+                    item_def_id,\n+                };\n+\n                 let predicate =\n                     ty::Predicate::Projection(ty::Binder::bind(ty::ProjectionPredicate {\n-                        // `<T as Future>::Output`\n-                        projection_ty: ty::ProjectionTy {\n-                            // `T`\n-                            substs: self.tcx.mk_substs_trait(\n-                                found,\n-                                self.fresh_substs_for_item(sp, item_def_id),\n-                            ),\n-                            // `Future::Output`\n-                            item_def_id,\n-                        },\n+                        projection_ty,\n                         ty: expected,\n                     }));\n                 let obligation = traits::Obligation::new(self.misc(sp), self.param_env, predicate);\n                 debug!(\"suggest_missing_await: trying obligation {:?}\", obligation);\n+\n+                //let try_trait_def_id = self.tcx.require_lang_item(lang_items::TryTraitLangItem, None);\n+                //let try_trait_ref = ty::TraitRef {\n+                //    def_id: try_trait_def_id,\n+                //    substs: self.tcx.mk_substs_trait(self.tcx.type_of(item_def_id), &[]),\n+                //};\n+                //let try_obligation = traits::Obligation::new(self.misc(sp), self.param_env, try_trait_ref.without_const().to_predicate());\n+                //let try_trait_is_implemented = self.predicate_must_hold_modulo_regions(&try_obligation);\n+                //debug!(\"suggest_missing_await: try trait is implemented {}\", try_trait_is_implemented);\n+\n                 if self.infcx.predicate_may_hold(&obligation) {\n                     debug!(\"suggest_missing_await: obligation held: {:?}\", obligation);\n                     if let Ok(code) = self.sess().source_map().span_to_snippet(sp) {"}]}