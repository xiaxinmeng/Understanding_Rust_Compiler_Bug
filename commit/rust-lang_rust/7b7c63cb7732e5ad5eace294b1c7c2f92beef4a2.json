{"sha": "7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiN2M2M2NiNzczMmU1YWQ1ZWFjZTI5NGIxYzdjMmY5MmJlZWY0YTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-25T16:30:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T16:30:22Z"}, "message": "Rollup merge of #69041 - petrochenkov:stabmodispan, r=Amanieu\n\nproc_macro: Stabilize `Span::resolved_at` and `Span::located_at`\n\nIntroduced in https://github.com/rust-lang/rust/pull/47149.\nPart of https://github.com/rust-lang/rust/issues/54725.\n\nMotivation: https://github.com/rust-lang/rust/pull/68716#issuecomment-583918919.\nIdentifiers in proc macros may want to inherit span locations for diagnostics from one tokens (e.g. some tokens from the macro input), but resolve those identifiers from some different location (e.g. from the macro's definition site).\nThis becomes especially important when multiple resolution locations become available with stabilization of [`Span::mixed_site`](https://github.com/rust-lang/rust/pull/68716).\n\nWhy I think this is the right API for setting span's location and hygiene - https://github.com/rust-lang/rust/pull/69041#issuecomment-586644778.\n\nr? @dtolnay", "tree": {"sha": "07ab72a6d8d0adf30ca2fd8dad25739b63a524cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07ab72a6d8d0adf30ca2fd8dad25739b63a524cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepGWeCRBK7hj4Ov3rIwAAdHIIAABq5ovceoHF15D1kpGJB02f\nh4yxGySwSTND5KpCuAfmy8dlEEAgOeOUqNiQMU84xMDnN0TlGR+z0ykoYTlk0OoU\npvr31IPyYfz/IcvGexVVGtf2nWwqtB46/ibdcPfJ7Od1Hng6FAZqR87NyuCUeDyu\nBD6k9t6D0qQMHJTTwrm5xRxRzAfWawWCdiPrd4HLs+gPicyzzCI6QoJlJvHJIUV4\nSQozwrENVNx/OUJAi43S7KwFqVZuey0i7t1udNxEhS78H2RDrnwOdxB1vXwOap26\n8ZT4dtWQ4aLRXk768OK0tNxYJ/a2q6SJNZ0BRkpzscgpyw2XKXI+C1G7kXlUGxo=\n=SdgU\n-----END PGP SIGNATURE-----\n", "payload": "tree 07ab72a6d8d0adf30ca2fd8dad25739b63a524cc\nparent b613c989594f1cbf0d4af1a7a153786cca7792c8\nparent 966a295e8cc210d7b50185d16cb46a7ae1874531\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587832222 +0200\ncommitter GitHub <noreply@github.com> 1587832222 +0200\n\nRollup merge of #69041 - petrochenkov:stabmodispan, r=Amanieu\n\nproc_macro: Stabilize `Span::resolved_at` and `Span::located_at`\n\nIntroduced in https://github.com/rust-lang/rust/pull/47149.\nPart of https://github.com/rust-lang/rust/issues/54725.\n\nMotivation: https://github.com/rust-lang/rust/pull/68716#issuecomment-583918919.\nIdentifiers in proc macros may want to inherit span locations for diagnostics from one tokens (e.g. some tokens from the macro input), but resolve those identifiers from some different location (e.g. from the macro's definition site).\nThis becomes especially important when multiple resolution locations become available with stabilization of [`Span::mixed_site`](https://github.com/rust-lang/rust/pull/68716).\n\nWhy I think this is the right API for setting span's location and hygiene - https://github.com/rust-lang/rust/pull/69041#issuecomment-586644778.\n\nr? @dtolnay\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2", "html_url": "https://github.com/rust-lang/rust/commit/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b613c989594f1cbf0d4af1a7a153786cca7792c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b613c989594f1cbf0d4af1a7a153786cca7792c8", "html_url": "https://github.com/rust-lang/rust/commit/b613c989594f1cbf0d4af1a7a153786cca7792c8"}, {"sha": "966a295e8cc210d7b50185d16cb46a7ae1874531", "url": "https://api.github.com/repos/rust-lang/rust/commits/966a295e8cc210d7b50185d16cb46a7ae1874531", "html_url": "https://github.com/rust-lang/rust/commit/966a295e8cc210d7b50185d16cb46a7ae1874531"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "6e49d9829a2e13f4c65b864e2321c6f93be49ca6", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2", "patch": "@@ -352,14 +352,14 @@ impl Span {\n \n     /// Creates a new span with the same line/column information as `self` but\n     /// that resolves symbols as though it were at `other`.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n+    #[stable(feature = \"proc_macro_span_resolved_at\", since = \"1.43.0\")]\n     pub fn resolved_at(&self, other: Span) -> Span {\n         Span(self.0.resolved_at(other.0))\n     }\n \n     /// Creates a new span with the same name resolution behavior as `self` but\n     /// with the line/column information of `other`.\n-    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n+    #[stable(feature = \"proc_macro_span_located_at\", since = \"1.43.0\")]\n     pub fn located_at(&self, other: Span) -> Span {\n         other.resolved_at(*self)\n     }"}, {"sha": "9416c133e566106d413bbcc038bd644266711138", "filename": "src/test/ui/proc-macro/auxiliary/resolved-located-at.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fresolved-located-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fresolved-located-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fresolved-located-at.rs?ref=7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2", "patch": "@@ -0,0 +1,32 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro_def_site)]\n+#![feature(proc_macro_diagnostic)]\n+#![feature(proc_macro_hygiene)]\n+#![feature(proc_macro_quote)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn resolve_located_at(input: TokenStream) -> TokenStream {\n+    match &*input.into_iter().collect::<Vec<_>>() {\n+        [a, b, ..] => {\n+            // The error is reported at input `a`.\n+            let mut diag = Diagnostic::new(Level::Error, \"expected error\");\n+            diag.set_spans(Span::def_site().located_at(a.span()));\n+            diag.emit();\n+\n+            // Resolves to `struct S;` at def site, but the error is reported at input `b`.\n+            let s = TokenTree::Ident(Ident::new(\"S\", b.span().resolved_at(Span::def_site())));\n+            quote!({\n+                struct S;\n+\n+                $s\n+            })\n+        }\n+        _ => panic!(\"unexpected input\"),\n+    }\n+}"}, {"sha": "9976284e222e6de46bb17bfe527e7a30822ce0e4", "filename": "src/test/ui/proc-macro/resolved-located-at.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2/src%2Ftest%2Fui%2Fproc-macro%2Fresolved-located-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2/src%2Ftest%2Fui%2Fproc-macro%2Fresolved-located-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolved-located-at.rs?ref=7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:resolved-located-at.rs\n+\n+#![feature(proc_macro_hygiene)]\n+\n+#[macro_use]\n+extern crate resolved_located_at;\n+\n+fn main() {\n+    resolve_located_at!(a b)\n+    //~^ ERROR expected error\n+    //~| ERROR mismatched types\n+}"}, {"sha": "0df7ced27a7776e7a6425d36c14e232e2585a6c8", "filename": "src/test/ui/proc-macro/resolved-located-at.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2/src%2Ftest%2Fui%2Fproc-macro%2Fresolved-located-at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2/src%2Ftest%2Fui%2Fproc-macro%2Fresolved-located-at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolved-located-at.stderr?ref=7b7c63cb7732e5ad5eace294b1c7c2f92beef4a2", "patch": "@@ -0,0 +1,21 @@\n+error: expected error\n+  --> $DIR/resolved-located-at.rs:9:25\n+   |\n+LL |     resolve_located_at!(a b)\n+   |                         ^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/resolved-located-at.rs:9:27\n+   |\n+LL | fn main() {\n+   |           - expected `()` because of default return type\n+LL |     resolve_located_at!(a b)\n+   |                           ^ expected `()`, found struct `main::S`\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}