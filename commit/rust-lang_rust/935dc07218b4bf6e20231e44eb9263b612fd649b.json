{"sha": "935dc07218b4bf6e20231e44eb9263b612fd649b", "node_id": "C_kwDOAAsO6NoAKDkzNWRjMDcyMThiNGJmNmUyMDIzMWU0NGViOTI2M2I2MTJmZDY0OWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-19T19:21:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-19T19:21:35Z"}, "message": "Auto merge of #103600 - compiler-errors:early-binder-nits, r=spastorino\n\nAddress some `EarlyBinder` nits", "tree": {"sha": "7f23c9ee1cc4a2b3a7160dac735c5e510636b375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f23c9ee1cc4a2b3a7160dac735c5e510636b375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/935dc07218b4bf6e20231e44eb9263b612fd649b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/935dc07218b4bf6e20231e44eb9263b612fd649b", "html_url": "https://github.com/rust-lang/rust/commit/935dc07218b4bf6e20231e44eb9263b612fd649b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/935dc07218b4bf6e20231e44eb9263b612fd649b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ab803891dd95a04f3b2143e40b26f03b608b4bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab803891dd95a04f3b2143e40b26f03b608b4bc", "html_url": "https://github.com/rust-lang/rust/commit/7ab803891dd95a04f3b2143e40b26f03b608b4bc"}, {"sha": "f705d646738ea8b1238e1c9a58c16532cc4d73a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f705d646738ea8b1238e1c9a58c16532cc4d73a6", "html_url": "https://github.com/rust-lang/rust/commit/f705d646738ea8b1238e1c9a58c16532cc4d73a6"}], "stats": {"total": 72, "additions": 27, "deletions": 45}, "files": [{"sha": "c29a3afd7fba876896d006e2b0fb45407d1a3f8c", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/935dc07218b4bf6e20231e44eb9263b612fd649b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935dc07218b4bf6e20231e44eb9263b612fd649b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=935dc07218b4bf6e20231e44eb9263b612fd649b", "patch": "@@ -26,11 +26,9 @@ use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n-use rustc_middle::ty::DynKind;\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{\n-    self, Const, DefIdTree, EarlyBinder, IsSuggestable, Ty, TyCtxt, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, Const, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{DynKind, EarlyBinder};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -490,7 +488,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             self.astconv\n                                 .normalize_ty(\n                                     self.span,\n-                                    EarlyBinder(tcx.at(self.span).type_of(param.def_id))\n+                                    tcx.at(self.span)\n+                                        .bound_type_of(param.def_id)\n                                         .subst(tcx, substs),\n                                 )\n                                 .into()\n@@ -1255,10 +1254,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         item_segment: &hir::PathSegment<'_>,\n     ) -> Ty<'tcx> {\n         let substs = self.ast_path_substs_for_ty(span, did, item_segment);\n-        self.normalize_ty(\n-            span,\n-            EarlyBinder(self.tcx().at(span).type_of(did)).subst(self.tcx(), substs),\n-        )\n+        self.normalize_ty(span, self.tcx().at(span).bound_type_of(did).subst(self.tcx(), substs))\n     }\n \n     fn conv_object_ty_poly_trait_ref("}, {"sha": "150e917c73988bef7126b16ede746d8a60b20eec", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/935dc07218b4bf6e20231e44eb9263b612fd649b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935dc07218b4bf6e20231e44eb9263b612fd649b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=935dc07218b4bf6e20231e44eb9263b612fd649b", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n-    self, AdtKind, CanonicalUserType, DefIdTree, EarlyBinder, GenericParamDefKind, Ty, UserType,\n+    self, AdtKind, CanonicalUserType, DefIdTree, GenericParamDefKind, Ty, UserType,\n };\n use rustc_middle::ty::{GenericArgKind, InternalSubsts, SubstsRef, UserSelfTy, UserSubsts};\n use rustc_session::lint;\n@@ -333,22 +333,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Basically whenever we are converting from a type scheme into\n-    /// the fn body space, we always want to normalize associated\n-    /// types as well. This function combines the two.\n-    fn instantiate_type_scheme<T>(&self, span: Span, substs: SubstsRef<'tcx>, value: T) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        debug!(\"instantiate_type_scheme(value={:?}, substs={:?})\", value, substs);\n-        let value = EarlyBinder(value).subst(self.tcx, substs);\n-        let result = self.normalize(span, value);\n-        debug!(\"instantiate_type_scheme = {:?}\", result);\n-        result\n-    }\n-\n-    /// As `instantiate_type_scheme`, but for the bounds found in a\n-    /// generic type scheme.\n+    /// Instantiates and normalizes the bounds for a given item\n     pub(in super::super) fn instantiate_bounds(\n         &self,\n         span: Span,\n@@ -1160,10 +1145,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n         let def_id = res.def_id();\n \n-        // The things we are substituting into the type should not contain\n-        // escaping late-bound regions, and nor should the base type scheme.\n-        let ty = tcx.type_of(def_id);\n-\n         let arg_count = GenericArgCountResult {\n             explicit_late_bound,\n             correct: if infer_args_for_err.is_empty() {\n@@ -1286,8 +1267,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 },\n             )\n         });\n-        assert!(!substs.has_escaping_bound_vars());\n-        assert!(!ty.has_escaping_bound_vars());\n \n         // First, store the \"user substs\" for later.\n         self.write_user_type_annotation_from_substs(hir_id, def_id, substs, user_self_ty);\n@@ -1296,17 +1275,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Substitute the values for the type parameters into the type of\n         // the referenced item.\n-        let ty_substituted = self.instantiate_type_scheme(span, &substs, ty);\n+        let ty = tcx.bound_type_of(def_id);\n+        assert!(!substs.has_escaping_bound_vars());\n+        assert!(!ty.0.has_escaping_bound_vars());\n+        let ty_substituted = self.normalize(span, ty.subst(tcx, substs));\n \n         if let Some(UserSelfTy { impl_def_id, self_ty }) = user_self_ty {\n             // In the case of `Foo<T>::method` and `<Foo<T>>::method`, if `method`\n             // is inherent, there is no `Self` parameter; instead, the impl needs\n             // type parameters, which we can infer by unifying the provided `Self`\n             // with the substituted impl type.\n             // This also occurs for an enum variant on a type alias.\n-            let ty = tcx.type_of(impl_def_id);\n-\n-            let impl_ty = self.instantiate_type_scheme(span, &substs, ty);\n+            let impl_ty = self.normalize(span, tcx.bound_type_of(impl_def_id).subst(tcx, substs));\n             match self.at(&self.misc(span), self.param_env).eq(impl_ty, self_ty) {\n                 Ok(ok) => self.register_infer_ok_obligations(ok),\n                 Err(_) => {"}, {"sha": "fddb8a458a7d5f0716a6ba25f7339849a1196eb4", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/935dc07218b4bf6e20231e44eb9263b612fd649b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935dc07218b4bf6e20231e44eb9263b612fd649b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=935dc07218b4bf6e20231e44eb9263b612fd649b", "patch": "@@ -456,9 +456,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Instantiate late-bound regions and substitute the trait\n         // parameters into the method type to get the actual method type.\n         //\n-        // N.B., instantiate late-bound regions first so that\n-        // `instantiate_type_scheme` can normalize associated types that\n-        // may reference those regions.\n+        // N.B., instantiate late-bound regions before normalizing the\n+        // function signature so that normalization does not need to deal\n+        // with bound regions.\n         let fn_sig = tcx.bound_fn_sig(def_id);\n         let fn_sig = fn_sig.subst(self.tcx, substs);\n         let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, fn_sig);"}, {"sha": "40bbec8ddd091da396b17dcb866004b4b10cab20", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/935dc07218b4bf6e20231e44eb9263b612fd649b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935dc07218b4bf6e20231e44eb9263b612fd649b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=935dc07218b4bf6e20231e44eb9263b612fd649b", "patch": "@@ -5,7 +5,7 @@ use crate::infer::{GenericKind, VerifyBound};\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::GenericArg;\n-use rustc_middle::ty::{self, EarlyBinder, OutlivesPredicate, SubstsRef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, OutlivesPredicate, SubstsRef, Ty, TyCtxt};\n \n use smallvec::smallvec;\n \n@@ -304,14 +304,13 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> impl Iterator<Item = ty::Region<'tcx>> {\n         let tcx = self.tcx;\n-        let bounds = tcx.item_bounds(def_id);\n-        trace!(\"{:#?}\", bounds);\n+        let bounds = tcx.bound_item_bounds(def_id);\n+        trace!(\"{:#?}\", bounds.0);\n         bounds\n-            .into_iter()\n+            .subst_iter(tcx, substs)\n             .filter_map(|p| p.to_opt_type_outlives())\n             .filter_map(|p| p.no_bound_vars())\n-            .map(|b| b.1)\n-            .map(move |r| EarlyBinder(r).subst(tcx, substs))\n+            .map(|OutlivesPredicate(_, r)| r)\n     }\n \n     /// Searches through a predicate list for a predicate `T: 'a`."}, {"sha": "5d0af1d4eadc8768355cf3137917bbf9e57ca793", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/935dc07218b4bf6e20231e44eb9263b612fd649b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935dc07218b4bf6e20231e44eb9263b612fd649b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=935dc07218b4bf6e20231e44eb9263b612fd649b", "patch": "@@ -3,6 +3,7 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n use crate::ty::layout::IntegerExt;\n+use crate::ty::query::TyCtxtAt;\n use crate::ty::{\n     self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n     TypeVisitable,\n@@ -769,6 +770,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n+impl<'tcx> TyCtxtAt<'tcx> {\n+    pub fn bound_type_of(self, def_id: DefId) -> ty::EarlyBinder<Ty<'tcx>> {\n+        ty::EarlyBinder(self.type_of(def_id))\n+    }\n+}\n+\n struct OpaqueTypeExpander<'tcx> {\n     // Contains the DefIds of the opaque types that are currently being\n     // expanded. When we expand an opaque type we insert the DefId of"}]}