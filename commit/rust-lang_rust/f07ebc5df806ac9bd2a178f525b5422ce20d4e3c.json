{"sha": "f07ebc5df806ac9bd2a178f525b5422ce20d4e3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwN2ViYzVkZjgwNmFjOWJkMmExNzhmNTI1YjU0MjJjZTIwZDRlM2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-21T08:57:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-22T20:54:51Z"}, "message": "add a helper function `maybe_collect_in_band_lifetime`", "tree": {"sha": "39b4f0bd2fb23b2908bc588a1f1cf82e008e8cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39b4f0bd2fb23b2908bc588a1f1cf82e008e8cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f07ebc5df806ac9bd2a178f525b5422ce20d4e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f07ebc5df806ac9bd2a178f525b5422ce20d4e3c", "html_url": "https://github.com/rust-lang/rust/commit/f07ebc5df806ac9bd2a178f525b5422ce20d4e3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f07ebc5df806ac9bd2a178f525b5422ce20d4e3c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71807d507a83182e010623cd401ea275c43e950", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71807d507a83182e010623cd401ea275c43e950", "html_url": "https://github.com/rust-lang/rust/commit/f71807d507a83182e010623cd401ea275c43e950"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "8ac9c46d4540094f1437fc909600a972ea332a32", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f07ebc5df806ac9bd2a178f525b5422ce20d4e3c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07ebc5df806ac9bd2a178f525b5422ce20d4e3c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f07ebc5df806ac9bd2a178f525b5422ce20d4e3c", "patch": "@@ -600,6 +600,29 @@ impl<'a> LoweringContext<'a> {\n         (params, res)\n     }\n \n+    /// When there is a reference to some lifetime `'a`, and in-band\n+    /// lifetimes are enabled, then we want to push that lifetime into\n+    /// the vector of names to define later. In that case, it will get\n+    /// added to the appropriate generics.\n+    fn maybe_collect_in_band_lifetime(&mut self, span: Span, name: Name) {\n+        if !self.is_collecting_in_band_lifetimes {\n+            return;\n+        }\n+\n+        if self.in_scope_lifetimes.contains(&name) {\n+            return;\n+        }\n+\n+        if self.lifetimes_to_define\n+            .iter()\n+            .any(|(_, lt_name)| *lt_name == name)\n+        {\n+            return;\n+        }\n+\n+        self.lifetimes_to_define.push((span, name));\n+    }\n+\n     // Evaluates `f` with the lifetimes in `lt_defs` in-scope.\n     // This is used to track which lifetimes have already been defined, and\n     // which are new in-band lifetimes that need to have a definition created\n@@ -1726,15 +1749,7 @@ impl<'a> LoweringContext<'a> {\n             x if x == \"'_\" => hir::LifetimeName::Underscore,\n             x if x == \"'static\" => hir::LifetimeName::Static,\n             name => {\n-                if self.is_collecting_in_band_lifetimes && !self.in_scope_lifetimes.contains(&name)\n-                    && self.lifetimes_to_define\n-                        .iter()\n-                        .find(|&&(_, lt_name)| lt_name == name)\n-                        .is_none()\n-                {\n-                    self.lifetimes_to_define.push((l.span, name));\n-                }\n-\n+                self.maybe_collect_in_band_lifetime(l.span, name);\n                 hir::LifetimeName::Name(name)\n             }\n         };\n@@ -2132,26 +2147,40 @@ impl<'a> LoweringContext<'a> {\n                 polarity,\n                 defaultness,\n                 ref ast_generics,\n-                ref ifce,\n+                ref trait_ref,\n                 ref ty,\n                 ref impl_items,\n             ) => {\n                 let def_id = self.resolver.definitions().local_def_id(id);\n-                let (generics, (ifce, lowered_ty)) =\n+\n+                // Lower the \"impl header\" first. This ordering is important\n+                // for in-band lifetimes! Consider `'a` here:\n+                //\n+                //     impl Foo<'a> for u32 {\n+                //         fn method(&'a self) { .. }\n+                //     }\n+                //\n+                // Because we start by lowering the `Foo<'a> for u32`\n+                // part, we will add `'a` to the list of generics on\n+                // the impl. When we then encounter it later in the\n+                // method, it will not be considered an in-band\n+                // lifetime to be added, but rather a reference to a\n+                // parent lifetime.\n+                let (generics, (trait_ref, lowered_ty)) =\n                     self.add_in_band_defs(ast_generics, def_id, |this| {\n-                        let ifce = ifce.as_ref().map(|trait_ref| {\n+                        let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n                             this.lower_trait_ref(trait_ref, ImplTraitContext::Disallowed)\n                         });\n \n-                        if let Some(ref trait_ref) = ifce {\n+                        if let Some(ref trait_ref) = trait_ref {\n                             if let Def::Trait(def_id) = trait_ref.path.def {\n                                 this.trait_impls.entry(def_id).or_insert(vec![]).push(id);\n                             }\n                         }\n \n                         let lowered_ty = this.lower_ty(ty, ImplTraitContext::Disallowed);\n \n-                        (ifce, lowered_ty)\n+                        (trait_ref, lowered_ty)\n                     });\n \n                 let new_impl_items = self.with_in_scope_lifetime_defs(\n@@ -2172,7 +2201,7 @@ impl<'a> LoweringContext<'a> {\n                     self.lower_impl_polarity(polarity),\n                     self.lower_defaultness(defaultness, true /* [1] */),\n                     generics,\n-                    ifce,\n+                    trait_ref,\n                     lowered_ty,\n                     new_impl_items,\n                 )"}]}