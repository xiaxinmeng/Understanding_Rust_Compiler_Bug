{"sha": "7298b8f4bac7687824ef41f6e3f9f114aa070417", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOThiOGY0YmFjNzY4NzgyNGVmNDFmNmUzZjlmMTE0YWEwNzA0MTc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T07:48:39Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T07:49:00Z"}, "message": "Insert omitted semicolons for statements", "tree": {"sha": "36d23f17e6f9b0ff5a9d046836fb6815f8afbcb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36d23f17e6f9b0ff5a9d046836fb6815f8afbcb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7298b8f4bac7687824ef41f6e3f9f114aa070417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7298b8f4bac7687824ef41f6e3f9f114aa070417", "html_url": "https://github.com/rust-lang/rust/commit/7298b8f4bac7687824ef41f6e3f9f114aa070417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7298b8f4bac7687824ef41f6e3f9f114aa070417/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bed548d1b33669f52c0b417612b9583bd5172ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bed548d1b33669f52c0b417612b9583bd5172ec", "html_url": "https://github.com/rust-lang/rust/commit/2bed548d1b33669f52c0b417612b9583bd5172ec"}], "stats": {"total": 65, "additions": 30, "deletions": 35}, "files": [{"sha": "154f623eacb5dbed1a3c16187c5e56fe85fbc9de", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -521,7 +521,7 @@ fn synthesize_crate_attrs(ecx: @encode_ctxt, crate: @crate) -> [attribute] {\n                   }\n                   _ { [attr] }\n                 }\n-            }\n+            };\n     }\n \n     if !found_link_attr { attrs += [synthesize_link_attr(ecx, [])]; }"}, {"sha": "4a1aa3ec8c6324d0f7e6627758f17dfdf8e8000e", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -1240,7 +1240,7 @@ fn mie_span(mie: mod_index_entry) -> span {\n fn check_item(e: @env, i: @ast::item, x: (), v: vt<()>) {\n     fn typaram_names(tps: [ast::ty_param]) -> [ident] {\n         let x: [ast::ident] = [];\n-        for tp: ast::ty_param in tps { x += [tp.ident] }\n+        for tp: ast::ty_param in tps { x += [tp.ident]; }\n         ret x;\n     }\n     visit::visit_item(i, x, v);"}, {"sha": "b6a1b9df1982b709d9ef5ead743fb7a84a431d0c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -3769,7 +3769,7 @@ fn get_landing_pad(bcx: @block_ctxt) -> BasicBlockRef {\n                   parent_none. {\n                     ret scope_bcx;\n                   }\n-                }\n+                };\n             }\n         }\n         fail;"}, {"sha": "84400b8c03ac43b0651938749c34e87066fc6b91", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -991,12 +991,11 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n       // FIXME: the environment capture mode is not fully encoded\n       // here yet, leading to weirdness around closure.\n       ty_fn(proto, _, _, _, _) {\n-        result =\n-            alt proto {\n-              ast::proto_block. { ast::kind_pinned }\n-              ast::proto_closure. { ast::kind_shared }\n-              _ { ast::kind_unique }\n-            }\n+        result = alt proto {\n+          ast::proto_block. { ast::kind_pinned }\n+          ast::proto_closure. { ast::kind_shared }\n+          _ { ast::kind_unique }\n+        };\n       }\n       // Those with refcounts-to-inner raise pinned to shared,\n       // lower unique to shared. Therefore just set result to shared.\n@@ -1007,7 +1006,7 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n       // otherwise pass through their pointee kind.\n       ty_ptr(tm) | ty_vec(tm) {\n         let k = type_kind(cx, tm.ty);\n-        if k == ast::kind_pinned { k = ast::kind_shared }\n+        if k == ast::kind_pinned { k = ast::kind_shared; }\n         result = kind::lower_kind(result, k);\n       }\n       // Records lower to the lowest of their members."}, {"sha": "d72a94b1e96817517a9ba2f4823da71744649cd9", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -492,7 +492,7 @@ mod collect {\n \n     fn ty_param_kinds(tps: [ast::ty_param]) -> [ast::kind] {\n         let k: [ast::kind] = [];\n-        for p: ast::ty_param in tps { k += [p.kind] }\n+        for p: ast::ty_param in tps { k += [p.kind]; }\n         ret k;\n     }\n \n@@ -2539,8 +2539,7 @@ fn check_constraints(fcx: @fn_ctxt, cs: [@ast::constr], args: [ast::arg]) {\n     for c: @ast::constr in cs {\n         c_args = [];\n         for a: @spanned<ast::fn_constr_arg> in c.node.args {\n-            c_args +=\n-                [\n+            c_args += [\n                  // \"base\" should not occur in a fn type thing, as of\n                  // yet, b/c we don't allow constraints on the return type\n \n@@ -2582,7 +2581,7 @@ fn check_constraints(fcx: @fn_ctxt, cs: [@ast::constr], args: [ast::arg]) {\n                      carg_ident index out of bounds\");\n                       }\n                     }\n-                  }]\n+                  }];\n         }\n         let p_op: ast::expr_ = ast::expr_path(c.node.path);\n         let oper: @ast::expr = @{id: c.node.id, node: p_op, span: c.span};"}, {"sha": "516795ec9280e6083defe69659924bf24c4226ba", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -750,7 +750,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: @expr,\n                          _body: option::t<str>, clauses: [@clause]) -> @expr {\n         for c: @clause in clauses {\n             alt use_selectors_to_bind(c.params, arg) {\n-              some(bindings) { ret transcribe(cx, bindings, c.body) }\n+              some(bindings) { ret transcribe(cx, bindings, c.body); }\n               none. { cont; }\n             }\n         }"}, {"sha": "4b3228673ab8c5953f5fb6268430867a106be5ec", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -612,7 +612,6 @@ fn print_possibly_embedded_block(s: ps, blk: ast::blk, embedded: embed_type,\n                   }\n                   _ { false }\n                 }\n-                true\n               }\n               _ { false }\n             };\n@@ -1424,7 +1423,7 @@ fn print_ty_fn(s: ps, proto: ast::proto, id: option::t<ast::ident>,\n         ibox(s, indent_unit);\n         word_space(s, \"->\");\n         if cf == ast::noreturn {\n-            word_nbsp(s, \"!\")\n+            word_nbsp(s, \"!\");\n         } else {\n             alt cf {\n               ast::return_ref(mut) { word(s.s, mut ? \"&!\" : \"&\"); }"}, {"sha": "143f0cabe92d1725dc28e6110a2a419caa97d256", "filename": "src/lib/either.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Flib%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Flib%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Feither.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -13,15 +13,15 @@ fn either<T, U,\n fn lefts<T, U>(eithers: [t<T, U>]) -> [T] {\n     let result: [T] = [];\n     for elt: t<T, U> in eithers {\n-        alt elt { left(l) { result += [l] } _ {/* fallthrough */ } }\n+        alt elt { left(l) { result += [l]; } _ {/* fallthrough */ } }\n     }\n     ret result;\n }\n \n fn rights<T, U>(eithers: [t<T, U>]) -> [U] {\n     let result: [U] = [];\n     for elt: t<T, U> in eithers {\n-        alt elt { right(r) { result += [r] } _ {/* fallthrough */ } }\n+        alt elt { right(r) { result += [r]; } _ {/* fallthrough */ } }\n     }\n     ret result;\n }\n@@ -30,7 +30,7 @@ fn partition<T, U>(eithers: [t<T, U>]) -> {lefts: [T], rights: [U]} {\n     let lefts: [T] = [];\n     let rights: [U] = [];\n     for elt: t<T, U> in eithers {\n-        alt elt { left(l) { lefts += [l] } right(r) { rights += [r] } }\n+        alt elt { left(l) { lefts += [l]; } right(r) { rights += [r]; } }\n     }\n     ret {lefts: lefts, rights: rights};\n }"}, {"sha": "aa58519d11a181222e699b0e2c914a3d72147d85", "filename": "src/lib/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -71,7 +71,7 @@ fn is_whitespace(s: str) -> bool {\n     let len = char_len(s);\n     while i < len {\n         if !char::is_whitespace(char_at(s, i)) { ret false; }\n-        i += 1u\n+        i += 1u;\n     }\n     ret true;\n }"}, {"sha": "436d6d1400d0179eec9130981fa3609f7ce83da2", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -40,10 +40,10 @@ fn map(filename: [u8], emit: map_reduce::putter<[u8], int>) {\n     }\n }\n \n-fn reduce(word: [u8], get: map_reduce::getter<int>) {\n+fn reduce(_word: [u8], get: map_reduce::getter<int>) {\n     let count = 0;\n \n-    while true { alt get() { some(_) { count += 1; } none. { break } } }\n+    while true { alt get() { some(_) { count += 1; } none. { break; } } }\n }\n \n mod map_reduce {\n@@ -93,7 +93,7 @@ mod map_reduce {\n                     ctrl: chan<ctrl_proto<K2, V>>, key: K2, val: V) {\n             let c;\n             alt treemap::find(im, key) {\n-              some(_c) { c = _c }\n+              some(_c) { c = _c; }\n               none. {\n                 let p = port();\n                 send(ctrl, find_reducer(key, chan(p)));\n@@ -107,7 +107,7 @@ mod map_reduce {\n \n         map(input, bind emit(intermediates, ctrl, _, _));\n \n-        fn finish<~K, ~V>(k: K, v: chan<reduce_proto<V>>) {\n+        fn finish<~K, ~V>(_k: K, v: chan<reduce_proto<V>>) {\n             send(v, release);\n         }\n         treemap::traverse(intermediates, finish);\n@@ -190,7 +190,7 @@ mod map_reduce {\n             }\n         }\n \n-        fn finish<~K, ~V>(k: K, v: chan<reduce_proto<V>>) { send(v, done); }\n+        fn finish<~K, ~V>(_k: K, v: chan<reduce_proto<V>>) { send(v, done); }\n         treemap::traverse(reducers, finish);\n \n         for t in tasks { task::join(t); }"}, {"sha": "dd4602a423a65613c31c5a77bd593db50418cd0f", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -38,11 +38,10 @@ fn map(filename: str, emit: map_reduce::putter) {\n     }\n }\n \n-fn reduce(word: str, get: map_reduce::getter) {\n+fn reduce(_word: str, get: map_reduce::getter) {\n     let count = 0;\n \n-\n-    while true { alt get() { some(_) { count += 1; } none. { break } } }\n+    while true { alt get() { some(_) { count += 1; } none. { break; } } }\n }\n \n mod map_reduce {\n@@ -85,8 +84,7 @@ mod map_reduce {\n             let c;\n             alt im.find(key) {\n               some(_c) {\n-\n-                c = _c\n+                c = _c;\n               }\n               none. {\n                 let p = port();"}, {"sha": "08835ab9204031530e29f3929f10ed113664046c", "filename": "src/test/run-fail/do-while-body-fails.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Frun-fail%2Fdo-while-body-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Frun-fail%2Fdo-while-body-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdo-while-body-fails.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -1,2 +1,2 @@\n // error-pattern:quux\n-fn main() { let x: int = do  { fail \"quux\" } while true; }\n+fn main() { let x: int = do  { fail \"quux\"; } while true; }"}, {"sha": "7807ec6c5716a33d1dfcafd6db7edce84a39db59", "filename": "src/test/run-pass/lambda-no-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -2,6 +2,6 @@\n fn force(f: fn()) { f() }\n fn main() {\n     let x = 7;\n-    lambda () { log_err x; }\n+    lambda () { log_err x; };\n     force(lambda () { log_err x; });\n }"}, {"sha": "b279bc92a2b581073b5140d10bbe0b7a84f4c286", "filename": "src/test/run-pass/main-ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmain-ivec.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -1 +1 @@\n-fn main(args: [str]) { for s in args { log s } }\n+fn main(args: [str]) { for s in args { log s; } }"}, {"sha": "a24e34d6b6a5f54c51f041aa4deb356a9e5cd805", "filename": "src/test/run-pass/wierd-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Frun-pass%2Fwierd-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7298b8f4bac7687824ef41f6e3f9f114aa070417/src%2Ftest%2Frun-pass%2Fwierd-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwierd-exprs.rs?ref=7298b8f4bac7687824ef41f6e3f9f114aa070417", "patch": "@@ -13,7 +13,7 @@ fn odd() {\n }\n \n fn what() {\n-    fn the(x: @mutable bool) { ret while !*x { *x = true }; }\n+    fn the(x: @mutable bool) { ret while !*x { *x = true; }; }\n     let i = @mutable false;\n     let dont = bind the(i);\n     dont();"}]}