{"sha": "8a5161ea9d2313114d6313680551e7af85218bb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNTE2MWVhOWQyMzEzMTE0ZDYzMTM2ODA1NTFlN2FmODUyMThiYjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-12T10:05:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-12T10:05:26Z"}, "message": "Merge pull request #398 from RalfJung/tests\n\ntestsuite: Improve sysroot and fullmir handling", "tree": {"sha": "eabe8405f80c71e5888a3a70b900a76ddfa06c08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eabe8405f80c71e5888a3a70b900a76ddfa06c08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a5161ea9d2313114d6313680551e7af85218bb2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbRyfmCRBK7hj4Ov3rIwAAdHIIALGY0aboGPEb2mITrX01QDAg\nqC7me9by/KFLI0TzGLWvkZfBKIYShxbxaxoINy28EVW0Pq3XhyByD+Ykdrb32eq0\nA9/qosSZ5vxBoGWWzAhnDuc7ipP52a/CSggf1eLeRrol4p8EJT9cH1FxsGjEJgb4\n1xWGzs0Lfe+AX7pRzvJV8mOYiYB9fRiiLYlTrwxtx3+4pf+0G3iUOjx/M4W1rXKI\nekKe/rHwUv8r7kCXxdAgCCg5tgU4l9Fi3ZIAfC+y+gOALRZKvwUSXhh9ecnU+sYU\naGRRWN5CB/nJT2KZBkZu7xKAKtlVGFTzBrT0fA0mLZUZ9BPhNwZbgzRXQ6dToFI=\n=Yizl\n-----END PGP SIGNATURE-----\n", "payload": "tree eabe8405f80c71e5888a3a70b900a76ddfa06c08\nparent a7ae729bce551743d99ab097e0ab16c0a548b875\nparent 4fdcccdc7052dfb98134f55dd33cf4a35c17c41f\nauthor Ralf Jung <post@ralfj.de> 1531389926 +0200\ncommitter GitHub <noreply@github.com> 1531389926 +0200\n\nMerge pull request #398 from RalfJung/tests\n\ntestsuite: Improve sysroot and fullmir handling"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5161ea9d2313114d6313680551e7af85218bb2", "html_url": "https://github.com/rust-lang/rust/commit/8a5161ea9d2313114d6313680551e7af85218bb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a5161ea9d2313114d6313680551e7af85218bb2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7ae729bce551743d99ab097e0ab16c0a548b875", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ae729bce551743d99ab097e0ab16c0a548b875", "html_url": "https://github.com/rust-lang/rust/commit/a7ae729bce551743d99ab097e0ab16c0a548b875"}, {"sha": "4fdcccdc7052dfb98134f55dd33cf4a35c17c41f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdcccdc7052dfb98134f55dd33cf4a35c17c41f", "html_url": "https://github.com/rust-lang/rust/commit/4fdcccdc7052dfb98134f55dd33cf4a35c17c41f"}], "stats": {"total": 97, "additions": 51, "deletions": 46}, "files": [{"sha": "c46ba7c41429500fde27ea6772d9aeb1126c0deb", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "patch": "@@ -31,4 +31,4 @@ cargo_miri = [\"cargo_metadata\"]\n \n [dev-dependencies]\n compiletest_rs = { version = \"0.3.4\", features = [\"tmp\"] }\n-dirs = \"1.0.2\"\n+colored = \"1.6\""}, {"sha": "4b89f0ac70c79a6b7cc793c410280758a48257e5", "filename": "tests/compile-fail-fullmir/deallocate-bad-alignment.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fdeallocate-bad-alignment.rs?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "previous_filename": "tests/compile-fail/deallocate-bad-alignment.rs"}, {"sha": "3a74245816c469afdee9f172fd699e23a5934fd3", "filename": "tests/compile-fail-fullmir/deallocate-bad-size.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fdeallocate-bad-size.rs?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "previous_filename": "tests/compile-fail/deallocate-bad-size.rs"}, {"sha": "613edf3c6af95d81768c7e9ee0d269a5ee464e4e", "filename": "tests/compile-fail-fullmir/deallocate-twice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fdeallocate-twice.rs?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "previous_filename": "tests/compile-fail/deallocate-twice.rs"}, {"sha": "8dce7e578626403647b5764d26387798a15420b4", "filename": "tests/compile-fail-fullmir/out_of_bounds_ptr_1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fout_of_bounds_ptr_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fout_of_bounds_ptr_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fout_of_bounds_ptr_1.rs?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "previous_filename": "tests/compile-fail/out_of_bounds_ptr_1.rs"}, {"sha": "e19a616a191651db51acc1fabce20565261fb500", "filename": "tests/compile-fail-fullmir/out_of_bounds_ptr_2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fout_of_bounds_ptr_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fout_of_bounds_ptr_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fout_of_bounds_ptr_2.rs?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "previous_filename": "tests/compile-fail/out_of_bounds_ptr_2.rs"}, {"sha": "32ab2daebf0d0443b5aab4572cfa2e5892b1b8d5", "filename": "tests/compile-fail-fullmir/ptr_offset_overflow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fptr_offset_overflow.rs?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "previous_filename": "tests/compile-fail/ptr_offset_overflow.rs"}, {"sha": "f85b651e857304a41e774244b288fbd2a98e6c74", "filename": "tests/compile-fail-fullmir/reallocate-bad-size.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Freallocate-bad-size.rs?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "previous_filename": "tests/compile-fail/reallocate-bad-size.rs"}, {"sha": "03040cd178da2009010ad0ae5ef816bd7f849fea", "filename": "tests/compile-fail-fullmir/reallocate-change-alloc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "previous_filename": "tests/compile-fail/reallocate-change-alloc.rs"}, {"sha": "6dfb7fe2b9663b6cc637e58514ff8a079d06c37c", "filename": "tests/compile-fail-fullmir/reallocate-dangling.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Freallocate-dangling.rs?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "previous_filename": "tests/compile-fail/reallocate-dangling.rs"}, {"sha": "96006c884e5806b085aafc46e7fff5691108149b", "filename": "tests/compile-fail-fullmir/stack_free.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompile-fail-fullmir%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstack_free.rs?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "previous_filename": "tests/compile-fail/stack_free.rs"}, {"sha": "cfbfa70d42eea9c4e94a90e4a249b708bf339630", "filename": "tests/compiletest.rs", "status": "modified", "additions": 50, "deletions": 45, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5161ea9d2313114d6313680551e7af85218bb2/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=8a5161ea9d2313114d6313680551e7af85218bb2", "patch": "@@ -1,7 +1,9 @@\n #![feature(slice_concat_ext)]\n \n extern crate compiletest_rs as compiletest;\n-extern crate dirs;\n+extern crate colored;\n+\n+use colored::*;\n \n use std::slice::SliceConcatExt;\n use std::path::{PathBuf, Path};\n@@ -31,12 +33,26 @@ fn rustc_lib_path() -> PathBuf {\n     option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n }\n \n-fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: bool) {\n-    eprintln!(\n+fn have_fullmir() -> bool {\n+    // We assume we have full MIR when MIRI_SYSROOT is set or when we are in rustc\n+    std::env::var(\"MIRI_SYSROOT\").is_ok() || rustc_test_suite().is_some()\n+}\n+\n+fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool) {\n+    if need_fullmir && !have_fullmir() {\n+        eprintln!(\"{}\", format!(\n+            \"## Skipping compile-fail tests in {} against miri for target {} due to missing mir\",\n+            path,\n+            target\n+        ).yellow().bold());\n+        return;\n+    }\n+\n+    eprintln!(\"{}\", format!(\n         \"## Running compile-fail tests in {} against miri for target {}\",\n         path,\n         target\n-    );\n+    ).green().bold());\n     let mut config = compiletest::Config::default().tempdir();\n     config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n     config.rustc_path = miri_path();\n@@ -45,52 +61,49 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: b\n         config.run_lib_path = rustc_lib_path();\n         config.compile_lib_path = rustc_lib_path();\n     }\n-    // if we are building as part of the rustc test suite, we already have fullmir for everything\n-    if fullmir && rustc_test_suite().is_none() {\n-        if host != target {\n-            // skip fullmir on nonhost\n-            return;\n-        }\n-        let sysroot = dirs::home_dir().unwrap()\n-            .join(\".xargo\")\n-            .join(\"HOST\");\n-        flags.push(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n-        config.src_base = PathBuf::from(path.to_string());\n-    } else {\n-        flags.push(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n-        config.src_base = PathBuf::from(path.to_string());\n-    }\n+    flags.push(format!(\"--sysroot {}\", sysroot.display()));\n+    config.src_base = PathBuf::from(path.to_string());\n     flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     config.target_rustcflags = Some(flags.join(\" \"));\n     config.target = target.to_owned();\n+    config.host = host.to_owned();\n     compiletest::run_tests(&config);\n }\n \n-fn run_pass(path: &str) {\n-    eprintln!(\"## Running run-pass tests in {} against rustc\", path);\n+fn rustc_pass(sysroot: &Path, path: &str) {\n+    eprintln!(\"{}\", format!(\"## Running run-pass tests in {} against rustc\", path).green().bold());\n     let mut config = compiletest::Config::default().tempdir();\n     config.mode = \"run-pass\".parse().expect(\"Invalid mode\");\n     config.src_base = PathBuf::from(path);\n     if let Some(rustc_path) = rustc_test_suite() {\n         config.rustc_path = rustc_path;\n         config.run_lib_path = rustc_lib_path();\n         config.compile_lib_path = rustc_lib_path();\n-        config.target_rustcflags = Some(format!(\"-Dwarnings --sysroot {}\", get_sysroot().display()));\n+        config.target_rustcflags = Some(format!(\"-Dwarnings --sysroot {}\", sysroot.display()));\n     } else {\n         config.target_rustcflags = Some(\"-Dwarnings\".to_owned());\n     }\n     config.host_rustcflags = Some(\"-Dwarnings\".to_string());\n     compiletest::run_tests(&config);\n }\n \n-fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n+fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool, opt: bool) {\n+    if need_fullmir && !have_fullmir() {\n+        eprintln!(\"{}\", format!(\n+            \"## Skipping run-pass tests in {} against miri for target {} due to missing mir\",\n+            path,\n+            target\n+        ).yellow().bold());\n+        return;\n+    }\n+\n     let opt_str = if opt { \" with optimizations\" } else { \"\" };\n-    eprintln!(\n+    eprintln!(\"{}\", format!(\n         \"## Running run-pass tests in {} against miri for target {}{}\",\n         path,\n         target,\n         opt_str\n-    );\n+    ).green().bold());\n     let mut config = compiletest::Config::default().tempdir();\n     config.mode = \"ui\".parse().expect(\"Invalid mode\");\n     config.src_base = PathBuf::from(path);\n@@ -102,21 +115,9 @@ fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n         config.compile_lib_path = rustc_lib_path();\n     }\n     let mut flags = Vec::new();\n-    // Control miri logging. This is okay despite concurrent test execution as all tests\n-    // will set this env var to the same value.\n-    env::set_var(\"MIRI_LOG\", \"warn\");\n-    // if we are building as part of the rustc test suite, we already have fullmir for everything\n-    if fullmir && rustc_test_suite().is_none() {\n-        if host != target {\n-            // skip fullmir on nonhost\n-            return;\n-        }\n-        let sysroot = dirs::home_dir().unwrap()\n-            .join(\".xargo\")\n-            .join(\"HOST\");\n-\n+    flags.push(format!(\"--sysroot {}\", sysroot.display()));\n+    if have_fullmir() {\n         flags.push(\"-Zmiri-start-fn\".to_owned());\n-        flags.push(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n     }\n     if opt {\n         flags.push(\"-Zmir-opt-level=3\".to_owned());\n@@ -125,6 +126,9 @@ fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n         // For now, only validate without optimizations.  Inlining breaks validation.\n         flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     }\n+    // Control miri logging. This is okay despite concurrent test execution as all tests\n+    // will set this env var to the same value.\n+    env::set_var(\"MIRI_LOG\", \"warn\");\n     config.target_rustcflags = Some(flags.join(\" \"));\n     compiletest::run_tests(&config);\n }\n@@ -181,9 +185,9 @@ fn run_pass_miri(opt: bool) {\n     let host = get_host();\n \n     for_all_targets(&sysroot, |target| {\n-        miri_pass(\"tests/run-pass\", &target, &host, false, opt);\n+        miri_pass(&sysroot, \"tests/run-pass\", &target, &host, false, opt);\n     });\n-    miri_pass(\"tests/run-pass-fullmir\", &host, &host, true, opt);\n+    miri_pass(&sysroot, \"tests/run-pass-fullmir\", &host, &host, true, opt);\n }\n \n #[test]\n@@ -201,8 +205,9 @@ fn run_pass_miri_opt() {\n \n #[test]\n fn run_pass_rustc() {\n-    run_pass(\"tests/run-pass\");\n-    run_pass(\"tests/run-pass-fullmir\");\n+    let sysroot = get_sysroot();\n+    rustc_pass(&sysroot, \"tests/run-pass\");\n+    rustc_pass(&sysroot, \"tests/run-pass-fullmir\");\n }\n \n #[test]\n@@ -211,6 +216,6 @@ fn compile_fail_miri() {\n     let host = get_host();\n \n     // FIXME: run tests for other targets, too\n-    compile_fail(&sysroot, \"tests/compile-fail\", &host, &host, true);\n-    //compile_fail(&sysroot, \"tests/compile-fail-fullmir\", &host, &host, true);\n+    compile_fail(&sysroot, \"tests/compile-fail\", &host, &host, false);\n+    compile_fail(&sysroot, \"tests/compile-fail-fullmir\", &host, &host, true);\n }"}]}