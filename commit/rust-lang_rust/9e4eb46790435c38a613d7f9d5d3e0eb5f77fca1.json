{"sha": "9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNGViNDY3OTA0MzVjMzhhNjEzZDdmOWQ1ZDNlMGViNWY3N2ZjYTE=", "commit": {"author": {"name": "Sam Radhakrishnan", "email": "sk09idm@gmail.com", "date": "2019-10-01T09:00:22Z"}, "committer": {"name": "Sam Radhakrishnan", "email": "sk09idm@gmail.com", "date": "2019-10-01T09:00:22Z"}, "message": "Change to use exprPrecedence instead of exprKind.", "tree": {"sha": "ca58a5865a543b3406ac8bcdfbda9cfda8a3e240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca58a5865a543b3406ac8bcdfbda9cfda8a3e240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1", "html_url": "https://github.com/rust-lang/rust/commit/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/comments", "author": {"login": "sam09", "id": 6648290, "node_id": "MDQ6VXNlcjY2NDgyOTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6648290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sam09", "html_url": "https://github.com/sam09", "followers_url": "https://api.github.com/users/sam09/followers", "following_url": "https://api.github.com/users/sam09/following{/other_user}", "gists_url": "https://api.github.com/users/sam09/gists{/gist_id}", "starred_url": "https://api.github.com/users/sam09/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sam09/subscriptions", "organizations_url": "https://api.github.com/users/sam09/orgs", "repos_url": "https://api.github.com/users/sam09/repos", "events_url": "https://api.github.com/users/sam09/events{/privacy}", "received_events_url": "https://api.github.com/users/sam09/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sam09", "id": 6648290, "node_id": "MDQ6VXNlcjY2NDgyOTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6648290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sam09", "html_url": "https://github.com/sam09", "followers_url": "https://api.github.com/users/sam09/followers", "following_url": "https://api.github.com/users/sam09/following{/other_user}", "gists_url": "https://api.github.com/users/sam09/gists{/gist_id}", "starred_url": "https://api.github.com/users/sam09/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sam09/subscriptions", "organizations_url": "https://api.github.com/users/sam09/orgs", "repos_url": "https://api.github.com/users/sam09/repos", "events_url": "https://api.github.com/users/sam09/events{/privacy}", "received_events_url": "https://api.github.com/users/sam09/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9baaa70beab336c8fcb08b378d999f7309aaef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9baaa70beab336c8fcb08b378d999f7309aaef9", "html_url": "https://github.com/rust-lang/rust/commit/c9baaa70beab336c8fcb08b378d999f7309aaef9"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "aa443a69c50168f21baa9658c8db508572fc58e6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1", "patch": "@@ -128,6 +128,7 @@ use syntax::attr;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::source_map::{DUMMY_SP, original_sp};\n use syntax::symbol::{kw, sym};\n+use syntax::util::parser::ExprPrecedence;\n \n use std::cell::{Cell, RefCell, Ref, RefMut};\n use std::collections::hash_map::Entry;\n@@ -4344,10 +4345,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 let max_len = receiver.rfind(\".\").unwrap();\n                                 format!(\"{}{}\", &receiver[..max_len], method_call)\n                             } else {\n-                                match &expr.kind {\n-                                    ExprKind::Binary(_,_,_) => format!(\"({}){}\", receiver, method_call),\n-                                    ExprKind::Unary(_,_) => format!(\"({}){}\", receiver, method_call),\n-                                    _ => format!(\"{}{}\", receiver, method_call),\n+                                if expr.precedence().order() < ExprPrecedence::MethodCall.order() {\n+                                    format!(\"({}){}\", receiver, method_call)\n+                                } else {\n+                                    format!(\"{}{}\", receiver, method_call)\n                                 }\n                             };\n                             Some(if is_struct_pat_shorthand_field {"}, {"sha": "5c666afb89a33ff8d20ea6449054a3fda641201c", "filename": "src/test/ui/conversion-methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Ftest%2Fui%2Fconversion-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Ftest%2Fui%2Fconversion-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconversion-methods.stderr?ref=9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1", "patch": "@@ -41,7 +41,7 @@ LL |     let _prove_piercing_earnest: Vec<usize> = &[1, 2, 3];\n    |                                               ^^^^^^^^^^\n    |                                               |\n    |                                               expected struct `std::vec::Vec`, found reference\n-   |                                               help: try using a conversion method: `&[1, 2, 3].to_vec()`\n+   |                                               help: try using a conversion method: `(&[1, 2, 3]).to_vec()`\n    |\n    = note: expected type `std::vec::Vec<usize>`\n               found type `&[{integer}; 3]`"}, {"sha": "f4567554d0dbbe160d701dd2834f56019d877257", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1", "patch": "@@ -5,7 +5,7 @@ LL |         x = box x;\n    |             ^^^^^\n    |             |\n    |             cyclic type of infinite size\n-   |             help: try using a conversion method: `box x.to_string()`\n+   |             help: try using a conversion method: `(box x).to_string()`\n \n error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:25:5"}, {"sha": "7f93697c6f7a75977e318b829b0eece7be122e1c", "filename": "src/test/ui/occurs-check-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Ftest%2Fui%2Foccurs-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Ftest%2Fui%2Foccurs-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check-2.stderr?ref=9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1", "patch": "@@ -5,7 +5,7 @@ LL |     f = box g;\n    |         ^^^^^\n    |         |\n    |         cyclic type of infinite size\n-   |         help: try using a conversion method: `box g.to_string()`\n+   |         help: try using a conversion method: `(box g).to_string()`\n \n error: aborting due to previous error\n "}, {"sha": "01e2b1f7749108e1a97645a5a8429e6cbdec5b4c", "filename": "src/test/ui/occurs-check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Ftest%2Fui%2Foccurs-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Ftest%2Fui%2Foccurs-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foccurs-check.stderr?ref=9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1", "patch": "@@ -5,7 +5,7 @@ LL |     f = box f;\n    |         ^^^^^\n    |         |\n    |         cyclic type of infinite size\n-   |         help: try using a conversion method: `box f.to_string()`\n+   |         help: try using a conversion method: `(box f).to_string()`\n \n error: aborting due to previous error\n "}, {"sha": "0d15a2a753ed0f78c27c2b9c51a07b13a3be9bc6", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=9e4eb46790435c38a613d7f9d5d3e0eb5f77fca1", "patch": "@@ -44,7 +44,7 @@ LL |     f = box f;\n    |         ^^^^^\n    |         |\n    |         cyclic type of infinite size\n-   |         help: try using a conversion method: `box f.to_string()`\n+   |         help: try using a conversion method: `(box f).to_string()`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:21:9"}]}