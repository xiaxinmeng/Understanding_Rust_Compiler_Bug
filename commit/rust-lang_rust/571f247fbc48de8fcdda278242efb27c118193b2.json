{"sha": "571f247fbc48de8fcdda278242efb27c118193b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MWYyNDdmYmM0OGRlOGZjZGRhMjc4MjQyZWZiMjdjMTE4MTkzYjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-04T19:12:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-04T19:12:49Z"}, "message": "Merge #6725\n\n6725: Don't respawn proc macro server on crash r=jonas-schievink a=jonas-schievink\n\nNow the thread managing IPC will exit when the server process crashes instead of respawning it.\r\n\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/6707\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "2ad6199ec82c009112e16af93b32bc7e3a2b0b46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ad6199ec82c009112e16af93b32bc7e3a2b0b46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/571f247fbc48de8fcdda278242efb27c118193b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfyooxCRBK7hj4Ov3rIwAAdHIIAA8+eDPKESwhglsmVCI7fBgr\n6VhIu5zLbRUpZXu4Adep8p+A2KZVGBsnnH/RBON6tSXEQxWczthyxLHgJi61mTkA\nLvelv8eltO+NZNlab8bqHTjnsBx/Wlk9eaORYVJWnUl5fVwSuprbx5iL7BMqY+BH\nyQgjIylEozu3gYXx5xm1ILJ5Zi4Gc0plaZgUAYEyqGnoEC9v5gpm7W6ybSzqMNvA\nNbTJW/WIhFAeJx3Xoo069c/qd7tcjsxKUTa8xuwxQ7QkYw2G2K+0rj8gKgw4XYCZ\n+3gJ1blfuZbh0blZp5/rupPCf6Zk571O2XJrTpKBAZXIB+2dkLH9mCFVa1W03kE=\n=uQW4\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ad6199ec82c009112e16af93b32bc7e3a2b0b46\nparent 2756abb167ca31ce206584dc6dc3463338625a3a\nparent 869ad13cf173e65e6c54896743974ac977f5674b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607109169 +0000\ncommitter GitHub <noreply@github.com> 1607109169 +0000\n\nMerge #6725\n\n6725: Don't respawn proc macro server on crash r=jonas-schievink a=jonas-schievink\n\nNow the thread managing IPC will exit when the server process crashes instead of respawning it.\r\n\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/6707\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/571f247fbc48de8fcdda278242efb27c118193b2", "html_url": "https://github.com/rust-lang/rust/commit/571f247fbc48de8fcdda278242efb27c118193b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/571f247fbc48de8fcdda278242efb27c118193b2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2756abb167ca31ce206584dc6dc3463338625a3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2756abb167ca31ce206584dc6dc3463338625a3a", "html_url": "https://github.com/rust-lang/rust/commit/2756abb167ca31ce206584dc6dc3463338625a3a"}, {"sha": "869ad13cf173e65e6c54896743974ac977f5674b", "url": "https://api.github.com/repos/rust-lang/rust/commits/869ad13cf173e65e6c54896743974ac977f5674b", "html_url": "https://github.com/rust-lang/rust/commit/869ad13cf173e65e6c54896743974ac977f5674b"}], "stats": {"total": 41, "additions": 15, "deletions": 26}, "files": [{"sha": "301888a0e09f17f50d5ff1da9e31deaf0fd63fbb", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/571f247fbc48de8fcdda278242efb27c118193b2/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571f247fbc48de8fcdda278242efb27c118193b2/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=571f247fbc48de8fcdda278242efb27c118193b2", "patch": "@@ -81,15 +81,16 @@ impl ProcMacroProcessSrv {\n     {\n         let (result_tx, result_rx) = bounded(0);\n         let sender = match self.inner.upgrade() {\n-            None => {\n-                return Err(tt::ExpansionError::Unknown(\"Proc macro process is closed.\".into()))\n-            }\n+            None => return Err(tt::ExpansionError::Unknown(\"proc macro process is closed\".into())),\n             Some(it) => it,\n         };\n-        sender.send(Task { req, result_tx }).unwrap();\n+        sender\n+            .send(Task { req, result_tx })\n+            .map_err(|_| tt::ExpansionError::Unknown(\"proc macro server crashed\".into()))?;\n+\n         let res = result_rx\n             .recv()\n-            .map_err(|_| tt::ExpansionError::Unknown(\"Proc macro thread is closed.\".into()))?;\n+            .map_err(|_| tt::ExpansionError::Unknown(\"proc macro server crashed\".into()))?;\n \n         match res {\n             Some(Response::Error(err)) => {\n@@ -110,21 +111,17 @@ fn client_loop(task_rx: Receiver<Task>, mut process: Process) {\n         match send_request(&mut stdin, &mut stdout, req) {\n             Ok(res) => result_tx.send(res).unwrap(),\n             Err(_err) => {\n+                log::error!(\n+                    \"proc macro server crashed, server process state: {:?}\",\n+                    process.child.try_wait()\n+                );\n                 let res = Response::Error(ResponseError {\n                     code: ErrorCode::ServerErrorEnd,\n-                    message: \"Server closed\".into(),\n+                    message: \"proc macro server crashed\".into(),\n                 });\n                 result_tx.send(res.into()).unwrap();\n-                // Restart the process\n-                if process.restart().is_err() {\n-                    break;\n-                }\n-                let stdio = match process.stdio() {\n-                    None => break,\n-                    Some(it) => it,\n-                };\n-                stdin = stdio.0;\n-                stdout = stdio.1;\n+                // Exit the thread.\n+                break;\n             }\n         }\n     }\n@@ -136,8 +133,6 @@ struct Task {\n }\n \n struct Process {\n-    path: PathBuf,\n-    args: Vec<OsString>,\n     child: Child,\n }\n \n@@ -152,15 +147,9 @@ impl Process {\n         path: PathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<Process> {\n-        let args = args.into_iter().map(|s| s.as_ref().into()).collect();\n+        let args: Vec<OsString> = args.into_iter().map(|s| s.as_ref().into()).collect();\n         let child = mk_child(&path, &args)?;\n-        Ok(Process { path, args, child })\n-    }\n-\n-    fn restart(&mut self) -> io::Result<()> {\n-        let _ = self.child.kill();\n-        self.child = mk_child(&self.path, &self.args)?;\n-        Ok(())\n+        Ok(Process { child })\n     }\n \n     fn stdio(&mut self) -> Option<(impl Write, impl BufRead)> {"}]}