{"sha": "6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MDJmNWI3YjViN2RkYzIzMzk4YzFiNWQ3Nzg5MWU5YjRiMTM0NWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-05T09:04:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T09:04:02Z"}, "message": "Merge #1743\n\n1743: Support `#[macro_use]` on `extern crate` r=matklad a=uHOOCCOOHu\n\nUnfortunately, #1688 is still an issue. My guess is wrong :(\n\nCo-authored-by: uHOOCCOOHu <hooccooh1896@gmail.com>", "tree": {"sha": "4dce00a513b4e9598f5981a17e16ad24727308ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dce00a513b4e9598f5981a17e16ad24727308ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcM+CCRBK7hj4Ov3rIwAAdHIIAKZg6dDNM1RezFUkFmisZJcp\nMOEyY/e3U/VdOWP08zTvm67F5diiDhpZSVloqqrbP1XP0e+EE3Dc3Y1seZ3AJkIX\ntxHKPJt59/7boMhIBxGS6VwYibUoJbJci9nYkl0A3Cj79TVyNnfFWt4xcBnaH2u+\nTMU8Zg3HZiLwqgp3/9SAnzaYFMfpt36juQ02E0Bq0xZWX3+fHBPRyBzTxNYI9YfY\nVO1FAJKEyjSq6qUcDKQLb7+Xd+eZ+a9HzzK4Nbw3VesmniRuSetXC4ieuLE2Ow82\n1JxPdKbccDgZGPxsfP0ig6fryu5/uNBYqqi2Oc0SV9/W4aeKMrp2Tv0mgUP0KTQ=\n=SqCI\n-----END PGP SIGNATURE-----\n", "payload": "tree 4dce00a513b4e9598f5981a17e16ad24727308ec\nparent 36d7b75c957d4ebf8e8f75ca59c79866cc702df4\nparent 3ff5d7e73c65393672886de09738adf49cdd4984\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1567674242 +0000\ncommitter GitHub <noreply@github.com> 1567674242 +0000\n\nMerge #1743\n\n1743: Support `#[macro_use]` on `extern crate` r=matklad a=uHOOCCOOHu\n\nUnfortunately, #1688 is still an issue. My guess is wrong :(\n\nCo-authored-by: uHOOCCOOHu <hooccooh1896@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "html_url": "https://github.com/rust-lang/rust/commit/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d7b75c957d4ebf8e8f75ca59c79866cc702df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d7b75c957d4ebf8e8f75ca59c79866cc702df4", "html_url": "https://github.com/rust-lang/rust/commit/36d7b75c957d4ebf8e8f75ca59c79866cc702df4"}, {"sha": "3ff5d7e73c65393672886de09738adf49cdd4984", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ff5d7e73c65393672886de09738adf49cdd4984", "html_url": "https://github.com/rust-lang/rust/commit/3ff5d7e73c65393672886de09738adf49cdd4984"}], "stats": {"total": 131, "additions": 119, "deletions": 12}, "files": [{"sha": "2e1d35c8cb51dda9f9eca4d628fe1d9bdee2c437", "filename": "crates/ra_hir/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "patch": "@@ -11,4 +11,5 @@ test_utils::marks!(\n     match_ergonomics_ref\n     trait_resolution_on_fn_type\n     infer_while_let\n+    macro_rules_from_other_crates_are_visible_with_macro_use\n );"}, {"sha": "f69179bf683a9a891f4bffb9c6dd67b3f749de02", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "patch": "@@ -101,6 +101,8 @@ pub struct CrateDefMap {\n     /// However, do we want to put it as a global variable?\n     poison_macros: FxHashSet<MacroDefId>,\n \n+    exported_macros: FxHashMap<Name, MacroDefId>,\n+\n     diagnostics: Vec<DefDiagnostic>,\n }\n \n@@ -245,6 +247,7 @@ impl CrateDefMap {\n                 root,\n                 modules,\n                 poison_macros: FxHashSet::default(),\n+                exported_macros: FxHashMap::default(),\n                 diagnostics: Vec::new(),\n             }\n         };"}, {"sha": "5d1c42926568fd663ade182e87b76375cbcf76d8", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "patch": "@@ -157,11 +157,42 @@ where\n         // crate root, even if the parent modules is **not** visible.\n         if export {\n             self.update(self.def_map.root, None, &[(name.clone(), def.clone())]);\n+\n+            // Exported macros are collected in crate level ready for\n+            // glob import with `#[macro_use]`.\n+            self.def_map.exported_macros.insert(name.clone(), macro_id);\n         }\n         self.update(module_id, None, &[(name.clone(), def)]);\n         self.global_macro_scope.insert(name, macro_id);\n     }\n \n+    /// Import macros from `#[macro_use] extern crate`.\n+    ///\n+    /// They are non-scoped, and will only be inserted into mutable `global_macro_scope`.\n+    fn import_macros_from_extern_crate(&mut self, import: &raw::ImportData) {\n+        log::debug!(\n+            \"importing macros from extern crate: {:?} ({:?})\",\n+            import,\n+            self.def_map.edition,\n+        );\n+\n+        let res = self.def_map.resolve_name_in_extern_prelude(\n+            &import\n+                .path\n+                .as_ident()\n+                .expect(\"extern crate should have been desugared to one-element path\"),\n+        );\n+\n+        if let Some(ModuleDef::Module(m)) = res.take_types() {\n+            tested_by!(macro_rules_from_other_crates_are_visible_with_macro_use);\n+\n+            let item_map = self.db.crate_def_map(m.krate);\n+            for (name, &macro_id) in &item_map.exported_macros {\n+                self.global_macro_scope.insert(name.clone(), macro_id);\n+            }\n+        }\n+    }\n+\n     fn resolve_imports(&mut self) -> ReachedFixedPoint {\n         let mut imports = std::mem::replace(&mut self.unresolved_imports, Vec::new());\n         let mut resolved = Vec::new();\n@@ -494,11 +525,17 @@ where\n         for item in items {\n             match *item {\n                 raw::RawItem::Module(m) => self.collect_module(&self.raw_items[m]),\n-                raw::RawItem::Import(import) => self.def_collector.unresolved_imports.push((\n-                    self.module_id,\n-                    import,\n-                    self.raw_items[import].clone(),\n-                )),\n+                raw::RawItem::Import(import_id) => {\n+                    let import = self.raw_items[import_id].clone();\n+                    // This should be processed eagerly instead of deferred to resolving.\n+                    // Otherwise, since it will only mutate `global_macro_scope`\n+                    // without `update` names in `mod`s, unresolved macros cannot be expanded.\n+                    if import.is_extern_crate && import.is_macro_use {\n+                        self.def_collector.import_macros_from_extern_crate(&import);\n+                    }\n+\n+                    self.def_collector.unresolved_imports.push((self.module_id, import_id, import));\n+                }\n                 raw::RawItem::Def(def) => self.define_def(&self.raw_items[def]),\n                 raw::RawItem::Macro(mac) => self.collect_macro(&self.raw_items[mac]),\n             }\n@@ -860,6 +897,7 @@ mod tests {\n                 root,\n                 modules,\n                 poison_macros: FxHashSet::default(),\n+                exported_macros: FxHashMap::default(),\n                 diagnostics: Vec::new(),\n             }\n         };"}, {"sha": "129b047eb5d1a5bf57f78ab0a414225d13459456", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "patch": "@@ -154,6 +154,7 @@ pub struct ImportData {\n     pub(super) is_glob: bool,\n     pub(super) is_prelude: bool,\n     pub(super) is_extern_crate: bool,\n+    pub(super) is_macro_use: bool,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -293,8 +294,14 @@ impl RawItemsCollector {\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n \n         Path::expand_use_item(&use_item, |path, use_tree, is_glob, alias| {\n-            let import_data =\n-                ImportData { path, alias, is_glob, is_prelude, is_extern_crate: false };\n+            let import_data = ImportData {\n+                path,\n+                alias,\n+                is_glob,\n+                is_prelude,\n+                is_extern_crate: false,\n+                is_macro_use: false,\n+            };\n             self.push_import(current_module, import_data, Either::A(AstPtr::new(use_tree)));\n         })\n     }\n@@ -307,12 +314,14 @@ impl RawItemsCollector {\n         if let Some(name_ref) = extern_crate.name_ref() {\n             let path = Path::from_name_ref(&name_ref);\n             let alias = extern_crate.alias().and_then(|a| a.name()).map(|it| it.as_name());\n+            let is_macro_use = extern_crate.has_atom_attr(\"macro_use\");\n             let import_data = ImportData {\n                 path,\n                 alias,\n                 is_glob: false,\n                 is_prelude: false,\n                 is_extern_crate: true,\n+                is_macro_use,\n             };\n             self.push_import(current_module, import_data, Either::B(AstPtr::new(&extern_crate)));\n         }"}, {"sha": "ebfefe273f2cda3636447d12b76e4b873f6c049d", "filename": "crates/ra_hir/src/nameres/tests/macros.rs", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "patch": "@@ -99,22 +99,22 @@ fn macro_rules_from_other_crates_are_visible() {\n fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n     let map = def_map_with_crate_graph(\n         \"\n-        //- /main.rs      \n+        //- /main.rs\n         macro_rules! baz {\n             () => {\n-                use foo::bar;                \n+                use foo::bar;\n             }\n         }\n-        \n-        foo!();              \n+\n+        foo!();\n         bar!();\n         baz!();\n \n         //- /lib.rs\n         #[macro_export]\n         macro_rules! foo {\n             () => {\n-                struct Foo { field: u32 } \n+                struct Foo { field: u32 }\n             }\n         }\n         #[macro_export]\n@@ -137,3 +137,57 @@ fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n    \u22eefoo: m\n     \"###);\n }\n+\n+#[test]\n+fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n+    covers!(macro_rules_from_other_crates_are_visible_with_macro_use);\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[macro_use]\n+        extern crate foo;\n+\n+        structs!(Foo);\n+        structs_priv!(Bar);\n+        structs_not_exported!(MacroNotResolved1);\n+        crate::structs!(MacroNotResolved2);\n+\n+        mod bar;\n+\n+        //- /bar.rs\n+        structs!(Baz);\n+        crate::structs!(MacroNotResolved3);\n+\n+        //- /lib.rs\n+        #[macro_export]\n+        macro_rules! structs {\n+            ($i:ident) => { struct $i; }\n+        }\n+\n+        macro_rules! structs_not_exported {\n+            ($i:ident) => { struct $i; }\n+        }\n+\n+        mod priv_mod {\n+            #[macro_export]\n+            macro_rules! structs_priv {\n+                ($i:ident) => { struct $i; }\n+            }\n+        }\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", [\"foo\"]),\n+            \"foo\": (\"/lib.rs\", []),\n+        },\n+    );\n+    assert_snapshot!(map, @r###\"\n+   \u22eecrate\n+   \u22eeBar: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+   \u22eefoo: t\n+   \u22ee\n+   \u22eecrate::bar\n+   \u22eeBaz: t v\n+    \"###);\n+}"}, {"sha": "bcf753f78409a66d12cb8be2c798ceac0a0f62fc", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "patch": "@@ -934,6 +934,7 @@ impl AstNode for ExternCrateItem {\n         &self.syntax\n     }\n }\n+impl ast::AttrsOwner for ExternCrateItem {}\n impl ExternCrateItem {\n     pub fn name_ref(&self) -> Option<NameRef> {\n         AstChildren::new(&self.syntax).next()"}, {"sha": "3e6c2d3f3ca5ce4dfcb9b8a963472baf7fb683a8", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=6702f5b7b5b7ddc23398c1b5d77891e9b4b1345a", "patch": "@@ -669,6 +669,7 @@ Grammar(\n             collections: [(\"use_trees\", \"UseTree\")]\n         ),\n         \"ExternCrateItem\": (\n+            traits: [\"AttrsOwner\"],\n             options: [\"NameRef\", \"Alias\"],\n         ),\n         \"ArgList\": ("}]}