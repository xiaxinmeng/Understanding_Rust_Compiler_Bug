{"sha": "0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYjdmOTEyOWVlMjQ0ZTA3MDRiZGI0NjFhZmUyYmRiMmQ2ZTdmYjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-06T20:05:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-06T20:05:34Z"}, "message": "librustc: Refactor language items to have IDs. rs=refactor\n\nPreparation for fixing the performance problems with language item collection.", "tree": {"sha": "dd315e58ede97c2239e576d9e703cf01b14f57b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd315e58ede97c2239e576d9e703cf01b14f57b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "html_url": "https://github.com/rust-lang/rust/commit/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "html_url": "https://github.com/rust-lang/rust/commit/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6"}], "stats": {"total": 309, "additions": 178, "deletions": 131}, "files": [{"sha": "24bbebd1000d48f6c8a014163ba6d2d6a08c1ec6", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "patch": "@@ -48,6 +48,7 @@ export get_type;\n export get_impl_traits;\n export get_impl_method;\n export get_item_path;\n+export get_lang_items;\n export maybe_get_item_ast, found_ast, found, found_parent, not_found;\n export ProvidedTraitMethodInfo;\n export StaticMethodInfo;"}, {"sha": "deaba1b225c77e1fa44ed4b61740eb09aaa7accc", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 149, "deletions": 98, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "patch": "@@ -33,104 +33,157 @@ use core::ptr;\n use std::map::HashMap;\n use str_eq = str::eq;\n \n+pub enum LangItem {\n+    ConstTraitLangItem,     // 0\n+    CopyTraitLangItem,      // 1\n+    OwnedTraitLangItem,     // 2\n+    DurableTraitLangItem,   // 3\n+\n+    DropTraitLangItem,      // 4\n+\n+    AddTraitLangItem,       // 5\n+    SubTraitLangItem,       // 6\n+    MulTraitLangItem,       // 7\n+    DivTraitLangItem,       // 8\n+    ModuloTraitLangItem,    // 9\n+    NegTraitLangItem,       // 10\n+    BitXorTraitLangItem,    // 11\n+    BitAndTraitLangItem,    // 12\n+    BitOrTraitLangItem,     // 13\n+    ShlTraitLangItem,       // 14\n+    ShrTraitLangItem,       // 15\n+    IndexTraitLangItem,     // 16\n+\n+    EqTraitLangItem,        // 17\n+    OrdTraitLangItem,       // 18\n+\n+    StrEqFnLangItem,        // 19\n+    UniqStrEqFnLangItem,    // 20\n+    AnnihilateFnLangItem,   // 21\n+    LogTypeFnLangItem,      // 22\n+}\n+\n struct LanguageItems {\n-    mut const_trait: Option<def_id>,\n-    mut copy_trait: Option<def_id>,\n-    mut owned_trait: Option<def_id>,\n-    mut durable_trait: Option<def_id>,\n-\n-    mut drop_trait: Option<def_id>,\n-\n-    mut add_trait: Option<def_id>,\n-    mut sub_trait: Option<def_id>,\n-    mut mul_trait: Option<def_id>,\n-    mut div_trait: Option<def_id>,\n-    mut modulo_trait: Option<def_id>,\n-    mut neg_trait: Option<def_id>,\n-    mut bitxor_trait: Option<def_id>,\n-    mut bitand_trait: Option<def_id>,\n-    mut bitor_trait: Option<def_id>,\n-    mut shl_trait: Option<def_id>,\n-    mut shr_trait: Option<def_id>,\n-    mut index_trait: Option<def_id>,\n-\n-    mut eq_trait: Option<def_id>,\n-    mut ord_trait: Option<def_id>,\n-\n-    mut str_eq_fn: Option<def_id>,\n-    mut uniq_str_eq_fn: Option<def_id>,\n-    mut annihilate_fn: Option<def_id>,\n-    mut log_type_fn: Option<def_id>\n+    items: [ Option<def_id> * 23 ]\n }\n \n-mod language_items {\n-    #[legacy_exports];\n-    fn make() -> LanguageItems {\n+impl LanguageItems {\n+    static pub fn new() -> LanguageItems {\n         LanguageItems {\n-            const_trait: None,\n-            copy_trait: None,\n-            owned_trait: None,\n-            durable_trait: None,\n-\n-            drop_trait: None,\n-\n-            add_trait: None,\n-            sub_trait: None,\n-            mul_trait: None,\n-            div_trait: None,\n-            modulo_trait: None,\n-            neg_trait: None,\n-            bitxor_trait: None,\n-            bitand_trait: None,\n-            bitor_trait: None,\n-            shl_trait: None,\n-            shr_trait: None,\n-            index_trait: None,\n-\n-            eq_trait: None,\n-            ord_trait: None,\n-\n-            str_eq_fn: None,\n-            uniq_str_eq_fn: None,\n-            annihilate_fn: None,\n-            log_type_fn: None\n+            items: [ None, ..23 ]\n         }\n     }\n-}\n \n-fn LanguageItemCollector(crate: @crate, session: Session,\n-                         items: &r/LanguageItems)\n-    -> LanguageItemCollector/&r {\n+    // XXX: Method macros sure would be nice here.\n+\n+    pub fn const_trait(&const self) -> def_id {\n+        self.items[ConstTraitLangItem as uint].get()\n+    }\n+    pub fn copy_trait(&const self) -> def_id {\n+        self.items[CopyTraitLangItem as uint].get()\n+    }\n+    pub fn owned_trait(&const self) -> def_id {\n+        self.items[OwnedTraitLangItem as uint].get()\n+    }\n+    pub fn durable_trait(&const self) -> def_id {\n+        self.items[DurableTraitLangItem as uint].get()\n+    }\n+\n+    pub fn drop_trait(&const self) -> def_id {\n+        self.items[DropTraitLangItem as uint].get()\n+    }\n+\n+    pub fn add_trait(&const self) -> def_id {\n+        self.items[AddTraitLangItem as uint].get()\n+    }\n+    pub fn sub_trait(&const self) -> def_id {\n+        self.items[SubTraitLangItem as uint].get()\n+    }\n+    pub fn mul_trait(&const self) -> def_id {\n+        self.items[MulTraitLangItem as uint].get()\n+    }\n+    pub fn div_trait(&const self) -> def_id {\n+        self.items[DivTraitLangItem as uint].get()\n+    }\n+    pub fn modulo_trait(&const self) -> def_id {\n+        self.items[ModuloTraitLangItem as uint].get()\n+    }\n+    pub fn neg_trait(&const self) -> def_id {\n+        self.items[NegTraitLangItem as uint].get()\n+    }\n+    pub fn bitxor_trait(&const self) -> def_id {\n+        self.items[BitXorTraitLangItem as uint].get()\n+    }\n+    pub fn bitand_trait(&const self) -> def_id {\n+        self.items[BitAndTraitLangItem as uint].get()\n+    }\n+    pub fn bitor_trait(&const self) -> def_id {\n+        self.items[BitOrTraitLangItem as uint].get()\n+    }\n+    pub fn shl_trait(&const self) -> def_id {\n+        self.items[ShlTraitLangItem as uint].get()\n+    }\n+    pub fn shr_trait(&const self) -> def_id {\n+        self.items[ShrTraitLangItem as uint].get()\n+    }\n+    pub fn index_trait(&const self) -> def_id {\n+        self.items[IndexTraitLangItem as uint].get()\n+    }\n+\n+    pub fn eq_trait(&const self) -> def_id {\n+        self.items[EqTraitLangItem as uint].get()\n+    }\n+    pub fn ord_trait(&const self) -> def_id {\n+        self.items[OrdTraitLangItem as uint].get()\n+    }\n \n+    pub fn str_eq_fn(&const self) -> def_id {\n+        self.items[StrEqFnLangItem as uint].get()\n+    }\n+    pub fn uniq_str_eq_fn(&const self) -> def_id {\n+        self.items[UniqStrEqFnLangItem as uint].get()\n+    }\n+    pub fn annihilate_fn(&const self) -> def_id {\n+        self.items[AnnihilateFnLangItem as uint].get()\n+    }\n+    pub fn log_type_fn(&const self) -> def_id {\n+        self.items[LogTypeFnLangItem as uint].get()\n+    }\n+}\n+\n+fn LanguageItemCollector(crate: @crate,\n+                         session: Session,\n+                         items: &r/mut LanguageItems)\n+                      -> LanguageItemCollector/&r {\n     let item_refs = HashMap();\n \n-    item_refs.insert(~\"const\", &mut items.const_trait);\n-    item_refs.insert(~\"copy\", &mut items.copy_trait);\n-    item_refs.insert(~\"owned\", &mut items.owned_trait);\n-    item_refs.insert(~\"durable\", &mut items.durable_trait);\n-\n-    item_refs.insert(~\"drop\", &mut items.drop_trait);\n-\n-    item_refs.insert(~\"add\", &mut items.add_trait);\n-    item_refs.insert(~\"sub\", &mut items.sub_trait);\n-    item_refs.insert(~\"mul\", &mut items.mul_trait);\n-    item_refs.insert(~\"div\", &mut items.div_trait);\n-    item_refs.insert(~\"modulo\", &mut items.modulo_trait);\n-    item_refs.insert(~\"neg\", &mut items.neg_trait);\n-    item_refs.insert(~\"bitxor\", &mut items.bitxor_trait);\n-    item_refs.insert(~\"bitand\", &mut items.bitand_trait);\n-    item_refs.insert(~\"bitor\", &mut items.bitor_trait);\n-    item_refs.insert(~\"shl\", &mut items.shl_trait);\n-    item_refs.insert(~\"shr\", &mut items.shr_trait);\n-    item_refs.insert(~\"index\", &mut items.index_trait);\n-\n-    item_refs.insert(~\"eq\", &mut items.eq_trait);\n-    item_refs.insert(~\"ord\", &mut items.ord_trait);\n-\n-    item_refs.insert(~\"str_eq\", &mut items.str_eq_fn);\n-    item_refs.insert(~\"uniq_str_eq\", &mut items.uniq_str_eq_fn);\n-    item_refs.insert(~\"annihilate\", &mut items.annihilate_fn);\n-    item_refs.insert(~\"log_type\", &mut items.log_type_fn);\n+    item_refs.insert(~\"const\", ConstTraitLangItem as uint);\n+    item_refs.insert(~\"copy\", CopyTraitLangItem as uint);\n+    item_refs.insert(~\"owned\", OwnedTraitLangItem as uint);\n+    item_refs.insert(~\"durable\", DurableTraitLangItem as uint);\n+\n+    item_refs.insert(~\"drop\", DropTraitLangItem as uint);\n+\n+    item_refs.insert(~\"add\", AddTraitLangItem as uint);\n+    item_refs.insert(~\"sub\", SubTraitLangItem as uint);\n+    item_refs.insert(~\"mul\", MulTraitLangItem as uint);\n+    item_refs.insert(~\"div\", DivTraitLangItem as uint);\n+    item_refs.insert(~\"modulo\", ModuloTraitLangItem as uint);\n+    item_refs.insert(~\"neg\", NegTraitLangItem as uint);\n+    item_refs.insert(~\"bitxor\", BitXorTraitLangItem as uint);\n+    item_refs.insert(~\"bitand\", BitAndTraitLangItem as uint);\n+    item_refs.insert(~\"bitor\", BitOrTraitLangItem as uint);\n+    item_refs.insert(~\"shl\", ShlTraitLangItem as uint);\n+    item_refs.insert(~\"shr\", ShrTraitLangItem as uint);\n+    item_refs.insert(~\"index\", IndexTraitLangItem as uint);\n+\n+    item_refs.insert(~\"eq\", EqTraitLangItem as uint);\n+    item_refs.insert(~\"ord\", OrdTraitLangItem as uint);\n+\n+    item_refs.insert(~\"str_eq\", StrEqFnLangItem as uint);\n+    item_refs.insert(~\"uniq_str_eq\", UniqStrEqFnLangItem as uint);\n+    item_refs.insert(~\"annihilate\", AnnihilateFnLangItem as uint);\n+    item_refs.insert(~\"log_type\", LogTypeFnLangItem as uint);\n \n     LanguageItemCollector {\n         crate: crate,\n@@ -141,16 +194,15 @@ fn LanguageItemCollector(crate: @crate, session: Session,\n }\n \n struct LanguageItemCollector {\n-    items: &LanguageItems,\n+    items: &mut LanguageItems,\n \n     crate: @crate,\n     session: Session,\n \n-    item_refs: HashMap<~str,&mut Option<def_id>>,\n+    item_refs: HashMap<~str,uint>,\n }\n \n impl LanguageItemCollector {\n-\n     fn match_and_collect_meta_item(item_def_id: def_id,\n                                    meta_item: meta_item) {\n         match meta_item.node {\n@@ -177,12 +229,11 @@ impl LanguageItemCollector {\n             None => {\n                 // Didn't match.\n             }\n-            Some(item_ref) => {\n+            Some(item_index) => {\n                 // Check for duplicates.\n-                match copy *item_ref {\n+                match self.items.items[item_index] {\n                     Some(original_def_id)\n                             if original_def_id != item_def_id => {\n-\n                         self.session.err(fmt!(\"duplicate entry for `%s`\",\n                                               value));\n                     }\n@@ -192,7 +243,7 @@ impl LanguageItemCollector {\n                 }\n \n                 // Matched.\n-                *item_ref = Some(item_def_id);\n+                self.items.items[item_index] = Some(item_def_id);\n             }\n         }\n     }\n@@ -240,7 +291,7 @@ impl LanguageItemCollector {\n \n     fn check_completeness() {\n         for self.item_refs.each |key, item_ref| {\n-            match *item_ref {\n+            match self.items.items[item_ref] {\n                 None => {\n                     self.session.err(fmt!(\"no item found for `%s`\", key));\n                 }\n@@ -259,8 +310,8 @@ impl LanguageItemCollector {\n }\n \n fn collect_language_items(crate: @crate, session: Session) -> LanguageItems {\n-    let items = language_items::make();\n-    let collector = LanguageItemCollector(crate, session, &items);\n+    let mut items = LanguageItems::new();\n+    let collector = LanguageItemCollector(crate, session, &mut items);\n     collector.collect();\n     copy items\n }"}, {"sha": "5d99b9ca939f4fc25bcaaf1a8a3af38c4221be28", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "patch": "@@ -5225,60 +5225,60 @@ impl Resolver {\n             }\n             expr_binary(add, _, _) | expr_assign_op(add, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.add_trait);\n+                                              self.lang_items.add_trait());\n             }\n             expr_binary(subtract, _, _) | expr_assign_op(subtract, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.sub_trait);\n+                                              self.lang_items.sub_trait());\n             }\n             expr_binary(mul, _, _) | expr_assign_op(mul, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.mul_trait);\n+                                              self.lang_items.mul_trait());\n             }\n             expr_binary(div, _, _) | expr_assign_op(div, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.div_trait);\n+                                              self.lang_items.div_trait());\n             }\n             expr_binary(rem, _, _) | expr_assign_op(rem, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.modulo_trait);\n+                                              self.lang_items.modulo_trait());\n             }\n             expr_binary(bitxor, _, _) | expr_assign_op(bitxor, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.bitxor_trait);\n+                                              self.lang_items.bitxor_trait());\n             }\n             expr_binary(bitand, _, _) | expr_assign_op(bitand, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.bitand_trait);\n+                                              self.lang_items.bitand_trait());\n             }\n             expr_binary(bitor, _, _) | expr_assign_op(bitor, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.bitor_trait);\n+                                              self.lang_items.bitor_trait());\n             }\n             expr_binary(shl, _, _) | expr_assign_op(shl, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.shl_trait);\n+                                              self.lang_items.shl_trait());\n             }\n             expr_binary(shr, _, _) | expr_assign_op(shr, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.shr_trait);\n+                                              self.lang_items.shr_trait());\n             }\n             expr_binary(lt, _, _) | expr_binary(le, _, _) |\n             expr_binary(ge, _, _) | expr_binary(gt, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.ord_trait);\n+                                              self.lang_items.ord_trait());\n             }\n             expr_binary(eq, _, _) | expr_binary(ne, _, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.eq_trait);\n+                                              self.lang_items.eq_trait());\n             }\n             expr_unary(neg, _) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.neg_trait);\n+                                              self.lang_items.neg_trait());\n             }\n             expr_index(*) => {\n                 self.add_fixed_trait_for_expr(expr.id,\n-                                              self.lang_items.index_trait);\n+                                              self.lang_items.index_trait());\n             }\n             _ => {\n                 // Nothing to do.\n@@ -5397,9 +5397,9 @@ impl Resolver {\n         }\n     }\n \n-    fn add_fixed_trait_for_expr(expr_id: node_id, +trait_id: Option<def_id>) {\n+    fn add_fixed_trait_for_expr(expr_id: node_id, +trait_id: def_id) {\n         let traits = @DVec();\n-        traits.push(trait_id.get());\n+        traits.push(trait_id);\n         self.trait_map.insert(expr_id, traits);\n     }\n "}, {"sha": "43c7f74ead2882a0b2284f9c59c33122b5dca217", "filename": "src/librustc/middle/trans/alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs?ref=0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "patch": "@@ -1022,7 +1022,7 @@ fn compare_values(cx: block, lhs: ValueRef, rhs: ValueRef, rhs_t: ty::t) ->\n             Store(cx, lhs, scratch_lhs);\n             let scratch_rhs = alloca(cx, val_ty(rhs));\n             Store(cx, rhs, scratch_rhs);\n-            let did = cx.tcx().lang_items.uniq_str_eq_fn.get();\n+            let did = cx.tcx().lang_items.uniq_str_eq_fn();\n             let bcx = callee::trans_rtcall_or_lang_call(cx, did,\n                                                         ~[scratch_lhs,\n                                                           scratch_rhs],\n@@ -1033,7 +1033,7 @@ fn compare_values(cx: block, lhs: ValueRef, rhs: ValueRef, rhs_t: ty::t) ->\n         ty::ty_estr(_) => {\n             let scratch_result = scratch_datum(cx, ty::mk_bool(cx.tcx()),\n                                                false);\n-            let did = cx.tcx().lang_items.str_eq_fn.get();\n+            let did = cx.tcx().lang_items.str_eq_fn();\n             let bcx = callee::trans_rtcall_or_lang_call(cx, did,\n                                                         ~[lhs, rhs],\n                                                         expr::SaveIn("}, {"sha": "ad4774702289ec035e13fb98896c1a9561b881a5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "patch": "@@ -2697,7 +2697,7 @@ fn fill_crate_map(ccx: @crate_ctxt, map: ValueRef) {\n     subcrates.push(C_int(ccx, 0));\n \n     let llannihilatefn;\n-    let annihilate_def_id = ccx.tcx.lang_items.annihilate_fn.get();\n+    let annihilate_def_id = ccx.tcx.lang_items.annihilate_fn();\n     if annihilate_def_id.crate == ast::local_crate {\n         llannihilatefn = get_item_val(ccx, annihilate_def_id.node);\n     } else {"}, {"sha": "67bdfb74efc157fa2d71ff6b744390bff23dd456", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "patch": "@@ -208,7 +208,7 @@ fn trans_log(log_ex: @ast::expr,\n \n             // Call the polymorphic log function\n             let val = val_datum.to_ref_llval(bcx);\n-            let did = bcx.tcx().lang_items.log_type_fn.get();\n+            let did = bcx.tcx().lang_items.log_type_fn();\n             let bcx = callee::trans_rtcall_or_lang_call_with_type_params(\n                 bcx, did, ~[level, val], ~[val_datum.ty], expr::Ignore);\n             bcx"}, {"sha": "f6739ce1f1bbcd507b0c5fc44c909c139f64a1b8", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "patch": "@@ -956,7 +956,7 @@ impl CoherenceChecker {\n     fn populate_destructor_table() {\n         let coherence_info = &self.crate_context.coherence_info;\n         let tcx = self.crate_context.tcx;\n-        let drop_trait = tcx.lang_items.drop_trait.get();\n+        let drop_trait = tcx.lang_items.drop_trait();\n         let impls_opt = coherence_info.extension_methods.find(drop_trait);\n \n         let impls;"}, {"sha": "930d159eefe28b46108dab3693db601c8da06c6b", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "patch": "@@ -897,20 +897,15 @@ fn compute_bounds(ccx: @crate_ctxt,\n         let ity = ast_ty_to_ty(ccx, empty_rscope, **b);\n         match ty::get(ity).sty {\n             ty::ty_trait(did, _, _) => {\n-                let d = Some(did);\n-                if d == li.owned_trait {\n+                if did == li.owned_trait() {\n                     ~[ty::bound_owned]\n-                }\n-                else if d == li.copy_trait {\n+                } else if did == li.copy_trait() {\n                     ~[ty::bound_copy]\n-                }\n-                else if d == li.const_trait {\n+                } else if did == li.const_trait() {\n                     ~[ty::bound_const]\n-                }\n-                else if d == li.durable_trait {\n+                } else if did == li.durable_trait() {\n                     ~[ty::bound_durable]\n-                }\n-                else {\n+                } else {\n                     // Must be a user-defined trait\n                     ~[ty::bound_trait(ity)]\n                 }"}, {"sha": "13e36c9169b135ea7d772ca879185b4ef10e06b1", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=0ab7f9129ee244e0704bdb461afe2bdb2d6e7fb4", "patch": "@@ -27,7 +27,7 @@ use driver::driver::{optgroups, build_session_options, build_session,\n use driver::diagnostic;\n use syntax::{ast, attr, parse};\n use syntax::parse::parse_crate_from_source_str;\n-use middle::lang_items::{LanguageItems, language_items};\n+use middle::lang_items::LanguageItems;\n use util::ppaux::ty_to_str;\n use syntax::ast_util::dummy_sp;\n use middle::ty::{FnTyBase, FnMeta, FnSig};\n@@ -53,7 +53,7 @@ fn setup_env(test_name: &str, source_string: &str) -> Env {\n     let freevars = HashMap();\n     let region_paramd_items = HashMap();\n     let region_map = HashMap();\n-    let lang_items = language_items::make();\n+    let lang_items = LanguageItems::new();\n \n     let parse_sess = parse::new_parse_sess(None);\n     let crate = parse_crate_from_source_str("}]}