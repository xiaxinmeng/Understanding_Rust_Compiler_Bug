{"sha": "c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNGJhOTExMjNiMWE1NDEzZGUxYzkyMDhjMWZkZjQ1OGUxYWI4Y2Q=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-07T15:46:48Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-08T00:23:14Z"}, "message": "Rustup to 1.9.0-nightly (bf5da36f1 2016-04-06)", "tree": {"sha": "bd7e803036a9bddfe00d504d10cde7ba24f7c365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd7e803036a9bddfe00d504d10cde7ba24f7c365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "html_url": "https://github.com/rust-lang/rust/commit/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1c935db4611da949e4e79b1abe048d18d1224bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c935db4611da949e4e79b1abe048d18d1224bf", "html_url": "https://github.com/rust-lang/rust/commit/c1c935db4611da949e4e79b1abe048d18d1224bf"}], "stats": {"total": 264, "additions": 135, "deletions": 129}, "files": [{"sha": "731f1a45d09459685390766e6044b3a1b7a41e3b", "filename": "src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fapprox_const.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use std::f64::consts as f64;\n use syntax::ast::{Lit, LitKind, FloatTy};\n use utils::span_lint;"}, {"sha": "ce5c85500bd6a049747877a575ba1db9b74247c9", "filename": "src/array_indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farray_indexing.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::TyArray;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::eval_const_expr_partial;\n use rustc_const_math::ConstInt;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::ast::RangeLimits;\n use utils;\n "}, {"sha": "17b8a60bcb959567038b3bfc64cc287aa9a13c50", "filename": "src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -2,7 +2,7 @@\n \n use reexport::*;\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use semver::Version;\n use syntax::ast::{Attribute, Lit, LitKind, MetaItemKind};\n use syntax::attr::*;"}, {"sha": "45f7e5bc938c399f446bf72e73b6ee382c8cbfd9", "filename": "src/bit_mask.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,8 +1,7 @@\n+use rustc::hir::*;\n+use rustc::hir::def::{Def, PathResolution};\n use rustc::lint::*;\n-use rustc::middle::def::{Def, PathResolution};\n use rustc_const_eval::lookup_const_by_id;\n-use rustc_front::hir::*;\n-use rustc_front::util::is_comparison_binop;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n use utils::span_lint;\n@@ -91,7 +90,7 @@ impl LintPass for BitMask {\n impl LateLintPass for BitMask {\n     fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n         if let ExprBinary(ref cmp, ref left, ref right) = e.node {\n-            if is_comparison_binop(cmp.node) {\n+            if cmp.node.is_comparison() {\n                 fetch_int_literal(cx, right).map_or_else(|| {\n                                                              fetch_int_literal(cx, left).map_or((), |cmp_val| {\n                                                                  check_compare(cx,"}, {"sha": "b515da000ee6b22a657962b3f73fa76dc9b736e8", "filename": "src/blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblacklisted_name.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use utils::span_lint;\n \n /// **What it does:** This lints about usage of blacklisted names."}, {"sha": "1a2123fe00aeaea7862c60d73917fcda0d4f9566", "filename": "src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblock_in_if_condition.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::{LateLintPass, LateContext, LintArray, LintPass};\n-use rustc_front::hir::*;\n-use rustc_front::intravisit::{Visitor, walk_expr};\n+use rustc::hir::*;\n+use rustc::hir::intravisit::{Visitor, walk_expr};\n use utils::*;\n \n /// **What it does:** This lint checks for `if` conditions that use blocks to contain an expression."}, {"sha": "213d12b42ef4a4caf24eb31814f1160797f47d14", "filename": "src/booleans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbooleans.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::{LintArray, LateLintPass, LateContext, LintPass};\n-use rustc_front::hir::*;\n-use rustc_front::intravisit::*;\n+use rustc::hir::*;\n+use rustc::hir::intravisit::*;\n use syntax::ast::{LitKind, DUMMY_NODE_ID};\n use syntax::codemap::{DUMMY_SP, dummy_spanned};\n use utils::{span_lint_and_then, in_macro, snippet_opt, SpanlessEq};"}, {"sha": "5674806b175abc07d1e4aa83c4c4e3d7a5492876", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -13,7 +13,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use std::borrow::Cow;\n use syntax::codemap::Spanned;\n "}, {"sha": "d30392e058609a36159e80ac8ecd429b503b2180", "filename": "src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,10 +1,10 @@\n #![allow(cast_possible_truncation)]\n \n use rustc::lint::LateContext;\n-use rustc::middle::def::{Def, PathResolution};\n+use rustc::hir::def::{Def, PathResolution};\n use rustc_const_eval::lookup_const_by_id;\n use rustc_const_math::{ConstInt, ConstUsize, ConstIsize};\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use std::cmp::Ordering::{self, Equal};\n use std::cmp::PartialOrd;\n use std::hash::{Hash, Hasher};"}, {"sha": "5b992cf38ae7f85c77585d44004bdbe7aa3b7d75", "filename": "src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcopies.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::ty;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use std::collections::HashMap;\n use std::collections::hash_map::Entry;\n use syntax::parse::token::InternedString;"}, {"sha": "fcd89801ecc30dbff9ffd2be7c08bd9e7e867e2c", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -3,8 +3,8 @@\n use rustc::lint::*;\n use rustc::cfg::CFG;\n use rustc::ty;\n-use rustc_front::hir::*;\n-use rustc_front::intravisit::{Visitor, walk_expr};\n+use rustc::hir::*;\n+use rustc::hir::intravisit::{Visitor, walk_expr};\n use syntax::ast::Attribute;\n use syntax::attr::*;\n use syntax::codemap::Span;"}, {"sha": "593118bef84a4fee3c27e160a775818329329c70", "filename": "src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fderive.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -3,7 +3,7 @@ use rustc::ty::subst::Subst;\n use rustc::ty::TypeVariants;\n use rustc::ty::fast_reject::simplify_type;\n use rustc::ty;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::ast::{Attribute, MetaItemKind};\n use syntax::codemap::Span;\n use utils::{CLONE_TRAIT_PATH, HASH_PATH};"}, {"sha": "3448e05dbac18d1e167c25c20a6bb069e4197a86", "filename": "src/drop_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdrop_ref.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::ty;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::codemap::Span;\n use utils::DROP_PATH;\n use utils::{match_def_path, span_note_and_lint};"}, {"sha": "934400bc12287731f32c2c7d86966aeea32fb6d5", "filename": "src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fentry.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n-use rustc_front::hir::*;\n-use rustc_front::intravisit::{Visitor, walk_expr, walk_block};\n+use rustc::hir::*;\n+use rustc::hir::intravisit::{Visitor, walk_expr, walk_block};\n use syntax::codemap::Span;\n use utils::SpanlessEq;\n use utils::{BTREEMAP_PATH, HASHMAP_PATH};"}, {"sha": "e3e8f1e5eb6d897e8c7d52b563d27ba0d7e3931b", "filename": "src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fenum_clike.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -3,7 +3,7 @@\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc_const_math::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::attr::*;\n use utils::span_lint;\n "}, {"sha": "671b9bb141c36f3dbe31590e864172aa66bcf363", "filename": "src/enum_glob_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fenum_glob_use.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,10 +1,10 @@\n //! lint on `use`ing all variants of an enum\n \n-use rustc::front::map::Node::NodeItem;\n+use rustc::hir::*;\n+use rustc::hir::def::Def;\n+use rustc::hir::map::Node::NodeItem;\n use rustc::lint::{LateLintPass, LintPass, LateContext, LintArray, LintContext};\n-use rustc::middle::def::Def;\n use rustc::middle::cstore::DefLike;\n-use rustc_front::hir::*;\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use utils::span_lint;"}, {"sha": "fb06639853cd5b648b78117ce650cc9af6487152", "filename": "src/eq_op.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feq_op.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,5 @@\n+use rustc::hir::*;\n use rustc::lint::*;\n-use rustc_front::hir::*;\n-use rustc_front::util as ast_util;\n use utils::{SpanlessEq, span_lint};\n \n /// **What it does:** This lint checks for equal operands to comparison, logical and bitwise,\n@@ -34,7 +33,7 @@ impl LateLintPass for EqOp {\n                 span_lint(cx,\n                           EQ_OP,\n                           e.span,\n-                          &format!(\"equal expressions as operands to `{}`\", ast_util::binop_to_string(op.node)));\n+                          &format!(\"equal expressions as operands to `{}`\", op.node.as_str()));\n             }\n         }\n     }"}, {"sha": "fa235244884a793c1bb3eab0bfa76109332013c2", "filename": "src/escape.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fescape.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,14 +1,14 @@\n-use rustc::front::map::Node::{NodeExpr, NodeStmt};\n+use rustc::hir::*;\n+use rustc::hir::intravisit as visit;\n+use rustc::hir::map::Node::{NodeExpr, NodeStmt};\n+use rustc::infer;\n use rustc::lint::*;\n use rustc::middle::expr_use_visitor::*;\n-use rustc::infer;\n use rustc::middle::mem_categorization::{cmt, Categorization};\n use rustc::traits::ProjectionMode;\n use rustc::ty::adjustment::AutoAdjustment;\n use rustc::ty;\n use rustc::util::nodemap::NodeSet;\n-use rustc_front::hir::*;\n-use rustc_front::intravisit as visit;\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use utils::span_lint;"}, {"sha": "4519acc39de8a95a555b51d0f8efa067a67355fe", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::ty;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use utils::{snippet_opt, span_lint_and_then, is_adjusted};\n \n #[allow(missing_copy_implementations)]"}, {"sha": "0a349c98e07667055629f1d41b13f1ea09cc285f", "filename": "src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,7 +1,7 @@\n-use rustc::front::map::Node::NodeItem;\n+use rustc::hir::map::Node::NodeItem;\n use rustc::lint::*;\n use rustc::ty::TypeVariants;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::ast::LitKind;\n use utils::{DISPLAY_FMT_METHOD_PATH, FMT_ARGUMENTS_NEWV1_PATH, STRING_PATH};\n use utils::{is_expn_of, match_path, match_type, span_lint, walk_ptrs_ty};"}, {"sha": "ed04473abc3e3968d07112e1c608c9b571066449", "filename": "src/functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffunctions.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n-use rustc_front::hir;\n-use rustc_front::intravisit;\n+use rustc::hir;\n+use rustc::hir::intravisit;\n use syntax::ast;\n use syntax::codemap::Span;\n use utils::span_lint;\n@@ -45,7 +45,7 @@ impl LintPass for Functions {\n \n impl LateLintPass for Functions {\n     fn check_fn(&mut self, cx: &LateContext, _: intravisit::FnKind, decl: &hir::FnDecl, _: &hir::Block, span: Span, nodeid: ast::NodeId) {\n-        use rustc::front::map::Node::*;\n+        use rustc::hir::map::Node::*;\n \n         if let Some(NodeItem(ref item)) = cx.tcx.map.find(cx.tcx.map.get_parent_node(nodeid)) {\n             match item.node {"}, {"sha": "4c1f01b7385812c483d273eae8ef157596a74c20", "filename": "src/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use consts::{constant_simple, Constant};\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::codemap::Span;\n use utils::{span_lint, snippet, in_macro};\n use rustc_const_math::ConstInt;"}, {"sha": "3a376d91c9292e96183d97881d8415ac384ba03c", "filename": "src/len_zero.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::ty::{self, MethodTraitItemId, ImplOrTraitItemId};\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::ast::{Lit, LitKind, Name};\n use syntax::codemap::{Span, Spanned};\n use syntax::ptr::P;\n@@ -111,6 +111,8 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItem]) {\n     if !impl_items.iter().any(|i| is_named_self(i, \"is_empty\")) {\n         for i in impl_items {\n             if is_named_self(i, \"len\") {\n+                let ty = cx.tcx.node_id_to_type(item.id);\n+\n                 let s = i.span;\n                 span_lint(cx,\n                           LEN_WITHOUT_IS_EMPTY,\n@@ -121,7 +123,7 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItem]) {\n                           },\n                           &format!(\"item `{}` has a `.len(_: &Self)` method, but no `.is_empty(_: &Self)` method. \\\n                                     Consider adding one\",\n-                                   item.name));\n+                                   ty));\n                 return;\n             }\n         }"}, {"sha": "1b48c7b3dbbcc0d8ab9a768cb18a2dc3c9e0088d", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -19,8 +19,6 @@ fn main() {\n extern crate syntax;\n #[macro_use]\n extern crate rustc;\n-#[macro_use]\n-extern crate rustc_front;\n \n extern crate toml;\n "}, {"sha": "ad42a8568e60609af6e9eeeaa5e6f4b358a8c76d", "filename": "src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,8 +1,8 @@\n use reexport::*;\n use rustc::lint::*;\n-use rustc::middle::def::Def;\n-use rustc_front::hir::*;\n-use rustc_front::intravisit::{Visitor, walk_ty, walk_ty_param_bound, walk_fn_decl, walk_generics};\n+use rustc::hir::def::Def;\n+use rustc::hir::*;\n+use rustc::hir::intravisit::{Visitor, walk_ty, walk_ty_param_bound, walk_fn_decl, walk_generics};\n use std::collections::{HashSet, HashMap};\n use syntax::codemap::Span;\n use utils::{in_external_macro, span_lint};"}, {"sha": "4e7e4bf117d8e1ad3653d91463047ab86c6fc664", "filename": "src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,14 +1,14 @@\n use reexport::*;\n-use rustc::front::map::Node::NodeBlock;\n+use rustc::hir::*;\n+use rustc::hir::def::Def;\n+use rustc::hir::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n+use rustc::hir::map::Node::NodeBlock;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n-use rustc::middle::def::Def;\n use rustc::middle::region::CodeExtent;\n use rustc::ty;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::eval_const_expr_partial;\n-use rustc_front::hir::*;\n-use rustc_front::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n use std::borrow::Cow;\n use std::collections::HashMap;\n use syntax::ast;"}, {"sha": "eeb3aab4655c4f51e9b725b5bb48543b9373428e", "filename": "src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmap_clone.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use utils::{CLONE_PATH, OPTION_PATH};\n use utils::{is_adjusted, match_path, match_trait_method, match_type, snippet, span_help_and_lint, walk_ptrs_ty,\n             walk_ptrs_ty_depth};"}, {"sha": "d82dad5b06532f2c564ac3032e67737b60554a9d", "filename": "src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,10 +1,10 @@\n+use rustc::hir::*;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::eval_const_expr_partial;\n use rustc_const_math::ConstInt;\n-use rustc_front::hir::*;\n use std::cmp::Ordering;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;"}, {"sha": "3fcd472faf5127aaa4f9e22b7ade251aef6abd41", "filename": "src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,11 +1,11 @@\n+use rustc::hir::*;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::cstore::CrateStore;\n use rustc::ty::subst::{Subst, TypeSpace};\n use rustc::ty;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::eval_const_expr_partial;\n-use rustc_front::hir::*;\n use std::borrow::Cow;\n use std::fmt;\n use syntax::codemap::Span;"}, {"sha": "67299bac9988e4d9f7637f8a936642377b55c314", "filename": "src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fminmax.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use consts::{Constant, constant_simple};\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use std::cmp::{PartialOrd, Ordering};\n use syntax::ptr::P;\n use utils::{match_def_path, span_lint};"}, {"sha": "654e6244c1b62bfb0a4357c29b57ed2313dd1d49", "filename": "src/misc.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,12 +1,11 @@\n use reexport::*;\n+use rustc::hir::*;\n+use rustc::hir::intravisit::FnKind;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::eval_const_expr_partial;\n-use rustc_front::hir::*;\n-use rustc_front::intravisit::FnKind;\n-use rustc_front::util::{is_comparison_binop, binop_to_string};\n use syntax::codemap::{Span, Spanned, ExpnFormat};\n use syntax::ptr::P;\n use utils::{get_item_name, match_path, snippet, get_parent_expr, span_lint};\n@@ -105,7 +104,7 @@ impl LintPass for CmpNan {\n impl LateLintPass for CmpNan {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if let ExprBinary(ref cmp, ref left, ref right) = expr.node {\n-            if is_comparison_binop(cmp.node) {\n+            if cmp.node.is_comparison() {\n                 if let ExprPath(_, ref path) = left.node {\n                     check_nan(cx, path, expr.span);\n                 }\n@@ -170,7 +169,7 @@ impl LateLintPass for FloatCmp {\n                           &format!(\"{}-comparison of f32 or f64 detected. Consider changing this to `({} - {}).abs() < \\\n                                     epsilon` for some suitable value of epsilon. \\\n                                     std::f32::EPSILON and std::f64::EPSILON are available.\",\n-                                   binop_to_string(op),\n+                                   op.as_str(),\n                                    snippet(cx, left.span, \"..\"),\n                                    snippet(cx, right.span, \"..\")));\n             }\n@@ -217,7 +216,7 @@ impl LintPass for CmpOwned {\n impl LateLintPass for CmpOwned {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if let ExprBinary(ref cmp, ref left, ref right) = expr.node {\n-            if is_comparison_binop(cmp.node) {\n+            if cmp.node.is_comparison() {\n                 check_to_owned(cx, left, right, true, cmp.span);\n                 check_to_owned(cx, right, left, false, cmp.span)\n             }"}, {"sha": "65e2c3a46a976be44a8e414c151f8da8bce79c7a", "filename": "src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::ty::{TypeAndMut, TyRef};\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use utils::{in_external_macro, span_lint};\n \n /// **What it does:** This lint checks for instances of `mut mut` references."}, {"sha": "d74c2c41f237922f55eef7c992ab64a07575bdfa", "filename": "src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::ty::{TypeAndMut, TypeVariants, MethodCall, TyS};\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::ptr::P;\n use utils::span_lint;\n "}, {"sha": "bae1ae38168da031978820a062e3e084e7dff18a", "filename": "src/mutex_atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmutex_atomic.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -5,7 +5,7 @@\n use rustc::lint::{LintPass, LintArray, LateLintPass, LateContext};\n use rustc::ty::subst::ParamSpace;\n use rustc::ty;\n-use rustc_front::hir::Expr;\n+use rustc::hir::Expr;\n use syntax::ast;\n use utils::{span_lint, MUTEX_PATH, match_type};\n "}, {"sha": "07da57c684b4008203b2afd245ecf16e06a3f06c", "filename": "src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::ast::LitKind;\n use syntax::codemap::Spanned;\n use utils::{span_lint, span_lint_and_then, snippet, snippet_opt};"}, {"sha": "d8ae9dc347163c3ee56df67137add6e729f66133", "filename": "src/needless_update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_update.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::TyStruct;\n-use rustc_front::hir::{Expr, ExprStruct};\n+use rustc::hir::{Expr, ExprStruct};\n use utils::span_lint;\n \n /// **What it does:** This lint warns on needlessly including a base struct on update when all fields are changed anyway."}, {"sha": "2bcc345fd601f9cf51f69b85f8f1c3c592c80040", "filename": "src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnew_without_default.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n-use rustc_front::hir;\n-use rustc_front::intravisit::FnKind;\n+use rustc::hir;\n+use rustc::hir::intravisit::FnKind;\n use syntax::ast;\n use syntax::codemap::Span;\n use utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, same_tys, span_lint,"}, {"sha": "afb49376b3f813d08bf9024b3e4376649cf8886d", "filename": "src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fno_effect.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::middle::def::Def;\n-use rustc_front::hir::{Expr, Expr_, Stmt, StmtSemi};\n+use rustc::hir::def::Def;\n+use rustc::hir::{Expr, Expr_, Stmt, StmtSemi};\n use utils::{in_macro, span_lint};\n \n /// **What it does:** This lint checks for statements which have no effect."}, {"sha": "3c1e69a40ea275b7845eae22ecb8860784bbb12c", "filename": "src/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fopen_options.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use rustc_front::hir::{Expr, ExprMethodCall, ExprLit};\n+use rustc::hir::{Expr, ExprMethodCall, ExprLit};\n use syntax::ast::LitKind;\n use syntax::codemap::{Span, Spanned};\n use utils::{walk_ptrs_ty_depth, match_type, span_lint, OPEN_OPTIONS_PATH};"}, {"sha": "627028ad462a572472586dd5e1426029c1216df5", "filename": "src/overflow_check_conditional.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow_check_conditional.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use utils::{span_lint};\n \n /// **What it does:** This lint finds classic underflow / overflow checks."}, {"sha": "ab03181c2dd321aaa9be22fe424ebf2f2c3c9631", "filename": "src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpanic.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::ast::LitKind;\n use utils::{span_lint, is_direct_expn_of, match_path, BEGIN_UNWIND};\n "}, {"sha": "a298d162c058c1e84b244fbb7429c290bd0925a1", "filename": "src/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprint.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n-use rustc::front::map::Node::{NodeItem, NodeImplItem};\n+use rustc::hir::map::Node::{NodeItem, NodeImplItem};\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use utils::{FMT_ARGUMENTV1_NEW_PATH, DEBUG_FMT_METHOD_PATH, IO_PRINT_PATH};\n use utils::{is_expn_of, match_path, span_lint};\n "}, {"sha": "8720424da86ff6305fdf60272092d2bd8df60b32", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,9 +1,9 @@\n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n-use rustc::front::map::NodeItem;\n+use rustc::hir::map::NodeItem;\n use rustc::lint::*;\n use rustc::ty;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::ast::NodeId;\n use utils::{STRING_PATH, VEC_PATH};\n use utils::{span_lint, match_type};"}, {"sha": "c2555da1d0b83bb66f3118922836e2849c3e1847", "filename": "src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Franges.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::codemap::Spanned;\n use utils::{is_integer_literal, match_type, snippet, span_lint, unsugar_range, UnsugaredRange};\n "}, {"sha": "f24639312ed8c725721c1a6cf08e6ae1e1619fb4", "filename": "src/regex.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,15 +1,14 @@\n use regex_syntax;\n+use rustc::hir::*;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::eval_const_expr_partial;\n-use rustc_front::hir::*;\n use std::collections::HashSet;\n use std::error::Error;\n use syntax::ast::{LitKind, NodeId};\n use syntax::codemap::{Span, BytePos};\n use syntax::parse::token::InternedString;\n-\n use utils::{is_expn_of, match_path, match_type, REGEX_NEW_PATH, span_lint, span_help_and_lint};\n \n /// **What it does:** This lint checks `Regex::new(_)` invocations for correct regex syntax."}, {"sha": "928d447974a3240832d18367ee7d3c8cf0253ef5", "filename": "src/shadow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,8 +1,8 @@\n use reexport::*;\n use rustc::lint::*;\n-use rustc::middle::def::Def;\n-use rustc_front::hir::*;\n-use rustc_front::intravisit::{Visitor, FnKind};\n+use rustc::hir::def::Def;\n+use rustc::hir::*;\n+use rustc::hir::intravisit::{Visitor, FnKind};\n use std::ops::Deref;\n use syntax::codemap::Span;\n use utils::{is_from_for_desugar, in_external_macro, snippet, span_lint, span_note_and_lint, DiagnosticWrapper};"}, {"sha": "da1456671fdf9ca5667fad7ba50c013f60329938", "filename": "src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -4,7 +4,7 @@\n //! disable the subsumed lint unless it has a higher level\n \n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::codemap::Spanned;\n use utils::STRING_PATH;\n use utils::SpanlessEq;"}, {"sha": "29db0da5cf9a7e861be344cc2cf909462884b905", "filename": "src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fswap.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::codemap::mk_sp;\n use utils::{differing_macro_contexts, snippet_opt, span_lint_and_then, SpanlessEq};\n "}, {"sha": "447964104588486aa34bbb4505f2a3ce3b080feb", "filename": "src/temporary_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftemporary_assignment.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc_front::hir::{Expr, ExprAssign, ExprField, ExprStruct, ExprTup, ExprTupField};\n+use rustc::hir::{Expr, ExprAssign, ExprField, ExprStruct, ExprTup, ExprTupField};\n use utils::is_adjusted;\n use utils::span_lint;\n "}, {"sha": "41b92ca61138569b41c9b74ea338736b9b4ba5ea", "filename": "src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftransmute.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc::ty::TypeVariants::{TyRawPtr, TyRef};\n use rustc::ty;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use utils::TRANSMUTE_PATH;\n use utils::{match_def_path, snippet_opt, span_lint, span_lint_and_then};\n "}, {"sha": "281af90736b2e8e24b937e6141bc3cdeb3cf233c", "filename": "src/types.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,10 +1,8 @@\n use reexport::*;\n+use rustc::hir::*;\n+use rustc::hir::intravisit::{FnKind, Visitor, walk_ty};\n use rustc::lint::*;\n-use rustc::middle::def;\n use rustc::ty;\n-use rustc_front::hir::*;\n-use rustc_front::intravisit::{FnKind, Visitor, walk_ty};\n-use rustc_front::util::{is_comparison_binop, binop_to_string};\n use std::cmp::Ordering;\n use syntax::ast::{IntTy, UintTy, FloatTy};\n use syntax::codemap::Span;\n@@ -162,7 +160,7 @@ impl LateLintPass for UnitCmp {\n         if let ExprBinary(ref cmp, ref left, _) = expr.node {\n             let op = cmp.node;\n             let sty = &cx.tcx.expr_ty(left).sty;\n-            if *sty == ty::TyTuple(vec![]) && is_comparison_binop(op) {\n+            if *sty == ty::TyTuple(vec![]) && op.is_comparison() {\n                 let result = match op {\n                     BiEq | BiLe | BiGe => \"true\",\n                     _ => \"false\",\n@@ -171,7 +169,7 @@ impl LateLintPass for UnitCmp {\n                           UNIT_CMP,\n                           expr.span,\n                           &format!(\"{}-comparison of unit values detected. This will always be {}\",\n-                                   binop_to_string(op),\n+                                   op.as_str(),\n                                    result));\n             }\n         }"}, {"sha": "26521017ee528ce0fb075222e223394d85415707", "filename": "src/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n use unicode_normalization::UnicodeNormalization;"}, {"sha": "f6ff3c3d4b4effcfd9be2410fe25dbb073706802", "filename": "src/unused_label.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funused_label.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n-use rustc_front::hir;\n-use rustc_front::intravisit::{FnKind, Visitor, walk_expr, walk_fn};\n+use rustc::hir;\n+use rustc::hir::intravisit::{FnKind, Visitor, walk_expr, walk_fn};\n use std::collections::HashMap;\n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "b890a363fb7f3a979f85398eb6fa95baabc20c8a", "filename": "src/utils/comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Futils%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Futils%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fcomparisons.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,4 +1,4 @@\n-use rustc_front::hir::{BinOp_, Expr};\n+use rustc::hir::{BinOp_, Expr};\n \n #[derive(PartialEq, Eq, Debug, Copy, Clone)]\n pub enum Rel {"}, {"sha": "f6fa2176941360e4df655a1c1ff5722a1a828037", "filename": "src/utils/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fhir.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use consts::constant;\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use std::hash::{Hash, Hasher, SipHasher};\n use syntax::ast::Name;\n use syntax::ptr::P;"}, {"sha": "761d5d3df9dda36533862144ea7a528244067d95", "filename": "src/utils/mod.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,15 +1,15 @@\n use reexport::*;\n-use rustc::front::map::Node;\n+use rustc::hir::*;\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::map::Node;\n+use rustc::infer;\n use rustc::lint::{LintContext, LateContext, Level, Lint};\n-use rustc::middle::def_id::DefId;\n-use rustc::traits;\n+use rustc::middle::cstore;\n+use rustc::session::Session;\n use rustc::traits::ProjectionMode;\n-use rustc::middle::{cstore, def};\n-use rustc::infer;\n-use rustc::ty;\n+use rustc::traits;\n use rustc::ty::subst::Subst;\n-use rustc::session::Session;\n-use rustc_front::hir::*;\n+use rustc::ty;\n use std::borrow::Cow;\n use std::mem;\n use std::ops::{Deref, DerefMut};\n@@ -56,7 +56,7 @@ pub const RANGE_TO_PATH: [&'static str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n pub const REGEX_NEW_PATH: [&'static str; 3] = [\"regex\", \"Regex\", \"new\"];\n pub const RESULT_PATH: [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n pub const STRING_PATH: [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n-pub const TRANSMUTE_PATH: [&'static str; 3] = [\"core\", \"intrinsics\", \"transmute\"];\n+pub const TRANSMUTE_PATH: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const VEC_FROM_ELEM_PATH: [&'static str; 3] = [\"std\", \"vec\", \"from_elem\"];\n pub const VEC_PATH: [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n pub const BOX_PATH: [&'static str; 3] = [\"std\", \"boxed\", \"Box\"];\n@@ -157,13 +157,22 @@ pub fn in_external_macro<T: LintContext>(cx: &T, span: Span) -> bool {\n /// match_def_path(cx, id, &[\"core\", \"option\", \"Option\"])\n /// ```\n pub fn match_def_path(cx: &LateContext, def_id: DefId, path: &[&str]) -> bool {\n-    cx.tcx.with_path(def_id, |iter| {\n-        let mut len = 0;\n+    let krate = &cx.tcx.crate_name(def_id.krate);\n+    if krate != &path[0] {\n+        return false;\n+    }\n \n-        iter.inspect(|_| len += 1)\n-            .zip(path)\n-            .all(|(nm, p)| nm.name().as_str() == *p) && len == path.len()\n-    })\n+    let path = &path[1..];\n+    let other = cx.tcx.def_path(def_id).data;\n+\n+    if other.len() != path.len() {\n+        return false;\n+    }\n+\n+    other.into_iter()\n+         .map(|e| e.data)\n+         .zip(path)\n+         .all(|(nm, p)| nm.as_interned_str() == *p)\n }\n \n /// Check if type is struct or enum type with given def path."}, {"sha": "d27a3320d96c02c1600c4ee6d1c9b865a1d1a5bd", "filename": "src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvec.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::ty::TypeVariants;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::codemap::Span;\n use syntax::ptr::P;\n use utils::VEC_FROM_ELEM_PATH;"}, {"sha": "902d84d4dd324d208907e46a7c820a36d16d0aa3", "filename": "src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/src%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fzero_div_zero.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -1,6 +1,6 @@\n use consts::{Constant, constant_simple, FloatWidth};\n use rustc::lint::*;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use utils::span_help_and_lint;\n \n /// `ZeroDivZeroPass` is a pass that checks for a binary expression that consists"}, {"sha": "ad97410cf65598c91f7676fc0a8b762469dde882", "filename": "tests/compile-fail/transmute.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/tests%2Fcompile-fail%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/tests%2Fcompile-fail%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -6,6 +6,10 @@ extern crate core;\n use std::mem::transmute as my_transmute;\n use std::vec::Vec as MyVec;\n \n+fn my_int() -> usize {\n+    42\n+}\n+\n fn my_vec() -> MyVec<i32> {\n     vec![]\n }\n@@ -86,22 +90,22 @@ fn useless() {\n \n #[deny(crosspointer_transmute)]\n fn crosspointer() {\n-    let mut vec: Vec<i32> = vec![];\n-    let vec_const_ptr: *const Vec<i32> = &vec as *const Vec<i32>;\n-    let vec_mut_ptr: *mut Vec<i32> = &mut vec as *mut Vec<i32>;\n+    let mut int: usize = 0;\n+    let int_const_ptr: *const usize = &int as *const usize;\n+    let int_mut_ptr: *mut usize = &mut int as *mut usize;\n \n     unsafe {\n-        let _: Vec<i32> = core::intrinsics::transmute(vec_const_ptr);\n-        //~^ ERROR transmute from a type (`*const std::vec::Vec<i32>`) to the type that it points to (`std::vec::Vec<i32>`)\n+        let _: usize = core::intrinsics::transmute(int_const_ptr);\n+        //~^ ERROR transmute from a type (`*const usize`) to the type that it points to (`usize`)\n \n-        let _: Vec<i32> = core::intrinsics::transmute(vec_mut_ptr);\n-        //~^ ERROR transmute from a type (`*mut std::vec::Vec<i32>`) to the type that it points to (`std::vec::Vec<i32>`)\n+        let _: usize = core::intrinsics::transmute(int_mut_ptr);\n+        //~^ ERROR transmute from a type (`*mut usize`) to the type that it points to (`usize`)\n \n-        let _: *const Vec<i32> = core::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to a pointer to that type (`*const std::vec::Vec<i32>`)\n+        let _: *const usize = core::intrinsics::transmute(my_int());\n+        //~^ ERROR transmute from a type (`usize`) to a pointer to that type (`*const usize`)\n \n-        let _: *mut Vec<i32> = core::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to a pointer to that type (`*mut std::vec::Vec<i32>`)\n+        let _: *mut usize = core::intrinsics::transmute(my_int());\n+        //~^ ERROR transmute from a type (`usize`) to a pointer to that type (`*mut usize`)\n     }\n }\n "}, {"sha": "4b3aba3f6bedd57bdd6de893b7a65b62c42350a4", "filename": "tests/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24ba91123b1a5413de1c9208c1fdf458e1ab8cd/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=c24ba91123b1a5413de1c9208c1fdf458e1ab8cd", "patch": "@@ -5,12 +5,11 @@ extern crate clippy;\n extern crate rustc;\n extern crate rustc_const_eval;\n extern crate rustc_const_math;\n-extern crate rustc_front;\n extern crate syntax;\n \n use clippy::consts::{constant_simple, Constant, FloatWidth};\n use rustc_const_math::ConstInt;\n-use rustc_front::hir::*;\n+use rustc::hir::*;\n use syntax::ast::{LitIntType, LitKind, StrStyle};\n use syntax::codemap::{Spanned, COMMAND_LINE_SP};\n use syntax::parse::token::InternedString;"}]}