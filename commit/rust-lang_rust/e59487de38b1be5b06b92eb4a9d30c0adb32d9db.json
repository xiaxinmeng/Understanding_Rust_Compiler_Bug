{"sha": "e59487de38b1be5b06b92eb4a9d30c0adb32d9db", "node_id": "C_kwDOAAsO6NoAKGU1OTQ4N2RlMzhiMWJlNWIwNmI5MmViNGE5ZDMwYzBhZGIzMmQ5ZGI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-07T16:12:24Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-07T16:12:24Z"}, "message": "Add tests for float access macro call inputs", "tree": {"sha": "d58242b5866a99280f8032d805bd36289a2311c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d58242b5866a99280f8032d805bd36289a2311c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e59487de38b1be5b06b92eb4a9d30c0adb32d9db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e59487de38b1be5b06b92eb4a9d30c0adb32d9db", "html_url": "https://github.com/rust-lang/rust/commit/e59487de38b1be5b06b92eb4a9d30c0adb32d9db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e59487de38b1be5b06b92eb4a9d30c0adb32d9db/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6539b139e185c5bb08de5b8ff0275b47c70df43", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6539b139e185c5bb08de5b8ff0275b47c70df43", "html_url": "https://github.com/rust-lang/rust/commit/f6539b139e185c5bb08de5b8ff0275b47c70df43"}], "stats": {"total": 95, "additions": 58, "deletions": 37}, "files": [{"sha": "49bbc64bff1807b442fefc8b842e91e97d181874", "filename": "crates/hir-def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e59487de38b1be5b06b92eb4a9d30c0adb32d9db/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59487de38b1be5b06b92eb4a9d30c0adb32d9db/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=e59487de38b1be5b06b92eb4a9d30c0adb32d9db", "patch": "@@ -97,6 +97,41 @@ fn#19 main#20(#21)#21 {#22\n \"##]],\n     );\n }\n+#[test]\n+fn float_field_acces_macro_input() {\n+    check(\n+        r#\"\n+macro_rules! foo {\n+    ($expr:expr) => {\n+        fn foo() {\n+            $expr;\n+        }\n+    };\n+}\n+foo!(x .0.1);\n+foo!(x .2. 3);\n+foo!(x .4 .5);\n+\"#,\n+        expect![[r#\"\n+macro_rules! foo {\n+    ($expr:expr) => {\n+        fn foo() {\n+            $expr;\n+        }\n+    };\n+}\n+fn foo() {\n+    (x.0.1);\n+}\n+fn foo() {\n+    (x.2.3);\n+}\n+fn foo() {\n+    (x.4.5);\n+}\n+\"#]],\n+    );\n+}\n \n #[test]\n fn mbe_smoke_test() {"}, {"sha": "a4e3efaeb521043a37d79f214f92dd0afcb5245a", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e59487de38b1be5b06b92eb4a9d30c0adb32d9db/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59487de38b1be5b06b92eb4a9d30c0adb32d9db/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=e59487de38b1be5b06b92eb4a9d30c0adb32d9db", "patch": "@@ -817,7 +817,7 @@ impl<'a> TtTreeSink<'a> {\n                 self.inner.token(SyntaxKind::DOT, \".\");\n \n                 if has_pseudo_dot {\n-                    assert!(right.is_empty());\n+                    assert!(right.is_empty(), \"{left}.{right}\");\n                 } else {\n                     self.inner.start_node(SyntaxKind::NAME_REF);\n                     self.inner.token(SyntaxKind::INT_NUMBER, right);"}, {"sha": "6d20998bb4df1748ff3518da97368547f8de1ac4", "filename": "crates/mbe/src/to_parser_input.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e59487de38b1be5b06b92eb4a9d30c0adb32d9db/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59487de38b1be5b06b92eb4a9d30c0adb32d9db/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs?ref=e59487de38b1be5b06b92eb4a9d30c0adb32d9db", "patch": "@@ -45,6 +45,10 @@ pub(crate) fn to_parser_input(buffer: &TokenBuffer<'_>) -> parser::Input {\n                             .unwrap_or_else(|| panic!(\"Fail to convert given literal {:#?}\", &lit));\n \n                         res.push(kind);\n+\n+                        if kind == FLOAT_NUMBER && !inner_text.ends_with('.') {\n+                            res.was_joint();\n+                        }\n                     }\n                     tt::Leaf::Ident(ident) => match ident.text.as_ref() {\n                         \"_\" => res.push(T![_]),"}, {"sha": "f744481f3aecbe9019c14296f7525f92d6e995f1", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 7, "deletions": 34, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e59487de38b1be5b06b92eb4a9d30c0adb32d9db/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59487de38b1be5b06b92eb4a9d30c0adb32d9db/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=e59487de38b1be5b06b92eb4a9d30c0adb32d9db", "patch": "@@ -140,7 +140,6 @@ impl<'a> TtIter<'a> {\n \n         let mut cursor = buffer.begin();\n         let mut error = false;\n-        let mut float_splits = vec![];\n         for step in tree_traversal.iter() {\n             match step {\n                 parser::Step::Token { kind, mut n_input_tokens } => {\n@@ -152,7 +151,8 @@ impl<'a> TtIter<'a> {\n                     }\n                 }\n                 parser::Step::FloatSplit { .. } => {\n-                    float_splits.push(cursor);\n+                    // FIXME: We need to split the tree properly here, but mutating the token trees\n+                    // in the buffer is somewhat tricky to pull off.\n                     cursor = cursor.bump_subtree();\n                 }\n                 parser::Step::Enter { .. } | parser::Step::Exit => (),\n@@ -170,40 +170,13 @@ impl<'a> TtIter<'a> {\n         let mut res = vec![];\n \n         if cursor.is_root() {\n-            if float_splits.is_empty() {\n-                while curr != cursor {\n-                    if let Some(token) = curr.token_tree() {\n-                        res.push(token.cloned());\n-                    }\n-                    curr = curr.bump();\n-                }\n-            } else {\n-                // let mut float_splits = float_splits.into_iter().peekable();\n-                // while let Some(tt) = curr.token_tree() {\n-                //     let mut tt = tt.cloned();\n-                //     let mut tt_mut_ref = &mut tt;\n-                //     if let Some(fs) = float_splits.peek() {\n-                //         loop {\n-                //             curr = curr.bump_subtree();\n-                //             if curr == *fs {\n-                //                 float_splits.next();\n-                //             }\n-                //             if curr.is_root() {\n-                //                 break;\n-                //             }\n-                //         }\n-                //     }\n-                //     res.push(tt);\n-                // }\n-\n-                while curr != cursor {\n-                    if let Some(token) = curr.token_tree() {\n-                        res.push(token.cloned());\n-                    }\n-                    curr = curr.bump();\n-                }\n+            while curr != cursor {\n+                let Some(token) = curr.token_tree() else { break };\n+                res.push(token.cloned());\n+                curr = curr.bump();\n             }\n         }\n+\n         self.inner = self.inner.as_slice()[res.len()..].iter();\n         let res = match res.len() {\n             0 | 1 => res.pop(),"}, {"sha": "0615a3763dfa1c172c8be30ea9de0d00693c1b76", "filename": "crates/tt/src/buffer.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e59487de38b1be5b06b92eb4a9d30c0adb32d9db/crates%2Ftt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59487de38b1be5b06b92eb4a9d30c0adb32d9db/crates%2Ftt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Fbuffer.rs?ref=e59487de38b1be5b06b92eb4a9d30c0adb32d9db", "patch": "@@ -7,7 +7,12 @@ use crate::{Leaf, Subtree, TokenTree};\n struct EntryId(usize);\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-struct EntryPtr(EntryId, usize);\n+struct EntryPtr(\n+    /// The index of the buffer containing the entry.\n+    EntryId,\n+    /// The index of the entry within the buffer.\n+    usize,\n+);\n \n /// Internal type which is used instead of `TokenTree` to represent a token tree\n /// within a `TokenBuffer`.\n@@ -229,7 +234,11 @@ impl<'a, Span> Cursor<'a, Span> {\n             Some(&Entry::Subtree(_, _, entry_id)) => {\n                 Cursor::create(self.buffer, EntryPtr(entry_id, 0))\n             }\n-            _ => self.bump(),\n+            Some(Entry::End(exit)) => match exit {\n+                Some(exit) => Cursor::create(self.buffer, *exit),\n+                None => self,\n+            },\n+            _ => Cursor::create(self.buffer, EntryPtr(self.ptr.0, self.ptr.1 + 1)),\n         }\n     }\n "}]}