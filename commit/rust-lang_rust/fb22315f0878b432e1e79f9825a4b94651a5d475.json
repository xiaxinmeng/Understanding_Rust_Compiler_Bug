{"sha": "fb22315f0878b432e1e79f9825a4b94651a5d475", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMjIzMTVmMDg3OGI0MzJlMWU3OWY5ODI1YTRiOTQ2NTFhNWQ0NzU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-01T08:52:20Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-02T06:48:52Z"}, "message": "hir: remove NodeId from VariantData", "tree": {"sha": "f60269cd40021f742b8f40da3099e686134aded6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60269cd40021f742b8f40da3099e686134aded6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb22315f0878b432e1e79f9825a4b94651a5d475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb22315f0878b432e1e79f9825a4b94651a5d475", "html_url": "https://github.com/rust-lang/rust/commit/fb22315f0878b432e1e79f9825a4b94651a5d475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb22315f0878b432e1e79f9825a4b94651a5d475/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b8bc8c8cc84b653fa14fe2fe4c7284e70c413d", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b8bc8c8cc84b653fa14fe2fe4c7284e70c413d", "html_url": "https://github.com/rust-lang/rust/commit/50b8bc8c8cc84b653fa14fe2fe4c7284e70c413d"}], "stats": {"total": 70, "additions": 30, "deletions": 40}, "files": [{"sha": "27a7561e7658b50ca46a8ae94f3be8d23cb65cae", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=fb22315f0878b432e1e79f9825a4b94651a5d475", "patch": "@@ -2674,35 +2674,33 @@ impl<'a> LoweringContext<'a> {\n     fn lower_variant_data(&mut self, vdata: &VariantData) -> hir::VariantData {\n         match *vdata {\n             VariantData::Struct(ref fields, id) => {\n-                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(id);\n+                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n \n                 hir::VariantData::Struct(\n                     fields\n                         .iter()\n                         .enumerate()\n                         .map(|f| self.lower_struct_field(f))\n                         .collect(),\n-                    node_id,\n                     hir_id,\n                 )\n             },\n             VariantData::Tuple(ref fields, id) => {\n-                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(id);\n+                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n \n                 hir::VariantData::Tuple(\n                     fields\n                         .iter()\n                         .enumerate()\n                         .map(|f| self.lower_struct_field(f))\n                         .collect(),\n-                    node_id,\n                     hir_id,\n                 )\n             },\n             VariantData::Unit(id) => {\n-                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(id);\n+                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n \n-                hir::VariantData::Unit(node_id, hir_id)\n+                hir::VariantData::Unit(hir_id)\n             },\n         }\n     }"}, {"sha": "bec04b2e4050088c97d913020caa2fb3bf7eb3b8", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=fb22315f0878b432e1e79f9825a4b94651a5d475", "patch": "@@ -366,11 +366,11 @@ impl<'hir> Map<'hir> {\n                 }\n             }\n             Node::Variant(variant) => {\n-                let def_id = self.local_def_id(variant.node.data.id());\n+                let def_id = self.local_def_id_from_hir_id(variant.node.data.hir_id());\n                 Some(Def::Variant(def_id))\n             }\n             Node::StructCtor(variant) => {\n-                let def_id = self.local_def_id(variant.id());\n+                let def_id = self.local_def_id_from_hir_id(variant.hir_id());\n                 Some(Def::StructCtor(def_id, def::CtorKind::from_hir(variant)))\n             }\n             Node::AnonConst(_) |"}, {"sha": "b0f362ca30aee80df85f1fb14604dbb75640d739", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=fb22315f0878b432e1e79f9825a4b94651a5d475", "patch": "@@ -2156,9 +2156,9 @@ impl StructField {\n /// Id of the whole struct lives in `Item`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum VariantData {\n-    Struct(HirVec<StructField>, NodeId, HirId),\n-    Tuple(HirVec<StructField>, NodeId, HirId),\n-    Unit(NodeId, HirId),\n+    Struct(HirVec<StructField>, HirId),\n+    Tuple(HirVec<StructField>, HirId),\n+    Unit(HirId),\n }\n \n impl VariantData {\n@@ -2168,18 +2168,11 @@ impl VariantData {\n             _ => &[],\n         }\n     }\n-    pub fn id(&self) -> NodeId {\n-        match *self {\n-            VariantData::Struct(_, id, ..)\n-            | VariantData::Tuple(_, id, ..)\n-            | VariantData::Unit(id, ..) => id,\n-        }\n-    }\n     pub fn hir_id(&self) -> HirId {\n         match *self {\n-            VariantData::Struct(_, _, hir_id)\n-            | VariantData::Tuple(_, _, hir_id)\n-            | VariantData::Unit(_, hir_id) => hir_id,\n+            VariantData::Struct(_, hir_id)\n+            | VariantData::Tuple(_, hir_id)\n+            | VariantData::Unit(hir_id) => hir_id,\n         }\n     }\n     pub fn is_struct(&self) -> bool {"}, {"sha": "6a52b633c4f1fe4a5ded4e7a9571e5f54edb839c", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=fb22315f0878b432e1e79f9825a4b94651a5d475", "patch": "@@ -842,9 +842,9 @@ impl_stable_hash_for!(struct hir::StructField {\n });\n \n impl_stable_hash_for!(enum hir::VariantData {\n-    Struct(fields, id, hir_id),\n-    Tuple(fields, id, hir_id),\n-    Unit(id, hir_id)\n+    Struct(fields, hir_id),\n+    Tuple(fields, hir_id),\n+    Unit(hir_id)\n });\n \n impl<'a> HashStable<StableHashingContext<'a>> for hir::Item {"}, {"sha": "f79cfa3b773eb48e35b7c5f060672d683119e8c7", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=fb22315f0878b432e1e79f9825a4b94651a5d475", "patch": "@@ -1069,7 +1069,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 // for methods, write all the stuff get_trait_method\n                 // needs to know\n                 let struct_ctor = if !struct_def.is_struct() {\n-                    Some(tcx.hir().local_def_id(struct_def.id()).index)\n+                    Some(tcx.hir().local_def_id_from_hir_id(struct_def.hir_id()).index)\n                 } else {\n                     None\n                 };\n@@ -1772,7 +1772,7 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n \n                 // If the struct has a constructor, encode it.\n                 if !struct_def.is_struct() {\n-                    let ctor_def_id = self.tcx.hir().local_def_id(struct_def.id());\n+                    let ctor_def_id = self.tcx.hir().local_def_id_from_hir_id(struct_def.hir_id());\n                     self.record(ctor_def_id,\n                                 IsolatedEncoder::encode_struct_ctor,\n                                 (def_id, ctor_def_id));"}, {"sha": "61ead366a87c52121bd843b59e4b2c97dd0369ad", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=fb22315f0878b432e1e79f9825a4b94651a5d475", "patch": "@@ -229,7 +229,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      -> Mir<'tcx>\n {\n     let span = tcx.hir().span(ctor_id);\n-    if let hir::VariantData::Tuple(ref fields, ctor_id, _) = *v {\n+    if let hir::VariantData::Tuple(ref fields, ctor_id) = *v {\n         tcx.infer_ctxt().enter(|infcx| {\n             let mut mir = shim::build_adt_ctor(&infcx, ctor_id, fields, span);\n \n@@ -245,7 +245,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             };\n \n             mir_util::dump_mir(tcx, None, \"mir_map\", &0,\n-                               MirSource::item(tcx.hir().local_def_id(ctor_id)),\n+                               MirSource::item(tcx.hir().local_def_id_from_hir_id(ctor_id)),\n                                &mir, |_, _| Ok(()) );\n \n             mir"}, {"sha": "db8476f3be5f79afa61b66ffef97a352be1b2006", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=fb22315f0878b432e1e79f9825a4b94651a5d475", "patch": "@@ -10,7 +10,6 @@ use rustc::ty::query::Providers;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n use rustc_target::spec::abi::Abi;\n-use syntax::ast;\n use syntax_pos::Span;\n \n use std::fmt;\n@@ -855,14 +854,14 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n-                                      ctor_id: ast::NodeId,\n+                                      ctor_id: hir::HirId,\n                                       fields: &[hir::StructField],\n                                       span: Span)\n                                       -> Mir<'tcx>\n {\n     let tcx = infcx.tcx;\n     let gcx = tcx.global_tcx();\n-    let def_id = tcx.hir().local_def_id(ctor_id);\n+    let def_id = tcx.hir().local_def_id_from_hir_id(ctor_id);\n     let param_env = gcx.param_env(def_id);\n \n     // Normalize the sig."}, {"sha": "8f5fc6963771a87c1889172a10d9430b7c6d8229", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=fb22315f0878b432e1e79f9825a4b94651a5d475", "patch": "@@ -80,8 +80,8 @@ fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n                               _: &'tcx hir::Generics,\n                               _: hir::HirId,\n                               _: Span) {\n-            if let hir::VariantData::Tuple(_, node_id, _) = *v {\n-                self.set.insert(self.tcx.hir().local_def_id(node_id));\n+            if let hir::VariantData::Tuple(_, hir_id) = *v {\n+                self.set.insert(self.tcx.hir().local_def_id_from_hir_id(hir_id));\n             }\n             intravisit::walk_struct_def(self, v)\n         }"}, {"sha": "594e29ab9ddea5f80998e2f6dc8bd117aca85e02", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=fb22315f0878b432e1e79f9825a4b94651a5d475", "patch": "@@ -454,7 +454,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: hir::HirId) {\n             }\n \n             if !struct_def.is_struct() {\n-                convert_variant_ctor(tcx, struct_def.id());\n+                convert_variant_ctor(tcx, struct_def.hir_id());\n             }\n         }\n \n@@ -510,8 +510,8 @@ fn convert_impl_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_item_id: hir::H\n     }\n }\n \n-fn convert_variant_ctor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ctor_id: ast::NodeId) {\n-    let def_id = tcx.hir().local_def_id(ctor_id);\n+fn convert_variant_ctor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ctor_id: hir::HirId) {\n+    let def_id = tcx.hir().local_def_id_from_hir_id(ctor_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n     tcx.predicates_of(def_id);\n@@ -563,7 +563,7 @@ fn convert_enum_variant_types<'a, 'tcx>(\n \n         // Convert the ctor, if any. This also registers the variant as\n         // an item.\n-        convert_variant_ctor(tcx, variant.node.data.id());\n+        convert_variant_ctor(tcx, variant.node.data.hir_id());\n     }\n }\n \n@@ -634,7 +634,7 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n                 def.variants\n                     .iter()\n                     .map(|v| {\n-                        let did = tcx.hir().local_def_id(v.node.data.id());\n+                        let did = tcx.hir().local_def_id_from_hir_id(v.node.data.hir_id());\n                         let discr = if let Some(ref e) = v.node.disr_expr {\n                             distance_from_explicit = 0;\n                             ty::VariantDiscr::Explicit(tcx.hir().local_def_id_from_hir_id(e.hir_id))\n@@ -652,7 +652,7 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n         ItemKind::Struct(ref def, _) => {\n             // Use separate constructor id for unit/tuple structs and reuse did for braced structs.\n             let ctor_id = if !def.is_struct() {\n-                Some(tcx.hir().local_def_id(def.id()))\n+                Some(tcx.hir().local_def_id_from_hir_id(def.hir_id()))\n             } else {\n                 None\n             };"}, {"sha": "c64a73fa308e111758e948d5f083a7b270d90f8d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb22315f0878b432e1e79f9825a4b94651a5d475/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fb22315f0878b432e1e79f9825a4b94651a5d475", "patch": "@@ -3088,7 +3088,7 @@ impl Clean<Item> for doctree::Variant {\n             visibility: None,\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.def.id()),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.def.hir_id()),\n             inner: VariantItem(Variant {\n                 kind: self.def.clean(cx),\n             }),"}]}