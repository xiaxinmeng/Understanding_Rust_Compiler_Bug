{"sha": "2caf9bcb33b73ea952bfb3f2750d2a80622caaae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYWY5YmNiMzNiNzNlYTk1MmJmYjNmMjc1MGQyYTgwNjIyY2FhYWU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2021-01-07T18:59:24Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2021-01-07T19:40:42Z"}, "message": "bootstrap: fix x.py install not working with relative prefix", "tree": {"sha": "8e480c55459e4916d047fc572ac6beb16cb9a8ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e480c55459e4916d047fc572ac6beb16cb9a8ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2caf9bcb33b73ea952bfb3f2750d2a80622caaae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/3Y7sACgkQPgar6Auq\n8ZwD9g/+KoIvNsVo6p2yF/VWFB1Xc7zQRFDXFs/GJPFU48TxArnpybVEUzqISyYa\nBLvdqRb2yZJFJG0y7XUPJir/BcCryBgsVg+UMzQn9C14DtwfoXZK1j0Qjk9yL+5h\nMyu4I27exbEeupfQIx/8TqbfPIhao11BrSfgThoFWAjOuYUNxNzml58p22coNxTN\n/Lcg1ZI91tR6/U/qpCBFBe2O246ngOUyjLKEnyF+flwIDDLvXUKNyANe5P38+Az1\nImRwPA2ojwayHbGpqDkAWsKX0zmJ8Pz7Zo6YOncH8MLcrwCxrwmtQkfJ035J6U2L\nhPrAB3SQ0/+01PZh1f8uMc/iZeoKkU3rQj3ZAZXK6lyeuNA94rfELoIz7vOvsIwR\nn/GYAUvPAxv/ejj+W1xKVQOL/OM4v0Eh3GNva5tpR2vNRf+lRtLHqJoJ0oG4xcYc\n9JFU7c6uUKfadZ1iYIf1eA2L073HaEjbZzA5xGjumbxnMzPn8+XkG1x6ABQR2R0A\nOhMjWvXsJVfQEcGrF0NjPcNNTCrRCNzvzGgEgh5+3AlTg1GaWh1TMCwrqwegp1Ex\nMvyAPAmxcw5UxXX3evg2/ev5pjCuNbOjjr1wEBVV/zV7U6CetZHAXMx3lxumH4+h\nOzIEXXPN5q27m9ijKsQnYAjudwTU1AYf42W9UcLxVQf0QjdBnxU=\n=RJYi\n-----END PGP SIGNATURE-----", "payload": "tree 8e480c55459e4916d047fc572ac6beb16cb9a8ac\nparent 8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d\nauthor Pietro Albini <pietro@pietroalbini.org> 1610045964 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1610048442 +0100\n\nbootstrap: fix x.py install not working with relative prefix\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2caf9bcb33b73ea952bfb3f2750d2a80622caaae", "html_url": "https://github.com/rust-lang/rust/commit/2caf9bcb33b73ea952bfb3f2750d2a80622caaae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2caf9bcb33b73ea952bfb3f2750d2a80622caaae/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "html_url": "https://github.com/rust-lang/rust/commit/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d"}], "stats": {"total": 99, "additions": 44, "deletions": 55}, "files": [{"sha": "fd0acc3a919b0ead5ec4a53a634a67773ae25f4a", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 44, "deletions": 55, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/2caf9bcb33b73ea952bfb3f2750d2a80622caaae/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2caf9bcb33b73ea952bfb3f2750d2a80622caaae/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=2caf9bcb33b73ea952bfb3f2750d2a80622caaae", "patch": "@@ -5,7 +5,7 @@\n \n use std::env;\n use std::fs;\n-use std::path::{Component, Path, PathBuf};\n+use std::path::{Component, PathBuf};\n use std::process::Command;\n \n use build_helper::t;\n@@ -26,74 +26,63 @@ fn install_sh(\n ) {\n     builder.info(&format!(\"Install {} stage{} ({:?})\", package, stage, host));\n \n-    let prefix_default = PathBuf::from(\"/usr/local\");\n-    let sysconfdir_default = PathBuf::from(\"/etc\");\n-    let datadir_default = PathBuf::from(\"share\");\n-    let docdir_default = datadir_default.join(\"doc/rust\");\n-    let libdir_default = PathBuf::from(\"lib\");\n-    let mandir_default = datadir_default.join(\"man\");\n-    let prefix = builder.config.prefix.as_ref().unwrap_or(&prefix_default);\n-    let sysconfdir = builder.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n-    let datadir = builder.config.datadir.as_ref().unwrap_or(&datadir_default);\n-    let docdir = builder.config.docdir.as_ref().unwrap_or(&docdir_default);\n-    let bindir = &builder.config.bindir;\n-    let libdir = builder.config.libdir.as_ref().unwrap_or(&libdir_default);\n-    let mandir = builder.config.mandir.as_ref().unwrap_or(&mandir_default);\n-\n-    let sysconfdir = prefix.join(sysconfdir);\n-    let datadir = prefix.join(datadir);\n-    let docdir = prefix.join(docdir);\n-    let bindir = prefix.join(bindir);\n-    let libdir = prefix.join(libdir);\n-    let mandir = prefix.join(mandir);\n-\n-    let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n-\n-    let prefix = add_destdir(&prefix, &destdir);\n-    let sysconfdir = add_destdir(&sysconfdir, &destdir);\n-    let datadir = add_destdir(&datadir, &destdir);\n-    let docdir = add_destdir(&docdir, &destdir);\n-    let bindir = add_destdir(&bindir, &destdir);\n-    let libdir = add_destdir(&libdir, &destdir);\n-    let mandir = add_destdir(&mandir, &destdir);\n-\n-    let prefix = {\n-        fs::create_dir_all(&prefix)\n-            .unwrap_or_else(|err| panic!(\"could not create {}: {}\", prefix.display(), err));\n-        fs::canonicalize(&prefix)\n-            .unwrap_or_else(|err| panic!(\"could not canonicalize {}: {}\", prefix.display(), err))\n-    };\n+    let prefix = default_path(&builder.config.prefix, \"/usr/local\");\n+    let sysconfdir = prefix.join(default_path(&builder.config.sysconfdir, \"/etc\"));\n+    let datadir = prefix.join(default_path(&builder.config.datadir, \"share\"));\n+    let docdir = prefix.join(default_path(&builder.config.docdir, \"share/doc\"));\n+    let mandir = prefix.join(default_path(&builder.config.mandir, \"share/man\"));\n+    let libdir = prefix.join(default_path(&builder.config.libdir, \"lib\"));\n+    let bindir = prefix.join(&builder.config.bindir); // Default in config.rs\n \n     let empty_dir = builder.out.join(\"tmp/empty_dir\");\n-\n     t!(fs::create_dir_all(&empty_dir));\n \n     let mut cmd = Command::new(\"sh\");\n     cmd.current_dir(&empty_dir)\n         .arg(sanitize_sh(&tarball.decompressed_output().join(\"install.sh\")))\n-        .arg(format!(\"--prefix={}\", sanitize_sh(&prefix)))\n-        .arg(format!(\"--sysconfdir={}\", sanitize_sh(&sysconfdir)))\n-        .arg(format!(\"--datadir={}\", sanitize_sh(&datadir)))\n-        .arg(format!(\"--docdir={}\", sanitize_sh(&docdir)))\n-        .arg(format!(\"--bindir={}\", sanitize_sh(&bindir)))\n-        .arg(format!(\"--libdir={}\", sanitize_sh(&libdir)))\n-        .arg(format!(\"--mandir={}\", sanitize_sh(&mandir)))\n+        .arg(format!(\"--prefix={}\", prepare_dir(prefix)))\n+        .arg(format!(\"--sysconfdir={}\", prepare_dir(sysconfdir)))\n+        .arg(format!(\"--datadir={}\", prepare_dir(datadir)))\n+        .arg(format!(\"--docdir={}\", prepare_dir(docdir)))\n+        .arg(format!(\"--bindir={}\", prepare_dir(bindir)))\n+        .arg(format!(\"--libdir={}\", prepare_dir(libdir)))\n+        .arg(format!(\"--mandir={}\", prepare_dir(mandir)))\n         .arg(\"--disable-ldconfig\");\n     builder.run(&mut cmd);\n     t!(fs::remove_dir_all(&empty_dir));\n }\n \n-fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {\n-    let mut ret = match *destdir {\n-        Some(ref dest) => dest.clone(),\n-        None => return path.to_path_buf(),\n-    };\n-    for part in path.components() {\n-        if let Component::Normal(s) = part {\n-            ret.push(s)\n+fn default_path(config: &Option<PathBuf>, default: &str) -> PathBuf {\n+    PathBuf::from(config.as_ref().cloned().unwrap_or_else(|| PathBuf::from(default)))\n+}\n+\n+fn prepare_dir(mut path: PathBuf) -> String {\n+    // The DESTDIR environment variable is a standard way to install software in a subdirectory\n+    // while keeping the original directory structure, even if the prefix or other directories\n+    // contain absolute paths.\n+    //\n+    // More information on the environment variable is available here:\n+    // https://www.gnu.org/prep/standards/html_node/DESTDIR.html\n+    if let Some(destdir) = env::var_os(\"DESTDIR\").map(PathBuf::from) {\n+        let without_destdir = path.clone();\n+        path = destdir;\n+        // Custom .join() which ignores disk roots.\n+        for part in without_destdir.components() {\n+            if let Component::Normal(s) = part {\n+                path.push(s)\n+            }\n         }\n     }\n-    ret\n+\n+    // The installation command is not executed from the current directory, but from a temporary\n+    // directory. To prevent relative paths from breaking this converts relative paths to absolute\n+    // paths. std::fs::canonicalize is not used as that requires the path to actually be present.\n+    if path.is_relative() {\n+        path = std::env::current_dir().expect(\"failed to get the current directory\").join(path);\n+        assert!(path.is_absolute(), \"could not make the path relative\");\n+    }\n+\n+    sanitize_sh(&path)\n }\n \n macro_rules! install {"}]}