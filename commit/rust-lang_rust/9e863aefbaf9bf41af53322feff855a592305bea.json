{"sha": "9e863aefbaf9bf41af53322feff855a592305bea", "node_id": "C_kwDOAAsO6NoAKDllODYzYWVmYmFmOWJmNDFhZjUzMzIyZmVmZjg1NWE1OTIzMDViZWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-01T15:10:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-01T15:10:22Z"}, "message": "Rollup merge of #110093 - beetrees:set-times-32-bit, r=joshtriplett\n\nAdd 64-bit `time_t` support on 32-bit glibc Linux to `set_times`\n\nAdd support to `set_times` for 64-bit `time_t` on 32-bit glibc Linux platforms which have a 32-bit `time_t`. Split from #109773.\n\nTracking issue: #98245", "tree": {"sha": "612aa345f57cb15cdf88b65933f3d841aa8d41bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/612aa345f57cb15cdf88b65933f3d841aa8d41bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e863aefbaf9bf41af53322feff855a592305bea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkT9ZeCRBK7hj4Ov3rIwAAmgEIAJZwXcpLpNg6Ii54JlOTRjHd\n5DpNlnSA9/i4dD6CsdIqyp59fYeJK6vCeQok8uKnblfkuJHJdMIRk9sUu6AMobxz\nueKbCeM23qAN8bRdkmMhWmZx44fiRyJ55yXngr/FRw35wp1b1gWVHIblKkOhrAZv\nnaAARB+azLohiknFZJWCcIMhwJzR0AYWueH1bTaYPv9BJlG9DODjVRABnFktPHwJ\nE2AMH8wMnIhqWN6Ovjd75XuCFYnFhVFuDIf4XpxcY4GgVYvE53DlYYD6YoK3CPSU\n0pjcZdMuyrliYor5XqkHJdvrxmYkIzvxifriVo5uVGPAKynII56jKrOVEPnZJpc=\n=SN9u\n-----END PGP SIGNATURE-----\n", "payload": "tree 612aa345f57cb15cdf88b65933f3d841aa8d41bc\nparent 4da8a7a370bfca894c435d48879fb38f4719b485\nparent d5304737448b82e0535fa83e6d661f8740d8cdd3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682953822 +0200\ncommitter GitHub <noreply@github.com> 1682953822 +0200\n\nRollup merge of #110093 - beetrees:set-times-32-bit, r=joshtriplett\n\nAdd 64-bit `time_t` support on 32-bit glibc Linux to `set_times`\n\nAdd support to `set_times` for 64-bit `time_t` on 32-bit glibc Linux platforms which have a 32-bit `time_t`. Split from #109773.\n\nTracking issue: #98245\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e863aefbaf9bf41af53322feff855a592305bea", "html_url": "https://github.com/rust-lang/rust/commit/9e863aefbaf9bf41af53322feff855a592305bea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e863aefbaf9bf41af53322feff855a592305bea/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4da8a7a370bfca894c435d48879fb38f4719b485", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da8a7a370bfca894c435d48879fb38f4719b485", "html_url": "https://github.com/rust-lang/rust/commit/4da8a7a370bfca894c435d48879fb38f4719b485"}, {"sha": "d5304737448b82e0535fa83e6d661f8740d8cdd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5304737448b82e0535fa83e6d661f8740d8cdd3", "html_url": "https://github.com/rust-lang/rust/commit/d5304737448b82e0535fa83e6d661f8740d8cdd3"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "2a5a14209a1e8d986996884cb1d0244eee9bfb20", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e863aefbaf9bf41af53322feff855a592305bea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e863aefbaf9bf41af53322feff855a592305bea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=9e863aefbaf9bf41af53322feff855a592305bea", "patch": "@@ -1193,8 +1193,6 @@ impl File {\n                 None => Ok(libc::timespec { tv_sec: 0, tv_nsec: libc::UTIME_OMIT as _ }),\n             }\n         };\n-        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n-        let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n         cfg_if::cfg_if! {\n             if #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))] {\n                 // Redox doesn't appear to support `UTIME_OMIT`.\n@@ -1206,6 +1204,7 @@ impl File {\n                     \"setting file times not supported\",\n                 ))\n             } else if #[cfg(any(target_os = \"android\", target_os = \"macos\"))] {\n+                let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n                 // futimens requires macOS 10.13, and Android API level 19\n                 cvt(unsafe {\n                     weak!(fn futimens(c_int, *const libc::timespec) -> c_int);\n@@ -1232,6 +1231,22 @@ impl File {\n                 })?;\n                 Ok(())\n             } else {\n+                #[cfg(all(target_os = \"linux\", target_env = \"gnu\", target_pointer_width = \"32\", not(target_arch = \"riscv32\")))]\n+                {\n+                    use crate::sys::{time::__timespec64, weak::weak};\n+\n+                    // Added in glibc 2.34\n+                    weak!(fn __futimens64(libc::c_int, *const __timespec64) -> libc::c_int);\n+\n+                    if let Some(futimens64) = __futimens64.get() {\n+                        let to_timespec = |time: Option<SystemTime>| time.map(|time| time.t.to_timespec64())\n+                            .unwrap_or(__timespec64::new(0, libc::UTIME_OMIT as _));\n+                        let times = [to_timespec(times.accessed), to_timespec(times.modified)];\n+                        cvt(unsafe { futimens64(self.as_raw_fd(), times.as_ptr()) })?;\n+                        return Ok(());\n+                    }\n+                }\n+                let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n                 cvt(unsafe { libc::futimens(self.as_raw_fd(), times.as_ptr()) })?;\n                 Ok(())\n             }"}, {"sha": "a61d926ca8b3a4167eaeb54351ab0b874ce69e9e", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e863aefbaf9bf41af53322feff855a592305bea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e863aefbaf9bf41af53322feff855a592305bea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=9e863aefbaf9bf41af53322feff855a592305bea", "patch": "@@ -166,6 +166,16 @@ impl Timespec {\n         }\n         self.to_timespec()\n     }\n+\n+    #[cfg(all(\n+        target_os = \"linux\",\n+        target_env = \"gnu\",\n+        target_pointer_width = \"32\",\n+        not(target_arch = \"riscv32\")\n+    ))]\n+    pub fn to_timespec64(&self) -> __timespec64 {\n+        __timespec64::new(self.tv_sec, self.tv_nsec.0 as _)\n+    }\n }\n \n impl From<libc::timespec> for Timespec {\n@@ -190,6 +200,18 @@ pub(in crate::sys::unix) struct __timespec64 {\n     _padding: i32,\n }\n \n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    target_pointer_width = \"32\",\n+    not(target_arch = \"riscv32\")\n+))]\n+impl __timespec64 {\n+    pub(in crate::sys::unix) fn new(tv_sec: i64, tv_nsec: i32) -> Self {\n+        Self { tv_sec, tv_nsec, _padding: 0 }\n+    }\n+}\n+\n #[cfg(all(\n     target_os = \"linux\",\n     target_env = \"gnu\","}]}