{"sha": "27b65ec91d7c84908ba680da754e5af89ef57c41", "node_id": "C_kwDOAAsO6NoAKDI3YjY1ZWM5MWQ3Yzg0OTA4YmE2ODBkYTc1NGU1YWY4OWVmNTdjNDE", "commit": {"author": {"name": "TopGunSnake", "email": "tjwebster@crimson.ua.edu", "date": "2022-07-19T00:55:33Z"}, "committer": {"name": "TopGunSnake", "email": "tjwebster@crimson.ua.edu", "date": "2022-07-19T00:55:33Z"}, "message": "Add test case and token finder to address 12790", "tree": {"sha": "57ab4de224652ce972fc763b8184bab1d13bcfbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57ab4de224652ce972fc763b8184bab1d13bcfbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27b65ec91d7c84908ba680da754e5af89ef57c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27b65ec91d7c84908ba680da754e5af89ef57c41", "html_url": "https://github.com/rust-lang/rust/commit/27b65ec91d7c84908ba680da754e5af89ef57c41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27b65ec91d7c84908ba680da754e5af89ef57c41/comments", "author": {"login": "TopGunSnake", "id": 12959792, "node_id": "MDQ6VXNlcjEyOTU5Nzky", "avatar_url": "https://avatars.githubusercontent.com/u/12959792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TopGunSnake", "html_url": "https://github.com/TopGunSnake", "followers_url": "https://api.github.com/users/TopGunSnake/followers", "following_url": "https://api.github.com/users/TopGunSnake/following{/other_user}", "gists_url": "https://api.github.com/users/TopGunSnake/gists{/gist_id}", "starred_url": "https://api.github.com/users/TopGunSnake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TopGunSnake/subscriptions", "organizations_url": "https://api.github.com/users/TopGunSnake/orgs", "repos_url": "https://api.github.com/users/TopGunSnake/repos", "events_url": "https://api.github.com/users/TopGunSnake/events{/privacy}", "received_events_url": "https://api.github.com/users/TopGunSnake/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TopGunSnake", "id": 12959792, "node_id": "MDQ6VXNlcjEyOTU5Nzky", "avatar_url": "https://avatars.githubusercontent.com/u/12959792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TopGunSnake", "html_url": "https://github.com/TopGunSnake", "followers_url": "https://api.github.com/users/TopGunSnake/followers", "following_url": "https://api.github.com/users/TopGunSnake/following{/other_user}", "gists_url": "https://api.github.com/users/TopGunSnake/gists{/gist_id}", "starred_url": "https://api.github.com/users/TopGunSnake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TopGunSnake/subscriptions", "organizations_url": "https://api.github.com/users/TopGunSnake/orgs", "repos_url": "https://api.github.com/users/TopGunSnake/repos", "events_url": "https://api.github.com/users/TopGunSnake/events{/privacy}", "received_events_url": "https://api.github.com/users/TopGunSnake/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567a5e9ef7c753e03d528cbc19110db99e8d6878", "url": "https://api.github.com/repos/rust-lang/rust/commits/567a5e9ef7c753e03d528cbc19110db99e8d6878", "html_url": "https://github.com/rust-lang/rust/commit/567a5e9ef7c753e03d528cbc19110db99e8d6878"}], "stats": {"total": 146, "additions": 144, "deletions": 2}, "files": [{"sha": "b54090b875f11c1bafbf77d0807c68ce67ab24bf", "filename": "crates/ide-assists/src/handlers/extract_module.rs", "status": "modified", "additions": 144, "deletions": 2, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/27b65ec91d7c84908ba680da754e5af89ef57c41/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b65ec91d7c84908ba680da754e5af89ef57c41/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=27b65ec91d7c84908ba680da754e5af89ef57c41", "patch": "@@ -19,7 +19,7 @@ use syntax::{\n         make, HasName, HasVisibility,\n     },\n     match_ast, ted, AstNode, SourceFile,\n-    SyntaxKind::WHITESPACE,\n+    SyntaxKind::{self, WHITESPACE},\n     SyntaxNode, TextRange,\n };\n \n@@ -380,7 +380,24 @@ impl Module {\n         }\n \n         for (vis, syntax) in replacements {\n-            add_change_vis(vis, syntax.first_child_or_token());\n+            let item = syntax.children_with_tokens().find(|node_or_token| {\n+                match node_or_token.kind() {\n+                    // We're looking for the start of functions, impls, structs, traits, and other documentable/attribute\n+                    // macroable items that would have pub(crate) in front of it\n+                    SyntaxKind::FN_KW\n+                    | SyntaxKind::IMPL_KW\n+                    | SyntaxKind::STRUCT_KW\n+                    | SyntaxKind::TRAIT_KW\n+                    | SyntaxKind::TYPE_KW\n+                    | SyntaxKind::MOD_KW => true,\n+                    // If we didn't find a keyword, we want to cover the record fields\n+                    SyntaxKind::NAME => true,\n+                    // Otherwise, the token shouldn't have pub(crate) before it\n+                    _ => false,\n+                }\n+            });\n+\n+            add_change_vis(vis, item);\n         }\n     }\n \n@@ -1581,4 +1598,129 @@ mod modname {\n         \",\n         )\n     }\n+\n+    #[test]\n+    fn test_issue_12790() {\n+        check_assist(\n+            extract_module,\n+            r\"\n+            $0/// A documented function\n+            fn documented_fn() {}\n+            \n+            // A commented function with a #[] attribute macro\n+            #[cfg(test)]\n+            fn attribute_fn() {}\n+            \n+            // A normally commented function\n+            fn normal_fn() {}\n+            \n+            /// A documented Struct\n+            struct DocumentedStruct {\n+                // Normal field\n+                x: i32,\n+            \n+                /// Documented field\n+                y: i32,\n+            \n+                // Macroed field\n+                #[cfg(test)]\n+                z: i32,\n+            }\n+            \n+            // A macroed Struct\n+            #[cfg(test)]\n+            struct MacroedStruct {\n+                // Normal field\n+                x: i32,\n+            \n+                /// Documented field\n+                y: i32,\n+            \n+                // Macroed field\n+                #[cfg(test)]\n+                z: i32,\n+            }\n+            \n+            // A normal Struct\n+            struct NormalStruct {\n+                // Normal field\n+                x: i32,\n+            \n+                /// Documented field\n+                y: i32,\n+            \n+                // Macroed field\n+                #[cfg(test)]\n+                z: i32,\n+            }\n+\n+            /// A documented type\n+            type DocumentedType = i32;\n+\n+            // A macroed type\n+            #[cfg(test)]\n+            type MacroedType = i32;$0\n+        \",\n+            r\"\n+            mod modname {\n+                /// A documented function\n+                pub(crate) fn documented_fn() {}\n+            \n+                // A commented function with a #[] attribute macro\n+                #[cfg(test)]\n+                pub(crate) fn attribute_fn() {}\n+            \n+                // A normally commented function\n+                pub(crate) fn normal_fn() {}\n+            \n+                /// A documented Struct\n+                pub(crate) struct DocumentedStruct {\n+                    // Normal field\n+                    pub(crate) x: i32,\n+            \n+                    /// Documented field\n+                    pub(crate) y: i32,\n+            \n+                    // Macroed field\n+                    #[cfg(test)]\n+                    pub(crate) z: i32,\n+                }\n+            \n+                // A macroed Struct\n+                #[cfg(test)]\n+                pub(crate) struct MacroedStruct {\n+                    // Normal field\n+                    pub(crate) x: i32,\n+            \n+                    /// Documented field\n+                    pub(crate) y: i32,\n+            \n+                    // Macroed field\n+                    #[cfg(test)]\n+                    pub(crate) z: i32,\n+                }\n+            \n+                // A normal Struct\n+                pub(crate) struct NormalStruct {\n+                    // Normal field\n+                    pub(crate) x: i32,\n+            \n+                    /// Documented field\n+                    pub(crate) y: i32,\n+            \n+                    // Macroed field\n+                    #[cfg(test)]\n+                    pub(crate) z: i32,\n+                }\n+\n+                /// A documented type\n+                pub(crate) type DocumentedType = i32;\n+\n+                // A macroed type\n+                #[cfg(test)]\n+                pub(crate) type MacroedType = i32;\n+            }\n+        \",\n+        )\n+    }\n }"}]}