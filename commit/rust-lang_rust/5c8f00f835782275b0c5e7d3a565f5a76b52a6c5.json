{"sha": "5c8f00f835782275b0c5e7d3a565f5a76b52a6c5", "node_id": "C_kwDOAAsO6NoAKDVjOGYwMGY4MzU3ODIyNzViMGM1ZTdkM2E1NjVmNWE3NmI1MmE2YzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T17:58:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T17:58:41Z"}, "message": "Auto merge of #13805 - ntBre:master, r=jonas-schievink\n\nComplete enum variants without parens when snippets are disabled\n\nThis handles the portion of #13767 that bothered me, but I can try to work on the other parts we discussed if needed.", "tree": {"sha": "5ced2d168f26258b5f0b8d15fb1cd31a6d60967f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ced2d168f26258b5f0b8d15fb1cd31a6d60967f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5", "html_url": "https://github.com/rust-lang/rust/commit/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dfb9df4c527a5226754add94a65b52a9940cd80", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dfb9df4c527a5226754add94a65b52a9940cd80", "html_url": "https://github.com/rust-lang/rust/commit/9dfb9df4c527a5226754add94a65b52a9940cd80"}, {"sha": "694ae77bf6becaa085bb6a0ce0eb1fe29082721c", "url": "https://api.github.com/repos/rust-lang/rust/commits/694ae77bf6becaa085bb6a0ce0eb1fe29082721c", "html_url": "https://github.com/rust-lang/rust/commit/694ae77bf6becaa085bb6a0ce0eb1fe29082721c"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "6743ec897f00b5ae444c4b6f6d272ee2ea261f66", "filename": "crates/ide-completion/src/completions/record.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=5c8f00f835782275b0c5e7d3a565f5a76b52a6c5", "patch": "@@ -124,7 +124,12 @@ fn complete_fields(\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::check_edit;\n+    use ide_db::SnippetCap;\n+\n+    use crate::{\n+        tests::{check_edit, check_edit_with_config, TEST_CONFIG},\n+        CompletionConfig,\n+    };\n \n     #[test]\n     fn literal_struct_completion_edit() {\n@@ -151,6 +156,37 @@ fn baz() {\n         )\n     }\n \n+    #[test]\n+    fn enum_variant_no_snippets() {\n+        let conf = CompletionConfig { snippet_cap: SnippetCap::new(false), ..TEST_CONFIG };\n+        check_edit_with_config(\n+            conf,\n+            \"Variant()\",\n+            r#\"\n+enum Enum {\n+    Variant(usize),\n+}\n+\n+impl Enum {\n+    fn new(u: usize) -> Self {\n+        Self::Va$0\n+    }\n+}\n+\"#,\n+            r#\"\n+enum Enum {\n+    Variant(usize),\n+}\n+\n+impl Enum {\n+    fn new(u: usize) -> Self {\n+        Self::Variant\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn literal_struct_impl_self_completion() {\n         check_edit("}, {"sha": "3aeb69258ee7c9d520f2151a43513b863670ca12", "filename": "crates/ide-completion/src/render/literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs?ref=5c8f00f835782275b0c5e7d3a565f5a76b52a6c5", "patch": "@@ -96,7 +96,7 @@ fn render(\n     if !should_add_parens {\n         kind = StructKind::Unit;\n     }\n-    let label = format_literal_label(&qualified_name, kind);\n+    let label = format_literal_label(&qualified_name, kind, snippet_cap);\n     let lookup = if qualified {\n         format_literal_lookup(&short_qualified_name.to_string(), kind)\n     } else {"}, {"sha": "21b4bc2174bee1886af6aa0de75d2a3e9c170068", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=5c8f00f835782275b0c5e7d3a565f5a76b52a6c5", "patch": "@@ -33,7 +33,7 @@ pub(crate) fn render_struct_pat(\n     let name = local_name.unwrap_or_else(|| strukt.name(ctx.db()));\n     let (name, escaped_name) = (name.unescaped().to_smol_str(), name.to_smol_str());\n     let kind = strukt.kind(ctx.db());\n-    let label = format_literal_label(name.as_str(), kind);\n+    let label = format_literal_label(name.as_str(), kind, ctx.snippet_cap());\n     let lookup = format_literal_lookup(name.as_str(), kind);\n     let pat = render_pat(&ctx, pattern_ctx, &escaped_name, kind, &visible_fields, fields_omitted)?;\n \n@@ -67,7 +67,7 @@ pub(crate) fn render_variant_pat(\n         }\n         _ => {\n             let kind = variant.kind(ctx.db());\n-            let label = format_literal_label(name.as_str(), kind);\n+            let label = format_literal_label(name.as_str(), kind, ctx.snippet_cap());\n             let lookup = format_literal_lookup(name.as_str(), kind);\n             let pat = render_pat(\n                 &ctx,"}, {"sha": "2d55a1bade3d0c42dcc119c9ff84adf0a7ba2ff6", "filename": "crates/ide-completion/src/render/union_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs?ref=5c8f00f835782275b0c5e7d3a565f5a76b52a6c5", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn render_union_literal(\n         Some(p) => (p.unescaped().to_string(), p.to_string()),\n         None => (name.unescaped().to_string(), name.to_string()),\n     };\n-    let label = format_literal_label(&name.to_smol_str(), StructKind::Record);\n+    let label = format_literal_label(&name.to_smol_str(), StructKind::Record, ctx.snippet_cap());\n     let lookup = format_literal_lookup(&name.to_smol_str(), StructKind::Record);\n     let mut item = CompletionItem::new(\n         CompletionItemKind::SymbolKind(SymbolKind::Union),"}, {"sha": "d69906a7065735d50b1bf32d6911272f6418d84b", "filename": "crates/ide-completion/src/render/variant.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8f00f835782275b0c5e7d3a565f5a76b52a6c5/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs?ref=5c8f00f835782275b0c5e7d3a565f5a76b52a6c5", "patch": "@@ -48,6 +48,9 @@ pub(crate) fn render_tuple_lit(\n     fields: &[hir::Field],\n     path: &str,\n ) -> RenderedLiteral {\n+    if snippet_cap.is_none() {\n+        return RenderedLiteral { literal: format!(\"{}\", path), detail: format!(\"{}\", path) };\n+    }\n     let completions = fields.iter().enumerate().format_with(\", \", |(idx, _), f| {\n         if snippet_cap.is_some() {\n             f(&format_args!(\"${{{}:()}}\", idx + 1))\n@@ -87,7 +90,14 @@ pub(crate) fn visible_fields(\n }\n \n /// Format a struct, etc. literal option for display in the completions menu.\n-pub(crate) fn format_literal_label(name: &str, kind: StructKind) -> SmolStr {\n+pub(crate) fn format_literal_label(\n+    name: &str,\n+    kind: StructKind,\n+    snippet_cap: Option<SnippetCap>,\n+) -> SmolStr {\n+    if snippet_cap.is_none() {\n+        return name.into();\n+    }\n     match kind {\n         StructKind::Tuple => SmolStr::from_iter([name, \"(\u2026)\"]),\n         StructKind::Record => SmolStr::from_iter([name, \" {\u2026}\"]),"}]}