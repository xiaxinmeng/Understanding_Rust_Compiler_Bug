{"sha": "439b13f071a4a884ea8645670df83162ffcf129f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOWIxM2YwNzFhNGE4ODRlYTg2NDU2NzBkZjgzMTYyZmZjZjEyOWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-29T21:31:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-29T21:31:41Z"}, "message": "auto merge of #7449 : yichoi/rust/std_test, r=cmr\n\nadjust run.rs test for android to pass check std", "tree": {"sha": "28af23f340ecce41131dcbaf16b15a2dc23d3df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28af23f340ecce41131dcbaf16b15a2dc23d3df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/439b13f071a4a884ea8645670df83162ffcf129f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/439b13f071a4a884ea8645670df83162ffcf129f", "html_url": "https://github.com/rust-lang/rust/commit/439b13f071a4a884ea8645670df83162ffcf129f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/439b13f071a4a884ea8645670df83162ffcf129f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86df3a65cc239fd69b9a8d628808498cdb07e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86df3a65cc239fd69b9a8d628808498cdb07e0d", "html_url": "https://github.com/rust-lang/rust/commit/c86df3a65cc239fd69b9a8d628808498cdb07e0d"}, {"sha": "9b95b6d210a6491396311c83f0d12dfb4962d678", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b95b6d210a6491396311c83f0d12dfb4962d678", "html_url": "https://github.com/rust-lang/rust/commit/9b95b6d210a6491396311c83f0d12dfb4962d678"}], "stats": {"total": 152, "additions": 149, "deletions": 3}, "files": [{"sha": "9e5def253c7ed1770b221fa02fa6e73faf4e1760", "filename": "src/libstd/run.rs", "status": "modified", "additions": 149, "deletions": 3, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/439b13f071a4a884ea8645670df83162ffcf129f/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439b13f071a4a884ea8645670df83162ffcf129f/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=439b13f071a4a884ea8645670df83162ffcf129f", "patch": "@@ -943,12 +943,20 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg(not(target_os=\"android\"))]\n     fn test_process_status() {\n         assert_eq!(run::process_status(\"false\", []), 1);\n         assert_eq!(run::process_status(\"true\", []), 0);\n     }\n+    #[test]\n+    #[cfg(target_os=\"android\")]\n+    fn test_process_status() {\n+        assert_eq!(run::process_status(\"/system/bin/sh\", [~\"-c\",~\"false\"]), 1);\n+        assert_eq!(run::process_status(\"/system/bin/sh\", [~\"-c\",~\"true\"]), 0);\n+    }\n \n     #[test]\n+    #[cfg(not(target_os=\"android\"))]\n     fn test_process_output_output() {\n \n         let run::ProcessOutput {status, output, error}\n@@ -962,8 +970,24 @@ mod tests {\n             assert_eq!(error, ~[]);\n         }\n     }\n+    #[test]\n+    #[cfg(target_os=\"android\")]\n+    fn test_process_output_output() {\n+\n+        let run::ProcessOutput {status, output, error}\n+             = run::process_output(\"/system/bin/sh\", [~\"-c\",~\"echo hello\"]);\n+        let output_str = str::from_bytes(output);\n+\n+        assert_eq!(status, 0);\n+        assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n+        // FIXME #7224\n+        if !running_on_valgrind() {\n+            assert_eq!(error, ~[]);\n+        }\n+    }\n \n     #[test]\n+    #[cfg(not(target_os=\"android\"))]\n     fn test_process_output_error() {\n \n         let run::ProcessOutput {status, output, error}\n@@ -973,6 +997,17 @@ mod tests {\n         assert_eq!(output, ~[]);\n         assert!(!error.is_empty());\n     }\n+    #[test]\n+    #[cfg(target_os=\"android\")]\n+    fn test_process_output_error() {\n+\n+        let run::ProcessOutput {status, output, error}\n+             = run::process_output(\"/system/bin/mkdir\", [~\".\"]);\n+\n+        assert_eq!(status, 255);\n+        assert_eq!(output, ~[]);\n+        assert!(!error.is_empty());\n+    }\n \n     #[test]\n     fn test_pipes() {\n@@ -1023,19 +1058,37 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg(not(target_os=\"android\"))]\n     fn test_finish_once() {\n         let mut prog = run::Process::new(\"false\", [], run::ProcessOptions::new());\n         assert_eq!(prog.finish(), 1);\n     }\n+    #[test]\n+    #[cfg(target_os=\"android\")]\n+    fn test_finish_once() {\n+        let mut prog = run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"false\"],\n+                                         run::ProcessOptions::new());\n+        assert_eq!(prog.finish(), 1);\n+    }\n \n     #[test]\n+    #[cfg(not(target_os=\"android\"))]\n     fn test_finish_twice() {\n         let mut prog = run::Process::new(\"false\", [], run::ProcessOptions::new());\n         assert_eq!(prog.finish(), 1);\n         assert_eq!(prog.finish(), 1);\n     }\n+    #[test]\n+    #[cfg(target_os=\"android\")]\n+    fn test_finish_twice() {\n+        let mut prog = run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"false\"],\n+                                         run::ProcessOptions::new());\n+        assert_eq!(prog.finish(), 1);\n+        assert_eq!(prog.finish(), 1);\n+    }\n \n     #[test]\n+    #[cfg(not(target_os=\"android\"))]\n     fn test_finish_with_output_once() {\n \n         let mut prog = run::Process::new(\"echo\", [~\"hello\"], run::ProcessOptions::new());\n@@ -1050,8 +1103,26 @@ mod tests {\n             assert_eq!(error, ~[]);\n         }\n     }\n+    #[test]\n+    #[cfg(target_os=\"android\")]\n+    fn test_finish_with_output_once() {\n+\n+        let mut prog = run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"echo hello\"],\n+                                         run::ProcessOptions::new());\n+        let run::ProcessOutput {status, output, error}\n+            = prog.finish_with_output();\n+        let output_str = str::from_bytes(output);\n+\n+        assert_eq!(status, 0);\n+        assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n+        // FIXME #7224\n+        if !running_on_valgrind() {\n+            assert_eq!(error, ~[]);\n+        }\n+    }\n \n     #[test]\n+    #[cfg(not(target_os=\"android\"))]\n     fn test_finish_with_output_twice() {\n \n         let mut prog = run::Process::new(\"echo\", [~\"hello\"], run::ProcessOptions::new());\n@@ -1077,10 +1148,38 @@ mod tests {\n             assert_eq!(error, ~[]);\n         }\n     }\n+    #[test]\n+    #[cfg(target_os=\"android\")]\n+    fn test_finish_with_output_twice() {\n+\n+        let mut prog = run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"echo hello\"],\n+                                         run::ProcessOptions::new());\n+        let run::ProcessOutput {status, output, error}\n+            = prog.finish_with_output();\n+\n+        let output_str = str::from_bytes(output);\n+\n+        assert_eq!(status, 0);\n+        assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n+        // FIXME #7224\n+        if !running_on_valgrind() {\n+            assert_eq!(error, ~[]);\n+        }\n+\n+        let run::ProcessOutput {status, output, error}\n+            = prog.finish_with_output();\n+\n+        assert_eq!(status, 0);\n+        assert_eq!(output, ~[]);\n+        // FIXME #7224\n+        if !running_on_valgrind() {\n+            assert_eq!(error, ~[]);\n+        }\n+    }\n \n     #[test]\n     #[should_fail]\n-    #[cfg(not(windows))]\n+    #[cfg(not(windows),not(target_os=\"android\"))]\n     fn test_finish_with_output_redirected() {\n         let mut prog = run::Process::new(\"echo\", [~\"hello\"], run::ProcessOptions {\n             env: None,\n@@ -1092,14 +1191,36 @@ mod tests {\n         // this should fail because it is not valid to read the output when it was redirected\n         prog.finish_with_output();\n     }\n+    #[test]\n+    #[should_fail]\n+    #[cfg(not(windows),target_os=\"android\")]\n+    fn test_finish_with_output_redirected() {\n+        let mut prog = run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"echo hello\"],\n+                                         run::ProcessOptions {\n+            env: None,\n+            dir: None,\n+            in_fd: Some(0),\n+            out_fd: Some(1),\n+            err_fd: Some(2)\n+        });\n+        // this should fail because it is not valid to read the output when it was redirected\n+        prog.finish_with_output();\n+    }\n \n-    #[cfg(unix)]\n+    #[cfg(unix,not(target_os=\"android\"))]\n     fn run_pwd(dir: Option<&Path>) -> run::Process {\n         run::Process::new(\"pwd\", [], run::ProcessOptions {\n             dir: dir,\n             .. run::ProcessOptions::new()\n         })\n     }\n+    #[cfg(unix,target_os=\"android\")]\n+    fn run_pwd(dir: Option<&Path>) -> run::Process {\n+        run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"pwd\"], run::ProcessOptions {\n+            dir: dir,\n+            .. run::ProcessOptions::new()\n+        })\n+    }\n \n     #[cfg(windows)]\n     fn run_pwd(dir: Option<&Path>) -> run::Process {\n@@ -1141,13 +1262,20 @@ mod tests {\n         assert_eq!(parent_stat.st_ino, child_stat.st_ino);\n     }\n \n-    #[cfg(unix)]\n+    #[cfg(unix,not(target_os=\"android\"))]\n     fn run_env(env: Option<&[(~str, ~str)]>) -> run::Process {\n         run::Process::new(\"env\", [], run::ProcessOptions {\n             env: env,\n             .. run::ProcessOptions::new()\n         })\n     }\n+    #[cfg(unix,target_os=\"android\")]\n+    fn run_env(env: Option<&[(~str, ~str)]>) -> run::Process {\n+        run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"set\"], run::ProcessOptions {\n+            env: env,\n+            .. run::ProcessOptions::new()\n+        })\n+    }\n \n     #[cfg(windows)]\n     fn run_env(env: Option<&[(~str, ~str)]>) -> run::Process {\n@@ -1158,6 +1286,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg(not(target_os=\"android\"))]\n     fn test_inherit_env() {\n         if running_on_valgrind() { return; }\n \n@@ -1170,6 +1299,23 @@ mod tests {\n             assert!(k.is_empty() || output.contains(fmt!(\"%s=%s\", k, v)));\n         }\n     }\n+    #[test]\n+    #[cfg(target_os=\"android\")]\n+    fn test_inherit_env() {\n+        if running_on_valgrind() { return; }\n+\n+        let mut prog = run_env(None);\n+        let output = str::from_bytes(prog.finish_with_output().output);\n+\n+        let r = os::env();\n+        for r.iter().advance |&(k, v)| {\n+            // don't check android RANDOM variables\n+            if k != ~\"RANDOM\" {\n+                assert!(output.contains(fmt!(\"%s=%s\", k, v)) ||\n+                        output.contains(fmt!(\"%s=\\'%s\\'\", k, v)));\n+            }\n+        }\n+    }\n \n     #[test]\n     fn test_add_to_env() {"}]}