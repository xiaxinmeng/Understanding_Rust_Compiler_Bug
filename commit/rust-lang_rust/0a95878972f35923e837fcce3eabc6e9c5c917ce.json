{"sha": "0a95878972f35923e837fcce3eabc6e9c5c917ce", "node_id": "C_kwDOAAsO6NoAKDBhOTU4Nzg5NzJmMzU5MjNlODM3ZmNjZTNlYWJjNmU5YzVjOTE3Y2U", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-15T04:06:40Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-22T01:36:41Z"}, "message": "drive-by: style nits", "tree": {"sha": "5d44b95b9d97297558e006e9494a925bbcb6ccfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d44b95b9d97297558e006e9494a925bbcb6ccfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a95878972f35923e837fcce3eabc6e9c5c917ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a95878972f35923e837fcce3eabc6e9c5c917ce", "html_url": "https://github.com/rust-lang/rust/commit/0a95878972f35923e837fcce3eabc6e9c5c917ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a95878972f35923e837fcce3eabc6e9c5c917ce/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e047ba3bff6a789f51f89b2e6fd880102744ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e047ba3bff6a789f51f89b2e6fd880102744ad", "html_url": "https://github.com/rust-lang/rust/commit/94e047ba3bff6a789f51f89b2e6fd880102744ad"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "10089453ed6cad9ce7f1c2ecafcd36be09002a7b", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0a95878972f35923e837fcce3eabc6e9c5c917ce/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a95878972f35923e837fcce3eabc6e9c5c917ce/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=0a95878972f35923e837fcce3eabc6e9c5c917ce", "patch": "@@ -14,10 +14,8 @@ use rustc_infer::traits::util;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::util::ExplicitSelf;\n use rustc_middle::ty::{\n-    self, AssocItem, DefIdTree, TraitRef, Ty, TypeFoldable, TypeFolder, TypeSuperFoldable,\n-    TypeVisitable,\n+    self, DefIdTree, InternalSubsts, Ty, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitable,\n };\n-use rustc_middle::ty::{FnSig, InternalSubsts};\n use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n@@ -144,9 +142,9 @@ pub(crate) fn compare_impl_method<'tcx>(\n #[instrument(level = \"debug\", skip(tcx, impl_m_span, impl_trait_ref))]\n fn compare_predicate_entailment<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    impl_m: &AssocItem,\n+    impl_m: &ty::AssocItem,\n     impl_m_span: Span,\n-    trait_m: &AssocItem,\n+    trait_m: &ty::AssocItem,\n     impl_trait_ref: ty::TraitRef<'tcx>,\n ) -> Result<(), ErrorGuaranteed> {\n     let trait_to_impl_substs = impl_trait_ref.substs;\n@@ -157,8 +155,7 @@ fn compare_predicate_entailment<'tcx>(\n     // FIXME(@lcnr): remove that after removing `cause.body_id` from\n     // obligations.\n     let impl_m_hir_id = tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n-    // We sometimes modify the span further down.\n-    let mut cause = ObligationCause::new(\n+    let cause = ObligationCause::new(\n         impl_m_span,\n         impl_m_hir_id,\n         ObligationCauseCode::CompareImplItemObligation {\n@@ -307,14 +304,13 @@ fn compare_predicate_entailment<'tcx>(\n         debug!(?terr, \"sub_types failed: impl ty {:?}, trait ty {:?}\", impl_fty, trait_fty);\n \n         let emitted = report_trait_method_mismatch(\n-            tcx,\n-            &mut cause,\n             &infcx,\n+            cause,\n             terr,\n             (trait_m, trait_fty),\n             (impl_m, impl_fty),\n-            &trait_sig,\n-            &impl_trait_ref,\n+            trait_sig,\n+            impl_trait_ref,\n         );\n         return Err(emitted);\n     }\n@@ -360,7 +356,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n \n     let impl_m_hir_id = tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n     let return_span = tcx.hir().fn_decl_by_hir_id(impl_m_hir_id).unwrap().output.span();\n-    let mut cause = ObligationCause::new(\n+    let cause = ObligationCause::new(\n         return_span,\n         impl_m_hir_id,\n         ObligationCauseCode::CompareImplItemObligation {\n@@ -457,14 +453,13 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n             // emit an error now because `compare_predicate_entailment` will not report the error\n             // when normalization fails.\n             let emitted = report_trait_method_mismatch(\n-                tcx,\n-                &mut cause,\n                 infcx,\n+                cause,\n                 terr,\n                 (trait_m, trait_fty),\n                 (impl_m, impl_fty),\n-                &trait_sig,\n-                &impl_trait_ref,\n+                trait_sig,\n+                impl_trait_ref,\n             );\n             return Err(emitted);\n         }\n@@ -634,23 +629,21 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n }\n \n fn report_trait_method_mismatch<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    cause: &mut ObligationCause<'tcx>,\n     infcx: &InferCtxt<'tcx>,\n+    mut cause: ObligationCause<'tcx>,\n     terr: TypeError<'tcx>,\n-    (trait_m, trait_fty): (&AssocItem, Ty<'tcx>),\n-    (impl_m, impl_fty): (&AssocItem, Ty<'tcx>),\n-    trait_sig: &FnSig<'tcx>,\n-    impl_trait_ref: &TraitRef<'tcx>,\n+    (trait_m, trait_fty): (&ty::AssocItem, Ty<'tcx>),\n+    (impl_m, impl_fty): (&ty::AssocItem, Ty<'tcx>),\n+    trait_sig: ty::FnSig<'tcx>,\n+    impl_trait_ref: ty::TraitRef<'tcx>,\n ) -> ErrorGuaranteed {\n+    let tcx = infcx.tcx;\n     let (impl_err_span, trait_err_span) =\n         extract_spans_for_error_reporting(&infcx, terr, &cause, impl_m, trait_m);\n \n-    cause.span = impl_err_span;\n-\n     let mut diag = struct_span_err!(\n         tcx.sess,\n-        cause.span(),\n+        impl_err_span,\n         E0053,\n         \"method `{}` has an incompatible type for trait\",\n         trait_m.name\n@@ -721,6 +714,7 @@ fn report_trait_method_mismatch<'tcx>(\n         _ => {}\n     }\n \n+    cause.span = impl_err_span;\n     infcx.err_ctxt().note_type_err(\n         &mut diag,\n         &cause,"}]}