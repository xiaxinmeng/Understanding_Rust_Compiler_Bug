{"sha": "49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "node_id": "C_kwDOAAsO6NoAKDQ5YTMxY2RjMWRmODQ4ZTlkZTA3Njg3YWY1YzFkM2Q2ZmE1ZWRiNjY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-16T05:12:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-16T05:12:43Z"}, "message": "Rollup merge of #95372 - RalfJung:unaligned_references, r=oli-obk\n\nmake unaligned_references lint deny-by-default\n\nThis lint has been warn-by-default for a year now (since https://github.com/rust-lang/rust/pull/82525), so I think it is time to crank it up a bit. Code that triggers the lint causes UB (without `unsafe`) when executed, so we really don't want people to write code like this.", "tree": {"sha": "907b609204519cf6a8e597adf389e945bf9278af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/907b609204519cf6a8e597adf389e945bf9278af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWlBLCRBK7hj4Ov3rIwAAnFQIAH2ES9g5IdEcBKVnBpPf1e1q\nBIqD7odTIwTR2d7avsXyPhIftVS7jtqpRkcJg1OC6W+ULdA+aNjjTh8VNofLEtWq\ngaAogpNN5qZMgjDweUQhdwUtyNP1DJND/XYbekqfMwy9aOpWlaoDHF/0qGh51H0X\nQ/72TUiPDSpKN/60I+jLlFbb4VdKjM+q62Pox6w9HHvEJ1vZv3gncRrsiuRC/WZz\nn3KqxdYxJmJVXQ0XCD0QEO2rCmpeRRqzIZWOAI/NthCgsczWKTF3ZIaVnhmm+6+u\nl3HdGaSVTL2uSmsbNLf15vvy2wYsT7DdYu/3F4Lt908L8rMoyjBzBuzSrZLkb0w=\n=9++C\n-----END PGP SIGNATURE-----\n", "payload": "tree 907b609204519cf6a8e597adf389e945bf9278af\nparent 6dd92bf9d1d287ac113ce4ebec2c3ee01225d999\nparent 1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650085963 +0200\ncommitter GitHub <noreply@github.com> 1650085963 +0200\n\nRollup merge of #95372 - RalfJung:unaligned_references, r=oli-obk\n\nmake unaligned_references lint deny-by-default\n\nThis lint has been warn-by-default for a year now (since https://github.com/rust-lang/rust/pull/82525), so I think it is time to crank it up a bit. Code that triggers the lint causes UB (without `unsafe`) when executed, so we really don't want people to write code like this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "html_url": "https://github.com/rust-lang/rust/commit/49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dd92bf9d1d287ac113ce4ebec2c3ee01225d999", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd92bf9d1d287ac113ce4ebec2c3ee01225d999", "html_url": "https://github.com/rust-lang/rust/commit/6dd92bf9d1d287ac113ce4ebec2c3ee01225d999"}, {"sha": "1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6", "html_url": "https://github.com/rust-lang/rust/commit/1a6c2ff4fd1d95c593d781b8743c78cc0433dbe6"}], "stats": {"total": 531, "additions": 490, "deletions": 41}, "files": [{"sha": "98d4870e6454efb9214f33c17eec69fc99ae2bea", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -27,7 +27,6 @@\n #![feature(thread_id_value)]\n #![feature(vec_into_raw_parts)]\n #![allow(rustc::default_hash_types)]\n-#![deny(unaligned_references)]\n #![allow(rustc::potential_query_instability)]\n \n #[macro_use]"}, {"sha": "a42e3d5d9578502a216ce6624e676498139ac99c", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -1110,8 +1110,6 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust,compile_fail\n-    /// #![deny(unaligned_references)]\n-    ///\n     /// #[repr(packed)]\n     /// pub struct Foo {\n     ///     field1: u64,\n@@ -1139,10 +1137,11 @@ declare_lint! {\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     /// [issue #82523]: https://github.com/rust-lang/rust/issues/82523\n     pub UNALIGNED_REFERENCES,\n-    Warn,\n+    Deny,\n     \"detects unaligned references to fields of packed structs\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #82523 <https://github.com/rust-lang/rust/issues/82523>\",\n+        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n     };\n     report_in_external_macro\n }"}, {"sha": "5042ad024afff00bfabc1e48272c2a46e15c4dcf", "filename": "src/test/ui/binding/issue-53114-safety-checks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -20,13 +20,13 @@ fn let_wild_gets_unsafe_field() {\n     let u1 = U { a: I(0) };\n     let u2 = U { a: I(1) };\n     let p = P { a: &2, b: &3 };\n-    let _ = &p.b;  //~ WARN    reference to packed field\n+    let _ = &p.b;  //~ ERROR    reference to packed field\n     //~^  WARN will become a hard error\n     let _ = u1.a;  // #53114: should eventually signal error as well\n     let _ = &u2.a; //~ ERROR  [E0133]\n \n     // variation on above with `_` in substructure\n-    let (_,) = (&p.b,);  //~ WARN     reference to packed field\n+    let (_,) = (&p.b,);  //~ ERROR     reference to packed field\n     //~^  WARN will become a hard error\n     let (_,) = (u1.a,);  //~ ERROR   [E0133]\n     let (_,) = (&u2.a,); //~ ERROR   [E0133]\n@@ -36,13 +36,13 @@ fn match_unsafe_field_to_wild() {\n     let u1 = U { a: I(0) };\n     let u2 = U { a: I(1) };\n     let p = P { a: &2, b: &3 };\n-    match &p.b  { _ => { } } //~ WARN     reference to packed field\n+    match &p.b  { _ => { } } //~ ERROR     reference to packed field\n     //~^  WARN will become a hard error\n     match u1.a  { _ => { } } //~ ERROR   [E0133]\n     match &u2.a { _ => { } } //~ ERROR   [E0133]\n \n     // variation on above with `_` in substructure\n-    match (&p.b,)  { (_,) => { } } //~ WARN     reference to packed field\n+    match (&p.b,)  { (_,) => { } } //~ ERROR     reference to packed field\n     //~^  WARN will become a hard error\n     match (u1.a,)  { (_,) => { } } //~ ERROR   [E0133]\n     match (&u2.a,) { (_,) => { } } //~ ERROR   [E0133]"}, {"sha": "f3840273cfaf7ae4a4c4ad25eb414002649aa827", "filename": "src/test/ui/binding/issue-53114-safety-checks.stderr", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -1,16 +1,16 @@\n-warning: reference to packed field is unaligned\n+error: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:23:13\n    |\n LL |     let _ = &p.b;\n    |             ^^^^\n    |\n-   = note: `#[warn(unaligned_references)]` on by default\n+   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-warning: reference to packed field is unaligned\n+error: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:29:17\n    |\n LL |     let (_,) = (&p.b,);\n@@ -21,7 +21,7 @@ LL |     let (_,) = (&p.b,);\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-warning: reference to packed field is unaligned\n+error: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:39:11\n    |\n LL |     match &p.b  { _ => { } }\n@@ -32,7 +32,7 @@ LL |     match &p.b  { _ => { } }\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-warning: reference to packed field is unaligned\n+error: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:45:12\n    |\n LL |     match (&p.b,)  { (_,) => { } }\n@@ -99,6 +99,58 @@ LL |     match (&u2.a,) { (_,) => { } }\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 7 previous errors; 4 warnings emitted\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0133`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:23:13\n+   |\n+LL |     let _ = &p.b;\n+   |             ^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:29:17\n+   |\n+LL |     let (_,) = (&p.b,);\n+   |                 ^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:39:11\n+   |\n+LL |     match &p.b  { _ => { } }\n+   |           ^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-53114-safety-checks.rs:45:12\n+   |\n+LL |     match (&p.b,)  { (_,) => { } }\n+   |            ^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}, {"sha": "1488f329648bb1c4149862a93d0bd288a79be357", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -1,7 +1,5 @@\n // edition:2021\n \n-// check-pass\n-\n // Given how the closure desugaring is implemented (at least at the time of writing this test),\n // we don't need to truncate the captured path to a reference into a packed-struct if the field\n // being referenced will be moved into the closure, since it's safe to move out a field from a\n@@ -11,9 +9,8 @@\n // inlined we will truncate the capture to access just the struct regardless of if the field\n // might get moved into the closure.\n //\n-// It is possible for someone to try writing the code that relies on the desugaring to access a ref\n-// into a packed-struct without explicity using unsafe. Here we test that the compiler warns the\n-// user that such an access is still unsafe.\n+// It is possible for someone to try writing the code that relies on the desugaring to create a ref\n+// into a packed-struct. Here we test that the compiler still detects that case.\n fn test_missing_unsafe_warning_on_repr_packed() {\n     #[repr(packed)]\n     struct Foo { x: String }\n@@ -22,7 +19,7 @@ fn test_missing_unsafe_warning_on_repr_packed() {\n \n     let c = || {\n         println!(\"{}\", foo.x);\n-        //~^ WARNING: reference to packed field is unaligned\n+        //~^ ERROR: reference to packed field is unaligned\n         //~| WARNING: this was previously accepted by the compiler but is being phased out\n         let _z = foo.x;\n     };"}, {"sha": "8629837ba8d344ea0520ff44ffa375260581fd58", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -1,15 +1,29 @@\n-warning: reference to packed field is unaligned\n-  --> $DIR/repr_packed.rs:24:24\n+error: reference to packed field is unaligned\n+  --> $DIR/repr_packed.rs:21:24\n    |\n LL |         println!(\"{}\", foo.x);\n    |                        ^^^^^\n    |\n-   = note: `#[warn(unaligned_references)]` on by default\n+   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: 1 warning emitted\n+error: aborting due to previous error\n+\n+Future incompatibility report: Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/repr_packed.rs:21:24\n+   |\n+LL |         println!(\"{}\", foo.x);\n+   |                        ^^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "1002b359f60bacaee5d0a4658e05c307e695ebcd", "filename": "src/test/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -45,3 +45,67 @@ LL | #[derive(PartialEq)]\n \n error: aborting due to 4 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:8:16\n+   |\n+LL | #[derive(Copy, Clone, PartialEq, Eq)]\n+   |                ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deriving-with-repr-packed.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:8:23\n+   |\n+LL | #[derive(Copy, Clone, PartialEq, Eq)]\n+   |                       ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deriving-with-repr-packed.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:16:10\n+   |\n+LL | #[derive(PartialEq, Eq)]\n+   |          ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deriving-with-repr-packed.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage diagnostic:\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:25:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deriving-with-repr-packed.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "ed5dd2ec0118160fc835573aa46af434791e118f", "filename": "src/test/ui/lint/unaligned_references.stderr", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -82,3 +82,122 @@ LL |         let _ = &packed2.x;\n \n error: aborting due to 7 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:22:17\n+   |\n+LL |         let _ = &good.ptr;\n+   |                 ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:24:17\n+   |\n+LL |         let _ = &good.data;\n+   |                 ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:27:17\n+   |\n+LL |         let _ = &good.data as *const _;\n+   |                 ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:29:27\n+   |\n+LL |         let _: *const _ = &good.data;\n+   |                           ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:32:17\n+   |\n+LL |         let _ = good.data.clone();\n+   |                 ^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:35:17\n+   |\n+LL |         let _ = &good.data2[0];\n+   |                 ^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:45:17\n+   |\n+LL |         let _ = &packed2.x;\n+   |                 ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}, {"sha": "1262c21ee78e236381a39fecc4c703ce90f6089b", "filename": "src/test/ui/lint/unaligned_references_external_macro.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -29,3 +29,33 @@ LL | | }\n \n error: aborting due to previous error\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references_external_macro.rs:5:1\n+   |\n+LL | / unaligned_references_external_crate::mac! {\n+LL | |\n+LL | |     #[repr(packed)]\n+LL | |     pub struct X {\n+LL | |         pub field: u16\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references_external_macro.rs:5:1\n+   |\n+LL | / unaligned_references_external_crate::mac! {\n+LL | |\n+LL | |     #[repr(packed)]\n+LL | |     pub struct X {\n+LL | |         pub field: u16\n+LL | |     }\n+LL | | }\n+   | |_^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: this error originates in the macro `unaligned_references_external_crate::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "667b70afb8787c5c66f41c9ece04c54152f2f0ad", "filename": "src/test/ui/packed/issue-27060-rpass.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-rpass.stderr?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -0,0 +1,68 @@\n+Future incompatibility report: Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/issue-27060-rpass.rs:15:13\n+   |\n+LL |     let _ = &good.data; // ok\n+   |             ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-27060-rpass.rs:11:9\n+   |\n+LL | #[allow(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/issue-27060-rpass.rs:16:13\n+   |\n+LL |     let _ = &good.data2[0]; // ok\n+   |             ^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-27060-rpass.rs:11:9\n+   |\n+LL | #[allow(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/issue-27060-rpass.rs:18:13\n+   |\n+LL |     let _ = &good.data;\n+   |             ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-27060-rpass.rs:11:9\n+   |\n+LL | #[allow(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/issue-27060-rpass.rs:19:13\n+   |\n+LL |     let _ = &good.data2[0];\n+   |             ^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-27060-rpass.rs:11:9\n+   |\n+LL | #[allow(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}, {"sha": "886a00239f98c5165d80b6ac40d32c75f3b9d661", "filename": "src/test/ui/packed/issue-27060.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.rs?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -5,7 +5,6 @@ pub struct Good {\n     aligned: [u8; 32],\n }\n \n-#[deny(unaligned_references)]\n fn main() {\n     let good = Good {\n         data: &0,"}, {"sha": "1bab16e6ddaa38047dba17032d8787d926356c60", "filename": "src/test/ui/packed/issue-27060.stderr", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -1,21 +1,17 @@\n error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:16:13\n+  --> $DIR/issue-27060.rs:15:13\n    |\n LL |     let _ = &good.data;\n    |             ^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/issue-27060.rs:8:8\n-   |\n-LL | #[deny(unaligned_references)]\n-   |        ^^^^^^^^^^^^^^^^^^^^\n+   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:18:13\n+  --> $DIR/issue-27060.rs:17:13\n    |\n LL |     let _ = &good.data2[0];\n    |             ^^^^^^^^^^^^^^\n@@ -26,7 +22,7 @@ LL |     let _ = &good.data2[0];\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:21:13\n+  --> $DIR/issue-27060.rs:20:13\n    |\n LL |     let _ = &good.data;\n    |             ^^^^^^^^^^\n@@ -37,7 +33,7 @@ LL |     let _ = &good.data;\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:23:13\n+  --> $DIR/issue-27060.rs:22:13\n    |\n LL |     let _ = &good.data2[0];\n    |             ^^^^^^^^^^^^^^\n@@ -49,3 +45,55 @@ LL |     let _ = &good.data2[0];\n \n error: aborting due to 4 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-27060.rs:15:13\n+   |\n+LL |     let _ = &good.data;\n+   |             ^^^^^^^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-27060.rs:17:13\n+   |\n+LL |     let _ = &good.data2[0];\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-27060.rs:20:13\n+   |\n+LL |     let _ = &good.data;\n+   |             ^^^^^^^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+error: reference to packed field is unaligned\n+  --> $DIR/issue-27060.rs:22:13\n+   |\n+LL |     let _ = &good.data2[0];\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(unaligned_references)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}, {"sha": "d86698cbf3848d50e86ee6d2abfb6673794df0d0", "filename": "src/test/ui/packed/packed-struct-address-of-element.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-address-of-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-address-of-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-address-of-element.rs?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-#![deny(unaligned_references)]\n #![feature(raw_ref_op)]\n // ignore-emscripten weird assertion?\n "}, {"sha": "00bddfe40b25b7ae3a4e6a00e473f0608cb308cc", "filename": "src/test/ui/packed/packed-struct-borrow-element-64bit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.rs?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -9,6 +9,7 @@ struct Foo4C {\n     baz: usize\n }\n \n+#[warn(unaligned_references)]\n pub fn main() {\n     let foo = Foo4C { bar: 1, baz: 2 };\n     let brw = &foo.baz; //~WARN reference to packed field is unaligned"}, {"sha": "dcd1c19fa16a8344eb9c6638116a665f8adf3962", "filename": "src/test/ui/packed/packed-struct-borrow-element-64bit.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -1,14 +1,35 @@\n warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element-64bit.rs:14:15\n+  --> $DIR/packed-struct-borrow-element-64bit.rs:15:15\n    |\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^\n    |\n-   = note: `#[warn(unaligned_references)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/packed-struct-borrow-element-64bit.rs:12:8\n+   |\n+LL | #[warn(unaligned_references)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n warning: 1 warning emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/packed-struct-borrow-element-64bit.rs:15:15\n+   |\n+LL |     let brw = &foo.baz;\n+   |               ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/packed-struct-borrow-element-64bit.rs:12:8\n+   |\n+LL | #[warn(unaligned_references)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}, {"sha": "a6ee90cef44f055abd58354860efc8cc443e741d", "filename": "src/test/ui/packed/packed-struct-borrow-element.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -20,6 +20,7 @@ struct Foo4C {\n     baz: usize\n }\n \n+#[warn(unaligned_references)]\n pub fn main() {\n     let foo = Foo1 { bar: 1, baz: 2 };\n     let brw = &foo.baz; //~WARN reference to packed field is unaligned"}, {"sha": "fb483227e20c124b78bac182246933bccaf44bf0", "filename": "src/test/ui/packed/packed-struct-borrow-element.stderr", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49a31cdc1df848e9de07687af5c1d3d6fa5edb66/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr?ref=49a31cdc1df848e9de07687af5c1d3d6fa5edb66", "patch": "@@ -1,17 +1,21 @@\n warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element.rs:25:15\n+  --> $DIR/packed-struct-borrow-element.rs:26:15\n    |\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^\n    |\n-   = note: `#[warn(unaligned_references)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/packed-struct-borrow-element.rs:23:8\n+   |\n+LL | #[warn(unaligned_references)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element.rs:30:15\n+  --> $DIR/packed-struct-borrow-element.rs:31:15\n    |\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^\n@@ -23,3 +27,37 @@ LL |     let brw = &foo.baz;\n \n warning: 2 warnings emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/packed-struct-borrow-element.rs:26:15\n+   |\n+LL |     let brw = &foo.baz;\n+   |               ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/packed-struct-borrow-element.rs:23:8\n+   |\n+LL | #[warn(unaligned_references)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+\n+Future breakage diagnostic:\n+warning: reference to packed field is unaligned\n+  --> $DIR/packed-struct-borrow-element.rs:31:15\n+   |\n+LL |     let brw = &foo.baz;\n+   |               ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/packed-struct-borrow-element.rs:23:8\n+   |\n+LL | #[warn(unaligned_references)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+   = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+"}]}