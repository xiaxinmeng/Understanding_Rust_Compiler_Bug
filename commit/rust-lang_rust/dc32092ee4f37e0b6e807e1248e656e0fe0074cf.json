{"sha": "dc32092ee4f37e0b6e807e1248e656e0fe0074cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMzIwOTJlZTRmMzdlMGI2ZTgwN2UxMjQ4ZTY1NmUwZmUwMDc0Y2Y=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-06T11:49:04Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-06T11:49:04Z"}, "message": "Merge pull request #303 from inrustwetrust/master\n\nDon't show the explicit_iter_loop lint for arrays with more than 32 elements", "tree": {"sha": "73df8502156b5b8dcac09540f86f2b8b860602f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73df8502156b5b8dcac09540f86f2b8b860602f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc32092ee4f37e0b6e807e1248e656e0fe0074cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc32092ee4f37e0b6e807e1248e656e0fe0074cf", "html_url": "https://github.com/rust-lang/rust/commit/dc32092ee4f37e0b6e807e1248e656e0fe0074cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc32092ee4f37e0b6e807e1248e656e0fe0074cf/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a7db7892d081b03ca63d98969734dfeb7c48c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7db7892d081b03ca63d98969734dfeb7c48c9f", "html_url": "https://github.com/rust-lang/rust/commit/1a7db7892d081b03ca63d98969734dfeb7c48c9f"}, {"sha": "efd553c8a98ebe1799218aa05cf773f2ac57852c", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd553c8a98ebe1799218aa05cf773f2ac57852c", "html_url": "https://github.com/rust-lang/rust/commit/efd553c8a98ebe1799218aa05cf773f2ac57852c"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "d1a3e4ac7ab6fe8bb356810c2a12ad9c0b335132", "filename": "src/loops.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc32092ee4f37e0b6e807e1248e656e0fe0074cf/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc32092ee4f37e0b6e807e1248e656e0fe0074cf/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=dc32092ee4f37e0b6e807e1248e656e0fe0074cf", "patch": "@@ -199,7 +199,7 @@ fn is_ref_iterable_type(cx: &Context, e: &Expr) -> bool {\n     // no walk_ptrs_ty: calling iter() on a reference can make sense because it\n     // will allow further borrows afterwards\n     let ty = cx.tcx.expr_ty(e);\n-    is_array(ty) ||\n+    is_iterable_array(ty) ||\n         match_type(cx, ty, &VEC_PATH) ||\n         match_type(cx, ty, &LL_PATH) ||\n         match_type(cx, ty, &[\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"]) ||\n@@ -210,9 +210,10 @@ fn is_ref_iterable_type(cx: &Context, e: &Expr) -> bool {\n         match_type(cx, ty, &[\"collections\", \"btree\", \"set\", \"BTreeSet\"])\n }\n \n-fn is_array(ty: ty::Ty) -> bool {\n+fn is_iterable_array(ty: ty::Ty) -> bool {\n+    //IntoIterator is currently only implemented for array sizes <= 32 in rustc\n     match ty.sty {\n-        ty::TyArray(..) => true,\n+        ty::TyArray(_, 0...32) => true,\n         _ => false\n     }\n }"}, {"sha": "c8d1d383c78c4e5a02801b6e6252982cb9ae72c2", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc32092ee4f37e0b6e807e1248e656e0fe0074cf/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc32092ee4f37e0b6e807e1248e656e0fe0074cf/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=dc32092ee4f37e0b6e807e1248e656e0fe0074cf", "patch": "@@ -42,6 +42,8 @@ fn main() {\n \n     for _v in [1, 2, 3].iter() { } //~ERROR it is more idiomatic to loop over `&[\n     for _v in (&mut [1, 2, 3]).iter() { } // no error\n+    for _v in [0; 32].iter() {} //~ERROR it is more idiomatic to loop over `&[\n+    for _v in [0; 33].iter() {} // no error\n     let ll: LinkedList<()> = LinkedList::new();\n     for _v in ll.iter() { } //~ERROR it is more idiomatic to loop over `&ll`\n     let vd: VecDeque<()> = VecDeque::new();"}]}