{"sha": "45e2c2881d11324d610815bfff097e25c412199e", "node_id": "C_kwDOAAsO6NoAKDQ1ZTJjMjg4MWQxMTMyNGQ2MTA4MTViZmZmMDk3ZTI1YzQxMjE5OWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-20T21:15:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-20T21:15:11Z"}, "message": "Auto merge of #93678 - steffahn:better_unsafe_diagnostics, r=nagisa\n\nImprove `unused_unsafe` lint\n\nI\u2019m going to add some motivation and explanation below, particularly pointing the changes in behavior from this PR.\n\n_Edit:_ Looking for existing issues, looks like this PR fixes #88260.\n\n_Edit2:_ Now also contains code that closes #90776.", "tree": {"sha": "cd1eb9e766bdb68b186ef4a5d1ff6b71c2d28aa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd1eb9e766bdb68b186ef4a5d1ff6b71c2d28aa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45e2c2881d11324d610815bfff097e25c412199e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45e2c2881d11324d610815bfff097e25c412199e", "html_url": "https://github.com/rust-lang/rust/commit/45e2c2881d11324d610815bfff097e25c412199e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45e2c2881d11324d610815bfff097e25c412199e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/523a1b1d388bfe82a5d0540b876d9428b6dccc9c", "html_url": "https://github.com/rust-lang/rust/commit/523a1b1d388bfe82a5d0540b876d9428b6dccc9c"}, {"sha": "8f8689fb31a4ca67b348198a082dcc81acbb89ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f8689fb31a4ca67b348198a082dcc81acbb89ba", "html_url": "https://github.com/rust-lang/rust/commit/8f8689fb31a4ca67b348198a082dcc81acbb89ba"}], "stats": {"total": 3453, "additions": 3209, "deletions": 244}, "files": [{"sha": "c3994cef14fd148e20596a269d38663507088f3b", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -599,13 +599,11 @@ impl<'ll, 'tcx> FnAbiLlvmExt<'ll, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n         if self.conv == Conv::CCmseNonSecureCall {\n             // This will probably get ignored on all targets but those supporting the TrustZone-M\n             // extension (thumbv8m targets).\n-            unsafe {\n-                llvm::AddCallSiteAttrString(\n-                    callsite,\n-                    llvm::AttributePlace::Function,\n-                    cstr::cstr!(\"cmse_nonsecure_call\"),\n-                );\n-            }\n+            llvm::AddCallSiteAttrString(\n+                callsite,\n+                llvm::AttributePlace::Function,\n+                cstr::cstr!(\"cmse_nonsecure_call\"),\n+            );\n         }\n     }\n }"}, {"sha": "48efae8045bddd9eaf5d0463f979a8cd7aff3413", "filename": "compiler/rustc_middle/src/hir/nested_filter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -3,6 +3,10 @@ use rustc_hir::intravisit::nested_filter::NestedFilter;\n /// Do not visit nested item-like things, but visit nested things\n /// that are inside of an item-like.\n ///\n+/// Notably, possible occurrences of bodies in non-item-like things\n+/// include: closures/generators, inline `const {}` blocks, and\n+/// constant arguments of types, e.g. in `let _: [(); /* HERE */];`.\n+///\n /// **This is the most common choice.** A very common pattern is\n /// to use `visit_all_item_likes()` as an outer loop,\n /// and to have the visitor that visits the contents of each item"}, {"sha": "294c70f24f8b19f04e741a8ba59331b3ace67d9a", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 73, "deletions": 62, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -202,6 +202,77 @@ impl<'a> LintDiagnosticBuilder<'a> {\n     }\n }\n \n+pub fn explain_lint_level_source<'s>(\n+    sess: &'s Session,\n+    lint: &'static Lint,\n+    level: Level,\n+    src: LintLevelSource,\n+    err: &mut DiagnosticBuilder<'s>,\n+) {\n+    let name = lint.name_lower();\n+    match src {\n+        LintLevelSource::Default => {\n+            sess.diag_note_once(\n+                err,\n+                DiagnosticMessageId::from(lint),\n+                &format!(\"`#[{}({})]` on by default\", level.as_str(), name),\n+            );\n+        }\n+        LintLevelSource::CommandLine(lint_flag_val, orig_level) => {\n+            let flag = match orig_level {\n+                Level::Warn => \"-W\",\n+                Level::Deny => \"-D\",\n+                Level::Forbid => \"-F\",\n+                Level::Allow => \"-A\",\n+                Level::ForceWarn => \"--force-warn\",\n+            };\n+            let hyphen_case_lint_name = name.replace('_', \"-\");\n+            if lint_flag_val.as_str() == name {\n+                sess.diag_note_once(\n+                    err,\n+                    DiagnosticMessageId::from(lint),\n+                    &format!(\n+                        \"requested on the command line with `{} {}`\",\n+                        flag, hyphen_case_lint_name\n+                    ),\n+                );\n+            } else {\n+                let hyphen_case_flag_val = lint_flag_val.as_str().replace('_', \"-\");\n+                sess.diag_note_once(\n+                    err,\n+                    DiagnosticMessageId::from(lint),\n+                    &format!(\n+                        \"`{} {}` implied by `{} {}`\",\n+                        flag, hyphen_case_lint_name, flag, hyphen_case_flag_val\n+                    ),\n+                );\n+            }\n+        }\n+        LintLevelSource::Node(lint_attr_name, src, reason) => {\n+            if let Some(rationale) = reason {\n+                err.note(rationale.as_str());\n+            }\n+            sess.diag_span_note_once(\n+                err,\n+                DiagnosticMessageId::from(lint),\n+                src,\n+                \"the lint level is defined here\",\n+            );\n+            if lint_attr_name.as_str() != name {\n+                let level_str = level.as_str();\n+                sess.diag_note_once(\n+                    err,\n+                    DiagnosticMessageId::from(lint),\n+                    &format!(\n+                        \"`#[{}({})]` implied by `#[{}({})]`\",\n+                        level_str, name, level_str, lint_attr_name\n+                    ),\n+                );\n+            }\n+        }\n+    }\n+}\n+\n pub fn struct_lint_level<'s, 'd>(\n     sess: &'s Session,\n     lint: &'static Lint,\n@@ -277,69 +348,9 @@ pub fn struct_lint_level<'s, 'd>(\n             }\n         }\n \n-        let name = lint.name_lower();\n-        match src {\n-            LintLevelSource::Default => {\n-                sess.diag_note_once(\n-                    &mut err,\n-                    DiagnosticMessageId::from(lint),\n-                    &format!(\"`#[{}({})]` on by default\", level.as_str(), name),\n-                );\n-            }\n-            LintLevelSource::CommandLine(lint_flag_val, orig_level) => {\n-                let flag = match orig_level {\n-                    Level::Warn => \"-W\",\n-                    Level::Deny => \"-D\",\n-                    Level::Forbid => \"-F\",\n-                    Level::Allow => \"-A\",\n-                    Level::ForceWarn => \"--force-warn\",\n-                };\n-                let hyphen_case_lint_name = name.replace('_', \"-\");\n-                if lint_flag_val.as_str() == name {\n-                    sess.diag_note_once(\n-                        &mut err,\n-                        DiagnosticMessageId::from(lint),\n-                        &format!(\n-                            \"requested on the command line with `{} {}`\",\n-                            flag, hyphen_case_lint_name\n-                        ),\n-                    );\n-                } else {\n-                    let hyphen_case_flag_val = lint_flag_val.as_str().replace('_', \"-\");\n-                    sess.diag_note_once(\n-                        &mut err,\n-                        DiagnosticMessageId::from(lint),\n-                        &format!(\n-                            \"`{} {}` implied by `{} {}`\",\n-                            flag, hyphen_case_lint_name, flag, hyphen_case_flag_val\n-                        ),\n-                    );\n-                }\n-            }\n-            LintLevelSource::Node(lint_attr_name, src, reason) => {\n-                if let Some(rationale) = reason {\n-                    err.note(rationale.as_str());\n-                }\n-                sess.diag_span_note_once(\n-                    &mut err,\n-                    DiagnosticMessageId::from(lint),\n-                    src,\n-                    \"the lint level is defined here\",\n-                );\n-                if lint_attr_name.as_str() != name {\n-                    let level_str = level.as_str();\n-                    sess.diag_note_once(\n-                        &mut err,\n-                        DiagnosticMessageId::from(lint),\n-                        &format!(\n-                            \"`#[{}({})]` implied by `#[{}({})]`\",\n-                            level_str, name, level_str, lint_attr_name\n-                        ),\n-                    );\n-                }\n-            }\n-        }\n+        explain_lint_level_source(sess, lint, level, src, &mut err);\n \n+        let name = lint.name_lower();\n         let is_force_warn = matches!(level, Level::ForceWarn);\n         err.code(DiagnosticId::Lint { name, has_future_breakage, is_force_warn });\n "}, {"sha": "433f69e8da46cfacc489d76e07d8496517e4ddab", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -2,7 +2,7 @@\n \n use crate::mir::{Body, Promoted};\n use crate::ty::{self, Ty, TyCtxt};\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n@@ -114,13 +114,44 @@ pub struct UnsafetyViolation {\n     pub details: UnsafetyViolationDetails,\n }\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, Debug)]\n+#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n+pub enum UnusedUnsafe {\n+    /// `unsafe` block contains no unsafe operations\n+    /// > ``unnecessary `unsafe` block``\n+    Unused,\n+    /// `unsafe` block nested under another (used) `unsafe` block\n+    /// > ``\u2026 because it's nested under this `unsafe` block``\n+    InUnsafeBlock(hir::HirId),\n+    /// `unsafe` block nested under `unsafe fn`\n+    /// > ``\u2026 because it's nested under this `unsafe fn` ``\n+    ///\n+    /// the second HirId here indicates the first usage of the `unsafe` block,\n+    /// which allows retrival of the LintLevelSource for why that operation would\n+    /// have been permitted without the block\n+    InUnsafeFn(hir::HirId, hir::HirId),\n+}\n+\n+#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n+pub enum UsedUnsafeBlockData {\n+    SomeDisallowedInUnsafeFn,\n+    // the HirId here indicates the first usage of the `unsafe` block\n+    // (i.e. the one that's first encountered in the MIR traversal of the unsafety check)\n+    AllAllowedInUnsafeFn(hir::HirId),\n+}\n+\n+#[derive(TyEncodable, TyDecodable, HashStable, Debug)]\n pub struct UnsafetyCheckResult {\n     /// Violations that are propagated *upwards* from this function.\n-    pub violations: Lrc<[UnsafetyViolation]>,\n-    /// `unsafe` blocks in this function, along with whether they are used. This is\n-    /// used for the \"unused_unsafe\" lint.\n-    pub unsafe_blocks: Lrc<[(hir::HirId, bool)]>,\n+    pub violations: Vec<UnsafetyViolation>,\n+\n+    /// Used `unsafe` blocks in this function. This is used for the \"unused_unsafe\" lint.\n+    ///\n+    /// The keys are the used `unsafe` blocks, the UnusedUnsafeKind indicates whether\n+    /// or not any of the usages happen at a place that doesn't allow `unsafe_op_in_unsafe_fn`.\n+    pub used_unsafe_blocks: FxHashMap<hir::HirId, UsedUnsafeBlockData>,\n+\n+    /// This is `Some` iff the item is not a closure.\n+    pub unused_unsafes: Option<Vec<(hir::HirId, UnusedUnsafe)>>,\n }\n \n rustc_index::newtype_index! {"}, {"sha": "f98025f7953f9401633e7216c16c2efc3f7feecc", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -3,8 +3,6 @@ use crate::build::ForGuard::OutsideGuard;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n-use rustc_session::lint::builtin::UNSAFE_OP_IN_UNSAFE_FN;\n-use rustc_session::lint::Level;\n use rustc_span::Span;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -209,28 +207,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         block.unit()\n     }\n \n-    /// If we are changing the safety mode, create a new source scope\n+    /// If we are entering an unsafe block, create a new source scope\n     fn update_source_scope_for_safety_mode(&mut self, span: Span, safety_mode: BlockSafety) {\n         debug!(\"update_source_scope_for({:?}, {:?})\", span, safety_mode);\n         let new_unsafety = match safety_mode {\n-            BlockSafety::Safe => None,\n-            BlockSafety::BuiltinUnsafe => Some(Safety::BuiltinUnsafe),\n+            BlockSafety::Safe => return,\n+            BlockSafety::BuiltinUnsafe => Safety::BuiltinUnsafe,\n             BlockSafety::ExplicitUnsafe(hir_id) => {\n-                match self.in_scope_unsafe {\n-                    Safety::Safe => {}\n-                    // no longer treat `unsafe fn`s as `unsafe` contexts (see RFC #2585)\n-                    Safety::FnUnsafe\n-                        if self.tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, hir_id).0\n-                            != Level::Allow => {}\n-                    _ => return,\n-                }\n                 self.in_scope_unsafe = Safety::ExplicitUnsafe(hir_id);\n-                Some(Safety::ExplicitUnsafe(hir_id))\n+                Safety::ExplicitUnsafe(hir_id)\n             }\n         };\n \n-        if let Some(unsafety) = new_unsafety {\n-            self.source_scope = self.new_source_scope(span, LintLevel::Inherited, Some(unsafety));\n-        }\n+        self.source_scope = self.new_source_scope(span, LintLevel::Inherited, Some(new_unsafety));\n     }\n }"}, {"sha": "eaf3f19bff196990bfa5b054c25db61236f487e2", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 178, "deletions": 116, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -1,17 +1,17 @@\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::hir_id::HirId;\n use rustc_hir::intravisit;\n-use rustc_hir::Node;\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n-use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::{lint, mir::*};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n \n+use std::collections::hash_map;\n use std::ops::Bound;\n \n pub struct UnsafetyChecker<'a, 'tcx> {\n@@ -21,9 +21,12 @@ pub struct UnsafetyChecker<'a, 'tcx> {\n     source_info: SourceInfo,\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    /// Mark an `unsafe` block as used, so we don't lint it.\n-    used_unsafe: FxHashSet<hir::HirId>,\n-    inherited_blocks: Vec<(hir::HirId, bool)>,\n+\n+    /// Used `unsafe` blocks in this function. This is used for the \"unused_unsafe\" lint.\n+    ///\n+    /// The keys are the used `unsafe` blocks, the UnusedUnsafeKind indicates whether\n+    /// or not any of the usages happen at a place that doesn't allow `unsafe_op_in_unsafe_fn`.\n+    used_unsafe_blocks: FxHashMap<HirId, UsedUnsafeBlockData>,\n }\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n@@ -40,8 +43,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             source_info: SourceInfo::outermost(body.span),\n             tcx,\n             param_env,\n-            used_unsafe: Default::default(),\n-            inherited_blocks: vec![],\n+            used_unsafe_blocks: Default::default(),\n         }\n     }\n }\n@@ -123,9 +125,9 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                     }\n                 }\n                 &AggregateKind::Closure(def_id, _) | &AggregateKind::Generator(def_id, _, _) => {\n-                    let UnsafetyCheckResult { violations, unsafe_blocks } =\n+                    let UnsafetyCheckResult { violations, used_unsafe_blocks, .. } =\n                         self.tcx.unsafety_check_result(def_id.expect_local());\n-                    self.register_violations(&violations, &unsafe_blocks);\n+                    self.register_violations(violations, used_unsafe_blocks);\n                 }\n             },\n             _ => {}\n@@ -251,61 +253,72 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n             .assert_crate_local()\n             .lint_root;\n         self.register_violations(\n-            &[UnsafetyViolation { source_info, lint_root, kind, details }],\n-            &[],\n+            [&UnsafetyViolation { source_info, lint_root, kind, details }],\n+            [],\n         );\n     }\n \n-    fn register_violations(\n+    fn register_violations<'a>(\n         &mut self,\n-        violations: &[UnsafetyViolation],\n-        unsafe_blocks: &[(hir::HirId, bool)],\n+        violations: impl IntoIterator<Item = &'a UnsafetyViolation>,\n+        new_used_unsafe_blocks: impl IntoIterator<Item = (&'a HirId, &'a UsedUnsafeBlockData)>,\n     ) {\n+        use UsedUnsafeBlockData::{AllAllowedInUnsafeFn, SomeDisallowedInUnsafeFn};\n+\n+        let update_entry = |this: &mut Self, hir_id, new_usage| {\n+            match this.used_unsafe_blocks.entry(hir_id) {\n+                hash_map::Entry::Occupied(mut entry) => {\n+                    if new_usage == SomeDisallowedInUnsafeFn {\n+                        *entry.get_mut() = SomeDisallowedInUnsafeFn;\n+                    }\n+                }\n+                hash_map::Entry::Vacant(entry) => {\n+                    entry.insert(new_usage);\n+                }\n+            };\n+        };\n         let safety = self.body.source_scopes[self.source_info.scope]\n             .local_data\n             .as_ref()\n             .assert_crate_local()\n             .safety;\n-        let within_unsafe = match safety {\n+        match safety {\n             // `unsafe` blocks are required in safe code\n-            Safety::Safe => {\n-                for violation in violations {\n-                    match violation.kind {\n-                        UnsafetyViolationKind::General => {}\n-                        UnsafetyViolationKind::UnsafeFn => {\n-                            bug!(\"`UnsafetyViolationKind::UnsafeFn` in an `Safe` context\")\n-                        }\n-                    }\n-                    if !self.violations.contains(violation) {\n-                        self.violations.push(*violation)\n+            Safety::Safe => violations.into_iter().for_each(|&violation| {\n+                match violation.kind {\n+                    UnsafetyViolationKind::General => {}\n+                    UnsafetyViolationKind::UnsafeFn => {\n+                        bug!(\"`UnsafetyViolationKind::UnsafeFn` in an `Safe` context\")\n                     }\n                 }\n-                false\n-            }\n-            // With the RFC 2585, no longer allow `unsafe` operations in `unsafe fn`s\n-            Safety::FnUnsafe => {\n-                for violation in violations {\n-                    let mut violation = *violation;\n-\n-                    violation.kind = UnsafetyViolationKind::UnsafeFn;\n-                    if !self.violations.contains(&violation) {\n-                        self.violations.push(violation)\n-                    }\n+                if !self.violations.contains(&violation) {\n+                    self.violations.push(violation)\n                 }\n-                false\n-            }\n-            Safety::BuiltinUnsafe => true,\n-            Safety::ExplicitUnsafe(hir_id) => {\n-                // mark unsafe block as used if there are any unsafe operations inside\n-                if !violations.is_empty() {\n-                    self.used_unsafe.insert(hir_id);\n+            }),\n+            // With the RFC 2585, no longer allow `unsafe` operations in `unsafe fn`s\n+            Safety::FnUnsafe => violations.into_iter().for_each(|&(mut violation)| {\n+                violation.kind = UnsafetyViolationKind::UnsafeFn;\n+                if !self.violations.contains(&violation) {\n+                    self.violations.push(violation)\n                 }\n-                true\n-            }\n+            }),\n+            Safety::BuiltinUnsafe => {}\n+            Safety::ExplicitUnsafe(hir_id) => violations.into_iter().for_each(|violation| {\n+                update_entry(\n+                    self,\n+                    hir_id,\n+                    match self.tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, violation.lint_root).0\n+                    {\n+                        Level::Allow => AllAllowedInUnsafeFn(violation.lint_root),\n+                        _ => SomeDisallowedInUnsafeFn,\n+                    },\n+                )\n+            }),\n         };\n-        self.inherited_blocks.extend(\n-            unsafe_blocks.iter().map(|&(hir_id, is_used)| (hir_id, is_used && !within_unsafe)),\n-        );\n+\n+        new_used_unsafe_blocks\n+            .into_iter()\n+            .for_each(|(&hir_id, &usage_data)| update_entry(self, hir_id, usage_data));\n     }\n     fn check_mut_borrowing_layout_constrained_field(\n         &mut self,\n@@ -387,38 +400,103 @@ pub(crate) fn provide(providers: &mut Providers) {\n     };\n }\n \n-struct UnusedUnsafeVisitor<'a> {\n-    used_unsafe: &'a FxHashSet<hir::HirId>,\n-    unsafe_blocks: &'a mut Vec<(hir::HirId, bool)>,\n+/// Context information for [`UnusedUnsafeVisitor`] traversal,\n+/// saves (innermost) relevant context\n+#[derive(Copy, Clone, Debug)]\n+enum Context {\n+    Safe,\n+    /// in an `unsafe fn`\n+    UnsafeFn(HirId),\n+    /// in a *used* `unsafe` block\n+    /// (i.e. a block without unused-unsafe warning)\n+    UnsafeBlock(HirId),\n+}\n+\n+struct UnusedUnsafeVisitor<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    used_unsafe_blocks: &'a FxHashMap<HirId, UsedUnsafeBlockData>,\n+    context: Context,\n+    unused_unsafes: &'a mut Vec<(HirId, UnusedUnsafe)>,\n }\n \n-impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_> {\n+impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_, 'tcx> {\n     fn visit_block(&mut self, block: &'tcx hir::Block<'tcx>) {\n-        intravisit::walk_block(self, block);\n+        use UsedUnsafeBlockData::{AllAllowedInUnsafeFn, SomeDisallowedInUnsafeFn};\n \n         if let hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::UserProvided) = block.rules {\n-            self.unsafe_blocks.push((block.hir_id, self.used_unsafe.contains(&block.hir_id)));\n+            let used = match self.tcx.lint_level_at_node(UNUSED_UNSAFE, block.hir_id) {\n+                (Level::Allow, _) => Some(SomeDisallowedInUnsafeFn),\n+                _ => self.used_unsafe_blocks.get(&block.hir_id).copied(),\n+            };\n+            let unused_unsafe = match (self.context, used) {\n+                (_, None) => UnusedUnsafe::Unused,\n+                (Context::Safe, Some(_))\n+                | (Context::UnsafeFn(_), Some(SomeDisallowedInUnsafeFn)) => {\n+                    let previous_context = self.context;\n+                    self.context = Context::UnsafeBlock(block.hir_id);\n+                    intravisit::walk_block(self, block);\n+                    self.context = previous_context;\n+                    return;\n+                }\n+                (Context::UnsafeFn(hir_id), Some(AllAllowedInUnsafeFn(lint_root))) => {\n+                    UnusedUnsafe::InUnsafeFn(hir_id, lint_root)\n+                }\n+                (Context::UnsafeBlock(hir_id), Some(_)) => UnusedUnsafe::InUnsafeBlock(hir_id),\n+            };\n+            self.unused_unsafes.push((block.hir_id, unused_unsafe));\n+        }\n+        intravisit::walk_block(self, block);\n+    }\n+\n+    fn visit_fn(\n+        &mut self,\n+        fk: intravisit::FnKind<'tcx>,\n+        _fd: &'tcx hir::FnDecl<'tcx>,\n+        b: hir::BodyId,\n+        _s: rustc_span::Span,\n+        _id: HirId,\n+    ) {\n+        if matches!(fk, intravisit::FnKind::Closure) {\n+            self.visit_body(self.tcx.hir().body(b))\n         }\n     }\n }\n \n fn check_unused_unsafe(\n     tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n-    used_unsafe: &FxHashSet<hir::HirId>,\n-    unsafe_blocks: &mut Vec<(hir::HirId, bool)>,\n-) {\n-    let body_id = tcx.hir().maybe_body_owned_by(tcx.hir().local_def_id_to_hir_id(def_id));\n+    used_unsafe_blocks: &FxHashMap<HirId, UsedUnsafeBlockData>,\n+) -> Vec<(HirId, UnusedUnsafe)> {\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+    let body_id = tcx.hir().maybe_body_owned_by(hir_id);\n \n     let Some(body_id) = body_id else {\n         debug!(\"check_unused_unsafe({:?}) - no body found\", def_id);\n-        return;\n+        return vec![];\n     };\n     let body = tcx.hir().body(body_id);\n-    debug!(\"check_unused_unsafe({:?}, body={:?}, used_unsafe={:?})\", def_id, body, used_unsafe);\n \n-    let mut visitor = UnusedUnsafeVisitor { used_unsafe, unsafe_blocks };\n+    let context = match tcx.hir().fn_sig_by_hir_id(hir_id) {\n+        Some(sig) if sig.header.unsafety == hir::Unsafety::Unsafe => Context::UnsafeFn(hir_id),\n+        _ => Context::Safe,\n+    };\n+\n+    debug!(\n+        \"check_unused_unsafe({:?}, context={:?}, body={:?}, used_unsafe_blocks={:?})\",\n+        def_id, body, context, used_unsafe_blocks\n+    );\n+\n+    let mut unused_unsafes = vec![];\n+\n+    let mut visitor = UnusedUnsafeVisitor {\n+        tcx,\n+        used_unsafe_blocks,\n+        context,\n+        unused_unsafes: &mut unused_unsafes,\n+    };\n     intravisit::Visitor::visit_body(&mut visitor, body);\n+\n+    unused_unsafes\n }\n \n fn unsafety_check_result<'tcx>(\n@@ -436,56 +514,52 @@ fn unsafety_check_result<'tcx>(\n     let mut checker = UnsafetyChecker::new(body, def.did, tcx, param_env);\n     checker.visit_body(&body);\n \n-    check_unused_unsafe(tcx, def.did, &checker.used_unsafe, &mut checker.inherited_blocks);\n+    let unused_unsafes = (!tcx.is_closure(def.did.to_def_id()))\n+        .then(|| check_unused_unsafe(tcx, def.did, &checker.used_unsafe_blocks));\n \n     tcx.arena.alloc(UnsafetyCheckResult {\n-        violations: checker.violations.into(),\n-        unsafe_blocks: checker.inherited_blocks.into(),\n+        violations: checker.violations,\n+        used_unsafe_blocks: checker.used_unsafe_blocks,\n+        unused_unsafes,\n     })\n }\n \n-/// Returns the `HirId` for an enclosing scope that is also `unsafe`.\n-fn is_enclosed(\n-    tcx: TyCtxt<'_>,\n-    used_unsafe: &FxHashSet<hir::HirId>,\n-    id: hir::HirId,\n-    unsafe_op_in_unsafe_fn_allowed: bool,\n-) -> Option<(&'static str, hir::HirId)> {\n-    let parent_id = tcx.hir().get_parent_node(id);\n-    if parent_id != id {\n-        if used_unsafe.contains(&parent_id) {\n-            Some((\"block\", parent_id))\n-        } else if let Some(Node::Item(&hir::Item {\n-            kind: hir::ItemKind::Fn(ref sig, _, _), ..\n-        })) = tcx.hir().find(parent_id)\n-        {\n-            if sig.header.unsafety == hir::Unsafety::Unsafe && unsafe_op_in_unsafe_fn_allowed {\n-                Some((\"fn\", parent_id))\n-            } else {\n-                None\n-            }\n-        } else {\n-            is_enclosed(tcx, used_unsafe, parent_id, unsafe_op_in_unsafe_fn_allowed)\n-        }\n-    } else {\n-        None\n-    }\n-}\n-\n-fn report_unused_unsafe(tcx: TyCtxt<'_>, used_unsafe: &FxHashSet<hir::HirId>, id: hir::HirId) {\n+fn report_unused_unsafe(tcx: TyCtxt<'_>, kind: UnusedUnsafe, id: HirId) {\n     let span = tcx.sess.source_map().guess_head_span(tcx.hir().span(id));\n     tcx.struct_span_lint_hir(UNUSED_UNSAFE, id, span, |lint| {\n         let msg = \"unnecessary `unsafe` block\";\n         let mut db = lint.build(msg);\n         db.span_label(span, msg);\n-        if let Some((kind, id)) =\n-            is_enclosed(tcx, used_unsafe, id, unsafe_op_in_unsafe_fn_allowed(tcx, id))\n-        {\n-            db.span_label(\n-                tcx.sess.source_map().guess_head_span(tcx.hir().span(id)),\n-                format!(\"because it's nested under this `unsafe` {}\", kind),\n-            );\n+        match kind {\n+            UnusedUnsafe::Unused => {}\n+            UnusedUnsafe::InUnsafeBlock(id) => {\n+                db.span_label(\n+                    tcx.sess.source_map().guess_head_span(tcx.hir().span(id)),\n+                    format!(\"because it's nested under this `unsafe` block\"),\n+                );\n+            }\n+            UnusedUnsafe::InUnsafeFn(id, usage_lint_root) => {\n+                db.span_label(\n+                    tcx.sess.source_map().guess_head_span(tcx.hir().span(id)),\n+                    format!(\"because it's nested under this `unsafe` fn\"),\n+                )\n+                .note(\n+                    \"this `unsafe` block does contain unsafe operations, \\\n+                    but those are already allowed in an `unsafe fn`\",\n+                );\n+                let (level, source) =\n+                    tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, usage_lint_root);\n+                assert_eq!(level, Level::Allow);\n+                lint::explain_lint_level_source(\n+                    tcx.sess,\n+                    UNSAFE_OP_IN_UNSAFE_FN,\n+                    Level::Allow,\n+                    source,\n+                    &mut db,\n+                );\n+            }\n         }\n+\n         db.emit();\n     });\n }\n@@ -498,7 +572,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         return;\n     }\n \n-    let UnsafetyCheckResult { violations, unsafe_blocks } = tcx.unsafety_check_result(def_id);\n+    let UnsafetyCheckResult { violations, unused_unsafes, .. } = tcx.unsafety_check_result(def_id);\n \n     for &UnsafetyViolation { source_info, lint_root, kind, details } in violations.iter() {\n         let (description, note) = details.description_and_note();\n@@ -539,20 +613,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         }\n     }\n \n-    let (mut unsafe_used, mut unsafe_unused): (FxHashSet<_>, Vec<_>) = Default::default();\n-    for &(block_id, is_used) in unsafe_blocks.iter() {\n-        if is_used {\n-            unsafe_used.insert(block_id);\n-        } else {\n-            unsafe_unused.push(block_id);\n-        }\n-    }\n-    // The unused unsafe blocks might not be in source order; sort them so that the unused unsafe\n-    // error messages are properly aligned and the issue-45107 and lint-unused-unsafe tests pass.\n-    unsafe_unused.sort_by_cached_key(|hir_id| tcx.hir().span(*hir_id));\n-\n-    for &block_id in &unsafe_unused {\n-        report_unused_unsafe(tcx, &unsafe_used, block_id);\n+    for &(block_id, kind) in unused_unsafes.as_ref().unwrap() {\n+        report_unused_unsafe(tcx, kind, block_id);\n     }\n }\n "}, {"sha": "95a537ed2823065ba3d4bd764301c1affb0761b7", "filename": "src/test/ui/span/lint-unused-unsafe-thir.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.rs?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -0,0 +1,61 @@\n+// FIXME: This file is tracking old lint behavior that's still unchanged in the\n+// unstable -Zthir-unsafeck implementation. See lint-unused-unsafe.rs for more details.\n+//\n+// Exercise the unused_unsafe attribute in some positive and negative cases\n+\n+// compile-flags: -Zthir-unsafeck\n+\n+#![allow(dead_code)]\n+#![deny(unused_unsafe)]\n+\n+\n+mod foo {\n+    extern \"C\" {\n+        pub fn bar();\n+    }\n+}\n+\n+fn callback<T, F>(_f: F) -> T where F: FnOnce() -> T { panic!() }\n+unsafe fn unsf() {}\n+\n+fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block\n+fn bad2() { unsafe { bad1() } }          //~ ERROR: unnecessary `unsafe` block\n+unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n+fn bad4() { unsafe { callback(||{}) } }  //~ ERROR: unnecessary `unsafe` block\n+unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n+fn bad6() {\n+    unsafe {                             // don't put the warning here\n+        unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+            unsf()\n+        }\n+    }\n+}\n+unsafe fn bad7() {\n+    unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+        unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+            unsf()\n+        }\n+    }\n+}\n+\n+unsafe fn good0() { unsf() }\n+fn good1() { unsafe { unsf() } }\n+fn good2() {\n+    /* bug uncovered when implementing warning about unused unsafe blocks. Be\n+       sure that when purity is inherited that the source of the unsafe-ness\n+       is tracked correctly */\n+    unsafe {\n+        unsafe fn what() -> Vec<String> { panic!() }\n+\n+        callback(|| {\n+            what();\n+        });\n+    }\n+}\n+\n+unsafe fn good3() { foo::bar() }\n+fn good4() { unsafe { foo::bar() } }\n+\n+#[allow(unused_unsafe)] fn allowed() { unsafe {} }\n+\n+fn main() {}"}, {"sha": "6654910c5cdc395562a1093775cc2bd7582a33e0", "filename": "src/test/ui/span/lint-unused-unsafe-thir.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.stderr?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -1,61 +1,61 @@\n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:19:13\n+  --> $DIR/lint-unused-unsafe-thir.rs:21:13\n    |\n LL | fn bad1() { unsafe {} }\n    |             ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:7:9\n+  --> $DIR/lint-unused-unsafe-thir.rs:9:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:20:13\n+  --> $DIR/lint-unused-unsafe-thir.rs:22:13\n    |\n LL | fn bad2() { unsafe { bad1() } }\n    |             ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:21:20\n+  --> $DIR/lint-unused-unsafe-thir.rs:23:20\n    |\n LL | unsafe fn bad3() { unsafe {} }\n    | ----------------   ^^^^^^ unnecessary `unsafe` block\n    | |\n    | because it's nested under this `unsafe` fn\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:22:13\n+  --> $DIR/lint-unused-unsafe-thir.rs:24:13\n    |\n LL | fn bad4() { unsafe { callback(||{}) } }\n    |             ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:23:20\n+  --> $DIR/lint-unused-unsafe-thir.rs:25:20\n    |\n LL | unsafe fn bad5() { unsafe { unsf() } }\n    | ----------------   ^^^^^^ unnecessary `unsafe` block\n    | |\n    | because it's nested under this `unsafe` fn\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:26:9\n+  --> $DIR/lint-unused-unsafe-thir.rs:28:9\n    |\n LL |     unsafe {                             // don't put the warning here\n    |     ------ because it's nested under this `unsafe` block\n LL |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:33:9\n+  --> $DIR/lint-unused-unsafe-thir.rs:35:9\n    |\n LL |     unsafe {\n    |     ------ because it's nested under this `unsafe` block\n LL |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:32:5\n+  --> $DIR/lint-unused-unsafe-thir.rs:34:5\n    |\n LL | unsafe fn bad7() {\n    | ---------------- because it's nested under this `unsafe` fn", "previous_filename": "src/test/ui/span/lint-unused-unsafe.thir.stderr"}, {"sha": "850550a1d8f70293b23992933a8d333f6b3a64a9", "filename": "src/test/ui/span/lint-unused-unsafe.mir.stderr", "status": "modified", "additions": 1776, "deletions": 19, "changes": 1795, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -1,67 +1,1824 @@\n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:19:13\n+  --> $DIR/lint-unused-unsafe.rs:26:13\n    |\n LL | fn bad1() { unsafe {} }\n    |             ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:7:9\n+  --> $DIR/lint-unused-unsafe.rs:14:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:20:13\n+  --> $DIR/lint-unused-unsafe.rs:27:13\n    |\n LL | fn bad2() { unsafe { bad1() } }\n    |             ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:21:20\n+  --> $DIR/lint-unused-unsafe.rs:28:20\n    |\n LL | unsafe fn bad3() { unsafe {} }\n-   | ----------------   ^^^^^^ unnecessary `unsafe` block\n-   | |\n-   | because it's nested under this `unsafe` fn\n+   |                    ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:22:13\n+  --> $DIR/lint-unused-unsafe.rs:29:13\n    |\n LL | fn bad4() { unsafe { callback(||{}) } }\n    |             ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:23:20\n+  --> $DIR/lint-unused-unsafe.rs:30:20\n    |\n LL | unsafe fn bad5() { unsafe { unsf() } }\n    | ----------------   ^^^^^^ unnecessary `unsafe` block\n    | |\n    | because it's nested under this `unsafe` fn\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+   = note: `#[allow(unsafe_op_in_unsafe_fn)]` on by default\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:26:9\n+  --> $DIR/lint-unused-unsafe.rs:32:5\n    |\n-LL |     unsafe {                             // don't put the warning here\n-   |     ------ because it's nested under this `unsafe` block\n-LL |         unsafe {\n-   |         ^^^^^^ unnecessary `unsafe` block\n+LL |     unsafe {\n+   |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:32:5\n+  --> $DIR/lint-unused-unsafe.rs:39:5\n    |\n-LL | unsafe fn bad7() {\n-   | ---------------- because it's nested under this `unsafe` fn\n LL |     unsafe {\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:33:9\n+  --> $DIR/lint-unused-unsafe.rs:40:9\n    |\n LL | unsafe fn bad7() {\n    | ---------------- because it's nested under this `unsafe` fn\n LL |     unsafe {\n LL |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:74:9\n+   |\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:83:9\n+   |\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:84:13\n+   |\n+LL |             unsafe {}\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:85:13\n+   |\n+LL |             unsafe {}\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:90:9\n+   |\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:100:13\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+LL |             unsf();\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:101:13\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:102:13\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:112:17\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |                 unsafe { unsf() }\n+   |                 ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:110:20\n+   |\n+LL |             #[deny(unused_unsafe)]\n+   |                    ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:113:17\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |                 unsafe { unsf() }\n+   |                 ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:114:17\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |                 unsafe { unsf() }\n+   |                 ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:124:9\n+   |\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:134:9\n+   |\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:135:13\n+   |\n+LL |             unsafe {}\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:136:13\n+   |\n+LL |             unsafe {}\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:142:9\n+   |\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:153:13\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+LL |             unsf();\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:154:13\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:155:13\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:166:17\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |                 unsafe { unsf() }\n+   |                 ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:164:20\n+   |\n+LL |             #[deny(unused_unsafe)]\n+   |                    ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:167:17\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |                 unsafe { unsf() }\n+   |                 ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:168:17\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |                 unsafe { unsf() }\n+   |                 ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:178:9\n+   |\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:188:9\n+   |\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:189:13\n+   |\n+LL |             unsafe {}\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:190:13\n+   |\n+LL |             unsafe {}\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:196:9\n+   |\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:197:13\n+   |\n+LL |     unsafe fn granularity_2() {\n+   |     ------------------------- because it's nested under this `unsafe` fn\n+LL |         unsafe {\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:194:13\n+   |\n+LL |     #[allow(unsafe_op_in_unsafe_fn)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:198:13\n+   |\n+LL |     unsafe fn granularity_2() {\n+   |     ------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:199:13\n+   |\n+LL |     unsafe fn granularity_2() {\n+   |     ------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:205:9\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:203:13\n+   |\n+LL |     #[allow(unsafe_op_in_unsafe_fn)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:207:13\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:208:13\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:209:13\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             unsafe { unsf() }\n+   |             ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:220:17\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |                 unsafe { unsf() }\n+   |                 ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:218:20\n+   |\n+LL |             #[deny(unused_unsafe)]\n+   |                    ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:221:17\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |                 unsafe { unsf() }\n+   |                 ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:222:17\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+...\n+LL |                 unsafe { unsf() }\n+   |                 ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:242:9\n+   |\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:254:9\n+   |\n+LL |     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n+   |     ----------------------------------------------- because it's nested under this `unsafe` fn\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:252:13\n+   |\n+LL |     #[allow(unsafe_op_in_unsafe_fn)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:268:13\n+   |\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+LL |             unsafe {\n+   |             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:286:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:295:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:296:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:297:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:302:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:312:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             unsf();\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:313:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:314:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:324:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:322:20\n+   |\n+LL |             #[deny(unused_unsafe)]\n+   |                    ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:325:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:326:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:336:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:346:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:347:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:348:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:354:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:365:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             unsf();\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:366:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:367:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:378:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:376:20\n+   |\n+LL |             #[deny(unused_unsafe)]\n+   |                    ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:379:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:380:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:390:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:400:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:401:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:402:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:408:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:409:24\n+   |\n+LL |     unsafe fn granularity_2() {\n+   |     ------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:406:13\n+   |\n+LL |     #[allow(unsafe_op_in_unsafe_fn)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:410:24\n+   |\n+LL |     unsafe fn granularity_2() {\n+   |     ------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:411:24\n+   |\n+LL |     unsafe fn granularity_2() {\n+   |     ------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:417:20\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:415:13\n+   |\n+LL |     #[allow(unsafe_op_in_unsafe_fn)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:419:24\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:420:24\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:421:24\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             let _ = || unsafe { unsf() };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:432:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:430:20\n+   |\n+LL |             #[deny(unused_unsafe)]\n+   |                    ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:433:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:434:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:454:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:466:20\n+   |\n+LL |     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n+   |     ----------------------------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:464:13\n+   |\n+LL |     #[allow(unsafe_op_in_unsafe_fn)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:480:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:499:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:508:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:509:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:510:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:515:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:525:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             let _ = || unsf();\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:526:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:527:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:537:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { let _ = || unsf(); };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:535:20\n+   |\n+LL |             #[deny(unused_unsafe)]\n+   |                    ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:538:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { let _ = || unsf(); };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:539:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { let _ = || unsf(); };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:549:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:559:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:560:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:561:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:567:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:578:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             let _ = || unsf();\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:579:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:580:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:591:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { let _ = || unsf(); };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:589:20\n+   |\n+LL |             #[deny(unused_unsafe)]\n+   |                    ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:592:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { let _ = || unsf(); };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:593:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { let _ = || unsf(); };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:603:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:613:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:614:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:615:24\n+   |\n+LL |             let _ = || unsafe {};\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:621:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:622:24\n+   |\n+LL |     unsafe fn granularity_2() {\n+   |     ------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:619:13\n+   |\n+LL |     #[allow(unsafe_op_in_unsafe_fn)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:623:24\n+   |\n+LL |     unsafe fn granularity_2() {\n+   |     ------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:624:24\n+   |\n+LL |     unsafe fn granularity_2() {\n+   |     ------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:630:20\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:628:13\n+   |\n+LL |     #[allow(unsafe_op_in_unsafe_fn)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:632:24\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:633:24\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:634:24\n+   |\n+LL |     unsafe fn top_level_used_2() {\n+   |     ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |             let _ = || unsafe { let _ = || unsf(); };\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:645:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { let _ = || unsf(); };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:643:20\n+   |\n+LL |             #[deny(unused_unsafe)]\n+   |                    ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:646:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { let _ = || unsf(); };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:647:28\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { let _ = || unsf(); };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:667:20\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:679:20\n+   |\n+LL |     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n+   |     ----------------------------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:677:13\n+   |\n+LL |     #[allow(unsafe_op_in_unsafe_fn)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:693:24\n+   |\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:711:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:721:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:722:28\n+   |\n+LL |                 let _ = || unsafe {};\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:723:28\n+   |\n+LL |                 let _ = || unsafe {};\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:729:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:740:28\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 unsf();\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:741:28\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:742:28\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:753:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:751:24\n+   |\n+LL |                 #[deny(unused_unsafe)]\n+   |                        ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:754:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:755:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:765:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:775:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:776:28\n+   |\n+LL |                 let _ = || unsafe {};\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:777:28\n+   |\n+LL |                 let _ = || unsafe {};\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:783:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:784:28\n+   |\n+LL |         unsafe fn granularity_2() {\n+   |         ------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:781:17\n+   |\n+LL |         #[allow(unsafe_op_in_unsafe_fn)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:785:28\n+   |\n+LL |         unsafe fn granularity_2() {\n+   |         ------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:786:28\n+   |\n+LL |         unsafe fn granularity_2() {\n+   |         ------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:792:24\n+   |\n+LL |         unsafe fn top_level_used_2() {\n+   |         ---------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:790:17\n+   |\n+LL |         #[allow(unsafe_op_in_unsafe_fn)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:794:28\n+   |\n+LL |         unsafe fn top_level_used_2() {\n+   |         ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:795:28\n+   |\n+LL |         unsafe fn top_level_used_2() {\n+   |         ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:796:28\n+   |\n+LL |         unsafe fn top_level_used_2() {\n+   |         ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:807:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:805:24\n+   |\n+LL |                 #[deny(unused_unsafe)]\n+   |                        ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:808:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:809:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:829:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:841:24\n+   |\n+LL |         unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n+   |         ----------------------------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:839:17\n+   |\n+LL |         #[allow(unsafe_op_in_unsafe_fn)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:855:28\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 let _ = || unsafe {\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:869:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:879:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:880:28\n+   |\n+LL |                 let _ = || unsafe {};\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:881:28\n+   |\n+LL |                 let _ = || unsafe {};\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:887:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:898:28\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 unsf();\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:899:28\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:900:28\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:911:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:909:24\n+   |\n+LL |                 #[deny(unused_unsafe)]\n+   |                        ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:912:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:913:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:923:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:933:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:934:28\n+   |\n+LL |                 let _ = || unsafe {};\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:935:28\n+   |\n+LL |                 let _ = || unsafe {};\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:941:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:942:28\n+   |\n+LL |         unsafe fn granularity_2() {\n+   |         ------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:939:17\n+   |\n+LL |         #[allow(unsafe_op_in_unsafe_fn)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:943:28\n+   |\n+LL |         unsafe fn granularity_2() {\n+   |         ------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:944:28\n+   |\n+LL |         unsafe fn granularity_2() {\n+   |         ------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:950:24\n+   |\n+LL |         unsafe fn top_level_used_2() {\n+   |         ---------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:948:17\n+   |\n+LL |         #[allow(unsafe_op_in_unsafe_fn)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:952:28\n+   |\n+LL |         unsafe fn top_level_used_2() {\n+   |         ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:953:28\n+   |\n+LL |         unsafe fn top_level_used_2() {\n+   |         ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:954:28\n+   |\n+LL |         unsafe fn top_level_used_2() {\n+   |         ---------------------------- because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = || unsafe { unsf() };\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:965:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:963:24\n+   |\n+LL |                 #[deny(unused_unsafe)]\n+   |                        ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:966:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:967:32\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+...\n+LL |                     let _ = || unsafe { unsf() };\n+   |                                ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:987:24\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:999:24\n+   |\n+LL |         unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n+   |         ----------------------------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:997:17\n+   |\n+LL |         #[allow(unsafe_op_in_unsafe_fn)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1013:28\n+   |\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 let _ = || unsafe {\n+   |                            ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1044:9\n+   |\n+LL |     unsafe fn multiple_unsafe_op_in_unsafe_fn_allows() {\n+   |     -------------------------------------------------- because it's nested under this `unsafe` fn\n+LL |         unsafe {\n+   |         ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:1045:21\n+   |\n+LL |             #[allow(unsafe_op_in_unsafe_fn)]\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1059:29\n+   |\n+LL |             let _ = async { unsafe {\n+   |                             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1066:33\n+   |\n+LL |             let _ = async { unsafe {\n+   |                             ------ because it's nested under this `unsafe` block\n+LL |                 let _ = async { unsf() };\n+LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n+   |                                 ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1067:33\n+   |\n+LL |             let _ = async { unsafe {\n+   |                             ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n+   |                                 ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1068:33\n+   |\n+LL |             let _ = async { unsafe {\n+   |                             ------ because it's nested under this `unsafe` block\n+...\n+LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n+   |                                 ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1073:29\n+   |\n+LL |             let _ = async { unsafe {\n+   |                             ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1074:33\n+   |\n+LL |     async unsafe fn async_blocks() {\n+   |     ------------------------------ because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n+   |                                 ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/lint-unused-unsafe.rs:1071:17\n+   |\n+LL |         #[allow(unsafe_op_in_unsafe_fn)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1075:33\n+   |\n+LL |     async unsafe fn async_blocks() {\n+   |     ------------------------------ because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n+   |                                 ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1076:33\n+   |\n+LL |     async unsafe fn async_blocks() {\n+   |     ------------------------------ because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n+   |                                 ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1078:29\n+   |\n+LL |     async unsafe fn async_blocks() {\n+   |     ------------------------------ because it's nested under this `unsafe` fn\n+...\n+LL |             let _ = async { unsafe {\n+   |                             ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1080:33\n+   |\n+LL |     async unsafe fn async_blocks() {\n+   |     ------------------------------ because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n+   |                                 ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1081:33\n+   |\n+LL |     async unsafe fn async_blocks() {\n+   |     ------------------------------ because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n+   |                                 ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1082:33\n+   |\n+LL |     async unsafe fn async_blocks() {\n+   |     ------------------------------ because it's nested under this `unsafe` fn\n+...\n+LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n+   |                                 ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1092:22\n+   |\n+LL |         let _x: [(); unsafe { 0 }] = [];\n+   |                      ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:1096:22\n+   |\n+LL |         let _x: [(); unsafe { unsafe { size() } }] = [];\n+   |                      ^^^^^^ unnecessary `unsafe` block\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 201 previous errors\n "}, {"sha": "f8d1dff3572becea2e7f8393c0e4eb14b972c28a", "filename": "src/test/ui/span/lint-unused-unsafe.rs", "status": "modified", "additions": 1045, "deletions": 4, "changes": 1049, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -1,7 +1,14 @@\n // Exercise the unused_unsafe attribute in some positive and negative cases\n \n-// revisions: mir thir\n-// [thir]compile-flags: -Zthir-unsafeck\n+\n+// edition:2018\n+\n+// revisions: mir\n+\n+// FIXME: Adapt -Zthir-unsafeck to behave the same as the mir version after #93678,\n+// then delete lint-unused-unsafe-thir.rs, and go back to using the settings below\n+// // revisions: mir thir\n+// // [thir]compile-flags: -Zthir-unsafeck\n \n #![allow(dead_code)]\n #![deny(unused_unsafe)]\n@@ -22,8 +29,8 @@ unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n fn bad4() { unsafe { callback(||{}) } }  //~ ERROR: unnecessary `unsafe` block\n unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n fn bad6() {\n-    unsafe {                             // don't put the warning here\n-        unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+    unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+        unsafe {                         // don't put the warning here\n             unsf()\n         }\n     }\n@@ -57,3 +64,1037 @@ fn good4() { unsafe { foo::bar() } }\n #[allow(unused_unsafe)] fn allowed() { unsafe {} }\n \n fn main() {}\n+\n+mod additional_tests {\n+    unsafe fn unsf() {}\n+\n+    // some tests\n+\n+    fn inner_ignored() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            #[allow(unused_unsafe)]\n+            unsafe {\n+                unsf()\n+            }\n+        }\n+    }\n+\n+    fn multi_level_unused() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            unsafe {} //~ ERROR: unnecessary `unsafe` block\n+            unsafe {} //~ ERROR: unnecessary `unsafe` block\n+        }\n+    }\n+\n+    fn granularity() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() }\n+            unsafe { unsf() }\n+            unsafe { unsf() }\n+        }\n+    }\n+\n+    fn top_level_used() {\n+        unsafe {\n+            unsf();\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+        }\n+\n+    }\n+\n+    fn top_level_ignored() {\n+        #[allow(unused_unsafe)]\n+        unsafe {\n+            #[deny(unused_unsafe)]\n+            {\n+                unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+                unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+                unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            }\n+        }\n+\n+    }\n+\n+    // same tests in unsafe fn without unsafe_op_in_unsafe_fn allowed\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn inner_ignored_1() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            #[allow(unused_unsafe)]\n+            unsafe {\n+                unsf()\n+            }\n+        }\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn multi_level_unused_1() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            unsafe {} //~ ERROR: unnecessary `unsafe` block\n+            unsafe {} //~ ERROR: unnecessary `unsafe` block\n+        }\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granularity_1() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() }\n+            unsafe { unsf() }\n+            unsafe { unsf() }\n+        }\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_used_1() {\n+        unsafe {\n+            unsf();\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+        }\n+\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_ignored_1() {\n+        #[allow(unused_unsafe)]\n+        unsafe {\n+            #[deny(unused_unsafe)]\n+            {\n+                unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+                unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+                unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            }\n+        }\n+    }\n+\n+    // same tests, but unsafe_op_in_unsafe_fn allowed,\n+    // so that *all* unsafe blocks are unused\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn inner_ignored_2() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            #[allow(unused_unsafe)]\n+            unsafe {\n+                unsf()\n+            }\n+        }\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn multi_level_unused_2() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            unsafe {} //~ ERROR: unnecessary `unsafe` block\n+            unsafe {} //~ ERROR: unnecessary `unsafe` block\n+        }\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granularity_2() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+        }\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_used_2() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            unsf();\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+        }\n+\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_ignored_2() {\n+        #[allow(unused_unsafe)]\n+        unsafe {\n+            #[deny(unused_unsafe)]\n+            {\n+                unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+                unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+                unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            }\n+        }\n+    }\n+\n+    // additional tests when using unsafe_op_in_unsafe_fn\n+    // in more complex ways\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn() {\n+        unsafe {\n+            #[deny(unsafe_op_in_unsafe_fn)]\n+            {\n+                unsf();\n+            }\n+        }\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn_2() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            unsafe {\n+                #[deny(unsafe_op_in_unsafe_fn)]\n+                {\n+                    unsf();\n+                }\n+            }\n+        }\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            unsafe {\n+                #[deny(unsafe_op_in_unsafe_fn)]\n+                {\n+                    unsf();\n+                }\n+            }\n+            unsf();\n+        }\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn_4() {\n+        unsafe {\n+            unsafe { //~ ERROR: unnecessary `unsafe` block\n+                unsf();\n+            }\n+            #[deny(unsafe_op_in_unsafe_fn)]\n+            {\n+                unsf();\n+            }\n+        }\n+    }\n+}\n+\n+// the same set of tests, with closures everywhere\n+mod additional_tests_closures {\n+    unsafe fn unsf() {}\n+\n+    // some tests\n+\n+    fn inner_ignored() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            #[allow(unused_unsafe)]\n+            let _ = || unsafe {\n+                unsf()\n+            };\n+        };\n+    }\n+\n+    fn multi_level_unused() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+        };\n+    }\n+\n+    fn granularity() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() };\n+            let _ = || unsafe { unsf() };\n+            let _ = || unsafe { unsf() };\n+        };\n+    }\n+\n+    fn top_level_used() {\n+        let _ = || unsafe {\n+            unsf();\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+        };\n+\n+    }\n+\n+    fn top_level_ignored() {\n+        #[allow(unused_unsafe)]\n+        let _ = || unsafe {\n+            #[deny(unused_unsafe)]\n+            {\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            }\n+        };\n+\n+    }\n+\n+    // same tests in unsafe fn without unsafe_op_in_unsafe_fn allowed\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn inner_ignored_1() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            #[allow(unused_unsafe)]\n+            let _ = || unsafe {\n+                unsf()\n+            };\n+        };\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn multi_level_unused_1() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+        };\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granularity_1() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() };\n+            let _ = || unsafe { unsf() };\n+            let _ = || unsafe { unsf() };\n+        };\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_used_1() {\n+        let _ = || unsafe {\n+            unsf();\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+        };\n+\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_ignored_1() {\n+        #[allow(unused_unsafe)]\n+        let _ = || unsafe {\n+            #[deny(unused_unsafe)]\n+            {\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            }\n+        };\n+    }\n+\n+    // same tests, but unsafe_op_in_unsafe_fn allowed,\n+    // so that *all* unsafe blocks are unused\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn inner_ignored_2() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            #[allow(unused_unsafe)]\n+            let _ = || unsafe {\n+                unsf()\n+            };\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn multi_level_unused_2() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granularity_2() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_used_2() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            unsf();\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+        };\n+\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_ignored_2() {\n+        #[allow(unused_unsafe)]\n+        let _ = || unsafe {\n+            #[deny(unused_unsafe)]\n+            {\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            }\n+        };\n+    }\n+\n+    // additional tests when using unsafe_op_in_unsafe_fn\n+    // in more complex ways\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn() {\n+        let _ = || unsafe {\n+            #[deny(unsafe_op_in_unsafe_fn)]\n+            {\n+                unsf();\n+            }\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn_2() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {\n+                #[deny(unsafe_op_in_unsafe_fn)]\n+                {\n+                    unsf();\n+                }\n+            };\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {\n+                #[deny(unsafe_op_in_unsafe_fn)]\n+                {\n+                    unsf();\n+                }\n+            };\n+            unsf();\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn_4() {\n+        let _ = || unsafe {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                unsf();\n+            };\n+            #[deny(unsafe_op_in_unsafe_fn)]\n+            {\n+                unsf();\n+            }\n+        };\n+    }\n+}\n+\n+// the same set of tests, with closures everywhere\n+// and closures on the unsafe fn calls\n+mod additional_tests_even_more_closures {\n+    unsafe fn unsf() {}\n+\n+    // some tests\n+\n+    fn inner_ignored() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            #[allow(unused_unsafe)]\n+            let _ = || unsafe {\n+                let _ = || unsf();\n+            };\n+        };\n+    }\n+\n+    fn multi_level_unused() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+        };\n+    }\n+\n+    fn granularity() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); };\n+            let _ = || unsafe { let _ = || unsf(); };\n+            let _ = || unsafe { let _ = || unsf(); };\n+        };\n+    }\n+\n+    fn top_level_used() {\n+        let _ = || unsafe {\n+            let _ = || unsf();\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+        };\n+\n+    }\n+\n+    fn top_level_ignored() {\n+        #[allow(unused_unsafe)]\n+        let _ = || unsafe {\n+            #[deny(unused_unsafe)]\n+            {\n+                let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            }\n+        };\n+\n+    }\n+\n+    // same tests in unsafe fn without unsafe_op_in_unsafe_fn allowed\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn inner_ignored_1() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            #[allow(unused_unsafe)]\n+            let _ = || unsafe {\n+                let _ = || unsf();\n+            };\n+        };\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn multi_level_unused_1() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+        };\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granularity_1() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); };\n+            let _ = || unsafe { let _ = || unsf(); };\n+            let _ = || unsafe { let _ = || unsf(); };\n+        };\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_used_1() {\n+        let _ = || unsafe {\n+            let _ = || unsf();\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+        };\n+\n+    }\n+\n+    #[deny(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_ignored_1() {\n+        #[allow(unused_unsafe)]\n+        let _ = || unsafe {\n+            #[deny(unused_unsafe)]\n+            {\n+                let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            }\n+        };\n+    }\n+\n+    // same tests, but unsafe_op_in_unsafe_fn allowed,\n+    // so that *all* unsafe blocks are unused\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn inner_ignored_2() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            #[allow(unused_unsafe)]\n+            let _ = || unsafe {\n+                let _ = || unsf();\n+            };\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn multi_level_unused_2() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granularity_2() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_used_2() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsf();\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+        };\n+\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn top_level_ignored_2() {\n+        #[allow(unused_unsafe)]\n+        let _ = || unsafe {\n+            #[deny(unused_unsafe)]\n+            {\n+                let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            }\n+        };\n+    }\n+\n+    // additional tests when using unsafe_op_in_unsafe_fn\n+    // in more complex ways\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn() {\n+        let _ = || unsafe {\n+            #[deny(unsafe_op_in_unsafe_fn)]\n+            {\n+                let _ = || unsf();\n+            }\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn_2() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {\n+                #[deny(unsafe_op_in_unsafe_fn)]\n+                {\n+                    let _ = || unsf();\n+                }\n+            };\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n+        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {\n+                #[deny(unsafe_op_in_unsafe_fn)]\n+                {\n+                    let _ = || unsf();\n+                }\n+            };\n+            let _ = || unsf();\n+        };\n+    }\n+\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn_4() {\n+        let _ = || unsafe {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsf();\n+            };\n+            #[deny(unsafe_op_in_unsafe_fn)]\n+            {\n+                let _ = || unsf();\n+            }\n+        };\n+    }\n+}\n+\n+mod item_likes {\n+    unsafe fn unsf() {}\n+\n+    struct S;\n+    impl S {\n+        #[deny(unsafe_op_in_unsafe_fn)]\n+        unsafe fn inner_ignored_1() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                #[allow(unused_unsafe)]\n+                let _ = || unsafe {\n+                    unsf()\n+                };\n+            };\n+        }\n+\n+        #[deny(unsafe_op_in_unsafe_fn)]\n+        unsafe fn multi_level_unused_1() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+            };\n+        }\n+\n+        #[deny(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granularity_1() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n+            };\n+        }\n+\n+        #[deny(unsafe_op_in_unsafe_fn)]\n+        unsafe fn top_level_used_1() {\n+            let _ = || unsafe {\n+                unsf();\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            };\n+\n+        }\n+\n+        #[deny(unsafe_op_in_unsafe_fn)]\n+        unsafe fn top_level_ignored_1() {\n+            #[allow(unused_unsafe)]\n+            let _ = || unsafe {\n+                #[deny(unused_unsafe)]\n+                {\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                }\n+            };\n+        }\n+\n+        // same tests, but unsafe_op_in_unsafe_fn allowed,\n+        // so that *all* unsafe blocks are unused\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn inner_ignored_2() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                #[allow(unused_unsafe)]\n+                let _ = || unsafe {\n+                    unsf()\n+                };\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn multi_level_unused_2() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granularity_2() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn top_level_used_2() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                unsf();\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            };\n+\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn top_level_ignored_2() {\n+            #[allow(unused_unsafe)]\n+            let _ = || unsafe {\n+                #[deny(unused_unsafe)]\n+                {\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                }\n+            };\n+        }\n+\n+        // additional tests when using unsafe_op_in_unsafe_fn\n+        // in more complex ways\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granular_disallow_op_in_unsafe_fn() {\n+            let _ = || unsafe {\n+                #[deny(unsafe_op_in_unsafe_fn)]\n+                {\n+                    unsf();\n+                }\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granular_disallow_op_in_unsafe_fn_2() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {\n+                    #[deny(unsafe_op_in_unsafe_fn)]\n+                    {\n+                        unsf();\n+                    }\n+                };\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {\n+                    #[deny(unsafe_op_in_unsafe_fn)]\n+                    {\n+                        unsf();\n+                    }\n+                };\n+                unsf();\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granular_disallow_op_in_unsafe_fn_4() {\n+            let _ = || unsafe {\n+                let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                    unsf();\n+                };\n+                #[deny(unsafe_op_in_unsafe_fn)]\n+                {\n+                    unsf();\n+                }\n+            };\n+        }\n+    }\n+\n+    trait T {\n+        #[deny(unsafe_op_in_unsafe_fn)]\n+        unsafe fn inner_ignored_1() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                #[allow(unused_unsafe)]\n+                let _ = || unsafe {\n+                    unsf()\n+                };\n+            };\n+        }\n+\n+        #[deny(unsafe_op_in_unsafe_fn)]\n+        unsafe fn multi_level_unused_1() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+            };\n+        }\n+\n+        #[deny(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granularity_1() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n+            };\n+        }\n+\n+        #[deny(unsafe_op_in_unsafe_fn)]\n+        unsafe fn top_level_used_1() {\n+            let _ = || unsafe {\n+                unsf();\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            };\n+\n+        }\n+\n+        #[deny(unsafe_op_in_unsafe_fn)]\n+        unsafe fn top_level_ignored_1() {\n+            #[allow(unused_unsafe)]\n+            let _ = || unsafe {\n+                #[deny(unused_unsafe)]\n+                {\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                }\n+            };\n+        }\n+\n+        // same tests, but unsafe_op_in_unsafe_fn allowed,\n+        // so that *all* unsafe blocks are unused\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn inner_ignored_2() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                #[allow(unused_unsafe)]\n+                let _ = || unsafe {\n+                    unsf()\n+                };\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn multi_level_unused_2() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {}; //~ ERROR: unnecessary `unsafe` block\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granularity_2() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn top_level_used_2() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                unsf();\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            };\n+\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn top_level_ignored_2() {\n+            #[allow(unused_unsafe)]\n+            let _ = || unsafe {\n+                #[deny(unused_unsafe)]\n+                {\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                    let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                }\n+            };\n+        }\n+\n+        // additional tests when using unsafe_op_in_unsafe_fn\n+        // in more complex ways\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granular_disallow_op_in_unsafe_fn() {\n+            let _ = || unsafe {\n+                #[deny(unsafe_op_in_unsafe_fn)]\n+                {\n+                    unsf();\n+                }\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granular_disallow_op_in_unsafe_fn_2() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {\n+                    #[deny(unsafe_op_in_unsafe_fn)]\n+                    {\n+                        unsf();\n+                    }\n+                };\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe {\n+                    #[deny(unsafe_op_in_unsafe_fn)]\n+                    {\n+                        unsf();\n+                    }\n+                };\n+                unsf();\n+            };\n+        }\n+\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        unsafe fn granular_disallow_op_in_unsafe_fn_4() {\n+            let _ = || unsafe {\n+                let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+                    unsf();\n+                };\n+                #[deny(unsafe_op_in_unsafe_fn)]\n+                {\n+                    unsf();\n+                }\n+            };\n+        }\n+    }\n+}\n+\n+mod additional_tests_extra {\n+    unsafe fn unsf() {}\n+\n+    // multiple uses with different `unsafe_op_in_unsafe_fn` in the same closure\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    unsafe fn granular_disallow_op_in_unsafe_fn() {\n+        let _ = || unsafe {\n+            let _ = || {\n+                unsf();\n+                #[deny(unsafe_op_in_unsafe_fn)]\n+                {\n+                    unsf();\n+                }\n+            };\n+        };\n+    }\n+\n+    #[warn(unsafe_op_in_unsafe_fn)]\n+    unsafe fn multiple_unsafe_op_in_unsafe_fn_allows() {\n+        unsafe { //~ ERROR: unnecessary `unsafe` block\n+            #[allow(unsafe_op_in_unsafe_fn)]\n+            {\n+                unsf();\n+            }\n+            #[allow(unsafe_op_in_unsafe_fn)]\n+            {\n+                unsf();\n+            }\n+        }\n+    }\n+\n+    async unsafe fn async_blocks() {\n+        #[deny(unsafe_op_in_unsafe_fn)]\n+        {\n+            let _ = async { unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = async { unsafe { let _ = async { unsf() }; }};\n+                let _ = async { unsafe { let _ = async { unsf() }; }};\n+                let _ = async { unsafe { let _ = async { unsf() }; }};\n+            }};\n+            let _ = async { unsafe {\n+                let _ = async { unsf() };\n+                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n+            }};\n+        }\n+        #[allow(unsafe_op_in_unsafe_fn)]\n+        {\n+            let _ = async { unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n+            }};\n+            let _ = async { unsafe { //~ ERROR: unnecessary `unsafe` block\n+                let _ = async { unsf() };\n+                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n+            }};\n+        }\n+    }\n+\n+    fn used_unsafe_in_const() {\n+        let _x: [(); unsafe { size() }] = [];\n+    }\n+\n+    fn unused_unsafe_in_const_1() {\n+        let _x: [(); unsafe { 0 }] = []; //~ ERROR: unnecessary `unsafe` block\n+    }\n+\n+    fn unused_unsafe_in_const_2() {\n+        let _x: [(); unsafe { unsafe { size() } }] = []; //~ ERROR: unnecessary `unsafe` block\n+    }\n+\n+    const unsafe fn size() -> usize { 0 }\n+}"}, {"sha": "163c101772c47c3ba871a369db550f90489c1c34", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45e2c2881d11324d610815bfff097e25c412199e/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr?ref=45e2c2881d11324d610815bfff097e25c412199e", "patch": "@@ -76,12 +76,10 @@ LL |     unsafe {}\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:47:14\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:47:5\n    |\n LL |     unsafe { unsafe { unsf() } }\n-   |     ------   ^^^^^^ unnecessary `unsafe` block\n-   |     |\n-   |     because it's nested under this `unsafe` block\n+   |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:58:5\n@@ -91,6 +89,13 @@ LL | unsafe fn allow_level() {\n ...\n LL |     unsafe { unsf() }\n    |     ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:51:9\n+   |\n+LL | #[allow(unsafe_op_in_unsafe_fn)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: unnecessary `unsafe` block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:70:9\n@@ -100,6 +105,13 @@ LL | unsafe fn nested_allow_level() {\n ...\n LL |         unsafe { unsf() }\n    |         ^^^^^^ unnecessary `unsafe` block\n+   |\n+   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:63:13\n+   |\n+LL |     #[allow(unsafe_op_in_unsafe_fn)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5"}]}