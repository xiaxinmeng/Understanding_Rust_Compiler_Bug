{"sha": "96899f8278b787280bd07d9ac9dce29a610ce40d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ODk5ZjgyNzhiNzg3MjgwYmQwN2Q5YWM5ZGNlMjlhNjEwY2U0MGQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-20T13:50:29Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-20T13:50:29Z"}, "message": "Merge #861\n\n861: Move parsing to a separate module r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d02a22f02908fd3c89e50845a06a89b997220fc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d02a22f02908fd3c89e50845a06a89b997220fc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96899f8278b787280bd07d9ac9dce29a610ce40d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96899f8278b787280bd07d9ac9dce29a610ce40d", "html_url": "https://github.com/rust-lang/rust/commit/96899f8278b787280bd07d9ac9dce29a610ce40d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96899f8278b787280bd07d9ac9dce29a610ce40d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "5b617e3bf8252887a3eb1ce76d4b62cbee74e551", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b617e3bf8252887a3eb1ce76d4b62cbee74e551", "html_url": "https://github.com/rust-lang/rust/commit/5b617e3bf8252887a3eb1ce76d4b62cbee74e551"}, {"sha": "86a67dce25f11ba9803a5727f77c02fd1f49e2c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/86a67dce25f11ba9803a5727f77c02fd1f49e2c0", "html_url": "https://github.com/rust-lang/rust/commit/86a67dce25f11ba9803a5727f77c02fd1f49e2c0"}], "stats": {"total": 314, "additions": 174, "deletions": 140}, "files": [{"sha": "b12282b3949edb97951377f06d2674ba1e971302", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -16,30 +16,29 @@\n #![allow(missing_docs)]\n //#![warn(unreachable_pub)] // rust-lang/rust#47816\n \n+mod syntax_kinds;\n+mod syntax_node;\n+mod syntax_text;\n+mod syntax_error;\n+mod parsing;\n+mod string_lexing;\n+mod validation;\n+mod ptr;\n+\n pub mod algo;\n pub mod ast;\n-mod lexer;\n-#[macro_use]\n-mod token_set;\n-mod grammar;\n-mod parser_api;\n-mod parser_impl;\n-mod reparsing;\n-mod string_lexing;\n-mod syntax_kinds;\n /// Utilities for simple uses of the parser.\n pub mod utils;\n-mod validation;\n-mod syntax_node;\n-mod ptr;\n \n pub use rowan::{SmolStr, TextRange, TextUnit};\n pub use crate::{\n     ast::AstNode,\n-    lexer::{tokenize, Token},\n     syntax_kinds::SyntaxKind,\n-    syntax_node::{Direction, SyntaxError, SyntaxNode, WalkEvent, Location, TreeArc},\n+    syntax_error::{SyntaxError, SyntaxErrorKind, Location},\n+    syntax_text::SyntaxText,\n+    syntax_node::{Direction,  SyntaxNode, WalkEvent, TreeArc},\n     ptr::{SyntaxNodePtr, AstPtr},\n+    parsing::{tokenize, Token},\n };\n \n use ra_text_edit::AtomTextEdit;\n@@ -59,9 +58,7 @@ impl SourceFile {\n     }\n \n     pub fn parse(text: &str) -> TreeArc<SourceFile> {\n-        let tokens = tokenize(&text);\n-        let (green, errors) =\n-            parser_impl::parse_with(syntax_node::GreenBuilder::new(), text, &tokens, grammar::root);\n+        let (green, errors) = parsing::parse_text(text);\n         SourceFile::new(green, errors)\n     }\n \n@@ -70,7 +67,7 @@ impl SourceFile {\n     }\n \n     pub fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<TreeArc<SourceFile>> {\n-        reparsing::incremental_reparse(self.syntax(), edit, self.errors())\n+        parsing::incremental_reparse(self.syntax(), edit, self.errors())\n             .map(|(green_node, errors)| SourceFile::new(green_node, errors))\n     }\n "}, {"sha": "761accd7be44671838de3596c8e7883d3ec430eb", "filename": "crates/ra_syntax/src/parsing.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -0,0 +1,25 @@\n+#[macro_use]\n+mod token_set;\n+mod builder;\n+mod lexer;\n+mod parser_impl;\n+mod parser_api;\n+mod grammar;\n+mod reparsing;\n+\n+use crate::{\n+    SyntaxError,\n+    parsing::builder::GreenBuilder,\n+    syntax_node::GreenNode,\n+};\n+\n+pub use self::lexer::{tokenize, Token};\n+\n+pub(crate) use self::reparsing::incremental_reparse;\n+\n+pub(crate) fn parse_text(text: &str) -> (GreenNode, Vec<SyntaxError>) {\n+    let tokens = tokenize(&text);\n+    let (green, errors) =\n+        parser_impl::parse_with(GreenBuilder::new(), text, &tokens, grammar::root);\n+    (green, errors)\n+}"}, {"sha": "9090c60c2ea6884ea295a3acbcd4146fab27dec2", "filename": "crates/ra_syntax/src/parsing/builder.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fbuilder.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,8 +1,9 @@\n use crate::{\n-    parser_impl::Sink,\n-    syntax_node::{GreenNode, RaTypes, SyntaxError},\n-    SmolStr, SyntaxKind,\n+    parsing::parser_impl::Sink,\n+    syntax_node::{GreenNode, RaTypes},\n+    SmolStr, SyntaxKind, SyntaxError,\n };\n+\n use rowan::GreenNodeBuilder;\n \n pub(crate) struct GreenBuilder {", "previous_filename": "crates/ra_syntax/src/syntax_node/builder.rs"}, {"sha": "bcdcd9f57863afaa5a917963880c26c836cc5b54", "filename": "crates/ra_syntax/src/parsing/grammar.rs", "status": "renamed", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -36,26 +36,46 @@ mod type_args;\n mod type_params;\n mod types;\n \n-pub(crate) use self::{\n-    expressions::block,\n-    items::{\n-        enum_variant_list, extern_item_list, impl_item_list, match_arm_list, mod_item_list,\n-        named_field_def_list, named_field_list, token_tree, trait_item_list, use_tree_list,\n-    },\n-};\n use crate::{\n-    parser_api::{CompletedMarker, Marker, Parser},\n-    token_set::TokenSet,\n+    SyntaxNode,\n     SyntaxKind::{self, *},\n+    parsing::{\n+        token_set::TokenSet,\n+        parser_api::{CompletedMarker, Marker, Parser}\n+    },\n };\n \n-pub(crate) fn root(p: &mut Parser) {\n+pub(super) fn root(p: &mut Parser) {\n     let m = p.start();\n     p.eat(SHEBANG);\n     items::mod_contents(p, false);\n     m.complete(p, SOURCE_FILE);\n }\n \n+pub(super) fn reparser(node: &SyntaxNode) -> Option<fn(&mut Parser)> {\n+    let res = match node.kind() {\n+        BLOCK => expressions::block,\n+        NAMED_FIELD_DEF_LIST => items::named_field_def_list,\n+        NAMED_FIELD_LIST => items::named_field_list,\n+        ENUM_VARIANT_LIST => items::enum_variant_list,\n+        MATCH_ARM_LIST => items::match_arm_list,\n+        USE_TREE_LIST => items::use_tree_list,\n+        EXTERN_ITEM_LIST => items::extern_item_list,\n+        TOKEN_TREE if node.first_child().unwrap().kind() == L_CURLY => items::token_tree,\n+        ITEM_LIST => {\n+            let parent = node.parent().unwrap();\n+            match parent.kind() {\n+                IMPL_BLOCK => items::impl_item_list,\n+                TRAIT_DEF => items::trait_item_list,\n+                MODULE => items::mod_item_list,\n+                _ => return None,\n+            }\n+        }\n+        _ => return None,\n+    };\n+    Some(res)\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq)]\n enum BlockLike {\n     Block,", "previous_filename": "crates/ra_syntax/src/grammar.rs"}, {"sha": "cd30e8a450c6192c9a9ef5ba3fec3a211db84646", "filename": "crates/ra_syntax/src/parsing/grammar/attributes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fattributes.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/attributes.rs"}, {"sha": "d5a4f4d7b94bab8abaee0c485aab46dcad7817c9", "filename": "crates/ra_syntax/src/parsing/grammar/expressions.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fexpressions.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -138,15 +138,15 @@ enum Op {\n }\n \n fn current_op(p: &Parser) -> (u8, Op) {\n-    if let Some(t) = p.next3() {\n+    if let Some(t) = p.current3() {\n         match t {\n             (L_ANGLE, L_ANGLE, EQ) => return (1, Op::Composite(SHLEQ, 3)),\n             (R_ANGLE, R_ANGLE, EQ) => return (1, Op::Composite(SHREQ, 3)),\n             _ => (),\n         }\n     }\n \n-    if let Some(t) = p.next2() {\n+    if let Some(t) = p.current2() {\n         match t {\n             (PLUS, EQ) => return (1, Op::Composite(PLUSEQ, 2)),\n             (MINUS, EQ) => return (1, Op::Composite(MINUSEQ, 2)),", "previous_filename": "crates/ra_syntax/src/grammar/expressions.rs"}, {"sha": "e74305b6a94c222dd0c6e47ef816f295b04f33e4", "filename": "crates/ra_syntax/src/parsing/grammar/expressions/atom.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fexpressions%2Fatom.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/expressions/atom.rs"}, {"sha": "4b962c1f37f989d42942ed7d7b5ed896bd5a79ef", "filename": "crates/ra_syntax/src/parsing/grammar/items.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/items.rs"}, {"sha": "5a5852f83ad4658a1cae37ffe48c68af3b412b25", "filename": "crates/ra_syntax/src/parsing/grammar/items/consts.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Fconsts.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/items/consts.rs"}, {"sha": "ff9b38f9c25d8dd28968a18c12049b69820b0354", "filename": "crates/ra_syntax/src/parsing/grammar/items/nominal.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Fnominal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Fnominal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Fnominal.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/items/nominal.rs"}, {"sha": "d5a8ccd98e2b636da839e898cafd27586054d5eb", "filename": "crates/ra_syntax/src/parsing/grammar/items/traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Ftraits.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/items/traits.rs"}, {"sha": "5111d37ebda00819e9fbf57c7325d1d4a0b8aff2", "filename": "crates/ra_syntax/src/parsing/grammar/items/use_item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fitems%2Fuse_item.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/items/use_item.rs"}, {"sha": "185386569aa01014c70627823de2fa9cddfb965e", "filename": "crates/ra_syntax/src/parsing/grammar/params.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fparams.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/params.rs"}, {"sha": "33a11886cb3085c50c0f5fb7dffcc5052bdb37a5", "filename": "crates/ra_syntax/src/parsing/grammar/paths.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fpaths.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/paths.rs"}, {"sha": "9d7da639d5e812828fd18428bc48c3b4d78ca11c", "filename": "crates/ra_syntax/src/parsing/grammar/patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Fpatterns.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/patterns.rs"}, {"sha": "f889419c51d22281271fc0838c397856cbe92251", "filename": "crates/ra_syntax/src/parsing/grammar/type_args.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Ftype_args.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/type_args.rs"}, {"sha": "40f99868206e84bb6b6f5d982aabb71b2e4b4ccf", "filename": "crates/ra_syntax/src/parsing/grammar/type_params.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Ftype_params.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/type_params.rs"}, {"sha": "adc189a292d5d319c32734a771d6c4010435724f", "filename": "crates/ra_syntax/src/parsing/grammar/types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fgrammar%2Ftypes.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/grammar/types.rs"}, {"sha": "f9362120e1491e6755e2468e938b0e14a2e8d6dc", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/lexer.rs"}, {"sha": "4235d2648ad3a903ab9d71655d16bdf70323f7ba", "filename": "crates/ra_syntax/src/parsing/lexer/classes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fclasses.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/lexer/classes.rs"}, {"sha": "8bbbe659b35ea4a72035b56bdd9e148d2f708b73", "filename": "crates/ra_syntax/src/parsing/lexer/comments.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fcomments.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,4 +1,4 @@\n-use crate::lexer::ptr::Ptr;\n+use crate::parsing::lexer::ptr::Ptr;\n \n use crate::SyntaxKind::{self, *};\n ", "previous_filename": "crates/ra_syntax/src/lexer/comments.rs"}, {"sha": "7f6abe1d5c31d0d65821863ed87b2fdf94904594", "filename": "crates/ra_syntax/src/parsing/lexer/numbers.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fnumbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fnumbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fnumbers.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,5 +1,7 @@\n-use crate::lexer::classes::*;\n-use crate::lexer::ptr::Ptr;\n+use crate::parsing::lexer::{\n+    ptr::Ptr,\n+    classes::*,\n+};\n \n use crate::SyntaxKind::{self, *};\n ", "previous_filename": "crates/ra_syntax/src/lexer/numbers.rs"}, {"sha": "c341c4176bbe85a74634fa44398383a9b80401ae", "filename": "crates/ra_syntax/src/parsing/lexer/ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fptr.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/lexer/ptr.rs"}, {"sha": "f74acff9e21bac578f1e0f77d4288bb7eda2a0d1", "filename": "crates/ra_syntax/src/parsing/lexer/strings.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer%2Fstrings.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,6 +1,7 @@\n-use crate::SyntaxKind::{self, *};\n-\n-use crate::lexer::ptr::Ptr;\n+use crate::{\n+    parsing::lexer::ptr::Ptr,\n+    SyntaxKind::{self, *},\n+};\n \n pub(crate) fn is_string_literal_start(c: char, c1: Option<char>, c2: Option<char>) -> bool {\n     match (c, c1, c2) {", "previous_filename": "crates/ra_syntax/src/lexer/strings.rs"}, {"sha": "781c407debb0290ec3fd9de3bbfd6c3b4b058add", "filename": "crates/ra_syntax/src/parsing/parser_api.rs", "status": "renamed", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_api.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,9 +1,11 @@\n use drop_bomb::DropBomb;\n \n use crate::{\n-    parser_impl::ParserImpl,\n-    token_set::TokenSet,\n     SyntaxKind::{self, ERROR},\n+    parsing::{\n+        token_set::TokenSet,\n+        parser_impl::ParserImpl\n+    },\n };\n \n /// `Parser` struct provides the low-level API for\n@@ -25,6 +27,22 @@ impl<'t> Parser<'t> {\n         self.nth(0)\n     }\n \n+    /// Returns the kinds of the current two tokens, if they are not separated\n+    /// by trivia.\n+    ///\n+    /// Useful for parsing things like `>>`.\n+    pub(crate) fn current2(&self) -> Option<(SyntaxKind, SyntaxKind)> {\n+        self.0.current2()\n+    }\n+\n+    /// Returns the kinds of the current three tokens, if they are not separated\n+    /// by trivia.\n+    ///\n+    /// Useful for parsing things like `=>>`.\n+    pub(crate) fn current3(&self) -> Option<(SyntaxKind, SyntaxKind, SyntaxKind)> {\n+        self.0.current3()\n+    }\n+\n     /// Lookahead operation: returns the kind of the next nth\n     /// token.\n     pub(crate) fn nth(&self, n: u32) -> SyntaxKind {\n@@ -41,14 +59,6 @@ impl<'t> Parser<'t> {\n         kinds.contains(self.current())\n     }\n \n-    pub(crate) fn next2(&self) -> Option<(SyntaxKind, SyntaxKind)> {\n-        self.0.next2()\n-    }\n-\n-    pub(crate) fn next3(&self) -> Option<(SyntaxKind, SyntaxKind, SyntaxKind)> {\n-        self.0.next3()\n-    }\n-\n     /// Checks if the current token is contextual keyword with text `t`.\n     pub(crate) fn at_contextual_kw(&self, t: &str) -> bool {\n         self.0.at_kw(t)", "previous_filename": "crates/ra_syntax/src/parser_api.rs"}, {"sha": "8cce1ab01ce1c15f347ee24dd5f2924ee65ebaee", "filename": "crates/ra_syntax/src/parsing/parser_impl.rs", "status": "renamed", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -4,22 +4,21 @@ mod input;\n use std::cell::Cell;\n \n use crate::{\n-    lexer::Token,\n-    parser_api::Parser,\n-    parser_impl::{\n-        event::{Event, EventProcessor},\n-        input::{InputPosition, ParserInput},\n-    },\n     SmolStr,\n-    syntax_node::syntax_error::{\n-        ParseError,\n-        SyntaxError,\n+    syntax_error::{ParseError, SyntaxError},\n+    parsing::{\n+        lexer::Token,\n+        parser_api::Parser,\n+        parser_impl::{\n+            event::{Event, EventProcessor},\n+            input::{InputPosition, ParserInput},\n+        },\n     },\n };\n \n use crate::SyntaxKind::{self, EOF, TOMBSTONE};\n \n-pub(crate) trait Sink {\n+pub(super) trait Sink {\n     type Tree;\n \n     /// Adds new leaf to the current branch.\n@@ -41,7 +40,7 @@ pub(crate) trait Sink {\n }\n \n /// Parse a sequence of tokens into the representative node tree\n-pub(crate) fn parse_with<S: Sink>(\n+pub(super) fn parse_with<S: Sink>(\n     sink: S,\n     text: &str,\n     tokens: &[Token],\n@@ -60,15 +59,15 @@ pub(crate) fn parse_with<S: Sink>(\n /// Implementation details of `Parser`, extracted\n /// to a separate struct in order not to pollute\n /// the public API of the `Parser`.\n-pub(crate) struct ParserImpl<'t> {\n+pub(super) struct ParserImpl<'t> {\n     parser_input: &'t ParserInput<'t>,\n     pos: InputPosition,\n     events: Vec<Event>,\n     steps: Cell<u32>,\n }\n \n impl<'t> ParserImpl<'t> {\n-    pub(crate) fn new(inp: &'t ParserInput<'t>) -> ParserImpl<'t> {\n+    fn new(inp: &'t ParserInput<'t>) -> ParserImpl<'t> {\n         ParserImpl {\n             parser_input: inp,\n             pos: InputPosition::new(),\n@@ -77,12 +76,12 @@ impl<'t> ParserImpl<'t> {\n         }\n     }\n \n-    pub(crate) fn into_events(self) -> Vec<Event> {\n+    fn into_events(self) -> Vec<Event> {\n         assert_eq!(self.nth(0), EOF);\n         self.events\n     }\n \n-    pub(super) fn next2(&self) -> Option<(SyntaxKind, SyntaxKind)> {\n+    pub(super) fn current2(&self) -> Option<(SyntaxKind, SyntaxKind)> {\n         let c1 = self.parser_input.kind(self.pos);\n         let c2 = self.parser_input.kind(self.pos + 1);\n         if self.parser_input.token_start_at(self.pos + 1)\n@@ -94,7 +93,7 @@ impl<'t> ParserImpl<'t> {\n         }\n     }\n \n-    pub(super) fn next3(&self) -> Option<(SyntaxKind, SyntaxKind, SyntaxKind)> {\n+    pub(super) fn current3(&self) -> Option<(SyntaxKind, SyntaxKind, SyntaxKind)> {\n         let c1 = self.parser_input.kind(self.pos);\n         let c2 = self.parser_input.kind(self.pos + 1);\n         let c3 = self.parser_input.kind(self.pos + 2);", "previous_filename": "crates/ra_syntax/src/parser_impl.rs"}, {"sha": "2ddbdd34d229dc8e36bbf3cbb490c9c61688dbf0", "filename": "crates/ra_syntax/src/parsing/parser_impl/event.rs", "status": "renamed", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl%2Fevent.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -7,19 +7,22 @@\n //! tree builder: the parser produces a stream of events like\n //! `start node`, `finish node`, and `FileBuilder` converts\n //! this stream to a real tree.\n+use std::mem;\n+\n use crate::{\n-    lexer::Token,\n-    parser_impl::Sink,\n     SmolStr,\n     SyntaxKind::{self, *},\n     TextRange, TextUnit,\n-    syntax_node::syntax_error::{\n+    syntax_error::{\n         ParseError,\n         SyntaxError,\n         SyntaxErrorKind,\n     },\n+    parsing::{\n+        lexer::Token,\n+        parser_impl::Sink,\n+    },\n };\n-use std::mem;\n \n /// `Parser` produces a flat list of `Event`s.\n /// They are converted to a tree-structure in", "previous_filename": "crates/ra_syntax/src/parser_impl/event.rs"}, {"sha": "275d949189aaccee986372c554c0a5f6d230401f", "filename": "crates/ra_syntax/src/parsing/parser_impl/input.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Fparser_impl%2Finput.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,4 +1,7 @@\n-use crate::{lexer::Token, SyntaxKind, SyntaxKind::EOF, TextRange, TextUnit};\n+use crate::{\n+    SyntaxKind, SyntaxKind::EOF, TextRange, TextUnit,\n+    parsing::lexer::Token,\n+};\n \n use std::ops::{Add, AddAssign};\n ", "previous_filename": "crates/ra_syntax/src/parser_impl/input.rs"}, {"sha": "edf3fa2910b46143f2929fa23d74c3e4da792d1d", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "renamed", "additions": 20, "deletions": 35, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,10 +1,17 @@\n-use crate::algo;\n-use crate::grammar;\n-use crate::lexer::{tokenize, Token};\n-use crate::parser_api::Parser;\n-use crate::parser_impl;\n-use crate::syntax_node::{self, GreenNode, SyntaxError, SyntaxNode};\n-use crate::{SyntaxKind::*, TextRange, TextUnit};\n+use crate::{\n+    SyntaxKind::*, TextRange, TextUnit,\n+    algo,\n+    syntax_node::{GreenNode, SyntaxNode},\n+    syntax_error::SyntaxError,\n+    parsing::{\n+        grammar,\n+        parser_impl,\n+        builder::GreenBuilder,\n+        parser_api::Parser,\n+        lexer::{tokenize, Token},\n+    }\n+};\n+\n use ra_text_edit::AtomTextEdit;\n \n pub(crate) fn incremental_reparse(\n@@ -56,7 +63,7 @@ fn reparse_block<'node>(\n         return None;\n     }\n     let (green, new_errors) =\n-        parser_impl::parse_with(syntax_node::GreenBuilder::new(), &text, &tokens, reparser);\n+        parser_impl::parse_with(GreenBuilder::new(), &text, &tokens, reparser);\n     Some((node, green, new_errors))\n }\n \n@@ -72,34 +79,12 @@ fn is_contextual_kw(text: &str) -> bool {\n     }\n }\n \n-type ParseFn = fn(&mut Parser);\n-fn find_reparsable_node(node: &SyntaxNode, range: TextRange) -> Option<(&SyntaxNode, ParseFn)> {\n+fn find_reparsable_node(\n+    node: &SyntaxNode,\n+    range: TextRange,\n+) -> Option<(&SyntaxNode, fn(&mut Parser))> {\n     let node = algo::find_covering_node(node, range);\n-    return node.ancestors().filter_map(|node| reparser(node).map(|r| (node, r))).next();\n-\n-    fn reparser(node: &SyntaxNode) -> Option<ParseFn> {\n-        let res = match node.kind() {\n-            BLOCK => grammar::block,\n-            NAMED_FIELD_DEF_LIST => grammar::named_field_def_list,\n-            NAMED_FIELD_LIST => grammar::named_field_list,\n-            ENUM_VARIANT_LIST => grammar::enum_variant_list,\n-            MATCH_ARM_LIST => grammar::match_arm_list,\n-            USE_TREE_LIST => grammar::use_tree_list,\n-            EXTERN_ITEM_LIST => grammar::extern_item_list,\n-            TOKEN_TREE if node.first_child().unwrap().kind() == L_CURLY => grammar::token_tree,\n-            ITEM_LIST => {\n-                let parent = node.parent().unwrap();\n-                match parent.kind() {\n-                    IMPL_BLOCK => grammar::impl_item_list,\n-                    TRAIT_DEF => grammar::trait_item_list,\n-                    MODULE => grammar::mod_item_list,\n-                    _ => return None,\n-                }\n-            }\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n+    node.ancestors().find_map(|node| grammar::reparser(node).map(|r| (node, r)))\n }\n \n fn is_balanced(tokens: &[Token]) -> bool {", "previous_filename": "crates/ra_syntax/src/reparsing.rs"}, {"sha": "5719fe5a21e05955dd6f9dce1ae37cb53b78b7a4", "filename": "crates/ra_syntax/src/parsing/token_set.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftoken_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftoken_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftoken_set.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -4,19 +4,19 @@ use crate::SyntaxKind;\n pub(crate) struct TokenSet(u128);\n \n impl TokenSet {\n-    pub const fn empty() -> TokenSet {\n+    pub(crate) const fn empty() -> TokenSet {\n         TokenSet(0)\n     }\n \n-    pub const fn singleton(kind: SyntaxKind) -> TokenSet {\n+    pub(crate) const fn singleton(kind: SyntaxKind) -> TokenSet {\n         TokenSet(mask(kind))\n     }\n \n-    pub const fn union(self, other: TokenSet) -> TokenSet {\n+    pub(crate) const fn union(self, other: TokenSet) -> TokenSet {\n         TokenSet(self.0 | other.0)\n     }\n \n-    pub fn contains(&self, kind: SyntaxKind) -> bool {\n+    pub(crate) fn contains(&self, kind: SyntaxKind) -> bool {\n         self.0 & mask(kind) != 0\n     }\n }", "previous_filename": "crates/ra_syntax/src/token_set.rs"}, {"sha": "4ff99809066a9610653905ea2bd936bd035a584b", "filename": "crates/ra_syntax/src/syntax_error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/syntax_node/syntax_error.rs"}, {"sha": "c1118c5ab4104e805f7afae53c4bd46f19154a8c", "filename": "crates/ra_syntax/src/syntax_kinds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,8 +1,9 @@\n mod generated;\n \n-use crate::SyntaxKind::*;\n use std::fmt;\n \n+use crate::SyntaxKind::*;\n+\n pub use self::generated::SyntaxKind;\n \n impl fmt::Debug for SyntaxKind {"}, {"sha": "aa627398d2aaebbcc35ae1d76046435486091271", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,15 +1,12 @@\n-mod builder;\n-pub mod syntax_error;\n-mod syntax_text;\n-\n use std::{fmt, borrow::Borrow};\n \n-use self::syntax_text::SyntaxText;\n-use crate::{SmolStr, SyntaxKind, TextRange};\n use rowan::{Types, TransparentNewType};\n \n-pub(crate) use self::builder::GreenBuilder;\n-pub use self::syntax_error::{SyntaxError, SyntaxErrorKind, Location};\n+use crate::{\n+    SmolStr, SyntaxKind, TextRange, SyntaxText,\n+    syntax_error::SyntaxError,\n+};\n+\n pub use rowan::WalkEvent;\n \n #[derive(Debug, Clone, Copy)]"}, {"sha": "84e5b231ac5f67f7ad1d0cac6bbd2a1bc1dbb759", "filename": "crates/ra_syntax/src/syntax_text.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "previous_filename": "crates/ra_syntax/src/syntax_node/syntax_text.rs"}, {"sha": "69958f0d74fc53d14ad62681ffcf2a321c1fe12f", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -5,7 +5,7 @@ mod string;\n mod block;\n \n use crate::{\n-    SourceFile, syntax_node::SyntaxError, AstNode,\n+    SourceFile, SyntaxError, AstNode,\n     ast,\n     algo::visit::{visitor_ctx, VisitorCtx},\n };"}, {"sha": "f2cf3cbbd88687baf9f44a77f7a4fb4a9d368037", "filename": "crates/ra_syntax/src/validation/block.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,9 +1,7 @@\n use crate::{SyntaxKind::*,\n     ast::{self, AttrsOwner, AstNode},\n-    syntax_node::{\n-        SyntaxError,\n-        SyntaxErrorKind::*,\n-    },\n+    SyntaxError,\n+    SyntaxErrorKind::*,\n };\n \n pub(crate) fn validate_block_node(node: &ast::Block, errors: &mut Vec<SyntaxError>) {"}, {"sha": "838e7a65fd5b60ef354717aab9114a5832c97a86", "filename": "crates/ra_syntax/src/validation/byte.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -5,10 +5,8 @@ use crate::{\n     string_lexing::{self, StringComponentKind},\n     TextRange,\n     validation::char,\n-    syntax_node::{\n-        SyntaxError,\n-        SyntaxErrorKind::*,\n-    },\n+    SyntaxError,\n+    SyntaxErrorKind::*,\n };\n \n pub(super) fn validate_byte_node(node: &ast::Byte, errors: &mut Vec<SyntaxError>) {"}, {"sha": "64c7054a15f8add6f8e66a9d213bdbe95130fe6c", "filename": "crates/ra_syntax/src/validation/byte_string.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte_string.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,10 +1,8 @@\n use crate::{\n     ast::{self, AstNode, AstToken},\n     string_lexing::{self, StringComponentKind},\n-    syntax_node::{\n-        SyntaxError,\n-        SyntaxErrorKind::*,\n-    },\n+    SyntaxError,\n+    SyntaxErrorKind::*,\n };\n \n use super::byte;"}, {"sha": "3169ed5903a875eb85c264c04a19bb3ac82accea", "filename": "crates/ra_syntax/src/validation/char.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -8,10 +8,8 @@ use crate::{\n     ast::{self, AstNode, AstToken},\n     string_lexing::{self, StringComponentKind},\n     TextRange,\n-    syntax_node::{\n-        SyntaxError,\n-        SyntaxErrorKind::*,\n-    },\n+    SyntaxError,\n+    SyntaxErrorKind::*,\n };\n \n pub(super) fn validate_char_node(node: &ast::Char, errors: &mut Vec<SyntaxError>) {"}, {"sha": "d857d088c8028f4e57358a26e95928752579597c", "filename": "crates/ra_syntax/src/validation/string.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fstring.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -1,10 +1,8 @@\n use crate::{\n     ast::{self, AstNode, AstToken},\n     string_lexing,\n-    syntax_node::{\n-        SyntaxError,\n-        SyntaxErrorKind::*,\n-    },\n+    SyntaxError,\n+    SyntaxErrorKind::*,\n };\n \n use super::char;"}, {"sha": "0a10d2737edbe9c8e6696671df3dc4683471287e", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96899f8278b787280bd07d9ac9dce29a610ce40d/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=96899f8278b787280bd07d9ac9dce29a610ce40d", "patch": "@@ -14,7 +14,7 @@ pub use teraron::{Mode, Overwrite, Verify};\n pub type Result<T> = std::result::Result<T, failure::Error>;\n \n pub const GRAMMAR: &str = \"crates/ra_syntax/src/grammar.ron\";\n-const GRAMMAR_DIR: &str = \"crates/ra_syntax/src/grammar\";\n+const GRAMMAR_DIR: &str = \"crates/ra_syntax/src/parsing/grammar\";\n const OK_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/tests/data/parser/inline/ok\";\n const ERR_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/tests/data/parser/inline/err\";\n "}]}