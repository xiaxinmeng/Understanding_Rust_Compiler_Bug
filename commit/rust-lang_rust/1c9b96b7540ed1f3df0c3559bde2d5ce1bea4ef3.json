{"sha": "1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjOWI5NmI3NTQwZWQxZjNkZjBjMzU1OWJkZTJkNWNlMWJlYTRlZjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-21T17:18:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-23T12:00:55Z"}, "message": "add warning sign to UB examples", "tree": {"sha": "92b028c14598396d7d1651dfdc142c285789d948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92b028c14598396d7d1651dfdc142c285789d948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3", "html_url": "https://github.com/rust-lang/rust/commit/1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f79e98c0356642db62e5113327e436c951e843d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f79e98c0356642db62e5113327e436c951e843d", "html_url": "https://github.com/rust-lang/rust/commit/7f79e98c0356642db62e5113327e436c951e843d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "01c97444ae3aea20c7ab3e2b4a764dbb25bb25a6", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=1c9b96b7540ed1f3df0c3559bde2d5ce1bea4ef3", "patch": "@@ -20,9 +20,9 @@ use crate::mem::ManuallyDrop;\n /// # #![allow(invalid_value)]\n /// use std::mem::{self, MaybeUninit};\n ///\n-/// let x: &i32 = unsafe { mem::zeroed() }; // undefined behavior!\n+/// let x: &i32 = unsafe { mem::zeroed() }; // undefined behavior! \u26a0\ufe0f\n /// // The equivalent code with `MaybeUninit<&i32>`:\n-/// let x: &i32 = unsafe { MaybeUninit::zeroed().assume_init() }; // undefined behavior!\n+/// let x: &i32 = unsafe { MaybeUninit::zeroed().assume_init() }; // undefined behavior! \u26a0\ufe0f\n /// ```\n ///\n /// This is exploited by the compiler for various optimizations, such as eliding\n@@ -35,9 +35,9 @@ use crate::mem::ManuallyDrop;\n /// # #![allow(invalid_value)]\n /// use std::mem::{self, MaybeUninit};\n ///\n-/// let b: bool = unsafe { mem::uninitialized() }; // undefined behavior!\n+/// let b: bool = unsafe { mem::uninitialized() }; // undefined behavior! \u26a0\ufe0f\n /// // The equivalent code with `MaybeUninit<bool>`:\n-/// let b: bool = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior!\n+/// let b: bool = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior! \u26a0\ufe0f\n /// ```\n ///\n /// Moreover, uninitialized memory is special in that the compiler knows that\n@@ -49,9 +49,9 @@ use crate::mem::ManuallyDrop;\n /// # #![allow(invalid_value)]\n /// use std::mem::{self, MaybeUninit};\n ///\n-/// let x: i32 = unsafe { mem::uninitialized() }; // undefined behavior!\n+/// let x: i32 = unsafe { mem::uninitialized() }; // undefined behavior! \u26a0\ufe0f\n /// // The equivalent code with `MaybeUninit<i32>`:\n-/// let x: i32 = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior!\n+/// let x: i32 = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior! \u26a0\ufe0f\n /// ```\n /// (Notice that the rules around uninitialized integers are not finalized yet, but\n /// until they are, it is advisable to avoid them.)\n@@ -348,7 +348,7 @@ impl<T> MaybeUninit<T> {\n     /// let x = MaybeUninit::<(u8, NotZero)>::zeroed();\n     /// let x = unsafe { x.assume_init() };\n     /// // Inside a pair, we create a `NotZero` that does not have a valid discriminant.\n-    /// // This is undefined behavior.\n+    /// // This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline]\n@@ -400,7 +400,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_vec = unsafe { &*x.as_ptr() };\n-    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     ///\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n@@ -437,7 +437,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_vec = unsafe { &mut *x.as_mut_ptr() };\n-    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     ///\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n@@ -489,7 +489,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_init = unsafe { x.assume_init() };\n-    /// // `x` had not been initialized yet, so this last line caused undefined behavior.\n+    /// // `x` had not been initialized yet, so this last line caused undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n@@ -553,7 +553,7 @@ impl<T> MaybeUninit<T> {\n     /// x.write(Some(vec![0,1,2]));\n     /// let x1 = unsafe { x.read() };\n     /// let x2 = unsafe { x.read() };\n-    /// // We now created two copies of the same vector, leading to a double-free when\n+    /// // We now created two copies of the same vector, leading to a double-free \u26a0\ufe0f when\n     /// // they both get dropped!\n     /// ```\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n@@ -603,7 +603,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_vec: &Vec<u32> = unsafe { x.get_ref() };\n-    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     ///\n     /// ```rust,no_run\n@@ -686,7 +686,7 @@ impl<T> MaybeUninit<T> {\n     /// unsafe {\n     ///     *b.get_mut() = true;\n     ///     // We have created a (mutable) reference to an uninitialized `bool`!\n-    ///     // This is undefined behavior.\n+    ///     // This is undefined behavior. \u26a0\ufe0f\n     /// }\n     /// ```\n     ///"}]}