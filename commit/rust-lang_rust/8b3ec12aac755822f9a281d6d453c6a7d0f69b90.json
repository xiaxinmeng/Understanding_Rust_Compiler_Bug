{"sha": "8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "node_id": "C_kwDOAAsO6NoAKDhiM2VjMTJhYWM3NTU4MjJmOWEyODFkNmQ0NTNjNmE3ZDBmNjliOTA", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-06-28T08:41:10Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-06-28T08:43:22Z"}, "message": "fix: Report proc macro errors in expressions correctly as well\n\nThey didn't have a krate before, resulting in the generic \"proc macro\nnot found\" error.\n\nAlso improve error messages a bit more.", "tree": {"sha": "0f3674c4ebfd9be0d7a4db8840b6d42c8c7db9eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f3674c4ebfd9be0d7a4db8840b6d42c8c7db9eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "html_url": "https://github.com/rust-lang/rust/commit/8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eaf96c9ead87703d96558e9b9923a0baea27981", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eaf96c9ead87703d96558e9b9923a0baea27981", "html_url": "https://github.com/rust-lang/rust/commit/9eaf96c9ead87703d96558e9b9923a0baea27981"}], "stats": {"total": 138, "additions": 69, "deletions": 69}, "files": [{"sha": "c7566b06d09ff2458f7e9e89f2885166a488df15", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -312,7 +312,7 @@ pub struct SyntheticSyntax;\n pub enum BodyDiagnostic {\n     InactiveCode { node: InFile<SyntaxNodePtr>, cfg: CfgExpr, opts: CfgOptions },\n     MacroError { node: InFile<AstPtr<ast::MacroCall>>, message: String },\n-    UnresolvedProcMacro { node: InFile<AstPtr<ast::MacroCall>> },\n+    UnresolvedProcMacro { node: InFile<AstPtr<ast::MacroCall>>, krate: CrateId },\n     UnresolvedMacroCall { node: InFile<AstPtr<ast::MacroCall>>, path: ModPath },\n }\n "}, {"sha": "31e3877ea932f5114f02fc3f11965caee87197cc", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -572,9 +572,10 @@ impl ExprCollector<'_> {\n \n         if record_diagnostics {\n             match &res.err {\n-                Some(ExpandError::UnresolvedProcMacro) => {\n+                Some(ExpandError::UnresolvedProcMacro(krate)) => {\n                     self.source_map.diagnostics.push(BodyDiagnostic::UnresolvedProcMacro {\n                         node: InFile::new(outer_file, syntax_ptr),\n+                        krate: *krate,\n                     });\n                 }\n                 Some(err) => {"}, {"sha": "ca0cb99b3714b2d51b6cdb3182fa1e5578bdc204", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -22,6 +22,7 @@ use itertools::Itertools;\n use la_arena::Idx;\n use limit::Limit;\n use rustc_hash::{FxHashMap, FxHashSet};\n+use stdx::always;\n use syntax::{ast, SmolStr};\n \n use crate::{\n@@ -1234,7 +1235,7 @@ impl DefCollector<'_> {\n                         self.def_map.diagnostics.push(DefDiagnostic::unresolved_proc_macro(\n                             directive.module_id,\n                             loc.kind,\n-                            Some(loc.def.krate),\n+                            loc.def.krate,\n                         ));\n                         return recollect_without(self);\n                     }\n@@ -1258,7 +1259,7 @@ impl DefCollector<'_> {\n                             self.def_map.diagnostics.push(DefDiagnostic::unresolved_proc_macro(\n                                 directive.module_id,\n                                 loc.kind,\n-                                Some(loc.def.krate),\n+                                loc.def.krate,\n                             ));\n \n                             return recollect_without(self);\n@@ -1308,13 +1309,10 @@ impl DefCollector<'_> {\n         let err = self.db.macro_expand_error(macro_call_id);\n         if let Some(err) = err {\n             let diag = match err {\n-                hir_expand::ExpandError::UnresolvedProcMacro => {\n+                hir_expand::ExpandError::UnresolvedProcMacro(krate) => {\n+                    always!(krate == loc.def.krate);\n                     // Missing proc macros are non-fatal, so they are handled specially.\n-                    DefDiagnostic::unresolved_proc_macro(\n-                        module_id,\n-                        loc.kind.clone(),\n-                        Some(loc.def.krate),\n-                    )\n+                    DefDiagnostic::unresolved_proc_macro(module_id, loc.kind.clone(), loc.def.krate)\n                 }\n                 _ => DefDiagnostic::macro_error(module_id, loc.kind.clone(), err.to_string()),\n             };"}, {"sha": "0d01f6d0aba3449517dca190319af8dedeb57b4e", "filename": "crates/hir-def/src/nameres/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -24,7 +24,7 @@ pub enum DefDiagnosticKind {\n \n     UnconfiguredCode { ast: AstId<ast::Item>, cfg: CfgExpr, opts: CfgOptions },\n \n-    UnresolvedProcMacro { ast: MacroCallKind, krate: Option<CrateId> },\n+    UnresolvedProcMacro { ast: MacroCallKind, krate: CrateId },\n \n     UnresolvedMacroCall { ast: MacroCallKind, path: ModPath },\n \n@@ -85,7 +85,7 @@ impl DefDiagnostic {\n     pub(super) fn unresolved_proc_macro(\n         container: LocalModuleId,\n         ast: MacroCallKind,\n-        krate: Option<CrateId>,\n+        krate: CrateId,\n     ) -> Self {\n         Self { in_module: container, kind: DefDiagnosticKind::UnresolvedProcMacro { ast, krate } }\n     }"}, {"sha": "0844e1f6254917084d7c015dabeb721b799a0418", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -43,7 +43,7 @@ pub type ExpandResult<T> = ValueResult<T, ExpandError>;\n \n #[derive(Debug, PartialEq, Eq, Clone)]\n pub enum ExpandError {\n-    UnresolvedProcMacro,\n+    UnresolvedProcMacro(CrateId),\n     Mbe(mbe::ExpandError),\n     Other(Box<str>),\n }\n@@ -57,7 +57,7 @@ impl From<mbe::ExpandError> for ExpandError {\n impl fmt::Display for ExpandError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            ExpandError::UnresolvedProcMacro => f.write_str(\"unresolved proc-macro\"),\n+            ExpandError::UnresolvedProcMacro(_) => f.write_str(\"unresolved proc-macro\"),\n             ExpandError::Mbe(it) => it.fmt(f),\n             ExpandError::Other(it) => f.write_str(it),\n         }"}, {"sha": "5afdcc0e66dbce382f966665344bdee4416bd8b4", "filename": "crates/hir-expand/src/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -75,7 +75,7 @@ impl ProcMacroExpander {\n                     },\n                 }\n             }\n-            None => ExpandResult::only_err(ExpandError::UnresolvedProcMacro),\n+            None => ExpandResult::only_err(ExpandError::UnresolvedProcMacro(self.krate)),\n         }\n     }\n }"}, {"sha": "7ecfb0cd6f20e1cd26eb9874358f2780cf07a8dd", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -90,7 +90,7 @@ pub struct UnresolvedProcMacro {\n     pub macro_name: Option<String>,\n     pub kind: MacroKind,\n     /// The crate id of the proc-macro this macro belongs to, or `None` if the proc-macro can't be found.\n-    pub krate: Option<CrateId>,\n+    pub krate: CrateId,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "f24edebfd0b970ee9ddf959b43d81174c772c2ce", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -1159,13 +1159,13 @@ impl DefWithBody {\n                     }\n                     .into(),\n                 ),\n-                BodyDiagnostic::UnresolvedProcMacro { node } => acc.push(\n+                BodyDiagnostic::UnresolvedProcMacro { node, krate } => acc.push(\n                     UnresolvedProcMacro {\n                         node: node.clone().map(|it| it.into()),\n                         precise_location: None,\n                         macro_name: None,\n                         kind: MacroKind::ProcMacro,\n-                        krate: None,\n+                        krate: *krate,\n                     }\n                     .into(),\n                 ),"}, {"sha": "fde3901a730bcd3c342aab049934560b1fa9ade4", "filename": "crates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -32,13 +32,13 @@ pub(crate) fn unresolved_proc_macro(\n         None => \"proc macro not expanded\".to_string(),\n     };\n     let severity = if config_enabled { Severity::Error } else { Severity::WeakWarning };\n-    let def_map = d.krate.map(|krate| ctx.sema.db.crate_def_map(krate));\n+    let def_map = ctx.sema.db.crate_def_map(d.krate);\n     let message = format!(\n         \"{message}: {}\",\n         if config_enabled {\n-            match def_map.as_ref().and_then(|def_map| def_map.proc_macro_loading_error()) {\n+            match def_map.proc_macro_loading_error() {\n                 Some(e) => e,\n-                None => \"proc macro not found\",\n+                None => \"proc macro not found in the built dylib\",\n             }\n         } else {\n             match d.kind {"}, {"sha": "ddfea0ce4c4f1af0f188cdb83b984790a7802342", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -173,7 +173,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -248,7 +248,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -313,7 +313,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         },\n                         dependencies: [],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: Some(\n@@ -390,7 +390,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -465,7 +465,7 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -555,7 +555,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -632,7 +632,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -697,7 +697,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         },\n                         dependencies: [],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: Some(\n@@ -776,7 +776,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -853,7 +853,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -934,7 +934,7 @@ fn cargo_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -1011,7 +1011,7 @@ fn cargo_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -1076,7 +1076,7 @@ fn cargo_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: Some(\n@@ -1155,7 +1155,7 @@ fn cargo_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -1232,7 +1232,7 @@ fn cargo_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no build data\",\n+                            \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n                             repo: None,\n@@ -1288,8 +1288,8 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Ok(\n-                            [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n                             Alloc,\n@@ -1322,8 +1322,8 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Ok(\n-                            [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n                             Other,\n@@ -1356,8 +1356,8 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Ok(\n-                            [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n                             Other,\n@@ -1400,8 +1400,8 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Ok(\n-                            [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n                             Other,\n@@ -1434,8 +1434,8 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Ok(\n-                            [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n                             Core,\n@@ -1539,8 +1539,8 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Ok(\n-                            [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n                             Other,\n@@ -1573,8 +1573,8 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Ok(\n-                            [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n                             Other,\n@@ -1607,8 +1607,8 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Ok(\n-                            [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n                             Other,\n@@ -1641,8 +1641,8 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Ok(\n-                            [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n                             Test,\n@@ -1757,8 +1757,8 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Ok(\n-                            [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n                             Std,\n@@ -1791,8 +1791,8 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Ok(\n-                            [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n                             Other,"}, {"sha": "de2db0e1da7fb09cf4bd30b07ff64932445b8cfe", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -873,7 +873,7 @@ fn add_target_crate_root(\n     let proc_macro = match build_data.as_ref().map(|it| it.proc_macro_dylib_path.as_ref()) {\n         Some(Some(it)) => load_proc_macro(it),\n         Some(None) => Err(\"no proc macro dylib present\".into()),\n-        None => Err(\"no build data\".into()),\n+        None => Err(\"crate has not (yet) been built\".into()),\n     };\n \n     let display_name = CrateDisplayName::from_canonical_name(cargo_name.to_string());\n@@ -929,7 +929,7 @@ fn sysroot_to_crate_graph(\n                 cfg_options.clone(),\n                 cfg_options.clone(),\n                 env,\n-                Ok(Vec::new()),\n+                Err(\"no proc macro loaded for sysroot crate\".into()),\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::from(&*sysroot[krate].name)),\n             );"}, {"sha": "13bcb7dfa23b2146f429d6fb1822bd7263ee1f5e", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3ec12aac755822f9a281d6d453c6a7d0f69b90/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=8b3ec12aac755822f9a281d6d453c6a7d0f69b90", "patch": "@@ -540,17 +540,18 @@ pub(crate) fn load_proc_macro(\n     path: &AbsPath,\n     dummy_replace: &[Box<str>],\n ) -> ProcMacroLoadResult {\n-    let res: Result<_, String> = (|| {\n+    let res: Result<Vec<_>, String> = (|| {\n         let dylib = MacroDylib::new(path.to_path_buf())\n             .map_err(|io| format!(\"Proc-macro dylib loading failed: {io}\"))?;\n-        Ok(if let Some(it) = server {\n-            let vec = it.load_dylib(dylib).map_err(|e| format!(\"{e}\"))?;\n-            vec.into_iter()\n-                .map(|expander| expander_to_proc_macro(expander, dummy_replace))\n-                .collect()\n-        } else {\n-            Vec::new()\n-        })\n+        let server = server.ok_or_else(|| format!(\"Proc-macro server not started\"))?;\n+        let vec = server.load_dylib(dylib).map_err(|e| format!(\"{e}\"))?;\n+        if vec.is_empty() {\n+            return Err(\"proc macro library returned no proc macros\".to_string());\n+        }\n+        Ok(vec\n+            .into_iter()\n+            .map(|expander| expander_to_proc_macro(expander, dummy_replace))\n+            .collect())\n     })();\n     return match res {\n         Ok(proc_macros) => {"}]}