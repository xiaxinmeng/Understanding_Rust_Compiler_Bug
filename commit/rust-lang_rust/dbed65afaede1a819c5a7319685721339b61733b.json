{"sha": "dbed65afaede1a819c5a7319685721339b61733b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZWQ2NWFmYWVkZTFhODE5YzVhNzMxOTY4NTcyMTMzOWI2MTczM2I=", "commit": {"author": {"name": "12101111", "email": "w12101111@gmail.com", "date": "2020-03-08T06:24:02Z"}, "committer": {"name": "12101111", "email": "w12101111@gmail.com", "date": "2020-03-08T06:24:02Z"}, "message": "Simplify checking of crt_static_feature()", "tree": {"sha": "a43309c4738d52f3afb592254e3d89a66e9693dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a43309c4738d52f3afb592254e3d89a66e9693dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbed65afaede1a819c5a7319685721339b61733b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbed65afaede1a819c5a7319685721339b61733b", "html_url": "https://github.com/rust-lang/rust/commit/dbed65afaede1a819c5a7319685721339b61733b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbed65afaede1a819c5a7319685721339b61733b/comments", "author": {"login": "12101111", "id": 8438475, "node_id": "MDQ6VXNlcjg0Mzg0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/8438475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/12101111", "html_url": "https://github.com/12101111", "followers_url": "https://api.github.com/users/12101111/followers", "following_url": "https://api.github.com/users/12101111/following{/other_user}", "gists_url": "https://api.github.com/users/12101111/gists{/gist_id}", "starred_url": "https://api.github.com/users/12101111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/12101111/subscriptions", "organizations_url": "https://api.github.com/users/12101111/orgs", "repos_url": "https://api.github.com/users/12101111/repos", "events_url": "https://api.github.com/users/12101111/events{/privacy}", "received_events_url": "https://api.github.com/users/12101111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "12101111", "id": 8438475, "node_id": "MDQ6VXNlcjg0Mzg0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/8438475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/12101111", "html_url": "https://github.com/12101111", "followers_url": "https://api.github.com/users/12101111/followers", "following_url": "https://api.github.com/users/12101111/following{/other_user}", "gists_url": "https://api.github.com/users/12101111/gists{/gist_id}", "starred_url": "https://api.github.com/users/12101111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/12101111/subscriptions", "organizations_url": "https://api.github.com/users/12101111/orgs", "repos_url": "https://api.github.com/users/12101111/repos", "events_url": "https://api.github.com/users/12101111/events{/privacy}", "received_events_url": "https://api.github.com/users/12101111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84349cc56492d70b37ec288f6f3e887858635fa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/84349cc56492d70b37ec288f6f3e887858635fa4", "html_url": "https://github.com/rust-lang/rust/commit/84349cc56492d70b37ec288f6f3e887858635fa4"}], "stats": {"total": 36, "additions": 10, "deletions": 26}, "files": [{"sha": "3cb8ba4af1141ed954b1d07c9cfb8df13509042d", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dbed65afaede1a819c5a7319685721339b61733b/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbed65afaede1a819c5a7319685721339b61733b/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=dbed65afaede1a819c5a7319685721339b61733b", "patch": "@@ -556,33 +556,17 @@ impl Session {\n         let found_negative = requested_features.clone().any(|r| r == \"-crt-static\");\n         let found_positive = requested_features.clone().any(|r| r == \"+crt-static\");\n \n-        if self.target.target.options.crt_static_default {\n-            // `proc-macro` always required to be compiled to dylibs.\n-            // We don't use a static crt unless the `+crt-static` feature was passed.\n-            if !self.target.target.options.crt_static_allows_dylibs {\n-                match crate_type {\n-                    Some(config::CrateType::ProcMacro) => found_positive,\n-                    Some(_) => !found_negative,\n-                    None => {\n-                        // FIXME: When crate_type is not available,\n-                        // we use compiler options to determine the crate_type.\n-                        // We can't check `#![crate_type = \"proc-macro\"]` here.\n-                        if self.opts.crate_types.contains(&config::CrateType::ProcMacro) {\n-                            found_positive\n-                        } else {\n-                            !found_negative\n-                        }\n-                    }\n-                }\n-            } else {\n-                // If the target we're compiling for requests a static crt by default,\n-                // then see if the `-crt-static` feature was passed to disable that.\n-                !found_negative\n-            }\n-        } else {\n-            // If the target we're compiling for don't have a static crt by default then see if the\n-            // `+crt-static` feature was passed.\n+        if found_positive || found_negative {\n             found_positive\n+        } else if crate_type == Some(config::CrateType::ProcMacro)\n+            || self.opts.crate_types.contains(&config::CrateType::ProcMacro)\n+        {\n+            // FIXME: When crate_type is not available,\n+            // we use compiler options to determine the crate_type.\n+            // We can't check `#![crate_type = \"proc-macro\"]` here.\n+            false\n+        } else {\n+            self.target.target.options.crt_static_default\n         }\n     }\n "}]}