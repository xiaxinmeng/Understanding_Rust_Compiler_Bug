{"sha": "d137df0137dab36819efada901e92cd2733f292b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzdkZjAxMzdkYWIzNjgxOWVmYWRhOTAxZTkyY2QyNzMzZjI5MmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T12:19:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T12:19:41Z"}, "message": "Remove more copy-paste", "tree": {"sha": "725ff82c634918d938e61f124f2f230eaac0a24b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725ff82c634918d938e61f124f2f230eaac0a24b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d137df0137dab36819efada901e92cd2733f292b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d137df0137dab36819efada901e92cd2733f292b", "html_url": "https://github.com/rust-lang/rust/commit/d137df0137dab36819efada901e92cd2733f292b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d137df0137dab36819efada901e92cd2733f292b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957c0171e63631f67d732f4ce53dc8bfe2602e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/957c0171e63631f67d732f4ce53dc8bfe2602e71", "html_url": "https://github.com/rust-lang/rust/commit/957c0171e63631f67d732f4ce53dc8bfe2602e71"}], "stats": {"total": 150, "additions": 29, "deletions": 121}, "files": [{"sha": "faeb2fc8ac4da2449a1cd946b41474021268ba49", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 29, "deletions": 121, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/d137df0137dab36819efada901e92cd2733f292b/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d137df0137dab36819efada901e92cd2733f292b/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=d137df0137dab36819efada901e92cd2733f292b", "patch": "@@ -77,81 +77,45 @@ pub struct AssocItemLoc<N: AstNode> {\n     pub ast_id: AstId<N>,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct FunctionId(salsa::InternId);\n-impl_intern_key!(FunctionId);\n-type FunctionLoc = AssocItemLoc<ast::FnDef>;\n+macro_rules! impl_intern {\n+    ($id:ident, $loc:ident, $intern:ident, $lookup:ident) => {\n+        impl_intern_key!($id);\n+\n+        impl Intern for $loc {\n+            type ID = $id;\n+            fn intern(self, db: &impl db::DefDatabase) -> $id {\n+                db.$intern(self)\n+            }\n+        }\n \n-impl Intern for FunctionLoc {\n-    type ID = FunctionId;\n-    fn intern(self, db: &impl db::DefDatabase) -> FunctionId {\n-        db.intern_function(self)\n-    }\n+        impl Lookup for $id {\n+            type Data = $loc;\n+            fn lookup(&self, db: &impl db::DefDatabase) -> $loc {\n+                db.$lookup(*self)\n+            }\n+        }\n+    };\n }\n \n-impl Lookup for FunctionId {\n-    type Data = FunctionLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> FunctionLoc {\n-        db.lookup_intern_function(*self)\n-    }\n-}\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct FunctionId(salsa::InternId);\n+type FunctionLoc = AssocItemLoc<ast::FnDef>;\n+impl_intern!(FunctionId, FunctionLoc, intern_function, lookup_intern_function);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructId(salsa::InternId);\n-impl_intern_key!(StructId);\n-pub type StructLoc = ItemLoc<ast::StructDef>;\n-\n-impl Intern for StructLoc {\n-    type ID = StructId;\n-    fn intern(self, db: &impl db::DefDatabase) -> StructId {\n-        db.intern_struct(self)\n-    }\n-}\n-\n-impl Lookup for StructId {\n-    type Data = StructLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> StructLoc {\n-        db.lookup_intern_struct(*self)\n-    }\n-}\n+type StructLoc = ItemLoc<ast::StructDef>;\n+impl_intern!(StructId, StructLoc, intern_struct, lookup_intern_struct);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct UnionId(salsa::InternId);\n-impl_intern_key!(UnionId);\n pub type UnionLoc = ItemLoc<ast::UnionDef>;\n-\n-impl Intern for UnionLoc {\n-    type ID = UnionId;\n-    fn intern(self, db: &impl db::DefDatabase) -> UnionId {\n-        db.intern_union(self)\n-    }\n-}\n-\n-impl Lookup for UnionId {\n-    type Data = UnionLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> UnionLoc {\n-        db.lookup_intern_union(*self)\n-    }\n-}\n+impl_intern!(UnionId, UnionLoc, intern_union, lookup_intern_union);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumId(salsa::InternId);\n-impl_intern_key!(EnumId);\n pub type EnumLoc = ItemLoc<ast::EnumDef>;\n-\n-impl Intern for EnumLoc {\n-    type ID = EnumId;\n-    fn intern(self, db: &impl db::DefDatabase) -> EnumId {\n-        db.intern_enum(self)\n-    }\n-}\n-\n-impl Lookup for EnumId {\n-    type Data = EnumLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> EnumLoc {\n-        db.lookup_intern_enum(*self)\n-    }\n-}\n+impl_intern!(EnumId, EnumLoc, intern_enum, lookup_intern_enum);\n \n // FIXME: rename to `VariantId`, only enums can ave variants\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -176,79 +140,23 @@ impl_arena_id!(LocalStructFieldId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ConstId(salsa::InternId);\n-impl_intern_key!(ConstId);\n type ConstLoc = AssocItemLoc<ast::ConstDef>;\n-\n-impl Intern for ConstLoc {\n-    type ID = ConstId;\n-    fn intern(self, db: &impl db::DefDatabase) -> ConstId {\n-        db.intern_const(self)\n-    }\n-}\n-\n-impl Lookup for ConstId {\n-    type Data = ConstLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> ConstLoc {\n-        db.lookup_intern_const(*self)\n-    }\n-}\n+impl_intern!(ConstId, ConstLoc, intern_const, lookup_intern_const);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StaticId(salsa::InternId);\n-impl_intern_key!(StaticId);\n pub type StaticLoc = ItemLoc<ast::StaticDef>;\n-\n-impl Intern for StaticLoc {\n-    type ID = StaticId;\n-    fn intern(self, db: &impl db::DefDatabase) -> StaticId {\n-        db.intern_static(self)\n-    }\n-}\n-\n-impl Lookup for StaticId {\n-    type Data = StaticLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> StaticLoc {\n-        db.lookup_intern_static(*self)\n-    }\n-}\n+impl_intern!(StaticId, StaticLoc, intern_static, lookup_intern_static);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TraitId(salsa::InternId);\n-impl_intern_key!(TraitId);\n pub type TraitLoc = ItemLoc<ast::TraitDef>;\n-\n-impl Intern for TraitLoc {\n-    type ID = TraitId;\n-    fn intern(self, db: &impl db::DefDatabase) -> TraitId {\n-        db.intern_trait(self)\n-    }\n-}\n-\n-impl Lookup for TraitId {\n-    type Data = TraitLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> TraitLoc {\n-        db.lookup_intern_trait(*self)\n-    }\n-}\n+impl_intern!(TraitId, TraitLoc, intern_trait, lookup_intern_trait);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TypeAliasId(salsa::InternId);\n-impl_intern_key!(TypeAliasId);\n type TypeAliasLoc = AssocItemLoc<ast::TypeAliasDef>;\n-\n-impl Intern for TypeAliasLoc {\n-    type ID = TypeAliasId;\n-    fn intern(self, db: &impl db::DefDatabase) -> TypeAliasId {\n-        db.intern_type_alias(self)\n-    }\n-}\n-\n-impl Lookup for TypeAliasId {\n-    type Data = TypeAliasLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> TypeAliasLoc {\n-        db.lookup_intern_type_alias(*self)\n-    }\n-}\n+impl_intern!(TypeAliasId, TypeAliasLoc, intern_type_alias, lookup_intern_type_alias);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ImplId(salsa::InternId);"}]}