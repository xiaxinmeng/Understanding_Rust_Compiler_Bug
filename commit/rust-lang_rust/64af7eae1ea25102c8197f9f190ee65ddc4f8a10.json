{"sha": "64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YWY3ZWFlMWVhMjUxMDJjODE5N2Y5ZjE5MGVlNjVkZGM0ZjhhMTA=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-02-07T21:47:03Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-04-02T21:37:49Z"}, "message": "Move SanitizerSet to rustc_target", "tree": {"sha": "d7b13eca16d4d1c66b65c91076bd04ba4d5ae3bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7b13eca16d4d1c66b65c91076bd04ba4d5ae3bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "html_url": "https://github.com/rust-lang/rust/commit/64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23fa5360502be2554382c9d860e6438d3b822858", "url": "https://api.github.com/repos/rust-lang/rust/commits/23fa5360502be2554382c9d860e6438d3b822858", "html_url": "https://github.com/rust-lang/rust/commit/23fa5360502be2554382c9d860e6438d3b822858"}], "stats": {"total": 225, "additions": 109, "deletions": 116}, "files": [{"sha": "594d42c936659e133b8f8ca1ad7ceed43c6e96f3", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -11,9 +11,9 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::config::{OptLevel, SanitizerSet};\n+use rustc_session::config::OptLevel;\n use rustc_session::Session;\n-use rustc_target::spec::StackProbeType;\n+use rustc_target::spec::{SanitizerSet, StackProbeType};\n \n use crate::attributes;\n use crate::llvm::AttributePlace::Function;"}, {"sha": "b3551177323aaad5f9c070706d1d3c13da8c5df8", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -23,11 +23,11 @@ use rustc_fs_util::{link_or_copy, path_to_c_string};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{self, Lto, OutputType, Passes, SanitizerSet, SwitchWithOptPath};\n+use rustc_session::config::{self, Lto, OutputType, Passes, SwitchWithOptPath};\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::InnerSpan;\n-use rustc_target::spec::{CodeModel, RelocModel, SplitDebuginfo};\n+use rustc_target::spec::{CodeModel, RelocModel, SanitizerSet, SplitDebuginfo};\n use tracing::debug;\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};"}, {"sha": "6f6c649bb0b18a1cbf7b6d4e4f3effba8ecc9825", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -32,8 +32,9 @@ use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::middle::exported_symbols;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{DebugInfo, SanitizerSet};\n+use rustc_session::config::DebugInfo;\n use rustc_span::symbol::Symbol;\n+use rustc_target::spec::SanitizerSet;\n \n use std::ffi::CString;\n use std::time::Instant;"}, {"sha": "9eaabfe04a96f40d5184049ad8428c4d84ec123f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::cstore::{EncodedMetadata, LibSource};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo};\n-use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, SanitizerSet};\n+use rustc_session::config::{OutputFilenames, OutputType, PrintRequest};\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::NativeLibKind;\n@@ -16,7 +16,7 @@ use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor, SplitDebuginfo};\n-use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target};\n+use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, SanitizerSet, Target};\n \n use super::archive::ArchiveBuilder;\n use super::command::Command;"}, {"sha": "b8f277c8ff5e3e2de517daa74ddccc3b05ebfcfe", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -15,7 +15,8 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{SymbolName, TyCtxt};\n-use rustc_session::config::{CrateType, SanitizerSet};\n+use rustc_session::config::CrateType;\n+use rustc_target::spec::SanitizerSet;\n \n pub fn threshold(tcx: TyCtxt<'_>) -> SymbolExportLevel {\n     crates_export_threshold(&tcx.sess.crate_types())"}, {"sha": "b03242363735b1cb2cdd18b2868dc0043374aefb", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -27,12 +27,12 @@ use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n use rustc_session::config::{self, CrateType, Lto, OutputFilenames, OutputType};\n-use rustc_session::config::{Passes, SanitizerSet, SwitchWithOptPath};\n+use rustc_session::config::{Passes, SwitchWithOptPath};\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, FileName, InnerSpan, Pos, Span};\n-use rustc_target::spec::{MergeFunctions, PanicStrategy};\n+use rustc_target::spec::{MergeFunctions, PanicStrategy, SanitizerSet};\n \n use std::any::Any;\n use std::fs;"}, {"sha": "2270b2b33e2bab2476bb9cb0399b9bacb9487249", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -8,7 +8,7 @@ use rustc_session::config::{build_configuration, build_session_options, to_crate\n use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n use rustc_session::config::{\n-    Externs, OutputType, OutputTypes, SanitizerSet, SymbolManglingVersion, WasiExecModel,\n+    Externs, OutputType, OutputTypes, SymbolManglingVersion, WasiExecModel,\n };\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n@@ -18,7 +18,7 @@ use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n-use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TlsModel};\n+use rustc_target::spec::{RelocModel, RelroLevel, SanitizerSet, SplitDebuginfo, TlsModel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n use std::num::NonZeroUsize;"}, {"sha": "bfca6a5f574c4c6dad168db00fe86f7f3d02223d", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -1,7 +1,7 @@\n use crate::mir::mono::Linkage;\n use rustc_attr::{InlineAttr, InstructionSetAttr, OptimizeAttr};\n-use rustc_session::config::SanitizerSet;\n use rustc_span::symbol::Symbol;\n+use rustc_target::spec::SanitizerSet;\n \n #[derive(Clone, TyEncodable, TyDecodable, HashStable, Debug)]\n pub struct CodegenFnAttrs {"}, {"sha": "e39b9b9b33eeaed818644b0a51a0c4ceba8ad29b", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 64, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -10,7 +10,6 @@ use crate::{early_error, early_warn, Session};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::impl_stable_hash_via_hash;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n use rustc_target::abi::{Align, TargetDataLayout};\n use rustc_target::spec::{SplitDebuginfo, Target, TargetTriple};\n@@ -36,66 +35,6 @@ use std::iter::{self, FromIterator};\n use std::path::{Path, PathBuf};\n use std::str::{self, FromStr};\n \n-bitflags! {\n-    #[derive(Default, Encodable, Decodable)]\n-    pub struct SanitizerSet: u8 {\n-        const ADDRESS = 1 << 0;\n-        const LEAK    = 1 << 1;\n-        const MEMORY  = 1 << 2;\n-        const THREAD  = 1 << 3;\n-        const HWADDRESS  = 1 << 4;\n-    }\n-}\n-\n-/// Formats a sanitizer set as a comma separated list of sanitizers' names.\n-impl fmt::Display for SanitizerSet {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let mut first = true;\n-        for s in *self {\n-            let name = match s {\n-                SanitizerSet::ADDRESS => \"address\",\n-                SanitizerSet::LEAK => \"leak\",\n-                SanitizerSet::MEMORY => \"memory\",\n-                SanitizerSet::THREAD => \"thread\",\n-                SanitizerSet::HWADDRESS => \"hwaddress\",\n-                _ => panic!(\"unrecognized sanitizer {:?}\", s),\n-            };\n-            if !first {\n-                f.write_str(\",\")?;\n-            }\n-            f.write_str(name)?;\n-            first = false;\n-        }\n-        Ok(())\n-    }\n-}\n-\n-impl IntoIterator for SanitizerSet {\n-    type Item = SanitizerSet;\n-    type IntoIter = std::vec::IntoIter<SanitizerSet>;\n-\n-    fn into_iter(self) -> Self::IntoIter {\n-        [\n-            SanitizerSet::ADDRESS,\n-            SanitizerSet::LEAK,\n-            SanitizerSet::MEMORY,\n-            SanitizerSet::THREAD,\n-            SanitizerSet::HWADDRESS,\n-        ]\n-        .iter()\n-        .copied()\n-        .filter(|&s| self.contains(s))\n-        .collect::<Vec<_>>()\n-        .into_iter()\n-    }\n-}\n-\n-impl<CTX> HashStable<CTX> for SanitizerSet {\n-    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        self.bits().hash_stable(ctx, hasher);\n-    }\n-}\n-\n /// The different settings that the `-Z strip` flag can have.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n pub enum Strip {\n@@ -2308,16 +2247,16 @@ impl PpMode {\n crate mod dep_tracking {\n     use super::{\n         CFGuard, CrateType, DebugInfo, ErrorOutputType, InstrumentCoverage, LinkerPluginLto,\n-        LtoCli, OptLevel, OutputTypes, Passes, SanitizerSet, SourceFileHashAlgorithm,\n-        SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n+        LtoCli, OptLevel, OutputTypes, Passes, SourceFileHashAlgorithm, SwitchWithOptPath,\n+        SymbolManglingVersion, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n     use crate::utils::NativeLibKind;\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n     use rustc_target::spec::{CodeModel, MergeFunctions, PanicStrategy, RelocModel};\n-    use rustc_target::spec::{RelroLevel, SplitDebuginfo, TargetTriple, TlsModel};\n+    use rustc_target::spec::{RelroLevel, SanitizerSet, SplitDebuginfo, TargetTriple, TlsModel};\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;"}, {"sha": "7971f7ef9efe2e386a1fb8d4acaa2d0f0e41597f", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -3,8 +3,6 @@\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n-#[macro_use]\n-extern crate bitflags;\n #[macro_use]\n extern crate rustc_macros;\n "}, {"sha": "623062dd569a18bfbd4cd3f3c6e5b4ae756c9308", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -5,7 +5,7 @@ use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLibKind;\n \n-use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n+use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TargetTriple, TlsModel};\n \n use rustc_feature::UnstableFeatures;"}, {"sha": "fce34cf724769142e2ce28279201b764add332f7", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -1,7 +1,7 @@\n use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n-use crate::config::{self, CrateType, OutputType, PrintRequest, SanitizerSet, SwitchWithOptPath};\n+use crate::config::{self, CrateType, OutputType, PrintRequest, SwitchWithOptPath};\n use crate::filesearch;\n use crate::lint::{self, LintId};\n use crate::parse::ParseSess;\n@@ -28,7 +28,7 @@ use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, S\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};\n use rustc_target::asm::InlineAsmArch;\n use rustc_target::spec::{CodeModel, PanicStrategy, RelocModel, RelroLevel};\n-use rustc_target::spec::{SplitDebuginfo, Target, TargetTriple, TlsModel};\n+use rustc_target::spec::{SanitizerSet, SplitDebuginfo, Target, TargetTriple, TlsModel};\n \n use std::cell::{self, RefCell};\n use std::env;"}, {"sha": "b68369b44347ff5ff692445555168a9e83d1aee9", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 87, "deletions": 32, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -37,6 +37,7 @@\n use crate::abi::Endian;\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_serialize::json::{Json, ToJson};\n use rustc_span::symbol::{sym, Symbol};\n use std::collections::BTreeMap;\n@@ -511,38 +512,6 @@ impl fmt::Display for SplitDebuginfo {\n     }\n }\n \n-macro_rules! supported_targets {\n-    ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n-        $(mod $module;)+\n-\n-        /// List of supported targets\n-        pub const TARGETS: &[&str] = &[$($($triple),+),+];\n-\n-        fn load_builtin(target: &str) -> Option<Target> {\n-            let mut t = match target {\n-                $( $($triple)|+ => $module::target(), )+\n-                _ => return None,\n-            };\n-            t.is_builtin = true;\n-            debug!(\"got builtin target: {:?}\", t);\n-            Some(t)\n-        }\n-\n-        #[cfg(test)]\n-        mod tests {\n-            mod tests_impl;\n-\n-            // Cannot put this into a separate file without duplication, make an exception.\n-            $(\n-                #[test] // `#[test]`\n-                fn $module() {\n-                    tests_impl::test_target(super::$module::target());\n-                }\n-            )+\n-        }\n-    };\n-}\n-\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum StackProbeType {\n     /// Don't emit any stack probes.\n@@ -620,6 +589,92 @@ impl ToJson for StackProbeType {\n     }\n }\n \n+bitflags::bitflags! {\n+    #[derive(Default, Encodable, Decodable)]\n+    pub struct SanitizerSet: u8 {\n+        const ADDRESS = 1 << 0;\n+        const LEAK    = 1 << 1;\n+        const MEMORY  = 1 << 2;\n+        const THREAD  = 1 << 3;\n+        const HWADDRESS = 1 << 4;\n+    }\n+}\n+\n+/// Formats a sanitizer set as a comma separated list of sanitizers' names.\n+impl fmt::Display for SanitizerSet {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut first = true;\n+        for s in *self {\n+            let name = match s {\n+                SanitizerSet::ADDRESS => \"address\",\n+                SanitizerSet::LEAK => \"leak\",\n+                SanitizerSet::MEMORY => \"memory\",\n+                SanitizerSet::THREAD => \"thread\",\n+                SanitizerSet::HWADDRESS => \"hwaddress\",\n+                _ => panic!(\"unrecognized sanitizer {:?}\", s),\n+            };\n+            if !first {\n+                f.write_str(\",\")?;\n+            }\n+            f.write_str(name)?;\n+            first = false;\n+        }\n+        Ok(())\n+    }\n+}\n+\n+impl IntoIterator for SanitizerSet {\n+    type Item = SanitizerSet;\n+    type IntoIter = std::vec::IntoIter<SanitizerSet>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        [SanitizerSet::ADDRESS, SanitizerSet::LEAK, SanitizerSet::MEMORY, SanitizerSet::THREAD, SanitizerSet::HWADDRESS]\n+            .iter()\n+            .copied()\n+            .filter(|&s| self.contains(s))\n+            .collect::<Vec<_>>()\n+            .into_iter()\n+    }\n+}\n+\n+impl<CTX> HashStable<CTX> for SanitizerSet {\n+    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n+        self.bits().hash_stable(ctx, hasher);\n+    }\n+}\n+\n+macro_rules! supported_targets {\n+    ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n+        $(mod $module;)+\n+\n+        /// List of supported targets\n+        pub const TARGETS: &[&str] = &[$($($triple),+),+];\n+\n+        fn load_builtin(target: &str) -> Option<Target> {\n+            let mut t = match target {\n+                $( $($triple)|+ => $module::target(), )+\n+                _ => return None,\n+            };\n+            t.is_builtin = true;\n+            debug!(\"got builtin target: {:?}\", t);\n+            Some(t)\n+        }\n+\n+        #[cfg(test)]\n+        mod tests {\n+            mod tests_impl;\n+\n+            // Cannot put this into a separate file without duplication, make an exception.\n+            $(\n+                #[test] // `#[test]`\n+                fn $module() {\n+                    tests_impl::test_target(super::$module::target());\n+                }\n+            )+\n+        }\n+    };\n+}\n+\n supported_targets! {\n     (\"x86_64-unknown-linux-gnu\", x86_64_unknown_linux_gnu),\n     (\"x86_64-unknown-linux-gnux32\", x86_64_unknown_linux_gnux32),"}, {"sha": "05ba8811cc2dfd1ab26d67dcda8fb325e3821ec3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af7eae1ea25102c8197f9f190ee65ddc4f8a10/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=64af7eae1ea25102c8197f9f190ee65ddc4f8a10", "patch": "@@ -43,12 +43,11 @@ use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n-use rustc_session::config::SanitizerSet;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::spec::abi;\n+use rustc_target::spec::{abi, SanitizerSet};\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n use std::iter;\n "}]}