{"sha": "7521a974d34d24203b538a2d6d0b220c7c011fa6", "node_id": "C_kwDOAAsO6NoAKDc1MjFhOTc0ZDM0ZDI0MjAzYjUzOGEyZDZkMGIyMjBjN2MwMTFmYTY", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-09T02:03:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-09T02:03:52Z"}, "message": "Rollup merge of #103353 - wesleywiser:fix_lld_thinlto_msvc, r=michaelwoerister\n\nFix Access Violation when using lld & ThinLTO on windows-msvc\n\nUsers report an AV at runtime of the compiled binary when using lld and ThinLTO on windows-msvc. The AV occurs when accessing a static value which is defined in one crate but used in another. Based on the disassembly of the cross-crate use, it appears that the use is not correctly linked with the definition and is instead assigned a garbage pointer value.\n\nIf we look at the symbol tables for each crates' obj file, we can see what is happening:\n\n*lib.obj*:\n\n```\nCOFF SYMBOL TABLE\n...\n00E 00000000 SECT2  notype       External     | _ZN10reproducer7memrchr2FN17h612b61ca0e168901E\n...\n```\n\n*bin.obj*:\n\n```\nCOFF SYMBOL TABLE\n...\n010 00000000 UNDEF  notype       External     | __imp__ZN10reproducer7memrchr2FN17h612b61ca0e168901E\n...\n```\n\nThe use of the symbol has the \"import\" style symbol name but the declaration doesn't generate any symbol with the same name. As a result, linking the files generates a warning from lld:\n\n> rust-lld: warning: bin.obj: locally defined symbol imported: reproducer::memrchr::FN::h612b61ca0e168901 (defined in lib.obj) [LNK4217]\n\nand the symbol reference remains undefined at runtime leading to the AV.\n\nTo fix this, we just need to detect that we are performing ThinLTO (and thus, static linking) and omit the `dllimport` attribute on the extern item in LLVM IR.\n\nFixes #81408", "tree": {"sha": "d5f11bfe098ad93216424fced8939c3f7537f6d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5f11bfe098ad93216424fced8939c3f7537f6d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7521a974d34d24203b538a2d6d0b220c7c011fa6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjawqICRBK7hj4Ov3rIwAA1fQIAI4ain9BG6XVkxhQvGplPXMr\nMDtCd7VlCKMLaFYzxmL2xNV8PhCyO5sDtyI69qTTpkFhJAJACd3pxl2iHpT0T3ih\noWF2oEzoPL8JIQrU/t7nT1ZT6LRLHx/u6Q+ehEfHYqxh8GLhuQGu8rXftAL/66rc\nyhv5mb2RbvEe/nJm16CQ9EkigQoIhcgud7RTRhUc9LtlC4EBdGGoFkW1RXSBQN7V\nlKcDPLaiEgetXuFuJ7v6vs59X9lEbqXg2/ZVmdFkPKPYpCcPbIAT9ZlxK6UyipWM\nc7v4sUjp63bl2Cwil9p2ZEWYOxNccqXeZ1QD66tfRtdkWoSDVtLSVPWnSx+YG7w=\n=fWk3\n-----END PGP SIGNATURE-----\n", "payload": "tree d5f11bfe098ad93216424fced8939c3f7537f6d9\nparent bd4e608f7bdee9d283498e58617202aef30547b8\nparent 296489c89268e56abb8f6050842d006b16ed4f09\nauthor Manish Goregaokar <manishsmail@gmail.com> 1667959432 -0500\ncommitter GitHub <noreply@github.com> 1667959432 -0500\n\nRollup merge of #103353 - wesleywiser:fix_lld_thinlto_msvc, r=michaelwoerister\n\nFix Access Violation when using lld & ThinLTO on windows-msvc\n\nUsers report an AV at runtime of the compiled binary when using lld and ThinLTO on windows-msvc. The AV occurs when accessing a static value which is defined in one crate but used in another. Based on the disassembly of the cross-crate use, it appears that the use is not correctly linked with the definition and is instead assigned a garbage pointer value.\n\nIf we look at the symbol tables for each crates' obj file, we can see what is happening:\n\n*lib.obj*:\n\n```\nCOFF SYMBOL TABLE\n...\n00E 00000000 SECT2  notype       External     | _ZN10reproducer7memrchr2FN17h612b61ca0e168901E\n...\n```\n\n*bin.obj*:\n\n```\nCOFF SYMBOL TABLE\n...\n010 00000000 UNDEF  notype       External     | __imp__ZN10reproducer7memrchr2FN17h612b61ca0e168901E\n...\n```\n\nThe use of the symbol has the \"import\" style symbol name but the declaration doesn't generate any symbol with the same name. As a result, linking the files generates a warning from lld:\n\n> rust-lld: warning: bin.obj: locally defined symbol imported: reproducer::memrchr::FN::h612b61ca0e168901 (defined in lib.obj) [LNK4217]\n\nand the symbol reference remains undefined at runtime leading to the AV.\n\nTo fix this, we just need to detect that we are performing ThinLTO (and thus, static linking) and omit the `dllimport` attribute on the extern item in LLVM IR.\n\nFixes #81408\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7521a974d34d24203b538a2d6d0b220c7c011fa6", "html_url": "https://github.com/rust-lang/rust/commit/7521a974d34d24203b538a2d6d0b220c7c011fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7521a974d34d24203b538a2d6d0b220c7c011fa6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4e608f7bdee9d283498e58617202aef30547b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4e608f7bdee9d283498e58617202aef30547b8", "html_url": "https://github.com/rust-lang/rust/commit/bd4e608f7bdee9d283498e58617202aef30547b8"}, {"sha": "296489c89268e56abb8f6050842d006b16ed4f09", "url": "https://api.github.com/repos/rust-lang/rust/commits/296489c89268e56abb8f6050842d006b16ed4f09", "html_url": "https://github.com/rust-lang/rust/commit/296489c89268e56abb8f6050842d006b16ed4f09"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "bf5ac4e503e3f65c4e691ad6d0a1b6b782aef95d", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7521a974d34d24203b538a2d6d0b220c7c011fa6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7521a974d34d24203b538a2d6d0b220c7c011fa6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=7521a974d34d24203b538a2d6d0b220c7c011fa6", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::{bug, span_bug};\n+use rustc_session::config::Lto;\n use rustc_target::abi::{\n     AddressSpace, Align, HasDataLayout, Primitive, Scalar, Size, WrappingRange,\n };\n@@ -303,7 +304,8 @@ impl<'ll> CodegenCx<'ll, '_> {\n                 // ThinLTO can't handle this workaround in all cases, so we don't\n                 // emit the attrs. Instead we make them unnecessary by disallowing\n                 // dynamic linking when linker plugin based LTO is enabled.\n-                !self.tcx.sess.opts.cg.linker_plugin_lto.enabled();\n+                !self.tcx.sess.opts.cg.linker_plugin_lto.enabled() &&\n+                self.tcx.sess.lto() != Lto::Thin;\n \n             // If this assertion triggers, there's something wrong with commandline\n             // argument validation."}, {"sha": "afb0dc42f443a8938cce94c2ca301a1cb1a7a9f3", "filename": "src/test/codegen/auxiliary/static_dllimport_aux.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7521a974d34d24203b538a2d6d0b220c7c011fa6/src%2Ftest%2Fcodegen%2Fauxiliary%2Fstatic_dllimport_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7521a974d34d24203b538a2d6d0b220c7c011fa6/src%2Ftest%2Fcodegen%2Fauxiliary%2Fstatic_dllimport_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fauxiliary%2Fstatic_dllimport_aux.rs?ref=7521a974d34d24203b538a2d6d0b220c7c011fa6", "patch": "@@ -0,0 +1,13 @@\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+\n+#[inline(always)]\n+pub fn memrchr() {\n+    fn detect() {}\n+\n+    static CROSS_CRATE_STATIC_ITEM: AtomicPtr<()> = AtomicPtr::new(detect as *mut ());\n+\n+    unsafe {\n+        let fun = CROSS_CRATE_STATIC_ITEM.load(Ordering::SeqCst);\n+        std::mem::transmute::<*mut (), fn()>(fun)()\n+    }\n+}"}, {"sha": "0b6ab4f7ecb3bb9342d255df88aa7344531c59d1", "filename": "src/test/codegen/issue-81408-dllimport-thinlto-windows.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7521a974d34d24203b538a2d6d0b220c7c011fa6/src%2Ftest%2Fcodegen%2Fissue-81408-dllimport-thinlto-windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7521a974d34d24203b538a2d6d0b220c7c011fa6/src%2Ftest%2Fcodegen%2Fissue-81408-dllimport-thinlto-windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-81408-dllimport-thinlto-windows.rs?ref=7521a974d34d24203b538a2d6d0b220c7c011fa6", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -O -C lto=thin -C prefer-dynamic=no\n+// only-windows\n+// aux-build:static_dllimport_aux.rs\n+\n+// Test that on Windows, when performing ThinLTO, we do not mark cross-crate static items with\n+// dllimport because lld does not fix the symbol names for us.\n+\n+extern crate static_dllimport_aux;\n+\n+// CHECK-LABEL: @{{.+}}CROSS_CRATE_STATIC_ITEM{{.+}} =\n+// CHECK-SAME: external local_unnamed_addr global %\"{{.+}}AtomicPtr\n+\n+pub fn main() {\n+    static_dllimport_aux::memrchr();\n+}"}]}