{"sha": "d39b4411296585895b1111d14c1459ea3e9bf9be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOWI0NDExMjk2NTg1ODk1YjExMTFkMTRjMTQ1OWVhM2U5YmY5YmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-25T09:45:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-25T09:45:01Z"}, "message": "Start using ArgAbi", "tree": {"sha": "77c176edb62357a3229e0050808fa33ce6b984b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77c176edb62357a3229e0050808fa33ce6b984b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d39b4411296585895b1111d14c1459ea3e9bf9be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d39b4411296585895b1111d14c1459ea3e9bf9be", "html_url": "https://github.com/rust-lang/rust/commit/d39b4411296585895b1111d14c1459ea3e9bf9be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d39b4411296585895b1111d14c1459ea3e9bf9be/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae6daf77ba9762f4f118b2342298ce5fa2e32a7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6daf77ba9762f4f118b2342298ce5fa2e32a7a", "html_url": "https://github.com/rust-lang/rust/commit/ae6daf77ba9762f4f118b2342298ce5fa2e32a7a"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "957beab745bc31ae438b07f01df5471478d652ef", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 53, "deletions": 27, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d39b4411296585895b1111d14c1459ea3e9bf9be/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39b4411296585895b1111d14c1459ea3e9bf9be/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=d39b4411296585895b1111d14c1459ea3e9bf9be", "patch": "@@ -2,6 +2,7 @@\n \n use crate::prelude::*;\n \n+use rustc_target::abi::call::{ArgAbi, ArgAttributes, PassMode as RustcPassMode};\n pub(super) use EmptySinglePair::*;\n \n #[derive(Copy, Clone, Debug)]\n@@ -83,39 +84,64 @@ pub(super) fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>)\n         // WARNING zst arguments must never be passed, as that will break CastKind::ClosureFnPointer\n         PassMode::NoPass\n     } else {\n-        match &layout.abi {\n-            Abi::Uninhabited => PassMode::NoPass,\n-            Abi::Scalar(scalar) => PassMode::ByVal(scalar_to_clif_type(tcx, scalar.clone())),\n-            Abi::ScalarPair(a, b) => {\n-                let a = scalar_to_clif_type(tcx, a.clone());\n-                let b = scalar_to_clif_type(tcx, b.clone());\n-                if a == types::I128 && b == types::I128 {\n-                    // Returning (i128, i128) by-val-pair would take 4 regs, while only 3 are\n-                    // available on x86_64. Cranelift gets confused when too many return params\n-                    // are used.\n-                    PassMode::ByRef {\n-                        size: Some(layout.size),\n+        let arg_abi = ArgAbi::new(&tcx, layout, |_, _, _| ArgAttributes::new());\n+        match arg_abi.mode {\n+            RustcPassMode::Ignore => PassMode::NoPass,\n+            RustcPassMode::Direct(_) => match &arg_abi.layout.abi {\n+                Abi::Scalar(scalar) => PassMode::ByVal(scalar_to_clif_type(tcx, scalar.clone())),\n+                // FIXME implement Vector Abi in a cg_llvm compatible way\n+                Abi::Vector { .. } => {\n+                    if let Some(vector_ty) = crate::intrinsics::clif_vector_type(tcx, arg_abi.layout) {\n+                        PassMode::ByVal(vector_ty)\n+                    } else {\n+                        PassMode::ByRef {\n+                            size: Some(arg_abi.layout.size),\n+                        }\n                     }\n-                } else {\n-                    PassMode::ByValPair(a, b)\n                 }\n-            }\n-\n-            // FIXME implement Vector Abi in a cg_llvm compatible way\n-            Abi::Vector { .. } => {\n-                if let Some(vector_ty) = crate::intrinsics::clif_vector_type(tcx, layout) {\n-                    PassMode::ByVal(vector_ty)\n-                } else {\n-                    PassMode::ByRef {\n-                        size: Some(layout.size),\n+                _ => unreachable!(\"{:?}\", arg_abi.layout.abi)\n+            },\n+            RustcPassMode::Pair(_, _) => match &arg_abi.layout.abi {\n+                Abi::ScalarPair(a, b) => {\n+                    let a = scalar_to_clif_type(tcx, a.clone());\n+                    let b = scalar_to_clif_type(tcx, b.clone());\n+                    if a == types::I128 && b == types::I128 {\n+                        // Returning (i128, i128) by-val-pair would take 4 regs, while only 3 are\n+                        // available on x86_64. Cranelift gets confused when too many return params\n+                        // are used.\n+                        PassMode::ByRef {\n+                            size: Some(arg_abi.layout.size),\n+                        }\n+                    } else {\n+                        PassMode::ByValPair(a, b)\n                     }\n                 }\n+                _ => unreachable!(\"{:?}\", arg_abi.layout.abi)\n+            },\n+            RustcPassMode::Cast(_) | RustcPassMode::Indirect {\n+                attrs: _,\n+                extra_attrs: None,\n+                on_stack: false,\n+            } => PassMode::ByRef {\n+                size: Some(arg_abi.layout.size),\n+            },\n+            RustcPassMode::Indirect {\n+                attrs: _,\n+                extra_attrs,\n+                on_stack: true,\n+            } => {\n+                assert!(extra_attrs.is_none());\n+                PassMode::ByRef {\n+                    size: Some(arg_abi.layout.size)\n+                }\n             }\n-\n-            Abi::Aggregate { sized: true } => PassMode::ByRef {\n-                size: Some(layout.size),\n+            RustcPassMode::Indirect {\n+                attrs: _,\n+                extra_attrs: Some(_),\n+                on_stack: false,\n+            } => PassMode::ByRef {\n+                size: None,\n             },\n-            Abi::Aggregate { sized: false } => PassMode::ByRef { size: None },\n         }\n     }\n }"}]}