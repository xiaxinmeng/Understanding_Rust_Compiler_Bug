{"sha": "47225e8700d8e10848b4f8df8e551fc7e438240f", "node_id": "C_kwDOAAsO6NoAKDQ3MjI1ZTg3MDBkOGUxMDg0OGI0ZjhkZjhlNTUxZmM3ZTQzODI0MGY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-03-07T04:42:50Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-03-28T19:48:48Z"}, "message": "Introduce `DeepRejectCtxt::substs_refs_may_unify`.\n\nIt factors out a repeated code pattern.", "tree": {"sha": "8780dd4ac7756c307bae35b567cdcf5709f2ee84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8780dd4ac7756c307bae35b567cdcf5709f2ee84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47225e8700d8e10848b4f8df8e551fc7e438240f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47225e8700d8e10848b4f8df8e551fc7e438240f", "html_url": "https://github.com/rust-lang/rust/commit/47225e8700d8e10848b4f8df8e551fc7e438240f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47225e8700d8e10848b4f8df8e551fc7e438240f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478cbb42b730ba4739351b72ce2aa928e78e2f81", "url": "https://api.github.com/repos/rust-lang/rust/commits/478cbb42b730ba4739351b72ce2aa928e78e2f81", "html_url": "https://github.com/rust-lang/rust/commit/478cbb42b730ba4739351b72ce2aa928e78e2f81"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "6fe91b0cfa0a65eb95efa52a8bbf09e65b007757", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/47225e8700d8e10848b4f8df8e551fc7e438240f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47225e8700d8e10848b4f8df8e551fc7e438240f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=47225e8700d8e10848b4f8df8e551fc7e438240f", "patch": "@@ -1,6 +1,6 @@\n use crate::mir::Mutability;\n use crate::ty::subst::GenericArgKind;\n-use crate::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n+use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeVisitableExt};\n use rustc_hir::def_id::DefId;\n use std::fmt::Debug;\n use std::hash::Hash;\n@@ -188,6 +188,15 @@ pub struct DeepRejectCtxt {\n }\n \n impl DeepRejectCtxt {\n+    pub fn substs_refs_may_unify<'tcx>(\n+        self,\n+        obligation_substs: SubstsRef<'tcx>,\n+        impl_substs: SubstsRef<'tcx>,\n+    ) -> bool {\n+        iter::zip(obligation_substs, impl_substs)\n+            .all(|(obl, imp)| self.generic_args_may_unify(obl, imp))\n+    }\n+\n     pub fn generic_args_may_unify<'tcx>(\n         self,\n         obligation_arg: ty::GenericArg<'tcx>,\n@@ -258,9 +267,7 @@ impl DeepRejectCtxt {\n             },\n             ty::Adt(obl_def, obl_substs) => match k {\n                 &ty::Adt(impl_def, impl_substs) => {\n-                    obl_def == impl_def\n-                        && iter::zip(obl_substs, impl_substs)\n-                            .all(|(obl, imp)| self.generic_args_may_unify(obl, imp))\n+                    obl_def == impl_def && self.substs_refs_may_unify(obl_substs, impl_substs)\n                 }\n                 _ => false,\n             },"}, {"sha": "91b56fe3522ca6e6ebecfad9457d17c1482097b8", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47225e8700d8e10848b4f8df8e551fc7e438240f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47225e8700d8e10848b4f8df8e551fc7e438240f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=47225e8700d8e10848b4f8df8e551fc7e438240f", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::ty::ProjectionPredicate;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ToPredicate, TypeVisitableExt};\n use rustc_span::{sym, DUMMY_SP};\n-use std::iter;\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n     #[instrument(level = \"debug\", skip(self), ret)]\n@@ -144,9 +143,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         let goal_trait_ref = goal.predicate.projection_ty.trait_ref(tcx);\n         let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n-        if iter::zip(goal_trait_ref.substs, impl_trait_ref.skip_binder().substs)\n-            .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))\n-        {\n+        if !drcx.substs_refs_may_unify(goal_trait_ref.substs, impl_trait_ref.skip_binder().substs) {\n             return Err(NoSolution);\n         }\n "}, {"sha": "f522a8f7e65d191d016e9d1745bc3b399d82e9e8", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47225e8700d8e10848b4f8df8e551fc7e438240f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47225e8700d8e10848b4f8df8e551fc7e438240f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=47225e8700d8e10848b4f8df8e551fc7e438240f", "patch": "@@ -1,7 +1,5 @@\n //! Dealing with trait goals, i.e. `T: Trait<'a, U>`.\n \n-use std::iter;\n-\n use super::{assembly, EvalCtxt, SolverMode};\n use rustc_hir::def_id::DefId;\n use rustc_hir::LangItem;\n@@ -41,9 +39,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n \n         let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n-        if iter::zip(goal.predicate.trait_ref.substs, impl_trait_ref.skip_binder().substs)\n-            .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))\n-        {\n+        if !drcx.substs_refs_may_unify(\n+            goal.predicate.trait_ref.substs,\n+            impl_trait_ref.skip_binder().substs,\n+        ) {\n             return Err(NoSolution);\n         }\n "}, {"sha": "d360158fdf818421abb3fb7288acab49ae316667", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47225e8700d8e10848b4f8df8e551fc7e438240f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47225e8700d8e10848b4f8df8e551fc7e438240f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=47225e8700d8e10848b4f8df8e551fc7e438240f", "patch": "@@ -79,8 +79,9 @@ pub fn overlapping_impls(\n     let impl1_ref = tcx.impl_trait_ref(impl1_def_id);\n     let impl2_ref = tcx.impl_trait_ref(impl2_def_id);\n     let may_overlap = match (impl1_ref, impl2_ref) {\n-        (Some(a), Some(b)) => iter::zip(a.skip_binder().substs, b.skip_binder().substs)\n-            .all(|(arg1, arg2)| drcx.generic_args_may_unify(arg1, arg2)),\n+        (Some(a), Some(b)) => {\n+            drcx.substs_refs_may_unify(a.skip_binder().substs, b.skip_binder().substs)\n+        }\n         (None, None) => {\n             let self_ty1 = tcx.type_of(impl1_def_id).skip_binder();\n             let self_ty2 = tcx.type_of(impl2_def_id).skip_binder();"}, {"sha": "827c107c8b121e3f28b752290947f3f47df239de", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47225e8700d8e10848b4f8df8e551fc7e438240f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47225e8700d8e10848b4f8df8e551fc7e438240f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=47225e8700d8e10848b4f8df8e551fc7e438240f", "patch": "@@ -2542,8 +2542,10 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n         // substitution if we find that any of the input types, when\n         // simplified, do not match.\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n-        iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs)\n-            .any(|(obl, imp)| !drcx.generic_args_may_unify(obl, imp))\n+        !drcx.substs_refs_may_unify(\n+            obligation.predicate.skip_binder().trait_ref.substs,\n+            impl_trait_ref.substs,\n+        )\n     }\n \n     /// Normalize `where_clause_trait_ref` and try to match it against"}]}