{"sha": "388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OGE5MWM4YThkNTQyZjdhOGUwZGRmZjg3OWNjZTRkNGMyYjIwYWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-14T10:30:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-14T10:30:10Z"}, "message": "Merge #8951\n\n8951: internal: migrate to vscode.FileSystem API r=matklad a=wxb1ank\n\nI encountered an error where `bootstrap()` attempts to create a directory with the path `C:\\C:\\...`. I couldn't find this reported anywhere else. Using the `vscode.FileSystem` API instead of the `fs` one works here. I assume the latter automatically prepends `C:\\` to paths whereas the former does not. I don't know if this suggests `vscode.FileSystem` should be used in more places for consistency.\n\nCo-authored-by: wxb1ank <wxblank@gmail.com>", "tree": {"sha": "a4bd12cfebe76928271d7d999dd0ed744a89ca17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4bd12cfebe76928271d7d999dd0ed744a89ca17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgxy+yCRBK7hj4Ov3rIwAAd58IAGM1yXkO4/eXdUTis56nUcCM\n3UGlhY8tJA/0CKP2wAjQ+XWyhztzcEfArYRwqjyPD89miWOFOwwM6z5R+U6EvJdW\ntB17KmnqS2BLM/Q+Pido3aRSnHcer0IfcsOLvXRd9ogX9LOz7Wc5q1Bnaw86wVCh\nNHNSOmbPGZXDRAsiMDbPc08chGQbrIR8nPDV8Y0yfcUW5plffzU6VKVjC14b9p8d\nQAX+Z+291RbvPNeR9CM9Ki7yFHQqN6UWgL9J3lytoWWb3tZWUZ3DjkskA8C63+01\nSUWgkiX8CZkCGyiN1lDE2JUOcC/dlcp7h/ygRAZZHfXHixrvkeD5Ftu20GXwVTw=\n=DQcg\n-----END PGP SIGNATURE-----\n", "payload": "tree a4bd12cfebe76928271d7d999dd0ed744a89ca17\nparent a274ae384e38be5ad1b23cd2b7f2120e5a284209\nparent 388a1945accb98eaa4e612645075ef08317f5781\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623666610 +0000\ncommitter GitHub <noreply@github.com> 1623666610 +0000\n\nMerge #8951\n\n8951: internal: migrate to vscode.FileSystem API r=matklad a=wxb1ank\n\nI encountered an error where `bootstrap()` attempts to create a directory with the path `C:\\C:\\...`. I couldn't find this reported anywhere else. Using the `vscode.FileSystem` API instead of the `fs` one works here. I assume the latter automatically prepends `C:\\` to paths whereas the former does not. I don't know if this suggests `vscode.FileSystem` should be used in more places for consistency.\n\nCo-authored-by: wxb1ank <wxblank@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae", "html_url": "https://github.com/rust-lang/rust/commit/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a274ae384e38be5ad1b23cd2b7f2120e5a284209", "url": "https://api.github.com/repos/rust-lang/rust/commits/a274ae384e38be5ad1b23cd2b7f2120e5a284209", "html_url": "https://github.com/rust-lang/rust/commit/a274ae384e38be5ad1b23cd2b7f2120e5a284209"}, {"sha": "388a1945accb98eaa4e612645075ef08317f5781", "url": "https://api.github.com/repos/rust-lang/rust/commits/388a1945accb98eaa4e612645075ef08317f5781", "html_url": "https://github.com/rust-lang/rust/commit/388a1945accb98eaa4e612645075ef08317f5781"}], "stats": {"total": 85, "additions": 38, "deletions": 47}, "files": [{"sha": "2277eeb7ea8edae8da8509c64cf4ee7bf3041367", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae", "patch": "@@ -31,10 +31,10 @@ export class Config {\n         enableProposedApi: boolean | undefined;\n     } = vscode.extensions.getExtension(this.extensionId)!.packageJSON;\n \n-    readonly globalStoragePath: string;\n+    readonly globalStorageUri: vscode.Uri;\n \n     constructor(ctx: vscode.ExtensionContext) {\n-        this.globalStoragePath = ctx.globalStorageUri.fsPath;\n+        this.globalStorageUri = ctx.globalStorageUri;\n         vscode.workspace.onDidChangeConfiguration(this.onDidChangeConfiguration, this, ctx.subscriptions);\n         this.refreshLogging();\n     }"}, {"sha": "f58d2621523262119e67ab38121489923fdd3c12", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae", "patch": "@@ -1,7 +1,5 @@\n import * as vscode from 'vscode';\n-import * as path from \"path\";\n import * as os from \"os\";\n-import { promises as fs, PathLike } from \"fs\";\n \n import * as commands from './commands';\n import { activateInlayHints } from './inlay_hints';\n@@ -160,7 +158,7 @@ export async function deactivate() {\n }\n \n async function bootstrap(config: Config, state: PersistentState): Promise<string> {\n-    await fs.mkdir(config.globalStoragePath, { recursive: true });\n+    await vscode.workspace.fs.createDirectory(config.globalStorageUri);\n \n     if (!config.currentExtensionIsNightly) {\n         await state.updateNightlyReleaseId(undefined);\n@@ -222,7 +220,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n     const artifact = latestNightlyRelease.assets.find(artifact => artifact.name === \"rust-analyzer.vsix\");\n     assert(!!artifact, `Bad release: ${JSON.stringify(latestNightlyRelease)}`);\n \n-    const dest = path.join(config.globalStoragePath, \"rust-analyzer.vsix\");\n+    const dest = vscode.Uri.joinPath(config.globalStorageUri, \"rust-analyzer.vsix\");\n \n     await downloadWithRetryDialog(state, async () => {\n         await download({\n@@ -233,8 +231,8 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n         });\n     });\n \n-    await vscode.commands.executeCommand(\"workbench.extensions.installExtension\", vscode.Uri.file(dest));\n-    await fs.unlink(dest);\n+    await vscode.commands.executeCommand(\"workbench.extensions.installExtension\", dest);\n+    await vscode.workspace.fs.delete(dest);\n \n     await state.updateNightlyReleaseId(latestNightlyRelease.id);\n     await state.updateLastCheck(now);\n@@ -259,7 +257,7 @@ async function bootstrapServer(config: Config, state: PersistentState): Promise<\n     return path;\n }\n \n-async function patchelf(dest: PathLike): Promise<void> {\n+async function patchelf(dest: vscode.Uri): Promise<void> {\n     await vscode.window.withProgress(\n         {\n             location: vscode.ProgressLocation.Notification,\n@@ -279,11 +277,11 @@ async function patchelf(dest: PathLike): Promise<void> {\n                     '';\n                 }\n             `;\n-            const origFile = dest + \"-orig\";\n-            await fs.rename(dest, origFile);\n+            const origFile = vscode.Uri.file(dest.path + \"-orig\");\n+            await vscode.workspace.fs.rename(dest, origFile);\n             progress.report({ message: \"Patching executable\", increment: 20 });\n             await new Promise((resolve, reject) => {\n-                const handle = exec(`nix-build -E - --argstr srcStr '${origFile}' -o '${dest}'`,\n+                const handle = exec(`nix-build -E - --argstr srcStr '${origFile.path}' -o '${dest.path}'`,\n                     (err, stdout, stderr) => {\n                         if (err != null) {\n                             reject(Error(stderr));\n@@ -294,7 +292,7 @@ async function patchelf(dest: PathLike): Promise<void> {\n                 handle.stdin?.write(expression);\n                 handle.stdin?.end();\n             });\n-            await fs.unlink(origFile);\n+            await vscode.workspace.fs.delete(origFile);\n         }\n     );\n }\n@@ -334,20 +332,20 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         platform = \"x86_64-unknown-linux-musl\";\n     }\n     const ext = platform.indexOf(\"-windows-\") !== -1 ? \".exe\" : \"\";\n-    const dest = path.join(config.globalStoragePath, `rust-analyzer-${platform}${ext}`);\n-    const exists = await fs.stat(dest).then(() => true, () => false);\n+    const dest = vscode.Uri.joinPath(config.globalStorageUri, `rust-analyzer-${platform}${ext}`);\n+    const exists = await vscode.workspace.fs.stat(dest).then(() => true, () => false);\n     if (!exists) {\n         await state.updateServerVersion(undefined);\n     }\n \n-    if (state.serverVersion === config.package.version) return dest;\n+    if (state.serverVersion === config.package.version) return dest.path;\n \n     if (config.askBeforeDownload) {\n         const userResponse = await vscode.window.showInformationMessage(\n             `Language server version ${config.package.version} for rust-analyzer is not installed.`,\n             \"Download now\"\n         );\n-        if (userResponse !== \"Download now\") return dest;\n+        if (userResponse !== \"Download now\") return dest.path;\n     }\n \n     const releaseTag = config.package.releaseTag;\n@@ -374,7 +372,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     }\n \n     await state.updateServerVersion(config.package.version);\n-    return dest;\n+    return dest.path;\n }\n \n function serverPath(config: Config): string | null {\n@@ -383,7 +381,7 @@ function serverPath(config: Config): string | null {\n \n async function isNixOs(): Promise<boolean> {\n     try {\n-        const contents = await fs.readFile(\"/etc/os-release\");\n+        const contents = (await vscode.workspace.fs.readFile(vscode.Uri.file(\"/etc/os-release\"))).toString();\n         return contents.indexOf(\"ID=nixos\") !== -1;\n     } catch (e) {\n         return false;"}, {"sha": "747c02db91abd5fbac9f2356452817fd5465f3bf", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae", "patch": "@@ -73,14 +73,14 @@ export interface GithubRelease {\n     assets: Array<{\n         name: string;\n         // eslint-disable-next-line camelcase\n-        browser_download_url: string;\n+        browser_download_url: vscode.Uri;\n     }>;\n }\n \n interface DownloadOpts {\n     progressTitle: string;\n-    url: string;\n-    dest: string;\n+    url: vscode.Uri;\n+    dest: vscode.Uri;\n     mode?: number;\n     gunzip?: boolean;\n     httpProxy?: string;\n@@ -90,9 +90,9 @@ export async function download(opts: DownloadOpts) {\n     // Put artifact into a temporary file (in the same dir for simplicity)\n     // to prevent partially downloaded files when user kills vscode\n     // This also avoids overwriting running executables\n-    const dest = path.parse(opts.dest);\n     const randomHex = crypto.randomBytes(5).toString(\"hex\");\n-    const tempFile = path.join(dest.dir, `${dest.name}${randomHex}`);\n+    const rawDest = path.parse(opts.dest.path);\n+    const tempFilePath = vscode.Uri.joinPath(vscode.Uri.file(rawDest.dir), `${rawDest.name}${randomHex}`);\n \n     await vscode.window.withProgress(\n         {\n@@ -102,7 +102,7 @@ export async function download(opts: DownloadOpts) {\n         },\n         async (progress, _cancellationToken) => {\n             let lastPercentage = 0;\n-            await downloadFile(opts.url, tempFile, opts.mode, !!opts.gunzip, opts.httpProxy, (readBytes, totalBytes) => {\n+            await downloadFile(opts.url, tempFilePath, opts.mode, !!opts.gunzip, opts.httpProxy, (readBytes, totalBytes) => {\n                 const newPercentage = Math.round((readBytes / totalBytes) * 100);\n                 if (newPercentage !== lastPercentage) {\n                     progress.report({\n@@ -116,28 +116,28 @@ export async function download(opts: DownloadOpts) {\n         }\n     );\n \n-    await fs.promises.rename(tempFile, opts.dest);\n+    await vscode.workspace.fs.rename(tempFilePath, opts.dest);\n }\n \n async function downloadFile(\n-    url: string,\n-    destFilePath: fs.PathLike,\n+    url: vscode.Uri,\n+    destFilePath: vscode.Uri,\n     mode: number | undefined,\n     gunzip: boolean,\n     httpProxy: string | null | undefined,\n     onProgress: (readBytes: number, totalBytes: number) => void\n ): Promise<void> {\n     const res = await (() => {\n         if (httpProxy) {\n-            log.debug(`Downloading ${url} via proxy: ${httpProxy}`);\n-            return fetch(url, { agent: new HttpsProxyAgent(httpProxy) });\n+            log.debug(`Downloading ${url.path} via proxy: ${httpProxy}`);\n+            return fetch(url.path, { agent: new HttpsProxyAgent(httpProxy) });\n         }\n \n-        return fetch(url);\n+        return fetch(url.path);\n     })();\n \n     if (!res.ok) {\n-        log.error(\"Error\", res.status, \"while downloading file from\", url);\n+        log.error(\"Error\", res.status, \"while downloading file from\", url.path);\n         log.error({ body: await res.text(), headers: res.headers });\n \n         throw new Error(`Got response ${res.status} when trying to download a file.`);\n@@ -146,15 +146,15 @@ async function downloadFile(\n     const totalBytes = Number(res.headers.get('content-length'));\n     assert(!Number.isNaN(totalBytes), \"Sanity check of content-length protocol\");\n \n-    log.debug(\"Downloading file of\", totalBytes, \"bytes size from\", url, \"to\", destFilePath);\n+    log.debug(\"Downloading file of\", totalBytes, \"bytes size from\", url.path, \"to\", destFilePath.path);\n \n     let readBytes = 0;\n     res.body.on(\"data\", (chunk: Buffer) => {\n         readBytes += chunk.length;\n         onProgress(readBytes, totalBytes);\n     });\n \n-    const destFileStream = fs.createWriteStream(destFilePath, { mode });\n+    const destFileStream = fs.createWriteStream(destFilePath.path, { mode });\n     const srcStream = gunzip ? res.body.pipe(zlib.createGunzip()) : res.body;\n \n     await pipeline(srcStream, destFileStream);"}, {"sha": "902d0ddda21231a34e266ad61504ffd6efa6a22b", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae", "patch": "@@ -1,9 +1,8 @@\n import * as cp from 'child_process';\n import * as os from 'os';\n import * as path from 'path';\n-import * as fs from 'fs';\n import * as readline from 'readline';\n-import { OutputChannel } from 'vscode';\n+import * as vscode from 'vscode';\n import { execute, log, memoize } from './util';\n \n interface CompilationArtifact {\n@@ -19,7 +18,7 @@ export interface ArtifactSpec {\n }\n \n export class Cargo {\n-    constructor(readonly rootFolder: string, readonly output: OutputChannel) { }\n+    constructor(readonly rootFolder: string, readonly output: vscode.OutputChannel) { }\n \n     // Made public for testing purposes\n     static artifactSpec(args: readonly string[]): ArtifactSpec {\n@@ -158,9 +157,9 @@ export const getPathForExecutable = memoize(\n         try {\n             // hmm, `os.homedir()` seems to be infallible\n             // it is not mentioned in docs and cannot be infered by the type signature...\n-            const standardPath = path.join(os.homedir(), \".cargo\", \"bin\", executableName);\n+            const standardPath = vscode.Uri.joinPath(vscode.Uri.file(os.homedir()), \".cargo\", \"bin\", executableName);\n \n-            if (isFile(standardPath)) return standardPath;\n+            if (isFile(standardPath.path)) return standardPath.path;\n         } catch (err) {\n             log.error(\"Failed to read the fs info\", err);\n         }\n@@ -181,12 +180,6 @@ function lookupInPath(exec: string): boolean {\n     return candidates.some(isFile);\n }\n \n-function isFile(suspectPath: string): boolean {\n-    // It is not mentionned in docs, but `statSync()` throws an error when\n-    // the path doesn't exist\n-    try {\n-        return fs.statSync(suspectPath).isFile();\n-    } catch {\n-        return false;\n-    }\n+async function isFile(path: string): Promise<boolean> {\n+    return ((await vscode.workspace.fs.stat(vscode.Uri.file(path))).type & vscode.FileType.File) !== 0;\n }"}]}