{"sha": "069bf55cca1e1be1f6cdd28b638f691e059858dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OWJmNTVjY2ExZTFiZTFmNmNkZDI4YjYzOGY2OTFlMDU5ODU4ZGM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-24T19:32:42Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-26T15:23:40Z"}, "message": "Add infrastructure for visibility on syntax and hir_def level", "tree": {"sha": "b929d8e84c26e00827a2f507a528ef31e651ecc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b929d8e84c26e00827a2f507a528ef31e651ecc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/069bf55cca1e1be1f6cdd28b638f691e059858dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/069bf55cca1e1be1f6cdd28b638f691e059858dc", "html_url": "https://github.com/rust-lang/rust/commit/069bf55cca1e1be1f6cdd28b638f691e059858dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/069bf55cca1e1be1f6cdd28b638f691e059858dc/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97f01396eda7eb3e6ec5056f3f72d98e5739f829", "url": "https://api.github.com/repos/rust-lang/rust/commits/97f01396eda7eb3e6ec5056f3f72d98e5739f829", "html_url": "https://github.com/rust-lang/rust/commit/97f01396eda7eb3e6ec5056f3f72d98e5739f829"}], "stats": {"total": 165, "additions": 163, "deletions": 2}, "files": [{"sha": "1761e2187c8dffbcf41a3dd02221bef7ba229929", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/069bf55cca1e1be1f6cdd28b638f691e059858dc/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069bf55cca1e1be1f6cdd28b638f691e059858dc/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=069bf55cca1e1be1f6cdd28b638f691e059858dc", "patch": "@@ -14,9 +14,10 @@ use crate::{\n     generics::GenericParams,\n     lang_item::{LangItemTarget, LangItems},\n     nameres::{raw::RawItems, CrateDefMap},\n+    visibility::Visibility,\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n     GenericDefId, ImplId, ImplLoc, ModuleId, StaticId, StaticLoc, StructId, StructLoc, TraitId,\n-    TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc,\n+    TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc, VisibilityDefId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -90,6 +91,9 @@ pub trait DefDatabase: InternDatabase + AstDatabase {\n     #[salsa::invoke(Attrs::attrs_query)]\n     fn attrs(&self, def: AttrDefId) -> Attrs;\n \n+    #[salsa::invoke(Visibility::visibility_query)]\n+    fn visibility(&self, def: VisibilityDefId) -> Visibility;\n+\n     #[salsa::invoke(LangItems::module_lang_items_query)]\n     fn module_lang_items(&self, module: ModuleId) -> Option<Arc<LangItems>>;\n "}, {"sha": "72a59d867671b1552f2193e86c9e7a7638f2d389", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/069bf55cca1e1be1f6cdd28b638f691e059858dc/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069bf55cca1e1be1f6cdd28b638f691e059858dc/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=069bf55cca1e1be1f6cdd28b638f691e059858dc", "patch": "@@ -36,6 +36,8 @@ pub mod nameres;\n pub mod src;\n pub mod child_by_source;\n \n+pub mod visibility;\n+\n #[cfg(test)]\n mod test_db;\n #[cfg(test)]\n@@ -323,6 +325,29 @@ impl_froms!(\n     ImplId\n );\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum VisibilityDefId {\n+    ModuleId(ModuleId),\n+    StructFieldId(StructFieldId),\n+    AdtId(AdtId),\n+    FunctionId(FunctionId),\n+    StaticId(StaticId),\n+    ConstId(ConstId),\n+    TraitId(TraitId),\n+    TypeAliasId(TypeAliasId),\n+}\n+\n+impl_froms!(\n+    VisibilityDefId: ModuleId,\n+    StructFieldId,\n+    AdtId(StructId, EnumId, UnionId),\n+    StaticId,\n+    ConstId,\n+    FunctionId,\n+    TraitId,\n+    TypeAliasId\n+);\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum VariantId {\n     EnumVariantId(EnumVariantId),"}, {"sha": "7d881911d2d5ab7d161e54470b8c7f4a0f5fd920", "filename": "crates/ra_hir_def/src/visibility.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/069bf55cca1e1be1f6cdd28b638f691e059858dc/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069bf55cca1e1be1f6cdd28b638f691e059858dc/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs?ref=069bf55cca1e1be1f6cdd28b638f691e059858dc", "patch": "@@ -0,0 +1,101 @@\n+use std::sync::Arc;\n+\n+use either::Either;\n+\n+use hir_expand::InFile;\n+use ra_syntax::ast::{self, VisibilityOwner};\n+\n+use crate::{\n+    db::DefDatabase,\n+    path::{ModPath, PathKind},\n+    src::{HasChildSource, HasSource},\n+    AdtId, Lookup, VisibilityDefId,\n+};\n+\n+/// Visibility of an item, not yet resolved.\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum Visibility {\n+    // FIXME: We could avoid the allocation in many cases by special-casing\n+    // pub(crate), pub(super) and private. Alternatively, `ModPath` could be\n+    // made to contain an Arc<[Segment]> instead of a Vec?\n+    /// `pub(in module)`, `pub(crate)` or `pub(super)`. Also private, which is\n+    /// equivalent to `pub(self)`.\n+    Module(Arc<ModPath>),\n+    /// `pub`.\n+    Public,\n+}\n+\n+impl Visibility {\n+    pub(crate) fn visibility_query(db: &impl DefDatabase, def: VisibilityDefId) -> Visibility {\n+        match def {\n+            VisibilityDefId::ModuleId(module) => {\n+                let def_map = db.crate_def_map(module.krate);\n+                let src = match def_map[module.local_id].declaration_source(db) {\n+                    Some(it) => it,\n+                    None => return Visibility::private(),\n+                };\n+                Visibility::from_ast(db, src.map(|it| it.visibility()))\n+            }\n+            VisibilityDefId::StructFieldId(it) => {\n+                let src = it.parent.child_source(db);\n+                // TODO: enum variant fields should be public by default\n+                let vis_node = src.map(|m| match &m[it.local_id] {\n+                    Either::Left(tuple) => tuple.visibility(),\n+                    Either::Right(record) => record.visibility(),\n+                });\n+                Visibility::from_ast(db, vis_node)\n+            }\n+            VisibilityDefId::AdtId(it) => match it {\n+                AdtId::StructId(it) => visibility_from_loc(it.lookup(db), db),\n+                AdtId::EnumId(it) => visibility_from_loc(it.lookup(db), db),\n+                AdtId::UnionId(it) => visibility_from_loc(it.lookup(db), db),\n+            },\n+            VisibilityDefId::TraitId(it) => visibility_from_loc(it.lookup(db), db),\n+            VisibilityDefId::ConstId(it) => visibility_from_loc(it.lookup(db), db),\n+            VisibilityDefId::StaticId(it) => visibility_from_loc(it.lookup(db), db),\n+            VisibilityDefId::FunctionId(it) => visibility_from_loc(it.lookup(db), db),\n+            VisibilityDefId::TypeAliasId(it) => visibility_from_loc(it.lookup(db), db),\n+        }\n+    }\n+\n+    fn private() -> Visibility {\n+        let path = ModPath { kind: PathKind::Super(0), segments: Vec::new() };\n+        Visibility::Module(Arc::new(path))\n+    }\n+\n+    fn from_ast(db: &impl DefDatabase, node: InFile<Option<ast::Visibility>>) -> Visibility {\n+        let file_id = node.file_id;\n+        let node = match node.value {\n+            None => return Visibility::private(),\n+            Some(node) => node,\n+        };\n+        match node.kind() {\n+            ast::VisibilityKind::In(path) => {\n+                let path = ModPath::from_src(path, &hir_expand::hygiene::Hygiene::new(db, file_id));\n+                let path = match path {\n+                    None => return Visibility::private(),\n+                    Some(path) => path,\n+                };\n+                Visibility::Module(Arc::new(path))\n+            }\n+            ast::VisibilityKind::PubCrate => {\n+                let path = ModPath { kind: PathKind::Crate, segments: Vec::new() };\n+                Visibility::Module(Arc::new(path))\n+            }\n+            ast::VisibilityKind::PubSuper => {\n+                let path = ModPath { kind: PathKind::Super(1), segments: Vec::new() };\n+                Visibility::Module(Arc::new(path))\n+            }\n+            ast::VisibilityKind::Pub => Visibility::Public,\n+        }\n+    }\n+}\n+\n+fn visibility_from_loc<T>(node: T, db: &impl DefDatabase) -> Visibility\n+where\n+    T: HasSource,\n+    T::Value: ast::VisibilityOwner,\n+{\n+    let src = node.source(db);\n+    Visibility::from_ast(db, src.map(|n| n.visibility()))\n+}"}, {"sha": "89cb9a9f39433438b835dc98386d833b33819083", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/069bf55cca1e1be1f6cdd28b638f691e059858dc/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069bf55cca1e1be1f6cdd28b638f691e059858dc/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=069bf55cca1e1be1f6cdd28b638f691e059858dc", "patch": "@@ -17,7 +17,9 @@ use crate::{\n \n pub use self::{\n     expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n-    extensions::{FieldKind, PathSegmentKind, SelfParamKind, StructKind, TypeBoundKind},\n+    extensions::{\n+        FieldKind, PathSegmentKind, SelfParamKind, StructKind, TypeBoundKind, VisibilityKind,\n+    },\n     generated::*,\n     tokens::*,\n     traits::*,"}, {"sha": "d9666cdca1dbc9b13a8afd38e341f268cf1737dc", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/069bf55cca1e1be1f6cdd28b638f691e059858dc/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069bf55cca1e1be1f6cdd28b638f691e059858dc/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=069bf55cca1e1be1f6cdd28b638f691e059858dc", "patch": "@@ -413,3 +413,32 @@ impl ast::TraitDef {\n         self.syntax().children_with_tokens().any(|t| t.kind() == T![auto])\n     }\n }\n+\n+pub enum VisibilityKind {\n+    In(ast::Path),\n+    PubCrate,\n+    PubSuper,\n+    Pub,\n+}\n+\n+impl ast::Visibility {\n+    pub fn kind(&self) -> VisibilityKind {\n+        if let Some(path) = children(self).next() {\n+            VisibilityKind::In(path)\n+        } else if self.is_pub_crate() {\n+            VisibilityKind::PubCrate\n+        } else if self.is_pub_super() {\n+            VisibilityKind::PubSuper\n+        } else {\n+            VisibilityKind::Pub\n+        }\n+    }\n+\n+    fn is_pub_crate(&self) -> bool {\n+        self.syntax().children_with_tokens().any(|it| it.kind() == T![crate])\n+    }\n+\n+    fn is_pub_super(&self) -> bool {\n+        self.syntax().children_with_tokens().any(|it| it.kind() == T![super])\n+    }\n+}"}]}