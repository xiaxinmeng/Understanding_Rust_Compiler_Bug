{"sha": "276b94601025152a2cf5668a53a96fae94f37731", "node_id": "C_kwDOAAsO6NoAKDI3NmI5NDYwMTAyNTE1MmEyY2Y1NjY4YTUzYTk2ZmFlOTRmMzc3MzE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-12T17:18:08Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-12T20:07:15Z"}, "message": "Handle `unusable_binding` more compactly.", "tree": {"sha": "61e9768978d0f6ac252fe14b7bd688d69fc7615c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61e9768978d0f6ac252fe14b7bd688d69fc7615c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/276b94601025152a2cf5668a53a96fae94f37731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/276b94601025152a2cf5668a53a96fae94f37731", "html_url": "https://github.com/rust-lang/rust/commit/276b94601025152a2cf5668a53a96fae94f37731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/276b94601025152a2cf5668a53a96fae94f37731/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b796d92da3a24326a4bd50a95f765331edef780b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b796d92da3a24326a4bd50a95f765331edef780b", "html_url": "https://github.com/rust-lang/rust/commit/b796d92da3a24326a4bd50a95f765331edef780b"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "25ab3f7dacf905aa7bf48680616d1ee19cd55620", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/276b94601025152a2cf5668a53a96fae94f37731/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b94601025152a2cf5668a53a96fae94f37731/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=276b94601025152a2cf5668a53a96fae94f37731", "patch": "@@ -902,27 +902,24 @@ impl<'a> Resolver<'a> {\n             self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.\n \n         if let Some(path_span) = finalize {\n-            let Some(mut binding) = resolution.binding else {\n-                return Err((Determined, Weak::No));\n-            };\n-\n             // If the primary binding is unusable, search further and return the shadowed glob\n             // binding if it exists. What we really want here is having two separate scopes in\n             // a module - one for non-globs and one for globs, but until that's done use this\n             // hack to avoid inconsistent resolution ICEs during import validation.\n-            if let Some(unusable_binding) = unusable_binding\n-                && ptr::eq(binding, unusable_binding)\n-            {\n-                let Some(shadowed) = resolution.shadowed_glob else {\n-                    return Err((Determined, Weak::No));\n-                };\n-\n-                if ptr::eq(shadowed, unusable_binding) {\n-                    return Err((Determined, Weak::No));\n-                }\n-\n-                binding = shadowed;\n-            }\n+            let binding = [resolution.binding, resolution.shadowed_glob]\n+                .into_iter()\n+                .filter_map(|binding| match (binding, unusable_binding) {\n+                    (Some(binding), Some(unusable_binding))\n+                        if ptr::eq(binding, unusable_binding) =>\n+                    {\n+                        None\n+                    }\n+                    _ => binding,\n+                })\n+                .next();\n+            let Some(binding) = binding else {\n+                return Err((Determined, Weak::No));\n+            };\n \n             if !self.is_accessible_from(binding.vis, parent_scope.module) {\n                 if last_import_segment {"}]}