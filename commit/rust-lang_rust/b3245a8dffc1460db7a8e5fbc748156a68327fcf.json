{"sha": "b3245a8dffc1460db7a8e5fbc748156a68327fcf", "node_id": "C_kwDOAAsO6NoAKGIzMjQ1YThkZmZjMTQ2MGRiN2E4ZTVmYmM3NDgxNTZhNjgzMjdmY2Y", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T01:28:05Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T05:06:50Z"}, "message": "Box `thir::ExprKind::Closure`.\n\nThis shrinks `thir::Expr`.", "tree": {"sha": "d286ea0c508553c5f659f3f00b794a4c89e473c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d286ea0c508553c5f659f3f00b794a4c89e473c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3245a8dffc1460db7a8e5fbc748156a68327fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3245a8dffc1460db7a8e5fbc748156a68327fcf", "html_url": "https://github.com/rust-lang/rust/commit/b3245a8dffc1460db7a8e5fbc748156a68327fcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3245a8dffc1460db7a8e5fbc748156a68327fcf/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2df805fc7a98b5bea7022901ea7f837a13a51186", "url": "https://api.github.com/repos/rust-lang/rust/commits/2df805fc7a98b5bea7022901ea7f837a13a51186", "html_url": "https://github.com/rust-lang/rust/commit/2df805fc7a98b5bea7022901ea7f837a13a51186"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "73449cc179a1a9413b9039c589ca6e0851c2e64e", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b3245a8dffc1460db7a8e5fbc748156a68327fcf/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3245a8dffc1460db7a8e5fbc748156a68327fcf/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=b3245a8dffc1460db7a8e5fbc748156a68327fcf", "patch": "@@ -124,6 +124,15 @@ pub struct Adt<'tcx> {\n     pub base: Option<FruInfo<'tcx>>,\n }\n \n+#[derive(Clone, Debug, HashStable)]\n+pub struct ClosureExpr<'tcx> {\n+    pub closure_id: LocalDefId,\n+    pub substs: UpvarSubsts<'tcx>,\n+    pub upvars: Box<[ExprId]>,\n+    pub movability: Option<hir::Movability>,\n+    pub fake_reads: Vec<(ExprId, FakeReadCause, hir::HirId)>,\n+}\n+\n #[derive(Copy, Clone, Debug, HashStable)]\n pub enum BlockSafety {\n     Safe,\n@@ -387,13 +396,7 @@ pub enum ExprKind<'tcx> {\n         user_ty: UserTy<'tcx>,\n     },\n     /// A closure definition.\n-    Closure {\n-        closure_id: LocalDefId,\n-        substs: UpvarSubsts<'tcx>,\n-        upvars: Box<[ExprId]>,\n-        movability: Option<hir::Movability>,\n-        fake_reads: Vec<(ExprId, FakeReadCause, hir::HirId)>,\n-    },\n+    Closure(Box<ClosureExpr<'tcx>>),\n     /// A literal.\n     Literal {\n         lit: &'tcx hir::Lit,\n@@ -801,7 +804,7 @@ mod size_asserts {\n     use super::*;\n     // These are in alphabetical order, which is easy to maintain.\n     static_assert_size!(Block, 56);\n-    static_assert_size!(Expr<'_>, 88);\n+    static_assert_size!(Expr<'_>, 80);\n     static_assert_size!(Pat<'_>, 24);\n     static_assert_size!(Stmt<'_>, 72);\n }"}, {"sha": "baa07d8ef0aa3ea81713a12fead07c4dfbe1328a", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b3245a8dffc1460db7a8e5fbc748156a68327fcf/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3245a8dffc1460db7a8e5fbc748156a68327fcf/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=b3245a8dffc1460db7a8e5fbc748156a68327fcf", "patch": "@@ -1,5 +1,6 @@\n use super::{\n-    Arm, Block, Expr, ExprKind, Guard, InlineAsmOperand, Pat, PatKind, Stmt, StmtKind, Thir,\n+    Arm, Block, ClosureExpr, Expr, ExprKind, Guard, InlineAsmOperand, Pat, PatKind, Stmt, StmtKind,\n+    Thir,\n };\n \n pub trait Visitor<'a, 'tcx: 'a>: Sized {\n@@ -126,7 +127,13 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n         PlaceTypeAscription { source, user_ty: _ } | ValueTypeAscription { source, user_ty: _ } => {\n             visitor.visit_expr(&visitor.thir()[source])\n         }\n-        Closure { closure_id: _, substs: _, upvars: _, movability: _, fake_reads: _ } => {}\n+        Closure(box ClosureExpr {\n+            closure_id: _,\n+            substs: _,\n+            upvars: _,\n+            movability: _,\n+            fake_reads: _,\n+        }) => {}\n         Literal { lit: _, neg: _ } => {}\n         NonHirLiteral { lit: _, user_ty: _ } => {}\n         ZstLiteral { user_ty: _ } => {}"}, {"sha": "4b232a1b515302fa1317dba9d2cc921d4026a501", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3245a8dffc1460db7a8e5fbc748156a68327fcf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3245a8dffc1460db7a8e5fbc748156a68327fcf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=b3245a8dffc1460db7a8e5fbc748156a68327fcf", "patch": "@@ -302,7 +302,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 block.and(Rvalue::Aggregate(Box::new(AggregateKind::Tuple), fields))\n             }\n-            ExprKind::Closure { closure_id, substs, ref upvars, movability, ref fake_reads } => {\n+            ExprKind::Closure(box ClosureExpr {\n+                closure_id,\n+                substs,\n+                ref upvars,\n+                movability,\n+                ref fake_reads,\n+            }) => {\n                 // Convert the closure fake reads, if any, from `ExprRef` to mir `Place`\n                 // and push the fake reads.\n                 // This must come before creating the operands. This is required in case"}, {"sha": "6564c526c5be4dcfc5e2cada71e34f840d093691", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3245a8dffc1460db7a8e5fbc748156a68327fcf/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3245a8dffc1460db7a8e5fbc748156a68327fcf/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=b3245a8dffc1460db7a8e5fbc748156a68327fcf", "patch": "@@ -402,13 +402,13 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 (Bound::Unbounded, Bound::Unbounded) => {}\n                 _ => self.requires_unsafe(expr.span, InitializingTypeWith),\n             },\n-            ExprKind::Closure {\n+            ExprKind::Closure(box ClosureExpr {\n                 closure_id,\n                 substs: _,\n                 upvars: _,\n                 movability: _,\n                 fake_reads: _,\n-            } => {\n+            }) => {\n                 let closure_def = if let Some((did, const_param_id)) =\n                     ty::WithOptConstParam::try_lookup(closure_id, self.tcx)\n                 {"}, {"sha": "a742e2f2647748318882185cf6bac14a27f7f8ac", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3245a8dffc1460db7a8e5fbc748156a68327fcf/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3245a8dffc1460db7a8e5fbc748156a68327fcf/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=b3245a8dffc1460db7a8e5fbc748156a68327fcf", "patch": "@@ -548,7 +548,13 @@ impl<'tcx> Cx<'tcx> {\n                     None => Vec::new(),\n                 };\n \n-                ExprKind::Closure { closure_id: def_id, substs, upvars, movability, fake_reads }\n+                ExprKind::Closure(Box::new(ClosureExpr {\n+                    closure_id: def_id,\n+                    substs,\n+                    upvars,\n+                    movability,\n+                    fake_reads,\n+                }))\n             }\n \n             hir::ExprKind::Path(ref qpath) => {"}]}