{"sha": "7b99c8e1cf096c1ba71ba3ee58b19527a5b69c1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOTljOGUxY2YwOTZjMWJhNzFiYTNlZTU4YjE5NTI3YTViNjljMWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-09T08:00:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-19T20:14:17Z"}, "message": "never promote non-const operations; revert STATIC promotion change", "tree": {"sha": "46c23beb3dd7bf452a20bc25ea1b6ac1264e4c8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46c23beb3dd7bf452a20bc25ea1b6ac1264e4c8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b99c8e1cf096c1ba71ba3ee58b19527a5b69c1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b99c8e1cf096c1ba71ba3ee58b19527a5b69c1a", "html_url": "https://github.com/rust-lang/rust/commit/7b99c8e1cf096c1ba71ba3ee58b19527a5b69c1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b99c8e1cf096c1ba71ba3ee58b19527a5b69c1a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7febd5a25770cb20805f20e43ab0d773ed2834ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/7febd5a25770cb20805f20e43ab0d773ed2834ed", "html_url": "https://github.com/rust-lang/rust/commit/7febd5a25770cb20805f20e43ab0d773ed2834ed"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "020857a95fbaa25e8f1a86a3e468bec8800522bf", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b99c8e1cf096c1ba71ba3ee58b19527a5b69c1a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b99c8e1cf096c1ba71ba3ee58b19527a5b69c1a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=7b99c8e1cf096c1ba71ba3ee58b19527a5b69c1a", "patch": "@@ -584,6 +584,16 @@ impl<'tcx> Validator<'_, 'tcx> {\n             // `validate_rvalue` upon access.\n             Operand::Constant(c) => {\n                 if let Some(def_id) = c.check_static_ptr(self.tcx) {\n+                    // Only allow statics (not consts) to refer to other statics.\n+                    // FIXME(eddyb) does this matter at all for promotion?\n+                    // FIXME(RalfJung) it makes little sense to not promote this in `fn/`const fn`,\n+                    // and in `const` this cannot occur anyway. The concern is that we might promote\n+                    // even `let x = &STATIC` which would be useless.\n+                    let is_static = matches!(self.const_kind, Some(hir::ConstContext::Static(_)));\n+                    if !is_static {\n+                        return Err(Unpromotable);\n+                    }\n+\n                     let is_thread_local = self.tcx.is_thread_local_static(def_id);\n                     if is_thread_local {\n                         return Err(Unpromotable);\n@@ -597,20 +607,20 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n     fn validate_rvalue(&self, rvalue: &Rvalue<'tcx>) -> Result<(), Unpromotable> {\n         match *rvalue {\n-            Rvalue::Cast(CastKind::Misc, ref operand, cast_ty) if self.maybe_runtime() => {\n+            Rvalue::Cast(CastKind::Misc, ref operand, cast_ty) => {\n                 let operand_ty = operand.ty(self.body, self.tcx);\n                 let cast_in = CastTy::from_ty(operand_ty).expect(\"bad input type for cast\");\n                 let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n                 match (cast_in, cast_out) {\n                     (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n-                        // ptr-to-int casts are not promotable\n+                        // ptr-to-int casts are not possible in consts and thus not promotable\n                         return Err(Unpromotable);\n                     }\n                     _ => {}\n                 }\n             }\n \n-            Rvalue::BinaryOp(op, ref lhs, _) if self.maybe_runtime() => {\n+            Rvalue::BinaryOp(op, ref lhs, _) => {\n                 if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.body, self.tcx).kind() {\n                     assert!(\n                         op == BinOp::Eq\n@@ -622,7 +632,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                             || op == BinOp::Offset\n                     );\n \n-                    // raw pointer operations are not allowed inside promoteds\n+                    // raw pointer operations are not allowed inside consts and thus not promotable\n                     return Err(Unpromotable);\n                 }\n             }"}]}