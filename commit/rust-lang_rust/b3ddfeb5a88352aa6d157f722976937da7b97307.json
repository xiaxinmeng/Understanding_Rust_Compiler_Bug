{"sha": "b3ddfeb5a88352aa6d157f722976937da7b97307", "node_id": "C_kwDOAAsO6NoAKGIzZGRmZWI1YTg4MzUyYWE2ZDE1N2Y3MjI5NzY5MzdkYTdiOTczMDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-11T06:20:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-11T06:20:59Z"}, "message": "Auto merge of #105457 - GuillaumeGomez:prevent-auto-blanket-impl-retrieval, r=notriddle\n\nrustdoc: Prevent auto/blanket impl retrieval if there were compiler errors\n\nFixes https://github.com/rust-lang/rust/issues/105404.\n\nI'm not sure happy about this fix but since it's how passes work (ie, even if there are errors, it runs all passes), I think it's fine as is.\n\nJust as a sidenote: I also gave a try to prevent running all passes in case there were compiler errors but then a lot of rustdoc tests were failing so I went for this fix instead.\n\nr? `@notriddle`", "tree": {"sha": "6913a474923939b4fb0c191cc692d0992b85878d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6913a474923939b4fb0c191cc692d0992b85878d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3ddfeb5a88352aa6d157f722976937da7b97307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ddfeb5a88352aa6d157f722976937da7b97307", "html_url": "https://github.com/rust-lang/rust/commit/b3ddfeb5a88352aa6d157f722976937da7b97307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3ddfeb5a88352aa6d157f722976937da7b97307/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1c91213ff80af5b87a197b784b40bcbc8cf3add", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c91213ff80af5b87a197b784b40bcbc8cf3add", "html_url": "https://github.com/rust-lang/rust/commit/e1c91213ff80af5b87a197b784b40bcbc8cf3add"}, {"sha": "183a77093b3f8dcc54727e0a815023277ee40bc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/183a77093b3f8dcc54727e0a815023277ee40bc7", "html_url": "https://github.com/rust-lang/rust/commit/183a77093b3f8dcc54727e0a815023277ee40bc7"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "79db3c6c3e78699845da1046efadd30e849c33ed", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3ddfeb5a88352aa6d157f722976937da7b97307/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ddfeb5a88352aa6d157f722976937da7b97307/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=b3ddfeb5a88352aa6d157f722976937da7b97307", "patch": "@@ -19,6 +19,12 @@ pub(crate) const COLLECT_TRAIT_IMPLS: Pass = Pass {\n };\n \n pub(crate) fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n+    // We need to check if there are errors before running this pass because it would crash when\n+    // we try to get auto and blanket implementations.\n+    if cx.tcx.sess.diagnostic().has_errors_or_lint_errors().is_some() {\n+        return krate;\n+    }\n+\n     let synth_impls = cx.sess().time(\"collect_synthetic_impls\", || {\n         let mut synth = SyntheticImplCollector { cx, impls: Vec::new() };\n         synth.visit_crate(&krate);"}, {"sha": "7035708224808de3539917160b98b5d8895eb2f4", "filename": "src/test/rustdoc-ui/unable-fulfill-trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3ddfeb5a88352aa6d157f722976937da7b97307/src%2Ftest%2Frustdoc-ui%2Funable-fulfill-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ddfeb5a88352aa6d157f722976937da7b97307/src%2Ftest%2Frustdoc-ui%2Funable-fulfill-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funable-fulfill-trait.rs?ref=b3ddfeb5a88352aa6d157f722976937da7b97307", "patch": "@@ -0,0 +1,13 @@\n+// This test ensures that it's not crashing rustdoc.\n+\n+pub struct Foo<'a, 'b, T> {\n+    field1: dyn Bar<'a, 'b,>,\n+    //~^ ERROR\n+    //~^^ ERROR\n+}\n+\n+pub trait Bar<'x, 's, U>\n+    where U: 'x,\n+    Self:'x,\n+    Self:'s\n+{}"}, {"sha": "a16b5b6eb2f5675a0115e308e9708817028fe5b5", "filename": "src/test/rustdoc-ui/unable-fulfill-trait.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b3ddfeb5a88352aa6d157f722976937da7b97307/src%2Ftest%2Frustdoc-ui%2Funable-fulfill-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3ddfeb5a88352aa6d157f722976937da7b97307/src%2Ftest%2Frustdoc-ui%2Funable-fulfill-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funable-fulfill-trait.stderr?ref=b3ddfeb5a88352aa6d157f722976937da7b97307", "patch": "@@ -0,0 +1,26 @@\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/unable-fulfill-trait.rs:4:17\n+   |\n+LL |     field1: dyn Bar<'a, 'b,>,\n+   |                 ^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `U`\n+  --> $DIR/unable-fulfill-trait.rs:9:11\n+   |\n+LL | pub trait Bar<'x, 's, U>\n+   |           ^^^         -\n+help: add missing generic argument\n+   |\n+LL |     field1: dyn Bar<'a, 'b, U,>,\n+   |                           +++\n+\n+error[E0227]: ambiguous lifetime bound, explicit lifetime bound required\n+  --> $DIR/unable-fulfill-trait.rs:4:13\n+   |\n+LL |     field1: dyn Bar<'a, 'b,>,\n+   |             ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0107, E0227.\n+For more information about an error, try `rustc --explain E0107`."}]}