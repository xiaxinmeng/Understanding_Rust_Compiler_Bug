{"sha": "bcfb3700ce5249d79368eda974b738617a83f894", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZmIzNzAwY2U1MjQ5ZDc5MzY4ZWRhOTc0YjczODYxN2E4M2Y4OTQ=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-24T20:45:42Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-24T20:45:42Z"}, "message": "Add ItemScope::visibility_of", "tree": {"sha": "8b9406d7e7874aebc1ffa735015920c57fb826f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b9406d7e7874aebc1ffa735015920c57fb826f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcfb3700ce5249d79368eda974b738617a83f894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcfb3700ce5249d79368eda974b738617a83f894", "html_url": "https://github.com/rust-lang/rust/commit/bcfb3700ce5249d79368eda974b738617a83f894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcfb3700ce5249d79368eda974b738617a83f894/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c2cc85806b6b9104e9d614aa71f841fd3627596", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2cc85806b6b9104e9d614aa71f841fd3627596", "html_url": "https://github.com/rust-lang/rust/commit/7c2cc85806b6b9104e9d614aa71f841fd3627596"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "3f0ebca0dfa2231ae8df9c47ae04d5cb8c9e1b06", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcfb3700ce5249d79368eda974b738617a83f894/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfb3700ce5249d79368eda974b738617a83f894/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=bcfb3700ce5249d79368eda974b738617a83f894", "patch": "@@ -234,6 +234,10 @@ impl Module {\n             .collect()\n     }\n \n+    pub fn visibility_of(self, db: &dyn HirDatabase, def: &ModuleDef) -> Option<Visibility> {\n+        db.crate_def_map(self.id.krate)[self.id.local_id].scope.visbility_of(def.clone().into())\n+    }\n+\n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n         let _p = profile(\"Module::diagnostics\");\n         let crate_def_map = db.crate_def_map(self.id.krate);"}, {"sha": "5af7e5d6d70cf8dd1beeb40438403d27f36f9832", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcfb3700ce5249d79368eda974b738617a83f894/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfb3700ce5249d79368eda974b738617a83f894/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=bcfb3700ce5249d79368eda974b738617a83f894", "patch": "@@ -54,7 +54,7 @@ pub use crate::{\n         Adt, AsAssocItem, AssocItem, AssocItemContainer, AttrDef, Const, Crate, CrateDependency,\n         DefWithBody, Docs, Enum, EnumVariant, FieldSource, Function, GenericDef, HasAttrs,\n         HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n-        StructField, Trait, Type, TypeAlias, TypeParam, Union, VariantDef,\n+        StructField, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n     },\n     has_source::HasSource,\n     semantics::{original_range, PathResolution, Semantics, SemanticsScope},"}, {"sha": "ef1aaba6f75b7ba8f27b0e12908e8eadc324801b", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcfb3700ce5249d79368eda974b738617a83f894/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfb3700ce5249d79368eda974b738617a83f894/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=bcfb3700ce5249d79368eda974b738617a83f894", "patch": "@@ -68,6 +68,12 @@ impl ItemScope {\n         self.impls.iter().copied()\n     }\n \n+    pub fn visbility_of(&self, def: ModuleDefId) -> Option<Visibility> {\n+        self.name_of(ItemInNs::Types(def))\n+            .or_else(|| self.name_of(ItemInNs::Values(def)))\n+            .map(|(_, v)| v)\n+    }\n+\n     /// Iterate over all module scoped macros\n     pub(crate) fn macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroDefId)> + 'a {\n         self.visible.iter().filter_map(|(name, def)| def.take_macros().map(|macro_| (name, macro_)))"}, {"sha": "e9934844e3a049b5c54ba45153d9c751f87b7e92", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bcfb3700ce5249d79368eda974b738617a83f894/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfb3700ce5249d79368eda974b738617a83f894/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=bcfb3700ce5249d79368eda974b738617a83f894", "patch": "@@ -6,12 +6,12 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    Adt, FieldSource, HasSource, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n-    Semantics, StructField, TypeParam,\n+    HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution, Semantics,\n+    StructField, TypeParam, Visibility,\n };\n use ra_prof::profile;\n use ra_syntax::{\n-    ast::{self, AstNode, VisibilityOwner},\n+    ast::{self, AstNode},\n     match_ast,\n };\n use test_utils::tested_by;\n@@ -41,28 +41,13 @@ impl Definition {\n         }\n     }\n \n-    pub fn visibility(&self, db: &RootDatabase) -> Option<ast::Visibility> {\n+    pub fn visibility(&self, db: &RootDatabase) -> Option<Visibility> {\n+        let module = self.module(db);\n+\n         match self {\n             Definition::Macro(_) => None,\n-            Definition::StructField(sf) => match sf.source(db).value {\n-                FieldSource::Named(it) => it.visibility(),\n-                FieldSource::Pos(it) => it.visibility(),\n-            },\n-            Definition::ModuleDef(def) => match def {\n-                ModuleDef::Module(it) => it.declaration_source(db)?.value.visibility(),\n-                ModuleDef::Function(it) => it.source(db).value.visibility(),\n-                ModuleDef::Adt(adt) => match adt {\n-                    Adt::Struct(it) => it.source(db).value.visibility(),\n-                    Adt::Union(it) => it.source(db).value.visibility(),\n-                    Adt::Enum(it) => it.source(db).value.visibility(),\n-                },\n-                ModuleDef::Const(it) => it.source(db).value.visibility(),\n-                ModuleDef::Static(it) => it.source(db).value.visibility(),\n-                ModuleDef::Trait(it) => it.source(db).value.visibility(),\n-                ModuleDef::TypeAlias(it) => it.source(db).value.visibility(),\n-                ModuleDef::EnumVariant(_) => None,\n-                ModuleDef::BuiltinType(_) => None,\n-            },\n+            Definition::StructField(sf) => Some(sf.visibility(db)),\n+            Definition::ModuleDef(def) => module?.visibility_of(db, def),\n             Definition::SelfType(_) => None,\n             Definition::Local(_) => None,\n             Definition::TypeParam(_) => None,"}]}