{"sha": "5b7185794faf47c8907a386d60516a4fa2249e4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNzE4NTc5NGZhZjQ3Yzg5MDdhMzg2ZDYwNTE2YTRmYTIyNDllNGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-16T10:45:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-18T10:08:22Z"}, "message": "give machine more control over what counts as memory leak", "tree": {"sha": "e7d332bc539921f6889512c27ebfe84dd6089c5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7d332bc539921f6889512c27ebfe84dd6089c5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b7185794faf47c8907a386d60516a4fa2249e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7185794faf47c8907a386d60516a4fa2249e4f", "html_url": "https://github.com/rust-lang/rust/commit/5b7185794faf47c8907a386d60516a4fa2249e4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b7185794faf47c8907a386d60516a4fa2249e4f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21934c81f430d1a638279bb5d1d00cbe052a2eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/21934c81f430d1a638279bb5d1d00cbe052a2eee", "html_url": "https://github.com/rust-lang/rust/commit/21934c81f430d1a638279bb5d1d00cbe052a2eee"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "fd9af74c5d7b48f3f9ee2f15c769df176a2b1bc8", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b7185794faf47c8907a386d60516a4fa2249e4f/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7185794faf47c8907a386d60516a4fa2249e4f/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=5b7185794faf47c8907a386d60516a4fa2249e4f", "patch": "@@ -333,6 +333,14 @@ impl<K: Hash + Eq, V> interpret::AllocMap<K, V> for FxHashMap<K, V> {\n type CompileTimeEvalContext<'a, 'mir, 'tcx> =\n     EvalContext<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>;\n \n+impl interpret::MayLeak for ! {\n+    #[inline(always)]\n+    fn may_leak(self) -> bool {\n+        // `self` is uninhabited\n+        self\n+    }\n+}\n+\n impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n     for CompileTimeInterpreter<'a, 'mir, 'tcx>\n {"}, {"sha": "56909938df4dca0b90f9605ee61b216638721539", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b7185794faf47c8907a386d60516a4fa2249e4f/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7185794faf47c8907a386d60516a4fa2249e4f/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=5b7185794faf47c8907a386d60516a4fa2249e4f", "patch": "@@ -22,6 +22,11 @@ use rustc::ty::{self, layout::TyLayout, query::TyCtxtAt};\n \n use super::{EvalContext, PlaceTy, OpTy, MemoryKind};\n \n+/// Whether this kind of memory is allowed to leak\n+pub trait MayLeak: Copy {\n+    fn may_leak(self) -> bool;\n+}\n+\n /// The functionality needed by memory to manage its allocations\n pub trait AllocMap<K: Hash + Eq, V> {\n     /// Test if the map contains the given key.\n@@ -63,7 +68,7 @@ pub trait AllocMap<K: Hash + Eq, V> {\n /// and some use case dependent behaviour can instead be applied.\n pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     /// Additional memory kinds a machine wishes to distinguish from the builtin ones\n-    type MemoryKinds: ::std::fmt::Debug + Copy + Eq + 'static;\n+    type MemoryKinds: ::std::fmt::Debug + MayLeak + Eq + 'static;\n \n     /// Tag tracked alongside every pointer.  This is used to implement \"Stacked Borrows\"\n     /// <https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html>."}, {"sha": "51dd970e0bbc2e19d89d7388e4c2fc870c213627", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b7185794faf47c8907a386d60516a4fa2249e4f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7185794faf47c8907a386d60516a4fa2249e4f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=5b7185794faf47c8907a386d60516a4fa2249e4f", "patch": "@@ -32,7 +32,7 @@ use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n \n use syntax::ast::Mutability;\n \n-use super::{Machine, AllocMap, ScalarMaybeUndef};\n+use super::{Machine, AllocMap, MayLeak, ScalarMaybeUndef};\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n pub enum MemoryKind<T> {\n@@ -44,6 +44,17 @@ pub enum MemoryKind<T> {\n     Machine(T),\n }\n \n+impl<T: MayLeak> MayLeak for MemoryKind<T> {\n+    #[inline]\n+    fn may_leak(self) -> bool {\n+        match self {\n+            MemoryKind::Stack => false,\n+            MemoryKind::Vtable => true,\n+            MemoryKind::Machine(k) => k.may_leak()\n+        }\n+    }\n+}\n+\n // `Memory` has to depend on the `Machine` because some of its operations\n // (e.g. `get`) call a `Machine` hook.\n pub struct Memory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'a, 'mir, 'tcx>> {\n@@ -584,13 +595,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     pub fn leak_report(&self) -> usize {\n         trace!(\"### LEAK REPORT ###\");\n         let leaks: Vec<_> = self.alloc_map.filter_map_collect(|&id, &(kind, _)| {\n-            // exclude statics and vtables\n-            let exclude = match kind {\n-                MemoryKind::Stack => false,\n-                MemoryKind::Vtable => true,\n-                MemoryKind::Machine(k) => Some(k) == M::STATIC_KIND,\n-            };\n-            if exclude { None } else { Some(id) }\n+            if kind.may_leak() { None } else { Some(id) }\n         });\n         let n = leaks.len();\n         self.dump_allocs(leaks);"}, {"sha": "a174b12aaac4cea17c647d06b50a2b9c8a8803a1", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b7185794faf47c8907a386d60516a4fa2249e4f/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7185794faf47c8907a386d60516a4fa2249e4f/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=5b7185794faf47c8907a386d60516a4fa2249e4f", "patch": "@@ -32,7 +32,7 @@ pub use self::place::{Place, PlaceTy, MemPlace, MPlaceTy};\n \n pub use self::memory::{Memory, MemoryKind};\n \n-pub use self::machine::{Machine, AllocMap};\n+pub use self::machine::{Machine, AllocMap, MayLeak};\n \n pub use self::operand::{ScalarMaybeUndef, Value, ValTy, Operand, OpTy};\n "}]}