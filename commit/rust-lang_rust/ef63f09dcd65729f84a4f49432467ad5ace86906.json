{"sha": "ef63f09dcd65729f84a4f49432467ad5ace86906", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNjNmMDlkY2Q2NTcyOWY4NGE0ZjQ5NDMyNDY3YWQ1YWNlODY5MDY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-20T11:48:10Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-20T15:18:38Z"}, "message": "Don't rely on main.ll anymore\n\nI'll remove the actual file after I register a snapshot.\n\nIssue #992", "tree": {"sha": "867d013350635b1e1130baa0a57345d8016c2d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/867d013350635b1e1130baa0a57345d8016c2d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef63f09dcd65729f84a4f49432467ad5ace86906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef63f09dcd65729f84a4f49432467ad5ace86906", "html_url": "https://github.com/rust-lang/rust/commit/ef63f09dcd65729f84a4f49432467ad5ace86906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef63f09dcd65729f84a4f49432467ad5ace86906/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cff9c676748b719d5333aa7521e4684f3543e4b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cff9c676748b719d5333aa7521e4684f3543e4b9", "html_url": "https://github.com/rust-lang/rust/commit/cff9c676748b719d5333aa7521e4684f3543e4b9"}], "stats": {"total": 110, "additions": 63, "deletions": 47}, "files": [{"sha": "6988f0c1f21347191e7221bcd52c11e4fdd4f246", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef63f09dcd65729f84a4f49432467ad5ace86906/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef63f09dcd65729f84a4f49432467ad5ace86906/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=ef63f09dcd65729f84a4f49432467ad5ace86906", "patch": "@@ -503,12 +503,6 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n // gcc to link the object file with some libs\n fn link_binary(sess: session::session,\n                saved_out_filename: str) {\n-    let main: str = alt filesearch::search(\n-        sess.filesearch(), bind filesearch::pick_file(\"main.o\", _)) {\n-      option::some(f) { f }\n-      option::none. { sess.fatal(\"can't find main.o\") }\n-    };\n-\n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n     let stage: str = \"-L\" + sess.filesearch().get_target_lib_path();\n@@ -579,7 +573,7 @@ fn link_binary(sess: session::session,\n         }\n     } else {\n         // FIXME: why do we hardcode -lm?\n-        gcc_args += [\"-lm\", main];\n+        gcc_args += [\"-lm\"];\n     }\n \n "}, {"sha": "6c6b2c590af3d9249abb75353e9a1f01d182fccd", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 59, "deletions": 25, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/ef63f09dcd65729f84a4f49432467ad5ace86906/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef63f09dcd65729f84a4f49432467ad5ace86906/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ef63f09dcd65729f84a4f49432467ad5ace86906", "patch": "@@ -5632,6 +5632,7 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n \n     let llfn = create_main(ccx, sp, main_llfn, main_takes_argv);\n     ccx.main_fn = some(llfn);\n+    create_entry_fn(ccx, llfn);\n \n     fn create_main(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n                    takes_argv: bool) -> ValueRef {\n@@ -5664,6 +5665,35 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n \n         ret llfdecl;\n     }\n+\n+    fn create_entry_fn(ccx: @crate_ctxt, rust_main: ValueRef) {\n+        #[cfg(target_os = \"win32\")]\n+        fn main_name() -> str { ret \"WinMain@16\"; }\n+        #[cfg(target_os = \"macos\")]\n+        fn main_name() -> str { ret \"main\"; }\n+        #[cfg(target_os = \"linux\")]\n+        fn main_name() -> str { ret \"main\"; }\n+        let llfty = T_fn([T_int(), T_int()], T_int());\n+        let llfn = decl_cdecl_fn(ccx.llmod, main_name(), llfty);\n+        let llbb = str::as_buf(\"top\", {|buf|\n+            llvm::LLVMAppendBasicBlock(llfn, buf)\n+        });\n+        let bld = *ccx.builder;\n+        llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n+        let crate_map = ccx.crate_map;\n+        let start_ty = T_fn([val_ty(rust_main), T_int(), T_int(),\n+                             val_ty(crate_map)], T_int());\n+        let start = str::as_buf(\"rust_start\", {|buf|\n+            llvm::LLVMAddGlobal(ccx.llmod, start_ty, buf)\n+        });\n+        let args = [rust_main, llvm::LLVMGetParam(llfn, 0u),\n+                    llvm::LLVMGetParam(llfn, 1u), crate_map];\n+        let result = unsafe {\n+            llvm::LLVMBuildCall(bld, start, vec::to_ptr(args),\n+                                vec::len(args), noname())\n+        };\n+        llvm::LLVMBuildRet(bld, result);\n+    }\n }\n \n // Create a /real/ closure: this is like create_fn_pair, but creates a\n@@ -6146,38 +6176,39 @@ fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n }\n \n \n+fn decl_crate_map(sess: session::session, mapname: str,\n+                  llmod: ModuleRef) -> ValueRef {\n+    let n_subcrates = 1;\n+    let cstore = sess.get_cstore();\n+    while cstore::have_crate_data(cstore, n_subcrates) { n_subcrates += 1; }\n+    if !sess.get_opts().library { mapname = \"toplevel\"; }\n+    let sym_name = \"_rust_crate_map_\" + mapname;\n+    let arrtype = T_array(T_int(), n_subcrates as uint);\n+    let maptype = T_struct([T_int(), arrtype]);\n+    let map = str::as_buf(sym_name, {|buf|\n+        llvm::LLVMAddGlobal(llmod, maptype, buf)\n+    });\n+    llvm::LLVMSetLinkage(map, lib::llvm::LLVMExternalLinkage\n+                         as llvm::Linkage);\n+    ret map;\n+}\n+\n // FIXME use hashed metadata instead of crate names once we have that\n-fn create_crate_map(ccx: @crate_ctxt) -> ValueRef {\n+fn fill_crate_map(ccx: @crate_ctxt, map: ValueRef) {\n     let subcrates: [ValueRef] = [];\n     let i = 1;\n     let cstore = ccx.sess.get_cstore();\n     while cstore::have_crate_data(cstore, i) {\n         let nm = \"_rust_crate_map_\" + cstore::get_crate_data(cstore, i).name;\n-        let cr =\n-            str::as_buf(nm,\n-                        {|buf|\n-                            llvm::LLVMAddGlobal(ccx.llmod, T_int(), buf)\n-                        });\n+        let cr = str::as_buf(nm, {|buf|\n+            llvm::LLVMAddGlobal(ccx.llmod, T_int(), buf)\n+        });\n         subcrates += [p2i(cr)];\n         i += 1;\n     }\n     subcrates += [C_int(0)];\n-    let mapname;\n-    if ccx.sess.get_opts().library {\n-        mapname = ccx.link_meta.name;\n-    } else { mapname = \"toplevel\"; }\n-    let sym_name = \"_rust_crate_map_\" + mapname;\n-    let arrtype = T_array(T_int(), std::vec::len::<ValueRef>(subcrates));\n-    let maptype = T_struct([T_int(), arrtype]);\n-    let map =\n-        str::as_buf(sym_name,\n-                    {|buf| llvm::LLVMAddGlobal(ccx.llmod, maptype, buf) });\n-    llvm::LLVMSetLinkage(map,\n-                         lib::llvm::LLVMExternalLinkage as llvm::Linkage);\n-    llvm::LLVMSetInitializer(map,\n-                             C_struct([p2i(create_module_map(ccx)),\n-                                       C_array(T_int(), subcrates)]));\n-    ret map;\n+    llvm::LLVMSetInitializer(map, C_struct([p2i(create_module_map(ccx)),\n+                                            C_array(T_int(), subcrates)]));\n }\n \n fn write_metadata(cx: @crate_ctxt, crate: @ast::crate) {\n@@ -6242,6 +6273,8 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     let sha1s = map::mk_hashmap::<ty::t, str>(hasher, eqer);\n     let short_names = map::mk_hashmap::<ty::t, str>(hasher, eqer);\n     let sha = std::sha1::mk_sha1();\n+    let link_meta = link::build_link_meta(sess, *crate, output, sha);\n+    let crate_map = decl_crate_map(sess, link_meta.name, llmod);\n     let ccx =\n         @{sess: sess,\n           llmod: llmod,\n@@ -6253,7 +6286,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           ast_map: amap,\n           item_symbols: new_int_hash::<str>(),\n           mutable main_fn: none::<ValueRef>,\n-          link_meta: link::build_link_meta(sess, *crate, output, sha),\n+          link_meta: link_meta,\n           tag_sizes: tag_sizes,\n           discrims: new_int_hash::<ValueRef>(),\n           discrim_symbols: new_int_hash::<str>(),\n@@ -6283,13 +6316,14 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           task_type: task_type,\n           builder: BuilderRef_res(llvm::LLVMCreateBuilder()),\n           shape_cx: shape::mk_ctxt(llmod),\n-          gc_cx: gc::mk_ctxt()};\n+          gc_cx: gc::mk_ctxt(),\n+          crate_map: crate_map};\n     let cx = new_local_ctxt(ccx);\n     collect_items(ccx, crate);\n     collect_tag_ctors(ccx, crate);\n     trans_constants(ccx, crate);\n     trans_mod(cx, crate.node.module);\n-    create_crate_map(ccx);\n+    fill_crate_map(ccx, crate_map);\n     emit_tydescs(ccx);\n     shape::gen_shape_tables(ccx);\n     write_abi_version(ccx);"}, {"sha": "2218b5a8ee886309dd87eafe51b10cba870de0e5", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef63f09dcd65729f84a4f49432467ad5ace86906/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef63f09dcd65729f84a4f49432467ad5ace86906/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=ef63f09dcd65729f84a4f49432467ad5ace86906", "patch": "@@ -123,7 +123,8 @@ type crate_ctxt =\n      task_type: TypeRef,\n      builder: BuilderRef_res,\n      shape_cx: shape::ctxt,\n-     gc_cx: gc::ctxt};\n+     gc_cx: gc::ctxt,\n+     crate_map: ValueRef};\n \n type local_ctxt =\n     {path: [str],"}, {"sha": "8c19b2df251ad07e00134e5ad1e8671b1b0f0612", "filename": "src/rt/main.ll.in", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ef63f09dcd65729f84a4f49432467ad5ace86906/src%2Frt%2Fmain.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/ef63f09dcd65729f84a4f49432467ad5ace86906/src%2Frt%2Fmain.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmain.ll.in?ref=ef63f09dcd65729f84a4f49432467ad5ace86906", "patch": "@@ -11,14 +11,3 @@\n %task = type { i32, i32, i32, i32, i32, i32, i32, i32 }\n \n %vec = type { i32, i32, [0 x i8] }\n-\n-@_rust_crate_map_toplevel = external global %0\n-\n-declare i32 @rust_start(i32, i32, i32, i32)\n-\n-declare external void @_rust_main(i1* nocapture, %task*, %2* nocapture, %vec*)\n-\n-define i32 @\"MAIN\"(i32, i32) {\n-  %result = tail call i32 @rust_start(i32 ptrtoint (void (i1*, %task*, %2*, %vec*)* @_rust_main to i32), i32 %0, i32 %1, i32 ptrtoint (%0* @_rust_crate_map_toplevel to i32))\n-  ret i32 %result\n-}"}, {"sha": "b8a3cde5a938e7ac009ce6a0a829ea65c362e459", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef63f09dcd65729f84a4f49432467ad5ace86906/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ef63f09dcd65729f84a4f49432467ad5ace86906/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=ef63f09dcd65729f84a4f49432467ad5ace86906", "patch": "@@ -74,9 +74,7 @@ command_line_args : public kernel_owned<command_line_args>\n int check_claims = 0;\n \n extern \"C\" CDECL int\n-rust_start(uintptr_t main_fn, int argc, char **argv,\n-           void* crate_map) {\n-\n+rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     rust_env *env = load_env();\n \n     update_log_settings(crate_map, env->logspec);"}]}