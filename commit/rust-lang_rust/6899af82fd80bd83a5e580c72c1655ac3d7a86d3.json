{"sha": "6899af82fd80bd83a5e580c72c1655ac3d7a86d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OTlhZjgyZmQ4MGJkODNhNWU1ODBjNzJjMTY1NWFjM2Q3YTg2ZDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-08T11:41:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T11:08:00Z"}, "message": "box is also a primitive type", "tree": {"sha": "341cf0d1447005df048c0f09f83529086dbb3030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/341cf0d1447005df048c0f09f83529086dbb3030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6899af82fd80bd83a5e580c72c1655ac3d7a86d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6899af82fd80bd83a5e580c72c1655ac3d7a86d3", "html_url": "https://github.com/rust-lang/rust/commit/6899af82fd80bd83a5e580c72c1655ac3d7a86d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6899af82fd80bd83a5e580c72c1655ac3d7a86d3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db1663d5984b084acbd62290ed13014e2b7a7ed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/db1663d5984b084acbd62290ed13014e2b7a7ed3", "html_url": "https://github.com/rust-lang/rust/commit/db1663d5984b084acbd62290ed13014e2b7a7ed3"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "0aa2e70804301a19ad099fe95e1635e439dbd6e9", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6899af82fd80bd83a5e580c72c1655ac3d7a86d3/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6899af82fd80bd83a5e580c72c1655ac3d7a86d3/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=6899af82fd80bd83a5e580c72c1655ac3d7a86d3", "patch": "@@ -152,7 +152,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             *value, value.layout.size, value.layout.ty);\n \n         // Go over all the primitive types\n-        match value.layout.ty.sty {\n+        let ty = value.layout.ty;\n+        match ty.sty {\n             ty::Bool => {\n                 let value = value.to_scalar_or_undef();\n                 try_validation!(value.to_bool(),\n@@ -175,7 +176,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     // undef. We should fix that, but let's start low.\n                 }\n             }\n-            ty::RawPtr(..) | ty::Ref(..) => {\n+            _ if ty.is_box() || ty.is_region_ptr() || ty.is_unsafe_ptr() => {\n                 // Handle fat pointers. We also check fat raw pointers,\n                 // their metadata must be valid!\n                 // This also checks that the ptr itself is initialized, which\n@@ -184,7 +185,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     \"undefined data in pointer\", path);\n                 // Check metadata early, for better diagnostics\n                 if place.layout.is_unsized() {\n-                    match self.tcx.struct_tail(place.layout.ty).sty {\n+                    let tail = self.tcx.struct_tail(place.layout.ty);\n+                    match tail.sty {\n                         ty::Dynamic(..) => {\n                             let vtable = try_validation!(place.extra.unwrap().to_ptr(),\n                                 \"non-pointer vtable in fat pointer\", path);\n@@ -202,13 +204,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                             // Unsized, but not fat.\n                         }\n                         _ =>\n-                            bug!(\"Unexpected unsized type tail: {:?}\",\n-                                self.tcx.struct_tail(place.layout.ty)\n-                            ),\n+                            bug!(\"Unexpected unsized type tail: {:?}\", tail),\n                     }\n                 }\n                 // for safe ptrs, recursively check\n-                if let ty::Ref(..) = value.layout.ty.sty {\n+                if !ty.is_unsafe_ptr() {\n                     // Make sure this is non-NULL and aligned\n                     let (size, align) = self.size_and_align_of(place.extra, place.layout)?;\n                     match self.memory.check_align(place.ptr, align) {"}]}