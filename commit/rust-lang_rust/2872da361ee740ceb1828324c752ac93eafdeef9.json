{"sha": "2872da361ee740ceb1828324c752ac93eafdeef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NzJkYTM2MWVlNzQwY2ViMTgyODMyNGM3NTJhYzkzZWFmZGVlZjk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-16T07:01:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-16T07:01:09Z"}, "message": "Rollup merge of #74352 - ehuss:fix-alloc-links, r=Mark-Simulacrum\n\nUse local links in the alloc docs.\n\nLinks to other crates (like core) from the alloc crate were incorrectly using the `https://doc.rust-lang.org/nightly/` absolute (remote) links, instead of relative (local) links.  For example, the link to `Result` at https://doc.rust-lang.org/1.44.1/alloc/vec/struct.Vec.html#method.try_reserve goes to /nightly/.\n\nThis is because alloc was being documented before core, and rustdoc relies on the existence of the local directory to know if it should use a local or remote link.\n\nThere was code that tried to compensate for this (`create_dir_all`), but in #54543 it was broken because instead of running `cargo doc` once for all the crates, it was changed to run `cargo rustdoc` for each crate individually. This means that `create_dir_all` was no longer doing what it was supposed to be doing (creating all the directories before starting).\n\nThe solution here is to just build in the correct order (from the dependency leaves towards the root).  An alternate solution would be to switch back to running `cargo doc` once (and use RUSTDOCFLAGS for passing in flags).  Another alternate solution would be to iterate over the list twice, creating the directories during the first pass.\n\nI also did a little cleanup to remove the \"crate-docs\" directory. This was added in the past because different crates were built in different directories. Over time, things have been unified (and rustc docs no longer include std), so it is no longer necessary.", "tree": {"sha": "11aef9f7b4fdfdf8ec4bf0fe6830cb9f54a84bfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11aef9f7b4fdfdf8ec4bf0fe6830cb9f54a84bfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2872da361ee740ceb1828324c752ac93eafdeef9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfD/s1CRBK7hj4Ov3rIwAAdHIIAG465KUy+04d2s0/gy3jbOkq\nQ3BU+2sF4u87P2B33UtWjWcNN53xQidMSvif2w4Ek2W4AI06yf8G5Ry6AeU6BU3e\n1UGhu8poVYpHUbJWrxCEnAan6XNeB8qYK5AfHuIVAnOjWb8VuuEchAEXHVg223yY\nSwJmAclAS4Q44NE2fqqcW9K43DC4nhh3x2+mX24ShVgcZByommibX+dR60gdEA69\nYEQlFJJo9tb/ke/Uvf7sZk3FgKBfrj7zBzf90qkl26HUItnO4qFver4wXNWT/DkM\nVV+OJdGBHbinhORm8jyheLpbcIwh99vZIRV4HFo3vL2YikqzUWbrIUHLg0p4Oh4=\n=NmXG\n-----END PGP SIGNATURE-----\n", "payload": "tree 11aef9f7b4fdfdf8ec4bf0fe6830cb9f54a84bfc\nparent 80a7a87be23dac0cea4f65af07956c653601506d\nparent 83344195ee86d249d5bfae6d732082eb6899be54\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594882869 -0700\ncommitter GitHub <noreply@github.com> 1594882869 -0700\n\nRollup merge of #74352 - ehuss:fix-alloc-links, r=Mark-Simulacrum\n\nUse local links in the alloc docs.\n\nLinks to other crates (like core) from the alloc crate were incorrectly using the `https://doc.rust-lang.org/nightly/` absolute (remote) links, instead of relative (local) links.  For example, the link to `Result` at https://doc.rust-lang.org/1.44.1/alloc/vec/struct.Vec.html#method.try_reserve goes to /nightly/.\n\nThis is because alloc was being documented before core, and rustdoc relies on the existence of the local directory to know if it should use a local or remote link.\n\nThere was code that tried to compensate for this (`create_dir_all`), but in #54543 it was broken because instead of running `cargo doc` once for all the crates, it was changed to run `cargo rustdoc` for each crate individually. This means that `create_dir_all` was no longer doing what it was supposed to be doing (creating all the directories before starting).\n\nThe solution here is to just build in the correct order (from the dependency leaves towards the root).  An alternate solution would be to switch back to running `cargo doc` once (and use RUSTDOCFLAGS for passing in flags).  Another alternate solution would be to iterate over the list twice, creating the directories during the first pass.\n\nI also did a little cleanup to remove the \"crate-docs\" directory. This was added in the past because different crates were built in different directories. Over time, things have been unified (and rustc docs no longer include std), so it is no longer necessary.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2872da361ee740ceb1828324c752ac93eafdeef9", "html_url": "https://github.com/rust-lang/rust/commit/2872da361ee740ceb1828324c752ac93eafdeef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2872da361ee740ceb1828324c752ac93eafdeef9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a7a87be23dac0cea4f65af07956c653601506d", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a7a87be23dac0cea4f65af07956c653601506d", "html_url": "https://github.com/rust-lang/rust/commit/80a7a87be23dac0cea4f65af07956c653601506d"}, {"sha": "83344195ee86d249d5bfae6d732082eb6899be54", "url": "https://api.github.com/repos/rust-lang/rust/commits/83344195ee86d249d5bfae6d732082eb6899be54", "html_url": "https://github.com/rust-lang/rust/commit/83344195ee86d249d5bfae6d732082eb6899be54"}], "stats": {"total": 49, "additions": 17, "deletions": 32}, "files": [{"sha": "f6060ac14e75ebafb23b42c3e0114929846e52fb", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2872da361ee740ceb1828324c752ac93eafdeef9/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2872da361ee740ceb1828324c752ac93eafdeef9/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=2872da361ee740ceb1828324c752ac93eafdeef9", "patch": "@@ -773,7 +773,8 @@ impl<'a> Builder<'a> {\n             let my_out = match mode {\n                 // This is the intended out directory for compiler documentation.\n                 Mode::Rustc | Mode::ToolRustc | Mode::Codegen => self.compiler_doc_out(target),\n-                _ => self.crate_doc_out(target),\n+                Mode::Std => out_dir.join(target).join(\"doc\"),\n+                _ => panic!(\"doc mode {:?} not expected\", mode),\n             };\n             let rustdoc = self.rustdoc(compiler);\n             self.clear_if_dirty(&my_out, &rustdoc);"}, {"sha": "3121690285868a21f163e6618948f9afff41aaf4", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2872da361ee740ceb1828324c752ac93eafdeef9/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2872da361ee740ceb1828324c752ac93eafdeef9/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=2872da361ee740ceb1828324c752ac93eafdeef9", "patch": "@@ -417,34 +417,16 @@ impl Step for Std {\n         builder.ensure(compile::Std { compiler, target });\n         let out_dir = builder.stage_out(compiler, Mode::Std).join(target).join(\"doc\");\n \n-        // Here what we're doing is creating a *symlink* (directory junction on\n-        // Windows) to the final output location. This is not done as an\n-        // optimization but rather for correctness. We've got three trees of\n-        // documentation, one for std, one for test, and one for rustc. It's then\n-        // our job to merge them all together.\n-        //\n-        // Unfortunately rustbuild doesn't know nearly as well how to merge doc\n-        // trees as rustdoc does itself, so instead of actually having three\n-        // separate trees we just have rustdoc output to the same location across\n-        // all of them.\n-        //\n-        // This way rustdoc generates output directly into the output, and rustdoc\n-        // will also directly handle merging.\n-        let my_out = builder.crate_doc_out(target);\n-        t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n         t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n \n         let run_cargo_rustdoc_for = |package: &str| {\n             let mut cargo =\n                 builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n             compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n \n-            cargo.arg(\"-p\").arg(package);\n-            // Create all crate output directories first to make sure rustdoc uses\n-            // relative links.\n-            // FIXME: Cargo should probably do this itself.\n-            t!(fs::create_dir_all(out_dir.join(package)));\n             cargo\n+                .arg(\"-p\")\n+                .arg(package)\n                 .arg(\"--\")\n                 .arg(\"--markdown-css\")\n                 .arg(\"rust.css\")\n@@ -462,11 +444,17 @@ impl Step for Std {\n         // folder structure, that would also build internal crates that we do\n         // not want to show in documentation. These crates will later be visited\n         // by the rustc step, so internal documentation will show them.\n-        let krates = [\"alloc\", \"core\", \"std\", \"proc_macro\", \"test\"];\n+        //\n+        // Note that the order here is important! The crates need to be\n+        // processed starting from the leaves, otherwise rustdoc will not\n+        // create correct links between crates because rustdoc depends on the\n+        // existence of the output directories to know if it should be a local\n+        // or remote link.\n+        let krates = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n         for krate in &krates {\n             run_cargo_rustdoc_for(krate);\n         }\n-        builder.cp_r(&my_out, &out);\n+        builder.cp_r(&out_dir, &out);\n \n         // Look for src/libstd, src/libcore etc in the `x.py doc` arguments and\n         // open the corresponding rendered docs.\n@@ -529,8 +517,11 @@ impl Step for Rustc {\n         // Build rustc.\n         builder.ensure(compile::Rustc { compiler, target });\n \n-        // We do not symlink to the same shared folder that already contains std library\n-        // documentation from previous steps as we do not want to include that.\n+        // This uses a shared directory so that librustdoc documentation gets\n+        // correctly built and merged with the rustc documentation. This is\n+        // needed because rustdoc is built in a different directory from\n+        // rustc. rustdoc needs to be able to see everything, for example when\n+        // merging the search index, or generating local (relative) links.\n         let out_dir = builder.stage_out(compiler, Mode::Rustc).join(target).join(\"doc\");\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n "}, {"sha": "9ca9e338d55c5ae373166511e7f8261c7e60a267", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2872da361ee740ceb1828324c752ac93eafdeef9/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2872da361ee740ceb1828324c752ac93eafdeef9/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=2872da361ee740ceb1828324c752ac93eafdeef9", "patch": "@@ -612,13 +612,6 @@ impl Build {\n         INTERNER.intern_path(self.out.join(&*target).join(\"md-doc\"))\n     }\n \n-    /// Output directory for all crate documentation for a target (temporary)\n-    ///\n-    /// The artifacts here are then copied into `doc_out` above.\n-    fn crate_doc_out(&self, target: Interned<String>) -> PathBuf {\n-        self.out.join(&*target).join(\"crate-docs\")\n-    }\n-\n     /// Returns `true` if no custom `llvm-config` is set for the specified target.\n     ///\n     /// If no custom `llvm-config` was specified then Rust's llvm will be used."}]}