{"sha": "01ca0d1f680cf5aab5d1a81fea9de56d591f6658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxY2EwZDFmNjgwY2Y1YWFiNWQxYTgxZmVhOWRlNTZkNTkxZjY2NTg=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-03T18:43:10Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-03T19:04:18Z"}, "message": "Be more defensive in pipes (#3098)", "tree": {"sha": "7d35cad7d5865a16d912e14c6539f59bfe501532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d35cad7d5865a16d912e14c6539f59bfe501532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01ca0d1f680cf5aab5d1a81fea9de56d591f6658", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01ca0d1f680cf5aab5d1a81fea9de56d591f6658", "html_url": "https://github.com/rust-lang/rust/commit/01ca0d1f680cf5aab5d1a81fea9de56d591f6658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01ca0d1f680cf5aab5d1a81fea9de56d591f6658/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e689666110e459e63f5bf4b64011fc81cc7fca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e689666110e459e63f5bf4b64011fc81cc7fca2", "html_url": "https://github.com/rust-lang/rust/commit/9e689666110e459e63f5bf4b64011fc81cc7fca2"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "935d22fbaae4a04572285122f78e6fa897c087b0", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01ca0d1f680cf5aab5d1a81fea9de56d591f6658/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ca0d1f680cf5aab5d1a81fea9de56d591f6658/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=01ca0d1f680cf5aab5d1a81fea9de56d591f6658", "patch": "@@ -127,9 +127,9 @@ fn swap_unwrap<T>(opt: &mut option<T>) -> T {\n     unwrap(util::replace(opt, none))\n }\n \n-pure fn unwrap_expect<T>(-opt: option<T>, reason: ~str) -> T {\n+pure fn unwrap_expect<T>(-opt: option<T>, reason: &str) -> T {\n     //! As unwrap, but with a specified failure message.\n-    if opt.is_none() { fail reason; }\n+    if opt.is_none() { fail reason.to_unique(); }\n     unwrap(opt)\n }\n "}, {"sha": "6df6df9a6bb20249cb50b453b50fb108b1d3f4d0", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/01ca0d1f680cf5aab5d1a81fea9de56d591f6658/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ca0d1f680cf5aab5d1a81fea9de56d591f6658/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=01ca0d1f680cf5aab5d1a81fea9de56d591f6658", "patch": "@@ -343,7 +343,7 @@ Fails if the sender closes the connection.\n \n */\n fn recv<T: send, Tbuffer: send>(-p: recv_packet_buffered<T, Tbuffer>) -> T {\n-    option::unwrap(try_recv(p))\n+    option::unwrap_expect(try_recv(p), \"connection closed\")\n }\n \n /** Attempts to receive a message from a pipe.\n@@ -391,10 +391,13 @@ fn try_recv<T: send, Tbuffer: send>(-p: recv_packet_buffered<T, Tbuffer>)\n           full {\n             let mut payload = none;\n             payload <-> p.payload;\n+            p.header.blocked_task = none;\n             p.header.state = empty;\n             return some(option::unwrap(payload))\n           }\n           terminated {\n+            // This assert detects when we've accidentally unsafely\n+            // casted too big of a number to a state.\n             assert old_state == terminated;\n             return none;\n           }\n@@ -428,10 +431,13 @@ fn sender_terminate<T: send>(p: *packet<T>) {\n       }\n       blocked {\n         // wake up the target\n-        let target = p.header.blocked_task.get();\n-        rustrt::task_signal_event(target,\n-                                  ptr::addr_of(p.header) as *libc::c_void);\n-\n+        alt p.header.blocked_task {\n+          some(target) =>\n+            rustrt::task_signal_event(\n+                target,\n+                ptr::addr_of(p.header) as *libc::c_void),\n+          none => { debug!{\"receiver is already shutting down\"} }\n+        }\n         // The receiver will eventually clean up.\n         //unsafe { forget(p) }\n       }\n@@ -448,6 +454,7 @@ fn sender_terminate<T: send>(p: *packet<T>) {\n #[doc(hidden)]\n fn receiver_terminate<T: send>(p: *packet<T>) {\n     let p = unsafe { &*p };\n+    assert p.header.blocked_task == none;\n     alt swap_state_rel(p.header.state, terminated) {\n       empty {\n         // the sender will clean up\n@@ -514,7 +521,7 @@ fn wait_many(pkts: &[*packet_header]) -> uint {\n \n     for pkts.each |p| { unsafe{ (*p).unblock()} }\n \n-    debug!{\"%?, %?\", ready_packet, pkts[ready_packet]};\n+    debug!(\"%?, %?\", ready_packet, pkts[ready_packet]);\n \n     unsafe {\n         assert (*pkts[ready_packet]).state == full"}, {"sha": "ad2e8a71ae5f58ecf7b930ddc21fd545148d3d4b", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01ca0d1f680cf5aab5d1a81fea9de56d591f6658/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01ca0d1f680cf5aab5d1a81fea9de56d591f6658/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=01ca0d1f680cf5aab5d1a81fea9de56d591f6658", "patch": "@@ -680,6 +680,9 @@ void\n rust_task::signal_event(void *event) {\n     scoped_lock with(lifecycle_lock);\n \n+    assert(task_state_blocked == state ||\n+           task_state_running == state);\n+\n     this->event = event;\n     event_reject = true;\n     if(task_state_blocked == state) {"}]}