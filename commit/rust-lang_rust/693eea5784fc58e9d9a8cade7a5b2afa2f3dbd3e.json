{"sha": "693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5M2VlYTU3ODRmYzU4ZTlkOWE4Y2FkZTdhNWIyYWZhMmYzZGJkM2U=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-30T02:56:50Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-30T02:56:50Z"}, "message": "review comments", "tree": {"sha": "8cbab52890ca4392d4a762b82570d87c0066aeae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cbab52890ca4392d4a762b82570d87c0066aeae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e", "html_url": "https://github.com/rust-lang/rust/commit/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff6867338792042b13d401d7c2c3f0aee8d04e62", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6867338792042b13d401d7c2c3f0aee8d04e62", "html_url": "https://github.com/rust-lang/rust/commit/ff6867338792042b13d401d7c2c3f0aee8d04e62"}], "stats": {"total": 124, "additions": 60, "deletions": 64}, "files": [{"sha": "124afc5491e89dba3510d2b308d0a7b94ba81400", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 56, "deletions": 60, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e", "patch": "@@ -1,8 +1,8 @@\n use crate::check::{FnCtxt, Expectation, Diverges, Needs};\n use crate::check::coercion::CoerceMany;\n use crate::util::nodemap::FxHashMap;\n-use errors::Applicability;\n-use rustc::hir::{self, PatKind};\n+use errors::{Applicability, DiagnosticBuilder};\n+use rustc::hir::{self, PatKind, Pat};\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n use rustc::infer;\n@@ -377,64 +377,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             // Look for a case like `fn foo(&foo: u32)` and suggest\n                             // `fn foo(foo: &u32)`\n                             if let Some(mut err) = err {\n-                                if let PatKind::Binding(..) = inner.node {\n-                                    let parent_id = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n-                                    let parent = tcx.hir().get_by_hir_id(parent_id);\n-                                    debug!(\"inner {:?} pat {:?} parent {:?}\", inner, pat, parent);\n-                                    match parent {\n-                                        hir::Node::Item(hir::Item {\n-                                            node: hir::ItemKind::Fn(..), ..\n-                                        }) |\n-                                        hir::Node::ForeignItem(hir::ForeignItem {\n-                                            node: hir::ForeignItemKind::Fn(..), ..\n-                                        }) |\n-                                        hir::Node::TraitItem(hir::TraitItem {\n-                                            node: hir::TraitItemKind::Method(..), ..\n-                                        }) |\n-                                        hir::Node::ImplItem(hir::ImplItem {\n-                                            node: hir::ImplItemKind::Method(..), ..\n-                                        }) => { // this pat is likely an argument\n-                                            if let Ok(snippet) = tcx.sess.source_map()\n-                                                .span_to_snippet(inner.span)\n-                                            { // FIXME: turn into structured suggestion, will need\n-                                              // a span that also includes the the arg's type.\n-                                                err.help(&format!(\n-                                                    \"did you mean `{}: &{}`?\",\n-                                                    snippet,\n-                                                    expected,\n-                                                ));\n-                                            }\n-                                        }\n-                                        hir::Node::Expr(hir::Expr {\n-                                            node: hir::ExprKind::Match(..), ..\n-                                        }) => { // rely on match ergonomics\n-                                            if let Ok(snippet) = tcx.sess.source_map()\n-                                                .span_to_snippet(inner.span)\n-                                            {\n-                                                err.span_suggestion(\n-                                                    pat.span,\n-                                                    \"you can rely on match ergonomics and remove \\\n-                                                     the explicit borrow\",\n-                                                    snippet,\n-                                                    Applicability::MaybeIncorrect,\n-                                                );\n-                                            }\n-                                        }\n-                                        hir::Node::Pat(_) => {  // nested `&&pat`\n-                                            if let Ok(snippet) = tcx.sess.source_map()\n-                                                .span_to_snippet(inner.span)\n-                                            {\n-                                                err.span_suggestion(\n-                                                    pat.span,\n-                                                    \"you can probaly remove the explicit borrow\",\n-                                                    snippet,\n-                                                    Applicability::MaybeIncorrect,\n-                                                );\n-                                            }\n-                                        }\n-                                        _ => {} // don't provide suggestions in other cases #55175\n-                                    }\n-                                }\n+                                self.borrow_pat_suggestion(&mut err, &pat, &inner, &expected);\n                                 err.emit();\n                             }\n                             (rptr_ty, inner_ty)\n@@ -566,6 +509,59 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // subtyping.\n     }\n \n+    fn borrow_pat_suggestion(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        pat: &Pat,\n+        inner: &Pat,\n+        expected: &Ty<'tcx>,\n+    ) {\n+        let tcx = self.tcx;\n+        if let PatKind::Binding(..) = inner.node {\n+            let parent_id = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n+            let parent = tcx.hir().get_by_hir_id(parent_id);\n+            debug!(\"inner {:?} pat {:?} parent {:?}\", inner, pat, parent);\n+            match parent {\n+                hir::Node::Item(hir::Item { node: hir::ItemKind::Fn(..), .. }) |\n+                hir::Node::ForeignItem(hir::ForeignItem {\n+                    node: hir::ForeignItemKind::Fn(..), ..\n+                }) |\n+                hir::Node::TraitItem(hir::TraitItem { node: hir::TraitItemKind::Method(..), .. }) |\n+                hir::Node::ImplItem(hir::ImplItem { node: hir::ImplItemKind::Method(..), .. }) => {\n+                    // this pat is likely an argument\n+                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(inner.span) {\n+                        // FIXME: turn into structured suggestion, will need a span that also\n+                        // includes the the arg's type.\n+                        err.help(&format!(\"did you mean `{}: &{}`?\", snippet, expected));\n+                    }\n+                }\n+                hir::Node::Expr(hir::Expr { node: hir::ExprKind::Match(..), .. }) => {\n+                    // rely on match ergonomics\n+                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(inner.span) {\n+                        err.span_suggestion(\n+                            pat.span,\n+                            \"you can rely on match ergonomics and remove the explicit borrow\",\n+                            snippet,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+                hir::Node::Pat(_) => {\n+                    // nested `&&pat`\n+                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(inner.span) {\n+                        err.span_suggestion(\n+                            pat.span,\n+                            \"you can probably remove the explicit borrow\",\n+                            snippet,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+                _ => {} // don't provide suggestions in other cases #55175\n+            }\n+        }\n+    }\n+\n     pub fn check_dereferencable(&self, span: Span, expected: Ty<'tcx>, inner: &hir::Pat) -> bool {\n         if let PatKind::Binding(..) = inner.node {\n             if let Some(mt) = self.shallow_resolve(expected).builtin_deref(true) {"}, {"sha": "bc3013b78b38c8a0886f4df0834fdeb89c49bad9", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e", "patch": "@@ -23,7 +23,7 @@ LL |     let &&x = &1isize as &T;\n    |          ^^\n    |          |\n    |          expected trait T, found reference\n-   |          help: you can probaly remove the explicit borrow: `x`\n+   |          help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected type `dyn T`\n               found type `&_`\n@@ -35,7 +35,7 @@ LL |     let &&&x = &(&1isize as &T);\n    |           ^^\n    |           |\n    |           expected trait T, found reference\n-   |           help: you can probaly remove the explicit borrow: `x`\n+   |           help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected type `dyn T`\n               found type `&_`"}, {"sha": "a9347926bda0a554ba69bb081e38d75d2b178540", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e", "patch": "@@ -15,7 +15,7 @@ LL | fn agh(&&bar: &u32) {\n    |         ^^^^\n    |         |\n    |         expected u32, found reference\n-   |         help: you can probaly remove the explicit borrow: `bar`\n+   |         help: you can probably remove the explicit borrow: `bar`\n    |\n    = note: expected type `u32`\n               found type `&_`"}, {"sha": "a064e2485ffe806a7b3e0a6722165e2a5bd1086c", "filename": "src/test/ui/suggestions/match-ergonomics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr?ref=693eea5784fc58e9d9a8cade7a5b2afa2f3dbd3e", "patch": "@@ -5,7 +5,7 @@ LL |         [&v] => {},\n    |          ^^\n    |          |\n    |          expected i32, found reference\n-   |          help: you can probaly remove the explicit borrow: `v`\n+   |          help: you can probably remove the explicit borrow: `v`\n    |\n    = note: expected type `i32`\n               found type `&_`"}]}