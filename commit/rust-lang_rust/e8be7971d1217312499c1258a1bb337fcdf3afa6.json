{"sha": "e8be7971d1217312499c1258a1bb337fcdf3afa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YmU3OTcxZDEyMTczMTI0OTljMTI1OGExYmIzMzdmY2RmM2FmYTY=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-15T20:30:13Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-20T18:12:43Z"}, "message": "Use bitflags function instead of custom one", "tree": {"sha": "1a7a9761c89d9b54f7401cf10d9913932d47e65f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a7a9761c89d9b54f7401cf10d9913932d47e65f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8be7971d1217312499c1258a1bb337fcdf3afa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8be7971d1217312499c1258a1bb337fcdf3afa6", "html_url": "https://github.com/rust-lang/rust/commit/e8be7971d1217312499c1258a1bb337fcdf3afa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8be7971d1217312499c1258a1bb337fcdf3afa6/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7da50d23f4fdcd2952a336d661373050730657b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7da50d23f4fdcd2952a336d661373050730657b", "html_url": "https://github.com/rust-lang/rust/commit/c7da50d23f4fdcd2952a336d661373050730657b"}], "stats": {"total": 8, "additions": 1, "deletions": 7}, "files": [{"sha": "db4fae606ad3461b1b3b0821f46667c21cafdb9e", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8be7971d1217312499c1258a1bb337fcdf3afa6/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8be7971d1217312499c1258a1bb337fcdf3afa6/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=e8be7971d1217312499c1258a1bb337fcdf3afa6", "patch": "@@ -19,12 +19,6 @@ struct AsmArgs {\n     options_spans: Vec<Span>,\n }\n \n-impl AsmArgs {\n-    fn option_is_set(&self, option: ast::InlineAsmOptions) -> bool {\n-        (self.options & option) == option\n-    }\n-}\n-\n fn parse_args<'a>(\n     ecx: &mut ExtCtxt<'a>,\n     sp: Span,\n@@ -304,7 +298,7 @@ fn try_set_option<'a>(\n     symbol: Symbol,\n     option: ast::InlineAsmOptions,\n ) {\n-    if !args.option_is_set(option) {\n+    if !args.options.contains(option) {\n         args.options |= option;\n     } else {\n         err_duplicate_option(p, symbol, p.prev_token.span);"}]}