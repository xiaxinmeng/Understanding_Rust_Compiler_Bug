{"sha": "fe91cfd684340f45dabd15568b7dae2f8118ee44", "node_id": "C_kwDOAAsO6NoAKGZlOTFjZmQ2ODQzNDBmNDVkYWJkMTU1NjhiN2RhZTJmODExOGVlNDQ", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T05:36:12Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:27Z"}, "message": "Use revisions for NLL in suggestions", "tree": {"sha": "4e0aa8a3c6056367fa179d9752b8177ddc34074a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e0aa8a3c6056367fa179d9752b8177ddc34074a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe91cfd684340f45dabd15568b7dae2f8118ee44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe91cfd684340f45dabd15568b7dae2f8118ee44", "html_url": "https://github.com/rust-lang/rust/commit/fe91cfd684340f45dabd15568b7dae2f8118ee44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe91cfd684340f45dabd15568b7dae2f8118ee44/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b391b329f075ed287b07f80346360be2e0f212e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b391b329f075ed287b07f80346360be2e0f212e6", "html_url": "https://github.com/rust-lang/rust/commit/b391b329f075ed287b07f80346360be2e0f212e6"}], "stats": {"total": 423, "additions": 330, "deletions": 93}, "files": [{"sha": "12c7c8f9b7e12d687a928a291f6c15cceb7d0324", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.base.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,31 +1,31 @@\n error[E0515]: cannot return reference to function parameter `val`\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:21:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:25:9\n    |\n LL |         val.use_self()\n    |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to function parameter `val`\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:43:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:47:9\n    |\n LL |         val.use_self()\n    |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to function parameter `val`\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:109:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:113:9\n    |\n LL |         val.use_self()\n    |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an implicit `'static` lifetime requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:66:13\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:70:13\n    |\n LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32> + 'a>) -> &'a () {\n    |                        -------------------------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:60:30\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:64:30\n    |\n LL |     impl MyTrait for Box<dyn ObjectTrait<Assoc = i32>> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ this has an implicit `'static` lifetime requirement", "previous_filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr"}, {"sha": "db790049c6f4479685f455f79a88ebf4fd29c965", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,17 +1,17 @@\n error[E0515]: cannot return reference to function parameter `val`\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:21:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:25:9\n    |\n LL |         val.use_self()\n    |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to function parameter `val`\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:43:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:47:9\n    |\n LL |         val.use_self()\n    |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to function parameter `val`\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:109:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:113:9\n    |\n LL |         val.use_self()\n    |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function"}, {"sha": "ec90a0987f0a379dcc2c0d927e908101adee21a6", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // FIXME: the following cases need to suggest more things to make users reach a working end state.\n \n mod bav {\n@@ -63,7 +67,7 @@ mod bay {\n     impl Bar for i32 {}\n \n     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32> + 'a>) -> &'a () {\n-        val.use_self() //~ ERROR E0772\n+        val.use_self() //[base]~ ERROR E0772\n     }\n }\n "}, {"sha": "37be629e77c5d5f624ecbc09cddef8a548d0c09b", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-nll.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-nll.rs?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -0,0 +1,118 @@\n+// FIXME(nll): On NLL stabilization, this should replace\n+// `impl-on-dyn-trait-with-implicit-static-bound.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+// compile-flags: -Zborrowck=mir\n+\n+#![allow(dead_code)]\n+\n+mod foo {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait<T> {}\n+    trait MyTrait<T> {\n+        fn use_self<K>(&self) -> &();\n+    }\n+    trait Irrelevant {}\n+\n+    impl<T> MyTrait<T> for dyn ObjectTrait<T> {\n+        fn use_self<K>(&self) -> &() { panic!() }\n+    }\n+    impl<T> Irrelevant for dyn ObjectTrait<T> {}\n+\n+    fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> + 'a {\n+        val.use_self::<T>() //~ ERROR borrowed data escapes\n+    }\n+}\n+\n+mod bar {\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &();\n+    }\n+    trait Irrelevant {}\n+\n+    impl MyTrait for dyn ObjectTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    impl Irrelevant for dyn ObjectTrait {}\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n+        val.use_self()\n+    }\n+}\n+\n+mod baz {\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &();\n+    }\n+    trait Irrelevant {}\n+\n+    impl MyTrait for Box<dyn ObjectTrait> {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    impl Irrelevant for Box<dyn ObjectTrait> {}\n+\n+    fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n+        val.use_self()\n+    }\n+}\n+\n+mod bat {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+\n+    impl dyn ObjectTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+        val.use_self()\n+        //~^ ERROR borrowed data escapes\n+    }\n+}\n+\n+mod ban {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    trait Irrelevant {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+\n+    impl MyTrait for dyn ObjectTrait {}\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n+        val.use_self() //~ ERROR borrowed data escapes\n+    }\n+}\n+\n+mod bal {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    trait Irrelevant {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+\n+    impl MyTrait for dyn ObjectTrait {}\n+    impl Irrelevant for dyn ObjectTrait {}\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+        MyTrait::use_self(val) //~ ERROR borrowed data escapes\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "38731ea8955337cdfddf52a0769bd6f629b36bbf", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-nll.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-nll.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:20:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-nll.rs:25:9\n    |\n LL |     fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> + 'a {\n    |               --     --- `val` is a reference that is only valid in the function body\n@@ -12,7 +12,7 @@ LL |         val.use_self::<T>()\n    |         argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:69:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-nll.rs:74:9\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |               --  --- `val` is a reference that is only valid in the function body\n@@ -25,7 +25,7 @@ LL |         val.use_self()\n    |         argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:88:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-nll.rs:94:9\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n    |               --  --- `val` is a reference that is only valid in the function body\n@@ -38,7 +38,7 @@ LL |         val.use_self()\n    |         argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:108:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-nll.rs:114:9\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |               --  --- `val` is a reference that is only valid in the function body", "previous_filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.nll.stderr"}, {"sha": "74da1cbfea54e3c3b5663c016deab163f806a884", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,3 +1,8 @@\n+// FIXME(nll): On NLL stabilization, this should be replaced by\n+// `impl-on-dyn-trait-with-implicit-static-bound-nll.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+\n // run-rustfix\n #![allow(dead_code)]\n "}, {"sha": "e0058b181b4235a905bf689e0a8d712acc221e45", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,3 +1,8 @@\n+// FIXME(nll): On NLL stabilization, this should be replaced by\n+// `impl-on-dyn-trait-with-implicit-static-bound-nll.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+\n // run-rustfix\n #![allow(dead_code)]\n "}, {"sha": "fbe7ac94a0aa61d3c6cc41a805be21fc80de940b", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,13 +1,13 @@\n error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:20:13\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:25:13\n    |\n LL |     fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> + 'a {\n    |                           ---------------------- this data with lifetime `'a`...\n LL |         val.use_self::<T>()\n    |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:14:32\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:19:32\n    |\n LL |     impl<T> MyTrait<T> for dyn ObjectTrait<T> {\n    |                                ^^^^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n@@ -19,15 +19,15 @@ LL |     impl<T> MyTrait<T> for dyn ObjectTrait<T> + '_ {\n    |                                               ++++\n \n error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an implicit `'static` lifetime requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:69:13\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:74:13\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is used and required to live as long as `'static` here because of an implicit lifetime bound on the inherent `impl`\n    |\n note: the used `impl` has a `'static` requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:64:14\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:69:14\n    |\n LL |     impl dyn ObjectTrait {\n    |              ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n@@ -39,15 +39,15 @@ LL |     impl dyn ObjectTrait + '_ {\n    |                          ++++\n \n error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:88:13\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:93:13\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:85:26\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:90:26\n    |\n LL |         fn use_self(&self) -> &() { panic!() }\n    |            -------- calling this method introduces the `impl`'s 'static` requirement\n@@ -64,20 +64,20 @@ LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                                                                    ++++\n \n error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:108:27\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:113:27\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         MyTrait::use_self(val)\n    |                           ^^^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:108:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:113:9\n    |\n LL |         MyTrait::use_self(val)\n    |         ^^^^^^^^^^^^^^^^^\n note: the used `impl` has a `'static` requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:104:26\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:109:26\n    |\n LL |         fn use_self(&self) -> &() { panic!() }\n    |            -------- calling this method introduces the `impl`'s 'static` requirement\n@@ -90,15 +90,15 @@ LL |     impl MyTrait for dyn ObjectTrait + '_ {}\n    |                                      ++++\n \n error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an implicit `'static` lifetime requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:37:13\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:42:13\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:31:26\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:36:26\n    |\n LL |     impl MyTrait for dyn ObjectTrait {\n    |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n@@ -110,15 +110,15 @@ LL |     impl MyTrait for dyn ObjectTrait + '_ {\n    |                                      ++++\n \n error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an implicit `'static` lifetime requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:54:13\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:59:13\n    |\n LL |     fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n    |                        ----------------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is used and required to live as long as `'static` here\n    |\n note: the used `impl` has a `'static` requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:48:30\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:53:30\n    |\n LL |     impl MyTrait for Box<dyn ObjectTrait> {\n    |                              ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement"}, {"sha": "4e0e6675e5a288728e8db15c00bdec857c8644ca", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.base.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,21 +1,21 @@\n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:24:9\n    |\n LL |     foo.bar(move |_| {\n    |         ^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:23:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n    |                        ^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature-2.rs:20:13: 23:6]` will meet its required lifetime bounds...\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature-2.rs:24:13: 27:6]` will meet its required lifetime bounds...\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:24:9\n    |\n LL |     foo.bar(move |_| {\n    |         ^^^\n note: ...that is required by this bound\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:11:12\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:15:12\n    |\n LL |         F: 'a,\n    |            ^^", "previous_filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr"}, {"sha": "9f35175c08d8cabc369cd9f4a39d260b9411940d", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,5 +1,5 @@\n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:24:5\n    |\n LL | /     foo.bar(move |_| {\n LL | |\n@@ -8,12 +8,12 @@ LL | |     });\n    | |______^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:23:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n    |                        ^^^\n note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:24:5\n    |\n LL | /     foo.bar(move |_| {\n LL | |"}, {"sha": "3e3b440330491b2448417f0c5bb07a21f8e49a60", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Regression test for #81650\n \n struct Foo<'a> {"}, {"sha": "d51d12b909d0bdb89173b269a085a2e17cbb8d10", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.base.stderr", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.base.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,16 +1,16 @@\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/missing-lifetimes-in-signature.rs:37:11\n+  --> $DIR/missing-lifetimes-in-signature.rs:42:11\n    |\n LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |        -  ^^ undeclared lifetime\n    |        |\n    |        help: consider introducing lifetime `'a` here: `'a,`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:19:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:23:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                            ------ hidden type `[closure@$DIR/missing-lifetimes-in-signature.rs:19:5: 22:6]` captures the anonymous lifetime defined here\n+   |                            ------ hidden type `[closure@$DIR/missing-lifetimes-in-signature.rs:23:5: 26:6]` captures the anonymous lifetime defined here\n ...\n LL | /     move || {\n LL | |\n@@ -24,18 +24,18 @@ LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                                   ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:26:37\n+  --> $DIR/missing-lifetimes-in-signature.rs:30:37\n    |\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                     ^^^^^^^^^^^^^^^^^^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:26:26\n+  --> $DIR/missing-lifetimes-in-signature.rs:30:26\n    |\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                          ^^^^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:31:5: 33:6]` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:26:37\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:35:5: 38:6]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:30:37\n    |\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                     ^^^^^^^^^^^^^^^^^^\n@@ -48,18 +48,18 @@ LL ~     G: Get<T> + 'a,\n    |\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:48:45\n+  --> $DIR/missing-lifetimes-in-signature.rs:53:45\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:48:34\n+  --> $DIR/missing-lifetimes-in-signature.rs:53:34\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                  ^^^^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:53:5: 55:6]` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:48:45\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:58:5: 61:6]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:53:45\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n@@ -69,18 +69,18 @@ LL | fn qux<'b, 'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + '\n    |        +++           ++++                                               ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:60:58\n+  --> $DIR/missing-lifetimes-in-signature.rs:66:58\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                                          ^^^^^^^^^^^^^^^^^^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:60:47\n+  --> $DIR/missing-lifetimes-in-signature.rs:66:47\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                               ^^^^^^\n-note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:62:9: 64:10]` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:60:58\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:68:9: 71:10]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:66:58\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                                          ^^^^^^^^^^^^^^^^^^\n@@ -90,18 +90,18 @@ LL |     fn qux<'c, 'b, G: Get<T> + 'b + 'c, T>(g: G, dest: &mut T) -> impl FnOn\n    |            +++                    ++++                                               ++++\n \n error[E0621]: explicit lifetime required in the type of `dest`\n-  --> $DIR/missing-lifetimes-in-signature.rs:69:45\n+  --> $DIR/missing-lifetimes-in-signature.rs:76:45\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                  ------     ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n    |                                  |\n    |                                  help: add explicit lifetime `'a` to the type of `dest`: `&'a mut T`\n \n error[E0309]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:80:44\n+  --> $DIR/missing-lifetimes-in-signature.rs:89:44\n    |\n LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n-   |                                            ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:85:5: 87:6]` will meet its required lifetime bounds\n+   |                                            ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:94:5: 97:6]` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |", "previous_filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr"}, {"sha": "63932cb6ba0422be85738dab909fc40bc5ee2e09", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,16 +1,16 @@\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/missing-lifetimes-in-signature.rs:37:11\n+  --> $DIR/missing-lifetimes-in-signature.rs:42:11\n    |\n LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |        -  ^^ undeclared lifetime\n    |        |\n    |        help: consider introducing lifetime `'a` here: `'a,`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:19:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:23:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                            ------ hidden type `[closure@$DIR/missing-lifetimes-in-signature.rs:19:5: 22:6]` captures the anonymous lifetime defined here\n+   |                            ------ hidden type `[closure@$DIR/missing-lifetimes-in-signature.rs:23:5: 26:6]` captures the anonymous lifetime defined here\n ...\n LL | /     move || {\n LL | |\n@@ -24,22 +24,24 @@ LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                                   ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:31:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:35:5\n    |\n LL | /     move || {\n+LL | |\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:26:26\n+  --> $DIR/missing-lifetimes-in-signature.rs:30:26\n    |\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                          ^^^^^^\n note: ...so that the type `G` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:31:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:35:5\n    |\n LL | /     move || {\n+LL | |\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^\n@@ -49,22 +51,24 @@ LL |     G: Get<T> + 'a,\n    |               ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:53:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:58:5\n    |\n LL | /     move || {\n+LL | |\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:48:34\n+  --> $DIR/missing-lifetimes-in-signature.rs:53:34\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                  ^^^^^^\n note: ...so that the type `G` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:53:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:58:5\n    |\n LL | /     move || {\n+LL | |\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^\n@@ -74,22 +78,24 @@ LL | fn qux<'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                  ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:62:9\n+  --> $DIR/missing-lifetimes-in-signature.rs:68:9\n    |\n LL | /         move || {\n+LL | |\n LL | |             *dest = g.get();\n LL | |         }\n    | |_________^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:60:47\n+  --> $DIR/missing-lifetimes-in-signature.rs:66:47\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                               ^^^^^^\n note: ...so that the type `G` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:62:9\n+  --> $DIR/missing-lifetimes-in-signature.rs:68:9\n    |\n LL | /         move || {\n+LL | |\n LL | |             *dest = g.get();\n LL | |         }\n    | |_________^\n@@ -99,22 +105,26 @@ LL |     fn qux<'b, G: Get<T> + 'b + 'c, T>(g: G, dest: &mut T) -> impl FnOnce()\n    |                               ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:74:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:81:5\n    |\n LL | /     move || {\n+LL | |\n+LL | |\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^\n    |\n note: the parameter type `G` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature.rs:69:34\n+  --> $DIR/missing-lifetimes-in-signature.rs:76:34\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                  ^^^^^^\n note: ...so that the type `G` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature.rs:74:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:81:5\n    |\n LL | /     move || {\n+LL | |\n+LL | |\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^\n@@ -124,20 +134,23 @@ LL | fn bat<'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                  ++++\n \n error[E0621]: explicit lifetime required in the type of `dest`\n-  --> $DIR/missing-lifetimes-in-signature.rs:74:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:81:5\n    |\n LL |   fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                    ------ help: add explicit lifetime `'a` to the type of `dest`: `&'a mut T`\n ...\n LL | /     move || {\n+LL | |\n+LL | |\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^ lifetime `'a` required\n \n error[E0309]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:85:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:94:5\n    |\n LL | /     move || {\n+LL | |\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^ ...so that the type `G` will meet its required lifetime bounds"}, {"sha": "2036620126955313cbd127e1abb43dc198049983", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n pub trait Get<T> {\n     fn get(self) -> T;\n }\n@@ -24,11 +28,12 @@ where\n \n // After applying suggestion for `foo`:\n fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-//~^ ERROR the parameter type `G` may not live long enough\n+//[base]~^ ERROR the parameter type `G` may not live long enough\n where\n     G: Get<T>,\n {\n     move || {\n+        //[nll]~^ ERROR the parameter type `G` may not live long enough\n         *dest = g.get();\n     }\n }\n@@ -46,43 +51,48 @@ where\n \n // After applying suggestion for `baz`:\n fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-//~^ ERROR the parameter type `G` may not live long enough\n+//[base]~^ ERROR the parameter type `G` may not live long enough\n where\n     G: Get<T>,\n {\n     move || {\n+        //[nll]~^ ERROR the parameter type `G` may not live long enough\n         *dest = g.get();\n     }\n }\n \n // Same as above, but show that we pay attention to lifetime names from parent item\n impl<'a> Foo {\n     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-        //~^ ERROR the parameter type `G` may not live long enough\n+        //[base]~^ ERROR the parameter type `G` may not live long enough\n         move || {\n+            //[nll]~^ ERROR the parameter type `G` may not live long enough\n             *dest = g.get();\n         }\n     }\n }\n \n // After applying suggestion for `qux`:\n fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-//~^ ERROR explicit lifetime required in the type of `dest`\n+//[base]~^ ERROR explicit lifetime required in the type of `dest`\n where\n     G: Get<T>,\n {\n     move || {\n+        //[nll]~^ ERROR the parameter type `G` may not live long enough\n+        //[nll]~| ERROR explicit lifetime required\n         *dest = g.get();\n     }\n }\n \n // Potential incorrect attempt:\n fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n-//~^ ERROR the parameter type `G` may not live long enough\n+//[base]~^ ERROR the parameter type `G` may not live long enough\n where\n     G: Get<T>,\n {\n     move || {\n+        //[nll]~^ ERROR the parameter type `G` may not live long enough\n         *dest = g.get();\n     }\n }"}, {"sha": "0bd7f289340f36d6f4e77b7e7208c98bf30f9d1a", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.base.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.base.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:30:31\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:35:31\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n    |             ----- this data with an anonymous lifetime `'_`...\n@@ -10,7 +10,7 @@ LL |             remaining: self.0.iter(),\n    |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:27:23\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:31:23\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -24,7 +24,7 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo + '_>> {\n    |                                                        ++++\n \n error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:41:31\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:48:31\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n    |             ----- this data with an anonymous lifetime `'_`...\n@@ -35,7 +35,7 @@ LL |             remaining: self.0.iter(),\n    |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:38:23\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:44:23\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo + '_>> + '_ {\n    |                                                        ++++\n \n error[E0759]: `self` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:52:31\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:61:31\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n    |                 -------- this data with lifetime `'a`...\n@@ -56,7 +56,7 @@ LL |             remaining: self.0.iter(),\n    |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:49:30\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:57:30\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -66,7 +66,7 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo + 'a>> + 'a {\n    |                                                               ++++\n \n error[E0759]: `self` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:63:31\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:74:31\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n    |                 -------- this data with lifetime `'a`...\n@@ -77,7 +77,7 @@ LL |             remaining: self.0.iter(),\n    |                        ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:60:30\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:70:30\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.stderr"}, {"sha": "989f18e7182a02ac78a6eda8aed3741867c7ba1a", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.nll.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,11 +1,13 @@\n error: lifetime may not live long enough\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:28:9\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:32:9\n    |\n LL |       fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n    |               - let's call the lifetime of this reference `'1`\n LL | /         Iter {\n+LL | |\n LL | |             current: None,\n LL | |             remaining: self.0.iter(),\n+LL | |\n LL | |         }\n    | |_________^ returning this value requires that `'1` must outlive `'static`\n    |\n@@ -19,13 +21,15 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo + '_>> {\n    |                                                        ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:39:9\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:45:9\n    |\n LL |       fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n    |               - let's call the lifetime of this reference `'1`\n LL | /         Iter {\n+LL | |\n LL | |             current: None,\n LL | |             remaining: self.0.iter(),\n+LL | |\n LL | |         }\n    | |_________^ returning this value requires that `'1` must outlive `'static`\n    |\n@@ -35,13 +39,15 @@ LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo + '_>> + '_ {\n    |                                                        ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:50:9\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:58:9\n    |\n LL |       fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n    |               -- lifetime `'a` defined here\n LL | /         Iter {\n+LL | |\n LL | |             current: None,\n LL | |             remaining: self.0.iter(),\n+LL | |\n LL | |         }\n    | |_________^ returning this value requires that `'a` must outlive `'static`\n    |\n@@ -51,13 +57,15 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo + 'a>> + 'a {\n    |                                                               ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/trait-object-nested-in-impl-trait.rs:61:9\n+  --> $DIR/trait-object-nested-in-impl-trait.rs:71:9\n    |\n LL |       fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n    |               -- lifetime `'a` defined here\n LL | /         Iter {\n+LL | |\n LL | |             current: None,\n LL | |             remaining: self.0.iter(),\n+LL | |\n LL | |         }\n    | |_________^ returning this value requires that `'a` must outlive `'static`\n    |"}, {"sha": "5d868a58c0f351ebb3769c866040301e40a814b6", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.rs?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {}\n impl<'a, T: Foo> Foo for &'a T {}\n impl<T: Foo + ?Sized> Foo for Box<T> {}\n@@ -26,8 +30,10 @@ struct Bar(Vec<Box<dyn Foo>>);\n impl Bar {\n     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> {\n         Iter {\n+            //[nll]~^ ERROR lifetime may not live long enough\n             current: None,\n-            remaining: self.0.iter(), //~ ERROR E0759\n+            remaining: self.0.iter(),\n+            //[base]~^ ERROR E0759\n         }\n     }\n }\n@@ -37,8 +43,10 @@ struct Baz(Vec<Box<dyn Foo>>);\n impl Baz {\n     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n         Iter {\n+            //[nll]~^ ERROR lifetime may not live long enough\n             current: None,\n-            remaining: self.0.iter(), //~ ERROR E0759\n+            remaining: self.0.iter(),\n+            //[base]~^ ERROR E0759\n         }\n     }\n }\n@@ -48,8 +56,10 @@ struct Bat(Vec<Box<dyn Foo>>);\n impl Bat {\n     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n         Iter {\n+            //[nll]~^ ERROR lifetime may not live long enough\n             current: None,\n-            remaining: self.0.iter(), //~ ERROR E0759\n+            remaining: self.0.iter(),\n+            //[base]~^ ERROR E0759\n         }\n     }\n }\n@@ -59,8 +69,10 @@ struct Ban(Vec<Box<dyn Foo>>);\n impl Ban {\n     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n         Iter {\n+            //[nll]~^ ERROR lifetime may not live long enough\n             current: None,\n-            remaining: self.0.iter(), //~ ERROR E0759\n+            remaining: self.0.iter(),\n+            //[base]~^ ERROR E0759\n         }\n     }\n }"}, {"sha": "c363cc2d0e1052cfba8799fe5648e2b74dc8ca27", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime-nll.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime-nll.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime-nll.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime-nll.fixed?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -0,0 +1,24 @@\n+// FIXME(nll): On NLL stabilization, this should be replace\n+// `suggest-impl-trait-lifetime.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+// compile-flags: -Zborrowck=mir\n+\n+// run-rustfix\n+\n+use std::fmt::Debug;\n+\n+fn foo(d: impl Debug + 'static) {\n+//~^ HELP consider adding an explicit lifetime bound...\n+    bar(d);\n+//~^ ERROR the parameter type `impl Debug` may not live long enough\n+//~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds\n+}\n+\n+fn bar(d: impl Debug + 'static) {\n+    println!(\"{:?}\", d)\n+}\n+\n+fn main() {\n+  foo(\"hi\");\n+}"}, {"sha": "dd275f6630b86d6e43f93d2d9c31a64bd6de3524", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime-nll.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime-nll.rs?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -0,0 +1,24 @@\n+// FIXME(nll): On NLL stabilization, this should be replace\n+// `suggest-impl-trait-lifetime.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+// compile-flags: -Zborrowck=mir\n+\n+// run-rustfix\n+\n+use std::fmt::Debug;\n+\n+fn foo(d: impl Debug) {\n+//~^ HELP consider adding an explicit lifetime bound...\n+    bar(d);\n+//~^ ERROR the parameter type `impl Debug` may not live long enough\n+//~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds\n+}\n+\n+fn bar(d: impl Debug + 'static) {\n+    println!(\"{:?}\", d)\n+}\n+\n+fn main() {\n+  foo(\"hi\");\n+}"}, {"sha": "41226fdf9fed18dc2a72a55c10ada60fcd7e7cca", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime-nll.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime-nll.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `impl Debug` may not live long enough\n-  --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n+  --> $DIR/suggest-impl-trait-lifetime-nll.rs:13:5\n    |\n LL |     bar(d);\n    |     ^^^^^^ ...so that the type `impl Debug` will meet its required lifetime bounds", "previous_filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.nll.stderr"}, {"sha": "75ff26c04352bc0868ab1d14661aede6cca5ed43", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,3 +1,8 @@\n+// FIXME(nll): On NLL stabilization, this should be replaced by\n+// `suggest-impl-trait-lifetime-nll.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+\n // run-rustfix\n \n use std::fmt::Debug;"}, {"sha": "b93fe103a4abf7a08ae5e2400f184d5f41622475", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,3 +1,8 @@\n+// FIXME(nll): On NLL stabilization, this should be replaced by\n+// `suggest-impl-trait-lifetime-nll.rs`. Compiletest has\n+// problems with rustfix and revisions.\n+// ignore-compare-mode-nll\n+\n // run-rustfix\n \n use std::fmt::Debug;"}, {"sha": "85f36ea78aa1dae46679fc393a2e5b2c7fab77d4", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe91cfd684340f45dabd15568b7dae2f8118ee44/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr?ref=fe91cfd684340f45dabd15568b7dae2f8118ee44", "patch": "@@ -1,11 +1,11 @@\n error[E0310]: the parameter type `impl Debug` may not live long enough\n-  --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n+  --> $DIR/suggest-impl-trait-lifetime.rs:12:5\n    |\n LL |     bar(d);\n    |     ^^^ ...so that the type `impl Debug` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n-  --> $DIR/suggest-impl-trait-lifetime.rs:12:24\n+  --> $DIR/suggest-impl-trait-lifetime.rs:17:24\n    |\n LL | fn bar(d: impl Debug + 'static) {\n    |                        ^^^^^^^"}]}