{"sha": "77fd0cc566b4eca108b3580312f1e298fc9af8df", "node_id": "C_kwDOAAsO6NoAKDc3ZmQwY2M1NjZiNGVjYTEwOGIzNTgwMzEyZjFlMjk4ZmM5YWY4ZGY", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-19T16:38:54Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-06-08T20:32:41Z"}, "message": "Handle panic runtime specially", "tree": {"sha": "22dd8fd7845a6af681d04a3528a1445097e5cd30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22dd8fd7845a6af681d04a3528a1445097e5cd30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77fd0cc566b4eca108b3580312f1e298fc9af8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77fd0cc566b4eca108b3580312f1e298fc9af8df", "html_url": "https://github.com/rust-lang/rust/commit/77fd0cc566b4eca108b3580312f1e298fc9af8df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77fd0cc566b4eca108b3580312f1e298fc9af8df/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ef203388483688b0a4598efbc63ee7295bff975", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef203388483688b0a4598efbc63ee7295bff975", "html_url": "https://github.com/rust-lang/rust/commit/6ef203388483688b0a4598efbc63ee7295bff975"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "e22c903bf336e6e320c0066302e9b14e55d4cd46", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/77fd0cc566b4eca108b3580312f1e298fc9af8df/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fd0cc566b4eca108b3580312f1e298fc9af8df/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=77fd0cc566b4eca108b3580312f1e298fc9af8df", "patch": "@@ -366,14 +366,19 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n                     prev_name, cur_name\n                 ));\n             }\n-            panic_runtime = Some((cnum, tcx.panic_strategy(cnum).unwrap()));\n+            panic_runtime = Some((\n+                cnum,\n+                tcx.panic_strategy(cnum).unwrap_or_else(|| {\n+                    bug!(\"cannot determine panic strategy of a panic runtime\");\n+                }),\n+            ));\n         }\n     }\n \n     // If we found a panic runtime, then we know by this point that it's the\n     // only one, but we perform validation here that all the panic strategy\n     // compilation modes for the whole DAG are valid.\n-    if let Some((cnum, found_strategy)) = panic_runtime {\n+    if let Some((runtime_cnum, found_strategy)) = panic_runtime {\n         let desired_strategy = sess.panic_strategy();\n \n         // First up, validate that our selected panic runtime is indeed exactly\n@@ -383,7 +388,7 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n                 \"the linked panic runtime `{}` is \\\n                                not compiled with this crate's \\\n                                panic strategy `{}`\",\n-                tcx.crate_name(cnum),\n+                tcx.crate_name(runtime_cnum),\n                 desired_strategy.desc()\n             ));\n         }\n@@ -397,7 +402,7 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n                 continue;\n             }\n             let cnum = CrateNum::new(i + 1);\n-            if tcx.is_compiler_builtins(cnum) {\n+            if cnum == runtime_cnum || tcx.is_compiler_builtins(cnum) {\n                 continue;\n             }\n "}, {"sha": "78809b105359dd97029b79296815b3b74a568ffe", "filename": "compiler/rustc_mir_transform/src/ffi_unwind_calls.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77fd0cc566b4eca108b3580312f1e298fc9af8df/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fd0cc566b4eca108b3580312f1e298fc9af8df/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs?ref=77fd0cc566b4eca108b3580312f1e298fc9af8df", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout;\n use rustc_middle::ty::query::Providers;\n@@ -129,6 +129,10 @@ fn has_ffi_unwind_calls(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> bool {\n }\n \n fn required_panic_strategy(tcx: TyCtxt<'_>, (): ()) -> Option<PanicStrategy> {\n+    if tcx.is_panic_runtime(LOCAL_CRATE) {\n+        return Some(tcx.sess.panic_strategy());\n+    }\n+\n     if tcx.sess.panic_strategy() == PanicStrategy::Abort {\n         return Some(PanicStrategy::Abort);\n     }"}, {"sha": "7f4a8ed290ecf08c203d5d69e007f2e67f4c44c9", "filename": "src/test/ui/panic-runtime/transitive-link-a-bunch.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77fd0cc566b4eca108b3580312f1e298fc9af8df/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77fd0cc566b4eca108b3580312f1e298fc9af8df/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.stderr?ref=77fd0cc566b4eca108b3580312f1e298fc9af8df", "patch": "@@ -2,9 +2,7 @@ error: cannot link together two panic runtimes: panic_runtime_unwind and panic_r\n \n error: the linked panic runtime `panic_runtime_abort` is not compiled with this crate's panic strategy `unwind`\n \n-error: the crate `wants_panic_runtime_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n+error: the crate `wants_panic_runtime_abort` requires panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n \n-error: the crate `panic_runtime_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "23bfea6af15c1c99d123c200df5178d204bb6083", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fd0cc566b4eca108b3580312f1e298fc9af8df/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fd0cc566b4eca108b3580312f1e298fc9af8df/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs?ref=77fd0cc566b4eca108b3580312f1e298fc9af8df", "patch": "@@ -1,6 +1,6 @@\n // build-fail\n // needs-unwind\n-// error-pattern:is incompatible with this crate's strategy of `unwind`\n+// error-pattern:is not compiled with this crate's panic strategy `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n // ignore-wasm32-bare compiled with panic=abort by default"}, {"sha": "d306ce6c5ea282c123eaa87ea49490a808015b7b", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77fd0cc566b4eca108b3580312f1e298fc9af8df/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77fd0cc566b4eca108b3580312f1e298fc9af8df/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.stderr?ref=77fd0cc566b4eca108b3580312f1e298fc9af8df", "patch": "@@ -1,6 +1,4 @@\n error: the linked panic runtime `panic_runtime_abort` is not compiled with this crate's panic strategy `unwind`\n \n-error: the crate `panic_runtime_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "014437b7f1b661b535528d29bc674d5e035f6e92", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort2.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77fd0cc566b4eca108b3580312f1e298fc9af8df/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77fd0cc566b4eca108b3580312f1e298fc9af8df/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.stderr?ref=77fd0cc566b4eca108b3580312f1e298fc9af8df", "patch": "@@ -1,8 +1,6 @@\n error: the linked panic runtime `panic_runtime_abort` is not compiled with this crate's panic strategy `unwind`\n \n-error: the crate `wants_panic_runtime_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n+error: the crate `wants_panic_runtime_abort` requires panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n \n-error: the crate `panic_runtime_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}]}