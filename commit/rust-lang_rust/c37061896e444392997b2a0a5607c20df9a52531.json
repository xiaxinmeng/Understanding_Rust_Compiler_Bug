{"sha": "c37061896e444392997b2a0a5607c20df9a52531", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNzA2MTg5NmU0NDQzOTI5OTdiMmEwYTU2MDdjMjBkZjlhNTI1MzE=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-01-30T20:38:37Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-02-11T21:53:39Z"}, "message": "Document stable versions of number-related intrinsics", "tree": {"sha": "2700d0e29df5e57b55193c7e0549b455020eb69a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2700d0e29df5e57b55193c7e0549b455020eb69a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c37061896e444392997b2a0a5607c20df9a52531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c37061896e444392997b2a0a5607c20df9a52531", "html_url": "https://github.com/rust-lang/rust/commit/c37061896e444392997b2a0a5607c20df9a52531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c37061896e444392997b2a0a5607c20df9a52531/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb475b0f7fb0ab889dbc5beb66af22d2368e5ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb475b0f7fb0ab889dbc5beb66af22d2368e5ffb", "html_url": "https://github.com/rust-lang/rust/commit/eb475b0f7fb0ab889dbc5beb66af22d2368e5ffb"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "0c45d2dd6fad65c99d295b760c029cc06da7d269", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c37061896e444392997b2a0a5607c20df9a52531/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37061896e444392997b2a0a5607c20df9a52531/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=c37061896e444392997b2a0a5607c20df9a52531", "patch": "@@ -1438,14 +1438,21 @@ extern \"rust-intrinsic\" {\n     pub fn frem_fast<T>(a: T, b: T) -> T;\n \n     /// Convert with LLVM\u2019s fptoui/fptosi, which may return undef for values out of range\n-    /// https://github.com/rust-lang/rust/issues/10184\n+    /// (<https://github.com/rust-lang/rust/issues/10184>)\n+    /// This is under stabilization at <https://github.com/rust-lang/rust/issues/67058>\n     pub fn float_to_int_approx_unchecked<Float, Int>(value: Float) -> Int;\n \n     /// Returns the number of bits set in an integer type `T`\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `count_ones` method. For example,\n+    /// [`std::u32::count_ones`](../../std/primitive.u32.html#method.count_ones)\n     #[rustc_const_stable(feature = \"const_ctpop\", since = \"1.40.0\")]\n     pub fn ctpop<T>(x: T) -> T;\n \n     /// Returns the number of leading unset bits (zeroes) in an integer type `T`.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `leading_zeros` method. For example,\n+    /// [`std::u32::leading_zeros`](../../std/primitive.u32.html#method.leading_zeros)\n     ///\n     /// # Examples\n     ///\n@@ -1491,6 +1498,9 @@ extern \"rust-intrinsic\" {\n     pub fn ctlz_nonzero<T>(x: T) -> T;\n \n     /// Returns the number of trailing unset bits (zeroes) in an integer type `T`.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `trailing_zeros` method. For example,\n+    /// [`std::u32::trailing_zeros`](../../std/primitive.u32.html#method.trailing_zeros)\n     ///\n     /// # Examples\n     ///\n@@ -1536,10 +1546,16 @@ extern \"rust-intrinsic\" {\n     pub fn cttz_nonzero<T>(x: T) -> T;\n \n     /// Reverses the bytes in an integer type `T`.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `swap_bytes` method. For example,\n+    /// [`std::u32::swap_bytes`](../../std/primitive.u32.html#method.swap_bytes)\n     #[rustc_const_stable(feature = \"const_bswap\", since = \"1.40.0\")]\n     pub fn bswap<T>(x: T) -> T;\n \n     /// Reverses the bits in an integer type `T`.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `reverse_bits` method. For example,\n+    /// [`std::u32::reverse_bits`](../../std/primitive.u32.html#method.reverse_bits)\n     #[rustc_const_stable(feature = \"const_bitreverse\", since = \"1.40.0\")]\n     pub fn bitreverse<T>(x: T) -> T;\n \n@@ -1569,20 +1585,34 @@ extern \"rust-intrinsic\" {\n     pub fn exact_div<T>(x: T, y: T) -> T;\n \n     /// Performs an unchecked division, resulting in undefined behavior\n-    /// where y = 0 or x = `T::min_value()` and y = -1\n+    /// where y = 0 or x = `T::min_value()` and y = -1.\n+    ///\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `checked_div` method. For example,\n+    /// [`std::u32::checked_div`](../../std/primitive.u32.html#method.checked_div)\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_div<T>(x: T, y: T) -> T;\n     /// Returns the remainder of an unchecked division, resulting in\n     /// undefined behavior where y = 0 or x = `T::min_value()` and y = -1\n+    ///\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `checked_rem` method. For example,\n+    /// [`std::u32::checked_rem`](../../std/primitive.u32.html#method.checked_rem)\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_rem<T>(x: T, y: T) -> T;\n \n     /// Performs an unchecked left shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_shl` method. For example,\n+    /// [`std::u32::wrapping_shl`](../../std/primitive.u32.html#method.wrapping_shl)\n     #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n     pub fn unchecked_shl<T>(x: T, y: T) -> T;\n     /// Performs an unchecked right shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_shr` method. For example,\n+    /// [`std::u32::wrapping_shr`](../../std/primitive.u32.html#method.wrapping_shr)\n     #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n     pub fn unchecked_shr<T>(x: T, y: T) -> T;\n "}]}