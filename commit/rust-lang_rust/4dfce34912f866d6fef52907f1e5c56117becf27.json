{"sha": "4dfce34912f866d6fef52907f1e5c56117becf27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZmNlMzQ5MTJmODY2ZDZmZWY1MjkwN2YxZTVjNTYxMTdiZWNmMjc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-09T21:24:24Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-14T19:45:18Z"}, "message": "Derive Default for ExternEntry", "tree": {"sha": "039f20b1cbcaa7296a480322c06c918185a9ece6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/039f20b1cbcaa7296a480322c06c918185a9ece6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dfce34912f866d6fef52907f1e5c56117becf27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlyzjc4ACgkQtAh+UQ6Y\nsWQxwQ//XX6Zcxln1jPK6Q/RpTBOTbPzld7kKq7Z0k6LqIp9nxcRRCW1PjMp6wHY\nlHYzVph9CeqcyhwmVurZzGVg/YmfMIFyeIXGTUYSBc1Av4OxgKtAASCVrJlOnAI2\nLGiopC8bX73MYSTKarsXXOMS0LTTV2GZXJx45ntO/FQquTIa5Cf31o1DExdbuWW1\nYYlxaz04tY1cPFf/x3hJP9Un+ZdpqgCDrlMbExfTpclLgMm1WSK7Pvk4mxjk0dbs\nHfRlqYeGntVqTxtC4hHbAsMEowKkVyVu3rWWEU4+Rbg3Lsd0owdSo57mx8pTope1\nFcW6w5YjDraPJq8l9ysShEuDp+fo1DX9i0G9LDZvSWF9Q8hxm0qy5T0XSTh/CjBm\nFt1VHRRVeKnzwjZ1fRSn2BL6Pu/MoH1W26Bj0MMmjbHQJc+JCgklZj3rYkQh8TUy\n30reFgjDKASCidaP4zyshBWunqmjygWG2MWC8eiK54R500PR1UmWl86wo+IOTUBu\numuQU4UagMd5u9JINrACy/j7W7DlJ8YjVZHjLqNhAcpflGeegKPDvsIayrQbSO2S\notAAjNL+Mzc/ZCi+aVg6AooLLPC7/GUCr6AsnYwdOTH84wJN03lZSRLHnaOhtBOZ\nDDpa/c1M1LcysOOz6h3Me5MapfDj0tkueK0Y8I0v+4LT56/j5G8=\n=53T1\n-----END PGP SIGNATURE-----", "payload": "tree 039f20b1cbcaa7296a480322c06c918185a9ece6\nparent 872c20d41569ab42eda5741d6e2a463a2b385c56\nauthor Aaron Hill <aa1ronham@gmail.com> 1554845064 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1555271118 -0400\n\nDerive Default for ExternEntry\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dfce34912f866d6fef52907f1e5c56117becf27", "html_url": "https://github.com/rust-lang/rust/commit/4dfce34912f866d6fef52907f1e5c56117becf27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dfce34912f866d6fef52907f1e5c56117becf27/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872c20d41569ab42eda5741d6e2a463a2b385c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/872c20d41569ab42eda5741d6e2a463a2b385c56", "html_url": "https://github.com/rust-lang/rust/commit/872c20d41569ab42eda5741d6e2a463a2b385c56"}], "stats": {"total": 47, "additions": 17, "deletions": 30}, "files": [{"sha": "d3a734cbc6eadc8d8df3bf764f6bb2ae0891a3dd", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4dfce34912f866d6fef52907f1e5c56117becf27/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfce34912f866d6fef52907f1e5c56117becf27/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=4dfce34912f866d6fef52907f1e5c56117becf27", "patch": "@@ -285,7 +285,7 @@ impl OutputTypes {\n #[derive(Clone, Hash)]\n pub struct Externs(BTreeMap<String, ExternEntry>);\n \n-#[derive(Clone, Hash, Eq, PartialEq, Ord, PartialOrd, Debug)]\n+#[derive(Clone, Hash, Eq, PartialEq, Ord, PartialOrd, Debug, Default)]\n pub struct ExternEntry {\n     pub locations: BTreeSet<Option<String>>,\n     pub is_private_dep: bool\n@@ -2337,26 +2337,17 @@ pub fn build_session_options_and_crate_config(\n             );\n         };\n \n-\n-        externs\n+        let entry = externs\n             .entry(name.to_owned())\n-            .and_modify(|e| {\n-                e.locations.insert(location.clone());\n-\n-                // Crates start out being not private,\n-                // and go to being private if we see an '--extern-private'\n-                // flag\n-                e.is_private_dep |= private;\n-            })\n-            .or_insert_with(|| {\n-                let mut locations = BTreeSet::new();\n-                locations.insert(location);\n-\n-                ExternEntry {\n-                    locations: locations,\n-                    is_private_dep: private\n-                }\n-            });\n+            .or_default();\n+\n+\n+        entry.locations.insert(location.clone());\n+\n+        // Crates start out being not private,\n+        // and go to being private if we see an '--extern-private'\n+        // flag\n+        entry.is_private_dep |= private;\n     }\n \n     let crate_name = matches.opt_str(\"crate-name\");"}, {"sha": "21d1af229ddc2815a4536ed9499cff0adf4378e6", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dfce34912f866d6fef52907f1e5c56117becf27/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfce34912f866d6fef52907f1e5c56117becf27/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=4dfce34912f866d6fef52907f1e5c56117becf27", "patch": "@@ -176,7 +176,7 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     })\n }\n \n-pub fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, main_def_id: DefId) {\n+fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, main_def_id: DefId) {\n     let main_id = tcx.hir().as_local_hir_id(main_def_id).unwrap();\n     let main_span = tcx.def_span(main_def_id);\n     let main_t = tcx.type_of(main_def_id);\n@@ -241,7 +241,7 @@ pub fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, main_def_id: DefI\n     }\n }\n \n-pub fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, start_def_id: DefId) {\n+fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, start_def_id: DefId) {\n     let start_id = tcx.hir().as_local_hir_id(start_def_id).unwrap();\n     let start_span = tcx.def_span(start_def_id);\n     let start_t = tcx.type_of(start_def_id);\n@@ -298,7 +298,7 @@ pub fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, start_def_id: De\n     }\n }\n \n-pub fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n         Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),"}, {"sha": "a4d2a3be863300aef1f5c7f1ca2e48cc403a4c15", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4dfce34912f866d6fef52907f1e5c56117becf27/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfce34912f866d6fef52907f1e5c56117becf27/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=4dfce34912f866d6fef52907f1e5c56117becf27", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::{BTreeMap, BTreeSet};\n+use std::collections::BTreeMap;\n use std::fmt;\n use std::path::PathBuf;\n \n@@ -590,12 +590,8 @@ fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n         let name = name.to_string();\n         // For Rustdoc purposes, we can treat all externs as public\n         externs.entry(name)\n-            .and_modify(|e| { e.locations.insert(location.clone()); } )\n-            .or_insert_with(|| {\n-                let mut locations = BTreeSet::new();\n-                locations.insert(location);\n-                ExternEntry { locations, is_private_dep: false }\n-            });\n+            .or_default()\n+            .locations.insert(location.clone());\n     }\n     Ok(Externs::new(externs))\n }"}]}