{"sha": "0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOTA3ZmE1NDJkN2JmYTA4Y2ExZjU1NTEyZmZhNGE1ZmY3MGVkMTU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-02T05:14:14Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-21T09:55:19Z"}, "message": "Provide a filemap ctor with line info", "tree": {"sha": "f4f1a2a50414c8a863ada951f1f57c24c76a15ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f1a2a50414c8a863ada951f1f57c24c76a15ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15", "html_url": "https://github.com/rust-lang/rust/commit/0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007246c17f1891cabb84c8a82250703f542cd58e", "url": "https://api.github.com/repos/rust-lang/rust/commits/007246c17f1891cabb84c8a82250703f542cd58e", "html_url": "https://github.com/rust-lang/rust/commit/007246c17f1891cabb84c8a82250703f542cd58e"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "3e5c10702b641c5ef3ea3bdc9533a6e9f67acbfc", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15", "patch": "@@ -642,6 +642,21 @@ impl CodeMap {\n         filemap\n     }\n \n+    /// Creates a new filemap and sets its line information.\n+    pub fn new_filemap_and_lines(&self, filename: &str, src: &str) -> Rc<FileMap> {\n+        let fm = self.new_filemap(filename.to_string(), src.to_owned());\n+        let mut byte_pos: u32 = 0;\n+        for line in src.lines() {\n+            // register the start of this line\n+            fm.next_line(BytePos(byte_pos));\n+\n+            // update byte_pos to include this line and the \\n at the end\n+            byte_pos += line.len() as u32 + 1;\n+        }\n+        fm\n+    }\n+\n+\n     /// Allocates a new FileMap representing a source file from an external\n     /// crate. The source code of such an \"imported filemap\" is not available,\n     /// but we still know enough to generate accurate debuginfo location\n@@ -1190,27 +1205,14 @@ mod tests {\n         Span { lo: BytePos(left_index), hi: BytePos(right_index + 1), expn_id: NO_EXPANSION }\n     }\n \n-    fn new_filemap_and_lines(cm: &CodeMap, filename: &str, input: &str) -> Rc<FileMap> {\n-        let fm = cm.new_filemap(filename.to_string(), input.to_string());\n-        let mut byte_pos: u32 = 0;\n-        for line in input.lines() {\n-            // register the start of this line\n-            fm.next_line(BytePos(byte_pos));\n-\n-            // update byte_pos to include this line and the \\n at the end\n-            byte_pos += line.len() as u32 + 1;\n-        }\n-        fm\n-    }\n-\n     /// Test span_to_snippet and span_to_lines for a span coverting 3\n     /// lines in the middle of a file.\n     #[test]\n     fn span_to_snippet_and_lines_spanning_multiple_lines() {\n         let cm = CodeMap::new();\n         let inputtext = \"aaaaa\\nbbbbBB\\nCCC\\nDDDDDddddd\\neee\\n\";\n         let selection = \"     \\n    ^~\\n~~~\\n~~~~~     \\n   \\n\";\n-        new_filemap_and_lines(&cm, \"blork.rs\", inputtext);\n+        cm.new_filemap_and_lines(\"blork.rs\", inputtext);\n         let span = span_from_selection(inputtext, selection);\n \n         // check that we are extracting the text we thought we were extracting"}, {"sha": "22aea1ce079e354acb457741839127d283309893", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15", "patch": "@@ -837,12 +837,7 @@ mod test {\n         tolv\n         dreizehn\n         \";\n-        let file = cm.new_filemap(\"dummy.txt\".to_string(), content.to_string());\n-        for (i, b) in content.bytes().enumerate() {\n-            if b == b'\\n' {\n-                file.next_line(BytePos(i as u32));\n-            }\n-        }\n+        let file = cm.new_filemap_and_lines(\"dummy.txt\", content);\n         let start = file.lines.borrow()[7];\n         let end = file.lines.borrow()[11];\n         let sp = mk_sp(start, end);"}, {"sha": "22517dc5f1bb5b4353f3a37534df095e331e2ed2", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=0e907fa542d7bfa08ca1f55512ffa4a5ff70ed15", "patch": "@@ -156,7 +156,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             // dependency information\n             let filename = format!(\"{}\", file.display());\n             let interned = token::intern_and_get_ident(&src[..]);\n-            cx.codemap().new_filemap(filename, src);\n+            cx.codemap().new_filemap_and_lines(&filename, &src);\n \n             base::MacEager::expr(cx.expr_str(sp, interned))\n         }\n@@ -187,7 +187,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             // Add this input file to the code map to make it available as\n             // dependency information, but don't enter it's contents\n             let filename = format!(\"{}\", file.display());\n-            cx.codemap().new_filemap(filename, \"\".to_string());\n+            cx.codemap().new_filemap_and_lines(&filename, \"\");\n \n             base::MacEager::expr(cx.expr_lit(sp, ast::LitBinary(Rc::new(bytes))))\n         }"}]}