{"sha": "06c5e7f383405094ab95229da7854aa61bb9df7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YzVlN2YzODM0MDUwOTRhYjk1MjI5ZGE3ODU0YWE2MWJiOWRmN2Y=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-06T18:47:46Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-07T09:16:02Z"}, "message": "Implement exp_m1 and ln_1p as methods for Float\n\nBoth expm1 and ln1p have been renamed to exp_m1 and ln_1p in order to be consistent with the underscore usage elsewhere.\n\nThe exp_m1 method is used for increased accuracy when doing floating point calculations, so this has been moved from the more general 'Exponential' trait into 'Float'.", "tree": {"sha": "b2a80370269699e01e195945ef95f0c97db09640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2a80370269699e01e195945ef95f0c97db09640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06c5e7f383405094ab95229da7854aa61bb9df7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06c5e7f383405094ab95229da7854aa61bb9df7f", "html_url": "https://github.com/rust-lang/rust/commit/06c5e7f383405094ab95229da7854aa61bb9df7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06c5e7f383405094ab95229da7854aa61bb9df7f/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b09dce3e1a9935bbe443a976e47ed9f71227883", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b09dce3e1a9935bbe443a976e47ed9f71227883", "html_url": "https://github.com/rust-lang/rust/commit/9b09dce3e1a9935bbe443a976e47ed9f71227883"}], "stats": {"total": 87, "additions": 65, "deletions": 22}, "files": [{"sha": "a80703fafa3d22918b3f7cb49c71a25dee5a0164", "filename": "src/libcore/num/cmath.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/06c5e7f383405094ab95229da7854aa61bb9df7f/src%2Flibcore%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c5e7f383405094ab95229da7854aa61bb9df7f/src%2Flibcore%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fcmath.rs?ref=06c5e7f383405094ab95229da7854aa61bb9df7f", "patch": "@@ -33,7 +33,8 @@ pub mod c_double_utils {\n         unsafe fn erf(n: c_double) -> c_double;\n         unsafe fn erfc(n: c_double) -> c_double;\n         unsafe fn exp(n: c_double) -> c_double;\n-        unsafe fn expm1(n: c_double) -> c_double;\n+        // rename: for consistency with underscore usage elsewhere\n+        #[link_name=\"expm1\"] unsafe fn exp_m1(n: c_double) -> c_double;\n         unsafe fn exp2(n: c_double) -> c_double;\n         #[link_name=\"fabs\"] unsafe fn abs(n: c_double) -> c_double;\n         // rename: for clarity and consistency with add/sub/mul/div\n@@ -63,7 +64,7 @@ pub mod c_double_utils {\n         // renamed: \"logb\" /often/ is confused for log2 by beginners\n         #[link_name=\"logb\"] unsafe fn log_radix(n: c_double) -> c_double;\n         // renamed: to be consitent with log as ln\n-        #[link_name=\"log1p\"] unsafe fn ln1p(n: c_double) -> c_double;\n+        #[link_name=\"log1p\"] unsafe fn ln_1p(n: c_double) -> c_double;\n         unsafe fn log10(n: c_double) -> c_double;\n         unsafe fn log2(n: c_double) -> c_double;\n         #[link_name=\"ilogb\"] unsafe fn ilog_radix(n: c_double) -> c_int;\n@@ -117,7 +118,7 @@ pub mod c_float_utils {\n         #[link_name=\"erff\"] unsafe fn erf(n: c_float) -> c_float;\n         #[link_name=\"erfcf\"] unsafe fn erfc(n: c_float) -> c_float;\n         #[link_name=\"expf\"] unsafe fn exp(n: c_float) -> c_float;\n-        #[link_name=\"expm1f\"]unsafe fn expm1(n: c_float) -> c_float;\n+        #[link_name=\"expm1f\"]unsafe fn exp_m1(n: c_float) -> c_float;\n         #[link_name=\"exp2f\"] unsafe fn exp2(n: c_float) -> c_float;\n         #[link_name=\"fabsf\"] unsafe fn abs(n: c_float) -> c_float;\n         #[link_name=\"fdimf\"]\n@@ -148,7 +149,7 @@ pub mod c_float_utils {\n \n         #[link_name=\"logf\"] unsafe fn ln(n: c_float) -> c_float;\n         #[link_name=\"logbf\"] unsafe fn log_radix(n: c_float) -> c_float;\n-        #[link_name=\"log1pf\"] unsafe fn ln1p(n: c_float) -> c_float;\n+        #[link_name=\"log1pf\"] unsafe fn ln_1p(n: c_float) -> c_float;\n         #[link_name=\"log2f\"] unsafe fn log2(n: c_float) -> c_float;\n         #[link_name=\"log10f\"] unsafe fn log10(n: c_float) -> c_float;\n         #[link_name=\"ilogbf\"] unsafe fn ilog_radix(n: c_float) -> c_int;"}, {"sha": "58dc6f4f45b57302770dd7ad829b8d4edb40b1c4", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/06c5e7f383405094ab95229da7854aa61bb9df7f/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c5e7f383405094ab95229da7854aa61bb9df7f/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=06c5e7f383405094ab95229da7854aa61bb9df7f", "patch": "@@ -82,7 +82,7 @@ delegate!(\n     fn cosh(n: c_float) -> c_float = c_float_utils::cosh,\n     fn erf(n: c_float) -> c_float = c_float_utils::erf,\n     fn erfc(n: c_float) -> c_float = c_float_utils::erfc,\n-    fn expm1(n: c_float) -> c_float = c_float_utils::expm1,\n+    fn exp_m1(n: c_float) -> c_float = c_float_utils::exp_m1,\n     fn abs_sub(a: c_float, b: c_float) -> c_float = c_float_utils::abs_sub,\n     fn fmax(a: c_float, b: c_float) -> c_float = c_float_utils::fmax,\n     fn fmin(a: c_float, b: c_float) -> c_float = c_float_utils::fmin,\n@@ -92,7 +92,7 @@ delegate!(\n     fn ldexp(x: c_float, n: c_int) -> c_float = c_float_utils::ldexp,\n     fn lgamma(n: c_float, sign: &mut c_int) -> c_float = c_float_utils::lgamma,\n     fn log_radix(n: c_float) -> c_float = c_float_utils::log_radix,\n-    fn ln1p(n: c_float) -> c_float = c_float_utils::ln1p,\n+    fn ln_1p(n: c_float) -> c_float = c_float_utils::ln_1p,\n     fn ilog_radix(n: c_float) -> c_int = c_float_utils::ilog_radix,\n     fn modf(n: c_float, iptr: &mut c_float) -> c_float = c_float_utils::modf,\n     fn round(n: c_float) -> c_float = c_float_utils::round,\n@@ -408,15 +408,14 @@ impl Trigonometric for f32 {\n }\n \n impl Exponential for f32 {\n+    /// Returns the exponential of the number\n     #[inline(always)]\n     fn exp(&self) -> f32 { exp(*self) }\n \n+    /// Returns 2 raised to the power of the number\n     #[inline(always)]\n     fn exp2(&self) -> f32 { exp2(*self) }\n \n-    #[inline(always)]\n-    fn expm1(&self) -> f32 { expm1(*self) }\n-\n     /// Returns the natural logarithm of the number\n     #[inline(always)]\n     fn ln(&self) -> f32 { ln(*self) }\n@@ -588,6 +587,20 @@ impl Float for f32 {\n         !(self.is_NaN() || self.is_infinite())\n     }\n \n+    ///\n+    /// Returns the exponential of the number, minus `1`, in a way that is accurate\n+    /// even if the number is close to zero\n+    ///\n+    #[inline(always)]\n+    fn exp_m1(&self) -> f32 { exp_m1(*self) }\n+\n+    ///\n+    /// Returns the natural logarithm of the number plus `1` (`ln(1+n)`) more accurately\n+    /// than if the operations were performed separately\n+    ///\n+    #[inline(always)]\n+    fn ln_1p(&self) -> f32 { ln_1p(*self) }\n+\n     ///\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This\n     /// produces a more accurate result with better performance than a separate multiplication"}, {"sha": "41fc9cca66e5a99afd92a4fc5c0bf6d71314c190", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/06c5e7f383405094ab95229da7854aa61bb9df7f/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c5e7f383405094ab95229da7854aa61bb9df7f/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=06c5e7f383405094ab95229da7854aa61bb9df7f", "patch": "@@ -84,7 +84,7 @@ delegate!(\n     fn cosh(n: c_double) -> c_double = c_double_utils::cosh,\n     fn erf(n: c_double) -> c_double = c_double_utils::erf,\n     fn erfc(n: c_double) -> c_double = c_double_utils::erfc,\n-    fn expm1(n: c_double) -> c_double = c_double_utils::expm1,\n+    fn exp_m1(n: c_double) -> c_double = c_double_utils::exp_m1,\n     fn abs_sub(a: c_double, b: c_double) -> c_double = c_double_utils::abs_sub,\n     fn fmax(a: c_double, b: c_double) -> c_double = c_double_utils::fmax,\n     fn fmin(a: c_double, b: c_double) -> c_double = c_double_utils::fmin,\n@@ -94,7 +94,7 @@ delegate!(\n     fn ldexp(x: c_double, n: c_int) -> c_double = c_double_utils::ldexp,\n     fn lgamma(n: c_double, sign: &mut c_int) -> c_double = c_double_utils::lgamma,\n     fn log_radix(n: c_double) -> c_double = c_double_utils::log_radix,\n-    fn ln1p(n: c_double) -> c_double = c_double_utils::ln1p,\n+    fn ln_1p(n: c_double) -> c_double = c_double_utils::ln_1p,\n     fn ilog_radix(n: c_double) -> c_int = c_double_utils::ilog_radix,\n     fn modf(n: c_double, iptr: &mut c_double) -> c_double = c_double_utils::modf,\n     fn round(n: c_double) -> c_double = c_double_utils::round,\n@@ -421,15 +421,14 @@ impl Trigonometric for f64 {\n }\n \n impl Exponential for f64 {\n+    /// Returns the exponential of the number\n     #[inline(always)]\n     fn exp(&self) -> f64 { exp(*self) }\n \n+    /// Returns 2 raised to the power of the number\n     #[inline(always)]\n     fn exp2(&self) -> f64 { exp2(*self) }\n \n-    #[inline(always)]\n-    fn expm1(&self) -> f64 { expm1(*self) }\n-\n     /// Returns the natural logarithm of the number\n     #[inline(always)]\n     fn ln(&self) -> f64 { ln(*self) }\n@@ -631,6 +630,20 @@ impl Float for f64 {\n     #[inline(always)]\n     fn max_10_exp() -> int { 308 }\n \n+    ///\n+    /// Returns the exponential of the number, minus `1`, in a way that is accurate\n+    /// even if the number is close to zero\n+    ///\n+    #[inline(always)]\n+    fn exp_m1(&self) -> f64 { exp_m1(*self) }\n+\n+    ///\n+    /// Returns the natural logarithm of the number plus `1` (`ln(1+n)`) more accurately\n+    /// than if the operations were performed separately\n+    ///\n+    #[inline(always)]\n+    fn ln_1p(&self) -> f64 { ln_1p(*self) }\n+\n     ///\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This\n     /// produces a more accurate result with better performance than a separate multiplication"}, {"sha": "512d3afc2b622180f6542de4184524544f908d30", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/06c5e7f383405094ab95229da7854aa61bb9df7f/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c5e7f383405094ab95229da7854aa61bb9df7f/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=06c5e7f383405094ab95229da7854aa61bb9df7f", "patch": "@@ -26,9 +26,9 @@ use prelude::*;\n \n pub use f64::{add, sub, mul, div, rem, lt, le, eq, ne, ge, gt};\n pub use f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};\n-pub use f64::{erf, erfc, exp, expm1, exp2, abs_sub};\n+pub use f64::{erf, erfc, exp, exp_m1, exp2, abs_sub};\n pub use f64::{mul_add, fmax, fmin, next_after, frexp, hypot, ldexp};\n-pub use f64::{lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix};\n+pub use f64::{lgamma, ln, log_radix, ln_1p, log10, log2, ilog_radix};\n pub use f64::{modf, pow, powi, round, sinh, tanh, tgamma, trunc};\n pub use f64::{j0, j1, jn, y0, y1, yn};\n \n@@ -532,21 +532,18 @@ impl Trigonometric for float {\n }\n \n impl Exponential for float {\n+    /// Returns the exponential of the number\n     #[inline(always)]\n     fn exp(&self) -> float {\n         (*self as f64).exp() as float\n     }\n \n+    /// Returns 2 raised to the power of the number\n     #[inline(always)]\n     fn exp2(&self) -> float {\n         (*self as f64).exp2() as float\n     }\n \n-    #[inline(always)]\n-    fn expm1(&self) -> float {\n-        (*self as f64).expm1() as float\n-    }\n-\n     /// Returns the natural logarithm of the number\n     #[inline(always)]\n     fn ln(&self) -> float {\n@@ -823,6 +820,24 @@ impl Float for float {\n         !(self.is_NaN() || self.is_infinite())\n     }\n \n+    ///\n+    /// Returns the exponential of the number, minus `1`, in a way that is accurate\n+    /// even if the number is close to zero\n+    ///\n+    #[inline(always)]\n+    fn exp_m1(&self) -> float {\n+        (*self as f64).exp_m1() as float\n+    }\n+\n+    ///\n+    /// Returns the natural logarithm of the number plus `1` (`ln(1+n)`) more accurately\n+    /// than if the operations were performed separately\n+    ///\n+    #[inline(always)]\n+    fn ln_1p(&self) -> float {\n+        (*self as f64).ln_1p() as float\n+    }\n+\n     ///\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This\n     /// produces a more accurate result with better performance than a separate multiplication"}, {"sha": "2496ba497dcc4c5f4397d731fbc3f56048cd4119", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06c5e7f383405094ab95229da7854aa61bb9df7f/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c5e7f383405094ab95229da7854aa61bb9df7f/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=06c5e7f383405094ab95229da7854aa61bb9df7f", "patch": "@@ -121,7 +121,6 @@ pub trait Trigonometric {\n pub trait Exponential {\n     fn exp(&self) -> Self;\n     fn exp2(&self) -> Self;\n-    fn expm1(&self) -> Self;\n     fn ln(&self) -> Self;\n     fn log(&self, base: Self) -> Self;\n     fn log2(&self) -> Self;\n@@ -261,6 +260,8 @@ pub trait Float: Real\n     fn min_10_exp() -> int;\n     fn max_10_exp() -> int;\n \n+    fn exp_m1(&self) -> Self;\n+    fn ln_1p(&self) -> Self;\n     fn mul_add(&self, a: Self, b: Self) -> Self;\n     fn next_after(&self, other: Self) -> Self;\n }"}]}