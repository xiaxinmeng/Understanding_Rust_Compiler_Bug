{"sha": "33ee73102df243e4b794b81c2e53ba6f222b2f60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZWU3MzEwMmRmMjQzZTRiNzk0YjgxYzJlNTNiYTZmMjIyYjJmNjA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-03T20:13:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T04:35:06Z"}, "message": "Remove some redundancy in metadata::creader", "tree": {"sha": "3686f44823da7052636001cae96c3d63106fd467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3686f44823da7052636001cae96c3d63106fd467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33ee73102df243e4b794b81c2e53ba6f222b2f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33ee73102df243e4b794b81c2e53ba6f222b2f60", "html_url": "https://github.com/rust-lang/rust/commit/33ee73102df243e4b794b81c2e53ba6f222b2f60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33ee73102df243e4b794b81c2e53ba6f222b2f60/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "html_url": "https://github.com/rust-lang/rust/commit/d91b7b61eff9a9fdf8506f7d1b41fde47071503c"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "b6e72175e15fb4544174093384a9763f203f2b1c", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33ee73102df243e4b794b81c2e53ba6f222b2f60/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ee73102df243e4b794b81c2e53ba6f222b2f60/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=33ee73102df243e4b794b81c2e53ba6f222b2f60", "patch": "@@ -536,8 +536,8 @@ mod test {\n             alt getopts::getopts([\"--test\"], opts()) {\n               getopts::success(m) { m }\n             };\n-        let sessopts = build_session_options(\"whatever\", match);\n-        let sess = build_session(sessopts);\n+        let sessopts = build_session_options(match);\n+        let sess = build_session(\"whatever\", sessopts);\n         let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n         assert (attr::contains_name(cfg, \"test\"));\n     }\n@@ -550,8 +550,8 @@ mod test {\n             alt getopts::getopts([\"--test\", \"--cfg=test\"], opts()) {\n               getopts::success(m) { m }\n             };\n-        let sessopts = build_session_options(\"whatever\", match);\n-        let sess = build_session(sessopts);\n+        let sessopts = build_session_options(match);\n+        let sess = build_session(\"whatever\", sessopts);\n         let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n         let test_items = attr::find_meta_items_by_name(cfg, \"test\");\n         assert (vec::len(test_items) == 1u);"}, {"sha": "ccded566cfdd7a7b853f2b6673898ad50dbd0f87", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/33ee73102df243e4b794b81c2e53ba6f222b2f60/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ee73102df243e4b794b81c2e53ba6f222b2f60/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=33ee73102df243e4b794b81c2e53ba6f222b2f60", "patch": "@@ -24,7 +24,6 @@ fn read_crates(sess: session::session, crate: ast::crate) {\n     let e =\n         @{sess: sess,\n           crate_cache: @std::map::new_str_hash::<int>(),\n-          library_search_paths: sess.filesearch().lib_search_paths(),\n           mutable next_crate_num: 1};\n     let v =\n         visit::mk_simple_visitor(@{visit_view_item:\n@@ -37,7 +36,6 @@ fn read_crates(sess: session::session, crate: ast::crate) {\n type env =\n     @{sess: session::session,\n       crate_cache: @hashmap<str, int>,\n-      library_search_paths: [fs::path],\n       mutable next_crate_num: ast::crate_num};\n \n fn visit_view_item(e: env, i: @ast::view_item) {\n@@ -109,7 +107,7 @@ fn default_native_lib_naming(sess: session::session, static: bool) ->\n }\n \n fn find_library_crate(sess: session::session, ident: ast::ident,\n-                      metas: [@ast::meta_item], library_search_paths: [str])\n+                      metas: [@ast::meta_item])\n    -> option::t<{ident: str, data: @[u8]}> {\n \n     attr::require_unique_names(sess, metas);\n@@ -132,10 +130,12 @@ fn find_library_crate(sess: session::session, ident: ast::ident,\n \n     let nn = default_native_lib_naming(sess, sess.get_opts().static);\n     let x =\n-        find_library_crate_aux(nn, crate_name, metas, library_search_paths);\n+        find_library_crate_aux(nn, crate_name, metas,\n+                               sess.filesearch().lib_search_paths());\n     if x != none || sess.get_opts().static { ret x; }\n     let nn2 = default_native_lib_naming(sess, true);\n-    ret find_library_crate_aux(nn2, crate_name, metas, library_search_paths);\n+    ret find_library_crate_aux(nn2, crate_name, metas,\n+                               sess.filesearch().lib_search_paths());\n }\n \n fn find_library_crate_aux(nn: {prefix: str, suffix: str}, crate_name: str,\n@@ -198,11 +198,11 @@ fn get_metadata_section(filename: str) -> option::t<@[u8]> {\n }\n \n fn load_library_crate(sess: session::session, span: span, ident: ast::ident,\n-                      metas: [@ast::meta_item], library_search_paths: [str])\n+                      metas: [@ast::meta_item])\n    -> {ident: str, data: @[u8]} {\n \n \n-    alt find_library_crate(sess, ident, metas, library_search_paths) {\n+    alt find_library_crate(sess, ident, metas) {\n       some(t) { ret t; }\n       none. {\n         sess.span_fatal(span, #fmt[\"can't find crate for '%s'\", ident]);\n@@ -214,8 +214,7 @@ fn resolve_crate(e: env, ident: ast::ident, metas: [@ast::meta_item],\n                  span: span) -> ast::crate_num {\n     if !e.crate_cache.contains_key(ident) {\n         let cinfo =\n-            load_library_crate(e.sess, span, ident, metas,\n-                               e.library_search_paths);\n+            load_library_crate(e.sess, span, ident, metas);\n \n         let cfilename = cinfo.ident;\n         let cdata = cinfo.data;"}]}