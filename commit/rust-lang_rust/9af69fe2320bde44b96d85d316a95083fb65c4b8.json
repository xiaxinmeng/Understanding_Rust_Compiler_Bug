{"sha": "9af69fe2320bde44b96d85d316a95083fb65c4b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZjY5ZmUyMzIwYmRlNDRiOTZkODVkMzE2YTk1MDgzZmI2NWM0Yjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-21T05:28:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-21T05:28:21Z"}, "message": "Auto merge of #50080 - klnusbaum:edition_49591, r=Manishearth\n\nadd --edition option\n\nThis adds an official `edition` flag to the rust compiler", "tree": {"sha": "8e0d0b3ca666e17dcca6124e77a8e39a211c24d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e0d0b3ca666e17dcca6124e77a8e39a211c24d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af69fe2320bde44b96d85d316a95083fb65c4b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af69fe2320bde44b96d85d316a95083fb65c4b8", "html_url": "https://github.com/rust-lang/rust/commit/9af69fe2320bde44b96d85d316a95083fb65c4b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af69fe2320bde44b96d85d316a95083fb65c4b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b78853b6fd9597dc42ccf044fed805851d0a6f91", "url": "https://api.github.com/repos/rust-lang/rust/commits/b78853b6fd9597dc42ccf044fed805851d0a6f91", "html_url": "https://github.com/rust-lang/rust/commit/b78853b6fd9597dc42ccf044fed805851d0a6f91"}, {"sha": "c8c9bf97e3ed2eab3ed60a3412574e7c5b548eab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c9bf97e3ed2eab3ed60a3412574e7c5b548eab", "html_url": "https://github.com/rust-lang/rust/commit/c8c9bf97e3ed2eab3ed60a3412574e7c5b548eab"}], "stats": {"total": 117, "additions": 78, "deletions": 39}, "files": [{"sha": "e9fe94cdb4a361c29573d316d921e76ab7bd2457", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 57, "deletions": 24, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9af69fe2320bde44b96d85d316a95083fb65c4b8", "patch": "@@ -16,6 +16,8 @@ pub use self::CrateType::*;\n pub use self::Passes::*;\n pub use self::DebugInfoLevel::*;\n \n+use std::str::FromStr;\n+\n use session::{early_error, early_warn, Session};\n use session::search_paths::SearchPaths;\n \n@@ -28,7 +30,7 @@ use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n use syntax::codemap::{FileName, FilePathMapping};\n-use syntax::edition::Edition;\n+use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n use syntax::parse::token;\n use syntax::parse;\n use syntax::symbol::Symbol;\n@@ -410,6 +412,7 @@ top_level_options!(\n \n         // Remap source path prefixes in all output (messages, object files, debug, etc)\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [UNTRACKED],\n+        edition: Edition [TRACKED],\n     }\n );\n \n@@ -589,6 +592,7 @@ pub fn basic_options() -> Options {\n         cli_forced_codegen_units: None,\n         cli_forced_thinlto_off: false,\n         remap_path_prefix: Vec::new(),\n+        edition: DEFAULT_EDITION,\n     }\n }\n \n@@ -773,16 +777,13 @@ macro_rules! options {\n             Some(\"`string` or `string=string`\");\n         pub const parse_lto: Option<&'static str> =\n             Some(\"one of `thin`, `fat`, or omitted\");\n-        pub const parse_edition: Option<&'static str> =\n-            Some(\"one of: `2015`, `2018`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n         use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n         use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n-        use syntax::edition::Edition;\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n@@ -985,20 +986,6 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_edition(slot: &mut Edition, v: Option<&str>) -> bool {\n-            match v {\n-                Some(s) => {\n-                    let edition = s.parse();\n-                    if let Ok(parsed) = edition {\n-                        *slot = parsed;\n-                        true\n-                    } else {\n-                        false\n-                    }\n-                }\n-                _ => false,\n-            }\n-        }\n     }\n ) }\n \n@@ -1292,10 +1279,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `everybody_loops` (all function bodies replaced with `loop {}`),\n         `hir` (the HIR), `hir,identified`, or\n         `hir,typed` (HIR with types for each node).\"),\n-    edition: Edition = (Edition::Edition2015, parse_edition, [TRACKED],\n-        \"The edition to build Rust with. Newer editions may include features\n-         that require breaking changes. The default edition is 2015 (the first\n-         edition). Crates compiled with different editions can be linked together.\"),\n     run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n           \"run `dsymutil` and delete intermediate object files\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n@@ -1656,6 +1639,12 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                   `expanded,identified` (fully parenthesized, AST nodes with IDs).\",\n             \"TYPE\",\n         ),\n+        opt::opt_s(\n+            \"\",\n+            \"edition\",\n+            \"Specify which edition of the compiler to use when compiling code.\",\n+            EDITION_NAME_LIST,\n+        ),\n         opt::multi_s(\n             \"\",\n             \"remap-path-prefix\",\n@@ -1715,6 +1704,34 @@ pub fn build_session_options_and_crate_config(\n         ),\n     };\n \n+    let edition = match matches.opt_str(\"edition\") {\n+        Some(arg) => match Edition::from_str(&arg){\n+            Ok(edition) => edition,\n+            Err(_) => early_error(\n+                ErrorOutputType::default(),\n+                &format!(\n+                    \"argument for --edition must be one of: \\\n+                    {}. (instead was `{}`)\",\n+                    EDITION_NAME_LIST,\n+                    arg\n+                ),\n+            ),\n+        }\n+        None => DEFAULT_EDITION,\n+    };\n+\n+    if !edition.is_stable() && !nightly_options::is_nightly_build() {\n+        early_error(\n+                ErrorOutputType::default(),\n+                &format!(\n+                    \"Edition {} is unstable an only\\\n+                    available for nightly builds of rustc.\",\n+                    edition,\n+                )\n+        )\n+    }\n+\n+\n     // We need the opts_present check because the driver will send us Matches\n     // with only stable options if no unstable options are used. Since error-format\n     // is unstable, it will not be present. We have to use opts_present not\n@@ -2171,6 +2188,7 @@ pub fn build_session_options_and_crate_config(\n             cli_forced_codegen_units: codegen_units,\n             cli_forced_thinlto_off: disable_thinlto,\n             remap_path_prefix,\n+            edition,\n         },\n         cfg,\n     )\n@@ -2300,11 +2318,12 @@ mod dep_tracking {\n     use std::hash::Hash;\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n-    use super::{CrateType, DebugInfoLevel, Edition, ErrorOutputType, Lto, OptLevel, OutputTypes,\n+    use super::{CrateType, DebugInfoLevel, ErrorOutputType, Lto, OptLevel, OutputTypes,\n                 Passes, Sanitizer};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_back::{PanicStrategy, RelroLevel};\n     use rustc_back::target::TargetTriple;\n+    use syntax::edition::Edition;\n \n     pub trait DepTrackingHash {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);\n@@ -2363,8 +2382,8 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n-    impl_dep_tracking_hash_via_hash!(Edition);\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n+    impl_dep_tracking_hash_via_hash!(Edition);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);\n@@ -2437,6 +2456,7 @@ mod tests {\n     use super::{Externs, OutputType, OutputTypes};\n     use rustc_back::{PanicStrategy, RelroLevel};\n     use syntax::symbol::Symbol;\n+    use syntax::edition::{Edition, DEFAULT_EDITION};\n     use syntax;\n \n     fn optgroups() -> getopts::Options {\n@@ -3081,4 +3101,17 @@ mod tests {\n         opts.debugging_opts.relro_level = Some(RelroLevel::Full);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n     }\n+\n+    #[test]\n+    fn test_edition_parsing() {\n+        // test default edition\n+        let options = super::basic_options();\n+        assert!(options.edition == DEFAULT_EDITION);\n+\n+        let matches = optgroups()\n+            .parse(&[\"--edition=2018\".to_string()])\n+            .unwrap();\n+        let (sessopts, _) = build_session_options_and_crate_config(&matches);\n+        assert!(sessopts.edition == Edition::Edition2018)\n+    }\n }"}, {"sha": "5e4dee7fb60ca64bb54cde363b561a1d6431eede", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9af69fe2320bde44b96d85d316a95083fb65c4b8", "patch": "@@ -934,11 +934,11 @@ impl Session {\n \n     /// Are we allowed to use features from the Rust 2018 edition?\n     pub fn rust_2018(&self) -> bool {\n-        self.opts.debugging_opts.edition >= Edition::Edition2018\n+        self.opts.edition >= Edition::Edition2018\n     }\n \n     pub fn edition(&self) -> Edition {\n-        self.opts.debugging_opts.edition\n+        self.opts.edition\n     }\n }\n "}, {"sha": "2c781fda4ed03a38a39689e9a6794934b3bad901", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=9af69fe2320bde44b96d85d316a95083fb65c4b8", "patch": "@@ -691,7 +691,7 @@ where\n         krate,\n         &sess.parse_sess,\n         sess.opts.test,\n-        sess.opts.debugging_opts.edition,\n+        sess.edition(),\n     );\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);"}, {"sha": "2bd1e72f0eb173057cdecbf2ac264145bfe6ef64", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=9af69fe2320bde44b96d85d316a95083fb65c4b8", "patch": "@@ -155,10 +155,10 @@ pub fn run_core(search_paths: SearchPaths,\n         actually_rustdoc: true,\n         debugging_opts: config::DebuggingOptions {\n             force_unstable_if_unmarked,\n-            edition,\n             ..config::basic_debugging_options()\n         },\n         error_format,\n+        edition,\n         ..config::basic_options().clone()\n     };\n "}, {"sha": "c4eaa48e49db62e47c6bb0bb3c4fc64b32f2871d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=9af69fe2320bde44b96d85d316a95083fb65c4b8", "patch": "@@ -80,9 +80,9 @@ pub fn run(input_path: &Path,\n         lint_cap: Some(::rustc::lint::Level::Allow),\n         actually_rustdoc: true,\n         debugging_opts: config::DebuggingOptions {\n-            edition,\n             ..config::basic_debugging_options()\n         },\n+        edition,\n         ..config::basic_options().clone()\n     };\n \n@@ -223,9 +223,9 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         test: as_test_harness,\n         unstable_features: UnstableFeatures::from_environment(),\n         debugging_opts: config::DebuggingOptions {\n-            edition,\n             ..config::basic_debugging_options()\n         },\n+        edition,\n         ..config::basic_options().clone()\n     };\n "}, {"sha": "3fc1c279f5a22ea971f55be431a2df2a0820e8b2", "filename": "src/libsyntax/edition.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibsyntax%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Flibsyntax%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fedition.rs?ref=9af69fe2320bde44b96d85d316a95083fb65c4b8", "patch": "@@ -24,20 +24,19 @@ pub enum Edition {\n \n     // when adding new editions, be sure to update:\n     //\n-    // - the list in the `parse_edition` static in librustc::session::config\n+    // - Update the `ALL_EDITIONS` const\n+    // - Update the EDITION_NAME_LIST const\n     // - add a `rust_####()` function to the session\n     // - update the enum in Cargo's sources as well\n-    //\n-    // When -Zedition becomes --edition, there will\n-    // also be a check for the edition being nightly-only\n-    // somewhere. That will need to be updated\n-    // whenever we're stabilizing/introducing a new edition\n-    // as well as changing the default Cargo template.\n }\n \n // must be in order from oldest to newest\n pub const ALL_EDITIONS: &[Edition] = &[Edition::Edition2015, Edition::Edition2018];\n \n+pub const EDITION_NAME_LIST: &'static str = \"2015|2018\";\n+\n+pub const DEFAULT_EDITION: Edition = Edition::Edition2015;\n+\n impl fmt::Display for Edition {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let s = match *self {\n@@ -62,6 +61,13 @@ impl Edition {\n             Edition::Edition2018 => \"rust_2018_preview\",\n         }\n     }\n+\n+    pub fn is_stable(&self) -> bool {\n+        match *self {\n+            Edition::Edition2015 => true,\n+            Edition::Edition2018 => false,\n+        }\n+    }\n }\n \n impl FromStr for Edition {"}, {"sha": "b304443f63145701d2294af7713e685cb6c25fc4", "filename": "src/test/compile-fail/edition-raw-pointer-method-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs?ref=9af69fe2320bde44b96d85d316a95083fb65c4b8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Zedition=2015 -Zunstable-options\n+// compile-flags: --edition=2015 -Zunstable-options\n \n // tests that editions work with the tyvar warning-turned-error\n "}, {"sha": "d01cac019e36c8da18b0562a66060ce81e28468c", "filename": "src/test/compile-fail/edition-raw-pointer-method-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af69fe2320bde44b96d85d316a95083fb65c4b8/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs?ref=9af69fe2320bde44b96d85d316a95083fb65c4b8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Zedition=2018 -Zunstable-options\n+// compile-flags: --edition=2018 -Zunstable-options\n \n // tests that editions work with the tyvar warning-turned-error\n "}]}