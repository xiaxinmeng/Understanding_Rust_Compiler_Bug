{"sha": "290f0781b4507b14060aa04db3f412914b1f117d", "node_id": "C_kwDOAAsO6NoAKDI5MGYwNzgxYjQ1MDdiMTQwNjBhYTA0ZGIzZjQxMjkxNGIxZjExN2Q", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-06T13:29:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-13T14:04:02Z"}, "message": "Store LocalDefId in hir::Closure.", "tree": {"sha": "418da3c3f79306b49b52a335b60cd1de8a3fe999", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/418da3c3f79306b49b52a335b60cd1de8a3fe999"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/290f0781b4507b14060aa04db3f412914b1f117d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/290f0781b4507b14060aa04db3f412914b1f117d", "html_url": "https://github.com/rust-lang/rust/commit/290f0781b4507b14060aa04db3f412914b1f117d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/290f0781b4507b14060aa04db3f412914b1f117d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dba1503ed3c364f388128d42633ba00258ffad49", "url": "https://api.github.com/repos/rust-lang/rust/commits/dba1503ed3c364f388128d42633ba00258ffad49", "html_url": "https://github.com/rust-lang/rust/commit/dba1503ed3c364f388128d42633ba00258ffad49"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "432223220c556a2553414d7ff6aa35daaf12a17f", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=290f0781b4507b14060aa04db3f412914b1f117d", "patch": "@@ -635,6 +635,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `static |_task_context| -> <ret_ty> { body }`:\n         let generator_kind = {\n             let c = self.arena.alloc(hir::Closure {\n+                def_id: self.local_def_id(closure_node_id),\n                 binder: hir::ClosureBinder::Default,\n                 capture_clause,\n                 bound_generic_params: &[],\n@@ -887,6 +888,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let fn_decl = self.lower_fn_decl(decl, None, fn_decl_span, FnDeclKind::Closure, None);\n \n         let c = self.arena.alloc(hir::Closure {\n+            def_id: self.local_def_id(closure_id),\n             binder: binder_clause,\n             capture_clause,\n             bound_generic_params,\n@@ -991,6 +993,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             self.lower_fn_decl(&outer_decl, None, fn_decl_span, FnDeclKind::Closure, None);\n \n         let c = self.arena.alloc(hir::Closure {\n+            def_id: self.local_def_id(closure_id),\n             binder: binder_clause,\n             capture_clause,\n             bound_generic_params,"}, {"sha": "1be03552c88ad5c9711d7623f18d1f4b31edeb47", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=290f0781b4507b14060aa04db3f412914b1f117d", "patch": "@@ -921,6 +921,7 @@ pub struct Crate<'hir> {\n \n #[derive(Debug, HashStable_Generic)]\n pub struct Closure<'hir> {\n+    pub def_id: LocalDefId,\n     pub binder: ClosureBinder,\n     pub capture_clause: CaptureBy,\n     pub bound_generic_params: &'hir [GenericParam<'hir>],"}, {"sha": "d831c7f85916c9a01f4ff174738921bf9031e82b", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=290f0781b4507b14060aa04db3f412914b1f117d", "patch": "@@ -733,6 +733,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             walk_list!(visitor, visit_arm, arms);\n         }\n         ExprKind::Closure(&Closure {\n+            def_id: _,\n             binder: _,\n             bound_generic_params,\n             fn_decl,"}, {"sha": "f122e99946f1c0dbae749add012878270b43e317", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=290f0781b4507b14060aa04db3f412914b1f117d", "patch": "@@ -311,10 +311,9 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Closure { .. } = expr.kind {\n-            let def_id = self.tcx.hir().local_def_id(expr.hir_id);\n-            self.tcx.ensure().generics_of(def_id);\n-            self.tcx.ensure().codegen_fn_attrs(def_id);\n+        if let hir::ExprKind::Closure(closure) = expr.kind {\n+            self.tcx.ensure().generics_of(closure.def_id);\n+            self.tcx.ensure().codegen_fn_attrs(closure.def_id);\n             // We do not call `type_of` for closures here as that\n             // depends on typecheck and would therefore hide\n             // any further errors in case one typeck fails."}, {"sha": "0bd459a176264ed18075a5dce95c0ce582614435", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=290f0781b4507b14060aa04db3f412914b1f117d", "patch": "@@ -636,9 +636,8 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n             self.tcx.hir()\n         }\n         fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n-            if let hir::ExprKind::Closure { .. } = ex.kind {\n-                let def_id = self.tcx.hir().local_def_id(ex.hir_id);\n-                self.check(def_id);\n+            if let hir::ExprKind::Closure(closure) = ex.kind {\n+                self.check(closure.def_id);\n             }\n             intravisit::walk_expr(self, ex);\n         }\n@@ -771,9 +770,8 @@ fn find_opaque_ty_constraints_for_rpit(\n             self.tcx.hir()\n         }\n         fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n-            if let hir::ExprKind::Closure { .. } = ex.kind {\n-                let def_id = self.tcx.hir().local_def_id(ex.hir_id);\n-                self.check(def_id);\n+            if let hir::ExprKind::Closure(closure) = ex.kind {\n+                self.check(closure.def_id);\n             }\n             intravisit::walk_expr(self, ex);\n         }"}, {"sha": "d4560490711f109b9f929cfd6fd96f848439414b", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=290f0781b4507b14060aa04db3f412914b1f117d", "patch": "@@ -1481,6 +1481,7 @@ impl<'a> State<'a> {\n                 body,\n                 fn_decl_span: _,\n                 movability: _,\n+                def_id: _,\n             }) => {\n                 self.print_closure_binder(binder, bound_generic_params);\n                 self.print_capture_clause(capture_clause);"}, {"sha": "ed4b53c4abd9e59e745041d7222bb5141d8520dc", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=290f0781b4507b14060aa04db3f412914b1f117d", "patch": "@@ -1708,12 +1708,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_info_for_closure(&mut self, hir_id: hir::HirId) {\n-        let def_id = self.tcx.hir().local_def_id(hir_id);\n-        debug!(\"EncodeContext::encode_info_for_closure({:?})\", def_id);\n+    #[instrument(level = \"debug\", skip(self))]\n+    fn encode_info_for_closure(&mut self, def_id: LocalDefId) {\n         // NOTE(eddyb) `tcx.type_of(def_id)` isn't used because it's fully generic,\n         // including on the signature, which is inferred in `typeck.\n         let typeck_result: &'tcx ty::TypeckResults<'tcx> = self.tcx.typeck(def_id);\n+        let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n         let ty = typeck_result.node_type(hir_id);\n         match ty.kind() {\n             ty::Generator(..) => {\n@@ -2115,8 +2115,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     fn encode_info_for_expr(&mut self, expr: &hir::Expr<'_>) {\n-        if let hir::ExprKind::Closure { .. } = expr.kind {\n-            self.encode_info_for_closure(expr.hir_id);\n+        if let hir::ExprKind::Closure(closure) = expr.kind {\n+            self.encode_info_for_closure(closure.def_id);\n         }\n     }\n }"}, {"sha": "7130a2a8809813b16095afde0b6319b7c76e42de", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=290f0781b4507b14060aa04db3f412914b1f117d", "patch": "@@ -1412,8 +1412,8 @@ impl<'hir> Visitor<'hir> for ItemCollector<'hir> {\n     }\n \n     fn visit_expr(&mut self, ex: &'hir Expr<'hir>) {\n-        if matches!(ex.kind, ExprKind::Closure { .. }) {\n-            self.body_owners.push(self.tcx.hir().local_def_id(ex.hir_id));\n+        if let ExprKind::Closure(closure) = ex.kind {\n+            self.body_owners.push(closure.def_id);\n         }\n         intravisit::walk_expr(self, ex)\n     }"}, {"sha": "0100860afb94f279328a6b8c388466d2f750912d", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=290f0781b4507b14060aa04db3f412914b1f117d", "patch": "@@ -413,7 +413,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n                 }\n                 intravisit::walk_expr(self, expr);\n             }\n-            hir::ExprKind::Closure { .. } => {\n+            hir::ExprKind::Closure(closure) => {\n                 // Interesting control flow (for loops can contain labeled\n                 // breaks or continues)\n                 self.add_live_node_for_node(expr.hir_id, ExprNode(expr.span, expr.hir_id));\n@@ -423,8 +423,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n                 // in better error messages than just pointing at the closure\n                 // construction site.\n                 let mut call_caps = Vec::new();\n-                let closure_def_id = self.tcx.hir().local_def_id(expr.hir_id);\n-                if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n+                if let Some(upvars) = self.tcx.upvars_mentioned(closure.def_id) {\n                     call_caps.extend(upvars.keys().map(|var_id| {\n                         let upvar = upvars[var_id];\n                         let upvar_ln = self.add_live_node(UpvarNode(upvar.span));"}, {"sha": "9e41efce9ceaf6ae56b65c6176fdd28d1deb4fe8", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290f0781b4507b14060aa04db3f412914b1f117d/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=290f0781b4507b14060aa04db3f412914b1f117d", "patch": "@@ -75,9 +75,8 @@ impl<'tcx> Visitor<'tcx> for CaptureCollector<'_, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Closure { .. } = expr.kind {\n-            let closure_def_id = self.tcx.hir().local_def_id(expr.hir_id);\n-            if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n+        if let hir::ExprKind::Closure(closure) = expr.kind {\n+            if let Some(upvars) = self.tcx.upvars_mentioned(closure.def_id) {\n                 // Every capture of a closure expression is a local in scope,\n                 // that is moved/copied/borrowed into the closure value, and\n                 // for this analysis they are like any other access to a local."}]}