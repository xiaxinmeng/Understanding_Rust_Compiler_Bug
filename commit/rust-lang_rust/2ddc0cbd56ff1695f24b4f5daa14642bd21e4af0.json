{"sha": "2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZGMwY2JkNTZmZjE2OTVmMjRiNGY1ZGFhMTQ2NDJiZDIxZTRhZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-17T09:26:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-17T09:26:22Z"}, "message": "Auto merge of #52335 - nnethercote:BitSlice-fixes, r=nikomatsakis\n\n`BitSlice` fixes\n\n`propagate_bits_into_entry_set_for` and `BitSlice::bitwise` are hot for some benchmarks under NLL. I tried and failed to speed them up. (Increasing the size of `bit_slice::Word` from `usize` to `u128` caused a slowdown, even though decreasing the size of `bitvec::Word` from `u128` to `u64` also caused a slowdown. Weird.)\n\nAnyway, along the way I fixed up several problems in and around the `BitSlice` code.\n\nr? @nikomatsakis", "tree": {"sha": "26e06b3634b00e00386a81bee09d0ae240034254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e06b3634b00e00386a81bee09d0ae240034254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "html_url": "https://github.com/rust-lang/rust/commit/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d6f4e5eea0ca537e0e03ef369eeff85774cce2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6f4e5eea0ca537e0e03ef369eeff85774cce2c", "html_url": "https://github.com/rust-lang/rust/commit/9d6f4e5eea0ca537e0e03ef369eeff85774cce2c"}, {"sha": "f2b0b6700ce984a38abd06e48e7884573688539b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b0b6700ce984a38abd06e48e7884573688539b", "html_url": "https://github.com/rust-lang/rust/commit/f2b0b6700ce984a38abd06e48e7884573688539b"}], "stats": {"total": 72, "additions": 28, "deletions": 44}, "files": [{"sha": "79435aa398779ae46c59e2ccb0e81b78f8897644", "filename": "src/librustc_data_structures/bitslice.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_data_structures%2Fbitslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_data_structures%2Fbitslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitslice.rs?ref=2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "patch": "@@ -28,9 +28,9 @@ impl BitSlice for [Word] {\n     fn clear_bit(&mut self, idx: usize) -> bool {\n         let words = self;\n         debug!(\"clear_bit: words={} idx={}\",\n-               bits_to_string(words, words.len() * mem::size_of::<Word>()), bit_str(idx));\n+               bits_to_string(words, words.len() * mem::size_of::<Word>() * 8), idx);\n         let BitLookup { word, bit_in_word, bit_mask } = bit_lookup(idx);\n-        debug!(\"word={} bit_in_word={} bit_mask={}\", word, bit_in_word, bit_mask);\n+        debug!(\"word={} bit_in_word={} bit_mask=0x{:x}\", word, bit_in_word, bit_mask);\n         let oldv = words[word];\n         let newv = oldv & !bit_mask;\n         words[word] = newv;\n@@ -42,7 +42,7 @@ impl BitSlice for [Word] {\n     fn set_bit(&mut self, idx: usize) -> bool {\n         let words = self;\n         debug!(\"set_bit: words={} idx={}\",\n-               bits_to_string(words, words.len() * mem::size_of::<Word>()), bit_str(idx));\n+               bits_to_string(words, words.len() * mem::size_of::<Word>() * 8), idx);\n         let BitLookup { word, bit_in_word, bit_mask } = bit_lookup(idx);\n         debug!(\"word={} bit_in_word={} bit_mask={}\", word, bit_in_word, bit_mask);\n         let oldv = words[word];\n@@ -78,13 +78,6 @@ fn bit_lookup(bit: usize) -> BitLookup {\n     BitLookup { word: word, bit_in_word: bit_in_word, bit_mask: bit_mask }\n }\n \n-\n-fn bit_str(bit: Word) -> String {\n-    let byte = bit >> 3;\n-    let lobits = 1 << (bit & 0b111);\n-    format!(\"[{}:{}-{:02x}]\", bit, byte, lobits)\n-}\n-\n pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n     let mut result = String::new();\n     let mut sep = '[';\n@@ -95,7 +88,7 @@ pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n     let mut i = 0;\n     for &word in words.iter() {\n         let mut v = word;\n-        loop { // for each byte in `v`:\n+        for _ in 0..mem::size_of::<Word>() { // for each byte in `v`:\n             let remain = bits - i;\n             // If less than a byte remains, then mask just that many bits.\n             let mask = if remain <= 8 { (1 << remain) - 1 } else { 0xFF };\n@@ -110,14 +103,15 @@ pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n             i += 8;\n             sep = '-';\n         }\n+        sep = '|';\n     }\n     result.push(']');\n     return result\n }\n \n #[inline]\n-pub fn bitwise<Op:BitwiseOperator>(out_vec: &mut [usize],\n-                                   in_vec: &[usize],\n+pub fn bitwise<Op:BitwiseOperator>(out_vec: &mut [Word],\n+                                   in_vec: &[Word],\n                                    op: &Op) -> bool {\n     assert_eq!(out_vec.len(), in_vec.len());\n     let mut changed = false;\n@@ -132,21 +126,21 @@ pub fn bitwise<Op:BitwiseOperator>(out_vec: &mut [usize],\n \n pub trait BitwiseOperator {\n     /// Applies some bit-operation pointwise to each of the bits in the two inputs.\n-    fn join(&self, pred1: usize, pred2: usize) -> usize;\n+    fn join(&self, pred1: Word, pred2: Word) -> Word;\n }\n \n pub struct Intersect;\n impl BitwiseOperator for Intersect {\n     #[inline]\n-    fn join(&self, a: usize, b: usize) -> usize { a & b }\n+    fn join(&self, a: Word, b: Word) -> Word { a & b }\n }\n pub struct Union;\n impl BitwiseOperator for Union {\n     #[inline]\n-    fn join(&self, a: usize, b: usize) -> usize { a | b }\n+    fn join(&self, a: Word, b: Word) -> Word { a | b }\n }\n pub struct Subtract;\n impl BitwiseOperator for Subtract {\n     #[inline]\n-    fn join(&self, a: usize, b: usize) -> usize { a & !b }\n+    fn join(&self, a: Word, b: Word) -> Word { a & !b }\n }"}, {"sha": "c7513ac88163aa11bd9a2b88902552f61cb4747a", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> BitDenotation for HaveBeenBorrowedLocals<'a, 'tcx> {\n \n impl<'a, 'tcx> BitwiseOperator for HaveBeenBorrowedLocals<'a, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // \"maybe\" means we union effects of both preds\n     }\n }"}, {"sha": "5bf54286875a1f4ab1f7671d1b3ec5059621c8a9", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "patch": "@@ -20,7 +20,7 @@ use rustc::ty::TyCtxt;\n use rustc::ty::{RegionKind, RegionVid};\n use rustc::ty::RegionKind::ReScope;\n \n-use rustc_data_structures::bitslice::BitwiseOperator;\n+use rustc_data_structures::bitslice::{BitwiseOperator, Word};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_set::IdxSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -370,7 +370,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for Borrows<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // union effects of preds when computing reservations\n     }\n }"}, {"sha": "ee3bba840c67bfbfe19d79074103aee29501524e", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "patch": "@@ -14,7 +14,7 @@\n \n use rustc::ty::TyCtxt;\n use rustc::mir::{self, Mir, Location};\n-use rustc_data_structures::bitslice::{BitwiseOperator};\n+use rustc_data_structures::bitslice::{BitwiseOperator, Word};\n use rustc_data_structures::indexed_set::{IdxSet};\n use rustc_data_structures::indexed_vec::Idx;\n \n@@ -663,35 +663,35 @@ impl<'a, 'gcx, 'tcx> BitDenotation for EverInitializedPlaces<'a, 'gcx, 'tcx> {\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // \"maybe\" means we union effects of both preds\n     }\n }\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // \"maybe\" means we union effects of both preds\n     }\n }\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for DefinitelyInitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 & pred2 // \"definitely\" means we intersect effects of both preds\n     }\n }\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for MovingOutStatements<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // moves from both preds are in scope\n     }\n }\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for EverInitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // inits from both preds are in scope\n     }\n }"}, {"sha": "29548051a4d927e73b36c74af845fa84671a3a92", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> BitDenotation for MaybeStorageLive<'a, 'tcx> {\n \n impl<'a, 'tcx> BitwiseOperator for MaybeStorageLive<'a, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // \"maybe\" means we union effects of both preds\n     }\n }"}, {"sha": "f58609aa9a5163403d6d426cd66d91732a5e1809", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "patch": "@@ -12,7 +12,7 @@ use syntax::ast::{self, MetaItem};\n \n use rustc_data_structures::indexed_set::{IdxSet, IdxSetBuf};\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_data_structures::bitslice::{bitwise, BitwiseOperator};\n+use rustc_data_structures::bitslice::{bitwise, BitwiseOperator, Word};\n use rustc_data_structures::work_queue::WorkQueue;\n \n use rustc::ty::{self, TyCtxt};\n@@ -467,7 +467,7 @@ pub struct AllSets<E: Idx> {\n     bits_per_block: usize,\n \n     /// Number of words associated with each block entry\n-    /// equal to bits_per_block / usize::BITS, rounded up.\n+    /// equal to bits_per_block / (mem::size_of::<Word> * 8), rounded up.\n     words_per_block: usize,\n \n     /// For each block, bits generated by executing the statements in\n@@ -734,9 +734,11 @@ impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n                dead_unwinds: &'a IdxSet<mir::BasicBlock>,\n                denotation: D) -> Self where D: InitialFlow {\n         let bits_per_block = denotation.bits_per_block();\n-        let usize_bits = mem::size_of::<usize>() * 8;\n-        let words_per_block = (bits_per_block + usize_bits - 1) / usize_bits;\n-        let num_overall = Self::num_bits_overall(mir, bits_per_block);\n+        let bits_per_word = mem::size_of::<Word>() * 8;\n+        let words_per_block = (bits_per_block + bits_per_word - 1) / bits_per_word;\n+        let bits_per_block_rounded_up = words_per_block * bits_per_word; // a multiple of word size\n+        let num_blocks = mir.basic_blocks().len();\n+        let num_overall = num_blocks * bits_per_block_rounded_up;\n \n         let zeroes = Bits::new(IdxSetBuf::new_empty(num_overall));\n         let on_entry = Bits::new(if D::bottom_value() {\n@@ -774,18 +776,6 @@ impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n             }\n         }\n     }\n-\n-    fn num_bits_overall(mir: &Mir, bits_per_block: usize) -> usize {\n-        let usize_bits = mem::size_of::<usize>() * 8;\n-        let words_per_block = (bits_per_block + usize_bits - 1) / usize_bits;\n-\n-        // (now rounded up to multiple of word size)\n-        let bits_per_block = words_per_block * usize_bits;\n-\n-        let num_blocks = mir.basic_blocks().len();\n-        let num_overall = num_blocks * bits_per_block;\n-        num_overall\n-    }\n }\n \n impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation"}]}