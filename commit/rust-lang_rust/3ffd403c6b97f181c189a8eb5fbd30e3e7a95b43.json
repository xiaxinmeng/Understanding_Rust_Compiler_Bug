{"sha": "3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZmQ0MDNjNmI5N2YxODFjMTg5YThlYjVmYmQzMGUzZTdhOTViNDM=", "commit": {"author": {"name": "blitzerr", "email": "rusty.blitzerr@gmail.com", "date": "2020-09-22T13:22:02Z"}, "committer": {"name": "blitzerr", "email": "rusty.blitzerr@gmail.com", "date": "2020-09-22T13:22:02Z"}, "message": "removing &mut self for other methods of AllocRef", "tree": {"sha": "23200238b60848d20c1e78f486c97fdbcce997ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23200238b60848d20c1e78f486c97fdbcce997ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43", "html_url": "https://github.com/rust-lang/rust/commit/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/comments", "author": {"login": "blitzerr", "id": 28721905, "node_id": "MDQ6VXNlcjI4NzIxOTA1", "avatar_url": "https://avatars.githubusercontent.com/u/28721905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blitzerr", "html_url": "https://github.com/blitzerr", "followers_url": "https://api.github.com/users/blitzerr/followers", "following_url": "https://api.github.com/users/blitzerr/following{/other_user}", "gists_url": "https://api.github.com/users/blitzerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/blitzerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blitzerr/subscriptions", "organizations_url": "https://api.github.com/users/blitzerr/orgs", "repos_url": "https://api.github.com/users/blitzerr/repos", "events_url": "https://api.github.com/users/blitzerr/events{/privacy}", "received_events_url": "https://api.github.com/users/blitzerr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blitzerr", "id": 28721905, "node_id": "MDQ6VXNlcjI4NzIxOTA1", "avatar_url": "https://avatars.githubusercontent.com/u/28721905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blitzerr", "html_url": "https://github.com/blitzerr", "followers_url": "https://api.github.com/users/blitzerr/followers", "following_url": "https://api.github.com/users/blitzerr/following{/other_user}", "gists_url": "https://api.github.com/users/blitzerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/blitzerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blitzerr/subscriptions", "organizations_url": "https://api.github.com/users/blitzerr/orgs", "repos_url": "https://api.github.com/users/blitzerr/repos", "events_url": "https://api.github.com/users/blitzerr/events{/privacy}", "received_events_url": "https://api.github.com/users/blitzerr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "219003bd2ee6778333cf92405c6ea8591ecc8816", "url": "https://api.github.com/repos/rust-lang/rust/commits/219003bd2ee6778333cf92405c6ea8591ecc8816", "html_url": "https://github.com/rust-lang/rust/commit/219003bd2ee6778333cf92405c6ea8591ecc8816"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "462bcd15fa9415e9e20c15fa2c0bf7d188bd12ce", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43", "patch": "@@ -213,12 +213,12 @@ unsafe impl AllocRef for Global {\n     }\n \n     #[inline]\n-    fn alloc_zeroed(&mut self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n         self.alloc_impl(layout, true)\n     }\n \n     #[inline]\n-    unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {\n+    unsafe fn dealloc(&self, ptr: NonNull<u8>, layout: Layout) {\n         if layout.size() != 0 {\n             // SAFETY: `layout` is non-zero in size,\n             // other conditions must be upheld by the caller"}, {"sha": "5b4a4957f6cb1f63f8b842851864a70ee6a2ba5a", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43", "patch": "@@ -169,7 +169,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         Self::allocate_in(capacity, AllocInit::Zeroed, alloc)\n     }\n \n-    fn allocate_in(capacity: usize, init: AllocInit, mut alloc: A) -> Self {\n+    fn allocate_in(capacity: usize, init: AllocInit, alloc: A) -> Self {\n         if mem::size_of::<T>() == 0 {\n             Self::new_in(alloc)\n         } else {"}, {"sha": "e4c8b3709dfeeb9809d998747a40625579ba1038", "filename": "library/alloc/src/raw_vec/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs?ref=3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43", "patch": "@@ -34,7 +34,7 @@ fn allocator_param() {\n                 err @ Err(_) => err,\n             }\n         }\n-        unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {\n+        unsafe fn dealloc(&self, ptr: NonNull<u8>, layout: Layout) {\n             unsafe { Global.dealloc(ptr, layout) }\n         }\n     }"}, {"sha": "a7239a4b14fae82bf92be0ae533f98ccc148bd79", "filename": "library/alloc/tests/heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Falloc%2Ftests%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Falloc%2Ftests%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fheap.rs?ref=3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43", "patch": "@@ -11,7 +11,7 @@ fn std_heap_overaligned_request() {\n     check_overalign_requests(Global)\n }\n \n-fn check_overalign_requests<T: AllocRef>(mut allocator: T) {\n+fn check_overalign_requests<T: AllocRef>(allocator: T) {\n     for &align in &[4, 8, 16, 32] {\n         // less than and bigger than `MIN_ALIGN`\n         for &size in &[align / 2, align - 1] {"}, {"sha": "5f9092fe7037e45d2a2584d75b7a963001826acb", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43", "patch": "@@ -126,7 +126,7 @@ pub unsafe trait AllocRef {\n     /// call the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n     ///\n     /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html\n-    fn alloc_zeroed(&mut self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n         let ptr = self.alloc(layout)?;\n         // SAFETY: `alloc` returns a valid memory block\n         unsafe { ptr.as_non_null_ptr().as_ptr().write_bytes(0, ptr.len()) }\n@@ -142,7 +142,7 @@ pub unsafe trait AllocRef {\n     ///\n     /// [*currently allocated*]: #currently-allocated-memory\n     /// [*fit*]: #memory-fitting\n-    unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout);\n+    unsafe fn dealloc(&self, ptr: NonNull<u8>, layout: Layout);\n \n     /// Attempts to extend the memory block.\n     ///\n@@ -353,12 +353,12 @@ where\n     }\n \n     #[inline]\n-    fn alloc_zeroed(&mut self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n         (**self).alloc_zeroed(layout)\n     }\n \n     #[inline]\n-    unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {\n+    unsafe fn dealloc(&self, ptr: NonNull<u8>, layout: Layout) {\n         // SAFETY: the safety contract must be upheld by the caller\n         unsafe { (**self).dealloc(ptr, layout) }\n     }"}, {"sha": "f41aa28b5ecb546927dba5c8929beff71481994b", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=3ffd403c6b97f181c189a8eb5fbd30e3e7a95b43", "patch": "@@ -207,12 +207,12 @@ unsafe impl AllocRef for System {\n     }\n \n     #[inline]\n-    fn alloc_zeroed(&mut self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n+    fn alloc_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocErr> {\n         self.alloc_impl(layout, true)\n     }\n \n     #[inline]\n-    unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {\n+    unsafe fn dealloc(&self, ptr: NonNull<u8>, layout: Layout) {\n         if layout.size() != 0 {\n             // SAFETY: `layout` is non-zero in size,\n             // other conditions must be upheld by the caller"}]}