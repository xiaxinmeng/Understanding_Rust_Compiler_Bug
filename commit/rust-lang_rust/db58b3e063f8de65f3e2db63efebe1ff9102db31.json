{"sha": "db58b3e063f8de65f3e2db63efebe1ff9102db31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNThiM2UwNjNmOGRlNjVmM2UyZGI2M2VmZWJlMWZmOTEwMmRiMzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T06:45:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T06:49:26Z"}, "message": "matching brace works for | in lambdas", "tree": {"sha": "51d1aaf6a4824bbbdf0a9b8e0f59751c4e8ae687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51d1aaf6a4824bbbdf0a9b8e0f59751c4e8ae687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db58b3e063f8de65f3e2db63efebe1ff9102db31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db58b3e063f8de65f3e2db63efebe1ff9102db31", "html_url": "https://github.com/rust-lang/rust/commit/db58b3e063f8de65f3e2db63efebe1ff9102db31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db58b3e063f8de65f3e2db63efebe1ff9102db31/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/659b16981a19b3b47f63e6cd4b7f668775e8e9a4", "html_url": "https://github.com/rust-lang/rust/commit/659b16981a19b3b47f63e6cd4b7f668775e8e9a4"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "685ba10adbec0afdb22dc91f080d6bf1fc145f57", "filename": "crates/ra_ide/src/matching_brace.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/db58b3e063f8de65f3e2db63efebe1ff9102db31/crates%2Fra_ide%2Fsrc%2Fmatching_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db58b3e063f8de65f3e2db63efebe1ff9102db31/crates%2Fra_ide%2Fsrc%2Fmatching_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmatching_brace.rs?ref=db58b3e063f8de65f3e2db63efebe1ff9102db31", "patch": "@@ -1,8 +1,12 @@\n-use ra_syntax::{ast::AstNode, SourceFile, SyntaxKind, TextSize, T};\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    SourceFile, SyntaxKind, TextSize, T,\n+};\n+use test_utils::mark;\n \n // Feature: Matching Brace\n //\n-// If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n+// If the cursor is on any brace (`<>(){}[]||`) which is a part of a brace-pair,\n // moves cursor to the matching brace. It uses the actual parser to determine\n // braces, so it won't confuse generics with comparisons.\n //\n@@ -13,16 +17,20 @@ use ra_syntax::{ast::AstNode, SourceFile, SyntaxKind, TextSize, T};\n // |===\n pub fn matching_brace(file: &SourceFile, offset: TextSize) -> Option<TextSize> {\n     const BRACES: &[SyntaxKind] =\n-        &[T!['{'], T!['}'], T!['['], T![']'], T!['('], T![')'], T![<], T![>]];\n-    let (brace_node, brace_idx) = file\n+        &[T!['{'], T!['}'], T!['['], T![']'], T!['('], T![')'], T![<], T![>], T![|], T![|]];\n+    let (brace_token, brace_idx) = file\n         .syntax()\n         .token_at_offset(offset)\n         .filter_map(|node| {\n             let idx = BRACES.iter().position(|&brace| brace == node.kind())?;\n             Some((node, idx))\n         })\n         .next()?;\n-    let parent = brace_node.parent();\n+    let parent = brace_token.parent();\n+    if brace_token.kind() == T![|] && !ast::ParamList::can_cast(parent.kind()) {\n+        mark::hit!(pipes_not_braces);\n+        return None;\n+    }\n     let matching_kind = BRACES[brace_idx ^ 1];\n     let matching_node = parent.children_with_tokens().find(|node| node.kind() == matching_kind)?;\n     Some(matching_node.text_range().start())\n@@ -48,5 +56,14 @@ mod tests {\n         }\n \n         do_check(\"struct Foo { a: i32, }<|>\", \"struct Foo <|>{ a: i32, }\");\n+        do_check(\"fn main() { |x: i32|<|> x * 2;}\", \"fn main() { <|>|x: i32| x * 2;}\");\n+\n+        {\n+            mark::check!(pipes_not_braces);\n+            do_check(\n+                \"fn main() { match 92 { 1 | 2 |<|> 3 => 92 } }\",\n+                \"fn main() { match 92 { 1 | 2 |<|> 3 => 92 } }\",\n+            );\n+        }\n     }\n }"}]}