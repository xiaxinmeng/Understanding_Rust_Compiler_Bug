{"sha": "18aac1df45ca39d01d80a56e3afab7299de160f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YWFjMWRmNDVjYTM5ZDAxZDgwYTU2ZTNhZmFiNzI5OWRlMTYwZjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-19T09:26:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T09:15:38Z"}, "message": "kill file resolver", "tree": {"sha": "7920ec1d929a27589187b185b5ea2ec28014703c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7920ec1d929a27589187b185b5ea2ec28014703c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18aac1df45ca39d01d80a56e3afab7299de160f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18aac1df45ca39d01d80a56e3afab7299de160f8", "html_url": "https://github.com/rust-lang/rust/commit/18aac1df45ca39d01d80a56e3afab7299de160f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18aac1df45ca39d01d80a56e3afab7299de160f8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85290bc1342560d5560f0b2151cff1c0c6dac155", "url": "https://api.github.com/repos/rust-lang/rust/commits/85290bc1342560d5560f0b2151cff1c0c6dac155", "html_url": "https://github.com/rust-lang/rust/commit/85290bc1342560d5560f0b2151cff1c0c6dac155"}], "stats": {"total": 95, "additions": 1, "deletions": 94}, "files": [{"sha": "f849ac75214c81d23eff6dd0bfc748358bdaabd1", "filename": "crates/ra_db/src/file_resolver.rs", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/85290bc1342560d5560f0b2151cff1c0c6dac155/crates%2Fra_db%2Fsrc%2Ffile_resolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85290bc1342560d5560f0b2151cff1c0c6dac155/crates%2Fra_db%2Fsrc%2Ffile_resolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffile_resolver.rs?ref=85290bc1342560d5560f0b2151cff1c0c6dac155", "patch": "@@ -1,76 +0,0 @@\n-use std::{\n-    sync::Arc,\n-    hash::{Hash, Hasher},\n-    fmt,\n-};\n-\n-use relative_path::RelativePath;\n-\n-use crate::input::FileId;\n-\n-pub trait FileResolver: fmt::Debug + Send + Sync + 'static {\n-    fn file_stem(&self, file_id: FileId) -> String;\n-    fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId>;\n-    fn debug_path(&self, _1file_id: FileId) -> Option<std::path::PathBuf> {\n-        None\n-    }\n-}\n-\n-#[derive(Clone, Debug)]\n-pub struct FileResolverImp {\n-    inner: Arc<FileResolver>,\n-}\n-\n-impl PartialEq for FileResolverImp {\n-    fn eq(&self, other: &FileResolverImp) -> bool {\n-        self.inner() == other.inner()\n-    }\n-}\n-\n-impl Eq for FileResolverImp {}\n-\n-impl Hash for FileResolverImp {\n-    fn hash<H: Hasher>(&self, hasher: &mut H) {\n-        self.inner().hash(hasher);\n-    }\n-}\n-\n-impl FileResolverImp {\n-    pub fn new(inner: Arc<FileResolver>) -> FileResolverImp {\n-        FileResolverImp { inner }\n-    }\n-    pub fn file_stem(&self, file_id: FileId) -> String {\n-        self.inner.file_stem(file_id)\n-    }\n-    pub fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId> {\n-        self.inner.resolve(file_id, path)\n-    }\n-    pub fn debug_path(&self, file_id: FileId) -> Option<std::path::PathBuf> {\n-        self.inner.debug_path(file_id)\n-    }\n-    fn inner(&self) -> *const FileResolver {\n-        &*self.inner\n-    }\n-}\n-\n-impl Default for FileResolverImp {\n-    fn default() -> FileResolverImp {\n-        #[derive(Debug)]\n-        struct DummyResolver;\n-        impl FileResolver for DummyResolver {\n-            fn file_stem(&self, _file_: FileId) -> String {\n-                panic!(\"file resolver not set\")\n-            }\n-            fn resolve(\n-                &self,\n-                _file_id: FileId,\n-                _path: &::relative_path::RelativePath,\n-            ) -> Option<FileId> {\n-                panic!(\"file resolver not set\")\n-            }\n-        }\n-        FileResolverImp {\n-            inner: Arc::new(DummyResolver),\n-        }\n-    }\n-}"}, {"sha": "eeb305b1b3d24475bbc6e7b15b3d22c13b64c6f0", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18aac1df45ca39d01d80a56e3afab7299de160f8/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18aac1df45ca39d01d80a56e3afab7299de160f8/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=18aac1df45ca39d01d80a56e3afab7299de160f8", "patch": "@@ -1,6 +1,5 @@\n //! ra_db defines basic database traits. Concrete DB is defined by ra_analysis.\n mod syntax_ptr;\n-mod file_resolver;\n mod input;\n mod loc2id;\n pub mod mock;\n@@ -24,7 +23,6 @@ impl std::error::Error for Canceled {}\n \n pub use crate::{\n     syntax_ptr::LocalSyntaxPtr,\n-    file_resolver::{FileResolver, FileResolverImp},\n     input::{\n         FilesDatabase, FileId, CrateId, SourceRoot, SourceRootId, CrateGraph, WORKSPACE,\n         FileTextQuery, FileSourceRootQuery, SourceRootQuery, LibrariesQuery, CrateGraphQuery,"}, {"sha": "5e185062b450e53d03c9969bb374958cd97ed7ac", "filename": "crates/ra_db/src/mock.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/18aac1df45ca39d01d80a56e3afab7299de160f8/crates%2Fra_db%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18aac1df45ca39d01d80a56e3afab7299de160f8/crates%2Fra_db%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Fmock.rs?ref=18aac1df45ca39d01d80a56e3afab7299de160f8", "patch": "@@ -1,7 +1,7 @@\n use rustc_hash::FxHashSet;\n use relative_path::{RelativePath, RelativePathBuf};\n \n-use crate::{FileId, FileResolver};\n+use crate::{FileId};\n \n #[derive(Default, Debug, Clone)]\n pub struct FileMap(Vec<(FileId, RelativePathBuf)>);\n@@ -27,19 +27,4 @@ impl FileMap {\n             .iter()\n             .map(|(id, path)| (*id, path.as_relative_path()))\n     }\n-\n-    fn path(&self, id: FileId) -> &RelativePath {\n-        self.iter().find(|&(it, _)| it == id).unwrap().1\n-    }\n-}\n-\n-impl FileResolver for FileMap {\n-    fn file_stem(&self, id: FileId) -> String {\n-        self.path(id).file_stem().unwrap().to_string()\n-    }\n-    fn resolve(&self, id: FileId, rel: &RelativePath) -> Option<FileId> {\n-        let path = self.path(id).join(rel).normalize();\n-        let id = self.iter().find(|&(_, p)| path == p)?.0;\n-        Some(id)\n-    }\n }"}]}