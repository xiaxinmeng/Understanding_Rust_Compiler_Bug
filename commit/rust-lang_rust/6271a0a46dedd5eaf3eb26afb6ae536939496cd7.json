{"sha": "6271a0a46dedd5eaf3eb26afb6ae536939496cd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNzFhMGE0NmRlZGQ1ZWFmM2ViMjZhZmI2YWU1MzY5Mzk0OTZjZDc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-24T20:16:51Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-03T12:16:24Z"}, "message": "Improve invalid_html_tags lint span", "tree": {"sha": "71cceea837c95eb57efbff24a01edd89c421d7fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71cceea837c95eb57efbff24a01edd89c421d7fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6271a0a46dedd5eaf3eb26afb6ae536939496cd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6271a0a46dedd5eaf3eb26afb6ae536939496cd7", "html_url": "https://github.com/rust-lang/rust/commit/6271a0a46dedd5eaf3eb26afb6ae536939496cd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6271a0a46dedd5eaf3eb26afb6ae536939496cd7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc6ec6fe36c5c902da900fea67cba30fad4b0b6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6ec6fe36c5c902da900fea67cba30fad4b0b6b", "html_url": "https://github.com/rust-lang/rust/commit/bc6ec6fe36c5c902da900fea67cba30fad4b0b6b"}], "stats": {"total": 157, "additions": 75, "deletions": 82}, "files": [{"sha": "0cffaee1c4e99f8de64f5041d8b24902a3c8a4c7", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 47, "deletions": 41, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/6271a0a46dedd5eaf3eb26afb6ae536939496cd7/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6271a0a46dedd5eaf3eb26afb6ae536939496cd7/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=6271a0a46dedd5eaf3eb26afb6ae536939496cd7", "patch": "@@ -3,10 +3,11 @@ use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::opts;\n+use core::ops::Range;\n use pulldown_cmark::{Event, Parser};\n-use rustc_hir::hir_id::HirId;\n+// use rustc_hir::hir_id::HirId;\n use rustc_session::lint;\n-use rustc_span::Span;\n+// use rustc_span::Span;\n \n pub const CHECK_INVALID_HTML_TAGS: Pass = Pass {\n     name: \"check-invalid-html-tags\",\n@@ -36,62 +37,61 @@ const ALLOWED_UNCLOSED: &[&str] = &[\n ];\n \n fn drop_tag(\n-    cx: &DocContext<'_>,\n-    tags: &mut Vec<String>,\n+    tags: &mut Vec<(String, Range<usize>)>,\n     tag_name: String,\n-    hir_id: HirId,\n-    sp: Span,\n+    range: Range<usize>,\n+    f: &impl Fn(&str, &Range<usize>),\n ) {\n-    if let Some(pos) = tags.iter().position(|t| *t == tag_name) {\n+    if let Some(pos) = tags.iter().position(|(t, _)| *t == tag_name) {\n         for _ in pos + 1..tags.len() {\n-            if ALLOWED_UNCLOSED.iter().find(|&at| at == &tags[pos + 1]).is_some() {\n+            if ALLOWED_UNCLOSED.iter().find(|&at| at == &tags[pos + 1].0).is_some() {\n                 continue;\n             }\n             // `tags` is used as a queue, meaning that everything after `pos` is included inside it.\n             // So `<h2><h3></h2>` will look like `[\"h2\", \"h3\"]`. So when closing `h2`, we will still\n             // have `h3`, meaning the tag wasn't closed as it should have.\n-            cx.tcx.struct_span_lint_hir(lint::builtin::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n-                lint.build(&format!(\"unclosed HTML tag `{}`\", tags[pos + 1])).emit()\n-            });\n+            f(&format!(\"unclosed HTML tag `{}`\", tags[pos + 1].0), &tags[pos + 1].1);\n             tags.remove(pos + 1);\n         }\n         tags.remove(pos);\n     } else {\n         // It can happen for example in this case: `<h2></script></h2>` (the `h2` tag isn't required\n         // but it helps for the visualization).\n-        cx.tcx.struct_span_lint_hir(lint::builtin::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n-            lint.build(&format!(\"unopened HTML tag `{}`\", tag_name)).emit()\n-        });\n+        f(&format!(\"unopened HTML tag `{}`\", tag_name), &range);\n     }\n }\n \n-fn extract_tag(cx: &DocContext<'_>, tags: &mut Vec<String>, text: &str, hir_id: HirId, sp: Span) {\n-    let mut iter = text.chars().peekable();\n+fn extract_tag(\n+    tags: &mut Vec<(String, Range<usize>)>,\n+    text: &str,\n+    range: Range<usize>,\n+    f: &impl Fn(&str, &Range<usize>),\n+) {\n+    let mut iter = text.chars().enumerate().peekable();\n \n-    while let Some(c) = iter.next() {\n+    while let Some((start_pos, c)) = iter.next() {\n         if c == '<' {\n             let mut tag_name = String::new();\n             let mut is_closing = false;\n-            while let Some(&c) = iter.peek() {\n-                // </tag>\n-                if c == '/' && tag_name.is_empty() {\n+            while let Some((pos, c)) = iter.peek() {\n+                // Checking if this is a closing tag (like `</a>` for `<a>`).\n+                if *c == '/' && tag_name.is_empty() {\n                     is_closing = true;\n                 } else if c.is_ascii_alphanumeric() && !c.is_ascii_uppercase() {\n-                    tag_name.push(c);\n+                    tag_name.push(*c);\n                 } else {\n+                    if !tag_name.is_empty() {\n+                        let r = Range { start: range.start + start_pos, end: range.start + pos };\n+                        if is_closing {\n+                            drop_tag(tags, tag_name, r, f);\n+                        } else {\n+                            tags.push((tag_name, r));\n+                        }\n+                    }\n                     break;\n                 }\n                 iter.next();\n             }\n-            if tag_name.is_empty() {\n-                // Not an HTML tag presumably...\n-                continue;\n-            }\n-            if is_closing {\n-                drop_tag(cx, tags, tag_name, hir_id, sp);\n-            } else {\n-                tags.push(tag_name);\n-            }\n         }\n     }\n }\n@@ -107,26 +107,32 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n         };\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n         if !dox.is_empty() {\n-            let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n+            let cx = &self.cx;\n+            let report_diag = |msg: &str, range: &Range<usize>| {\n+                let sp = match super::source_span_for_markdown_range(cx, &dox, range, &item.attrs) {\n+                    Some(sp) => sp,\n+                    None => span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n+                };\n+                cx.tcx.struct_span_lint_hir(lint::builtin::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n+                    lint.build(msg).emit()\n+                });\n+            };\n+\n             let mut tags = Vec::new();\n \n-            let p = Parser::new_ext(&dox, opts());\n+            let p = Parser::new_ext(&dox, opts()).into_offset_iter();\n \n-            for event in p {\n+            for (event, range) in p {\n                 match event {\n-                    Event::Html(text) => extract_tag(self.cx, &mut tags, &text, hir_id, sp),\n+                    Event::Html(text) => extract_tag(&mut tags, &text, range, &report_diag),\n                     _ => {}\n                 }\n             }\n \n-            for tag in tags.iter().filter(|t| ALLOWED_UNCLOSED.iter().find(|at| at == t).is_none())\n+            for (tag, range) in\n+                tags.iter().filter(|(t, _)| ALLOWED_UNCLOSED.iter().find(|&at| at == t).is_none())\n             {\n-                self.cx.tcx.struct_span_lint_hir(\n-                    lint::builtin::INVALID_HTML_TAGS,\n-                    hir_id,\n-                    sp,\n-                    |lint| lint.build(&format!(\"unclosed HTML tag `{}`\", tag)).emit(),\n-                );\n+                report_diag(&format!(\"unclosed HTML tag `{}`\", tag), range);\n             }\n         }\n "}, {"sha": "b188e16f60513ef6cc7dfd3466adb6b0deca8cc5", "filename": "src/test/rustdoc-ui/invalid-html-tags.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6271a0a46dedd5eaf3eb26afb6ae536939496cd7/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6271a0a46dedd5eaf3eb26afb6ae536939496cd7/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs?ref=6271a0a46dedd5eaf3eb26afb6ae536939496cd7", "patch": "@@ -1,19 +1,22 @@\n #![deny(invalid_html_tags)]\n \n+/// <img><input>\n /// <script>\n-//~^ ERROR unclosed HTML tag `unknown`\n-//~^^ ERROR unclosed HTML tag `script`\n /// <img><input>\n /// </script>\n /// <unknown>\n+//~^ ERROR unclosed HTML tag `unknown`\n /// < ok\n /// <script>\n+//~^ ERROR unclosed HTML tag `script`\n pub fn foo() {}\n \n /// <h1>\n-//~^ ERROR unopened HTML tag `h2`\n-//~^^ ERROR unopened HTML tag `h3`\n ///   <h2>\n+//~^ ERROR unclosed HTML tag `h2`\n ///     <h3>\n+//~^ ERROR unclosed HTML tag `h3`\n /// </h1>\n+/// </hello>\n+//~^ ERROR unopened HTML tag `hello`\n pub fn f() {}"}, {"sha": "f8e67732f63a096ce188cf296a0619b11c19b6bd", "filename": "src/test/rustdoc-ui/invalid-html-tags.stderr", "status": "modified", "additions": 21, "deletions": 37, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6271a0a46dedd5eaf3eb26afb6ae536939496cd7/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6271a0a46dedd5eaf3eb26afb6ae536939496cd7/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr?ref=6271a0a46dedd5eaf3eb26afb6ae536939496cd7", "patch": "@@ -1,14 +1,8 @@\n error: unclosed HTML tag `unknown`\n-  --> $DIR/invalid-html-tags.rs:3:1\n+  --> $DIR/invalid-html-tags.rs:7:5\n    |\n-LL | / /// <script>\n-LL | |\n-LL | |\n-LL | | /// <img><input>\n-...  |\n-LL | | /// < ok\n-LL | | /// <script>\n-   | |____________^\n+LL | /// <unknown>\n+   |     ^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/invalid-html-tags.rs:1:9\n@@ -17,38 +11,28 @@ LL | #![deny(invalid_html_tags)]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: unclosed HTML tag `script`\n-  --> $DIR/invalid-html-tags.rs:3:1\n+  --> $DIR/invalid-html-tags.rs:10:5\n    |\n-LL | / /// <script>\n-LL | |\n-LL | |\n-LL | | /// <img><input>\n-...  |\n-LL | | /// < ok\n-LL | | /// <script>\n-   | |____________^\n+LL | /// <script>\n+   |     ^^^^^^^\n \n-error: unopened HTML tag `h2`\n-  --> $DIR/invalid-html-tags.rs:13:1\n+error: unclosed HTML tag `h2`\n+  --> $DIR/invalid-html-tags.rs:15:7\n    |\n-LL | / /// <h1>\n-LL | |\n-LL | |\n-LL | | ///   <h2>\n-LL | | ///     <h3>\n-LL | | /// </h1>\n-   | |_________^\n+LL | ///   <h2>\n+   |       ^^^\n \n-error: unopened HTML tag `h3`\n-  --> $DIR/invalid-html-tags.rs:13:1\n+error: unclosed HTML tag `h3`\n+  --> $DIR/invalid-html-tags.rs:17:9\n    |\n-LL | / /// <h1>\n-LL | |\n-LL | |\n-LL | | ///   <h2>\n-LL | | ///     <h3>\n-LL | | /// </h1>\n-   | |_________^\n+LL | ///     <h3>\n+   |         ^^^\n \n-error: aborting due to 4 previous errors\n+error: unopened HTML tag `hello`\n+  --> $DIR/invalid-html-tags.rs:20:5\n+   |\n+LL | /// </hello>\n+   |     ^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}]}