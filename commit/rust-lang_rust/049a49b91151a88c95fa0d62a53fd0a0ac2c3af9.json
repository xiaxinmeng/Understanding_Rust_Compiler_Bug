{"sha": "049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OWE0OWI5MTE1MWE4OGM5NWZhMGQ2MmE1M2ZkMGEwYWMyYzNhZjk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-27T23:21:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-27T23:28:48Z"}, "message": "rustc_target: Avoid unwraps when adding linker flags", "tree": {"sha": "6c34069bbfa9ef7e7c8c030a3de17386c133287e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c34069bbfa9ef7e7c8c030a3de17386c133287e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "html_url": "https://github.com/rust-lang/rust/commit/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b0edb7fddacd6a60a380c1ce59159de597ab270", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0edb7fddacd6a60a380c1ce59159de597ab270", "html_url": "https://github.com/rust-lang/rust/commit/9b0edb7fddacd6a60a380c1ce59159de597ab270"}], "stats": {"total": 122, "additions": 61, "deletions": 61}, "files": [{"sha": "aaf81648c51b39f37971f9d90123e4218a73493d", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -6,8 +6,8 @@ pub fn opts() -> TargetOptions {\n     // Many of the symbols defined in compiler-rt are also defined in libgcc.\n     // Android's linker doesn't like that by default.\n     base.pre_link_args\n-        .get_mut(&LinkerFlavor::Gcc)\n-        .unwrap()\n+        .entry(LinkerFlavor::Gcc)\n+        .or_default()\n         .push(\"-Wl,--allow-multiple-definition\".to_string());\n     base.dwarf_version = Some(2);\n     base.position_independent_executables = true;"}, {"sha": "02a1191463e3c0f16806d14ea5fd6f577827641a", "filename": "compiler/rustc_target/src/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n     base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,-d32,-neon\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-march=armv7-a\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-march=armv7-a\".to_string());\n \n     Target {\n         llvm_target: \"armv7-none-linux-android\".to_string(),"}, {"sha": "7002d88c512d77e104e125069406c28ee88205b1", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -12,8 +12,8 @@ pub fn target() -> Target {\n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n     base.pre_link_args\n-        .get_mut(&LinkerFlavor::Gcc)\n-        .unwrap()\n+        .entry(LinkerFlavor::Gcc)\n+        .or_default()\n         .push(\"-Wl,--large-address-aware\".to_string());\n \n     Target {"}, {"sha": "74074cfb5dda16d0dd10d0ad7a19722641e05cb7", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_msvc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -14,10 +14,10 @@ pub fn target() -> Target {\n         // https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers\n         \"/SAFESEH\".to_string(),\n     ];\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    base.pre_link_args.entry(LinkerFlavor::Msvc).or_default().extend(pre_link_args_msvc.clone());\n     base.pre_link_args\n-        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n-        .unwrap()\n+        .entry(LinkerFlavor::Lld(LldFlavor::Link))\n+        .or_default()\n         .extend(pre_link_args_msvc);\n \n     Target {"}, {"sha": "a26cabdc90adcb28e7c4c5d171d389c3ad0bd137", "filename": "compiler/rustc_target/src/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    let pre_link_args = base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n+    let pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n     pre_link_args.push(\"-m32\".to_string());\n     pre_link_args.push(\"-Wl,-znotext\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };"}, {"sha": "633e8da0ccbc4adcab12bf85e81200e265816aa9", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "8bcd261e4dfada35755a4442db2e169bbc66170c", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,8 +4,8 @@ pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,-melf_i386\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-Wl,-melf_i386\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     // The unwinder used by i686-unknown-linux-musl, the LLVM libunwind"}, {"sha": "e020264ad7af25f6b7f830f376465cffceaf1ebc", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "86448cb9115479987dcac4499d7bf91262ea6487", "filename": "compiler/rustc_target/src/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,8 +4,8 @@ pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-fuse-ld=lld\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-fuse-ld=lld\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "426df59882d5810d9fab2a5186c9ea8212fd1565", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -11,8 +11,8 @@ pub fn target() -> Target {\n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n     base.pre_link_args\n-        .get_mut(&LinkerFlavor::Gcc)\n-        .unwrap()\n+        .entry(LinkerFlavor::Gcc)\n+        .or_default()\n         .push(\"-Wl,--large-address-aware\".to_string());\n \n     Target {"}, {"sha": "e596eca86b0d757e289feac1747296876100ca0e", "filename": "compiler/rustc_target/src/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "b3d6b7c610704afa98f6cade673a6be065d01b31", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "559a1a40868ff9c1bc1623bec1fb1f8d2c54720f", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, RelroLevel, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     // ld.so in at least RHEL6 on ppc64 has a bug related to BIND_NOW, so only enable partial RELRO"}, {"sha": "f1190b159aba457305c5905dd28d4b2a44f5ef2d", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "3ebc5469e0a8b3d897e800f280066ad58659d300", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "76f70e474f0738669a349d3fd610e0b5c0bea6ad", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"ppc64le\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "42c49103b3b4eefbd0c6bccdf91a616acf1e5ebe", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"ppc64le\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "21ffdd2d160f3709052f54e22e42bb1466e67c3e", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "8d8f746f97f121d2f9838815ad214a385fad9606", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mspe\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mspe\".to_string());\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "9633705db6d1f66b174b15a78d2d9e72d9bf5a83", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "4cc5224fae30d1328cbfa6ce8f2bcc488582cc15", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "2f0a6ca44a008ae8752de8e8a66a8558b6a57c66", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -3,8 +3,8 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"--secure-plt\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"--secure-plt\".to_string());\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "215f1a36227d79571181aa2739c3ef987d0f03f6", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -3,8 +3,8 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mspe\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"--secure-plt\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mspe\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"--secure-plt\".to_string());\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "b4286dfd88f1105abd6f62b07282284604d3385f", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"v9\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "9732983161f29fd1343350b252fb1a367c1753a5", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -5,7 +5,7 @@ pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.endian = Endian::Big;\n     base.cpu = \"v9\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "1fd4cadfffc79a566159d90a739e01b144724f38", "filename": "compiler/rustc_target/src/spec/sparc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -6,7 +6,7 @@ pub fn target() -> Target {\n     base.endian = Endian::Big;\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mv8plus\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mv8plus\".to_string());\n \n     Target {\n         llvm_target: \"sparc-unknown-linux-gnu\".to_string(),"}, {"sha": "975fd81d9c3d815d6535e5c1e04a76da5a01b389", "filename": "compiler/rustc_target/src/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -11,10 +11,10 @@ pub fn target() -> Target {\n     // where necessary, but this is not the observed behavior.\n     // Disabling the LBR optimization works around the issue.\n     let pre_link_args_msvc = \"/OPT:NOLBR\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(pre_link_args_msvc.clone());\n+    base.pre_link_args.entry(LinkerFlavor::Msvc).or_default().push(pre_link_args_msvc.clone());\n     base.pre_link_args\n-        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n-        .unwrap()\n+        .entry(LinkerFlavor::Lld(LldFlavor::Link))\n+        .or_default()\n         .push(pre_link_args_msvc);\n \n     // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is"}, {"sha": "58b0a9d22027999b5ebaab29ef48df5b164ac15e", "filename": "compiler/rustc_target/src/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n     base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-march=armv7-a\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-march=armv7-a\".to_string());\n \n     Target {\n         llvm_target: \"armv7-none-linux-android\".to_string(),"}, {"sha": "6b6b60186010de85cd5cabb8ff135a2b4edc6519", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -30,10 +30,10 @@ pub fn opts() -> TargetOptions {\n         // exit (default for applications).\n         \"/subsystem:efi_application\".to_string(),\n     ];\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    base.pre_link_args.entry(LinkerFlavor::Msvc).or_default().extend(pre_link_args_msvc.clone());\n     base.pre_link_args\n-        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n-        .unwrap()\n+        .entry(LinkerFlavor::Lld(LldFlavor::Link))\n+        .or_default()\n         .extend(pre_link_args_msvc);\n \n     TargetOptions {"}, {"sha": "58d7633fa62a31384e7cd5de457564aad5df9675", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ use super::{LinkArgs, LinkerFlavor, PanicStrategy, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut options = wasm32_base::options();\n \n-    let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n+    let clang_args = options.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n \n     // Rust really needs a way for users to specify exports and imports in\n     // the source code. --export-dynamic isn't the right tool for this job,"}, {"sha": "73a5e16c82b75c10e5288d26ea804692243518e2", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> Target {\n     let mut options = wasm32_base::options();\n     options.os = \"unknown\".to_string();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n-    let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n+    let clang_args = options.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n \n     // Make sure clang uses LLD as its linker and is configured appropriately\n     // otherwise\n@@ -35,7 +35,7 @@ pub fn target() -> Target {\n     clang_args.push(\"-Wl,--export-dynamic\".to_string());\n \n     // Add the flags to wasm-ld's args too.\n-    let lld_args = options.pre_link_args.get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm)).unwrap();\n+    let lld_args = options.pre_link_args.entry(LinkerFlavor::Lld(LldFlavor::Wasm)).or_default();\n     lld_args.push(\"--no-entry\".to_string());\n     lld_args.push(\"--export-dynamic\".to_string());\n "}, {"sha": "b3fa5c22f98221127cf8b380e623d4eda5ce5241", "filename": "compiler/rustc_target/src/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -5,10 +5,10 @@ pub fn opts() -> TargetOptions {\n \n     opts.vendor = \"uwp\".to_string();\n     let pre_link_args_msvc = vec![\"/APPCONTAINER\".to_string(), \"mincore.lib\".to_string()];\n-    opts.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    opts.pre_link_args.entry(LinkerFlavor::Msvc).or_default().extend(pre_link_args_msvc.clone());\n     opts.pre_link_args\n-        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n-        .unwrap()\n+        .entry(LinkerFlavor::Lld(LldFlavor::Link))\n+        .or_default()\n         .extend(pre_link_args_msvc);\n \n     opts"}, {"sha": "0945a9f5c59a336e1e3de067f64c941cda8d297d", "filename": "compiler/rustc_target/src/spec/x86_64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -6,7 +6,7 @@ pub fn target() -> Target {\n     // https://developer.android.com/ndk/guides/abis.html#86-64\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "26a81a484b9006f2c58d7a2eed2960d8a03db9c0", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, LldFlavor, Target};\n pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    let gcc_pre_link_args = base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n+    let gcc_pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n     gcc_pre_link_args.push(\"-m64\".to_string());\n     // Use high-entropy 64 bit address space for ASLR\n     gcc_pre_link_args.push(\"-Wl,--high-entropy-va\".to_string());"}, {"sha": "295f9c837c3256b26a7162dc821473afdf616b93", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::dragonfly_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "aac01445917b2ea62b4a7f5fd633a51bb2f713c7", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "dfda49b9c336fd45b0ac90dd964ae003bcfa7154", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "5f87534fe957e8578634296c0c5e126120a3d7e1", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mx32\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mx32\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n     base.has_elf_tls = false;\n     // BUG(GabrielMajeri): disabling the PLT on x86_64 Linux with x32 ABI"}, {"sha": "da79bc2f338031237f6a29f2407035820e2493eb", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n     base.static_position_independent_executables = true;\n "}, {"sha": "54e7ceee82e8aa02edc1f41e59f41c5ef808d557", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "fa6f255d4d9e572f207bb057e546325475a70ca3", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none_linuxkernel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n         \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n             .to_string();\n     base.code_model = Some(CodeModel::Kernel);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n \n     Target {\n         // FIXME: Some dispute, the linux-on-clang folks think this should use"}, {"sha": "530e63966aa1d9c67eb372380fd61ad24f4a6a53", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "934f8de8ecc6ba320888cd94be2d3598d0a9b328", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::redox_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n \n     Target {"}, {"sha": "a5425e1c129f0dc7b72440544d87f82f3dd835a2", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, LldFlavor, Target};\n pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    let gcc_pre_link_args = base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n+    let gcc_pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n     gcc_pre_link_args.push(\"-m64\".to_string());\n     // Use high-entropy 64 bit address space for ASLR\n     gcc_pre_link_args.push(\"-Wl,--high-entropy-va\".to_string());"}, {"sha": "f9fa9d9384304580c29abd3984c5d1ce44707a1d", "filename": "compiler/rustc_target/src/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=049a49b91151a88c95fa0d62a53fd0a0ac2c3af9", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n     base.disable_redzone = true;\n "}]}