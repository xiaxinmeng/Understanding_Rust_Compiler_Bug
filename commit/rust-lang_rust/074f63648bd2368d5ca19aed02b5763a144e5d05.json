{"sha": "074f63648bd2368d5ca19aed02b5763a144e5d05", "node_id": "C_kwDOAAsO6NoAKDA3NGY2MzY0OGJkMjM2OGQ1Y2ExOWFlZDAyYjU3NjNhMTQ0ZTVkMDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-05T06:56:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-05T06:56:57Z"}, "message": "Auto merge of #89549 - Manishearth:rollup-mhkyc16, r=Manishearth\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #87631 (os current_exe using same approach as linux to get always the full ab\u2026)\n - #88234 (rustdoc-json: Don't ignore impls for primitive types)\n - #88651 (Use the 64b inner:monotonize() implementation not the 128b one for aarch64)\n - #88816 (Rustdoc migrate to table so the gui can handle >2k constants)\n - #89244 (refactor: VecDeques PairSlices fields to private)\n - #89364 (rustdoc-json: Encode json files with UTF-8)\n - #89423 (Fix ICE caused by non_exaustive_omitted_patterns struct lint)\n - #89426 (bootstrap: add config option for nix patching)\n - #89462 (haiku thread affinity build fix)\n - #89482 (Follow the diagnostic output style guide)\n - #89504 (Don't suggest replacing region with 'static in NLL)\n - #89535 (fix busted JavaScript in error index generator)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a39ab48aab1c9740253a22c9ac29b32953e97a45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a39ab48aab1c9740253a22c9ac29b32953e97a45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/074f63648bd2368d5ca19aed02b5763a144e5d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/074f63648bd2368d5ca19aed02b5763a144e5d05", "html_url": "https://github.com/rust-lang/rust/commit/074f63648bd2368d5ca19aed02b5763a144e5d05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/074f63648bd2368d5ca19aed02b5763a144e5d05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a804c4b1123ae665a8d4f726524109c49efac5b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a804c4b1123ae665a8d4f726524109c49efac5b6", "html_url": "https://github.com/rust-lang/rust/commit/a804c4b1123ae665a8d4f726524109c49efac5b6"}, {"sha": "068683baf12f61d5ffbf8a7e4858c4e0c3320f3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/068683baf12f61d5ffbf8a7e4858c4e0c3320f3b", "html_url": "https://github.com/rust-lang/rust/commit/068683baf12f61d5ffbf8a7e4858c4e0c3320f3b"}], "stats": {"total": 568, "additions": 229, "deletions": 339}, "files": [{"sha": "b15e55cd6675e786be24d4fabb6a5362717f6c49", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -171,9 +171,7 @@ impl OutlivesSuggestionBuilder {\n         let outlived_fr_name = self.region_vid_to_name(mbcx, errci.outlived_fr);\n \n         if let (Some(fr_name), Some(outlived_fr_name)) = (fr_name, outlived_fr_name) {\n-            if let RegionNameSource::Static = outlived_fr_name.source {\n-                diag.help(&format!(\"consider replacing `{}` with `'static`\", fr_name));\n-            } else {\n+            if !matches!(outlived_fr_name.source, RegionNameSource::Static) {\n                 diag.help(&format!(\n                     \"consider adding the following bound: `{}: {}`\",\n                     fr_name, outlived_fr_name"}, {"sha": "230d023efb9fbfbd41f86a8c302f35eb0b1db25c", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -102,7 +102,7 @@ impl NonConstOp for FnCallUnstable {\n         );\n \n         if ccx.is_const_stable_const_fn() {\n-            err.help(\"Const-stable functions can only call other const-stable functions\");\n+            err.help(\"const-stable functions can only call other const-stable functions\");\n         } else if ccx.tcx.sess.is_nightly_build() {\n             if let Some(feature) = feature {\n                 err.help(&format!("}, {"sha": "db50c5d891e1360c8f6dfebf347ab83dd3d20a25", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -58,7 +58,7 @@ pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Ab\n             tcx.sess,\n             span,\n             E0781,\n-            \"the `\\\"C-cmse-nonsecure-call\\\"` ABI is only allowed on function pointers.\"\n+            \"the `\\\"C-cmse-nonsecure-call\\\"` ABI is only allowed on function pointers\"\n         )\n         .emit()\n     }"}, {"sha": "635219146d0f5ee344670b467e1f76a97ecc7f79", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -181,8 +181,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_pat_tuple_struct(pat, qpath, subpats, ddpos, expected, def_bm, ti)\n             }\n             PatKind::Path(_) => self.check_pat_path(pat, path_res.unwrap(), expected, ti),\n-            PatKind::Struct(ref qpath, fields, etc) => {\n-                self.check_pat_struct(pat, qpath, fields, etc, expected, def_bm, ti)\n+            PatKind::Struct(ref qpath, fields, has_rest_pat) => {\n+                self.check_pat_struct(pat, qpath, fields, has_rest_pat, expected, def_bm, ti)\n             }\n             PatKind::Or(pats) => {\n                 let parent_pat = Some(pat);\n@@ -712,7 +712,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat: &'tcx Pat<'tcx>,\n         qpath: &hir::QPath<'_>,\n         fields: &'tcx [hir::PatField<'tcx>],\n-        etc: bool,\n+        has_rest_pat: bool,\n         expected: Ty<'tcx>,\n         def_bm: BindingMode,\n         ti: TopInfo<'tcx>,\n@@ -734,7 +734,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.demand_eqtype_pat(pat.span, expected, pat_ty, ti);\n \n         // Type-check subpatterns.\n-        if self.check_struct_pat_fields(pat_ty, pat, variant, fields, etc, def_bm, ti) {\n+        if self.check_struct_pat_fields(pat_ty, &pat, variant, fields, has_rest_pat, def_bm, ti) {\n             pat_ty\n         } else {\n             self.tcx.ty_error()\n@@ -1216,7 +1216,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat: &'tcx Pat<'tcx>,\n         variant: &'tcx ty::VariantDef,\n         fields: &'tcx [hir::PatField<'tcx>],\n-        etc: bool,\n+        has_rest_pat: bool,\n         def_bm: BindingMode,\n         ti: TopInfo<'tcx>,\n     ) -> bool {\n@@ -1290,7 +1290,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Require `..` if struct has non_exhaustive attribute.\n         let non_exhaustive = variant.is_field_list_non_exhaustive() && !adt.did.is_local();\n-        if non_exhaustive && !etc {\n+        if non_exhaustive && !has_rest_pat {\n             self.error_foreign_non_exhaustive_spat(pat, adt.variant_descr(), fields.is_empty());\n         }\n \n@@ -1302,7 +1302,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .struct_span_err(pat.span, \"union patterns should have exactly one field\")\n                     .emit();\n             }\n-            if etc {\n+            if has_rest_pat {\n                 tcx.sess.struct_span_err(pat.span, \"`..` cannot be used in union patterns\").emit();\n             }\n         } else if !unmentioned_fields.is_empty() {\n@@ -1313,9 +1313,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     field.vis.is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n                 })\n                 .collect();\n-            if non_exhaustive {\n-                self.non_exhaustive_reachable_pattern(pat, &accessible_unmentioned_fields, adt_ty)\n-            } else if !etc {\n+\n+            if !has_rest_pat {\n                 if accessible_unmentioned_fields.is_empty() {\n                     unmentioned_err = Some(self.error_no_accessible_fields(pat, fields));\n                 } else {\n@@ -1326,6 +1325,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         fields,\n                     ));\n                 }\n+            } else if non_exhaustive && !accessible_unmentioned_fields.is_empty() {\n+                self.lint_non_exhaustive_omitted_patterns(\n+                    pat,\n+                    &accessible_unmentioned_fields,\n+                    adt_ty,\n+                )\n             }\n         }\n         match (inexistent_fields_err, unmentioned_err) {\n@@ -1653,7 +1658,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// is not exhaustive enough.\n     ///\n     /// Nb: the partner lint for enums lives in `compiler/rustc_mir_build/src/thir/pattern/usefulness.rs`.\n-    fn non_exhaustive_reachable_pattern(\n+    fn lint_non_exhaustive_omitted_patterns(\n         &self,\n         pat: &Pat<'_>,\n         unmentioned_fields: &[(&ty::FieldDef, Ident)],"}, {"sha": "d811b914d20a156f419c328dfd159a3c6ebe4804", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -313,6 +313,12 @@ changelog-seen = 2\n # this setting's very existence, are all subject to change.)\n #print-step-rusage = false\n \n+# Always patch binaries for usage with Nix toolchains. If `true` then binaries\n+# will be patched unconditionally. If `false` or unset, binaries will be patched\n+# only if the current distribution is NixOS. This option is useful when using\n+# a Nix toolchain on non-NixOS distributions.\n+#patch-binaries-for-nix = false\n+\n # =============================================================================\n # General install configuration options\n # ============================================================================="}, {"sha": "6735424a3ef33c1c04dd1094f0dcbe5e620fc06a", "filename": "library/alloc/src/collections/vec_deque/pair_slices.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -20,10 +20,10 @@ use super::VecDeque;\n ///\n /// and the uneven remainder of either A or B is skipped.\n pub struct PairSlices<'a, 'b, T> {\n-    pub(crate) a0: &'a mut [T],\n-    pub(crate) a1: &'a mut [T],\n-    pub(crate) b0: &'b [T],\n-    pub(crate) b1: &'b [T],\n+    a0: &'a mut [T],\n+    a1: &'a mut [T],\n+    b0: &'b [T],\n+    b1: &'b [T],\n }\n \n impl<'a, 'b, T> PairSlices<'a, 'b, T> {"}, {"sha": "87893d269120bb0eb09adcbb253b9c5aa441c4c6", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -380,20 +380,24 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n #[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n-    extern \"C\" {\n-        fn getexecname() -> *const c_char;\n-    }\n-    unsafe {\n-        let path = getexecname();\n-        if path.is_null() {\n-            Err(io::Error::last_os_error())\n-        } else {\n-            let filename = CStr::from_ptr(path).to_bytes();\n-            let path = PathBuf::from(<OsStr as OsStrExt>::from_bytes(filename));\n+    if let Ok(path) = crate::fs::read_link(\"/proc/self/path/a.out\") {\n+        Ok(path)\n+    } else {\n+        extern \"C\" {\n+            fn getexecname() -> *const c_char;\n+        }\n+        unsafe {\n+            let path = getexecname();\n+            if path.is_null() {\n+                Err(io::Error::last_os_error())\n+            } else {\n+                let filename = CStr::from_ptr(path).to_bytes();\n+                let path = PathBuf::from(<OsStr as OsStrExt>::from_bytes(filename));\n \n-            // Prepend a current working directory to the path if\n-            // it doesn't contain an absolute pathname.\n-            if filename[0] == b'/' { Ok(path) } else { getcwd().map(|cwd| cwd.join(path)) }\n+                // Prepend a current working directory to the path if\n+                // it doesn't contain an absolute pathname.\n+                if filename[0] == b'/' { Ok(path) } else { getcwd().map(|cwd| cwd.join(path)) }\n+            }\n         }\n     }\n }"}, {"sha": "5631834eca6fe9024020c9b543e9573e836c4900", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -339,14 +339,18 @@ pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n \n             Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) })\n         } else if #[cfg(target_os = \"haiku\")] {\n-            let mut sinfo: libc::system_info = crate::mem::zeroed();\n-            let res = libc::get_system_info(&mut sinfo);\n+            // system_info cpu_count field gets the static data set at boot time with `smp_set_num_cpus`\n+            // `get_system_info` calls then `smp_get_num_cpus`\n+            unsafe {\n+                let mut sinfo: libc::system_info = crate::mem::zeroed();\n+                let res = libc::get_system_info(&mut sinfo);\n \n-            if res != libc::B_OK {\n-                return Err(io::Error::last_os_error());\n-            }\n+                if res != libc::B_OK {\n+                    return Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\"));\n+                }\n \n-            Ok(unsafe { NonZeroUsize::new_unchecked(sinfo.cpu_count as usize) })\n+                Ok(NonZeroUsize::new_unchecked(sinfo.cpu_count as usize))\n+            }\n         } else {\n             // FIXME: implement on vxWorks, Redox, l4re\n             Err(io::Error::new_const(io::ErrorKind::Unsupported, &\"Getting the number of hardware threads is not supported on the target platform\"))"}, {"sha": "64f16245c2b1643f902afe8b0b3e67dc1402a5b9", "filename": "library/std/src/time/monotonic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,7 +5,7 @@ pub(super) fn monotonize(raw: time::Instant) -> time::Instant {\n     inner::monotonize(raw)\n }\n \n-#[cfg(all(target_has_atomic = \"64\", not(target_has_atomic = \"128\")))]\n+#[cfg(any(all(target_has_atomic = \"64\", not(target_has_atomic = \"128\")), target_arch = \"aarch64\"))]\n pub mod inner {\n     use crate::sync::atomic::AtomicU64;\n     use crate::sync::atomic::Ordering::*;\n@@ -71,7 +71,7 @@ pub mod inner {\n     }\n }\n \n-#[cfg(target_has_atomic = \"128\")]\n+#[cfg(all(target_has_atomic = \"128\", not(target_arch = \"aarch64\")))]\n pub mod inner {\n     use crate::sync::atomic::AtomicU128;\n     use crate::sync::atomic::Ordering::*;"}, {"sha": "05d7b0f611f72ccf2349fc23e626d1f805ed92c8", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -594,19 +594,23 @@ def fix_bin_or_dylib(self, fname):\n         if ostype != \"Linux\":\n             return\n \n-        # Use `/etc/os-release` instead of `/etc/NIXOS`.\n-        # The latter one does not exist on NixOS when using tmpfs as root.\n-        try:\n-            with open(\"/etc/os-release\", \"r\") as f:\n-                if not any(line.strip() == \"ID=nixos\" for line in f):\n-                    return\n-        except FileNotFoundError:\n-            return\n-        if os.path.exists(\"/lib\"):\n-            return\n+        # If the user has asked binaries to be patched for Nix, then\n+        # don't check for NixOS or `/lib`, just continue to the patching.\n+        if self.get_toml('patch-binaries-for-nix', 'build') != 'true':\n+            # Use `/etc/os-release` instead of `/etc/NIXOS`.\n+            # The latter one does not exist on NixOS when using tmpfs as root.\n+            try:\n+                with open(\"/etc/os-release\", \"r\") as f:\n+                    if not any(line.strip() == \"ID=nixos\" for line in f):\n+                        return\n+            except FileNotFoundError:\n+                return\n+            if os.path.exists(\"/lib\"):\n+                return\n \n-        # At this point we're pretty sure the user is running NixOS\n-        nix_os_msg = \"info: you seem to be running NixOS. Attempting to patch\"\n+        # At this point we're pretty sure the user is running NixOS or\n+        # using Nix\n+        nix_os_msg = \"info: you seem to be using Nix. Attempting to patch\"\n         print(nix_os_msg, fname)\n \n         # Only build `.nix-deps` once."}, {"sha": "062820040dc783709198cd92e8098ff04f8a7ca8", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -397,6 +397,7 @@ struct Build {\n     install_stage: Option<u32>,\n     dist_stage: Option<u32>,\n     bench_stage: Option<u32>,\n+    patch_binaries_for_nix: Option<bool>,\n }\n \n /// TOML representation of various global install decisions."}, {"sha": "7ed317c778fceaa638975276e22e51153afe6c6a", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -9,7 +9,7 @@\n import sys\n import json\n \n-crate = json.load(open(sys.argv[1]))\n+crate = json.load(open(sys.argv[1], encoding=\"utf-8\"))\n \n \n def get_local_item(item_id):"}, {"sha": "28b2eded7cc3e1c09444abf7eb29b28a1da0269f", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -34,6 +34,8 @@ use crate::html::markdown::MarkdownSummaryLine;\n \n const ITEM_TABLE_OPEN: &'static str = \"<div class=\\\"item-table\\\">\";\n const ITEM_TABLE_CLOSE: &'static str = \"</div>\";\n+const ITEM_TABLE_ROW_OPEN: &'static str = \"<div class=\\\"item-row\\\">\";\n+const ITEM_TABLE_ROW_CLOSE: &'static str = \"</div>\";\n \n pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer, page: &Page<'_>) {\n     debug_assert!(!item.is_stripped());\n@@ -256,9 +258,6 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n \n     debug!(\"{:?}\", indices);\n     let mut curty = None;\n-    // See: https://github.com/rust-lang/rust/issues/88545\n-    let item_table_block_size = 900usize;\n-    let mut item_table_nth_element = 0usize;\n \n     for &idx in &indices {\n         let myitem = &items[idx];\n@@ -285,13 +284,13 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 id = cx.derive_id(short.to_owned()),\n                 name = name\n             );\n-            item_table_nth_element = 0;\n         }\n \n         match *myitem.kind {\n             clean::ExternCrateItem { ref src } => {\n                 use crate::html::format::anchor;\n \n+                w.write_str(ITEM_TABLE_ROW_OPEN);\n                 match *src {\n                     Some(ref src) => write!(\n                         w,\n@@ -312,6 +311,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     ),\n                 }\n                 w.write_str(\"</code></div>\");\n+                w.write_str(ITEM_TABLE_ROW_CLOSE);\n             }\n \n             clean::ImportItem(ref import) => {\n@@ -336,6 +336,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n \n                 let add = if stab.is_some() { \" \" } else { \"\" };\n \n+                w.write_str(ITEM_TABLE_ROW_OPEN);\n                 write!(\n                     w,\n                     \"<div class=\\\"item-left {stab}{add}import-item\\\">\\\n@@ -348,6 +349,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     imp = import.print(cx),\n                     stab_tags = stab_tags.unwrap_or_default(),\n                 );\n+                w.write_str(ITEM_TABLE_ROW_CLOSE);\n             }\n \n             _ => {\n@@ -368,6 +370,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 let add = if stab.is_some() { \" \" } else { \"\" };\n \n                 let doc_value = myitem.doc_value().unwrap_or_default();\n+                w.write_str(ITEM_TABLE_ROW_OPEN);\n                 write!(\n                     w,\n                     \"<div class=\\\"item-left {stab}{add}module-item\\\">\\\n@@ -390,15 +393,9 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                         .collect::<Vec<_>>()\n                         .join(\" \"),\n                 );\n+                w.write_str(ITEM_TABLE_ROW_CLOSE);\n             }\n         }\n-\n-        item_table_nth_element += 1;\n-        if item_table_nth_element > item_table_block_size {\n-            w.write_str(ITEM_TABLE_CLOSE);\n-            w.write_str(ITEM_TABLE_OPEN);\n-            item_table_nth_element = 0;\n-        }\n     }\n \n     if curty.is_some() {"}, {"sha": "341d9b80fd82d8091ba5d81ef30439c5843cfe66", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -773,22 +773,18 @@ h2.small-section-header > .anchor {\n .block a.current.crate { font-weight: 500; }\n \n .item-table {\n-\tdisplay: grid;\n-\tcolumn-gap: 1.2rem;\n-\trow-gap: 0.0rem;\n-\tgrid-template-columns: auto 1fr;\n+\tdisplay: table-row;\n \t/* align content left */\n \tjustify-items: start;\n }\n-\n+.item-row {\n+\tdisplay: table-row;\n+}\n .item-left, .item-right {\n-\tdisplay: block;\n+\tdisplay: table-cell;\n }\n .item-left {\n-\tgrid-column: 1;\n-}\n-.item-right {\n-\tgrid-column: 2;\n+\tpadding-right: 1.2rem;\n }\n \n .search-container {\n@@ -1891,6 +1887,9 @@ details.undocumented[open] > summary::before {\n \n \t/* Display an alternating layout on tablets and phones */\n \t.item-table {\n+\t\tdisplay: block;\n+\t}\n+\t.item-row {\n \t\tdisplay: flex;\n \t\tflex-flow: column wrap;\n \t}"}, {"sha": "731fc4ff3ce00623469485a6c7d5447d9694d1ce", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -218,14 +218,15 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         ConstantItem(c) => ItemEnum::Constant(c.into_tcx(tcx)),\n         MacroItem(m) => ItemEnum::Macro(m.source),\n         ProcMacroItem(m) => ItemEnum::ProcMacro(m.into_tcx(tcx)),\n+        PrimitiveItem(p) => ItemEnum::PrimitiveType(p.as_sym().to_string()),\n         AssocConstItem(t, s) => ItemEnum::AssocConst { type_: t.into_tcx(tcx), default: s },\n         AssocTypeItem(g, t) => ItemEnum::AssocType {\n             bounds: g.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             default: t.map(|x| x.into_tcx(tcx)),\n         },\n         // `convert_item` early returns `None` for striped items\n         StrippedItem(_) => unreachable!(),\n-        PrimitiveItem(_) | KeywordItem(_) => {\n+        KeywordItem(_) => {\n             panic!(\"{:?} is not supported for JSON output\", item)\n         }\n         ExternCrateItem { ref src } => ItemEnum::ExternCrate {"}, {"sha": "040a880ace947c16c14192ba6169ac5231f78b10", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -69,7 +69,21 @@ impl JsonRenderer<'tcx> {\n                     .iter()\n                     .filter_map(|i| {\n                         let item = &i.impl_item;\n-                        if item.def_id.is_local() {\n+\n+                        // HACK(hkmatsumoto): For impls of primitive types, we index them\n+                        // regardless of whether they're local. This is because users can\n+                        // document primitive items in an arbitrary crate by using\n+                        // `doc(primitive)`.\n+                        let mut is_primitive_impl = false;\n+                        if let clean::types::ItemKind::ImplItem(ref impl_) = *item.kind {\n+                            if impl_.trait_.is_none() {\n+                                if let clean::types::Type::Primitive(_) = impl_.for_ {\n+                                    is_primitive_impl = true;\n+                                }\n+                            }\n+                        }\n+\n+                        if item.def_id.is_local() || is_primitive_impl {\n                             self.item(item.clone()).unwrap();\n                             Some(from_item_id(item.def_id))\n                         } else {\n@@ -191,6 +205,11 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n     fn after_krate(&mut self) -> Result<(), Error> {\n         debug!(\"Done with crate\");\n+\n+        for primitive in Rc::clone(&self.cache).primitive_locations.values() {\n+            self.get_impls(primitive.clone());\n+        }\n+\n         let mut index = (*self.index).clone().into_inner();\n         index.extend(self.get_trait_items());\n         // This needs to be the default HashMap for compatibility with the public interface for\n@@ -236,7 +255,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 7,\n+            format_version: 8,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "22debd296c2367505c423da217b10bf023c7c7c4", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -221,6 +221,8 @@ pub enum ItemEnum {\n     Macro(String),\n     ProcMacro(ProcMacro),\n \n+    PrimitiveType(String),\n+\n     AssocConst {\n         #[serde(rename = \"type\")]\n         type_: Type,"}, {"sha": "924fab1ea91068817d431d481f26c94218867fdb", "filename": "src/test/rustdoc-gui/huge-collection-of-constants.goml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -0,0 +1,5 @@\n+goto: file://|DOC_PATH|/test_docs/huge_amount_of_consts/index.html\n+\n+// Make sure that the last two entries are more than 12 pixels apart and not stacked on each other.\n+\n+compare-elements-position-near-false: (\"//*[@class='item-table']//div[last()-1]\", \"//*[@class='item-table']//div[last()-3]\", {\"y\": 12})"}, {"sha": "5f527078e79a84185bed4544a54d238818682b0b", "filename": "src/test/rustdoc-gui/src/test_docs/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2FCargo.toml?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -3,5 +3,7 @@ name = \"test_docs\"\n version = \"0.1.0\"\n edition = \"2018\"\n \n+build = \"build.rs\"\n+\n [lib]\n path = \"lib.rs\""}, {"sha": "16c96ded9120ce08c478503a97b2ebe7967d6547", "filename": "src/test/rustdoc-gui/src/test_docs/build.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Fbuild.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -0,0 +1,15 @@\n+//! generate 2000 constants for testing\n+\n+use std::{fs::write, path::PathBuf};\n+\n+fn main() -> std::io::Result<()> {\n+    let out_dir = std::env::var(\"OUT_DIR\").expect(\"OUT_DIR is not defined\");\n+\n+    let mut output = String::new();\n+    for i in 0..2000 {\n+        let line = format!(\"/// Some const A{0}\\npub const A{0}: isize = 0;\\n\", i);\n+        output.push_str(&*line);\n+    };\n+\n+    write(&[&*out_dir, \"huge_amount_of_consts.rs\"].iter().collect::<PathBuf>(), output)\n+}"}, {"sha": "0aa1426a36abf38b349b98044699601e7295b2e3", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -116,3 +116,7 @@ pub mod keyword {}\n \n /// Just some type alias.\n pub type SomeType = u32;\n+\n+pub mod huge_amount_of_consts {\n+    include!(concat!(env!(\"OUT_DIR\"), \"/huge_amount_of_consts.rs\"));\n+}"}, {"sha": "3a7d6d18c1bd0639f64ccfa6d19c501c795906fe", "filename": "src/test/rustdoc-json/primitive.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Frustdoc-json%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Frustdoc-json%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitive.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+\n+#![feature(doc_primitive)]\n+\n+#[doc(primitive = \"usize\")]\n+mod usize {}\n+\n+// @set local_crate_id = primitive.json \"$.index[*][?(@.name=='primitive')].crate_id\"\n+\n+// @has - \"$.index[*][?(@.name=='log10')]\"\n+// @!is - \"$.index[*][?(@.name=='log10')].crate_id\" $local_crate_id\n+// @has - \"$.index[*][?(@.name=='checked_add')]\"\n+// @!is - \"$.index[*][?(@.name=='checked_add')]\" $local_crate_id\n+// @!has - \"$.index[*][?(@.name=='is_ascii_uppercase')]\""}, {"sha": "f532c96ed2cc73ed21a190765b33a79a82eb24d5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |    bar(foo, x)\n    |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "c417cdd543e4d7b677eb3f4604c130a34d6e27b4", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n ...\n LL |     bar(foo, x)\n    |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "26f47eb684dfc5cca15bb5e64f50de88157d0dbc", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -18,8 +18,6 @@ LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n ...\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                 ^ requires that `'x` must outlive `'static`\n-   |\n-   = help: consider replacing `'x` with `'static`\n \n error[E0308]: mismatched types\n   --> $DIR/expect-fn-supply-fn.rs:32:49"}, {"sha": "9aab51c986caca241d101e28e59d56bc9749b89a", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -17,8 +17,6 @@ LL | fn expect_bound_supply_named<'x>() {\n ...\n LL |     closure_expecting_bound(|x: &'x u32| {\n    |                              ^ requires that `'x` must outlive `'static`\n-   |\n-   = help: consider replacing `'x` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "08b763b260822e3e970a3ce274f55fa362fb5950", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/wrong-abi-location-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-1.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -1,4 +1,4 @@\n-error[E0781]: the `\"C-cmse-nonsecure-call\"` ABI is only allowed on function pointers.\n+error[E0781]: the `\"C-cmse-nonsecure-call\"` ABI is only allowed on function pointers\n   --> $DIR/wrong-abi-location-1.rs:8:1\n    |\n LL | pub extern \"C-cmse-nonsecure-call\" fn test() {}"}, {"sha": "3ade9891e48a5cdd5bb921cd9c1ecfac2c208a53", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/wrong-abi-location-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-2.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -1,4 +1,4 @@\n-error[E0781]: the `\"C-cmse-nonsecure-call\"` ABI is only allowed on function pointers.\n+error[E0781]: the `\"C-cmse-nonsecure-call\"` ABI is only allowed on function pointers\n   --> $DIR/wrong-abi-location-2.rs:8:1\n    |\n LL | / extern \"C-cmse-nonsecure-call\" {"}, {"sha": "778b0e55f662079e504ec5e141ba1ede64b25715", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -4,15 +4,15 @@ error: `foo` is not yet stable as a const fn\n LL | const fn bar() -> u32 { foo() }\n    |                         ^^^^^\n    |\n-   = help: Const-stable functions can only call other const-stable functions\n+   = help: const-stable functions can only call other const-stable functions\n \n error: `foo2` is not yet stable as a const fn\n   --> $DIR/min_const_fn_libstd_stability.rs:24:26\n    |\n LL | const fn bar2() -> u32 { foo2() }\n    |                          ^^^^^^\n    |\n-   = help: Const-stable functions can only call other const-stable functions\n+   = help: const-stable functions can only call other const-stable functions\n \n error: const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n   --> $DIR/min_const_fn_libstd_stability.rs:29:26\n@@ -35,7 +35,7 @@ error: `foo2_gated` is not yet stable as a const fn\n LL | const fn bar2_gated() -> u32 { foo2_gated() }\n    |                                ^^^^^^^^^^^^\n    |\n-   = help: Const-stable functions can only call other const-stable functions\n+   = help: const-stable functions can only call other const-stable functions\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0174cb77f332dcdfd3b06b2c2efffd85706cea34", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -4,15 +4,15 @@ error: `foo` is not yet stable as a const fn\n LL | const unsafe fn bar() -> u32 { unsafe { foo() } }\n    |                                         ^^^^^\n    |\n-   = help: Const-stable functions can only call other const-stable functions\n+   = help: const-stable functions can only call other const-stable functions\n \n error: `foo2` is not yet stable as a const fn\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:24:42\n    |\n LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }\n    |                                          ^^^^^^\n    |\n-   = help: Const-stable functions can only call other const-stable functions\n+   = help: const-stable functions can only call other const-stable functions\n \n error: const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:29:33\n@@ -35,7 +35,7 @@ error: `foo2_gated` is not yet stable as a const fn\n LL | const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } }\n    |                                                ^^^^^^^^^^^^\n    |\n-   = help: Const-stable functions can only call other const-stable functions\n+   = help: const-stable functions can only call other const-stable functions\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e90ba9b912fe1a2abc34c36ef46e99b4072b01c6", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -4,23 +4,23 @@ error: `foo` is not yet stable as a const fn\n LL | const unsafe fn bar() -> u32 { foo() }\n    |                                ^^^^^\n    |\n-   = help: Const-stable functions can only call other const-stable functions\n+   = help: const-stable functions can only call other const-stable functions\n \n error: `foo2` is not yet stable as a const fn\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:24:33\n    |\n LL | const unsafe fn bar2() -> u32 { foo2() }\n    |                                 ^^^^^^\n    |\n-   = help: Const-stable functions can only call other const-stable functions\n+   = help: const-stable functions can only call other const-stable functions\n \n error: `foo2_gated` is not yet stable as a const fn\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:33:39\n    |\n LL | const unsafe fn bar2_gated() -> u32 { foo2_gated() }\n    |                                       ^^^^^^^^^^^^\n    |\n-   = help: Const-stable functions can only call other const-stable functions\n+   = help: const-stable functions can only call other const-stable functions\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a5770431eaff105648be42fac3c8330dfe8975b8", "filename": "src/test/ui/hrtb/hrtb-just-for-static.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -14,8 +14,6 @@ LL | fn give_some<'a>() {\n    |              -- lifetime `'a` defined here\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5"}, {"sha": "68da46d46bd14a20fa23b25d9aa33aba934a73ce", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -54,8 +54,6 @@ LL | fn foo_hrtb_bar_not<'b, T>(mut t: T)\n ...\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n-   |\n-   = help: consider replacing `'b` with `'static`\n \n error: implementation of `Bar` is not general enough\n   --> $DIR/hrtb-perfect-forwarding.rs:43:5"}, {"sha": "e49bd9da754d6d6c019f2e8fe01b6e9dde5579ff", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                              - `x` is a reference that is only valid in the function body\n LL |     static_val(x);\n    |     ^^^^^^^^^^^^^ `x` escapes the function body here\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "812093e6e76213ed950eb1da6547f25125ddc4c7", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -19,7 +19,6 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             |\n    |             lifetime `'a` defined here\n    |\n-   = help: consider replacing `'a` with `'static`\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n@@ -42,7 +41,6 @@ LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |              -- lifetime `'a` defined here            ^ returning this value requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n-   = help: consider replacing `'a` with `'static`\n \n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/must_outlive_least_region_or_bound.rs:11:41\n@@ -67,7 +65,6 @@ LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:32:61"}, {"sha": "a3aeff50eee4cb8cbd7a5dd28352b9436f3a0d15", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -19,7 +19,6 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    |\n    |                    lifetime `'a` defined here\n    |\n-   = help: consider replacing `'a` with `'static`\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {"}, {"sha": "a7b827d27a87bb8d22249b67322db3f485074c6f", "filename": "src/test/ui/issues/issue-10291.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn test<'x>(x: &'x isize) {\n LL |     drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n LL |         x\n    |         ^ returning this value requires that `'x` must outlive `'static`\n-   |\n-   = help: consider replacing `'x` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "c7601caacdca3fb4e56bc147a45e82e0a05fb767", "filename": "src/test/ui/issues/issue-26217.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn bar<'a>() {\n    |        -- lifetime `'a` defined here\n LL |     foo::<&'a i32>();\n    |     ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "59be0f983b9078fb7ed47495f96034d5256a7f93", "filename": "src/test/ui/issues/issue-54943.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn boo<'a>() {\n ...\n LL |     let x = foo::<&'a u32>();\n    |             ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "c1a3084f30eae913a45cf42cee6afe236677e5f3", "filename": "src/test/ui/issues/issue-55796.nll.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | pub trait Graph<'a> {\n ...\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-55796.rs:23:9\n@@ -17,8 +15,6 @@ LL | pub trait Graph<'a> {\n ...\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d779753687ed5af1513029d48676637619a01af9", "filename": "src/test/ui/issues/issue-75777.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fissues%2Fissue-75777.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fissues%2Fissue-75777.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn inject<'a, Env: 'a, A: 'a + Send>(v: A) -> Box<dyn FnOnce(&'a Env) -> Bo\n LL |     let fut: BoxFuture<'a, A> = Box::pin(future::ready(v));\n LL |     Box::new(move |_| fut)\n    |     ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "050d5fcf05ef43f54e124c83e5df5f9ca16d0217", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.nll.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n LL |     // but ref_obj will not, so warn.\n LL |     ref_obj(x)\n    |     ^^^^^^^^^^ `x` escapes the function body here\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/lifetime-bound-will-change-warning.rs:39:5\n@@ -17,8 +15,6 @@ LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n LL |     // same as test2, but cross crate\n LL |     lib::ref_obj(x)\n    |     ^^^^^^^^^^^^^^^ `x` escapes the function body here\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "832688f5162b346d28b19dccb86d64cd92d09575", "filename": "src/test/ui/lub-if.nll.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Flub-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Flub-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-if.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n ...\n LL |         s\n    |         ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/lub-if.rs:35:9\n@@ -17,8 +15,6 @@ LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n ...\n LL |         s\n    |         ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3a344a77d2c2d779935c478cf2e15d2dfe8fdb1b", "filename": "src/test/ui/lub-match.nll.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Flub-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Flub-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-match.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n ...\n LL |             s\n    |             ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/lub-match.rs:39:13\n@@ -17,8 +15,6 @@ LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n ...\n LL |             s\n    |             ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d17a40a95c1b8ec01ed6387e2518f90c35309bdc", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -46,8 +46,6 @@ LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "06c46ec8259a0e0e4592d1d00523e0ef4100babb", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -46,8 +46,6 @@ LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "d0a24a267fd4f3aab01b8e363eaa4799df463947", "filename": "src/test/ui/nll/closure-requirements/region-lbr-named-does-not-outlive-static.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn foo<'a>(x: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     &*x\n    |     ^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "38dd1b5f6fe733a77111f4a1367eea83d27c6509", "filename": "src/test/ui/nll/issue-50716.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n ...\n LL |     let _x = *s;\n    |              ^^ proving this value is `Sized` requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "4f797f26a1a7c4e16c1d4d0ac9179e0c5874243d", "filename": "src/test/ui/nll/issue-55401.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u\n LL |     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n LL |     *y\n    |     ^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "aba07542d026e826b2d8589e14cc306cad81b1a8", "filename": "src/test/ui/nll/issue-58299.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn foo<'a>(x: i32) {\n ...\n LL |         A::<'a>::X..=A::<'static>::X => (),\n    |         ^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-58299.rs:24:27\n@@ -17,8 +15,6 @@ LL | fn bar<'a>(x: i32) {\n ...\n LL |         A::<'static>::X..=A::<'a>::X => (),\n    |                           ^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a5455a3f9eb7b1bf7e3628f53b40c4145d8e9bac", "filename": "src/test/ui/nll/issue-73159-rpit-static.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for issue #73159\n+// Tests thar we don't suggest replacing 'a with 'static'\n+\n+#![feature(nll)]\n+\n+struct Foo<'a>(&'a [u8]);\n+\n+impl<'a> Foo<'a> {\n+    fn make_it(&self) -> impl Iterator<Item = u8> { //~ ERROR lifetime may not live\n+        self.0.iter().copied()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "60b1552701af91eb75e2ba87db04791fa23e54ae", "filename": "src/test/ui/nll/issue-73159-rpit-static.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-73159-rpit-static.rs:9:26\n+   |\n+LL | impl<'a> Foo<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     fn make_it(&self) -> impl Iterator<Item = u8> {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4e8eec330a579c8001148f81be056f0115c27864", "filename": "src/test/ui/nll/mir_check_cast_reify.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn bar<'a>(x: &'a u32) -> &'static u32 {\n ...\n LL |     f(x)\n    |     ^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "52959850a3332835fdb62d6a55396611acaa6528", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n ...\n LL |     unsafe { g(input) }\n    |              ^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "364d6c17ea7f695afb6342f9e1045dcd3947e806", "filename": "src/test/ui/nll/mir_check_cast_unsize.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n    |        -- lifetime `'a` defined here\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "a80e59d4822fb9ac50448fd98d69de5468abb28c", "filename": "src/test/ui/nll/outlives-suggestion-more.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-more.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-more.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-more.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -46,8 +46,6 @@ LL | fn foo2<'a, 'b, 'c>(x: &'a usize, y: &'b usize) -> (&'c usize, &'static usi\n    |             -- lifetime `'b` defined here\n LL |     (x, y)\n    |     ^^^^^^ returning this value requires that `'b` must outlive `'static`\n-   |\n-   = help: consider replacing `'b` with `'static`\n \n help: the following changes may resolve your lifetime errors\n    |\n@@ -88,8 +86,6 @@ LL | fn foo3<'a, 'b, 'c, 'd, 'e>(\n ...\n LL |     (x, y, z)\n    |     ^^^^^^^^^ returning this value requires that `'c` must outlive `'static`\n-   |\n-   = help: consider replacing `'c` with `'static`\n \n help: the following changes may resolve your lifetime errors\n    |"}, {"sha": "fa85ce27990837876a46d78703f613033c5d3f0d", "filename": "src/test/ui/nll/outlives-suggestion-simple.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -17,8 +17,6 @@ LL | fn foo2<'a>(x: &'a usize) -> &'static usize {\n    |         -- lifetime `'a` defined here\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/outlives-suggestion-simple.rs:14:5\n@@ -66,8 +64,6 @@ LL |     pub fn foo<'a>(x: &'a usize) -> Self {\n    |                -- lifetime `'a` defined here\n LL |         Foo { x }\n    |         ^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/outlives-suggestion-simple.rs:41:9"}, {"sha": "9128fd1647959225d59b2b268dce9afcefa6656c", "filename": "src/test/ui/nll/ty-outlives/wf-unreachable.stderr", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn uninit<'a>() {\n LL |     return;\n LL |     let x: &'static &'a ();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:13:12\n@@ -17,8 +15,6 @@ LL | fn var_type<'a>() {\n LL |     return;\n LL |     let x: &'static &'a () = &&();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:17:12\n@@ -27,8 +23,6 @@ LL | fn uninit_infer<'a>() {\n    |                 -- lifetime `'a` defined here\n LL |     let x: &'static &'a _;\n    |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:23:12\n@@ -38,8 +32,6 @@ LL | fn infer<'a>() {\n LL |     return;\n LL |     let x: &'static &'a _ = &&();\n    |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:28:12\n@@ -49,8 +41,6 @@ LL | fn uninit_no_var<'a>() {\n LL |     return;\n LL |     let _: &'static &'a ();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:33:12\n@@ -60,8 +50,6 @@ LL | fn no_var<'a>() {\n LL |     return;\n LL |     let _: &'static &'a () = &&();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:38:12\n@@ -71,8 +59,6 @@ LL | fn infer_no_var<'a>() {\n LL |     return;\n LL |     let _: &'static &'a _ = &&();\n    |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:51:12\n@@ -82,8 +68,6 @@ LL | fn required_substs<'a>() {\n LL |     return;\n LL |     let _: C<'static, 'a, _> = C((), &(), &());\n    |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "55bb3a6090c01e2bc6c27387ea2512388c242ee6", "filename": "src/test/ui/nll/user-annotations/closure-substs.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn foo<'a>() {\n ...\n LL |         return x;\n    |                ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/closure-substs.rs:15:16\n@@ -25,8 +23,6 @@ LL | fn bar<'a>() {\n ...\n LL |         b(x);\n    |         ^^^^ argument requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error[E0521]: borrowed data escapes outside of closure\n   --> $DIR/closure-substs.rs:29:9"}, {"sha": "c39301588acfa1c02178597cdae68ffd9d2e5279", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     <Foo<'a>>::C\n    |     ^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "541a2cfaf299aaa3236bf4d1c8105231786efa1f", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "ea0fcb6d634cd9820ca0d975bf4bd7c9c8380e47", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "ff549f1d88bd44bdd6bd88e1eeeaa09c3e45638a", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     <T as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "7f160d8e398b9553a78b6a3d36c8e24b3d78a8e9", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     T::C\n    |     ^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "768454698987edb2a1fe571a627e559a916d45c2", "filename": "src/test/ui/nll/user-annotations/inherent-associated-constants.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn non_wf_associated_const<'a>(x: i32) {\n    |                            -- lifetime `'a` defined here\n LL |     A::<'a>::IC;\n    |     ^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "6cfccf7cb69cec5f29b8f2d8d709802d97094fdd", "filename": "src/test/ui/nll/user-annotations/issue-54124.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -15,8 +15,6 @@ LL | fn test<'a>() {\n    |         -- lifetime `'a` defined here\n LL |     let _:fn(&()) = |_:&'a ()| {};\n    |                      ^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5929707e41e10ba18c724401fd5503be3db368ae", "filename": "src/test/ui/nll/user-annotations/issue-55748-pat-types-constrain-bindings.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn coupled_regions_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-55748-pat-types-constrain-bindings.rs:49:5\n@@ -17,8 +15,6 @@ LL | fn coupled_types_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-55748-pat-types-constrain-bindings.rs:62:5\n@@ -28,8 +24,6 @@ LL | fn coupled_wilds_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c99f53c5aa4c58db0c188b768fe39c2ab4bc053f", "filename": "src/test/ui/nll/user-annotations/issue-57731-ascibed-coupled-types.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn coupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n LL |     let ((y, _z),) = ((s, _x),): (PairCoupledTypes<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-57731-ascibed-coupled-types.rs:22:5\n@@ -17,8 +15,6 @@ LL | fn coupled_regions_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n LL |     let ((y, _z),) = ((s, _x),): (PairCoupledRegions<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-57731-ascibed-coupled-types.rs:32:5\n@@ -28,8 +24,6 @@ LL | fn cast_coupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32\n LL |     let ((y, _z),) = ((s, _x),) as (PairCoupledTypes<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-57731-ascibed-coupled-types.rs:37:5\n@@ -39,8 +33,6 @@ LL | fn cast_coupled_regions_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u\n LL |     let ((y, _z),) = ((s, _x),) as (PairCoupledRegions<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7ebd0ae227a80e444f611a2fb3023baf4c35fd5b", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -156,8 +156,6 @@ LL | fn static_to_a_to_static_through_variable<'a>(x: &'a u32) -> &'static u32 {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/patterns.rs:125:5\n@@ -167,8 +165,6 @@ LL | fn static_to_a_to_static_through_tuple<'a>(x: &'a u32) -> &'static u32 {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/patterns.rs:130:5\n@@ -178,8 +174,6 @@ LL | fn static_to_a_to_static_through_struct<'a>(_x: &'a u32) -> &'static u32 {\n LL |     let Single { value: y }: Single<&'a u32> = Single { value: &22 };\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/patterns.rs:134:18\n@@ -188,8 +182,6 @@ LL | fn a_to_static_then_static<'a>(x: &'a u32) -> &'static u32 {\n    |                            -- lifetime `'a` defined here\n LL |     let (y, _z): (&'static u32, u32) = (x, 44);\n    |                  ^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 19 previous errors\n "}, {"sha": "7d6f9f39d13ed278f4bbab199300d749fd7c5acd", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-box-error.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn c<'a>(t: &'a Box<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n    |      -- lifetime `'a` defined here\n LL |     ss.t = t;\n    |     ^^^^^^^^ assignment requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "6df54638ce00425262306af2cad2ea9af9538321", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-struct-error.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn c<'a>(t: &'a MyBox<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n    |      -- lifetime `'a` defined here\n LL |     ss.t = t;\n    |     ^^^^^^^^ assignment requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "6ce1b2eed85d2b20312d6d6059ebad22208a312e", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -18,8 +18,6 @@ LL | fn load2<'a>(ss: &MyBox<dyn SomeTrait + 'a>) -> MyBox<dyn SomeTrait + 'a> {\n    |              -- `ss` is a reference that is only valid in the function body\n LL |     load0(ss)\n    |     ^^^^^^^^^ `ss` escapes the function body here\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7221759dbd450878c62310c96ba5eae8238777fd", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn unify<'a>(x: Option<Invariant<'a>>, f: fn(Invariant<'a>)) {\n LL |     let bad = if x.is_some() {\n LL |         x.unwrap()\n    |         ^^^^^^^^^^ `x` escapes the function body here\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "86bd100538d70ce5341cfcdc798a2ef48791028d", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.nll.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn param_not_ok<'a>(x: &'a isize) {\n    |                 -- lifetime `'a` defined here\n LL |     assert_send::<&'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:26:5\n@@ -15,8 +13,6 @@ LL | fn param_not_ok1<'a>(_: &'a isize) {\n    |                  -- lifetime `'a` defined here\n LL |     assert_send::<&'a str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:30:5\n@@ -25,8 +21,6 @@ LL | fn param_not_ok2<'a>(_: &'a isize) {\n    |                  -- lifetime `'a` defined here\n LL |     assert_send::<&'a [isize]>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:44:5\n@@ -35,8 +29,6 @@ LL | fn box_with_region_not_ok<'a>() {\n    |                           -- lifetime `'a` defined here\n LL |     assert_send::<Box<&'a isize>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:55:5\n@@ -45,8 +37,6 @@ LL | fn unsafe_ok2<'a>(_: &'a isize) {\n    |               -- lifetime `'a` defined here\n LL |     assert_send::<*const &'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:59:5\n@@ -55,8 +45,6 @@ LL | fn unsafe_ok3<'a>(_: &'a isize) {\n    |               -- lifetime `'a` defined here\n LL |     assert_send::<*mut &'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b6d7b8aac5f19f927e399aa28aaec81af9eb87b6", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn caller<'a>(x: &isize) {\n    |           -- lifetime `'a` defined here\n LL |     Foo.some_method::<&'a isize>();\n    |         ^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "6a0e95861610173296f1de7589244c36e5285699", "filename": "src/test/ui/regions/regions-close-object-into-object-2.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |      -- lifetime `'a` defined here\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-2.rs:9:5"}, {"sha": "b30626830ad6bbbe5d345ce7eb183be51ecb9cf4", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -29,8 +29,6 @@ LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |      -- lifetime `'a` defined here\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-4.rs:9:5"}, {"sha": "0c1e3989b234a84db7663f36baa1b0517c687056", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n-   |\n-   = help: consider replacing `'r` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "0edeb2723998f00e8be7e0a914b51b7905acddc1", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n-   |\n-   = help: consider replacing `'r` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "724dd7e3f6d3f36c4a322e20adce132d84f6e29d", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n-   |\n-   = help: consider replacing `'r` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "a0cfa3624722897e5f5479158a389a5af7e7d0dd", "filename": "src/test/ui/regions/regions-nested-fns.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -45,8 +45,6 @@ LL | fn nested<'x>(x: &'x isize) {\n ...\n LL |         if false { return x; }\n    |                           ^ returning this value requires that `'x` must outlive `'static`\n-   |\n-   = help: consider replacing `'x` with `'static`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a280c6f0a02d28ce7f40889ea450e4eb9dc60414", "filename": "src/test/ui/regions/regions-static-bound.migrate.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n LL |     t\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error[E0621]: explicit lifetime required in the type of `u`\n   --> $DIR/regions-static-bound.rs:14:5"}, {"sha": "a280c6f0a02d28ce7f40889ea450e4eb9dc60414", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n LL |     t\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error[E0621]: explicit lifetime required in the type of `u`\n   --> $DIR/regions-static-bound.rs:14:5"}, {"sha": "15853e6ca5d691775b246d83e278e5f3c27e7c23", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -6,8 +6,6 @@ LL | fn use_<'b>(c: Invariant<'b>) {\n ...\n LL |     let _: Invariant<'static> = c;\n    |            ^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'static`\n-   |\n-   = help: consider replacing `'b` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "78db6b170bb13d9e240d116d7519da6e72520003", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/structs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -31,3 +31,11 @@ pub struct NestedStruct {\n     pub foo: u16,\n     pub bar: NormalStruct,\n }\n+\n+#[derive(Default)]\n+#[non_exhaustive]\n+pub struct MixedVisFields {\n+    pub a: u16,\n+    pub b: bool,\n+    pub(crate) foo: bool,\n+}"}, {"sha": "c196ded404ddcef8345eefa22c186d9769a8ce25", "filename": "src/test/ui/rfc-2008-non-exhaustive/reachable-patterns.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -10,7 +10,7 @@ use enums::{\n     EmptyNonExhaustiveEnum, NestedNonExhaustive, NonExhaustiveEnum, NonExhaustiveSingleVariant,\n     VariantNonExhaustive,\n };\n-use structs::{FunctionalRecord, NestedStruct, NormalStruct};\n+use structs::{FunctionalRecord, MixedVisFields, NestedStruct, NormalStruct};\n \n #[non_exhaustive]\n #[derive(Default)]\n@@ -141,6 +141,10 @@ fn main() {\n     //~^ some fields are not explicitly listed\n     //~^^ some fields are not explicitly listed\n \n+    // Ok: this tests https://github.com/rust-lang/rust/issues/89382\n+    #[warn(non_exhaustive_omitted_patterns)]\n+    let MixedVisFields { a, b, .. } = MixedVisFields::default();\n+\n     // Ok: because this only has 1 variant\n     #[deny(non_exhaustive_omitted_patterns)]\n     match NonExhaustiveSingleVariant::A(true) {"}, {"sha": "e66fd8008a10bbd07cd7b599f0f6667963dea5ec", "filename": "src/test/ui/rfc-2008-non-exhaustive/reachable-patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Freachable-patterns.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -129,13 +129,13 @@ LL |     #[deny(non_exhaustive_omitted_patterns)]\n    = note: the matched value is of type `ErrorKind` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/reachable-patterns.rs:153:9\n+  --> $DIR/reachable-patterns.rs:157:9\n    |\n LL |         _ => {}\n    |         ^ pattern `A(_)` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/reachable-patterns.rs:151:12\n+  --> $DIR/reachable-patterns.rs:155:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5649f688fe7c6211c762abae3f7e75b66c65f57a", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -13,7 +13,7 @@ error: `<Int as Add>::add` is not yet stable as a const fn\n LL |     Int(1i32) + Int(2i32)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Const-stable functions can only call other const-stable functions\n+   = help: const-stable functions can only call other const-stable functions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "32a2de1e84d8f2a6d8013a287c0ee64e9391a162", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL |     fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> +\n    |                      --- `val` is a reference that is only valid in the function body\n LL |         val.use_self::<T>()\n    |         ^^^^^^^^^^^^^^^^^^^ `val` escapes the function body here\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:69:9\n@@ -15,8 +13,6 @@ LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                   --- `val` is a reference that is only valid in the function body\n LL |         val.use_self()\n    |         ^^^^^^^^^^^^^^ `val` escapes the function body here\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:88:9\n@@ -25,8 +21,6 @@ LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n    |                   --- `val` is a reference that is only valid in the function body\n LL |         val.use_self()\n    |         ^^^^^^^^^^^^^^ `val` escapes the function body here\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:108:9\n@@ -35,8 +29,6 @@ LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                   --- `val` is a reference that is only valid in the function body\n LL |         MyTrait::use_self(val)\n    |         ^^^^^^^^^^^^^^^^^^^^^^ `val` escapes the function body here\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b579635ca7c08acf337f8c0c9979c9b1f7d566ea", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.nll.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -32,8 +32,6 @@ LL | |             current: None,\n LL | |             remaining: self.0.iter(),\n LL | |         }\n    | |_________^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/trait-object-nested-in-impl-trait.rs:60:30\n@@ -43,7 +41,6 @@ LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> {\n    |             |\n    |             lifetime `'a` defined here\n    |\n-   = help: consider replacing `'a` with `'static`\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {"}, {"sha": "35871c1236fae11cdfec983f1dcbb779aa26b47f", "filename": "src/test/ui/variance/variance-associated-types2.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn take<'a>(_: &'a u32) {\n    |         -- lifetime `'a` defined here\n LL |     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "1f06949c0331b710854c608c2da810666e972650", "filename": "src/test/ui/variance/variance-btree-invariant-types.nll.stderr", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -5,8 +5,6 @@ LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &\n    |                     ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:7:5\n@@ -15,8 +13,6 @@ LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (\n    |                     ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:10:5\n@@ -25,8 +21,6 @@ LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &\n    |                        ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:13:5\n@@ -35,8 +29,6 @@ LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (\n    |                        ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:17:5\n@@ -45,8 +37,6 @@ LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a\n    |                      ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:20:5\n@@ -55,8 +45,6 @@ LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a\n    |                      ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:23:5\n@@ -65,8 +53,6 @@ LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a\n    |                         ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:26:5\n@@ -75,8 +61,6 @@ LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a\n    |                         ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:31:5\n@@ -86,8 +70,6 @@ LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n LL |                          -> OccupiedEntry<'a, &'new (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:35:5\n@@ -97,8 +79,6 @@ LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n LL |                          -> OccupiedEntry<'a, (), &'new ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:39:5\n@@ -108,8 +88,6 @@ LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n LL |                             -> OccupiedEntry<'a, &'static (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:43:5\n@@ -119,8 +97,6 @@ LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n LL |                             -> OccupiedEntry<'a, (), &'static ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:48:5\n@@ -130,8 +106,6 @@ LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n LL |                          -> VacantEntry<'a, &'new (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:52:5\n@@ -141,8 +115,6 @@ LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n LL |                          -> VacantEntry<'a, (), &'new ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:56:5\n@@ -152,8 +124,6 @@ LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n LL |                             -> VacantEntry<'a, &'static (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:60:5\n@@ -163,8 +133,6 @@ LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n LL |                             -> VacantEntry<'a, (), &'static ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n-   |\n-   = help: consider replacing `'new` with `'static`\n \n error: aborting due to 16 previous errors\n "}, {"sha": "0386d8be167ee22c94dcc65f732cdc0dcdffe819", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 19, "deletions": 34, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -143,56 +143,41 @@ impl Formatter for HTMLFormatter {\n             r##\"<script>\n function onEach(arr, func) {{\n     if (arr && arr.length > 0 && func) {{\n-        for (var i = 0; i < arr.length; i++) {{\n-            func(arr[i]);\n+        var length = arr.length;\n+        var i;\n+        for (i = 0; i < length; ++i) {{\n+            if (func(arr[i])) {{\n+                return true;\n+            }}\n         }}\n     }}\n+    return false;\n+}}\n+\n+function onEachLazy(lazyArray, func) {{\n+    return onEach(\n+        Array.prototype.slice.call(lazyArray),\n+        func);\n }}\n \n function hasClass(elem, className) {{\n-    if (elem && className && elem.className) {{\n-        var elemClass = elem.className;\n-        var start = elemClass.indexOf(className);\n-        if (start === -1) {{\n-            return false;\n-        }} else if (elemClass.length === className.length) {{\n-            return true;\n-        }} else {{\n-            if (start > 0 && elemClass[start - 1] !== ' ') {{\n-                return false;\n-            }}\n-            var end = start + className.length;\n-            if (end < elemClass.length && elemClass[end] !== ' ') {{\n-                return false;\n-            }}\n-            return true;\n-        }}\n-        if (start > 0 && elemClass[start - 1] !== ' ') {{\n-            return false;\n-        }}\n-        var end = start + className.length;\n-        if (end < elemClass.length && elemClass[end] !== ' ') {{\n-            return false;\n-        }}\n-        return true;\n-    }}\n-    return false;\n+    return elem && elem.classList && elem.classList.contains(className);\n }}\n \n-onEach(document.getElementsByClassName('rust-example-rendered'), function(e) {{\n+onEachLazy(document.getElementsByClassName('rust-example-rendered'), function(e) {{\n     if (hasClass(e, 'compile_fail')) {{\n         e.addEventListener(\"mouseover\", function(event) {{\n-            e.previousElementSibling.childNodes[0].style.color = '#f00';\n+            e.parentElement.previousElementSibling.childNodes[0].style.color = '#f00';\n         }});\n         e.addEventListener(\"mouseout\", function(event) {{\n-            e.previousElementSibling.childNodes[0].style.color = '';\n+            e.parentElement.previousElementSibling.childNodes[0].style.color = '';\n         }});\n     }} else if (hasClass(e, 'ignore')) {{\n         e.addEventListener(\"mouseover\", function(event) {{\n-            e.previousElementSibling.childNodes[0].style.color = '#ff9200';\n+            e.parentElement.previousElementSibling.childNodes[0].style.color = '#ff9200';\n         }});\n         e.addEventListener(\"mouseout\", function(event) {{\n-            e.previousElementSibling.childNodes[0].style.color = '';\n+            e.parentElement.previousElementSibling.childNodes[0].style.color = '';\n         }});\n     }}\n }});"}, {"sha": "b598c63f52ac8108f46cd1534936719b0a2c14c5", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/074f63648bd2368d5ca19aed02b5763a144e5d05/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=074f63648bd2368d5ca19aed02b5763a144e5d05", "patch": "@@ -172,7 +172,7 @@ async function main(argv) {\n     }\n     files.sort();\n \n-    console.log(`Running ${files.length} rustdoc-gui tests...`);\n+    console.log(`Running ${files.length} rustdoc-gui (${opts[\"jobs\"]} concurrently) ...`);\n \n     if (opts[\"jobs\"] < 1) {\n         process.setMaxListeners(files.length + 1);"}]}