{"sha": "cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNWI1M2U1MmZjMDI2N2FhOWJlOTVhNmEyNTQ0ZWViOTc2MWNkN2Y=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-12T15:19:13Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-13T00:52:15Z"}, "message": "Rustup for panic changes\n\nThis gets Miri working again, but doesn't actually implement unwinding", "tree": {"sha": "bdaccf7d18f62f1730a65aca37cb0f97fa1e7cc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdaccf7d18f62f1730a65aca37cb0f97fa1e7cc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3LU78ACgkQtAh+UQ6Y\nsWQSKw/+NDDF0Gg8MhNttQ1cTNxGf+/MbEF3YVXnl6OKdTOUbJ/TOmnRS5nulllr\n79wrxWBKYwCd/uAcDgbBOIUiCM8K3RHx3DjfnT7ES9ee9/HG6khK7vYaSMYsW2qs\nDplJUuqEndnaGY9IGGVqNZshDaoTrMtI4NKqdLP7u8XNYrQTtzZDsD1tcYM415qH\nzP6kf4LUJMRFt0tXE2jvqItp10BvFktUXYZOPOvwmgCBmrqPEJgAGuoBwj/Jsnmt\nythjVbOREQjaqyYcHZnvYsrzQl5FB6YxnY00seHKvSqCH5a+eGvsKLpH7kXjEc6v\nV03kkEdHgh0CQNrwkBCMw1m1Z7EBc0q2SP9XAt9jeR94vC0MrYCNutR3Qv2IzfYf\nCcjP54vlFhyDGbKrR5vd+3FCzJkFcSPVOIQqWHBSzVPRhsx2Vu6ABtKLPTd1Q659\nmvXsKAw8Pcl3to6X4UyFq0e4PXHdkftwkPdWr2rzL/hqb1m4xjxxiuVmiAf9pdMC\no49kjV6Bs2iQ3AiBNmFWqYJsEfTU/XdqcoTZOo2WPBqL5deqzDoOOQigt70QlQOL\noJkvd4zbtXNDCMCvQRGg/NnqaIFdN5T0RXt2VsHZhx2In/FjNLN2e/4nlJDN5mKZ\nE0ako/gOFVzCS71bxzFwaqFlXLBGlhUUYAUul/Eh9M+RTzhEFwI=\n=FIdY\n-----END PGP SIGNATURE-----", "payload": "tree bdaccf7d18f62f1730a65aca37cb0f97fa1e7cc9\nparent 86f473810a4c806d94596ddcc68673639fe4c1bf\nauthor Aaron Hill <aa1ronham@gmail.com> 1573571953 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1573606335 -0500\n\nRustup for panic changes\n\nThis gets Miri working again, but doesn't actually implement unwinding\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f", "html_url": "https://github.com/rust-lang/rust/commit/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86f473810a4c806d94596ddcc68673639fe4c1bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/86f473810a4c806d94596ddcc68673639fe4c1bf", "html_url": "https://github.com/rust-lang/rust/commit/86f473810a4c806d94596ddcc68673639fe4c1bf"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "65f6d5dd027185d991025afd3dc2c7333181f3c3", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f", "patch": "@@ -213,7 +213,7 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) {\n             };\n             e.print_backtrace();\n             if let Some(frame) = ecx.stack().last() {\n-                let block = &frame.body.basic_blocks()[frame.block];\n+                let block = &frame.body.basic_blocks()[frame.block.unwrap()];\n                 let span = if frame.stmt < block.statements.len() {\n                     block.statements[frame.stmt].source_info.span\n                 } else {"}, {"sha": "20abfdcf54bb540c3aea8bbaa5e949bde9686f85", "filename": "src/machine.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f", "patch": "@@ -173,6 +173,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         args: &[OpTy<'tcx, Tag>],\n         dest: Option<PlaceTy<'tcx, Tag>>,\n         ret: Option<mir::BasicBlock>,\n+        _unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         ecx.find_fn(instance, args, dest, ret)\n     }\n@@ -194,8 +195,14 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n-        dest: PlaceTy<'tcx, Tag>,\n+        dest: Option<PlaceTy<'tcx, Tag>>,\n+        _ret: Option<mir::BasicBlock>,\n+        _unwind: Option<mir::BasicBlock>\n     ) -> InterpResult<'tcx> {\n+        let dest = match dest {\n+            Some(dest) => dest,\n+            None => throw_ub!(Unreachable)\n+        };\n         ecx.call_intrinsic(span, instance, args, dest)\n     }\n \n@@ -353,13 +360,15 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     fn stack_pop(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         extra: stacked_borrows::CallId,\n-    ) -> InterpResult<'tcx> {\n-        Ok(ecx\n+        _unwinding: bool\n+    ) -> InterpResult<'tcx, StackPopInfo> {\n+        ecx\n             .memory\n             .extra\n             .stacked_borrows\n             .borrow_mut()\n-            .end_call(extra))\n+            .end_call(extra);\n+        Ok(StackPopInfo::Normal)\n     }\n \n     #[inline(always)]"}, {"sha": "55ec36387f2e82aedde18361f56bb0d9d0bb8dd3", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f", "patch": "@@ -335,7 +335,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     mir,\n                     Some(ret_place),\n                     // Directly return to caller.\n-                    StackPopCleanup::Goto(Some(ret)),\n+                    StackPopCleanup::Goto { ret: Some(ret), unwind: None },\n                 )?;\n                 let mut args = this.frame().body.args_iter();\n "}, {"sha": "2e41ab1ca6700a2b4e6c1746f992e2dd48bc6a6c", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f", "patch": "@@ -22,7 +22,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         dest: PlaceTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        if this.emulate_intrinsic(span, instance, args, dest)? {\n+        if this.emulate_intrinsic(span, instance, args, Some(dest))? {\n             return Ok(());\n         }\n         let tcx = &{this.tcx.tcx};"}, {"sha": "d9de27596cd0d34456513ae45280c8076d5ac27f", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=cf5b53e52fc0267aa9be95a6a2544eeb9761cd7f", "patch": "@@ -27,7 +27,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         );\n \n         // First, run the common hooks also supported by CTFE.\n-        if this.hook_fn(instance, args, dest)? {\n+        if this.hook_panic_fn(instance, args, dest)? {\n             this.goto_block(ret)?;\n             return Ok(None);\n         }"}]}