{"sha": "1033c74665065eeef460c58381f06144ecd8ecab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMzNjNzQ2NjUwNjVlZWVmNDYwYzU4MzgxZjA2MTQ0ZWNkOGVjYWI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-02T16:05:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-02T16:05:18Z"}, "message": "Rollup merge of #74874 - ssomers:btree_cleanup_8, r=Mark-Simulacrum\n\nBTreeMap: define forget_type only when relevant\n\nSimilar to `forget_node_type` for handles.\nNo effect on generated code, apart maybe from the superfluous calls that might not have been optimized away.\n\nr? @Mark-Simulacrum", "tree": {"sha": "fe074e024d9a44a902d6c8d7549a1de1364ee6b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe074e024d9a44a902d6c8d7549a1de1364ee6b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1033c74665065eeef460c58381f06144ecd8ecab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJuQ+CRBK7hj4Ov3rIwAAdHIIAJdJ1sxJSXLdztOmFw3Bo+RB\nFiEDp+c87dRRda3xbmw83I9VndajwiEe7mL0JcvBe+80moiP1D9PIFxluREzXR3K\n+9Sq1TGzp8rJWmQFzLHRvE00a8mq6OoYib8rSTsVrNBxqYA3n1caLMFu1DZXiiT5\nEV8owKOdVpujWB2fxTdClX8GI9we7seszt04GWsbsFv83mmGVQK/4JGybWedtjY0\nH30ioaeCOpZvHOFKezBhU7MAgcz1oYwMYW3VpEEqyT+Nuc/NOkK1WAb+Euev9/gg\nWgpqAJZUUuyKFCONCWoeH0b4gPjs3CRzseoNM9DedQKgJUDPNc3AqMlsCcE1L4M=\n=3hhA\n-----END PGP SIGNATURE-----\n", "payload": "tree fe074e024d9a44a902d6c8d7549a1de1364ee6b9\nparent 5323b9fd9c86dba71cabec8cbed4330b47fedd0b\nparent 240ef70c7b2a8f6833355d41001bc65b3a660eb3\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1596384318 +0900\ncommitter GitHub <noreply@github.com> 1596384318 +0900\n\nRollup merge of #74874 - ssomers:btree_cleanup_8, r=Mark-Simulacrum\n\nBTreeMap: define forget_type only when relevant\n\nSimilar to `forget_node_type` for handles.\nNo effect on generated code, apart maybe from the superfluous calls that might not have been optimized away.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1033c74665065eeef460c58381f06144ecd8ecab", "html_url": "https://github.com/rust-lang/rust/commit/1033c74665065eeef460c58381f06144ecd8ecab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1033c74665065eeef460c58381f06144ecd8ecab/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5323b9fd9c86dba71cabec8cbed4330b47fedd0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5323b9fd9c86dba71cabec8cbed4330b47fedd0b", "html_url": "https://github.com/rust-lang/rust/commit/5323b9fd9c86dba71cabec8cbed4330b47fedd0b"}, {"sha": "240ef70c7b2a8f6833355d41001bc65b3a660eb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/240ef70c7b2a8f6833355d41001bc65b3a660eb3", "html_url": "https://github.com/rust-lang/rust/commit/240ef70c7b2a8f6833355d41001bc65b3a660eb3"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "0dcb593096467be93aa45c28839f86d143939fc3", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1033c74665065eeef460c58381f06144ecd8ecab/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1033c74665065eeef460c58381f06144ecd8ecab/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=1033c74665065eeef460c58381f06144ecd8ecab", "patch": "@@ -19,7 +19,7 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::E\n                 Ok(internal_kv) => return Ok(internal_kv),\n                 Err(last_edge) => match last_edge.into_node().ascend() {\n                     Ok(parent_edge) => parent_edge.forget_node_type(),\n-                    Err(root) => return Err(root.forget_type()),\n+                    Err(root) => return Err(root),\n                 },\n             }\n         }\n@@ -40,7 +40,7 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::E\n                 Ok(internal_kv) => return Ok(internal_kv),\n                 Err(last_edge) => match last_edge.into_node().ascend() {\n                     Ok(parent_edge) => parent_edge.forget_node_type(),\n-                    Err(root) => return Err(root.forget_type()),\n+                    Err(root) => return Err(root),\n                 },\n             }\n         }"}, {"sha": "b767d9ebed72303cdfc03d05542d5caa519bfb15", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1033c74665065eeef460c58381f06144ecd8ecab/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1033c74665065eeef460c58381f06144ecd8ecab/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=1033c74665065eeef460c58381f06144ecd8ecab", "patch": "@@ -307,12 +307,6 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n         self.height\n     }\n \n-    /// Removes any static information about whether this node is a `Leaf` or an\n-    /// `Internal` node.\n-    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n-        NodeRef { height: self.height, node: self.node, root: self.root, _marker: PhantomData }\n-    }\n-\n     /// Temporarily takes out another, immutable reference to the same node.\n     fn reborrow(&self) -> NodeRef<marker::Immut<'_>, K, V, Type> {\n         NodeRef { height: self.height, node: self.node, root: self.root, _marker: PhantomData }\n@@ -1357,6 +1351,20 @@ unsafe fn move_edges<K, V>(\n     }\n }\n \n+impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Leaf> {\n+    /// Removes any static information asserting that this node is a `Leaf` node.\n+    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n+        NodeRef { height: self.height, node: self.node, root: self.root, _marker: PhantomData }\n+    }\n+}\n+\n+impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {\n+    /// Removes any static information asserting that this node is an `Internal` node.\n+    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n+        NodeRef { height: self.height, node: self.node, root: self.root, _marker: PhantomData }\n+    }\n+}\n+\n impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge> {\n     pub fn forget_node_type(\n         self,"}]}