{"sha": "24be307b53931a9824829f63aa65fa5c6042ed21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YmUzMDdiNTM5MzFhOTgyNDgyOWY2M2FhNjVmYTVjNjA0MmVkMjE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-11T03:14:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-11T18:49:11Z"}, "message": "Suggestion when encountering assoc types from hrtb\n\nWhen encountering E0212, detect whether this is a representable case or\nnot, i.e. if it's happening on an `fn` or on an ADT. If the former,\nprovide a structured suggestion, otherwise note that this can't be\nrepresented in Rust.", "tree": {"sha": "95118c0626a78d6d3a6c38e44ab24645e618aebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95118c0626a78d6d3a6c38e44ab24645e618aebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24be307b53931a9824829f63aa65fa5c6042ed21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24be307b53931a9824829f63aa65fa5c6042ed21", "html_url": "https://github.com/rust-lang/rust/commit/24be307b53931a9824829f63aa65fa5c6042ed21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24be307b53931a9824829f63aa65fa5c6042ed21/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a19edd6b161521a4f66716b3b45b8cf4d3f03f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a19edd6b161521a4f66716b3b45b8cf4d3f03f3a", "html_url": "https://github.com/rust-lang/rust/commit/a19edd6b161521a4f66716b3b45b8cf4d3f03f3a"}], "stats": {"total": 163, "additions": 146, "deletions": 17}, "files": [{"sha": "8d2b6512cfe460ac297d22cc5798afc023197569", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=24be307b53931a9824829f63aa65fa5c6042ed21", "patch": "@@ -278,6 +278,17 @@ impl ItemCtxt<'tcx> {\n     pub fn to_ty(&self, ast_ty: &'tcx hir::Ty<'tcx>) -> Ty<'tcx> {\n         AstConv::ast_ty_to_ty(self, ast_ty)\n     }\n+\n+    pub fn hir_id(&self) -> hir::HirId {\n+        self.tcx\n+            .hir()\n+            .as_local_hir_id(self.item_def_id)\n+            .expect(\"Non-local call to local provider is_const_fn\")\n+    }\n+\n+    pub fn node(&self) -> hir::Node<'tcx> {\n+        self.tcx.hir().get(self.hir_id())\n+    }\n }\n \n impl AstConv<'tcx> for ItemCtxt<'tcx> {\n@@ -290,15 +301,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn default_constness_for_trait_bounds(&self) -> ast::Constness {\n-        // FIXME: refactor this into a method\n-        let hir_id = self\n-            .tcx\n-            .hir()\n-            .as_local_hir_id(self.item_def_id)\n-            .expect(\"Non-local call to local provider is_const_fn\");\n-\n-        let node = self.tcx.hir().get(hir_id);\n-        if let Some(fn_like) = FnLikeNode::from_node(node) {\n+        if let Some(fn_like) = FnLikeNode::from_node(self.node()) {\n             fn_like.constness()\n         } else {\n             ast::Constness::NotConst\n@@ -352,14 +355,42 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n             self.tcx().mk_projection(item_def_id, item_substs)\n         } else {\n             // There are no late-bound regions; we can just ignore the binder.\n-            struct_span_err!(\n+            let mut err = struct_span_err!(\n                 self.tcx().sess,\n                 span,\n                 E0212,\n                 \"cannot extract an associated type from a higher-ranked trait bound \\\n                  in this context\"\n-            )\n-            .emit();\n+            );\n+\n+            match self.node() {\n+                hir::Node::Field(_)\n+                | hir::Node::Variant(_)\n+                | hir::Node::Ctor(_)\n+                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Struct(..), .. })\n+                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Enum(..), .. })\n+                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Union(..), .. }) => {\n+                    // The suggestion is only valid if this is not an ADT.\n+                }\n+                hir::Node::Item(_)\n+                | hir::Node::ForeignItem(_)\n+                | hir::Node::TraitItem(_)\n+                | hir::Node::ImplItem(_) => {\n+                    err.span_suggestion(\n+                        span,\n+                        \"use a fully qualified path with inferred lifetimes\",\n+                        format!(\n+                            \"{}::{}\",\n+                            // Erase named lt, we want `<A as B<'_>::C`, not `<A as B<'a>::C`.\n+                            self.tcx.anonymize_late_bound_regions(&poly_trait_ref).skip_binder(),\n+                            item_segment.ident\n+                        ),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                _ => {}\n+            }\n+            err.emit();\n             self.tcx().types.err\n         }\n     }"}, {"sha": "760d2b433c87aa99148005214b1a2758374c265d", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed?ref=24be307b53931a9824829f63aa65fa5c6042ed21", "patch": "@@ -0,0 +1,37 @@\n+#![allow(dead_code, unused_variables)]\n+// run-rustfix\n+// Check projection of an associated type out of a higher-ranked trait-bound\n+// in the context of a function signature.\n+\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+fn foo2<I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&isize>>::A)\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+{\n+    // This case is illegal because we have to instantiate `'x`, and\n+    // we don't know what region to instantiate it with.\n+    //\n+    // This could perhaps be made equivalent to the examples below,\n+    // specifically for fn signatures.\n+}\n+\n+fn foo3<I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&isize>>::A)\n+{\n+    // OK, in this case we spelled out the precise regions involved, though we left one of\n+    // them anonymous.\n+}\n+\n+fn foo4<'a, I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&'a isize>>::A)\n+{\n+    // OK, in this case we spelled out the precise regions involved.\n+}\n+\n+\n+pub fn main() {}"}, {"sha": "6eb584ea645ac4b6eb19a75956afcf7283972103", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs?ref=24be307b53931a9824829f63aa65fa5c6042ed21", "patch": "@@ -1,3 +1,5 @@\n+#![allow(dead_code, unused_variables)]\n+// run-rustfix\n // Check projection of an associated type out of a higher-ranked trait-bound\n // in the context of a function signature.\n "}, {"sha": "f2137f68665db3c7db89f63becf75f3404b18357", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr?ref=24be307b53931a9824829f63aa65fa5c6042ed21", "patch": "@@ -1,8 +1,8 @@\n error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n-  --> $DIR/associated-types-project-from-hrtb-in-fn.rs:11:8\n+  --> $DIR/associated-types-project-from-hrtb-in-fn.rs:13:8\n    |\n LL |     x: I::A)\n-   |        ^^^^\n+   |        ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n \n error: aborting due to previous error\n "}, {"sha": "acf32bccbecfdf22db7c42d611336455ddf0ddb1", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.fixed", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed?ref=24be307b53931a9824829f63aa65fa5c6042ed21", "patch": "@@ -0,0 +1,38 @@\n+#![allow(dead_code)]\n+// run-rustfix\n+// Check projection of an associated type out of a higher-ranked trait-bound\n+// in the context of a method definition in a trait.\n+\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+trait SomeTrait<I : for<'x> Foo<&'x isize>> {\n+    fn some_method(&self, arg: <I as Foo<&isize>>::A);\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+}\n+\n+trait AnotherTrait<I : for<'x> Foo<&'x isize>> {\n+    fn some_method(&self, arg: <I as Foo<&isize>>::A);\n+}\n+\n+trait YetAnotherTrait<I : for<'x> Foo<&'x isize>> {\n+    fn some_method<'a>(&self, arg: <I as Foo<&'a isize>>::A);\n+}\n+\n+trait Banana<'a> {\n+    type Assoc: Default;\n+}\n+\n+struct Peach<X>(std::marker::PhantomData<X>);\n+\n+impl<X: for<'a> Banana<'a>> Peach<X> {\n+    fn mango(&self) -> <X as Banana<'_>>::Assoc {\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+        Default::default()\n+    }\n+}\n+\n+pub fn main() {}"}, {"sha": "a249f89685e3983098d1d708416636d39ae46e5f", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs?ref=24be307b53931a9824829f63aa65fa5c6042ed21", "patch": "@@ -1,3 +1,5 @@\n+#![allow(dead_code)]\n+// run-rustfix\n // Check projection of an associated type out of a higher-ranked trait-bound\n // in the context of a method definition in a trait.\n \n@@ -20,4 +22,17 @@ trait YetAnotherTrait<I : for<'x> Foo<&'x isize>> {\n     fn some_method<'a>(&self, arg: <I as Foo<&'a isize>>::A);\n }\n \n+trait Banana<'a> {\n+    type Assoc: Default;\n+}\n+\n+struct Peach<X>(std::marker::PhantomData<X>);\n+\n+impl<X: for<'a> Banana<'a>> Peach<X> {\n+    fn mango(&self) -> X::Assoc {\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+        Default::default()\n+    }\n+}\n+\n pub fn main() {}"}, {"sha": "a37fec244933cb172ec1a953e7b89e405e4b2b27", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24be307b53931a9824829f63aa65fa5c6042ed21/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr?ref=24be307b53931a9824829f63aa65fa5c6042ed21", "patch": "@@ -1,8 +1,14 @@\n error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n-  --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:11:32\n+  --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:13:32\n    |\n LL |     fn some_method(&self, arg: I::A);\n-   |                                ^^^^\n+   |                                ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n \n-error: aborting due to previous error\n+error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+  --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:32:24\n+   |\n+LL |     fn mango(&self) -> X::Assoc {\n+   |                        ^^^^^^^^ help: use a fully qualified path with inferred lifetimes: `<X as Banana<'_>>::Assoc`\n+\n+error: aborting due to 2 previous errors\n "}]}