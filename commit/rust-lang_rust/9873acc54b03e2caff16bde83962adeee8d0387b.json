{"sha": "9873acc54b03e2caff16bde83962adeee8d0387b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NzNhY2M1NGIwM2UyY2FmZjE2YmRlODM5NjJhZGVlZThkMDM4N2I=", "commit": {"author": {"name": "Michael Kohl", "email": "citizen428@gmail.com", "date": "2017-05-28T06:49:14Z"}, "committer": {"name": "Michael Kohl", "email": "citizen428@gmail.com", "date": "2017-05-29T17:02:03Z"}, "message": "Remove --crate-type=metadata deprecation warning\n\nFixes #38640", "tree": {"sha": "64846418e2be342e458049cf282f81d7f8bcc85c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64846418e2be342e458049cf282f81d7f8bcc85c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9873acc54b03e2caff16bde83962adeee8d0387b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9873acc54b03e2caff16bde83962adeee8d0387b", "html_url": "https://github.com/rust-lang/rust/commit/9873acc54b03e2caff16bde83962adeee8d0387b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9873acc54b03e2caff16bde83962adeee8d0387b/comments", "author": {"login": "citizen428", "id": 47985, "node_id": "MDQ6VXNlcjQ3OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/47985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/citizen428", "html_url": "https://github.com/citizen428", "followers_url": "https://api.github.com/users/citizen428/followers", "following_url": "https://api.github.com/users/citizen428/following{/other_user}", "gists_url": "https://api.github.com/users/citizen428/gists{/gist_id}", "starred_url": "https://api.github.com/users/citizen428/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/citizen428/subscriptions", "organizations_url": "https://api.github.com/users/citizen428/orgs", "repos_url": "https://api.github.com/users/citizen428/repos", "events_url": "https://api.github.com/users/citizen428/events{/privacy}", "received_events_url": "https://api.github.com/users/citizen428/received_events", "type": "User", "site_admin": false}, "committer": {"login": "citizen428", "id": 47985, "node_id": "MDQ6VXNlcjQ3OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/47985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/citizen428", "html_url": "https://github.com/citizen428", "followers_url": "https://api.github.com/users/citizen428/followers", "following_url": "https://api.github.com/users/citizen428/following{/other_user}", "gists_url": "https://api.github.com/users/citizen428/gists{/gist_id}", "starred_url": "https://api.github.com/users/citizen428/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/citizen428/subscriptions", "organizations_url": "https://api.github.com/users/citizen428/orgs", "repos_url": "https://api.github.com/users/citizen428/repos", "events_url": "https://api.github.com/users/citizen428/events{/privacy}", "received_events_url": "https://api.github.com/users/citizen428/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2512ec5b03a1155054df881e40e35fc87d6351", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2512ec5b03a1155054df881e40e35fc87d6351", "html_url": "https://github.com/rust-lang/rust/commit/5d2512ec5b03a1155054df881e40e35fc87d6351"}], "stats": {"total": 18, "additions": 4, "deletions": 14}, "files": [{"sha": "589489b49b4fd1a629e51a8875df09f66fbf4742", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9873acc54b03e2caff16bde83962adeee8d0387b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9873acc54b03e2caff16bde83962adeee8d0387b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9873acc54b03e2caff16bde83962adeee8d0387b", "patch": "@@ -1354,7 +1354,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     };\n \n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n-    let (crate_types, emit_metadata) = parse_crate_types_from_list(unparsed_crate_types)\n+    let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n     let mut lint_opts = vec![];\n@@ -1402,9 +1402,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n             }\n         }\n     };\n-    if emit_metadata {\n-        output_types.insert(OutputType::Metadata, None);\n-    } else if output_types.is_empty() {\n+    if output_types.is_empty() {\n         output_types.insert(OutputType::Exe, None);\n     }\n \n@@ -1629,9 +1627,8 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n }\n \n pub fn parse_crate_types_from_list(list_list: Vec<String>)\n-                                   -> Result<(Vec<CrateType>, bool), String> {\n+                                   -> Result<Vec<CrateType>, String> {\n     let mut crate_types: Vec<CrateType> = Vec::new();\n-    let mut emit_metadata = false;\n     for unparsed_crate_type in &list_list {\n         for part in unparsed_crate_type.split(',') {\n             let new_part = match part {\n@@ -1642,13 +1639,6 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>)\n                 \"cdylib\"    => CrateTypeCdylib,\n                 \"bin\"       => CrateTypeExecutable,\n                 \"proc-macro\" => CrateTypeProcMacro,\n-                // FIXME(#38640) remove this when Cargo is fixed.\n-                \"metadata\"  => {\n-                    early_warn(ErrorOutputType::default(), \"--crate-type=metadata is deprecated, \\\n-                                                            prefer --emit=metadata\");\n-                    emit_metadata = true;\n-                    CrateTypeRlib\n-                }\n                 _ => {\n                     return Err(format!(\"unknown crate type: `{}`\",\n                                        part));\n@@ -1660,7 +1650,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>)\n         }\n     }\n \n-    return Ok((crate_types, emit_metadata));\n+    Ok(crate_types)\n }\n \n pub mod nightly_options {"}]}