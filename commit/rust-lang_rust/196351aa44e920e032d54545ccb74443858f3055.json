{"sha": "196351aa44e920e032d54545ccb74443858f3055", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NjM1MWFhNDRlOTIwZTAzMmQ1NDU0NWNjYjc0NDQzODU4ZjMwNTU=", "commit": {"author": {"name": "Kelly Wilson", "email": "wilsonk@cpsc.ucalgary.ca", "date": "2011-05-16T15:01:36Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-16T21:07:43Z"}, "message": "Add automatic exe generation capabilities. Add --bitcode flag to generate only an LLVM bitcode file.", "tree": {"sha": "6079477509316edbc2e9724cf369501a5084e6f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6079477509316edbc2e9724cf369501a5084e6f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/196351aa44e920e032d54545ccb74443858f3055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/196351aa44e920e032d54545ccb74443858f3055", "html_url": "https://github.com/rust-lang/rust/commit/196351aa44e920e032d54545ccb74443858f3055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/196351aa44e920e032d54545ccb74443858f3055/comments", "author": {"login": "wilsonk", "id": 38802, "node_id": "MDQ6VXNlcjM4ODAy", "avatar_url": "https://avatars.githubusercontent.com/u/38802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wilsonk", "html_url": "https://github.com/wilsonk", "followers_url": "https://api.github.com/users/wilsonk/followers", "following_url": "https://api.github.com/users/wilsonk/following{/other_user}", "gists_url": "https://api.github.com/users/wilsonk/gists{/gist_id}", "starred_url": "https://api.github.com/users/wilsonk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wilsonk/subscriptions", "organizations_url": "https://api.github.com/users/wilsonk/orgs", "repos_url": "https://api.github.com/users/wilsonk/repos", "events_url": "https://api.github.com/users/wilsonk/events{/privacy}", "received_events_url": "https://api.github.com/users/wilsonk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32b8dcb97c29b723579fdeb0d93c16917762ae08", "url": "https://api.github.com/repos/rust-lang/rust/commits/32b8dcb97c29b723579fdeb0d93c16917762ae08", "html_url": "https://github.com/rust-lang/rust/commit/32b8dcb97c29b723579fdeb0d93c16917762ae08"}], "stats": {"total": 136, "additions": 110, "deletions": 26}, "files": [{"sha": "3598a221b999ea7c74e4c6ff410a1e5682377069", "filename": "src/comp/README", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/196351aa44e920e032d54545ccb74443858f3055/src%2Fcomp%2FREADME", "raw_url": "https://github.com/rust-lang/rust/raw/196351aa44e920e032d54545ccb74443858f3055/src%2Fcomp%2FREADME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2FREADME?ref=196351aa44e920e032d54545ccb74443858f3055", "patch": "@@ -73,5 +73,5 @@ Control and information flow within the compiler:\n \n - Finally middle/trans.rs is applied to the AST, which performs a\n   type-directed translation to LLVM-ese. When it's finished synthesizing LLVM\n-  values, rustc asks LLVM to write them out as a bitcode file, on which you\n-  can run the normal LLVM pipeline (opt, llc, as) to get an executable.\n+  values, rustc asks LLVM to write them out as an executable, on which the\n+  normal LLVM pipeline (opt, llc, as) was run."}, {"sha": "1652863de9784e8040c164642adcb2a22f96dde7", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/196351aa44e920e032d54545ccb74443858f3055/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196351aa44e920e032d54545ccb74443858f3055/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=196351aa44e920e032d54545ccb74443858f3055", "patch": "@@ -17,6 +17,7 @@ tag output_type {\n     output_type_bitcode;\n     output_type_assembly;\n     output_type_object;\n+    output_type_exe;\n }\n \n fn llvm_err(session::session sess, str msg) {\n@@ -56,11 +57,10 @@ fn link_intrinsics(session::session sess, ModuleRef llmod) {\n }\n \n mod write {\n-    fn is_object_or_assembly(output_type ot) -> bool {\n-        if (ot == output_type_assembly) {\n-            ret true;\n-        }\n-        if (ot == output_type_object) {\n+    fn is_object_or_assembly_or_exe(output_type ot) -> bool {\n+        if ( (ot == output_type_assembly) || \n+             (ot == output_type_object) ||\n+             (ot == output_type_exe) ) {\n             ret true;\n         }\n         ret false;\n@@ -143,44 +143,62 @@ mod write {\n             llvm::LLVMAddVerifierPass(pm.llpm);\n         }\n \n-        // TODO: Write .s if -c was specified and -save-temps was on.\n-        if (is_object_or_assembly(opts.output_type)) {\n+        if (is_object_or_assembly_or_exe(opts.output_type)) {\n             let int LLVMAssemblyFile = 0;\n             let int LLVMObjectFile = 1;\n             let int LLVMNullFile = 2;\n             auto FileType;\n-            if (opts.output_type == output_type_object) {\n+            if ((opts.output_type == output_type_object) ||\n+                (opts.output_type == output_type_exe)) {\n                 FileType = LLVMObjectFile;\n             } else {\n                 FileType = LLVMAssemblyFile;\n             }\n \n             // Write optimized bitcode if --save-temps was on.\n             if (opts.save_temps) {\n-                alt (opts.output_type) {\n-                    case (output_type_bitcode) { /* nothing to do */ }\n-                    case (_) {\n-                        auto filename = mk_intermediate_name(output,\n-                                                             \"opt.bc\");\n-                        llvm::LLVMRunPassManager(pm.llpm, llmod);\n-                        llvm::LLVMWriteBitcodeToFile(llmod,\n-                                                    _str::buf(filename));\n-                        pm = mk_pass_manager();\n-                    }\n+\n+                // Always output the bitcode file with --save-temps\n+                auto filename = mk_intermediate_name(output, \"opt.bc\");\n+                llvm::LLVMRunPassManager(pm.llpm, llmod);\n+                llvm::LLVMWriteBitcodeToFile(llmod, _str::buf(output));\n+                pm = mk_pass_manager();\n+\n+                // Save the assembly file if -S is used\n+                if (opts.output_type == output_type_assembly) {\n+                        llvm::LLVMRustWriteOutputFile(pm.llpm, llmod,\n+                               _str::buf(x86::get_target_triple()),\n+                               _str::buf(output), LLVMAssemblyFile);\n                 }\n+\n+                // Save the object file for -c or only --save-temps\n+                // is used and an exe is built\n+                if ((opts.output_type == output_type_object) ||\n+                    (opts.output_type == output_type_exe)) {\n+                        llvm::LLVMRustWriteOutputFile(pm.llpm, llmod,\n+                               _str::buf(x86::get_target_triple()),\n+                               _str::buf(output), LLVMObjectFile);\n+               }\n+            } else {\n+\n+                // If we aren't saving temps then just output the file\n+                // type corresponding to the '-c' or '-S' flag used\n+                llvm::LLVMRustWriteOutputFile(pm.llpm, llmod,\n+                                     _str::buf(x86::get_target_triple()),\n+                                     _str::buf(output),\n+                                     FileType);\n             }\n \n-            llvm::LLVMRustWriteOutputFile(pm.llpm, llmod,\n-                                         _str::buf(x86::get_target_triple()),\n-                                         _str::buf(output),\n-                                         FileType);\n+            // Clean up and return\n             llvm::LLVMDisposeModule(llmod);\n             if (opts.time_llvm_passes) {\n               llvm::LLVMRustPrintPassTimings();\n             }\n             ret;\n         }\n \n+        // If only a bitcode file is asked for by using the '--bitcode'\n+        // flag, then output it here\n         llvm::LLVMRunPassManager(pm.llpm, llmod);\n \n         llvm::LLVMWriteBitcodeToFile(llmod, _str::buf(output));"}, {"sha": "279f69ac6168602fa3e615664e44b9e53adeb1fa", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 68, "deletions": 2, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/196351aa44e920e032d54545ccb74443858f3055/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196351aa44e920e032d54545ccb74443858f3055/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=196351aa44e920e032d54545ccb74443858f3055", "patch": "@@ -22,6 +22,7 @@ import std::option::none;\n import std::_str;\n import std::_vec;\n import std::io;\n+import std::run;\n \n import std::getopts;\n import std::getopts::optopt;\n@@ -154,6 +155,7 @@ options:\n     -O                 optimize\n     -S                 compile only; do not assemble or link\n     -c                 compile and assemble, but do not link\n+    --bitcode          produce an LLVM bitcode file\n     --save-temps       write intermediate files in addition to normal output\n     --stats            gather and report various compilation statistics\n     --time-passes      time the individual phases of the compiler\n@@ -205,7 +207,7 @@ fn main(vec[str] args) {\n \n     auto opts = vec(optflag(\"h\"), optflag(\"help\"),\n                     optflag(\"v\"), optflag(\"version\"),\n-                    optflag(\"glue\"),\n+                    optflag(\"glue\"), optflag(\"bitcode\"),\n                     optflag(\"pretty\"), optflag(\"ls\"), optflag(\"parse-only\"),\n                     optflag(\"O\"), optflag(\"shared\"), optmulti(\"L\"),\n                     optflag(\"S\"), optflag(\"c\"), optopt(\"o\"), optflag(\"g\"),\n@@ -241,13 +243,15 @@ fn main(vec[str] args) {\n     auto output_file = getopts::opt_maybe_str(match, \"o\");\n     auto library_search_paths = getopts::opt_strs(match, \"L\");\n \n-    auto output_type = link::output_type_bitcode;\n+    auto output_type = link::output_type_exe;\n     if (opt_present(match, \"parse-only\")) {\n         output_type = link::output_type_none;\n     } else if (opt_present(match, \"S\")) {\n         output_type = link::output_type_assembly;\n     } else if (opt_present(match, \"c\")) {\n         output_type = link::output_type_object;\n+    } else if (opt_present(match, \"bitcode\")) {\n+        output_type = link::output_type_bitcode;\n     }\n \n     auto verify = !opt_present(match, \"noverify\");\n@@ -306,6 +310,7 @@ fn main(vec[str] args) {\n     }\n \n     auto ifile = match.free.(0);\n+    let str saved_out_filename = \"\";\n     auto env = default_environment(sess, args.(0), ifile);\n     if (pretty) {\n         pretty_print_input(sess, env, ifile);\n@@ -316,20 +321,81 @@ fn main(vec[str] args) {\n             case (none[str]) {\n                 let vec[str] parts = _str::split(ifile, '.' as u8);\n                 _vec::pop[str](parts);\n+                saved_out_filename = parts.(0);\n                 alt (output_type) {\n                     case (link::output_type_none) { parts += vec(\"pp\"); }\n                     case (link::output_type_bitcode) { parts += vec(\"bc\"); }\n                     case (link::output_type_assembly) { parts += vec(\"s\"); }\n+\n+                    // Object and exe output both use the '.o' extension here\n                     case (link::output_type_object) { parts += vec(\"o\"); }\n+                    case (link::output_type_exe) { parts += vec(\"o\"); }\n                 }\n                 auto ofile = _str::connect(parts, \".\");\n                 compile_input(sess, env, ifile, ofile);\n             }\n             case (some[str](?ofile)) {\n+                saved_out_filename = ofile;\n                 compile_input(sess, env, ifile, ofile);\n             }\n         }\n     }\n+\n+    // If the user wants an exe generated we need to invoke\n+    // gcc to link the object file with some libs\n+    if (output_type == link::output_type_exe) {\n+\n+        //FIXME: Should we make the 'stage3's variable here?\n+        let str glu = \"stage3/glue.o\";\n+        let str stage = \"-Lstage3\";\n+        let vec[str] gcc_args;\n+        let str prog = \"gcc\";\n+        let str exe_suffix = \"\";\n+\n+        // The invocations of gcc share some flags across platforms\n+        let vec[str] common_cflags = vec(\"-fno-strict-aliasing\", \"-fPIC\",\n+                           \"-Wall\", \"-fno-rtti\", \"-fno-exceptions\", \"-g\");\n+        let vec[str] common_libs = vec(stage, \"-Lrustllvm\", \"-Lrt\",\n+                           \"-lrustrt\", \"-lrustllvm\", \"-lstd\", \"-lm\");\n+\n+        alt (sess.get_targ_cfg().os) {\n+            case (session::os_win32) {\n+                exe_suffix = \".exe\";\n+                gcc_args = common_cflags + vec(\n+                            \"-march=i686\", \"-O2\",\n+                            glu, \"-o\",\n+                            saved_out_filename + exe_suffix,\n+                            saved_out_filename + \".o\") + common_libs;\n+            }\n+            case (session::os_macos) {\n+                gcc_args = common_cflags + vec(\n+                           \"-arch i386\", \"-O0\", \"-m32\",\n+                           glu, \"-o\",\n+                           saved_out_filename + exe_suffix,\n+                           saved_out_filename + \".o\") + common_libs;\n+            }\n+            case (session::os_linux) {\n+                gcc_args = common_cflags + vec(\n+                           \"-march=i686\", \"-O2\", \"-m32\",\n+                           glu, \"-o\",\n+                           saved_out_filename + exe_suffix,\n+                           saved_out_filename + \".o\") + common_libs;\n+            }\n+        }\n+\n+        // We run 'gcc' here\n+        run::run_program(prog, gcc_args);\n+\n+        // Clean up on Darwin\n+        if (sess.get_targ_cfg().os == session::os_macos) {\n+            run::run_program(\"dsymutil\", vec(saved_out_filename));\n+        }\n+\n+        // Remove the temporary object file if we aren't saving temps\n+        if (!save_temps) {\n+            run::run_program(\"rm\", vec(saved_out_filename + \".o\"));\n+        }\n+    }\n }\n \n // Local Variables:"}]}