{"sha": "f0bab98695f0a4877daabad9a5b0ba3e66121392", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYmFiOTg2OTVmMGE0ODc3ZGFhYmFkOWE1YjBiYTNlNjYxMjEzOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-15T04:38:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-15T04:38:21Z"}, "message": "Auto merge of #35638 - ahmedcharles:url, r=alexcrichton\n\nUpgrade linkchecker to url 1.2.0.", "tree": {"sha": "62ebe961938e671379c36f7d1369a74ed49d63a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62ebe961938e671379c36f7d1369a74ed49d63a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0bab98695f0a4877daabad9a5b0ba3e66121392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0bab98695f0a4877daabad9a5b0ba3e66121392", "html_url": "https://github.com/rust-lang/rust/commit/f0bab98695f0a4877daabad9a5b0ba3e66121392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0bab98695f0a4877daabad9a5b0ba3e66121392/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47e6da2a01c284f383ad9658e33735f78e262ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e6da2a01c284f383ad9658e33735f78e262ade", "html_url": "https://github.com/rust-lang/rust/commit/47e6da2a01c284f383ad9658e33735f78e262ade"}, {"sha": "d56a5b9af7c9fe972327b5a86548a9c61f89eafc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56a5b9af7c9fe972327b5a86548a9c61f89eafc", "html_url": "https://github.com/rust-lang/rust/commit/d56a5b9af7c9fe972327b5a86548a9c61f89eafc"}], "stats": {"total": 65, "additions": 20, "deletions": 45}, "files": [{"sha": "ed5fe081ffb2efed86a5225df5c15c0bdc56e660", "filename": "src/tools/linkchecker/Cargo.lock", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f0bab98695f0a4877daabad9a5b0ba3e66121392/src%2Ftools%2Flinkchecker%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f0bab98695f0a4877daabad9a5b0ba3e66121392/src%2Ftools%2Flinkchecker%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2FCargo.lock?ref=f0bab98695f0a4877daabad9a5b0ba3e66121392", "patch": "@@ -2,30 +2,22 @@\n name = \"linkchecker\"\n version = \"0.1.0\"\n dependencies = [\n- \"url 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"libc\"\n-version = \"0.2.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"matches\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"rand\"\n-version = \"0.3.14\"\n+name = \"idna\"\n+version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-bidi 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-normalization 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"rustc-serialize\"\n-version = \"0.3.18\"\n+name = \"matches\"\n+version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -43,22 +35,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"url\"\n-version = \"0.5.5\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"idna 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-bidi 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-normalization 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"uuid 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"uuid\"\n-version = \"0.1.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rand 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n "}, {"sha": "415b6f0567288edd9832085c39dcc2f64867f472", "filename": "src/tools/linkchecker/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0bab98695f0a4877daabad9a5b0ba3e66121392/src%2Ftools%2Flinkchecker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f0bab98695f0a4877daabad9a5b0ba3e66121392/src%2Ftools%2Flinkchecker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2FCargo.toml?ref=f0bab98695f0a4877daabad9a5b0ba3e66121392", "patch": "@@ -4,7 +4,7 @@ version = \"0.1.0\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n \n [dependencies]\n-url = \"0.5\"\n+url = \"1.2\"\n \n [[bin]]\n name = \"linkchecker\""}, {"sha": "27adabbc72e588c8398ffc1bdca28ce2a9d45de9", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f0bab98695f0a4877daabad9a5b0ba3e66121392/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bab98695f0a4877daabad9a5b0ba3e66121392/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=f0bab98695f0a4877daabad9a5b0ba3e66121392", "patch": "@@ -33,7 +33,7 @@ use std::path::{Path, PathBuf};\n use std::collections::{HashMap, HashSet};\n use std::collections::hash_map::Entry;\n \n-use url::{Url, UrlParser};\n+use url::Url;\n \n use Redirect::*;\n \n@@ -92,7 +92,7 @@ fn walk(cache: &mut Cache, root: &Path, dir: &Path, url: &mut Url, errors: &mut\n     for entry in t!(dir.read_dir()).map(|e| t!(e)) {\n         let path = entry.path();\n         let kind = t!(entry.file_type());\n-        url.path_mut().unwrap().push(entry.file_name().into_string().unwrap());\n+        url.path_segments_mut().unwrap().push(entry.file_name().to_str().unwrap());\n         if kind.is_dir() {\n             walk(cache, root, &path, url, errors);\n         } else {\n@@ -104,7 +104,7 @@ fn walk(cache: &mut Cache, root: &Path, dir: &Path, url: &mut Url, errors: &mut\n                 entry.source = String::new();\n             }\n         }\n-        url.path_mut().unwrap().pop();\n+        url.path_segments_mut().unwrap().pop();\n     }\n }\n \n@@ -138,9 +138,6 @@ fn check(cache: &mut Cache,\n         return None;\n     }\n \n-    let mut parser = UrlParser::new();\n-    parser.base_url(base);\n-\n     let res = load_file(cache, root, PathBuf::from(file), SkipRedirect);\n     let (pretty_file, contents) = match res {\n         Ok(res) => res,\n@@ -162,7 +159,7 @@ fn check(cache: &mut Cache,\n         }\n         // Once we've plucked out the URL, parse it using our base url and\n         // then try to extract a file path.\n-        let (parsed_url, path) = match url_to_file_path(&parser, url) {\n+        let (parsed_url, path) = match url_to_file_path(&base, url) {\n             Some((url, path)) => (url, PathBuf::from(path)),\n             None => {\n                 *errors = true;\n@@ -203,7 +200,7 @@ fn check(cache: &mut Cache,\n                 Err(LoadError::IsRedirect) => unreachable!(),\n             };\n \n-            if let Some(ref fragment) = parsed_url.fragment {\n+            if let Some(ref fragment) = parsed_url.fragment() {\n                 // Fragments like `#1-6` are most likely line numbers to be\n                 // interpreted by javascript, so we're ignoring these\n                 if fragment.splitn(2, '-')\n@@ -214,7 +211,7 @@ fn check(cache: &mut Cache,\n                 let entry = &mut cache.get_mut(&pretty_path).unwrap();\n                 entry.parse_ids(&pretty_path, &contents, errors);\n \n-                if !entry.ids.contains(fragment) {\n+                if !entry.ids.contains(*fragment) {\n                     *errors = true;\n                     print!(\"{}:{}: broken link fragment  \",\n                            pretty_file.display(),\n@@ -271,10 +268,8 @@ fn load_file(cache: &mut Cache,\n         }\n     };\n     let base = Url::from_file_path(&file).unwrap();\n-    let mut parser = UrlParser::new();\n-    parser.base_url(&base);\n \n-    match maybe_redirect.and_then(|url| url_to_file_path(&parser, &url)) {\n+    match maybe_redirect.and_then(|url| url_to_file_path(&base, &url)) {\n         Some((_, redirect_file)) => {\n             let path = PathBuf::from(redirect_file);\n             load_file(cache, root, path, FromRedirect(true))\n@@ -299,8 +294,8 @@ fn maybe_redirect(source: &str) -> Option<String> {\n     })\n }\n \n-fn url_to_file_path(parser: &UrlParser, url: &str) -> Option<(Url, PathBuf)> {\n-    parser.parse(url)\n+fn url_to_file_path(parser: &Url, url: &str) -> Option<(Url, PathBuf)> {\n+    parser.join(url)\n           .ok()\n           .and_then(|parsed_url| parsed_url.to_file_path().ok().map(|f| (parsed_url, f)))\n }"}]}