{"sha": "709462bfe113c20ed780e6ca2d8fe3516be2d124", "node_id": "C_kwDOAAsO6NoAKDcwOTQ2MmJmZTExM2MyMGVkNzgwZTZjYTJkOGZlMzUxNmJlMmQxMjQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-26T12:02:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-26T12:02:55Z"}, "message": "Rollup merge of #103546 - RalfJung:cast, r=oli-obk\n\ninterpret: a bit of cast cleanup\n\nr? `@oli-obk`", "tree": {"sha": "9abb6f3a0c855375ad370bdcec2ea70ebd752b75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9abb6f3a0c855375ad370bdcec2ea70ebd752b75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/709462bfe113c20ed780e6ca2d8fe3516be2d124", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWSHvCRBK7hj4Ov3rIwAAEo0IADv8QbgUnGrQhn2a4FbgCNUR\nQL+O3qLwSB7D8dsbBNRZ3z+31dVWQiySzZpz+BYcY/gfQT5PCTwaTu4YPjKnwjy/\nzYBQi6ndT6NcOcNVHSKp4gyElJlygfn0aqal6fn1AEtInNaic/otj6UlujfHb2HV\nIggaStbi7+Hrnj5P1Zj8iOl0z70U+04BgkgnJCCQ+TDzHD0xmmmlSAfFgFylSqqG\njA9o8UjSqKDWs43rP8yIoBVSdqBpYF3Fptd8nZyHntSwuzDl65UJyhlu6a/ayEXo\nMwqN/u+hypcRw55Xq4Td3bMnQXq17k6Ndb/kekMhsCD0XNfYn0+ID/RSfs8WcJ8=\n=t/pP\n-----END PGP SIGNATURE-----\n", "payload": "tree 9abb6f3a0c855375ad370bdcec2ea70ebd752b75\nparent 14f601bc8423a961127dc05b9e4e5e1f3cd22bbb\nparent 52fda858ddb5f4a6ce2826f7305ac83973a0ad43\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666785775 +0530\ncommitter GitHub <noreply@github.com> 1666785775 +0530\n\nRollup merge of #103546 - RalfJung:cast, r=oli-obk\n\ninterpret: a bit of cast cleanup\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/709462bfe113c20ed780e6ca2d8fe3516be2d124", "html_url": "https://github.com/rust-lang/rust/commit/709462bfe113c20ed780e6ca2d8fe3516be2d124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/709462bfe113c20ed780e6ca2d8fe3516be2d124/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f601bc8423a961127dc05b9e4e5e1f3cd22bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f601bc8423a961127dc05b9e4e5e1f3cd22bbb", "html_url": "https://github.com/rust-lang/rust/commit/14f601bc8423a961127dc05b9e4e5e1f3cd22bbb"}, {"sha": "52fda858ddb5f4a6ce2826f7305ac83973a0ad43", "url": "https://api.github.com/repos/rust-lang/rust/commits/52fda858ddb5f4a6ce2826f7305ac83973a0ad43", "html_url": "https://github.com/rust-lang/rust/commit/52fda858ddb5f4a6ce2826f7305ac83973a0ad43"}], "stats": {"total": 61, "additions": 30, "deletions": 31}, "files": [{"sha": "269ae15d4974547f929544764313ce900982ecc0", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/709462bfe113c20ed780e6ca2d8fe3516be2d124/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709462bfe113c20ed780e6ca2d8fe3516be2d124/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=709462bfe113c20ed780e6ca2d8fe3516be2d124", "patch": "@@ -138,21 +138,19 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n+    /// Handles 'IntToInt' and 'IntToFloat' casts.\n     pub fn int_to_int_or_float(\n         &self,\n         src: &ImmTy<'tcx, M::Provenance>,\n         cast_ty: Ty<'tcx>,\n     ) -> InterpResult<'tcx, Immediate<M::Provenance>> {\n-        if (src.layout.ty.is_integral() || src.layout.ty.is_char() || src.layout.ty.is_bool())\n-            && (cast_ty.is_floating_point() || cast_ty.is_integral() || cast_ty.is_char())\n-        {\n-            let scalar = src.to_scalar();\n-            Ok(self.cast_from_int_like(scalar, src.layout, cast_ty)?.into())\n-        } else {\n-            bug!(\"Unexpected cast from type {:?}\", src.layout.ty)\n-        }\n+        assert!(src.layout.ty.is_integral() || src.layout.ty.is_char() || src.layout.ty.is_bool());\n+        assert!(cast_ty.is_floating_point() || cast_ty.is_integral() || cast_ty.is_char());\n+\n+        Ok(self.cast_from_int_like(src.to_scalar(), src.layout, cast_ty)?.into())\n     }\n \n+    /// Handles 'FloatToFloat' and 'FloatToInt' casts.\n     pub fn float_to_float_or_int(\n         &self,\n         src: &ImmTy<'tcx, M::Provenance>,\n@@ -180,31 +178,29 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         src: &ImmTy<'tcx, M::Provenance>,\n         cast_ty: Ty<'tcx>,\n     ) -> InterpResult<'tcx, Immediate<M::Provenance>> {\n+        assert!(src.layout.ty.is_any_ptr());\n+        assert!(cast_ty.is_unsafe_ptr());\n         // Handle casting any ptr to raw ptr (might be a fat ptr).\n-        if src.layout.ty.is_any_ptr() && cast_ty.is_unsafe_ptr() {\n-            let dest_layout = self.layout_of(cast_ty)?;\n-            if dest_layout.size == src.layout.size {\n-                // Thin or fat pointer that just hast the ptr kind of target type changed.\n-                return Ok(**src);\n-            } else {\n-                // Casting the metadata away from a fat ptr.\n-                assert_eq!(src.layout.size, 2 * self.pointer_size());\n-                assert_eq!(dest_layout.size, self.pointer_size());\n-                assert!(src.layout.ty.is_unsafe_ptr());\n-                return match **src {\n-                    Immediate::ScalarPair(data, _) => Ok(data.into()),\n-                    Immediate::Scalar(..) => span_bug!(\n-                        self.cur_span(),\n-                        \"{:?} input to a fat-to-thin cast ({:?} -> {:?})\",\n-                        *src,\n-                        src.layout.ty,\n-                        cast_ty\n-                    ),\n-                    Immediate::Uninit => throw_ub!(InvalidUninitBytes(None)),\n-                };\n-            }\n+        let dest_layout = self.layout_of(cast_ty)?;\n+        if dest_layout.size == src.layout.size {\n+            // Thin or fat pointer that just hast the ptr kind of target type changed.\n+            return Ok(**src);\n         } else {\n-            bug!(\"Can't cast 'Ptr' or 'FnPtr' into {:?}\", cast_ty);\n+            // Casting the metadata away from a fat ptr.\n+            assert_eq!(src.layout.size, 2 * self.pointer_size());\n+            assert_eq!(dest_layout.size, self.pointer_size());\n+            assert!(src.layout.ty.is_unsafe_ptr());\n+            return match **src {\n+                Immediate::ScalarPair(data, _) => Ok(data.into()),\n+                Immediate::Scalar(..) => span_bug!(\n+                    self.cur_span(),\n+                    \"{:?} input to a fat-to-thin cast ({:?} -> {:?})\",\n+                    *src,\n+                    src.layout.ty,\n+                    cast_ty\n+                ),\n+                Immediate::Uninit => throw_ub!(InvalidUninitBytes(None)),\n+            };\n         }\n     }\n \n@@ -243,6 +239,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(Scalar::from_maybe_pointer(ptr, self).into())\n     }\n \n+    /// Low-level cast helper function. This works directly on scalars and can take 'int-like' input\n+    /// type (basically everything with a scalar layout) to int/float/char types.\n     pub fn cast_from_int_like(\n         &self,\n         scalar: Scalar<M::Provenance>, // input value (there is no ScalarTy so we separate data+layout)\n@@ -282,6 +280,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         })\n     }\n \n+    /// Low-level cast helper function. Converts an apfloat `f` into int or float types.\n     fn cast_from_float<F>(&self, f: F, dest_ty: Ty<'tcx>) -> Scalar<M::Provenance>\n     where\n         F: Float + Into<Scalar<M::Provenance>> + FloatConvert<Single> + FloatConvert<Double>,"}]}