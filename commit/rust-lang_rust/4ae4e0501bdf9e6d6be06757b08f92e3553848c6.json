{"sha": "4ae4e0501bdf9e6d6be06757b08f92e3553848c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZTRlMDUwMWJkZjllNmQ2YmUwNjc1N2IwOGY5MmUzNTUzODQ4YzY=", "commit": {"author": {"name": "Lucas Molas", "email": "schomatis@gmail.com", "date": "2019-02-15T02:49:45Z"}, "committer": {"name": "Lucas Molas", "email": "schomatis@gmail.com", "date": "2019-02-16T00:09:53Z"}, "message": "nll: remove `NllLivenessMap` from `LocalUseMap`\n\nExtend `LocalUseMap`'s `IndexVec`s that track def/use/drop data to store the\noriginal `Local` indexes and not the compacted `LiveVar` ones (favoring speed\nand code simplicity over space). Remove the `NllLivenessMap` embedded inside it\nsince it's no longer needed to perform the `LiveVar`/`Local` conversion.", "tree": {"sha": "43b4103dae657045031d88d68571449d5c9d74dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43b4103dae657045031d88d68571449d5c9d74dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae4e0501bdf9e6d6be06757b08f92e3553848c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae4e0501bdf9e6d6be06757b08f92e3553848c6", "html_url": "https://github.com/rust-lang/rust/commit/4ae4e0501bdf9e6d6be06757b08f92e3553848c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae4e0501bdf9e6d6be06757b08f92e3553848c6/comments", "author": {"login": "schomatis", "id": 10407385, "node_id": "MDQ6VXNlcjEwNDA3Mzg1", "avatar_url": "https://avatars.githubusercontent.com/u/10407385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schomatis", "html_url": "https://github.com/schomatis", "followers_url": "https://api.github.com/users/schomatis/followers", "following_url": "https://api.github.com/users/schomatis/following{/other_user}", "gists_url": "https://api.github.com/users/schomatis/gists{/gist_id}", "starred_url": "https://api.github.com/users/schomatis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schomatis/subscriptions", "organizations_url": "https://api.github.com/users/schomatis/orgs", "repos_url": "https://api.github.com/users/schomatis/repos", "events_url": "https://api.github.com/users/schomatis/events{/privacy}", "received_events_url": "https://api.github.com/users/schomatis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "schomatis", "id": 10407385, "node_id": "MDQ6VXNlcjEwNDA3Mzg1", "avatar_url": "https://avatars.githubusercontent.com/u/10407385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schomatis", "html_url": "https://github.com/schomatis", "followers_url": "https://api.github.com/users/schomatis/followers", "following_url": "https://api.github.com/users/schomatis/following{/other_user}", "gists_url": "https://api.github.com/users/schomatis/gists{/gist_id}", "starred_url": "https://api.github.com/users/schomatis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schomatis/subscriptions", "organizations_url": "https://api.github.com/users/schomatis/orgs", "repos_url": "https://api.github.com/users/schomatis/repos", "events_url": "https://api.github.com/users/schomatis/events{/privacy}", "received_events_url": "https://api.github.com/users/schomatis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "200bc02a5e41e763175b5fa9eb97f27a472c777f", "url": "https://api.github.com/repos/rust-lang/rust/commits/200bc02a5e41e763175b5fa9eb97f27a472c777f", "html_url": "https://github.com/rust-lang/rust/commit/200bc02a5e41e763175b5fa9eb97f27a472c777f"}], "stats": {"total": 85, "additions": 52, "deletions": 33}, "files": [{"sha": "9b8940098852c1bcb1f71aac390a8e31f57eadd3", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 49, "deletions": 30, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4ae4e0501bdf9e6d6be06757b08f92e3553848c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae4e0501bdf9e6d6be06757b08f92e3553848c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=4ae4e0501bdf9e6d6be06757b08f92e3553848c6", "patch": "@@ -1,6 +1,5 @@\n use crate::borrow_check::nll::region_infer::values::{PointIndex, RegionValueElements};\n-use crate::borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n-use crate::util::liveness::{categorize, DefUse, LiveVariableMap};\n+use crate::util::liveness::{categorize, DefUse};\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::{Local, Location, Mir};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -9,26 +8,33 @@ use rustc_data_structures::vec_linked_list as vll;\n /// A map that cross references each local with the locations where it\n /// is defined (assigned), used, or dropped. Used during liveness\n /// computation.\n-crate struct LocalUseMap<'me> {\n-    liveness_map: &'me NllLivenessMap,\n-\n+///\n+/// We keep track only of `Local`s we'll do the liveness analysis later,\n+/// this means that our internal `IndexVec`s will only be sparsely populated.\n+/// In the time-memory trade-off between keeping compact vectors with new\n+/// indexes (and needing to continuously map the `Local` index to its compact\n+/// counterpart) and having `IndexVec`s that we only use a fraction of, time\n+/// (and code simplicity) was favored. The rationale is that we only keep\n+/// a small number of `IndexVec`s throughout the entire analysis while, in\n+/// contrast, we're accessing each `Local` *many* times.\n+crate struct LocalUseMap {\n     /// Head of a linked list of **definitions** of each variable --\n     /// definition in this context means assignment, e.g., `x` is\n     /// defined in `x = y` but not `y`; that first def is the head of\n     /// a linked list that lets you enumerate all places the variable\n     /// is assigned.\n-    first_def_at: IndexVec<LiveVar, Option<AppearanceIndex>>,\n+    first_def_at: IndexVec<Local, Option<AppearanceIndex>>,\n \n     /// Head of a linked list of **uses** of each variable -- use in\n     /// this context means that the existing value of the variable is\n     /// read or modified. e.g., `y` is used in `x = y` but not `x`.\n     /// Note that `DROP(x)` terminators are excluded from this list.\n-    first_use_at: IndexVec<LiveVar, Option<AppearanceIndex>>,\n+    first_use_at: IndexVec<Local, Option<AppearanceIndex>>,\n \n     /// Head of a linked list of **drops** of each variable -- these\n     /// are a special category of uses corresponding to the drop that\n     /// we add for each local variable.\n-    first_drop_at: IndexVec<LiveVar, Option<AppearanceIndex>>,\n+    first_drop_at: IndexVec<Local, Option<AppearanceIndex>>,\n \n     appearances: IndexVec<AppearanceIndex, Appearance>,\n }\n@@ -50,55 +56,68 @@ impl vll::LinkElem for Appearance {\n     }\n }\n \n-impl LocalUseMap<'me> {\n+impl LocalUseMap {\n     crate fn build(\n-        liveness_map: &'me NllLivenessMap,\n+        live_locals: &Vec<Local>,\n         elements: &RegionValueElements,\n         mir: &Mir<'_>,\n     ) -> Self {\n-        let nones = IndexVec::from_elem_n(None, liveness_map.num_variables());\n+        let nones = IndexVec::from_elem_n(None, mir.local_decls.len());\n         let mut local_use_map = LocalUseMap {\n-            liveness_map,\n             first_def_at: nones.clone(),\n             first_use_at: nones.clone(),\n             first_drop_at: nones,\n             appearances: IndexVec::new(),\n         };\n \n+        let mut locals_with_use_data: IndexVec<Local, bool> =\n+            IndexVec::from_elem_n(false, mir.local_decls.len());\n+        live_locals\n+            .iter()\n+            .for_each(|&local| locals_with_use_data[local] = true);\n+\n         LocalUseMapBuild {\n             local_use_map: &mut local_use_map,\n             elements,\n-        }.visit_mir(mir);\n+            locals_with_use_data,\n+        }\n+        .visit_mir(mir);\n \n         local_use_map\n     }\n \n     crate fn defs(&self, local: Local) -> impl Iterator<Item = PointIndex> + '_ {\n-        let live_var = self.liveness_map.from_local(local).unwrap();\n-        vll::iter(self.first_def_at[live_var], &self.appearances)\n+        vll::iter(self.first_def_at[local], &self.appearances)\n             .map(move |aa| self.appearances[aa].point_index)\n     }\n \n     crate fn uses(&self, local: Local) -> impl Iterator<Item = PointIndex> + '_ {\n-        let live_var = self.liveness_map.from_local(local).unwrap();\n-        vll::iter(self.first_use_at[live_var], &self.appearances)\n+        vll::iter(self.first_use_at[local], &self.appearances)\n             .map(move |aa| self.appearances[aa].point_index)\n     }\n \n     crate fn drops(&self, local: Local) -> impl Iterator<Item = PointIndex> + '_ {\n-        let live_var = self.liveness_map.from_local(local).unwrap();\n-        vll::iter(self.first_drop_at[live_var], &self.appearances)\n+        vll::iter(self.first_drop_at[local], &self.appearances)\n             .map(move |aa| self.appearances[aa].point_index)\n     }\n }\n \n-struct LocalUseMapBuild<'me, 'map: 'me> {\n-    local_use_map: &'me mut LocalUseMap<'map>,\n+struct LocalUseMapBuild<'me> {\n+    local_use_map: &'me mut LocalUseMap,\n     elements: &'me RegionValueElements,\n+\n+    // Vector used in `visit_local` to signal which `Local`s do we need\n+    // def/use/drop information on, constructed from `live_locals` (that\n+    // contains the variables we'll do the liveness analysis for).\n+    // This vector serves optimization purposes only: we could have\n+    // obtained the same information from `live_locals` but we want to\n+    // avoid repeatedly calling `Vec::contains()` (see `LocalUseMap` for\n+    // the rationale on the time-memory trade-off we're favoring here).\n+    locals_with_use_data: IndexVec<Local, bool>,\n }\n \n-impl LocalUseMapBuild<'_, '_> {\n-    fn insert_def(&mut self, local: LiveVar, location: Location) {\n+impl LocalUseMapBuild<'_> {\n+    fn insert_def(&mut self, local: Local, location: Location) {\n         Self::insert(\n             self.elements,\n             &mut self.local_use_map.first_def_at[local],\n@@ -107,7 +126,7 @@ impl LocalUseMapBuild<'_, '_> {\n         );\n     }\n \n-    fn insert_use(&mut self, local: LiveVar, location: Location) {\n+    fn insert_use(&mut self, local: Local, location: Location) {\n         Self::insert(\n             self.elements,\n             &mut self.local_use_map.first_use_at[local],\n@@ -116,7 +135,7 @@ impl LocalUseMapBuild<'_, '_> {\n         );\n     }\n \n-    fn insert_drop(&mut self, local: LiveVar, location: Location) {\n+    fn insert_drop(&mut self, local: Local, location: Location) {\n         Self::insert(\n             self.elements,\n             &mut self.local_use_map.first_drop_at[local],\n@@ -140,13 +159,13 @@ impl LocalUseMapBuild<'_, '_> {\n     }\n }\n \n-impl Visitor<'tcx> for LocalUseMapBuild<'_, '_> {\n+impl Visitor<'tcx> for LocalUseMapBuild<'_> {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, location: Location) {\n-        if let Some(local_with_region) = self.local_use_map.liveness_map.from_local(local) {\n+        if self.locals_with_use_data[local] {\n             match categorize(context) {\n-                Some(DefUse::Def) => self.insert_def(local_with_region, location),\n-                Some(DefUse::Use) => self.insert_use(local_with_region, location),\n-                Some(DefUse::Drop) => self.insert_drop(local_with_region, location),\n+                Some(DefUse::Def) => self.insert_def(local, location),\n+                Some(DefUse::Use) => self.insert_use(local, location),\n+                Some(DefUse::Drop) => self.insert_drop(local, location),\n                 _ => (),\n             }\n         }"}, {"sha": "4950d0045d3ff0944f069bbaec7c34826574a59f", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ae4e0501bdf9e6d6be06757b08f92e3553848c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae4e0501bdf9e6d6be06757b08f92e3553848c6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=4ae4e0501bdf9e6d6be06757b08f92e3553848c6", "patch": "@@ -46,7 +46,8 @@ pub(super) fn trace(\n         return;\n     }\n \n-    let local_use_map = &LocalUseMap::build(liveness_map, elements, mir);\n+    let live_locals: Vec<Local> = liveness_map.to_local.clone().into_iter().collect();\n+    let local_use_map = &LocalUseMap::build(&live_locals, elements, mir);\n \n     let cx = LivenessContext {\n         typeck,\n@@ -59,7 +60,6 @@ pub(super) fn trace(\n         location_table,\n     };\n \n-    let live_locals: Vec<Local> = liveness_map.to_local.clone().into_iter().collect();\n     LivenessResults::new(cx).compute_for_all_locals(live_locals);\n }\n \n@@ -92,7 +92,7 @@ where\n \n     /// Index indicating where each variable is assigned, used, or\n     /// dropped.\n-    local_use_map: &'me LocalUseMap<'me>,\n+    local_use_map: &'me LocalUseMap,\n \n     /// Maps between a MIR Location and a LocationIndex\n     location_table: &'me LocationTable,"}]}