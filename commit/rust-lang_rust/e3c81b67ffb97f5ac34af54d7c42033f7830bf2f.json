{"sha": "e3c81b67ffb97f5ac34af54d7c42033f7830bf2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYzgxYjY3ZmZiOTdmNWFjMzRhZjU0ZDdjNDIwMzNmNzgzMGJmMmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-29T14:09:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-29T14:09:04Z"}, "message": "Merge #2941\n\n2941: Freshen Architecture.md document r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a37944195fe6ba67fa1e734677bfe9307896640c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a37944195fe6ba67fa1e734677bfe9307896640c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3c81b67ffb97f5ac34af54d7c42033f7830bf2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMZIACRBK7hj4Ov3rIwAAdHIIAFkOjttslU3y3hTp36/rD01j\nSORydHuvxejMOVRqz3CMmUiY4DvCVUrKfd45+MLi/Hw5drrBLdSfYuTfVVUNqido\nTk+/c+a/HOZaRNrwKu4jbwLjFayiKAG3SJSoBczoCd7T6eGXLwdNf0+vsUQbiQ30\ndElr4/kUduWCwnrPLO++WlbTvkZdq6EedX7RAdU3qxuWF23lmckKydk+9g9tBZDW\nRmcUlH37RPX79gMzY4aCoklRlJlqZwFkGyzJXoRYGrbKhWQWY48wnCsgCxMwLlUL\n32quKb6TEeKKTEhF11TA44KcUCOqNuP/T+lqx6hqEp/MihCgVxvsYg+hBesbIUo=\n=MYc7\n-----END PGP SIGNATURE-----\n", "payload": "tree a37944195fe6ba67fa1e734677bfe9307896640c\nparent 2fb6af89eb794f775de60b82afe56b6f986c2a40\nparent 84dfbfbd1d72c276a93518fea41196f75069d17e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580306944 +0000\ncommitter GitHub <noreply@github.com> 1580306944 +0000\n\nMerge #2941\n\n2941: Freshen Architecture.md document r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c81b67ffb97f5ac34af54d7c42033f7830bf2f", "html_url": "https://github.com/rust-lang/rust/commit/e3c81b67ffb97f5ac34af54d7c42033f7830bf2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3c81b67ffb97f5ac34af54d7c42033f7830bf2f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb6af89eb794f775de60b82afe56b6f986c2a40", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb6af89eb794f775de60b82afe56b6f986c2a40", "html_url": "https://github.com/rust-lang/rust/commit/2fb6af89eb794f775de60b82afe56b6f986c2a40"}, {"sha": "84dfbfbd1d72c276a93518fea41196f75069d17e", "url": "https://api.github.com/repos/rust-lang/rust/commits/84dfbfbd1d72c276a93518fea41196f75069d17e", "html_url": "https://github.com/rust-lang/rust/commit/84dfbfbd1d72c276a93518fea41196f75069d17e"}], "stats": {"total": 83, "additions": 45, "deletions": 38}, "files": [{"sha": "d307277867820ef7db4fedb4c6b4a9d65ccd800d", "filename": "docs/dev/README.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c81b67ffb97f5ac34af54d7c42033f7830bf2f/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3c81b67ffb97f5ac34af54d7c42033f7830bf2f/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=e3c81b67ffb97f5ac34af54d7c42033f7830bf2f", "patch": "@@ -106,6 +106,10 @@ communication, and `print!` would break it.\n If I need to fix something simultaneously in the server and in the client, I\n feel even more sad. I don't have a specific workflow for this case.\n \n+Additionally, I use `cargo run --release -p ra_cli -- analysis-stats\n+path/to/some/rust/crate` to run a batch analysis. This is primaraly useful for\n+performance optimiations, or for bug minimization.\n+\n # Logging\n \n Logging is done by both rust-analyzer and VS Code, so it might be tricky to"}, {"sha": "9675ed0b6eb829ef932926401abcdcc707094904", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 41, "deletions": 38, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e3c81b67ffb97f5ac34af54d7c42033f7830bf2f/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3c81b67ffb97f5ac34af54d7c42033f7830bf2f/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=e3c81b67ffb97f5ac34af54d7c42033f7830bf2f", "patch": "@@ -12,6 +12,9 @@ analyzer:\n \n https://www.youtube.com/playlist?list=PL85XCvVPmGQho7MZkdW-wtPtuJcFpzycE\n \n+Note that the guide and videos are pretty dated, this document should be in\n+generally fresher.\n+\n ## The Big Picture\n \n ![](https://user-images.githubusercontent.com/1711539/50114578-e8a34280-0255-11e9-902c-7cfc70747966.png)\n@@ -20,13 +23,12 @@ On the highest level, rust-analyzer is a thing which accepts input source code\n from the client and produces a structured semantic model of the code.\n \n More specifically, input data consists of a set of test files (`(PathBuf,\n-String)` pairs) and information about project structure, captured in the so called\n-`CrateGraph`. The crate graph specifies which files are crate roots, which cfg\n-flags are specified for each crate (TODO: actually implement this) and what\n-dependencies exist between the crates. The analyzer keeps all this input data in\n-memory and never does any IO. Because the input data is source code, which\n-typically measures in tens of megabytes at most, keeping all input data in\n-memory is OK.\n+String)` pairs) and information about project structure, captured in the so\n+called `CrateGraph`. The crate graph specifies which files are crate roots,\n+which cfg flags are specified for each crate and what dependencies exist between\n+the crates. The analyzer keeps all this input data in memory and never does any\n+IO. Because the input data are source code, which typically measures in tens of\n+megabytes at most, keeping everything in memory is OK.\n \n A \"structured semantic model\" is basically an object-oriented representation of\n modules, functions and types which appear in the source code. This representation\n@@ -43,44 +45,50 @@ can be quickly updated for small modifications.\n ## Code generation\n \n Some of the components of this repository are generated through automatic\n-processes. These are outlined below:\n+processes. `cargo xtask codegen` runs all generation tasks. Generated code is\n+commited to the git repository.\n+\n+In particular, `cargo xtask codegen` generates:\n+\n+1. [`syntax_kind/generated`](https://github.com/rust-analyzer/rust-analyzer/blob/a0be39296d2925972cacd9fbf8b5fb258fad6947/crates/ra_parser/src/syntax_kind/generated.rs)\n+  -- the set of terminals and non-terminals of rust grammar.\n \n-- `cargo xtask codegen`: The kinds of tokens that are reused in several places, so a generator\n-  is used. We use `quote!` macro to generate the files listed below, based on\n-  the grammar described in [grammar.ron]:\n-  - [ast/generated.rs][ast generated]\n-  - [syntax_kind/generated.rs][syntax_kind generated]\n+2. [`ast/generated`](https://github.com/rust-analyzer/rust-analyzer/blob/a0be39296d2925972cacd9fbf8b5fb258fad6947/crates/ra_syntax/src/ast/generated.rs)\n+  -- AST data structure.\n \n-[grammar.ron]: ../../crates/ra_syntax/src/grammar.ron\n-[ast generated]: ../../crates/ra_syntax/src/ast/generated.rs\n-[syntax_kind generated]: ../../crates/ra_parser/src/syntax_kind/generated.rs\n+.3 [`doc_tests/generated`](https://github.com/rust-analyzer/rust-analyzer/blob/a0be39296d2925972cacd9fbf8b5fb258fad6947/crates/ra_assists/src/doc_tests/generated.rs),\n+  [`test_data/parser/inline`](https://github.com/rust-analyzer/rust-analyzer/tree/a0be39296d2925972cacd9fbf8b5fb258fad6947/crates/ra_syntax/test_data/parser/inline)\n+  -- tests for assists and the parser.\n+\n+The source for 1 and 2 is in [`ast_src.rs`](https://github.com/rust-analyzer/rust-analyzer/blob/a0be39296d2925972cacd9fbf8b5fb258fad6947/xtask/src/ast_src.rs).\n \n ## Code Walk-Through\n \n ### `crates/ra_syntax`, `crates/ra_parser`\n \n Rust syntax tree structure and parser. See\n-[RFC](https://github.com/rust-lang/rfcs/pull/2256) for some design notes.\n+[RFC](https://github.com/rust-lang/rfcs/pull/2256) and [./syntax.md](./syntax.md) for some design notes.\n \n - [rowan](https://github.com/rust-analyzer/rowan) library is used for constructing syntax trees.\n - `grammar` module is the actual parser. It is a hand-written recursive descent parser, which\n   produces a sequence of events like \"start node X\", \"finish node Y\". It works similarly to [kotlin's parser](https://github.com/JetBrains/kotlin/blob/4d951de616b20feca92f3e9cc9679b2de9e65195/compiler/frontend/src/org/jetbrains/kotlin/parsing/KotlinParsing.java),\n   which is a good source of inspiration for dealing with syntax errors and incomplete input. Original [libsyntax parser](https://github.com/rust-lang/rust/blob/6b99adeb11313197f409b4f7c4083c2ceca8a4fe/src/libsyntax/parse/parser.rs)\n   is what we use for the definition of the Rust language.\n-- `parser_api/parser_impl` bridges the tree-agnostic parser from `grammar` with `rowan` trees.\n-  This is the thing that turns a flat list of events into a tree (see `EventProcessor`)\n+- `TreeSink` and `TokenSource` traits bridge the tree-agnostic parser from `grammar` with `rowan` trees.\n - `ast` provides a type safe API on top of the raw `rowan` tree.\n-- `grammar.ron` RON description of the grammar, which is used to\n-  generate `syntax_kinds` and `ast` modules, using `cargo xtask codegen` command.\n-- `algo`: generic tree algorithms, including `walk` for O(1) stack\n-  space tree traversal (this is cool).\n+- `ast_src` description of the grammar, which is used to generate `syntax_kinds`\n+  and `ast` modules, using `cargo xtask codegen` command.\n \n Tests for ra_syntax are mostly data-driven: `test_data/parser` contains subdirectories with a bunch of `.rs`\n (test vectors) and `.txt` files with corresponding syntax trees. During testing, we check\n `.rs` against `.txt`. If the `.txt` file is missing, it is created (this is how you update\n tests). Additionally, running `cargo xtask codegen` will walk the grammar module and collect\n all `// test test_name` comments into files inside `test_data/parser/inline` directory.\n \n+Note\n+[`api_walkthrough`](https://github.com/rust-analyzer/rust-analyzer/blob/2fb6af89eb794f775de60b82afe56b6f986c2a40/crates/ra_syntax/src/lib.rs#L190-L348)\n+in particular: it shows off various methods of working with syntax tree.\n+\n See [#93](https://github.com/rust-analyzer/rust-analyzer/pull/93) for an example PR which\n fixes a bug in the grammar.\n \n@@ -94,18 +102,22 @@ defines most of the \"input\" queries: facts supplied by the client of the\n analyzer. Reading the docs of the `ra_db::input` module should be useful:\n everything else is strictly derived from those inputs.\n \n-### `crates/ra_hir`\n+### `crates/ra_hir*` crates\n \n HIR provides high-level \"object oriented\" access to Rust code.\n \n The principal difference between HIR and syntax trees is that HIR is bound to a\n-particular crate instance. That is, it has cfg flags and features applied (in\n-theory, in practice this is to be implemented). So, the relation between\n-syntax and HIR is many-to-one. The `source_binder` module is responsible for\n-guessing a HIR for a particular source position.\n+particular crate instance. That is, it has cfg flags and features applied. So,\n+the relation between syntax and HIR is many-to-one. The `source_binder` module\n+is responsible for guessing a HIR for a particular source position.\n \n Underneath, HIR works on top of salsa, using a `HirDatabase` trait.\n \n+`ra_hir_xxx` crates have a strong ECS flavor, in that they work with raw ids and\n+directly query the databse.\n+\n+The top-level `ra_hir` fa\u00e7ade crate wraps ids into a more OO-flavored API.\n+\n ### `crates/ra_ide`\n \n A stateful library for analyzing many Rust files as they change. `AnalysisHost`\n@@ -135,18 +147,9 @@ different from data on disk. This is more or less the single really\n platform-dependent component, so it lives in a separate repository and has an\n extensive cross-platform CI testing.\n \n-### `crates/gen_lsp_server`\n-\n-A language server scaffold, exposing a synchronous crossbeam-channel based API.\n-This crate handles protocol handshaking and parsing messages, while you\n-control the message dispatch loop yourself.\n-\n-Run with `RUST_LOG=sync_lsp_server=debug` to see all the messages.\n-\n ### `crates/ra_cli`\n \n-A CLI interface to rust-analyzer.\n-\n+A CLI interface to rust-analyzer, mainly for testing.\n \n ## Testing Infrastructure\n "}]}