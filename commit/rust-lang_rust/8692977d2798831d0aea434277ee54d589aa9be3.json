{"sha": "8692977d2798831d0aea434277ee54d589aa9be3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2OTI5NzdkMjc5ODgzMWQwYWVhNDM0Mjc3ZWU1NGQ1ODlhYTliZTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T09:58:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T09:58:01Z"}, "message": "Move lang_items to hir_def", "tree": {"sha": "5d575e11fafbde652773f50297ab14916973f7d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d575e11fafbde652773f50297ab14916973f7d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8692977d2798831d0aea434277ee54d589aa9be3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8692977d2798831d0aea434277ee54d589aa9be3", "html_url": "https://github.com/rust-lang/rust/commit/8692977d2798831d0aea434277ee54d589aa9be3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8692977d2798831d0aea434277ee54d589aa9be3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9da07a07eb8ced772082a136b2ac07eea1df4a2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9da07a07eb8ced772082a136b2ac07eea1df4a2e", "html_url": "https://github.com/rust-lang/rust/commit/9da07a07eb8ced772082a136b2ac07eea1df4a2e"}], "stats": {"total": 381, "additions": 179, "deletions": 202}, "files": [{"sha": "cae305f985286b2f4e6b125824f7f880f877a045", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=8692977d2798831d0aea434277ee54d589aa9be3", "patch": "@@ -3,27 +3,25 @@\n use std::sync::Arc;\n \n use ra_db::salsa;\n-use ra_syntax::SmolStr;\n \n use crate::{\n     debug::HirDebugDatabase,\n     ids,\n-    lang_item::{LangItemTarget, LangItems},\n     ty::{\n         method_resolution::CrateImplBlocks,\n         traits::{AssocTyValue, Impl},\n         CallableDef, FnSig, GenericPredicate, InferenceResult, Namespace, Substs, Ty, TypableDef,\n         TypeCtor,\n     },\n-    Crate, DefWithBody, GenericDef, ImplBlock, Module, StructField, Trait,\n+    Crate, DefWithBody, GenericDef, ImplBlock, StructField, Trait,\n };\n \n pub use hir_def::db::{\n-    BodyQuery, BodyWithSourceMapQuery, ConstDataQuery, CrateDefMapQuery, DefDatabase2,\n-    DefDatabase2Storage, EnumDataQuery, ExprScopesQuery, FunctionDataQuery, GenericParamsQuery,\n-    ImplDataQuery, InternDatabase, InternDatabaseStorage, RawItemsQuery,\n-    RawItemsWithSourceMapQuery, StaticDataQuery, StructDataQuery, TraitDataQuery,\n-    TypeAliasDataQuery,\n+    BodyQuery, BodyWithSourceMapQuery, ConstDataQuery, CrateDefMapQuery, CrateLangItemsQuery,\n+    DefDatabase2, DefDatabase2Storage, EnumDataQuery, ExprScopesQuery, FunctionDataQuery,\n+    GenericParamsQuery, ImplDataQuery, InternDatabase, InternDatabaseStorage, LangItemQuery,\n+    ModuleLangItemsQuery, RawItemsQuery, RawItemsWithSourceMapQuery, StaticDataQuery,\n+    StructDataQuery, TraitDataQuery, TypeAliasDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n@@ -34,15 +32,6 @@ pub use hir_expand::db::{\n #[salsa::query_group(DefDatabaseStorage)]\n #[salsa::requires(AstDatabase)]\n pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n-    #[salsa::invoke(LangItems::module_lang_items_query)]\n-    fn module_lang_items(&self, module: Module) -> Option<Arc<LangItems>>;\n-\n-    #[salsa::invoke(LangItems::crate_lang_items_query)]\n-    fn crate_lang_items(&self, krate: Crate) -> Arc<LangItems>;\n-\n-    #[salsa::invoke(LangItems::lang_item_query)]\n-    fn lang_item(&self, start_crate: Crate, item: SmolStr) -> Option<LangItemTarget>;\n-\n     #[salsa::invoke(crate::code_model::docs::documentation_query)]\n     fn documentation(&self, def: crate::DocDef) -> Option<crate::Documentation>;\n }"}, {"sha": "55f0c3a1327caee89dcd9baf469510ab33371d71", "filename": "crates/ra_hir/src/lang_item.rs", "status": "removed", "additions": 0, "deletions": 154, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/9da07a07eb8ced772082a136b2ac07eea1df4a2e/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da07a07eb8ced772082a136b2ac07eea1df4a2e/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=9da07a07eb8ced772082a136b2ac07eea1df4a2e", "patch": "@@ -1,154 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use std::sync::Arc;\n-\n-use hir_def::{AdtId, AttrDefId, ModuleDefId};\n-use ra_syntax::SmolStr;\n-use rustc_hash::FxHashMap;\n-\n-use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n-    Crate, Enum, Function, ImplBlock, Module, Static, Struct, Trait,\n-};\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum LangItemTarget {\n-    Enum(Enum),\n-    Function(Function),\n-    ImplBlock(ImplBlock),\n-    Static(Static),\n-    Struct(Struct),\n-    Trait(Trait),\n-}\n-\n-impl LangItemTarget {\n-    pub(crate) fn krate(&self, db: &impl HirDatabase) -> Option<Crate> {\n-        Some(match self {\n-            LangItemTarget::Enum(e) => e.module(db).krate(),\n-            LangItemTarget::Function(f) => f.module(db).krate(),\n-            LangItemTarget::ImplBlock(i) => i.krate(db),\n-            LangItemTarget::Static(s) => s.module(db).krate(),\n-            LangItemTarget::Struct(s) => s.module(db).krate(),\n-            LangItemTarget::Trait(t) => t.module(db).krate(),\n-        })\n-    }\n-}\n-\n-#[derive(Default, Debug, Clone, PartialEq, Eq)]\n-pub struct LangItems {\n-    items: FxHashMap<SmolStr, LangItemTarget>,\n-}\n-\n-impl LangItems {\n-    pub fn target<'a>(&'a self, item: &str) -> Option<&'a LangItemTarget> {\n-        self.items.get(item)\n-    }\n-\n-    /// Salsa query. This will look for lang items in a specific crate.\n-    pub(crate) fn crate_lang_items_query(\n-        db: &(impl DefDatabase + AstDatabase),\n-        krate: Crate,\n-    ) -> Arc<LangItems> {\n-        let mut lang_items = LangItems::default();\n-\n-        if let Some(module) = krate.root_module(db) {\n-            lang_items.collect_lang_items_recursive(db, module);\n-        }\n-\n-        Arc::new(lang_items)\n-    }\n-\n-    pub(crate) fn module_lang_items_query(\n-        db: &(impl DefDatabase + AstDatabase),\n-        module: Module,\n-    ) -> Option<Arc<LangItems>> {\n-        let mut lang_items = LangItems::default();\n-        lang_items.collect_lang_items(db, module);\n-        if lang_items.items.is_empty() {\n-            None\n-        } else {\n-            Some(Arc::new(lang_items))\n-        }\n-    }\n-\n-    /// Salsa query. Look for a lang item, starting from the specified crate and recursively\n-    /// traversing its dependencies.\n-    pub(crate) fn lang_item_query(\n-        db: &impl DefDatabase,\n-        start_crate: Crate,\n-        item: SmolStr,\n-    ) -> Option<LangItemTarget> {\n-        let lang_items = db.crate_lang_items(start_crate);\n-        let start_crate_target = lang_items.items.get(&item);\n-        if let Some(target) = start_crate_target {\n-            Some(*target)\n-        } else {\n-            for dep in start_crate.dependencies(db) {\n-                let dep_crate = dep.krate;\n-                let dep_target = db.lang_item(dep_crate, item.clone());\n-                if dep_target.is_some() {\n-                    return dep_target;\n-                }\n-            }\n-            None\n-        }\n-    }\n-\n-    fn collect_lang_items(&mut self, db: &(impl DefDatabase + AstDatabase), module: Module) {\n-        // Look for impl targets\n-        let def_map = db.crate_def_map(module.id.krate);\n-        let module_data = &def_map[module.id.module_id];\n-        for &impl_block in module_data.impls.iter() {\n-            self.collect_lang_item(db, impl_block, LangItemTarget::ImplBlock)\n-        }\n-\n-        for def in module_data.scope.declarations() {\n-            match def {\n-                ModuleDefId::TraitId(trait_) => {\n-                    self.collect_lang_item(db, trait_, LangItemTarget::Trait)\n-                }\n-                ModuleDefId::AdtId(AdtId::EnumId(e)) => {\n-                    self.collect_lang_item(db, e, LangItemTarget::Enum)\n-                }\n-                ModuleDefId::AdtId(AdtId::StructId(s)) => {\n-                    self.collect_lang_item(db, s, LangItemTarget::Struct)\n-                }\n-                ModuleDefId::FunctionId(f) => {\n-                    self.collect_lang_item(db, f, LangItemTarget::Function)\n-                }\n-                ModuleDefId::StaticId(s) => self.collect_lang_item(db, s, LangItemTarget::Static),\n-                _ => {}\n-            }\n-        }\n-    }\n-\n-    fn collect_lang_items_recursive(\n-        &mut self,\n-        db: &(impl DefDatabase + AstDatabase),\n-        module: Module,\n-    ) {\n-        if let Some(module_lang_items) = db.module_lang_items(module) {\n-            self.items.extend(module_lang_items.items.iter().map(|(k, v)| (k.clone(), *v)))\n-        }\n-\n-        // Look for lang items in the children\n-        for child in module.children(db) {\n-            self.collect_lang_items_recursive(db, child);\n-        }\n-    }\n-\n-    fn collect_lang_item<T, D>(\n-        &mut self,\n-        db: &(impl DefDatabase + AstDatabase),\n-        item: T,\n-        constructor: fn(D) -> LangItemTarget,\n-    ) where\n-        T: Into<AttrDefId> + Copy,\n-        D: From<T>,\n-    {\n-        let attrs = db.attrs(item.into());\n-        if let Some(lang_item_name) = attrs.find_string_value(\"lang\") {\n-            self.items.entry(lang_item_name).or_insert_with(|| constructor(D::from(item)));\n-        }\n-    }\n-}"}, {"sha": "22da05a970e90ea12bf408b5e2b3ba36d882f645", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=8692977d2798831d0aea434277ee54d589aa9be3", "patch": "@@ -35,7 +35,6 @@ mod ids;\n mod ty;\n mod impl_block;\n mod expr;\n-mod lang_item;\n pub mod diagnostics;\n mod util;\n "}, {"sha": "41c99d227b68b2a7a03a95dd191046e9ddd2d8e3", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=8692977d2798831d0aea434277ee54d589aa9be3", "patch": "@@ -5,12 +5,13 @@\n \n use std::iter::successors;\n \n-use hir_def::resolver::Resolver;\n+use hir_def::{lang_item::LangItemTarget, resolver::Resolver};\n use hir_expand::name;\n use log::{info, warn};\n \n+use crate::{db::HirDatabase, Trait};\n+\n use super::{traits::Solution, Canonical, Substs, Ty, TypeWalk};\n-use crate::db::HirDatabase;\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n \n@@ -41,7 +42,7 @@ fn deref_by_trait(\n ) -> Option<Canonical<Ty>> {\n     let krate = resolver.krate()?;\n     let deref_trait = match db.lang_item(krate.into(), \"deref\".into())? {\n-        crate::lang_item::LangItemTarget::Trait(t) => t,\n+        LangItemTarget::TraitId(t) => Trait::from(t),\n         _ => return None,\n     };\n     let target = deref_trait.associated_type_by_name(db, &name::TARGET_TYPE)?;"}, {"sha": "4ea038d991adacc7fdb4281d5eb384051a789c61", "filename": "crates/ra_hir/src/ty/infer/coerce.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs?ref=8692977d2798831d0aea434277ee54d589aa9be3", "patch": "@@ -4,13 +4,12 @@\n //!\n //! See: https://doc.rust-lang.org/nomicon/coercions.html\n \n-use hir_def::resolver::Resolver;\n+use hir_def::{lang_item::LangItemTarget, resolver::Resolver};\n use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n use crate::{\n     db::HirDatabase,\n-    lang_item::LangItemTarget,\n     ty::{autoderef, Substs, Ty, TypeCtor, TypeWalk},\n     Adt, Mutability,\n };\n@@ -50,7 +49,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     ) -> FxHashMap<(TypeCtor, TypeCtor), usize> {\n         let krate = resolver.krate().unwrap();\n         let impls = match db.lang_item(krate.into(), \"coerce_unsized\".into()) {\n-            Some(LangItemTarget::Trait(trait_)) => db.impls_for_trait(krate.into(), trait_),\n+            Some(LangItemTarget::TraitId(trait_)) => {\n+                db.impls_for_trait(krate.into(), trait_.into())\n+            }\n             _ => return FxHashMap::default(),\n         };\n "}, {"sha": "caa5f5f74a9edbcf868f745183f10190b4446c0f", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=8692977d2798831d0aea434277ee54d589aa9be3", "patch": "@@ -5,7 +5,7 @@\n use std::sync::Arc;\n \n use arrayvec::ArrayVec;\n-use hir_def::resolver::Resolver;\n+use hir_def::{lang_item::LangItemTarget, resolver::Resolver, AstItemDef};\n use rustc_hash::FxHashMap;\n \n use crate::{\n@@ -91,34 +91,43 @@ fn def_crates(db: &impl HirDatabase, cur_crate: Crate, ty: &Ty) -> Option<ArrayV\n     // Types like slice can have inherent impls in several crates, (core and alloc).\n     // The corresponding impls are marked with lang items, so we can use them to find the required crates.\n     macro_rules! lang_item_crate {\n-        ($db:expr, $cur_crate:expr, $($name:expr),+ $(,)?) => {{\n-            let mut v = ArrayVec::<[Crate; 2]>::new();\n+        ($($name:expr),+ $(,)?) => {{\n+            let mut v = ArrayVec::<[LangItemTarget; 2]>::new();\n             $(\n-                v.extend($db.lang_item($cur_crate, $name.into()).and_then(|item| item.krate($db)));\n+                v.extend(db.lang_item(cur_crate.crate_id, $name.into()));\n             )+\n-            Some(v)\n+            v\n         }};\n     }\n \n-    match ty {\n+    let lang_item_targets = match ty {\n         Ty::Apply(a_ty) => match a_ty.ctor {\n-            TypeCtor::Adt(def_id) => Some(std::iter::once(def_id.krate(db)?).collect()),\n-            TypeCtor::Bool => lang_item_crate!(db, cur_crate, \"bool\"),\n-            TypeCtor::Char => lang_item_crate!(db, cur_crate, \"char\"),\n+            TypeCtor::Adt(def_id) => return Some(std::iter::once(def_id.krate(db)?).collect()),\n+            TypeCtor::Bool => lang_item_crate!(\"bool\"),\n+            TypeCtor::Char => lang_item_crate!(\"char\"),\n             TypeCtor::Float(Uncertain::Known(f)) => match f.bitness {\n                 // There are two lang items: one in libcore (fXX) and one in libstd (fXX_runtime)\n-                FloatBitness::X32 => lang_item_crate!(db, cur_crate, \"f32\", \"f32_runtime\"),\n-                FloatBitness::X64 => lang_item_crate!(db, cur_crate, \"f64\", \"f64_runtime\"),\n+                FloatBitness::X32 => lang_item_crate!(\"f32\", \"f32_runtime\"),\n+                FloatBitness::X64 => lang_item_crate!(\"f64\", \"f64_runtime\"),\n             },\n-            TypeCtor::Int(Uncertain::Known(i)) => lang_item_crate!(db, cur_crate, i.ty_to_string()),\n-            TypeCtor::Str => lang_item_crate!(db, cur_crate, \"str_alloc\", \"str\"),\n-            TypeCtor::Slice => lang_item_crate!(db, cur_crate, \"slice_alloc\", \"slice\"),\n-            TypeCtor::RawPtr(Mutability::Shared) => lang_item_crate!(db, cur_crate, \"const_ptr\"),\n-            TypeCtor::RawPtr(Mutability::Mut) => lang_item_crate!(db, cur_crate, \"mut_ptr\"),\n-            _ => None,\n+            TypeCtor::Int(Uncertain::Known(i)) => lang_item_crate!(i.ty_to_string()),\n+            TypeCtor::Str => lang_item_crate!(\"str_alloc\", \"str\"),\n+            TypeCtor::Slice => lang_item_crate!(\"slice_alloc\", \"slice\"),\n+            TypeCtor::RawPtr(Mutability::Shared) => lang_item_crate!(\"const_ptr\"),\n+            TypeCtor::RawPtr(Mutability::Mut) => lang_item_crate!(\"mut_ptr\"),\n+            _ => return None,\n         },\n-        _ => None,\n-    }\n+        _ => return None,\n+    };\n+    let res = lang_item_targets\n+        .into_iter()\n+        .filter_map(|it| match it {\n+            LangItemTarget::ImplBlockId(it) => Some(it),\n+            _ => None,\n+        })\n+        .map(|it| it.module(db).krate.into())\n+        .collect();\n+    Some(res)\n }\n \n /// Look up the method with the given name, returning the actual autoderefed"}, {"sha": "53818a5e543a9a06098d54bf14c7bb1befc58e35", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=8692977d2798831d0aea434277ee54d589aa9be3", "patch": "@@ -9,6 +9,7 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n \n+use hir_def::lang_item::LangItemTarget;\n use hir_expand::name;\n \n use ra_db::salsa::{InternId, InternKey};\n@@ -832,9 +833,9 @@ fn closure_fn_trait_output_assoc_ty_value(\n }\n \n fn get_fn_trait(db: &impl HirDatabase, krate: Crate, fn_trait: super::FnTrait) -> Option<Trait> {\n-    let target = db.lang_item(krate, fn_trait.lang_item_name().into())?;\n+    let target = db.lang_item(krate.crate_id, fn_trait.lang_item_name().into())?;\n     match target {\n-        crate::lang_item::LangItemTarget::Trait(t) => Some(t),\n+        LangItemTarget::TraitId(t) => Some(t.into()),\n         _ => None,\n     }\n }"}, {"sha": "e87bd525a302ffa2f0018bd7a95fb44553e40893", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=8692977d2798831d0aea434277ee54d589aa9be3", "patch": "@@ -3,20 +3,21 @@ use std::sync::Arc;\n \n use hir_expand::{db::AstDatabase, HirFileId};\n use ra_db::{salsa, CrateId, SourceDatabase};\n-use ra_syntax::ast;\n+use ra_syntax::{ast, SmolStr};\n \n use crate::{\n     adt::{EnumData, StructData},\n     attr::Attrs,\n     body::{scope::ExprScopes, Body, BodySourceMap},\n     data::{ConstData, FunctionData, ImplData, TraitData, TypeAliasData},\n     generics::GenericParams,\n+    lang_item::{LangItemTarget, LangItems},\n     nameres::{\n         raw::{ImportSourceMap, RawItems},\n         CrateDefMap,\n     },\n-    AttrDefId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, ImplId, ItemLoc, StaticId,\n-    StructOrUnionId, TraitId, TypeAliasId,\n+    AttrDefId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, ImplId, ItemLoc, ModuleId,\n+    StaticId, StructOrUnionId, TraitId, TypeAliasId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -91,4 +92,13 @@ pub trait DefDatabase2: InternDatabase + AstDatabase {\n \n     #[salsa::invoke(Attrs::attrs_query)]\n     fn attrs(&self, def: AttrDefId) -> Attrs;\n+\n+    #[salsa::invoke(LangItems::module_lang_items_query)]\n+    fn module_lang_items(&self, module: ModuleId) -> Option<Arc<LangItems>>;\n+\n+    #[salsa::invoke(LangItems::crate_lang_items_query)]\n+    fn crate_lang_items(&self, krate: CrateId) -> Arc<LangItems>;\n+\n+    #[salsa::invoke(LangItems::lang_item_query)]\n+    fn lang_item(&self, start_crate: CrateId, item: SmolStr) -> Option<LangItemTarget>;\n }"}, {"sha": "4c1a764ea0d15811b4fc852fed99526e2d2fbbdc", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=8692977d2798831d0aea434277ee54d589aa9be3", "patch": "@@ -0,0 +1,120 @@\n+//! Collects lang items: items marked with `#[lang = \"...\"]` attribute.\n+//!\n+//! This attribute to tell the compiler about semi built-in std library\n+//! features, such as Fn family of traits.\n+use std::sync::Arc;\n+\n+use ra_syntax::SmolStr;\n+use rustc_hash::FxHashMap;\n+\n+use crate::{\n+    db::DefDatabase2, AdtId, AttrDefId, CrateId, EnumId, FunctionId, ImplId, ModuleDefId, ModuleId,\n+    StaticId, StructId, TraitId,\n+};\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum LangItemTarget {\n+    EnumId(EnumId),\n+    FunctionId(FunctionId),\n+    ImplBlockId(ImplId),\n+    StaticId(StaticId),\n+    StructId(StructId),\n+    TraitId(TraitId),\n+}\n+\n+#[derive(Default, Debug, Clone, PartialEq, Eq)]\n+pub struct LangItems {\n+    items: FxHashMap<SmolStr, LangItemTarget>,\n+}\n+\n+impl LangItems {\n+    pub fn target<'a>(&'a self, item: &str) -> Option<&'a LangItemTarget> {\n+        self.items.get(item)\n+    }\n+\n+    /// Salsa query. This will look for lang items in a specific crate.\n+    pub(crate) fn crate_lang_items_query(db: &impl DefDatabase2, krate: CrateId) -> Arc<LangItems> {\n+        let mut lang_items = LangItems::default();\n+\n+        let crate_def_map = db.crate_def_map(krate);\n+\n+        crate_def_map\n+            .modules()\n+            .filter_map(|module_id| db.module_lang_items(ModuleId { krate, module_id }))\n+            .for_each(|it| lang_items.items.extend(it.items.iter().map(|(k, v)| (k.clone(), *v))));\n+\n+        Arc::new(lang_items)\n+    }\n+\n+    pub(crate) fn module_lang_items_query(\n+        db: &impl DefDatabase2,\n+        module: ModuleId,\n+    ) -> Option<Arc<LangItems>> {\n+        let mut lang_items = LangItems::default();\n+        lang_items.collect_lang_items(db, module);\n+        if lang_items.items.is_empty() {\n+            None\n+        } else {\n+            Some(Arc::new(lang_items))\n+        }\n+    }\n+\n+    /// Salsa query. Look for a lang item, starting from the specified crate and recursively\n+    /// traversing its dependencies.\n+    pub(crate) fn lang_item_query(\n+        db: &impl DefDatabase2,\n+        start_crate: CrateId,\n+        item: SmolStr,\n+    ) -> Option<LangItemTarget> {\n+        let lang_items = db.crate_lang_items(start_crate);\n+        let start_crate_target = lang_items.items.get(&item);\n+        if let Some(target) = start_crate_target {\n+            return Some(*target);\n+        }\n+        db.crate_graph()\n+            .dependencies(start_crate)\n+            .find_map(|dep| db.lang_item(dep.crate_id, item.clone()))\n+    }\n+\n+    fn collect_lang_items(&mut self, db: &impl DefDatabase2, module: ModuleId) {\n+        // Look for impl targets\n+        let def_map = db.crate_def_map(module.krate);\n+        let module_data = &def_map[module.module_id];\n+        for &impl_block in module_data.impls.iter() {\n+            self.collect_lang_item(db, impl_block, LangItemTarget::ImplBlockId)\n+        }\n+\n+        for def in module_data.scope.declarations() {\n+            match def {\n+                ModuleDefId::TraitId(trait_) => {\n+                    self.collect_lang_item(db, trait_, LangItemTarget::TraitId)\n+                }\n+                ModuleDefId::AdtId(AdtId::EnumId(e)) => {\n+                    self.collect_lang_item(db, e, LangItemTarget::EnumId)\n+                }\n+                ModuleDefId::AdtId(AdtId::StructId(s)) => {\n+                    self.collect_lang_item(db, s, LangItemTarget::StructId)\n+                }\n+                ModuleDefId::FunctionId(f) => {\n+                    self.collect_lang_item(db, f, LangItemTarget::FunctionId)\n+                }\n+                ModuleDefId::StaticId(s) => self.collect_lang_item(db, s, LangItemTarget::StaticId),\n+                _ => {}\n+            }\n+        }\n+    }\n+\n+    fn collect_lang_item<T>(\n+        &mut self,\n+        db: &impl DefDatabase2,\n+        item: T,\n+        constructor: fn(T) -> LangItemTarget,\n+    ) where\n+        T: Into<AttrDefId> + Copy,\n+    {\n+        let attrs = db.attrs(item.into());\n+        if let Some(lang_item_name) = attrs.find_string_value(\"lang\") {\n+            self.items.entry(lang_item_name).or_insert_with(|| constructor(item));\n+        }\n+    }\n+}"}, {"sha": "899510be4bb395c1e40f0209114e9812d560c072", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=8692977d2798831d0aea434277ee54d589aa9be3", "patch": "@@ -19,6 +19,7 @@ pub mod body;\n pub mod generics;\n pub mod resolver;\n pub mod data;\n+pub mod lang_item;\n \n mod trace;\n "}]}