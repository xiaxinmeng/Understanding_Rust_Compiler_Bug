{"sha": "9089771daf6b1f1824446cca3306d7c18084eae0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwODk3NzFkYWY2YjFmMTgyNDQ0NmNjYTMzMDZkN2MxODA4NGVhZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-15T05:18:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-15T05:18:37Z"}, "message": "Auto merge of #85541 - XAMPPRocky:relnotes_1.53.0, r=Mark-Simulacrum\n\nUpdate RELEASES.md for 1.53.0\n\n### [Rendered](https://github.com/XAMPPRocky/rust/blob/relnotes_1.53.0/RELEASES.md)\n\nr? `@Mark-Simulacrum`\ncc `@rust-lang/release`", "tree": {"sha": "dc1ecffbf40dd15b930ec9e6d66427ca1c480f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc1ecffbf40dd15b930ec9e6d66427ca1c480f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9089771daf6b1f1824446cca3306d7c18084eae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9089771daf6b1f1824446cca3306d7c18084eae0", "html_url": "https://github.com/rust-lang/rust/commit/9089771daf6b1f1824446cca3306d7c18084eae0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9089771daf6b1f1824446cca3306d7c18084eae0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d74b36ea2f814b720c39d7b60aecaefe512a056b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d74b36ea2f814b720c39d7b60aecaefe512a056b", "html_url": "https://github.com/rust-lang/rust/commit/d74b36ea2f814b720c39d7b60aecaefe512a056b"}, {"sha": "6314a639b36cf789b00b43c64ad739795d683c6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6314a639b36cf789b00b43c64ad739795d683c6a", "html_url": "https://github.com/rust-lang/rust/commit/6314a639b36cf789b00b43c64ad739795d683c6a"}], "stats": {"total": 202, "additions": 202, "deletions": 0}, "files": [{"sha": "8adc450ac9869d16b0c2f485aa3eb069cf1e1656", "filename": "RELEASES.md", "status": "modified", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/9089771daf6b1f1824446cca3306d7c18084eae0/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/9089771daf6b1f1824446cca3306d7c18084eae0/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=9089771daf6b1f1824446cca3306d7c18084eae0", "patch": "@@ -1,3 +1,205 @@\n+Version 1.53.0 (2021-06-17)\n+============================\n+\n+Language\n+-----------------------\n+- [You can now use unicode for identifiers.][83799] This allows multilingual\n+  identifiers but still doesn't allow glyphs that are not considered characters\n+  such as `\u25c6` or `\ud83e\udd80`. More specifically you can now use any identifier that\n+  matches the UAX #31 \"Unicode Identifier and Pattern Syntax\" standard. This\n+  is the same standard as languages like Python, however Rust uses NFC\n+  normalization which may be different from other languages.\n+- [You can now specify \"or patterns\" inside pattern matches.][79278]\n+  Previously you could only use `|` (OR) on complete patterns. E.g.\n+  ```rust\n+  let x = Some(2u8);\n+  // Before\n+  matches!(x, Some(1) | Some(2));\n+  // Now\n+  matches!(x, Some(1 | 2));\n+  ```\n+- [Added the `:pat_param` `macro_rules!` matcher.][83386] This matcher\n+  has the same semantics as the `:pat` matcher. This is to allow `:pat`\n+  to change semantics to being a pattern fragment in a future edition.\n+\n+Compiler\n+-----------------------\n+- [Updated the minimum external LLVM version to LLVM 10.][83387]\n+- [Added Tier 3\\* support for the `wasm64-unknown-unknown` target.][80525]\n+- [Improved debuginfo for closures and async functions on Windows MSVC.][83941]\n+\n+\\* Refer to Rust's [platform support page][platform-support-doc] for more\n+information on Rust's tiered platform support.\n+\n+Libraries\n+-----------------------\n+- [Abort messages will now forward to `android_set_abort_message` on\n+  Android platforms when available.][81469]\n+- [`slice::IterMut<'_, T>` now implements `AsRef<[T]>`][82771]\n+- [Arrays of any length now implement `IntoIterator`.][84147]\n+  Currently calling `.into_iter()` as a method on an array will\n+  return `impl Iterator<Item=&T>`, but this may change in a\n+  future edition to change `Item` to `T`. Calling `IntoIterator::into_iter`\n+  directly on arrays will provide `impl Iterator<Item=T>` as expected.\n+- [`leading_zeros`, and `trailing_zeros` are now available on all\n+  `NonZero` integer types.][84082]\n+- [`{f32, f64}::from_str` now parse and print special values\n+  (`NaN`, `-0`) according to IEEE RFC 754.][78618]\n+- [You can now index into slices using `(Bound<usize>, Bound<usize>)`.][77704]\n+- [Add the `BITS` associated constant to all numeric types.][82565]\n+\n+Stabilised APIs\n+---------------\n+- [`AtomicBool::fetch_update`]\n+- [`AtomicPtr::fetch_update`]\n+- [`BTreeMap::retain`]\n+- [`BTreeSet::retain`]\n+- [`BufReader::seek_relative`]\n+- [`DebugStruct::non_exhaustive`]\n+- [`Duration::MAX`]\n+- [`Duration::ZERO`]\n+- [`Duration::is_zero`]\n+- [`Duration::saturating_add`]\n+- [`Duration::saturating_mul`]\n+- [`Duration::saturating_sub`]\n+- [`ErrorKind::Unsupported`]\n+- [`Option::insert`]\n+- [`Ordering::is_eq`]\n+- [`Ordering::is_ge`]\n+- [`Ordering::is_gt`]\n+- [`Ordering::is_le`]\n+- [`Ordering::is_lt`]\n+- [`Ordering::is_ne`]\n+- [`OsStr::is_ascii`]\n+- [`OsStr::make_ascii_lowercase`]\n+- [`OsStr::make_ascii_uppercase`]\n+- [`OsStr::to_ascii_lowercase`]\n+- [`OsStr::to_ascii_uppercase`]\n+- [`Peekable::peek_mut`]\n+- [`Rc::decrement_strong_count`]\n+- [`Rc::increment_strong_count`]\n+- [`Vec::extend_from_within`]\n+- [`array::from_mut`]\n+- [`array::from_ref`]\n+- [`char::MAX`]\n+- [`char::REPLACEMENT_CHARACTER`]\n+- [`char::UNICODE_VERSION`]\n+- [`char::decode_utf16`]\n+- [`char::from_digit`]\n+- [`char::from_u32_unchecked`]\n+- [`char::from_u32`]\n+- [`cmp::max_by_key`]\n+- [`cmp::max_by`]\n+- [`cmp::min_by_key`]\n+- [`cmp::min_by`]\n+- [`f32::is_subnormal`]\n+- [`f64::is_subnormal`]\n+\n+Cargo\n+-----------------------\n+- [Cargo now supports git repositories where the default `HEAD` branch is not\n+  \"master\".][cargo/9392] This also includes a switch to the version 3 `Cargo.lock` format\n+  which can handle default branches correctly.\n+- [macOS targets now default to `unpacked` split-debuginfo.][cargo/9298]\n+- [The `authors` field is no longer included in `Cargo.toml` for new\n+  projects.][cargo/9282]\n+\n+Rustdoc\n+-----------------------\n+- [Added the `rustdoc::bare_urls` lint that warns when you have URLs\n+  without hyperlinks.][81764]\n+\n+Compatibility Notes\n+-------------------\n+- [Implement token-based handling of attributes during expansion][82608]\n+- [`Ipv4::from_str` will now reject octal format IP addresses in addition\n+  to rejecting hexadecimal IP addresses.][83652] The octal format can lead\n+  to confusion and potential security vulnerabilities and [is no\n+  longer recommended][ietf6943].\n+\n+\n+Internal Only\n+-------------\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc and\n+related tools.\n+\n+- [Rework the `std::sys::windows::alloc` implementation.][83065]\n+- [rustdoc: Don't enter an infer_ctxt in get_blanket_impls for impls that aren't blanket impls.][82864]\n+- [rustdoc: Only look at blanket impls in `get_blanket_impls`][83681]\n+- [Rework rustdoc const type][82873]\n+\n+[83386]: https://github.com/rust-lang/rust/pull/83386\n+[82771]: https://github.com/rust-lang/rust/pull/82771\n+[84147]: https://github.com/rust-lang/rust/pull/84147\n+[84082]: https://github.com/rust-lang/rust/pull/84082\n+[83799]: https://github.com/rust-lang/rust/pull/83799\n+[83681]: https://github.com/rust-lang/rust/pull/83681\n+[83652]: https://github.com/rust-lang/rust/pull/83652\n+[83387]: https://github.com/rust-lang/rust/pull/83387\n+[82873]: https://github.com/rust-lang/rust/pull/82873\n+[82864]: https://github.com/rust-lang/rust/pull/82864\n+[82608]: https://github.com/rust-lang/rust/pull/82608\n+[82565]: https://github.com/rust-lang/rust/pull/82565\n+[80525]: https://github.com/rust-lang/rust/pull/80525\n+[79278]: https://github.com/rust-lang/rust/pull/79278\n+[78618]: https://github.com/rust-lang/rust/pull/78618\n+[77704]: https://github.com/rust-lang/rust/pull/77704\n+[83941]: https://github.com/rust-lang/rust/pull/83941\n+[83065]: https://github.com/rust-lang/rust/pull/83065\n+[81764]: https://github.com/rust-lang/rust/pull/81764\n+[81469]: https://github.com/rust-lang/rust/pull/81469\n+[cargo/9298]: https://github.com/rust-lang/cargo/pull/9298\n+[cargo/9282]: https://github.com/rust-lang/cargo/pull/9282\n+[cargo/9392]: https://github.com/rust-lang/cargo/pull/9392\n+[`char::MAX`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.MAX\n+[`char::REPLACEMENT_CHARACTER`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.REPLACEMENT_CHARACTER\n+[`char::UNICODE_VERSION`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.UNICODE_VERSION\n+[`char::decode_utf16`]: https://doc.rust-lang.org/std/primitive.char.html#method.decode_utf16\n+[`char::from_u32`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_u32\n+[`char::from_u32_unchecked`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_u32_unchecked\n+[`char::from_digit`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_digit\n+[`AtomicBool::fetch_update`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicBool.html#method.fetch_update\n+[`AtomicPtr::fetch_update`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicPtr.html#method.fetch_update\n+[`BTreeMap::retain`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.retain\n+[`BTreeSet::retain`]: https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.retain\n+[`BufReader::seek_relative`]: https://doc.rust-lang.org/std/io/struct.BufReader.html#method.seek_relative\n+[`DebugStruct::non_exhaustive`]: https://doc.rust-lang.org/std/fmt/struct.DebugStruct.html#method.finish_non_exhaustive\n+[`Duration::MAX`]: https://doc.rust-lang.org/std/time/struct.Duration.html#associatedconstant.MAX\n+[`Duration::ZERO`]: https://doc.rust-lang.org/std/time/struct.Duration.html#associatedconstant.ZERO\n+[`Duration::is_zero`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.is_zero\n+[`Duration::saturating_add`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.saturating_add\n+[`Duration::saturating_mul`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.saturating_mul\n+[`Duration::saturating_sub`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.saturating_sub\n+[`ErrorKind::Unsupported`]: https://doc.rust-lang.org/std/io/enum.ErrorKind.html#variant.Unsupported\n+[`Option::insert`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.insert\n+[`Ordering::is_eq`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_eq\n+[`Ordering::is_ge`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_ge\n+[`Ordering::is_gt`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_gt\n+[`Ordering::is_le`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_le\n+[`Ordering::is_lt`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_lt\n+[`Ordering::is_ne`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_ne\n+[`OsStr::eq_ignore_ascii_case`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.eq_ignore_ascii_case\n+[`OsStr::is_ascii`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.is_ascii\n+[`OsStr::make_ascii_lowercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.make_ascii_lowercase\n+[`OsStr::make_ascii_uppercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.make_ascii_uppercase\n+[`OsStr::to_ascii_lowercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.to_ascii_lowercase\n+[`OsStr::to_ascii_uppercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.to_ascii_uppercase\n+[`Peekable::peek_mut`]: https://doc.rust-lang.org/std/iter/struct.Peekable.html#method.peek_mut\n+[`Rc::decrement_strong_count`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.increment_strong_count\n+[`Rc::increment_strong_count`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.increment_strong_count\n+[`Vec::extend_from_within`]: https://doc.rust-lang.org/beta/std/vec/struct.Vec.html#method.extend_from_within\n+[`array::from_mut`]: https://doc.rust-lang.org/beta/std/array/fn.from_mut.html\n+[`array::from_ref`]: https://doc.rust-lang.org/beta/std/array/fn.from_ref.html\n+[`cmp::max_by_key`]: https://doc.rust-lang.org/beta/std/cmp/fn.max_by_key.html\n+[`cmp::max_by`]: https://doc.rust-lang.org/beta/std/cmp/fn.max_by.html\n+[`cmp::min_by_key`]: https://doc.rust-lang.org/beta/std/cmp/fn.min_by_key.html\n+[`cmp::min_by`]: https://doc.rust-lang.org/beta/std/cmp/fn.min_by.html\n+[`f32::is_subnormal`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_subnormal\n+[`f64::is_subnormal`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_subnormal\n+[ietf6943]: https://datatracker.ietf.org/doc/html/rfc6943#section-3.1.1\n+\n+\n Version 1.52.1 (2021-05-10)\n ============================\n "}]}