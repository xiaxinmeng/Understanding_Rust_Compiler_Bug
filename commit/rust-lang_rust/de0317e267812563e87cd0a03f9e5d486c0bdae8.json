{"sha": "de0317e267812563e87cd0a03f9e5d486c0bdae8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMDMxN2UyNjc4MTI1NjNlODdjZDBhMDNmOWU1ZDQ4NmMwYmRhZTg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-14T13:40:56Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-14T13:40:56Z"}, "message": "incr.comp.: Encode DefPathTables for reconstructing DefIds.", "tree": {"sha": "95ac18f2fcbeb9ede193b517a90ea012a8f3b949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95ac18f2fcbeb9ede193b517a90ea012a8f3b949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de0317e267812563e87cd0a03f9e5d486c0bdae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de0317e267812563e87cd0a03f9e5d486c0bdae8", "html_url": "https://github.com/rust-lang/rust/commit/de0317e267812563e87cd0a03f9e5d486c0bdae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de0317e267812563e87cd0a03f9e5d486c0bdae8/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bedb44cca89541bc5e03b029a7b6682b632fd10d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bedb44cca89541bc5e03b029a7b6682b632fd10d", "html_url": "https://github.com/rust-lang/rust/commit/bedb44cca89541bc5e03b029a7b6682b632fd10d"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "7431d6dd497b8c4b6253721adb22c22e802eddaf", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de0317e267812563e87cd0a03f9e5d486c0bdae8/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0317e267812563e87cd0a03f9e5d486c0bdae8/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=de0317e267812563e87cd0a03f9e5d486c0bdae8", "patch": "@@ -49,6 +49,7 @@ pub struct OnDiskCache<'sess> {\n \n     prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n     cnum_map: RefCell<Option<IndexVec<CrateNum, Option<CrateNum>>>>,\n+    prev_def_path_tables: Vec<DefPathTable>,\n \n     _prev_filemap_starts: BTreeMap<BytePos, StableFilemapId>,\n     codemap: &'sess CodeMap,\n@@ -73,9 +74,12 @@ impl<'sess> OnDiskCache<'sess> {\n         debug_assert!(sess.opts.incremental.is_some());\n \n         let mut decoder = opaque::Decoder::new(&data[..], start_pos);\n+\n+\n+        // Decode the header\n         let header = Header::decode(&mut decoder).unwrap();\n \n-        let prev_diagnostics = {\n+        let (prev_diagnostics, prev_def_path_tables) = {\n             let mut decoder = CacheDecoder {\n                 tcx: None,\n                 opaque: decoder,\n@@ -85,21 +89,28 @@ impl<'sess> OnDiskCache<'sess> {\n                 prev_def_path_tables: &Vec::new(),\n             };\n \n+            // Decode Diagnostics\n             let prev_diagnostics: FxHashMap<_, _> = {\n                 let diagnostics = EncodedPrevDiagnostics::decode(&mut decoder)\n                     .expect(\"Error while trying to decode prev. diagnostics \\\n                              from incr. comp. cache.\");\n                 diagnostics.into_iter().collect()\n             };\n \n-            prev_diagnostics\n+            // Decode DefPathTables\n+            let prev_def_path_tables: Vec<DefPathTable> =\n+                Decodable::decode(&mut decoder)\n+                    .expect(\"Error while trying to decode cached DefPathTables\");\n+\n+            (prev_diagnostics, prev_def_path_tables)\n         };\n \n         OnDiskCache {\n             prev_diagnostics,\n             _prev_filemap_starts: header.prev_filemap_starts,\n             prev_cnums: header.prev_cnums,\n             cnum_map: RefCell::new(None),\n+            prev_def_path_tables,\n             codemap: sess.codemap(),\n             current_diagnostics: RefCell::new(FxHashMap()),\n         }\n@@ -111,6 +122,7 @@ impl<'sess> OnDiskCache<'sess> {\n             _prev_filemap_starts: BTreeMap::new(),\n             prev_cnums: vec![],\n             cnum_map: RefCell::new(None),\n+            prev_def_path_tables: Vec::new(),\n             codemap,\n             current_diagnostics: RefCell::new(FxHashMap()),\n         }\n@@ -166,6 +178,22 @@ impl<'sess> OnDiskCache<'sess> {\n \n         diagnostics.encode(&mut encoder)?;\n \n+\n+        // Encode all DefPathTables\n+        let upstream_def_path_tables = tcx.all_crate_nums(LOCAL_CRATE)\n+                                          .iter()\n+                                          .map(|&cnum| (cnum, cstore.def_path_table(cnum)))\n+                                          .collect::<FxHashMap<_,_>>();\n+        let def_path_tables: Vec<&DefPathTable> = sorted_cnums.into_iter().map(|cnum| {\n+            if cnum == LOCAL_CRATE {\n+                tcx.hir.definitions().def_path_table()\n+            } else {\n+                &*upstream_def_path_tables[&cnum]\n+            }\n+        }).collect();\n+\n+        def_path_tables.encode(&mut encoder)?;\n+\n         return Ok(());\n \n         fn sorted_cnums_including_local_crate(cstore: &CrateStore) -> Vec<CrateNum> {"}]}