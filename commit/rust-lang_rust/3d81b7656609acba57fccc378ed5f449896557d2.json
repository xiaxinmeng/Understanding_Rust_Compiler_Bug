{"sha": "3d81b7656609acba57fccc378ed5f449896557d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkODFiNzY1NjYwOWFjYmE1N2ZjY2MzNzhlZDVmNDQ5ODk2NTU3ZDI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-01T17:55:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-01T17:55:20Z"}, "message": "Rustup to rustc 1.34.0-nightly (350674b71 2019-02-28)", "tree": {"sha": "b96bb59321f50016c045dc7b8bd9ba39fdd2589b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b96bb59321f50016c045dc7b8bd9ba39fdd2589b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d81b7656609acba57fccc378ed5f449896557d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d81b7656609acba57fccc378ed5f449896557d2", "html_url": "https://github.com/rust-lang/rust/commit/3d81b7656609acba57fccc378ed5f449896557d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d81b7656609acba57fccc378ed5f449896557d2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c88af343883d535ba92fbfb00146f9d01b436ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c88af343883d535ba92fbfb00146f9d01b436ca", "html_url": "https://github.com/rust-lang/rust/commit/6c88af343883d535ba92fbfb00146f9d01b436ca"}], "stats": {"total": 95, "additions": 51, "deletions": 44}, "files": [{"sha": "1045e7f0cec5983cb05cc1ac558aae58478a6ea4", "filename": "example/mini_core.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d81b7656609acba57fccc378ed5f449896557d2/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d81b7656609acba57fccc378ed5f449896557d2/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=3d81b7656609acba57fccc378ed5f449896557d2", "patch": "@@ -1,4 +1,4 @@\n-#![feature(no_core, lang_items, intrinsics, unboxed_closures, type_ascription)]\n+#![feature(no_core, lang_items, intrinsics, unboxed_closures, type_ascription, extern_types)]\n #![no_core]\n #![allow(dead_code)]\n \n@@ -386,3 +386,11 @@ impl<T> Index<usize> for [T] {\n         &self[index]\n     }\n }\n+\n+extern {\n+    type VaListImpl;\n+}\n+\n+#[lang = \"va_list\"]\n+#[repr(transparent)]\n+pub struct VaList<'a>(&'a mut VaListImpl);"}, {"sha": "0f4781f24a97cafd5ce6b3321567e8f50c241094", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3d81b7656609acba57fccc378ed5f449896557d2/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/3d81b7656609acba57fccc378ed5f449896557d2/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=3d81b7656609acba57fccc378ed5f449896557d2", "patch": "@@ -1,6 +1,6 @@\n-From 61a7d6cc7809c89a8d2d046946dd0cb7cb1cd1b5 Mon Sep 17 00:00:00 2001\n+From e87977477e8507a5749e64ea49ee503e706d7178 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sun, 24 Feb 2019 11:27:11 +0100\n+Date: Fri, 1 Mar 2019 18:36:21 +0100\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n@@ -215,10 +215,10 @@ index dfe1d2a..06cc578 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index cdb42c1..75743ee 100644\n+index 9516c02..9d91885 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -149,14 +149,12 @@ mod uint_macros;\n+@@ -148,14 +148,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -249,7 +249,7 @@ index 29606cb..160cca1 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 43afc9a..fc5366b 100644\n+index f41d293..71b5e09 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n @@ -164,12 +164,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n@@ -266,7 +266,7 @@ index 43afc9a..fc5366b 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index 5b7d5f4..0cfb96c 100644\n+index 6708a19..4066b0c 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n @@ -102,13 +102,11 @@ nonzero_integers! {\n@@ -283,7 +283,7 @@ index 5b7d5f4..0cfb96c 100644\n      #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n  }\n  \n-@@ -2120,18 +2118,6 @@ impl i64 {\n+@@ -2117,18 +2115,6 @@ impl i64 {\n           \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -302,7 +302,7 @@ index 5b7d5f4..0cfb96c 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4407,17 +4393,6 @@ impl u64 {\n+@@ -4401,17 +4387,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -320,7 +320,7 @@ index 5b7d5f4..0cfb96c 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4376,7 +4376,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4495,7 +4470,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -329,7 +329,7 @@ index 5b7d5f4..0cfb96c 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-@@ -4617,30 +4592,25 @@ macro_rules! rev {\n+@@ -4621,30 +4596,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -364,7 +364,7 @@ index 5b7d5f4..0cfb96c 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4652,21 +4622,21 @@ mod ptr_try_from_impls {\n+@@ -4656,21 +4626,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -394,7 +394,7 @@ index 5b7d5f4..0cfb96c 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4675,24 +4645,24 @@ mod ptr_try_from_impls {\n+@@ -4679,24 +4649,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -427,7 +427,7 @@ index 5b7d5f4..0cfb96c 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4701,24 +4671,20 @@ mod ptr_try_from_impls {\n+@@ -4705,24 +4675,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -456,7 +456,7 @@ index 5b7d5f4..0cfb96c 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -4753,7 +4719,7 @@ macro_rules! doit {\n+@@ -4757,7 +4723,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -465,7 +465,7 @@ index 5b7d5f4..0cfb96c 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4944,52 +4910,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4948,52 +4914,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -519,7 +519,7 @@ index 5b7d5f4..0cfb96c 100644\n  // The C99 standard defines bounds on INTPTR_MIN, INTPTR_MAX, and UINTPTR_MAX\n  // which imply that pointer-sized integers must be at least 16 bits:\n diff --git a/src/libcore/num/wrapping.rs b/src/libcore/num/wrapping.rs\n-index 50e189c..2da3b35 100644\n+index 9cd5108..26c8abc 100644\n --- a/src/libcore/num/wrapping.rs\n +++ b/src/libcore/num/wrapping.rs\n @@ -102,19 +102,17 @@ macro_rules! sh_impl_all {\n@@ -552,7 +552,7 @@ index 50e189c..2da3b35 100644\n  \n  macro_rules! wrapping_int_impl {\n      ($($t:ty)*) => ($(\n-@@ -675,7 +673,7 @@ assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n+@@ -677,7 +675,7 @@ assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n      )*)\n  }\n  \n@@ -561,7 +561,7 @@ index 50e189c..2da3b35 100644\n  \n  macro_rules! wrapping_int_impl_signed {\n      ($($t:ty)*) => ($(\n-@@ -804,7 +802,7 @@ assert!(!Wrapping(10\", stringify!($t), \").is_negative());\n+@@ -806,7 +804,7 @@ assert!(!Wrapping(10\", stringify!($t), \").is_negative());\n      )*)\n  }\n  \n@@ -570,7 +570,7 @@ index 50e189c..2da3b35 100644\n  \n  macro_rules! wrapping_int_impl_unsigned {\n      ($($t:ty)*) => ($(\n-@@ -881,7 +879,7 @@ assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\n+@@ -883,7 +881,7 @@ assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\n      )*)\n  }\n  \n@@ -579,7 +579,7 @@ index 50e189c..2da3b35 100644\n  \n  mod shift_max {\n      #![allow(non_upper_case_globals)]\n-@@ -908,13 +906,11 @@ mod shift_max {\n+@@ -910,13 +908,11 @@ mod shift_max {\n      pub const i16: u32 = (1 << 4) - 1;\n      pub const i32: u32 = (1 << 5) - 1;\n      pub const i64: u32 = (1 << 6) - 1;\n@@ -1033,10 +1033,10 @@ index 91161ca..759497f 100644\n      ///\n      /// # Examples\n diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index c7401e2..3dff42a 100644\n+index 2b62b5b..c6515bc 100644\n --- a/src/libstd/lib.rs\n +++ b/src/libstd/lib.rs\n-@@ -396,8 +396,6 @@ pub use core::i16;\n+@@ -393,8 +393,6 @@ pub use core::i16;\n  pub use core::i32;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::i64;\n@@ -1045,7 +1045,7 @@ index c7401e2..3dff42a 100644\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::usize;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-@@ -430,8 +428,6 @@ pub use alloc_crate::string;\n+@@ -427,8 +425,6 @@ pub use alloc_crate::string;\n  pub use alloc_crate::vec;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::char;\n@@ -1055,7 +1055,7 @@ index c7401e2..3dff42a 100644\n  pub use core::hint;\n  \n diff --git a/src/libstd/net/ip.rs b/src/libstd/net/ip.rs\n-index c856129..2bfe9cb 100644\n+index fa256ce..42b0aa2 100644\n --- a/src/libstd/net/ip.rs\n +++ b/src/libstd/net/ip.rs\n @@ -1391,48 +1391,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n@@ -1108,7 +1108,7 @@ index c856129..2bfe9cb 100644\n  impl From<[u8; 16]> for Ipv6Addr {\n      fn from(octets: [u8; 16]) -> Ipv6Addr {\n diff --git a/src/libstd/num.rs b/src/libstd/num.rs\n-index c80b9a5..e32a6b3 100644\n+index 828d572..bc04fb1 100644\n --- a/src/libstd/num.rs\n +++ b/src/libstd/num.rs\n @@ -12,7 +12,7 @@ pub use core::num::{FpCategory, ParseIntError, ParseFloatError, TryFromIntError}\n@@ -1118,10 +1118,10 @@ index c80b9a5..e32a6b3 100644\n -pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU128, NonZeroUsize};\n +pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroUsize};\n  \n- #[cfg(test)] use fmt;\n- #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n+ #[cfg(test)] use crate::fmt;\n+ #[cfg(test)] use crate::ops::{Add, Sub, Mul, Div, Rem};\n diff --git a/src/libstd/panic.rs b/src/libstd/panic.rs\n-index daeac71..717ee82 100644\n+index 6a16414..f027102 100644\n --- a/src/libstd/panic.rs\n +++ b/src/libstd/panic.rs\n @@ -254,9 +254,6 @@ impl RefUnwindSafe for atomic::AtomicI32 {}"}, {"sha": "1ee7069262749b64a7bf71419717034e329f9055", "filename": "patches/0014-Don-t-use-OS-TLS.patch", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d81b7656609acba57fccc378ed5f449896557d2/patches%2F0014-Don-t-use-OS-TLS.patch", "raw_url": "https://github.com/rust-lang/rust/raw/3d81b7656609acba57fccc378ed5f449896557d2/patches%2F0014-Don-t-use-OS-TLS.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0014-Don-t-use-OS-TLS.patch?ref=3d81b7656609acba57fccc378ed5f449896557d2", "patch": "@@ -1,6 +1,6 @@\n-From 1ad7a849f9ff845f676d4625ba71d1060039c0de Mon Sep 17 00:00:00 2001\n+From 0c7406a33e3a40427760e6955188be193fd568a8 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Thu, 31 Jan 2019 20:11:56 +0100\n+Date: Fri, 1 Mar 2019 18:36:22 +0100\n Subject: [PATCH] Don't use OS TLS\n \n ---\n@@ -9,10 +9,10 @@ Subject: [PATCH] Don't use OS TLS\n  2 files changed, 2 insertions(+), 3 deletions(-)\n \n diff --git a/src/libstd/thread/local.rs b/src/libstd/thread/local.rs\n-index 5d2eb5f..39513b6 100644\n+index d1f5373..ce83b3b 100644\n --- a/src/libstd/thread/local.rs\n +++ b/src/libstd/thread/local.rs\n-@@ -160,10 +160,10 @@ macro_rules! __thread_local_inner {\n+@@ -164,10 +164,10 @@ macro_rules! __thread_local_inner {\n                  &'static $crate::cell::UnsafeCell<\n                      $crate::option::Option<$t>>>\n              {\n@@ -24,24 +24,24 @@ index 5d2eb5f..39513b6 100644\n                  #[thread_local]\n                  #[cfg(all(\n                      target_thread_local,\n-@@ -178,6 +178,7 @@ macro_rules! __thread_local_inner {\n+@@ -182,6 +182,7 @@ macro_rules! __thread_local_inner {\n                  ))]\n                  static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n                      $crate::thread::__OsLocalKeyInner::new();\n +                */\n  \n                  __KEY.get()\n              }\n-@@ -304,7 +305,6 @@ impl<T: 'static> LocalKey<T> {\n+@@ -308,7 +309,6 @@ impl<T: 'static> LocalKey<T> {\n  /// On some platforms like wasm32 there's no threads, so no need to generate\n  /// thread locals and we can instead just use plain statics!\n  #[doc(hidden)]\n -#[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n  pub mod statik {\n-     use cell::UnsafeCell;\n-     use fmt;\n+     use crate::cell::UnsafeCell;\n+     use crate::fmt;\n diff --git a/src/libstd/thread/mod.rs b/src/libstd/thread/mod.rs\n-index eb8e0c1..b44d737 100644\n+index 08f0aa2..eff3126 100644\n --- a/src/libstd/thread/mod.rs\n +++ b/src/libstd/thread/mod.rs\n @@ -195,7 +195,6 @@ pub use self::local::{LocalKey, AccessError};\n@@ -53,5 +53,4 @@ index eb8e0c1..b44d737 100644\n  #[unstable(feature = \"libstd_thread_internals\", issue = \"0\")]\n  #[cfg(target_thread_local)]\n -- \n-2.11.0\n-\n+2.17.2 (Apple Git-113)"}, {"sha": "45c2c6d3719c02f77d930be166c73fc00c3f9efa", "filename": "src/abi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d81b7656609acba57fccc378ed5f449896557d2/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d81b7656609acba57fccc378ed5f449896557d2/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=3d81b7656609acba57fccc378ed5f449896557d2", "patch": "@@ -152,7 +152,7 @@ pub fn ty_fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> ty::FnS\n             sig.map_bound(|sig| tcx.mk_fn_sig(\n                 iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n                 sig.output(),\n-                sig.variadic,\n+                sig.c_variadic,\n                 sig.unsafety,\n                 sig.abi\n             ))\n@@ -193,7 +193,7 @@ pub fn get_function_name_and_sig<'a, 'tcx>(\n     assert!(!inst.substs.needs_infer() && !inst.substs.has_param_types());\n     let fn_ty = inst.ty(tcx);\n     let fn_sig = ty_fn_sig(tcx, fn_ty);\n-    if fn_sig.variadic && !support_vararg {\n+    if fn_sig.c_variadic && !support_vararg {\n         unimpl!(\"Variadic function definitions are not yet supported\");\n     }\n     let sig = clif_sig_from_fn_sig(tcx, fn_sig);\n@@ -717,7 +717,7 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n     };\n \n     // FIXME find a cleaner way to support varargs\n-    if fn_sig.variadic {\n+    if fn_sig.c_variadic {\n         if fn_sig.abi != Abi::C {\n             unimpl!(\"Variadic call for non-C abi {:?}\", fn_sig.abi);\n         }"}, {"sha": "31ca4168d242ceb7b01bd22a298f556b9ca32f7e", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d81b7656609acba57fccc378ed5f449896557d2/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d81b7656609acba57fccc378ed5f449896557d2/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=3d81b7656609acba57fccc378ed5f449896557d2", "patch": "@@ -20,7 +20,7 @@ use crate::prelude::*;\n /// function u0:0(i64, i64, i64) system_v {\n /// ; symbol _ZN119_$LT$example..IsNotEmpty$u20$as$u20$mini_core..FnOnce$LT$$LP$$RF$$u27$a$u20$$RF$$u27$b$u20$$u5b$u16$u5d$$C$$RP$$GT$$GT$9call_once17he85059d5e6a760a0E\n /// ; instance Instance { def: Item(DefId(0/0:29 ~ example[8787]::{{impl}}[0]::call_once[0])), substs: [ReErased, ReErased] }\n-/// ; sig ([IsNotEmpty, (&&[u16],)]; variadic: false)->(u8, u8)\n+/// ; sig ([IsNotEmpty, (&&[u16],)]; c_variadic: false)->(u8, u8)\n ///\n /// ; ssa {_2: NOT_SSA, _4: NOT_SSA, _0: NOT_SSA, _3: (empty), _1: NOT_SSA}\n /// ; msg   loc.idx    param    pass mode            ssa flags  ty"}]}