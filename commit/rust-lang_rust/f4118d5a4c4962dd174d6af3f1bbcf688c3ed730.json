{"sha": "f4118d5a4c4962dd174d6af3f1bbcf688c3ed730", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MTE4ZDVhNGM0OTYyZGQxNzRkNmFmM2YxYmJjZjY4OGMzZWQ3MzA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-30T23:41:11Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-02T22:16:08Z"}, "message": "libsyntax: De-`@mut` `Parser::open_braces`", "tree": {"sha": "d8c8db1a5ffc775a228d1fae58422a914abde24c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8c8db1a5ffc775a228d1fae58422a914abde24c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4118d5a4c4962dd174d6af3f1bbcf688c3ed730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4118d5a4c4962dd174d6af3f1bbcf688c3ed730", "html_url": "https://github.com/rust-lang/rust/commit/f4118d5a4c4962dd174d6af3f1bbcf688c3ed730", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4118d5a4c4962dd174d6af3f1bbcf688c3ed730/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2f4877862b35b2dc4b089339b8147d255a8b516", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f4877862b35b2dc4b089339b8147d255a8b516", "html_url": "https://github.com/rust-lang/rust/commit/a2f4877862b35b2dc4b089339b8147d255a8b516"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "53ae6eef77fec70ce0dcd92e02506415ea0c41df", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4118d5a4c4962dd174d6af3f1bbcf688c3ed730/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4118d5a4c4962dd174d6af3f1bbcf688c3ed730/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f4118d5a4c4962dd174d6af3f1bbcf688c3ed730", "patch": "@@ -318,7 +318,7 @@ pub fn Parser(sess: @mut ParseSess, cfg: ast::CrateConfig, rdr: @mut reader)\n         quote_depth: 0,\n         obsolete_set: HashSet::new(),\n         mod_path_stack: ~[],\n-        open_braces: @mut ~[],\n+        open_braces: ~[],\n         non_copyable: util::NonCopyable\n     }\n }\n@@ -349,7 +349,7 @@ pub struct Parser {\n     /// Used to determine the path to externally loaded source files\n     mod_path_stack: ~[@str],\n     /// Stack of spans of open delimiters. Used for error message.\n-    open_braces: @mut ~[Span],\n+    open_braces: ~[Span],\n     /* do not copy the parser; its state is tied to outside state */\n     priv non_copyable: util::NonCopyable\n }\n@@ -2093,7 +2093,10 @@ impl Parser {\n                   // This is a conservative error: only report the last unclosed delimiter. The\n                   // previous unclosed delimiters could actually be closed! The parser just hasn't\n                   // gotten to them yet.\n-                  p.open_braces.last_opt().map(|sp| p.span_note(*sp, \"unclosed delimiter\"));\n+                  match p.open_braces.last_opt() {\n+                      None => {}\n+                      Some(&sp) => p.span_note(sp, \"unclosed delimiter\"),\n+                  };\n                   let token_str = p.this_token_to_str();\n                   p.fatal(format!(\"incorrect close delimiter: `{}`\",\n                                   token_str))\n@@ -2137,7 +2140,8 @@ impl Parser {\n \n         match self.token {\n             token::EOF => {\n-                for sp in self.open_braces.iter() {\n+                let open_braces = self.open_braces.clone();\n+                for sp in open_braces.iter() {\n                     self.span_note(*sp, \"Did you mean to close this delimiter?\");\n                 }\n                 // There shouldn't really be a span, but it's easier for the test runner\n@@ -2148,7 +2152,7 @@ impl Parser {\n                 let close_delim = token::flip_delimiter(&self.token);\n \n                 // Parse the open delimiter.\n-                (*self.open_braces).push(self.span);\n+                self.open_braces.push(self.span);\n                 let mut result = ~[parse_any_tt_tok(self)];\n \n                 let trees ="}]}