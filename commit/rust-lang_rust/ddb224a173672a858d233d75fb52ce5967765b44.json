{"sha": "ddb224a173672a858d233d75fb52ce5967765b44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYjIyNGExNzM2NzJhODU4ZDIzM2Q3NWZiNTJjZTU5Njc3NjViNDQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-22T13:33:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-22T13:33:36Z"}, "message": "Upgrade `annotate-snippets` to 0.8 (#4762)", "tree": {"sha": "a0c0bc6c9593aeb3bd6ad66212c5bfb99aeb0124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0c0bc6c9593aeb3bd6ad66212c5bfb99aeb0124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddb224a173672a858d233d75fb52ce5967765b44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJggXswCRBK7hj4Ov3rIwAAeBUIAJEc6MzvrYYJ7M6jc86ThV0r\niCEUHx19zsSiy4kMjS2Gd+KWxt7CBwYI9FVn5GIOzA7PUx1wlX4GcDQjt3EOGexK\nwTGKxVZbONwdG8F7rpmS9j/XNFiIg6j9Q8JPTH/cF6F2Nqyz5NFUTRZffuQqmRVv\nw46aWk6ad2X97TU62HSSOcbKv/6nXBq2d3gL/m9CZiIpDqs2D5yHECtdMRQWxOcb\naPTaoRcjIYgnGsSsJ+d558HEuojpiXCCm81F+ehYB4LsLhJX2N6jVsmNf1l0wn/u\ncClyRMPp/CXroEsa4OUr4ovlMX7s/cTCm+shPR4X4nkARh6NC7YUoT/B5oRmOrs=\n=NhGG\n-----END PGP SIGNATURE-----\n", "payload": "tree a0c0bc6c9593aeb3bd6ad66212c5bfb99aeb0124\nparent 84ff0013c25cd96995f61253b0b8da74e32d12ea\nauthor Yuki Okushi <jtitor@2k36.org> 1619098416 +0900\ncommitter GitHub <noreply@github.com> 1619098416 -0500\n\nUpgrade `annotate-snippets` to 0.8 (#4762)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb224a173672a858d233d75fb52ce5967765b44", "html_url": "https://github.com/rust-lang/rust/commit/ddb224a173672a858d233d75fb52ce5967765b44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddb224a173672a858d233d75fb52ce5967765b44/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84ff0013c25cd96995f61253b0b8da74e32d12ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ff0013c25cd96995f61253b0b8da74e32d12ea", "html_url": "https://github.com/rust-lang/rust/commit/84ff0013c25cd96995f61253b0b8da74e32d12ea"}], "stats": {"total": 163, "additions": 74, "deletions": 89}, "files": [{"sha": "0e12e81904c9121cca83959459ffecd128fdf0e6", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddb224a173672a858d233d75fb52ce5967765b44/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ddb224a173672a858d233d75fb52ce5967765b44/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ddb224a173672a858d233d75fb52ce5967765b44", "patch": "@@ -13,11 +13,11 @@ dependencies = [\n \n [[package]]\n name = \"annotate-snippets\"\n-version = \"0.6.1\"\n+version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c7021ce4924a3f25f802b2cccd1af585e39ea1a363a1aa2e72afe54b67a3a7a7\"\n+checksum = \"d78ea013094e5ea606b1c05fe35f1dd7ea1eb1ea259908d040b25bd5ec677ee5\"\n dependencies = [\n- \"ansi_term\",\n+ \"yansi-term\",\n ]\n \n [[package]]\n@@ -904,3 +904,12 @@ dependencies = [\n  \"winapi\",\n  \"winapi-util\",\n ]\n+\n+[[package]]\n+name = \"yansi-term\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fe5c30ade05e61656247b2e334a031dfd0cc466fadef865bdcdea8d537951bf1\"\n+dependencies = [\n+ \"winapi\",\n+]"}, {"sha": "24b3b79343b05587f56c44f9086ee48dea49f397", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddb224a173672a858d233d75fb52ce5967765b44/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ddb224a173672a858d233d75fb52ce5967765b44/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=ddb224a173672a858d233d75fb52ce5967765b44", "patch": "@@ -52,7 +52,7 @@ unicode-width = \"0.1.5\"\n unicode_categories = \"0.1.1\"\n dirs = \"2.0.1\"\n ignore = \"0.4.11\"\n-annotate-snippets = { version = \"0.6\", features = [\"ansi_term\"] }\n+annotate-snippets = { version = \"0.8\", features = [\"color\"] }\n structopt = \"0.3\"\n rustfmt-config_proc_macro = { version = \"0.2\", path = \"config_proc_macro\" }\n lazy_static = \"1.0.0\""}, {"sha": "c820259256c4724d0cd335573ab5b8de49e6ad05", "filename": "src/format_report_formatter.rs", "status": "modified", "additions": 61, "deletions": 85, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/ddb224a173672a858d233d75fb52ce5967765b44/src%2Fformat_report_formatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb224a173672a858d233d75fb52ce5967765b44/src%2Fformat_report_formatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat_report_formatter.rs?ref=ddb224a173672a858d233d75fb52ce5967765b44", "patch": "@@ -1,8 +1,6 @@\n-use crate::config::FileName;\n use crate::formatting::FormattingError;\n use crate::{ErrorKind, FormatReport};\n-use annotate_snippets::display_list::DisplayList;\n-use annotate_snippets::formatter::DisplayListFormatter;\n+use annotate_snippets::display_list::{DisplayList, FormatOptions};\n use annotate_snippets::snippet::{Annotation, AnnotationType, Slice, Snippet, SourceAnnotation};\n use std::fmt::{self, Display};\n \n@@ -48,115 +46,93 @@ pub struct FormatReportFormatter<'a> {\n \n impl<'a> Display for FormatReportFormatter<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let formatter = DisplayListFormatter::new(self.enable_colors, false);\n         let errors_by_file = &self.report.internal.borrow().0;\n \n+        let opt = FormatOptions {\n+            color: self.enable_colors,\n+            ..Default::default()\n+        };\n+\n         for (file, errors) in errors_by_file {\n             for error in errors {\n-                let snippet = formatting_error_to_snippet(file, error);\n-                writeln!(f, \"{}\\n\", formatter.format(&DisplayList::from(snippet)))?;\n+                let error_kind = error.kind.to_string();\n+                let title = Some(Annotation {\n+                    id: if error.is_internal() {\n+                        Some(\"internal\")\n+                    } else {\n+                        None\n+                    },\n+                    label: Some(&error_kind),\n+                    annotation_type: error_kind_to_snippet_annotation_type(&error.kind),\n+                });\n+\n+                let message_suffix = error.msg_suffix();\n+                let footer = if !message_suffix.is_empty() {\n+                    Some(Annotation {\n+                        id: None,\n+                        label: Some(message_suffix),\n+                        annotation_type: AnnotationType::Note,\n+                    })\n+                } else {\n+                    None\n+                };\n+\n+                let origin = format!(\"{}:{}\", file, error.line);\n+                let slice = Slice {\n+                    source: &error.line_buffer.clone(),\n+                    line_start: error.line,\n+                    origin: Some(origin.as_str()),\n+                    fold: false,\n+                    annotations: slice_annotation(error).into_iter().collect(),\n+                };\n+\n+                let snippet = Snippet {\n+                    title,\n+                    footer: footer.into_iter().collect(),\n+                    slices: vec![slice],\n+                    opt,\n+                };\n+                writeln!(f, \"{}\\n\", DisplayList::from(snippet))?;\n             }\n         }\n \n         if !errors_by_file.is_empty() {\n-            let snippet = formatting_failure_snippet(self.report.warning_count());\n-            writeln!(f, \"{}\", formatter.format(&DisplayList::from(snippet)))?;\n+            let label = format!(\n+                \"rustfmt has failed to format. See previous {} errors.\",\n+                self.report.warning_count()\n+            );\n+            let snippet = Snippet {\n+                title: Some(Annotation {\n+                    id: None,\n+                    label: Some(&label),\n+                    annotation_type: AnnotationType::Warning,\n+                }),\n+                footer: Vec::new(),\n+                slices: Vec::new(),\n+                opt,\n+            };\n+            writeln!(f, \"{}\", DisplayList::from(snippet))?;\n         }\n \n         Ok(())\n     }\n }\n \n-fn formatting_failure_snippet(warning_count: usize) -> Snippet {\n-    Snippet {\n-        title: Some(Annotation {\n-            id: None,\n-            label: Some(format!(\n-                \"rustfmt has failed to format. See previous {} errors.\",\n-                warning_count\n-            )),\n-            annotation_type: AnnotationType::Warning,\n-        }),\n-        footer: Vec::new(),\n-        slices: Vec::new(),\n-    }\n-}\n-\n-fn formatting_error_to_snippet(file: &FileName, error: &FormattingError) -> Snippet {\n-    let slices = vec![snippet_code_slice(file, error)];\n-    let title = Some(snippet_title(error));\n-    let footer = snippet_footer(error).into_iter().collect();\n-\n-    Snippet {\n-        title,\n-        footer,\n-        slices,\n-    }\n-}\n-\n-fn snippet_title(error: &FormattingError) -> Annotation {\n-    let annotation_type = error_kind_to_snippet_annotation_type(&error.kind);\n-\n-    Annotation {\n-        id: title_annotation_id(error),\n-        label: Some(error.kind.to_string()),\n-        annotation_type,\n-    }\n-}\n-\n-fn snippet_footer(error: &FormattingError) -> Option<Annotation> {\n-    let message_suffix = error.msg_suffix();\n-\n-    if !message_suffix.is_empty() {\n-        Some(Annotation {\n-            id: None,\n-            label: Some(message_suffix.to_string()),\n-            annotation_type: AnnotationType::Note,\n-        })\n-    } else {\n-        None\n-    }\n-}\n-\n-fn snippet_code_slice(file: &FileName, error: &FormattingError) -> Slice {\n-    let annotations = slice_annotation(error).into_iter().collect();\n-    let origin = Some(format!(\"{}:{}\", file, error.line));\n-    let source = error.line_buffer.clone();\n-\n-    Slice {\n-        source,\n-        line_start: error.line,\n-        origin,\n-        fold: false,\n-        annotations,\n-    }\n-}\n-\n-fn slice_annotation(error: &FormattingError) -> Option<SourceAnnotation> {\n+fn slice_annotation(error: &FormattingError) -> Option<SourceAnnotation<'_>> {\n     let (range_start, range_length) = error.format_len();\n     let range_end = range_start + range_length;\n \n     if range_length > 0 {\n         Some(SourceAnnotation {\n             annotation_type: AnnotationType::Error,\n             range: (range_start, range_end),\n-            label: String::new(),\n+            label: \"\",\n         })\n     } else {\n         None\n     }\n }\n \n-fn title_annotation_id(error: &FormattingError) -> Option<String> {\n-    const INTERNAL_ERROR_ID: &str = \"internal\";\n-\n-    if error.is_internal() {\n-        Some(INTERNAL_ERROR_ID.to_string())\n-    } else {\n-        None\n-    }\n-}\n-\n fn error_kind_to_snippet_annotation_type(error_kind: &ErrorKind) -> AnnotationType {\n     match error_kind {\n         ErrorKind::LineOverflow(..)"}]}