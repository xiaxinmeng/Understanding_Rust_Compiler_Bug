{"sha": "b54a00accdadc9d98571050888dab701ca7bd2fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NGEwMGFjY2RhZGM5ZDk4NTcxMDUwODg4ZGFiNzAxY2E3YmQyZmQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-01-16T16:55:23Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-01-16T17:20:08Z"}, "message": "allow unused warnings related to rustc_layout_scalar_valid_range_start", "tree": {"sha": "e87a0e56f5862104883a90072df796f85d3bb6ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e87a0e56f5862104883a90072df796f85d3bb6ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b54a00accdadc9d98571050888dab701ca7bd2fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJcP2fqAAoJED4Gq+gLqvGcxdIP/iU1V0zFS41H4ZE8iUiCgtFW\n3dYwJbaDmFR6gCTRpnp6hLJJBiXXyU+zM2z4nmT4Sp/dYahvMMWtrQtCoJBT7a7P\nNaDIvPcD5xWUxWGkrrLZ+rdiCbfYfXz6idQ4+5486UnylvJHsLw+MZhkTp9N9IcS\n0yKfoqIW0XnnixCaoQIaQZTFHsIRIRcpNfvlguL3+It9cWnf7eOLWPu8HsvFVkee\nliWwWT56zCV8WyrwI1sSXqu4Cz8Q6YtUbTtmoiVaZS9xsPnxsIWRzLd6gVMnEs04\nVJ8Jk1IQRX8T3TNqPjGnSCJBQdlMlz2eyKFDYCqf94KBh3RLtJj5mtO8Egu54WA4\nAgGDZvr0nKj8g3VHNuF62NXOXCav3g6a+J6UHAsP83+0Lgep/2jmz/bmkhGd/4sH\n62DKPe2SC/+71wyS6Ic+N2zrrWQDuHuQdxGqgTrAcnUa/BeyzRMoKNxjMgn0KXa5\nnlnL4/+HCQb5E7IfInjpAIWKF7Rp3URfD4eXBfpHeYQFHFXY4jPpMoP5mWWR2KSd\npGWG6xNB9iBCxPZWFV14NypuMOSQ2TTK/AIDg3N7lxUa4zVRKeeuj33Vszdj47m0\nm2Dx8gNzdLHlM7Ahx/oH/+7fsIagvcAdz3YzCH2GBUGo1OmTWRsEbshnAfaK9mHj\nmhot/XGkikT50vmbZVX0\n=JIIP\n-----END PGP SIGNATURE-----", "payload": "tree e87a0e56f5862104883a90072df796f85d3bb6ae\nparent dc25c80571bf2a9f27d67f9d62c2be72d9c1c6ea\nauthor Pietro Albini <pietro@pietroalbini.org> 1547657723 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1547659208 +0100\n\nallow unused warnings related to rustc_layout_scalar_valid_range_start\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b54a00accdadc9d98571050888dab701ca7bd2fd", "html_url": "https://github.com/rust-lang/rust/commit/b54a00accdadc9d98571050888dab701ca7bd2fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b54a00accdadc9d98571050888dab701ca7bd2fd/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc25c80571bf2a9f27d67f9d62c2be72d9c1c6ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc25c80571bf2a9f27d67f9d62c2be72d9c1c6ea", "html_url": "https://github.com/rust-lang/rust/commit/dc25c80571bf2a9f27d67f9d62c2be72d9c1c6ea"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "3a3fd27d52532bb3f93f7929b3c6938e6fd2c76d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b54a00accdadc9d98571050888dab701ca7bd2fd/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54a00accdadc9d98571050888dab701ca7bd2fd/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b54a00accdadc9d98571050888dab701ca7bd2fd", "patch": "@@ -47,6 +47,8 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n                 #[repr(transparent)]\n+                // FIXME: the rustc_layout_scalar_valid_range_start attr is marked as unused\n+                #[cfg_attr(stage0, allow(unused_attributes))]\n                 #[rustc_layout_scalar_valid_range_start(1)]\n                 pub struct $Ty($Int);\n             }\n@@ -68,6 +70,8 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 #[inline]\n                 pub fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n+                        // FIXME: this unsafe block is actually needed\n+                        #[cfg_attr(stage0, allow(unused_unsafe))]\n                         Some(unsafe { $Ty(n) })\n                     } else {\n                         None"}, {"sha": "979a7b231ecf3144fa9fa8df1e62c3f52422f7c4", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b54a00accdadc9d98571050888dab701ca7bd2fd/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54a00accdadc9d98571050888dab701ca7bd2fd/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b54a00accdadc9d98571050888dab701ca7bd2fd", "patch": "@@ -2718,6 +2718,8 @@ impl<T: ?Sized> PartialOrd for *mut T {\n                      (if you also use #[may_dangle]), Send, and/or Sync\")]\n #[doc(hidden)]\n #[repr(transparent)]\n+// FIXME: the rustc_layout_scalar_valid_range_start attr is marked as unused\n+#[cfg_attr(stage0, allow(unused_attributes))]\n #[rustc_layout_scalar_valid_range_start(1)]\n pub struct Unique<T: ?Sized> {\n     pointer: *const T,\n@@ -2783,6 +2785,8 @@ impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique` if `ptr` is non-null.\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n+            // FIXME: this unsafe block is actually needed\n+            #[cfg_attr(stage0, allow(unused_unsafe))]\n             Some(unsafe { Unique { pointer: ptr as _, _marker: PhantomData } })\n         } else {\n             None\n@@ -2839,20 +2843,26 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { Unique { pointer: reference as *const T, _marker: PhantomData } }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n     fn from(p: NonNull<T>) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { Unique { pointer: p.pointer, _marker: PhantomData } }\n     }\n }\n@@ -3042,6 +3052,8 @@ impl<T: ?Sized> hash::Hash for NonNull<T> {\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     #[inline]\n     fn from(unique: Unique<T>) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { NonNull { pointer: unique.pointer } }\n     }\n }\n@@ -3050,6 +3062,8 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a mut T) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { NonNull { pointer: reference as *mut T } }\n     }\n }\n@@ -3058,6 +3072,8 @@ impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a T) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { NonNull { pointer: reference as *const T } }\n     }\n }"}]}