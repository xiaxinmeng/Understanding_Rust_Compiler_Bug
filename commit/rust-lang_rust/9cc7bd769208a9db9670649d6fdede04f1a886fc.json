{"sha": "9cc7bd769208a9db9670649d6fdede04f1a886fc", "node_id": "C_kwDOAAsO6NoAKDljYzdiZDc2OTIwOGE5ZGI5NjcwNjQ5ZDZmZGVkZTA0ZjFhODg2ZmM", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-16T22:23:41Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-10T03:08:25Z"}, "message": "Review comments", "tree": {"sha": "b2544086cb44604a77400f190828f24daf4c73c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2544086cb44604a77400f190828f24daf4c73c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cc7bd769208a9db9670649d6fdede04f1a886fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc7bd769208a9db9670649d6fdede04f1a886fc", "html_url": "https://github.com/rust-lang/rust/commit/9cc7bd769208a9db9670649d6fdede04f1a886fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cc7bd769208a9db9670649d6fdede04f1a886fc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83ce1aad428d79ac455fa43b40e0e01b07fcf7cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/83ce1aad428d79ac455fa43b40e0e01b07fcf7cf", "html_url": "https://github.com/rust-lang/rust/commit/83ce1aad428d79ac455fa43b40e0e01b07fcf7cf"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "dab0b87f7ae4ae3ae88a7d74a4a25978b4aea6fb", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9cc7bd769208a9db9670649d6fdede04f1a886fc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc7bd769208a9db9670649d6fdede04f1a886fc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=9cc7bd769208a9db9670649d6fdede04f1a886fc", "patch": "@@ -151,9 +151,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         if mention_capture {\n             spans.push(sup_origin.span());\n         }\n-        // We sort the spans *ignoring* expansion context. Below, the closure logic is repeated\n-        // because one method expects a closure taking `&Span` and the other `&mut Span`.\n-        spans.sort_by_key(|span| (span.lo(), span.hi()));\n+        // We dedup the spans *ignoring* expansion context.\n+        spans.sort();\n         spans.dedup_by_key(|span| (span.lo(), span.hi()));\n \n         // We try to make the output have fewer overlapping spans if possible.\n@@ -183,7 +182,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             err.span_note(*bound, \"`'static` lifetime requirement introduced by this bound\");\n         }\n         if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = sub_origin {\n-            if let ObligationCauseCode::BlockTailExpression(hir_id) = &cause.code {\n+            if let ObligationCauseCode::ReturnValue(hir_id)\n+            | ObligationCauseCode::BlockTailExpression(hir_id) = &cause.code\n+            {\n                 let parent_id = tcx.hir().get_parent_item(*hir_id);\n                 if let Some(fn_decl) = tcx.hir().fn_decl_by_hir_id(parent_id) {\n                     let mut span: MultiSpan = fn_decl.output.span().into();"}, {"sha": "08a58fa67e0c341f6f903d1ae66e7b4b3bb51800", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9cc7bd769208a9db9670649d6fdede04f1a886fc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc7bd769208a9db9670649d6fdede04f1a886fc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=9cc7bd769208a9db9670649d6fdede04f1a886fc", "patch": "@@ -97,7 +97,7 @@ pub enum RegionResolutionError<'tcx> {\n         Region<'tcx>,\n         SubregionOrigin<'tcx>,\n         Region<'tcx>,\n-        Vec<Span>,\n+        Vec<Span>, // All the influences on a given value that didn't meet its constraints.\n     ),\n \n     /// Indicates a `'b: 'a` constraint where `'a` is in a universe that\n@@ -570,9 +570,10 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     // have to revisit this portion of the code and\n                     // think hard about it. =) -- nikomatsakis\n \n-                    // Obtain the spans for all the capture points for\n+                    // Obtain the spans for all the places that can\n+                    // influence the constraints on this value for\n                     // richer diagnostics in `static_impl_trait`.\n-                    let captures: Vec<Span> = self\n+                    let influences: Vec<Span> = self\n                         .data\n                         .constraints\n                         .iter()\n@@ -590,7 +591,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                         &mut dup_vec,\n                         node_vid,\n                         errors,\n-                        captures,\n+                        influences,\n                     );\n                 }\n             }\n@@ -645,7 +646,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         dup_vec: &mut IndexVec<RegionVid, Option<RegionVid>>,\n         node_idx: RegionVid,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n-        captures: Vec<Span>,\n+        influences: Vec<Span>,\n     ) {\n         // Errors in expanding nodes result from a lower-bound that is\n         // not contained by an upper-bound.\n@@ -700,7 +701,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                         lower_bound.region,\n                         upper_bound.origin.clone(),\n                         upper_bound.region,\n-                        captures,\n+                        influences,\n                     ));\n                     return;\n                 }"}]}