{"sha": "02ceeb59d4853eecec3a52a7fbd9f6acc1c3f91c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyY2VlYjU5ZDQ4NTNlZWNlYzNhNTJhN2ZiZDlmNmFjYzFjM2Y5MWM=", "commit": {"author": {"name": "Yukio Tanaka", "email": "news7vip@gmail.com", "date": "2021-03-16T15:06:42Z"}, "committer": {"name": "Yukio Tanaka", "email": "news7vip@gmail.com", "date": "2021-03-16T15:06:42Z"}, "message": "Use in_constant instead of is_const", "tree": {"sha": "6710796c02b5fb174e169dc3588cbb3f3a2c4d61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6710796c02b5fb174e169dc3588cbb3f3a2c4d61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02ceeb59d4853eecec3a52a7fbd9f6acc1c3f91c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQQrONMOdGa87BByzY1eFte2xnTc5gUCYFDJggAKCRBeFte2xnTc\n5mNmAP9ZRFPmC2RYlW4r7pVKERqpebYpJZaBa4vvhv5acW+YuAEA6hHV1/bvKIdq\nXC56bGNjFz9dDf4mcJSdk+tdqaRctAI=\n=X1uM\n-----END PGP SIGNATURE-----", "payload": "tree 6710796c02b5fb174e169dc3588cbb3f3a2c4d61\nparent aa5f1f907831e0d7833f87063036895a78a0da1a\nauthor Yukio Tanaka <news7vip@gmail.com> 1615907202 +0900\ncommitter Yukio Tanaka <news7vip@gmail.com> 1615907202 +0900\n\nUse in_constant instead of is_const\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02ceeb59d4853eecec3a52a7fbd9f6acc1c3f91c", "html_url": "https://github.com/rust-lang/rust/commit/02ceeb59d4853eecec3a52a7fbd9f6acc1c3f91c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02ceeb59d4853eecec3a52a7fbd9f6acc1c3f91c/comments", "author": {"login": "MysteryJump", "id": 7474910, "node_id": "MDQ6VXNlcjc0NzQ5MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7474910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MysteryJump", "html_url": "https://github.com/MysteryJump", "followers_url": "https://api.github.com/users/MysteryJump/followers", "following_url": "https://api.github.com/users/MysteryJump/following{/other_user}", "gists_url": "https://api.github.com/users/MysteryJump/gists{/gist_id}", "starred_url": "https://api.github.com/users/MysteryJump/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MysteryJump/subscriptions", "organizations_url": "https://api.github.com/users/MysteryJump/orgs", "repos_url": "https://api.github.com/users/MysteryJump/repos", "events_url": "https://api.github.com/users/MysteryJump/events{/privacy}", "received_events_url": "https://api.github.com/users/MysteryJump/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MysteryJump", "id": 7474910, "node_id": "MDQ6VXNlcjc0NzQ5MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7474910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MysteryJump", "html_url": "https://github.com/MysteryJump", "followers_url": "https://api.github.com/users/MysteryJump/followers", "following_url": "https://api.github.com/users/MysteryJump/following{/other_user}", "gists_url": "https://api.github.com/users/MysteryJump/gists{/gist_id}", "starred_url": "https://api.github.com/users/MysteryJump/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MysteryJump/subscriptions", "organizations_url": "https://api.github.com/users/MysteryJump/orgs", "repos_url": "https://api.github.com/users/MysteryJump/repos", "events_url": "https://api.github.com/users/MysteryJump/events{/privacy}", "received_events_url": "https://api.github.com/users/MysteryJump/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5f1f907831e0d7833f87063036895a78a0da1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5f1f907831e0d7833f87063036895a78a0da1a", "html_url": "https://github.com/rust-lang/rust/commit/aa5f1f907831e0d7833f87063036895a78a0da1a"}], "stats": {"total": 35, "additions": 6, "deletions": 29}, "files": [{"sha": "615e2d5c2af4ee41b59a5759e93b2b29967f65d2", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/02ceeb59d4853eecec3a52a7fbd9f6acc1c3f91c/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ceeb59d4853eecec3a52a7fbd9f6acc1c3f91c/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=02ceeb59d4853eecec3a52a7fbd9f6acc1c3f91c", "patch": "@@ -1,17 +1,17 @@\n use crate::consts::constant_simple;\n use crate::utils;\n-use crate::utils::{path_to_local_id, sugg};\n+use crate::utils::{in_constant, path_to_local_id, sugg};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{hir_id::HirId, intravisit::FnKind, Arm, Body, Expr, ExprKind, FnDecl, Pat, PatKind, StmtKind};\n+use rustc_hir::{Arm, Expr, ExprKind, Pat, PatKind};\n use rustc_lint::LintContext;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{source_map::Span, sym};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -44,34 +44,11 @@ declare_clippy_lint! {\n declare_lint_pass!(ManualUnwrapOr => [MANUAL_UNWRAP_OR]);\n \n impl LateLintPass<'_> for ManualUnwrapOr {\n-    fn check_fn(\n-        &mut self,\n-        cx: &LateContext<'tcx>,\n-        kind: FnKind<'tcx>,\n-        _: &'tcx FnDecl<'tcx>,\n-        body: &'tcx Body<'tcx>,\n-        span: Span,\n-        _: HirId,\n-    ) {\n-        if in_external_macro(cx.sess(), span) {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if in_external_macro(cx.sess(), expr.span) || in_constant(cx, expr.hir_id) {\n             return;\n         }\n-        if_chain! {\n-            if let FnKind::ItemFn(_, _, header, _) = kind;\n-            if !header.is_const();\n-            let expr = &body.value;\n-            if let ExprKind::Block(block, _) = expr.kind;\n-            then {\n-                for stmt in block.stmts {\n-                    if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = &stmt.kind {\n-                        lint_manual_unwrap_or(cx, expr);\n-                    }\n-                }\n-                if let Some(expr) = block.expr {\n-                    lint_manual_unwrap_or(cx, expr);\n-                }\n-            }\n-        }\n+        lint_manual_unwrap_or(cx, expr);\n     }\n }\n "}]}