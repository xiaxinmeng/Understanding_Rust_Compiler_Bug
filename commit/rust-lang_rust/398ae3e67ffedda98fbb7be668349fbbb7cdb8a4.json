{"sha": "398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5OGFlM2U2N2ZmZWRkYTk4ZmJiN2JlNjY4MzQ5ZmJiYjdjZGI4YTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-17T19:41:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-17T19:41:42Z"}, "message": "Merge #9622\n\n9622: feat: improve parser error recovery for function parameters r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5c76918016fbc426279275f9705478b8ce3a5830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c76918016fbc426279275f9705478b8ce3a5830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8zJ2CRBK7hj4Ov3rIwAA+SYIADweF/PEhorPAhYl87Nf0rzT\n+WCReUl9ArLz5sgWsxBByAYKQod03OCTOw+/aoEVlk/JDm/0VE0D5r1LFmJ8uNmb\n4VHTJpcqvYr+4TrIbkOP5Uz4+wlkm2UkIHjMN0p/GiInUtdWbeQH5R0WJkaI4QIi\ngVzRdSlS0jOUMAUAt0HlYP38IDKpllGv6Seh/ZFXMNB7Pp+KM0Uv5cNzIOyAv7RC\nwgMGE1o4xwW2a3mfhp87Ao9zRSWGVRe1lMV44KP6RKUopTv3S8xrr80BAPRvkB2w\ndJAv6YXyHaOMYKnDvvkA8731dLVa3B7mQq9kTSz7WFqk6DHXCbpqYJm2tgSPrqM=\n=xxjz\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c76918016fbc426279275f9705478b8ce3a5830\nparent 610ecc9a7e8b7b464af575321b7f5d5261342afd\nparent 15f11dce4ab52ef41e7ffb2e5c1328f918962344\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626550902 +0000\ncommitter GitHub <noreply@github.com> 1626550902 +0000\n\nMerge #9622\n\n9622: feat: improve parser error recovery for function parameters r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "html_url": "https://github.com/rust-lang/rust/commit/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610ecc9a7e8b7b464af575321b7f5d5261342afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/610ecc9a7e8b7b464af575321b7f5d5261342afd", "html_url": "https://github.com/rust-lang/rust/commit/610ecc9a7e8b7b464af575321b7f5d5261342afd"}, {"sha": "15f11dce4ab52ef41e7ffb2e5c1328f918962344", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f11dce4ab52ef41e7ffb2e5c1328f918962344", "html_url": "https://github.com/rust-lang/rust/commit/15f11dce4ab52ef41e7ffb2e5c1328f918962344"}], "stats": {"total": 127, "additions": 106, "deletions": 21}, "files": [{"sha": "d299f2e2634ae6c913ed0e372eca156babbe02b1", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "patch": "@@ -101,6 +101,20 @@ fn baz(file$0) {}\n         );\n     }\n \n+    #[test]\n+    fn test_param_completion_first_param() {\n+        check(\n+            r#\"\n+fn foo(file_id: FileId) {}\n+fn bar(file_id: FileId) {}\n+fn baz(file$0 id: u32) {}\n+\"#,\n+            expect![[r#\"\n+                bn file_id: FileId\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_param_completion_nth_param() {\n         check("}, {"sha": "1b317dd84a94b76a54962c7c43772c432214e487", "filename": "crates/parser/src/grammar/items/consts.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fconsts.rs?ref=398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "patch": "@@ -21,8 +21,11 @@ fn const_or_static(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n \n     // test_err static_underscore\n     // static _: i32 = 5;\n-\n-    types::ascription(p);\n+    if p.at(T![:]) {\n+        types::ascription(p);\n+    } else {\n+        p.error(\"missing type for `const` or `static`\")\n+    }\n     if p.eat(T![=]) {\n         expressions::expr(p);\n     }"}, {"sha": "8f028c619415e1bcaa85e780957a3b0a8d38f5e6", "filename": "crates/parser/src/grammar/params.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs?ref=398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "patch": "@@ -106,7 +106,13 @@ fn param(p: &mut Parser, m: Marker, flavor: Flavor) -> Variadic {\n             if variadic_param(p) {\n                 res = Variadic(true)\n             } else {\n-                types::ascription(p);\n+                if p.at(T![:]) {\n+                    types::ascription(p)\n+                } else {\n+                    // test_err missing_fn_param_type\n+                    // fn f(x y: i32, z, t: i32) {}\n+                    p.error(\"missing type for function parameter\")\n+                }\n             }\n         }\n         // test value_parameters_no_patterns\n@@ -126,7 +132,11 @@ fn param(p: &mut Parser, m: Marker, flavor: Flavor) -> Variadic {\n                 if variadic_param(p) {\n                     res = Variadic(true)\n                 } else {\n-                    types::ascription(p);\n+                    if p.at(T![:]) {\n+                        types::ascription(p)\n+                    } else {\n+                        p.error(\"missing type for function parameter\")\n+                    }\n                 }\n             } else {\n                 types::type_(p);"}, {"sha": "a7a0109fd1ba2ede89b2a21c2b1d2f9090beca56", "filename": "crates/parser/src/grammar/type_params.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "patch": "@@ -67,7 +67,11 @@ fn const_param(p: &mut Parser, m: Marker) {\n     assert!(p.at(T![const]));\n     p.bump(T![const]);\n     name(p);\n-    types::ascription(p);\n+    if p.at(T![:]) {\n+        types::ascription(p);\n+    } else {\n+        p.error(\"missing type for const parameter\");\n+    }\n \n     // test const_param_defaults\n     // struct A<const N: i32 = -1>;"}, {"sha": "e0b3c1bf0cb0b55e7d2b402e3ed76402b98cf1d3", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "patch": "@@ -55,7 +55,8 @@ fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n }\n \n pub(super) fn ascription(p: &mut Parser) {\n-    p.expect(T![:]);\n+    assert!(p.at(T![:]));\n+    p.bump(T![:]);\n     type_(p)\n }\n "}, {"sha": "5b180ce3375238ca326d7511ea6c273816228eec", "filename": "crates/syntax/test_data/parser/err/0018_incomplete_fn.rast", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast?ref=398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "patch": "@@ -127,7 +127,6 @@ SOURCE_FILE@0..183\n       R_CURLY@181..182 \"}\"\n   WHITESPACE@182..183 \"\\n\"\n error 34..34: expected pattern\n-error 34..34: expected COLON\n-error 34..34: expected type\n+error 34..34: missing type for function parameter\n error 180..180: expected function arguments\n error 180..180: expected a block"}, {"sha": "901490fa2fe43a1106a2a8095f7e933adc389bff", "filename": "crates/syntax/test_data/parser/err/0021_incomplete_param.rast", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.rast?ref=398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "patch": "@@ -30,5 +30,4 @@ SOURCE_FILE@0..22\n       WHITESPACE@19..20 \"\\n\"\n       R_CURLY@20..21 \"}\"\n   WHITESPACE@21..22 \"\\n\"\n-error 16..16: expected COLON\n-error 16..16: expected type\n+error 16..16: missing type for function parameter"}, {"sha": "e9dad0b7a03b156db15a9d481ca843212da2a549", "filename": "crates/syntax/test_data/parser/err/0045_item_modifiers.rast", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0045_item_modifiers.rast", "raw_url": "https://github.com/rust-lang/rust/raw/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0045_item_modifiers.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0045_item_modifiers.rast?ref=398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "patch": "@@ -17,29 +17,31 @@ SOURCE_FILE@0..50\n       L_CURLY@22..23 \"{\"\n       R_CURLY@23..24 \"}\"\n   WHITESPACE@24..25 \"\\n\"\n-  CONST@25..46\n+  CONST@25..40\n     UNSAFE_KW@25..31 \"unsafe\"\n     WHITESPACE@31..32 \" \"\n     CONST_KW@32..37 \"const\"\n     WHITESPACE@37..38 \" \"\n     ERROR@38..40\n       FN_KW@38..40 \"fn\"\n-    WHITESPACE@40..41 \" \"\n-    PATH_TYPE@41..46\n-      PATH@41..46\n-        PATH_SEGMENT@41..46\n-          NAME_REF@41..44\n-            IDENT@41..44 \"bar\"\n-          PARAM_LIST@44..46\n-            L_PAREN@44..45 \"(\"\n-            R_PAREN@45..46 \")\"\n+  WHITESPACE@40..41 \" \"\n+  MACRO_CALL@41..46\n+    PATH@41..44\n+      PATH_SEGMENT@41..44\n+        NAME_REF@41..44\n+          IDENT@41..44 \"bar\"\n+    TOKEN_TREE@44..46\n+      L_PAREN@44..45 \"(\"\n+      R_PAREN@45..46 \")\"\n   WHITESPACE@46..47 \" \"\n   ERROR@47..49\n     L_CURLY@47..48 \"{\"\n     R_CURLY@48..49 \"}\"\n   WHITESPACE@49..50 \"\\n\"\n error 6..6: expected existential, fn, trait or impl\n error 38..38: expected a name\n-error 40..40: expected COLON\n+error 40..40: missing type for `const` or `static`\n+error 40..40: expected SEMICOLON\n+error 44..44: expected BANG\n error 46..46: expected SEMICOLON\n error 47..47: expected an item"}, {"sha": "99391c266abf15910921dffc24c3d399eb976e4c", "filename": "crates/syntax/test_data/parser/inline/err/0015_missing_fn_param_type.rast", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_missing_fn_param_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_missing_fn_param_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_missing_fn_param_type.rast?ref=398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "patch": "@@ -0,0 +1,52 @@\n+SOURCE_FILE@0..29\n+  FN@0..28\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..4\n+      IDENT@3..4 \"f\"\n+    PARAM_LIST@4..25\n+      L_PAREN@4..5 \"(\"\n+      PARAM@5..6\n+        IDENT_PAT@5..6\n+          NAME@5..6\n+            IDENT@5..6 \"x\"\n+      WHITESPACE@6..7 \" \"\n+      PARAM@7..13\n+        IDENT_PAT@7..8\n+          NAME@7..8\n+            IDENT@7..8 \"y\"\n+        COLON@8..9 \":\"\n+        WHITESPACE@9..10 \" \"\n+        PATH_TYPE@10..13\n+          PATH@10..13\n+            PATH_SEGMENT@10..13\n+              NAME_REF@10..13\n+                IDENT@10..13 \"i32\"\n+      COMMA@13..14 \",\"\n+      WHITESPACE@14..15 \" \"\n+      PARAM@15..16\n+        IDENT_PAT@15..16\n+          NAME@15..16\n+            IDENT@15..16 \"z\"\n+      COMMA@16..17 \",\"\n+      WHITESPACE@17..18 \" \"\n+      PARAM@18..24\n+        IDENT_PAT@18..19\n+          NAME@18..19\n+            IDENT@18..19 \"t\"\n+        COLON@19..20 \":\"\n+        WHITESPACE@20..21 \" \"\n+        PATH_TYPE@21..24\n+          PATH@21..24\n+            PATH_SEGMENT@21..24\n+              NAME_REF@21..24\n+                IDENT@21..24 \"i32\"\n+      R_PAREN@24..25 \")\"\n+    WHITESPACE@25..26 \" \"\n+    BLOCK_EXPR@26..28\n+      L_CURLY@26..27 \"{\"\n+      R_CURLY@27..28 \"}\"\n+  WHITESPACE@28..29 \"\\n\"\n+error 6..6: missing type for function parameter\n+error 6..6: expected COMMA\n+error 16..16: missing type for function parameter"}, {"sha": "4a95b908435f26c8badabe272af405062cc90545", "filename": "crates/syntax/test_data/parser/inline/err/0015_missing_fn_param_type.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_missing_fn_param_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_missing_fn_param_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0015_missing_fn_param_type.rs?ref=398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "patch": "@@ -0,0 +1 @@\n+fn f(x y: i32, z, t: i32) {}"}]}