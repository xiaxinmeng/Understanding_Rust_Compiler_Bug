{"sha": "8d86d1a4e17239361ecebced0d5dd246efa95512", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkODZkMWE0ZTE3MjM5MzYxZWNlYmNlZDBkNWRkMjQ2ZWZhOTU1MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-24T18:37:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-24T18:37:09Z"}, "message": "Auto merge of #29215 - fhahn:issue-28157-bad-semicolon, r=alexcrichton\n\nPR for #28157. At the moment, `rustc` emits a warning when a bare semicolon is encountered (could also be a fail, but I think this is a backwards incompatible change).\r\n\r\nAlso I am not sure where the best place for a test for that warning would be. Seems run-pass tests do not check warnings.", "tree": {"sha": "ee04f775ecf7a9ac7437443824f35c29cffbe919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee04f775ecf7a9ac7437443824f35c29cffbe919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d86d1a4e17239361ecebced0d5dd246efa95512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d86d1a4e17239361ecebced0d5dd246efa95512", "html_url": "https://github.com/rust-lang/rust/commit/8d86d1a4e17239361ecebced0d5dd246efa95512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d86d1a4e17239361ecebced0d5dd246efa95512/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04e497c0056aed899cd6edbc98e7a68a9b391c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/04e497c0056aed899cd6edbc98e7a68a9b391c5c", "html_url": "https://github.com/rust-lang/rust/commit/04e497c0056aed899cd6edbc98e7a68a9b391c5c"}, {"sha": "1e62bd2754d1c83959151e97c871680ca47110dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e62bd2754d1c83959151e97c871680ca47110dc", "html_url": "https://github.com/rust-lang/rust/commit/1e62bd2754d1c83959151e97c871680ca47110dc"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "a400e70e97dfd86ad76694e11ea8b92e6f7c09a3", "filename": "src/doc/grammar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=8d86d1a4e17239361ecebced0d5dd246efa95512", "patch": "@@ -436,7 +436,7 @@ meta_seq : meta_item [ ',' meta_seq ] ? ;\n ## Statements\n \n ```antlr\n-stmt : decl_stmt | expr_stmt ;\n+stmt : decl_stmt | expr_stmt | ';' ;\n ```\n \n ### Declaration statements"}, {"sha": "873c22c35d855016fc3068ee2e2f3fa7c0bd52cb", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=8d86d1a4e17239361ecebced0d5dd246efa95512", "patch": "@@ -207,7 +207,7 @@ impl CStore {\n                 visit(cstore, dep, ordering);\n             }\n             ordering.push(cnum);\n-        };\n+        }\n         for (&num, _) in self.metas.borrow().iter() {\n             visit(self, num, &mut ordering);\n         }"}, {"sha": "53fd857ffc1177aebb5d6b58e1f2c924ad5ba69e", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=8d86d1a4e17239361ecebced0d5dd246efa95512", "patch": "@@ -58,7 +58,7 @@ macro_rules! down_cast_data {\n             data\n         } else {\n             $this.sess.span_bug($sp, &format!(\"unexpected data kind: {:?}\", $id));\n-        };\n+        }\n     };\n }\n "}, {"sha": "62befb3b992a7c4e2a4bb6c395394e1fd6cadcd5", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=8d86d1a4e17239361ecebced0d5dd246efa95512", "patch": "@@ -480,7 +480,7 @@ macro_rules! return_if_metadata_created_in_meantime {\n                                 .find_metadata_for_unique_id($unique_type_id) {\n             Some(metadata) => return MetadataCreationResult::new(metadata, true),\n             None => { /* proceed normally */ }\n-        };\n+        }\n     )\n }\n "}, {"sha": "1957f1efa4774ebecd524423814108a3a326b941", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=8d86d1a4e17239361ecebced0d5dd246efa95512", "patch": "@@ -28,7 +28,7 @@ pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n     let krate = {\n         struct Stripper<'a> {\n             stripped: &'a mut DefIdSet\n-        };\n+        }\n         impl<'a> fold::DocFolder for Stripper<'a> {\n             fn fold_item(&mut self, i: Item) -> Option<Item> {\n                 if i.is_hidden_from_doc() {\n@@ -60,7 +60,7 @@ pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n     let krate = {\n         struct ImplStripper<'a> {\n             stripped: &'a mut DefIdSet\n-        };\n+        }\n         impl<'a> fold::DocFolder for ImplStripper<'a> {\n             fn fold_item(&mut self, i: Item) -> Option<Item> {\n                 if let clean::ImplItem(clean::Impl{"}, {"sha": "271aba680a2d66ee1979816cd556b84b4a555596", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=8d86d1a4e17239361ecebced0d5dd246efa95512", "patch": "@@ -1019,7 +1019,7 @@ mod tests {\n     fn wtf8buf_from_iterator() {\n         fn f(values: &[u32]) -> Wtf8Buf {\n             values.iter().map(|&c| CodePoint::from_u32(c).unwrap()).collect::<Wtf8Buf>()\n-        };\n+        }\n         assert_eq!(f(&[0x61, 0xE9, 0x20, 0x1F4A9]).bytes, b\"a\\xC3\\xA9 \\xF0\\x9F\\x92\\xA9\");\n \n         assert_eq!(f(&[0xD83D, 0xDCA9]).bytes, b\"\\xF0\\x9F\\x92\\xA9\");  // Magic!\n@@ -1038,7 +1038,7 @@ mod tests {\n             let mut string = initial.iter().map(c).collect::<Wtf8Buf>();\n             string.extend(extended.iter().map(c));\n             string\n-        };\n+        }\n \n         assert_eq!(e(&[0x61, 0xE9], &[0x20, 0x1F4A9]).bytes,\n                    b\"a\\xC3\\xA9 \\xF0\\x9F\\x92\\xA9\");"}, {"sha": "0e05ac53bc8780536cfec774d30d74a3269ef963", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=8d86d1a4e17239361ecebced0d5dd246efa95512", "patch": "@@ -102,7 +102,7 @@ fn test_get_dbpath_for_term() {\n     fn x(t: &str) -> String {\n         let p = get_dbpath_for_term(t).expect(\"no terminfo entry found\");\n         p.to_str().unwrap().to_string()\n-    };\n+    }\n     assert!(x(\"screen\") == \"/usr/share/terminfo/s/screen\");\n     assert!(get_dbpath_for_term(\"\") == None);\n     env::set_var(\"TERMINFO_DIRS\", \":\");"}, {"sha": "cfe75779536a293cd890cdfc8458f616134a5d67", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d86d1a4e17239361ecebced0d5dd246efa95512/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=8d86d1a4e17239361ecebced0d5dd246efa95512", "patch": "@@ -924,7 +924,7 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n             } else {\n                 None\n             }\n-        };\n+        }\n         filtered.into_iter().filter_map(filter).collect()\n     };\n "}]}