{"sha": "9111b8ae9793f18179a1336417618fc07a9cac85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMTFiOGFlOTc5M2YxODE3OWExMzM2NDE3NjE4ZmMwN2E5Y2FjODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-26T19:22:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-26T19:22:31Z"}, "message": "Auto merge of #83770 - the8472:tra-extend, r=Mark-Simulacrum\n\nAdd `TrustedRandomAccess` specialization for `Vec::extend()`\n\nThis should do roughly the same as the `TrustedLen` specialization but result in less IR by using `__iterator_get_unchecked`\ninstead of `Iterator::for_each`\n\nConflicting specializations are manually prioritized by grouping them under yet another helper trait.", "tree": {"sha": "c9a340a8df725f9af9c8b0e6f905f3fd8321c6b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9a340a8df725f9af9c8b0e6f905f3fd8321c6b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9111b8ae9793f18179a1336417618fc07a9cac85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9111b8ae9793f18179a1336417618fc07a9cac85", "html_url": "https://github.com/rust-lang/rust/commit/9111b8ae9793f18179a1336417618fc07a9cac85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9111b8ae9793f18179a1336417618fc07a9cac85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a700d2947f2d7f97a2c0dfca3117a8dcc255bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a700d2947f2d7f97a2c0dfca3117a8dcc255bdd", "html_url": "https://github.com/rust-lang/rust/commit/9a700d2947f2d7f97a2c0dfca3117a8dcc255bdd"}, {"sha": "020287516b756936dc774f95f6a8039c7d24d640", "url": "https://api.github.com/repos/rust-lang/rust/commits/020287516b756936dc774f95f6a8039c7d24d640", "html_url": "https://github.com/rust-lang/rust/commit/020287516b756936dc774f95f6a8039c7d24d640"}], "stats": {"total": 88, "additions": 63, "deletions": 25}, "files": [{"sha": "5303fdb0c956152d0a78706b02548792a82f47b9", "filename": "library/alloc/src/vec/spec_extend.rs", "status": "modified", "additions": 59, "deletions": 25, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/9111b8ae9793f18179a1336417618fc07a9cac85/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9111b8ae9793f18179a1336417618fc07a9cac85/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs?ref=9111b8ae9793f18179a1336417618fc07a9cac85", "patch": "@@ -1,5 +1,5 @@\n use crate::alloc::Allocator;\n-use core::iter::TrustedLen;\n+use core::iter::{TrustedLen, TrustedRandomAccess};\n use core::ptr::{self};\n use core::slice::{self};\n \n@@ -11,6 +11,49 @@ pub(super) trait SpecExtend<T, I> {\n }\n \n impl<T, I, A: Allocator> SpecExtend<T, I> for Vec<T, A>\n+where\n+    I: Iterator<Item = T>,\n+{\n+    default fn spec_extend(&mut self, iter: I) {\n+        SpecExtendInner::spec_extend(self, iter);\n+    }\n+}\n+\n+impl<T, A: Allocator> SpecExtend<T, IntoIter<T>> for Vec<T, A> {\n+    fn spec_extend(&mut self, mut iterator: IntoIter<T>) {\n+        unsafe {\n+            self.append_elements(iterator.as_slice() as _);\n+        }\n+        iterator.ptr = iterator.end;\n+    }\n+}\n+\n+impl<'a, T: 'a, I, A: Allocator + 'a> SpecExtend<&'a T, I> for Vec<T, A>\n+where\n+    I: Iterator<Item = &'a T>,\n+    T: Clone,\n+{\n+    default fn spec_extend(&mut self, iterator: I) {\n+        SpecExtend::spec_extend(self, iterator.cloned())\n+    }\n+}\n+\n+impl<'a, T: 'a, A: Allocator + 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T, A>\n+where\n+    T: Copy,\n+{\n+    fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {\n+        let slice = iterator.as_slice();\n+        unsafe { self.append_elements(slice) };\n+    }\n+}\n+\n+// Helper trait to disambiguate overlapping specializations\n+trait SpecExtendInner<T, I> {\n+    fn spec_extend(&mut self, iter: I);\n+}\n+\n+impl<T, I, A: Allocator> SpecExtendInner<T, I> for Vec<T, A>\n where\n     I: Iterator<Item = T>,\n {\n@@ -19,7 +62,7 @@ where\n     }\n }\n \n-impl<T, I, A: Allocator> SpecExtend<T, I> for Vec<T, A>\n+impl<T, I, A: Allocator> SpecExtendInner<T, I> for Vec<T, A>\n where\n     I: TrustedLen<Item = T>,\n {\n@@ -55,31 +98,22 @@ where\n     }\n }\n \n-impl<T, A: Allocator> SpecExtend<T, IntoIter<T>> for Vec<T, A> {\n-    fn spec_extend(&mut self, mut iterator: IntoIter<T>) {\n-        unsafe {\n-            self.append_elements(iterator.as_slice() as _);\n-        }\n-        iterator.ptr = iterator.end;\n-    }\n-}\n-\n-impl<'a, T: 'a, I, A: Allocator + 'a> SpecExtend<&'a T, I> for Vec<T, A>\n+impl<T, I, A: Allocator> SpecExtendInner<T, I> for Vec<T, A>\n where\n-    I: Iterator<Item = &'a T>,\n-    T: Clone,\n+    I: TrustedLen<Item = T> + TrustedRandomAccess,\n {\n-    default fn spec_extend(&mut self, iterator: I) {\n-        self.spec_extend(iterator.cloned())\n-    }\n-}\n+    default fn spec_extend(&mut self, mut iterator: I) {\n+        let size = iterator.size();\n+        self.reserve(size);\n \n-impl<'a, T: 'a, A: Allocator + 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T, A>\n-where\n-    T: Copy,\n-{\n-    fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {\n-        let slice = iterator.as_slice();\n-        unsafe { self.append_elements(slice) };\n+        // SAFETY: reserve ensured that there is sufficient capacity for the additional items.\n+        // The loop upholds the TRA requirements by accessing each element only once.\n+        unsafe {\n+            let sink = self.as_mut_ptr().add(self.len());\n+            for i in 0..size {\n+                ptr::write(sink.add(i), iterator.__iterator_get_unchecked(i));\n+                self.set_len(self.len() + 1);\n+            }\n+        }\n     }\n }"}, {"sha": "4f6ef24be1ba48a6c543f3fee45b3e8827c922d8", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9111b8ae9793f18179a1336417618fc07a9cac85/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9111b8ae9793f18179a1336417618fc07a9cac85/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=9111b8ae9793f18179a1336417618fc07a9cac85", "patch": "@@ -416,6 +416,10 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n \n /// An iterator whose items are random-accessible efficiently\n ///\n+/// Iterators that implement this trait should also implement TrustedLen which\n+/// allows specialization to disambiguate overlaps with a `TrustedLen + TrustedRandomAccess`\n+/// bound.\n+///\n /// # Safety\n ///\n /// The iterator's `size_hint` must be exact and cheap to call."}]}