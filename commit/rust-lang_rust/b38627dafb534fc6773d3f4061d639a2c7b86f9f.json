{"sha": "b38627dafb534fc6773d3f4061d639a2c7b86f9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzODYyN2RhZmI1MzRmYzY3NzNkM2Y0MDYxZDYzOWEyYzdiODZmOWY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-08T12:13:56Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T19:51:53Z"}, "message": "mir: Use the right form of GEPi for indexing slices vs arrays.", "tree": {"sha": "4fb2c8e04d198bc7e861372f27e14b3b5b9d52f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb2c8e04d198bc7e861372f27e14b3b5b9d52f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b38627dafb534fc6773d3f4061d639a2c7b86f9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b38627dafb534fc6773d3f4061d639a2c7b86f9f", "html_url": "https://github.com/rust-lang/rust/commit/b38627dafb534fc6773d3f4061d639a2c7b86f9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b38627dafb534fc6773d3f4061d639a2c7b86f9f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56417b373253932a19e811d001f63ef99f9d4d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/56417b373253932a19e811d001f63ef99f9d4d13", "html_url": "https://github.com/rust-lang/rust/commit/56417b373253932a19e811d001f63ef99f9d4d13"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "f109bf07f202f861c15137ddaff6a6a519b4e034", "filename": "src/librustc_trans/trans/mir/lvalue.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b38627dafb534fc6773d3f4061d639a2c7b86f9f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38627dafb534fc6773d3f4061d639a2c7b86f9f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs?ref=b38627dafb534fc6773d3f4061d639a2c7b86f9f", "patch": "@@ -115,6 +115,18 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 let tr_base = self.trans_lvalue(bcx, &projection.base);\n                 let projected_ty = tr_base.ty.projection_ty(tcx, &projection.elem);\n                 let projected_ty = bcx.monomorphize(&projected_ty);\n+\n+                let project_index = |llindex| {\n+                    let element = if let ty::TySlice(_) = tr_base.ty.to_ty(tcx).sty {\n+                        // Slices already point to the array element type.\n+                        bcx.inbounds_gep(tr_base.llval, &[llindex])\n+                    } else {\n+                        let zero = common::C_uint(bcx.ccx(), 0u64);\n+                        bcx.inbounds_gep(tr_base.llval, &[zero, llindex])\n+                    };\n+                    (element, ptr::null_mut())\n+                };\n+\n                 let (llprojected, llextra) = match projection.elem {\n                     mir::ProjectionElem::Deref => {\n                         let base_ty = tr_base.ty.to_ty(tcx);\n@@ -153,30 +165,21 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     }\n                     mir::ProjectionElem::Index(ref index) => {\n                         let index = self.trans_operand(bcx, index);\n-                        let llindex = self.prepare_index(bcx, index.immediate());\n-                        let zero = common::C_uint(bcx.ccx(), 0u64);\n-                        (bcx.inbounds_gep(tr_base.llval, &[zero, llindex]),\n-                         ptr::null_mut())\n+                        project_index(self.prepare_index(bcx, index.immediate()))\n                     }\n                     mir::ProjectionElem::ConstantIndex { offset,\n                                                          from_end: false,\n                                                          min_length: _ } => {\n                         let lloffset = common::C_u32(bcx.ccx(), offset);\n-                        let llindex = self.prepare_index(bcx, lloffset);\n-                        let zero = common::C_uint(bcx.ccx(), 0u64);\n-                        (bcx.inbounds_gep(tr_base.llval, &[zero, llindex]),\n-                         ptr::null_mut())\n+                        project_index(self.prepare_index(bcx, lloffset))\n                     }\n                     mir::ProjectionElem::ConstantIndex { offset,\n                                                          from_end: true,\n                                                          min_length: _ } => {\n                         let lloffset = common::C_u32(bcx.ccx(), offset);\n                         let lllen = self.lvalue_len(bcx, tr_base);\n                         let llindex = bcx.sub(lllen, lloffset);\n-                        let llindex = self.prepare_index(bcx, llindex);\n-                        let zero = common::C_uint(bcx.ccx(), 0u64);\n-                        (bcx.inbounds_gep(tr_base.llval, &[zero, llindex]),\n-                         ptr::null_mut())\n+                        project_index(self.prepare_index(bcx, llindex))\n                     }\n                     mir::ProjectionElem::Downcast(..) => {\n                         (tr_base.llval, tr_base.llextra)"}]}