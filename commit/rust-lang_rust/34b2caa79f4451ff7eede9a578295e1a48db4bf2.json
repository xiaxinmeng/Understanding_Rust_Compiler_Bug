{"sha": "34b2caa79f4451ff7eede9a578295e1a48db4bf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YjJjYWE3OWY0NDUxZmY3ZWVkZTlhNTc4Mjk1ZTFhNDhkYjRiZjI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-05T20:44:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-05T20:44:39Z"}, "message": "Rollup merge of #82714 - estebank:missing-braces, r=oli-obk\n\nDetect match arm body without braces\n\nFix #82524.", "tree": {"sha": "40012ecff7e8af0873cb7b07c3c7ac437e38e6fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40012ecff7e8af0873cb7b07c3c7ac437e38e6fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34b2caa79f4451ff7eede9a578295e1a48db4bf2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQpg3CRBK7hj4Ov3rIwAAdHIIAHZSKoTyi+OckW2odGG6wM/N\nCG6qVHFlKz+0a6Clldl0TwRBUjwnSzEKSiadbrdORej2+Y4C2R5l6PNts6+RPRL5\nhH4vS5+C6jzG7fS3FnzR+7zE2yRvA1UF0/iCYiCTEoGmdnaP9bGEcyzYAfmJmyaG\nQaxeoYHcC0U7keSbExTyw/NCACOI4TCwOS96uS01TeMghegnlrwEckQ9R67W2TsO\nO3ekVvQoRF9e6c2GmSLOrydoFFk9bAIQe339MqepVHZCaKingh+ovZDVcV4vTQk+\nDgYx7xc5oebIHjrxfB9nKnI9p3X8qkqHroEvQRX3aetIDOJiScv6PvaNxUfpK8o=\n=Ijpi\n-----END PGP SIGNATURE-----\n", "payload": "tree 40012ecff7e8af0873cb7b07c3c7ac437e38e6fc\nparent 8867f7f6507ad0a6682c969235fb5f0b572e646b\nparent ae494d147af627537097f10f21cf961e4c1c6f38\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1614977079 +0100\ncommitter GitHub <noreply@github.com> 1614977079 +0100\n\nRollup merge of #82714 - estebank:missing-braces, r=oli-obk\n\nDetect match arm body without braces\n\nFix #82524.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34b2caa79f4451ff7eede9a578295e1a48db4bf2", "html_url": "https://github.com/rust-lang/rust/commit/34b2caa79f4451ff7eede9a578295e1a48db4bf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34b2caa79f4451ff7eede9a578295e1a48db4bf2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8867f7f6507ad0a6682c969235fb5f0b572e646b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8867f7f6507ad0a6682c969235fb5f0b572e646b", "html_url": "https://github.com/rust-lang/rust/commit/8867f7f6507ad0a6682c969235fb5f0b572e646b"}, {"sha": "ae494d147af627537097f10f21cf961e4c1c6f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae494d147af627537097f10f21cf961e4c1c6f38", "html_url": "https://github.com/rust-lang/rust/commit/ae494d147af627537097f10f21cf961e4c1c6f38"}], "stats": {"total": 335, "additions": 334, "deletions": 1}, "files": [{"sha": "608b024827444a8abea588ff8409326d318c4a87", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/34b2caa79f4451ff7eede9a578295e1a48db4bf2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34b2caa79f4451ff7eede9a578295e1a48db4bf2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=34b2caa79f4451ff7eede9a578295e1a48db4bf2", "patch": "@@ -1973,6 +1973,102 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(lo.to(hi), ExprKind::Match(scrutinee, arms), attrs))\n     }\n \n+    /// Attempt to recover from match arm body with statements and no surrounding braces.\n+    fn parse_arm_body_missing_braces(\n+        &mut self,\n+        first_expr: &P<Expr>,\n+        arrow_span: Span,\n+    ) -> Option<P<Expr>> {\n+        if self.token.kind != token::Semi {\n+            return None;\n+        }\n+        let start_snapshot = self.clone();\n+        let semi_sp = self.token.span;\n+        self.bump(); // `;`\n+        let mut stmts =\n+            vec![self.mk_stmt(first_expr.span, ast::StmtKind::Expr(first_expr.clone()))];\n+        let err = |this: &mut Parser<'_>, stmts: Vec<ast::Stmt>| {\n+            let span = stmts[0].span.to(stmts[stmts.len() - 1].span);\n+            let mut err = this.struct_span_err(span, \"`match` arm body without braces\");\n+            let (these, s, are) =\n+                if stmts.len() > 1 { (\"these\", \"s\", \"are\") } else { (\"this\", \"\", \"is\") };\n+            err.span_label(\n+                span,\n+                &format!(\n+                    \"{these} statement{s} {are} not surrounded by a body\",\n+                    these = these,\n+                    s = s,\n+                    are = are\n+                ),\n+            );\n+            err.span_label(arrow_span, \"while parsing the `match` arm starting here\");\n+            if stmts.len() > 1 {\n+                err.multipart_suggestion(\n+                    &format!(\"surround the statement{} with a body\", s),\n+                    vec![\n+                        (span.shrink_to_lo(), \"{ \".to_string()),\n+                        (span.shrink_to_hi(), \" }\".to_string()),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                );\n+            } else {\n+                err.span_suggestion(\n+                    semi_sp,\n+                    \"use a comma to end a `match` arm expression\",\n+                    \",\".to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.emit();\n+            this.mk_expr_err(span)\n+        };\n+        // We might have either a `,` -> `;` typo, or a block without braces. We need\n+        // a more subtle parsing strategy.\n+        loop {\n+            if self.token.kind == token::CloseDelim(token::Brace) {\n+                // We have reached the closing brace of the `match` expression.\n+                return Some(err(self, stmts));\n+            }\n+            if self.token.kind == token::Comma {\n+                *self = start_snapshot;\n+                return None;\n+            }\n+            let pre_pat_snapshot = self.clone();\n+            match self.parse_pat_no_top_alt(None) {\n+                Ok(_pat) => {\n+                    if self.token.kind == token::FatArrow {\n+                        // Reached arm end.\n+                        *self = pre_pat_snapshot;\n+                        return Some(err(self, stmts));\n+                    }\n+                }\n+                Err(mut err) => {\n+                    err.cancel();\n+                }\n+            }\n+\n+            *self = pre_pat_snapshot;\n+            match self.parse_stmt_without_recovery(true, ForceCollect::No) {\n+                // Consume statements for as long as possible.\n+                Ok(Some(stmt)) => {\n+                    stmts.push(stmt);\n+                }\n+                Ok(None) => {\n+                    *self = start_snapshot;\n+                    break;\n+                }\n+                // We couldn't parse either yet another statement missing it's\n+                // enclosing block nor the next arm's pattern or closing brace.\n+                Err(mut stmt_err) => {\n+                    stmt_err.cancel();\n+                    *self = start_snapshot;\n+                    break;\n+                }\n+            }\n+        }\n+        None\n+    }\n+\n     pub(super) fn parse_arm(&mut self) -> PResult<'a, Arm> {\n         let attrs = self.parse_outer_attributes()?;\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n@@ -2007,6 +2103,21 @@ impl<'a> Parser<'a> {\n \n             if require_comma {\n                 let sm = this.sess.source_map();\n+                if let Some(body) = this.parse_arm_body_missing_braces(&expr, arrow_span) {\n+                    let span = body.span;\n+                    return Ok((\n+                        ast::Arm {\n+                            attrs,\n+                            pat,\n+                            guard,\n+                            body,\n+                            span,\n+                            id: DUMMY_NODE_ID,\n+                            is_placeholder: false,\n+                        },\n+                        TrailingToken::None,\n+                    ));\n+                }\n                 this.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)]).map_err(\n                     |mut err| {\n                         match (sm.span_to_lines(expr.span), sm.span_to_lines(arm_start_span)) {"}, {"sha": "a0f9616f72ae1e5a5d510b3e6822016aa59f2353", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34b2caa79f4451ff7eede9a578295e1a48db4bf2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34b2caa79f4451ff7eede9a578295e1a48db4bf2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=34b2caa79f4451ff7eede9a578295e1a48db4bf2", "patch": "@@ -34,7 +34,7 @@ impl<'a> Parser<'a> {\n \n     /// If `force_capture` is true, forces collection of tokens regardless of whether\n     /// or not we have attributes\n-    fn parse_stmt_without_recovery(\n+    crate fn parse_stmt_without_recovery(\n         &mut self,\n         capture_semi: bool,\n         force_collect: ForceCollect,"}, {"sha": "55a887427696ded8d7a027f38f6c2ee288fa9f10", "filename": "src/test/ui/parser/match-arm-without-braces.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/34b2caa79f4451ff7eede9a578295e1a48db4bf2/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34b2caa79f4451ff7eede9a578295e1a48db4bf2/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.rs?ref=34b2caa79f4451ff7eede9a578295e1a48db4bf2", "patch": "@@ -0,0 +1,87 @@\n+struct S;\n+\n+impl S {\n+    fn get<K, V: Default>(_: K) -> Option<V> {\n+        Default::default()\n+    }\n+}\n+\n+enum Val {\n+    Foo,\n+    Bar,\n+}\n+\n+impl Default for Val {\n+    fn default() -> Self {\n+        Val::Foo\n+    }\n+}\n+\n+fn main() {\n+    match S::get(1) {\n+        Some(Val::Foo) => {}\n+        _ => {}\n+    }\n+    match S::get(2) {\n+        Some(Val::Foo) => 3; //~ ERROR `match` arm body without braces\n+        _ => 4,\n+    }\n+    match S::get(5) {\n+        Some(Val::Foo) =>\n+          7; //~ ERROR `match` arm body without braces\n+          8;\n+        _ => 9,\n+    }\n+    match S::get(10) {\n+        Some(Val::Foo) =>\n+          11; //~ ERROR `match` arm body without braces\n+          12;\n+        _ => (),\n+    }\n+    match S::get(13) {\n+        None => {}\n+        Some(Val::Foo) =>\n+          14; //~ ERROR `match` arm body without braces\n+          15;\n+    }\n+    match S::get(16) {\n+        Some(Val::Foo) => 17\n+        _ => 18, //~ ERROR expected one of\n+    }\n+    match S::get(19) {\n+        Some(Val::Foo) =>\n+          20; //~ ERROR `match` arm body without braces\n+          21\n+        _ => 22,\n+    }\n+    match S::get(23) {\n+        Some(Val::Foo) =>\n+          24; //~ ERROR `match` arm body without braces\n+          25\n+        _ => (),\n+    }\n+    match S::get(26) {\n+        None => {}\n+        Some(Val::Foo) =>\n+          27; //~ ERROR `match` arm body without braces\n+          28\n+    }\n+    match S::get(29) {\n+        Some(Val::Foo) =>\n+          30; //~ ERROR expected one of\n+          31,\n+        _ => 32,\n+    }\n+    match S::get(33) {\n+        Some(Val::Foo) =>\n+          34; //~ ERROR expected one of\n+          35,\n+        _ => (),\n+    }\n+    match S::get(36) {\n+        None => {}\n+        Some(Val::Foo) =>\n+          37; //~ ERROR expected one of\n+          38,\n+    }\n+}"}, {"sha": "03ae351bf7902c98ead5269006f7b1799724cf3e", "filename": "src/test/ui/parser/match-arm-without-braces.stderr", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/34b2caa79f4451ff7eede9a578295e1a48db4bf2/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34b2caa79f4451ff7eede9a578295e1a48db4bf2/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-arm-without-braces.stderr?ref=34b2caa79f4451ff7eede9a578295e1a48db4bf2", "patch": "@@ -0,0 +1,135 @@\n+error: `match` arm body without braces\n+  --> $DIR/match-arm-without-braces.rs:26:27\n+   |\n+LL |         Some(Val::Foo) => 3;\n+   |                        -- ^- help: use a comma to end a `match` arm expression: `,`\n+   |                        |  |\n+   |                        |  this statement is not surrounded by a body\n+   |                        while parsing the `match` arm starting here\n+\n+error: `match` arm body without braces\n+  --> $DIR/match-arm-without-braces.rs:31:11\n+   |\n+LL |           Some(Val::Foo) =>\n+   |                          -- while parsing the `match` arm starting here\n+LL | /           7;\n+LL | |           8;\n+   | |____________^ these statements are not surrounded by a body\n+   |\n+help: surround the statements with a body\n+   |\n+LL |           { 7;\n+LL |           8; }\n+   |\n+\n+error: `match` arm body without braces\n+  --> $DIR/match-arm-without-braces.rs:37:11\n+   |\n+LL |           Some(Val::Foo) =>\n+   |                          -- while parsing the `match` arm starting here\n+LL | /           11;\n+LL | |           12;\n+   | |_____________^ these statements are not surrounded by a body\n+   |\n+help: surround the statements with a body\n+   |\n+LL |           { 11;\n+LL |           12; }\n+   |\n+\n+error: `match` arm body without braces\n+  --> $DIR/match-arm-without-braces.rs:44:11\n+   |\n+LL |           Some(Val::Foo) =>\n+   |                          -- while parsing the `match` arm starting here\n+LL | /           14;\n+LL | |           15;\n+   | |_____________^ these statements are not surrounded by a body\n+   |\n+help: surround the statements with a body\n+   |\n+LL |           { 14;\n+LL |           15; }\n+   |\n+\n+error: expected one of `,`, `.`, `?`, `}`, or an operator, found reserved identifier `_`\n+  --> $DIR/match-arm-without-braces.rs:49:9\n+   |\n+LL |         Some(Val::Foo) => 17\n+   |                        --   - expected one of `,`, `.`, `?`, `}`, or an operator\n+   |                        |\n+   |                        while parsing the `match` arm starting here\n+LL |         _ => 18,\n+   |         ^ unexpected token\n+\n+error: `match` arm body without braces\n+  --> $DIR/match-arm-without-braces.rs:53:11\n+   |\n+LL |           Some(Val::Foo) =>\n+   |                          -- while parsing the `match` arm starting here\n+LL | /           20;\n+LL | |           21\n+   | |____________^ these statements are not surrounded by a body\n+   |\n+help: surround the statements with a body\n+   |\n+LL |           { 20;\n+LL |           21 }\n+   |\n+\n+error: `match` arm body without braces\n+  --> $DIR/match-arm-without-braces.rs:59:11\n+   |\n+LL |           Some(Val::Foo) =>\n+   |                          -- while parsing the `match` arm starting here\n+LL | /           24;\n+LL | |           25\n+   | |____________^ these statements are not surrounded by a body\n+   |\n+help: surround the statements with a body\n+   |\n+LL |           { 24;\n+LL |           25 }\n+   |\n+\n+error: `match` arm body without braces\n+  --> $DIR/match-arm-without-braces.rs:66:11\n+   |\n+LL |           Some(Val::Foo) =>\n+   |                          -- while parsing the `match` arm starting here\n+LL | /           27;\n+LL | |           28\n+   | |____________^ these statements are not surrounded by a body\n+   |\n+help: surround the statements with a body\n+   |\n+LL |           { 27;\n+LL |           28 }\n+   |\n+\n+error: expected one of `,`, `.`, `?`, `}`, or an operator, found `;`\n+  --> $DIR/match-arm-without-braces.rs:71:13\n+   |\n+LL |         Some(Val::Foo) =>\n+   |                        -- while parsing the `match` arm starting here\n+LL |           30;\n+   |             ^ expected one of `,`, `.`, `?`, `}`, or an operator\n+\n+error: expected one of `,`, `.`, `?`, `}`, or an operator, found `;`\n+  --> $DIR/match-arm-without-braces.rs:77:13\n+   |\n+LL |         Some(Val::Foo) =>\n+   |                        -- while parsing the `match` arm starting here\n+LL |           34;\n+   |             ^ expected one of `,`, `.`, `?`, `}`, or an operator\n+\n+error: expected one of `,`, `.`, `?`, `}`, or an operator, found `;`\n+  --> $DIR/match-arm-without-braces.rs:84:13\n+   |\n+LL |         Some(Val::Foo) =>\n+   |                        -- while parsing the `match` arm starting here\n+LL |           37;\n+   |             ^ expected one of `,`, `.`, `?`, `}`, or an operator\n+\n+error: aborting due to 11 previous errors\n+"}]}