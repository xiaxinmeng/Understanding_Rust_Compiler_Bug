{"sha": "458d2ff067261ab646d914123f9c9c496cd612ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OGQyZmYwNjcyNjFhYjY0NmQ5MTQxMjNmOWM5YzQ5NmNkNjEyYWU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-26T01:53:54Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-26T01:53:54Z"}, "message": "Be a bit more cautious about marking things no-throw.", "tree": {"sha": "7d5e45ba224187cec58856ab1ed30b2f0b2c8d8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d5e45ba224187cec58856ab1ed30b2f0b2c8d8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/458d2ff067261ab646d914123f9c9c496cd612ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/458d2ff067261ab646d914123f9c9c496cd612ae", "html_url": "https://github.com/rust-lang/rust/commit/458d2ff067261ab646d914123f9c9c496cd612ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/458d2ff067261ab646d914123f9c9c496cd612ae/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "753b683939f41039ffefe98959faca8dc718c726", "url": "https://api.github.com/repos/rust-lang/rust/commits/753b683939f41039ffefe98959faca8dc718c726", "html_url": "https://github.com/rust-lang/rust/commit/753b683939f41039ffefe98959faca8dc718c726"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "78c1403966d7dfa0cb9d4dc4e42d57cb9841b506", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/458d2ff067261ab646d914123f9c9c496cd612ae/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d2ff067261ab646d914123f9c9c496cd612ae/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=458d2ff067261ab646d914123f9c9c496cd612ae", "patch": "@@ -38,11 +38,10 @@ fn declare_upcalls(targ_cfg: @session::config,\n         let mut arg_tys: [TypeRef] = [];\n         for tys.each {|t| arg_tys += [t]; }\n         let fn_ty = T_fn(arg_tys, rv);\n-        let f = base::decl_cdecl_fn(llmod, prefix + name, fn_ty);\n-        if name != \"fail\" {\n-            base::set_no_unwind(f);\n-        }\n-        ret f;\n+        ret base::decl_cdecl_fn(llmod, prefix + name, fn_ty);\n+    }\n+    fn nothrow(f: ValueRef) -> ValueRef {\n+        base::set_no_unwind(f); f\n     }\n     let d = bind decl(llmod, \"upcall_\", _, _, _);\n     let dv = bind decl(llmod, \"upcall_\", _, _, T_void());\n@@ -55,35 +54,42 @@ fn declare_upcalls(targ_cfg: @session::config,\n                              T_ptr(T_i8()),\n                              size_t]),\n           malloc:\n-              d(\"malloc\", [T_ptr(tydesc_type)], T_ptr(T_i8())),\n+              nothrow(d(\"malloc\", [T_ptr(tydesc_type)],\n+                        T_ptr(T_i8()))),\n           free:\n-              dv(\"free\", [T_ptr(T_i8())]),\n+              nothrow(dv(\"free\", [T_ptr(T_i8())])),\n           validate_box:\n-              dv(\"validate_box\", [T_ptr(T_i8())]),\n+              nothrow(dv(\"validate_box\", [T_ptr(T_i8())])),\n           shared_malloc:\n-              d(\"shared_malloc\", [size_t], T_ptr(T_i8())),\n+              nothrow(d(\"shared_malloc\", [size_t], T_ptr(T_i8()))),\n           shared_free:\n-              dv(\"shared_free\", [T_ptr(T_i8())]),\n+              nothrow(dv(\"shared_free\", [T_ptr(T_i8())])),\n           shared_realloc:\n-              d(\"shared_realloc\", [T_ptr(T_i8()), size_t], T_ptr(T_i8())),\n+              nothrow(d(\"shared_realloc\", [T_ptr(T_i8()), size_t],\n+                        T_ptr(T_i8()))),\n           mark:\n               d(\"mark\", [T_ptr(T_i8())], int_t),\n           vec_grow:\n-              dv(\"vec_grow\", [T_ptr(T_ptr(opaque_vec_t)), int_t]),\n+              nothrow(dv(\"vec_grow\", [T_ptr(T_ptr(opaque_vec_t)), int_t])),\n           str_new_uniq:\n-              d(\"str_new_uniq\", [T_ptr(T_i8()), int_t], T_ptr(opaque_vec_t)),\n+              nothrow(d(\"str_new_uniq\", [T_ptr(T_i8()), int_t],\n+                        T_ptr(opaque_vec_t))),\n           str_new_shared:\n-              d(\"str_new_shared\", [T_ptr(T_i8()), int_t], T_ptr(T_i8())),\n+              nothrow(d(\"str_new_shared\", [T_ptr(T_i8()), int_t],\n+                        T_ptr(T_i8()))),\n           str_concat:\n-              d(\"str_concat\", [T_ptr(opaque_vec_t), T_ptr(opaque_vec_t)],\n-                T_ptr(opaque_vec_t)),\n+              nothrow(d(\"str_concat\", [T_ptr(opaque_vec_t),\n+                                       T_ptr(opaque_vec_t)],\n+                        T_ptr(opaque_vec_t))),\n           cmp_type:\n               dv(\"cmp_type\",\n                  [T_ptr(T_i1()), T_ptr(tydesc_type),\n-                  T_ptr(T_ptr(tydesc_type)), T_ptr(T_i8()), T_ptr(T_i8()),\n+                  T_ptr(T_ptr(tydesc_type)), T_ptr(T_i8()),\n+                  T_ptr(T_i8()),\n                   T_i8()]),\n           log_type:\n-              dv(\"log_type\", [T_ptr(tydesc_type), T_ptr(T_i8()), T_i32()]),\n+              dv(\"log_type\", [T_ptr(tydesc_type),\n+                              T_ptr(T_i8()), T_i32()]),\n           alloc_c_stack:\n               d(\"alloc_c_stack\", [size_t], T_ptr(T_i8())),\n           call_shim_on_c_stack:\n@@ -95,9 +101,9 @@ fn declare_upcalls(targ_cfg: @session::config,\n               d(\"call_shim_on_rust_stack\",\n                 [T_ptr(T_i8()), T_ptr(T_i8())], int_t),\n           rust_personality:\n-              d(\"rust_personality\", [], T_i32()),\n+              nothrow(d(\"rust_personality\", [], T_i32())),\n           reset_stack_limit:\n-              dv(\"reset_stack_limit\", [])\n+              nothrow(dv(\"reset_stack_limit\", []))\n          };\n }\n //"}, {"sha": "88df4687d61ee22e28db5ecaca805666c9606858", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/458d2ff067261ab646d914123f9c9c496cd612ae/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d2ff067261ab646d914123f9c9c496cd612ae/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=458d2ff067261ab646d914123f9c9c496cd612ae", "patch": "@@ -488,9 +488,6 @@ fn declare_generic_glue(ccx: @crate_ctxt, t: ty::t, llfnty: TypeRef,\n     note_unique_llvm_symbol(ccx, fn_nm);\n     let llfn = decl_cdecl_fn(ccx.llmod, fn_nm, llfnty);\n     set_glue_inlining(llfn, t);\n-    if name != \"drop\" || !ty::type_has_resources(t) {\n-        set_no_unwind(llfn);\n-    }\n     ret llfn;\n }\n "}]}