{"sha": "06b2a3fbdbfdf6cc13a9eae74966a966cfde7aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YjJhM2ZiZGJmZGY2Y2MxM2E5ZWFlNzQ5NjZhOTY2Y2ZkZTdhYWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T14:24:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T23:47:04Z"}, "message": "convert `LateBoundRegionsCollector` to track a debruijn index\n\nCo-authored-by: csmoe <35686186+csmoe@users.noreply.github.com>", "tree": {"sha": "12e6446d5e0f2de3f244b586ccad370b2529c35a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12e6446d5e0f2de3f244b586ccad370b2529c35a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06b2a3fbdbfdf6cc13a9eae74966a966cfde7aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06b2a3fbdbfdf6cc13a9eae74966a966cfde7aaf", "html_url": "https://github.com/rust-lang/rust/commit/06b2a3fbdbfdf6cc13a9eae74966a966cfde7aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06b2a3fbdbfdf6cc13a9eae74966a966cfde7aaf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aeb6efb6d584ae7632787edff60f3d9e4eb7384", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aeb6efb6d584ae7632787edff60f3d9e4eb7384", "html_url": "https://github.com/rust-lang/rust/commit/4aeb6efb6d584ae7632787edff60f3d9e4eb7384"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "f1a7add784e9a904272fe69b6e769df2cab689ef", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/06b2a3fbdbfdf6cc13a9eae74966a966cfde7aaf/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b2a3fbdbfdf6cc13a9eae74966a966cfde7aaf/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=06b2a3fbdbfdf6cc13a9eae74966a966cfde7aaf", "patch": "@@ -671,17 +671,26 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n }\n \n-/// Collects all the late-bound regions it finds into a hash set.\n+/// Collects all the late-bound regions at the innermost binding level\n+/// into a hash set.\n struct LateBoundRegionsCollector {\n-    current_depth: u32,\n+    current_index: ty::DebruijnIndex,\n     regions: FxHashSet<ty::BoundRegion>,\n+\n+    /// If true, we only want regions that are known to be\n+    /// \"constrained\" when you equate this type with another type. In\n+    /// partcular, if you have e.g. `&'a u32` and `&'b u32`, equating\n+    /// them constraints `'a == 'b`.  But if you have `<&'a u32 as\n+    /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those\n+    /// types may mean that `'a` and `'b` don't appear in the results,\n+    /// so they are not considered *constrained*.\n     just_constrained: bool,\n }\n \n impl LateBoundRegionsCollector {\n     fn new(just_constrained: bool) -> Self {\n         LateBoundRegionsCollector {\n-            current_depth: 1,\n+            current_index: ty::DebruijnIndex::INNERMOST,\n             regions: FxHashSet(),\n             just_constrained,\n         }\n@@ -690,9 +699,9 @@ impl LateBoundRegionsCollector {\n \n impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n     fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n-        self.current_depth += 1;\n+        self.current_index.shift_in(1);\n         let result = t.super_visit_with(self);\n-        self.current_depth -= 1;\n+        self.current_index.shift_out(1);\n         result\n     }\n \n@@ -712,7 +721,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n         match *r {\n-            ty::ReLateBound(debruijn, br) if debruijn.depth == self.current_depth => {\n+            ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {\n                 self.regions.insert(br);\n             }\n             _ => { }"}]}