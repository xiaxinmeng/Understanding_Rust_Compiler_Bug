{"sha": "a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NGIxY2NhY2JjMjg2OWI2YTY3YWZjZGE5OGQ3NDk1YzAwODZlYjM=", "commit": {"author": {"name": "Austin Seipp", "email": "as@hacks.yi.org", "date": "2012-01-10T01:15:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-10T03:27:05Z"}, "message": "Change all uses of 'when' in alt-patterns to 'if'\n\nIssue #1396", "tree": {"sha": "46c25968d972b54ef5acb86a7c18ed1bcf541f3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46c25968d972b54ef5acb86a7c18ed1bcf541f3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "html_url": "https://github.com/rust-lang/rust/commit/a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeae04cb49a3af321e75f839d409768014bd5169", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeae04cb49a3af321e75f839d409768014bd5169", "html_url": "https://github.com/rust-lang/rust/commit/aeae04cb49a3af321e75f839d409768014bd5169"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "79d4523b14bda27fd11ac0359d9c06bbb96968e3", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "patch": "@@ -100,7 +100,7 @@ fn fold_item(cx: test_ctxt, &&i: @ast::item, fld: fold::ast_fold) ->\n \n     if is_test_fn(i) {\n         alt i.node {\n-          ast::item_fn(decl, _, _) when decl.purity == ast::unsafe_fn {\n+          ast::item_fn(decl, _, _) if decl.purity == ast::unsafe_fn {\n             cx.sess.span_fatal(\n                 i.span,\n                 \"unsafe functions cannot be used for tests\");"}, {"sha": "5c9e298bcfb2cf61938afe599d5ce117beac4682", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "patch": "@@ -153,7 +153,7 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n         for arg in args {\n             alt arg.node {\n               expr_fn(proto_block., _, _, _) { fns += [arg]; }\n-              expr_fn_block(_, _) when is_block(cx, arg.id) { fns += [arg]; }\n+              expr_fn_block(_, _) if is_block(cx, arg.id) { fns += [arg]; }\n               _ {\n                 alt arg_ts[i].mode {\n                   by_mut_ref. { clear_if_path(cx, arg, v, false); }"}, {"sha": "c884daacf5813e5c9c752056a6c4452488253454", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "patch": "@@ -1341,7 +1341,7 @@ fn make_take_glue(cx: @block_ctxt, v: ValueRef, t: ty::t) {\n       ty::ty_opaque_closure_ptr(ck) {\n         trans_closure::make_opaque_cbox_take_glue(bcx, ck, v)\n       }\n-      _ when ty::type_is_structural(bcx_tcx(bcx), t) {\n+      _ if ty::type_is_structural(bcx_tcx(bcx), t) {\n         iter_structural_ty(bcx, v, t, take_ty)\n       }\n       _ { bcx }"}, {"sha": "e0c6d6f4ba2ceef1f64cda112919bc114003f2b1", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "patch": "@@ -1953,9 +1953,9 @@ mod unify {\n         }\n \n         ret alt variance {\n-          invariant. when e_proto == a_proto { none }\n-          covariant. when sub_proto(a_proto, e_proto) { none }\n-          contravariant. when sub_proto(e_proto, a_proto) { none }\n+          invariant. if e_proto == a_proto { none }\n+          covariant. if sub_proto(a_proto, e_proto) { none }\n+          contravariant. if sub_proto(e_proto, a_proto) { none }\n           _ { some(ures_err(terr_mismatch)) }\n         };\n     }\n@@ -2220,7 +2220,7 @@ mod unify {\n           }\n           ty::ty_param(expected_n, _) {\n             alt struct(cx.tcx, actual) {\n-              ty::ty_param(actual_n, _) when expected_n == actual_n {\n+              ty::ty_param(actual_n, _) if expected_n == actual_n {\n                 ret ures_ok(expected);\n               }\n               _ { ret ures_err(terr_mismatch); }"}, {"sha": "21340168a230ed7ca104c780a347f6d10441607c", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "patch": "@@ -182,7 +182,7 @@ fn scan_digits(rdr: reader, radix: uint) -> str {\n         let c = rdr.curr();\n         if c == '_' { rdr.bump(); cont; }\n         alt char::maybe_digit(c) {\n-          some(d) when (d as uint) < radix {\n+          some(d) if (d as uint) < radix {\n             str::push_byte(rslt, c as u8);\n             rdr.bump();\n           }"}, {"sha": "b163ae172da7a4896280676747ed9c6c93bf7f80", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "patch": "@@ -753,7 +753,7 @@ fn mk_pexpr(p: parser, lo: uint, hi: uint, node: ast::expr_) -> pexpr {\n \n fn to_expr(e: pexpr) -> @ast::expr {\n     alt e.node {\n-      ast::expr_tup(es) when vec::len(es) == 1u { es[0u] }\n+      ast::expr_tup(es) if vec::len(es) == 1u { es[0u] }\n       _ { *e }\n     }\n }\n@@ -1020,7 +1020,7 @@ fn parse_dot_or_call_expr_with(p: parser, e0: pexpr) -> pexpr {\n     while !expr_is_complete(p, e) {\n         alt p.peek() {\n           // expr(...)\n-          token::LPAREN. when permits_call(p) {\n+          token::LPAREN. if permits_call(p) {\n             let es = parse_seq(token::LPAREN, token::RPAREN,\n                                seq_sep(token::COMMA), parse_expr, p);\n             hi = es.span.hi;\n@@ -1029,7 +1029,7 @@ fn parse_dot_or_call_expr_with(p: parser, e0: pexpr) -> pexpr {\n           }\n \n           // expr {|| ... }\n-          token::LBRACE. when is_bar(p.look_ahead(1u)) && permits_call(p) {\n+          token::LBRACE. if is_bar(p.look_ahead(1u)) && permits_call(p) {\n             p.bump();\n             let blk = parse_fn_block_expr(p);\n             alt e.node {"}, {"sha": "94e1973bbe72a078f49ab47fbf6cadbb5615291e", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "patch": "@@ -29,7 +29,7 @@ fn main() {\n         false { }\n     }\n     alt 3 {\n-      _ when vec::any(v) { |e| float::is_negative(e) } {\n+      _ if vec::any(v) { |e| float::is_negative(e) } {\n       }\n       _ {\n         fail \"wrong answer.\";"}, {"sha": "2dc646ee82391f8f03b2fe1e28d97d0db15011b6", "filename": "src/test/run-pass/guards.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "patch": "@@ -1,12 +1,12 @@\n fn main() {\n     let a =\n-        alt 10 { x when x < 7 { 1 } x when x < 11 { 2 } 10 { 3 } _ { 4 } };\n+        alt 10 { x if x < 7 { 1 } x if x < 11 { 2 } 10 { 3 } _ { 4 } };\n     assert (a == 2);\n \n     let b =\n         alt {x: 10, y: 20} {\n-          x when x.x < 5 && x.y < 5 { 1 }\n-          {x: x, y: y} when x == 10 && y == 20 { 2 }\n+          x if x.x < 5 && x.y < 5 { 1 }\n+          {x: x, y: y} if x == 10 && y == 20 { 2 }\n           {x: x, y: y} { 3 }\n         };\n     assert (b == 2);"}, {"sha": "2570e598b087223b15f120e9da9fbfa20bd86281", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "patch": "@@ -31,7 +31,7 @@ fn ret_ret() -> int { ret (ret 2) + 3; }\n \n fn ret_guard() {\n     alt 2 {\n-      x when (ret) { x; }\n+      x if (ret) { x; }\n     }\n }\n "}, {"sha": "adb68e4198c267d5e5be2d07a8b50bb5da568fbe", "filename": "src/test/stdtest/math.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Ftest%2Fstdtest%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94b1ccacbc2869b6a67afcda98d7495c0086eb3/src%2Ftest%2Fstdtest%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmath.rs?ref=a94b1ccacbc2869b6a67afcda98d7495c0086eb3", "patch": "@@ -251,7 +251,7 @@ fn test_sqrt() {\n fn test_angle() {\n     fn angle(vec: (float, float)) -> float {\n         alt vec {\n-          (0f, y) when y < 0f { 1.5 * consts::pi }\n+          (0f, y) if y < 0f { 1.5 * consts::pi }\n           (0f, y) { 0.5 * consts::pi }\n           (x, y) { float::atan(y / x) }\n         }"}]}