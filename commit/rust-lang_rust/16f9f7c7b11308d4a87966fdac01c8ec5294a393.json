{"sha": "16f9f7c7b11308d4a87966fdac01c8ec5294a393", "node_id": "C_kwDOAAsO6NoAKDE2ZjlmN2M3YjExMzA4ZDRhODc5NjZmZGFjMDFjOGVjNTI5NGEzOTM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-08T16:53:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-10T18:15:14Z"}, "message": "Implement def_ident_span in rustc_middle.", "tree": {"sha": "32296dc8805e3e1d03a10127c0d1896aaff6d37f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32296dc8805e3e1d03a10127c0d1896aaff6d37f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16f9f7c7b11308d4a87966fdac01c8ec5294a393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16f9f7c7b11308d4a87966fdac01c8ec5294a393", "html_url": "https://github.com/rust-lang/rust/commit/16f9f7c7b11308d4a87966fdac01c8ec5294a393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16f9f7c7b11308d4a87966fdac01c8ec5294a393/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "html_url": "https://github.com/rust-lang/rust/commit/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd"}], "stats": {"total": 63, "additions": 29, "deletions": 34}, "files": [{"sha": "0389c88d22d76726cb9db0f0a709e0ee8e0b3b1d", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/16f9f7c7b11308d4a87966fdac01c8ec5294a393/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f9f7c7b11308d4a87966fdac01c8ec5294a393/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=16f9f7c7b11308d4a87966fdac01c8ec5294a393", "patch": "@@ -910,27 +910,34 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    pub(super) fn opt_ident_span(self, id: HirId) -> Option<Span> {\n+        let ident = match self.get(id) {\n+            // A `Ctor` doesn't have an identifier itself, but its parent\n+            // struct/variant does. Compare with `hir::Map::opt_span`.\n+            Node::Ctor(..) => match self.find(self.get_parent_node(id))? {\n+                Node::Item(item) => Some(item.ident),\n+                Node::Variant(variant) => Some(variant.ident),\n+                _ => unreachable!(),\n+            },\n+            node => node.ident(),\n+        };\n+        ident.map(|ident| ident.span)\n+    }\n+\n     pub fn opt_name(self, id: HirId) -> Option<Symbol> {\n-        Some(match self.get(id) {\n-            Node::Item(i) => i.ident.name,\n-            Node::ForeignItem(fi) => fi.ident.name,\n-            Node::ImplItem(ii) => ii.ident.name,\n-            Node::TraitItem(ti) => ti.ident.name,\n-            Node::Variant(v) => v.ident.name,\n-            Node::Field(f) => f.ident.name,\n-            Node::Lifetime(lt) => lt.name.ident().name,\n-            Node::GenericParam(param) => param.name.ident().name,\n-            Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,\n-            Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),\n-            _ => return None,\n-        })\n+        match self.get(id) {\n+            Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => Some(l.name),\n+            Node::Ctor(..) => match self.find(self.get_parent_node(id))? {\n+                Node::Item(item) => Some(item.ident.name),\n+                Node::Variant(variant) => Some(variant.ident.name),\n+                _ => unreachable!(),\n+            },\n+            node => node.ident().map(|i| i.name),\n+        }\n     }\n \n     pub fn name(self, id: HirId) -> Symbol {\n-        match self.opt_name(id) {\n-            Some(name) => name,\n-            None => bug!(\"no name for {}\", self.node_to_string(id)),\n-        }\n+        self.opt_name(id).unwrap_or_else(|| bug!(\"no name for {}\", self.node_to_string(id)))\n     }\n \n     /// Given a node ID, gets a list of attributes associated with the AST"}, {"sha": "b5b21319afc9eeba700739f1f179fc4c1df2f813", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16f9f7c7b11308d4a87966fdac01c8ec5294a393/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f9f7c7b11308d4a87966fdac01c8ec5294a393/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=16f9f7c7b11308d4a87966fdac01c8ec5294a393", "patch": "@@ -122,6 +122,11 @@ pub fn provide(providers: &mut Providers) {\n         |tcx, id| tcx.hir_crate(()).owners[id].as_owner().map_or(AttributeMap::EMPTY, |o| &o.attrs);\n     providers.source_span = |tcx, def_id| tcx.resolutions(()).definitions.def_span(def_id);\n     providers.def_span = |tcx, def_id| tcx.hir().span_if_local(def_id).unwrap_or(DUMMY_SP);\n+    providers.def_ident_span = |tcx, def_id| {\n+        let def_id = def_id.expect_local();\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        tcx.hir().opt_ident_span(hir_id)\n+    };\n     providers.fn_arg_names = |tcx, id| {\n         let hir = tcx.hir();\n         let hir_id = hir.local_def_id_to_hir_id(id.expect_local());"}, {"sha": "38ae6a25b18064736095441fd94f404b191393b5", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/16f9f7c7b11308d4a87966fdac01c8ec5294a393/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f9f7c7b11308d4a87966fdac01c8ec5294a393/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=16f9f7c7b11308d4a87966fdac01c8ec5294a393", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{\n     self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n };\n-use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>(\n@@ -103,21 +102,6 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtSizedConstrain\n     ty::AdtSizedConstraint(result)\n }\n \n-fn def_ident_span(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Span> {\n-    tcx.hir()\n-        .get_if_local(def_id)\n-        .and_then(|node| match node {\n-            // A `Ctor` doesn't have an identifier itself, but its parent\n-            // struct/variant does. Compare with `hir::Map::opt_span`.\n-            hir::Node::Ctor(ctor) => ctor\n-                .ctor_hir_id()\n-                .and_then(|ctor_id| tcx.hir().find(tcx.hir().get_parent_node(ctor_id)))\n-                .and_then(|parent| parent.ident()),\n-            _ => node.ident(),\n-        })\n-        .map(|ident| ident.span)\n-}\n-\n /// See `ParamEnv` struct definition for details.\n #[instrument(level = \"debug\", skip(tcx))]\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n@@ -480,7 +464,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         asyncness,\n         adt_sized_constraint,\n-        def_ident_span,\n         param_env,\n         param_env_reveal_all_normalized,\n         instance_def_size_estimate,"}]}