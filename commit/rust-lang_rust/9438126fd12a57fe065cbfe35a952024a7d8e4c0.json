{"sha": "9438126fd12a57fe065cbfe35a952024a7d8e4c0", "node_id": "C_kwDOAAsO6NoAKDk0MzgxMjZmZDEyYTU3ZmUwNjVjYmZlMzVhOTUyMDI0YTdkOGU0YzA", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2023-01-26T22:35:24Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2023-01-26T22:39:57Z"}, "message": "previous thir unpretty output through thir-flat", "tree": {"sha": "28615d1272f9091828ea8340e6fcc7ad4db84e9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28615d1272f9091828ea8340e6fcc7ad4db84e9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9438126fd12a57fe065cbfe35a952024a7d8e4c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9438126fd12a57fe065cbfe35a952024a7d8e4c0", "html_url": "https://github.com/rust-lang/rust/commit/9438126fd12a57fe065cbfe35a952024a7d8e4c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9438126fd12a57fe065cbfe35a952024a7d8e4c0/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bce66f786685b74fbeb7eae53ccf6283fded994", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bce66f786685b74fbeb7eae53ccf6283fded994", "html_url": "https://github.com/rust-lang/rust/commit/3bce66f786685b74fbeb7eae53ccf6283fded994"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "a7c040397a1541a392468e9e379335f92260bd57", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9438126fd12a57fe065cbfe35a952024a7d8e4c0/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438126fd12a57fe065cbfe35a952024a7d8e4c0/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=9438126fd12a57fe065cbfe35a952024a7d8e4c0", "patch": "@@ -498,6 +498,21 @@ fn print_with_analysis(tcx: TyCtxt<'_>, ppm: PpMode) -> Result<(), ErrorGuarante\n             out\n         }\n \n+        ThirFlat => {\n+            let mut out = String::new();\n+            abort_on_err(rustc_hir_analysis::check_crate(tcx), tcx.sess);\n+            debug!(\"pretty printing THIR flat\");\n+            for did in tcx.hir().body_owners() {\n+                let _ = writeln!(\n+                    out,\n+                    \"{:?}:\\n{}\\n\",\n+                    did,\n+                    tcx.thir_flat(ty::WithOptConstParam::unknown(did))\n+                );\n+            }\n+            out\n+        }\n+\n         _ => unreachable!(),\n     };\n "}, {"sha": "2543614318f6d9e1badd78c3a61d0f5430a1ed74", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9438126fd12a57fe065cbfe35a952024a7d8e4c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438126fd12a57fe065cbfe35a952024a7d8e4c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9438126fd12a57fe065cbfe35a952024a7d8e4c0", "patch": "@@ -361,6 +361,13 @@ rustc_queries! {\n         desc { |tcx| \"constructing THIR tree for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n     }\n \n+    /// Create a list-like THIR representation for debugging.\n+    query thir_flat(key: ty::WithOptConstParam<LocalDefId>) -> String {\n+        no_hash\n+        arena_cache\n+        desc { |tcx| \"constructing flat THIR representation for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n+    }\n+\n     /// Set of all the `DefId`s in this crate that have MIR associated with\n     /// them. This includes all the body owners, but also things like struct\n     /// constructors."}, {"sha": "94dae36154c26181757616366db754e6412999b6", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9438126fd12a57fe065cbfe35a952024a7d8e4c0/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438126fd12a57fe065cbfe35a952024a7d8e4c0/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=9438126fd12a57fe065cbfe35a952024a7d8e4c0", "patch": "@@ -34,4 +34,5 @@ pub fn provide(providers: &mut Providers) {\n     providers.thir_check_unsafety_for_const_arg = check_unsafety::thir_check_unsafety_for_const_arg;\n     providers.thir_body = thir::cx::thir_body;\n     providers.thir_tree = thir::cx::thir_tree;\n+    providers.thir_flat = thir::cx::thir_flat;\n }"}, {"sha": "10df4b229520f3bd1f8f572353b994cb14ae273e", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9438126fd12a57fe065cbfe35a952024a7d8e4c0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438126fd12a57fe065cbfe35a952024a7d8e4c0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=9438126fd12a57fe065cbfe35a952024a7d8e4c0", "patch": "@@ -62,6 +62,13 @@ pub(crate) fn thir_tree(tcx: TyCtxt<'_>, owner_def: ty::WithOptConstParam<LocalD\n     }\n }\n \n+pub(crate) fn thir_flat(tcx: TyCtxt<'_>, owner_def: ty::WithOptConstParam<LocalDefId>) -> String {\n+    match thir_body(tcx, owner_def) {\n+        Ok((thir, _)) => format!(\"{:#?}\", thir.steal()),\n+        Err(_) => \"error\".into(),\n+    }\n+}\n+\n struct Cx<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     thir: Thir<'tcx>,"}, {"sha": "1abe5d242497b837c2d3cf148880143fdd416385", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9438126fd12a57fe065cbfe35a952024a7d8e4c0/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9438126fd12a57fe065cbfe35a952024a7d8e4c0/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9438126fd12a57fe065cbfe35a952024a7d8e4c0", "patch": "@@ -2577,6 +2577,7 @@ fn parse_pretty(unstable_opts: &UnstableOptions, efmt: ErrorOutputType) -> Optio\n         \"hir,typed\" => Hir(PpHirMode::Typed),\n         \"hir-tree\" => HirTree,\n         \"thir-tree\" => ThirTree,\n+        \"thir-flat\" => ThirFlat,\n         \"mir\" => Mir,\n         \"mir-cfg\" => MirCFG,\n         name => early_error(\n@@ -2585,7 +2586,8 @@ fn parse_pretty(unstable_opts: &UnstableOptions, efmt: ErrorOutputType) -> Optio\n                 \"argument to `unpretty` must be one of `normal`, `identified`, \\\n                             `expanded`, `expanded,identified`, `expanded,hygiene`, \\\n                             `ast-tree`, `ast-tree,expanded`, `hir`, `hir,identified`, \\\n-                            `hir,typed`, `hir-tree`, `thir-tree`, `mir` or `mir-cfg`; got {name}\"\n+                            `hir,typed`, `hir-tree`, `thir-tree`, `thir-flat`, `mir` or \\\n+                            `mir-cfg`; got {name}\"\n             ),\n         ),\n     };\n@@ -2740,6 +2742,8 @@ pub enum PpMode {\n     HirTree,\n     /// `-Zunpretty=thir-tree`\n     ThirTree,\n+    /// `-Zunpretty=`thir-flat`\n+    ThirFlat,\n     /// `-Zunpretty=mir`\n     Mir,\n     /// `-Zunpretty=mir-cfg`\n@@ -2758,6 +2762,7 @@ impl PpMode {\n             | Hir(_)\n             | HirTree\n             | ThirTree\n+            | ThirFlat\n             | Mir\n             | MirCFG => true,\n         }\n@@ -2767,13 +2772,13 @@ impl PpMode {\n         match *self {\n             Source(_) | AstTree(_) => false,\n \n-            Hir(_) | HirTree | ThirTree | Mir | MirCFG => true,\n+            Hir(_) | HirTree | ThirTree | ThirFlat | Mir | MirCFG => true,\n         }\n     }\n \n     pub fn needs_analysis(&self) -> bool {\n         use PpMode::*;\n-        matches!(*self, Mir | MirCFG | ThirTree)\n+        matches!(*self, Mir | MirCFG | ThirTree | ThirFlat)\n     }\n }\n "}]}