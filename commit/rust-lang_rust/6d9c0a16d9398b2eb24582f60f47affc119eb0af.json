{"sha": "6d9c0a16d9398b2eb24582f60f47affc119eb0af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOWMwYTE2ZDkzOThiMmViMjQ1ODJmNjBmNDdhZmZjMTE5ZWIwYWY=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-07-01T21:01:16Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-07-28T12:33:37Z"}, "message": "Documentation improvements", "tree": {"sha": "8c5d60576aff33a8314f67b2bb5eb89429d4a431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c5d60576aff33a8314f67b2bb5eb89429d4a431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d9c0a16d9398b2eb24582f60f47affc119eb0af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9c0a16d9398b2eb24582f60f47affc119eb0af", "html_url": "https://github.com/rust-lang/rust/commit/6d9c0a16d9398b2eb24582f60f47affc119eb0af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d9c0a16d9398b2eb24582f60f47affc119eb0af/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89583e98e8b79c62ec70d791c9d4453decce1b5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/89583e98e8b79c62ec70d791c9d4453decce1b5b", "html_url": "https://github.com/rust-lang/rust/commit/89583e98e8b79c62ec70d791c9d4453decce1b5b"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "23a2e313c0189c83ead315d18382f93ea8415b2a", "filename": "library/alloc/src/vec/source_iter_marker.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6d9c0a16d9398b2eb24582f60f47affc119eb0af/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9c0a16d9398b2eb24582f60f47affc119eb0af/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs?ref=6d9c0a16d9398b2eb24582f60f47affc119eb0af", "patch": "@@ -71,6 +71,18 @@ where\n         // drop any remaining values at the tail of the source\n         // but prevent drop of the allocation itself once IntoIter goes out of scope\n         // if the drop panics then we also leak any elements collected into dst_buf\n+        //\n+        // FIXME: Since `SpecInPlaceCollect::collect_in_place` above might use\n+        // `__iterator_get_unchecked` internally, this call might be operating on\n+        // a `vec::IntoIter` with incorrect internal state regarding which elements\n+        // have already been \u201cconsumed\u201d. However, the `TrustedRandomIteratorNoCoerce`\n+        // implementation of `vec::IntoIter` is only present if the `Vec` elements\n+        // don\u2019t have a destructor, so it doesn\u2019t matter if elements are \u201cdropped multiple times\u201d\n+        // in this case.\n+        // This argument technically currently lacks justification from the `# Safety` docs for\n+        // `SourceIter`/`InPlaceIterable` and/or `TrustedRandomAccess`, so it might be possible that\n+        // someone could inadvertently create new library unsoundness\n+        // involving this `.forget_allocation_drop_remaining()` call.\n         src.forget_allocation_drop_remaining();\n \n         let vec = unsafe { Vec::from_raw_parts(dst_buf, len, cap) };\n@@ -101,8 +113,11 @@ fn write_in_place_with_drop<T>(\n trait SpecInPlaceCollect<T, I>: Iterator<Item = T> {\n     /// Collects an iterator (`self`) into the destination buffer (`dst`) and returns the number of items\n     /// collected. `end` is the last writable element of the allocation and used for bounds checks.\n-    // FIXME: Clarify safety conditions. Iterator must not be coerced to a subtype\n-    // after this call due to potential use of [`TrustedRandomAccessNoCoerce`].\n+    ///\n+    /// This method is specialized and one of its implementations makes use of\n+    /// `Iterator::__iterator_get_unchecked` calls with a `TrustedRandomAccessNoCoerce` bound\n+    /// on `I` which means the caller of this method must take the safety conditions\n+    /// of that trait into consideration.\n     fn collect_in_place(&mut self, dst: *mut T, end: *const T) -> usize;\n }\n "}, {"sha": "c7e69e922c13792d5d02178b4a23b9591ba440ad", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d9c0a16d9398b2eb24582f60f47affc119eb0af/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9c0a16d9398b2eb24582f60f47affc119eb0af/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=6d9c0a16d9398b2eb24582f60f47affc119eb0af", "patch": "@@ -524,7 +524,12 @@ pub unsafe trait TrustedRandomAccess: TrustedRandomAccessNoCoerce {}\n \n /// Like [`TrustedRandomAccess`] but without any of the requirements / guarantees around\n /// coercions to subtypes after `__iterator_get_unchecked` (they aren\u2019t allowed here!), and\n-/// without the requirement that subtypes / supertypes implement [`TrustedRandomAccessNoCoerce`].\n+/// without the requirement that subtypes / supertypes implement `TrustedRandomAccessNoCoerce`.\n+///\n+/// This trait was created in PR #85874 to fix soundness issue #85873 without performance regressions.\n+/// It is subject to change as we might want to build a more generally useful (for performance\n+/// optimizations) and more sophisticated trait or trait hierarchy that replaces or extends\n+/// [`TrustedRandomAccess`] and `TrustedRandomAccessNoCoerce`.\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n #[rustc_specialization_trait]"}]}