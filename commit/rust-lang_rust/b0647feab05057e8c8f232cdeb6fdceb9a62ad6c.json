{"sha": "b0647feab05057e8c8f232cdeb6fdceb9a62ad6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNjQ3ZmVhYjA1MDU3ZThjOGYyMzJjZGViNmZkY2ViOWE2MmFkNmM=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-09-17T01:02:33Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-09-17T01:55:56Z"}, "message": "Limit spans in bytes!() error messages to the argument in question\n\nThis constrains the span to the appropriate argument, so you know which\none caused the problem. Instead of\n\n  foo.rs:2:4: 2:21 error: Too large integer literal in bytes!\n  foo.rs:2    bytes!(1, 256, 2)\n              ^~~~~~~~~~~~~~~~~\n\nit will say\n\n  foo.rs:2:14 2:17 error: Too large integer literal in bytes!\n  foo.rs:2    bytes!(1, 256, 2)\n                        ^~~", "tree": {"sha": "20cb90bdeb9bf13e466512f5e596d9a0a82201dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20cb90bdeb9bf13e466512f5e596d9a0a82201dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0647feab05057e8c8f232cdeb6fdceb9a62ad6c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0647feab05057e8c8f232cdeb6fdceb9a62ad6c", "html_url": "https://github.com/rust-lang/rust/commit/b0647feab05057e8c8f232cdeb6fdceb9a62ad6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0647feab05057e8c8f232cdeb6fdceb9a62ad6c/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "html_url": "https://github.com/rust-lang/rust/commit/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b27fcb6c9b9f7c641a25aa11203558843b876aa7", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b0647feab05057e8c8f232cdeb6fdceb9a62ad6c/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0647feab05057e8c8f232cdeb6fdceb9a62ad6c/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=b0647feab05057e8c8f232cdeb6fdceb9a62ad6c", "patch": "@@ -30,43 +30,43 @@ pub fn expand_syntax_ext(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> bas\n                 // string literal, push each byte to vector expression\n                 ast::lit_str(s) => {\n                     for byte in s.byte_iter() {\n-                        bytes.push(cx.expr_u8(sp, byte));\n+                        bytes.push(cx.expr_u8(expr.span, byte));\n                     }\n                 }\n \n                 // u8 literal, push to vector expression\n                 ast::lit_uint(v, ast::ty_u8) => {\n                     if v > 0xFF {\n-                        cx.span_err(sp, \"Too large u8 literal in bytes!\")\n+                        cx.span_err(expr.span, \"Too large u8 literal in bytes!\")\n                     } else {\n-                        bytes.push(cx.expr_u8(sp, v as u8));\n+                        bytes.push(cx.expr_u8(expr.span, v as u8));\n                     }\n                 }\n \n                 // integer literal, push to vector expression\n                 ast::lit_int_unsuffixed(v) => {\n                     if v > 0xFF {\n-                        cx.span_err(sp, \"Too large integer literal in bytes!\")\n+                        cx.span_err(expr.span, \"Too large integer literal in bytes!\")\n                     } else if v < 0 {\n-                        cx.span_err(sp, \"Negative integer literal in bytes!\")\n+                        cx.span_err(expr.span, \"Negative integer literal in bytes!\")\n                     } else {\n-                        bytes.push(cx.expr_u8(sp, v as u8));\n+                        bytes.push(cx.expr_u8(expr.span, v as u8));\n                     }\n                 }\n \n                 // char literal, push to vector expression\n                 ast::lit_char(v) => {\n                     if char::from_u32(v).unwrap().is_ascii() {\n-                        bytes.push(cx.expr_u8(sp, v as u8));\n+                        bytes.push(cx.expr_u8(expr.span, v as u8));\n                     } else {\n-                        cx.span_err(sp, \"Non-ascii char literal in bytes!\")\n+                        cx.span_err(expr.span, \"Non-ascii char literal in bytes!\")\n                     }\n                 }\n \n-                _ => cx.span_err(sp, \"Unsupported literal in bytes!\")\n+                _ => cx.span_err(expr.span, \"Unsupported literal in bytes!\")\n             },\n \n-            _ => cx.span_err(sp, \"Non-literal in bytes!\")\n+            _ => cx.span_err(expr.span, \"Non-literal in bytes!\")\n         }\n     }\n "}]}