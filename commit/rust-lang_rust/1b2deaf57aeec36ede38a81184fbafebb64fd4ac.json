{"sha": "1b2deaf57aeec36ede38a81184fbafebb64fd4ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMmRlYWY1N2FlZWMzNmVkZTM4YTgxMTg0ZmJhZmViYjY0ZmQ0YWM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-06T21:15:46Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-05-01T12:28:57Z"}, "message": "Monomorphise force_query_with_job.", "tree": {"sha": "7ad64dd9f2b4c1d3f1709cfade119af13a26657d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad64dd9f2b4c1d3f1709cfade119af13a26657d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b2deaf57aeec36ede38a81184fbafebb64fd4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b2deaf57aeec36ede38a81184fbafebb64fd4ac", "html_url": "https://github.com/rust-lang/rust/commit/1b2deaf57aeec36ede38a81184fbafebb64fd4ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b2deaf57aeec36ede38a81184fbafebb64fd4ac/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0bacc694d7d8175804bb6f690cb846bfa4a9ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0bacc694d7d8175804bb6f690cb846bfa4a9ee", "html_url": "https://github.com/rust-lang/rust/commit/bd0bacc694d7d8175804bb6f690cb846bfa4a9ee"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "37a304cb5071fc772a958c87c78b8508c506498d", "filename": "src/librustc_query_system/query/config.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1b2deaf57aeec36ede38a81184fbafebb64fd4ac/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2deaf57aeec36ede38a81184fbafebb64fd4ac/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs?ref=1b2deaf57aeec36ede38a81184fbafebb64fd4ac", "patch": "@@ -24,6 +24,15 @@ pub trait QueryConfig<CTX> {\n     type Stored: Clone;\n }\n \n+pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n+    pub eval_always: bool,\n+\n+    // Don't use this method to compute query results, instead use the methods on TyCtxt\n+    pub compute: fn(CTX, K) -> V,\n+\n+    pub hash_result: fn(&mut CTX::StableHashingContext, &V) -> Option<Fingerprint>,\n+}\n+\n pub trait QueryAccessors<CTX: QueryContext>: QueryConfig<CTX> {\n     const ANON: bool;\n     const EVAL_ALWAYS: bool;\n@@ -60,6 +69,22 @@ pub trait QueryDescription<CTX: QueryContext>: QueryAccessors<CTX> {\n     }\n }\n \n+pub(crate) trait QueryVtableExt<CTX: QueryContext, K, V> {\n+    const VTABLE: QueryVtable<CTX, K, V>;\n+}\n+\n+impl<CTX, Q> QueryVtableExt<CTX, Q::Key, Q::Value> for Q\n+where\n+    CTX: QueryContext,\n+    Q: QueryDescription<CTX>,\n+{\n+    const VTABLE: QueryVtable<CTX, Q::Key, Q::Value> = QueryVtable {\n+        eval_always: Q::EVAL_ALWAYS,\n+        compute: Q::compute,\n+        hash_result: Q::hash_result,\n+    };\n+}\n+\n impl<CTX: QueryContext, M> QueryDescription<CTX> for M\n where\n     M: QueryAccessors<CTX, Key = DefId>,"}, {"sha": "21cd7ce567a2bbbab20b24bb0f0904b5c275de69", "filename": "src/librustc_query_system/query/plumbing.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1b2deaf57aeec36ede38a81184fbafebb64fd4ac/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2deaf57aeec36ede38a81184fbafebb64fd4ac/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs?ref=1b2deaf57aeec36ede38a81184fbafebb64fd4ac", "patch": "@@ -5,7 +5,7 @@\n use crate::dep_graph::{DepKind, DepNode};\n use crate::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n use crate::query::caches::QueryCache;\n-use crate::query::config::QueryDescription;\n+use crate::query::config::{QueryDescription, QueryVtable, QueryVtableExt};\n use crate::query::job::{QueryInfo, QueryJob, QueryJobId, QueryJobInfo, QueryShardJobId};\n use crate::query::QueryContext;\n \n@@ -406,7 +406,7 @@ where\n     // expensive for some `DepKind`s.\n     if !tcx.dep_graph().is_fully_enabled() {\n         let null_dep_node = DepNode::new_no_params(DepKind::NULL);\n-        return force_query_with_job::<Q, _>(tcx, key, job, null_dep_node).0;\n+        return force_query_with_job(tcx, key, job, null_dep_node, &Q::VTABLE).0;\n     }\n \n     if Q::ANON {\n@@ -455,7 +455,7 @@ where\n         }\n     }\n \n-    let (result, dep_node_index) = force_query_with_job::<Q, _>(tcx, key, job, dep_node);\n+    let (result, dep_node_index) = force_query_with_job(tcx, key, job, dep_node, &Q::VTABLE);\n     tcx.dep_graph().read_index(dep_node_index);\n     result\n }\n@@ -549,14 +549,17 @@ fn incremental_verify_ich<Q, CTX>(\n }\n \n #[inline(always)]\n-fn force_query_with_job<Q, CTX>(\n+fn force_query_with_job<C, CTX>(\n     tcx: CTX,\n-    key: Q::Key,\n-    job: JobOwner<'_, CTX, Q::Cache>,\n+    key: C::Key,\n+    job: JobOwner<'_, CTX, C>,\n     dep_node: DepNode<CTX::DepKind>,\n-) -> (Q::Stored, DepNodeIndex)\n+    query: &QueryVtable<CTX, C::Key, C::Value>,\n+) -> (C::Stored, DepNodeIndex)\n where\n-    Q: QueryDescription<CTX>,\n+    C: QueryCache,\n+    C::Key: Eq + Clone + Debug,\n+    C::Stored: Clone,\n     CTX: QueryContext,\n {\n     // If the following assertion triggers, it can have two reasons:\n@@ -577,16 +580,16 @@ where\n \n     let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n         tcx.start_query(job.id, diagnostics, |tcx| {\n-            if Q::EVAL_ALWAYS {\n+            if query.eval_always {\n                 tcx.dep_graph().with_eval_always_task(\n                     dep_node,\n                     tcx,\n                     key,\n-                    Q::compute,\n-                    Q::hash_result,\n+                    query.compute,\n+                    query.hash_result,\n                 )\n             } else {\n-                tcx.dep_graph().with_task(dep_node, tcx, key, Q::compute, Q::hash_result)\n+                tcx.dep_graph().with_task(dep_node, tcx, key, query.compute, query.hash_result)\n             }\n         })\n     });\n@@ -684,7 +687,7 @@ where\n                 #[cfg(parallel_compiler)]\n                 TryGetJob::JobCompleted(_) => return,\n             };\n-            force_query_with_job::<Q, _>(tcx, key, job, dep_node);\n+            force_query_with_job(tcx, key, job, dep_node, &Q::VTABLE);\n         },\n     );\n }"}]}