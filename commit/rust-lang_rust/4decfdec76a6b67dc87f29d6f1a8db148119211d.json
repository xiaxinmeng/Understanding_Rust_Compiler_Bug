{"sha": "4decfdec76a6b67dc87f29d6f1a8db148119211d", "node_id": "C_kwDOAAsO6NoAKDRkZWNmZGVjNzZhNmI2N2RjODdmMjlkNmYxYThkYjE0ODExOTIxMWQ", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-10T02:31:25Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-26T23:11:58Z"}, "message": "check msrv", "tree": {"sha": "37f8c18623ba62f9888aaa03de5e5fd992336fa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37f8c18623ba62f9888aaa03de5e5fd992336fa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4decfdec76a6b67dc87f29d6f1a8db148119211d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4decfdec76a6b67dc87f29d6f1a8db148119211d", "html_url": "https://github.com/rust-lang/rust/commit/4decfdec76a6b67dc87f29d6f1a8db148119211d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4decfdec76a6b67dc87f29d6f1a8db148119211d/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14212115c4f669d33007d45c2b26623b7879ccc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/14212115c4f669d33007d45c2b26623b7879ccc0", "html_url": "https://github.com/rust-lang/rust/commit/14212115c4f669d33007d45c2b26623b7879ccc0"}], "stats": {"total": 168, "additions": 123, "deletions": 45}, "files": [{"sha": "716038aa5220d460d03443416b257a1c11d291c4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4decfdec76a6b67dc87f29d6f1a8db148119211d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4decfdec76a6b67dc87f29d6f1a8db148119211d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4decfdec76a6b67dc87f29d6f1a8db148119211d", "patch": "@@ -915,7 +915,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n     store.register_late_pass(|| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n     store.register_late_pass(move || Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));\n-    store.register_late_pass(|| Box::new(use_retain::UseRetain));\n+    store.register_late_pass(move || Box::new(use_retain::UseRetain::new(msrv)));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "185201514ad3b2e981acd6e3a85c0cab53b80d62", "filename": "clippy_lints/src/use_retain.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4decfdec76a6b67dc87f29d6f1a8db148119211d/clippy_lints%2Fsrc%2Fuse_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4decfdec76a6b67dc87f29d6f1a8db148119211d/clippy_lints%2Fsrc%2Fuse_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_retain.rs?ref=4decfdec76a6b67dc87f29d6f1a8db148119211d", "patch": "@@ -2,12 +2,14 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{get_parent_expr, match_def_path, paths, SpanlessEq};\n+use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::ExprKind::Assign;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n \n const ACCEPTABLE_METHODS: [&[&str]; 4] = [\n@@ -16,13 +18,13 @@ const ACCEPTABLE_METHODS: [&[&str]; 4] = [\n     &paths::SLICE_INTO,\n     &paths::VEC_DEQUE_ITER,\n ];\n-const ACCEPTABLE_TYPES: [rustc_span::Symbol; 6] = [\n-    sym::BTreeSet,\n-    sym::BTreeMap,\n-    sym::HashSet,\n-    sym::HashMap,\n-    sym::Vec,\n-    sym::VecDeque,\n+const ACCEPTABLE_TYPES: [(rustc_span::Symbol, Option<RustcVersion>); 6] = [\n+    (sym::BTreeSet, Some(msrvs::BTREE_SET_RETAIN)),\n+    (sym::BTreeMap, Some(msrvs::BTREE_MAP_RETAIN)),\n+    (sym::HashSet, Some(msrvs::HASH_SET_RETAIN)),\n+    (sym::HashMap, Some(msrvs::HASH_MAP_RETAIN)),\n+    (sym::Vec, None),\n+    (sym::VecDeque, None),\n ];\n \n declare_clippy_lint! {\n@@ -46,7 +48,19 @@ declare_clippy_lint! {\n     perf,\n     \"`retain()` is simpler and the same functionalitys\"\n }\n-declare_lint_pass!(UseRetain => [USE_RETAIN]);\n+\n+pub struct UseRetain {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl UseRetain {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(UseRetain => [USE_RETAIN]);\n \n impl<'tcx> LateLintPass<'tcx> for UseRetain {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n@@ -57,26 +71,29 @@ impl<'tcx> LateLintPass<'tcx> for UseRetain {\n             && let hir::ExprKind::MethodCall(_, [target_expr], _) = &collect_expr.kind\n             && let Some(collect_def_id) = cx.typeck_results().type_dependent_def_id(collect_expr.hir_id)\n             && match_def_path(cx, collect_def_id, &paths::CORE_ITER_COLLECT) {\n-            check_into_iter(cx, parent_expr, left_expr, target_expr);\n-            check_iter(cx, parent_expr, left_expr, target_expr);\n-            check_to_owned(cx, parent_expr, left_expr, target_expr);\n+            check_into_iter(cx, parent_expr, left_expr, target_expr, self.msrv);\n+            check_iter(cx, parent_expr, left_expr, target_expr, self.msrv);\n+            check_to_owned(cx, parent_expr, left_expr, target_expr, self.msrv);\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n fn check_into_iter(\n     cx: &LateContext<'_>,\n     parent_expr: &hir::Expr<'_>,\n     left_expr: &hir::Expr<'_>,\n     target_expr: &hir::Expr<'_>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if let hir::ExprKind::MethodCall(_, [into_iter_expr, _], _) = &target_expr.kind\n         && let Some(filter_def_id) = cx.typeck_results().type_dependent_def_id(target_expr.hir_id)\n         && match_def_path(cx, filter_def_id, &paths::CORE_ITER_FILTER)\n         && let hir::ExprKind::MethodCall(_, [struct_expr], _) = &into_iter_expr.kind\n         && let Some(into_iter_def_id) = cx.typeck_results().type_dependent_def_id(into_iter_expr.hir_id)\n         && match_def_path(cx, into_iter_def_id, &paths::CORE_ITER_INTO_ITER)\n-        && match_acceptable_type(cx, left_expr)\n+        && match_acceptable_type(cx, left_expr, msrv)\n         && SpanlessEq::new(cx).eq_expr(left_expr, struct_expr) {\n         suggest(cx, parent_expr, left_expr, target_expr);\n     }\n@@ -87,6 +104,7 @@ fn check_iter(\n     parent_expr: &hir::Expr<'_>,\n     left_expr: &hir::Expr<'_>,\n     target_expr: &hir::Expr<'_>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if let hir::ExprKind::MethodCall(_, [filter_expr], _) = &target_expr.kind\n         && let Some(copied_def_id) = cx.typeck_results().type_dependent_def_id(target_expr.hir_id)\n@@ -98,7 +116,7 @@ fn check_iter(\n         && let hir::ExprKind::MethodCall(_, [struct_expr], _) = &iter_expr.kind\n         && let Some(iter_expr_def_id) = cx.typeck_results().type_dependent_def_id(iter_expr.hir_id)\n         && match_acceptable_def_path(cx, iter_expr_def_id)\n-        && match_acceptable_type(cx, left_expr)\n+        && match_acceptable_type(cx, left_expr, msrv)\n         && SpanlessEq::new(cx).eq_expr(left_expr, struct_expr) {\n         suggest(cx, parent_expr, left_expr, filter_expr);\n     }\n@@ -109,8 +127,10 @@ fn check_to_owned(\n     parent_expr: &hir::Expr<'_>,\n     left_expr: &hir::Expr<'_>,\n     target_expr: &hir::Expr<'_>,\n+    msrv: Option<RustcVersion>,\n ) {\n-    if let hir::ExprKind::MethodCall(_, [filter_expr], _) = &target_expr.kind\n+    if meets_msrv(msrv,  msrvs::STRING_RETAIN)\n+        && let hir::ExprKind::MethodCall(_, [filter_expr], _) = &target_expr.kind\n         && let Some(to_owned_def_id) = cx.typeck_results().type_dependent_def_id(target_expr.hir_id)\n         && match_def_path(cx, to_owned_def_id, &paths::TO_OWNED_METHOD)\n         && let hir::ExprKind::MethodCall(_, [chars_expr, _], _) = &filter_expr.kind\n@@ -199,9 +219,10 @@ fn match_acceptable_def_path(cx: &LateContext<'_>, collect_def_id: DefId) -> boo\n         .any(|&method| match_def_path(cx, collect_def_id, method))\n }\n \n-fn match_acceptable_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n+fn match_acceptable_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>, msrv: Option<RustcVersion>) -> bool {\n     let expr_ty = cx.typeck_results().expr_ty(expr).peel_refs();\n-    ACCEPTABLE_TYPES\n-        .iter()\n-        .any(|&ty| is_type_diagnostic_item(cx, expr_ty, ty))\n+    ACCEPTABLE_TYPES.iter().any(|(ty, acceptable_msrv)| {\n+        is_type_diagnostic_item(cx, expr_ty, *ty)\n+            && acceptable_msrv.map_or(true, |acceptable_msrv| meets_msrv(msrv, acceptable_msrv))\n+    })\n }"}, {"sha": "b09c929f76e2267cbc6145d0e95402346a9e0542", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4decfdec76a6b67dc87f29d6f1a8db148119211d/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4decfdec76a6b67dc87f29d6f1a8db148119211d/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=4decfdec76a6b67dc87f29d6f1a8db148119211d", "patch": "@@ -12,7 +12,7 @@ macro_rules! msrv_aliases {\n \n // names may refer to stabilized feature flags or library items\n msrv_aliases! {\n-    1,53,0 { OR_PATTERNS, MANUAL_BITS }\n+    1,53,0 { OR_PATTERNS, MANUAL_BITS, BTREE_MAP_RETAIN, BTREE_SET_RETAIN }\n     1,52,0 { STR_SPLIT_ONCE, REM_EUCLID_CONST }\n     1,51,0 { BORROW_AS_PTR, UNSIGNED_ABS }\n     1,50,0 { BOOL_THEN }\n@@ -30,7 +30,8 @@ msrv_aliases! {\n     1,34,0 { TRY_FROM }\n     1,30,0 { ITERATOR_FIND_MAP, TOOL_ATTRIBUTES }\n     1,28,0 { FROM_BOOL }\n-    1,26,0 { RANGE_INCLUSIVE }\n+    1,26,0 { RANGE_INCLUSIVE, STRING_RETAIN }\n+    1,18,0 { HASH_MAP_RETAIN, HASH_SET_RETAIN }\n     1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST, EXPECT_ERR }\n     1,16,0 { STR_REPEAT }\n     1,24,0 { IS_ASCII_DIGIT }"}, {"sha": "549b8a62c0c50fdc666104f5daf0769fee1f3a15", "filename": "tests/ui/use_retain.fixed", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4decfdec76a6b67dc87f29d6f1a8db148119211d/tests%2Fui%2Fuse_retain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4decfdec76a6b67dc87f29d6f1a8db148119211d/tests%2Fui%2Fuse_retain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_retain.fixed?ref=4decfdec76a6b67dc87f29d6f1a8db148119211d", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::use_retain)]\n #![allow(unused)]\n use std::collections::BTreeMap;\n@@ -15,12 +16,16 @@ fn main() {\n     hash_set_retain();\n     hash_map_retain();\n     string_retain();\n-    vec_queue_retain();\n+    vec_deque_retain();\n     vec_retain();\n+    _msrv_153();\n+    _msrv_126();\n+    _msrv_118();\n }\n \n fn binary_heap_retain() {\n     // NOTE: Do not lint now, because binary_heap_retain is nighyly API.\n+    // And we need to add a test case for msrv if we update this implmention.\n     // https://github.com/rust-lang/rust/issues/71503\n     let mut heap = BinaryHeap::from([1, 2, 3]);\n     heap = heap.into_iter().filter(|x| x % 2 == 0).collect();\n@@ -179,7 +184,7 @@ fn vec_retain() {\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }\n \n-fn vec_queue_retain() {\n+fn vec_deque_retain() {\n     let mut vec_deque = VecDeque::new();\n     vec_deque.extend(1..5);\n \n@@ -210,3 +215,26 @@ fn vec_queue_retain() {\n     bar = foobar.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }\n+\n+fn _msrv_153() {\n+    #![clippy::msrv = \"1.52\"]\n+    let mut btree_map: BTreeMap<i8, i8> = (0..8).map(|x| (x, x * 10)).collect();\n+    btree_map = btree_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n+\n+    let mut btree_set = BTreeSet::from([1, 2, 3, 4, 5, 6]);\n+    btree_set = btree_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n+}\n+\n+fn _msrv_126() {\n+    #![clippy::msrv = \"1.25\"]\n+    let mut s = String::from(\"foobar\");\n+    s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n+}\n+\n+fn _msrv_118() {\n+    #![clippy::msrv = \"1.17\"]\n+    let mut hash_set = HashSet::from([1, 2, 3, 4, 5, 6]);\n+    hash_set = hash_set.into_iter().filter(|x| x % 2 == 0).collect();\n+    let mut hash_map: HashMap<i8, i8> = (0..8).map(|x| (x, x * 10)).collect();\n+    hash_map = hash_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n+}"}, {"sha": "36c4176b8d5f9363bb5d3031b9ef0fec0231b984", "filename": "tests/ui/use_retain.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4decfdec76a6b67dc87f29d6f1a8db148119211d/tests%2Fui%2Fuse_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4decfdec76a6b67dc87f29d6f1a8db148119211d/tests%2Fui%2Fuse_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_retain.rs?ref=4decfdec76a6b67dc87f29d6f1a8db148119211d", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::use_retain)]\n #![allow(unused)]\n use std::collections::BTreeMap;\n@@ -15,12 +16,16 @@ fn main() {\n     hash_set_retain();\n     hash_map_retain();\n     string_retain();\n-    vec_queue_retain();\n+    vec_deque_retain();\n     vec_retain();\n+    _msrv_153();\n+    _msrv_126();\n+    _msrv_118();\n }\n \n fn binary_heap_retain() {\n     // NOTE: Do not lint now, because binary_heap_retain is nighyly API.\n+    // And we need to add a test case for msrv if we update this implmention.\n     // https://github.com/rust-lang/rust/issues/71503\n     let mut heap = BinaryHeap::from([1, 2, 3]);\n     heap = heap.into_iter().filter(|x| x % 2 == 0).collect();\n@@ -185,7 +190,7 @@ fn vec_retain() {\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }\n \n-fn vec_queue_retain() {\n+fn vec_deque_retain() {\n     let mut vec_deque = VecDeque::new();\n     vec_deque.extend(1..5);\n \n@@ -216,3 +221,26 @@ fn vec_queue_retain() {\n     bar = foobar.iter().filter(|&x| x % 2 == 0).cloned().collect();\n     bar = foobar.into_iter().filter(|x| x % 2 == 0).collect();\n }\n+\n+fn _msrv_153() {\n+    #![clippy::msrv = \"1.52\"]\n+    let mut btree_map: BTreeMap<i8, i8> = (0..8).map(|x| (x, x * 10)).collect();\n+    btree_map = btree_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n+\n+    let mut btree_set = BTreeSet::from([1, 2, 3, 4, 5, 6]);\n+    btree_set = btree_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n+}\n+\n+fn _msrv_126() {\n+    #![clippy::msrv = \"1.25\"]\n+    let mut s = String::from(\"foobar\");\n+    s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n+}\n+\n+fn _msrv_118() {\n+    #![clippy::msrv = \"1.17\"]\n+    let mut hash_set = HashSet::from([1, 2, 3, 4, 5, 6]);\n+    hash_set = hash_set.into_iter().filter(|x| x % 2 == 0).collect();\n+    let mut hash_map: HashMap<i8, i8> = (0..8).map(|x| (x, x * 10)).collect();\n+    hash_map = hash_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n+}"}, {"sha": "decd406f22a9bd5a398328fa6d9071df13501884", "filename": "tests/ui/use_retain.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4decfdec76a6b67dc87f29d6f1a8db148119211d/tests%2Fui%2Fuse_retain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4decfdec76a6b67dc87f29d6f1a8db148119211d/tests%2Fui%2Fuse_retain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_retain.stderr?ref=4decfdec76a6b67dc87f29d6f1a8db148119211d", "patch": "@@ -1,19 +1,19 @@\n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:47:5\n+  --> $DIR/use_retain.rs:52:5\n    |\n LL |     btree_map = btree_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_map.retain(|k, _| k % 2 == 0)`\n    |\n    = note: `-D clippy::use-retain` implied by `-D warnings`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:48:5\n+  --> $DIR/use_retain.rs:53:5\n    |\n LL |     btree_map = btree_map.into_iter().filter(|(_, v)| v % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_map.retain(|_, &mut v| v % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:49:5\n+  --> $DIR/use_retain.rs:54:5\n    |\n LL | /     btree_map = btree_map\n LL | |         .into_iter()\n@@ -22,37 +22,37 @@ LL | |         .collect();\n    | |__________________^ help: consider calling `.retain()` instead: `btree_map.retain(|k, &mut v| (k % 2 == 0) && (v % 2 == 0))`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:71:5\n+  --> $DIR/use_retain.rs:76:5\n    |\n LL |     btree_set = btree_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:72:5\n+  --> $DIR/use_retain.rs:77:5\n    |\n LL |     btree_set = btree_set.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:73:5\n+  --> $DIR/use_retain.rs:78:5\n    |\n LL |     btree_set = btree_set.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `btree_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:103:5\n+  --> $DIR/use_retain.rs:108:5\n    |\n LL |     hash_map = hash_map.into_iter().filter(|(k, _)| k % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_map.retain(|k, _| k % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:104:5\n+  --> $DIR/use_retain.rs:109:5\n    |\n LL |     hash_map = hash_map.into_iter().filter(|(_, v)| v % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_map.retain(|_, &mut v| v % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:105:5\n+  --> $DIR/use_retain.rs:110:5\n    |\n LL | /     hash_map = hash_map\n LL | |         .into_iter()\n@@ -61,61 +61,61 @@ LL | |         .collect();\n    | |__________________^ help: consider calling `.retain()` instead: `hash_map.retain(|k, &mut v| (k % 2 == 0) && (v % 2 == 0))`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:126:5\n+  --> $DIR/use_retain.rs:131:5\n    |\n LL |     hash_set = hash_set.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:127:5\n+  --> $DIR/use_retain.rs:132:5\n    |\n LL |     hash_set = hash_set.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:128:5\n+  --> $DIR/use_retain.rs:133:5\n    |\n LL |     hash_set = hash_set.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `hash_set.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:157:5\n+  --> $DIR/use_retain.rs:162:5\n    |\n LL |     s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `s.retain(|c| c != 'o')`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:169:5\n+  --> $DIR/use_retain.rs:174:5\n    |\n LL |     vec = vec.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:170:5\n+  --> $DIR/use_retain.rs:175:5\n    |\n LL |     vec = vec.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:171:5\n+  --> $DIR/use_retain.rs:176:5\n    |\n LL |     vec = vec.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:193:5\n+  --> $DIR/use_retain.rs:198:5\n    |\n LL |     vec_deque = vec_deque.iter().filter(|&x| x % 2 == 0).copied().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec_deque.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:194:5\n+  --> $DIR/use_retain.rs:199:5\n    |\n LL |     vec_deque = vec_deque.iter().filter(|&x| x % 2 == 0).cloned().collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec_deque.retain(|x| x % 2 == 0)`\n \n error: this expression can be written more simply using `.retain()`\n-  --> $DIR/use_retain.rs:195:5\n+  --> $DIR/use_retain.rs:200:5\n    |\n LL |     vec_deque = vec_deque.into_iter().filter(|x| x % 2 == 0).collect();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.retain()` instead: `vec_deque.retain(|x| x % 2 == 0)`"}]}