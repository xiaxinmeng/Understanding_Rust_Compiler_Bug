{"sha": "7885fac7e904568d58eae4ef34239a3c41241aa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ODVmYWM3ZTkwNDU2OGQ1OGVhZTRlZjM0MjM5YTNjNDEyNDFhYTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T22:06:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-02T21:01:53Z"}, "message": "improve error when CTFE does ptr-int-cast; update tests", "tree": {"sha": "32345200550e2dd3744d8b28ab6f920e6bf61f6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32345200550e2dd3744d8b28ab6f920e6bf61f6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7885fac7e904568d58eae4ef34239a3c41241aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7885fac7e904568d58eae4ef34239a3c41241aa8", "html_url": "https://github.com/rust-lang/rust/commit/7885fac7e904568d58eae4ef34239a3c41241aa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7885fac7e904568d58eae4ef34239a3c41241aa8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26c55ec0505e1337780b1ee2bad58dc672714bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/26c55ec0505e1337780b1ee2bad58dc672714bb5", "html_url": "https://github.com/rust-lang/rust/commit/26c55ec0505e1337780b1ee2bad58dc672714bb5"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "54cf56258f9f27a72eaa4bdd7caaa722b545f488", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=7885fac7e904568d58eae4ef34239a3c41241aa8", "patch": "@@ -20,10 +20,10 @@ use rustc_data_structures::fx::FxHashMap;\n use syntax::source_map::{Span, DUMMY_SP};\n \n use crate::interpret::{self,\n-    PlaceTy, MPlaceTy, OpTy, ImmTy, Immediate, Scalar,\n+    PlaceTy, MPlaceTy, OpTy, ImmTy, Immediate, Scalar, Pointer,\n     RawConst, ConstValue,\n     InterpResult, InterpErrorInfo, GlobalId, InterpCx, StackPopCleanup,\n-    Allocation, AllocId, MemoryKind,\n+    Allocation, AllocId, MemoryKind, Memory,\n     snapshot, RefTracking, intern_const_alloc_recursive,\n };\n \n@@ -397,6 +397,15 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         )\n     }\n \n+    fn ptr_to_int(\n+        _mem: &Memory<'mir, 'tcx, Self>,\n+        _ptr: Pointer,\n+    ) -> InterpResult<'tcx, u64> {\n+        Err(\n+            ConstEvalError::NeedsRfc(\"pointer-to-integer cast\".to_string()).into(),\n+        )\n+    }\n+\n     fn binary_ptr_op(\n         _ecx: &InterpCx<'mir, 'tcx, Self>,\n         _bin_op: mir::BinOp,"}, {"sha": "a9794982fe50b5983317e11f6ed81abfb680fdf1", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=7885fac7e904568d58eae4ef34239a3c41241aa8", "patch": "@@ -233,7 +233,6 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         extra: Self::FrameExtra,\n     ) -> InterpResult<'tcx>;\n \n-    #[inline(always)]\n     fn int_to_ptr(\n         _mem: &Memory<'mir, 'tcx, Self>,\n         int: u64,\n@@ -245,11 +244,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         }).into())\n     }\n \n-    #[inline(always)]\n     fn ptr_to_int(\n         _mem: &Memory<'mir, 'tcx, Self>,\n         _ptr: Pointer<Self::PointerTag>,\n-    ) -> InterpResult<'tcx, u64> {\n-        throw_unsup!(ReadPointerAsBytes)\n-    }\n+    ) -> InterpResult<'tcx, u64>;\n }"}, {"sha": "9be1374f85d99af66d4c126e0e9034b2f3793525", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs?ref=7885fac7e904568d58eae4ef34239a3c41241aa8", "patch": "@@ -4,8 +4,8 @@ fn main() {}\n \n // unconst and bad, will thus error in miri\n const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR any use of this\n-// unconst and fine\n-const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n+// unconst and bad, will thus error in miri\n+const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR any use of this\n // unconst and fine\n const Y: usize = unsafe { 42usize as *const i32 as usize + 1 };\n // unconst and bad, will thus error in miri"}, {"sha": "2cba833a74896ad1f128a5a1fa5f69b50ce47f54", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=7885fac7e904568d58eae4ef34239a3c41241aa8", "patch": "@@ -8,13 +8,21 @@ LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n    |\n    = note: `#[deny(const_err)]` on by default\n \n+error: any use of this value will cause an error\n+  --> $DIR/const_raw_ptr_ops.rs:8:27\n+   |\n+LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n+   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                           |\n+   |                           \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+\n error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:12:28\n    |\n LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n-   | ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   | ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^-------\n    |                            |\n-   |                            \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+   |                            \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:16:26\n@@ -32,5 +40,5 @@ LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n    |                          |\n    |                          a memory access tried to interpret some bytes as a pointer\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "ea24578c7dd0cfd28f6937987db69918d647e143", "filename": "src/test/ui/consts/const-eval/issue-52442.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs?ref=7885fac7e904568d58eae4ef34239a3c41241aa8", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     [();  { &loop { break } as *const _ as usize } ];\n     //~^ ERROR casting pointers to integers in constants is unstable\n-    //~| ERROR it is undefined behavior to use this value\n+    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "5bd4979bdb33cf4b15a581195376b8ed04cbee92", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=7885fac7e904568d58eae4ef34239a3c41241aa8", "patch": "@@ -7,13 +7,11 @@ LL |     [();  { &loop { break } as *const _ as usize } ];\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51910\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/issue-52442.rs:2:11\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-52442.rs:2:13\n    |\n LL |     [();  { &loop { break } as *const _ as usize } ];\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9c930221e73e37d5fdcabad40707edc7cf849c9a", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=7885fac7e904568d58eae4ef34239a3c41241aa8", "patch": "@@ -1,15 +1,14 @@\n+\n fn main() {\n     // Make sure match uses the usual pointer comparison code path -- i.e., it should complain\n     // that pointer comparison is disallowed, not that parts of a pointer are accessed as raw\n     // bytes.\n     let _: [u8; 0] = [4; {\n         match &1 as *const i32 as usize {\n             //~^ ERROR casting pointers to integers in constants\n-            //~| NOTE for more information, see\n             //~| ERROR constant contains unimplemented expression type\n-            0 => 42, //~ ERROR constant contains unimplemented expression type\n-            //~^ NOTE \"pointer arithmetic or comparison\" needs an rfc before being allowed\n             //~| ERROR evaluation of constant value failed\n+            0 => 42, //~ ERROR constant contains unimplemented expression type\n             n => n,\n         }\n     }];"}, {"sha": "9bb561f31ebb0a5c8510a748997379fe00453af4", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7885fac7e904568d58eae4ef34239a3c41241aa8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=7885fac7e904568d58eae4ef34239a3c41241aa8", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: casting pointers to integers in constants is unstable\n-  --> $DIR/match-test-ptr-null.rs:6:15\n+  --> $DIR/match-test-ptr-null.rs:7:15\n    |\n LL |         match &1 as *const i32 as usize {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,22 +8,22 @@ LL |         match &1 as *const i32 as usize {\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/match-test-ptr-null.rs:6:15\n+  --> $DIR/match-test-ptr-null.rs:7:15\n    |\n LL |         match &1 as *const i32 as usize {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/match-test-ptr-null.rs:10:13\n+  --> $DIR/match-test-ptr-null.rs:11:13\n    |\n LL |             0 => 42,\n    |             ^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/match-test-ptr-null.rs:10:13\n+  --> $DIR/match-test-ptr-null.rs:7:15\n    |\n-LL |             0 => 42,\n-   |             ^ \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+LL |         match &1 as *const i32 as usize {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n error: aborting due to 4 previous errors\n "}]}