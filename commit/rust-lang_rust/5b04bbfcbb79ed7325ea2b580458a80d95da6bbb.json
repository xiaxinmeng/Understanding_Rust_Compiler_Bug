{"sha": "5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMDRiYmZjYmI3OWVkNzMyNWVhMmI1ODA0NThhODBkOTVkYTZiYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-19T06:59:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-19T06:59:13Z"}, "message": "Auto merge of #75692 - JohnTitor:rollup-8gr04ah, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #75038 (See also X-Link mem::{swap, take, replace})\n - #75049 (docs(marker/copy): provide example for `&T` being `Copy`)\n - #75499 (Fix documentation error)\n - #75554 (Fix clashing_extern_declarations stack overflow for recursive types.)\n - #75646 (Move to intra doc links for keyword documentation)\n - #75652 (Resolve true and false as booleans)\n - #75658 (Don't emit \"is not a logical operator\" error outside of associative expressions)\n - #75665 (Add doc examples coverage)\n - #75685 (Switch to intra-doc links in /src/sys/unix/ext/*.rs)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "54f153779798d43bf66667e385982b6d2f9f9711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54f153779798d43bf66667e385982b6d2f9f9711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "html_url": "https://github.com/rust-lang/rust/commit/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c03c213daf5fe3b52c768b4f145e45d8994d87ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/c03c213daf5fe3b52c768b4f145e45d8994d87ea", "html_url": "https://github.com/rust-lang/rust/commit/c03c213daf5fe3b52c768b4f145e45d8994d87ea"}, {"sha": "07ea340e89a4938a26039bceac6dbc1376978a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ea340e89a4938a26039bceac6dbc1376978a48", "html_url": "https://github.com/rust-lang/rust/commit/07ea340e89a4938a26039bceac6dbc1376978a48"}], "stats": {"total": 1005, "additions": 556, "deletions": 449}, "files": [{"sha": "9326aaf56847c577f59e2e86b299f9c67bf6082f", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -291,6 +291,7 @@ pub trait StructuralEq {\n ///\n /// ```\n /// # #[allow(dead_code)]\n+/// #[derive(Copy, Clone)]\n /// struct Point {\n ///    x: i32,\n ///    y: i32,\n@@ -315,6 +316,20 @@ pub trait StructuralEq {\n /// the trait `Copy` may not be implemented for this type; field `points` does not implement `Copy`\n /// ```\n ///\n+/// Shared references (`&T`) are also `Copy`, so a type can be `Copy`, even when it holds\n+/// shared references of types `T` that are *not* `Copy`. Consider the following struct,\n+/// which can implement `Copy`, because it only holds a *shared reference* to our non-`Copy`\n+/// type `PointList` from above:\n+///\n+/// ```\n+/// # #![allow(dead_code)]\n+/// # struct PointList;\n+/// #[derive(Copy, Clone)]\n+/// struct PointListWrapper<'a> {\n+///     point_list_ref: &'a PointList,\n+/// }\n+/// ```\n+///\n /// ## When *can't* my type be `Copy`?\n ///\n /// Some types can't be copied safely. For example, copying `&mut T` would create an aliased"}, {"sha": "9107c570a897097bf542773ae5c58c402a020805", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -670,6 +670,9 @@ pub unsafe fn uninitialized<T>() -> T {\n \n /// Swaps the values at two mutable locations, without deinitializing either one.\n ///\n+/// * If you want to swap with a default or dummy value, see [`take`].\n+/// * If you want to swap with a passed value, returning the old value, see [`replace`].\n+///\n /// # Examples\n ///\n /// ```\n@@ -683,6 +686,9 @@ pub unsafe fn uninitialized<T>() -> T {\n /// assert_eq!(42, x);\n /// assert_eq!(5, y);\n /// ```\n+///\n+/// [`replace`]: fn.replace.html\n+/// [`take`]: fn.take.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n@@ -695,6 +701,9 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n \n /// Replaces `dest` with the default value of `T`, returning the previous `dest` value.\n ///\n+/// * If you want to replace the values of two variables, see [`swap`].\n+/// * If you want to replace with a passed value instead of the default value, see [`replace`].\n+///\n /// # Examples\n ///\n /// A simple example:\n@@ -747,6 +756,8 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// ```\n ///\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n+/// [`replace`]: fn.replace.html\n+/// [`swap`]: fn.swap.html\n #[inline]\n #[stable(feature = \"mem_take\", since = \"1.40.0\")]\n pub fn take<T: Default>(dest: &mut T) -> T {\n@@ -757,6 +768,9 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n ///\n /// Neither value is dropped.\n ///\n+/// * If you want to replace the values of two variables, see [`swap`].\n+/// * If you want to replace with a default value, see [`take`].\n+///\n /// # Examples\n ///\n /// A simple example:\n@@ -810,6 +824,8 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n /// ```\n ///\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n+/// [`swap`]: fn.swap.html\n+/// [`take`]: fn.take.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]"}, {"sha": "4705c984bd426ffa2f6421cc19640eede2816b87", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -2031,7 +2031,7 @@ mod traits {\n     /// # Panics\n     ///\n     /// Panics if `begin` does not point to the starting byte offset of\n-    /// a character (as defined by `is_char_boundary`), or if `begin >= len`.\n+    /// a character (as defined by `is_char_boundary`), or if `begin > len`.\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {\n         type Output = str;"}, {"sha": "af25c39fccfd0264a488a96303368019458e88b3", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -98,7 +98,6 @@ mod as_keyword {}\n /// [Reference on \"break expression\"]: ../reference/expressions/loop-expr.html#break-expressions\n /// [Reference on \"break and loop values\"]:\n /// ../reference/expressions/loop-expr.html#break-and-loop-values\n-///\n mod break_keyword {}\n \n #[doc(keyword = \"const\")]\n@@ -336,7 +335,6 @@ mod else_keyword {}\n /// For more information, take a look at the [Rust Book] or the [Reference]\n ///\n /// [ADT]: https://en.wikipedia.org/wiki/Algebraic_data_type\n-/// [`Option`]: option/enum.Option.html\n /// [Rust Book]: ../book/ch06-01-defining-an-enum.html\n /// [Reference]: ../reference/items/enumerations.html\n mod enum_keyword {}\n@@ -534,7 +532,6 @@ mod fn_keyword {}\n /// [`in`]: keyword.in.html\n /// [`impl`]: keyword.impl.html\n /// [higher-ranked trait bounds]: ../reference/trait-bounds.html#higher-ranked-trait-bounds\n-/// [`IntoIterator`]: iter/trait.IntoIterator.html\n /// [Rust book]:\n /// ../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n /// [Reference]: ../reference/expressions/loop-expr.html#iterator-loops\n@@ -993,7 +990,6 @@ mod mod_keyword {}\n /// For more information on the `move` keyword, see the [closure]'s section\n /// of the Rust book or the [threads] section\n ///\n-/// [`Fn` trait]: ../std/ops/trait.Fn.html\n /// [closure]: ../book/ch13-01-closures.html\n /// [threads]: ../book/ch16-01-threads.html#using-move-closures-with-threads\n mod move_keyword {}\n@@ -1413,9 +1409,7 @@ mod self_upper_keyword {}\n /// [`extern`]: keyword.extern.html\n /// [`mut`]: keyword.mut.html\n /// [`unsafe`]: keyword.unsafe.html\n-/// [`drop`]: mem/fn.drop.html\n-/// [`Sync`]: marker/trait.Sync.html\n-/// [`RefCell`]: cell/struct.RefCell.html\n+/// [`RefCell`]: cell::RefCell\n /// [Reference]: ../reference/items/static-items.html\n mod static_keyword {}\n \n@@ -1522,7 +1516,7 @@ mod static_keyword {}\n /// For more information on structs, take a look at the [Rust Book][book] or the\n /// [Reference][reference].\n ///\n-/// [`PhantomData`]: marker/struct.PhantomData.html\n+/// [`PhantomData`]: marker::PhantomData\n /// [book]: ../book/ch05-01-defining-structs.html\n /// [reference]: ../reference/items/structs.html\n mod struct_keyword {}\n@@ -1733,8 +1727,6 @@ mod super_keyword {}\n /// [`for`]: keyword.for.html\n /// [`impl`]: keyword.impl.html\n /// [`unsafe`]: keyword.unsafe.html\n-/// [`Send`]: marker/trait.Send.html\n-/// [`Sync`]: marker/trait.Sync.html\n /// [Ref-Traits]: ../reference/items/traits.html\n /// [Ref-Trait-Objects]: ../reference/types/trait-object.html\n mod trait_keyword {}\n@@ -1764,7 +1756,6 @@ mod trait_keyword {}\n /// [`while`]: keyword.while.html\n /// [`match`]: ../reference/expressions/match-expr.html#match-guards\n /// [`false`]: keyword.false.html\n-/// [`bool`]: primitive.bool.html\n mod true_keyword {}\n \n #[doc(keyword = \"type\")]\n@@ -1986,9 +1977,6 @@ mod type_keyword {}\n /// [`static`]: keyword.static.html\n /// [`union`]: keyword.union.html\n /// [`impl`]: keyword.impl.html\n-/// [Send]: marker/trait.Send.html\n-/// [Sync]: marker/trait.Sync.html\n-/// [`Vec::set_len`]: vec/struct.Vec.html#method.set_len\n /// [raw pointers]: ../reference/types/pointer.html\n /// [memory safety]: ../book/ch19-01-unsafe-rust.html\n /// [Rustnomicon]: ../nomicon/index.html\n@@ -2178,7 +2166,7 @@ mod where_keyword {}\n ///\n /// It is available for use in stable rust from version 1.39 onwards.\n ///\n-/// [`Future`]: ./future/trait.Future.html\n+/// [`Future`]: future::Future\n /// [async book]: https://rust-lang.github.io/async-book/\n mod async_keyword {}\n \n@@ -2197,7 +2185,7 @@ mod async_keyword {}\n ///\n /// It is available for use in stable rust from version 1.39 onwards.\n ///\n-/// [`Future`]: ./future/trait.Future.html\n+/// [`Future`]: future::Future\n /// [async book]: https://rust-lang.github.io/async-book/\n mod await_keyword {}\n "}, {"sha": "b590a0280d1382e2888358c503cd01a76f2f95d8", "filename": "library/std/src/sys/unix/ext/fs.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -9,9 +9,7 @@ use crate::sys;\n use crate::sys::platform::fs::MetadataExt as UnixMetadataExt;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n \n-/// Unix-specific extensions to [`File`].\n-///\n-/// [`File`]: ../../../../std/fs/struct.File.html\n+/// Unix-specific extensions to [`fs::File`].\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Reads a number of bytes starting from a given offset.\n@@ -55,19 +53,18 @@ pub trait FileExt {\n     ///\n     /// The current file cursor is not affected by this function.\n     ///\n-    /// Similar to [`Read::read_exact`] but uses [`read_at`] instead of `read`.\n+    /// Similar to [`io::Read::read_exact`] but uses [`read_at`] instead of `read`.\n     ///\n-    /// [`Read::read_exact`]: ../../../../std/io/trait.Read.html#method.read_exact\n-    /// [`read_at`]: #tymethod.read_at\n+    /// [`read_at`]: FileExt::read_at\n     ///\n     /// # Errors\n     ///\n     /// If this function encounters an error of the kind\n-    /// [`ErrorKind::Interrupted`] then the error is ignored and the operation\n+    /// [`io::ErrorKind::Interrupted`] then the error is ignored and the operation\n     /// will continue.\n     ///\n     /// If this function encounters an \"end of file\" before completely filling\n-    /// the buffer, it returns an error of the kind [`ErrorKind::UnexpectedEof`].\n+    /// the buffer, it returns an error of the kind [`io::ErrorKind::UnexpectedEof`].\n     /// The contents of `buf` are unspecified in this case.\n     ///\n     /// If any other read error is encountered then this function immediately\n@@ -77,9 +74,6 @@ pub trait FileExt {\n     /// has read, but it will never read more than would be necessary to\n     /// completely fill the buffer.\n     ///\n-    /// [`ErrorKind::Interrupted`]: ../../../../std/io/enum.ErrorKind.html#variant.Interrupted\n-    /// [`ErrorKind::UnexpectedEof`]: ../../../../std/io/enum.ErrorKind.html#variant.UnexpectedEof\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -161,19 +155,18 @@ pub trait FileExt {\n     /// The current file cursor is not affected by this function.\n     ///\n     /// This method will continuously call [`write_at`] until there is no more data\n-    /// to be written or an error of non-[`ErrorKind::Interrupted`] kind is\n+    /// to be written or an error of non-[`io::ErrorKind::Interrupted`] kind is\n     /// returned. This method will not return until the entire buffer has been\n     /// successfully written or such an error occurs. The first error that is\n-    /// not of [`ErrorKind::Interrupted`] kind generated from this method will be\n+    /// not of [`io::ErrorKind::Interrupted`] kind generated from this method will be\n     /// returned.\n     ///\n     /// # Errors\n     ///\n     /// This function will return the first error of\n-    /// non-[`ErrorKind::Interrupted`] kind that [`write_at`] returns.\n+    /// non-[`io::ErrorKind::Interrupted`] kind that [`write_at`] returns.\n     ///\n-    /// [`ErrorKind::Interrupted`]: ../../../../std/io/enum.ErrorKind.html#variant.Interrupted\n-    /// [`write_at`]: #tymethod.write_at\n+    /// [`write_at`]: FileExt::write_at\n     ///\n     /// # Examples\n     ///\n@@ -223,8 +216,6 @@ impl FileExt for fs::File {\n }\n \n /// Unix-specific extensions to [`fs::Permissions`].\n-///\n-/// [`fs::Permissions`]: ../../../../std/fs/struct.Permissions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait PermissionsExt {\n     /// Returns the underlying raw `st_mode` bits that contain the standard\n@@ -302,8 +293,6 @@ impl PermissionsExt for Permissions {\n }\n \n /// Unix-specific extensions to [`fs::OpenOptions`].\n-///\n-/// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n@@ -372,8 +361,6 @@ impl OpenOptionsExt for OpenOptions {\n }\n \n /// Unix-specific extensions to [`fs::Metadata`].\n-///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Returns the ID of the device containing the file.\n@@ -535,7 +522,7 @@ pub trait MetadataExt {\n     fn atime(&self) -> i64;\n     /// Returns the last access time of the file, in nanoseconds since [`atime`].\n     ///\n-    /// [`atime`]: #tymethod.atime\n+    /// [`atime`]: MetadataExt::atime\n     ///\n     /// # Examples\n     ///\n@@ -571,7 +558,7 @@ pub trait MetadataExt {\n     fn mtime(&self) -> i64;\n     /// Returns the last modification time of the file, in nanoseconds since [`mtime`].\n     ///\n-    /// [`mtime`]: #tymethod.mtime\n+    /// [`mtime`]: MetadataExt::mtime\n     ///\n     /// # Examples\n     ///\n@@ -607,7 +594,7 @@ pub trait MetadataExt {\n     fn ctime(&self) -> i64;\n     /// Returns the last status change time of the file, in nanoseconds since [`ctime`].\n     ///\n-    /// [`ctime`]: #tymethod.ctime\n+    /// [`ctime`]: MetadataExt::ctime\n     ///\n     /// # Examples\n     ///\n@@ -714,12 +701,10 @@ impl MetadataExt for fs::Metadata {\n     }\n }\n \n-/// Unix-specific extensions for [`FileType`].\n+/// Unix-specific extensions for [`fs::FileType`].\n ///\n /// Adds support for special Unix file types such as block/character devices,\n /// pipes, and sockets.\n-///\n-/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns `true` if this file type is a block device.\n@@ -813,8 +798,6 @@ impl FileTypeExt for fs::FileType {\n }\n \n /// Unix-specific extension methods for [`fs::DirEntry`].\n-///\n-/// [`fs::DirEntry`]: ../../../../std/fs/struct.DirEntry.html\n #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n pub trait DirEntryExt {\n     /// Returns the underlying `d_ino` field in the contained `dirent`\n@@ -875,8 +858,6 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n }\n \n /// Unix-specific extensions to [`fs::DirBuilder`].\n-///\n-/// [`fs::DirBuilder`]: ../../../../std/fs/struct.DirBuilder.html\n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to"}, {"sha": "55803ddfc43232209238a246ac65cafd5eb5313f", "filename": "library/std/src/sys/unix/ext/net.rs", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -408,10 +408,7 @@ impl UnixStream {\n     /// indefinitely. An [`Err`] is returned if the zero [`Duration`] is passed to this\n     /// method.\n     ///\n-    /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`Err`]: ../../../../std/result/enum.Result.html#variant.Err\n-    /// [`read`]: ../../../../std/io/trait.Read.html#tymethod.read\n-    /// [`Duration`]: ../../../../std/time/struct.Duration.html\n+    /// [`read`]: io::Read::read\n     ///\n     /// # Examples\n     ///\n@@ -453,10 +450,7 @@ impl UnixStream {\n     /// indefinitely. An [`Err`] is returned if the zero [`Duration`] is\n     /// passed to this method.\n     ///\n-    /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`Err`]: ../../../../std/result/enum.Result.html#variant.Err\n-    /// [`write`]: ../../../../std/io/trait.Write.html#tymethod.write\n-    /// [`Duration`]: ../../../../std/time/struct.Duration.html\n+    /// [`read`]: io::Read::read\n     ///\n     /// # Examples\n     ///\n@@ -581,8 +575,6 @@ impl UnixStream {\n     /// specified portions to immediately return with an appropriate value\n     /// (see the documentation of [`Shutdown`]).\n     ///\n-    /// [`Shutdown`]: ../../../../std/net/enum.Shutdown.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -852,7 +844,7 @@ impl UnixListener {\n     /// is established. When established, the corresponding [`UnixStream`] and\n     /// the remote peer's address will be returned.\n     ///\n-    /// [`UnixStream`]: ../../../../std/os/unix/net/struct.UnixStream.html\n+    /// [`UnixStream`]: crate::os::unix::net::UnixStream\n     ///\n     /// # Examples\n     ///\n@@ -937,8 +929,6 @@ impl UnixListener {\n     ///     Ok(())\n     /// }\n     /// ```\n-    ///\n-    /// [`io::ErrorKind::WouldBlock`]: ../../../io/enum.ErrorKind.html#variant.WouldBlock\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n@@ -973,9 +963,6 @@ impl UnixListener {\n     /// The iterator will never return [`None`] and will also not yield the\n     /// peer's [`SocketAddr`] structure.\n     ///\n-    /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`SocketAddr`]: struct.SocketAddr.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -1043,9 +1030,6 @@ impl<'a> IntoIterator for &'a UnixListener {\n ///\n /// It will never return [`None`].\n ///\n-/// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-/// [`UnixListener`]: struct.UnixListener.html\n-///\n /// # Examples\n ///\n /// ```no_run\n@@ -1205,9 +1189,9 @@ impl UnixDatagram {\n     /// The [`send`] method may be used to send data to the specified address.\n     /// [`recv`] and [`recv_from`] will only receive data from that address.\n     ///\n-    /// [`send`]: #method.send\n-    /// [`recv`]: #method.recv\n-    /// [`recv_from`]: #method.recv_from\n+    /// [`send`]: UnixDatagram::send\n+    /// [`recv`]: UnixDatagram::recv\n+    /// [`recv_from`]: UnixDatagram::recv_from\n     ///\n     /// # Examples\n     ///\n@@ -1284,7 +1268,7 @@ impl UnixDatagram {\n     ///\n     /// The [`connect`] method will connect the socket to a peer.\n     ///\n-    /// [`connect`]: #method.connect\n+    /// [`connect`]: UnixDatagram::connect\n     ///\n     /// # Examples\n     ///\n@@ -1432,11 +1416,8 @@ impl UnixDatagram {\n     /// block indefinitely. An [`Err`] is returned if the zero [`Duration`]\n     /// is passed to this method.\n     ///\n-    /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`Err`]: ../../../../std/result/enum.Result.html#variant.Err\n-    /// [`recv`]: #method.recv\n-    /// [`recv_from`]: #method.recv_from\n-    /// [`Duration`]: ../../../../std/time/struct.Duration.html\n+    /// [`recv`]: UnixDatagram::recv\n+    /// [`recv_from`]: UnixDatagram::recv_from\n     ///\n     /// # Examples\n     ///\n@@ -1479,10 +1460,8 @@ impl UnixDatagram {\n     /// block indefinitely. An [`Err`] is returned if the zero [`Duration`] is passed to this\n     /// method.\n     ///\n-    /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`send`]: #method.send\n-    /// [`send_to`]: #method.send_to\n-    /// [`Duration`]: ../../../../std/time/struct.Duration.html\n+    /// [`send`]: UnixDatagram::send\n+    /// [`send_to`]: UnixDatagram::send_to\n     ///\n     /// # Examples\n     ///\n@@ -1605,8 +1584,6 @@ impl UnixDatagram {\n     /// specified portions to immediately return with an appropriate value\n     /// (see the documentation of [`Shutdown`]).\n     ///\n-    /// [`Shutdown`]: ../../../../std/net/enum.Shutdown.html\n-    ///\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::net::Shutdown;"}, {"sha": "82527c40e91382f8c6a7c2add76801fd1c46a20c", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -10,8 +10,6 @@ use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n /// Unix-specific extensions to the [`process::Command`] builder.\n-///\n-/// [`process::Command`]: ../../../../std/process/struct.Command.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait CommandExt {\n     /// Sets the child process's user ID. This translates to a\n@@ -65,7 +63,7 @@ pub trait CommandExt {\n     /// This method is stable and usable, but it should be unsafe. To fix\n     /// that, it got deprecated in favor of the unsafe [`pre_exec`].\n     ///\n-    /// [`pre_exec`]: #tymethod.pre_exec\n+    /// [`pre_exec`]: CommandExt::pre_exec\n     #[stable(feature = \"process_exec\", since = \"1.15.0\")]\n     #[rustc_deprecated(since = \"1.37.0\", reason = \"should be unsafe, use `pre_exec` instead\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n@@ -94,8 +92,6 @@ pub trait CommandExt {\n     /// a new child. Like spawn, however, the default behavior for the stdio\n     /// descriptors will be to inherited from the current process.\n     ///\n-    /// [`process::exit`]: ../../../process/fn.exit.html\n-    ///\n     /// # Notes\n     ///\n     /// The process may be in a \"broken state\" if this function returns in\n@@ -151,8 +147,6 @@ impl CommandExt for process::Command {\n }\n \n /// Unix-specific extensions to [`process::ExitStatus`].\n-///\n-/// [`process::ExitStatus`]: ../../../../std/process/struct.ExitStatus.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of"}, {"sha": "7221da1a9a7bbc998b891b43bb8d7fbe82ed37f0", "filename": "library/std/src/sys/unix/ext/thread.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fthread.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -11,9 +11,7 @@ use crate::thread::JoinHandle;\n #[allow(deprecated)]\n pub type RawPthread = pthread_t;\n \n-/// Unix-specific extensions to [`thread::JoinHandle`].\n-///\n-/// [`thread::JoinHandle`]: ../../../../std/thread/struct.JoinHandle.html\n+/// Unix-specific extensions to [`JoinHandle`].\n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n pub trait JoinHandleExt {\n     /// Extracts the raw pthread_t without taking ownership"}, {"sha": "b337bf0a3f9226f7fecb3ccdfc4375a4791fd1b3", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 132, "deletions": 102, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -29,6 +29,7 @@ use rustc_ast::visit::{FnCtxt, FnKind};\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_feature::{deprecated_attributes, AttributeGate, AttributeTemplate, AttributeType};\n use rustc_feature::{GateIssue, Stability};\n@@ -2153,123 +2154,152 @@ impl ClashingExternDeclarations {\n         b: Ty<'tcx>,\n         ckind: CItemKind,\n     ) -> bool {\n-        debug!(\"structurally_same_type(cx, a = {:?}, b = {:?})\", a, b);\n-        let tcx = cx.tcx;\n-        if a == b || rustc_middle::ty::TyS::same_type(a, b) {\n-            // All nominally-same types are structurally same, too.\n-            true\n-        } else {\n-            // Do a full, depth-first comparison between the two.\n-            use rustc_middle::ty::TyKind::*;\n-            let a_kind = &a.kind;\n-            let b_kind = &b.kind;\n-\n-            let compare_layouts = |a, b| -> bool {\n-                let a_layout = &cx.layout_of(a).unwrap().layout.abi;\n-                let b_layout = &cx.layout_of(b).unwrap().layout.abi;\n-                debug!(\"{:?} == {:?} = {}\", a_layout, b_layout, a_layout == b_layout);\n-                a_layout == b_layout\n-            };\n+        fn structurally_same_type_impl<'tcx>(\n+            seen_types: &mut FxHashSet<(Ty<'tcx>, Ty<'tcx>)>,\n+            cx: &LateContext<'tcx>,\n+            a: Ty<'tcx>,\n+            b: Ty<'tcx>,\n+            ckind: CItemKind,\n+        ) -> bool {\n+            debug!(\"structurally_same_type_impl(cx, a = {:?}, b = {:?})\", a, b);\n+            if !seen_types.insert((a, b)) {\n+                // We've encountered a cycle. There's no point going any further -- the types are\n+                // structurally the same.\n+                return true;\n+            }\n+            let tcx = cx.tcx;\n+            if a == b || rustc_middle::ty::TyS::same_type(a, b) {\n+                // All nominally-same types are structurally same, too.\n+                true\n+            } else {\n+                // Do a full, depth-first comparison between the two.\n+                use rustc_middle::ty::TyKind::*;\n+                let a_kind = &a.kind;\n+                let b_kind = &b.kind;\n+\n+                let compare_layouts = |a, b| -> bool {\n+                    let a_layout = &cx.layout_of(a).unwrap().layout.abi;\n+                    let b_layout = &cx.layout_of(b).unwrap().layout.abi;\n+                    debug!(\"{:?} == {:?} = {}\", a_layout, b_layout, a_layout == b_layout);\n+                    a_layout == b_layout\n+                };\n+\n+                #[allow(rustc::usage_of_ty_tykind)]\n+                let is_primitive_or_pointer = |kind: &ty::TyKind<'_>| {\n+                    kind.is_primitive() || matches!(kind, RawPtr(..) | Ref(..))\n+                };\n \n-            #[allow(rustc::usage_of_ty_tykind)]\n-            let is_primitive_or_pointer =\n-                |kind: &ty::TyKind<'_>| kind.is_primitive() || matches!(kind, RawPtr(..));\n-\n-            match (a_kind, b_kind) {\n-                (Adt(_, a_substs), Adt(_, b_substs)) => {\n-                    let a = a.subst(cx.tcx, a_substs);\n-                    let b = b.subst(cx.tcx, b_substs);\n-                    debug!(\"Comparing {:?} and {:?}\", a, b);\n-\n-                    if let (Adt(a_def, ..), Adt(b_def, ..)) = (&a.kind, &b.kind) {\n-                        // Grab a flattened representation of all fields.\n-                        let a_fields = a_def.variants.iter().flat_map(|v| v.fields.iter());\n-                        let b_fields = b_def.variants.iter().flat_map(|v| v.fields.iter());\n-                        compare_layouts(a, b)\n+                ensure_sufficient_stack(|| {\n+                    match (a_kind, b_kind) {\n+                        (Adt(a_def, a_substs), Adt(b_def, b_substs)) => {\n+                            let a = a.subst(cx.tcx, a_substs);\n+                            let b = b.subst(cx.tcx, b_substs);\n+                            debug!(\"Comparing {:?} and {:?}\", a, b);\n+\n+                            // Grab a flattened representation of all fields.\n+                            let a_fields = a_def.variants.iter().flat_map(|v| v.fields.iter());\n+                            let b_fields = b_def.variants.iter().flat_map(|v| v.fields.iter());\n+                            compare_layouts(a, b)\n                             && a_fields.eq_by(\n                                 b_fields,\n                                 |&ty::FieldDef { did: a_did, .. },\n                                  &ty::FieldDef { did: b_did, .. }| {\n-                                    Self::structurally_same_type(\n+                                    structurally_same_type_impl(\n+                                        seen_types,\n                                         cx,\n                                         tcx.type_of(a_did),\n                                         tcx.type_of(b_did),\n                                         ckind,\n                                     )\n                                 },\n                             )\n-                    } else {\n-                        unreachable!()\n-                    }\n-                }\n-                (Array(a_ty, a_const), Array(b_ty, b_const)) => {\n-                    // For arrays, we also check the constness of the type.\n-                    a_const.val == b_const.val\n-                        && Self::structurally_same_type(cx, a_const.ty, b_const.ty, ckind)\n-                        && Self::structurally_same_type(cx, a_ty, b_ty, ckind)\n-                }\n-                (Slice(a_ty), Slice(b_ty)) => Self::structurally_same_type(cx, a_ty, b_ty, ckind),\n-                (RawPtr(a_tymut), RawPtr(b_tymut)) => {\n-                    a_tymut.mutbl == b_tymut.mutbl\n-                        && Self::structurally_same_type(cx, &a_tymut.ty, &b_tymut.ty, ckind)\n-                }\n-                (Ref(_a_region, a_ty, a_mut), Ref(_b_region, b_ty, b_mut)) => {\n-                    // For structural sameness, we don't need the region to be same.\n-                    a_mut == b_mut && Self::structurally_same_type(cx, a_ty, b_ty, ckind)\n-                }\n-                (FnDef(..), FnDef(..)) => {\n-                    let a_poly_sig = a.fn_sig(tcx);\n-                    let b_poly_sig = b.fn_sig(tcx);\n-\n-                    // As we don't compare regions, skip_binder is fine.\n-                    let a_sig = a_poly_sig.skip_binder();\n-                    let b_sig = b_poly_sig.skip_binder();\n-\n-                    (a_sig.abi, a_sig.unsafety, a_sig.c_variadic)\n-                        == (b_sig.abi, b_sig.unsafety, b_sig.c_variadic)\n-                        && a_sig.inputs().iter().eq_by(b_sig.inputs().iter(), |a, b| {\n-                            Self::structurally_same_type(cx, a, b, ckind)\n-                        })\n-                        && Self::structurally_same_type(cx, a_sig.output(), b_sig.output(), ckind)\n-                }\n-                (Tuple(a_substs), Tuple(b_substs)) => {\n-                    a_substs.types().eq_by(b_substs.types(), |a_ty, b_ty| {\n-                        Self::structurally_same_type(cx, a_ty, b_ty, ckind)\n-                    })\n-                }\n-                // For these, it's not quite as easy to define structural-sameness quite so easily.\n-                // For the purposes of this lint, take the conservative approach and mark them as\n-                // not structurally same.\n-                (Dynamic(..), Dynamic(..))\n-                | (Error(..), Error(..))\n-                | (Closure(..), Closure(..))\n-                | (Generator(..), Generator(..))\n-                | (GeneratorWitness(..), GeneratorWitness(..))\n-                | (Projection(..), Projection(..))\n-                | (Opaque(..), Opaque(..)) => false,\n-\n-                // These definitely should have been caught above.\n-                (Bool, Bool) | (Char, Char) | (Never, Never) | (Str, Str) => unreachable!(),\n-\n-                // An Adt and a primitive type. This can be FFI-safe is the ADT is an enum with a\n-                // non-null field.\n-                (Adt(..), other_kind) | (other_kind, Adt(..))\n-                    if is_primitive_or_pointer(other_kind) =>\n-                {\n-                    let (primitive, adt) =\n-                        if is_primitive_or_pointer(&a.kind) { (a, b) } else { (b, a) };\n-                    if let Some(ty) = crate::types::repr_nullable_ptr(cx, adt, ckind) {\n-                        ty == primitive\n-                    } else {\n-                        compare_layouts(a, b)\n+                        }\n+                        (Array(a_ty, a_const), Array(b_ty, b_const)) => {\n+                            // For arrays, we also check the constness of the type.\n+                            a_const.val == b_const.val\n+                                && structurally_same_type_impl(seen_types, cx, a_ty, b_ty, ckind)\n+                        }\n+                        (Slice(a_ty), Slice(b_ty)) => {\n+                            structurally_same_type_impl(seen_types, cx, a_ty, b_ty, ckind)\n+                        }\n+                        (RawPtr(a_tymut), RawPtr(b_tymut)) => {\n+                            a_tymut.mutbl == b_tymut.mutbl\n+                                && structurally_same_type_impl(\n+                                    seen_types,\n+                                    cx,\n+                                    &a_tymut.ty,\n+                                    &b_tymut.ty,\n+                                    ckind,\n+                                )\n+                        }\n+                        (Ref(_a_region, a_ty, a_mut), Ref(_b_region, b_ty, b_mut)) => {\n+                            // For structural sameness, we don't need the region to be same.\n+                            a_mut == b_mut\n+                                && structurally_same_type_impl(seen_types, cx, a_ty, b_ty, ckind)\n+                        }\n+                        (FnDef(..), FnDef(..)) => {\n+                            let a_poly_sig = a.fn_sig(tcx);\n+                            let b_poly_sig = b.fn_sig(tcx);\n+\n+                            // As we don't compare regions, skip_binder is fine.\n+                            let a_sig = a_poly_sig.skip_binder();\n+                            let b_sig = b_poly_sig.skip_binder();\n+\n+                            (a_sig.abi, a_sig.unsafety, a_sig.c_variadic)\n+                                == (b_sig.abi, b_sig.unsafety, b_sig.c_variadic)\n+                                && a_sig.inputs().iter().eq_by(b_sig.inputs().iter(), |a, b| {\n+                                    structurally_same_type_impl(seen_types, cx, a, b, ckind)\n+                                })\n+                                && structurally_same_type_impl(\n+                                    seen_types,\n+                                    cx,\n+                                    a_sig.output(),\n+                                    b_sig.output(),\n+                                    ckind,\n+                                )\n+                        }\n+                        (Tuple(a_substs), Tuple(b_substs)) => {\n+                            a_substs.types().eq_by(b_substs.types(), |a_ty, b_ty| {\n+                                structurally_same_type_impl(seen_types, cx, a_ty, b_ty, ckind)\n+                            })\n+                        }\n+                        // For these, it's not quite as easy to define structural-sameness quite so easily.\n+                        // For the purposes of this lint, take the conservative approach and mark them as\n+                        // not structurally same.\n+                        (Dynamic(..), Dynamic(..))\n+                        | (Error(..), Error(..))\n+                        | (Closure(..), Closure(..))\n+                        | (Generator(..), Generator(..))\n+                        | (GeneratorWitness(..), GeneratorWitness(..))\n+                        | (Projection(..), Projection(..))\n+                        | (Opaque(..), Opaque(..)) => false,\n+\n+                        // These definitely should have been caught above.\n+                        (Bool, Bool) | (Char, Char) | (Never, Never) | (Str, Str) => unreachable!(),\n+\n+                        // An Adt and a primitive or pointer type. This can be FFI-safe if non-null\n+                        // enum layout optimisation is being applied.\n+                        (Adt(..), other_kind) | (other_kind, Adt(..))\n+                            if is_primitive_or_pointer(other_kind) =>\n+                        {\n+                            let (primitive, adt) =\n+                                if is_primitive_or_pointer(&a.kind) { (a, b) } else { (b, a) };\n+                            if let Some(ty) = crate::types::repr_nullable_ptr(cx, adt, ckind) {\n+                                ty == primitive\n+                            } else {\n+                                compare_layouts(a, b)\n+                            }\n+                        }\n+                        // Otherwise, just compare the layouts. This may fail to lint for some\n+                        // incompatible types, but at the very least, will stop reads into\n+                        // uninitialised memory.\n+                        _ => compare_layouts(a, b),\n                     }\n-                }\n-                // Otherwise, just compare the layouts. This may fail to lint for some\n-                // incompatible types, but at the very least, will stop reads into\n-                // uninitialised memory.\n-                _ => compare_layouts(a, b),\n+                })\n             }\n         }\n+        let mut seen_types = FxHashSet::default();\n+        structurally_same_type_impl(&mut seen_types, cx, a, b, ckind)\n     }\n }\n "}, {"sha": "62aec66a255d5f2d5973983e6b5b7de6370b99f7", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -308,7 +308,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn should_continue_as_assoc_expr(&mut self, lhs: &Expr) -> bool {\n-        match (self.expr_is_complete(lhs), self.check_assoc_op().map(|op| op.node)) {\n+        match (self.expr_is_complete(lhs), AssocOp::from_token(&self.token)) {\n             // Semi-statement forms are odd:\n             // See https://github.com/rust-lang/rust/issues/29071\n             (true, None) => false,"}, {"sha": "ccc07645620a9c8ffe536a071e3c3958e48a2140", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -200,10 +200,12 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n     match *clean_type {\n         clean::ResolvedPath { ref path, .. } => {\n             let segments = &path.segments;\n-            let path_segment = segments.iter().last().unwrap_or_else(|| panic!(\n+            let path_segment = segments.iter().last().unwrap_or_else(|| {\n+                panic!(\n                 \"get_index_type_name(clean_type: {:?}, accept_generic: {:?}) had length zero path\",\n                 clean_type, accept_generic\n-            ));\n+            )\n+            });\n             Some(path_segment.name.clone())\n         }\n         clean::Generic(ref s) if accept_generic => Some(s.clone()),"}, {"sha": "0a836f46c0eb85bc96bc861e94f3af109e58eb1c", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 67, "deletions": 13, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -2,8 +2,9 @@ use crate::clean;\n use crate::config::OutputFormat;\n use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n+use crate::html::markdown::{find_testable_code, ErrorCodes};\n+use crate::passes::doc_test_lints::Tests;\n use crate::passes::Pass;\n-\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n use serde::Serialize;\n@@ -30,15 +31,19 @@ fn calculate_doc_coverage(krate: clean::Crate, ctx: &DocContext<'_>) -> clean::C\n struct ItemCount {\n     total: u64,\n     with_docs: u64,\n+    with_examples: u64,\n }\n \n impl ItemCount {\n-    fn count_item(&mut self, has_docs: bool) {\n+    fn count_item(&mut self, has_docs: bool, has_doc_example: bool) {\n         self.total += 1;\n \n         if has_docs {\n             self.with_docs += 1;\n         }\n+        if has_doc_example {\n+            self.with_examples += 1;\n+        }\n     }\n \n     fn percentage(&self) -> Option<f64> {\n@@ -48,20 +53,33 @@ impl ItemCount {\n             None\n         }\n     }\n+\n+    fn examples_percentage(&self) -> Option<f64> {\n+        if self.total > 0 {\n+            Some((self.with_examples as f64 * 100.0) / self.total as f64)\n+        } else {\n+            None\n+        }\n+    }\n }\n \n impl ops::Sub for ItemCount {\n     type Output = Self;\n \n     fn sub(self, rhs: Self) -> Self {\n-        ItemCount { total: self.total - rhs.total, with_docs: self.with_docs - rhs.with_docs }\n+        ItemCount {\n+            total: self.total - rhs.total,\n+            with_docs: self.with_docs - rhs.with_docs,\n+            with_examples: self.with_examples - rhs.with_examples,\n+        }\n     }\n }\n \n impl ops::AddAssign for ItemCount {\n     fn add_assign(&mut self, rhs: Self) {\n         self.total += rhs.total;\n         self.with_docs += rhs.with_docs;\n+        self.with_examples += rhs.with_examples;\n     }\n }\n \n@@ -103,40 +121,73 @@ impl CoverageCalculator {\n         let mut total = ItemCount::default();\n \n         fn print_table_line() {\n-            println!(\"+-{0:->35}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n+            println!(\"+-{0:->35}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n         }\n \n-        fn print_table_record(name: &str, count: ItemCount, percentage: f64) {\n+        fn print_table_record(\n+            name: &str,\n+            count: ItemCount,\n+            percentage: f64,\n+            examples_percentage: f64,\n+        ) {\n             println!(\n-                \"| {:<35} | {:>10} | {:>10} | {:>9.1}% |\",\n-                name, count.with_docs, count.total, percentage\n+                \"| {:<35} | {:>10} | {:>10} | {:>9.1}% | {:>10} | {:>9.1}% |\",\n+                name,\n+                count.with_docs,\n+                count.total,\n+                percentage,\n+                count.with_examples,\n+                examples_percentage,\n             );\n         }\n \n         print_table_line();\n         println!(\n-            \"| {:<35} | {:>10} | {:>10} | {:>10} |\",\n-            \"File\", \"Documented\", \"Total\", \"Percentage\"\n+            \"| {:<35} | {:>10} | {:>10} | {:>10} | {:>10} | {:>10} |\",\n+            \"File\", \"Documented\", \"Total\", \"Percentage\", \"Examples\", \"Percentage\",\n         );\n         print_table_line();\n \n         for (file, &count) in &self.items {\n-            if let Some(percentage) = count.percentage() {\n-                print_table_record(&limit_filename_len(file.to_string()), count, percentage);\n+            if let (Some(percentage), Some(examples_percentage)) =\n+                (count.percentage(), count.examples_percentage())\n+            {\n+                print_table_record(\n+                    &limit_filename_len(file.to_string()),\n+                    count,\n+                    percentage,\n+                    examples_percentage,\n+                );\n \n                 total += count;\n             }\n         }\n \n         print_table_line();\n-        print_table_record(\"Total\", total, total.percentage().unwrap_or(0.0));\n+        print_table_record(\n+            \"Total\",\n+            total,\n+            total.percentage().unwrap_or(0.0),\n+            total.examples_percentage().unwrap_or(0.0),\n+        );\n         print_table_line();\n     }\n }\n \n impl fold::DocFolder for CoverageCalculator {\n     fn fold_item(&mut self, i: clean::Item) -> Option<clean::Item> {\n         let has_docs = !i.attrs.doc_strings.is_empty();\n+        let mut tests = Tests { found_tests: 0 };\n+\n+        find_testable_code(\n+            &i.attrs.doc_strings.iter().map(|d| d.as_str()).collect::<Vec<_>>().join(\"\\n\"),\n+            &mut tests,\n+            ErrorCodes::No,\n+            false,\n+            None,\n+        );\n+\n+        let has_doc_example = tests.found_tests != 0;\n \n         match i.inner {\n             _ if !i.def_id.is_local() => {\n@@ -187,7 +238,10 @@ impl fold::DocFolder for CoverageCalculator {\n             }\n             _ => {\n                 debug!(\"counting {:?} {:?} in {}\", i.type_(), i.name, i.source.filename);\n-                self.items.entry(i.source.filename.clone()).or_default().count_item(has_docs);\n+                self.items\n+                    .entry(i.source.filename.clone())\n+                    .or_default()\n+                    .count_item(has_docs, has_doc_example);\n             }\n         }\n "}, {"sha": "edfe8c05c6db987b796ec4a86c077f067c4e23cf", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -222,11 +222,11 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                             disambiguator,\n                             None | Some(Disambiguator::Namespace(Namespace::TypeNS))\n                         ) {\n-                            if let Some(prim) = is_primitive(path_str, ns) {\n+                            if let Some((path, prim)) = is_primitive(path_str, ns) {\n                                 if extra_fragment.is_some() {\n                                     return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n                                 }\n-                                return Ok((prim, Some(path_str.to_owned())));\n+                                return Ok((prim, Some(path.to_owned())));\n                             }\n                         }\n                         return Ok((res, extra_fragment.clone()));\n@@ -239,11 +239,11 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 if value != (ns == ValueNS) {\n                     return Err(ErrorKind::ResolutionFailure);\n                 }\n-            } else if let Some(prim) = is_primitive(path_str, ns) {\n+            } else if let Some((path, prim)) = is_primitive(path_str, ns) {\n                 if extra_fragment.is_some() {\n                     return Err(ErrorKind::AnchorFailure(AnchorFailure::Primitive));\n                 }\n-                return Ok((prim, Some(path_str.to_owned())));\n+                return Ok((prim, Some(path.to_owned())));\n             } else {\n                 // If resolution failed, it may still be a method\n                 // because methods are not handled by the resolver\n@@ -269,7 +269,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 })\n                 .ok_or(ErrorKind::ResolutionFailure)?;\n \n-            if let Some(prim) = is_primitive(&path, TypeNS) {\n+            if let Some((path, prim)) = is_primitive(&path, TypeNS) {\n                 let did = primitive_impl(cx, &path).ok_or(ErrorKind::ResolutionFailure)?;\n                 return cx\n                     .tcx\n@@ -1220,11 +1220,22 @@ const PRIMITIVES: &[(&str, Res)] = &[\n     (\"f64\", Res::PrimTy(hir::PrimTy::Float(rustc_ast::FloatTy::F64))),\n     (\"str\", Res::PrimTy(hir::PrimTy::Str)),\n     (\"bool\", Res::PrimTy(hir::PrimTy::Bool)),\n+    (\"true\", Res::PrimTy(hir::PrimTy::Bool)),\n+    (\"false\", Res::PrimTy(hir::PrimTy::Bool)),\n     (\"char\", Res::PrimTy(hir::PrimTy::Char)),\n ];\n \n-fn is_primitive(path_str: &str, ns: Namespace) -> Option<Res> {\n-    if ns == TypeNS { PRIMITIVES.iter().find(|x| x.0 == path_str).map(|x| x.1) } else { None }\n+fn is_primitive(path_str: &str, ns: Namespace) -> Option<(&'static str, Res)> {\n+    if ns == TypeNS {\n+        PRIMITIVES\n+            .iter()\n+            .filter(|x| x.0 == path_str)\n+            .copied()\n+            .map(|x| if x.0 == \"true\" || x.0 == \"false\" { (\"bool\", x.1) } else { x })\n+            .next()\n+    } else {\n+        None\n+    }\n }\n \n fn primitive_impl(cx: &DocContext<'_>, path_str: &str) -> Option<DefId> {"}, {"sha": "1fdc4ee247adfc6a34b39c0f14051d59b9fae37d", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -43,6 +43,22 @@ impl<'a, 'tcx> DocFolder for PrivateItemDocTestLinter<'a, 'tcx> {\n     }\n }\n \n+pub(crate) struct Tests {\n+    pub(crate) found_tests: usize,\n+}\n+\n+impl Tests {\n+    pub(crate) fn new() -> Tests {\n+        Tests { found_tests: 0 }\n+    }\n+}\n+\n+impl crate::test::Tester for Tests {\n+    fn add_test(&mut self, _: String, _: LangString, _: usize) {\n+        self.found_tests += 1;\n+    }\n+}\n+\n pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     let hir_id = match cx.as_local_hir_id(item.def_id) {\n         Some(hir_id) => hir_id,\n@@ -52,17 +68,7 @@ pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n         }\n     };\n \n-    struct Tests {\n-        found_tests: usize,\n-    }\n-\n-    impl crate::test::Tester for Tests {\n-        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n-            self.found_tests += 1;\n-        }\n-    }\n-\n-    let mut tests = Tests { found_tests: 0 };\n+    let mut tests = Tests::new();\n \n     find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n "}, {"sha": "7e795acc575bccd51debfbea00fdd055b534cf23", "filename": "src/test/rustdoc-ui/coverage/basic.stdout", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.stdout?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -1,7 +1,7 @@\n-+-------------------------------------+------------+------------+------------+\n-| File                                | Documented |      Total | Percentage |\n-+-------------------------------------+------------+------------+------------+\n-| ...est/rustdoc-ui/coverage/basic.rs |          7 |         14 |      50.0% |\n-+-------------------------------------+------------+------------+------------+\n-| Total                               |          7 |         14 |      50.0% |\n-+-------------------------------------+------------+------------+------------+\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| ...est/rustdoc-ui/coverage/basic.rs |          7 |         14 |      50.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| Total                               |          7 |         14 |      50.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+"}, {"sha": "cd718f8a34d111e0548ff6ffb60bf6769d0b3e77", "filename": "src/test/rustdoc-ui/coverage/doc-examples.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fdoc-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fdoc-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fdoc-examples.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// check-pass\n+\n+//! This test ensure that only rust code examples are counted.\n+\n+/// Doc\n+///\n+/// ```\n+/// let x = 2;\n+/// ```\n+pub struct Foo;\n+\n+/// Doc\n+///\n+/// ```text\n+/// yolo\n+/// ```\n+pub trait Bar {}\n+\n+/// Doc\n+///\n+/// ```ignore (just for the sake of this test)\n+/// let x = 2;\n+/// ```\n+pub fn foo<T: Bar, D: ::std::fmt::Debug>(a: Foo, b: u32, c: T, d: D) -> u32 {\n+    0\n+}"}, {"sha": "f25cf79a3f35d45876f1989e0633376e6acb4773", "filename": "src/test/rustdoc-ui/coverage/doc-examples.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fdoc-examples.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fdoc-examples.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fdoc-examples.stdout?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -0,0 +1,7 @@\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| ...tdoc-ui/coverage/doc-examples.rs |          4 |          4 |     100.0% |          2 |      50.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| Total                               |          4 |          4 |     100.0% |          2 |      50.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+"}, {"sha": "2a6a2231e5b5727e009ce2751fcee1431298d250", "filename": "src/test/rustdoc-ui/coverage/empty.stdout", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.stdout?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -1,7 +1,7 @@\n-+-------------------------------------+------------+------------+------------+\n-| File                                | Documented |      Total | Percentage |\n-+-------------------------------------+------------+------------+------------+\n-| ...est/rustdoc-ui/coverage/empty.rs |          0 |          1 |       0.0% |\n-+-------------------------------------+------------+------------+------------+\n-| Total                               |          0 |          1 |       0.0% |\n-+-------------------------------------+------------+------------+------------+\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| ...est/rustdoc-ui/coverage/empty.rs |          0 |          1 |       0.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| Total                               |          0 |          1 |       0.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+"}, {"sha": "dd86f61f8d5014f31b286581d0cc76cc4f1c508b", "filename": "src/test/rustdoc-ui/coverage/enums.stdout", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -1,7 +1,7 @@\n-+-------------------------------------+------------+------------+------------+\n-| File                                | Documented |      Total | Percentage |\n-+-------------------------------------+------------+------------+------------+\n-| ...est/rustdoc-ui/coverage/enums.rs |          6 |          8 |      75.0% |\n-+-------------------------------------+------------+------------+------------+\n-| Total                               |          6 |          8 |      75.0% |\n-+-------------------------------------+------------+------------+------------+\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| ...est/rustdoc-ui/coverage/enums.rs |          6 |          8 |      75.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| Total                               |          6 |          8 |      75.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+"}, {"sha": "f920a3abd36bb6dbcee91e32d4a98856bac68480", "filename": "src/test/rustdoc-ui/coverage/exotic.stdout", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -1,8 +1,8 @@\n-+-------------------------------------+------------+------------+------------+\n-| File                                | Documented |      Total | Percentage |\n-+-------------------------------------+------------+------------+------------+\n-| ...st/rustdoc-ui/coverage/exotic.rs |          1 |          1 |     100.0% |\n-| <anon>                              |          2 |          2 |     100.0% |\n-+-------------------------------------+------------+------------+------------+\n-| Total                               |          3 |          3 |     100.0% |\n-+-------------------------------------+------------+------------+------------+\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| ...st/rustdoc-ui/coverage/exotic.rs |          1 |          1 |     100.0% |          0 |       0.0% |\n+| <anon>                              |          2 |          2 |     100.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| Total                               |          3 |          3 |     100.0% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+"}, {"sha": "7b5b083e1584c01a1e6fde7688feec686921acb7", "filename": "src/test/rustdoc-ui/coverage/json.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.stdout?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -1 +1 @@\n-{\"$DIR/json.rs\":{\"total\":13,\"with_docs\":7}}\n+{\"$DIR/json.rs\":{\"total\":13,\"with_docs\":7,\"with_examples\":0}}"}, {"sha": "bca3d51da59d066bc3eff24336d57c2fc405fbe9", "filename": "src/test/rustdoc-ui/coverage/private.stdout", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.stdout?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -1,7 +1,7 @@\n-+-------------------------------------+------------+------------+------------+\n-| File                                | Documented |      Total | Percentage |\n-+-------------------------------------+------------+------------+------------+\n-| ...t/rustdoc-ui/coverage/private.rs |          4 |          7 |      57.1% |\n-+-------------------------------------+------------+------------+------------+\n-| Total                               |          4 |          7 |      57.1% |\n-+-------------------------------------+------------+------------+------------+\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| ...t/rustdoc-ui/coverage/private.rs |          4 |          7 |      57.1% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| Total                               |          4 |          7 |      57.1% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+"}, {"sha": "31b48cc602a76246763bf371fa0ac6935abeaf5a", "filename": "src/test/rustdoc-ui/coverage/statics-consts.stdout", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.stdout?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -1,7 +1,7 @@\n-+-------------------------------------+------------+------------+------------+\n-| File                                | Documented |      Total | Percentage |\n-+-------------------------------------+------------+------------+------------+\n-| ...oc-ui/coverage/statics-consts.rs |          6 |          7 |      85.7% |\n-+-------------------------------------+------------+------------+------------+\n-| Total                               |          6 |          7 |      85.7% |\n-+-------------------------------------+------------+------------+------------+\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| ...oc-ui/coverage/statics-consts.rs |          6 |          7 |      85.7% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| Total                               |          6 |          7 |      85.7% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+"}, {"sha": "ac63b65023d0b302449627c4a4699ddf71374d6a", "filename": "src/test/rustdoc-ui/coverage/traits.stdout", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -1,7 +1,7 @@\n-+-------------------------------------+------------+------------+------------+\n-| File                                | Documented |      Total | Percentage |\n-+-------------------------------------+------------+------------+------------+\n-| ...st/rustdoc-ui/coverage/traits.rs |          6 |          7 |      85.7% |\n-+-------------------------------------+------------+------------+------------+\n-| Total                               |          6 |          7 |      85.7% |\n-+-------------------------------------+------------+------------+------------+\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |   Examples | Percentage |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| ...st/rustdoc-ui/coverage/traits.rs |          6 |          7 |      85.7% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+\n+| Total                               |          6 |          7 |      85.7% |          0 |       0.0% |\n++-------------------------------------+------------+------------+------------+------------+------------+"}, {"sha": "7b21e9341474032b84064337a3d4280ea20b5752", "filename": "src/test/rustdoc/intra-doc-link-true-false.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc%2Fintra-doc-link-true-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Frustdoc%2Fintra-doc-link-true-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-link-true-false.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -0,0 +1,10 @@\n+#![deny(broken_intra_doc_links)]\n+#![crate_name = \"foo\"]\n+\n+// ignore-tidy-linelength\n+\n+// @has foo/index.html\n+// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'true'\n+// @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'false'\n+\n+//! A `bool` is either [`true`] or [`false`]."}, {"sha": "44421b077fa26eb2c0e75f664c07be4d45cbd76f", "filename": "src/test/ui/did_you_mean/issue-54109-and_instead_of_ampersands.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -5,10 +5,8 @@ fn test_and() {\n     let b = false;\n \n     let _ = a and b; //~ ERROR `and` is not a logical operator\n-                     //~| ERROR `and` is not a logical operator\n \n     if a and b { //~ ERROR `and` is not a logical operator\n-                 //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n \n@@ -20,10 +18,8 @@ fn test_or() {\n     let b = false;\n \n     let _ = a or b; //~ ERROR `or` is not a logical operator\n-                    //~| ERROR `or` is not a logical operator\n \n     if a or b { //~ ERROR `or` is not a logical operator\n-                //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -32,7 +28,6 @@ fn test_and_par() {\n     let a = true;\n     let b = false;\n     if (a and b) {  //~ ERROR `and` is not a logical operator\n-                    //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -41,7 +36,6 @@ fn test_or_par() {\n     let a = true;\n     let b = false;\n     if (a or b) {  //~ ERROR `or` is not a logical operator\n-                   //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -50,7 +44,6 @@ fn test_while_and() {\n     let a = true;\n     let b = false;\n     while a and b {  //~ ERROR `and` is not a logical operator\n-                     //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -59,7 +52,6 @@ fn test_while_or() {\n     let a = true;\n     let b = false;\n     while a or b { //~ ERROR `or` is not a logical operator\n-                   //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }"}, {"sha": "528c62f501e0d1bf65bcad255050b235f1255559", "filename": "src/test/ui/did_you_mean/issue-54109-and_instead_of_ampersands.stderr", "status": "modified", "additions": 9, "deletions": 73, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -7,133 +7,69 @@ LL |     let _ = a and b;\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:7:15\n-   |\n-LL |     let _ = a and b;\n-   |               ^^^ help: use `&&` to perform logical conjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `and` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:10:10\n-   |\n-LL |     if a and b {\n-   |          ^^^ help: use `&&` to perform logical conjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `and` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:10:10\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:9:10\n    |\n LL |     if a and b {\n    |          ^^^ help: use `&&` to perform logical conjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:22:15\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:20:15\n    |\n LL |     let _ = a or b;\n    |               ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:22:15\n-   |\n-LL |     let _ = a or b;\n-   |               ^^ help: use `||` to perform logical disjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:25:10\n-   |\n-LL |     if a or b {\n-   |          ^^ help: use `||` to perform logical disjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:25:10\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:22:10\n    |\n LL |     if a or b {\n    |          ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:34:11\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:30:11\n    |\n LL |     if (a and b) {\n    |           ^^^ help: use `&&` to perform logical conjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n-error: `and` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:34:11\n-   |\n-LL |     if (a and b) {\n-   |           ^^^ help: use `&&` to perform logical conjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:43:11\n-   |\n-LL |     if (a or b) {\n-   |           ^^ help: use `||` to perform logical disjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:43:11\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:38:11\n    |\n LL |     if (a or b) {\n    |           ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:52:13\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:46:13\n    |\n LL |     while a and b {\n    |             ^^^ help: use `&&` to perform logical conjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n-error: `and` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:52:13\n-   |\n-LL |     while a and b {\n-   |             ^^^ help: use `&&` to perform logical conjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:61:13\n-   |\n-LL |     while a or b {\n-   |             ^^ help: use `||` to perform logical disjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:61:13\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:54:13\n    |\n LL |     while a or b {\n    |             ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54109-and_instead_of_ampersands.rs:15:33\n+  --> $DIR/issue-54109-and_instead_of_ampersands.rs:13:33\n    |\n LL |     let _recovery_witness: () = 0;\n    |                            --   ^ expected `()`, found integer\n    |                            |\n    |                            expected due to this\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "5079a37f4da7f9821ec4d390ece765a06ea69d45", "filename": "src/test/ui/did_you_mean/issue-54109-without-witness.fixed", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.fixed?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -11,10 +11,8 @@ fn test_and() {\n     let b = false;\n \n     let _ = a && b; //~ ERROR `and` is not a logical operator\n-                     //~| ERROR `and` is not a logical operator\n \n     if a && b { //~ ERROR `and` is not a logical operator\n-                 //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -24,10 +22,8 @@ fn test_or() {\n     let b = false;\n \n     let _ = a || b; //~ ERROR `or` is not a logical operator\n-                    //~| ERROR `or` is not a logical operator\n \n     if a || b { //~ ERROR `or` is not a logical operator\n-                //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -36,7 +32,6 @@ fn test_and_par() {\n     let a = true;\n     let b = false;\n     if (a && b) {  //~ ERROR `and` is not a logical operator\n-                    //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -45,7 +40,6 @@ fn test_or_par() {\n     let a = true;\n     let b = false;\n     if (a || b) {  //~ ERROR `or` is not a logical operator\n-                   //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -54,7 +48,6 @@ fn test_while_and() {\n     let a = true;\n     let b = false;\n     while a && b {  //~ ERROR `and` is not a logical operator\n-                     //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -63,7 +56,6 @@ fn test_while_or() {\n     let a = true;\n     let b = false;\n     while a || b { //~ ERROR `or` is not a logical operator\n-                   //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }"}, {"sha": "00660a938d5d625b6e7be016d3f5d6c359698532", "filename": "src/test/ui/did_you_mean/issue-54109-without-witness.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -11,10 +11,8 @@ fn test_and() {\n     let b = false;\n \n     let _ = a and b; //~ ERROR `and` is not a logical operator\n-                     //~| ERROR `and` is not a logical operator\n \n     if a and b { //~ ERROR `and` is not a logical operator\n-                 //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -24,10 +22,8 @@ fn test_or() {\n     let b = false;\n \n     let _ = a or b; //~ ERROR `or` is not a logical operator\n-                    //~| ERROR `or` is not a logical operator\n \n     if a or b { //~ ERROR `or` is not a logical operator\n-                //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -36,7 +32,6 @@ fn test_and_par() {\n     let a = true;\n     let b = false;\n     if (a and b) {  //~ ERROR `and` is not a logical operator\n-                    //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -45,7 +40,6 @@ fn test_or_par() {\n     let a = true;\n     let b = false;\n     if (a or b) {  //~ ERROR `or` is not a logical operator\n-                   //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -54,7 +48,6 @@ fn test_while_and() {\n     let a = true;\n     let b = false;\n     while a and b {  //~ ERROR `and` is not a logical operator\n-                     //~| ERROR `and` is not a logical operator\n         println!(\"both\");\n     }\n }\n@@ -63,7 +56,6 @@ fn test_while_or() {\n     let a = true;\n     let b = false;\n     while a or b { //~ ERROR `or` is not a logical operator\n-                   //~| ERROR `or` is not a logical operator\n         println!(\"both\");\n     }\n }"}, {"sha": "0350890c1fde0ca0129a6b42e29301ba0a03ee53", "filename": "src/test/ui/did_you_mean/issue-54109-without-witness.stderr", "status": "modified", "additions": 8, "deletions": 72, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -7,124 +7,60 @@ LL |     let _ = a and b;\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:13:15\n-   |\n-LL |     let _ = a and b;\n-   |               ^^^ help: use `&&` to perform logical conjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `and` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:16:10\n-   |\n-LL |     if a and b {\n-   |          ^^^ help: use `&&` to perform logical conjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `and` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:16:10\n+  --> $DIR/issue-54109-without-witness.rs:15:10\n    |\n LL |     if a and b {\n    |          ^^^ help: use `&&` to perform logical conjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:26:15\n+  --> $DIR/issue-54109-without-witness.rs:24:15\n    |\n LL |     let _ = a or b;\n    |               ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:26:15\n-   |\n-LL |     let _ = a or b;\n-   |               ^^ help: use `||` to perform logical disjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `or` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:29:10\n-   |\n-LL |     if a or b {\n-   |          ^^ help: use `||` to perform logical disjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `or` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:29:10\n+  --> $DIR/issue-54109-without-witness.rs:26:10\n    |\n LL |     if a or b {\n    |          ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:38:11\n+  --> $DIR/issue-54109-without-witness.rs:34:11\n    |\n LL |     if (a and b) {\n    |           ^^^ help: use `&&` to perform logical conjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n-error: `and` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:38:11\n-   |\n-LL |     if (a and b) {\n-   |           ^^^ help: use `&&` to perform logical conjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `or` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:47:11\n-   |\n-LL |     if (a or b) {\n-   |           ^^ help: use `||` to perform logical disjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:47:11\n+  --> $DIR/issue-54109-without-witness.rs:42:11\n    |\n LL |     if (a or b) {\n    |           ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n error: `and` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:56:13\n+  --> $DIR/issue-54109-without-witness.rs:50:13\n    |\n LL |     while a and b {\n    |             ^^^ help: use `&&` to perform logical conjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n-error: `and` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:56:13\n-   |\n-LL |     while a and b {\n-   |             ^^^ help: use `&&` to perform logical conjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n-error: `or` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:65:13\n-   |\n-LL |     while a or b {\n-   |             ^^ help: use `||` to perform logical disjunction\n-   |\n-   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n-\n error: `or` is not a logical operator\n-  --> $DIR/issue-54109-without-witness.rs:65:13\n+  --> $DIR/issue-54109-without-witness.rs:58:13\n    |\n LL |     while a or b {\n    |             ^^ help: use `||` to perform logical disjunction\n    |\n    = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "0857676e4ed58c38898d916ff988aad3951a3573", "filename": "src/test/ui/issues/issue-75599.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fissues%2Fissue-75599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Fissues%2Fissue-75599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75599.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+#![allow(non_upper_case_globals)]\n+\n+const or: usize = 1;\n+const and: usize = 2;\n+\n+mod or {\n+    pub const X: usize = 3;\n+}\n+\n+mod and {\n+    pub const X: usize = 4;\n+}\n+\n+fn main() {\n+    match 0 {\n+        0 => {}\n+        or => {}\n+        and => {}\n+        or::X => {}\n+        and::X => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "ab0fd0a2e708542f978e634c81eb9d78077b26f1", "filename": "src/test/ui/lint/clashing-extern-fn-recursion.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn-recursion.rs?ref=5b04bbfcbb79ed7325ea2b580458a80d95da6bbb", "patch": "@@ -0,0 +1,119 @@\n+// check-pass\n+//\n+// This tests checks that clashing_extern_declarations handles types that are recursive through a\n+// pointer or ref argument. See #75512.\n+\n+#![crate_type = \"lib\"]\n+\n+mod raw_ptr_recursion {\n+    mod a {\n+        #[repr(C)]\n+        struct Pointy {\n+            pointy: *const Pointy,\n+        }\n+\n+        extern \"C\" {\n+            fn run_pointy(pointy: Pointy);\n+        }\n+    }\n+    mod b {\n+        #[repr(C)]\n+        struct Pointy {\n+            pointy: *const Pointy,\n+        }\n+\n+        extern \"C\" {\n+            fn run_pointy(pointy: Pointy);\n+        }\n+    }\n+}\n+\n+mod raw_ptr_recursion_once_removed {\n+    mod a {\n+        #[repr(C)]\n+        struct Pointy1 {\n+            pointy_two: *const Pointy2,\n+        }\n+\n+        #[repr(C)]\n+        struct Pointy2 {\n+            pointy_one: *const Pointy1,\n+        }\n+\n+        extern \"C\" {\n+            fn run_pointy2(pointy: Pointy2);\n+        }\n+    }\n+\n+    mod b {\n+        #[repr(C)]\n+        struct Pointy1 {\n+            pointy_two: *const Pointy2,\n+        }\n+\n+        #[repr(C)]\n+        struct Pointy2 {\n+            pointy_one: *const Pointy1,\n+        }\n+\n+        extern \"C\" {\n+            fn run_pointy2(pointy: Pointy2);\n+        }\n+    }\n+}\n+\n+mod ref_recursion {\n+    mod a {\n+        #[repr(C)]\n+        struct Reffy<'a> {\n+            reffy: &'a Reffy<'a>,\n+        }\n+\n+        extern \"C\" {\n+            fn reffy_recursion(reffy: Reffy);\n+        }\n+    }\n+    mod b {\n+        #[repr(C)]\n+        struct Reffy<'a> {\n+            reffy: &'a Reffy<'a>,\n+        }\n+\n+        extern \"C\" {\n+            fn reffy_recursion(reffy: Reffy);\n+        }\n+    }\n+}\n+\n+mod ref_recursion_once_removed {\n+    mod a {\n+        #[repr(C)]\n+        struct Reffy1<'a> {\n+            reffy: &'a Reffy2<'a>,\n+        }\n+\n+        struct Reffy2<'a> {\n+            reffy: &'a Reffy1<'a>,\n+        }\n+\n+        extern \"C\" {\n+            #[allow(improper_ctypes)]\n+            fn reffy_once_removed(reffy: Reffy1);\n+        }\n+    }\n+    mod b {\n+        #[repr(C)]\n+        struct Reffy1<'a> {\n+            reffy: &'a Reffy2<'a>,\n+        }\n+\n+        struct Reffy2<'a> {\n+            reffy: &'a Reffy1<'a>,\n+        }\n+\n+        extern \"C\" {\n+            #[allow(improper_ctypes)]\n+            fn reffy_once_removed(reffy: Reffy1);\n+        }\n+    }\n+}"}]}