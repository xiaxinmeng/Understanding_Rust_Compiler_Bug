{"sha": "5e3123bfa7a5754ec1c9b54a9831f13952bbaf4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMzEyM2JmYTdhNTc1NGVjMWM5YjU0YTk4MzFmMTM5NTJiYmFmNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-18T02:51:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-18T02:51:30Z"}, "message": "auto merge of #10533 : tautologico/rust/fixdocs, r=huonw\n\nThis fixes a number of bugs in the doc comments for a bunch of functions in libstd/iter.rs, mostly updating to use unwrap() instead of get() on options. Also fixes the docs for advance() (trait Iterator) which was not making sense, though if it is not useful anymore maybe it should be removed.", "tree": {"sha": "a78de6f356aae6b2e674ce70ff0fdb50a6aa7f3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78de6f356aae6b2e674ce70ff0fdb50a6aa7f3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e3123bfa7a5754ec1c9b54a9831f13952bbaf4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3123bfa7a5754ec1c9b54a9831f13952bbaf4e", "html_url": "https://github.com/rust-lang/rust/commit/5e3123bfa7a5754ec1c9b54a9831f13952bbaf4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e3123bfa7a5754ec1c9b54a9831f13952bbaf4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4197aeed670acd855c21c0b66c87eed0919c219", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4197aeed670acd855c21c0b66c87eed0919c219", "html_url": "https://github.com/rust-lang/rust/commit/b4197aeed670acd855c21c0b66c87eed0919c219"}, {"sha": "1f27512b1795697d21e8b23685c9efd56b89c3cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f27512b1795697d21e8b23685c9efd56b89c3cf", "html_url": "https://github.com/rust-lang/rust/commit/1f27512b1795697d21e8b23685c9efd56b89c3cf"}], "stats": {"total": 65, "additions": 31, "deletions": 34}, "files": [{"sha": "3897f519e90d11957a7d4b83f25d775b43ca2657", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5e3123bfa7a5754ec1c9b54a9831f13952bbaf4e/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3123bfa7a5754ec1c9b54a9831f13952bbaf4e/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=5e3123bfa7a5754ec1c9b54a9831f13952bbaf4e", "patch": "@@ -115,8 +115,8 @@ pub trait Iterator<A> {\n     /// let a = [0];\n     /// let b = [1];\n     /// let mut it = a.iter().chain(b.iter());\n-    /// assert_eq!(it.next().get(), &0);\n-    /// assert_eq!(it.next().get(), &1);\n+    /// assert_eq!(it.next().unwrap(), &0);\n+    /// assert_eq!(it.next().unwrap(), &1);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -135,7 +135,7 @@ pub trait Iterator<A> {\n     /// let a = [0];\n     /// let b = [1];\n     /// let mut it = a.iter().zip(b.iter());\n-    /// assert_eq!(it.next().get(), (&0, &1));\n+    /// assert_eq!(it.next().unwrap(), (&0, &1));\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -151,8 +151,8 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2];\n     /// let mut it = a.iter().map(|&x| 2 * x);\n-    /// assert_eq!(it.next().get(), 2);\n-    /// assert_eq!(it.next().get(), 4);\n+    /// assert_eq!(it.next().unwrap(), 2);\n+    /// assert_eq!(it.next().unwrap(), 4);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -169,7 +169,7 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2];\n     /// let mut it = a.iter().filter(|&x| *x > 1);\n-    /// assert_eq!(it.next().get(), &2);\n+    /// assert_eq!(it.next().unwrap(), &2);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -186,7 +186,7 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2];\n     /// let mut it = a.iter().filter_map(|&x| if x > 1 {Some(2 * x)} else {None});\n-    /// assert_eq!(it.next().get(), 4);\n+    /// assert_eq!(it.next().unwrap(), 4);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -202,8 +202,8 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [100, 200];\n     /// let mut it = a.iter().enumerate();\n-    /// assert_eq!(it.next().get(), (0, &100));\n-    /// assert_eq!(it.next().get(), (1, &200));\n+    /// assert_eq!(it.next().unwrap(), (0, &100));\n+    /// assert_eq!(it.next().unwrap(), (1, &200));\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -243,9 +243,9 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 2, 1];\n     /// let mut it = a.iter().skip_while(|&a| *a < 3);\n-    /// assert_eq!(it.next().get(), &3);\n-    /// assert_eq!(it.next().get(), &2);\n-    /// assert_eq!(it.next().get(), &1);\n+    /// assert_eq!(it.next().unwrap(), &3);\n+    /// assert_eq!(it.next().unwrap(), &2);\n+    /// assert_eq!(it.next().unwrap(), &1);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -262,8 +262,8 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 2, 1];\n     /// let mut it = a.iter().take_while(|&a| *a < 3);\n-    /// assert_eq!(it.next().get(), &1);\n-    /// assert_eq!(it.next().get(), &2);\n+    /// assert_eq!(it.next().unwrap(), &1);\n+    /// assert_eq!(it.next().unwrap(), &2);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -279,8 +279,8 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter().skip(3);\n-    /// assert_eq!(it.next().get(), &4);\n-    /// assert_eq!(it.next().get(), &5);\n+    /// assert_eq!(it.next().unwrap(), &4);\n+    /// assert_eq!(it.next().unwrap(), &5);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -296,9 +296,9 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter().take(3);\n-    /// assert_eq!(it.next().get(), &1);\n-    /// assert_eq!(it.next().get(), &2);\n-    /// assert_eq!(it.next().get(), &3);\n+    /// assert_eq!(it.next().unwrap(), &1);\n+    /// assert_eq!(it.next().unwrap(), &2);\n+    /// assert_eq!(it.next().unwrap(), &3);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -319,11 +319,11 @@ pub trait Iterator<A> {\n     ///   *fac = *fac * x;\n     ///   Some(*fac)\n     /// });\n-    /// assert_eq!(it.next().get(), 1);\n-    /// assert_eq!(it.next().get(), 2);\n-    /// assert_eq!(it.next().get(), 6);\n-    /// assert_eq!(it.next().get(), 24);\n-    /// assert_eq!(it.next().get(), 120);\n+    /// assert_eq!(it.next().unwrap(), 1);\n+    /// assert_eq!(it.next().unwrap(), 2);\n+    /// assert_eq!(it.next().unwrap(), 6);\n+    /// assert_eq!(it.next().unwrap(), 24);\n+    /// assert_eq!(it.next().unwrap(), 120);\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -424,16 +424,13 @@ pub trait Iterator<A> {\n         ByRef{iter: self}\n     }\n \n-    /// An adaptation of an external iterator to the for-loop protocol of rust.\n+    /// Apply a function to each element, or stop iterating if the\n+    /// function returns `false`.\n     ///\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::iter::count;\n-    ///\n-    /// for i in count(0, 10) {\n-    ///     println!(\"{}\", i);\n-    /// }\n+    /// range(0, 5).advance(|x| {print!(\"{} \", x); true});\n     /// ```\n     #[inline]\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool {\n@@ -485,7 +482,7 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n-    /// assert!(it.nth(2).get() == &3);\n+    /// assert!(it.nth(2).unwrap() == &3);\n     /// assert!(it.nth(2) == None);\n     /// ```\n     #[inline]\n@@ -506,7 +503,7 @@ pub trait Iterator<A> {\n     ///\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().last().get() == &5);\n+    /// assert!(a.iter().last().unwrap() == &5);\n     /// ```\n     #[inline]\n     fn last(&mut self) -> Option<A> {\n@@ -865,7 +862,7 @@ pub trait OrdIterator<A> {\n     ///\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().max().get() == &5);\n+    /// assert!(a.iter().max().unwrap() == &5);\n     /// ```\n     fn max(&mut self) -> Option<A>;\n \n@@ -875,7 +872,7 @@ pub trait OrdIterator<A> {\n     ///\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n-    /// assert!(a.iter().min().get() == &1);\n+    /// assert!(a.iter().min().unwrap() == &1);\n     /// ```\n     fn min(&mut self) -> Option<A>;\n }"}]}