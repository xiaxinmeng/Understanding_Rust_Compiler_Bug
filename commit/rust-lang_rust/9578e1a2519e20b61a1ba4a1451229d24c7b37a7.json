{"sha": "9578e1a2519e20b61a1ba4a1451229d24c7b37a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NzhlMWEyNTE5ZTIwYjYxYTFiYTRhMTQ1MTIyOWQyNGM3YjM3YTc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-16T05:19:02Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-17T23:00:52Z"}, "message": "Fix partially consumed tokens in macro matchers.", "tree": {"sha": "5baf39b711202efc78acbf110a48c5e9a7fec506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5baf39b711202efc78acbf110a48c5e9a7fec506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9578e1a2519e20b61a1ba4a1451229d24c7b37a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9578e1a2519e20b61a1ba4a1451229d24c7b37a7", "html_url": "https://github.com/rust-lang/rust/commit/9578e1a2519e20b61a1ba4a1451229d24c7b37a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9578e1a2519e20b61a1ba4a1451229d24c7b37a7/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34318dd538bf4c9175e4138b3e4188ea8211620", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34318dd538bf4c9175e4138b3e4188ea8211620", "html_url": "https://github.com/rust-lang/rust/commit/d34318dd538bf4c9175e4138b3e4188ea8211620"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "d7a5d04bda58625e1042d16ec18d8d4fc16300c7", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9578e1a2519e20b61a1ba4a1451229d24c7b37a7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578e1a2519e20b61a1ba4a1451229d24c7b37a7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=9578e1a2519e20b61a1ba4a1451229d24c7b37a7", "patch": "@@ -476,24 +476,21 @@ pub fn parse(sess: &ParseSess,\n                 }\n                 rdr.next_token();\n             } else /* bb_eis.len() == 1 */ {\n-                let mut rust_parser = Parser::new(sess, cfg.clone(), Box::new(rdr.clone()));\n-\n-                let mut ei = bb_eis.pop().unwrap();\n-                match ei.top_elts.get_tt(ei.idx) {\n-                    TokenTree::Token(span, MatchNt(_, ident)) => {\n+                rdr.next_tok = {\n+                    let mut rust_parser = Parser::new(sess, cfg.clone(), Box::new(&mut rdr));\n+                    let mut ei = bb_eis.pop().unwrap();\n+                    if let TokenTree::Token(span, MatchNt(_, ident)) = ei.top_elts.get_tt(ei.idx) {\n                         let match_cur = ei.match_cur;\n                         (&mut ei.matches[match_cur]).push(Rc::new(MatchedNonterminal(\n                             parse_nt(&mut rust_parser, span, &ident.name.as_str()))));\n                         ei.idx += 1;\n                         ei.match_cur += 1;\n+                    } else {\n+                        unreachable!()\n                     }\n-                    _ => panic!()\n-                }\n-                cur_eis.push(ei);\n-\n-                for _ in 0..rust_parser.tokens_consumed {\n-                    let _ = rdr.next_token();\n-                }\n+                    cur_eis.push(ei);\n+                    Some(TokenAndSpan { tok: rust_parser.token, sp: rust_parser.span })\n+                };\n             }\n         }\n "}, {"sha": "205c709d6cb40deb67134614e56d47a901e215fa", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9578e1a2519e20b61a1ba4a1451229d24c7b37a7/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578e1a2519e20b61a1ba4a1451229d24c7b37a7/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=9578e1a2519e20b61a1ba4a1451229d24c7b37a7", "patch": "@@ -48,6 +48,7 @@ pub struct TtReader<'a> {\n     /* cached: */\n     pub cur_tok: Token,\n     pub cur_span: Span,\n+    pub next_tok: Option<TokenAndSpan>,\n     /// Transform doc comments. Only useful in macro invocations\n     pub desugar_doc_comments: bool,\n     pub fatal_errs: Vec<DiagnosticBuilder<'a>>,\n@@ -100,6 +101,7 @@ pub fn new_tt_reader_with_doc_flag(sp_diag: &Handler,\n         /* dummy values, never read: */\n         cur_tok: token::Eof,\n         cur_span: DUMMY_SP,\n+        next_tok: None,\n         fatal_errs: Vec::new(),\n     };\n     tt_next_token(&mut r); /* get cur_tok and cur_span set up */\n@@ -178,6 +180,9 @@ fn lockstep_iter_size(t: &TokenTree, r: &TtReader) -> LockstepIterSize {\n /// Return the next token from the TtReader.\n /// EFFECT: advances the reader's token field\n pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n+    if let Some(tok) = r.next_tok.take() {\n+        return tok;\n+    }\n     // FIXME(pcwalton): Bad copy?\n     let ret_val = TokenAndSpan {\n         tok: r.cur_tok.clone(),"}, {"sha": "6dd45a08785af6a025905c1bc8b03874a014eaa0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9578e1a2519e20b61a1ba4a1451229d24c7b37a7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578e1a2519e20b61a1ba4a1451229d24c7b37a7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=9578e1a2519e20b61a1ba4a1451229d24c7b37a7", "patch": "@@ -144,7 +144,7 @@ impl<'a> Reader for StringReader<'a> {\n \n impl<'a> Reader for TtReader<'a> {\n     fn is_eof(&self) -> bool {\n-        self.cur_tok == token::Eof\n+        self.peek().tok == token::Eof\n     }\n     fn try_next_token(&mut self) -> Result<TokenAndSpan, ()> {\n         assert!(self.fatal_errs.is_empty());\n@@ -165,10 +165,31 @@ impl<'a> Reader for TtReader<'a> {\n         self.fatal_errs.clear();\n     }\n     fn peek(&self) -> TokenAndSpan {\n-        TokenAndSpan {\n+        self.next_tok.clone().unwrap_or(TokenAndSpan {\n             tok: self.cur_tok.clone(),\n             sp: self.cur_span,\n-        }\n+        })\n+    }\n+}\n+\n+impl<'a, 'b> Reader for &'b mut TtReader<'a> {\n+    fn is_eof(&self) -> bool {\n+        (**self).is_eof()\n+    }\n+    fn try_next_token(&mut self) -> Result<TokenAndSpan, ()> {\n+        (**self).try_next_token()\n+    }\n+    fn fatal(&self, m: &str) -> FatalError {\n+        (**self).fatal(m)\n+    }\n+    fn err(&self, m: &str) {\n+        (**self).err(m)\n+    }\n+    fn emit_fatal_errors(&mut self) {\n+        (**self).emit_fatal_errors()\n+    }\n+    fn peek(&self) -> TokenAndSpan {\n+        (**self).peek()\n     }\n }\n "}]}