{"sha": "740c9ea7035e9f70336a354a70ed34b9907b7e90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MGM5ZWE3MDM1ZTlmNzAzMzZhMzU0YTcwZWQzNGI5OTA3YjdlOTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-12T10:17:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-12T10:17:59Z"}, "message": "Rollup merge of #59836 - andersk:nominator, r=Centril\n\nstd::ops::Div examples: correct nominator to numerator", "tree": {"sha": "2865c987f646cb0730edbd1228fa818ded6856b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2865c987f646cb0730edbd1228fa818ded6856b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/740c9ea7035e9f70336a354a70ed34b9907b7e90", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcsGXXCRBK7hj4Ov3rIwAAdHIIAGzYS2MlvUh6i+OgSEROp6gI\n0u48QOsSFPPvPBr+pSIlnUoYaRMiQfHYJd3Dv18wG3tCZMSeqXNxuYnMw1g9MEN6\n/FUBI9GYPK/5JuLXA/RqwG2xwXJgtZICKIJP5MN0QqtTgL5MtDIWx/ZE9A5h10k7\n5hfkq54PVd72K7XaQ2+78q7J7GOJBLDSOUZ1G6aXm17IlB5OIW89S16zMJWJobc6\nsxVA4aLF2bVhZCMMvM+dOUHFWaV11nc2ZFJo0HhD40SMFibPBxUSKS4W5Uopcmp1\n+YmVEJg2TvEnBvImXbXsLSZLKwFw6mN1a8m98KS2WGnPsUnNzv5S7V0JdJj9weI=\n=vDJb\n-----END PGP SIGNATURE-----\n", "payload": "tree 2865c987f646cb0730edbd1228fa818ded6856b8\nparent 94b7b6a604992c1a41718184ad8cb91cf804f1b2\nparent 38264937fc16624b4f3959dec12c0440e5a8f628\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555064279 +0200\ncommitter GitHub <noreply@github.com> 1555064279 +0200\n\nRollup merge of #59836 - andersk:nominator, r=Centril\n\nstd::ops::Div examples: correct nominator to numerator\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/740c9ea7035e9f70336a354a70ed34b9907b7e90", "html_url": "https://github.com/rust-lang/rust/commit/740c9ea7035e9f70336a354a70ed34b9907b7e90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/740c9ea7035e9f70336a354a70ed34b9907b7e90/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94b7b6a604992c1a41718184ad8cb91cf804f1b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/94b7b6a604992c1a41718184ad8cb91cf804f1b2", "html_url": "https://github.com/rust-lang/rust/commit/94b7b6a604992c1a41718184ad8cb91cf804f1b2"}, {"sha": "38264937fc16624b4f3959dec12c0440e5a8f628", "url": "https://api.github.com/repos/rust-lang/rust/commits/38264937fc16624b4f3959dec12c0440e5a8f628", "html_url": "https://github.com/rust-lang/rust/commit/38264937fc16624b4f3959dec12c0440e5a8f628"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "8139305f5302dd3b750368111fc01391121b9585", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/740c9ea7035e9f70336a354a70ed34b9907b7e90/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740c9ea7035e9f70336a354a70ed34b9907b7e90/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=740c9ea7035e9f70336a354a70ed34b9907b7e90", "patch": "@@ -220,21 +220,21 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// // derive `Eq` and `PartialEq`.\n /// #[derive(Debug, Eq, PartialEq)]\n /// struct Rational {\n-///     nominator: usize,\n+///     numerator: usize,\n ///     denominator: usize,\n /// }\n ///\n /// impl Rational {\n-///     fn new(nominator: usize, denominator: usize) -> Self {\n+///     fn new(numerator: usize, denominator: usize) -> Self {\n ///         if denominator == 0 {\n ///             panic!(\"Zero is an invalid denominator!\");\n ///         }\n ///\n ///         // Reduce to lowest terms by dividing by the greatest common\n ///         // divisor.\n-///         let gcd = gcd(nominator, denominator);\n+///         let gcd = gcd(numerator, denominator);\n ///         Rational {\n-///             nominator: nominator / gcd,\n+///             numerator: numerator / gcd,\n ///             denominator: denominator / gcd,\n ///         }\n ///     }\n@@ -245,9 +245,9 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///     type Output = Self;\n ///\n ///     fn mul(self, rhs: Self) -> Self {\n-///         let nominator = self.nominator * rhs.nominator;\n+///         let numerator = self.numerator * rhs.numerator;\n ///         let denominator = self.denominator * rhs.denominator;\n-///         Rational::new(nominator, denominator)\n+///         Rational::new(numerator, denominator)\n ///     }\n /// }\n ///\n@@ -340,21 +340,21 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// // derive `Eq` and `PartialEq`.\n /// #[derive(Debug, Eq, PartialEq)]\n /// struct Rational {\n-///     nominator: usize,\n+///     numerator: usize,\n ///     denominator: usize,\n /// }\n ///\n /// impl Rational {\n-///     fn new(nominator: usize, denominator: usize) -> Self {\n+///     fn new(numerator: usize, denominator: usize) -> Self {\n ///         if denominator == 0 {\n ///             panic!(\"Zero is an invalid denominator!\");\n ///         }\n ///\n ///         // Reduce to lowest terms by dividing by the greatest common\n ///         // divisor.\n-///         let gcd = gcd(nominator, denominator);\n+///         let gcd = gcd(numerator, denominator);\n ///         Rational {\n-///             nominator: nominator / gcd,\n+///             numerator: numerator / gcd,\n ///             denominator: denominator / gcd,\n ///         }\n ///     }\n@@ -365,13 +365,13 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///     type Output = Self;\n ///\n ///     fn div(self, rhs: Self) -> Self::Output {\n-///         if rhs.nominator == 0 {\n+///         if rhs.numerator == 0 {\n ///             panic!(\"Cannot divide by zero-valued `Rational`!\");\n ///         }\n ///\n-///         let nominator = self.nominator * rhs.denominator;\n-///         let denominator = self.denominator * rhs.nominator;\n-///         Rational::new(nominator, denominator)\n+///         let numerator = self.numerator * rhs.denominator;\n+///         let denominator = self.denominator * rhs.numerator;\n+///         Rational::new(numerator, denominator)\n ///     }\n /// }\n ///"}]}