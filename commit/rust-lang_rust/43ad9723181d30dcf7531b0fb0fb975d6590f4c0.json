{"sha": "43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYWQ5NzIzMTgxZDMwZGNmNzUzMWIwZmIwZmI5NzVkNjU5MGY0YzA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-18T20:51:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-04-06T08:48:19Z"}, "message": "Use `Span::apply_mark` where possible", "tree": {"sha": "d9fa54227df16b20fcdab9adca3d7ee42211d05f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9fa54227df16b20fcdab9adca3d7ee42211d05f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "html_url": "https://github.com/rust-lang/rust/commit/43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2afefd80bf779bc3c6f697a3c6cc3a476993602", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2afefd80bf779bc3c6f697a3c6cc3a476993602", "html_url": "https://github.com/rust-lang/rust/commit/e2afefd80bf779bc3c6f697a3c6cc3a476993602"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "a09bea25a249c55daeeca573a69cef2a7c47a542", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "patch": "@@ -897,7 +897,7 @@ pub fn expr_to_spanned_string(cx: &mut ExtCtxt, expr: P<ast::Expr>, err_msg: &st\n                               -> Option<Spanned<(Symbol, ast::StrStyle)>> {\n     // Update `expr.span`'s ctxt now in case expr is an `include!` macro invocation.\n     let expr = expr.map(|mut expr| {\n-        expr.span = expr.span.with_ctxt(expr.span.ctxt().apply_mark(cx.current_expansion.mark));\n+        expr.span = expr.span.apply_mark(cx.current_expansion.mark);\n         expr\n     });\n "}, {"sha": "bbfde736ef0801f0043e4e872f8339e40f2edb6f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "patch": "@@ -1383,7 +1383,7 @@ impl Folder for Marker {\n     }\n \n     fn new_span(&mut self, span: Span) -> Span {\n-        span.with_ctxt(span.ctxt().apply_mark(self.0))\n+        span.apply_mark(self.0)\n     }\n \n     fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac {"}, {"sha": "1cdb6b0e5c902692f8130ce6f6839ca301cc6ce7", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "patch": "@@ -156,7 +156,7 @@ pub fn transcribe(cx: &ExtCtxt,\n                         if let NtTT(ref tt) = **nt {\n                             result.push(tt.clone().into());\n                         } else {\n-                            sp = sp.with_ctxt(sp.ctxt().apply_mark(cx.current_expansion.mark));\n+                            sp = sp.apply_mark(cx.current_expansion.mark);\n                             let token = TokenTree::Token(sp, Token::interpolated((**nt).clone()));\n                             result.push(token.into());\n                         }\n@@ -167,13 +167,13 @@ pub fn transcribe(cx: &ExtCtxt,\n                 } else {\n                     let ident =\n                         Ident::new(ident.name, ident.span.apply_mark(cx.current_expansion.mark));\n-                    sp = sp.with_ctxt(sp.ctxt().apply_mark(cx.current_expansion.mark));\n+                    sp = sp.apply_mark(cx.current_expansion.mark);\n                     result.push(TokenTree::Token(sp, token::Dollar).into());\n                     result.push(TokenTree::Token(sp, token::Token::from_ast_ident(ident)).into());\n                 }\n             }\n             quoted::TokenTree::Delimited(mut span, delimited) => {\n-                span = span.with_ctxt(span.ctxt().apply_mark(cx.current_expansion.mark));\n+                span = span.apply_mark(cx.current_expansion.mark);\n                 stack.push(Frame::Delimited { forest: delimited, idx: 0, span: span });\n                 result_stack.push(mem::replace(&mut result, Vec::new()));\n             }"}, {"sha": "a46f3f0e56dad7d3a7fb1fde5ed4736da8817c0f", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "patch": "@@ -35,7 +35,7 @@ pub fn expand_assert<'cx>(\n         None\n     };\n \n-    let sp = sp.with_ctxt(sp.ctxt().apply_mark(cx.current_expansion.mark));\n+    let sp = sp.apply_mark(cx.current_expansion.mark);\n     let panic_call = Mac_ {\n         path: Path::from_ident(sp, Ident::from_str(\"panic\")),\n         tts: if let Some(ts) = custom_msg_args {"}, {"sha": "6acc578d07e783040ba0aec680b6b242f4d008c0", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "patch": "@@ -24,7 +24,7 @@ pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n                        -> Box<base::MacResult + 'static> {\n-    let sp = sp.with_ctxt(sp.ctxt().apply_mark(cx.current_expansion.mark));\n+    let sp = sp.apply_mark(cx.current_expansion.mark);\n     let mut p = cx.new_parser_from_tts(tts);\n     let cfg = panictry!(p.parse_meta_item());\n "}, {"sha": "6c085528a6632e4ac17091a68399dab6d1c79928", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "patch": "@@ -57,6 +57,6 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n             }\n         }\n     }\n-    let sp = sp.with_ctxt(sp.ctxt().apply_mark(cx.current_expansion.mark));\n+    let sp = sp.apply_mark(cx.current_expansion.mark);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&accumulator)))\n }"}, {"sha": "4e1af108ab4fa038765d01da23b0977a3d5922ce", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "patch": "@@ -32,7 +32,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n         Some(v) => v,\n     };\n \n-    let sp = sp.with_ctxt(sp.ctxt().apply_mark(cx.current_expansion.mark));\n+    let sp = sp.apply_mark(cx.current_expansion.mark);\n     let e = match env::var(&*var.as_str()) {\n         Err(..) => {\n             let lt = cx.lifetime(sp, keywords::StaticLifetime.ident());"}, {"sha": "c78decb1eb9d0bc2983a94c75974fe9c8e4a0a22", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "patch": "@@ -641,7 +641,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                   ty: &ArgumentType,\n                   arg: ast::Ident)\n                   -> P<ast::Expr> {\n-        sp = sp.with_ctxt(sp.ctxt().apply_mark(ecx.current_expansion.mark));\n+        sp = sp.apply_mark(ecx.current_expansion.mark);\n         let arg = ecx.expr_ident(sp, arg);\n         let trait_ = match *ty {\n             Placeholder(ref tyname) => {\n@@ -678,7 +678,7 @@ pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt,\n                                mut sp: Span,\n                                tts: &[tokenstream::TokenTree])\n                                -> Box<base::MacResult + 'cx> {\n-    sp = sp.with_ctxt(sp.ctxt().apply_mark(ecx.current_expansion.mark));\n+    sp = sp.apply_mark(ecx.current_expansion.mark);\n     match parse_args(ecx, sp, tts) {\n         Some((efmt, args, names)) => {\n             MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names))\n@@ -700,7 +700,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     let arg_types: Vec<_> = (0..args.len()).map(|_| Vec::new()).collect();\n     let arg_unique_types: Vec<_> = (0..args.len()).map(|_| Vec::new()).collect();\n     let mut macsp = ecx.call_site();\n-    macsp = macsp.with_ctxt(macsp.ctxt().apply_mark(ecx.current_expansion.mark));\n+    macsp = macsp.apply_mark(ecx.current_expansion.mark);\n     let msg = \"format argument must be a string literal.\";\n     let fmt = match expr_to_spanned_string(ecx, efmt, msg) {\n         Some(fmt) => fmt,"}, {"sha": "d684e8b4ffea5a4894428fa73f587199863b905e", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ad9723181d30dcf7531b0fb0fb975d6590f4c0/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "patch": "@@ -18,7 +18,7 @@ use syntax::codemap::{ExpnInfo, NameAndSpan, MacroAttribute, respan};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n-use syntax::ext::hygiene::{Mark, SyntaxContext};\n+use syntax::ext::hygiene::Mark;\n use syntax::fold::Folder;\n use syntax::parse::ParseSess;\n use syntax::ptr::P;\n@@ -371,7 +371,7 @@ fn mk_registrar(cx: &mut ExtCtxt,\n             allow_internal_unsafe: false,\n         }\n     });\n-    let span = DUMMY_SP.with_ctxt(SyntaxContext::empty().apply_mark(mark));\n+    let span = DUMMY_SP.apply_mark(mark);\n \n     let proc_macro = Ident::from_str(\"proc_macro\");\n     let krate = cx.item(span,"}]}