{"sha": "78d11b899b6ec4d2ed8c18499c1213fecd3c6424", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZDExYjg5OWI2ZWM0ZDJlZDhjMTg0OTljMTIxM2ZlY2QzYzY0MjQ=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-13T22:27:21Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-13T22:31:39Z"}, "message": "Clean up various bugs with trait parsing.", "tree": {"sha": "287e005e4a9ae8c2c40420d5e30827414dbad40f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/287e005e4a9ae8c2c40420d5e30827414dbad40f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78d11b899b6ec4d2ed8c18499c1213fecd3c6424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78d11b899b6ec4d2ed8c18499c1213fecd3c6424", "html_url": "https://github.com/rust-lang/rust/commit/78d11b899b6ec4d2ed8c18499c1213fecd3c6424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78d11b899b6ec4d2ed8c18499c1213fecd3c6424/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a63b2100ed69b14e929671430101cc786f41ea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a63b2100ed69b14e929671430101cc786f41ea7", "html_url": "https://github.com/rust-lang/rust/commit/5a63b2100ed69b14e929671430101cc786f41ea7"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "5effab9439777d6bd138cc02eb2e6283a0595ff8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/78d11b899b6ec4d2ed8c18499c1213fecd3c6424/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d11b899b6ec4d2ed8c18499c1213fecd3c6424/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=78d11b899b6ec4d2ed8c18499c1213fecd3c6424", "patch": "@@ -279,41 +279,46 @@ class parser {\n         do self.parse_unspanned_seq(token::LBRACE, token::RBRACE,\n                                     seq_sep_none()) |p| {\n             let attrs = p.parse_outer_attributes();\n-            let flo = p.span.lo;\n+            let lo = p.span.lo;\n             let pur = p.parse_fn_purity();\n+            // NB: at the moment, trait methods are public by default; this\n+            // could change.\n+            let vis = p.parse_visibility(public);\n             let ident = p.parse_method_name();\n             let tps = p.parse_ty_params();\n-            let d = p.parse_ty_fn_decl(pur), fhi = p.last_span.hi;\n-            #debug[\"parse_trait_methods(): trait method ends in %s\",\n-                   token_to_str(self.reader, self.token)];\n-            alt self.token {\n+            let d = p.parse_ty_fn_decl(pur);\n+            let hi = p.last_span.hi;\n+            #debug[\"parse_trait_methods(): trait method signature ends in \\\n+                    `%s`\",\n+                   token_to_str(p.reader, p.token)];\n+            alt p.token {\n               token::SEMI {\n-                self.bump();\n+                p.bump();\n+                #debug[\"parse_trait_methods(): parsing required method\"];\n+                // NB: at the moment, visibility annotations on required\n+                // methods are ignored; this could change.\n                 required({ident: ident, attrs: attrs,\n                           decl: {purity: pur with d}, tps: tps,\n-                          span: mk_sp(flo, fhi)})\n+                          span: mk_sp(lo, hi)})\n               }\n               token::LBRACE {\n-                self.bump();\n+                #debug[\"parse_trait_methods(): parsing provided method\"];\n                 let (inner_attrs, body) =\n-                    self.parse_inner_attrs_and_block(true);\n+                    p.parse_inner_attrs_and_block(true);\n                 let attrs = vec::append(attrs, inner_attrs);\n-                self.eat(token::RBRACE);\n                 provided(@{ident: ident,\n                            attrs: attrs,\n                            tps: tps,\n                            decl: d,\n                            body: body,\n-                           id: self.get_id(),\n-                           span: mk_sp(flo, fhi),\n-                           self_id: self.get_id(),\n-                           // Provided traits methods always public for now\n-                           vis: public})\n+                           id: p.get_id(),\n+                           span: mk_sp(lo, hi),\n+                           self_id: p.get_id(),\n+                           vis: vis})\n               }\n \n-              _ { self.fatal(\"expected `;` or `}` \\\n-                              but found `\"\n-                             + token_to_str(self.reader, self.token) + \"`\");\n+              _ { p.fatal(\"expected `;` or `}` but found `\" +\n+                          token_to_str(p.reader, p.token) + \"`\");\n                 }\n             }\n         }"}]}