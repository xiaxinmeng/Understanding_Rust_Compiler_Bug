{"sha": "5229571a059a21be2f4a1d87a6641ca855e31143", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMjk1NzFhMDU5YTIxYmUyZjRhMWQ4N2E2NjQxY2E4NTVlMzExNDM=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2020-10-27T22:32:50Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2020-10-27T23:42:02Z"}, "message": "Address comments", "tree": {"sha": "e2d848ce739755791ecfd33cf08e16d3579508fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2d848ce739755791ecfd33cf08e16d3579508fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5229571a059a21be2f4a1d87a6641ca855e31143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5229571a059a21be2f4a1d87a6641ca855e31143", "html_url": "https://github.com/rust-lang/rust/commit/5229571a059a21be2f4a1d87a6641ca855e31143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5229571a059a21be2f4a1d87a6641ca855e31143/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0ae24e100392dd9958f2717df364552d34d7914", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ae24e100392dd9958f2717df364552d34d7914", "html_url": "https://github.com/rust-lang/rust/commit/f0ae24e100392dd9958f2717df364552d34d7914"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "65d20190c0db5430aa31df321de6e34da7693400", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5229571a059a21be2f4a1d87a6641ca855e31143/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5229571a059a21be2f4a1d87a6641ca855e31143/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5229571a059a21be2f4a1d87a6641ca855e31143", "patch": "@@ -3883,7 +3883,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n  \"chalk-ir\",\n- \"either\",\n  \"measureme 9.0.0\",\n  \"polonius-engine\",\n  \"rustc-rayon-core\","}, {"sha": "66532ea02f3681fa08db3fe6276b954b7866fa54", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5229571a059a21be2f4a1d87a6641ca855e31143/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5229571a059a21be2f4a1d87a6641ca855e31143/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=5229571a059a21be2f4a1d87a6641ca855e31143", "patch": "@@ -8,7 +8,6 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n-either = \"1.5.0\"\n rustc_arena = { path = \"../rustc_arena\" }\n bitflags = \"1.2.1\"\n tracing = \"0.1\""}, {"sha": "564028c33b172f74744d02b53ac7e27c35d32c92", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5229571a059a21be2f4a1d87a6641ca855e31143/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5229571a059a21be2f4a1d87a6641ca855e31143/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=5229571a059a21be2f4a1d87a6641ca855e31143", "patch": "@@ -5,8 +5,6 @@\n use self::InferTy::*;\n use self::TyKind::*;\n \n-use either::Either;\n-\n use crate::infer::canonical::Canonical;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::{\n@@ -396,11 +394,13 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     #[inline]\n     pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         match self.tupled_upvars_ty().kind() {\n-            TyKind::Error(_) => Either::Left(std::iter::empty()),\n-            TyKind::Tuple(..) => Either::Right(self.tupled_upvars_ty().tuple_fields()),\n+            TyKind::Error(_) => None,\n+            TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),\n             TyKind::Infer(_) => bug!(\"upvar_tys called before capture types are inferred\"),\n             ty => bug!(\"Unexpected representation of upvar types tuple {:?}\", ty),\n         }\n+        .into_iter()\n+        .flatten()\n     }\n \n     /// Returns the tuple type representing the upvars for this closure.\n@@ -531,11 +531,13 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     #[inline]\n     pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         match self.tupled_upvars_ty().kind() {\n-            TyKind::Error(_) => Either::Left(std::iter::empty()),\n-            TyKind::Tuple(..) => Either::Right(self.tupled_upvars_ty().tuple_fields()),\n+            TyKind::Error(_) => None,\n+            TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),\n             TyKind::Infer(_) => bug!(\"upvar_tys called before capture types are inferred\"),\n             ty => bug!(\"Unexpected representation of upvar types tuple {:?}\", ty),\n         }\n+        .into_iter()\n+        .flatten()\n     }\n \n     /// Returns the tuple type representing the upvars for this generator.\n@@ -683,10 +685,19 @@ impl<'tcx> UpvarSubsts<'tcx> {\n     /// empty iterator is returned.\n     #[inline]\n     pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        match self {\n-            UpvarSubsts::Closure(substs) => Either::Left(substs.as_closure().upvar_tys()),\n-            UpvarSubsts::Generator(substs) => Either::Right(substs.as_generator().upvar_tys()),\n+        let tupled_tys = match self {\n+            UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),\n+            UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),\n+        };\n+\n+        match tupled_tys.kind() {\n+            TyKind::Error(_) => None,\n+            TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),\n+            TyKind::Infer(_) => bug!(\"upvar_tys called before capture types are inferred\"),\n+            ty => bug!(\"Unexpected representation of upvar types tuple {:?}\", ty),\n         }\n+        .into_iter()\n+        .flatten()\n     }\n \n     #[inline]"}]}