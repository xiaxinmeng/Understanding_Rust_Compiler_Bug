{"sha": "f4af3b015f7192d4dab33b8d4ee984b7b258037e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YWYzYjAxNWY3MTkyZDRkYWIzM2I4ZDRlZTk4NGI3YjI1ODAzN2U=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-22T17:23:30Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:05Z"}, "message": "Refactor to remove explicit integer type matching", "tree": {"sha": "36660ecf80f2295bad7aef38403ee72207acba17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36660ecf80f2295bad7aef38403ee72207acba17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4af3b015f7192d4dab33b8d4ee984b7b258037e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4af3b015f7192d4dab33b8d4ee984b7b258037e", "html_url": "https://github.com/rust-lang/rust/commit/f4af3b015f7192d4dab33b8d4ee984b7b258037e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4af3b015f7192d4dab33b8d4ee984b7b258037e/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "838997236e7c91e706f8d9f1f884d958c1bcaee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/838997236e7c91e706f8d9f1f884d958c1bcaee7", "html_url": "https://github.com/rust-lang/rust/commit/838997236e7c91e706f8d9f1f884d958c1bcaee7"}], "stats": {"total": 68, "additions": 22, "deletions": 46}, "files": [{"sha": "281dc624a62aabeacecb89f80d9ed3c2b90f80c9", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 22, "deletions": 46, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f4af3b015f7192d4dab33b8d4ee984b7b258037e/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4af3b015f7192d4dab33b8d4ee984b7b258037e/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=f4af3b015f7192d4dab33b8d4ee984b7b258037e", "patch": "@@ -138,7 +138,6 @@ impl<'a, 'tcx> FromIterator<Vec<&'a Pattern<'tcx>>> for Matrix<'a, 'tcx> {\n     }\n }\n \n-//NOTE: appears to be the only place other then InferCtxt to contain a ParamEnv\n pub struct MatchCheckCtxt<'a, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     /// The module in which the match occurs. This is necessary for\n@@ -470,48 +469,24 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 ConstantRange(endpoint('\\u{E000}'), endpoint('\\u{10FFFF}'), RangeEnd::Included),\n             ]\n         }\n-        ty::TyInt(int_ty) if exhaustive_integer_patterns => {\n-            use syntax::ast::IntTy::*;\n-            let min_max_ty = |sty| {\n-                let size = cx.tcx.layout_of(ty::ParamEnv::reveal_all().and(sty))\n-                                  .unwrap().size.bits() as i128;\n-                let min = (1i128 << (size - 1)).wrapping_neg();\n-                let max = (1i128 << (size - 1)).wrapping_sub(1);\n-                (min as u128, max as u128, sty)\n-            };\n-            let (min, max, ty) = match int_ty {\n-                Isize => min_max_ty(cx.tcx.types.isize),\n-                I8    => min_max_ty(cx.tcx.types.i8),\n-                I16   => min_max_ty(cx.tcx.types.i16),\n-                I32   => min_max_ty(cx.tcx.types.i32),\n-                I64   => min_max_ty(cx.tcx.types.i64),\n-                I128  => min_max_ty(cx.tcx.types.i128),\n-            };\n+        ty::TyInt(_) if exhaustive_integer_patterns => {\n+            let size = cx.tcx.layout_of(ty::ParamEnv::reveal_all().and(pcx.ty))\n+                             .unwrap().size.bits() as i128;\n+            let min = (1i128 << (size - 1)).wrapping_neg();\n+            let max = (1i128 << (size - 1)).wrapping_sub(1);\n             value_constructors = true;\n-            vec![ConstantRange(ty::Const::from_bits(cx.tcx, min, ty),\n-                               ty::Const::from_bits(cx.tcx, max, ty),\n+            vec![ConstantRange(ty::Const::from_bits(cx.tcx, min as u128, pcx.ty),\n+                               ty::Const::from_bits(cx.tcx, max as u128, pcx.ty),\n                                RangeEnd::Included)]\n         }\n-        ty::TyUint(uint_ty) if exhaustive_integer_patterns => {\n-            use syntax::ast::UintTy::*;\n-            let min_max_ty = |sty| {\n-                let size = cx.tcx.layout_of(ty::ParamEnv::reveal_all().and(sty))\n-                                  .unwrap().size.bits() as u32;\n-                let shift = 1u128.overflowing_shl(size);\n-                let max = shift.0.wrapping_sub(1 + (shift.1 as u128));\n-                (0u128, max as u128, sty)\n-            };\n-            let (min, max, ty) = match uint_ty {\n-                Usize => min_max_ty(cx.tcx.types.usize),\n-                U8    => min_max_ty(cx.tcx.types.u8),\n-                U16   => min_max_ty(cx.tcx.types.u16),\n-                U32   => min_max_ty(cx.tcx.types.u32),\n-                U64   => min_max_ty(cx.tcx.types.u64),\n-                U128  => min_max_ty(cx.tcx.types.u128),\n-            };\n+        ty::TyUint(_) if exhaustive_integer_patterns => {\n+            let size = cx.tcx.layout_of(ty::ParamEnv::reveal_all().and(pcx.ty))\n+                             .unwrap().size.bits() as u32;\n+            let shift = 1u128.overflowing_shl(size);\n+            let max = shift.0.wrapping_sub(1 + (shift.1 as u128));\n             value_constructors = true;\n-            vec![ConstantRange(ty::Const::from_bits(cx.tcx, min, ty),\n-                               ty::Const::from_bits(cx.tcx, max, ty),\n+            vec![ConstantRange(ty::Const::from_bits(cx.tcx, 0u128, pcx.ty),\n+                               ty::Const::from_bits(cx.tcx, max as u128, pcx.ty),\n                                RangeEnd::Included)]\n         }\n         _ => {\n@@ -643,7 +618,7 @@ impl<'tcx> Interval<'tcx> {\n                     if let Some(hi) = hi.assert_bits(ty) {\n                         // Perform a shift if the underlying types are signed,\n                         // which makes the interval arithmetic simpler.\n-                        let (lo, hi) = Interval::offset_sign(ty, (lo, hi), true);\n+                        let (lo, hi) = Interval::offset_sign(ty, lo..=hi, true);\n                         // Make sure the interval is well-formed.\n                         return if lo > hi || lo == hi && *end == RangeEnd::Excluded {\n                             None\n@@ -665,7 +640,8 @@ impl<'tcx> Interval<'tcx> {\n         }\n     }\n \n-    fn offset_sign(ty: Ty<'tcx>, (lo, hi): (u128, u128), forwards: bool) -> (u128, u128) {\n+    fn offset_sign(ty: Ty<'tcx>, range: RangeInclusive<u128>, forwards: bool) -> (u128, u128) {\n+        let (lo, hi) = range.into_inner();\n         use syntax::ast::IntTy::*;\n         match ty.sty {\n             ty::TyInt(int_ty) => {\n@@ -720,23 +696,23 @@ fn ranges_subtract_pattern<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n             if pat_interval_lo > subrange_hi || subrange_lo > pat_interval_hi  {\n                 // The pattern doesn't intersect with the subrange at all,\n                 // so the subrange remains untouched.\n-                remaining_ranges.push((subrange_lo, subrange_hi));\n+                remaining_ranges.push(subrange_lo..=subrange_hi);\n             } else {\n                 if pat_interval_lo > subrange_lo {\n                     // The pattern intersects an upper section of the\n                     // subrange, so a lower section will remain.\n-                    remaining_ranges.push((subrange_lo, pat_interval_lo - 1));\n+                    remaining_ranges.push(subrange_lo..=(pat_interval_lo - 1));\n                 }\n                 if pat_interval_hi < subrange_hi {\n                     // The pattern intersects a lower section of the\n                     // subrange, so an upper section will remain.\n-                    remaining_ranges.push((pat_interval_hi + 1, subrange_hi));\n+                    remaining_ranges.push((pat_interval_hi + 1)..=subrange_hi);\n                 }\n             }\n         }\n         // Convert the remaining ranges from pairs to inclusive `ConstantRange`s.\n-        remaining_ranges.into_iter().map(|(lo, hi)| {\n-            let (lo, hi) = Interval::offset_sign(ty, (lo, hi), false);\n+        remaining_ranges.into_iter().map(|r| {\n+            let (lo, hi) = Interval::offset_sign(ty, r, false);\n             ConstantRange(ty::Const::from_bits(cx.tcx, lo, ty),\n                           ty::Const::from_bits(cx.tcx, hi, ty),\n                           RangeEnd::Included)"}]}