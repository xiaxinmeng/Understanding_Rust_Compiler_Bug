{"sha": "477fa75cfbdc923be366c75cb03b1e352f63c8e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3N2ZhNzVjZmJkYzkyM2JlMzY2Yzc1Y2IwM2IxZTM1MmY2M2M4ZTg=", "commit": {"author": {"name": "Aleksei Sidorov", "email": "gorthauer87@yandex.ru", "date": "2020-09-04T12:24:36Z"}, "committer": {"name": "Aleksei Sidorov", "email": "gorthauer87@yandex.ru", "date": "2020-09-04T12:24:36Z"}, "message": "Fix nitpicks", "tree": {"sha": "d8f6024891893f5c3ddf5f132b52a7a4ec3b6f4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8f6024891893f5c3ddf5f132b52a7a4ec3b6f4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/477fa75cfbdc923be366c75cb03b1e352f63c8e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/477fa75cfbdc923be366c75cb03b1e352f63c8e8", "html_url": "https://github.com/rust-lang/rust/commit/477fa75cfbdc923be366c75cb03b1e352f63c8e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/477fa75cfbdc923be366c75cb03b1e352f63c8e8/comments", "author": {"login": "alekseysidorov", "id": 83360, "node_id": "MDQ6VXNlcjgzMzYw", "avatar_url": "https://avatars.githubusercontent.com/u/83360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alekseysidorov", "html_url": "https://github.com/alekseysidorov", "followers_url": "https://api.github.com/users/alekseysidorov/followers", "following_url": "https://api.github.com/users/alekseysidorov/following{/other_user}", "gists_url": "https://api.github.com/users/alekseysidorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/alekseysidorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alekseysidorov/subscriptions", "organizations_url": "https://api.github.com/users/alekseysidorov/orgs", "repos_url": "https://api.github.com/users/alekseysidorov/repos", "events_url": "https://api.github.com/users/alekseysidorov/events{/privacy}", "received_events_url": "https://api.github.com/users/alekseysidorov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alekseysidorov", "id": 83360, "node_id": "MDQ6VXNlcjgzMzYw", "avatar_url": "https://avatars.githubusercontent.com/u/83360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alekseysidorov", "html_url": "https://github.com/alekseysidorov", "followers_url": "https://api.github.com/users/alekseysidorov/followers", "following_url": "https://api.github.com/users/alekseysidorov/following{/other_user}", "gists_url": "https://api.github.com/users/alekseysidorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/alekseysidorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alekseysidorov/subscriptions", "organizations_url": "https://api.github.com/users/alekseysidorov/orgs", "repos_url": "https://api.github.com/users/alekseysidorov/repos", "events_url": "https://api.github.com/users/alekseysidorov/events{/privacy}", "received_events_url": "https://api.github.com/users/alekseysidorov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7259cc82f362bd1cd00f47ff3ffc71be769162b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7259cc82f362bd1cd00f47ff3ffc71be769162b6", "html_url": "https://github.com/rust-lang/rust/commit/7259cc82f362bd1cd00f47ff3ffc71be769162b6"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "612c48466e4f004c6c719155f09b69b74beb2cb2", "filename": "crates/assists/src/handlers/replace_impl_trait_with_generic.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/477fa75cfbdc923be366c75cb03b1e352f63c8e8/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477fa75cfbdc923be366c75cb03b1e352f63c8e8/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs?ref=477fa75cfbdc923be366c75cb03b1e352f63c8e8", "patch": "@@ -5,13 +5,21 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Assist: replace_impl_trait_with_generic\n //\n // Replaces `impl Trait` function argument with the named generic.\n+//\n+// ```\n+// fn foo<G>(bar: <|>impl Bar) {}\n+// ```\n+// ->\n+// ```\n+// fn foo<B: Bar>(bar: B) {}\n+// ```\n pub(crate) fn replace_impl_trait_with_generic(\n     acc: &mut Assists,\n     ctx: &AssistContext,\n ) -> Option<()> {\n     let type_impl_trait = ctx.find_node_at_offset::<ast::ImplTraitType>()?;\n     let type_param = type_impl_trait.syntax().parent().and_then(ast::Param::cast)?;\n-    let type_fn = type_param.syntax().ancestors().nth(2).and_then(ast::Fn::cast)?;\n+    let type_fn = type_param.syntax().ancestors().find_map(ast::Fn::cast)?;\n \n     let impl_trait_ty = type_impl_trait\n         .syntax()\n@@ -27,7 +35,7 @@ pub(crate) fn replace_impl_trait_with_generic(\n         \"Replace impl trait with generic\",\n         target,\n         |edit| {\n-            let generic_letter = impl_trait_ty[..1].to_string();\n+            let generic_letter = impl_trait_ty.chars().next().unwrap().to_string();\n \n             let generic_param_list = type_fn\n                 .generic_param_list()\n@@ -36,7 +44,7 @@ pub(crate) fn replace_impl_trait_with_generic(\n \n             let new_type_fn = type_fn\n                 .replace_descendant::<ast::Type>(type_impl_trait.into(), make::ty(&generic_letter))\n-                .with_generic_params(generic_param_list);\n+                .with_generic_param_list(generic_param_list);\n \n             edit.replace_ast(type_fn.clone(), new_type_fn);\n         },\n@@ -103,8 +111,6 @@ mod tests {\n \n     #[test]\n     fn replace_impl_trait_with_empty_multiline_generic_params() {\n-        // FIXME: It would be more correct to place the generic parameter\n-        // on the next line after the left angle.\n         check_assist(\n             replace_impl_trait_with_generic,\n             r#\"\n@@ -147,8 +153,7 @@ mod tests {\n             fn foo<\n                 G: Foo,\n                 F,\n-                H,\n-                B: Bar,\n+                H, B: Bar,\n             >(bar: B) {}\n             \"#,\n         );"}, {"sha": "5b5454c72d23479569ee73e58c418bdd95a85523", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/477fa75cfbdc923be366c75cb03b1e352f63c8e8/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477fa75cfbdc923be366c75cb03b1e352f63c8e8/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=477fa75cfbdc923be366c75cb03b1e352f63c8e8", "patch": "@@ -48,7 +48,7 @@ impl ast::Fn {\n     }\n \n     #[must_use]\n-    pub fn with_generic_params(&self, generic_args: ast::GenericParamList) -> ast::Fn {\n+    pub fn with_generic_param_list(&self, generic_args: ast::GenericParamList) -> ast::Fn {\n         if let Some(old) = self.generic_param_list() {\n             return self.replace_descendant(old, generic_args);\n         }\n@@ -485,17 +485,7 @@ impl ast::GenericParamList {\n \n     #[must_use]\n     pub fn append_param(&self, item: ast::GenericParam) -> ast::GenericParamList {\n-        let is_multiline = self.syntax().text().contains_char('\\n');\n-        let ws;\n-        let space = if is_multiline {\n-            ws = tokens::WsBuilder::new(&format!(\n-                \"\\n{}    \",\n-                leading_indent(self.syntax()).unwrap_or_default()\n-            ));\n-            ws.ws()\n-        } else {\n-            tokens::single_space()\n-        };\n+        let space = tokens::single_space();\n \n         let mut to_insert: ArrayVec<[SyntaxElement; 4]> = ArrayVec::new();\n         if self.generic_params().next().is_some() {\n@@ -529,11 +519,6 @@ impl ast::GenericParamList {\n             };\n         };\n \n-        if !is_multiline {\n-            // don't insert comma before angle\n-            to_insert.pop();\n-        }\n-\n         let position = match self.generic_params().last() {\n             Some(it) => after_field!(it),\n             None => after_l_angle!(),"}]}