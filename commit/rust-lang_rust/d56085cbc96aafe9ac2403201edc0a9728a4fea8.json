{"sha": "d56085cbc96aafe9ac2403201edc0a9728a4fea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NjA4NWNiYzk2YWFmZTlhYzI0MDMyMDFlZGMwYTk3MjhhNGZlYTg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-06T21:56:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-05-01T12:32:11Z"}, "message": "Monomorphise try_execute_anon_query.", "tree": {"sha": "0e8d5c39306477ee3f54d12627866eba9993d014", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e8d5c39306477ee3f54d12627866eba9993d014"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d56085cbc96aafe9ac2403201edc0a9728a4fea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d56085cbc96aafe9ac2403201edc0a9728a4fea8", "html_url": "https://github.com/rust-lang/rust/commit/d56085cbc96aafe9ac2403201edc0a9728a4fea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d56085cbc96aafe9ac2403201edc0a9728a4fea8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85704a41dbba580a11c2ed59e8e306ec5a82c8f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/85704a41dbba580a11c2ed59e8e306ec5a82c8f0", "html_url": "https://github.com/rust-lang/rust/commit/85704a41dbba580a11c2ed59e8e306ec5a82c8f0"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "baf9ca9df7fb8d97cc6705ac448ea906a73c19b6", "filename": "src/librustc_query_system/query/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d56085cbc96aafe9ac2403201edc0a9728a4fea8/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56085cbc96aafe9ac2403201edc0a9728a4fea8/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fconfig.rs?ref=d56085cbc96aafe9ac2403201edc0a9728a4fea8", "patch": "@@ -25,6 +25,8 @@ pub trait QueryConfig<CTX> {\n }\n \n pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n+    pub anon: bool,\n+    pub dep_kind: CTX::DepKind,\n     pub eval_always: bool,\n \n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n@@ -103,6 +105,8 @@ where\n     Q: QueryDescription<CTX>,\n {\n     const VTABLE: QueryVtable<CTX, Q::Key, Q::Value> = QueryVtable {\n+        anon: Q::ANON,\n+        dep_kind: Q::DEP_KIND,\n         eval_always: Q::EVAL_ALWAYS,\n         compute: Q::compute,\n         hash_result: Q::hash_result,"}, {"sha": "f27c508fccfee377538e7949575190026bf1fb33", "filename": "src/librustc_query_system/query/plumbing.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d56085cbc96aafe9ac2403201edc0a9728a4fea8/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56085cbc96aafe9ac2403201edc0a9728a4fea8/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs?ref=d56085cbc96aafe9ac2403201edc0a9728a4fea8", "patch": "@@ -410,21 +410,7 @@ where\n     }\n \n     if Q::ANON {\n-        let prof_timer = tcx.profiler().query_provider();\n-\n-        let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n-            tcx.start_query(job.id, diagnostics, |tcx| {\n-                tcx.dep_graph().with_anon_task(Q::DEP_KIND, || Q::compute(tcx, key))\n-            })\n-        });\n-\n-        prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n-\n-        tcx.dep_graph().read_index(dep_node_index);\n-\n-        if unlikely!(!diagnostics.is_empty()) {\n-            tcx.store_diagnostics_for_anon_node(dep_node_index, diagnostics);\n-        }\n+        let (result, dep_node_index) = try_execute_anon_query(tcx, key, job.id, &Q::VTABLE);\n \n         return job.complete(tcx, result, dep_node_index);\n     }\n@@ -461,6 +447,35 @@ where\n     result\n }\n \n+fn try_execute_anon_query<CTX, K, V>(\n+    tcx: CTX,\n+    key: K,\n+    job_id: QueryJobId<CTX::DepKind>,\n+    query: &QueryVtable<CTX, K, V>,\n+) -> (V, DepNodeIndex)\n+where\n+    CTX: QueryContext,\n+{\n+    debug_assert!(query.anon);\n+    let prof_timer = tcx.profiler().query_provider();\n+\n+    let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n+        tcx.start_query(job_id, diagnostics, |tcx| {\n+            tcx.dep_graph().with_anon_task(query.dep_kind, || query.compute(tcx, key))\n+        })\n+    });\n+\n+    prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n+\n+    tcx.dep_graph().read_index(dep_node_index);\n+\n+    if unlikely!(!diagnostics.is_empty()) {\n+        tcx.store_diagnostics_for_anon_node(dep_node_index, diagnostics);\n+    }\n+\n+    (result, dep_node_index)\n+}\n+\n fn load_from_disk_and_cache_in_memory<CTX, K, V>(\n     tcx: CTX,\n     key: K,"}]}