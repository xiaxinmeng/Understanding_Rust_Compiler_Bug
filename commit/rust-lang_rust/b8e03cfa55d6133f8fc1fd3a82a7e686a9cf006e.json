{"sha": "b8e03cfa55d6133f8fc1fd3a82a7e686a9cf006e", "node_id": "C_kwDOAAsO6NoAKGI4ZTAzY2ZhNTVkNjEzM2Y4ZmMxZmQzYTgyYTdlNjg2YTljZjAwNmU", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-09-22T04:30:14Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:27Z"}, "message": "use consistent names", "tree": {"sha": "5a896488efa8840f1a05ef06e4fc8ab84bca8f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a896488efa8840f1a05ef06e4fc8ab84bca8f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8e03cfa55d6133f8fc1fd3a82a7e686a9cf006e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e03cfa55d6133f8fc1fd3a82a7e686a9cf006e", "html_url": "https://github.com/rust-lang/rust/commit/b8e03cfa55d6133f8fc1fd3a82a7e686a9cf006e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8e03cfa55d6133f8fc1fd3a82a7e686a9cf006e/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "c24a87315af884680332f850753b3eeef18c22c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c24a87315af884680332f850753b3eeef18c22c8", "html_url": "https://github.com/rust-lang/rust/commit/c24a87315af884680332f850753b3eeef18c22c8"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "18e1233fa84fd3bb0f4b127fd3cf24268f331f7c", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8e03cfa55d6133f8fc1fd3a82a7e686a9cf006e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e03cfa55d6133f8fc1fd3a82a7e686a9cf006e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=b8e03cfa55d6133f8fc1fd3a82a7e686a9cf006e", "patch": "@@ -1862,11 +1862,11 @@ impl CheckAttrVisitor<'_> {\n \n         match std::fs::File::open(&file) {\n             Ok(_) => true,\n-            Err(err) => {\n+            Err(error) => {\n                 self.tcx.sess.emit_err(DebugVisualizerUnreadable {\n                     span: meta_item.span,\n                     file: &file,\n-                    error: err,\n+                    error,\n                 });\n                 false\n             }"}, {"sha": "2b090e036fe99b2ee802bb20370b4699aaa51e85", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8e03cfa55d6133f8fc1fd3a82a7e686a9cf006e/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e03cfa55d6133f8fc1fd3a82a7e686a9cf006e/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=b8e03cfa55d6133f8fc1fd3a82a7e686a9cf006e", "patch": "@@ -35,8 +35,8 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n \n     fn check_for_lang(&mut self, actual_target: Target, hir_id: HirId) {\n         let attrs = self.tcx.hir().attrs(hir_id);\n-        if let Some((value, span)) = extract(&attrs) {\n-            match ITEM_REFS.get(&value).cloned() {\n+        if let Some((name, span)) = extract(&attrs) {\n+            match ITEM_REFS.get(&name).cloned() {\n                 // Known lang item with attribute on correct target.\n                 Some((item_index, expected_target)) if actual_target == expected_target => {\n                     self.collect_item_extended(item_index, hir_id, span);\n@@ -45,14 +45,14 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n                 Some((_, expected_target)) => {\n                     self.tcx.sess.emit_err(LangItemOnIncorrectTarget {\n                         span,\n-                        name: value,\n+                        name,\n                         expected_target,\n                         actual_target,\n                     });\n                 }\n                 // Unknown lang item.\n                 _ => {\n-                    self.tcx.sess.emit_err(UnknownLangItem { span, name: value });\n+                    self.tcx.sess.emit_err(UnknownLangItem { span, name });\n                 }\n             }\n         }"}]}