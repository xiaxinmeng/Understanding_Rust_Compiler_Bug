{"sha": "010d90202102e4e30ecd670e8500170247ef74a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMGQ5MDIwMjEwMmU0ZTMwZWNkNjcwZTg1MDAxNzAyNDdlZjc0YTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-06T09:41:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-06T09:41:14Z"}, "message": "Merge #2726\n\n2726: Improve profiling output when duration filter is specified r=matklad a=michalt\n\nIn particular:\r\n\r\n  - Use strict inequality for comparisons, since that's what the filter\r\n    syntax supports.\r\n\r\n  - Convert to millis for comparisons, since that's the unit used both\r\n    for the filter and when printing.\r\n\r\nNow something like `RA_PROFILE='*>0'` will only print things that took\r\nat least 1ms (when rounded to millis).\r\n\r\nSigned-off-by: Michal Terepeta <michal.terepeta@gmail.com>\n\nCo-authored-by: Michal Terepeta <michal.terepeta@gmail.com>", "tree": {"sha": "dff3314d64d7671a37b577b0f059d0cc0ad966f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dff3314d64d7671a37b577b0f059d0cc0ad966f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/010d90202102e4e30ecd670e8500170247ef74a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeEwC6CRBK7hj4Ov3rIwAAdHIIAEN3VdlWEWUb+mhd/mK/D3uV\nKpjRRV5fIR/3/9HT5rOsdvTr97qj0jkRZm/C/Xbgu+uePAn6YpV0msuIz1TdaMAD\nyTaW1hiA+C0T1xoZZt/u33em6ExQ+JmLZoaRuV4PgbygD9O5U8XtG3ZR3uguyoia\ntQE72njHyVrvl2qHKaxPSVconUpCmwPYNpY8G3qWYSeqkW+Fc6pww7IfXv2yBS1+\nA7hVZjKB1m/zGGfY6/qxMYnPtofsLeR3sQ/3lpvWkQGp8mPuPscaOmjAX0HxI1yE\nnTKgNhfpvswb/UKuVmboCEmzGvdl6pjDg+1ouH91y/G/p4gqUDvIMBOwqSiUZpo=\n=gOB5\n-----END PGP SIGNATURE-----\n", "payload": "tree dff3314d64d7671a37b577b0f059d0cc0ad966f4\nparent b86ab5257e0760c3d563a70447cea01cb41bbf32\nparent bc91120b7c0da775a81139f91cd778258f2bf80c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1578303674 +0000\ncommitter GitHub <noreply@github.com> 1578303674 +0000\n\nMerge #2726\n\n2726: Improve profiling output when duration filter is specified r=matklad a=michalt\n\nIn particular:\r\n\r\n  - Use strict inequality for comparisons, since that's what the filter\r\n    syntax supports.\r\n\r\n  - Convert to millis for comparisons, since that's the unit used both\r\n    for the filter and when printing.\r\n\r\nNow something like `RA_PROFILE='*>0'` will only print things that took\r\nat least 1ms (when rounded to millis).\r\n\r\nSigned-off-by: Michal Terepeta <michal.terepeta@gmail.com>\n\nCo-authored-by: Michal Terepeta <michal.terepeta@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/010d90202102e4e30ecd670e8500170247ef74a6", "html_url": "https://github.com/rust-lang/rust/commit/010d90202102e4e30ecd670e8500170247ef74a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/010d90202102e4e30ecd670e8500170247ef74a6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b86ab5257e0760c3d563a70447cea01cb41bbf32", "url": "https://api.github.com/repos/rust-lang/rust/commits/b86ab5257e0760c3d563a70447cea01cb41bbf32", "html_url": "https://github.com/rust-lang/rust/commit/b86ab5257e0760c3d563a70447cea01cb41bbf32"}, {"sha": "bc91120b7c0da775a81139f91cd778258f2bf80c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc91120b7c0da775a81139f91cd778258f2bf80c", "html_url": "https://github.com/rust-lang/rust/commit/bc91120b7c0da775a81139f91cd778258f2bf80c"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "6dde304b1a594a8462bac9fe4645ef03f5d8513f", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/010d90202102e4e30ecd670e8500170247ef74a6/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010d90202102e4e30ecd670e8500170247ef74a6/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=010d90202102e4e30ecd670e8500170247ef74a6", "patch": "@@ -197,7 +197,10 @@ impl Drop for Profiler {\n                     if level == 0 {\n                         let stdout = stderr();\n                         let longer_than = stack.filter_data.longer_than;\n-                        if duration >= longer_than {\n+                        // Convert to millis for comparison to avoid problems with rounding\n+                        // (otherwise we could print `0ms` despite user's `>0` filter when\n+                        // `duration` is just a few nanos).\n+                        if duration.as_millis() > longer_than.as_millis() {\n                             print(0, &stack.messages, &mut stdout.lock(), longer_than, None);\n                         }\n                         stack.messages.clear();\n@@ -226,7 +229,7 @@ fn print(\n             continue;\n         }\n         accounted_for += duration;\n-        if duration >= longer_than {\n+        if duration.as_millis() > longer_than.as_millis() {\n             writeln!(out, \"{}{:5}ms - {}\", indent, duration.as_millis(), msg)\n                 .expect(\"printing profiling info to stdout\");\n \n@@ -251,8 +254,9 @@ fn print(\n \n     if let Some(total) = total {\n         if let Some(unaccounted) = total.checked_sub(accounted_for) {\n-            if unaccounted >= longer_than && last > 0 {\n-                writeln!(out, \"{}{:5}ms - ???\", indent, unaccounted.as_millis())\n+            let unaccounted_millis = unaccounted.as_millis();\n+            if unaccounted_millis > longer_than.as_millis() && unaccounted_millis > 0 && last > 0 {\n+                writeln!(out, \"{}{:5}ms - ???\", indent, unaccounted_millis)\n                     .expect(\"printing profiling info to stdout\");\n             }\n         }\n@@ -356,4 +360,21 @@ mod tests {\n     fn profiling_function2() {\n         let _p = profile(\"profile2\");\n     }\n+\n+    #[test]\n+    fn test_longer_than() {\n+        let mut result = vec![];\n+        let msgs = vec![\n+            Message { level: 1, duration: Duration::from_nanos(3), message: \"bar\".to_owned() },\n+            Message { level: 1, duration: Duration::from_nanos(2), message: \"bar\".to_owned() },\n+            Message { level: 0, duration: Duration::from_millis(1), message: \"foo\".to_owned() },\n+        ];\n+        print(0, &msgs, &mut result, Duration::from_millis(0), Some(Duration::from_millis(1)));\n+        // The calls to `bar` are so short that they'll be rounded to 0ms and should get collapsed\n+        // when printing.\n+        assert_eq!(\n+            std::str::from_utf8(&result).unwrap(),\n+            \"    1ms - foo\\n        0ms - bar (2 calls)\\n\"\n+        );\n+    }\n }"}]}