{"sha": "b510ea1487286123c00f425b368a8328637ac947", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MTBlYTE0ODcyODYxMjNjMDBmNDI1YjM2OGE4MzI4NjM3YWM5NDc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-16T22:39:20Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-18T22:32:45Z"}, "message": "Clean up unused argument/variable warnings.", "tree": {"sha": "e20e0b43c74dc7ce555a6366c33c9a93f01643c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e20e0b43c74dc7ce555a6366c33c9a93f01643c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b510ea1487286123c00f425b368a8328637ac947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b510ea1487286123c00f425b368a8328637ac947", "html_url": "https://github.com/rust-lang/rust/commit/b510ea1487286123c00f425b368a8328637ac947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b510ea1487286123c00f425b368a8328637ac947/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3727559c6eee465893f400ec4edad77be868f3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3727559c6eee465893f400ec4edad77be868f3c", "html_url": "https://github.com/rust-lang/rust/commit/a3727559c6eee465893f400ec4edad77be868f3c"}], "stats": {"total": 76, "additions": 22, "deletions": 54}, "files": [{"sha": "ed1ce3458a26b1c0cbc0a330fdd3bc8d6c297ccd", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -29,7 +29,6 @@ impl FreeRegionMap {\n     }\n \n     pub fn relate_free_regions_from_implications<'tcx>(&mut self,\n-                                                       tcx: &ty::ctxt<'tcx>,\n                                                        implications: &[Implication<'tcx>])\n     {\n         for implication in implications {"}, {"sha": "30242dac695d960008aee4e4e2e946826e88d0ee", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -187,7 +187,6 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n                        b_vid: ty::TyVid)\n                        -> RelateResult<'tcx, ()>\n     {\n-        let tcx = self.infcx.tcx;\n         let mut stack = Vec::new();\n         stack.push((a_ty, dir, b_vid));\n         loop {"}, {"sha": "d6001270d1c7ac73cda7392db4d126a6e9fef17a", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -46,8 +46,6 @@ impl<'a,'tcx> HigherRankedRelations<'a,'tcx> for CombineFields<'a,'tcx> {\n                             -> RelateResult<'tcx, Binder<T>>\n         where T: Relate<'a,'tcx>\n     {\n-        let tcx = self.infcx.tcx;\n-\n         debug!(\"higher_ranked_sub(a={}, b={})\",\n                a.repr(), b.repr());\n "}, {"sha": "3dbb3dfae2f00553741cb23c65343f57aed0b884", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -418,7 +418,6 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n     }\n \n     fn pat_ty(&self, pat: &ast::Pat) -> McResult<Ty<'tcx>> {\n-        let tcx = self.typer.tcx();\n         let base_ty = try!(self.typer.node_ty(pat.id));\n         // FIXME (Issue #18207): This code detects whether we are\n         // looking at a `ref x`, and if so, figures out what the type"}, {"sha": "622ed134a6091c8ba64bb1a7c8cfcfd4b1f4c376", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -81,7 +81,6 @@ fn overlap(selcx: &mut SelectionContext,\n     debug!(\"overlap: subtraitref check succeeded\");\n \n     // Are any of the obligations unsatisfiable? If so, no overlap.\n-    let tcx = selcx.tcx();\n     let infcx = selcx.infcx();\n     let opt_failing_obligation =\n         a_obligations.iter()\n@@ -155,7 +154,7 @@ fn impl_trait_ref_and_oblig<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n     let Normalized { value: predicates, obligations: normalization_obligations2 } =\n         project::normalize(selcx, ObligationCause::dummy(), &predicates);\n     let impl_obligations =\n-        util::predicates_for_generics(selcx.tcx(), ObligationCause::dummy(), 0, &predicates);\n+        util::predicates_for_generics(ObligationCause::dummy(), 0, &predicates);\n \n     let impl_obligations: Vec<_> =\n         impl_obligations.into_iter()"}, {"sha": "418c4522cd9b39ade7a13ac733a2710d4cf03e77", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -171,12 +171,11 @@ impl<'tcx> FulfillmentContext<'tcx> {\n     }\n \n     pub fn register_region_obligation<'a>(&mut self,\n-                                          infcx: &InferCtxt<'a,'tcx>,\n                                           t_a: Ty<'tcx>,\n                                           r_b: ty::Region,\n                                           cause: ObligationCause<'tcx>)\n     {\n-        register_region_obligation(infcx.tcx, t_a, r_b, cause, &mut self.region_obligations);\n+        register_region_obligation(t_a, r_b, cause, &mut self.region_obligations);\n     }\n \n     pub fn register_predicate_obligation<'a>(&mut self,\n@@ -366,7 +365,6 @@ fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n      * type inference.\n      */\n \n-    let tcx = selcx.tcx();\n     match obligation.predicate {\n         ty::Predicate::Trait(ref data) => {\n             let trait_obligation = obligation.with(data.clone());\n@@ -430,7 +428,7 @@ fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n                         CodeSelectionError(Unimplemented)));\n             } else {\n                 let ty::OutlivesPredicate(t_a, r_b) = binder.0;\n-                register_region_obligation(tcx, t_a, r_b,\n+                register_region_obligation(t_a, r_b,\n                                            obligation.cause.clone(),\n                                            region_obligations);\n             }\n@@ -471,8 +469,7 @@ impl<'tcx> Repr for RegionObligation<'tcx> {\n     }\n }\n \n-fn register_region_obligation<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                    t_a: Ty<'tcx>,\n+fn register_region_obligation<'tcx>(t_a: Ty<'tcx>,\n                                     r_b: ty::Region,\n                                     cause: ObligationCause<'tcx>,\n                                     region_obligations: &mut NodeMap<Vec<RegionObligation<'tcx>>>)"}, {"sha": "551bafc57161ae192ea9f947a635717082f3bb20", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -300,12 +300,11 @@ pub struct VtableObjectData<'tcx> {\n }\n \n /// Creates predicate obligations from the generic bounds.\n-pub fn predicates_for_generics<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                     cause: ObligationCause<'tcx>,\n+pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n                                      generic_bounds: &ty::InstantiatedPredicates<'tcx>)\n                                      -> PredicateObligations<'tcx>\n {\n-    util::predicates_for_generics(tcx, cause, 0, generic_bounds)\n+    util::predicates_for_generics(cause, 0, generic_bounds)\n }\n \n /// Determines whether the type `ty` is known to meet `bound` and\n@@ -436,8 +435,6 @@ pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n                                   -> Result<T, Vec<FulfillmentError<'tcx>>>\n     where T : TypeFoldable<'tcx> + HasProjectionTypes + Clone + Repr\n {\n-    let tcx = closure_typer.tcx();\n-\n     debug!(\"normalize_param_env(value={})\", value.repr());\n \n     let mut selcx = &mut SelectionContext::new(infcx, closure_typer);"}, {"sha": "1b5f79452c0f2201e9b56f2612eabb4affaa07d9", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -373,7 +373,6 @@ fn opt_normalize_projection_type<'a,'b,'tcx>(\n                    obligations.repr());\n \n             if ty::type_has_projection(projected_ty) {\n-                let tcx = selcx.tcx();\n                 let mut normalizer = AssociatedTypeNormalizer::new(selcx, cause, depth);\n                 let normalized_ty = normalizer.fold(&projected_ty);\n \n@@ -633,7 +632,6 @@ fn assemble_candidates_from_object_type<'cx,'tcx>(\n     candidate_set: &mut ProjectionTyCandidateSet<'tcx>,\n     object_ty: Ty<'tcx>)\n {\n-    let infcx = selcx.infcx();\n     debug!(\"assemble_candidates_from_object_type(object_ty={})\",\n            object_ty.repr());\n     let data = match object_ty.sty {\n@@ -745,8 +743,6 @@ fn confirm_candidate<'cx,'tcx>(\n     candidate: ProjectionTyCandidate<'tcx>)\n     -> (Ty<'tcx>, Vec<PredicateObligation<'tcx>>)\n {\n-    let infcx = selcx.infcx();\n-\n     debug!(\"confirm_candidate(candidate={}, obligation={})\",\n            candidate.repr(),\n            obligation.repr());"}, {"sha": "5519ad97d2225f28bc97f7610460f42ad60b425a", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -2896,8 +2896,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let predicates = normalize_with_depth(self, cause.clone(), recursion_depth, &predicates);\n         let mut predicates = self.infcx().plug_leaks(skol_map, snapshot, &predicates);\n         let mut obligations =\n-            util::predicates_for_generics(self.tcx(),\n-                                          cause,\n+            util::predicates_for_generics(cause,\n                                           recursion_depth,\n                                           &predicates.value);\n         obligations.append(&mut predicates.obligations);"}, {"sha": "475e2f69a4c1dc5cdb3b8ddbeb05deca55755355", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -321,8 +321,7 @@ impl<'tcx> fmt::Debug for super::VtableObjectData<'tcx> {\n }\n \n /// See `super::obligations_for_generics`\n-pub fn predicates_for_generics<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                     cause: ObligationCause<'tcx>,\n+pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n                                      recursion_depth: usize,\n                                      generic_bounds: &ty::InstantiatedPredicates<'tcx>)\n                                      -> Vec<PredicateObligation<'tcx>>"}, {"sha": "e9c84f4c9ce2ae5da8b587f5385326e3b79f733b", "filename": "src/librustc/middle/ty_relate/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -191,7 +191,6 @@ fn relate_region_params<'a,'tcx:'a,R>(relation: &mut R,\n                                       -> RelateResult<'tcx, Vec<ty::Region>>\n     where R: TypeRelation<'a,'tcx>\n {\n-    let tcx = relation.tcx();\n     let num_region_params = a_rs.len();\n \n     debug!(\"relate_region_params(a_rs={}, \\"}, {"sha": "6f896fffd3db3f0eeff4e8dae289c868dd814452", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -42,17 +42,15 @@ enum Fragment {\n }\n \n impl Fragment {\n-    fn loan_path_repr<'tcx>(&self, move_data: &MoveData<'tcx>, tcx: &ty::ctxt<'tcx>) -> String {\n+    fn loan_path_repr(&self, move_data: &MoveData) -> String {\n         let repr = |mpi| move_data.path_loan_path(mpi).repr();\n         match *self {\n             Just(mpi) => repr(mpi),\n             AllButOneFrom(mpi) => format!(\"$(allbutone {})\", repr(mpi)),\n         }\n     }\n \n-    fn loan_path_user_string<'tcx>(&self,\n-                                   move_data: &MoveData<'tcx>,\n-                                   tcx: &ty::ctxt<'tcx>) -> String {\n+    fn loan_path_user_string(&self, move_data: &MoveData) -> String {\n         let user_string = |mpi| move_data.path_loan_path(mpi).user_string();\n         match *self {\n             Just(mpi) => user_string(mpi),\n@@ -138,7 +136,7 @@ pub fn instrument_move_fragments<'tcx>(this: &MoveData<'tcx>,\n \n     let instrument_all_fragments = |kind, vec_rc: &Vec<Fragment>| {\n         for (i, f) in vec_rc.iter().enumerate() {\n-            let render = || f.loan_path_user_string(this, tcx);\n+            let render = || f.loan_path_user_string(this);\n             if span_err {\n                 tcx.sess.span_err(sp, &format!(\"{}: `{}`\", kind, render()));\n             }\n@@ -176,7 +174,7 @@ pub fn fixup_fragment_sets<'tcx>(this: &MoveData<'tcx>, tcx: &ty::ctxt<'tcx>) {\n     };\n \n     let frag_lps = |fs: &[Fragment]| -> Vec<String> {\n-        fs.iter().map(|f| f.loan_path_repr(this, tcx)).collect()\n+        fs.iter().map(|f| f.loan_path_repr(this)).collect()\n     };\n \n     // First, filter out duplicates"}, {"sha": "81657c9537066cae89f4a126634646efd3ce8755", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -1671,7 +1671,6 @@ pub fn trans_named_tuple_constructor<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                                                  -> Result<'blk, 'tcx> {\n \n     let ccx = bcx.fcx.ccx;\n-    let tcx = ccx.tcx();\n \n     let result_ty = match ctor_ty.sty {\n         ty::TyBareFn(_, ref bft) => {"}, {"sha": "66f7a89d7abb27853edf64b031936eaf3b6d45b3", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -233,7 +233,6 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                      -> Block<'blk, 'tcx>\n {\n     let ccx = bcx.ccx();\n-    let tcx = bcx.tcx();\n \n     debug!(\"trans_native_call(callee_ty={}, \\\n             llfn={}, \\\n@@ -636,7 +635,6 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                       t: Ty<'tcx>) {\n         let _icx = push_ctxt(\n             \"foreign::trans_rust_fn_with_foreign_abi::build_wrap_fn\");\n-        let tcx = ccx.tcx();\n \n         debug!(\"build_wrap_fn(llrustfn={}, llwrapfn={}, t={})\",\n                ccx.tn().val_to_string(llrustfn),"}, {"sha": "e885f56ef8e424617412a02436f6e3544e7977b6", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -203,8 +203,10 @@ impl<'tcx> DropGlueKind<'tcx> {\n             DropGlueKind::TyContents(t) => DropGlueKind::TyContents(f(t)),\n         }\n     }\n+}\n \n-    fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String {\n+impl<'tcx> Repr for DropGlueKind<'tcx> {\n+    fn repr(&self) -> String {\n         match *self {\n             DropGlueKind::Ty(ty) => {\n                 format!(\"DropGlueKind::Ty({})\", ty.repr())\n@@ -218,9 +220,9 @@ impl<'tcx> DropGlueKind<'tcx> {\n \n fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                 g: DropGlueKind<'tcx>) -> ValueRef {\n-    debug!(\"make drop glue for {}\", g.to_string(ccx));\n+    debug!(\"make drop glue for {}\", g.repr());\n     let g = g.map_ty(|t| get_drop_glue_type(ccx, t));\n-    debug!(\"drop glue type {}\", g.to_string(ccx));\n+    debug!(\"drop glue type {}\", g.repr());\n     match ccx.drop_glues().borrow().get(&g) {\n         Some(&glue) => return glue,\n         _ => { }"}, {"sha": "5e25404bf738d1ce44aee1c095fb941315deb93f", "filename": "src/librustc_typeck/check/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -12,7 +12,7 @@ use middle::infer::InferCtxt;\n use middle::traits::{self, FulfillmentContext, Normalized, MiscObligation,\n                      SelectionContext, ObligationCause};\n use middle::ty::{self, HasProjectionTypes};\n-use middle::ty_fold::{TypeFoldable, TypeFolder};\n+use middle::ty_fold::TypeFoldable;\n use syntax::ast;\n use syntax::codemap::Span;\n use util::ppaux::Repr;"}, {"sha": "eeccb576749cb89f9b25fc918cd27efc3877ec80", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -1062,8 +1062,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n \n                     // Convert the bounds into obligations.\n                     let obligations =\n-                        traits::predicates_for_generics(self.tcx(),\n-                                                        cause.clone(),\n+                        traits::predicates_for_generics(cause.clone(),\n                                                         &impl_bounds);\n                     debug!(\"impl_obligations={}\", obligations.repr());\n "}, {"sha": "b728c01291939bee76e1be476c5a1d0693bdcde5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -1745,7 +1745,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                       cause: traits::ObligationCause<'tcx>)\n     {\n         let mut fulfillment_cx = self.inh.fulfillment_cx.borrow_mut();\n-        fulfillment_cx.register_region_obligation(self.infcx(), ty, region, cause);\n+        fulfillment_cx.register_region_obligation(ty, region, cause);\n     }\n \n     pub fn add_default_region_param_bounds(&self,\n@@ -1787,9 +1787,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"add_obligations_for_parameters(predicates={})\",\n                predicates.repr());\n \n-        for obligation in traits::predicates_for_generics(self.tcx(),\n-                                                          cause,\n-                                                          predicates) {\n+        for obligation in traits::predicates_for_generics(cause, predicates) {\n             self.register_predicate(obligation);\n         }\n     }"}, {"sha": "949cf118afca4c229a1db0b1b44d4ccfb54a5559", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -348,7 +348,6 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n                            body_id: ast::NodeId,\n                            span: Span) {\n         debug!(\"relate_free_regions >>\");\n-        let tcx = self.tcx();\n \n         for &ty in fn_sig_tys {\n             let ty = self.resolve_type(ty);\n@@ -359,7 +358,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n                                                         ty, body_scope, span);\n \n             // Record any relations between free regions that we observe into the free-region-map.\n-            self.free_region_map.relate_free_regions_from_implications(tcx, &implications);\n+            self.free_region_map.relate_free_regions_from_implications(&implications);\n \n             // But also record other relationships, such as `T:'x`,\n             // that don't go into the free-region-map but which we use\n@@ -823,7 +822,6 @@ fn constrain_call<'a, I: Iterator<Item=&'a ast::Expr>>(rcx: &mut Rcx,\n     //! in the type of the function. Also constrains the regions that\n     //! appear in the arguments appropriately.\n \n-    let tcx = rcx.fcx.tcx();\n     debug!(\"constrain_call(call_expr={}, \\\n             receiver={}, \\\n             implicitly_ref_args={})\",\n@@ -1156,7 +1154,6 @@ fn link_autoref(rcx: &Rcx,\n fn link_by_ref(rcx: &Rcx,\n                expr: &ast::Expr,\n                callee_scope: CodeExtent) {\n-    let tcx = rcx.tcx();\n     debug!(\"link_by_ref(expr={}, callee_scope={:?})\",\n            expr.repr(), callee_scope);\n     let mc = mc::MemCategorizationContext::new(rcx.fcx);"}, {"sha": "a5668d8e86053ef5548bd24b5377c2b1a2cc4b23", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510ea1487286123c00f425b368a8328637ac947/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=b510ea1487286123c00f425b368a8328637ac947", "patch": "@@ -178,10 +178,6 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n         AdjustBorrowKind { fcx: fcx, closures_with_inferred_kinds: closures_with_inferred_kinds }\n     }\n \n-    fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n-        self.fcx.tcx()\n-    }\n-\n     fn analyze_closure(&mut self, id: ast::NodeId, decl: &ast::FnDecl, body: &ast::Block) {\n         /*!\n          * Analysis starting point."}]}