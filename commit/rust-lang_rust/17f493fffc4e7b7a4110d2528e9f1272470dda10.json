{"sha": "17f493fffc4e7b7a4110d2528e9f1272470dda10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZjQ5M2ZmZmM0ZTdiN2E0MTEwZDI1MjhlOWYxMjcyNDcwZGRhMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-06T06:18:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-06T06:18:17Z"}, "message": "Auto merge of #42394 - ollie27:rustdoc_deref_box, r=QuietMisdreavus\n\nrustdoc: Hide `self: Box<Self>` in list of deref methods\n\nThese methods can never be called through deref so there is no point including them. For example you can't call [`into_boxed_bytes`](https://doc.rust-lang.org/nightly/std/string/struct.String.html#method.into_boxed_bytes) or [`into_string`](https://doc.rust-lang.org/nightly/std/string/struct.String.html#method.into_string) on `String`.", "tree": {"sha": "3e1fbd022aa56f40edb4c9a76c2f858fb30152b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e1fbd022aa56f40edb4c9a76c2f858fb30152b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17f493fffc4e7b7a4110d2528e9f1272470dda10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17f493fffc4e7b7a4110d2528e9f1272470dda10", "html_url": "https://github.com/rust-lang/rust/commit/17f493fffc4e7b7a4110d2528e9f1272470dda10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17f493fffc4e7b7a4110d2528e9f1272470dda10/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8626951583e2cac46417ec433254a862735c0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8626951583e2cac46417ec433254a862735c0cc", "html_url": "https://github.com/rust-lang/rust/commit/e8626951583e2cac46417ec433254a862735c0cc"}, {"sha": "88c791bf692a9a1d8f48f70384ae42be044f03bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c791bf692a9a1d8f48f70384ae42be044f03bf", "html_url": "https://github.com/rust-lang/rust/commit/88c791bf692a9a1d8f48f70384ae42be044f03bf"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "20ce2c0249625b5270658d1fbbab68816c66f5d1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17f493fffc4e7b7a4110d2528e9f1272470dda10/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f493fffc4e7b7a4110d2528e9f1272470dda10/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=17f493fffc4e7b7a4110d2528e9f1272470dda10", "patch": "@@ -124,6 +124,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n             let mut r = cx.renderinfo.borrow_mut();\n             r.deref_trait_did = cx.tcx.lang_items.deref_trait();\n             r.deref_mut_trait_did = cx.tcx.lang_items.deref_mut_trait();\n+            r.owned_box_did = cx.tcx.lang_items.owned_box();\n         }\n \n         let mut externs = Vec::new();"}, {"sha": "0d9f98e05d2c2c90980ea1aa4ee7f1f67c93a50c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17f493fffc4e7b7a4110d2528e9f1272470dda10/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f493fffc4e7b7a4110d2528e9f1272470dda10/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=17f493fffc4e7b7a4110d2528e9f1272470dda10", "patch": "@@ -262,6 +262,7 @@ pub struct Cache {\n     stripped_mod: bool,\n     deref_trait_did: Option<DefId>,\n     deref_mut_trait_did: Option<DefId>,\n+    owned_box_did: Option<DefId>,\n \n     // In rare case where a structure is defined in one module but implemented\n     // in another, if the implementing module is parsed before defining module,\n@@ -280,6 +281,7 @@ pub struct RenderInfo {\n     pub external_typarams: FxHashMap<DefId, String>,\n     pub deref_trait_did: Option<DefId>,\n     pub deref_mut_trait_did: Option<DefId>,\n+    pub owned_box_did: Option<DefId>,\n }\n \n /// Helper struct to render all source code to HTML pages\n@@ -507,6 +509,7 @@ pub fn run(mut krate: clean::Crate,\n         external_typarams,\n         deref_trait_did,\n         deref_mut_trait_did,\n+        owned_box_did,\n     } = renderinfo;\n \n     let external_paths = external_paths.into_iter()\n@@ -530,6 +533,7 @@ pub fn run(mut krate: clean::Crate,\n         traits: mem::replace(&mut krate.external_traits, FxHashMap()),\n         deref_trait_did: deref_trait_did,\n         deref_mut_trait_did: deref_mut_trait_did,\n+        owned_box_did: owned_box_did,\n         typarams: external_typarams,\n     };\n \n@@ -2933,17 +2937,18 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                 };\n \n                 if let Some(self_ty) = self_type_opt {\n-                    let by_mut_ref = match self_ty {\n-                        SelfTy::SelfBorrowed(_lifetime, mutability) => {\n-                            mutability == Mutability::Mutable\n-                        },\n+                    let (by_mut_ref, by_box) = match self_ty {\n+                        SelfTy::SelfBorrowed(_, mutability) |\n                         SelfTy::SelfExplicit(clean::BorrowedRef { mutability, .. }) => {\n-                            mutability == Mutability::Mutable\n+                            (mutability == Mutability::Mutable, false)\n+                        },\n+                        SelfTy::SelfExplicit(clean::ResolvedPath { did, .. }) => {\n+                            (false, Some(did) == cache().owned_box_did)\n                         },\n-                        _ => false,\n+                        _ => (false, false),\n                     };\n \n-                    deref_mut_ || !by_mut_ref\n+                    (deref_mut_ || !by_mut_ref) && !by_box\n                 } else {\n                     false\n                 }"}, {"sha": "b19fbaa5b953538593cb9607338e20cf6e052603", "filename": "src/test/rustdoc/issue-35169-2.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17f493fffc4e7b7a4110d2528e9f1272470dda10/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f493fffc4e7b7a4110d2528e9f1272470dda10/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs?ref=17f493fffc4e7b7a4110d2528e9f1272470dda10", "patch": "@@ -19,6 +19,8 @@ impl Foo {\n     pub fn by_explicit_ref(self: &Foo) {}\n     pub fn by_mut_ref(&mut self) {}\n     pub fn by_explicit_mut_ref(self: &mut Foo) {}\n+    pub fn by_explicit_box(self: Box<Foo>) {}\n+    pub fn by_explicit_self_box(self: Box<Self>) {}\n     pub fn static_foo() {}\n }\n \n@@ -41,5 +43,9 @@ impl DerefMut for Bar {\n // @has - '//*[@id=\"method.by_mut_ref\"]' 'fn by_mut_ref(&mut self)'\n // @has - '//*[@id=\"by_explicit_mut_ref.v\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n // @has - '//*[@id=\"method.by_explicit_mut_ref\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n+// @!has - '//*[@id=\"by_explicit_box.v\"]' 'fn by_explicit_box(self: Box<Foo>)'\n+// @!has - '//*[@id=\"method.by_explicit_box\"]' 'fn by_explicit_box(self: Box<Foo>)'\n+// @!has - '//*[@id=\"by_explicit_self_box.v\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n+// @!has - '//*[@id=\"method.by_explicit_self_box\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n // @!has - '//*[@id=\"static_foo.v\"]' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}, {"sha": "95231f282e3ed634e76b41854e09f679a823238a", "filename": "src/test/rustdoc/issue-35169.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17f493fffc4e7b7a4110d2528e9f1272470dda10/src%2Ftest%2Frustdoc%2Fissue-35169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f493fffc4e7b7a4110d2528e9f1272470dda10/src%2Ftest%2Frustdoc%2Fissue-35169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-35169.rs?ref=17f493fffc4e7b7a4110d2528e9f1272470dda10", "patch": "@@ -18,6 +18,8 @@ impl Foo {\n     pub fn by_explicit_ref(self: &Foo) {}\n     pub fn by_mut_ref(&mut self) {}\n     pub fn by_explicit_mut_ref(self: &mut Foo) {}\n+    pub fn by_explicit_box(self: Box<Foo>) {}\n+    pub fn by_explicit_self_box(self: Box<Self>) {}\n     pub fn static_foo() {}\n }\n \n@@ -36,5 +38,9 @@ impl Deref for Bar {\n // @!has - '//*[@id=\"method.by_mut_ref\"]' 'fn by_mut_ref(&mut self)'\n // @!has - '//*[@id=\"by_explicit_mut_ref.v\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n // @!has - '//*[@id=\"method.by_explicit_mut_ref\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n+// @!has - '//*[@id=\"by_explicit_box.v\"]' 'fn by_explicit_box(self: Box<Foo>)'\n+// @!has - '//*[@id=\"method.by_explicit_box\"]' 'fn by_explicit_box(self: Box<Foo>)'\n+// @!has - '//*[@id=\"by_explicit_self_box.v\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n+// @!has - '//*[@id=\"method.by_explicit_self_box\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n // @!has - '//*[@id=\"static_foo.v\"]' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}]}