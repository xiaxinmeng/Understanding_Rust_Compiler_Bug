{"sha": "0df83f8e5e85268b0134f8c698e09b5c8d6b3ef6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZjgzZjhlNWU4NTI2OGIwMTM0ZjhjNjk4ZTA5YjVjOGQ2YjNlZjY=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-04-21T14:21:33Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-05-13T21:31:58Z"}, "message": "Update global_asm! documentation", "tree": {"sha": "1936b2a4b8c99585ce1ef5508c9daf07f16cbb2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1936b2a4b8c99585ce1ef5508c9daf07f16cbb2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0df83f8e5e85268b0134f8c698e09b5c8d6b3ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0df83f8e5e85268b0134f8c698e09b5c8d6b3ef6", "html_url": "https://github.com/rust-lang/rust/commit/0df83f8e5e85268b0134f8c698e09b5c8d6b3ef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0df83f8e5e85268b0134f8c698e09b5c8d6b3ef6/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a229e0e206ee78ef9712b06569cb55c238bac73", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a229e0e206ee78ef9712b06569cb55c238bac73", "html_url": "https://github.com/rust-lang/rust/commit/5a229e0e206ee78ef9712b06569cb55c238bac73"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "146d17b4638c8357fcdac18ace09d2209836d299", "filename": "src/doc/unstable-book/src/library-features/global-asm.md", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0df83f8e5e85268b0134f8c698e09b5c8d6b3ef6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fglobal-asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/0df83f8e5e85268b0134f8c698e09b5c8d6b3ef6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fglobal-asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fglobal-asm.md?ref=0df83f8e5e85268b0134f8c698e09b5c8d6b3ef6", "patch": "@@ -8,12 +8,9 @@ The tracking issue for this feature is: [#35119]\n \n The `global_asm!` macro allows the programmer to write arbitrary\n assembly outside the scope of a function body, passing it through\n-`rustc` and `llvm` to the assembler. The macro is a no-frills\n-interface to LLVM's concept of [module-level inline assembly]. That is,\n-all caveats applicable to LLVM's module-level inline assembly apply\n-to `global_asm!`.\n-\n-[module-level inline assembly]: http://llvm.org/docs/LangRef.html#module-level-inline-assembly\n+`rustc` and `llvm` to the assembler. That is to say, `global_asm!` is\n+equivalent to assembling the asm with an external assembler and then\n+linking the resulting object file with the current crate.\n \n `global_asm!` fills a role not currently satisfied by either `asm!`\n or `#[naked]` functions. The programmer has _all_ features of the\n@@ -69,8 +66,44 @@ pub mod harry {\n ```\n \n You may use `global_asm!` multiple times, anywhere in your crate, in\n-whatever way suits you. The effect is as if you concatenated all\n-usages and placed the larger, single usage in the crate root.\n+whatever way suits you. However, you should not rely on assembler state\n+(e.g. assembler macros) defined in one `global_asm!` to be available in\n+another one. It is implementation-defined whether the multiple usages\n+are concatenated into one or assembled separately.\n+\n+`global_asm!` also supports `const` operands like `asm!`, which allows\n+constants defined in Rust to be used in assembly code:\n+\n+```rust,no_run\n+#![feature(global_asm)]\n+# #[cfg(any(target_arch=\"x86\", target_arch=\"x86_64\"))]\n+# mod x86 {\n+const C: i32 = 1234;\n+global_asm!(\n+    \".global bar\",\n+    \"bar: .word {c}\",\n+    c = const C,\n+);\n+# }\n+```\n+\n+The syntax for passing operands is the same as `asm!` except that only\n+`const` operands are allowed. Refer to the [asm](asm.md) documentation\n+for more details.\n+\n+On x86, the assembly code will use intel syntax by default. You can\n+override this by adding `options(att_syntax)` at the end of the macro\n+arguments list:\n+\n+```rust,no_run\n+#![feature(global_asm)]\n+# #[cfg(any(target_arch=\"x86\", target_arch=\"x86_64\"))]\n+# mod x86 {\n+global_asm!(\"movl ${}, %ecx\", const 5, options(att_syntax));\n+// is equivalent to\n+global_asm!(\"mov ecx, {}\", const 5);\n+# }\n+```\n \n ------------------------\n "}]}