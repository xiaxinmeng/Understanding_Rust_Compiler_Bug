{"sha": "7d9b21b90bc77ab26c8afefc78d6087aff34e4ad", "node_id": "C_kwDOAAsO6NoAKDdkOWIyMWI5MGJjNzdhYjI2YzhhZmVmYzc4ZDYwODdhZmYzNGU0YWQ", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-10-09T03:58:05Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-10-09T03:58:05Z"}, "message": "Use `indoc` for formatting", "tree": {"sha": "aac01965386f5676b39b9254a4ec30c115431d98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac01965386f5676b39b9254a4ec30c115431d98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d9b21b90bc77ab26c8afefc78d6087aff34e4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d9b21b90bc77ab26c8afefc78d6087aff34e4ad", "html_url": "https://github.com/rust-lang/rust/commit/7d9b21b90bc77ab26c8afefc78d6087aff34e4ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d9b21b90bc77ab26c8afefc78d6087aff34e4ad/comments", "author": null, "committer": null, "parents": [{"sha": "b8782257ae54674101b08caeee59c0d51ff760c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8782257ae54674101b08caeee59c0d51ff760c6", "html_url": "https://github.com/rust-lang/rust/commit/b8782257ae54674101b08caeee59c0d51ff760c6"}], "stats": {"total": 153, "additions": 80, "deletions": 73}, "files": [{"sha": "affb283017c8ce50252ae6d9750e553591e21497", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d9b21b90bc77ab26c8afefc78d6087aff34e4ad/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7d9b21b90bc77ab26c8afefc78d6087aff34e4ad/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=7d9b21b90bc77ab26c8afefc78d6087aff34e4ad", "patch": "@@ -6,6 +6,7 @@ edition = \"2021\"\n [dependencies]\n bytecount = \"0.6\"\n clap = \"2.33\"\n+indoc = \"1.0\"\n itertools = \"0.10\"\n opener = \"0.5\"\n regex = \"1.5\""}, {"sha": "25320907bb492767f36da58f48e97d0b2d366477", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 79, "deletions": 73, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/7d9b21b90bc77ab26c8afefc78d6087aff34e4ad/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9b21b90bc77ab26c8afefc78d6087aff34e4ad/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=7d9b21b90bc77ab26c8afefc78d6087aff34e4ad", "patch": "@@ -1,4 +1,5 @@\n use crate::clippy_project_root;\n+use indoc::indoc;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n use std::io::{self, ErrorKind};\n@@ -105,12 +106,13 @@ fn to_camel_case(name: &str) -> String {\n \n fn get_test_file_contents(lint_name: &str, header_commands: Option<&str>) -> String {\n     let mut contents = format!(\n-        \"#![warn(clippy::{})]\n+        indoc! {\"\n+            #![warn(clippy::{})]\n \n-fn main() {{\n-    // test code goes here\n-}}\n-\",\n+            fn main() {{\n+                // test code goes here\n+            }}\n+        \"},\n         lint_name\n     );\n \n@@ -123,16 +125,16 @@ fn main() {{\n \n fn get_manifest_contents(lint_name: &str, hint: &str) -> String {\n     format!(\n-        r#\"\n-# {}\n+        indoc! {r#\"\n+            # {}\n \n-[package]\n-name = \"{}\"\n-version = \"0.1.0\"\n-publish = false\n+            [package]\n+            name = \"{}\"\n+            version = \"0.1.0\"\n+            publish = false\n \n-[workspace]\n-\"#,\n+            [workspace]\n+        \"#},\n         hint, lint_name\n     )\n }\n@@ -156,78 +158,82 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n \n     result.push_str(&if enable_msrv {\n         format!(\n-            \"use clippy_utils::msrvs;\n-{pass_import}\n-use rustc_lint::{{{context_import}, {pass_type}, LintContext}};\n-use rustc_semver::RustcVersion;\n-use rustc_session::{{declare_tool_lint, impl_lint_pass}};\n-\n-\",\n+            indoc! {\"\n+                use clippy_utils::msrvs;\n+                {pass_import}\n+                use rustc_lint::{{{context_import}, {pass_type}, LintContext}};\n+                use rustc_semver::RustcVersion;\n+                use rustc_session::{{declare_tool_lint, impl_lint_pass}};\n+\n+            \"},\n             pass_type = pass_type,\n             pass_import = pass_import,\n             context_import = context_import,\n         )\n     } else {\n         format!(\n-            \"{pass_import}\n-use rustc_lint::{{{context_import}, {pass_type}}};\n-use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n+            indoc! {\"\n+                {pass_import}\n+                use rustc_lint::{{{context_import}, {pass_type}}};\n+                use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n \n-\",\n+            \"},\n             pass_import = pass_import,\n             pass_type = pass_type,\n             context_import = context_import\n         )\n     });\n \n     result.push_str(&format!(\n-        \"declare_clippy_lint! {{\n-    /// ### What it does\n-    ///\n-    /// ### Why is this bad?\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// // example code where clippy issues a warning\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// // example code which does not raise clippy warning\n-    /// ```\n-    pub {name_upper},\n-    {category},\n-    \\\"default lint description\\\"\n-}}\",\n+        indoc! {\"\n+            declare_clippy_lint! {{\n+                /// ### What it does\n+                ///\n+                /// ### Why is this bad?\n+                ///\n+                /// ### Example\n+                /// ```rust\n+                /// // example code where clippy issues a warning\n+                /// ```\n+                /// Use instead:\n+                /// ```rust\n+                /// // example code which does not raise clippy warning\n+                /// ```\n+                pub {name_upper},\n+                {category},\n+                \\\"default lint description\\\"\n+            }}\n+        \"},\n         name_upper = name_upper,\n         category = category,\n     ));\n \n     result.push_str(&if enable_msrv {\n         format!(\n-            \"\n-pub struct {name_camel} {{\n-    msrv: Option<RustcVersion>,\n-}}\n-\n-impl {name_camel} {{\n-    #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {{\n-        Self {{ msrv }}\n-    }}\n-}}\n-\n-impl_lint_pass!({name_camel} => [{name_upper}]);\n-\n-impl {pass_type}{pass_lifetimes} for {name_camel} {{\n-    extract_msrv_attr!({context_import});\n-}}\n-\n-// TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n-//       e.g. store.register_{pass_name}_pass(move || Box::new({module_name}::{name_camel}::new(msrv)));\n-// TODO: Add MSRV level to `clippy_utils/src/msrvs.rs` if needed.\n-// TODO: Add MSRV test to `tests/ui/min_rust_version_attr.rs`.\n-// TODO: Update msrv config comment in `clippy_lints/src/utils/conf.rs`\n-\",\n+            indoc! {\"\n+                pub struct {name_camel} {{\n+                    msrv: Option<RustcVersion>,\n+                }}\n+\n+                impl {name_camel} {{\n+                    #[must_use]\n+                    pub fn new(msrv: Option<RustcVersion>) -> Self {{\n+                        Self {{ msrv }}\n+                    }}\n+                }}\n+\n+                impl_lint_pass!({name_camel} => [{name_upper}]);\n+\n+                impl {pass_type}{pass_lifetimes} for {name_camel} {{\n+                    extract_msrv_attr!({context_import});\n+                }}\n+\n+                // TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n+                //       e.g. store.register_{pass_name}_pass(move || Box::new({module_name}::{name_camel}::new(msrv)));\n+                // TODO: Add MSRV level to `clippy_utils/src/msrvs.rs` if needed.\n+                // TODO: Add MSRV test to `tests/ui/min_rust_version_attr.rs`.\n+                // TODO: Update msrv config comment in `clippy_lints/src/utils/conf.rs`\n+            \"},\n             pass_type = pass_type,\n             pass_lifetimes = pass_lifetimes,\n             pass_name = pass_name,\n@@ -238,14 +244,14 @@ impl {pass_type}{pass_lifetimes} for {name_camel} {{\n         )\n     } else {\n         format!(\n-            \"\n-declare_lint_pass!({name_camel} => [{name_upper}]);\n-\n-impl {pass_type}{pass_lifetimes} for {name_camel} {{}}\n-//\n-// TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n-//       e.g. store.register_{pass_name}_pass(|| Box::new({module_name}::{name_camel}));\n-\",\n+            indoc! {\"\n+                declare_lint_pass!({name_camel} => [{name_upper}]);\n+\n+                impl {pass_type}{pass_lifetimes} for {name_camel} {{}}\n+                //\n+                // TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n+                //       e.g. store.register_{pass_name}_pass(|| Box::new({module_name}::{name_camel}));\n+            \"},\n             pass_type = pass_type,\n             pass_lifetimes = pass_lifetimes,\n             pass_name = pass_name,"}]}