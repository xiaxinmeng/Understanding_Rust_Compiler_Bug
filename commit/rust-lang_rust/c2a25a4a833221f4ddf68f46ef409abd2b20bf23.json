{"sha": "c2a25a4a833221f4ddf68f46ef409abd2b20bf23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYTI1YTRhODMzMjIxZjRkZGY2OGY0NmVmNDA5YWJkMmIyMGJmMjM=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-09-15T20:07:00Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-09-15T20:24:14Z"}, "message": "Add missing unused variable warnings for for loop bindings", "tree": {"sha": "a39b27aef900cbf82debeead6140001aa0fb5872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a39b27aef900cbf82debeead6140001aa0fb5872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2a25a4a833221f4ddf68f46ef409abd2b20bf23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a25a4a833221f4ddf68f46ef409abd2b20bf23", "html_url": "https://github.com/rust-lang/rust/commit/c2a25a4a833221f4ddf68f46ef409abd2b20bf23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2a25a4a833221f4ddf68f46ef409abd2b20bf23/comments", "author": null, "committer": null, "parents": [{"sha": "a8d478db512803d25785a11c5b21634f8703b17f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d478db512803d25785a11c5b21634f8703b17f", "html_url": "https://github.com/rust-lang/rust/commit/a8d478db512803d25785a11c5b21634f8703b17f"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "fee6c77a79907a387a3bd9d6fde59f2c2a39696a", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2a25a4a833221f4ddf68f46ef409abd2b20bf23/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a25a4a833221f4ddf68f46ef409abd2b20bf23/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=c2a25a4a833221f4ddf68f46ef409abd2b20bf23", "patch": "@@ -131,8 +131,8 @@ enum LoopKind<'a> {\n     LoopLoop,\n     /// A `while` loop, with the given expression as condition.\n     WhileLoop(&'a Expr),\n-    /// A `for` loop.\n-    ForLoop,\n+    /// A `for` loop, with the given pattern to bind.\n+    ForLoop(&'a Pat),\n }\n \n #[deriving(PartialEq)]\n@@ -1024,8 +1024,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             self.propagate_through_loop(expr, WhileLoop(&**cond), &**blk, succ)\n           }\n \n-          ExprForLoop(_, ref head, ref blk, _) => {\n-            let ln = self.propagate_through_loop(expr, ForLoop, &**blk, succ);\n+          ExprForLoop(ref pat, ref head, ref blk, _) => {\n+            let ln = self.propagate_through_loop(expr, ForLoop(&**pat), &**blk, succ);\n             self.propagate_through_expr(&**head, ln)\n           }\n \n@@ -1355,7 +1355,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                expr.id, block_to_string(body));\n \n         let cond_ln = match kind {\n-            LoopLoop | ForLoop => ln,\n+            LoopLoop => ln,\n+            ForLoop(ref pat) => self.define_bindings_in_pat(*pat, ln),\n             WhileLoop(ref cond) => self.propagate_through_expr(&**cond, ln),\n         };\n         let body_ln = self.with_loop_nodes(expr.id, succ, ln, |this| {\n@@ -1367,7 +1368,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             first_merge = false;\n \n             let new_cond_ln = match kind {\n-                LoopLoop | ForLoop => ln,\n+                LoopLoop => ln,\n+                ForLoop(ref pat) => {\n+                    self.define_bindings_in_pat(*pat, ln)\n+                }\n                 WhileLoop(ref cond) => {\n                     self.propagate_through_expr(&**cond, ln)\n                 }\n@@ -1453,6 +1457,12 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n         visit::walk_expr(this, expr);\n       }\n \n+      ExprForLoop(ref pat, _, _, _) => {\n+        this.pat_bindings(&**pat, |this, ln, var, sp, id| {\n+            this.warn_about_unused(sp, id, ln, var);\n+        });\n+      }\n+\n       // no correctness conditions related to liveness\n       ExprCall(..) | ExprMethodCall(..) | ExprIf(..) | ExprMatch(..) |\n       ExprWhile(..) | ExprLoop(..) | ExprIndex(..) | ExprField(..) |\n@@ -1461,7 +1471,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       ExprAgain(..) | ExprLit(_) | ExprBlock(..) |\n       ExprMac(..) | ExprAddrOf(..) | ExprStruct(..) | ExprRepeat(..) |\n       ExprParen(..) | ExprFnBlock(..) | ExprProc(..) | ExprUnboxedFn(..) |\n-      ExprPath(..) | ExprBox(..) | ExprForLoop(..) => {\n+      ExprPath(..) | ExprBox(..) => {\n         visit::walk_expr(this, expr);\n       }\n     }"}, {"sha": "a327139bb93614fe044dedf7e3ac53e5cbdaa31e", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a25a4a833221f4ddf68f46ef409abd2b20bf23/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a25a4a833221f4ddf68f46ef409abd2b20bf23/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=c2a25a4a833221f4ddf68f46ef409abd2b20bf23", "patch": "@@ -557,7 +557,7 @@ fn get_branches<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let tcx = bcx.tcx();\n \n     let mut found: Vec<Opt> = vec![];\n-    for (i, br) in m.iter().enumerate() {\n+    for br in m.iter() {\n         let cur = *br.pats.get(col);\n         let opt = match cur.node {\n             ast::PatLit(ref l) => ConstantValue(ConstantExpr(&**l)),"}, {"sha": "41a30e23b2221776ea74fad3f8f753a2e15c7c7a", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c2a25a4a833221f4ddf68f46ef409abd2b20bf23/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a25a4a833221f4ddf68f46ef409abd2b20bf23/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=c2a25a4a833221f4ddf68f46ef409abd2b20bf23", "patch": "@@ -82,5 +82,23 @@ fn f4b() -> int {\n     }\n }\n \n+fn f5a() {\n+    for x in range(1i, 10) { }\n+    //~^ ERROR unused variable: `x`\n+}\n+\n+fn f5b() {\n+    for (x, _) in [1i, 2, 3].iter().enumerate() { }\n+    //~^ ERROR unused variable: `x`\n+}\n+\n+fn f5c() {\n+    for (_, x) in [1i, 2, 3].iter().enumerate() {\n+    //~^ ERROR unused variable: `x`\n+        continue;\n+        std::os::set_exit_status(*x); //~ WARNING unreachable statement\n+    }\n+}\n+\n fn main() {\n }"}]}