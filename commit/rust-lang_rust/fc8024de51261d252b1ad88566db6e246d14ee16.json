{"sha": "fc8024de51261d252b1ad88566db6e246d14ee16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjODAyNGRlNTEyNjFkMjUyYjFhZDg4NTY2ZGI2ZTI0NmQxNGVlMTY=", "commit": {"author": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2018-10-16T18:08:52Z"}, "committer": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2018-10-17T23:42:23Z"}, "message": "clippy: type_complexity", "tree": {"sha": "d0bc86ad9bf304fa246461898a54aa81724b54c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0bc86ad9bf304fa246461898a54aa81724b54c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc8024de51261d252b1ad88566db6e246d14ee16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8024de51261d252b1ad88566db6e246d14ee16", "html_url": "https://github.com/rust-lang/rust/commit/fc8024de51261d252b1ad88566db6e246d14ee16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc8024de51261d252b1ad88566db6e246d14ee16/comments", "author": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc774fe6cf9948bd554e3fb5b51398b9328e0f4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc774fe6cf9948bd554e3fb5b51398b9328e0f4e", "html_url": "https://github.com/rust-lang/rust/commit/bc774fe6cf9948bd554e3fb5b51398b9328e0f4e"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "6cc586456ba592b15d321f98a39a6af8c40f9ab8", "filename": "crates/ra_lsp_server/src/thread_watcher.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc8024de51261d252b1ad88566db6e246d14ee16/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8024de51261d252b1ad88566db6e246d14ee16/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fthread_watcher.rs?ref=fc8024de51261d252b1ad88566db6e246d14ee16", "patch": "@@ -16,8 +16,7 @@ impl<I, O> Worker<I, O> {\n         I: Send + 'static,\n         O: Send + 'static,\n     {\n-        let ((inp, out), inp_r, out_s) = worker_chan(buf);\n-        let worker = Worker { inp, out };\n+        let (worker, inp_r, out_s) = worker_chan(buf);\n         let watcher = ThreadWatcher::spawn(name, move || f(inp_r, out_s));\n         (worker, watcher)\n     }\n@@ -66,11 +65,14 @@ impl ThreadWatcher {\n /// Sets up worker channels in a deadlock-avoind way.\n /// If one sets both input and output buffers to a fixed size,\n /// a worker might get stuck.\n-fn worker_chan<I, O>(buf: usize) -> ((Sender<I>, Receiver<O>), Receiver<I>, Sender<O>) {\n+fn worker_chan<I, O>(buf: usize) -> (Worker<I, O>, Receiver<I>, Sender<O>) {\n     let (input_sender, input_receiver) = bounded::<I>(buf);\n     let (output_sender, output_receiver) = unbounded::<O>();\n     (\n-        (input_sender, output_receiver),\n+        Worker {\n+            inp: input_sender,\n+            out: output_receiver,\n+        },\n         input_receiver,\n         output_sender,\n     )"}, {"sha": "377152de495b7152d655dbbf41f3d90622204490", "filename": "crates/ra_syntax/src/reparsing.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc8024de51261d252b1ad88566db6e246d14ee16/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8024de51261d252b1ad88566db6e246d14ee16/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Freparsing.rs?ref=fc8024de51261d252b1ad88566db6e246d14ee16", "patch": "@@ -98,17 +98,18 @@ fn is_contextual_kw(text: &str) -> bool {\n     }\n }\n \n-fn find_reparsable_node<'node>(\n-    node: SyntaxNodeRef<'node>,\n+type ParseFn = fn(&mut Parser);\n+fn find_reparsable_node(\n+    node: SyntaxNodeRef<'_>,\n     range: TextRange,\n-) -> Option<(SyntaxNodeRef<'node>, fn(&mut Parser))> {\n+) -> Option<(SyntaxNodeRef<'_>, ParseFn)> {\n     let node = algo::find_covering_node(node, range);\n     return node\n         .ancestors()\n         .filter_map(|node| reparser(node).map(|r| (node, r)))\n         .next();\n \n-    fn reparser(node: SyntaxNodeRef) -> Option<fn(&mut Parser)> {\n+    fn reparser(node: SyntaxNodeRef) -> Option<ParseFn> {\n         let res = match node.kind() {\n             BLOCK => grammar::block,\n             NAMED_FIELD_DEF_LIST => grammar::named_field_def_list,"}]}