{"sha": "086627ecd24308d773a9e5a2765d0c1f19f0226e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NjYyN2VjZDI0MzA4ZDc3M2E5ZTVhMjc2NWQwYzFmMTlmMDIyNmU=", "commit": {"author": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2017-04-04T19:39:44Z"}, "committer": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2017-04-04T19:39:44Z"}, "message": "Fix links\n\npart of https://github.com/rust-lang/rust/issues/40912\n\n[]\\n() is not actually a link.", "tree": {"sha": "cc3b7b5d82e7ad554d6931bf823c90cd8cd9dc88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc3b7b5d82e7ad554d6931bf823c90cd8cd9dc88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/086627ecd24308d773a9e5a2765d0c1f19f0226e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/086627ecd24308d773a9e5a2765d0c1f19f0226e", "html_url": "https://github.com/rust-lang/rust/commit/086627ecd24308d773a9e5a2765d0c1f19f0226e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/086627ecd24308d773a9e5a2765d0c1f19f0226e/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5309a3e31d88def1f3ea966162ed4f81f161d500", "url": "https://api.github.com/repos/rust-lang/rust/commits/5309a3e31d88def1f3ea966162ed4f81f161d500", "html_url": "https://github.com/rust-lang/rust/commit/5309a3e31d88def1f3ea966162ed4f81f161d500"}], "stats": {"total": 100, "additions": 60, "deletions": 40}, "files": [{"sha": "1b3eeb837d909aba3257b66c3680bbc7b59faaef", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/086627ecd24308d773a9e5a2765d0c1f19f0226e/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086627ecd24308d773a9e5a2765d0c1f19f0226e/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=086627ecd24308d773a9e5a2765d0c1f19f0226e", "patch": "@@ -697,8 +697,8 @@ impl<T> LinkedList<T> {\n \n     /// Returns a place for insertion at the front of the list.\n     ///\n-    /// Using this method with placement syntax is equivalent to [`push_front`]\n-    /// (#method.push_front), but may be more efficient.\n+    /// Using this method with placement syntax is equivalent to\n+    /// [`push_front`](#method.push_front), but may be more efficient.\n     ///\n     /// # Examples\n     ///"}, {"sha": "7339fb56e5b49d66e4bfdd87c5f6e3e32e0aec54", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 54, "deletions": 36, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/086627ecd24308d773a9e5a2765d0c1f19f0226e/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086627ecd24308d773a9e5a2765d0c1f19f0226e/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=086627ecd24308d773a9e5a2765d0c1f19f0226e", "patch": "@@ -61,16 +61,18 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -79,8 +81,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -89,16 +92,18 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -107,8 +112,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -117,8 +123,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -127,8 +134,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -137,25 +145,28 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange].\n+    ///\n+    /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    ///\n+    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    ///\n+    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -164,8 +175,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    ///\n+    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -174,16 +186,18 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    ///\n+    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    ///\n+    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -192,8 +206,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    ///\n+    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -202,8 +217,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    ///\n+    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -212,8 +228,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    ///\n+    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -222,8 +239,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`]\n-    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n+    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    ///\n+    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     /// Loads the current value of the pointer."}, {"sha": "f04394f716660e6a0460dd55efc98eba25635f88", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/086627ecd24308d773a9e5a2765d0c1f19f0226e/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086627ecd24308d773a9e5a2765d0c1f19f0226e/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=086627ecd24308d773a9e5a2765d0c1f19f0226e", "patch": "@@ -39,8 +39,10 @@ pub trait Stats {\n     ///\n     /// Note: this method sacrifices performance at the altar of accuracy\n     /// Depends on IEEE-754 arithmetic guarantees. See proof of correctness at:\n-    /// [\"Adaptive Precision Floating-Point Arithmetic and Fast Robust Geometric Predicates\"]\n-    /// (http://www.cs.cmu.edu/~quake-papers/robust-arithmetic.ps)\n+    /// [\"Adaptive Precision Floating-Point Arithmetic and Fast Robust Geometric\n+    /// Predicates\"][paper]\n+    ///\n+    /// [paper]: http://www.cs.cmu.edu/~quake-papers/robust-arithmetic.ps\n     fn sum(&self) -> f64;\n \n     /// Minimum value of the samples."}]}