{"sha": "7c94fa7d01f264e5268ab5f57519f071c00a6579", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOTRmYTdkMDFmMjY0ZTUyNjhhYjVmNTc1MTlmMDcxYzAwYTY1Nzk=", "commit": {"author": {"name": "Mikail Bagishov", "email": "bagishov.mikail@yandex.ru", "date": "2020-05-06T14:45:47Z"}, "committer": {"name": "Mikail Bagishov", "email": "bagishov.mikail@yandex.ru", "date": "2020-05-06T14:59:27Z"}, "message": "Fix usefulness check for never type", "tree": {"sha": "b0ef8b6a9f8653519b70bd0a3726c374f2c6d128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ef8b6a9f8653519b70bd0a3726c374f2c6d128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c94fa7d01f264e5268ab5f57519f071c00a6579", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE2VP2zUMUCEfzAYinY89LH52SGkAFAl6y0M8ACgkQY89LH52S\nGkDpZQwAuf4asXTcY4CSrAI5UjbVDeaOxJB14/2lsBWRFo6MRlPpkvmvLtmDDdbF\nu2n3jNtx+4uigp4EwCrOS6sMZL+rdN5JhbrHDN0fwebYs0qfpT/ZlttPvc1/Xwwq\nvJ1+c0bWGT3UTa9/PJQlrEor9un96Rw46uLJ7Ug9pi+QDKo3J1UJ3EAXCbMHKIMM\nBBoZbfx40x9TcTdyHf4qUod7ZcbhUJDKjEBL//fxyuzYEsq7nI6fmE5i9+J16ajr\nRnyRiNxzKe3tX0OnX5dCsNfUPJFXH7sU1QAFZnt190z8bxScFDyNCLIVS4U5DuMZ\nlTWuAiA2wLLQfvtm7vYxRJabZ9rFd8/5dn+XZOXVNRk1KJZAKW8OB2CAPISpttho\nSmaGxS0FpLRHg353Fn3iP6BDhoRIl8Cgo6tw0q5eWTCSIUTPArReyQnhFQgWeCo2\ny1RQjpZvXbHI3B0k22FFm4sI3EsQ4Y7NMTfdmnBpArfcH1cwCaIYanX3jHyrxADw\n/EJpz4Yf\n=NeKB\n-----END PGP SIGNATURE-----", "payload": "tree b0ef8b6a9f8653519b70bd0a3726c374f2c6d128\nparent efd8e34c396f1524623a495e47111f1047cf2879\nauthor Mikail Bagishov <bagishov.mikail@yandex.ru> 1588776347 +0300\ncommitter Mikail Bagishov <bagishov.mikail@yandex.ru> 1588777167 +0300\n\nFix usefulness check for never type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c94fa7d01f264e5268ab5f57519f071c00a6579", "html_url": "https://github.com/rust-lang/rust/commit/7c94fa7d01f264e5268ab5f57519f071c00a6579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c94fa7d01f264e5268ab5f57519f071c00a6579/comments", "author": {"login": "MikailBag", "id": 11889433, "node_id": "MDQ6VXNlcjExODg5NDMz", "avatar_url": "https://avatars.githubusercontent.com/u/11889433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MikailBag", "html_url": "https://github.com/MikailBag", "followers_url": "https://api.github.com/users/MikailBag/followers", "following_url": "https://api.github.com/users/MikailBag/following{/other_user}", "gists_url": "https://api.github.com/users/MikailBag/gists{/gist_id}", "starred_url": "https://api.github.com/users/MikailBag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MikailBag/subscriptions", "organizations_url": "https://api.github.com/users/MikailBag/orgs", "repos_url": "https://api.github.com/users/MikailBag/repos", "events_url": "https://api.github.com/users/MikailBag/events{/privacy}", "received_events_url": "https://api.github.com/users/MikailBag/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MikailBag", "id": 11889433, "node_id": "MDQ6VXNlcjExODg5NDMz", "avatar_url": "https://avatars.githubusercontent.com/u/11889433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MikailBag", "html_url": "https://github.com/MikailBag", "followers_url": "https://api.github.com/users/MikailBag/followers", "following_url": "https://api.github.com/users/MikailBag/following{/other_user}", "gists_url": "https://api.github.com/users/MikailBag/gists{/gist_id}", "starred_url": "https://api.github.com/users/MikailBag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MikailBag/subscriptions", "organizations_url": "https://api.github.com/users/MikailBag/orgs", "repos_url": "https://api.github.com/users/MikailBag/repos", "events_url": "https://api.github.com/users/MikailBag/events{/privacy}", "received_events_url": "https://api.github.com/users/MikailBag/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efd8e34c396f1524623a495e47111f1047cf2879", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd8e34c396f1524623a495e47111f1047cf2879", "html_url": "https://github.com/rust-lang/rust/commit/efd8e34c396f1524623a495e47111f1047cf2879"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "149f6504241e4a4f502cfca61544199b611783b7", "filename": "crates/ra_hir_ty/src/_match.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7c94fa7d01f264e5268ab5f57519f071c00a6579/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c94fa7d01f264e5268ab5f57519f071c00a6579/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2F_match.rs?ref=7c94fa7d01f264e5268ab5f57519f071c00a6579", "patch": "@@ -573,14 +573,20 @@ pub(crate) fn is_useful(\n     matrix: &Matrix,\n     v: &PatStack,\n ) -> MatchCheckResult<Usefulness> {\n-    // Handle the special case of enums with no variants. In that case, no match\n-    // arm is useful.\n-    if let Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(AdtId::EnumId(enum_id)), .. }) =\n-        cx.infer[cx.match_expr].strip_references()\n-    {\n-        if cx.db.enum_data(*enum_id).variants.is_empty() {\n+    // Handle two special cases:\n+    // - enum with no variants\n+    // - `!` type\n+    // In those cases, no match arm is useful.\n+    match cx.infer[cx.match_expr].strip_references() {\n+        Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(AdtId::EnumId(enum_id)), .. }) => {\n+            if cx.db.enum_data(*enum_id).variants.is_empty() {\n+                return Ok(Usefulness::NotUseful);\n+            }\n+        }\n+        Ty::Apply(ApplicationTy { ctor: TypeCtor::Never, .. }) => {\n             return Ok(Usefulness::NotUseful);\n         }\n+        _ => (),\n     }\n \n     if v.is_empty() {\n@@ -1917,6 +1923,17 @@ mod tests {\n         check_no_diagnostic(content);\n     }\n \n+    #[test]\n+    fn type_never() {\n+        let content = r\"\n+            fn test_fn(never: !) {\n+                match never {}\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n+\n     #[test]\n     fn enum_never_ref() {\n         let content = r\""}]}