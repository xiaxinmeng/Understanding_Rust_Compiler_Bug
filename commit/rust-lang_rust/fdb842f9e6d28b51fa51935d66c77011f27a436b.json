{"sha": "fdb842f9e6d28b51fa51935d66c77011f27a436b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYjg0MmY5ZTZkMjhiNTFmYTUxOTM1ZDY2Yzc3MDExZjI3YTQzNmI=", "commit": {"author": {"name": "Jeffrey Yasskin", "email": "jyasskin@gmail.com", "date": "2010-07-24T02:27:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-07T00:14:59Z"}, "message": "Fix LLVM translation of modules.", "tree": {"sha": "d07902b5ccd28828d8939116995aba8e2598fee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d07902b5ccd28828d8939116995aba8e2598fee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdb842f9e6d28b51fa51935d66c77011f27a436b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb842f9e6d28b51fa51935d66c77011f27a436b", "html_url": "https://github.com/rust-lang/rust/commit/fdb842f9e6d28b51fa51935d66c77011f27a436b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdb842f9e6d28b51fa51935d66c77011f27a436b/comments", "author": {"login": "jyasskin", "id": 83420, "node_id": "MDQ6VXNlcjgzNDIw", "avatar_url": "https://avatars.githubusercontent.com/u/83420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyasskin", "html_url": "https://github.com/jyasskin", "followers_url": "https://api.github.com/users/jyasskin/followers", "following_url": "https://api.github.com/users/jyasskin/following{/other_user}", "gists_url": "https://api.github.com/users/jyasskin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyasskin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyasskin/subscriptions", "organizations_url": "https://api.github.com/users/jyasskin/orgs", "repos_url": "https://api.github.com/users/jyasskin/repos", "events_url": "https://api.github.com/users/jyasskin/events{/privacy}", "received_events_url": "https://api.github.com/users/jyasskin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad", "html_url": "https://github.com/rust-lang/rust/commit/80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "280ccc6c7e3a74178888a15e1c3337f9231d9e8a", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdb842f9e6d28b51fa51935d66c77011f27a436b/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fdb842f9e6d28b51fa51935d66c77011f27a436b/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=fdb842f9e6d28b51fa51935d66c77011f27a436b", "patch": "@@ -418,7 +418,6 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       alt-tag.rs \\\n                       arithmetic-interference.rs \\\n                       argv.rs \\\n-                      auto-deref.rs \\\n                       autoderef-full-lval.rs \\\n                       autoderef-objfn.rs \\\n                       basic.rs \\\n@@ -452,7 +451,6 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       generic-drop-glue.rs \\\n                       generic-exterior-box.rs \\\n                       generic-fn-infer.rs \\\n-                      generic-fn-twice.rs \\\n                       generic-fn.rs \\\n                       generic-obj-with-derived-type.rs \\\n                       generic-obj.rs \\\n@@ -482,8 +480,6 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       mutable-alias-vec.rs \\\n                       mutable-vec-drop.rs \\\n                       mutual-recursion-group.rs \\\n-                      native-mod.rc \\\n-                      native.rc \\\n                       obj-as.rs \\\n                       obj-drop.rs \\\n                       obj-dtor.rs \\"}, {"sha": "c1ef49af0bf83788659417a5c185fc2c89171293", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fdb842f9e6d28b51fa51935d66c77011f27a436b/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/fdb842f9e6d28b51fa51935d66c77011f27a436b/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=fdb842f9e6d28b51fa51935d66c77011f27a436b", "patch": "@@ -588,7 +588,7 @@ let trans_crate\n     (* Maps a fn's or block's id to an LLVM metadata node (subprogram or\n        lexical block) representing it. *)\n   let (dbg_llscopes:(node_id, Llvm.llvalue) Hashtbl.t) = Hashtbl.create 0 in\n-  let declare_mod_item\n+  let rec declare_mod_item\n       (name:Ast.ident)\n       mod_item\n       : unit =\n@@ -616,9 +616,8 @@ let trans_crate\n         | Ast.MOD_ITEM_type _ ->\n             ()  (* Types get translated with their terms. *)\n \n-        | Ast.MOD_ITEM_mod _ ->\n-            ()  (* Modules simply contain other items that are translated\n-                   on their own. *)\n+        | Ast.MOD_ITEM_mod (_, items) ->\n+            Hashtbl.iter declare_mod_item items\n \n         | _ ->\n             Common.unimpl (Some id)\n@@ -807,6 +806,17 @@ let trans_crate\n                             Ast.sprintf_lval lval)\n       in\n \n+      let trans_callee (fn:Ast.lval) : (Llvm.llvalue * Ast.ty) =\n+        let fty = Hashtbl.find sem_cx.ctxt_all_lval_types (lval_base_id fn) in\n+          if lval_base_is_item sem_cx fn then\n+            let fn_item = lval_item sem_cx fn in\n+            let llfn = Hashtbl.find llitems (fn_item.id) in\n+              (llfn, fty)\n+          else\n+            (* indirect call to computed slot *)\n+            trans_lval fn\n+      in\n+\n       let trans_atom (atom:Ast.atom) : Llvm.llvalue =\n         iflog (fun _ -> log sem_cx \"trans_atom: %a\" Ast.sprintf_atom atom);\n         match atom with\n@@ -959,7 +969,7 @@ let trans_crate\n               | Ast.STMT_call (dest, fn, args) ->\n                   let llargs = Array.map trans_atom args in\n                   let (lldest, _) = trans_lval dest in\n-                  let (llfn, _) = trans_lval fn in\n+                  let (llfn, _) = trans_callee fn in\n                   let llallargs = Array.append [| lldest; lltask |] llargs in\n                   let llrv = build_call llfn llallargs \"\" llbuilder in\n                     Llvm.set_instruction_call_conv Llvm.CallConv.c llrv;\n@@ -1072,13 +1082,22 @@ let trans_crate\n       ignore (Llvm.build_br llbodyblock llinitbuilder)\n   in\n \n-  let trans_mod_item\n-      (_:Ast.ident)\n-      { node = { Ast.decl_item = (item:Ast.mod_item') }; id = id }\n+  let rec trans_mod_item\n+      (name:Ast.ident)\n+      mod_item\n       : unit =\n+    let { node = { Ast.decl_item = (item:Ast.mod_item') }; id = id } =\n+      mod_item in\n     match item with\n-        Ast.MOD_ITEM_fn fn -> trans_fn fn id\n-      | _ -> ()\n+        Ast.MOD_ITEM_type _ ->\n+          ()  (* Types get translated with their terms. *)\n+      | Ast.MOD_ITEM_mod (_, items) ->\n+          Hashtbl.iter trans_mod_item items\n+      | Ast.MOD_ITEM_fn fn -> trans_fn fn id\n+      | _ -> Common.unimpl (Some id)\n+          \"LLVM module declaration for: %a\"\n+            Ast.sprintf_mod_item (name, mod_item)\n+\n   in\n \n   let exit_task_glue ="}]}