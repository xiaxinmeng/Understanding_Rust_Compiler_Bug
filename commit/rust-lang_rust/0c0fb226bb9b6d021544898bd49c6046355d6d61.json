{"sha": "0c0fb226bb9b6d021544898bd49c6046355d6d61", "node_id": "C_kwDOAAsO6NoAKDBjMGZiMjI2YmI5YjZkMDIxNTQ0ODk4YmQ0OWM2MDQ2MzU1ZDZkNjE", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-02T17:17:31Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-08T17:23:44Z"}, "message": "Support `#[track_caller]` on async closures", "tree": {"sha": "a95e84b4fcc50985867cc9bd1ccadf8fd0314896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a95e84b4fcc50985867cc9bd1ccadf8fd0314896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c0fb226bb9b6d021544898bd49c6046355d6d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0fb226bb9b6d021544898bd49c6046355d6d61", "html_url": "https://github.com/rust-lang/rust/commit/0c0fb226bb9b6d021544898bd49c6046355d6d61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c0fb226bb9b6d021544898bd49c6046355d6d61/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7632db0e87d8adccc9a83a47795c9411b1455855", "url": "https://api.github.com/repos/rust-lang/rust/commits/7632db0e87d8adccc9a83a47795c9411b1455855", "html_url": "https://github.com/rust-lang/rust/commit/7632db0e87d8adccc9a83a47795c9411b1455855"}], "stats": {"total": 88, "additions": 77, "deletions": 11}, "files": [{"sha": "69192457ebdc83a6e42e25d04f9083a3c25d75ce", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c0fb226bb9b6d021544898bd49c6046355d6d61/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0fb226bb9b6d021544898bd49c6046355d6d61/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=0c0fb226bb9b6d021544898bd49c6046355d6d61", "patch": "@@ -31,6 +31,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     pub(super) fn lower_expr_mut(&mut self, e: &Expr) -> hir::Expr<'hir> {\n         ensure_sufficient_stack(|| {\n+            let hir_id = self.lower_node_id(e.id);\n+            self.lower_attrs(hir_id, &e.attrs);\n+\n             let kind = match &e.kind {\n                 ExprKind::Box(inner) => hir::ExprKind::Box(self.lower_expr(inner)),\n                 ExprKind::Array(exprs) => hir::ExprKind::Array(self.lower_exprs(exprs)),\n@@ -147,7 +150,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ),\n                 ExprKind::Async(capture_clause, closure_node_id, block) => self.make_async_expr(\n                     *capture_clause,\n-                    None,\n+                    hir_id,\n                     *closure_node_id,\n                     None,\n                     e.span,\n@@ -184,6 +187,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             binder,\n                             *capture_clause,\n                             e.id,\n+                            hir_id,\n                             *closure_id,\n                             fn_decl,\n                             body,\n@@ -310,8 +314,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::MacCall(_) => panic!(\"{:?} shouldn't exist here\", e.span),\n             };\n \n-            let hir_id = self.lower_node_id(e.id);\n-            self.lower_attrs(hir_id, &e.attrs);\n             hir::Expr { hir_id, kind, span: self.lower_span(e.span) }\n         })\n     }\n@@ -576,7 +578,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn make_async_expr(\n         &mut self,\n         capture_clause: CaptureBy,\n-        outer_hir_id: Option<hir::HirId>,\n+        outer_hir_id: hir::HirId,\n         closure_node_id: NodeId,\n         ret_ty: Option<hir::FnRetTy<'hir>>,\n         span: Span,\n@@ -669,8 +671,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             hir::ExprKind::Closure(c)\n         };\n \n-        let track_caller = outer_hir_id\n-            .and_then(|id| self.attrs.get(&id.local_id))\n+        let track_caller = self\n+            .attrs\n+            .get(&outer_hir_id.local_id)\n             .map_or(false, |attrs| attrs.into_iter().any(|attr| attr.has_name(sym::track_caller)));\n \n         let hir_id = self.lower_node_id(closure_node_id);\n@@ -985,6 +988,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         binder: &ClosureBinder,\n         capture_clause: CaptureBy,\n         closure_id: NodeId,\n+        closure_hir_id: hir::HirId,\n         inner_closure_id: NodeId,\n         decl: &FnDecl,\n         body: &Expr,\n@@ -1018,9 +1022,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 let async_body = this.make_async_expr(\n                     capture_clause,\n-                    // FIXME(nbdd0121): This should also use a proper HIR id so `#[track_caller]`\n-                    // can be applied on async closures as well.\n-                    None,\n+                    closure_hir_id,\n                     inner_closure_id,\n                     async_ret_ty,\n                     body.span,"}, {"sha": "73065ab516350fe33c50fae50de39a228278340f", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c0fb226bb9b6d021544898bd49c6046355d6d61/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0fb226bb9b6d021544898bd49c6046355d6d61/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=0c0fb226bb9b6d021544898bd49c6046355d6d61", "patch": "@@ -1139,7 +1139,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             let async_expr = this.make_async_expr(\n                 CaptureBy::Value,\n-                Some(fn_id),\n+                fn_id,\n                 closure_id,\n                 None,\n                 body.span,"}, {"sha": "8e81387c34bd056013659ffca95f4840e031f7d2", "filename": "src/test/ui/async-await/track-caller/async-block.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c0fb226bb9b6d021544898bd49c6046355d6d61/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0fb226bb9b6d021544898bd49c6046355d6d61/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.rs?ref=0c0fb226bb9b6d021544898bd49c6046355d6d61", "patch": "@@ -0,0 +1,9 @@\n+// edition:2021\n+\n+#![feature(closure_track_caller, stmt_expr_attributes)]\n+\n+fn main() {\n+    let _ = #[track_caller] async {\n+        //~^ ERROR attribute should be applied to a function definition [E0739]\n+    };\n+}"}, {"sha": "407439921c0d44dccec43274a576a60f4ed62ed5", "filename": "src/test/ui/async-await/track-caller/async-block.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c0fb226bb9b6d021544898bd49c6046355d6d61/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c0fb226bb9b6d021544898bd49c6046355d6d61/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.stderr?ref=0c0fb226bb9b6d021544898bd49c6046355d6d61", "patch": "@@ -0,0 +1,12 @@\n+error[E0739]: attribute should be applied to a function definition\n+  --> $DIR/async-block.rs:6:13\n+   |\n+LL |       let _ = #[track_caller] async {\n+   |  _____________^^^^^^^^^^^^^^^_-\n+LL | |\n+LL | |     };\n+   | |_____- not a function definition\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0739`."}, {"sha": "9593fdb1908e22213b5ea35303338e37379da8bf", "filename": "src/test/ui/async-await/track-caller/async-closure-gate.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c0fb226bb9b6d021544898bd49c6046355d6d61/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0fb226bb9b6d021544898bd49c6046355d6d61/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.rs?ref=0c0fb226bb9b6d021544898bd49c6046355d6d61", "patch": "@@ -0,0 +1,10 @@\n+// edition:2021\n+\n+#![feature(async_closure, stmt_expr_attributes)]\n+\n+fn main() {\n+    let _ = #[track_caller] async || {\n+        //~^ ERROR `#[track_caller]` on closures is currently unstable [E0658]\n+        //~| ERROR `#[track_caller]` on closures is currently unstable [E0658]\n+    };\n+}"}, {"sha": "be3d110eccdb002e68617843dfe505c456ecf91c", "filename": "src/test/ui/async-await/track-caller/async-closure-gate.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0c0fb226bb9b6d021544898bd49c6046355d6d61/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c0fb226bb9b6d021544898bd49c6046355d6d61/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-closure-gate.stderr?ref=0c0fb226bb9b6d021544898bd49c6046355d6d61", "patch": "@@ -0,0 +1,25 @@\n+error[E0658]: `#[track_caller]` on closures is currently unstable\n+  --> $DIR/async-closure-gate.rs:6:13\n+   |\n+LL |     let _ = #[track_caller] async || {\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n+\n+error[E0658]: `#[track_caller]` on closures is currently unstable\n+  --> $DIR/async-closure-gate.rs:6:38\n+   |\n+LL |       let _ = #[track_caller] async || {\n+   |  ______________________________________^\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "066cf97628fa5cd9d5852847bfddb5f799c7555a", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c0fb226bb9b6d021544898bd49c6046355d6d61/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0fb226bb9b6d021544898bd49c6046355d6d61/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs?ref=0c0fb226bb9b6d021544898bd49c6046355d6d61", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // edition:2021\n // needs-unwind\n-#![feature(closure_track_caller)]\n+#![feature(closure_track_caller, async_closure, stmt_expr_attributes)]\n \n use std::future::Future;\n use std::panic;\n@@ -67,6 +67,13 @@ async fn foo_assoc() {\n     Foo::bar_assoc().await\n }\n \n+async fn foo_closure() {\n+    let c = #[track_caller] async || {\n+        panic!();\n+    };\n+    c().await\n+}\n+\n fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n     let loc = Arc::new(Mutex::new(None));\n \n@@ -87,4 +94,5 @@ fn main() {\n     assert_eq!(panicked_at(|| block_on(foo())), 41);\n     assert_eq!(panicked_at(|| block_on(foo_track_caller())), 54);\n     assert_eq!(panicked_at(|| block_on(foo_assoc())), 67);\n+    assert_eq!(panicked_at(|| block_on(foo_closure())), 74);\n }"}]}