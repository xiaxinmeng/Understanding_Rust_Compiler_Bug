{"sha": "a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YjEzODFiOGRkMDcwNDk2NmE1YzJhYjdlNGNhMGZmOTZkMDVhMTg=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-12-02T22:35:40Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-12-02T23:02:01Z"}, "message": "fix copy specialization not updating Take wrappers", "tree": {"sha": "10f207747b37b100d9fa8ce6d4bac0c69bd363c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10f207747b37b100d9fa8ce6d4bac0c69bd363c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18", "html_url": "https://github.com/rust-lang/rust/commit/a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b390e73db26f17415dfeab2e49f13f04ad2474b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b390e73db26f17415dfeab2e49f13f04ad2474b", "html_url": "https://github.com/rust-lang/rust/commit/9b390e73db26f17415dfeab2e49f13f04ad2474b"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "d1b0ad9e5f847cd34a7292ca5e7d0abab7ca8127", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18", "patch": "@@ -1211,7 +1211,8 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     use super::kernel_copy::{copy_regular_files, CopyResult};\n \n     match copy_regular_files(reader.as_raw_fd(), writer.as_raw_fd(), max_len) {\n-        CopyResult::Ended(result) => result,\n+        CopyResult::Ended(bytes) => Ok(bytes),\n+        CopyResult::Error(e, _) => Err(e),\n         CopyResult::Fallback(written) => match io::copy::generic_copy(&mut reader, &mut writer) {\n             Ok(bytes) => Ok(bytes + written),\n             Err(e) => Err(e),"}, {"sha": "5bfac80315348b959a5671805ed0fcc115514459", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18", "patch": "@@ -167,10 +167,11 @@ impl<R: CopyRead, W: CopyWrite> SpecCopy for Copier<'_, '_, R, W> {\n \n             if input_meta.copy_file_range_candidate() && output_meta.copy_file_range_candidate() {\n                 let result = copy_regular_files(readfd, writefd, max_write);\n+                result.update_take(reader);\n \n                 match result {\n-                    CopyResult::Ended(Ok(bytes_copied)) => return Ok(bytes_copied + written),\n-                    CopyResult::Ended(err) => return err,\n+                    CopyResult::Ended(bytes_copied) => return Ok(bytes_copied + written),\n+                    CopyResult::Error(e, _) => return Err(e),\n                     CopyResult::Fallback(bytes) => written += bytes,\n                 }\n             }\n@@ -182,20 +183,22 @@ impl<R: CopyRead, W: CopyWrite> SpecCopy for Copier<'_, '_, R, W> {\n             // fall back to the generic copy loop.\n             if input_meta.potential_sendfile_source() {\n                 let result = sendfile_splice(SpliceMode::Sendfile, readfd, writefd, max_write);\n+                result.update_take(reader);\n \n                 match result {\n-                    CopyResult::Ended(Ok(bytes_copied)) => return Ok(bytes_copied + written),\n-                    CopyResult::Ended(err) => return err,\n+                    CopyResult::Ended(bytes_copied) => return Ok(bytes_copied + written),\n+                    CopyResult::Error(e, _) => return Err(e),\n                     CopyResult::Fallback(bytes) => written += bytes,\n                 }\n             }\n \n             if input_meta.maybe_fifo() || output_meta.maybe_fifo() {\n                 let result = sendfile_splice(SpliceMode::Splice, readfd, writefd, max_write);\n+                result.update_take(reader);\n \n                 match result {\n-                    CopyResult::Ended(Ok(bytes_copied)) => return Ok(bytes_copied + written),\n-                    CopyResult::Ended(err) => return err,\n+                    CopyResult::Ended(bytes_copied) => return Ok(bytes_copied + written),\n+                    CopyResult::Error(e, _) => return Err(e),\n                     CopyResult::Fallback(0) => { /* use the fallback below */ }\n                     CopyResult::Fallback(_) => {\n                         unreachable!(\"splice should not return > 0 bytes on the fallback path\")\n@@ -225,6 +228,9 @@ trait CopyRead: Read {\n         Ok(0)\n     }\n \n+    /// Updates `Take` wrappers to remove the number of bytes copied.\n+    fn taken(&mut self, _bytes: u64) {}\n+\n     /// The minimum of the limit of all `Take<_>` wrappers, `u64::MAX` otherwise.\n     /// This method does not account for data `BufReader` buffers and would underreport\n     /// the limit of a `Take<BufReader<Take<_>>>` type. Thus its result is only valid\n@@ -251,6 +257,10 @@ where\n         (**self).drain_to(writer, limit)\n     }\n \n+    fn taken(&mut self, bytes: u64) {\n+        (**self).taken(bytes);\n+    }\n+\n     fn min_limit(&self) -> u64 {\n         (**self).min_limit()\n     }\n@@ -407,6 +417,11 @@ impl<T: CopyRead> CopyRead for Take<T> {\n         Ok(bytes_drained)\n     }\n \n+    fn taken(&mut self, bytes: u64) {\n+        self.set_limit(self.limit() - bytes);\n+        self.get_mut().taken(bytes);\n+    }\n+\n     fn min_limit(&self) -> u64 {\n         min(Take::limit(self), self.get_ref().min_limit())\n     }\n@@ -432,6 +447,10 @@ impl<T: CopyRead> CopyRead for BufReader<T> {\n         Ok(bytes as u64 + inner_bytes)\n     }\n \n+    fn taken(&mut self, bytes: u64) {\n+        self.get_mut().taken(bytes);\n+    }\n+\n     fn min_limit(&self) -> u64 {\n         self.get_ref().min_limit()\n     }\n@@ -457,10 +476,21 @@ fn fd_to_meta<T: AsRawFd>(fd: &T) -> FdMeta {\n }\n \n pub(super) enum CopyResult {\n-    Ended(Result<u64>),\n+    Ended(u64),\n+    Error(Error, u64),\n     Fallback(u64),\n }\n \n+impl CopyResult {\n+    fn update_take(&self, reader: &mut impl CopyRead) {\n+        match *self {\n+            CopyResult::Fallback(bytes)\n+            | CopyResult::Ended(bytes)\n+            | CopyResult::Error(_, bytes) => reader.taken(bytes),\n+        }\n+    }\n+}\n+\n /// linux-specific implementation that will attempt to use copy_file_range for copy offloading\n /// as the name says, it only works on regular files\n ///\n@@ -527,7 +557,7 @@ pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) ->\n                 // - copying from an overlay filesystem in docker. reported to occur on fedora 32.\n                 return CopyResult::Fallback(0);\n             }\n-            Ok(0) => return CopyResult::Ended(Ok(written)), // reached EOF\n+            Ok(0) => return CopyResult::Ended(written), // reached EOF\n             Ok(ret) => written += ret as u64,\n             Err(err) => {\n                 return match err.raw_os_error() {\n@@ -545,12 +575,12 @@ pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) ->\n                         assert_eq!(written, 0);\n                         CopyResult::Fallback(0)\n                     }\n-                    _ => CopyResult::Ended(Err(err)),\n+                    _ => CopyResult::Error(err, written),\n                 };\n             }\n         }\n     }\n-    CopyResult::Ended(Ok(written))\n+    CopyResult::Ended(written)\n }\n \n #[derive(PartialEq)]\n@@ -623,10 +653,10 @@ fn sendfile_splice(mode: SpliceMode, reader: RawFd, writer: RawFd, len: u64) ->\n                     Some(os_err) if mode == SpliceMode::Sendfile && os_err == libc::EOVERFLOW => {\n                         CopyResult::Fallback(written)\n                     }\n-                    _ => CopyResult::Ended(Err(err)),\n+                    _ => CopyResult::Error(err, written),\n                 };\n             }\n         }\n     }\n-    CopyResult::Ended(Ok(written))\n+    CopyResult::Ended(written)\n }"}, {"sha": "3937a1ffa38b5fee6d7271c3e6c755ca262cae52", "filename": "library/std/src/sys/unix/kernel_copy/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs?ref=a9b1381b8dd0704966a5c2ab7e4ca0ff96d05a18", "patch": "@@ -217,7 +217,7 @@ fn bench_socket_pipe_socket_copy(b: &mut test::Bencher) {\n     );\n \n     match probe {\n-        CopyResult::Ended(Ok(1)) => {\n+        CopyResult::Ended(1) => {\n             // splice works\n         }\n         _ => {"}]}