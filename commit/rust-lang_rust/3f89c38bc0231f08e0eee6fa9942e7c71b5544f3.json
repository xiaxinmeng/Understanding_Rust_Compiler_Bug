{"sha": "3f89c38bc0231f08e0eee6fa9942e7c71b5544f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmODljMzhiYzAyMzFmMDhlMGVlZTZmYTk5NDJlN2M3MWI1NTQ0ZjM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-14T19:12:54Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-23T12:14:39Z"}, "message": "Inline `const_param_def_id` at its only use site", "tree": {"sha": "40612ad4eb5bfd0477d3a7269acba7bec4a91575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40612ad4eb5bfd0477d3a7269acba7bec4a91575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f89c38bc0231f08e0eee6fa9942e7c71b5544f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f89c38bc0231f08e0eee6fa9942e7c71b5544f3", "html_url": "https://github.com/rust-lang/rust/commit/3f89c38bc0231f08e0eee6fa9942e7c71b5544f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f89c38bc0231f08e0eee6fa9942e7c71b5544f3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa5a15c7d507f8d2d27770602101b9d0b5cc71bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa5a15c7d507f8d2d27770602101b9d0b5cc71bc", "html_url": "https://github.com/rust-lang/rust/commit/fa5a15c7d507f8d2d27770602101b9d0b5cc71bc"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "9e0f4668d95a1b73ae5d08bbd209eb6b1b2d04ad", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3f89c38bc0231f08e0eee6fa9942e7c71b5544f3/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f89c38bc0231f08e0eee6fa9942e7c71b5544f3/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3f89c38bc0231f08e0eee6fa9942e7c71b5544f3", "patch": "@@ -2401,26 +2401,6 @@ pub struct Const<'tcx> {\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(Const<'_>, 48);\n \n-/// Returns the `DefId` of the constant parameter that the provided expression is a path to.\n-fn const_param_def_id(expr: &hir::Expr<'_>) -> Option<DefId> {\n-    // Unwrap a block, so that e.g. `{ P }` is recognised as a parameter. Const arguments\n-    // currently have to be wrapped in curly brackets, so it's necessary to special-case.\n-    let expr = match &expr.kind {\n-        hir::ExprKind::Block(block, _) if block.stmts.is_empty() && block.expr.is_some() => {\n-            block.expr.as_ref().unwrap()\n-        }\n-        _ => expr,\n-    };\n-\n-    match &expr.kind {\n-        hir::ExprKind::Path(hir::QPath::Resolved(_, path)) => match path.res {\n-            hir::def::Res::Def(hir::def::DefKind::ConstParam, did) => Some(did),\n-            _ => None,\n-        },\n-        _ => None,\n-    }\n-}\n-\n impl<'tcx> Const<'tcx> {\n     /// Literals and const generic parameters are eagerly converted to a constant, everything else\n     /// becomes `Unevaluated`.\n@@ -2456,20 +2436,36 @@ impl<'tcx> Const<'tcx> {\n             }\n         }\n \n-        let kind = if let Some(def_id) = const_param_def_id(expr) {\n-            // Find the name and index of the const parameter by indexing the generics of the\n-            // parent item and construct a `ParamConst`.\n-            let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-            let item_id = tcx.hir().get_parent_node(hir_id);\n-            let item_def_id = tcx.hir().local_def_id(item_id);\n-            let generics = tcx.generics_of(item_def_id);\n-            let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(hir_id)];\n-            let name = tcx.hir().name(hir_id);\n-            ty::ConstKind::Param(ty::ParamConst::new(index, name))\n-        } else {\n-            ty::ConstKind::Unevaluated(def_id, InternalSubsts::identity_for_item(tcx, def_id), None)\n+        // Unwrap a block, so that e.g. `{ P }` is recognised as a parameter. Const arguments\n+        // currently have to be wrapped in curly brackets, so it's necessary to special-case.\n+        let expr = match &expr.kind {\n+            hir::ExprKind::Block(block, _) if block.stmts.is_empty() && block.expr.is_some() => {\n+                block.expr.as_ref().unwrap()\n+            }\n+            _ => expr,\n         };\n-        tcx.mk_const(ty::Const { val: kind, ty })\n+\n+        use hir::{def::DefKind::ConstParam, def::Res, ExprKind, Path, QPath};\n+        let val = match expr.kind {\n+            ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {\n+                // Find the name and index of the const parameter by indexing the generics of\n+                // the parent item and construct a `ParamConst`.\n+                let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+                let item_id = tcx.hir().get_parent_node(hir_id);\n+                let item_def_id = tcx.hir().local_def_id(item_id);\n+                let generics = tcx.generics_of(item_def_id);\n+                let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(hir_id)];\n+                let name = tcx.hir().name(hir_id);\n+                ty::ConstKind::Param(ty::ParamConst::new(index, name))\n+            }\n+            _ => ty::ConstKind::Unevaluated(\n+                def_id,\n+                InternalSubsts::identity_for_item(tcx, def_id),\n+                None,\n+            ),\n+        };\n+\n+        tcx.mk_const(ty::Const { val, ty })\n     }\n \n     #[inline]"}]}