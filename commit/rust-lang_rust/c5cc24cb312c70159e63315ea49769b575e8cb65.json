{"sha": "c5cc24cb312c70159e63315ea49769b575e8cb65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1Y2MyNGNiMzEyYzcwMTU5ZTYzMzE1ZWE0OTc2OWI1NzVlOGNiNjU=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-28T20:04:00Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-10T12:44:54Z"}, "message": "Revert function structs back to using bool to track self param, use first param for self information in syntax highlighting instead", "tree": {"sha": "fc2f5fe712e5776e0356c8e4f09135692a5ccc20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc2f5fe712e5776e0356c8e4f09135692a5ccc20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5cc24cb312c70159e63315ea49769b575e8cb65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5cc24cb312c70159e63315ea49769b575e8cb65", "html_url": "https://github.com/rust-lang/rust/commit/c5cc24cb312c70159e63315ea49769b575e8cb65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5cc24cb312c70159e63315ea49769b575e8cb65/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca3d6c57ec2c668cdb51eca34d6f7bc8fa7412b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca3d6c57ec2c668cdb51eca34d6f7bc8fa7412b", "html_url": "https://github.com/rust-lang/rust/commit/aca3d6c57ec2c668cdb51eca34d6f7bc8fa7412b"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "0007d7fa881a1fdf95a8de92b5d0c7eca4c04d10", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=c5cc24cb312c70159e63315ea49769b575e8cb65", "patch": "@@ -11,7 +11,6 @@ use hir_def::{\n     docs::Documentation,\n     expr::{BindingAnnotation, Pat, PatId},\n     import_map,\n-    item_tree::SelfParam,\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n     src::HasSource as _,\n@@ -671,8 +670,8 @@ impl Function {\n         db.function_data(self.id).name.clone()\n     }\n \n-    pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n-        db.function_data(self.id).self_param\n+    pub fn has_self_param(self, db: &dyn HirDatabase) -> bool {\n+        db.function_data(self.id).has_self_param\n     }\n \n     pub fn params(self, db: &dyn HirDatabase) -> Vec<TypeRef> {"}, {"sha": "34b02c5365f95ffa258dac6930b720764becfe81", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=c5cc24cb312c70159e63315ea49769b575e8cb65", "patch": "@@ -49,7 +49,7 @@ pub use hir_def::{\n     docs::Documentation,\n     nameres::ModuleSource,\n     path::{ModPath, Path, PathKind},\n-    type_ref::Mutability,\n+    type_ref::{Mutability, TypeRef},\n };\n pub use hir_expand::{\n     hygiene::Hygiene, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc,"}, {"sha": "88a8ef9bffebedec08f3181688aed1bd15c2c518", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=c5cc24cb312c70159e63315ea49769b575e8cb65", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     attr::Attrs,\n     body::Expander,\n     db::DefDatabase,\n-    item_tree::{AssocItem, ItemTreeId, ModItem, SelfParam},\n+    item_tree::{AssocItem, ItemTreeId, ModItem},\n     type_ref::{TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocContainerId, AssocItemId, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n@@ -25,7 +25,7 @@ pub struct FunctionData {\n     pub attrs: Attrs,\n     /// True if the first param is `self`. This is relevant to decide whether this\n     /// can be called as a method.\n-    pub self_param: Option<SelfParam>,\n+    pub has_self_param: bool,\n     pub is_unsafe: bool,\n     pub is_varargs: bool,\n     pub visibility: RawVisibility,\n@@ -42,7 +42,7 @@ impl FunctionData {\n             params: func.params.to_vec(),\n             ret_type: func.ret_type.clone(),\n             attrs: item_tree.attrs(ModItem::from(loc.id.value).into()).clone(),\n-            self_param: func.self_param,\n+            has_self_param: func.has_self_param,\n             is_unsafe: func.is_unsafe,\n             is_varargs: func.is_varargs,\n             visibility: item_tree[func.visibility].clone(),"}, {"sha": "a67e75dac069000341344ae64240b792e2ab202f", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=c5cc24cb312c70159e63315ea49769b575e8cb65", "patch": "@@ -500,20 +500,14 @@ pub struct Function {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n-    pub self_param: Option<SelfParam>,\n+    pub has_self_param: bool,\n     pub is_unsafe: bool,\n     pub params: Box<[TypeRef]>,\n     pub is_varargs: bool,\n     pub ret_type: TypeRef,\n     pub ast_id: FileAstId<ast::Fn>,\n }\n \n-#[derive(Debug, Copy, Clone, Eq, PartialEq)]\n-pub struct SelfParam {\n-    pub is_ref: bool,\n-    pub is_mut: bool,\n-}\n-\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Struct {\n     pub name: Name,"}, {"sha": "450ef879814e06a1c13e7468dd027f0e18c6a901", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c5cc24cb312c70159e63315ea49769b575e8cb65", "patch": "@@ -283,7 +283,7 @@ impl Ctx {\n         let name = func.name()?.as_name();\n \n         let mut params = Vec::new();\n-        let mut func_self_param = None;\n+        let mut has_self_param = false;\n         if let Some(param_list) = func.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n                 let self_type = match self_param.ty() {\n@@ -302,10 +302,7 @@ impl Ctx {\n                     }\n                 };\n                 params.push(self_type);\n-                func_self_param = Some(SelfParam {\n-                    is_ref: self_param.amp_token().is_some(),\n-                    is_mut: self_param.mut_token().is_some(),\n-                });\n+                has_self_param = true;\n             }\n             for param in param_list.params() {\n                 let type_ref = TypeRef::from_ast_opt(&self.body_ctx, param.ty());\n@@ -338,7 +335,7 @@ impl Ctx {\n             name,\n             visibility,\n             generic_params: GenericParamsId::EMPTY,\n-            self_param: func_self_param,\n+            has_self_param,\n             is_unsafe: func.unsafe_token().is_some(),\n             params: params.into_boxed_slice(),\n             is_varargs,"}, {"sha": "fb4b30a131fc1ddf2ad599c4bbccff0376e4b7ad", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=c5cc24cb312c70159e63315ea49769b575e8cb65", "patch": "@@ -640,7 +640,7 @@ fn is_valid_candidate(\n                 }\n             }\n             if let Some(receiver_ty) = receiver_ty {\n-                if data.self_param.is_none() {\n+                if !data.has_self_param {\n                     return false;\n                 }\n                 let transformed_receiver_ty = match transform_receiver_ty(db, m, self_ty) {"}, {"sha": "5326652852f0ba7cd055c421ab54b0e8f5a394a0", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=c5cc24cb312c70159e63315ea49769b575e8cb65", "patch": "@@ -48,7 +48,7 @@ fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: &T\n         let mut seen_methods = FxHashSet::default();\n         let traits_in_scope = ctx.scope.traits_in_scope();\n         receiver.iterate_method_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, func| {\n-            if func.self_param(ctx.db).is_some()\n+            if func.has_self_param(ctx.db)\n                 && ctx.scope.module().map_or(true, |m| func.is_visible_from(ctx.db, m))\n                 && seen_methods.insert(func.name(ctx.db))\n             {"}, {"sha": "d9a0ef167dbdc7cb2cc3e9ba614e6afa896fd08e", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=c5cc24cb312c70159e63315ea49769b575e8cb65", "patch": "@@ -136,7 +136,7 @@ fn add_function_impl(\n         .lookup_by(fn_name)\n         .set_documentation(func.docs(ctx.db));\n \n-    let completion_kind = if func.self_param(ctx.db).is_some() {\n+    let completion_kind = if func.has_self_param(ctx.db) {\n         CompletionItemKind::Method\n     } else {\n         CompletionItemKind::Function"}, {"sha": "9a94ff476710cb2560977adb7fa878a7a751af2e", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=c5cc24cb312c70159e63315ea49769b575e8cb65", "patch": "@@ -191,7 +191,7 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<String>,\n     ) {\n-        let has_self_param = func.self_param(ctx.db).is_some();\n+        let has_self_param = func.has_self_param(ctx.db);\n \n         let name = local_name.unwrap_or_else(|| func.name(ctx.db).to_string());\n         let ast_node = func.source(ctx.db).value;"}, {"sha": "d5a5f69cca31306ebd57dca04c029661fa473a61", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc24cb312c70159e63315ea49769b575e8cb65/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=c5cc24cb312c70159e63315ea49769b575e8cb65", "patch": "@@ -4,7 +4,7 @@ mod injection;\n #[cfg(test)]\n mod tests;\n \n-use hir::{Name, Semantics, VariantDef};\n+use hir::{Name, Semantics, TypeRef, VariantDef};\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -756,8 +756,13 @@ fn is_method_call_unsafe(\n     }\n \n     let func = sema.resolve_method_call(&method_call_expr)?;\n-    if func.self_param(sema.db)?.is_ref {\n-        Some(())\n+    if func.has_self_param(sema.db) {\n+        let params = func.params(sema.db);\n+        if matches!(params.into_iter().next(), Some(TypeRef::Reference(..))) {\n+            Some(())\n+        } else {\n+            None\n+        }\n     } else {\n         None\n     }"}]}