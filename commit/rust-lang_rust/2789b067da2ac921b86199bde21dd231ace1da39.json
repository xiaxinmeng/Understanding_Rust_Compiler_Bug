{"sha": "2789b067da2ac921b86199bde21dd231ace1da39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ODliMDY3ZGEyYWM5MjFiODYxOTliZGUyMWRkMjMxYWNlMWRhMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-06T15:01:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-06T15:01:21Z"}, "message": "Auto merge of #48768 - kennytm:rollup, r=kennytm\n\nRollup of 14 pull requests\n\n- Successful merges: #48403, #48432, #48546, #48573, #48590, #48657, #48727, #48732, #48753, #48754, #48761, #48474, #48507, #47463\n- Failed merges:", "tree": {"sha": "d39a80c2778ced0f9437ade7f4e76ef51e364bfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d39a80c2778ced0f9437ade7f4e76ef51e364bfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2789b067da2ac921b86199bde21dd231ace1da39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2789b067da2ac921b86199bde21dd231ace1da39", "html_url": "https://github.com/rust-lang/rust/commit/2789b067da2ac921b86199bde21dd231ace1da39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2789b067da2ac921b86199bde21dd231ace1da39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b977e044a7485a95852bfce12f1054bcc673355d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b977e044a7485a95852bfce12f1054bcc673355d", "html_url": "https://github.com/rust-lang/rust/commit/b977e044a7485a95852bfce12f1054bcc673355d"}, {"sha": "8e3493d45924fdb869c37dcb992759f71defed7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3493d45924fdb869c37dcb992759f71defed7c", "html_url": "https://github.com/rust-lang/rust/commit/8e3493d45924fdb869c37dcb992759f71defed7c"}], "stats": {"total": 1068, "additions": 684, "deletions": 384}, "files": [{"sha": "ac2223f4acef3052d32d35689b90eb1227ca4a19", "filename": "src/etc/sugarise-doc-comments.py", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/b977e044a7485a95852bfce12f1054bcc673355d/src%2Fetc%2Fsugarise-doc-comments.py", "raw_url": "https://github.com/rust-lang/rust/raw/b977e044a7485a95852bfce12f1054bcc673355d/src%2Fetc%2Fsugarise-doc-comments.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsugarise-doc-comments.py?ref=b977e044a7485a95852bfce12f1054bcc673355d", "patch": "@@ -1,93 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-#\n-# this script attempts to turn doc comment attributes (#[doc = \"...\"])\n-# into sugared-doc-comments (/** ... */ and /// ...)\n-#\n-# it sugarises all .rs/.rc files underneath the working directory\n-#\n-\n-import sys\n-import os\n-import fnmatch\n-import re\n-\n-\n-DOC_PATTERN = '^(?P<indent>[\\\\t ]*)#\\\\[(\\\\s*)doc(\\\\s*)=' + \\\n-              '(\\\\s*)\"(?P<text>(\\\\\"|[^\"])*?)\"(\\\\s*)\\\\]' + \\\n-              '(?P<semi>;)?'\n-\n-ESCAPES = [(\"\\\\'\", \"'\"),\n-           ('\\\\\"', '\"'),\n-           (\"\\\\n\", \"\\n\"),\n-           (\"\\\\r\", \"\\r\"),\n-           (\"\\\\t\", \"\\t\")]\n-\n-\n-def unescape(s):\n-    for (find, repl) in ESCAPES:\n-        s = s.replace(find, repl)\n-    return s\n-\n-\n-def block_trim(s):\n-    lns = s.splitlines()\n-\n-    # remove leading/trailing whitespace-lines\n-    while lns and not lns[0].strip():\n-        lns = lns[1:]\n-    while lns and not lns[-1].strip():\n-        lns = lns[:-1]\n-\n-    # remove leading horizontal whitespace\n-    n = sys.maxsize\n-    for ln in lns:\n-        if ln.strip():\n-            n = min(n, len(re.search('^\\s*', ln).group()))\n-    if n != sys.maxsize:\n-        lns = [ln[n:] for ln in lns]\n-\n-    # strip trailing whitespace\n-    lns = [ln.rstrip() for ln in lns]\n-\n-    return lns\n-\n-\n-def replace_doc(m):\n-    indent = m.group('indent')\n-    text = block_trim(unescape(m.group('text')))\n-\n-    if len(text) > 1:\n-        inner = '!' if m.group('semi') else '*'\n-        starify = lambda s: indent + ' *' + (' ' + s if s else '')\n-        text = '\\n'.join(map(starify, text))\n-        repl = indent + '/*' + inner + '\\n' + text + '\\n' + indent + ' */'\n-    else:\n-        inner = '!' if m.group('semi') else '/'\n-        repl = indent + '//' + inner + ' ' + text[0]\n-\n-    return repl\n-\n-\n-def sugarise_file(path):\n-    s = open(path).read()\n-\n-    r = re.compile(DOC_PATTERN, re.MULTILINE | re.DOTALL)\n-    ns = re.sub(r, replace_doc, s)\n-\n-    if s != ns:\n-        open(path, 'w').write(ns)\n-\n-for (dirpath, dirnames, filenames) in os.walk('.'):\n-    for name in fnmatch.filter(filenames, '*.r[sc]'):\n-        sugarise_file(os.path.join(dirpath, name))"}, {"sha": "8aaac5d6e08a53d9f908b81c845a4bced2ec79ca", "filename": "src/liballoc/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbinary_heap.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -964,7 +964,7 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n /// An owning iterator over the elements of a `BinaryHeap`.\n@@ -1019,7 +1019,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n /// A draining iterator over the elements of a `BinaryHeap`.\n@@ -1065,7 +1065,7 @@ impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T: 'a> FusedIterator for Drain<'a, T> {}\n \n #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]"}, {"sha": "b776556d59f11b033500d34cafd1ec13b4cf4435", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -722,7 +722,7 @@ impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n \n "}, {"sha": "ed9c8c18f0d6db7059d65d77a78b59af9b3a1b72", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -1156,7 +1156,7 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for Iter<'a, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1235,7 +1235,7 @@ impl<'a, K: 'a, V: 'a> ExactSizeIterator for IterMut<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for IterMut<'a, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1365,7 +1365,7 @@ impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<K, V> FusedIterator for IntoIter<K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1395,7 +1395,7 @@ impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for Keys<'a, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1432,7 +1432,7 @@ impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for Values<'a, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1482,7 +1482,7 @@ impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for ValuesMut<'a, K, V> {}\n \n \n@@ -1561,7 +1561,7 @@ impl<'a, K, V> Range<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for Range<'a, K, V> {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n@@ -1630,7 +1630,7 @@ impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for RangeMut<'a, K, V> {}\n \n impl<'a, K, V> RangeMut<'a, K, V> {"}, {"sha": "2e3157147a085b9a8086c4ad48fd83584a87662c", "filename": "src/liballoc/btree/set.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fset.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -946,7 +946,7 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n     fn len(&self) -> usize { self.iter.len() }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -971,7 +971,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n     fn len(&self) -> usize { self.iter.len() }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n@@ -997,7 +997,7 @@ impl<'a, T> DoubleEndedIterator for Range<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Range<'a, T> {}\n \n /// Compare `x` and `y`, but return `short` if x is None and `long` if y is None\n@@ -1044,7 +1044,7 @@ impl<'a, T: Ord> Iterator for Difference<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T: Ord> FusedIterator for Difference<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1078,7 +1078,7 @@ impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T: Ord> FusedIterator for SymmetricDifference<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1116,7 +1116,7 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T: Ord> FusedIterator for Intersection<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1150,5 +1150,5 @@ impl<'a, T: Ord> Iterator for Union<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T: Ord> FusedIterator for Union<'a, T> {}"}, {"sha": "3f3067845588a49f98849cf1c65f4045b1c37ec2", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -96,7 +96,6 @@\n #![feature(fmt_internals)]\n #![feature(from_ref)]\n #![feature(fundamental)]\n-#![feature(fused)]\n #![feature(generic_param_attrs)]\n #![feature(i128_type)]\n #![feature(inclusive_range)]\n@@ -124,8 +123,9 @@\n #![feature(allocator_internals)]\n #![feature(on_unimplemented)]\n #![feature(exact_chunks)]\n+#![feature(pointer_methods)]\n \n-#![cfg_attr(not(test), feature(fused, fn_traits, placement_new_protocol, swap_with_slice, i128))]\n+#![cfg_attr(not(test), feature(fn_traits, placement_new_protocol, swap_with_slice, i128))]\n #![cfg_attr(test, feature(test, box_heap))]\n \n // Allow testing this library"}, {"sha": "097d2e414f5cc953fedd04808278f5637fc64abe", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -897,7 +897,7 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -946,7 +946,7 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n impl<'a, T> IterMut<'a, T> {\n@@ -1117,7 +1117,7 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "14d5e96d2e73a87853ea103a9abe18bd768c1b40", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 55, "deletions": 4, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -43,6 +43,7 @@ use core::str as core_str;\n use core::str::pattern::Pattern;\n use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n use core::mem;\n+use core::ptr;\n use core::iter::FusedIterator;\n use std_unicode::str::{UnicodeStr, Utf16Encoder};\n \n@@ -171,7 +172,7 @@ impl<'a> Iterator for EncodeUtf16<'a> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a> FusedIterator for EncodeUtf16<'a> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2066,9 +2067,59 @@ impl str {\n     /// ```\n     #[stable(feature = \"repeat_str\", since = \"1.16.0\")]\n     pub fn repeat(&self, n: usize) -> String {\n-        let mut s = String::with_capacity(self.len() * n);\n-        s.extend((0..n).map(|_| self));\n-        s\n+        if n == 0 {\n+            return String::new();\n+        }\n+\n+        // If `n` is larger than zero, it can be split as\n+        // `n = 2^expn + rem (2^expn > rem, expn >= 0, rem >= 0)`.\n+        // `2^expn` is the number represented by the leftmost '1' bit of `n`,\n+        // and `rem` is the remaining part of `n`.\n+\n+        // Using `Vec` to access `set_len()`.\n+        let mut buf = Vec::with_capacity(self.len() * n);\n+\n+        // `2^expn` repetition is done by doubling `buf` `expn`-times.\n+        buf.extend(self.as_bytes());\n+        {\n+            let mut m = n >> 1;\n+            // If `m > 0`, there are remaining bits up to the leftmost '1'.\n+            while m > 0 {\n+                // `buf.extend(buf)`:\n+                unsafe {\n+                    ptr::copy_nonoverlapping(\n+                        buf.as_ptr(),\n+                        (buf.as_mut_ptr() as *mut u8).add(buf.len()),\n+                        buf.len(),\n+                    );\n+                    // `buf` has capacity of `self.len() * n`.\n+                    let buf_len = buf.len();\n+                    buf.set_len(buf_len * 2);\n+                }\n+\n+                m >>= 1;\n+            }\n+        }\n+\n+        // `rem` (`= n - 2^expn`) repetition is done by copying\n+        // first `rem` repetitions from `buf` itself.\n+        let rem_len = self.len() * n - buf.len(); // `self.len() * rem`\n+        if rem_len > 0 {\n+            // `buf.extend(buf[0 .. rem_len])`:\n+            unsafe {\n+                // This is non-overlapping since `2^expn > rem`.\n+                ptr::copy_nonoverlapping(\n+                    buf.as_ptr(),\n+                    (buf.as_mut_ptr() as *mut u8).add(buf.len()),\n+                    rem_len,\n+                );\n+                // `buf.len() + rem_len` equals to `buf.capacity()` (`= self.len() * n`).\n+                let buf_cap = buf.capacity();\n+                buf.set_len(buf_cap);\n+            }\n+        }\n+\n+        unsafe { String::from_utf8_unchecked(buf) }\n     }\n \n     /// Checks if all characters in this string are within the ASCII range."}, {"sha": "370fb6b4e890f27d3c6565ec5fbf2393251bb3e7", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -2254,5 +2254,5 @@ impl<'a> DoubleEndedIterator for Drain<'a> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a> FusedIterator for Drain<'a> {}"}, {"sha": "2f57c53a6d8342c5c7e2be50fc95a379f7b8ef91", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -2273,7 +2273,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -2379,7 +2379,7 @@ impl<'a, T> ExactSizeIterator for Drain<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Drain<'a, T> {}\n \n /// A place for insertion at the back of a `Vec`."}, {"sha": "68add3cbd51f8ac24801140b3ef5e4f6d919d4b7", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -1991,7 +1991,7 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n \n@@ -2084,7 +2084,7 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n /// An owning iterator over the elements of a `VecDeque`.\n@@ -2140,7 +2140,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n /// A draining iterator over the elements of a `VecDeque`.\n@@ -2247,7 +2247,7 @@ impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T: 'a> FusedIterator for Drain<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1372151b75369d5010a2c0266a38ce4992881c3c", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -10,6 +10,24 @@\n \n //! Shareable mutable containers.\n //!\n+//! Rust memory safety is based on this rule: Given an object `T`, it is only possible to\n+//! have one of the following:\n+//!\n+//! - Having several immutable references (`&T`) to the object (also known as **aliasing**).\n+//! - Having one mutable reference (`&mut T`) to the object (also known as **mutability**).\n+//!\n+//! This is enforced by the Rust compiler. However, there are situations where this rule is not\n+//! flexible enough. Sometimes it is required to have multiple references to an object and yet\n+//! mutate it.\n+//!\n+//! Shareable mutable containers exist to permit mutability in a controlled manner, even in the\n+//! presence of aliasing. Both `Cell<T>` and `RefCell<T>` allows to do this in a single threaded\n+//! way. However, neither `Cell<T>` nor `RefCell<T>` are thread safe (they do not implement\n+//! `Sync`). If you need to do aliasing and mutation between multiple threads it is possible to\n+//! use [`Mutex`](../../std/sync/struct.Mutex.html),\n+//! [`RwLock`](../../std/sync/struct.RwLock.html) or\n+//! [`atomic`](../../core/sync/atomic/index.html) types.\n+//!\n //! Values of the `Cell<T>` and `RefCell<T>` types may be mutated through shared references (i.e.\n //! the common `&T` type), whereas most Rust types can only be mutated through unique (`&mut T`)\n //! references. We say that `Cell<T>` and `RefCell<T>` provide 'interior mutability', in contrast"}, {"sha": "1638f9710f597a973abd466b8a071970c543c4a3", "filename": "src/libcore/char.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -79,7 +79,7 @@ pub const MAX: char = '\\u{10ffff}';\n \n /// Converts a `u32` to a `char`.\n ///\n-/// Note that all [`char`]s are valid [`u32`]s, and can be casted to one with\n+/// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n /// [`as`]:\n ///\n /// ```\n@@ -131,7 +131,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n \n /// Converts a `u32` to a `char`, ignoring validity.\n ///\n-/// Note that all [`char`]s are valid [`u32`]s, and can be casted to one with\n+/// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n /// [`as`]:\n ///\n /// ```\n@@ -643,7 +643,7 @@ impl ExactSizeIterator for EscapeUnicode {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for EscapeUnicode {}\n \n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n@@ -756,7 +756,7 @@ impl ExactSizeIterator for EscapeDefault {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for EscapeDefault {}\n \n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n@@ -790,7 +790,7 @@ impl Iterator for EscapeDebug {\n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n impl ExactSizeIterator for EscapeDebug { }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for EscapeDebug {}\n \n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n@@ -904,5 +904,5 @@ impl<I: Iterator<Item = u8>> Iterator for DecodeUtf8<I> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n impl<I: FusedIterator<Item = u8>> FusedIterator for DecodeUtf8<I> {}"}, {"sha": "830ebad065427fa3954552f99f90595702e96ff2", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -1292,6 +1292,10 @@ extern \"rust-intrinsic\" {\n     /// Reverses the bytes in an integer type `T`.\n     pub fn bswap<T>(x: T) -> T;\n \n+    /// Reverses the bits in an integer type `T`.\n+    #[cfg(not(stage0))]\n+    pub fn bitreverse<T>(x: T) -> T;\n+\n     /// Performs checked integer addition.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_add` method. For example,"}, {"sha": "2cfbc09229342b46c404134db13b77b1ca4e749d", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -1180,26 +1180,27 @@ pub trait Iterator {\n     ///\n     /// // this iterator sequence is complex.\n     /// let sum = a.iter()\n-    ///             .cloned()\n-    ///             .filter(|&x| x % 2 == 0)\n-    ///             .fold(0, |sum, i| sum + i);\n+    ///     .cloned()\n+    ///     .filter(|x| x % 2 == 0)\n+    ///     .fold(0, |sum, i| sum + i);\n     ///\n     /// println!(\"{}\", sum);\n     ///\n     /// // let's add some inspect() calls to investigate what's happening\n     /// let sum = a.iter()\n-    ///             .cloned()\n-    ///             .inspect(|x| println!(\"about to filter: {}\", x))\n-    ///             .filter(|&x| x % 2 == 0)\n-    ///             .inspect(|x| println!(\"made it through filter: {}\", x))\n-    ///             .fold(0, |sum, i| sum + i);\n+    ///     .cloned()\n+    ///     .inspect(|x| println!(\"about to filter: {}\", x))\n+    ///     .filter(|x| x % 2 == 0)\n+    ///     .inspect(|x| println!(\"made it through filter: {}\", x))\n+    ///     .fold(0, |sum, i| sum + i);\n     ///\n     /// println!(\"{}\", sum);\n     /// ```\n     ///\n     /// This will print:\n     ///\n     /// ```text\n+    /// 6\n     /// about to filter: 1\n     /// about to filter: 4\n     /// made it through filter: 4\n@@ -1230,8 +1231,7 @@ pub trait Iterator {\n     ///\n     /// let iter = a.into_iter();\n     ///\n-    /// let sum: i32 = iter.take(5)\n-    ///                    .fold(0, |acc, &i| acc + i );\n+    /// let sum: i32 = iter.take(5).fold(0, |acc, i| acc + i );\n     ///\n     /// assert_eq!(sum, 6);\n     ///\n@@ -1245,9 +1245,7 @@ pub trait Iterator {\n     /// let mut iter = a.into_iter();\n     ///\n     /// // instead, we add in a .by_ref()\n-    /// let sum: i32 = iter.by_ref()\n-    ///                    .take(2)\n-    ///                    .fold(0, |acc, &i| acc + i );\n+    /// let sum: i32 = iter.by_ref().take(2).fold(0, |acc, i| acc + i );\n     ///\n     /// assert_eq!(sum, 3);\n     ///\n@@ -1304,9 +1302,7 @@ pub trait Iterator {\n     ///\n     /// let a = [1, 2, 3];\n     ///\n-    /// let doubled: VecDeque<i32> = a.iter()\n-    ///                               .map(|&x| x * 2)\n-    ///                               .collect();\n+    /// let doubled: VecDeque<i32> = a.iter().map(|&x| x * 2).collect();\n     ///\n     /// assert_eq!(2, doubled[0]);\n     /// assert_eq!(4, doubled[1]);\n@@ -1318,9 +1314,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [1, 2, 3];\n     ///\n-    /// let doubled = a.iter()\n-    ///                .map(|&x| x * 2)\n-    ///                .collect::<Vec<i32>>();\n+    /// let doubled = a.iter().map(|x| x * 2).collect::<Vec<i32>>();\n     ///\n     /// assert_eq!(vec![2, 4, 6], doubled);\n     /// ```\n@@ -1331,9 +1325,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [1, 2, 3];\n     ///\n-    /// let doubled = a.iter()\n-    ///                .map(|&x| x * 2)\n-    ///                .collect::<Vec<_>>();\n+    /// let doubled = a.iter().map(|x| x * 2).collect::<Vec<_>>();\n     ///\n     /// assert_eq!(vec![2, 4, 6], doubled);\n     /// ```\n@@ -1344,9 +1336,9 @@ pub trait Iterator {\n     /// let chars = ['g', 'd', 'k', 'k', 'n'];\n     ///\n     /// let hello: String = chars.iter()\n-    ///                          .map(|&x| x as u8)\n-    ///                          .map(|x| (x + 1) as char)\n-    ///                          .collect();\n+    ///     .map(|&x| x as u8)\n+    ///     .map(|x| (x + 1) as char)\n+    ///     .collect();\n     ///\n     /// assert_eq!(\"hello\", hello);\n     /// ```\n@@ -1393,8 +1385,9 @@ pub trait Iterator {\n     /// ```\n     /// let a = [1, 2, 3];\n     ///\n-    /// let (even, odd): (Vec<i32>, Vec<i32>) = a.into_iter()\n-    ///                                          .partition(|&n| n % 2 == 0);\n+    /// let (even, odd): (Vec<i32>, Vec<i32>) = a\n+    ///     .into_iter()\n+    ///     .partition(|&n| n % 2 == 0);\n     ///\n     /// assert_eq!(even, vec![2]);\n     /// assert_eq!(odd, vec![1, 3]);\n@@ -1457,8 +1450,7 @@ pub trait Iterator {\n     /// let a = [1, 2, 3];\n     ///\n     /// // the checked sum of all of the elements of the array\n-    /// let sum = a.iter()\n-    ///            .try_fold(0i8, |acc, &x| acc.checked_add(x));\n+    /// let sum = a.iter().try_fold(0i8, |acc, &x| acc.checked_add(x));\n     ///\n     /// assert_eq!(sum, Some(6));\n     /// ```\n@@ -1556,8 +1548,7 @@ pub trait Iterator {\n     /// let a = [1, 2, 3];\n     ///\n     /// // the sum of all of the elements of the array\n-    /// let sum = a.iter()\n-    ///            .fold(0, |acc, &x| acc + x);\n+    /// let sum = a.iter().fold(0, |acc, x| acc + x);\n     ///\n     /// assert_eq!(sum, 6);\n     /// ```"}, {"sha": "a6802d606ca8cbbc849e6c5bf468bed73763347b", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -344,7 +344,7 @@ pub use self::sources::{Once, once};\n pub use self::traits::{FromIterator, IntoIterator, DoubleEndedIterator, Extend};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::traits::{ExactSizeIterator, Sum, Product};\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n pub use self::traits::FusedIterator;\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n pub use self::traits::TrustedLen;\n@@ -506,7 +506,7 @@ impl<I> ExactSizeIterator for Rev<I>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> FusedIterator for Rev<I>\n     where I: FusedIterator + DoubleEndedIterator {}\n \n@@ -589,7 +589,7 @@ impl<'a, I, T: 'a> ExactSizeIterator for Cloned<I>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, I, T: 'a> FusedIterator for Cloned<I>\n     where I: FusedIterator<Item=&'a T>, T: Clone\n {}\n@@ -662,7 +662,7 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> FusedIterator for Cycle<I> where I: Clone + Iterator {}\n \n /// An iterator for stepping iterators by a custom amount.\n@@ -1002,7 +1002,7 @@ impl<A, B> DoubleEndedIterator for Chain<A, B> where\n }\n \n // Note: *both* must be fused to handle double-ended iterators.\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A, B> FusedIterator for Chain<A, B>\n     where A: FusedIterator,\n           B: FusedIterator<Item=A::Item>,\n@@ -1262,7 +1262,7 @@ unsafe impl<A, B> TrustedRandomAccess for Zip<A, B>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A, B> FusedIterator for Zip<A, B>\n     where A: FusedIterator, B: FusedIterator, {}\n \n@@ -1404,7 +1404,7 @@ impl<B, I: ExactSizeIterator, F> ExactSizeIterator for Map<I, F>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<B, I: FusedIterator, F> FusedIterator for Map<I, F>\n     where F: FnMut(I::Item) -> B {}\n \n@@ -1553,7 +1553,7 @@ impl<I: DoubleEndedIterator, P> DoubleEndedIterator for Filter<I, P>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I: FusedIterator, P> FusedIterator for Filter<I, P>\n     where P: FnMut(&I::Item) -> bool {}\n \n@@ -1663,7 +1663,7 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<B, I: FusedIterator, F> FusedIterator for FilterMap<I, F>\n     where F: FnMut(I::Item) -> Option<B> {}\n \n@@ -1818,7 +1818,7 @@ unsafe impl<I> TrustedRandomAccess for Enumerate<I>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> FusedIterator for Enumerate<I> where I: FusedIterator {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -1938,7 +1938,7 @@ impl<I: Iterator> Iterator for Peekable<I> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: ExactSizeIterator> ExactSizeIterator for Peekable<I> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I: FusedIterator> FusedIterator for Peekable<I> {}\n \n impl<I: Iterator> Peekable<I> {\n@@ -2072,7 +2072,7 @@ impl<I: Iterator, P> Iterator for SkipWhile<I, P>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I, P> FusedIterator for SkipWhile<I, P>\n     where I: FusedIterator, P: FnMut(&I::Item) -> bool {}\n \n@@ -2151,7 +2151,7 @@ impl<I: Iterator, P> Iterator for TakeWhile<I, P>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I, P> FusedIterator for TakeWhile<I, P>\n     where I: FusedIterator, P: FnMut(&I::Item) -> bool {}\n \n@@ -2290,7 +2290,7 @@ impl<I> DoubleEndedIterator for Skip<I> where I: DoubleEndedIterator + ExactSize\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> FusedIterator for Skip<I> where I: FusedIterator {}\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n@@ -2371,7 +2371,7 @@ impl<I> Iterator for Take<I> where I: Iterator{\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> ExactSizeIterator for Take<I> where I: ExactSizeIterator {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> FusedIterator for Take<I> where I: FusedIterator {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -2517,7 +2517,7 @@ impl<I: DoubleEndedIterator, U, F> DoubleEndedIterator for FlatMap<I, U, F>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I, U, F> FusedIterator for FlatMap<I, U, F>\n     where I: FusedIterator, U: IntoIterator, F: FnMut(I::Item) -> U {}\n \n@@ -2605,7 +2605,7 @@ impl<I, U> DoubleEndedIterator for Flatten<I>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I, U> FusedIterator for Flatten<I>\n     where I: FusedIterator, U: Iterator,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item> {}\n@@ -2765,7 +2765,7 @@ pub struct Fuse<I> {\n     done: bool\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> FusedIterator for Fuse<I> where I: Iterator {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2896,7 +2896,7 @@ unsafe impl<I> TrustedRandomAccess for Fuse<I>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> Iterator for Fuse<I> where I: FusedIterator {\n     #[inline]\n     fn next(&mut self) -> Option<<I as Iterator>::Item> {\n@@ -2938,7 +2938,7 @@ impl<I> Iterator for Fuse<I> where I: FusedIterator {\n     }\n }\n \n-#[unstable(feature = \"fused\", reason = \"recently added\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> DoubleEndedIterator for Fuse<I>\n     where I: DoubleEndedIterator + FusedIterator\n {\n@@ -3082,6 +3082,6 @@ impl<I: ExactSizeIterator, F> ExactSizeIterator for Inspect<I, F>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I: FusedIterator, F> FusedIterator for Inspect<I, F>\n     where F: FnMut(&I::Item) {}"}, {"sha": "9a3fd215dcfebde7a7745b10a5a7a6fbc8040de6", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -295,7 +295,7 @@ impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A: Step> FusedIterator for ops::Range<A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -322,7 +322,7 @@ impl<A: Step> Iterator for ops::RangeFrom<A> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A: Step> FusedIterator for ops::RangeFrom<A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -463,5 +463,5 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A: Step> FusedIterator for ops::RangeInclusive<A> {}"}, {"sha": "0fc1a3aa8ac06c988764ef758a04198e9b1c5a37", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -41,7 +41,7 @@ impl<A: Clone> DoubleEndedIterator for Repeat<A> {\n     fn next_back(&mut self) -> Option<A> { Some(self.element.clone()) }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A: Clone> FusedIterator for Repeat<A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -135,7 +135,7 @@ impl<A, F: FnMut() -> A> DoubleEndedIterator for RepeatWith<F> {\n     fn next_back(&mut self) -> Option<A> { self.next() }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[unstable(feature = \"iterator_repeat_with\", issue = \"48169\")]\n impl<A, F: FnMut() -> A> FusedIterator for RepeatWith<F> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -259,7 +259,7 @@ impl<T> ExactSizeIterator for Empty<T> {\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T> TrustedLen for Empty<T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Empty<T> {}\n \n // not #[derive] because that adds a Clone bound on T,\n@@ -340,7 +340,7 @@ impl<T> ExactSizeIterator for Once<T> {\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T> TrustedLen for Once<T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Once<T> {}\n \n /// Creates an iterator that yields an element exactly once."}, {"sha": "0267fcd375453cbcdd24f9f6e330ebdb3a65787f", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -959,10 +959,10 @@ impl<T, U, E> Product<Result<U, E>> for Result<T, E>\n /// [`None`]: ../../std/option/enum.Option.html#variant.None\n /// [`Iterator::fuse`]: ../../std/iter/trait.Iterator.html#method.fuse\n /// [`Fuse`]: ../../std/iter/struct.Fuse.html\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n pub trait FusedIterator: Iterator {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}\n \n /// An iterator that reports an accurate length using size_hint."}, {"sha": "a46ac2b5f0fee1d9af082f160b6c84218592e763", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -321,6 +321,33 @@ $EndFeature, \"\n             (self as $UnsignedT).swap_bytes() as Self\n         }\n \n+        /// Reverses the bit pattern of the integer.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `i16` is used here.\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(reverse_bits)]\n+        ///\n+        /// let n: i16 = 0b0000000_01010101;\n+        /// assert_eq!(n, 85);\n+        ///\n+        /// let m = n.reverse_bits();\n+        ///\n+        /// assert_eq!(m as u16, 0b10101010_00000000);\n+        /// assert_eq!(m, -22016);\n+        /// ```\n+        #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n+        #[cfg(not(stage0))]\n+        #[inline]\n+        pub fn reverse_bits(self) -> Self {\n+            (self as $UnsignedT).reverse_bits() as Self\n+        }\n+\n         doc_comment! {\n             concat!(\"Converts an integer from big endian to the target's endianness.\n \n@@ -1773,6 +1800,33 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n             unsafe { intrinsics::bswap(self as $ActualT) as Self }\n         }\n \n+        /// Reverses the bit pattern of the integer.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// Please note that this example is shared between integer types.\n+        /// Which explains why `u16` is used here.\n+        ///\n+        /// ```\n+        /// #![feature(reverse_bits)]\n+        ///\n+        /// let n: u16 = 0b0000000_01010101;\n+        /// assert_eq!(n, 85);\n+        ///\n+        /// let m = n.reverse_bits();\n+        ///\n+        /// assert_eq!(m, 0b10101010_00000000);\n+        /// assert_eq!(m, 43520);\n+        /// ```\n+        #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n+        #[cfg(not(stage0))]\n+        #[inline]\n+        pub fn reverse_bits(self) -> Self {\n+            unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n+        }\n+\n         doc_comment! {\n             concat!(\"Converts an integer from big endian to the target's endianness.\n "}, {"sha": "25f57d8c0f71802a631d66742b50f1876fee75c6", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -1051,7 +1051,7 @@ impl<'a, A> DoubleEndedIterator for Iter<'a, A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, A> ExactSizeIterator for Iter<'a, A> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, A> FusedIterator for Iter<'a, A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -1096,7 +1096,7 @@ impl<'a, A> DoubleEndedIterator for IterMut<'a, A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, A> FusedIterator for IterMut<'a, A> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, A> TrustedLen for IterMut<'a, A> {}\n@@ -1133,7 +1133,7 @@ impl<A> DoubleEndedIterator for IntoIter<A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> ExactSizeIterator for IntoIter<A> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A> FusedIterator for IntoIter<A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]"}, {"sha": "c152d4979b90e3c880e3fd5c7f35aa52b11701be", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -1038,7 +1038,7 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -1082,7 +1082,7 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -1125,7 +1125,7 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]"}, {"sha": "19fe4dd36b683feadf660a688f3595e2e4db9fad", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -1455,7 +1455,7 @@ impl<'a, T> ExactSizeIterator for Iter<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Iter<'a, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -1583,7 +1583,7 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -1731,7 +1731,7 @@ impl<'a, T, P> SplitIter for Split<'a, T, P> where P: FnMut(&T) -> bool {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T, P> FusedIterator for Split<'a, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the subslices of the vector which are separated\n@@ -1829,7 +1829,7 @@ impl<'a, T, P> DoubleEndedIterator for SplitMut<'a, T, P> where\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T, P> FusedIterator for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over subslices separated by elements that match a predicate\n@@ -1886,7 +1886,6 @@ impl<'a, T, P> SplitIter for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     }\n }\n \n-//#[unstable(feature = \"fused\", issue = \"35602\")]\n #[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n impl<'a, T, P> FusedIterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {}\n \n@@ -1945,7 +1944,6 @@ impl<'a, T, P> DoubleEndedIterator for RSplitMut<'a, T, P> where\n     }\n }\n \n-//#[unstable(feature = \"fused\", issue = \"35602\")]\n #[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n impl<'a, T, P> FusedIterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {}\n \n@@ -2082,7 +2080,7 @@ macro_rules! forward_iterator {\n             }\n         }\n \n-        #[unstable(feature = \"fused\", issue = \"35602\")]\n+        #[stable(feature = \"fused\", since = \"1.26.0\")]\n         impl<'a, $elem, P> FusedIterator for $name<'a, $elem, P>\n             where P: FnMut(&T) -> bool {}\n     }\n@@ -2188,7 +2186,7 @@ impl<'a, T> DoubleEndedIterator for Windows<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Windows<'a, T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Windows<'a, T> {}\n \n #[doc(hidden)]\n@@ -2307,7 +2305,7 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Chunks<'a, T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for Chunks<'a, T> {}\n \n #[doc(hidden)]\n@@ -2423,7 +2421,7 @@ impl<'a, T> DoubleEndedIterator for ChunksMut<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T> FusedIterator for ChunksMut<'a, T> {}\n \n #[doc(hidden)]\n@@ -2533,7 +2531,7 @@ impl<'a, T> ExactSizeIterator for ExactChunks<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[unstable(feature = \"exact_chunks\", issue = \"47115\")]\n impl<'a, T> FusedIterator for ExactChunks<'a, T> {}\n \n #[doc(hidden)]\n@@ -2630,7 +2628,7 @@ impl<'a, T> ExactSizeIterator for ExactChunksMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[unstable(feature = \"exact_chunks\", issue = \"47115\")]\n impl<'a, T> FusedIterator for ExactChunksMut<'a, T> {}\n \n #[doc(hidden)]"}, {"sha": "e225c9522bc063792df442def0f3ad19a66016a8", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -609,7 +609,7 @@ impl<'a> DoubleEndedIterator for Chars<'a> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a> FusedIterator for Chars<'a> {}\n \n impl<'a> Chars<'a> {\n@@ -702,7 +702,7 @@ impl<'a> DoubleEndedIterator for CharIndices<'a> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a> FusedIterator for CharIndices<'a> {}\n \n impl<'a> CharIndices<'a> {\n@@ -817,7 +817,7 @@ impl<'a> ExactSizeIterator for Bytes<'a> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a> FusedIterator for Bytes<'a> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n@@ -977,10 +977,10 @@ macro_rules! generate_pattern_iterators {\n             }\n         }\n \n-        #[unstable(feature = \"fused\", issue = \"35602\")]\n+        #[stable(feature = \"fused\", since = \"1.26.0\")]\n         impl<'a, P: Pattern<'a>> FusedIterator for $forward_iterator<'a, P> {}\n \n-        #[unstable(feature = \"fused\", issue = \"35602\")]\n+        #[stable(feature = \"fused\", since = \"1.26.0\")]\n         impl<'a, P: Pattern<'a>> FusedIterator for $reverse_iterator<'a, P>\n             where P::Searcher: ReverseSearcher<'a> {}\n \n@@ -1337,7 +1337,7 @@ impl<'a> DoubleEndedIterator for Lines<'a> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a> FusedIterator for Lines<'a> {}\n \n /// Created with the method [`lines_any`].\n@@ -1403,7 +1403,7 @@ impl<'a> DoubleEndedIterator for LinesAny<'a> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n #[allow(deprecated)]\n impl<'a> FusedIterator for LinesAny<'a> {}\n "}, {"sha": "a9c5683e0ef7b376847563ccc25b19c2c0309856", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -46,6 +46,7 @@\n #![feature(try_trait)]\n #![feature(exact_chunks)]\n #![feature(atomic_nand)]\n+#![feature(reverse_bits)]\n \n extern crate core;\n extern crate test;"}, {"sha": "ca6906f731047c62e0091c3a3212756cff2b5c23", "filename": "src/libcore/tests/num/uint_macros.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -97,6 +97,17 @@ mod tests {\n         assert_eq!(_1.swap_bytes(), _1);\n     }\n \n+    #[test]\n+    fn test_reverse_bits() {\n+        assert_eq!(A.reverse_bits().reverse_bits(), A);\n+        assert_eq!(B.reverse_bits().reverse_bits(), B);\n+        assert_eq!(C.reverse_bits().reverse_bits(), C);\n+\n+        // Swapping these should make no difference\n+        assert_eq!(_0.reverse_bits(), _0);\n+        assert_eq!(_1.reverse_bits(), _1);\n+    }\n+\n     #[test]\n     fn test_le() {\n         assert_eq!($T::from_le(A.to_le()), A);"}, {"sha": "d91aa3a385193b25924e54f18c7fae9037c212af", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -2208,13 +2208,8 @@ impl<'a> State<'a> {\n         if self.next_comment().is_none() {\n             self.s.hardbreak()?;\n         }\n-        loop {\n-            match self.next_comment() {\n-                Some(ref cmnt) => {\n-                    self.print_comment(cmnt)?;\n-                }\n-                _ => break,\n-            }\n+        while let Some(ref cmnt) = self.next_comment() {\n+            self.print_comment(cmnt)?\n         }\n         Ok(())\n     }"}, {"sha": "5658b5b6832915ce29946bdb96fe9b85364c2122", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -206,11 +206,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     // Step 2: Mark all symbols that the symbols on the worklist touch.\n     fn propagate(&mut self) {\n         let mut scanned = FxHashSet();\n-        loop {\n-            let search_item = match self.worklist.pop() {\n-                Some(item) => item,\n-                None => break,\n-            };\n+        while let Some(search_item) = self.worklist.pop() {\n             if !scanned.insert(search_item) {\n                 continue\n             }"}, {"sha": "42a17d33fa6f5c795562c783cd5bacd882e3f666", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -415,13 +415,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             }\n         }\n \n-        loop {\n-            // non-standard `while let` to bypass #6393\n-            let i = match error_stack.pop() {\n-                Some(i) => i,\n-                None => break\n-            };\n-\n+        while let Some(i) = error_stack.pop() {\n             let node = &self.nodes[i];\n \n             match node.state.get() {"}, {"sha": "1c4bd0ff4c2ec1335ab7429dee64d7b96f00d42a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 148, "deletions": 9, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -150,11 +150,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n \n                                 // Detect literal value out of range [min, max] inclusive\n                                 // avoiding use of -min to prevent overflow/panic\n-                                if (negative && v > max + 1) ||\n-                                   (!negative && v > max) {\n-                                    cx.span_lint(OVERFLOWING_LITERALS,\n-                                                 e.span,\n-                                                 &format!(\"literal out of range for {:?}\", t));\n+                                if (negative && v > max + 1) || (!negative && v > max) {\n+                                    if let Some(repr_str) = get_bin_hex_repr(cx, lit) {\n+                                        report_bin_hex_error(\n+                                            cx,\n+                                            e,\n+                                            ty::TyInt(t),\n+                                            repr_str,\n+                                            v,\n+                                            negative,\n+                                        );\n+                                        return;\n+                                    }\n+                                    cx.span_lint(\n+                                        OVERFLOWING_LITERALS,\n+                                        e.span,\n+                                        &format!(\"literal out of range for {:?}\", t),\n+                                    );\n                                     return;\n                                 }\n                             }\n@@ -182,7 +194,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                         let mut err = cx.struct_span_lint(\n                                                              OVERFLOWING_LITERALS,\n                                                              parent_expr.span,\n-                                                             \"only u8 can be casted into char\");\n+                                                             \"only u8 can be cast into char\");\n                                         err.span_suggestion(parent_expr.span,\n                                                             &\"use a char literal instead\",\n                                                             format!(\"'\\\\u{{{:X}}}'\", lit_val));\n@@ -191,9 +203,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                     }\n                                 }\n                             }\n-                            cx.span_lint(OVERFLOWING_LITERALS,\n-                                         e.span,\n-                                         &format!(\"literal out of range for {:?}\", t));\n+                            if let Some(repr_str) = get_bin_hex_repr(cx, lit) {\n+                                report_bin_hex_error(\n+                                    cx,\n+                                    e,\n+                                    ty::TyUint(t),\n+                                    repr_str,\n+                                    lit_val,\n+                                    false,\n+                                );\n+                                return;\n+                            }\n+                            cx.span_lint(\n+                                OVERFLOWING_LITERALS,\n+                                e.span,\n+                                &format!(\"literal out of range for {:?}\", t),\n+                            );\n                         }\n                     }\n                     ty::TyFloat(t) => {\n@@ -338,6 +363,120 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                 _ => false,\n             }\n         }\n+\n+        fn get_bin_hex_repr(cx: &LateContext, lit: &ast::Lit) -> Option<String> {\n+            let src = cx.sess().codemap().span_to_snippet(lit.span).ok()?;\n+            let firstch = src.chars().next()?;\n+\n+            if firstch == '0' {\n+                match src.chars().nth(1) {\n+                    Some('x') | Some('b') => return Some(src),\n+                    _ => return None,\n+                }\n+            }\n+\n+            None\n+        }\n+\n+        // This function finds the next fitting type and generates a suggestion string.\n+        // It searches for fitting types in the following way (`X < Y`):\n+        //  - `iX`: if literal fits in `uX` => `uX`, else => `iY`\n+        //  - `-iX` => `iY`\n+        //  - `uX` => `uY`\n+        //\n+        // No suggestion for: `isize`, `usize`.\n+        fn get_type_suggestion<'a>(\n+            t: &ty::TypeVariants,\n+            val: u128,\n+            negative: bool,\n+        ) -> Option<String> {\n+            use syntax::ast::IntTy::*;\n+            use syntax::ast::UintTy::*;\n+            macro_rules! find_fit {\n+                ($ty:expr, $val:expr, $negative:expr,\n+                 $($type:ident => [$($utypes:expr),*] => [$($itypes:expr),*]),+) => {\n+                    {\n+                        let _neg = if negative { 1 } else { 0 };\n+                        match $ty {\n+                            $($type => {\n+                                $(if !negative && val <= uint_ty_range($utypes).1 {\n+                                    return Some(format!(\"{:?}\", $utypes))\n+                                })*\n+                                $(if val <= int_ty_range($itypes).1 as u128 + _neg {\n+                                    return Some(format!(\"{:?}\", $itypes))\n+                                })*\n+                                None\n+                            },)*\n+                            _ => None\n+                        }\n+                    }\n+                }\n+            }\n+            match t {\n+                &ty::TyInt(i) => find_fit!(i, val, negative,\n+                              I8 => [U8] => [I16, I32, I64, I128],\n+                              I16 => [U16] => [I32, I64, I128],\n+                              I32 => [U32] => [I64, I128],\n+                              I64 => [U64] => [I128],\n+                              I128 => [U128] => []),\n+                &ty::TyUint(u) => find_fit!(u, val, negative,\n+                              U8 => [U8, U16, U32, U64, U128] => [],\n+                              U16 => [U16, U32, U64, U128] => [],\n+                              U32 => [U32, U64, U128] => [],\n+                              U64 => [U64, U128] => [],\n+                              U128 => [U128] => []),\n+                _ => None,\n+            }\n+        }\n+\n+        fn report_bin_hex_error(\n+            cx: &LateContext,\n+            expr: &hir::Expr,\n+            ty: ty::TypeVariants,\n+            repr_str: String,\n+            val: u128,\n+            negative: bool,\n+        ) {\n+            let (t, actually) = match ty {\n+                ty::TyInt(t) => {\n+                    let bits = int_ty_bits(t, cx.sess().target.isize_ty);\n+                    let actually = (val << (128 - bits)) as i128 >> (128 - bits);\n+                    (format!(\"{:?}\", t), actually.to_string())\n+                }\n+                ty::TyUint(t) => {\n+                    let bits = uint_ty_bits(t, cx.sess().target.usize_ty);\n+                    let actually = (val << (128 - bits)) >> (128 - bits);\n+                    (format!(\"{:?}\", t), actually.to_string())\n+                }\n+                _ => bug!(),\n+            };\n+            let mut err = cx.struct_span_lint(\n+                OVERFLOWING_LITERALS,\n+                expr.span,\n+                &format!(\"literal out of range for {}\", t),\n+            );\n+            err.note(&format!(\n+                \"the literal `{}` (decimal `{}`) does not fit into \\\n+                 an `{}` and will become `{}{}`\",\n+                repr_str, val, t, actually, t\n+            ));\n+            if let Some(sugg_ty) =\n+                get_type_suggestion(&cx.tables.node_id_to_type(expr.hir_id).sty, val, negative)\n+            {\n+                if let Some(pos) = repr_str.chars().position(|c| c == 'i' || c == 'u') {\n+                    let (sans_suffix, _) = repr_str.split_at(pos);\n+                    err.span_suggestion(\n+                        expr.span,\n+                        &format!(\"consider using `{}` instead\", sugg_ty),\n+                        format!(\"{}{}\", sans_suffix, sugg_ty),\n+                    );\n+                } else {\n+                    err.help(&format!(\"consider using `{}` instead\", sugg_ty));\n+                }\n+            }\n+\n+            err.emit();\n+        }\n     }\n }\n "}, {"sha": "83cd7bf549d5536904e82bdc31cd01c16dcc3a53", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -77,19 +77,12 @@ impl Lower128Bit {\n                 };\n \n                 let bin_statement = block.statements.pop().unwrap();\n-                let (source_info, place, lhs, mut rhs) = match bin_statement {\n-                    Statement {\n-                        source_info,\n-                        kind: StatementKind::Assign(\n-                            place,\n-                            Rvalue::BinaryOp(_, lhs, rhs))\n-                    } => (source_info, place, lhs, rhs),\n-                    Statement {\n-                        source_info,\n-                        kind: StatementKind::Assign(\n-                            place,\n-                            Rvalue::CheckedBinaryOp(_, lhs, rhs))\n-                    } => (source_info, place, lhs, rhs),\n+                let source_info = bin_statement.source_info;\n+                let (place, lhs, mut rhs) = match bin_statement.kind {\n+                    StatementKind::Assign(place, Rvalue::BinaryOp(_, lhs, rhs))\n+                    | StatementKind::Assign(place, Rvalue::CheckedBinaryOp(_, lhs, rhs)) => {\n+                        (place, lhs, rhs)\n+                    }\n                     _ => bug!(\"Statement doesn't match pattern any more?\"),\n                 };\n "}, {"sha": "b93e8c2ad21ca60e9bee59b4ff60b7cbf69189ee", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -597,6 +597,12 @@ fn declare_intrinsic(cx: &CodegenCx, key: &str) -> Option<ValueRef> {\n     ifn!(\"llvm.bswap.i64\", fn(t_i64) -> t_i64);\n     ifn!(\"llvm.bswap.i128\", fn(t_i128) -> t_i128);\n \n+    ifn!(\"llvm.bitreverse.i8\", fn(t_i8) -> t_i8);\n+    ifn!(\"llvm.bitreverse.i16\", fn(t_i16) -> t_i16);\n+    ifn!(\"llvm.bitreverse.i32\", fn(t_i32) -> t_i32);\n+    ifn!(\"llvm.bitreverse.i64\", fn(t_i64) -> t_i64);\n+    ifn!(\"llvm.bitreverse.i128\", fn(t_i128) -> t_i128);\n+\n     ifn!(\"llvm.sadd.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n     ifn!(\"llvm.sadd.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n     ifn!(\"llvm.sadd.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});"}, {"sha": "3f87ce7e04792f4c417adc7ba63a0ef705576f37", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -287,8 +287,8 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n             ], None)\n         },\n         \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"ctpop\" | \"bswap\" |\n-        \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n-        \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n+        \"bitreverse\" | \"add_with_overflow\" | \"sub_with_overflow\" |\n+        \"mul_with_overflow\" | \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n         \"unchecked_div\" | \"unchecked_rem\" | \"unchecked_shl\" | \"unchecked_shr\" => {\n             let ty = arg_tys[0];\n             match int_type_width_signed(ty, cx) {\n@@ -315,6 +315,10 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                                         &[args[0].immediate()], None)\n                             }\n                         }\n+                        \"bitreverse\" => {\n+                            bx.call(cx.get_intrinsic(&format!(\"llvm.bitreverse.i{}\", width)),\n+                                &[args[0].immediate()], None)\n+                        }\n                         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" => {\n                             let intrinsic = format!(\"llvm.{}{}.with.overflow.i{}\",\n                                                     if signed { 's' } else { 'u' },"}, {"sha": "2e00040d99a73f58782bc810277aa9346486715b", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -275,7 +275,8 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"volatile_store\" =>\n                 (1, vec![ tcx.mk_mut_ptr(param(0)), param(0) ], tcx.mk_nil()),\n \n-            \"ctpop\" | \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"bswap\" =>\n+            \"ctpop\" | \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" |\n+            \"bswap\" | \"bitreverse\" =>\n                 (1, vec![param(0)], param(0)),\n \n             \"add_with_overflow\" | \"sub_with_overflow\"  | \"mul_with_overflow\" =>"}, {"sha": "d5bf9e9bb2f6853eca8e905763683efb9f383fcc", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -590,7 +590,7 @@ impl DoubleEndedIterator for EscapeDefault {\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ExactSizeIterator for EscapeDefault {}\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for EscapeDefault {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]"}, {"sha": "6f4528a0e243ce5b6bae4cf6ae84a48cd7d4ef81", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -620,7 +620,7 @@ impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n-    /// let mut map: HashMap<&str, isize> = HashMap::new();\n+    /// let mut map: HashMap<&str, i32> = HashMap::new();\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -637,7 +637,7 @@ impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n-    /// let mut map: HashMap<&str, isize> = HashMap::with_capacity(10);\n+    /// let mut map: HashMap<&str, i32> = HashMap::with_capacity(10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -724,7 +724,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// use std::collections::hash_map::RandomState;\n     ///\n     /// let hasher = RandomState::new();\n-    /// let map: HashMap<isize, isize> = HashMap::with_hasher(hasher);\n+    /// let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);\n     /// let hasher: &RandomState = map.hasher();\n     /// ```\n     #[stable(feature = \"hashmap_public_hasher\", since = \"1.9.0\")]\n@@ -741,7 +741,7 @@ impl<K, V, S> HashMap<K, V, S>\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n-    /// let map: HashMap<isize, isize> = HashMap::with_capacity(100);\n+    /// let map: HashMap<i32, i32> = HashMap::with_capacity(100);\n     /// assert!(map.capacity() >= 100);\n     /// ```\n     #[inline]\n@@ -770,7 +770,7 @@ impl<K, V, S> HashMap<K, V, S>\n     ///\n     /// ```\n     /// use std::collections::HashMap;\n-    /// let mut map: HashMap<&str, isize> = HashMap::new();\n+    /// let mut map: HashMap<&str, i32> = HashMap::new();\n     /// map.reserve(10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -849,7 +849,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map: HashMap<isize, isize> = HashMap::with_capacity(100);\n+    /// let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\n     /// map.insert(1, 2);\n     /// map.insert(3, 4);\n     /// assert!(map.capacity() >= 100);\n@@ -1306,7 +1306,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// ```\n     /// use std::collections::HashMap;\n     ///\n-    /// let mut map: HashMap<isize, isize> = (0..8).map(|x|(x, x*10)).collect();\n+    /// let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();\n     /// map.retain(|&k, _| k % 2 == 0);\n     /// assert_eq!(map.len(), 4);\n     /// ```\n@@ -1722,7 +1722,7 @@ impl<K, V, S> IntoIterator for HashMap<K, V, S>\n     /// map.insert(\"c\", 3);\n     ///\n     /// // Not possible with .iter()\n-    /// let vec: Vec<(&str, isize)> = map.into_iter().collect();\n+    /// let vec: Vec<(&str, i32)> = map.into_iter().collect();\n     /// ```\n     fn into_iter(self) -> IntoIter<K, V> {\n         IntoIter { inner: self.table.into_iter() }\n@@ -1750,7 +1750,7 @@ impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for Iter<'a, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1773,7 +1773,7 @@ impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for IterMut<'a, K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -1808,7 +1808,7 @@ impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<K, V> FusedIterator for IntoIter<K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -1840,7 +1840,7 @@ impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for Keys<'a, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1863,7 +1863,7 @@ impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for Values<'a, K, V> {}\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1886,7 +1886,7 @@ impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for ValuesMut<'a, K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -1921,7 +1921,7 @@ impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K, V> FusedIterator for Drain<'a, K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -2786,34 +2786,34 @@ mod test_map {\n         assert_eq!(m2.len(), 2);\n     }\n \n-    thread_local! { static DROP_VECTOR: RefCell<Vec<isize>> = RefCell::new(Vec::new()) }\n+    thread_local! { static DROP_VECTOR: RefCell<Vec<i32>> = RefCell::new(Vec::new()) }\n \n     #[derive(Hash, PartialEq, Eq)]\n-    struct Dropable {\n+    struct Droppable {\n         k: usize,\n     }\n \n-    impl Dropable {\n-        fn new(k: usize) -> Dropable {\n+    impl Droppable {\n+        fn new(k: usize) -> Droppable {\n             DROP_VECTOR.with(|slot| {\n                 slot.borrow_mut()[k] += 1;\n             });\n \n-            Dropable { k: k }\n+            Droppable { k: k }\n         }\n     }\n \n-    impl Drop for Dropable {\n+    impl Drop for Droppable {\n         fn drop(&mut self) {\n             DROP_VECTOR.with(|slot| {\n                 slot.borrow_mut()[self.k] -= 1;\n             });\n         }\n     }\n \n-    impl Clone for Dropable {\n-        fn clone(&self) -> Dropable {\n-            Dropable::new(self.k)\n+    impl Clone for Droppable {\n+        fn clone(&self) -> Droppable {\n+            Droppable::new(self.k)\n         }\n     }\n \n@@ -2833,8 +2833,8 @@ mod test_map {\n             });\n \n             for i in 0..100 {\n-                let d1 = Dropable::new(i);\n-                let d2 = Dropable::new(i + 100);\n+                let d1 = Droppable::new(i);\n+                let d2 = Droppable::new(i + 100);\n                 m.insert(d1, d2);\n             }\n \n@@ -2845,7 +2845,7 @@ mod test_map {\n             });\n \n             for i in 0..50 {\n-                let k = Dropable::new(i);\n+                let k = Droppable::new(i);\n                 let v = m.remove(&k);\n \n                 assert!(v.is_some());\n@@ -2892,8 +2892,8 @@ mod test_map {\n             });\n \n             for i in 0..100 {\n-                let d1 = Dropable::new(i);\n-                let d2 = Dropable::new(i + 100);\n+                let d1 = Droppable::new(i);\n+                let d2 = Droppable::new(i + 100);\n                 hm.insert(d1, d2);\n             }\n \n@@ -2943,13 +2943,13 @@ mod test_map {\n \n     #[test]\n     fn test_empty_remove() {\n-        let mut m: HashMap<isize, bool> = HashMap::new();\n+        let mut m: HashMap<i32, bool> = HashMap::new();\n         assert_eq!(m.remove(&0), None);\n     }\n \n     #[test]\n     fn test_empty_entry() {\n-        let mut m: HashMap<isize, bool> = HashMap::new();\n+        let mut m: HashMap<i32, bool> = HashMap::new();\n         match m.entry(0) {\n             Occupied(_) => panic!(),\n             Vacant(_) => {}\n@@ -2960,7 +2960,7 @@ mod test_map {\n \n     #[test]\n     fn test_empty_iter() {\n-        let mut m: HashMap<isize, bool> = HashMap::new();\n+        let mut m: HashMap<i32, bool> = HashMap::new();\n         assert_eq!(m.drain().next(), None);\n         assert_eq!(m.keys().next(), None);\n         assert_eq!(m.values().next(), None);\n@@ -3461,7 +3461,7 @@ mod test_map {\n     fn test_entry_take_doesnt_corrupt() {\n         #![allow(deprecated)] //rand\n         // Test for #19292\n-        fn check(m: &HashMap<isize, ()>) {\n+        fn check(m: &HashMap<i32, ()>) {\n             for k in m.keys() {\n                 assert!(m.contains_key(k),\n                         \"{} is in keys() but not in the map?\", k);\n@@ -3570,7 +3570,7 @@ mod test_map {\n \n     #[test]\n     fn test_retain() {\n-        let mut map: HashMap<isize, isize> = (0..100).map(|x|(x, x*10)).collect();\n+        let mut map: HashMap<i32, i32> = (0..100).map(|x|(x, x*10)).collect();\n \n         map.retain(|&k, _| k % 2 == 0);\n         assert_eq!(map.len(), 50);"}, {"sha": "9e63ba2717a6a586dae78826252086322d4a97ba", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -724,7 +724,7 @@ impl<T, S> HashSet<T, S>\n     /// use std::collections::HashSet;\n     ///\n     /// let xs = [1,2,3,4,5,6];\n-    /// let mut set: HashSet<isize> = xs.iter().cloned().collect();\n+    /// let mut set: HashSet<i32> = xs.iter().cloned().collect();\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);\n     /// ```\n@@ -1097,7 +1097,7 @@ impl<'a, K> ExactSizeIterator for Iter<'a, K> {\n         self.iter.len()\n     }\n }\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K> FusedIterator for Iter<'a, K> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -1124,7 +1124,7 @@ impl<K> ExactSizeIterator for IntoIter<K> {\n         self.iter.len()\n     }\n }\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<K> FusedIterator for IntoIter<K> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -1155,7 +1155,7 @@ impl<'a, K> ExactSizeIterator for Drain<'a, K> {\n         self.iter.len()\n     }\n }\n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, K> FusedIterator for Drain<'a, K> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -1208,7 +1208,7 @@ impl<'a, T, S> fmt::Debug for Intersection<'a, T, S>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T, S> FusedIterator for Intersection<'a, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n@@ -1244,7 +1244,7 @@ impl<'a, T, S> Iterator for Difference<'a, T, S>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T, S> FusedIterator for Difference<'a, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n@@ -1283,7 +1283,7 @@ impl<'a, T, S> Iterator for SymmetricDifference<'a, T, S>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T, S> FusedIterator for SymmetricDifference<'a, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n@@ -1307,7 +1307,7 @@ impl<'a, T, S> Clone for Union<'a, T, S> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a, T, S> FusedIterator for Union<'a, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n@@ -1745,7 +1745,7 @@ mod test_set {\n     #[test]\n     fn test_retain() {\n         let xs = [1, 2, 3, 4, 5, 6];\n-        let mut set: HashSet<isize> = xs.iter().cloned().collect();\n+        let mut set: HashSet<i32> = xs.iter().cloned().collect();\n         set.retain(|&k| k % 2 == 0);\n         assert_eq!(set.len(), 3);\n         assert!(set.contains(&2));"}, {"sha": "c88c2bc913713634aa465e8fa82830226b3802e2", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -875,6 +875,8 @@ impl CStr {\n     ///   `ptr`.\n     /// * There is no guarantee that the memory pointed to by `ptr` contains a\n     ///   valid nul terminator byte at the end of the string.\n+    /// * It is not guaranteed that the memory pointed by `ptr` won't change\n+    ///   before the `CStr` has been destroyed.\n     ///\n     /// > **Note**: This operation is intended to be a 0-cost cast but it is\n     /// > currently implemented with an up-front calculation of the length of"}, {"sha": "da15941374d846b44602cffc7d26ebcd3199d930", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -266,7 +266,6 @@\n #![feature(float_from_str_radix)]\n #![feature(fn_traits)]\n #![feature(fnbox)]\n-#![feature(fused)]\n #![feature(generic_param_attrs)]\n #![feature(hashmap_hasher)]\n #![feature(heap_api)]"}, {"sha": "cd2af99d6ac1f47a7beffa8837ad034e80da838e", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -905,7 +905,7 @@ impl<'a> DoubleEndedIterator for Iter<'a> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a> FusedIterator for Iter<'a> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1008,7 +1008,7 @@ impl<'a> DoubleEndedIterator for Components<'a> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a> FusedIterator for Components<'a> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1076,7 +1076,7 @@ impl<'a> Iterator for Ancestors<'a> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[unstable(feature = \"path_ancestors\", issue = \"48581\")]\n impl<'a> FusedIterator for Ancestors<'a> {}\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "9fff8b91f96f32f155f8f9378e515e785ee56b1e", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -428,20 +428,15 @@ impl fmt::Debug for Wtf8 {\n \n         formatter.write_str(\"\\\"\")?;\n         let mut pos = 0;\n-        loop {\n-            match self.next_surrogate(pos) {\n-                None => break,\n-                Some((surrogate_pos, surrogate)) => {\n-                    write_str_escaped(\n-                        formatter,\n-                        unsafe { str::from_utf8_unchecked(\n-                            &self.bytes[pos .. surrogate_pos]\n-                        )},\n-                    )?;\n-                    write!(formatter, \"\\\\u{{{:x}}}\", surrogate)?;\n-                    pos = surrogate_pos + 3;\n-                }\n-            }\n+        while let Some((surrogate_pos, surrogate)) = self.next_surrogate(pos) {\n+            write_str_escaped(\n+                formatter,\n+                unsafe { str::from_utf8_unchecked(\n+                    &self.bytes[pos .. surrogate_pos]\n+                )},\n+            )?;\n+            write!(formatter, \"\\\\u{{{:x}}}\", surrogate)?;\n+            pos = surrogate_pos + 3;\n         }\n         write_str_escaped(\n             formatter,"}, {"sha": "de8b46d5f1b0229b89aeb1fa62316661340aac5a", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -70,7 +70,7 @@ impl Iterator for ToLowercase {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for ToLowercase {}\n \n /// Returns an iterator that yields the uppercase equivalent of a `char`.\n@@ -92,7 +92,7 @@ impl Iterator for ToUppercase {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for ToUppercase {}\n \n #[derive(Debug, Clone)]"}, {"sha": "f155b62e3cc72dd9e6c62fc01608e5b5a7577fdc", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -36,7 +36,6 @@\n #![feature(str_internals)]\n #![feature(decode_utf8)]\n #![feature(fn_traits)]\n-#![feature(fused)]\n #![feature(lang_items)]\n #![feature(non_exhaustive)]\n #![feature(staged_api)]"}, {"sha": "a72e1210d93f61c13279025ada8387668c6a8cd8", "filename": "src/libstd_unicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibstd_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fu_str.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -127,7 +127,6 @@ impl<I> Iterator for Utf16Encoder<I>\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n impl<I> FusedIterator for Utf16Encoder<I>\n     where I: FusedIterator<Item = char> {}\n \n@@ -186,5 +185,5 @@ impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n     }\n }\n \n-#[unstable(feature = \"fused\", issue = \"35602\")]\n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<'a> FusedIterator for SplitWhitespace<'a> {}"}, {"sha": "94195ccc72c49d576399c0f829ed69d38cc666d5", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -132,6 +132,18 @@ impl<'a> StringReader<'a> {\n         self.advance_token()?;\n         Ok(ret_val)\n     }\n+\n+    fn fail_unterminated_raw_string(&self, pos: BytePos, hash_count: usize) {\n+        let mut err = self.struct_span_fatal(pos, pos, \"unterminated raw string\");\n+        err.span_label(self.mk_sp(pos, pos), \"unterminated raw string\");\n+        if hash_count > 0 {\n+            err.note(&format!(\"this raw string should be terminated with `\\\"{}`\",\n+                              \"#\".repeat(hash_count)));\n+        }\n+        err.emit();\n+        FatalError.raise();\n+    }\n+\n     fn fatal(&self, m: &str) -> FatalError {\n         self.fatal_span(self.peek_span, m)\n     }\n@@ -269,6 +281,15 @@ impl<'a> StringReader<'a> {\n         Self::push_escaped_char_for_msg(&mut m, c);\n         self.fatal_span_(from_pos, to_pos, &m[..])\n     }\n+\n+    fn struct_span_fatal(&self,\n+                         from_pos: BytePos,\n+                         to_pos: BytePos,\n+                         m: &str)\n+                         -> DiagnosticBuilder<'a> {\n+        self.sess.span_diagnostic.struct_span_fatal(self.mk_sp(from_pos, to_pos), m)\n+    }\n+\n     fn struct_fatal_span_char(&self,\n                               from_pos: BytePos,\n                               to_pos: BytePos,\n@@ -1404,8 +1425,7 @@ impl<'a> StringReader<'a> {\n                 }\n \n                 if self.is_eof() {\n-                    let last_bpos = self.pos;\n-                    self.fatal_span_(start_bpos, last_bpos, \"unterminated raw string\").raise();\n+                    self.fail_unterminated_raw_string(start_bpos, hash_count);\n                 } else if !self.ch_is('\"') {\n                     let last_bpos = self.pos;\n                     let curr_char = self.ch.unwrap();\n@@ -1421,8 +1441,7 @@ impl<'a> StringReader<'a> {\n                 let mut valid = true;\n                 'outer: loop {\n                     if self.is_eof() {\n-                        let last_bpos = self.pos;\n-                        self.fatal_span_(start_bpos, last_bpos, \"unterminated raw string\").raise();\n+                        self.fail_unterminated_raw_string(start_bpos, hash_count);\n                     }\n                     // if self.ch_is('\"') {\n                     // content_end_bpos = self.pos;\n@@ -1636,8 +1655,7 @@ impl<'a> StringReader<'a> {\n         }\n \n         if self.is_eof() {\n-            let pos = self.pos;\n-            self.fatal_span_(start_bpos, pos, \"unterminated raw string\").raise();\n+            self.fail_unterminated_raw_string(start_bpos, hash_count);\n         } else if !self.ch_is('\"') {\n             let pos = self.pos;\n             let ch = self.ch.unwrap();\n@@ -1653,8 +1671,7 @@ impl<'a> StringReader<'a> {\n         'outer: loop {\n             match self.ch {\n                 None => {\n-                    let pos = self.pos;\n-                    self.fatal_span_(start_bpos, pos, \"unterminated raw string\").raise()\n+                    self.fail_unterminated_raw_string(start_bpos, hash_count);\n                 }\n                 Some('\"') => {\n                     content_end_bpos = self.pos;"}, {"sha": "da2a22df997d170f4a865e0963b0532f00080d28", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -3114,7 +3114,7 @@ impl<'a> Parser<'a> {\n                         let expr_str = self.sess.codemap().span_to_snippet(expr.span)\n                                                 .unwrap_or(pprust::expr_to_string(&expr));\n                         err.span_suggestion(expr.span,\n-                                            &format!(\"try {} the casted value\", op_verb),\n+                                            &format!(\"try {} the cast value\", op_verb),\n                                             format!(\"({})\", expr_str));\n                         err.emit();\n "}, {"sha": "8fd95aa1ca8612c40e47e63b7298050969c4c0e1", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -732,18 +732,13 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     let mut parser = parse::Parser::new(fmt_str);\n     let mut pieces = vec![];\n \n-    loop {\n-        match parser.next() {\n-            Some(mut piece) => {\n-                if !parser.errors.is_empty() {\n-                    break;\n-                }\n-                cx.verify_piece(&piece);\n-                cx.resolve_name_inplace(&mut piece);\n-                pieces.push(piece);\n-            }\n-            None => break,\n+    while let Some(mut piece) = parser.next() {\n+        if !parser.errors.is_empty() {\n+            break;\n         }\n+        cx.verify_piece(&piece);\n+        cx.resolve_name_inplace(&mut piece);\n+        pieces.push(piece);\n     }\n \n     let numbered_position_args = pieces.iter().any(|arg: &parse::Piece| {"}, {"sha": "ed9eb5d5c9261fb6d0a313fc2c723e633b77a7f6", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -322,12 +322,7 @@ impl Span {\n     pub fn macro_backtrace(mut self) -> Vec<MacroBacktrace> {\n         let mut prev_span = DUMMY_SP;\n         let mut result = vec![];\n-        loop {\n-            let info = match self.ctxt().outer().expn_info() {\n-                Some(info) => info,\n-                None => break,\n-            };\n-\n+        while let Some(info) = self.ctxt().outer().expn_info() {\n             let (pre, post) = match info.callee.format {\n                 ExpnFormat::MacroAttribute(..) => (\"#[\", \"]\"),\n                 ExpnFormat::MacroBang(..) => (\"\", \"!\"),"}, {"sha": "1e02fe4befdf52d56e6a6b271216b8146f61cf46", "filename": "src/test/codegen/abi-main-signature-16bit-c-int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -18,7 +18,6 @@\n // ignore-hexagon\n // ignore-mips\n // ignore-powerpc\n-// ignore-powerpc64\n // ignore-s390x\n // ignore-sparc\n // ignore-wasm32"}, {"sha": "b24899cc363a08b0bf8c9b5847d17fc97794be73", "filename": "src/test/codegen/fastcall-inreg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -25,8 +25,6 @@\n // ignore-mips64\n // ignore-mips64el\n // ignore-msp430\n-// ignore-powerpc64\n-// ignore-powerpc64le\n // ignore-powerpc\n // ignore-r600\n // ignore-amdgcn"}, {"sha": "5661592d0c7b2873699151b8571edd4aa4fa4f90", "filename": "src/test/codegen/global_asm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fglobal_asm.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -21,8 +21,6 @@\n // ignore-mips64\n // ignore-mips64el\n // ignore-msp430\n-// ignore-powerpc64\n-// ignore-powerpc64le\n // ignore-powerpc\n // ignore-r600\n // ignore-amdgcn"}, {"sha": "d8b5db12404acc12d2b7e5801600b07161ee2ee9", "filename": "src/test/codegen/global_asm_include.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Fglobal_asm_include.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Fglobal_asm_include.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fglobal_asm_include.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -21,8 +21,6 @@\n // ignore-mips64\n // ignore-mips64el\n // ignore-msp430\n-// ignore-powerpc64\n-// ignore-powerpc64le\n // ignore-powerpc\n // ignore-r600\n // ignore-amdgcn"}, {"sha": "caa0506550dde2fec8ac4e8744145db64c5acbd0", "filename": "src/test/codegen/global_asm_x2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Fglobal_asm_x2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Fglobal_asm_x2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fglobal_asm_x2.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -21,8 +21,6 @@\n // ignore-mips64\n // ignore-mips64el\n // ignore-msp430\n-// ignore-powerpc64\n-// ignore-powerpc64le\n // ignore-powerpc\n // ignore-r600\n // ignore-amdgcn"}, {"sha": "655e67cf7eefe543a230a2089b4dabf9c55138ad", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -14,7 +14,6 @@\n // ignore-mips\n // ignore-mips64\n // ignore-powerpc\n-// ignore-powerpc64\n // See repr-transparent.rs\n \n #![crate_type=\"lib\"]"}, {"sha": "0dede8eb70de046a594b06a28e0bd4948fefe717", "filename": "src/test/run-pass/extern-types-pointer-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-types-pointer-cast.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that pointers to extern types can be casted from/to usize,\n+// Test that pointers to extern types can be cast from/to usize,\n // despite being !Sized.\n \n #![feature(extern_types)]"}, {"sha": "bfa3a1e128a9a3e97948d0e8a8b3c41bc28483dc", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(intrinsics)]\n+#![feature(intrinsics, i128_type)]\n \n mod rusti {\n     extern \"rust-intrinsic\" {\n@@ -18,6 +18,7 @@ mod rusti {\n         pub fn cttz<T>(x: T) -> T;\n         pub fn cttz_nonzero<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n+        pub fn bitreverse<T>(x: T) -> T;\n     }\n }\n \n@@ -29,106 +30,127 @@ pub fn main() {\n         assert_eq!(ctpop(0u16), 0); assert_eq!(ctpop(0i16), 0);\n         assert_eq!(ctpop(0u32), 0); assert_eq!(ctpop(0i32), 0);\n         assert_eq!(ctpop(0u64), 0); assert_eq!(ctpop(0i64), 0);\n+        assert_eq!(ctpop(0u128), 0); assert_eq!(ctpop(0i128), 0);\n \n         assert_eq!(ctpop(1u8), 1); assert_eq!(ctpop(1i8), 1);\n         assert_eq!(ctpop(1u16), 1); assert_eq!(ctpop(1i16), 1);\n         assert_eq!(ctpop(1u32), 1); assert_eq!(ctpop(1i32), 1);\n         assert_eq!(ctpop(1u64), 1); assert_eq!(ctpop(1i64), 1);\n+        assert_eq!(ctpop(1u128), 1); assert_eq!(ctpop(1i128), 1);\n \n         assert_eq!(ctpop(10u8), 2); assert_eq!(ctpop(10i8), 2);\n         assert_eq!(ctpop(10u16), 2); assert_eq!(ctpop(10i16), 2);\n         assert_eq!(ctpop(10u32), 2); assert_eq!(ctpop(10i32), 2);\n         assert_eq!(ctpop(10u64), 2); assert_eq!(ctpop(10i64), 2);\n+        assert_eq!(ctpop(10u128), 2); assert_eq!(ctpop(10i128), 2);\n \n         assert_eq!(ctpop(100u8), 3); assert_eq!(ctpop(100i8), 3);\n         assert_eq!(ctpop(100u16), 3); assert_eq!(ctpop(100i16), 3);\n         assert_eq!(ctpop(100u32), 3); assert_eq!(ctpop(100i32), 3);\n         assert_eq!(ctpop(100u64), 3); assert_eq!(ctpop(100i64), 3);\n+        assert_eq!(ctpop(100u128), 3); assert_eq!(ctpop(100i128), 3);\n \n         assert_eq!(ctpop(-1i8 as u8), 8); assert_eq!(ctpop(-1i8), 8);\n         assert_eq!(ctpop(-1i16 as u16), 16); assert_eq!(ctpop(-1i16), 16);\n         assert_eq!(ctpop(-1i32 as u32), 32); assert_eq!(ctpop(-1i32), 32);\n         assert_eq!(ctpop(-1i64 as u64), 64); assert_eq!(ctpop(-1i64), 64);\n+        assert_eq!(ctpop(-1i128 as u128), 128); assert_eq!(ctpop(-1i128), 128);\n \n         assert_eq!(ctlz(0u8), 8); assert_eq!(ctlz(0i8), 8);\n         assert_eq!(ctlz(0u16), 16); assert_eq!(ctlz(0i16), 16);\n         assert_eq!(ctlz(0u32), 32); assert_eq!(ctlz(0i32), 32);\n         assert_eq!(ctlz(0u64), 64); assert_eq!(ctlz(0i64), 64);\n+        assert_eq!(ctlz(0u128), 128); assert_eq!(ctlz(0i128), 128);\n \n         assert_eq!(ctlz(1u8), 7); assert_eq!(ctlz(1i8), 7);\n         assert_eq!(ctlz(1u16), 15); assert_eq!(ctlz(1i16), 15);\n         assert_eq!(ctlz(1u32), 31); assert_eq!(ctlz(1i32), 31);\n         assert_eq!(ctlz(1u64), 63); assert_eq!(ctlz(1i64), 63);\n+        assert_eq!(ctlz(1u128), 127); assert_eq!(ctlz(1i128), 127);\n \n         assert_eq!(ctlz(10u8), 4); assert_eq!(ctlz(10i8), 4);\n         assert_eq!(ctlz(10u16), 12); assert_eq!(ctlz(10i16), 12);\n         assert_eq!(ctlz(10u32), 28); assert_eq!(ctlz(10i32), 28);\n         assert_eq!(ctlz(10u64), 60); assert_eq!(ctlz(10i64), 60);\n+        assert_eq!(ctlz(10u128), 124); assert_eq!(ctlz(10i128), 124);\n \n         assert_eq!(ctlz(100u8), 1); assert_eq!(ctlz(100i8), 1);\n         assert_eq!(ctlz(100u16), 9); assert_eq!(ctlz(100i16), 9);\n         assert_eq!(ctlz(100u32), 25); assert_eq!(ctlz(100i32), 25);\n         assert_eq!(ctlz(100u64), 57); assert_eq!(ctlz(100i64), 57);\n+        assert_eq!(ctlz(100u128), 121); assert_eq!(ctlz(100i128), 121);\n \n         assert_eq!(ctlz_nonzero(1u8), 7); assert_eq!(ctlz_nonzero(1i8), 7);\n         assert_eq!(ctlz_nonzero(1u16), 15); assert_eq!(ctlz_nonzero(1i16), 15);\n         assert_eq!(ctlz_nonzero(1u32), 31); assert_eq!(ctlz_nonzero(1i32), 31);\n         assert_eq!(ctlz_nonzero(1u64), 63); assert_eq!(ctlz_nonzero(1i64), 63);\n+        assert_eq!(ctlz_nonzero(1u128), 127); assert_eq!(ctlz_nonzero(1i128), 127);\n \n         assert_eq!(ctlz_nonzero(10u8), 4); assert_eq!(ctlz_nonzero(10i8), 4);\n         assert_eq!(ctlz_nonzero(10u16), 12); assert_eq!(ctlz_nonzero(10i16), 12);\n         assert_eq!(ctlz_nonzero(10u32), 28); assert_eq!(ctlz_nonzero(10i32), 28);\n         assert_eq!(ctlz_nonzero(10u64), 60); assert_eq!(ctlz_nonzero(10i64), 60);\n+        assert_eq!(ctlz_nonzero(10u128), 124); assert_eq!(ctlz_nonzero(10i128), 124);\n \n         assert_eq!(ctlz_nonzero(100u8), 1); assert_eq!(ctlz_nonzero(100i8), 1);\n         assert_eq!(ctlz_nonzero(100u16), 9); assert_eq!(ctlz_nonzero(100i16), 9);\n         assert_eq!(ctlz_nonzero(100u32), 25); assert_eq!(ctlz_nonzero(100i32), 25);\n         assert_eq!(ctlz_nonzero(100u64), 57); assert_eq!(ctlz_nonzero(100i64), 57);\n+        assert_eq!(ctlz_nonzero(100u128), 121); assert_eq!(ctlz_nonzero(100i128), 121);\n \n         assert_eq!(cttz(-1i8 as u8), 0); assert_eq!(cttz(-1i8), 0);\n         assert_eq!(cttz(-1i16 as u16), 0); assert_eq!(cttz(-1i16), 0);\n         assert_eq!(cttz(-1i32 as u32), 0); assert_eq!(cttz(-1i32), 0);\n         assert_eq!(cttz(-1i64 as u64), 0); assert_eq!(cttz(-1i64), 0);\n+        assert_eq!(cttz(-1i128 as u128), 0); assert_eq!(cttz(-1i128), 0);\n \n         assert_eq!(cttz(0u8), 8); assert_eq!(cttz(0i8), 8);\n         assert_eq!(cttz(0u16), 16); assert_eq!(cttz(0i16), 16);\n         assert_eq!(cttz(0u32), 32); assert_eq!(cttz(0i32), 32);\n         assert_eq!(cttz(0u64), 64); assert_eq!(cttz(0i64), 64);\n+        assert_eq!(cttz(0u128), 128); assert_eq!(cttz(0i128), 128);\n \n         assert_eq!(cttz(1u8), 0); assert_eq!(cttz(1i8), 0);\n         assert_eq!(cttz(1u16), 0); assert_eq!(cttz(1i16), 0);\n         assert_eq!(cttz(1u32), 0); assert_eq!(cttz(1i32), 0);\n         assert_eq!(cttz(1u64), 0); assert_eq!(cttz(1i64), 0);\n+        assert_eq!(cttz(1u128), 0); assert_eq!(cttz(1i128), 0);\n \n         assert_eq!(cttz(10u8), 1); assert_eq!(cttz(10i8), 1);\n         assert_eq!(cttz(10u16), 1); assert_eq!(cttz(10i16), 1);\n         assert_eq!(cttz(10u32), 1); assert_eq!(cttz(10i32), 1);\n         assert_eq!(cttz(10u64), 1); assert_eq!(cttz(10i64), 1);\n+        assert_eq!(cttz(10u128), 1); assert_eq!(cttz(10i128), 1);\n \n         assert_eq!(cttz(100u8), 2); assert_eq!(cttz(100i8), 2);\n         assert_eq!(cttz(100u16), 2); assert_eq!(cttz(100i16), 2);\n         assert_eq!(cttz(100u32), 2); assert_eq!(cttz(100i32), 2);\n         assert_eq!(cttz(100u64), 2); assert_eq!(cttz(100i64), 2);\n+        assert_eq!(cttz(100u128), 2); assert_eq!(cttz(100i128), 2);\n \n         assert_eq!(cttz_nonzero(-1i8 as u8), 0); assert_eq!(cttz_nonzero(-1i8), 0);\n         assert_eq!(cttz_nonzero(-1i16 as u16), 0); assert_eq!(cttz_nonzero(-1i16), 0);\n         assert_eq!(cttz_nonzero(-1i32 as u32), 0); assert_eq!(cttz_nonzero(-1i32), 0);\n         assert_eq!(cttz_nonzero(-1i64 as u64), 0); assert_eq!(cttz_nonzero(-1i64), 0);\n+        assert_eq!(cttz_nonzero(-1i128 as u128), 0); assert_eq!(cttz_nonzero(-1i128), 0);\n \n         assert_eq!(cttz_nonzero(1u8), 0); assert_eq!(cttz_nonzero(1i8), 0);\n         assert_eq!(cttz_nonzero(1u16), 0); assert_eq!(cttz_nonzero(1i16), 0);\n         assert_eq!(cttz_nonzero(1u32), 0); assert_eq!(cttz_nonzero(1i32), 0);\n         assert_eq!(cttz_nonzero(1u64), 0); assert_eq!(cttz_nonzero(1i64), 0);\n+        assert_eq!(cttz_nonzero(1u128), 0); assert_eq!(cttz_nonzero(1i128), 0);\n \n         assert_eq!(cttz_nonzero(10u8), 1); assert_eq!(cttz_nonzero(10i8), 1);\n         assert_eq!(cttz_nonzero(10u16), 1); assert_eq!(cttz_nonzero(10i16), 1);\n         assert_eq!(cttz_nonzero(10u32), 1); assert_eq!(cttz_nonzero(10i32), 1);\n         assert_eq!(cttz_nonzero(10u64), 1); assert_eq!(cttz_nonzero(10i64), 1);\n+        assert_eq!(cttz_nonzero(10u128), 1); assert_eq!(cttz_nonzero(10i128), 1);\n \n         assert_eq!(cttz_nonzero(100u8), 2); assert_eq!(cttz_nonzero(100i8), 2);\n         assert_eq!(cttz_nonzero(100u16), 2); assert_eq!(cttz_nonzero(100i16), 2);\n         assert_eq!(cttz_nonzero(100u32), 2); assert_eq!(cttz_nonzero(100i32), 2);\n         assert_eq!(cttz_nonzero(100u64), 2); assert_eq!(cttz_nonzero(100i64), 2);\n+        assert_eq!(cttz_nonzero(100u128), 2); assert_eq!(cttz_nonzero(100i128), 2);\n \n         assert_eq!(bswap(0x0Au8), 0x0A); // no-op\n         assert_eq!(bswap(0x0Ai8), 0x0A); // no-op\n@@ -138,5 +160,18 @@ pub fn main() {\n         assert_eq!(bswap(0x0ABBCC0Di32), 0x0DCCBB0A);\n         assert_eq!(bswap(0x0122334455667708u64), 0x0877665544332201);\n         assert_eq!(bswap(0x0122334455667708i64), 0x0877665544332201);\n+        assert_eq!(bswap(0x0122334455667708u128), 0x08776655443322010000000000000000);\n+        assert_eq!(bswap(0x0122334455667708i128), 0x08776655443322010000000000000000);\n+\n+        assert_eq!(bitreverse(0x0Au8), 0x50);\n+        assert_eq!(bitreverse(0x0Ai8), 0x50);\n+        assert_eq!(bitreverse(0x0A0Cu16), 0x3050);\n+        assert_eq!(bitreverse(0x0A0Ci16), 0x3050);\n+        assert_eq!(bitreverse(0x0ABBCC0Eu32), 0x7033DD50);\n+        assert_eq!(bitreverse(0x0ABBCC0Ei32), 0x7033DD50);\n+        assert_eq!(bitreverse(0x0122334455667708u64), 0x10EE66AA22CC4480);\n+        assert_eq!(bitreverse(0x0122334455667708i64), 0x10EE66AA22CC4480);\n+        assert_eq!(bitreverse(0x0122334455667708u128), 0x10EE66AA22CC44800000000000000000);\n+        assert_eq!(bitreverse(0x0122334455667708i128), 0x10EE66AA22CC44800000000000000000);\n     }\n }"}, {"sha": "ece58eedc56eebf7755a012d61c50badb469c714", "filename": "src/test/run-pass/issue-36053.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Frun-pass%2Fissue-36053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Frun-pass%2Fissue-36053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36053.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -14,7 +14,6 @@\n // `FusedIterator` in std but I was not able to isolate that into an\n // external crate.\n \n-#![feature(fused)]\n use std::iter::FusedIterator;\n \n struct Thing<'a>(&'a str);"}, {"sha": "4dfa5037bc5551373a94232f5ce1e16b99c6796a", "filename": "src/test/ui/cast_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fcast_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fcast_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -12,9 +12,9 @@\n \n fn main() {\n     const XYZ: char = 0x1F888 as char;\n-    //~^ ERROR only u8 can be casted into char\n+    //~^ ERROR only u8 can be cast into char\n     const XY: char = 129160 as char;\n-    //~^ ERROR only u8 can be casted into char\n+    //~^ ERROR only u8 can be cast into char\n     const ZYX: char = '\\u{01F888}';\n     println!(\"{}\", XYZ);\n }"}, {"sha": "600d7e61a0986018af5515c29684555ca361efc6", "filename": "src/test/ui/cast_char.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fcast_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fcast_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.stderr?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -1,4 +1,4 @@\n-error: only u8 can be casted into char\n+error: only u8 can be cast into char\n   --> $DIR/cast_char.rs:14:23\n    |\n LL |     const XYZ: char = 0x1F888 as char;\n@@ -10,7 +10,7 @@ note: lint level defined here\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: only u8 can be casted into char\n+error: only u8 can be cast into char\n   --> $DIR/cast_char.rs:16:22\n    |\n LL |     const XY: char = 129160 as char;"}, {"sha": "257b9bd235d763a4f4fdb04f0235693a489b3624", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -5,7 +5,7 @@ LL |     println!(\"{}\", a as usize < long_name); //~ ERROR `<` is interpreted as\n    |                    ---------- ^ --------- interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as comparison\n-   |                    help: try comparing the casted value: `(a as usize)`\n+   |                    help: try comparing the cast value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:17:33\n@@ -14,7 +14,7 @@ LL |     println!(\"{}{}\", a as usize < long_name, long_name);\n    |                      ---------- ^ -------------------- interpreted as generic arguments\n    |                      |          |\n    |                      |          not interpreted as comparison\n-   |                      help: try comparing the casted value: `(a as usize)`\n+   |                      help: try comparing the cast value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:19:31\n@@ -23,7 +23,7 @@ LL |     println!(\"{}\", a as usize < 4); //~ ERROR `<` is interpreted as a start\n    |                    ---------- ^ - interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as comparison\n-   |                    help: try comparing the casted value: `(a as usize)`\n+   |                    help: try comparing the cast value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:21:31\n@@ -32,7 +32,7 @@ LL |     println!(\"{}{}\", a: usize < long_name, long_name);\n    |                      -------- ^ -------------------- interpreted as generic arguments\n    |                      |        |\n    |                      |        not interpreted as comparison\n-   |                      help: try comparing the casted value: `(a: usize)`\n+   |                      help: try comparing the cast value: `(a: usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:23:29\n@@ -41,7 +41,7 @@ LL |     println!(\"{}\", a: usize < 4); //~ ERROR `<` is interpreted as a start o\n    |                    -------- ^ - interpreted as generic arguments\n    |                    |        |\n    |                    |        not interpreted as comparison\n-   |                    help: try comparing the casted value: `(a: usize)`\n+   |                    help: try comparing the cast value: `(a: usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:28:20\n@@ -50,7 +50,7 @@ LL |                    < //~ ERROR `<` is interpreted as a start of generic\n    |                    ^ not interpreted as comparison\n LL |                    4);\n    |                    - interpreted as generic arguments\n-help: try comparing the casted value\n+help: try comparing the cast value\n    |\n LL |     println!(\"{}\", (a\n LL |                    as\n@@ -64,7 +64,7 @@ LL |                    < //~ ERROR `<` is interpreted as a start of generic\n    |                    ^ not interpreted as comparison\n LL |                    5);\n    |                    - interpreted as generic arguments\n-help: try comparing the casted value\n+help: try comparing the cast value\n    |\n LL |     println!(\"{}\", (a\n LL | \n@@ -81,7 +81,7 @@ LL |     println!(\"{}\", a as usize << long_name); //~ ERROR `<` is interpreted a\n    |                    ---------- ^^ --------- interpreted as generic arguments\n    |                    |          |\n    |                    |          not interpreted as shift\n-   |                    help: try shifting the casted value: `(a as usize)`\n+   |                    help: try shifting the cast value: `(a as usize)`\n \n error: expected type, found `4`\n   --> $DIR/issue-22644.rs:42:28"}, {"sha": "9164434006f6170f39dfd1f9aec281b2dc3b2f67", "filename": "src/test/ui/issue-42954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.stderr?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -5,7 +5,7 @@ LL |         $i as u32 < 0 //~ `<` is interpreted as a start of generic argument\n    |         --------- ^ - interpreted as generic arguments\n    |         |         |\n    |         |         not interpreted as comparison\n-   |         help: try comparing the casted value: `($i as u32)`\n+   |         help: try comparing the cast value: `($i as u32)`\n ...\n LL |     is_plainly_printable!(c);\n    |     ------------------------- in this macro invocation"}, {"sha": "495989587e58571a61a97dbc320289dd3a5c3eae", "filename": "src/test/ui/lint/type-overflow.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+\n+#![feature(i128_type)]\n+\n+fn main() {\n+    let error = 255i8; //~WARNING literal out of range for i8\n+\n+    let ok = 0b1000_0001; // should be ok -> i32\n+    let ok = 0b0111_1111i8; // should be ok -> 127i8\n+\n+    let fail = 0b1000_0001i8; //~WARNING literal out of range for i8\n+\n+    let fail = 0x8000_0000_0000_0000i64; //~WARNING literal out of range for i64\n+\n+    let fail = 0x1_FFFF_FFFFu32; //~WARNING literal out of range for u32\n+\n+    let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n+    //~^ WARNING literal out of range for i128\n+\n+    let fail = 0x8FFF_FFFF_FFFF_FFFE; //~WARNING literal out of range for i32\n+\n+    let fail = -0b1111_1111i8; //~WARNING literal out of range for i8\n+}"}, {"sha": "d3fcb1335e20968e4ff28f98be747b39d32cdfbe", "filename": "src/test/ui/lint/type-overflow.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -0,0 +1,58 @@\n+warning: literal out of range for i8\n+  --> $DIR/type-overflow.rs:16:17\n+   |\n+LL |     let error = 255i8; //~WARNING literal out of range for i8\n+   |                 ^^^^^\n+   |\n+   = note: #[warn(overflowing_literals)] on by default\n+\n+warning: literal out of range for i8\n+  --> $DIR/type-overflow.rs:21:16\n+   |\n+LL |     let fail = 0b1000_0001i8; //~WARNING literal out of range for i8\n+   |                ^^^^^^^^^^^^^ help: consider using `u8` instead: `0b1000_0001u8`\n+   |\n+   = note: the literal `0b1000_0001i8` (decimal `129`) does not fit into an `i8` and will become `-127i8`\n+\n+warning: literal out of range for i64\n+  --> $DIR/type-overflow.rs:23:16\n+   |\n+LL |     let fail = 0x8000_0000_0000_0000i64; //~WARNING literal out of range for i64\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x8000_0000_0000_0000u64`\n+   |\n+   = note: the literal `0x8000_0000_0000_0000i64` (decimal `9223372036854775808`) does not fit into an `i64` and will become `-9223372036854775808i64`\n+\n+warning: literal out of range for u32\n+  --> $DIR/type-overflow.rs:25:16\n+   |\n+LL |     let fail = 0x1_FFFF_FFFFu32; //~WARNING literal out of range for u32\n+   |                ^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x1_FFFF_FFFFu64`\n+   |\n+   = note: the literal `0x1_FFFF_FFFFu32` (decimal `8589934591`) does not fit into an `u32` and will become `4294967295u32`\n+\n+warning: literal out of range for i128\n+  --> $DIR/type-overflow.rs:27:22\n+   |\n+LL |     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `0x8000_0000_0000_0000_0000_0000_0000_0000` (decimal `170141183460469231731687303715884105728`) does not fit into an `i128` and will become `-170141183460469231731687303715884105728i128`\n+   = help: consider using `u128` instead\n+\n+warning: literal out of range for i32\n+  --> $DIR/type-overflow.rs:30:16\n+   |\n+LL |     let fail = 0x8FFF_FFFF_FFFF_FFFE; //~WARNING literal out of range for i32\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the literal `0x8FFF_FFFF_FFFF_FFFE` (decimal `10376293541461622782`) does not fit into an `i32` and will become `-2i32`\n+   = help: consider using `i128` instead\n+\n+warning: literal out of range for i8\n+  --> $DIR/type-overflow.rs:32:17\n+   |\n+LL |     let fail = -0b1111_1111i8; //~WARNING literal out of range for i8\n+   |                 ^^^^^^^^^^^^^ help: consider using `i16` instead: `0b1111_1111i16`\n+   |\n+   = note: the literal `0b1111_1111i8` (decimal `255`) does not fit into an `i8` and will become `-1i8`\n+"}, {"sha": "f1eb91d44fda0f7ef530566e89235dc180e1e6f2", "filename": "src/test/ui/raw_string.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw_string.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = r##\"lol\"#;\n+    //~^ ERROR unterminated raw string\n+}"}, {"sha": "b8aa596ef953a19230f426244f896517ce5c12ed", "filename": "src/test/ui/raw_string.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fraw_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftest%2Fui%2Fraw_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw_string.stderr?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -0,0 +1,8 @@\n+error: unterminated raw string\n+  --> $DIR/raw_string.rs:12:13\n+   |\n+LL |     let x = r##\"lol\"#;\n+   |             ^ unterminated raw string\n+   |\n+   = note: this raw string should be terminated with `\"##`\n+"}, {"sha": "cf63cb2e5d9014f4000eb1e58ea729aadd3b33c2", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789b067da2ac921b86199bde21dd231ace1da39/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=2789b067da2ac921b86199bde21dd231ace1da39", "patch": "@@ -43,7 +43,6 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"mips\", \"mips\"),\n     (\"msp430\", \"msp430\"),\n     (\"powerpc\", \"powerpc\"),\n-    (\"powerpc64\", \"powerpc64\"),\n     (\"s390x\", \"s390x\"),\n     (\"sparc\", \"sparc\"),\n     (\"x86_64\", \"x86_64\"),"}]}