{"sha": "f1acc69a2a81c9f82b78c4d9773202f39e8ada5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYWNjNjlhMmE4MWM5ZjgyYjc4YzRkOTc3MzIwMmYzOWU4YWRhNWM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-25T23:49:14Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-26T00:25:54Z"}, "message": "Add class fields to the global index\n\nCloses #2192", "tree": {"sha": "6b975ee21dd88dbf200783d3fd9c4fb349554b6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b975ee21dd88dbf200783d3fd9c4fb349554b6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1acc69a2a81c9f82b78c4d9773202f39e8ada5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1acc69a2a81c9f82b78c4d9773202f39e8ada5c", "html_url": "https://github.com/rust-lang/rust/commit/f1acc69a2a81c9f82b78c4d9773202f39e8ada5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1acc69a2a81c9f82b78c4d9773202f39e8ada5c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b837f37d404bd74eec95496281814f268dbdcd23", "url": "https://api.github.com/repos/rust-lang/rust/commits/b837f37d404bd74eec95496281814f268dbdcd23", "html_url": "https://github.com/rust-lang/rust/commit/b837f37d404bd74eec95496281814f268dbdcd23"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "8f25281f4a8cfcc25be683f76d01db09e8a588d1", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1acc69a2a81c9f82b78c4d9773202f39e8ada5c/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1acc69a2a81c9f82b78c4d9773202f39e8ada5c/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=f1acc69a2a81c9f82b78c4d9773202f39e8ada5c", "patch": "@@ -546,7 +546,11 @@ fn read_path(d: ebml::doc) -> {path: str, pos: uint} {\n \n fn describe_def(items: ebml::doc, id: ast::def_id) -> str {\n     if id.crate != ast::local_crate { ret \"external\"; }\n-    ret item_family_to_str(item_family(find_item(id.node, items)));\n+    let it = alt maybe_find_item(id.node, items) {\n+        some(it) { it }\n+        none { fail (#fmt(\"describe_def: item not found %?\", id)); }\n+    };\n+    ret item_family_to_str(item_family(it));\n }\n \n fn item_family_to_str(fam: char) -> str {\n@@ -567,6 +571,8 @@ fn item_family_to_str(fam: char) -> str {\n       'i' { ret \"impl\"; }\n       'I' { ret \"iface\"; }\n       'C' { ret \"class\"; }\n+      'g' { ret \"public field\"; }\n+      'j' { ret \"private field\"; }\n     }\n }\n "}, {"sha": "8390989e7dddc3e1d9193c535a997399be87d916", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1acc69a2a81c9f82b78c4d9773202f39e8ada5c/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1acc69a2a81c9f82b78c4d9773202f39e8ada5c/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=f1acc69a2a81c9f82b78c4d9773202f39e8ada5c", "patch": "@@ -191,7 +191,7 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n                 encode_name_and_def_id(ebml_w, it.ident, it.id);\n             }\n             ebml_w.wr_tag(tag_paths) {||\n-                // As in the res case, we add the same ident twice: for the\n+                // We add the same ident twice: for the\n                 // class and for its ctor\n                 add_to_index(ebml_w, path, index, it.ident);\n                 encode_named_def_id(ebml_w, it.ident,\n@@ -422,8 +422,9 @@ fn encode_info_for_class(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                          id: node_id, path: ast_map::path,\n                          class_tps: [ty_param],\n                          items: [@class_member],\n-                         global_index: @mut[entry<int>])\n- -> [entry<int>] {\n+                         global_index: @mut[entry<int>]) -> [entry<int>] {\n+    /* Each class has its own index, since different classes\n+       may have fields with the same name */\n     let index = @mut [];\n     let tcx = ecx.tcx;\n     for items.each {|ci|\n@@ -432,6 +433,7 @@ fn encode_info_for_class(ecx: @encode_ctxt, ebml_w: ebml::writer,\n       alt ci.node {\n         instance_var(nm, _, mt, id, vis) {\n           *index += [{val: id, pos: ebml_w.writer.tell()}];\n+          *global_index += [{val: id, pos: ebml_w.writer.tell()}];\n           ebml_w.start_tag(tag_items_data_item);\n           #debug(\"encode_info_for_class: doing %s %d\", *nm, id);\n           encode_visibility(ebml_w, vis);\n@@ -446,8 +448,6 @@ fn encode_info_for_class(ecx: @encode_ctxt, ebml_w: ebml::writer,\n            alt m.vis {\n               public {\n                 *index += [{val: m.id, pos: ebml_w.writer.tell()}];\n-                /* Not sure whether we really need to have two indices,\n-                   but it works for now -- tjc */\n                 *global_index += [{val: m.id, pos: ebml_w.writer.tell()}];\n                 let impl_path = path + [ast_map::path_name(m.ident)];\n                 #debug(\"encode_info_for_class: doing %s %d\", *m.ident, m.id);"}, {"sha": "2696327e77e5b330a5f587902acd0ec4f712f9b4", "filename": "src/test/run-pass/issue-2192.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1acc69a2a81c9f82b78c4d9773202f39e8ada5c/src%2Ftest%2Frun-pass%2Fissue-2192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1acc69a2a81c9f82b78c4d9773202f39e8ada5c/src%2Ftest%2Frun-pass%2Fissue-2192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2192.rs?ref=f1acc69a2a81c9f82b78c4d9773202f39e8ada5c", "patch": "@@ -0,0 +1,6 @@\n+#[crate_type = \"lib\"];\n+\n+class foo {\n+    let mut x: int;\n+    new(xx: int) { self.x = xx; }\n+}"}]}