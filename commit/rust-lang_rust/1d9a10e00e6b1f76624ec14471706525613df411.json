{"sha": "1d9a10e00e6b1f76624ec14471706525613df411", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOWExMGUwMGU2YjFmNzY2MjRlYzE0NDcxNzA2NTI1NjEzZGY0MTE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-07T04:51:30Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-07T04:57:54Z"}, "message": "Use explicit lifetime to get rid of unsafe code\n\nat least this is why we use Rust", "tree": {"sha": "85afea5609d219b0a2bcf9a6bdedb779ed3ee3a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85afea5609d219b0a2bcf9a6bdedb779ed3ee3a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d9a10e00e6b1f76624ec14471706525613df411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9a10e00e6b1f76624ec14471706525613df411", "html_url": "https://github.com/rust-lang/rust/commit/1d9a10e00e6b1f76624ec14471706525613df411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d9a10e00e6b1f76624ec14471706525613df411/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4a84751f8b08068a9a6c4188c88a19f1174dd8", "html_url": "https://github.com/rust-lang/rust/commit/7c4a84751f8b08068a9a6c4188c88a19f1174dd8"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "f6902db969c827bb32f819f6a523fdcc6d9cf85a", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d9a10e00e6b1f76624ec14471706525613df411/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9a10e00e6b1f76624ec14471706525613df411/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1d9a10e00e6b1f76624ec14471706525613df411", "patch": "@@ -45,7 +45,7 @@ use config::Config;\n use filemap::FileMap;\n use issues::{BadIssueSeeker, Issue};\n use utils::use_colored_tty;\n-use visitor::FmtVisitor;\n+use visitor::{FmtVisitor, SnippetProvider};\n \n pub use self::summary::Summary;\n \n@@ -317,8 +317,13 @@ where\n         if config.verbose() {\n             println!(\"Formatting {}\", path_str);\n         }\n-        let mut visitor = FmtVisitor::from_codemap(parse_session, config, module.inner);\n-        let filemap = visitor.codemap.lookup_char_pos(module.inner.lo()).file;\n+        let filemap = parse_session\n+            .codemap()\n+            .lookup_char_pos(module.inner.lo())\n+            .file;\n+        let big_snippet = filemap.src.as_ref().unwrap();\n+        let snippet_provider = SnippetProvider::new(filemap.start_pos, big_snippet);\n+        let mut visitor = FmtVisitor::from_codemap(parse_session, config, &snippet_provider);\n         // Format inner attributes if available.\n         if !krate.attrs.is_empty() && path == main_file {\n             visitor.skip_empty_lines(filemap.end_pos);"}, {"sha": "708e31d86dd9e3d0875b2566ae8e3ea6908d81eb", "filename": "src/rewrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d9a10e00e6b1f76624ec14471706525613df411/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9a10e00e6b1f76624ec14471706525613df411/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=1d9a10e00e6b1f76624ec14471706525613df411", "patch": "@@ -35,7 +35,7 @@ pub struct RewriteContext<'a> {\n     pub is_if_else_block: bool,\n     // When rewriting chain, veto going multi line except the last element\n     pub force_one_line_chain: bool,\n-    pub snippet_provider: &'a SnippetProvider,\n+    pub snippet_provider: &'a SnippetProvider<'a>,\n }\n \n impl<'a> RewriteContext<'a> {"}, {"sha": "b1859418086fc07a2bb51d26563698e00f2cc20b", "filename": "src/visitor.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1d9a10e00e6b1f76624ec14471706525613df411/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9a10e00e6b1f76624ec14471706525613df411/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=1d9a10e00e6b1f76624ec14471706525613df411", "patch": "@@ -10,7 +10,6 @@\n \n use std::rc::Rc;\n use std::cmp;\n-use std::mem;\n \n use strings::string_buffer::StringBuffer;\n use syntax::{ast, visit};\n@@ -50,24 +49,22 @@ fn is_extern_crate(item: &ast::Item) -> bool {\n }\n \n /// Creates a string slice corresponding to the specified span.\n-pub struct SnippetProvider {\n+pub struct SnippetProvider<'a> {\n     /// A pointer to the content of the file we are formatting.\n-    big_snippet: *const Rc<String>,\n+    big_snippet: &'a Rc<String>,\n     /// A position of the start of `big_snippet`, used as an offset.\n     start_pos: usize,\n }\n \n-impl SnippetProvider {\n-    pub fn span_to_snippet(&self, span: Span) -> Option<&str> {\n+impl<'b, 'a: 'b> SnippetProvider<'a> {\n+    pub fn span_to_snippet(&'b self, span: Span) -> Option<&'a str> {\n         let start_index = span.lo().to_usize().checked_sub(self.start_pos)?;\n         let end_index = span.hi().to_usize().checked_sub(self.start_pos)?;\n-        unsafe { Some(&(*self.big_snippet)[start_index..end_index]) }\n+        Some(&self.big_snippet[start_index..end_index])\n     }\n \n-    pub fn from_codemap(codemap: &CodeMap, span: Span) -> Self {\n-        let filemap = codemap.lookup_char_pos(span.lo()).file;\n-        let big_snippet = unsafe { mem::transmute(&filemap.src) };\n-        let start_pos = filemap.start_pos.to_usize();\n+    pub fn new(start_pos: BytePos, big_snippet: &'a Rc<String>) -> Self {\n+        let start_pos = start_pos.to_usize();\n         SnippetProvider {\n             big_snippet,\n             start_pos,\n@@ -84,10 +81,10 @@ pub struct FmtVisitor<'a> {\n     pub block_indent: Indent,\n     pub config: &'a Config,\n     pub is_if_else_block: bool,\n-    pub snippet_provier: SnippetProvider,\n+    pub snippet_provider: &'a SnippetProvider<'a>,\n }\n \n-impl<'a> FmtVisitor<'a> {\n+impl<'b, 'a: 'b> FmtVisitor<'a> {\n     pub fn shape(&self) -> Shape {\n         Shape::indented(self.block_indent, self.config)\n     }\n@@ -537,7 +534,7 @@ impl<'a> FmtVisitor<'a> {\n     pub fn from_codemap(\n         parse_session: &'a ParseSess,\n         config: &'a Config,\n-        span: Span,\n+        snippet_provider: &'a SnippetProvider,\n     ) -> FmtVisitor<'a> {\n         FmtVisitor {\n             parse_session: parse_session,\n@@ -547,17 +544,15 @@ impl<'a> FmtVisitor<'a> {\n             block_indent: Indent::empty(),\n             config: config,\n             is_if_else_block: false,\n-            snippet_provier: SnippetProvider::from_codemap(parse_session.codemap(), span),\n+            snippet_provider: snippet_provider,\n         }\n     }\n \n-    pub fn opt_snippet<'b: 'a>(&'a self, span: Span) -> Option<&'b str> {\n-        self.snippet_provier\n-            .span_to_snippet(span)\n-            .map(|s| unsafe { mem::transmute::<&'a str, &'b str>(s) })\n+    pub fn opt_snippet(&'b self, span: Span) -> Option<&'a str> {\n+        self.snippet_provider.span_to_snippet(span)\n     }\n \n-    pub fn snippet<'b: 'a>(&'a self, span: Span) -> &'b str {\n+    pub fn snippet(&'b self, span: Span) -> &'a str {\n         self.opt_snippet(span).unwrap()\n     }\n \n@@ -755,7 +750,7 @@ impl<'a> FmtVisitor<'a> {\n             use_block: false,\n             is_if_else_block: false,\n             force_one_line_chain: false,\n-            snippet_provider: &self.snippet_provier,\n+            snippet_provider: &self.snippet_provider,\n         }\n     }\n }"}]}