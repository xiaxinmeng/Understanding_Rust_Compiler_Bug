{"sha": "4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "node_id": "C_kwDOAAsO6NoAKDQ3ODEyMzNhNzdlODc5ZTQ5Y2I1Y2UzYzk4ZDJhYmJhNmE2YWRlN2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-16T19:30:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-16T19:30:08Z"}, "message": "Auto merge of #106945 - matthiaskrgr:rollup-c5or8z3, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #105954 (Update instrument-coverage.md)\n - #106835 (new trait solver: rebase impl substs for gats correctly)\n - #106912 (check -Z query-dep-graph is enabled if -Z dump-dep-graph (#106736))\n - #106940 (Improve a TAIT error and add an error code plus documentation)\n - #106942 (Update books)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f76cd2b5c3a2533b1e05547d67bcac920618020e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f76cd2b5c3a2533b1e05547d67bcac920618020e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "html_url": "https://github.com/rust-lang/rust/commit/4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481725984b4cd94ef5c00917b01c1771b6e5299c", "url": "https://api.github.com/repos/rust-lang/rust/commits/481725984b4cd94ef5c00917b01c1771b6e5299c", "html_url": "https://github.com/rust-lang/rust/commit/481725984b4cd94ef5c00917b01c1771b6e5299c"}, {"sha": "4fb9da1db5f307b20ccc175f259079e537aff1f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb9da1db5f307b20ccc175f259079e537aff1f9", "html_url": "https://github.com/rust-lang/rust/commit/4fb9da1db5f307b20ccc175f259079e537aff1f9"}], "stats": {"total": 254, "additions": 166, "deletions": 88}, "files": [{"sha": "9d8812b7eeaac5e03c8d13001a027ef0d24f67a1", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -12,6 +12,8 @@ use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n use rustc_trait_selection::traits::ObligationCtxt;\n \n+use crate::session_diagnostics::NonGenericOpaqueTypeParam;\n+\n use super::RegionInferenceContext;\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n@@ -389,17 +391,13 @@ fn check_opaque_type_parameter_valid(\n         } else {\n             // Prevent `fn foo() -> Foo<u32>` from being defining.\n             let opaque_param = opaque_generics.param_at(i, tcx);\n-            tcx.sess\n-                .struct_span_err(span, \"non-defining opaque type use in defining scope\")\n-                .span_note(\n-                    tcx.def_span(opaque_param.def_id),\n-                    &format!(\n-                        \"used non-generic {} `{}` for generic parameter\",\n-                        opaque_param.kind.descr(),\n-                        arg,\n-                    ),\n-                )\n-                .emit();\n+            let kind = opaque_param.kind.descr();\n+            tcx.sess.emit_err(NonGenericOpaqueTypeParam {\n+                ty: arg,\n+                kind,\n+                span,\n+                param_span: tcx.def_span(opaque_param.def_id),\n+            });\n             return false;\n         }\n     }"}, {"sha": "23acf159240fa7bf509b44ee9683a6bac6acd87c", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -1,6 +1,6 @@\n use rustc_errors::{IntoDiagnosticArg, MultiSpan};\n use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{GenericArg, Ty};\n use rustc_span::Span;\n \n use crate::diagnostics::RegionName;\n@@ -240,3 +240,14 @@ pub(crate) struct MoveBorrow<'a> {\n     #[label]\n     pub borrow_span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(borrowck_opaque_type_non_generic_param, code = \"E0792\")]\n+pub(crate) struct NonGenericOpaqueTypeParam<'a, 'tcx> {\n+    pub ty: GenericArg<'tcx>,\n+    pub kind: &'a str,\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub param_span: Span,\n+}"}, {"sha": "5c77448f908ede209440e084060a346d57b57f23", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -508,6 +508,7 @@ E0787: include_str!(\"./error_codes/E0787.md\"),\n E0788: include_str!(\"./error_codes/E0788.md\"),\n E0790: include_str!(\"./error_codes/E0790.md\"),\n E0791: include_str!(\"./error_codes/E0791.md\"),\n+E0792: include_str!(\"./error_codes/E0792.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "bad2b5abfe4d76044ed4e3914af8dc867eee24c7", "filename": "compiler/rustc_error_codes/src/error_codes/E0792.md", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0792.md", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0792.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0792.md?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -0,0 +1,60 @@\n+A type alias impl trait can only have its hidden type assigned\n+when used fully generically (and within their defining scope).\n+This means\n+\n+```compile_fail,E0792\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo<T> = impl std::fmt::Debug;\n+\n+fn foo() -> Foo<u32> {\n+    5u32\n+}\n+```\n+\n+is not accepted. If it were accepted, one could create unsound situations like\n+\n+```compile_fail,E0792\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo<T> = impl Default;\n+\n+fn foo() -> Foo<u32> {\n+    5u32\n+}\n+\n+fn main() {\n+    let x = Foo::<&'static mut String>::default();\n+}\n+```\n+\n+\n+Instead you need to make the function generic:\n+\n+```\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo<T> = impl std::fmt::Debug;\n+\n+fn foo<U>() -> Foo<U> {\n+    5u32\n+}\n+```\n+\n+This means that no matter the generic parameter to `foo`,\n+the hidden type will always be `u32`.\n+If you want to link the generic parameter to the hidden type,\n+you can do that, too:\n+\n+\n+```\n+#![feature(type_alias_impl_trait)]\n+\n+use std::fmt::Debug;\n+\n+type Foo<T: Debug> = impl Debug;\n+\n+fn foo<U: Debug>() -> Foo<U> {\n+    Vec::<U>::new()\n+}\n+```"}, {"sha": "9e4332c428386ff068dd0a2f49ba859cd3b758d4", "filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -120,3 +120,7 @@ borrowck_cannot_move_when_borrowed =\n         [value] value\n         *[other] {$value_place}\n     } occurs here\n+\n+borrowck_opaque_type_non_generic_param =\n+    expected generic {$kind} parameter, found `{$ty}`\n+    .label = this generic parameter must be used with a generic {$kind} parameter"}, {"sha": "771b63f59c124c5851c9fb6d747d43fd3ee6d35b", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -17,7 +17,7 @@ use rustc_type_ir::sty::TyKind::*;\n \n impl<'tcx> IntoDiagnosticArg for Ty<'tcx> {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        format!(\"{}\", self).into_diagnostic_arg()\n+        self.to_string().into_diagnostic_arg()\n     }\n }\n "}, {"sha": "5f1f1b2c747ba2cf87f7855318c053abd954bb84", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -7,6 +7,7 @@ use crate::ty::visit::{TypeVisitable, TypeVisitor};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n use rustc_data_structures::intern::Interned;\n+use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Decodable, Encodable};\n@@ -36,6 +37,12 @@ pub struct GenericArg<'tcx> {\n     marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, ty::Const<'tcx>)>,\n }\n \n+impl<'tcx> IntoDiagnosticArg for GenericArg<'tcx> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n const TAG_MASK: usize = 0b11;\n const TYPE_TAG: usize = 0b00;\n const REGION_TAG: usize = 0b01;"}, {"sha": "38aebc81cd6b8cd1a5b95c35fd2a109e67df481f", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -2459,6 +2459,11 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let pretty = parse_pretty(&unstable_opts, error_format);\n \n+    // query-dep-graph is required if dump-dep-graph is given #106736\n+    if unstable_opts.dump_dep_graph && !unstable_opts.query_dep_graph {\n+        early_error(error_format, \"can't dump dependency graph without `-Z query-dep-graph`\");\n+    }\n+\n     // Try to find a directory containing the Rust `src`, for more details see\n     // the doc comment on the `real_rust_source_base_dir` field.\n     let tmp_buf;"}, {"sha": "d2f2e78f555ae603f1eaaff6d0bbe2b2f088fafd", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -171,7 +171,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             let impl_substs_with_gat = goal.predicate.projection_ty.substs.rebase_onto(\n                 tcx,\n                 goal_trait_ref.def_id,\n-                impl_trait_ref.substs,\n+                impl_substs,\n             );\n             let substs = translate_substs(\n                 acx.infcx,"}, {"sha": "2cd1b5593d26dc6a03c20f8619187ad4b2485552", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -1 +1 @@\n-Subproject commit 2bd5d42c9956369132228da6409f0e68da56c51a\n+Subproject commit 2cd1b5593d26dc6a03c20f8619187ad4b2485552"}, {"sha": "960d610e7f33889a2577f5f17c26f0d5c82b30df", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -1 +1 @@\n-Subproject commit 8ca261268068d80c0969260fff15199bad87b587\n+Subproject commit 960d610e7f33889a2577f5f17c26f0d5c82b30df"}, {"sha": "2cb0ed9ba56360949f492f9866afe8c293f9f9da", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -1 +1 @@\n-Subproject commit 3ae62681ff236d5528ef7c8c28ba7c6b2ecc6731\n+Subproject commit 2cb0ed9ba56360949f492f9866afe8c293f9f9da"}, {"sha": "a9fb7d13eadfcc5f457962731f105b97f9a7474a", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -1 +1 @@\n-Subproject commit 8888f9428fe9a48f31de6bd2cef9b9bf80791edc\n+Subproject commit a9fb7d13eadfcc5f457962731f105b97f9a7474a"}, {"sha": "7352353ae91c48b136d2ca7d03822e1448165e1e", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -1 +1 @@\n-Subproject commit b3e2a6e6c8a3aae5b5d950c63046f23bae07096d\n+Subproject commit 7352353ae91c48b136d2ca7d03822e1448165e1e"}, {"sha": "da91e25595cc760f117b1eb265748e96ce0c4c6b", "filename": "src/doc/rustc/src/instrument-coverage.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -201,6 +201,8 @@ $ RUSTFLAGS=\"-C instrument-coverage\" \\\n     cargo test --tests\n ```\n \n+> **Note**: The default for `LLVM_PROFILE_FILE` is `default_%m_%p.profraw`. Versions prior to 1.65 had a default of `default.profraw`, so if using those earlier versions, it is recommended to explicitly set `LLVM_PROFILE_FILE=\"default_%m_%p.profraw\"` to avoid having multiple tests overwrite the `.profraw` files.\n+\n Make note of the test binary file paths, displayed after the word \"`Running`\" in the test output:\n \n ```text"}, {"sha": "cbc4def0e03aa8f19c32a981d7cfcd711bbe9bc5", "filename": "tests/ui/dep-graph/dep-graph-dump.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Fdep-graph%2Fdep-graph-dump.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Fdep-graph%2Fdep-graph-dump.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdep-graph%2Fdep-graph-dump.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -0,0 +1,6 @@\n+// Test dump-dep-graph requires query-dep-graph enabled\n+\n+// incremental\n+// compile-flags: -Z dump-dep-graph\n+\n+fn main() {}"}, {"sha": "ea44b8bb07509e7e65a8660107bce094436dbbad", "filename": "tests/ui/dep-graph/dep-graph-dump.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Fdep-graph%2Fdep-graph-dump.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Fdep-graph%2Fdep-graph-dump.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdep-graph%2Fdep-graph-dump.stderr?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -0,0 +1,2 @@\n+error: can't dump dependency graph without `-Z query-dep-graph`\n+"}, {"sha": "0bcc9e002ca0449040b54f47cade01bcc9e0b259", "filename": "tests/ui/type-alias-impl-trait/bound_reduction2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -14,5 +14,5 @@ impl<W> Trait<W> for () {}\n \n fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n     ()\n-    //~^ ERROR non-defining opaque type use\n+    //~^ ERROR expected generic type parameter, found `<T as TraitWithAssoc>::Assoc`\n }"}, {"sha": "3c259bd9e97cc08c2d3e04eaf57ac048d94924d9", "filename": "tests/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -1,14 +1,12 @@\n-error: non-defining opaque type use in defining scope\n+error[E0792]: expected generic type parameter, found `<T as TraitWithAssoc>::Assoc`\n   --> $DIR/bound_reduction2.rs:16:5\n    |\n+LL | type Foo<V> = impl Trait<V>;\n+   |          - this generic parameter must be used with a generic type parameter\n+...\n LL |     ()\n    |     ^^\n-   |\n-note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n-  --> $DIR/bound_reduction2.rs:9:10\n-   |\n-LL | type Foo<V> = impl Trait<V>;\n-   |          ^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0792`."}, {"sha": "f5045d382aac4ed63c4be46e727c657ea6444a1c", "filename": "tests/ui/type-alias-impl-trait/generic_nondefining_use.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -10,12 +10,11 @@ type OneLifetime<'a> = impl Debug;\n \n type OneConst<const X: usize> = impl Debug;\n \n-\n // Not defining uses, because they doesn't define *all* possible generics.\n \n fn concrete_ty() -> OneTy<u32> {\n     5u32\n-    //~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR expected generic type parameter, found `u32`\n }\n \n fn concrete_lifetime() -> OneLifetime<'static> {\n@@ -25,5 +24,5 @@ fn concrete_lifetime() -> OneLifetime<'static> {\n \n fn concrete_const() -> OneConst<{ 123 }> {\n     7u32\n-    //~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR expected generic constant parameter, found `123`\n }"}, {"sha": "564648630b16122127ce6a1c026785740f68c118", "filename": "tests/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -1,35 +1,30 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:17:5\n+error[E0792]: expected generic type parameter, found `u32`\n+  --> $DIR/generic_nondefining_use.rs:16:5\n    |\n+LL | type OneTy<T> = impl Debug;\n+   |            - this generic parameter must be used with a generic type parameter\n+...\n LL |     5u32\n    |     ^^^^\n-   |\n-note: used non-generic type `u32` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:7:12\n-   |\n-LL | type OneTy<T> = impl Debug;\n-   |            ^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:22:5\n+  --> $DIR/generic_nondefining_use.rs:21:5\n    |\n LL | type OneLifetime<'a> = impl Debug;\n    |                  -- cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n ...\n LL |     6u32\n    |     ^^^^\n \n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:27:5\n+error[E0792]: expected generic constant parameter, found `123`\n+  --> $DIR/generic_nondefining_use.rs:26:5\n    |\n+LL | type OneConst<const X: usize> = impl Debug;\n+   |               -------------- this generic parameter must be used with a generic constant parameter\n+...\n LL |     7u32\n    |     ^^^^\n-   |\n-note: used non-generic constant `123` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:11:15\n-   |\n-LL | type OneConst<const X: usize> = impl Debug;\n-   |               ^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0792`."}, {"sha": "d3e169a70d3f7f30471d26e9186092e2a83ad880", "filename": "tests/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let y = 42;\n     let x = wrong_generic(&y);\n     let z: i32 = x;\n-    //~^ ERROR non-defining opaque type use\n+    //~^ ERROR expected generic type parameter, found `&'static i32\n }\n \n type WrongGeneric<T> = impl 'static;"}, {"sha": "19115fd28662be97e91c77088a4f7b2cb5c299a4", "filename": "tests/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -4,17 +4,14 @@ error: at least one trait must be specified\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n-error: non-defining opaque type use in defining scope\n+error[E0792]: expected generic type parameter, found `&'static i32`\n   --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n    |\n LL |     let z: i32 = x;\n    |                  ^\n-   |\n-note: used non-generic type `&'static i32` for generic parameter\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:19\n-   |\n+...\n LL | type WrongGeneric<T> = impl 'static;\n-   |                   ^\n+   |                   - this generic parameter must be used with a generic type parameter\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/generic_type_does_not_live_long_enough.rs:14:5\n@@ -29,4 +26,5 @@ LL | fn wrong_generic<T: 'static>(t: T) -> WrongGeneric<T> {\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0310`.\n+Some errors have detailed explanations: E0310, E0792.\n+For more information about an error, try `rustc --explain E0310`."}, {"sha": "c2f4c37080746f3ef2437046074e3434ecbc38e4", "filename": "tests/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -18,7 +18,7 @@ where\n     type BitsIter = IterBitsIter<T, E, u8>;\n     fn iter_bits(self, n: u8) -> Self::BitsIter {\n         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n-        //~^ ERROR non-defining opaque type use in defining scope\n+        //~^ ERROR expected generic type parameter, found `u8`\n     }\n }\n "}, {"sha": "f8fdb004d098996e1af34800fe48011c533c341f", "filename": "tests/ui/type-alias-impl-trait/issue-60564.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -1,14 +1,12 @@\n-error: non-defining opaque type use in defining scope\n+error[E0792]: expected generic type parameter, found `u8`\n   --> $DIR/issue-60564.rs:20:9\n    |\n+LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n+   |                         - this generic parameter must be used with a generic type parameter\n+...\n LL |         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: used non-generic type `u8` for generic parameter\n-  --> $DIR/issue-60564.rs:8:25\n-   |\n-LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n-   |                         ^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0792`."}, {"sha": "5e0a82a72868ab88337ba20251768de6c23193b3", "filename": "tests/ui/type-alias-impl-trait/issue-68368-non-defining-use-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -7,7 +7,7 @@ trait Trait<T> {}\n type Alias<'a, U> = impl Trait<U>;\n \n fn f<'a>() -> Alias<'a, ()> {}\n-//~^ ERROR non-defining opaque type use in defining scope\n+//~^ ERROR expected generic type parameter, found `()`\n \n fn main() {}\n "}, {"sha": "271743a4010c8faa841a82027d8520e96a019546", "filename": "tests/ui/type-alias-impl-trait/issue-68368-non-defining-use-2.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.stderr?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -1,14 +1,12 @@\n-error: non-defining opaque type use in defining scope\n+error[E0792]: expected generic type parameter, found `()`\n   --> $DIR/issue-68368-non-defining-use-2.rs:9:29\n    |\n+LL | type Alias<'a, U> = impl Trait<U>;\n+   |                - this generic parameter must be used with a generic type parameter\n+LL |\n LL | fn f<'a>() -> Alias<'a, ()> {}\n    |                             ^^\n-   |\n-note: used non-generic type `()` for generic parameter\n-  --> $DIR/issue-68368-non-defining-use-2.rs:7:16\n-   |\n-LL | type Alias<'a, U> = impl Trait<U>;\n-   |                ^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0792`."}, {"sha": "3b32260c96fe14b9a84821de686d21de5aec353c", "filename": "tests/ui/type-alias-impl-trait/issue-68368-non-defining-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -7,7 +7,7 @@ trait Trait<T> {}\n type Alias<'a, U> = impl Trait<U>;\n \n fn f<'a>() -> Alias<'a, ()> {}\n-//~^ ERROR non-defining opaque type use in defining scope\n+//~^ ERROR expected generic type parameter, found `()`\n \n fn main() {}\n "}, {"sha": "4d9a8d6eef9156bbda6c22542093104cd88c504f", "filename": "tests/ui/type-alias-impl-trait/issue-68368-non-defining-use.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -1,14 +1,12 @@\n-error: non-defining opaque type use in defining scope\n+error[E0792]: expected generic type parameter, found `()`\n   --> $DIR/issue-68368-non-defining-use.rs:9:29\n    |\n+LL | type Alias<'a, U> = impl Trait<U>;\n+   |                - this generic parameter must be used with a generic type parameter\n+LL |\n LL | fn f<'a>() -> Alias<'a, ()> {}\n    |                             ^^\n-   |\n-note: used non-generic type `()` for generic parameter\n-  --> $DIR/issue-68368-non-defining-use.rs:7:16\n-   |\n-LL | type Alias<'a, U> = impl Trait<U>;\n-   |                ^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0792`."}, {"sha": "7657fe2fb1aee34c86e37a4aa96905f7bb3c3a80", "filename": "tests/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.rs?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -18,6 +18,6 @@ type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n //~^ ERROR use of undeclared lifetime name `'a`\n \n fn my_fun() -> Return<()> {}\n-//~^ ERROR non-defining opaque type use in defining scope\n+//~^ ERROR expected generic type parameter, found `()`\n \n fn main() {}"}, {"sha": "d1250786d938c367c5cb2be6ab0ad6a5b693ee45", "filename": "tests/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4781233a77e879e49cb5ce3c98d2abba6a6ade7a/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.stderr?ref=4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "patch": "@@ -14,18 +14,16 @@ help: consider introducing lifetime `'a` here\n LL | type Return<'a, A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n    |             +++\n \n-error: non-defining opaque type use in defining scope\n+error[E0792]: expected generic type parameter, found `()`\n   --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:20:27\n    |\n+LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n+   |             - this generic parameter must be used with a generic type parameter\n+...\n LL | fn my_fun() -> Return<()> {}\n    |                           ^^\n-   |\n-note: used non-generic type `()` for generic parameter\n-  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:17:13\n-   |\n-LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n-   |             ^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0261`.\n+Some errors have detailed explanations: E0261, E0792.\n+For more information about an error, try `rustc --explain E0261`."}]}