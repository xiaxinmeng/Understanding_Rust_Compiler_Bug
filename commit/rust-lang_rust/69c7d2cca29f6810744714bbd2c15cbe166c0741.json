{"sha": "69c7d2cca29f6810744714bbd2c15cbe166c0741", "node_id": "C_kwDOAAsO6NoAKDY5YzdkMmNjYTI5ZjY4MTA3NDQ3MTRiYmQyYzE1Y2JlMTY2YzA3NDE", "commit": {"author": {"name": "S. van Dijk", "email": "pyhrr0@protonmail.com", "date": "2022-09-13T07:51:32Z"}, "committer": {"name": "S. van Dijk", "email": "pyhrr0@protonmail.com", "date": "2022-09-13T08:35:59Z"}, "message": "Only ignore external macros.", "tree": {"sha": "d6fb97ffaf4d53461956d883782e028279aad780", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6fb97ffaf4d53461956d883782e028279aad780"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69c7d2cca29f6810744714bbd2c15cbe166c0741", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE75GMu19wBuIauncrFah8lYkbMwEFAmMgQPIACgkQFah8lYkb\nMwFq4g//ZzxpZUQy4I7VA48GD36JxZSRoTPIJ0QSrhjsdDmp5Pe6NnwA0KQsi5bk\nkXeGgquNrtJw5kvZE4yQubTjHXoLcZvQBKf6vx0o3cl7kjM+1ti0wbmOXKzYcSjs\nLVis40He2Z6V6U/EF2v2mqrxCfC65K3pBxIPONncqP+XTbYpaRVCUDIOptrsqIrT\nKvDvG9+AmcoL1uZGGgQEeG6KERpTsGEokVJvrQYZGr5y6JVZIdFqp0Q9/Ti3fD38\nF7Nl6xCnE6v5acPJ7OtEtEnLdSoGABXIaaMwWePxDK22BKNDGMIjgOu5KvrIIyUR\nTXEi/v/YQrsdnQ2yYQqsQ2pVr5r/vv64KoKG93XVPlIs97/M8+jpWVfeh7PA+WL+\nJ+sIffXE+i41jT2grgafNWLM12Wvrz0cZmtBYZ8RWp+uPrhKqZIqB7PH3Mcyapf9\nEjtltagotIuj3ZBVi7ooaISJTwokA97S1G25VIavV+qOabJMh2/h1TYslGMfX5c2\nri5angbS5y5SsECvtEXV47jPYm8cWTCEY6K6lFIpHS60jQsz5JcZHIcwKG/1LfPQ\n7FpatX5/6SQJf01uA3dRc103Wg4R0Y+r2cbhXW0rsYEOl7DQret7yvuOXHzyMFNw\nFs4t8LpmyzGwMjG6bMyujnki3ZJrI4GpjVHkUOqZQmn3Bx+pAqo=\n=O+eX\n-----END PGP SIGNATURE-----", "payload": "tree d6fb97ffaf4d53461956d883782e028279aad780\nparent 4a6f7abeebfa5c462458b788ccd122841408f062\nauthor S. van Dijk <pyhrr0@protonmail.com> 1663055492 +0200\ncommitter S. van Dijk <pyhrr0@protonmail.com> 1663058159 +0200\n\nOnly ignore external macros.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69c7d2cca29f6810744714bbd2c15cbe166c0741", "html_url": "https://github.com/rust-lang/rust/commit/69c7d2cca29f6810744714bbd2c15cbe166c0741", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69c7d2cca29f6810744714bbd2c15cbe166c0741/comments", "author": {"login": "pyhrr0", "id": 5622198, "node_id": "MDQ6VXNlcjU2MjIxOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5622198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyhrr0", "html_url": "https://github.com/pyhrr0", "followers_url": "https://api.github.com/users/pyhrr0/followers", "following_url": "https://api.github.com/users/pyhrr0/following{/other_user}", "gists_url": "https://api.github.com/users/pyhrr0/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyhrr0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyhrr0/subscriptions", "organizations_url": "https://api.github.com/users/pyhrr0/orgs", "repos_url": "https://api.github.com/users/pyhrr0/repos", "events_url": "https://api.github.com/users/pyhrr0/events{/privacy}", "received_events_url": "https://api.github.com/users/pyhrr0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pyhrr0", "id": 5622198, "node_id": "MDQ6VXNlcjU2MjIxOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5622198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyhrr0", "html_url": "https://github.com/pyhrr0", "followers_url": "https://api.github.com/users/pyhrr0/followers", "following_url": "https://api.github.com/users/pyhrr0/following{/other_user}", "gists_url": "https://api.github.com/users/pyhrr0/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyhrr0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyhrr0/subscriptions", "organizations_url": "https://api.github.com/users/pyhrr0/orgs", "repos_url": "https://api.github.com/users/pyhrr0/repos", "events_url": "https://api.github.com/users/pyhrr0/events{/privacy}", "received_events_url": "https://api.github.com/users/pyhrr0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a6f7abeebfa5c462458b788ccd122841408f062", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6f7abeebfa5c462458b788ccd122841408f062", "html_url": "https://github.com/rust-lang/rust/commit/4a6f7abeebfa5c462458b788ccd122841408f062"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "073e4af1318e35044fb1d228ab6ae4e4e5ee7063", "filename": "clippy_lints/src/almost_complete_letter_range.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69c7d2cca29f6810744714bbd2c15cbe166c0741/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c7d2cca29f6810744714bbd2c15cbe166c0741/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Falmost_complete_letter_range.rs?ref=69c7d2cca29f6810744714bbd2c15cbe166c0741", "patch": "@@ -4,6 +4,7 @@ use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Expr, ExprKind, LitKind, Pat, PatKind, RangeEnd, RangeLimits};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -79,7 +80,7 @@ fn check_range(cx: &EarlyContext<'_>, span: Span, start: &Expr, end: &Expr, sugg\n             (LitKind::Byte(b'a') | LitKind::Char('a'), LitKind::Byte(b'z') | LitKind::Char('z'))\n             | (LitKind::Byte(b'A') | LitKind::Char('A'), LitKind::Byte(b'Z') | LitKind::Char('Z'))\n         )\n-        && !span.from_expansion()\n+        && !in_external_macro(cx.sess(), span)\n     {\n         span_lint_and_then(\n             cx,"}, {"sha": "079b7c000dce1e7f953418a356fe2f538d44ad61", "filename": "tests/ui/almost_complete_letter_range.fixed", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69c7d2cca29f6810744714bbd2c15cbe166c0741/tests%2Fui%2Falmost_complete_letter_range.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/69c7d2cca29f6810744714bbd2c15cbe166c0741/tests%2Fui%2Falmost_complete_letter_range.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.fixed?ref=69c7d2cca29f6810744714bbd2c15cbe166c0741", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n // edition:2018\n+// aux-build:macro_rules.rs\n \n #![feature(custom_inner_attributes)]\n #![feature(exclusive_range_pattern)]\n@@ -8,6 +9,9 @@\n #![allow(ellipsis_inclusive_range_patterns)]\n #![allow(clippy::needless_parens_on_range_literals)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n macro_rules! a {\n     () => {\n         'a'\n@@ -16,7 +20,7 @@ macro_rules! a {\n \n macro_rules! b {\n     () => {\n-        let _ = 'a'..'z';\n+        let _ = 'a'..='z';\n     };\n }\n \n@@ -37,7 +41,6 @@ fn main() {\n     let _ = b'B'..b'Z';\n \n     let _ = a!()..='z';\n-    b!();\n \n     let _ = match 0u8 {\n         b'a'..=b'z' if true => 1,\n@@ -54,6 +57,9 @@ fn main() {\n         'B'..'Z' => 4,\n         _ => 5,\n     };\n+\n+    almost_complete_letter_range!();\n+    b!();\n }\n \n fn _under_msrv() {"}, {"sha": "a66900a976efa92d549a8a194c78d3e376a98cdb", "filename": "tests/ui/almost_complete_letter_range.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69c7d2cca29f6810744714bbd2c15cbe166c0741/tests%2Fui%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c7d2cca29f6810744714bbd2c15cbe166c0741/tests%2Fui%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.rs?ref=69c7d2cca29f6810744714bbd2c15cbe166c0741", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n // edition:2018\n+// aux-build:macro_rules.rs\n \n #![feature(custom_inner_attributes)]\n #![feature(exclusive_range_pattern)]\n@@ -8,6 +9,9 @@\n #![allow(ellipsis_inclusive_range_patterns)]\n #![allow(clippy::needless_parens_on_range_literals)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n macro_rules! a {\n     () => {\n         'a'\n@@ -37,7 +41,6 @@ fn main() {\n     let _ = b'B'..b'Z';\n \n     let _ = a!()..'z';\n-    b!();\n \n     let _ = match 0u8 {\n         b'a'..b'z' if true => 1,\n@@ -54,6 +57,9 @@ fn main() {\n         'B'..'Z' => 4,\n         _ => 5,\n     };\n+\n+    almost_complete_letter_range!();\n+    b!();\n }\n \n fn _under_msrv() {"}, {"sha": "3de44c72c1b9d35ad50773e16b143200162da5dd", "filename": "tests/ui/almost_complete_letter_range.stderr", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/69c7d2cca29f6810744714bbd2c15cbe166c0741/tests%2Fui%2Falmost_complete_letter_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c7d2cca29f6810744714bbd2c15cbe166c0741/tests%2Fui%2Falmost_complete_letter_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.stderr?ref=69c7d2cca29f6810744714bbd2c15cbe166c0741", "patch": "@@ -1,5 +1,5 @@\n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:26:17\n+  --> $DIR/almost_complete_letter_range.rs:30:17\n    |\n LL |         let _ = ('a') ..'z';\n    |                 ^^^^^^--^^^\n@@ -9,92 +9,105 @@ LL |         let _ = ('a') ..'z';\n    = note: `-D clippy::almost-complete-letter-range` implied by `-D warnings`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:27:17\n+  --> $DIR/almost_complete_letter_range.rs:31:17\n    |\n LL |         let _ = 'A' .. ('Z');\n    |                 ^^^^--^^^^^^\n    |                     |\n    |                     help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:33:13\n+  --> $DIR/almost_complete_letter_range.rs:37:13\n    |\n LL |     let _ = (b'a')..(b'z');\n    |             ^^^^^^--^^^^^^\n    |                   |\n    |                   help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:34:13\n+  --> $DIR/almost_complete_letter_range.rs:38:13\n    |\n LL |     let _ = b'A'..b'Z';\n    |             ^^^^--^^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:39:13\n+  --> $DIR/almost_complete_letter_range.rs:43:13\n    |\n LL |     let _ = a!()..'z';\n    |             ^^^^--^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:43:9\n+  --> $DIR/almost_complete_letter_range.rs:46:9\n    |\n LL |         b'a'..b'z' if true => 1,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:44:9\n+  --> $DIR/almost_complete_letter_range.rs:47:9\n    |\n LL |         b'A'..b'Z' if true => 2,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:51:9\n+  --> $DIR/almost_complete_letter_range.rs:54:9\n    |\n LL |         'a'..'z' if true => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:52:9\n+  --> $DIR/almost_complete_letter_range.rs:55:9\n    |\n LL |         'A'..'Z' if true => 2,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:62:9\n+  --> $DIR/almost_complete_letter_range.rs:23:17\n+   |\n+LL |         let _ = 'a'..'z';\n+   |                 ^^^--^^^\n+   |                    |\n+   |                    help: use an inclusive range: `..=`\n+...\n+LL |     b!();\n+   |     ---- in this macro invocation\n+   |\n+   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:68:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `...`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:69:13\n+  --> $DIR/almost_complete_letter_range.rs:75:13\n    |\n LL |     let _ = 'a'..'z';\n    |             ^^^--^^^\n    |                |\n    |                help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:71:9\n+  --> $DIR/almost_complete_letter_range.rs:77:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "ef3ca9aea380c0bfba020deffb65b601f56a90b4", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69c7d2cca29f6810744714bbd2c15cbe166c0741/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c7d2cca29f6810744714bbd2c15cbe166c0741/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=69c7d2cca29f6810744714bbd2c15cbe166c0741", "patch": "@@ -140,3 +140,10 @@ macro_rules! manual_rem_euclid {\n macro_rules! equatable_if_let {\n     ($a:ident) => {{ if let 2 = $a {} }};\n }\n+\n+#[macro_export]\n+macro_rules! almost_complete_letter_range {\n+    () => {\n+        let _ = 'a'..'z';\n+    };\n+}"}]}