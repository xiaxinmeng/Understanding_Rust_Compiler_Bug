{"sha": "155f0601421620086a256c9e313568d5bd7391e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NWYwNjAxNDIxNjIwMDg2YTI1NmM5ZTMxMzU2OGQ1YmQ3MzkxZTA=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-11T13:06:57Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-11T13:06:57Z"}, "message": "\"rust-analyzer.debug\" command", "tree": {"sha": "88e80aaffb643fd168e272abd67281757e55a8d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88e80aaffb643fd168e272abd67281757e55a8d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/155f0601421620086a256c9e313568d5bd7391e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/155f0601421620086a256c9e313568d5bd7391e0", "html_url": "https://github.com/rust-lang/rust/commit/155f0601421620086a256c9e313568d5bd7391e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/155f0601421620086a256c9e313568d5bd7391e0/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb892d707c379eff514df9c2a6b2203f38874b14", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb892d707c379eff514df9c2a6b2203f38874b14", "html_url": "https://github.com/rust-lang/rust/commit/eb892d707c379eff514df9c2a6b2203f38874b14"}], "stats": {"total": 250, "additions": 144, "deletions": 106}, "files": [{"sha": "2f90d3bafb5c42cdf5bd52596b0270c41766bbe6", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/155f0601421620086a256c9e313568d5bd7391e0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/155f0601421620086a256c9e313568d5bd7391e0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=155f0601421620086a256c9e313568d5bd7391e0", "patch": "@@ -120,6 +120,11 @@\n                 \"title\": \"Run\",\n                 \"category\": \"Rust Analyzer\"\n             },\n+            {\n+                \"command\": \"rust-analyzer.debug\",\n+                \"title\": \"Debug\",\n+                \"category\": \"Rust Analyzer\"\n+            },\n             {\n                 \"command\": \"rust-analyzer.analyzerStatus\",\n                 \"title\": \"Status\","}, {"sha": "c1b872bceb6da8c7674df4952c5aeaf61499e56e", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 43, "deletions": 106, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/155f0601421620086a256c9e313568d5bd7391e0/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/155f0601421620086a256c9e313568d5bd7391e0/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=155f0601421620086a256c9e313568d5bd7391e0", "patch": "@@ -1,43 +1,46 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n import * as ra from '../rust-analyzer-api';\n-import * as os from \"os\";\n \n import { Ctx, Cmd } from '../ctx';\n-import { Cargo } from '../cargo';\n+import { startDebugSession } from '../debug';\n+\n+async function selectRunnable(ctx: Ctx, prevRunnable: RunnableQuickPick | undefined): Promise<RunnableQuickPick | undefined> {\n+    const editor = ctx.activeRustEditor;\n+    const client = ctx.client;\n+    if (!editor || !client) return;\n+\n+    const textDocument: lc.TextDocumentIdentifier = {\n+        uri: editor.document.uri.toString(),\n+    };\n+\n+    const runnables = await client.sendRequest(ra.runnables, {\n+        textDocument,\n+        position: client.code2ProtocolConverter.asPosition(\n+            editor.selection.active,\n+        ),\n+    });\n+    const items: RunnableQuickPick[] = [];\n+    if (prevRunnable) {\n+        items.push(prevRunnable);\n+    }\n+    for (const r of runnables) {\n+        if (\n+            prevRunnable &&\n+            JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)\n+        ) {\n+            continue;\n+        }\n+        items.push(new RunnableQuickPick(r));\n+    }\n+    return await vscode.window.showQuickPick(items);\n+}\n \n export function run(ctx: Ctx): Cmd {\n     let prevRunnable: RunnableQuickPick | undefined;\n \n     return async () => {\n-        const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n-\n-        const textDocument: lc.TextDocumentIdentifier = {\n-            uri: editor.document.uri.toString(),\n-        };\n-\n-        const runnables = await client.sendRequest(ra.runnables, {\n-            textDocument,\n-            position: client.code2ProtocolConverter.asPosition(\n-                editor.selection.active,\n-            ),\n-        });\n-        const items: RunnableQuickPick[] = [];\n-        if (prevRunnable) {\n-            items.push(prevRunnable);\n-        }\n-        for (const r of runnables) {\n-            if (\n-                prevRunnable &&\n-                JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)\n-            ) {\n-                continue;\n-            }\n-            items.push(new RunnableQuickPick(r));\n-        }\n-        const item = await vscode.window.showQuickPick(items);\n+        const item = await selectRunnable(ctx, prevRunnable);\n         if (!item) return;\n \n         item.detail = 'rerun';\n@@ -64,88 +67,22 @@ export function runSingle(ctx: Ctx): Cmd {\n     };\n }\n \n-function getLldbDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n-    return {\n-        type: \"lldb\",\n-        request: \"launch\",\n-        name: config.label,\n-        program: executable,\n-        args: config.extraArgs,\n-        cwd: config.cwd,\n-        sourceMap: sourceFileMap,\n-        sourceLanguages: [\"rust\"]\n-    };\n-}\n-\n-function getCppvsDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n-    return {\n-        type: (os.platform() === \"win32\") ? \"cppvsdbg\" : 'cppdbg',\n-        request: \"launch\",\n-        name: config.label,\n-        program: executable,\n-        args: config.extraArgs,\n-        cwd: config.cwd,\n-        sourceFileMap: sourceFileMap,\n-    };\n-}\n+export function debug(ctx: Ctx): Cmd {\n+    let prevDebuggee: RunnableQuickPick | undefined;\n \n-const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n-\n-async function getDebugExecutable(config: ra.Runnable): Promise<string> {\n-    const cargo = new Cargo(config.cwd || '.', debugOutput);\n-    const executable = await cargo.executableFromArgs(config.args);\n+    return async () => {\n+        const item = await selectRunnable(ctx, prevDebuggee);\n+        if (!item) return;\n \n-    // if we are here, there were no compilation errors.\n-    return executable;\n+        item.detail = 'restart';\n+        prevDebuggee = item;\n+        return await startDebugSession(ctx, item.runnable);\n+    };\n }\n \n-type DebugConfigProvider = (config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n-\n export function debugSingle(ctx: Ctx): Cmd {\n     return async (config: ra.Runnable) => {\n-        const editor = ctx.activeRustEditor;\n-        if (!editor) return;\n-\n-        const knownEngines: Record<string, DebugConfigProvider> = {\n-            \"vadimcn.vscode-lldb\": getLldbDebugConfig,\n-            \"ms-vscode.cpptools\": getCppvsDebugConfig\n-        };\n-        const debugOptions = ctx.config.debug;\n-\n-        let debugEngine = null;\n-        if (debugOptions.engine === \"auto\") {\n-            for (var engineId in knownEngines) {\n-                debugEngine = vscode.extensions.getExtension(engineId);\n-                if (debugEngine) break;\n-            }\n-        }\n-        else {\n-            debugEngine = vscode.extensions.getExtension(debugOptions.engine);\n-        }\n-\n-        if (!debugEngine) {\n-            vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)`\n-                + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for debugging.`);\n-            return;\n-        }\n-\n-        debugOutput.clear();\n-        if (ctx.config.debug.openUpDebugPane) {\n-            debugOutput.show(true);\n-        }\n-\n-        const executable = await getDebugExecutable(config);\n-        const debugConfig = knownEngines[debugEngine.id](config, executable, debugOptions.sourceFileMap);\n-        if (debugConfig.type in debugOptions.engineSettings) {\n-            const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];\n-            for (var key in settingsMap) {\n-                debugConfig[key] = settingsMap[key];\n-            }\n-        }\n-\n-        debugOutput.appendLine(\"Launching debug configuration:\");\n-        debugOutput.appendLine(JSON.stringify(debugConfig, null, 2));\n-        return vscode.debug.startDebugging(undefined, debugConfig);\n+        await startDebugSession(ctx, config);\n     };\n }\n "}, {"sha": "4f4b88adfc0c1df543504768b8b37231b6fad040", "filename": "editors/code/src/debug.ts", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/155f0601421620086a256c9e313568d5bd7391e0/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/155f0601421620086a256c9e313568d5bd7391e0/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=155f0601421620086a256c9e313568d5bd7391e0", "patch": "@@ -0,0 +1,95 @@\n+import * as os from \"os\";\n+import * as vscode from 'vscode';\n+import * as ra from './rust-analyzer-api';\n+\n+import { Cargo } from './cargo';\n+import { Ctx } from \"./ctx\";\n+\n+const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n+type DebugConfigProvider = (config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n+\n+function getLldbDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+    return {\n+        type: \"lldb\",\n+        request: \"launch\",\n+        name: config.label,\n+        program: executable,\n+        args: config.extraArgs,\n+        cwd: config.cwd,\n+        sourceMap: sourceFileMap,\n+        sourceLanguages: [\"rust\"]\n+    };\n+}\n+\n+function getCppvsDebugConfig(config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+    return {\n+        type: (os.platform() === \"win32\") ? \"cppvsdbg\" : \"cppdbg\",\n+        request: \"launch\",\n+        name: config.label,\n+        program: executable,\n+        args: config.extraArgs,\n+        cwd: config.cwd,\n+        sourceFileMap: sourceFileMap,\n+    };\n+}\n+\n+async function getDebugExecutable(config: ra.Runnable): Promise<string> {\n+    const cargo = new Cargo(config.cwd || '.', debugOutput);\n+    const executable = await cargo.executableFromArgs(config.args);\n+\n+    // if we are here, there were no compilation errors.\n+    return executable;\n+}\n+\n+export async function getDebugConfiguration(ctx: Ctx, config: ra.Runnable): Promise<vscode.DebugConfiguration | undefined> {\n+    const editor = ctx.activeRustEditor;\n+    if (!editor) return;\n+\n+    const knownEngines: Record<string, DebugConfigProvider> = {\n+        \"vadimcn.vscode-lldb\": getLldbDebugConfig,\n+        \"ms-vscode.cpptools\": getCppvsDebugConfig\n+    };\n+    const debugOptions = ctx.config.debug;\n+\n+    let debugEngine = null;\n+    if (debugOptions.engine === \"auto\") {\n+        for (var engineId in knownEngines) {\n+            debugEngine = vscode.extensions.getExtension(engineId);\n+            if (debugEngine) break;\n+        }\n+    }\n+    else {\n+        debugEngine = vscode.extensions.getExtension(debugOptions.engine);\n+    }\n+\n+    if (!debugEngine) {\n+        vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)`\n+            + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for debugging.`);\n+        return;\n+    }\n+\n+    debugOutput.clear();\n+    if (ctx.config.debug.openUpDebugPane) {\n+        debugOutput.show(true);\n+    }\n+\n+    const executable = await getDebugExecutable(config);\n+    const debugConfig = knownEngines[debugEngine.id](config, executable, debugOptions.sourceFileMap);\n+    if (debugConfig.type in debugOptions.engineSettings) {\n+        const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];\n+        for (var key in settingsMap) {\n+            debugConfig[key] = settingsMap[key];\n+        }\n+    }\n+\n+    return debugConfig;\n+}\n+\n+export async function startDebugSession(ctx: Ctx, config: ra.Runnable): Promise<boolean> {\n+    const debugConfig = await getDebugConfiguration(ctx, config);\n+    if (!debugConfig) return false;\n+\n+    debugOutput.appendLine(\"Launching debug configuration:\");\n+    debugOutput.appendLine(JSON.stringify(debugConfig, null, 2));\n+    return vscode.debug.startDebugging(undefined, debugConfig);\n+}"}, {"sha": "5fdeebd6887888b91ae551cacfc3634615ff3f21", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/155f0601421620086a256c9e313568d5bd7391e0/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/155f0601421620086a256c9e313568d5bd7391e0/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=155f0601421620086a256c9e313568d5bd7391e0", "patch": "@@ -77,6 +77,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('syntaxTree', commands.syntaxTree);\n     ctx.registerCommand('expandMacro', commands.expandMacro);\n     ctx.registerCommand('run', commands.run);\n+    ctx.registerCommand('debug', commands.debug);\n \n     defaultOnEnter.dispose();\n     ctx.registerCommand('onEnter', commands.onEnter);"}]}