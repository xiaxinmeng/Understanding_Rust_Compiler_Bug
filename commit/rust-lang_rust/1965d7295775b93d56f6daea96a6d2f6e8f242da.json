{"sha": "1965d7295775b93d56f6daea96a6d2f6e8f242da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NjVkNzI5NTc3NWI5M2Q1NmY2ZGFlYTk2YTZkMmY2ZThmMjQyZGE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-23T00:02:14Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-24T00:48:16Z"}, "message": "core: remove iter_bytes helper functions", "tree": {"sha": "cb1b8702a3879366057fb9d29b8f05858821778b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb1b8702a3879366057fb9d29b8f05858821778b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1965d7295775b93d56f6daea96a6d2f6e8f242da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1965d7295775b93d56f6daea96a6d2f6e8f242da", "html_url": "https://github.com/rust-lang/rust/commit/1965d7295775b93d56f6daea96a6d2f6e8f242da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1965d7295775b93d56f6daea96a6d2f6e8f242da/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d49d0f82d9acf434a4107515d79d01f297f32430", "url": "https://api.github.com/repos/rust-lang/rust/commits/d49d0f82d9acf434a4107515d79d01f297f32430", "html_url": "https://github.com/rust-lang/rust/commit/d49d0f82d9acf434a4107515d79d01f297f32430"}], "stats": {"total": 266, "additions": 137, "deletions": 129}, "files": [{"sha": "d56690f4b6a48ef1c90f81230728e6cd4f1034c8", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=1965d7295775b93d56f6daea96a6d2f6e8f242da", "patch": "@@ -1367,13 +1367,21 @@ pub type mono_id = @mono_id_;\n impl to_bytes::IterBytes for mono_param_id {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n         match *self {\n-            mono_precise(t, ref mids) =>\n-                to_bytes::iter_bytes_3(&0u8, &ty::type_id(t), mids, lsb0, f),\n+            mono_precise(t, ref mids) => {\n+                0u8.iter_bytes(lsb0, f) &&\n+                ty::type_id(t).iter_bytes(lsb0, f) &&\n+                mids.iter_bytes(lsb0, f)\n+            }\n \n             mono_any => 1u8.iter_bytes(lsb0, f),\n \n-            mono_repr(ref a, ref b, ref c, ref d) =>\n-                to_bytes::iter_bytes_5(&2u8, a, b, c, d, lsb0, f)\n+            mono_repr(ref a, ref b, ref c, ref d) => {\n+                2u8.iter_bytes(lsb0, f) &&\n+                a.iter_bytes(lsb0, f) &&\n+                b.iter_bytes(lsb0, f) &&\n+                c.iter_bytes(lsb0, f) &&\n+                d.iter_bytes(lsb0, f)\n+            }\n         }\n     }\n }\n@@ -1386,7 +1394,7 @@ impl to_bytes::IterBytes for MonoDataClass {\n \n impl to_bytes::IterBytes for mono_id_ {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        to_bytes::iter_bytes_2(&self.def, &self.params, lsb0, f)\n+        self.def.iter_bytes(lsb0, f) && self.params.iter_bytes(lsb0, f)\n     }\n }\n "}, {"sha": "621ce48a4fd08ee6a893351e813c8d1a314abfa0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 84, "deletions": 71, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1965d7295775b93d56f6daea96a6d2f6e8f242da", "patch": "@@ -137,7 +137,9 @@ type creader_cache = @mut HashMap<creader_cache_key, t>;\n \n impl to_bytes::IterBytes for creader_cache_key {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        to_bytes::iter_bytes_3(&self.cnum, &self.pos, &self.len, lsb0, f)\n+        self.cnum.iter_bytes(lsb0, f) &&\n+        self.pos.iter_bytes(lsb0, f) &&\n+        self.len.iter_bytes(lsb0, f)\n     }\n }\n \n@@ -392,14 +394,19 @@ pub struct FnSig {\n \n impl to_bytes::IterBytes for BareFnTy {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        to_bytes::iter_bytes_3(&self.purity, &self.abis, &self.sig, lsb0, f)\n+        self.purity.iter_bytes(lsb0, f) &&\n+        self.abis.iter_bytes(lsb0, f) &&\n+        self.sig.iter_bytes(lsb0, f)\n     }\n }\n \n impl to_bytes::IterBytes for ClosureTy {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        to_bytes::iter_bytes_5(&self.purity, &self.sigil, &self.onceness,\n-                               &self.region, &self.sig, lsb0, f)\n+        self.purity.iter_bytes(lsb0, f) &&\n+        self.sigil.iter_bytes(lsb0, f) &&\n+        self.onceness.iter_bytes(lsb0, f) &&\n+        self.region.iter_bytes(lsb0, f) &&\n+        self.sig.iter_bytes(lsb0, f)\n     }\n }\n \n@@ -717,9 +724,15 @@ pub enum InferTy {\n impl to_bytes::IterBytes for InferTy {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n         match *self {\n-          TyVar(ref tv) => to_bytes::iter_bytes_2(&0u8, tv, lsb0, f),\n-          IntVar(ref iv) => to_bytes::iter_bytes_2(&1u8, iv, lsb0, f),\n-          FloatVar(ref fv) => to_bytes::iter_bytes_2(&2u8, fv, lsb0, f),\n+            TyVar(ref tv) => {\n+                0u8.iter_bytes(lsb0, f) && tv.iter_bytes(lsb0, f)\n+            }\n+            IntVar(ref iv) => {\n+                1u8.iter_bytes(lsb0, f) && iv.iter_bytes(lsb0, f)\n+            }\n+            FloatVar(ref fv) => {\n+                2u8.iter_bytes(lsb0, f) && fv.iter_bytes(lsb0, f)\n+            }\n         }\n     }\n }\n@@ -733,8 +746,12 @@ pub enum InferRegion {\n impl to_bytes::IterBytes for InferRegion {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n         match *self {\n-            ReVar(ref rv) => to_bytes::iter_bytes_2(&0u8, rv, lsb0, f),\n-            ReSkolemized(ref v, _) => to_bytes::iter_bytes_2(&1u8, v, lsb0, f)\n+            ReVar(ref rv) => {\n+                0u8.iter_bytes(lsb0, f) && rv.iter_bytes(lsb0, f)\n+            }\n+            ReSkolemized(ref v, _) => {\n+                1u8.iter_bytes(lsb0, f) && v.iter_bytes(lsb0, f)\n+            }\n         }\n     }\n }\n@@ -2626,119 +2643,115 @@ impl cmp::TotalEq for bound_region {\n impl to_bytes::IterBytes for vstore {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n         match *self {\n-          vstore_fixed(ref u) =>\n-          to_bytes::iter_bytes_2(&0u8, u, lsb0, f),\n-\n-          vstore_uniq => 1u8.iter_bytes(lsb0, f),\n-          vstore_box => 2u8.iter_bytes(lsb0, f),\n+            vstore_fixed(ref u) => {\n+                0u8.iter_bytes(lsb0, f) && u.iter_bytes(lsb0, f)\n+            }\n+            vstore_uniq => 1u8.iter_bytes(lsb0, f),\n+            vstore_box => 2u8.iter_bytes(lsb0, f),\n \n-          vstore_slice(ref r) =>\n-          to_bytes::iter_bytes_2(&3u8, r, lsb0, f),\n+            vstore_slice(ref r) => {\n+                3u8.iter_bytes(lsb0, f) && r.iter_bytes(lsb0, f)\n+            }\n         }\n     }\n }\n \n impl to_bytes::IterBytes for substs {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-          to_bytes::iter_bytes_3(&self.self_r,\n-                                 &self.self_ty,\n-                                 &self.tps, lsb0, f)\n+        self.self_r.iter_bytes(lsb0, f) &&\n+        self.self_ty.iter_bytes(lsb0, f) &&\n+        self.tps.iter_bytes(lsb0, f)\n     }\n }\n \n impl to_bytes::IterBytes for mt {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-          to_bytes::iter_bytes_2(&self.ty,\n-                                 &self.mutbl, lsb0, f)\n+        self.ty.iter_bytes(lsb0, f) && self.mutbl.iter_bytes(lsb0, f)\n     }\n }\n \n impl to_bytes::IterBytes for field {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-          to_bytes::iter_bytes_2(&self.ident,\n-                                 &self.mt, lsb0, f)\n+        self.ident.iter_bytes(lsb0, f) && self.mt.iter_bytes(lsb0, f)\n     }\n }\n \n impl to_bytes::IterBytes for FnSig {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        to_bytes::iter_bytes_2(&self.inputs,\n-                               &self.output,\n-                               lsb0, f)\n+        self.inputs.iter_bytes(lsb0, f) && self.output.iter_bytes(lsb0, f)\n     }\n }\n \n impl to_bytes::IterBytes for sty {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n         match *self {\n-          ty_nil => 0u8.iter_bytes(lsb0, f),\n-          ty_bool => 1u8.iter_bytes(lsb0, f),\n+            ty_nil => 0u8.iter_bytes(lsb0, f),\n+            ty_bool => 1u8.iter_bytes(lsb0, f),\n \n-          ty_int(ref t) =>\n-          to_bytes::iter_bytes_2(&2u8, t, lsb0, f),\n+            ty_int(ref t) => 2u8.iter_bytes(lsb0, f) && t.iter_bytes(lsb0, f),\n \n-          ty_uint(ref t) =>\n-          to_bytes::iter_bytes_2(&3u8, t, lsb0, f),\n+            ty_uint(ref t) => 3u8.iter_bytes(lsb0, f) && t.iter_bytes(lsb0, f),\n \n-          ty_float(ref t) =>\n-          to_bytes::iter_bytes_2(&4u8, t, lsb0, f),\n+            ty_float(ref t) => 4u8.iter_bytes(lsb0, f) && t.iter_bytes(lsb0, f),\n \n-          ty_estr(ref v) =>\n-          to_bytes::iter_bytes_2(&5u8, v, lsb0, f),\n+            ty_estr(ref v) => 5u8.iter_bytes(lsb0, f) && v.iter_bytes(lsb0, f),\n \n-          ty_enum(ref did, ref substs) =>\n-          to_bytes::iter_bytes_3(&6u8, did, substs, lsb0, f),\n+            ty_enum(ref did, ref substs) => {\n+                6u8.iter_bytes(lsb0, f) &&\n+                did.iter_bytes(lsb0, f) &&\n+                substs.iter_bytes(lsb0, f)\n+            }\n \n-          ty_box(ref mt) =>\n-          to_bytes::iter_bytes_2(&7u8, mt, lsb0, f),\n+            ty_box(ref mt) => 7u8.iter_bytes(lsb0, f) && mt.iter_bytes(lsb0, f),\n \n-          ty_evec(ref mt, ref v) =>\n-          to_bytes::iter_bytes_3(&8u8, mt, v, lsb0, f),\n+            ty_evec(ref mt, ref v) => {\n+                8u8.iter_bytes(lsb0, f) &&\n+                mt.iter_bytes(lsb0, f) &&\n+                v.iter_bytes(lsb0, f)\n+            }\n \n-          ty_unboxed_vec(ref mt) =>\n-          to_bytes::iter_bytes_2(&9u8, mt, lsb0, f),\n+            ty_unboxed_vec(ref mt) => 9u8.iter_bytes(lsb0, f) && mt.iter_bytes(lsb0, f),\n \n-          ty_tup(ref ts) =>\n-          to_bytes::iter_bytes_2(&10u8, ts, lsb0, f),\n+            ty_tup(ref ts) => 10u8.iter_bytes(lsb0, f) && ts.iter_bytes(lsb0, f),\n \n-          ty_bare_fn(ref ft) =>\n-          to_bytes::iter_bytes_2(&12u8, ft, lsb0, f),\n+            ty_bare_fn(ref ft) => 12u8.iter_bytes(lsb0, f) && ft.iter_bytes(lsb0, f),\n \n-          ty_self(ref did) => to_bytes::iter_bytes_2(&13u8, did, lsb0, f),\n+            ty_self(ref did) => 13u8.iter_bytes(lsb0, f) && did.iter_bytes(lsb0, f),\n \n-          ty_infer(ref v) =>\n-          to_bytes::iter_bytes_2(&14u8, v, lsb0, f),\n+            ty_infer(ref v) => 14u8.iter_bytes(lsb0, f) && v.iter_bytes(lsb0, f),\n \n-          ty_param(ref p) =>\n-          to_bytes::iter_bytes_2(&15u8, p, lsb0, f),\n+            ty_param(ref p) => 15u8.iter_bytes(lsb0, f) && p.iter_bytes(lsb0, f),\n \n-          ty_type => 16u8.iter_bytes(lsb0, f),\n-          ty_bot => 17u8.iter_bytes(lsb0, f),\n+            ty_type => 16u8.iter_bytes(lsb0, f),\n+            ty_bot => 17u8.iter_bytes(lsb0, f),\n \n-          ty_ptr(ref mt) =>\n-          to_bytes::iter_bytes_2(&18u8, mt, lsb0, f),\n+            ty_ptr(ref mt) => 18u8.iter_bytes(lsb0, f) && mt.iter_bytes(lsb0, f),\n \n-          ty_uniq(ref mt) =>\n-          to_bytes::iter_bytes_2(&19u8, mt, lsb0, f),\n+            ty_uniq(ref mt) => 19u8.iter_bytes(lsb0, f) && mt.iter_bytes(lsb0, f),\n \n-          ty_trait(ref did, ref substs, ref v, ref mutbl) =>\n-          to_bytes::iter_bytes_5(&20u8, did, substs, v, mutbl, lsb0, f),\n+            ty_trait(ref did, ref substs, ref v, ref mutbl) => {\n+                20u8.iter_bytes(lsb0, f) &&\n+                did.iter_bytes(lsb0, f) &&\n+                substs.iter_bytes(lsb0, f) &&\n+                v.iter_bytes(lsb0, f) &&\n+                mutbl.iter_bytes(lsb0, f)\n+            }\n \n-          ty_opaque_closure_ptr(ref ck) =>\n-          to_bytes::iter_bytes_2(&21u8, ck, lsb0, f),\n+            ty_opaque_closure_ptr(ref ck) => 21u8.iter_bytes(lsb0, f) && ck.iter_bytes(lsb0, f),\n \n-          ty_opaque_box => 22u8.iter_bytes(lsb0, f),\n+            ty_opaque_box => 22u8.iter_bytes(lsb0, f),\n \n-          ty_struct(ref did, ref substs) =>\n-          to_bytes::iter_bytes_3(&23u8, did, substs, lsb0, f),\n+            ty_struct(ref did, ref substs) => {\n+                23u8.iter_bytes(lsb0, f) && did.iter_bytes(lsb0, f) && substs.iter_bytes(lsb0, f)\n+            }\n \n-          ty_rptr(ref r, ref mt) =>\n-          to_bytes::iter_bytes_3(&24u8, r, mt, lsb0, f),\n+            ty_rptr(ref r, ref mt) => {\n+                24u8.iter_bytes(lsb0, f) && r.iter_bytes(lsb0, f) && mt.iter_bytes(lsb0, f)\n+            }\n \n-          ty_err => 25u8.iter_bytes(lsb0, f),\n+            ty_err => 25u8.iter_bytes(lsb0, f),\n \n-          ty_closure(ref ct) =>\n-          to_bytes::iter_bytes_2(&26u8, ct, lsb0, f),\n+            ty_closure(ref ct) => 26u8.iter_bytes(lsb0, f) && ct.iter_bytes(lsb0, f),\n         }\n     }\n }"}, {"sha": "556fcfeac99a5d087ab03cd4e3faadbd6042543c", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=1965d7295775b93d56f6daea96a6d2f6e8f242da", "patch": "@@ -564,14 +564,23 @@ enum Constraint {\n impl to_bytes::IterBytes for Constraint {\n    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n         match *self {\n-          ConstrainVarSubVar(ref v0, ref v1) =>\n-          to_bytes::iter_bytes_3(&0u8, v0, v1, lsb0, f),\n+            ConstrainVarSubVar(ref v0, ref v1) => {\n+                0u8.iter_bytes(lsb0, f) &&\n+                v0.iter_bytes(lsb0, f) &&\n+                v1.iter_bytes(lsb0, f)\n+            }\n \n-          ConstrainRegSubVar(ref ra, ref va) =>\n-          to_bytes::iter_bytes_3(&1u8, ra, va, lsb0, f),\n+            ConstrainRegSubVar(ref ra, ref va) => {\n+                1u8.iter_bytes(lsb0, f) &&\n+                ra.iter_bytes(lsb0, f) &&\n+                va.iter_bytes(lsb0, f)\n+            }\n \n-          ConstrainVarSubReg(ref va, ref ra) =>\n-          to_bytes::iter_bytes_3(&2u8, va, ra, lsb0, f)\n+            ConstrainVarSubReg(ref va, ref ra) => {\n+                2u8.iter_bytes(lsb0, f) &&\n+                va.iter_bytes(lsb0, f) &&\n+                ra.iter_bytes(lsb0, f)\n+            }\n         }\n     }\n }"}, {"sha": "20b45dfb2cc6aa6f433e24d1fc532c9bf4434de3", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=1965d7295775b93d56f6daea96a6d2f6e8f242da", "patch": "@@ -236,42 +236,6 @@ impl<A:IterBytes> IterBytes for @[A] {\n     }\n }\n \n-// NOTE: remove all of these after a snapshot, the new for-loop iteration\n-//       protocol makes these unnecessary.\n-\n-#[inline(always)]\n-pub fn iter_bytes_2<A:IterBytes,B:IterBytes>(a: &A, b: &B,\n-                                             lsb0: bool, z: Cb) -> bool {\n-    a.iter_bytes(lsb0, z) && b.iter_bytes(lsb0, z)\n-}\n-\n-pub fn iter_bytes_3<A: IterBytes,\n-                    B: IterBytes,\n-                    C: IterBytes>(a: &A, b: &B, c: &C, lsb0: bool, z: Cb) -> bool {\n-    a.iter_bytes(lsb0, z) && b.iter_bytes(lsb0, z) && c.iter_bytes(lsb0, z)\n-}\n-\n-pub fn iter_bytes_4<A: IterBytes,\n-                B: IterBytes,\n-                C: IterBytes,\n-                D: IterBytes>(a: &A, b: &B, c: &C,\n-                              d: &D,\n-                              lsb0: bool, z: Cb) -> bool {\n-    a.iter_bytes(lsb0, z) && b.iter_bytes(lsb0, z) && c.iter_bytes(lsb0, z) &&\n-        d.iter_bytes(lsb0, z)\n-}\n-\n-pub fn iter_bytes_5<A: IterBytes,\n-                B: IterBytes,\n-                C: IterBytes,\n-                D: IterBytes,\n-                E: IterBytes>(a: &A, b: &B, c: &C,\n-                              d: &D, e: &E,\n-                              lsb0: bool, z: Cb) -> bool {\n-    a.iter_bytes(lsb0, z) && b.iter_bytes(lsb0, z) && c.iter_bytes(lsb0, z) &&\n-        d.iter_bytes(lsb0, z) && e.iter_bytes(lsb0, z)\n-}\n-\n impl<'self> IterBytes for &'self str {\n     #[inline(always)]\n     fn iter_bytes(&self, _lsb0: bool, f: Cb) -> bool {"}, {"sha": "9ab6f13bb4bcf48c1a65df343074ec3f2027d143", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1965d7295775b93d56f6daea96a6d2f6e8f242da", "patch": "@@ -112,7 +112,9 @@ pub struct Lifetime {\n \n impl to_bytes::IterBytes for Lifetime {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        to_bytes::iter_bytes_3(&self.id, &self.span, &self.ident, lsb0, f)\n+        self.id.iter_bytes(lsb0, f) &&\n+        self.span.iter_bytes(lsb0, f) &&\n+        self.ident.iter_bytes(lsb0, f)\n     }\n }\n \n@@ -266,7 +268,9 @@ impl to_bytes::IterBytes for binding_mode {\n         match *self {\n           bind_by_copy => 0u8.iter_bytes(lsb0, f),\n \n-          bind_by_ref(ref m) => to_bytes::iter_bytes_2(&1u8, m, lsb0, f),\n+          bind_by_ref(ref m) => {\n+              1u8.iter_bytes(lsb0, f) && m.iter_bytes(lsb0, f)\n+          }\n \n           bind_infer => 2u8.iter_bytes(lsb0, f),\n         }\n@@ -788,7 +792,7 @@ pub enum ty_ {\n \n impl to_bytes::IterBytes for Ty {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        to_bytes::iter_bytes_2(&self.span.lo, &self.span.hi, lsb0, f)\n+        self.span.lo.iter_bytes(lsb0, f) && self.span.hi.iter_bytes(lsb0, f)\n     }\n }\n \n@@ -876,9 +880,15 @@ impl to_bytes::IterBytes for explicit_self_ {\n         match *self {\n             sty_static => 0u8.iter_bytes(lsb0, f),\n             sty_value => 1u8.iter_bytes(lsb0, f),\n-            sty_region(ref lft, ref mutbl) => to_bytes::iter_bytes_3(&2u8, &lft, mutbl, lsb0, f),\n-            sty_box(ref mutbl) => to_bytes::iter_bytes_2(&3u8, mutbl, lsb0, f),\n-            sty_uniq(ref mutbl) => to_bytes::iter_bytes_2(&4u8, mutbl, lsb0, f),\n+            sty_region(ref lft, ref mutbl) => {\n+                2u8.iter_bytes(lsb0, f) && lft.iter_bytes(lsb0, f) && mutbl.iter_bytes(lsb0, f)\n+            }\n+            sty_box(ref mutbl) => {\n+                3u8.iter_bytes(lsb0, f) && mutbl.iter_bytes(lsb0, f)\n+            }\n+            sty_uniq(ref mutbl) => {\n+                4u8.iter_bytes(lsb0, f) && mutbl.iter_bytes(lsb0, f)\n+            }\n         }\n     }\n }"}, {"sha": "59743b6e8927f1e231208368a35c596ac155cd6a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=1965d7295775b93d56f6daea96a6d2f6e8f242da", "patch": "@@ -197,7 +197,7 @@ pub fn is_call_expr(e: @expr) -> bool {\n impl to_bytes::IterBytes for def_id {\n     #[inline(always)]\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        to_bytes::iter_bytes_2(&self.crate, &self.node, lsb0, f)\n+        self.crate.iter_bytes(lsb0, f) && self.node.iter_bytes(lsb0, f)\n     }\n }\n "}, {"sha": "42117e3b73cf349864af6c7e1441f1ec9f583c78", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1965d7295775b93d56f6daea96a6d2f6e8f242da/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=1965d7295775b93d56f6daea96a6d2f6e8f242da", "patch": "@@ -140,7 +140,9 @@ impl<D:Decoder> Decodable<D> for span {\n \n impl to_bytes::IterBytes for span {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        to_bytes::iter_bytes_3(&self.lo, &self.hi, &self.expn_info, lsb0, f)\n+        self.lo.iter_bytes(lsb0, f) &&\n+        self.hi.iter_bytes(lsb0, f) &&\n+        self.expn_info.iter_bytes(lsb0, f)\n     }\n }\n \n@@ -193,7 +195,7 @@ pub struct NameAndSpan {name: ~str, span: Option<span>}\n \n impl to_bytes::IterBytes for NameAndSpan {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        to_bytes::iter_bytes_2(&self.name, &self.span, lsb0, f)\n+        self.name.iter_bytes(lsb0, f) && self.span.iter_bytes(lsb0, f)\n     }\n }\n \n@@ -204,7 +206,7 @@ pub struct CallInfo {\n \n impl to_bytes::IterBytes for CallInfo {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n-        to_bytes::iter_bytes_2(&self.call_site, &self.callee, lsb0, f)\n+        self.call_site.iter_bytes(lsb0, f) && self.callee.iter_bytes(lsb0, f)\n     }\n }\n \n@@ -216,7 +218,9 @@ pub enum ExpnInfo {\n impl to_bytes::IterBytes for ExpnInfo {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) -> bool {\n         match *self {\n-            ExpandedFrom(ref call_info) => to_bytes::iter_bytes_2(&0u8, call_info, lsb0, f)\n+            ExpandedFrom(ref call_info) => {\n+                0u8.iter_bytes(lsb0, f) && call_info.iter_bytes(lsb0, f)\n+            }\n         }\n     }\n }"}]}