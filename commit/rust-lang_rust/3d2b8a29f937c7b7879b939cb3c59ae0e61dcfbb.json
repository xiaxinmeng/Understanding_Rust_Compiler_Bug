{"sha": "3d2b8a29f937c7b7879b939cb3c59ae0e61dcfbb", "node_id": "C_kwDOAAsO6NoAKDNkMmI4YTI5ZjkzN2M3Yjc4NzliOTM5Y2IzYzU5YWUwZTYxZGNmYmI", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2022-01-05T01:03:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-05T01:03:05Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>\nCo-authored-by: Alexander Ronald Altman <alexanderaltman@me.com>", "tree": {"sha": "002a8be485e277f9f187f772dca5d98bcc6f5626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/002a8be485e277f9f187f772dca5d98bcc6f5626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d2b8a29f937c7b7879b939cb3c59ae0e61dcfbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1O5JCRBK7hj4Ov3rIwAAmWAIAJAd9cOq7Crw/+DwqOus5hts\nTs++bVTgqj9fChbl4tf4O0GtuK8LSm4zfCJXdGy4JASQSq58+8MVVQNI8UPw8JkD\nCjzcn3+XBU9Ec7RGk+Yq3xokEXzE/eQng7l+7QfVNpFD9LtOItnn1aUuR7Oni8GK\nYC3g18Ot4KY2Nm3bLM+k+SLq61O2jCKKc5JSHnH/kmbua2DgA0JzLp7JsavkoQQ4\nouJiDQe6Ye7nkDhWPcIhAygih7LUzn8aFpqU/Lo0bBC/JDMWIw8FuZizBVBrBjDS\nOTtcqWGCu8aweQ1ah0CGXjMlb8FZRocattyaQsYqJ35AaxY1YeLYTP1dwDNTtvg=\n=ho7L\n-----END PGP SIGNATURE-----\n", "payload": "tree 002a8be485e277f9f187f772dca5d98bcc6f5626\nparent e2c659bed8f1cf50fbc9312b703753b3245e2d42\nauthor Tyler Mandry <tmandry@gmail.com> 1641344585 -0800\ncommitter GitHub <noreply@github.com> 1641344585 -0800\n\nApply suggestions from code review\n\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>\nCo-authored-by: Alexander Ronald Altman <alexanderaltman@me.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2b8a29f937c7b7879b939cb3c59ae0e61dcfbb", "html_url": "https://github.com/rust-lang/rust/commit/3d2b8a29f937c7b7879b939cb3c59ae0e61dcfbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d2b8a29f937c7b7879b939cb3c59ae0e61dcfbb/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2c659bed8f1cf50fbc9312b703753b3245e2d42", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c659bed8f1cf50fbc9312b703753b3245e2d42", "html_url": "https://github.com/rust-lang/rust/commit/e2c659bed8f1cf50fbc9312b703753b3245e2d42"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "96e5ab645c4c6ddfd845e08ce8ccfecf2dbe5dde", "filename": "RELEASES.md", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3d2b8a29f937c7b7879b939cb3c59ae0e61dcfbb/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d2b8a29f937c7b7879b939cb3c59ae0e61dcfbb/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=3d2b8a29f937c7b7879b939cb3c59ae0e61dcfbb", "patch": "@@ -4,20 +4,20 @@ Version 1.58.0 (2022-01-13)\n Language\n --------\n \n-- [Format strings can now capture arguments simply by writing `{ident}` in the string.][90473]\n+- [Format strings can now capture arguments simply by writing `{ident}` in the string.][90473] This works in all macros accepting format strings. Support for this in `panic!` (`panic!(\"{ident}\")`) requires the 2021 edition; panic invocations in previous editions that appear to be trying to use this will result in a warning lint about not having the intended effect.\n - [`*const T` pointers can now be dereferenced in const contexts.][89551]\n - [The rules for when a generic struct implements `Unsize` have been relaxed.][90417]\n \n Compiler\n --------\n \n - [Add LLVM CFI support to the Rust compiler][89652]\n-- [Stabilize -Z strip as -C strip][90058]\n+- [Stabilize -Z strip as -C strip][90058]. Note that while release builds already don't add debug symbols for the code you compile, the compiled standard library that ships with Rust includes debug symbols, so you may want to use the `strip` option to remove these symbols to produce smaller release binaries.\n - [Add support for LLVM coverage mapping format versions 5 and 6][91207]\n - [Emit LLVM optimization remarks when enabled with `-Cremark`][90833]\n - [Update the minimum external LLVM to 12][90175]\n - [Add `x86_64-unknown-none` at Tier 3*][89062]\n-- [Build musl dist artifacts with debuginfo enabled][90733]\n+- [Build musl dist artifacts with debuginfo enabled][90733]. When building release binaries using musl, you may want to use the newly stabilized strip option to remove these debug symbols, reducing the size of your binaries.\n - [Don't abort compilation after giving a lint error][87337]\n - [Error messages point at the source of trait bound obligations in more places][89580]\n \n@@ -27,21 +27,12 @@ Compiler\n Libraries\n ---------\n \n-- [Add #[must_use] to Rc::downgrade][89833]\n-- [Add #[must_use] to expensive computations][89835]\n-- [Add #[must_use] to mem/ptr functions][89839]\n-- [Add #[must_use] to remaining core functions][89897]\n-- [Add #[must_use] to remaining alloc functions][89899]\n-- [Add #[must_use] to len and is_empty][89786]\n-- [Add #[must_use] to thread::Builder][89789]\n-- [Add #[must_use] to alloc functions that would leak memory][90427]\n-- [Add #[must_use] to remaining std functions (A-N)][90430]\n-- [Add #[must_use] to remaining std functions (O-Z)][90431]\n+- [All remaining functions in the standard library have `#[must_use]` annotations where appropriate][89692], producing a warning when ignoring their return value. This helps catch mistakes such as expecting a function to mutate a value in place rather than return a new value.\n - [Paths are automatically canonicalized on Windows for operations that support it][89174]\n-- [Re-enable `copy[_nonoverlapping]()` debug-checks][90041]\n+- [Re-enable debug checks for `copy` and `copy_nonoverlapping`][90041]\n - [Implement `RefUnwindSafe` for `Rc<T>`][87467]\n - [Make RSplit<T, P>: Clone not require T: Clone][90117]\n-- [Implement `Termination` for `Result<Infallible, E>`][88601]\n+- [Implement `Termination` for `Result<Infallible, E>`][88601]. This allows writing `fn main() -> Result<Infallible, ErrorType>`, for a program whose successful exits never involve returning from `main` (for instance, a program that calls `exit`, or that uses `exec` to run another program).\n \n Stabilized APIs\n ---------------\n@@ -95,7 +86,7 @@ Compatibility Notes\n - Windows: [`std::process::Command` will no longer search the current directory for executables.][87704]\n - [All proc-macro backward-compatibility lints are now deny-by-default.][88041]\n - [proc_macro: Append .0 to unsuffixed float if it would otherwise become int token][90297]\n-- [Refactor weak symbols in std::sys::unix][90846]\n+- [Refactor weak symbols in std::sys::unix][90846]. This optimizes accesses to glibc functions, by avoiding the use of dlopen. This does not increase the [minimum expected version of glibc](https://doc.rust-lang.org/nightly/rustc/platform-support.html). However, software distributions that use symbol versions to detect library dependencies, and which take weak symbols into account in that analysis, may detect rust binaries as requiring newer versions of glibc.\n - [rustdoc now rejects some unexpected semicolons in doctests][91026]\n \n Internal Changes\n@@ -105,11 +96,11 @@ These changes provide no direct user facing benefits, but represent significant\n improvements to the internals and overall performance of rustc\n and related tools.\n \n-- [Try all stable method candidates first before trying unstable ones][90329]\n+- [Try all stable method candidates first before trying unstable ones][90329]. This change ensures that adding new nightly-only methods to the Rust standard library will not break code invoking methods of the same name from traits outside the standard library.\n - [Implement coherence checks for negative trait impls][90104]\n - [Add rustc lint, warning when iterating over hashmaps][89558]\n - [Optimize live point computation][90491]\n-- [Enable verification for 1/32th of queries loaded from disk][90361]\n+- [Enable verification for 1/32nd of queries loaded from disk][90361]\n - [Implement version of normalize_erasing_regions that allows for normalization failure][91255]\n \n [87337]: https://github.com/rust-lang/rust/pull/87337/"}]}