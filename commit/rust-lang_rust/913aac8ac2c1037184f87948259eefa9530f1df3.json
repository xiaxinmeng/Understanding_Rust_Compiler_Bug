{"sha": "913aac8ac2c1037184f87948259eefa9530f1df3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxM2FhYzhhYzJjMTAzNzE4NGY4Nzk0ODI1OWVlZmE5NTMwZjFkZjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-20T14:39:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T14:39:49Z"}, "message": "Rollup merge of #73058 - tmiasko:aarch64-san, r=nagisa\n\nSupport sanitizers on aarch64-unknown-linux-gnu", "tree": {"sha": "c4bc9cb287e386b189a3b5a49b9858c365039e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4bc9cb287e386b189a3b5a49b9858c365039e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/913aac8ac2c1037184f87948259eefa9530f1df3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7h+1CRBK7hj4Ov3rIwAAdHIIAB1Se47tF3145jbbbw2Zd1Qc\nFTysq98eKti0/1J0L0lgFSfmiig6PvX0bXxc0UzaKPoSJLMKqq1u2CDAfVTkpw/k\ngX60/oW9BrpcrtO+BOZ9UxlLblUDxzCxA2TDcsWkfF/QVsfF/mPF455rQ9rQA1PT\nYH36oWVLG2M4nB9Vx7vmSIV1FKctAER19Bjc5fdQdv6Y8xAJp+xb2zy3mDdNpOHc\nq6s4EjlPGmLUVUcgPXTzHZ1lSdiMlJQfD//HEpfz8mdDG1MNrU+eXUnIaTx/X3eJ\nQb8MGFDQf/39JH05aYAfz9OJXZ66rTvTsZwKr1e2HU0VYIPs8VNIfQLoPk3dXXY=\n=LxcN\n-----END PGP SIGNATURE-----\n", "payload": "tree c4bc9cb287e386b189a3b5a49b9858c365039e4c\nparent b015b28359c7c94ef756b48d9046282153af9288\nparent 66e7a145e82ccc230f4201e8cdc4f4bce379f629\nauthor Ralf Jung <post@ralfj.de> 1592663989 +0200\ncommitter GitHub <noreply@github.com> 1592663989 +0200\n\nRollup merge of #73058 - tmiasko:aarch64-san, r=nagisa\n\nSupport sanitizers on aarch64-unknown-linux-gnu\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/913aac8ac2c1037184f87948259eefa9530f1df3", "html_url": "https://github.com/rust-lang/rust/commit/913aac8ac2c1037184f87948259eefa9530f1df3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/913aac8ac2c1037184f87948259eefa9530f1df3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b015b28359c7c94ef756b48d9046282153af9288", "url": "https://api.github.com/repos/rust-lang/rust/commits/b015b28359c7c94ef756b48d9046282153af9288", "html_url": "https://github.com/rust-lang/rust/commit/b015b28359c7c94ef756b48d9046282153af9288"}, {"sha": "66e7a145e82ccc230f4201e8cdc4f4bce379f629", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e7a145e82ccc230f4201e8cdc4f4bce379f629", "html_url": "https://github.com/rust-lang/rust/commit/66e7a145e82ccc230f4201e8cdc4f4bce379f629"}], "stats": {"total": 109, "additions": 60, "deletions": 49}, "files": [{"sha": "0a14957384d28a012b55d4aa70f34c8fe8d86ec6", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 30, "deletions": 37, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=913aac8ac2c1037184f87948259eefa9530f1df3", "patch": "@@ -689,48 +689,41 @@ fn supported_sanitizers(\n     target: Interned<String>,\n     channel: &str,\n ) -> Vec<SanitizerRuntime> {\n-    let mut result = Vec::new();\n+    let darwin_libs = |os: &str, components: &[&str]| -> Vec<SanitizerRuntime> {\n+        components\n+            .into_iter()\n+            .map(move |c| SanitizerRuntime {\n+                cmake_target: format!(\"clang_rt.{}_{}_dynamic\", c, os),\n+                path: out_dir\n+                    .join(&format!(\"build/lib/darwin/libclang_rt.{}_{}_dynamic.dylib\", c, os)),\n+                name: format!(\"librustc-{}_rt.{}.dylib\", channel, c),\n+            })\n+            .collect()\n+    };\n+\n+    let common_libs = |os: &str, arch: &str, components: &[&str]| -> Vec<SanitizerRuntime> {\n+        components\n+            .into_iter()\n+            .map(move |c| SanitizerRuntime {\n+                cmake_target: format!(\"clang_rt.{}-{}\", c, arch),\n+                path: out_dir.join(&format!(\"build/lib/{}/libclang_rt.{}-{}.a\", os, c, arch)),\n+                name: format!(\"librustc-{}_rt.{}.a\", channel, c),\n+            })\n+            .collect()\n+    };\n+\n     match &*target {\n-        \"x86_64-apple-darwin\" => {\n-            for s in &[\"asan\", \"lsan\", \"tsan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}_osx_dynamic\", s),\n-                    path: out_dir\n-                        .join(&format!(\"build/lib/darwin/libclang_rt.{}_osx_dynamic.dylib\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.dylib\", channel, s),\n-                });\n-            }\n+        \"aarch64-fuchsia\" => common_libs(\"fuchsia\", \"aarch64\", &[\"asan\"]),\n+        \"aarch64-unknown-linux-gnu\" => {\n+            common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n         }\n+        \"x86_64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n+        \"x86_64-fuchsia\" => common_libs(\"fuchsia\", \"x86_64\", &[\"asan\"]),\n         \"x86_64-unknown-linux-gnu\" => {\n-            for s in &[\"asan\", \"lsan\", \"msan\", \"tsan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}-x86_64\", s),\n-                    path: out_dir.join(&format!(\"build/lib/linux/libclang_rt.{}-x86_64.a\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n-                });\n-            }\n-        }\n-        \"x86_64-fuchsia\" => {\n-            for s in &[\"asan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}-x86_64\", s),\n-                    path: out_dir.join(&format!(\"build/lib/fuchsia/libclang_rt.{}-x86_64.a\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n-                });\n-            }\n-        }\n-        \"aarch64-fuchsia\" => {\n-            for s in &[\"asan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}-aarch64\", s),\n-                    path: out_dir.join(&format!(\"build/lib/fuchsia/libclang_rt.{}-aarch64.a\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n-                });\n-            }\n+            common_libs(\"linux\", \"x86_64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n         }\n-        _ => {}\n+        _ => Vec::new(),\n     }\n-    result\n }\n \n struct HashStamp {"}, {"sha": "fd764965ef21b1d85e50c9d3008b75219e5ad866", "filename": "src/ci/docker/dist-aarch64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile?ref=913aac8ac2c1037184f87948259eefa9530f1df3", "patch": "@@ -35,5 +35,6 @@ ENV HOSTS=aarch64-unknown-linux-gnu\n ENV RUST_CONFIGURE_ARGS \\\n       --enable-full-tools \\\n       --enable-profiler \\\n+      --enable-sanitizers \\\n       --disable-docs\n ENV SCRIPT python3 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "6c995be913c9e94c5528eef7a4bd6d91f75d392b", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=913aac8ac2c1037184f87948259eefa9530f1df3", "patch": "@@ -804,7 +804,10 @@ fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {\n             linker.args(&[\"-Wl,-rpath\", \"-Xlinker\", rpath]);\n             linker.link_dylib(Symbol::intern(&libname));\n         }\n-        \"x86_64-unknown-linux-gnu\" | \"x86_64-fuchsia\" | \"aarch64-fuchsia\" => {\n+        \"aarch64-fuchsia\"\n+        | \"aarch64-unknown-linux-gnu\"\n+        | \"x86_64-fuchsia\"\n+        | \"x86_64-unknown-linux-gnu\" => {\n             let filename = format!(\"librustc{}_rt.{}.a\", channel, name);\n             let path = default_tlib.join(&filename);\n             linker.link_whole_rlib(&path);"}, {"sha": "2ea312c42dc646757fe81c93cbfcba17409d68f2", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=913aac8ac2c1037184f87948259eefa9530f1df3", "patch": "@@ -1349,11 +1349,19 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         );\n     }\n \n-    const ASAN_SUPPORTED_TARGETS: &[&str] =\n-        &[\"aarch64-fuchsia\", \"x86_64-apple-darwin\", \"x86_64-fuchsia\", \"x86_64-unknown-linux-gnu\"];\n-    const LSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n-    const MSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n-    const TSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+    const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n+        \"aarch64-fuchsia\",\n+        \"aarch64-unknown-linux-gnu\",\n+        \"x86_64-apple-darwin\",\n+        \"x86_64-fuchsia\",\n+        \"x86_64-unknown-linux-gnu\",\n+    ];\n+    const LSAN_SUPPORTED_TARGETS: &[&str] =\n+        &[\"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+    const MSAN_SUPPORTED_TARGETS: &[&str] =\n+        &[\"aarch64-unknown-linux-gnu\", \"x86_64-unknown-linux-gnu\"];\n+    const TSAN_SUPPORTED_TARGETS: &[&str] =\n+        &[\"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n \n     // Sanitizers can only be used on some tested platforms.\n     for s in sess.opts.debugging_opts.sanitizer {"}, {"sha": "f5961a11b1f1c4a741e4cff730f20ab3cbd152b5", "filename": "src/test/ui/sanitize/unsupported-target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Funsupported-target.stderr?ref=913aac8ac2c1037184f87948259eefa9530f1df3", "patch": "@@ -1,4 +1,4 @@\n-error: `-Zsanitizer=leak` only works with targets: x86_64-apple-darwin, x86_64-unknown-linux-gnu\n+error: `-Zsanitizer=leak` only works with targets: aarch64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-unknown-linux-gnu\n \n error: aborting due to previous error\n "}, {"sha": "0437ff8c9440a3cbfe8b59134c1491125584fe4e", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913aac8ac2c1037184f87948259eefa9530f1df3/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=913aac8ac2c1037184f87948259eefa9530f1df3", "patch": "@@ -82,16 +82,22 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"xcore\", \"xcore\"),\n ];\n \n-pub const ASAN_SUPPORTED_TARGETS: &'static [&'static str] =\n-    &[\"aarch64-fuchsia\", \"x86_64-apple-darwin\", \"x86_64-fuchsia\", \"x86_64-unknown-linux-gnu\"];\n+pub const ASAN_SUPPORTED_TARGETS: &'static [&'static str] = &[\n+    \"aarch64-fuchsia\",\n+    \"aarch64-unknown-linux-gnu\",\n+    \"x86_64-apple-darwin\",\n+    \"x86_64-fuchsia\",\n+    \"x86_64-unknown-linux-gnu\",\n+];\n \n pub const LSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n-    &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+    &[\"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n \n-pub const MSAN_SUPPORTED_TARGETS: &'static [&'static str] = &[\"x86_64-unknown-linux-gnu\"];\n+pub const MSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n+    &[\"aarch64-unknown-linux-gnu\", \"x86_64-unknown-linux-gnu\"];\n \n pub const TSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n-    &[\"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n+    &[\"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n \n pub fn matches_os(triple: &str, name: &str) -> bool {\n     // For the wasm32 bare target we ignore anything also ignored on emscripten"}]}