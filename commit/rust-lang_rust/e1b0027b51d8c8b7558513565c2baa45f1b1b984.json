{"sha": "e1b0027b51d8c8b7558513565c2baa45f1b1b984", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYjAwMjdiNTFkOGM4Yjc1NTg1MTM1NjVjMmJhYTQ1ZjFiMWI5ODQ=", "commit": {"author": {"name": "Nathan Stocks", "email": "nathan.stocks@gmail.com", "date": "2017-03-31T02:49:06Z"}, "committer": {"name": "Nathan Stocks", "email": "nathan.stocks@gmail.com", "date": "2017-03-31T02:49:06Z"}, "message": "Refer to a subcommand as a subcommand.\n\nFor some reason 'command' and 'subcommand' were intermixed to mean the same thing.  Lets just call it the one thing that it is.", "tree": {"sha": "d9d89a7b1be2adbc7fb2a6313145282b3369b254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9d89a7b1be2adbc7fb2a6313145282b3369b254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1b0027b51d8c8b7558513565c2baa45f1b1b984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b0027b51d8c8b7558513565c2baa45f1b1b984", "html_url": "https://github.com/rust-lang/rust/commit/e1b0027b51d8c8b7558513565c2baa45f1b1b984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1b0027b51d8c8b7558513565c2baa45f1b1b984/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "5c94997b6b1cca3e65ecfc5ba40c033d6838019b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c94997b6b1cca3e65ecfc5ba40c033d6838019b", "html_url": "https://github.com/rust-lang/rust/commit/5c94997b6b1cca3e65ecfc5ba40c033d6838019b"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "ea0fc97e22a7b373471b282e0380f38008c45fe7", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e1b0027b51d8c8b7558513565c2baa45f1b1b984/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b0027b51d8c8b7558513565c2baa45f1b1b984/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=e1b0027b51d8c8b7558513565c2baa45f1b1b984", "patch": "@@ -90,12 +90,11 @@ impl Flags {\n         opts.optflag(\"h\", \"help\", \"print this help message\");\n \n         let usage = |n, opts: &Options| -> ! {\n-            let command = args.get(0).map(|s| &**s);\n-            let brief = format!(\"Usage: x.py {} [options] [<args>...]\",\n-                                command.unwrap_or(\"<command>\"));\n+            let subcommand = args.get(0).map(|s| &**s);\n+            let brief = format!(\"Usage: x.py <subcommand> [options] [<args>...]\");\n \n             println!(\"{}\", opts.usage(&brief));\n-            match command {\n+            match subcommand {\n                 Some(\"build\") => {\n                     println!(\"\\\n Arguments:\n@@ -156,24 +155,24 @@ Arguments:\n                 _ => {}\n             }\n \n-            if let Some(command) = command {\n-                if command == \"build\" ||\n-                   command == \"dist\" ||\n-                   command == \"doc\" ||\n-                   command == \"test\" ||\n-                   command == \"bench\" ||\n-                   command == \"clean\"  {\n+            if let Some(subcommand) = subcommand {\n+                if subcommand == \"build\" ||\n+                   subcommand == \"dist\" ||\n+                   subcommand == \"doc\" ||\n+                   subcommand == \"test\" ||\n+                   subcommand == \"bench\" ||\n+                   subcommand == \"clean\"  {\n                     println!(\"Available invocations:\");\n                     if args.iter().any(|a| a == \"-v\") {\n                         let flags = Flags::parse(&[\"build\".to_string()]);\n                         let mut config = Config::default();\n                         config.build = flags.build.clone();\n                         let mut build = Build::new(flags, config);\n                         metadata::build(&mut build);\n-                        step::build_rules(&build).print_help(command);\n+                        step::build_rules(&build).print_help(subcommand);\n                     } else {\n                         println!(\"    ... elided, run `./x.py {} -h -v` to see\",\n-                                 command);\n+                                 subcommand);\n                     }\n \n                     println!(\"\");\n@@ -189,13 +188,13 @@ Subcommands:\n     clean       Clean out build directories\n     dist        Build and/or install distribution artifacts\n \n-To learn more about a subcommand, run `./x.py <command> -h`\n+To learn more about a subcommand, run `./x.py <subcommand> -h`\n \");\n \n             process::exit(n);\n         };\n         if args.len() == 0 {\n-            println!(\"a command must be passed\");\n+            println!(\"a subcommand must be passed\");\n             usage(1, &opts);\n         }\n         let parse = |opts: &Options| {\n@@ -258,7 +257,7 @@ To learn more about a subcommand, run `./x.py <command> -h`\n             }\n             \"--help\" => usage(0, &opts),\n             cmd => {\n-                println!(\"unknown command: {}\", cmd);\n+                println!(\"unknown subcommand: {}\", cmd);\n                 usage(1, &opts);\n             }\n         };"}]}