{"sha": "204c12c99ea1d3266bf067700351e8e6468a35d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNGMxMmM5OWVhMWQzMjY2YmYwNjc3MDAzNTFlOGU2NDY4YTM1ZDI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-01T14:15:39Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-08T15:43:40Z"}, "message": "Lint unused labels", "tree": {"sha": "7d939ac6d2c13b970eb8f66acf9ec31d7b4063c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d939ac6d2c13b970eb8f66acf9ec31d7b4063c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/204c12c99ea1d3266bf067700351e8e6468a35d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/204c12c99ea1d3266bf067700351e8e6468a35d2", "html_url": "https://github.com/rust-lang/rust/commit/204c12c99ea1d3266bf067700351e8e6468a35d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/204c12c99ea1d3266bf067700351e8e6468a35d2/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac", "html_url": "https://github.com/rust-lang/rust/commit/08b7931b6b7e7022c2c7d08dc950a8dd93bf70ac"}], "stats": {"total": 119, "additions": 118, "deletions": 1}, "files": [{"sha": "3b0a4f8820c896a44481060f0bcfc8c62d7e217e", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/204c12c99ea1d3266bf067700351e8e6468a35d2/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/204c12c99ea1d3266bf067700351e8e6468a35d2/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=204c12c99ea1d3266bf067700351e8e6468a35d2", "patch": "@@ -8,7 +8,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 131 lints included in this crate:\n+There are 132 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -131,6 +131,7 @@ name\n [unstable_as_mut_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_mut_slice)                       | warn    | as_mut_slice is not stable and can be replaced by &mut v[..]see https://github.com/rust-lang/rust/issues/27729\n [unstable_as_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_slice)                               | warn    | as_slice is not stable and can be replaced by & v[..]see https://github.com/rust-lang/rust/issues/27729\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                                     | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n+[unused_label](https://github.com/Manishearth/rust-clippy/wiki#unused_label)                                         | warn    | unused label\n [unused_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes)                                 | warn    | unused lifetimes in function definitions\n [use_debug](https://github.com/Manishearth/rust-clippy/wiki#use_debug)                                               | allow   | use `Debug`-based formatting\n [used_underscore_binding](https://github.com/Manishearth/rust-clippy/wiki#used_underscore_binding)                   | warn    | using a binding which is prefixed with an underscore"}, {"sha": "bb9d9b620abae781b507c30087fd477155d92829", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/204c12c99ea1d3266bf067700351e8e6468a35d2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204c12c99ea1d3266bf067700351e8e6468a35d2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=204c12c99ea1d3266bf067700351e8e6468a35d2", "patch": "@@ -94,6 +94,7 @@ pub mod temporary_assignment;\n pub mod transmute;\n pub mod types;\n pub mod unicode;\n+pub mod unused_label;\n pub mod vec;\n pub mod zero_div_zero;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n@@ -175,6 +176,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box swap::Swap);\n     reg.register_early_lint_pass(box if_not_else::IfNotElse);\n     reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n+    reg.register_late_lint_pass(box unused_label::UnusedLabel);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         enum_glob_use::ENUM_GLOB_USE,\n@@ -309,6 +311,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         types::TYPE_COMPLEXITY,\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n+        unused_label::UNUSED_LABEL,\n         vec::USELESS_VEC,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);"}, {"sha": "f2ecad7cc821344bbd36c549503f19c2d30227ad", "filename": "src/unused_label.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/204c12c99ea1d3266bf067700351e8e6468a35d2/src%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204c12c99ea1d3266bf067700351e8e6468a35d2/src%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funused_label.rs?ref=204c12c99ea1d3266bf067700351e8e6468a35d2", "patch": "@@ -0,0 +1,78 @@\n+use rustc::lint::*;\n+use rustc_front::hir;\n+use rustc_front::intravisit::{FnKind, Visitor, walk_expr, walk_fn};\n+use std::collections::HashMap;\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use syntax::parse::token::InternedString;\n+use utils::{in_macro, span_lint};\n+\n+/// **What it does:** This lint checks for unused labels.\n+///\n+/// **Why is this bad?** Maybe the label should be used in which case there is an error in the\n+/// code or it should be removed.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// fn unused_label() {\n+///     'label: for i in 1..2 {\n+///         if i > 4 { continue }\n+///     }\n+/// ```\n+declare_lint! {\n+    pub UNUSED_LABEL,\n+    Warn,\n+    \"unused label\"\n+}\n+\n+pub struct UnusedLabel;\n+\n+#[derive(Default)]\n+struct UnusedLabelVisitor {\n+    labels: HashMap<InternedString, Span>,\n+}\n+\n+impl UnusedLabelVisitor {\n+    pub fn new() -> UnusedLabelVisitor {\n+        ::std::default::Default::default()\n+    }\n+}\n+\n+impl LintPass for UnusedLabel {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNUSED_LABEL)\n+    }\n+}\n+\n+impl LateLintPass for UnusedLabel {\n+    fn check_fn(&mut self, cx: &LateContext, kind: FnKind, decl: &hir::FnDecl, body: &hir::Block, span: Span, _: ast::NodeId) {\n+        if in_macro(cx, span) {\n+            return;\n+        }\n+\n+        let mut v = UnusedLabelVisitor::new();\n+        walk_fn(&mut v, kind, decl, body, span);\n+\n+        for (label, span) in v.labels {\n+            span_lint(cx, UNUSED_LABEL, span, &format!(\"unused label `{}`\", label));\n+        }\n+    }\n+}\n+\n+impl<'v> Visitor<'v> for UnusedLabelVisitor {\n+    fn visit_expr(&mut self, expr: &hir::Expr) {\n+        match expr.node {\n+            hir::ExprBreak(Some(label)) | hir::ExprAgain(Some(label)) => {\n+                self.labels.remove(&label.node.name.as_str());\n+            }\n+            hir::ExprLoop(_, Some(label)) | hir::ExprWhile(_, _, Some(label)) => {\n+                self.labels.insert(label.name.as_str(), expr.span);\n+            }\n+            _ => (),\n+        }\n+\n+        walk_expr(self, expr);\n+    }\n+}"}, {"sha": "26b4d4a2f3b28bd506bfd8ab026eded811a05d51", "filename": "tests/compile-fail/unused_labels.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/204c12c99ea1d3266bf067700351e8e6468a35d2/tests%2Fcompile-fail%2Funused_labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204c12c99ea1d3266bf067700351e8e6468a35d2/tests%2Fcompile-fail%2Funused_labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funused_labels.rs?ref=204c12c99ea1d3266bf067700351e8e6468a35d2", "patch": "@@ -0,0 +1,35 @@\n+#![plugin(clippy)]\n+#![feature(plugin)]\n+\n+#![allow(dead_code, items_after_statements)]\n+#![deny(unused_label)]\n+\n+fn unused_label() {\n+    'label: for i in 1..2 { //~ERROR: unused label `'label`\n+        if i > 4 { continue }\n+    }\n+}\n+\n+fn foo() {\n+    'same_label_in_two_fns: loop {\n+        break 'same_label_in_two_fns;\n+    }\n+}\n+\n+\n+fn bla() {\n+    'a: loop { break } //~ERROR: unused label `'a`\n+    fn blub() {}\n+}\n+\n+fn main() {\n+    'a: for _ in 0..10 {\n+        while let Some(42) = None {\n+            continue 'a;\n+        }\n+    }\n+\n+    'same_label_in_two_fns: loop { //~ERROR: unused label `'same_label_in_two_fns`\n+        let _ = 1;\n+    }\n+}"}]}