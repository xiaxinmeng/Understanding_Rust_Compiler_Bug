{"sha": "6cbf07959692c662126d0971f767ba14fd175ce5", "node_id": "C_kwDOAAsO6NoAKDZjYmYwNzk1OTY5MmM2NjIxMjZkMDk3MWY3NjdiYTE0ZmQxNzVjZTU", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-10-02T05:48:50Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-10-27T17:16:15Z"}, "message": "Use an exhaustive match in `target_host_combination`.\n\nThis avoids bugs where components are added to one part of the manifest but not another.", "tree": {"sha": "fe74a39cd1aa03fb781b36d801fa6e98b0c0b528", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe74a39cd1aa03fb781b36d801fa6e98b0c0b528"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cbf07959692c662126d0971f767ba14fd175ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbf07959692c662126d0971f767ba14fd175ce5", "html_url": "https://github.com/rust-lang/rust/commit/6cbf07959692c662126d0971f767ba14fd175ce5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cbf07959692c662126d0971f767ba14fd175ce5/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3dd94e702f2d640f5f84f9f43f25fd79dfeae95", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3dd94e702f2d640f5f84f9f43f25fd79dfeae95", "html_url": "https://github.com/rust-lang/rust/commit/a3dd94e702f2d640f5f84f9f43f25fd79dfeae95"}], "stats": {"total": 86, "additions": 49, "deletions": 37}, "files": [{"sha": "efe4412726a9a3df2ad7fa10b408a5959dc932a8", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 48, "deletions": 35, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/6cbf07959692c662126d0971f767ba14fd175ce5/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbf07959692c662126d0971f767ba14fd175ce5/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=6cbf07959692c662126d0971f767ba14fd175ce5", "patch": "@@ -401,42 +401,55 @@ impl Builder {\n         let mut components = Vec::new();\n         let mut extensions = Vec::new();\n \n-        let host_component = |pkg| Component::from_str(pkg, host);\n-\n-        // rustc/rust-std/cargo/docs are all required,\n-        // and so is rust-mingw if it's available for the target.\n-        components.extend(vec![\n-            host_component(\"rustc\"),\n-            host_component(\"rust-std\"),\n-            host_component(\"cargo\"),\n-            host_component(\"rust-docs\"),\n-        ]);\n-        if host.contains(\"pc-windows-gnu\") {\n-            components.push(host_component(\"rust-mingw\"));\n-        }\n+        let host_component = |pkg: &_| Component::from_str(pkg, host);\n \n-        // Tools are always present in the manifest,\n-        // but might be marked as unavailable if they weren't built.\n-        extensions.extend(vec![\n-            host_component(\"clippy-preview\"),\n-            host_component(\"miri-preview\"),\n-            host_component(\"rls-preview\"),\n-            host_component(\"rust-analyzer-preview\"),\n-            host_component(\"rustfmt-preview\"),\n-            host_component(\"llvm-tools-preview\"),\n-            host_component(\"rust-analysis\"),\n-            host_component(\"rust-docs-json-preview\"),\n-        ]);\n-\n-        extensions.extend(\n-            TARGETS\n-                .iter()\n-                .filter(|&&target| target != host)\n-                .map(|target| Component::from_str(\"rust-std\", target)),\n-        );\n-        extensions.extend(HOSTS.iter().map(|target| Component::from_str(\"rustc-dev\", target)));\n-        extensions.extend(HOSTS.iter().map(|target| Component::from_str(\"rustc-docs\", target)));\n-        extensions.push(Component::from_str(\"rust-src\", \"*\"));\n+        for pkg in PkgType::all() {\n+            match pkg {\n+                // rustc/rust-std/cargo/docs are all required\n+                PkgType::Rustc | PkgType::Cargo | PkgType::HtmlDocs => {\n+                    components.push(host_component(&pkg.manifest_component_name()));\n+                }\n+                PkgType::RustStd => {\n+                    components.push(host_component(&pkg.manifest_component_name()));\n+                    extensions.extend(\n+                        TARGETS.iter().filter(|&&target| target != host).map(|target| {\n+                            Component::from_str(&pkg.manifest_component_name(), target)\n+                        }),\n+                    );\n+                }\n+                // so is rust-mingw if it's available for the target\n+                PkgType::RustMingw => {\n+                    if host.contains(\"pc-windows-gnu\") {\n+                        components.push(host_component(\"rust-mingw\"));\n+                    }\n+                }\n+                // Tools are always present in the manifest,\n+                // but might be marked as unavailable if they weren't built.\n+                PkgType::Clippy\n+                | PkgType::Miri\n+                | PkgType::Rls\n+                | PkgType::RustAnalyzer\n+                | PkgType::Rustfmt\n+                | PkgType::LlvmTools\n+                | PkgType::RustAnalysis\n+                | PkgType::JsonDocs => {\n+                    extensions.push(host_component(&pkg.manifest_component_name()));\n+                }\n+                PkgType::RustcDev | PkgType::RustcDocs => {\n+                    extensions.extend(\n+                        HOSTS.iter().map(|target| {\n+                            Component::from_str(&pkg.manifest_component_name(), target)\n+                        }),\n+                    );\n+                }\n+                PkgType::RustSrc => {\n+                    extensions.push(Component::from_str(&pkg.manifest_component_name(), \"*\"));\n+                }\n+                PkgType::Rust | PkgType::Other(_) => {}\n+                // FIXME: is this correct? maybe we should add it so rustup knows about it ...\n+                PkgType::ReproducibleArtifacts => {}\n+            }\n+        }\n \n         // If the components/extensions don't actually exist for this\n         // particular host/target combination then nix it entirely from our"}, {"sha": "cea34905db6aae7862691882b8bd4c134dad86c0", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cbf07959692c662126d0971f767ba14fd175ce5/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbf07959692c662126d0971f767ba14fd175ce5/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=6cbf07959692c662126d0971f767ba14fd175ce5", "patch": "@@ -39,7 +39,6 @@ macro_rules! pkg_type {\n                 }\n             }\n \n-            /// Component name in the manifest. In particular, this includes the `-preview` suffix where appropriate.\n             pub(crate) fn all() -> &'static [PkgType] {\n                 &[ $(PkgType::$variant),+ ]\n             }\n@@ -69,7 +68,7 @@ pkg_type! {\n }\n \n impl PkgType {\n-    // / Component name in the manifest. In particular, this includes the `-preview` suffix where appropriate.\n+    /// Component name in the manifest. In particular, this includes the `-preview` suffix where appropriate.\n     pub(crate) fn manifest_component_name(&self) -> String {\n         if self.is_preview() {\n             format!(\"{}-preview\", self.tarball_component_name())"}]}