{"sha": "0f72f0009a309059952feb973a8e066845988f2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNzJmMDAwOWEzMDkwNTk5NTJmZWI5NzNhOGUwNjY4NDU5ODhmMmE=", "commit": {"author": {"name": "Oliver Schneider", "email": "public.oliver.schneider@kit.edu", "date": "2018-01-29T14:02:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:13Z"}, "message": "Remove redundant warnings in rustc_trans", "tree": {"sha": "bf8f968aca3e30250eef3493458043259e2eee2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf8f968aca3e30250eef3493458043259e2eee2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f72f0009a309059952feb973a8e066845988f2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53UACgkQpp+NIls6\n19kONRAAiaRUJ8+i5V4n2e+OZGZgsg77YExpEjp7IVCwUl4rV4HFktcHKj7c6l6z\nojdqEfwfVXuTT9v1oL1tob0HJ8qf1DYJz/OlOhUbZKVd9i3FofuV1bE9lAfqHAlf\nbTsm0m3OiNmjdkl+R+VwoqfBIFvgwfpHGIcXAshDQEmsavhwUol3B3vD2gTjzhQs\nbqLitclz/iMfjvAmRDS/T8tq1UnwibfsZHc3W3lOh2IRrA8F+oigp2RruKoP/XaI\nhduJW/Lt0re5/+stYtufVUsAzBTuqOB4WXY0yVH4TQmHmih/V5f+ds1ycMhwbRKq\nrvBKlnywBa0viG6UHjDpkT50aDjh9C4FJOfV3v4yJPHSrpxIF0o41dmPlab5b9Wk\nSiZTj7hHjCZo5NS5lm1VdFcbBvlJBBHkfz/l/3kNWVSCrTNSUw/8Ejl50HXQBX3A\n9SVNiUHth5KPuUUtOX2MRsJ6xz5IF/VqXcGx8LMiABEpfQL4lQarfnfIl1nlzjKK\nSZi5lDA1wNehnf76QWmZZPzAwfOmjTrAKNY1CIOqs8ix7/F/62zlIGP+prSS9227\nZ/wkAV+hj71bEJ3z0tWTXj4n0w4PuGpw8VmL3OpxRDYHLrtlenemU1F73VGtEia/\naDjql/bLW6g5W7yZ7/7JRHUPoFhWCGWwq5yht6uHbE321b8BCSo=\n=uUEW\n-----END PGP SIGNATURE-----", "payload": "tree bf8f968aca3e30250eef3493458043259e2eee2b\nparent c568807989774c8728ef10fad412418653f739c9\nauthor Oliver Schneider <public.oliver.schneider@kit.edu> 1517234521 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494453 +0100\n\nRemove redundant warnings in rustc_trans\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f72f0009a309059952feb973a8e066845988f2a", "html_url": "https://github.com/rust-lang/rust/commit/0f72f0009a309059952feb973a8e066845988f2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f72f0009a309059952feb973a8e066845988f2a/comments", "author": null, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c568807989774c8728ef10fad412418653f739c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c568807989774c8728ef10fad412418653f739c9", "html_url": "https://github.com/rust-lang/rust/commit/c568807989774c8728ef10fad412418653f739c9"}], "stats": {"total": 31, "additions": 4, "deletions": 27}, "files": [{"sha": "efb5338f680af1cc5d792bea56ae727ba6f9902e", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0f72f0009a309059952feb973a8e066845988f2a/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f72f0009a309059952feb973a8e066845988f2a/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=0f72f0009a309059952feb973a8e066845988f2a", "patch": "@@ -351,26 +351,18 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                     .max(tcx.data_layout.pointer_align);\n \n                 // Put together the arguments to the panic entry point.\n-                let (lang_item, args, const_err) = match *msg {\n+                let (lang_item, args) = match *msg {\n                     mir::AssertMessage::BoundsCheck { ref len, ref index } => {\n                         let len = self.trans_operand(&mut bx, len).immediate();\n                         let index = self.trans_operand(&mut bx, index).immediate();\n \n-                        let const_err = common::const_to_opt_u128(len, false)\n-                            .and_then(|len| common::const_to_opt_u128(index, false)\n-                                .map(|index| format!(\n-                                    \"index out of bounds: the len is {} but the index is {}\",\n-                                    len, index,\n-                                )));\n-\n                         let file_line_col = C_struct(bx.cx, &[filename, line, col], false);\n                         let file_line_col = consts::addr_of(bx.cx,\n                                                             file_line_col,\n                                                             align,\n                                                             \"panic_bounds_check_loc\");\n                         (lang_items::PanicBoundsCheckFnLangItem,\n-                         vec![file_line_col, index, len],\n-                         const_err)\n+                         vec![file_line_col, index, len])\n                     }\n                     mir::AssertMessage::Math(ref err) => {\n                         let msg_str = Symbol::intern(err.description()).as_str();\n@@ -383,8 +375,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                                                                 align,\n                                                                 \"panic_loc\");\n                         (lang_items::PanicFnLangItem,\n-                         vec![msg_file_line_col],\n-                         Some(err.description().to_owned()))\n+                         vec![msg_file_line_col])\n                     }\n                     mir::AssertMessage::GeneratorResumedAfterReturn |\n                     mir::AssertMessage::GeneratorResumedAfterPanic => {\n@@ -403,24 +394,10 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                                                                 align,\n                                                                 \"panic_loc\");\n                         (lang_items::PanicFnLangItem,\n-                         vec![msg_file_line_col],\n-                         None)\n+                         vec![msg_file_line_col])\n                     }\n                 };\n \n-                // If we know we always panic, and the error message\n-                // is also constant, then we can produce a warning.\n-                if const_cond == Some(!expected) {\n-                    if let Some(err) = const_err {\n-                        let mut diag = bx.tcx().sess.struct_span_warn(\n-                            span, &format!(\n-                                \"this expression will panic at run-time with {:?}\",\n-                                err,\n-                            ));\n-                        diag.emit();\n-                    }\n-                }\n-\n                 // Obtain the panic entry point.\n                 let def_id = common::langcall(bx.tcx(), Some(span), \"\", lang_item);\n                 let instance = ty::Instance::mono(bx.tcx(), def_id);"}]}