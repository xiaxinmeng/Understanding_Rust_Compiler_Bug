{"sha": "b3d2baff9485f3a6e54ab606c188c80fab76f13d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZDJiYWZmOTQ4NWYzYTZlNTRhYjYwNmMxODhjODBmYWI3NmYxM2Q=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-19T17:46:05Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:04Z"}, "message": "Give correct suggestions", "tree": {"sha": "6dec3eb3a735f662ddb4ce426e9e5a20a11a940d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dec3eb3a735f662ddb4ce426e9e5a20a11a940d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3d2baff9485f3a6e54ab606c188c80fab76f13d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d2baff9485f3a6e54ab606c188c80fab76f13d", "html_url": "https://github.com/rust-lang/rust/commit/b3d2baff9485f3a6e54ab606c188c80fab76f13d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3d2baff9485f3a6e54ab606c188c80fab76f13d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3357d99843fc803affb4f67ae0ac407afcb0872", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3357d99843fc803affb4f67ae0ac407afcb0872", "html_url": "https://github.com/rust-lang/rust/commit/e3357d99843fc803affb4f67ae0ac407afcb0872"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "4460587c614df0a8383f7ae372677cf3917b7104", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b3d2baff9485f3a6e54ab606c188c80fab76f13d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d2baff9485f3a6e54ab606c188c80fab76f13d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=b3d2baff9485f3a6e54ab606c188c80fab76f13d", "patch": "@@ -707,7 +707,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 let mut ranges: Vec<_> =\n                     ranges.into_iter().filter_map(|r| to_inc_range_pair(cx.tcx, &r)).collect();\n                 while let Some((lo2, hi2)) = ranges.pop() {\n-                    eprintln!(\"{:?} {:?}\", (lo2, hi2), (lo1, hi1));\n+                    // eprintln!(\"{:?} {:?}\", (lo2, hi2), (lo1, hi1));\n                     if lo1 <= lo2 && hi1 >= hi2 {\n                         if _deb { eprintln!(\"case 1\"); }\n                         ctor_was_useful = true;\n@@ -793,6 +793,17 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n             missing_ctors.extend(cur);\n         }\n \n+        // if _ranged {\n+        //     missing_ctors = missing_ctors.into_iter().map(|ctor| {\n+        //         match ctor {\n+        //             ConstantRange(lo, hi, RangeEnd::Included) if lo == hi => {\n+        //                 ConstantValue(lo)\n+        //             }\n+        //             _ => ctor,\n+        //         }\n+        //     }).collect();\n+        // }\n+\n         // let missing_ctors: Vec<Constructor> = all_ctors.iter().filter(|c| {\n         //     !used_ctors.contains(*c)\n         // }).cloned().collect();\n@@ -916,11 +927,33 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                         }).collect()\n                     } else {\n                         if _deb { eprintln!(\"ABC 5\"); }\n-                        pats.into_iter().flat_map(|witness| {\n-                            missing_ctors.iter().map(move |ctor| {\n-                                witness.clone().push_wild_constructor(cx, ctor, pcx.ty)\n-                            })\n-                        }).collect()\n+                        if _ranged {\n+                            missing_ctors.into_iter().map(|ctor| {\n+                                match ctor {\n+                                    ConstantRange(lo, hi, _) if lo == hi => {\n+                                        Witness(vec![Pattern {\n+                                            ty: pcx.ty,\n+                                            span: DUMMY_SP,\n+                                            kind: box PatternKind::Constant { value: lo },\n+                                        }])\n+                                    }\n+                                    ConstantRange(lo, hi, end) => {\n+                                        Witness(vec![Pattern {\n+                                            ty: pcx.ty,\n+                                            span: DUMMY_SP,\n+                                            kind: box PatternKind::Range { lo, hi, end },\n+                                        }])\n+                                    },\n+                                    _ => bug!(\"this shouldn't be happening\"),\n+                                }\n+                            }).collect()\n+                        } else {\n+                            pats.into_iter().flat_map(|witness| {\n+                                missing_ctors.iter().map(move |ctor| {\n+                                    witness.clone().push_wild_constructor(cx, ctor, pcx.ty)\n+                                })\n+                            }).collect()\n+                        }\n                     };\n                     UsefulWithWitness(new_witnesses)\n                 }"}]}