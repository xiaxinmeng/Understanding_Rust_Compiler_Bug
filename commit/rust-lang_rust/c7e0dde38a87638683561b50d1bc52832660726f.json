{"sha": "c7e0dde38a87638683561b50d1bc52832660726f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZTBkZGUzOGE4NzYzODY4MzU2MWI1MGQxYmM1MjgzMjY2MDcyNmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-09T12:14:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-09T12:14:45Z"}, "message": "Rustup to rustc 1.45.0-nightly (7ebd87a7a 2020-05-08)", "tree": {"sha": "39cb6635976ac74b1f18429d8712a8937738ec3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39cb6635976ac74b1f18429d8712a8937738ec3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7e0dde38a87638683561b50d1bc52832660726f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e0dde38a87638683561b50d1bc52832660726f", "html_url": "https://github.com/rust-lang/rust/commit/c7e0dde38a87638683561b50d1bc52832660726f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7e0dde38a87638683561b50d1bc52832660726f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27cc90effa886046754d15255303c6510b92df45", "url": "https://api.github.com/repos/rust-lang/rust/commits/27cc90effa886046754d15255303c6510b92df45", "html_url": "https://github.com/rust-lang/rust/commit/27cc90effa886046754d15255303c6510b92df45"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "e40c16e06f2c789ab85e481789a61d4d2d0a29cc", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7e0dde38a87638683561b50d1bc52832660726f/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/c7e0dde38a87638683561b50d1bc52832660726f/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=c7e0dde38a87638683561b50d1bc52832660726f", "patch": "@@ -1 +1 @@\n-nightly-2020-05-01\n+nightly-2020-05-09"}, {"sha": "91b4b51e84b5f39f89b3c0f9ab18fb5eea77a4b6", "filename": "src/driver/aot.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c7e0dde38a87638683561b50d1bc52832660726f/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e0dde38a87638683561b50d1bc52832660726f/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=c7e0dde38a87638683561b50d1bc52832660726f", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::dep_graph::{WorkProduct, WorkProductFileKind, WorkProductId};\n+use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::mir::mono::CodegenUnit;\n use rustc_session::config::{DebugInfo, OutputType};\n@@ -57,7 +57,7 @@ fn emit_module<B: Backend>(\n         rustc_incremental::copy_cgu_workproducts_to_incr_comp_cache_dir(\n             tcx.sess,\n             &name,\n-            &[(WorkProductFileKind::Object, tmp_file.clone())],\n+            &[tmp_file.clone()],\n         )\n     };\n \n@@ -80,17 +80,9 @@ fn reuse_workproduct_for_cgu(\n     let incr_comp_session_dir = tcx.sess.incr_comp_session_dir();\n     let mut object = None;\n     let work_product = cgu.work_product(tcx);\n-    for (kind, saved_file) in &work_product.saved_files {\n-        let obj_out = match kind {\n-            WorkProductFileKind::Object => {\n-                let path = tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n-                object = Some(path.clone());\n-                path\n-            }\n-            WorkProductFileKind::Bytecode => {\n-                panic!(\"cg_clif doesn't use bytecode\");\n-            }\n-        };\n+    for saved_file in &work_product.saved_files {\n+        let obj_out = tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n+        object = Some(obj_out.clone());\n         let source_file = rustc_incremental::in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n         if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n             tcx.sess.err(&format!(\n@@ -160,7 +152,7 @@ pub(super) fn run_aot(\n \n     if tcx.dep_graph.is_fully_enabled() {\n         for cgu in &*cgus {\n-            tcx.codegen_unit(cgu.name());\n+            tcx.ensure().codegen_unit(cgu.name());\n         }\n     }\n "}, {"sha": "4e3fbc3eaaa40c3fab949c0fa013a0a03ae551a7", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7e0dde38a87638683561b50d1bc52832660726f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e0dde38a87638683561b50d1bc52832660726f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c7e0dde38a87638683561b50d1bc52832660726f", "patch": "@@ -178,18 +178,14 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             if tcx.sess.opts.actually_rustdoc {\n                 // rustdoc needs to be able to document functions that use all the features, so\n                 // whitelist them all\n-                tcx.arena.alloc(\n-                    target_features_whitelist::all_known_features()\n-                        .map(|(a, b)| (a.to_string(), b))\n-                        .collect(),\n-                )\n+                target_features_whitelist::all_known_features()\n+                    .map(|(a, b)| (a.to_string(), b))\n+                    .collect()\n             } else {\n-                tcx.arena.alloc(\n-                    target_features_whitelist::target_feature_whitelist(tcx.sess)\n-                        .iter()\n-                        .map(|&(a, b)| (a.to_string(), b))\n-                        .collect(),\n-                )\n+                target_features_whitelist::target_feature_whitelist(tcx.sess)\n+                    .iter()\n+                    .map(|&(a, b)| (a.to_string(), b))\n+                    .collect()\n             }\n         };\n     }"}]}