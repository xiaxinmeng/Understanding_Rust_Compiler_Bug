{"sha": "97e3a2401e4b2f659d69ed0c0822cae04e3495b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZTNhMjQwMWU0YjJmNjU5ZDY5ZWQwYzA4MjJjYWUwNGUzNDk1Yjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-26T18:28:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-26T18:28:45Z"}, "message": "Auto merge of #33783 - michaelwoerister:collector-cleanup-2, r=nikomatsakis\n\ntrans::collector: Remove some redundant calls to erase_regions().\n\nr? @Aatch", "tree": {"sha": "83f3d94dc80564952eec9a44d64ebb9c77880d87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83f3d94dc80564952eec9a44d64ebb9c77880d87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97e3a2401e4b2f659d69ed0c0822cae04e3495b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97e3a2401e4b2f659d69ed0c0822cae04e3495b7", "html_url": "https://github.com/rust-lang/rust/commit/97e3a2401e4b2f659d69ed0c0822cae04e3495b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97e3a2401e4b2f659d69ed0c0822cae04e3495b7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc91467db05ba6ee2a2a72c440e8c48008abb7a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc91467db05ba6ee2a2a72c440e8c48008abb7a3", "html_url": "https://github.com/rust-lang/rust/commit/dc91467db05ba6ee2a2a72c440e8c48008abb7a3"}, {"sha": "4386d19185a1059ba89bcd9eb186cbc32f5b477f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4386d19185a1059ba89bcd9eb186cbc32f5b477f", "html_url": "https://github.com/rust-lang/rust/commit/4386d19185a1059ba89bcd9eb186cbc32f5b477f"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "f76f4c01df344f0fdcf1d32d4a24f51c327ca3da", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97e3a2401e4b2f659d69ed0c0822cae04e3495b7/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e3a2401e4b2f659d69ed0c0822cae04e3495b7/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=97e3a2401e4b2f659d69ed0c0822cae04e3495b7", "patch": "@@ -99,6 +99,16 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n                             TypeFlags::HAS_RE_INFER |\n                             TypeFlags::HAS_FREE_REGIONS)\n     }\n+    fn is_normalized_for_trans(&self) -> bool {\n+        !self.has_type_flags(TypeFlags::HAS_RE_EARLY_BOUND |\n+                             TypeFlags::HAS_RE_INFER |\n+                             TypeFlags::HAS_FREE_REGIONS |\n+                             TypeFlags::HAS_TY_INFER |\n+                             TypeFlags::HAS_PARAMS |\n+                             TypeFlags::HAS_PROJECTION |\n+                             TypeFlags::HAS_TY_ERR |\n+                             TypeFlags::HAS_SELF)\n+    }\n     /// Indicates whether this value references only 'global'\n     /// types/lifetimes that are the same regardless of what fn we are\n     /// in. This is used for caching. Errs on the side of returning"}, {"sha": "bbc01f0935f2bd884fca38e7b21dc6ea3484e802", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97e3a2401e4b2f659d69ed0c0822cae04e3495b7/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e3a2401e4b2f659d69ed0c0822cae04e3495b7/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=97e3a2401e4b2f659d69ed0c0822cae04e3495b7", "patch": "@@ -523,7 +523,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             let ty = monomorphize::apply_param_substs(self.scx.tcx(),\n                                                       self.param_substs,\n                                                       &ty);\n-            let ty = self.scx.tcx().erase_regions(&ty);\n+            assert!(ty.is_normalized_for_trans());\n             let ty = glue::get_drop_glue_type(self.scx.tcx(), ty);\n             self.output.push(TransItem::DropGlue(DropGlueKind::Ty(ty)));\n         }\n@@ -859,6 +859,7 @@ fn do_static_trait_method_dispatch<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                                                        &callee_substs);\n \n     let trait_ref = ty::Binder(rcvr_substs.to_trait_ref(tcx, trait_id));\n+    let trait_ref = tcx.normalize_associated_type(&trait_ref);\n     let vtbl = fulfill_obligation(scx, DUMMY_SP, trait_ref);\n \n     // Now that we know which impl is being used, we can dispatch to\n@@ -992,11 +993,8 @@ fn create_fn_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let concrete_substs = monomorphize::apply_param_substs(tcx,\n                                                            param_substs,\n                                                            &fn_substs);\n-    let concrete_substs = tcx.erase_regions(&concrete_substs);\n-\n-    let trans_item =\n-        TransItem::Fn(Instance::new(def_id, concrete_substs));\n-    return trans_item;\n+    assert!(concrete_substs.is_normalized_for_trans());\n+    TransItem::Fn(Instance::new(def_id, concrete_substs))\n }\n \n /// Creates a `TransItem` for each method that is referenced by the vtable for\n@@ -1034,10 +1032,14 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(scx: &SharedCrateContext<'a,\n                             } else {\n                                 None\n                             }\n-                        })\n-                        .collect::<Vec<_>>();\n+                        });\n+\n+                    output.extend(items);\n \n-                    output.extend(items.into_iter());\n+                    // Also add the destructor\n+                    let dg_type = glue::get_drop_glue_type(scx.tcx(),\n+                                                           trait_ref.self_ty());\n+                    output.push(TransItem::DropGlue(DropGlueKind::Ty(dg_type)));\n                 }\n                 _ => { /* */ }\n             }\n@@ -1234,7 +1236,7 @@ pub enum TransItemState {\n }\n \n pub fn collecting_debug_information(scx: &SharedCrateContext) -> bool {\n-    return scx.sess().opts.cg.debug_assertions == Some(true) &&\n+    return cfg!(debug_assertions) &&\n            scx.sess().opts.debugging_opts.print_trans_items.is_some();\n }\n "}, {"sha": "64e178bf919627a3b8c0e5bd8e874a399e411e7a", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97e3a2401e4b2f659d69ed0c0822cae04e3495b7/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e3a2401e4b2f659d69ed0c0822cae04e3495b7/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=97e3a2401e4b2f659d69ed0c0822cae04e3495b7", "patch": "@@ -20,7 +20,7 @@ use llvm::{ValueRef, get_param};\n use middle::lang_items::ExchangeFreeFnLangItem;\n use rustc::ty::subst::{Substs};\n use rustc::traits;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use abi::{Abi, FnType};\n use adt;\n use adt::GetDtorType; // for tcx.dtor_type()\n@@ -96,10 +96,12 @@ pub fn type_needs_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub fn get_drop_glue_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     t: Ty<'tcx>) -> Ty<'tcx> {\n+    assert!(t.is_normalized_for_trans());\n+\n     // Even if there is no dtor for t, there might be one deeper down and we\n     // might need to pass in the vtable ptr.\n     if !type_is_sized(tcx, t) {\n-        return tcx.erase_regions(&t);\n+        return t;\n     }\n \n     // FIXME (#22815): note that type_needs_drop conservatively\n@@ -123,11 +125,11 @@ pub fn get_drop_glue_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     // `Box<ZeroSizeType>` does not allocate.\n                     tcx.types.i8\n                 } else {\n-                    tcx.erase_regions(&t)\n+                    t\n                 }\n             })\n         }\n-        _ => tcx.erase_regions(&t)\n+        _ => t\n     }\n }\n "}, {"sha": "06e547f0dd03715cd8ae9cec8afc69fd3d639545", "filename": "src/test/codegen-units/item-collection/instantiation-through-vtable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97e3a2401e4b2f659d69ed0c0822cae04e3495b7/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e3a2401e4b2f659d69ed0c0822cae04e3495b7/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs?ref=97e3a2401e4b2f659d69ed0c0822cae04e3495b7", "patch": "@@ -40,3 +40,5 @@ fn main() {\n     //~ TRANS_ITEM fn instantiation_through_vtable::{{impl}}[0]::bar[0]<u64>\n     let _ = &s1 as &Trait;\n }\n+\n+//~ TRANS_ITEM drop-glue i8"}, {"sha": "5c67ab7a826464e2e81846cfb1a97e8237aa99a4", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97e3a2401e4b2f659d69ed0c0822cae04e3495b7/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e3a2401e4b2f659d69ed0c0822cae04e3495b7/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=97e3a2401e4b2f659d69ed0c0822cae04e3495b7", "patch": "@@ -78,3 +78,5 @@ fn main()\n     //~ TRANS_ITEM fn unsizing::{{impl}}[3]::foo[0]\n     let _wrapper_sized = wrapper_sized as Wrapper<Trait>;\n }\n+\n+//~ TRANS_ITEM drop-glue i8"}]}