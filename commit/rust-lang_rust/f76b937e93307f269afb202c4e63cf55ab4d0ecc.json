{"sha": "f76b937e93307f269afb202c4e63cf55ab4d0ecc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NmI5MzdlOTMzMDdmMjY5YWZiMjAyYzRlNjNjZjU1YWI0ZDBlY2M=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-15T01:52:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-15T01:52:38Z"}, "message": "Merge pull request #2150 from topecongiro/audit-options/space\n\nCombine spacing-related config options into a single general one", "tree": {"sha": "2adf39525b9825ed9e816c1f1f453405cb36793c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2adf39525b9825ed9e816c1f1f453405cb36793c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f76b937e93307f269afb202c4e63cf55ab4d0ecc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaC53mCRBK7hj4Ov3rIwAAdHIIAKDRWipjmXTp1+azeh1S+r2V\nkQKCUs4iQe+uecBSDY0p/b/vXV7c1Gc3jBbQtWPGwQ3xibDz/cNOfs++g2EVSdp/\nwq64VhDMrZMcKc6R26FbdiVa9SC/tH0NAG77Y8NFNFrLO+vjDrttglr5mKNErM/q\n/qXotQ7Ee7x5IYyDm1enU+t1OCpdD6Yh6EMVBAkXRZVG1d5xrX0tHq0t1obrjSVy\n5Kgv5Aqcc66BPSXrmUKn5sKWxPt/be6FH40iixZ4r+oCJb9y5cxpsmY5RVRTebbR\nnLt+Jc8eKyMD/q79g8zaAnhXDZSR4VVVWbAOxoZI8iwP0C19YAEOnxGW5Udocf0=\n=AgJo\n-----END PGP SIGNATURE-----\n", "payload": "tree 2adf39525b9825ed9e816c1f1f453405cb36793c\nparent 6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad\nparent 4e7c2756d3f4ffa983a74292b04080ea38107e02\nauthor Nick Cameron <nrc@ncameron.org> 1510710758 +1300\ncommitter GitHub <noreply@github.com> 1510710758 +1300\n\nMerge pull request #2150 from topecongiro/audit-options/space\n\nCombine spacing-related config options into a single general one"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f76b937e93307f269afb202c4e63cf55ab4d0ecc", "html_url": "https://github.com/rust-lang/rust/commit/f76b937e93307f269afb202c4e63cf55ab4d0ecc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f76b937e93307f269afb202c4e63cf55ab4d0ecc/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "html_url": "https://github.com/rust-lang/rust/commit/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad"}, {"sha": "4e7c2756d3f4ffa983a74292b04080ea38107e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7c2756d3f4ffa983a74292b04080ea38107e02", "html_url": "https://github.com/rust-lang/rust/commit/4e7c2756d3f4ffa983a74292b04080ea38107e02"}], "stats": {"total": 1203, "additions": 412, "deletions": 791}, "files": [{"sha": "9d74fd0525053f6ecdb0ee402b1e502d5514d72a", "filename": "Configurations.md", "status": "modified", "additions": 45, "deletions": 135, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -1719,9 +1719,9 @@ Don't reformat out of line modules\n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n \n-## `space_after_bound_colon`\n+## `space_after_colon`\n \n-Leave a space after the colon in a trait or lifetime bound\n+Leave a space after the colon.\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n@@ -1730,102 +1730,29 @@ Leave a space after the colon in a trait or lifetime bound\n \n ```rust\n fn lorem<T: Eq>(t: T) {\n-    // body\n-}\n-```\n-\n-#### `false`:\n-\n-```rust\n-fn lorem<T:Eq>(t: T) {\n-    // body\n-}\n-```\n-\n-See also: [`space_before_bound`](#space_before_bound).\n-\n-## `struct_field_align_threshold`\n-\n-The maximum diff of width between struct fields to be aligned with each other.\n-\n-- **Default value** : 0\n-- **Possible values**: any positive integer\n-\n-#### `0` (default):\n-\n-```rust\n-struct Foo {\n-    x: u32,\n-    yy: u32,\n-    zzz: u32,\n-}\n-```\n-\n-#### `20`:\n-\n-```rust\n-struct Foo {\n-    x:   u32,\n-    yy:  u32,\n-    zzz: u32,\n-}\n-```\n-\n-## `space_after_struct_lit_field_colon`\n-\n-Leave a space after the colon in a struct literal field\n-\n-- **Default value**: `true`\n-- **Possible values**: `true`, `false`\n-\n-#### `true` (default):\n-\n-```rust\n-let lorem = Lorem {\n-    ipsum: dolor,\n-    sit: amet,\n-};\n-```\n-\n-#### `false`:\n-\n-```rust\n-let lorem = Lorem {\n-    ipsum:dolor,\n-    sit:amet,\n-};\n-```\n-\n-See also: [`space_before_struct_lit_field_colon`](#space_before_struct_lit_field_colon).\n-\n-## `space_after_type_annotation_colon`\n-\n-Leave a space after the colon in a type annotation\n-\n-- **Default value**: `true`\n-- **Possible values**: `true`, `false`\n-\n-#### `true` (default):\n-\n-```rust\n-fn lorem<T: Eq>(t: T) {\n-    let ipsum: Dolor = sit;\n+    let lorem: Dolor = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n }\n ```\n \n #### `false`:\n \n ```rust\n-fn lorem<T: Eq>(t:T) {\n-    let ipsum:Dolor = sit;\n+fn lorem<T:Eq>(t:T) {\n+    let lorem:Dolor = Lorem {\n+        ipsum:dolor,\n+        sit:amet,\n+    };\n }\n ```\n \n-See also: [`space_before_type_annotation`](#space_before_type_annotation).\n+See also: [`space_before_colon`](#space_before_colon).\n \n-## `space_before_bound`\n+## `space_before_colon`\n \n-Leave a space before the colon in a trait or lifetime bound\n+Leave a space before the colon.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n@@ -1834,71 +1761,54 @@ Leave a space before the colon in a trait or lifetime bound\n \n ```rust\n fn lorem<T: Eq>(t: T) {\n-    let ipsum: Dolor = sit;\n+    let lorem: Dolor = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n }\n ```\n \n #### `true`:\n \n ```rust\n-fn lorem<T : Eq>(t: T) {\n-    let ipsum: Dolor = sit;\n+fn lorem<T : Eq>(t : T) {\n+    let lorem : Dolor = Lorem {\n+        ipsum : dolor,\n+        sit : amet,\n+    };\n }\n ```\n \n-See also: [`space_after_bound_colon`](#space_after_bound_colon).\n-\n-## `space_before_struct_lit_field_colon`\n-\n-Leave a space before the colon in a struct literal field\n-\n-- **Default value**: `false`\n-- **Possible values**: `true`, `false`\n-\n-#### `false` (default):\n-\n-```rust\n-let lorem = Lorem {\n-    ipsum: dolor,\n-    sit: amet,\n-};\n-```\n-\n-#### `true`:\n-\n-```rust\n-let lorem = Lorem {\n-    ipsum : dolor,\n-    sit : amet,\n-};\n-```\n-\n-See also: [`space_after_struct_lit_field_colon`](#space_after_struct_lit_field_colon).\n+See also: [`space_after_colon`](#space_after_colon).\n \n-## `space_before_type_annotation`\n+## `struct_field_align_threshold`\n \n-Leave a space before the colon in a type annotation\n+The maximum diff of width between struct fields to be aligned with each other.\n \n-- **Default value**: `false`\n-- **Possible values**: `true`, `false`\n+- **Default value** : 0\n+- **Possible values**: any positive integer\n \n-#### `false` (default):\n+#### `0` (default):\n \n ```rust\n-fn lorem<T: Eq>(t: T) {\n-    let ipsum: Dolor = sit;\n+struct Foo {\n+    x: u32,\n+    yy: u32,\n+    zzz: u32,\n }\n ```\n \n-#### `true`:\n+#### `20`:\n \n ```rust\n-fn lorem<T: Eq>(t : T) {\n-    let ipsum : Dolor = sit;\n+struct Foo {\n+    x:   u32,\n+    yy:  u32,\n+    zzz: u32,\n }\n ```\n \n-See also: [`space_after_type_annotation_colon`](#space_after_type_annotation_colon).\n+```\n \n ## `spaces_around_ranges`\n \n@@ -1919,7 +1829,7 @@ let lorem = 0..10;\n let lorem = 0 .. 10;\n ```\n \n-## `spaces_within_angle_brackets`\n+## `spaces_within_parens_and_brackets`\n \n Put spaces within non-empty generic arguments\n \n@@ -1942,9 +1852,9 @@ fn lorem< T: Eq >(t: T) {\n }\n ```\n \n-See also: [`spaces_within_parens`](#spaces_within_parens), [`spaces_within_square_brackets`](#spaces_within_square_brackets).\n+See also: [`spaces_within_parens_and_brackets`](#spaces_within_parens_and_brackets), [`spaces_within_parens_and_brackets`](#spaces_within_parens_and_brackets).\n \n-## `spaces_within_parens`\n+## `spaces_within_parens_and_brackets`\n \n Put spaces within non-empty parentheses\n \n@@ -1967,9 +1877,9 @@ fn lorem<T: Eq>( t: T ) {\n }\n ```\n \n-See also: [`spaces_within_angle_brackets`](#spaces_within_angle_brackets), [`spaces_within_square_brackets`](#spaces_within_square_brackets).\n+See also: [`spaces_within_parens_and_brackets`](#spaces_within_parens_and_brackets), [`spaces_within_parens_and_brackets`](#spaces_within_parens_and_brackets).\n \n-## `spaces_within_square_brackets`\n+## `spaces_within_parens_and_brackets`\n \n Put spaces within non-empty square brackets\n \n@@ -1988,7 +1898,7 @@ let lorem: [usize; 2] = [ipsum, dolor];\n let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n ```\n \n-See also: [`spaces_within_parens`](#spaces_within_parens), [`spaces_within_angle_brackets`](#spaces_within_angle_brackets).\n+See also: [`spaces_within_parens_and_brackets`](#spaces_within_parens_and_brackets), [`spaces_within_parens_and_brackets`](#spaces_within_parens_and_brackets).\n \n ## `struct_lit_multiline_style`\n "}, {"sha": "c7b91625c9810b0ce5258484ce3a11c414c9e812", "filename": "src/chains.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -485,11 +485,12 @@ fn rewrite_method_call(\n             .map(|ty| ty.rewrite(context, shape))\n             .collect::<Option<Vec<_>>>()?;\n \n-        let type_str = if context.config.spaces_within_angle_brackets() && !type_list.is_empty() {\n-            format!(\"::< {} >\", type_list.join(\", \"))\n-        } else {\n-            format!(\"::<{}>\", type_list.join(\", \"))\n-        };\n+        let type_str =\n+            if context.config.spaces_within_parens_and_brackets() && !type_list.is_empty() {\n+                format!(\"::< {} >\", type_list.join(\", \"))\n+            } else {\n+                format!(\"::<{}>\", type_list.join(\", \"))\n+            };\n \n         (types.last().unwrap().span.hi(), type_str)\n     };"}, {"sha": "c76933ca509773a805c67bf1b1123cf5b287d52b", "filename": "src/config.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -613,24 +613,11 @@ create_config! {\n                                     indentation level as the match keyword\";\n     match_pattern_separator_break_point: SeparatorPlace, SeparatorPlace::Back, false,\n         \"Put a match sub-patterns' separator in front or back.\";\n-    space_before_type_annotation: bool, false, false,\n-        \"Leave a space before the colon in a type annotation\";\n-    space_after_type_annotation_colon: bool, true, false,\n-        \"Leave a space after the colon in a type annotation\";\n-    space_before_struct_lit_field_colon: bool, false, false,\n-        \"Leave a space before the colon in a struct literal field\";\n-    space_after_struct_lit_field_colon: bool, true, false,\n-        \"Leave a space after the colon in a struct literal field\";\n-    space_before_bound: bool, false, false,\n-        \"Leave a space before the colon in a trait or lifetime bound\";\n-    space_after_bound_colon: bool, true, false,\n-        \"Leave a space after the colon in a trait or lifetime bound\";\n+    space_before_colon: bool, false, false, \"Leave a space before the colon\";\n+    space_after_colon: bool, true, false, \"Leave a space after the colon\";\n     spaces_around_ranges: bool, false, false, \"Put spaces around the  .. and ... range operators\";\n-    spaces_within_angle_brackets: bool, false, false,\n-        \"Put spaces within non-empty generic arguments\";\n-    spaces_within_square_brackets: bool, false, false,\n-        \"Put spaces within non-empty square brackets\";\n-    spaces_within_parens: bool, false, false, \"Put spaces within non-empty parentheses\";\n+    spaces_within_parens_and_brackets: bool, false, false,\n+        \"Put spaces within non-empty parentheses or brackets\";\n     use_try_shorthand: bool, false, false, \"Replace uses of the try! macro by the ? shorthand\";\n     write_mode: WriteMode, WriteMode::Overwrite, false,\n         \"What Write Mode to use when none is supplied: \\"}, {"sha": "077ba5271a4bc3a5163032cbbcd34295bfda0583", "filename": "src/expr.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -202,7 +202,7 @@ pub fn format_expr(\n             rewrite_index(&**expr, &**index, context, shape)\n         }\n         ast::ExprKind::Repeat(ref expr, ref repeats) => {\n-            let (lbr, rbr) = if context.config.spaces_within_square_brackets() {\n+            let (lbr, rbr) = if context.config.spaces_within_parens_and_brackets() {\n                 (\"[ \", \" ]\")\n             } else {\n                 (\"[\", \"]\")\n@@ -409,7 +409,7 @@ pub fn rewrite_array<'a, I>(\n where\n     I: Iterator<Item = &'a ast::Expr>,\n {\n-    let bracket_size = if context.config.spaces_within_square_brackets() {\n+    let bracket_size = if context.config.spaces_within_parens_and_brackets() {\n         2 // \"[ \"\n     } else {\n         1 // \"[\"\n@@ -439,7 +439,7 @@ where\n     ).collect::<Vec<_>>();\n \n     if items.is_empty() {\n-        if context.config.spaces_within_square_brackets() {\n+        if context.config.spaces_within_parens_and_brackets() {\n             return Some(\"[ ]\".to_string());\n         } else {\n             return Some(\"[]\".to_string());\n@@ -501,7 +501,7 @@ where\n     let result = if context.config.indent_style() == IndentStyle::Visual\n         || tactic == DefinitiveListTactic::Horizontal\n     {\n-        if context.config.spaces_within_square_brackets() && !list_str.is_empty() {\n+        if context.config.spaces_within_parens_and_brackets() && !list_str.is_empty() {\n             format!(\"[ {} ]\", list_str)\n         } else {\n             format!(\"[{}]\", list_str)\n@@ -1801,7 +1801,7 @@ where\n     T: Rewrite + Spanned + ToExpr + 'a,\n {\n     // 2 = `( `, 1 = `(`\n-    let paren_overhead = if context.config.spaces_within_parens() {\n+    let paren_overhead = if context.config.spaces_within_parens_and_brackets() {\n         2\n     } else {\n         1\n@@ -2098,7 +2098,7 @@ pub fn wrap_args_with_parens(\n         || (context.inside_macro && !args_str.contains('\\n')\n             && args_str.len() + paren_overhead(context) <= shape.width) || is_extendable\n     {\n-        if context.config.spaces_within_parens() && !args_str.is_empty() {\n+        if context.config.spaces_within_parens_and_brackets() && !args_str.is_empty() {\n             format!(\"( {} )\", args_str)\n         } else {\n             format!(\"({})\", args_str)\n@@ -2141,11 +2141,12 @@ fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, shape: Shape) ->\n         .offset_left(paren_overhead)\n         .and_then(|s| s.sub_width(paren_overhead))?;\n \n-    let paren_wrapper = |s: &str| if context.config.spaces_within_parens() && !s.is_empty() {\n-        format!(\"( {} )\", s)\n-    } else {\n-        format!(\"({})\", s)\n-    };\n+    let paren_wrapper =\n+        |s: &str| if context.config.spaces_within_parens_and_brackets() && !s.is_empty() {\n+            format!(\"( {} )\", s)\n+        } else {\n+            format!(\"({})\", s)\n+        };\n \n     let subexpr_str = subexpr.rewrite(context, sub_shape)?;\n     debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);\n@@ -2167,7 +2168,7 @@ fn rewrite_index(\n ) -> Option<String> {\n     let expr_str = expr.rewrite(context, shape)?;\n \n-    let (lbr, rbr) = if context.config.spaces_within_square_brackets() {\n+    let (lbr, rbr) = if context.config.spaces_within_parens_and_brackets() {\n         (\"[ \", \" ]\")\n     } else {\n         (\"[\", \"]\")\n@@ -2348,10 +2349,7 @@ pub fn wrap_struct_field(\n }\n \n pub fn struct_lit_field_separator(config: &Config) -> &str {\n-    colon_spaces(\n-        config.space_before_struct_lit_field_colon(),\n-        config.space_after_struct_lit_field_colon(),\n-    )\n+    colon_spaces(config.space_before_colon(), config.space_after_colon())\n }\n \n pub fn rewrite_field(\n@@ -2439,7 +2437,7 @@ where\n             .unwrap()\n             .rewrite(context, nested_shape)\n             .map(|s| {\n-                if context.config.spaces_within_parens() {\n+                if context.config.spaces_within_parens_and_brackets() {\n                     format!(\"( {}, )\", s)\n                 } else {\n                     format!(\"({},)\", s)\n@@ -2479,7 +2477,7 @@ where\n     };\n     let list_str = write_list(&item_vec, &fmt)?;\n \n-    if context.config.spaces_within_parens() && !list_str.is_empty() {\n+    if context.config.spaces_within_parens_and_brackets() && !list_str.is_empty() {\n         Some(format!(\"( {} )\", list_str))\n     } else {\n         Some(format!(\"({})\", list_str))"}, {"sha": "fa697157ea32be1bcfd349295c223cf16647a9eb", "filename": "src/items.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -39,10 +39,7 @@ use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n fn type_annotation_separator(config: &Config) -> &str {\n-    colon_spaces(\n-        config.space_before_type_annotation(),\n-        config.space_after_type_annotation_colon(),\n-    )\n+    colon_spaces(config.space_before_colon(), config.space_after_colon())\n }\n \n // Statements of the form\n@@ -1405,16 +1402,8 @@ pub fn rewrite_type_alias(\n \n fn type_annotation_spacing(config: &Config) -> (&str, &str) {\n     (\n-        if config.space_before_type_annotation() {\n-            \" \"\n-        } else {\n-            \"\"\n-        },\n-        if config.space_after_type_annotation_colon() {\n-            \" \"\n-        } else {\n-            \"\"\n-        },\n+        if config.space_before_colon() { \" \" } else { \"\" },\n+        if config.space_after_colon() { \" \" } else { \"\" },\n     )\n }\n \n@@ -1581,8 +1570,8 @@ fn rewrite_static(\n     offset: Indent,\n ) -> Option<String> {\n     let colon = colon_spaces(\n-        context.config.space_before_type_annotation(),\n-        context.config.space_after_type_annotation_colon(),\n+        context.config.space_before_colon(),\n+        context.config.space_after_colon(),\n     );\n     let prefix = format!(\n         \"{}{} {}{}{}\",\n@@ -1701,11 +1690,11 @@ impl Rewrite for ast::Arg {\n                 .rewrite(context, Shape::legacy(shape.width, shape.indent))?;\n \n             if !is_empty_infer(context, &*self.ty) {\n-                if context.config.space_before_type_annotation() {\n+                if context.config.space_before_colon() {\n                     result.push_str(\" \");\n                 }\n                 result.push_str(\":\");\n-                if context.config.space_after_type_annotation_colon() {\n+                if context.config.space_after_colon() {\n                     result.push_str(\" \");\n                 }\n                 let overhead = last_line_width(&result);\n@@ -1893,7 +1882,9 @@ fn rewrite_fn_base(\n     } else {\n         result.push('(');\n     }\n-    if context.config.spaces_within_parens() && !fd.inputs.is_empty() && result.ends_with('(') {\n+    if context.config.spaces_within_parens_and_brackets() && !fd.inputs.is_empty()\n+        && result.ends_with('(')\n+    {\n         result.push(' ')\n     }\n \n@@ -1954,7 +1945,7 @@ fn rewrite_fn_base(\n         if fd.inputs.is_empty() && used_width + 1 > context.config.max_width() {\n             result.push('\\n');\n         }\n-        if context.config.spaces_within_parens() && !fd.inputs.is_empty() {\n+        if context.config.spaces_within_parens_and_brackets() && !fd.inputs.is_empty() {\n             result.push(' ')\n         }\n         // If the last line of args contains comment, we cannot put the closing paren\n@@ -2533,7 +2524,7 @@ pub fn wrap_generics_with_angle_brackets(\n                 .block_unindent(context.config)\n                 .to_string(context.config)\n         )\n-    } else if context.config.spaces_within_angle_brackets() {\n+    } else if context.config.spaces_within_parens_and_brackets() {\n         format!(\"< {} >\", list_str)\n     } else {\n         format!(\"<{}>\", list_str)"}, {"sha": "6e64a49361de107b459b7e0d4868dc2a8fe98250", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -219,7 +219,7 @@ pub fn rewrite_macro(\n             let mac_shape = shape.offset_left(macro_name.len())?;\n             // Handle special case: `vec![expr; expr]`\n             if vec_with_semi {\n-                let (lbr, rbr) = if context.config.spaces_within_square_brackets() {\n+                let (lbr, rbr) = if context.config.spaces_within_parens_and_brackets() {\n                     (\"[ \", \" ]\")\n                 } else {\n                     (\"[\", \"]\")"}, {"sha": "20ea14a5dfeb7a585ea6db24d75700af7f9d5486", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -109,7 +109,7 @@ impl Rewrite for Pat {\n                 let pats = pats?;\n \n                 // Unwrap all the sub-strings and join them with commas.\n-                let result = if context.config.spaces_within_square_brackets() {\n+                let result = if context.config.spaces_within_parens_and_brackets() {\n                     format!(\"[ {} ]\", pats.join(\", \"))\n                 } else {\n                     format!(\"[{}]\", pats.join(\", \"))"}, {"sha": "180a38b2f23a811a0806a463dff5833ab851abe1", "filename": "src/types.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -54,7 +54,7 @@ pub fn rewrite_path(\n \n     if let Some(qself) = qself {\n         result.push('<');\n-        if context.config.spaces_within_angle_brackets() {\n+        if context.config.spaces_within_parens_and_brackets() {\n             result.push_str(\" \")\n         }\n \n@@ -81,7 +81,7 @@ pub fn rewrite_path(\n             )?;\n         }\n \n-        if context.config.spaces_within_angle_brackets() {\n+        if context.config.spaces_within_parens_and_brackets() {\n             result.push_str(\" \")\n         }\n \n@@ -399,8 +399,8 @@ where\n \n fn type_bound_colon(context: &RewriteContext) -> &'static str {\n     colon_spaces(\n-        context.config.space_before_bound(),\n-        context.config.space_after_bound_colon(),\n+        context.config.space_before_colon(),\n+        context.config.space_after_colon(),\n     )\n }\n \n@@ -434,7 +434,9 @@ impl Rewrite for ast::WherePredicate {\n                         .collect::<Option<Vec<_>>>()?;\n                     let bounds_str = join_bounds(context, ty_shape, &bounds);\n \n-                    if context.config.spaces_within_angle_brackets() && !lifetime_str.is_empty() {\n+                    if context.config.spaces_within_parens_and_brackets()\n+                        && !lifetime_str.is_empty()\n+                    {\n                         format!(\n                             \"for< {} > {}{}{}\",\n                             lifetime_str,\n@@ -600,7 +602,7 @@ impl Rewrite for ast::PolyTraitRef {\n                 .rewrite(context, shape.offset_left(extra_offset)?)?;\n \n             Some(\n-                if context.config.spaces_within_angle_brackets() && !lifetime_str.is_empty() {\n+                if context.config.spaces_within_parens_and_brackets() && !lifetime_str.is_empty() {\n                     format!(\"for< {} > {}\", lifetime_str, path_str)\n                 } else {\n                     format!(\"for<{}> {}\", lifetime_str, path_str)\n@@ -671,22 +673,22 @@ impl Rewrite for ast::Ty {\n                 let budget = shape.width.checked_sub(2)?;\n                 ty.rewrite(context, Shape::legacy(budget, shape.indent + 1))\n                     .map(|ty_str| {\n-                        if context.config.spaces_within_parens() {\n+                        if context.config.spaces_within_parens_and_brackets() {\n                             format!(\"( {} )\", ty_str)\n                         } else {\n                             format!(\"({})\", ty_str)\n                         }\n                     })\n             }\n             ast::TyKind::Slice(ref ty) => {\n-                let budget = if context.config.spaces_within_square_brackets() {\n+                let budget = if context.config.spaces_within_parens_and_brackets() {\n                     shape.width.checked_sub(4)?\n                 } else {\n                     shape.width.checked_sub(2)?\n                 };\n                 ty.rewrite(context, Shape::legacy(budget, shape.indent + 1))\n                     .map(|ty_str| {\n-                        if context.config.spaces_within_square_brackets() {\n+                        if context.config.spaces_within_parens_and_brackets() {\n                             format!(\"[ {} ]\", ty_str)\n                         } else {\n                             format!(\"[{}]\", ty_str)\n@@ -703,7 +705,7 @@ impl Rewrite for ast::Ty {\n                 rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n             }\n             ast::TyKind::Array(ref ty, ref repeats) => {\n-                let use_spaces = context.config.spaces_within_square_brackets();\n+                let use_spaces = context.config.spaces_within_parens_and_brackets();\n                 let lbr = if use_spaces { \"[ \" } else { \"[\" };\n                 let rbr = if use_spaces { \" ]\" } else { \"]\" };\n                 rewrite_pair("}, {"sha": "88272ff0d385bf4d310bbe0a0298e67690f463b2", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -441,7 +441,7 @@ pub fn colon_spaces(before: bool, after: bool) -> &'static str {\n \n #[inline]\n pub fn paren_overhead(context: &RewriteContext) -> usize {\n-    if context.config.spaces_within_parens() {\n+    if context.config.spaces_within_parens_and_brackets() {\n         4\n     } else {\n         2"}, {"sha": "129d51048cca42d4a5d097c516b2b7504d42e2b3", "filename": "tests/source/configs-space_after_bound_colon-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_bound_colon-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_bound_colon-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_after_bound_colon-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_bound_colon: false\n-// Space after bound colon\n-\n-fn lorem<T:Eq>(t:T) {\n-    // body\n-}"}, {"sha": "32ebd52b10285e9b7e2d00278893309fcaa20fdf", "filename": "tests/source/configs-space_after_bound_colon-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_bound_colon-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_bound_colon-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_after_bound_colon-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_bound_colon: true\n-// Space after bound colon\n-\n-fn lorem<T:Eq>(t:T) {\n-    // body\n-}"}, {"sha": "3ee99fa5d1d8035a8843bec415f3800a4f547eaf", "filename": "tests/source/configs-space_after_struct_lit_field_colon-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_struct_lit_field_colon-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_struct_lit_field_colon-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_after_struct_lit_field_colon-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_struct_lit_field_colon: false\n-\n-const LOREM: Lorem = Lorem {\n-    ipsum:dolor,\n-    sit :  amet,\n-};"}, {"sha": "6105d4725d8ad1abaeb5214b78e24b5b5fe5ff70", "filename": "tests/source/configs-space_after_struct_lit_field_colon-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_struct_lit_field_colon-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_struct_lit_field_colon-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_after_struct_lit_field_colon-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_struct_lit_field_colon: true\n-\n-const LOREM: Lorem = Lorem {\n-    ipsum:dolor,\n-    sit :  amet,\n-};"}, {"sha": "f814593a94e816dd9038dae4727d1ce99880631c", "filename": "tests/source/configs-space_after_type_annotation_colon-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_type_annotation_colon-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_type_annotation_colon-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_after_type_annotation_colon-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_type_annotation_colon: false\n-// Space after type annotation colon\n-\n-fn lorem<T:Eq>(t:T) {\n-    let ipsum:Dolor = sit;\n-}"}, {"sha": "1a86a5879bdba399f8077c82deda45f032628615", "filename": "tests/source/configs-space_after_type_annotation_colon-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_type_annotation_colon-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_after_type_annotation_colon-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_after_type_annotation_colon-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_type_annotation_colon: true\n-// Space after type annotation colon\n-\n-fn lorem<T:Eq>(t:T) {\n-    let ipsum:Dolor = sit;\n-}"}, {"sha": "f6168281c4fd09f29d4fc94f2c8a6eb9ec0bb91a", "filename": "tests/source/configs-space_before_bound-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_bound-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_bound-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_before_bound-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_bound: false\n-// Space before bound\n-\n-fn lorem<T:Eq>(t:T) {\n-    let ipsum:Dolor = sit;\n-}"}, {"sha": "7a16b5dbca3a28a9a9fb2b65fc3a824ac8e6ecd7", "filename": "tests/source/configs-space_before_bound-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_bound-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_bound-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_before_bound-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_bound: true\n-// Space before bound\n-\n-fn lorem<T:Eq>(t:T) {\n-    let ipsum:Dolor = sit;\n-}"}, {"sha": "0a597602528a4caf931433d27ae09dc3c9066708", "filename": "tests/source/configs-space_before_colon-true.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Fsource%2Fconfigs-space_before_colon-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Fsource%2Fconfigs-space_before_colon-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_before_colon-true.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-space_before_colon: true\n+// Space before colon\n+\n+fn lorem<T : Eq>(t : T) {\n+    let ipsum: Dolor = sit;\n+}\n+\n+const LOREM : Lorem = Lorem {\n+    ipsum : dolor,\n+    sit : amet,\n+};"}, {"sha": "a2d71c8bf0bcb10f41a1964107905af5afe7a770", "filename": "tests/source/configs-space_before_struct_lit_field_colon-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_struct_lit_field_colon-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_struct_lit_field_colon-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_before_struct_lit_field_colon-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_struct_lit_field_colon: false\n-\n-const LOREM: Lorem = Lorem {\n-    ipsum:dolor,\n-    sit  : amet,\n-};"}, {"sha": "50e4ba12d82bc010a6393821493294918cb030e4", "filename": "tests/source/configs-space_before_struct_lit_field_colon-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_struct_lit_field_colon-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_struct_lit_field_colon-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_before_struct_lit_field_colon-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_struct_lit_field_colon: true\n-\n-const LOREM: Lorem = Lorem {\n-    ipsum:dolor,\n-    sit  : amet,\n-};"}, {"sha": "817aa5c59408991c7547ed734418038a05c5d16f", "filename": "tests/source/configs-space_before_type_annotation-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_type_annotation-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_type_annotation-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_before_type_annotation-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_type_annotation: false\n-// Space before type-annotation\n-\n-fn lorem<T:Eq>(t:T) {\n-    let ipsum:Dolor = sit;\n-}"}, {"sha": "4df9ad341e69f31d56a0f153239e131c29d23557", "filename": "tests/source/configs-space_before_type_annotation-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_type_annotation-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-space_before_type_annotation-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-space_before_type_annotation-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_type_annotation: true\n-// Space before type-annotation\n-\n-fn lorem<T:Eq>(t:T) {\n-    let ipsum:Dolor = sit;\n-}"}, {"sha": "3823216f4336e31d6e81782d85c1ab066bbf7000", "filename": "tests/source/configs-spaces_within_angle_brackets-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: false\n-// Spaces within angle-brackets\n-\n-fn lorem<T: Eq>(t: T) {\n-    // body\n-}"}, {"sha": "f2b97d7def35e981eab99257e4532d984d66c3b6", "filename": "tests/source/configs-spaces_within_angle_brackets-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: true\n-// Spaces within angle-brackets\n-\n-fn lorem<T: Eq>(t: T) {\n-    // body\n-}"}, {"sha": "05c25584fe16d3ea3b009e27cb8191c7a6398419", "filename": "tests/source/configs-spaces_within_parens-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_parens-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_parens-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_parens-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_parens: false\n-// Spaces within parens\n-\n-fn lorem<T: Eq>(t: T) {\n-    let lorem = (ipsum, dolor);\n-}"}, {"sha": "7f041d71f49fd2143c69422adf28741342334b44", "filename": "tests/source/configs-spaces_within_parens-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_parens-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_parens-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_parens-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_parens: true\n-// Spaces within parens\n-\n-fn lorem<T: Eq>(t: T) {\n-    let lorem = (ipsum, dolor);\n-}"}, {"sha": "908373ca9b05b1cb44895e3417b4336e14d5ec40", "filename": "tests/source/configs-spaces_within_parens_and_brackets-false.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-false.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-spaces_within_parens_and_brackets: false\n+// Spaces within parens and brackets\n+\n+fn lorem<T: Eq>(t: T) {\n+    let lorem = (ipsum, dolor);\n+    let lorem: [usize; 2] = [ipsum, dolor];\n+}"}, {"sha": "2e3c92da2fc3b842fd5023a91df17f71e2b3fea9", "filename": "tests/source/configs-spaces_within_parens_and_brackets-true.rs", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-true.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -0,0 +1,133 @@\n+// rustfmt-spaces_within_parens_and_brackets: true\n+// Spaces within parens and brackets\n+\n+fn lorem<T: Eq>(t: T) {\n+    let lorem = (ipsum, dolor);\n+    let lorem: [usize; 2] = [ipsum, dolor];\n+}\n+\n+enum E {\n+    A(u32),\n+    B(u32, u32),\n+    C(u32, u32, u32),\n+    D(),\n+}\n+\n+struct TupleStruct0();\n+struct TupleStruct1(u32);\n+struct TupleStruct2(u32, u32);\n+\n+fn fooEmpty() {}\n+\n+fn foo(e: E, _: u32) -> (u32, u32) {\n+    // Tuples\n+    let t1 = ();\n+    let t2 = (1,);\n+    let t3 = (1, 2);\n+\n+    let ts0 = TupleStruct0();\n+    let ts1 = TupleStruct1(1);\n+    let ts2 = TupleStruct2(1, 2);\n+\n+    // Tuple pattern\n+    let (a,b,c) = (1,2,3);\n+\n+    // Expressions\n+    let x = (1 + 2) * (3);\n+\n+    // Function call\n+    fooEmpty();\n+    foo(1, 2);\n+\n+    // Pattern matching\n+    match e {\n+        A(_) => (),\n+        B(_, _) => (),\n+        C(..) => (),\n+        D => (),\n+    }\n+\n+    (1,2)\n+}\n+\n+struct Foo<T> {\n+    i: T,\n+}\n+\n+struct Bar<T, E> {\n+    i: T,\n+    e: E,\n+}\n+\n+struct Foo<'a> {\n+    i: &'a str,\n+}\n+\n+enum E<T> {\n+    T(T),\n+}\n+\n+enum E<T, S> {\n+    T(T),\n+    S(S),\n+}\n+\n+fn foo<T>(a: T) {\n+    foo::<u32>(10);\n+}\n+\n+fn foo<T, E>(a: T, b: E) {\n+    foo::<u32, str>(10, \"bar\");\n+}\n+\n+fn foo<T: Send, E: Send>(a: T, b: E) {\n+    foo::<u32, str>(10, \"bar\");\n+\n+    let opt: Option<u32>;\n+    let res: Result<u32, String>;\n+}\n+\n+fn foo<'a>(a: &'a str) {\n+    foo(\"foo\");\n+}\n+\n+fn foo<'a, 'b>(a: &'a str, b: &'b str) {\n+    foo(\"foo\", \"bar\");\n+}\n+\n+impl Foo {\n+    fn bar() {\n+        <Foo as Foo>::bar();\n+    }\n+}\n+\n+trait MyTrait<A, D> {}\n+impl<A: Send, D: Send> MyTrait<A, D> for Foo {}\n+\n+fn foo() where for<'a> u32: 'a {}\n+\n+fn main() {\n+    let arr: [i32; 5] = [1, 2, 3, 4, 5];\n+    let arr: [i32; 500] = [0; 500];\n+\n+    let v = vec![1, 2, 3];\n+    assert_eq!(arr, [1, 2, 3]);\n+\n+    let i = arr[0];\n+\n+    let slice = &arr[1..2];\n+\n+    let line100_________________________________________________________________________ = [1, 2];\n+    let line101__________________________________________________________________________ = [1, 2];\n+    let line102___________________________________________________________________________ = [1, 2];\n+    let line103____________________________________________________________________________ = [1, 2];\n+    let line104_____________________________________________________________________________ = [1, 2];\n+\n+    let line100_____________________________________________________________________ = vec![1, 2];\n+    let line101______________________________________________________________________ = vec![1, 2];\n+    let line102_______________________________________________________________________ = vec![1, 2];\n+    let line103________________________________________________________________________ = vec![1, 2];\n+    let line104_________________________________________________________________________ = vec![1, 2];\n+}\n+\n+fn f(slice: &[i32]) {}"}, {"sha": "6410646aad6512ffd19a70032ed5727b96bbbb83", "filename": "tests/source/configs-spaces_within_square_brackets-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: false\n-// Spaces within square-brackets\n-\n-fn main() {\n-    let lorem: [usize; 2] = [ipsum, dolor];\n-}"}, {"sha": "8683fb5f1c69531d450b3cef39b1cd821f13f7bc", "filename": "tests/source/configs-spaces_within_square_brackets-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: true\n-// Spaces within square-brackets\n-\n-fn main() {\n-    let lorem: [usize; 2] = [ipsum, dolor];\n-}"}, {"sha": "2a77eb2d2f921860dd6b5188f858417a93385bff", "filename": "tests/source/space-before-bound.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspace-before-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspace-before-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspace-before-bound.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,10 +0,0 @@\n-// rustfmt-space_before_bound: true\n-\n-trait Trait {}\n-trait Trait2 {}\n-fn f<'a, 'b: 'a, T: Trait, U>() where U: Trait2 {}\n-\n-// should fit on the line\n-fn f2<'a, 'b: 'a, Ttttttttttttttttttttttttttttttttttttttttttttttt: Trait, U>() where U: Trait2 {}\n-// should be wrapped\n-fn f2<'a, 'b: 'a, Tttttttttttttttttttttttttttttttttttttttttttttttt: Trait, U>() where U: Trait2 {}"}, {"sha": "15a75e4cf33b8ae3fc05ae6276c4ee33cae08858", "filename": "tests/source/space-before-type-annotation.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspace-before-type-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspace-before-type-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspace-before-type-annotation.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,13 +0,0 @@\n-// rustfmt-space_before_type_annotation: true\n-\n-static staticVar: i32 = 42;\n-const constVar: i32 = 42;\n-fn foo(paramVar: i32) {\n-    let localVar: i32 = 42;\n-}\n-struct S {\n-    fieldVar: i32,\n-}\n-fn f() {\n-    S { fieldVar: 42 }\n-}"}, {"sha": "86f829c83538b1d7d71dcf11b44763f10ed84972", "filename": "tests/source/space-not-after-type-annotation-colon.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspace-not-after-type-annotation-colon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspace-not-after-type-annotation-colon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspace-not-after-type-annotation-colon.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,14 +0,0 @@\n-// rustfmt-space_before_type_annotation: true\n-// rustfmt-space_after_type_annotation_colon: false\n-\n-static staticVar: i32 = 42;\n-const constVar: i32 = 42;\n-fn foo(paramVar: i32) {\n-    let localVar: i32 = 42;\n-}\n-struct S {\n-    fieldVar: i32,\n-}\n-fn f() {\n-    S { fieldVar: 42 }\n-}"}, {"sha": "4ec569f7902f8bdd14df9f5c5bdbd6d6afd1b51b", "filename": "tests/source/space-not-before-bound-colon.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspace-not-before-bound-colon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspace-not-before-bound-colon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspace-not-before-bound-colon.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,5 +0,0 @@\n-// rustfmt-space_before_bound: true\n-// rustfmt-space_after_bound_colon: false\n-\n-trait Trait {}\n-fn f<'a, 'b: 'a, T: Trait>() {}"}, {"sha": "73cab841e2e61771b20818cbd9695b2f6255528b", "filename": "tests/source/spaces-within-angle-brackets.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspaces-within-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspaces-within-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-angle-brackets.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,57 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: true\n-\n-struct Foo<T> {\n-    i: T,\n-}\n-\n-struct Bar<T, E> {\n-    i: T,\n-    e: E,\n-}\n-\n-struct Foo<'a> {\n-    i: &'a str,\n-}\n-\n-enum E<T> {\n-    T(T),\n-}\n-\n-enum E<T, S> {\n-    T(T),\n-    S(S),\n-}\n-\n-fn foo<T>(a: T) {\n-    foo::<u32>(10);\n-}\n-\n-fn foo<T, E>(a: T, b: E) {\n-    foo::<u32, str>(10, \"bar\");\n-}\n-\n-fn foo<T: Send, E: Send>(a: T, b: E) {\n-    foo::<u32, str>(10, \"bar\");\n-\n-    let opt: Option<u32>;\n-    let res: Result<u32, String>;\n-}\n-\n-fn foo<'a>(a: &'a str) {\n-    foo(\"foo\");\n-}\n-\n-fn foo<'a, 'b>(a: &'a str, b: &'b str) {\n-    foo(\"foo\", \"bar\");\n-}\n-\n-impl Foo {\n-    fn bar() {\n-        <Foo as Foo>::bar();\n-    }\n-}\n-\n-trait MyTrait<A, D> {}\n-impl<A: Send, D: Send> MyTrait<A, D> for Foo {}\n-\n-fn foo() where for<'a> u32: 'a {}"}, {"sha": "dba8d7cf01309dbb281da9a41f1bf3dfc8834d6a", "filename": "tests/source/spaces-within-parens.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspaces-within-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspaces-within-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-parens.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,45 +0,0 @@\n-// rustfmt-spaces_within_parens: true\n-\n-enum E {\n-    A(u32),\n-    B(u32, u32),\n-    C(u32, u32, u32),\n-    D(),\n-}\n-\n-struct TupleStruct0();\n-struct TupleStruct1(u32);\n-struct TupleStruct2(u32, u32);\n-\n-fn fooEmpty() {}\n-\n-fn foo(e: E, _: u32) -> (u32, u32) {\n-    // Tuples\n-    let t1 = ();\n-    let t2 = (1,);\n-    let t3 = (1, 2);\n-\n-    let ts0 = TupleStruct0();\n-    let ts1 = TupleStruct1(1);\n-    let ts2 = TupleStruct2(1, 2);\n-\n-    // Tuple pattern\n-    let (a,b,c) = (1,2,3);\n-\n-    // Expressions\n-    let x = (1 + 2) * (3);\n-\n-    // Function call\n-    fooEmpty();\n-    foo(1, 2);\n-\n-    // Pattern matching\n-    match e {\n-        A(_) => (),\n-        B(_, _) => (),\n-        C(..) => (),\n-        D => (),\n-    }\n-\n-    (1,2)\n-}"}, {"sha": "d0466cacdd54f1dc19556634b72f9aa79c53f197", "filename": "tests/source/spaces-within-square-brackets.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspaces-within-square-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Fsource%2Fspaces-within-square-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-square-brackets.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,27 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: true\n-\n-fn main() {\n-    let arr: [i32; 5] = [1, 2, 3, 4, 5];\n-    let arr: [i32; 500] = [0; 500];\n-\n-    let v = vec![1, 2, 3];\n-    assert_eq!(arr, [1, 2, 3]);\n-\n-    let i = arr[0];\n-\n-    let slice = &arr[1..2];\n-\n-    let line100_________________________________________________________________________ = [1, 2];\n-    let line101__________________________________________________________________________ = [1, 2];\n-    let line102___________________________________________________________________________ = [1, 2];\n-    let line103____________________________________________________________________________ = [1, 2];\n-    let line104_____________________________________________________________________________ = [1, 2];\n-\n-    let line100_____________________________________________________________________ = vec![1, 2];\n-    let line101______________________________________________________________________ = vec![1, 2];\n-    let line102_______________________________________________________________________ = vec![1, 2];\n-    let line103________________________________________________________________________ = vec![1, 2];\n-    let line104_________________________________________________________________________ = vec![1, 2];\n-}\n-\n-fn f(slice: &[i32]) {}"}, {"sha": "d254246b0f075eca3bf185a238a68b466113ef29", "filename": "tests/target/configs-space_after_bound_colon-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_bound_colon-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_bound_colon-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_after_bound_colon-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_bound_colon: false\n-// Space after bound colon\n-\n-fn lorem<T:Eq>(t: T) {\n-    // body\n-}"}, {"sha": "301b07dfa82ae45bc9001d80092081a8cf4c78f6", "filename": "tests/target/configs-space_after_bound_colon-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_bound_colon-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_bound_colon-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_after_bound_colon-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_bound_colon: true\n-// Space after bound colon\n-\n-fn lorem<T: Eq>(t: T) {\n-    // body\n-}"}, {"sha": "8f4750594646ec41012d8978e46bc8de65e6c782", "filename": "tests/target/configs-space_after_struct_lit_field_colon-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_struct_lit_field_colon-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_struct_lit_field_colon-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_after_struct_lit_field_colon-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_struct_lit_field_colon: false\n-\n-const LOREM: Lorem = Lorem {\n-    ipsum:dolor,\n-    sit:amet,\n-};"}, {"sha": "34fb792dcb550e90fb1aba8af9b715c617a76fd0", "filename": "tests/target/configs-space_after_struct_lit_field_colon-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_struct_lit_field_colon-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_struct_lit_field_colon-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_after_struct_lit_field_colon-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_struct_lit_field_colon: true\n-\n-const LOREM: Lorem = Lorem {\n-    ipsum: dolor,\n-    sit: amet,\n-};"}, {"sha": "d27a5af37615bc6e5ce6bfa86b0485c4a7448ec0", "filename": "tests/target/configs-space_after_type_annotation_colon-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_type_annotation_colon-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_type_annotation_colon-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_after_type_annotation_colon-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_type_annotation_colon: false\n-// Space after type annotation colon\n-\n-fn lorem<T: Eq>(t:T) {\n-    let ipsum:Dolor = sit;\n-}"}, {"sha": "ba0da25f836adb39e1aa84c7b62cdc8f8433f37b", "filename": "tests/target/configs-space_after_type_annotation_colon-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_type_annotation_colon-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_after_type_annotation_colon-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_after_type_annotation_colon-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_after_type_annotation_colon: true\n-// Space after type annotation colon\n-\n-fn lorem<T: Eq>(t: T) {\n-    let ipsum: Dolor = sit;\n-}"}, {"sha": "16e14bb77e3df028097fe7b21ae39022f5dea622", "filename": "tests/target/configs-space_before_bound-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_bound-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_bound-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_before_bound-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_bound: false\n-// Space before bound\n-\n-fn lorem<T: Eq>(t: T) {\n-    let ipsum: Dolor = sit;\n-}"}, {"sha": "3ee3dffb20ac6d12587913b5ca8e180099192fdd", "filename": "tests/target/configs-space_before_bound-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_bound-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_bound-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_before_bound-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_bound: true\n-// Space before bound\n-\n-fn lorem<T : Eq>(t: T) {\n-    let ipsum: Dolor = sit;\n-}"}, {"sha": "e2895b5d77b132e80714a2e77215d58d5207200d", "filename": "tests/target/configs-space_before_colon-true.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Ftarget%2Fconfigs-space_before_colon-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Ftarget%2Fconfigs-space_before_colon-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_before_colon-true.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-space_before_colon: true\n+// Space before colon\n+\n+fn lorem<T : Eq>(t : T) {\n+    let ipsum : Dolor = sit;\n+}\n+\n+const LOREM : Lorem = Lorem {\n+    ipsum : dolor,\n+    sit : amet,\n+};"}, {"sha": "48336954786b25e439ceae53442ae7167e4e0e7a", "filename": "tests/target/configs-space_before_struct_lit_field_colon-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_struct_lit_field_colon-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_struct_lit_field_colon-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_before_struct_lit_field_colon-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_struct_lit_field_colon: false\n-\n-const LOREM: Lorem = Lorem {\n-    ipsum: dolor,\n-    sit: amet,\n-};"}, {"sha": "e4f1cdb4575f84846615ed4b88c941fab293f2b7", "filename": "tests/target/configs-space_before_struct_lit_field_colon-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_struct_lit_field_colon-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_struct_lit_field_colon-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_before_struct_lit_field_colon-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_struct_lit_field_colon: true\n-\n-const LOREM: Lorem = Lorem {\n-    ipsum : dolor,\n-    sit : amet,\n-};"}, {"sha": "b75144f7ca6634ef21f70a7eb03dd9cff7bd06cc", "filename": "tests/target/configs-space_before_type_annotation-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_type_annotation-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_type_annotation-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_before_type_annotation-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_type_annotation: false\n-// Space before type-annotation\n-\n-fn lorem<T: Eq>(t: T) {\n-    let ipsum: Dolor = sit;\n-}"}, {"sha": "355cf9f5db9a7095ee8fb107fd45235e3f390e37", "filename": "tests/target/configs-space_before_type_annotation-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_type_annotation-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-space_before_type_annotation-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-space_before_type_annotation-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-space_before_type_annotation: true\n-// Space before type-annotation\n-\n-fn lorem<T: Eq>(t : T) {\n-    let ipsum : Dolor = sit;\n-}"}, {"sha": "3823216f4336e31d6e81782d85c1ab066bbf7000", "filename": "tests/target/configs-spaces_within_angle_brackets-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: false\n-// Spaces within angle-brackets\n-\n-fn lorem<T: Eq>(t: T) {\n-    // body\n-}"}, {"sha": "fef5ac25a4df5f1e710b0314ff8214a58cf1a435", "filename": "tests/target/configs-spaces_within_angle_brackets-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: true\n-// Spaces within angle-brackets\n-\n-fn lorem< T: Eq >(t: T) {\n-    // body\n-}"}, {"sha": "05c25584fe16d3ea3b009e27cb8191c7a6398419", "filename": "tests/target/configs-spaces_within_parens-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_parens-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_parens-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_parens-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_parens: false\n-// Spaces within parens\n-\n-fn lorem<T: Eq>(t: T) {\n-    let lorem = (ipsum, dolor);\n-}"}, {"sha": "2461afb70889968801500640f53450f9b69862e5", "filename": "tests/target/configs-spaces_within_parens-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_parens-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_parens-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_parens-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_parens: true\n-// Spaces within parens\n-\n-fn lorem<T: Eq>( t: T ) {\n-    let lorem = ( ipsum, dolor );\n-}"}, {"sha": "908373ca9b05b1cb44895e3417b4336e14d5ec40", "filename": "tests/target/configs-spaces_within_parens_and_brackets-false.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-false.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-spaces_within_parens_and_brackets: false\n+// Spaces within parens and brackets\n+\n+fn lorem<T: Eq>(t: T) {\n+    let lorem = (ipsum, dolor);\n+    let lorem: [usize; 2] = [ipsum, dolor];\n+}"}, {"sha": "7aff713150694ee135cc2c6f13b29bf6b39c88b5", "filename": "tests/target/configs-spaces_within_parens_and_brackets-true.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76b937e93307f269afb202c4e63cf55ab4d0ecc/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-true.rs?ref=f76b937e93307f269afb202c4e63cf55ab4d0ecc", "patch": "@@ -0,0 +1,145 @@\n+// rustfmt-spaces_within_parens_and_brackets: true\n+// Spaces within parens and brackets\n+\n+fn lorem< T: Eq >( t: T ) {\n+    let lorem = ( ipsum, dolor );\n+    let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n+}\n+\n+enum E {\n+    A( u32 ),\n+    B( u32, u32 ),\n+    C( u32, u32, u32 ),\n+    D(),\n+}\n+\n+struct TupleStruct0();\n+struct TupleStruct1( u32 );\n+struct TupleStruct2( u32, u32 );\n+\n+fn fooEmpty() {}\n+\n+fn foo( e: E, _: u32 ) -> ( u32, u32 ) {\n+    // Tuples\n+    let t1 = ();\n+    let t2 = ( 1, );\n+    let t3 = ( 1, 2 );\n+\n+    let ts0 = TupleStruct0();\n+    let ts1 = TupleStruct1( 1 );\n+    let ts2 = TupleStruct2( 1, 2 );\n+\n+    // Tuple pattern\n+    let ( a, b, c ) = ( 1, 2, 3 );\n+\n+    // Expressions\n+    let x = ( 1 + 2 ) * ( 3 );\n+\n+    // Function call\n+    fooEmpty();\n+    foo( 1, 2 );\n+\n+    // Pattern matching\n+    match e {\n+        A( _ ) => (),\n+        B( _, _ ) => (),\n+        C( .. ) => (),\n+        D => (),\n+    }\n+\n+    ( 1, 2 )\n+}\n+\n+struct Foo< T > {\n+    i: T,\n+}\n+\n+struct Bar< T, E > {\n+    i: T,\n+    e: E,\n+}\n+\n+struct Foo< 'a > {\n+    i: &'a str,\n+}\n+\n+enum E< T > {\n+    T( T ),\n+}\n+\n+enum E< T, S > {\n+    T( T ),\n+    S( S ),\n+}\n+\n+fn foo< T >( a: T ) {\n+    foo::< u32 >( 10 );\n+}\n+\n+fn foo< T, E >( a: T, b: E ) {\n+    foo::< u32, str >( 10, \"bar\" );\n+}\n+\n+fn foo< T: Send, E: Send >( a: T, b: E ) {\n+    foo::< u32, str >( 10, \"bar\" );\n+\n+    let opt: Option< u32 >;\n+    let res: Result< u32, String >;\n+}\n+\n+fn foo< 'a >( a: &'a str ) {\n+    foo( \"foo\" );\n+}\n+\n+fn foo< 'a, 'b >( a: &'a str, b: &'b str ) {\n+    foo( \"foo\", \"bar\" );\n+}\n+\n+impl Foo {\n+    fn bar() {\n+        < Foo as Foo >::bar();\n+    }\n+}\n+\n+trait MyTrait< A, D > {}\n+impl< A: Send, D: Send > MyTrait< A, D > for Foo {}\n+\n+fn foo()\n+where\n+    for< 'a > u32: 'a,\n+{\n+}\n+\n+fn main() {\n+    let arr: [ i32; 5 ] = [ 1, 2, 3, 4, 5 ];\n+    let arr: [ i32; 500 ] = [ 0; 500 ];\n+\n+    let v = vec![ 1, 2, 3 ];\n+    assert_eq!( arr, [ 1, 2, 3 ] );\n+\n+    let i = arr[ 0 ];\n+\n+    let slice = &arr[ 1..2 ];\n+\n+    let line100_________________________________________________________________________ = [ 1, 2 ];\n+    let line101__________________________________________________________________________ =\n+        [ 1, 2 ];\n+    let line102___________________________________________________________________________ =\n+        [ 1, 2 ];\n+    let line103____________________________________________________________________________ =\n+        [ 1, 2 ];\n+    let line104_____________________________________________________________________________ =\n+        [ 1, 2 ];\n+\n+    let line100_____________________________________________________________________ = vec![ 1, 2 ];\n+    let line101______________________________________________________________________ =\n+        vec![ 1, 2 ];\n+    let line102_______________________________________________________________________ =\n+        vec![ 1, 2 ];\n+    let line103________________________________________________________________________ =\n+        vec![ 1, 2 ];\n+    let line104_________________________________________________________________________ =\n+        vec![ 1, 2 ];\n+}\n+\n+fn f( slice: &[ i32 ] ) {}"}, {"sha": "6410646aad6512ffd19a70032ed5727b96bbbb83", "filename": "tests/target/configs-spaces_within_square_brackets-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-false.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: false\n-// Spaces within square-brackets\n-\n-fn main() {\n-    let lorem: [usize; 2] = [ipsum, dolor];\n-}"}, {"sha": "25f5e0e7231579efa2a8cecc080ee72abed5f05b", "filename": "tests/target/configs-spaces_within_square_brackets-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-true.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: true\n-// Spaces within square-brackets\n-\n-fn main() {\n-    let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n-}"}, {"sha": "538d0d41a5e79211d42b2678223b5a0a716de0e4", "filename": "tests/target/space-before-bound.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspace-before-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspace-before-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspace-before-bound.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,22 +0,0 @@\n-// rustfmt-space_before_bound: true\n-\n-trait Trait {}\n-trait Trait2 {}\n-fn f<'a, 'b : 'a, T : Trait, U>()\n-where\n-    U : Trait2,\n-{\n-}\n-\n-// should fit on the line\n-fn f2<'a, 'b : 'a, Ttttttttttttttttttttttttttttttttttttttttttttttt : Trait, U>()\n-where\n-    U : Trait2,\n-{\n-}\n-// should be wrapped\n-fn f2<'a, 'b : 'a, Tttttttttttttttttttttttttttttttttttttttttttttttt : Trait, U>()\n-where\n-    U : Trait2,\n-{\n-}"}, {"sha": "0ad06dbb70c37efa46648b25e66014510045d59a", "filename": "tests/target/space-before-type-annotation.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspace-before-type-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspace-before-type-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspace-before-type-annotation.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,13 +0,0 @@\n-// rustfmt-space_before_type_annotation: true\n-\n-static staticVar : i32 = 42;\n-const constVar : i32 = 42;\n-fn foo(paramVar : i32) {\n-    let localVar : i32 = 42;\n-}\n-struct S {\n-    fieldVar : i32,\n-}\n-fn f() {\n-    S { fieldVar: 42 }\n-}"}, {"sha": "b07620fb4c17e67ba726f8982bce87ef305bdf25", "filename": "tests/target/space-not-after-type-annotation-colon.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspace-not-after-type-annotation-colon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspace-not-after-type-annotation-colon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspace-not-after-type-annotation-colon.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,14 +0,0 @@\n-// rustfmt-space_before_type_annotation: true\n-// rustfmt-space_after_type_annotation_colon: false\n-\n-static staticVar :i32 = 42;\n-const constVar :i32 = 42;\n-fn foo(paramVar :i32) {\n-    let localVar :i32 = 42;\n-}\n-struct S {\n-    fieldVar :i32,\n-}\n-fn f() {\n-    S { fieldVar: 42 }\n-}"}, {"sha": "ef48eca11149aef89c97431ea73b3221d48aaa49", "filename": "tests/target/space-not-before-bound-colon.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspace-not-before-bound-colon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspace-not-before-bound-colon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspace-not-before-bound-colon.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,5 +0,0 @@\n-// rustfmt-space_before_bound: true\n-// rustfmt-space_after_bound_colon: false\n-\n-trait Trait {}\n-fn f<'a, 'b :'a, T :Trait>() {}"}, {"sha": "89335b602a423f71695041221be800d1f3b482a0", "filename": "tests/target/spaces-within-angle-brackets.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspaces-within-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspaces-within-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-angle-brackets.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,61 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: true\n-\n-struct Foo< T > {\n-    i: T,\n-}\n-\n-struct Bar< T, E > {\n-    i: T,\n-    e: E,\n-}\n-\n-struct Foo< 'a > {\n-    i: &'a str,\n-}\n-\n-enum E< T > {\n-    T(T),\n-}\n-\n-enum E< T, S > {\n-    T(T),\n-    S(S),\n-}\n-\n-fn foo< T >(a: T) {\n-    foo::< u32 >(10);\n-}\n-\n-fn foo< T, E >(a: T, b: E) {\n-    foo::< u32, str >(10, \"bar\");\n-}\n-\n-fn foo< T: Send, E: Send >(a: T, b: E) {\n-    foo::< u32, str >(10, \"bar\");\n-\n-    let opt: Option< u32 >;\n-    let res: Result< u32, String >;\n-}\n-\n-fn foo< 'a >(a: &'a str) {\n-    foo(\"foo\");\n-}\n-\n-fn foo< 'a, 'b >(a: &'a str, b: &'b str) {\n-    foo(\"foo\", \"bar\");\n-}\n-\n-impl Foo {\n-    fn bar() {\n-        < Foo as Foo >::bar();\n-    }\n-}\n-\n-trait MyTrait< A, D > {}\n-impl< A: Send, D: Send > MyTrait< A, D > for Foo {}\n-\n-fn foo()\n-where\n-    for< 'a > u32: 'a,\n-{\n-}"}, {"sha": "651386c618bfd4d008e1dcc3be061462fd6f0469", "filename": "tests/target/spaces-within-parens.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspaces-within-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspaces-within-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-parens.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,45 +0,0 @@\n-// rustfmt-spaces_within_parens: true\n-\n-enum E {\n-    A( u32 ),\n-    B( u32, u32 ),\n-    C( u32, u32, u32 ),\n-    D(),\n-}\n-\n-struct TupleStruct0();\n-struct TupleStruct1( u32 );\n-struct TupleStruct2( u32, u32 );\n-\n-fn fooEmpty() {}\n-\n-fn foo( e: E, _: u32 ) -> ( u32, u32 ) {\n-    // Tuples\n-    let t1 = ();\n-    let t2 = ( 1, );\n-    let t3 = ( 1, 2 );\n-\n-    let ts0 = TupleStruct0();\n-    let ts1 = TupleStruct1( 1 );\n-    let ts2 = TupleStruct2( 1, 2 );\n-\n-    // Tuple pattern\n-    let ( a, b, c ) = ( 1, 2, 3 );\n-\n-    // Expressions\n-    let x = ( 1 + 2 ) * ( 3 );\n-\n-    // Function call\n-    fooEmpty();\n-    foo( 1, 2 );\n-\n-    // Pattern matching\n-    match e {\n-        A( _ ) => (),\n-        B( _, _ ) => (),\n-        C( .. ) => (),\n-        D => (),\n-    }\n-\n-    ( 1, 2 )\n-}"}, {"sha": "cb468d6b59e62b2a1388c93e2e7a21d823a0f3b7", "filename": "tests/target/spaces-within-square-brackets.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspaces-within-square-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad/tests%2Ftarget%2Fspaces-within-square-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-square-brackets.rs?ref=6a6e9a22bc8aa282c5e350a51ed17ce1ae2821ad", "patch": "@@ -1,35 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: true\n-\n-fn main() {\n-    let arr: [ i32; 5 ] = [ 1, 2, 3, 4, 5 ];\n-    let arr: [ i32; 500 ] = [ 0; 500 ];\n-\n-    let v = vec![ 1, 2, 3 ];\n-    assert_eq!(arr, [ 1, 2, 3 ]);\n-\n-    let i = arr[ 0 ];\n-\n-    let slice = &arr[ 1..2 ];\n-\n-    let line100_________________________________________________________________________ = [ 1, 2 ];\n-    let line101__________________________________________________________________________ =\n-        [ 1, 2 ];\n-    let line102___________________________________________________________________________ =\n-        [ 1, 2 ];\n-    let line103____________________________________________________________________________ =\n-        [ 1, 2 ];\n-    let line104_____________________________________________________________________________ =\n-        [ 1, 2 ];\n-\n-    let line100_____________________________________________________________________ = vec![ 1, 2 ];\n-    let line101______________________________________________________________________ =\n-        vec![ 1, 2 ];\n-    let line102_______________________________________________________________________ =\n-        vec![ 1, 2 ];\n-    let line103________________________________________________________________________ =\n-        vec![ 1, 2 ];\n-    let line104_________________________________________________________________________ =\n-        vec![ 1, 2 ];\n-}\n-\n-fn f(slice: &[ i32 ]) {}"}]}