{"sha": "07d0b578c15f600c7b798cc0295d74973c8ccb69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZDBiNTc4YzE1ZjYwMGM3Yjc5OGNjMDI5NWQ3NDk3M2M4Y2NiNjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-30T08:52:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-30T08:52:56Z"}, "message": "Rollup merge of #61279 - llogiq:implicit-option-main-doctests, r=GuillaumeGomez\n\nimplicit `Option`-returning doctests\n\nThis distinguishes `Option` and `Result`-returning doctests with implicit `main` method, where the former tests must end with `Some(())`.\n\nOpen question: Does this need a feature gate?\n\nr? @GuillaumeGomez", "tree": {"sha": "0419a5fafad7b8436d6e43d46b3c6a27617d897a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0419a5fafad7b8436d6e43d46b3c6a27617d897a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07d0b578c15f600c7b798cc0295d74973c8ccb69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc75npCRBK7hj4Ov3rIwAAdHIIAEkE+SG9YzYKD5fzicfE7F1E\n4bzuuECPVLhfW9BfY12T+gxGPHQiiAUTnNI7yJnHAfrqbAL9oDpf5DBXjBc5cfGG\nYrY/+PkGK+jnTi7Xcc2hiaNuXoiTIpTdpJTKqv3IySyVmjbdW0q/BJjSqvUHA1R1\nxSKQBNJf1P9Mnxu7SH9NTxKdoEAyk2m5+4MqVunzRy+mWTgqVEUmI5FgsQetMdrs\nLIAeq32HfdSecKOOjLlc3saDi/s5EmJt38vTDxnZ2kRnwvmZzqPxBVCj1dOMFmam\nFAMWS3S/HRUIr2+tDI/PuaNbcWR4STjaR9ZcRl44LIdFYGFScl2+VpY5oKgAUbk=\n=GqAj\n-----END PGP SIGNATURE-----\n", "payload": "tree 0419a5fafad7b8436d6e43d46b3c6a27617d897a\nparent 1b66a135402e6ef149941bfcb58aaf55051d30fc\nparent 6bb6c001be34d0932a014df981ee18f165c43374\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559206376 +0200\ncommitter GitHub <noreply@github.com> 1559206376 +0200\n\nRollup merge of #61279 - llogiq:implicit-option-main-doctests, r=GuillaumeGomez\n\nimplicit `Option`-returning doctests\n\nThis distinguishes `Option` and `Result`-returning doctests with implicit `main` method, where the former tests must end with `Some(())`.\n\nOpen question: Does this need a feature gate?\n\nr? @GuillaumeGomez\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07d0b578c15f600c7b798cc0295d74973c8ccb69", "html_url": "https://github.com/rust-lang/rust/commit/07d0b578c15f600c7b798cc0295d74973c8ccb69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07d0b578c15f600c7b798cc0295d74973c8ccb69/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b66a135402e6ef149941bfcb58aaf55051d30fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b66a135402e6ef149941bfcb58aaf55051d30fc", "html_url": "https://github.com/rust-lang/rust/commit/1b66a135402e6ef149941bfcb58aaf55051d30fc"}, {"sha": "6bb6c001be34d0932a014df981ee18f165c43374", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb6c001be34d0932a014df981ee18f165c43374", "html_url": "https://github.com/rust-lang/rust/commit/6bb6c001be34d0932a014df981ee18f165c43374"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "a896ce819aeb7e389c03d6aa7987e18940727435", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/07d0b578c15f600c7b798cc0295d74973c8ccb69/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/07d0b578c15f600c7b798cc0295d74973c8ccb69/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=07d0b578c15f600c7b798cc0295d74973c8ccb69", "patch": "@@ -253,6 +253,19 @@ conversion, so type inference fails because the type is not unique. Please note\n that you must write the `(())` in one sequence without intermediate whitespace\n so that rustdoc understands you want an implicit `Result`-returning function.\n \n+As of version 1.37.0, this simplification also works with `Option`s, which can\n+be handy to test e.g. iterators or checked arithmetic, for example:\n+\n+```ignore\n+/// ```\n+/// let _ = &[].iter().next()?;\n+///# Some(())\n+/// ```\n+```\n+\n+Note that the result must be a `Some(())` and this has to be written in one go.\n+In this case disambiguating the result isn't required.\n+\n ## Documenting macros\n \n Here\u2019s an example of documenting a macro:"}, {"sha": "5bce5d6ba5de1b264289dda9f60fa77cc50d22fb", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07d0b578c15f600c7b798cc0295d74973c8ccb69/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d0b578c15f600c7b798cc0295d74973c8ccb69/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=07d0b578c15f600c7b798cc0295d74973c8ccb69", "patch": "@@ -530,8 +530,13 @@ pub fn make_test(s: &str,\n         prog.push_str(everything_else);\n     } else {\n         let returns_result = everything_else.trim_end().ends_with(\"(())\");\n+        let returns_option = everything_else.trim_end().ends_with(\"Some(())\");\n         let (main_pre, main_post) = if returns_result {\n-            (\"fn main() { fn _inner() -> Result<(), impl core::fmt::Debug> {\",\n+            (if returns_option {\n+                \"fn main() { fn _inner() -> Option<()> {\"\n+            } else {\n+                \"fn main() { fn _inner() -> Result<(), impl core::fmt::Debug> {\"\n+            },\n              \"}\\n_inner().unwrap() }\")\n         } else {\n             (\"fn main() {\\n\", \"\\n}\")"}, {"sha": "31ae0143d4771aee9492a0333a3ad102f2bc6568", "filename": "src/test/rustdoc/process-termination.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07d0b578c15f600c7b798cc0295d74973c8ccb69/src%2Ftest%2Frustdoc%2Fprocess-termination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d0b578c15f600c7b798cc0295d74973c8ccb69/src%2Ftest%2Frustdoc%2Fprocess-termination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprocess-termination.rs?ref=07d0b578c15f600c7b798cc0295d74973c8ccb69", "patch": "@@ -21,4 +21,16 @@\n /// Err(\"This is returned from `main`, leading to panic\")?;\n /// Ok::<(), &'static str>(())\n /// ```\n+///\n+/// This also works with `Option<()>`s now:\n+///\n+/// ```rust\n+/// Some(())\n+/// ```\n+///\n+/// ```rust,should_panic\n+/// let x: &[u32] = &[];\n+/// let _ = x.iter().next()?;\n+/// Some(())\n+/// ```\n pub fn check_process_termination() {}"}]}