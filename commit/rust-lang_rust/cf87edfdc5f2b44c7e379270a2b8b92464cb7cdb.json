{"sha": "cf87edfdc5f2b44c7e379270a2b8b92464cb7cdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmODdlZGZkYzVmMmI0NGM3ZTM3OTI3MGEyYjhiOTI0NjRjYjdjZGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T17:28:47Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T19:57:12Z"}, "message": "pprust: unify extern & associated item printing", "tree": {"sha": "cc15e81a2bc7c14437a1a7c35e44f442f935e59b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc15e81a2bc7c14437a1a7c35e44f442f935e59b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf87edfdc5f2b44c7e379270a2b8b92464cb7cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf87edfdc5f2b44c7e379270a2b8b92464cb7cdb", "html_url": "https://github.com/rust-lang/rust/commit/cf87edfdc5f2b44c7e379270a2b8b92464cb7cdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf87edfdc5f2b44c7e379270a2b8b92464cb7cdb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e0c0286a2dfe62ca3093e68a77931bff8896b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e0c0286a2dfe62ca3093e68a77931bff8896b01", "html_url": "https://github.com/rust-lang/rust/commit/0e0c0286a2dfe62ca3093e68a77931bff8896b01"}], "stats": {"total": 62, "additions": 27, "deletions": 35}, "files": [{"sha": "0eea64dfe734de754f741e2ae11a6664902f4a98", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cf87edfdc5f2b44c7e379270a2b8b92464cb7cdb/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf87edfdc5f2b44c7e379270a2b8b92464cb7cdb/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=cf87edfdc5f2b44c7e379270a2b8b92464cb7cdb", "patch": "@@ -912,7 +912,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_foreign_mod(&mut self, nmod: &ast::ForeignMod, attrs: &[ast::Attribute]) {\n+    crate fn print_foreign_mod(&mut self, nmod: &ast::ForeignMod, attrs: &[Attribute]) {\n         self.print_inner_attributes(attrs);\n         for item in &nmod.items {\n             self.print_foreign_item(item);\n@@ -1016,21 +1016,37 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_foreign_item(&mut self, item: &ast::ForeignItem) {\n+        let ast::ForeignItem { id, span, ident, attrs, kind, vis, tokens: _ } = item;\n+        self.print_nested_item_kind(*id, *span, *ident, attrs, ast::Defaultness::Final, kind, vis);\n+    }\n+\n+    fn print_nested_item_kind(\n+        &mut self,\n+        id: ast::NodeId,\n+        span: Span,\n+        ident: ast::Ident,\n+        attrs: &[Attribute],\n+        defaultness: ast::Defaultness,\n+        kind: &ast::AssocItemKind,\n+        vis: &ast::Visibility,\n+    ) {\n+        self.ann.pre(self, AnnNode::SubItem(id));\n         self.hardbreak_if_not_bol();\n-        self.maybe_print_comment(item.span.lo());\n-        self.print_outer_attributes(&item.attrs);\n-        match &item.kind {\n+        self.maybe_print_comment(span.lo());\n+        self.print_outer_attributes(attrs);\n+        self.print_defaultness(defaultness);\n+        match kind {\n             ast::ForeignItemKind::Fn(sig, gen, body) => {\n-                self.print_fn_full(sig, item.ident, gen, &item.vis, body.as_deref(), &item.attrs);\n+                self.print_fn_full(sig, ident, gen, vis, body.as_deref(), attrs);\n             }\n             ast::ForeignItemKind::Const(ty, body) => {\n-                self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis);\n+                self.print_item_const(ident, None, ty, body.as_deref(), vis);\n             }\n             ast::ForeignItemKind::Static(ty, mutbl, body) => {\n-                self.print_item_const(item.ident, Some(*mutbl), ty, body.as_deref(), &item.vis);\n+                self.print_item_const(ident, Some(*mutbl), ty, body.as_deref(), vis);\n             }\n             ast::ForeignItemKind::TyAlias(generics, bounds, ty) => {\n-                self.print_associated_type(item.ident, generics, bounds, ty.as_deref());\n+                self.print_associated_type(ident, generics, bounds, ty.as_deref());\n             }\n             ast::ForeignItemKind::Macro(m) => {\n                 self.print_mac(m);\n@@ -1039,6 +1055,7 @@ impl<'a> State<'a> {\n                 }\n             }\n         }\n+        self.ann.post(self, AnnNode::SubItem(id))\n     }\n \n     fn print_item_const(\n@@ -1438,33 +1455,8 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_assoc_item(&mut self, item: &ast::AssocItem) {\n-        self.ann.pre(self, AnnNode::SubItem(item.id));\n-        self.hardbreak_if_not_bol();\n-        self.maybe_print_comment(item.span.lo());\n-        self.print_outer_attributes(&item.attrs);\n-        self.print_defaultness(item.defaultness);\n-        match &item.kind {\n-            ast::AssocItemKind::Static(ty, mutbl, expr) => {\n-                self.print_item_const(item.ident, Some(*mutbl), ty, expr.as_deref(), &item.vis);\n-            }\n-            ast::AssocItemKind::Const(ty, expr) => {\n-                self.print_item_const(item.ident, None, ty, expr.as_deref(), &item.vis);\n-            }\n-            ast::AssocItemKind::Fn(sig, generics, body) => {\n-                let body = body.as_deref();\n-                self.print_fn_full(sig, item.ident, generics, &item.vis, body, &item.attrs);\n-            }\n-            ast::AssocItemKind::TyAlias(generics, bounds, ty) => {\n-                self.print_associated_type(item.ident, generics, bounds, ty.as_deref());\n-            }\n-            ast::AssocItemKind::Macro(mac) => {\n-                self.print_mac(mac);\n-                if mac.args.need_semicolon() {\n-                    self.s.word(\";\");\n-                }\n-            }\n-        }\n-        self.ann.post(self, AnnNode::SubItem(item.id))\n+        let ast::AssocItem { id, span, ident, attrs, defaultness, kind, vis, tokens: _ } = item;\n+        self.print_nested_item_kind(*id, *span, *ident, attrs, *defaultness, kind, vis);\n     }\n \n     crate fn print_stmt(&mut self, st: &ast::Stmt) {"}]}