{"sha": "209eb8ae83105802be5ff2c1204a4d3aae9839b3", "node_id": "C_kwDOAAsO6NoAKDIwOWViOGFlODMxMDU4MDJiZTVmZjJjMTIwNGE0ZDNhYWU5ODM5YjM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-17T18:10:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-27T20:02:18Z"}, "message": "Do not grow `assignment_order` needlessly.", "tree": {"sha": "8f93b5a467a11e1e4342d7be84b5301eb5ae6b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f93b5a467a11e1e4342d7be84b5301eb5ae6b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/209eb8ae83105802be5ff2c1204a4d3aae9839b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/209eb8ae83105802be5ff2c1204a4d3aae9839b3", "html_url": "https://github.com/rust-lang/rust/commit/209eb8ae83105802be5ff2c1204a4d3aae9839b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/209eb8ae83105802be5ff2c1204a4d3aae9839b3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a32a2b64faf52b65080ea84b5bc110627294954", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a32a2b64faf52b65080ea84b5bc110627294954", "html_url": "https://github.com/rust-lang/rust/commit/2a32a2b64faf52b65080ea84b5bc110627294954"}], "stats": {"total": 114, "additions": 92, "deletions": 22}, "files": [{"sha": "73168652f8fa2b330b2d1d7202a2af529a2e0e7e", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/209eb8ae83105802be5ff2c1204a4d3aae9839b3/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209eb8ae83105802be5ff2c1204a4d3aae9839b3/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=209eb8ae83105802be5ff2c1204a4d3aae9839b3", "patch": "@@ -53,7 +53,7 @@ impl SsaLocals {\n         body: &Body<'tcx>,\n         borrowed_locals: &BitSet<Local>,\n     ) -> SsaLocals {\n-        let assignment_order = Vec::new();\n+        let assignment_order = Vec::with_capacity(body.local_decls.len());\n \n         let assignments = IndexVec::from_elem(Set1::Empty, &body.local_decls);\n         let dominators =\n@@ -203,7 +203,10 @@ impl<'tcx> Visitor<'tcx> for SsaVisitor {\n         match ctxt {\n             PlaceContext::MutatingUse(MutatingUseContext::Store) => {\n                 self.assignments[local].insert(LocationExtended::Plain(loc));\n-                self.assignment_order.push(local);\n+                if let Set1::One(_) = self.assignments[local] {\n+                    // Only record if SSA-like, to avoid growing the vector needlessly.\n+                    self.assignment_order.push(local);\n+                }\n             }\n             // Anything can happen with raw pointers, so remove them.\n             PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf)"}, {"sha": "6c32b675a5bcaa9225b0d629068bde89f57f7db7", "filename": "tests/mir-opt/copy-prop/reborrow.demiraw.CopyProp.diff", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/209eb8ae83105802be5ff2c1204a4d3aae9839b3/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/209eb8ae83105802be5ff2c1204a4d3aae9839b3/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.demiraw.CopyProp.diff?ref=209eb8ae83105802be5ff2c1204a4d3aae9839b3", "patch": "@@ -6,6 +6,8 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:23: +0:23\n       let _2: *mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n       let mut _4: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+2:22: +2:29\n+      let _6: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n+      let mut _7: *mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n       scope 1 {\n           debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n           let _3: &mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n@@ -31,11 +33,24 @@\n           StorageDead(_4);                 // scope 1 at $DIR/reborrow.rs:+2:31: +2:32\n -         StorageLive(_5);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n -         _5 = _2;                         // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:23: +4:2\n--         StorageDead(_5);                 // scope 2 at $DIR/reborrow.rs:+4:1: +4:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+4:1: +4:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+4:2: +4:2\n+          StorageLive(_6);                 // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n+-         StorageLive(_7);                 // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _7 = _5;                         // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _6 = opaque::<*mut u8>(move _7) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n++         _6 = opaque::<*mut u8>(_2) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/reborrow.rs:38:5: 38:11\n+                                           // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_7);                 // scope 4 at $DIR/reborrow.rs:+4:13: +4:14\n+          StorageDead(_6);                 // scope 4 at $DIR/reborrow.rs:+4:14: +4:15\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:23: +5:2\n+-         StorageDead(_5);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "2f1b522c2ec7b0d57d64db96d1a38c83e959da45", "filename": "tests/mir-opt/copy-prop/reborrow.miraw.CopyProp.diff", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/209eb8ae83105802be5ff2c1204a4d3aae9839b3/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/209eb8ae83105802be5ff2c1204a4d3aae9839b3/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.miraw.CopyProp.diff?ref=209eb8ae83105802be5ff2c1204a4d3aae9839b3", "patch": "@@ -5,6 +5,8 @@\n       debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n       let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n       let _2: *mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n+      let mut _6: *mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n       scope 1 {\n           debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n           let _3: *mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n@@ -27,11 +29,24 @@\n           _3 = &raw mut (*_2);             // scope 3 at $DIR/reborrow.rs:+2:22: +2:33\n -         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n -         _4 = _2;                         // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +4:2\n--         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+4:1: +4:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+4:1: +4:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+4:2: +4:2\n+          StorageLive(_5);                 // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n+-         StorageLive(_6);                 // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _6 = _4;                         // scope 4 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _5 = opaque::<*mut u8>(move _6) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n++         _5 = opaque::<*mut u8>(_2) -> bb1; // scope 4 at $DIR/reborrow.rs:+4:5: +4:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/reborrow.rs:30:5: 30:11\n+                                           // + literal: Const { ty: fn(*mut u8) {opaque::<*mut u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_6);                 // scope 4 at $DIR/reborrow.rs:+4:13: +4:14\n+          StorageDead(_5);                 // scope 4 at $DIR/reborrow.rs:+4:14: +4:15\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n+-         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "9b580c1f4e158597271cda67a3cb51ca5acb9317", "filename": "tests/mir-opt/copy-prop/reborrow.remut.CopyProp.diff", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/209eb8ae83105802be5ff2c1204a4d3aae9839b3/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/209eb8ae83105802be5ff2c1204a4d3aae9839b3/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.remut.CopyProp.diff?ref=209eb8ae83105802be5ff2c1204a4d3aae9839b3", "patch": "@@ -5,6 +5,8 @@\n       debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n       let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n       let _2: &mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n+      let mut _6: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n       scope 1 {\n           debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n           let _3: &mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n@@ -25,11 +27,24 @@\n           _3 = &mut (*_2);                 // scope 1 at $DIR/reborrow.rs:+2:13: +2:20\n -         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n -         _4 = move _2;                    // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +4:2\n--         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+4:1: +4:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+4:1: +4:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+4:2: +4:2\n+          StorageLive(_5);                 // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n+-         StorageLive(_6);                 // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _6 = move _4;                    // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _5 = opaque::<&mut u8>(move _6) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n++         _5 = opaque::<&mut u8>(move _2) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/reborrow.rs:14:5: 14:11\n+                                           // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_6);                 // scope 3 at $DIR/reborrow.rs:+4:13: +4:14\n+          StorageDead(_5);                 // scope 3 at $DIR/reborrow.rs:+4:14: +4:15\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n+-         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "cff4a176098b42a3286adcd3ca5440184499dc11", "filename": "tests/mir-opt/copy-prop/reborrow.reraw.CopyProp.diff", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/209eb8ae83105802be5ff2c1204a4d3aae9839b3/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/209eb8ae83105802be5ff2c1204a4d3aae9839b3/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.reraw.CopyProp.diff?ref=209eb8ae83105802be5ff2c1204a4d3aae9839b3", "patch": "@@ -5,6 +5,8 @@\n       debug x => _1;                       // in scope 0 at $DIR/reborrow.rs:+0:10: +0:15\n       let mut _0: ();                      // return place in scope 0 at $DIR/reborrow.rs:+0:21: +0:21\n       let _2: &mut u8;                     // in scope 0 at $DIR/reborrow.rs:+1:9: +1:10\n+      let _5: ();                          // in scope 0 at $DIR/reborrow.rs:+4:5: +4:14\n+      let mut _6: &mut u8;                 // in scope 0 at $DIR/reborrow.rs:+4:12: +4:13\n       scope 1 {\n           debug a => _2;                   // in scope 1 at $DIR/reborrow.rs:+1:9: +1:10\n           let _3: *mut u8;                 // in scope 1 at $DIR/reborrow.rs:+2:9: +2:10\n@@ -25,11 +27,24 @@\n           _3 = &raw mut (*_2);             // scope 1 at $DIR/reborrow.rs:+2:13: +2:24\n -         StorageLive(_4);                 // scope 2 at $DIR/reborrow.rs:+3:9: +3:10\n -         _4 = move _2;                    // scope 2 at $DIR/reborrow.rs:+3:13: +3:14\n-          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +4:2\n--         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+4:1: +4:2\n-          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+4:1: +4:2\n--         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/reborrow.rs:+4:2: +4:2\n+          StorageLive(_5);                 // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n+-         StorageLive(_6);                 // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _6 = move _4;                    // scope 3 at $DIR/reborrow.rs:+4:12: +4:13\n+-         _5 = opaque::<&mut u8>(move _6) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n++         _5 = opaque::<&mut u8>(move _2) -> bb1; // scope 3 at $DIR/reborrow.rs:+4:5: +4:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/reborrow.rs:22:5: 22:11\n+                                           // + literal: Const { ty: fn(&mut u8) {opaque::<&mut u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_6);                 // scope 3 at $DIR/reborrow.rs:+4:13: +4:14\n+          StorageDead(_5);                 // scope 3 at $DIR/reborrow.rs:+4:14: +4:15\n+          _0 = const ();                   // scope 0 at $DIR/reborrow.rs:+0:21: +5:2\n+-         StorageDead(_4);                 // scope 2 at $DIR/reborrow.rs:+5:1: +5:2\n+          StorageDead(_3);                 // scope 1 at $DIR/reborrow.rs:+5:1: +5:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/reborrow.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/reborrow.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "c2926b8fa518a3e8fdbb7894423981ff8f891ded", "filename": "tests/mir-opt/copy-prop/reborrow.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/209eb8ae83105802be5ff2c1204a4d3aae9839b3/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209eb8ae83105802be5ff2c1204a4d3aae9839b3/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Freborrow.rs?ref=209eb8ae83105802be5ff2c1204a4d3aae9839b3", "patch": "@@ -3,32 +3,39 @@\n \n #![feature(raw_ref_op)]\n \n+#[inline(never)]\n+fn opaque(_: impl Sized) {}\n+\n // EMIT_MIR reborrow.remut.CopyProp.diff\n fn remut(mut x: u8) {\n     let a = &mut x;\n     let b = &mut *a; //< this cannot mutate a.\n     let c = a; //< so `c` and `a` can be merged.\n+    opaque(c);\n }\n \n // EMIT_MIR reborrow.reraw.CopyProp.diff\n fn reraw(mut x: u8) {\n     let a = &mut x;\n     let b = &raw mut *a; //< this cannot mutate a.\n     let c = a; //< so `c` and `a` can be merged.\n+    opaque(c);\n }\n \n // EMIT_MIR reborrow.miraw.CopyProp.diff\n fn miraw(mut x: u8) {\n     let a = &raw mut x;\n     let b = unsafe { &raw mut *a }; //< this cannot mutate a.\n     let c = a; //< so `c` and `a` can be merged.\n+    opaque(c);\n }\n \n // EMIT_MIR reborrow.demiraw.CopyProp.diff\n fn demiraw(mut x: u8) {\n     let a = &raw mut x;\n     let b = unsafe { &mut *a }; //< this cannot mutate a.\n     let c = a; //< so `c` and `a` can be merged.\n+    opaque(c);\n }\n \n fn main() {"}]}