{"sha": "b704ce803b99f0c69bbcd3d4ab531d2604de8594", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MDRjZTgwM2I5OWYwYzY5YmJjZDNkNGFiNTMxZDI2MDRkZTg1OTQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-30T19:19:31Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-30T19:19:31Z"}, "message": "Merge #702\n\n702: Go to Implementation r=matklad a=kjeremy\n\nFirst half of #620\n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "4b347869363f7d7fef0f16ab5f56c7be9c94952a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b347869363f7d7fef0f16ab5f56c7be9c94952a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b704ce803b99f0c69bbcd3d4ab531d2604de8594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b704ce803b99f0c69bbcd3d4ab531d2604de8594", "html_url": "https://github.com/rust-lang/rust/commit/b704ce803b99f0c69bbcd3d4ab531d2604de8594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b704ce803b99f0c69bbcd3d4ab531d2604de8594/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "897e74f089ee4c13aeca6f0244c7809c1b631a34", "url": "https://api.github.com/repos/rust-lang/rust/commits/897e74f089ee4c13aeca6f0244c7809c1b631a34", "html_url": "https://github.com/rust-lang/rust/commit/897e74f089ee4c13aeca6f0244c7809c1b631a34"}, {"sha": "04eb15856bd183db3a1785b7cb74e0c32fd78a39", "url": "https://api.github.com/repos/rust-lang/rust/commits/04eb15856bd183db3a1785b7cb74e0c32fd78a39", "html_url": "https://github.com/rust-lang/rust/commit/04eb15856bd183db3a1785b7cb74e0c32fd78a39"}], "stats": {"total": 294, "additions": 277, "deletions": 17}, "files": [{"sha": "cffc0095321608622d419b17059fab8a46bb5d62", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -120,7 +120,7 @@ and trait selection) to the existing rustc.\n - [ ] [textDocument/declaration](https://microsoft.github.io/language-server-protocol/specification#textDocument_declaration)\n - [x] [textDocument/definition](https://microsoft.github.io/language-server-protocol/specification#textDocument_definition)\n - [ ] [textDocument/typeDefinition](https://microsoft.github.io/language-server-protocol/specification#textDocument_typeDefinition)\n-- [ ] [textDocument/implementation](https://microsoft.github.io/language-server-protocol/specification#textDocument_implementation)\n+- [x] [textDocument/implementation](https://microsoft.github.io/language-server-protocol/specification#textDocument_implementation)\n - [x] [textDocument/references](https://microsoft.github.io/language-server-protocol/specification#textDocument_references)\n - [x] [textDocument/documentHighlight](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentHighlight)\n - [x] [textDocument/documentSymbol](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentSymbol)"}, {"sha": "53e84429c3e555bdaf7fe392eadb9b663af5a9ac", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -10,12 +10,13 @@ use crate::{\n     nameres::{ModuleScope, lower::ImportId},\n     db::HirDatabase,\n     expr::BodySyntaxMapping,\n-    ty::InferenceResult,\n+    ty::{InferenceResult},\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n     generics::GenericParams,\n     docs::{Documentation, Docs, docs_from_ast},\n     module_tree::ModuleId,\n     ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeId},\n+    impl_block::ImplId,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -126,6 +127,11 @@ impl Module {\n         self.import_source_impl(db, import)\n     }\n \n+    /// Returns the syntax of the impl block in this module\n+    pub fn impl_source(&self, db: &impl HirDatabase, impl_id: ImplId) -> TreeArc<ast::ImplBlock> {\n+        self.impl_source_impl(db, impl_id)\n+    }\n+\n     /// Returns the crate this module is part of.\n     pub fn krate(&self, db: &impl HirDatabase) -> Option<Crate> {\n         self.krate_impl(db)\n@@ -272,6 +278,10 @@ impl Struct {\n     pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n+\n+    pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n+        db.type_for_def((*self).into())\n+    }\n }\n \n impl Docs for Struct {\n@@ -317,6 +327,10 @@ impl Enum {\n     pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n         db.generic_params((*self).into())\n     }\n+\n+    pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n+        db.type_for_def((*self).into())\n+    }\n }\n \n impl Docs for Enum {"}, {"sha": "c6f85ac82c29a7948671849dd3265cd1bf5944a9", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -5,6 +5,7 @@ use crate::{\n     Module, ModuleSource, Problem,\n     Crate, Name,\n     module_tree::ModuleId,\n+    impl_block::ImplId,\n     nameres::{lower::ImportId},\n     db::HirDatabase,\n };\n@@ -51,11 +52,21 @@ impl Module {\n         db: &impl HirDatabase,\n         import: ImportId,\n     ) -> TreeArc<ast::PathSegment> {\n-        let source_map = db.lower_module_source_map(self.clone());\n+        let source_map = db.lower_module_source_map(*self);\n         let (_, source) = self.definition_source(db);\n         source_map.get(&source, import)\n     }\n \n+    pub(crate) fn impl_source_impl(\n+        &self,\n+        db: &impl HirDatabase,\n+        impl_id: ImplId,\n+    ) -> TreeArc<ast::ImplBlock> {\n+        let source_map = db.impls_in_module_source_map(*self);\n+        let (_, source) = self.definition_source(db);\n+        source_map.get(&source, impl_id)\n+    }\n+\n     pub(crate) fn krate_impl(&self, _db: &impl HirDatabase) -> Option<Crate> {\n         Some(Crate::new(self.krate))\n     }"}, {"sha": "70d9de2121a20777ffa75a7404d01bba1144087d", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -14,7 +14,7 @@ use crate::{\n     nameres::{ItemMap, lower::{LoweredModule, ImportSourceMap}},\n     ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef},\n     adt::{StructData, EnumData},\n-    impl_block::ModuleImplBlocks,\n+    impl_block::{ModuleImplBlocks, ImplSourceMap},\n     generics::{GenericParams, GenericDef},\n     ids::SourceFileItemId,\n };\n@@ -73,9 +73,18 @@ pub trait HirDatabase: SourceDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(crate::module_tree::ModuleTree::module_tree_query)]\n     fn module_tree(&self, crate_id: CrateId) -> Arc<ModuleTree>;\n \n+    #[salsa::invoke(crate::impl_block::impls_in_module_with_source_map_query)]\n+    fn impls_in_module_with_source_map(\n+        &self,\n+        module: Module,\n+    ) -> (Arc<ModuleImplBlocks>, Arc<ImplSourceMap>);\n+\n     #[salsa::invoke(crate::impl_block::impls_in_module)]\n     fn impls_in_module(&self, module: Module) -> Arc<ModuleImplBlocks>;\n \n+    #[salsa::invoke(crate::impl_block::impls_in_module_source_map_query)]\n+    fn impls_in_module_source_map(&self, module: Module) -> Arc<ImplSourceMap>;\n+\n     #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;\n "}, {"sha": "5fc26324a896aea51441e088c30d2f3aa08342b6", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -1,8 +1,10 @@\n use std::sync::Arc;\n use rustc_hash::FxHashMap;\n \n-use ra_arena::{Arena, RawId, impl_arena_id};\n-use ra_syntax::ast::{self, AstNode};\n+use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n+use ra_syntax::{\n+    AstPtr, SourceFile, TreeArc,\n+ast::{self, AstNode}};\n \n use crate::{\n     Const, Type,\n@@ -14,6 +16,26 @@ use crate::{\n \n use crate::code_model_api::{Module, ModuleSource};\n \n+#[derive(Debug, Default, PartialEq, Eq)]\n+pub struct ImplSourceMap {\n+    map: ArenaMap<ImplId, AstPtr<ast::ImplBlock>>,\n+}\n+\n+impl ImplSourceMap {\n+    fn insert(&mut self, impl_id: ImplId, impl_block: &ast::ImplBlock) {\n+        self.map.insert(impl_id, AstPtr::new(impl_block))\n+    }\n+\n+    pub fn get(&self, source: &ModuleSource, impl_id: ImplId) -> TreeArc<ast::ImplBlock> {\n+        let file = match source {\n+            ModuleSource::SourceFile(file) => &*file,\n+            ModuleSource::Module(m) => m.syntax().ancestors().find_map(SourceFile::cast).unwrap(),\n+        };\n+\n+        self.map[impl_id].to_node(file).to_owned()\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImplBlock {\n     module_impl_blocks: Arc<ModuleImplBlocks>,\n@@ -39,6 +61,10 @@ impl ImplBlock {\n         }\n     }\n \n+    pub fn id(&self) -> ImplId {\n+        self.impl_id\n+    }\n+\n     fn impl_data(&self) -> &ImplData {\n         &self.module_impl_blocks.impls[self.impl_id]\n     }\n@@ -148,7 +174,7 @@ impl ModuleImplBlocks {\n         }\n     }\n \n-    fn collect(&mut self, db: &impl HirDatabase, module: Module) {\n+    fn collect(&mut self, db: &impl HirDatabase, module: Module, source_map: &mut ImplSourceMap) {\n         let (file_id, module_source) = module.definition_source(db);\n         let file_id: HirFileId = file_id.into();\n         let node = match &module_source {\n@@ -165,12 +191,31 @@ impl ModuleImplBlocks {\n             for &impl_item in &self.impls[id].items {\n                 self.impls_by_def.insert(impl_item, id);\n             }\n+\n+            source_map.insert(id, impl_block_ast);\n         }\n     }\n }\n \n-pub(crate) fn impls_in_module(db: &impl HirDatabase, module: Module) -> Arc<ModuleImplBlocks> {\n+pub(crate) fn impls_in_module_with_source_map_query(\n+    db: &impl HirDatabase,\n+    module: Module,\n+) -> (Arc<ModuleImplBlocks>, Arc<ImplSourceMap>) {\n+    let mut source_map = ImplSourceMap::default();\n+\n     let mut result = ModuleImplBlocks::new();\n-    result.collect(db, module);\n-    Arc::new(result)\n+    result.collect(db, module, &mut source_map);\n+\n+    (Arc::new(result), Arc::new(source_map))\n+}\n+\n+pub(crate) fn impls_in_module(db: &impl HirDatabase, module: Module) -> Arc<ModuleImplBlocks> {\n+    db.impls_in_module_with_source_map(module).0\n+}\n+\n+pub(crate) fn impls_in_module_source_map_query(\n+    db: &impl HirDatabase,\n+    module: Module,\n+) -> Arc<ImplSourceMap> {\n+    db.impls_in_module_with_source_map(module).1\n }"}, {"sha": "589efd023117aba5ff8b2b012e53a503ef39096d", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    HirDatabase, Function, ModuleDef,\n+    HirDatabase, Function, ModuleDef, Struct, Enum,\n     AsName, Module, HirFileId,\n     ids::{LocationCtx, SourceFileItemId},\n };\n@@ -128,6 +128,28 @@ pub fn function_from_child_node(\n     function_from_source(db, file_id, fn_def)\n }\n \n+pub fn struct_from_module(\n+    db: &impl HirDatabase,\n+    module: Module,\n+    struct_def: &ast::StructDef,\n+) -> Struct {\n+    let (file_id, _) = module.definition_source(db);\n+    let file_id = file_id.into();\n+    let ctx = LocationCtx::new(db, module, file_id);\n+    Struct {\n+        id: ctx.to_def(struct_def),\n+    }\n+}\n+\n+pub fn enum_from_module(db: &impl HirDatabase, module: Module, enum_def: &ast::EnumDef) -> Enum {\n+    let (file_id, _) = module.definition_source(db);\n+    let file_id = file_id.into();\n+    let ctx = LocationCtx::new(db, module, file_id);\n+    Enum {\n+        id: ctx.to_def(enum_def),\n+    }\n+}\n+\n pub fn macro_symbols(db: &impl HirDatabase, file_id: FileId) -> Vec<(SmolStr, TextRange)> {\n     let module = match module_from_file_id(db, file_id) {\n         Some(it) => it,"}, {"sha": "d70a24582823f74672faa8b96fd177913671dd26", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -44,7 +44,7 @@ impl CrateImplBlocks {\n         &'a self,\n         db: &'a impl HirDatabase,\n         ty: &Ty,\n-    ) -> impl Iterator<Item = ImplBlock> + 'a {\n+    ) -> impl Iterator<Item = (Module, ImplBlock)> + 'a {\n         let fingerprint = TyFingerprint::for_impl(ty);\n         fingerprint\n             .and_then(|f| self.impls.get(&f))\n@@ -56,7 +56,7 @@ impl CrateImplBlocks {\n                     module_id: *module_id,\n                 };\n                 let module_impl_blocks = db.impls_in_module(module);\n-                ImplBlock::from_id(module_impl_blocks, *impl_id)\n+                (module, ImplBlock::from_id(module_impl_blocks, *impl_id))\n             })\n     }\n \n@@ -152,7 +152,7 @@ impl Ty {\n             };\n             let impls = db.impls_in_crate(krate);\n \n-            for impl_block in impls.lookup_impl_blocks(db, &derefed_ty) {\n+            for (_, impl_block) in impls.lookup_impl_blocks(db, &derefed_ty) {\n                 for item in impl_block.items() {\n                     match item {\n                         ImplItem::Method(f) => {"}, {"sha": "469d56d63acd091143ba13960a5b4e7f376daa13", "filename": "crates/ra_ide_api/src/impls.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -0,0 +1,120 @@\n+use ra_db::{SourceDatabase};\n+use ra_syntax::{\n+    AstNode, ast,\n+    algo::find_node_at_offset,\n+};\n+use hir::{db::HirDatabase, source_binder};\n+\n+use crate::{FilePosition, NavigationTarget, db::RootDatabase, RangeInfo};\n+\n+pub(crate) fn goto_implementation(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n+    let file = db.parse(position.file_id);\n+    let syntax = file.syntax();\n+\n+    let module = source_binder::module_from_position(db, position)?;\n+    let krate = module.krate(db)?;\n+\n+    let node = find_node_at_offset::<ast::NominalDef>(syntax, position.offset)?;\n+    let ty = match node.kind() {\n+        ast::NominalDefKind::StructDef(def) => {\n+            source_binder::struct_from_module(db, module, &def).ty(db)\n+        }\n+        ast::NominalDefKind::EnumDef(def) => {\n+            source_binder::enum_from_module(db, module, &def).ty(db)\n+        }\n+    };\n+\n+    let impls = db.impls_in_crate(krate);\n+\n+    let navs = impls\n+        .lookup_impl_blocks(db, &ty)\n+        .map(|(module, imp)| NavigationTarget::from_impl_block(db, module, &imp));\n+\n+    Some(RangeInfo::new(node.syntax().range(), navs.collect()))\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::mock_analysis::analysis_and_position;\n+\n+    fn check_goto(fixuture: &str, expected: &[&str]) {\n+        let (analysis, pos) = analysis_and_position(fixuture);\n+\n+        let navs = analysis.goto_implementation(pos).unwrap().unwrap().info;\n+        assert_eq!(navs.len(), expected.len());\n+        navs.into_iter()\n+            .enumerate()\n+            .for_each(|(i, nav)| nav.assert_match(expected[i]));\n+    }\n+\n+    #[test]\n+    fn goto_implementation_works() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo<|>;\n+            impl Foo {}\n+            \",\n+            &[\"impl IMPL_BLOCK FileId(1) [12; 23)\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_implementation_works_multiple_blocks() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo<|>;\n+            impl Foo {}\n+            impl Foo {}\n+            \",\n+            &[\n+                \"impl IMPL_BLOCK FileId(1) [12; 23)\",\n+                \"impl IMPL_BLOCK FileId(1) [24; 35)\",\n+            ],\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_implementation_works_multiple_mods() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo<|>;\n+            mod a {\n+                impl super::Foo {}\n+            }\n+            mod b {\n+                impl super::Foo {}\n+            }\n+            \",\n+            &[\n+                \"impl IMPL_BLOCK FileId(1) [24; 42)\",\n+                \"impl IMPL_BLOCK FileId(1) [57; 75)\",\n+            ],\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_implementation_works_multiple_files() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo<|>;\n+            mod a;\n+            mod b;\n+            //- /a.rs\n+            impl crate::Foo {}\n+            //- /b.rs\n+            impl crate::Foo {}\n+            \",\n+            &[\n+                \"impl IMPL_BLOCK FileId(2) [0; 18)\",\n+                \"impl IMPL_BLOCK FileId(3) [0; 18)\",\n+            ],\n+        );\n+    }\n+}"}, {"sha": "5d8acf9df0ffd52d2c6320c771fea9b94918473c", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -25,6 +25,7 @@ mod call_info;\n mod syntax_highlighting;\n mod parent_module;\n mod rename;\n+mod impls;\n \n #[cfg(test)]\n mod marks;\n@@ -416,6 +417,13 @@ impl Analysis {\n         self.with_db(|db| goto_definition::goto_definition(db, position))\n     }\n \n+    pub fn goto_implementation(\n+        &self,\n+        position: FilePosition,\n+    ) -> Cancelable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n+        self.with_db(|db| impls::goto_implementation(db, position))\n+    }\n+\n     /// Finds all usages of the reference at point.\n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n         self.with_db(|db| db.find_all_refs(position))"}, {"sha": "5ccb5cc2e3c05fc7d27582a5ed9de78358a174be", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -147,6 +147,16 @@ impl NavigationTarget {\n         }\n     }\n \n+    pub(crate) fn from_impl_block(\n+        db: &RootDatabase,\n+        module: hir::Module,\n+        impl_block: &hir::ImplBlock,\n+    ) -> NavigationTarget {\n+        let (file_id, _) = module.definition_source(db);\n+        let node = module.impl_source(db, impl_block.id());\n+        NavigationTarget::from_syntax(file_id, \"impl\".into(), None, node.syntax())\n+    }\n+\n     #[cfg(test)]\n     pub(crate) fn assert_match(&self, expected: &str) {\n         let actual = self.debug_render();"}, {"sha": "254624487350d115e17b7d4a97565f378236bc47", "filename": "crates/ra_lsp_server/src/caps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -2,7 +2,7 @@ use lsp_types::{\n     CodeActionProviderCapability, CodeLensOptions, CompletionOptions, DocumentOnTypeFormattingOptions,\n     ExecuteCommandOptions, FoldingRangeProviderCapability, RenameOptions, RenameProviderCapability,\n     ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n-    TextDocumentSyncOptions,\n+    TextDocumentSyncOptions, ImplementationProviderCapability,\n };\n \n pub fn server_capabilities() -> ServerCapabilities {\n@@ -26,7 +26,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         }),\n         definition_provider: Some(true),\n         type_definition_provider: None,\n-        implementation_provider: None,\n+        implementation_provider: Some(ImplementationProviderCapability::Simple(true)),\n         references_provider: Some(true),\n         document_highlight_provider: Some(true),\n         document_symbol_provider: Some(true),"}, {"sha": "df390c19e36a55d5e88bfd9aa738a0f89bdb8492", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -305,6 +305,7 @@ fn on_request(\n         .on::<req::DocumentSymbolRequest>(handlers::handle_document_symbol)?\n         .on::<req::WorkspaceSymbol>(handlers::handle_workspace_symbol)?\n         .on::<req::GotoDefinition>(handlers::handle_goto_definition)?\n+        .on::<req::GotoImplementation>(handlers::handle_goto_implementation)?\n         .on::<req::ParentModule>(handlers::handle_parent_module)?\n         .on::<req::Runnables>(handlers::handle_runnables)?\n         .on::<req::DecorationsRequest>(handlers::handle_decorations)?"}, {"sha": "74554f15c61eca0d53ef34eaba8da5bee574080b", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -229,6 +229,26 @@ pub fn handle_goto_definition(\n     Ok(Some(req::GotoDefinitionResponse::Link(res)))\n }\n \n+pub fn handle_goto_implementation(\n+    world: ServerWorld,\n+    params: req::TextDocumentPositionParams,\n+) -> Result<Option<req::GotoImplementationResponse>> {\n+    let position = params.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(position.file_id);\n+    let nav_info = match world.analysis().goto_implementation(position)? {\n+        None => return Ok(None),\n+        Some(it) => it,\n+    };\n+    let nav_range = nav_info.range;\n+    let res = nav_info\n+        .info\n+        .into_iter()\n+        .map(|nav| RangeInfo::new(nav_range, nav))\n+        .map(|nav| to_location_link(&nav, &world, &line_index))\n+        .collect::<Result<Vec<_>>>()?;\n+    Ok(Some(req::GotoDefinitionResponse::Link(res)))\n+}\n+\n pub fn handle_parent_module(\n     world: ServerWorld,\n     params: req::TextDocumentPositionParams,"}, {"sha": "e224ede8027b0e97f5272b3b6fd543af08bd3285", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b704ce803b99f0c69bbcd3d4ab531d2604de8594/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=b704ce803b99f0c69bbcd3d4ab531d2604de8594", "patch": "@@ -8,7 +8,7 @@ pub use lsp_types::{\n     CompletionParams, CompletionResponse, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n     DocumentSymbolResponse, ExecuteCommandParams, Hover, InitializeResult,\n     PublishDiagnosticsParams, ReferenceParams, SignatureHelp, TextDocumentEdit,\n-    TextDocumentPositionParams, TextEdit, WorkspaceEdit, WorkspaceSymbolParams,\n+    TextDocumentPositionParams, TextEdit, WorkspaceEdit, WorkspaceSymbolParams\n };\n \n pub enum AnalyzerStatus {}"}]}