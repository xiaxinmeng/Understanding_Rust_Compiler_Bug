{"sha": "f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "node_id": "C_kwDOAAsO6NoAKGY5MDQ4NGRmOGFkNTJmNzNjNGYyOGNmM2U0OTI0YzJiZmE2NjhhMzg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-28T10:12:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-28T10:12:10Z"}, "message": "Rollup merge of #104732 - WaffleLapkin:from_def_idn't, r=compiler-errors\n\nRefactor `ty::ClosureKind` related stuff\n\nI've tried to fix all duplication and weirdness, but if I missed something do tell :p\n\nr? `@compiler-errors`", "tree": {"sha": "ca6e48d5fb72c095cd12f7ce47b5a14bf001321f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca6e48d5fb72c095cd12f7ce47b5a14bf001321f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhIl6CRBK7hj4Ov3rIwAAgkYIAEhFB4g/oNeEmAQkGGS9LlzP\n0CrEVcTsiQIc17wT6AzlBsgYyhb7phSQS/KXGZ+9wpWwSfUkG47JNEiljyHFmuv/\nFjwFpM7/L6SgqID9RquaVl7MZ7ouGkshn6Z/7JfiDyNlw89Cck0fFSCg526pjVD+\nV339fG8E00h+T+r2Nh+kIK/wgUt6waNXuF4pk24oEZGw0gXy4KZtL7KcQ3wpfeUc\nBVd7eW4AHqmUbVI6ZJ5tWk/5YWTgrWCLp2+YbdADI7NyIfwnjgLpU/r53dg1xk7N\nK5Zew9R3iY8Mg7OusE8YkrYy3JldLwhhWKBsZvmmfAozRkXaqvk0NrWN1iHS81s=\n=tWMa\n-----END PGP SIGNATURE-----\n", "payload": "tree ca6e48d5fb72c095cd12f7ce47b5a14bf001321f\nparent f33d4094f014e10bdfeacc48fbe2368df9a0d18c\nparent 5ba0056346a745e61cb2cb90d69a3304a255ff42\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1669630330 +0530\ncommitter GitHub <noreply@github.com> 1669630330 +0530\n\nRollup merge of #104732 - WaffleLapkin:from_def_idn't, r=compiler-errors\n\nRefactor `ty::ClosureKind` related stuff\n\nI've tried to fix all duplication and weirdness, but if I missed something do tell :p\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "html_url": "https://github.com/rust-lang/rust/commit/f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f33d4094f014e10bdfeacc48fbe2368df9a0d18c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f33d4094f014e10bdfeacc48fbe2368df9a0d18c", "html_url": "https://github.com/rust-lang/rust/commit/f33d4094f014e10bdfeacc48fbe2368df9a0d18c"}, {"sha": "5ba0056346a745e61cb2cb90d69a3304a255ff42", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba0056346a745e61cb2cb90d69a3304a255ff42", "html_url": "https://github.com/rust-lang/rust/commit/5ba0056346a745e61cb2cb90d69a3304a255ff42"}], "stats": {"total": 108, "additions": 46, "deletions": 62}, "files": [{"sha": "e584d413c4190688fe8559af7bd28987f6e478ba", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 });\n                 let kind = object_type\n                     .principal_def_id()\n-                    .and_then(|did| self.tcx.fn_trait_kind_from_lang_item(did));\n+                    .and_then(|did| self.tcx.fn_trait_kind_from_def_id(did));\n                 (sig, kind)\n             }\n             ty::Infer(ty::TyVar(vid)) => self.deduce_signature_from_predicates(\n@@ -235,7 +235,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => None,\n             };\n             if let Some(closure_kind) =\n-                trait_def_id.and_then(|def_id| self.tcx.fn_trait_kind_from_lang_item(def_id))\n+                trait_def_id.and_then(|def_id| self.tcx.fn_trait_kind_from_def_id(def_id))\n             {\n                 expected_kind = Some(\n                     expected_kind\n@@ -263,7 +263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let trait_def_id = projection.trait_def_id(tcx);\n \n-        let is_fn = tcx.fn_trait_kind_from_lang_item(trait_def_id).is_some();\n+        let is_fn = tcx.is_fn_trait(trait_def_id);\n         let gen_trait = tcx.require_lang_item(LangItem::Generator, cause_span);\n         let is_gen = gen_trait == trait_def_id;\n         if !is_fn && !is_gen {"}, {"sha": "86384c7b93e717692b04087fe27038904e501673", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -2089,7 +2089,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && let maybe_trait_item_def_id = assoc_item.trait_item_def_id.unwrap_or(def_id)\n             && let maybe_trait_def_id = self.tcx.parent(maybe_trait_item_def_id)\n             // Just an easy way to check \"trait_def_id == Fn/FnMut/FnOnce\"\n-            && let Some(call_kind) = ty::ClosureKind::from_def_id(self.tcx, maybe_trait_def_id)\n+            && let Some(call_kind) = self.tcx.fn_trait_kind_from_def_id(maybe_trait_def_id)\n             && let Some(callee_ty) = callee_ty\n         {\n             let callee_ty = callee_ty.peel_refs();\n@@ -2115,7 +2115,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         {\n                             if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) = predicate.kind().skip_binder()\n                                 && pred.self_ty().peel_refs() == callee_ty\n-                                && ty::ClosureKind::from_def_id(self.tcx, pred.def_id()).is_some()\n+                                && self.tcx.is_fn_trait(pred.def_id())\n                             {\n                                 err.span_note(span, \"callable defined here\");\n                                 return;"}, {"sha": "1f554c81eff8e1941453d2f0a544ec245cd16d51", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -399,10 +399,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 self_ty.highlight.maybe_highlighting_region(vid, actual_has_vid);\n \n                 if self_ty.value.is_closure()\n-                    && self\n-                        .tcx()\n-                        .fn_trait_kind_from_lang_item(expected_trait_ref.value.def_id)\n-                        .is_some()\n+                    && self.tcx().is_fn_trait(expected_trait_ref.value.def_id)\n                 {\n                     let closure_sig = self_ty.map(|closure| {\n                         if let ty::Closure(_, substs) = closure.kind() {"}, {"sha": "343ea1f00f58bc7c4b982485e284593cb13e8c5f", "filename": "compiler/rustc_middle/src/middle/lang_items.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -27,7 +27,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n-    pub fn fn_trait_kind_from_lang_item(self, id: DefId) -> Option<ty::ClosureKind> {\n+    /// Given a [`DefId`] of a [`Fn`], [`FnMut`] or [`FnOnce`] traits,\n+    /// returns a corresponding [`ty::ClosureKind`].\n+    /// For any other [`DefId`] return `None`.\n+    pub fn fn_trait_kind_from_def_id(self, id: DefId) -> Option<ty::ClosureKind> {\n         let items = self.lang_items();\n         match Some(id) {\n             x if x == items.fn_trait() => Some(ty::ClosureKind::Fn),\n@@ -36,6 +39,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             _ => None,\n         }\n     }\n+\n+    /// Returns `true` if `id` is a `DefId` of [`Fn`], [`FnMut`] or [`FnOnce`] traits.\n+    pub fn is_fn_trait(self, id: DefId) -> bool {\n+        self.fn_trait_kind_from_def_id(id).is_some()\n+    }\n }\n \n /// Returns `true` if the specified `lang_item` must be present for this"}, {"sha": "d00553cbad131753dda62ca19b9bfa69cb1191c4", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -97,39 +97,12 @@ impl<'tcx> ClosureKind {\n     /// Returns `true` if a type that impls this closure kind\n     /// must also implement `other`.\n     pub fn extends(self, other: ty::ClosureKind) -> bool {\n-        matches!(\n-            (self, other),\n-            (ClosureKind::Fn, ClosureKind::Fn)\n-                | (ClosureKind::Fn, ClosureKind::FnMut)\n-                | (ClosureKind::Fn, ClosureKind::FnOnce)\n-                | (ClosureKind::FnMut, ClosureKind::FnMut)\n-                | (ClosureKind::FnMut, ClosureKind::FnOnce)\n-                | (ClosureKind::FnOnce, ClosureKind::FnOnce)\n-        )\n-    }\n-\n-    /// Returns the representative scalar type for this closure kind.\n-    /// See `Ty::to_opt_closure_kind` for more details.\n-    pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n-        match self {\n-            ClosureKind::Fn => tcx.types.i8,\n-            ClosureKind::FnMut => tcx.types.i16,\n-            ClosureKind::FnOnce => tcx.types.i32,\n-        }\n-    }\n-\n-    pub fn from_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ClosureKind> {\n-        if Some(def_id) == tcx.lang_items().fn_once_trait() {\n-            Some(ClosureKind::FnOnce)\n-        } else if Some(def_id) == tcx.lang_items().fn_mut_trait() {\n-            Some(ClosureKind::FnMut)\n-        } else if Some(def_id) == tcx.lang_items().fn_trait() {\n-            Some(ClosureKind::Fn)\n-        } else {\n-            None\n-        }\n+        self <= other\n     }\n \n+    /// Converts `self` to a [`DefId`] of the corresponding trait.\n+    ///\n+    /// Note: the inverse of this function is [`TyCtxt::fn_trait_kind_from_def_id`].\n     pub fn to_def_id(&self, tcx: TyCtxt<'_>) -> DefId {\n         tcx.require_lang_item(\n             match self {\n@@ -140,6 +113,16 @@ impl<'tcx> ClosureKind {\n             None,\n         )\n     }\n+\n+    /// Returns the representative scalar type for this closure kind.\n+    /// See `Ty::to_opt_closure_kind` for more details.\n+    pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+        match self {\n+            ClosureKind::Fn => tcx.types.i8,\n+            ClosureKind::FnMut => tcx.types.i16,\n+            ClosureKind::FnOnce => tcx.types.i32,\n+        }\n+    }\n }\n \n /// A composite describing a `Place` that is captured by a closure."}, {"sha": "bd17f7d34ad9ccdb74b7586e93e45559ac7f39fe", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -1080,7 +1080,7 @@ pub trait PrettyPrinter<'tcx>:\n                 let mut resugared = false;\n \n                 // Special-case `Fn(...) -> ...` and re-sugar it.\n-                let fn_trait_kind = cx.tcx().fn_trait_kind_from_lang_item(principal.def_id);\n+                let fn_trait_kind = cx.tcx().fn_trait_kind_from_def_id(principal.def_id);\n                 if !cx.should_print_verbose() && fn_trait_kind.is_some() {\n                     if let ty::Tuple(tys) = principal.substs.type_at(0).kind() {\n                         let mut projections = predicates.projection_bounds();"}, {"sha": "5984686044b7340dfb5a3f57eaba07990613384c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -2116,8 +2116,7 @@ impl<'tcx> Ty<'tcx> {\n     /// parameter. This is kind of a phantom type, except that the\n     /// most convenient thing for us to are the integral types. This\n     /// function converts such a special type into the closure\n-    /// kind. To go the other way, use\n-    /// `tcx.closure_kind_ty(closure_kind)`.\n+    /// kind. To go the other way, use `closure_kind.to_ty(tcx)`.\n     ///\n     /// Note that during type checking, we use an inference variable\n     /// to represent the closure kind, because it has not yet been"}, {"sha": "a115bb2831a4b2c1c1ec7dc04d4015495200a30e", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -37,7 +37,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n         }\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n             let trait_ = tcx.trait_of_item(def_id).unwrap();\n-            let adjustment = match tcx.fn_trait_kind_from_lang_item(trait_) {\n+            let adjustment = match tcx.fn_trait_kind_from_def_id(trait_) {\n                 Some(ty::ClosureKind::FnOnce) => Adjustment::Identity,\n                 Some(ty::ClosureKind::FnMut | ty::ClosureKind::Fn) => Adjustment::Deref,\n                 None => bug!(\"fn pointer {:?} is not an fn\", ty),"}, {"sha": "e96b9b64e78749c0b16184d53682699986b1380d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -357,7 +357,8 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                 ocx.register_obligation(obligation);\n                 if ocx.select_all_or_error().is_empty() {\n                     return Ok((\n-                        ty::ClosureKind::from_def_id(self.tcx, trait_def_id)\n+                        self.tcx\n+                            .fn_trait_kind_from_def_id(trait_def_id)\n                             .expect(\"expected to map DefId to ClosureKind\"),\n                         ty.rebind(self.resolve_vars_if_possible(var)),\n                     ));\n@@ -686,7 +687,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 }\n                                 ObligationCauseCode::BindingObligation(def_id, _)\n                                 | ObligationCauseCode::ItemObligation(def_id)\n-                                    if ty::ClosureKind::from_def_id(tcx, *def_id).is_some() =>\n+                                    if tcx.is_fn_trait(*def_id) =>\n                                 {\n                                     err.code(rustc_errors::error_code!(E0059));\n                                     err.set_primary_message(format!(\n@@ -846,8 +847,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n                         }\n \n-                        let is_fn_trait =\n-                            ty::ClosureKind::from_def_id(tcx, trait_ref.def_id()).is_some();\n+                        let is_fn_trait = tcx.is_fn_trait(trait_ref.def_id());\n                         let is_target_feature_fn = if let ty::FnDef(def_id, _) =\n                             *trait_ref.skip_binder().self_ty().kind()\n                         {\n@@ -877,7 +877,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             // Note if the `FnMut` or `FnOnce` is less general than the trait we're trying\n                             // to implement.\n                             let selected_kind =\n-                                ty::ClosureKind::from_def_id(self.tcx, trait_ref.def_id())\n+                                self.tcx.fn_trait_kind_from_def_id(trait_ref.def_id())\n                                     .expect(\"expected to map DefId to ClosureKind\");\n                             if !implemented_kind.extends(selected_kind) {\n                                 err.note(\n@@ -2155,7 +2155,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     if generics.params.iter().any(|p| p.name != kw::SelfUpper)\n                         && !snippet.ends_with('>')\n                         && !generics.has_impl_trait()\n-                        && !self.tcx.fn_trait_kind_from_lang_item(def_id).is_some()\n+                        && !self.tcx.is_fn_trait(def_id)\n                     {\n                         // FIXME: To avoid spurious suggestions in functions where type arguments\n                         // where already supplied, we check the snippet to make sure it doesn't"}, {"sha": "992ea1755163fbad6b039e64ae8b520461b993de", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -1679,9 +1679,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         ) -> Ty<'tcx> {\n             let inputs = trait_ref.skip_binder().substs.type_at(1);\n             let sig = match inputs.kind() {\n-                ty::Tuple(inputs)\n-                    if infcx.tcx.fn_trait_kind_from_lang_item(trait_ref.def_id()).is_some() =>\n-                {\n+                ty::Tuple(inputs) if infcx.tcx.is_fn_trait(trait_ref.def_id()) => {\n                     infcx.tcx.mk_fn_sig(\n                         inputs.iter(),\n                         infcx.next_ty_var(TypeVariableOrigin {\n@@ -1752,7 +1750,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             && let predicates = self.tcx.predicates_of(def_id).instantiate_identity(self.tcx)\n             && let Some(pred) = predicates.predicates.get(*idx)\n             && let ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) = pred.kind().skip_binder()\n-            && ty::ClosureKind::from_def_id(self.tcx, trait_pred.def_id()).is_some()\n+            && self.tcx.is_fn_trait(trait_pred.def_id())\n         {\n             let expected_self =\n                 self.tcx.anonymize_late_bound_regions(pred.kind().rebind(trait_pred.self_ty()));\n@@ -1766,8 +1764,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 .enumerate()\n                 .find(|(other_idx, (pred, _))| match pred.kind().skip_binder() {\n                     ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred))\n-                        if ty::ClosureKind::from_def_id(self.tcx, trait_pred.def_id())\n-                            .is_some()\n+                        if self.tcx.is_fn_trait(trait_pred.def_id())\n                             && other_idx != idx\n                             // Make sure that the self type matches\n                             // (i.e. constraining this closure)"}, {"sha": "adce549a858cb54b9e31bc2508c846d155474b12", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -451,7 +451,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n-        let Some(kind) = self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()) else {\n+        let Some(kind) = self.tcx().fn_trait_kind_from_def_id(obligation.predicate.def_id()) else {\n             return;\n         };\n \n@@ -489,7 +489,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n         // We provide impl of all fn traits for fn pointers.\n-        if self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()).is_none() {\n+        if !self.tcx().is_fn_trait(obligation.predicate.def_id()) {\n             return;\n         }\n "}, {"sha": "28e742688a9145ad1169261ffb045bdbfb005775", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -735,7 +735,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Result<ImplSourceClosureData<'tcx, PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n         let kind = self\n             .tcx()\n-            .fn_trait_kind_from_lang_item(obligation.predicate.def_id())\n+            .fn_trait_kind_from_def_id(obligation.predicate.def_id())\n             .unwrap_or_else(|| bug!(\"closure candidate for non-fn trait {:?}\", obligation));\n \n         // Okay to skip binder because the substs on closure types never"}, {"sha": "c6f2b16ca210226db5b9482d7233e87676418292", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -209,7 +209,7 @@ fn resolve_associated_item<'tcx>(\n             substs: future_data.substs,\n         }),\n         traits::ImplSource::Closure(closure_data) => {\n-            let trait_closure_kind = tcx.fn_trait_kind_from_lang_item(trait_id).unwrap();\n+            let trait_closure_kind = tcx.fn_trait_kind_from_def_id(trait_id).unwrap();\n             Instance::resolve_closure(\n                 tcx,\n                 closure_data.closure_def_id,"}, {"sha": "246560bad291ffcc173fd72610030f1138951f75", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90484df8ad52f73c4f28cf3e4924c2bfa668a38/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=f90484df8ad52f73c4f28cf3e4924c2bfa668a38", "patch": "@@ -106,7 +106,7 @@ fn external_generic_args<'tcx>(\n ) -> GenericArgs {\n     let args = substs_to_args(cx, substs, has_self);\n \n-    if cx.tcx.fn_trait_kind_from_lang_item(did).is_some() {\n+    if cx.tcx.fn_trait_kind_from_def_id(did).is_some() {\n         let inputs =\n             // The trait's first substitution is the one after self, if there is one.\n             match substs.iter().nth(if has_self { 1 } else { 0 }).unwrap().expect_ty().kind() {"}]}