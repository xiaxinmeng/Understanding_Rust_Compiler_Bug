{"sha": "63ac2aae51034f93c23cffde7be711a86f9d139f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYWMyYWFlNTEwMzRmOTNjMjNjZmZkZTdiZTcxMWE4NmY5ZDEzOWY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-11T08:15:18Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-25T20:50:51Z"}, "message": "Fix tests and assertions; add some comments", "tree": {"sha": "84f9e73079e74859febd18660a95c0f39b1a1d58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84f9e73079e74859febd18660a95c0f39b1a1d58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63ac2aae51034f93c23cffde7be711a86f9d139f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63ac2aae51034f93c23cffde7be711a86f9d139f", "html_url": "https://github.com/rust-lang/rust/commit/63ac2aae51034f93c23cffde7be711a86f9d139f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63ac2aae51034f93c23cffde7be711a86f9d139f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59cb1705d790ac15d336525c4e2aa5bf5c9cf104", "url": "https://api.github.com/repos/rust-lang/rust/commits/59cb1705d790ac15d336525c4e2aa5bf5c9cf104", "html_url": "https://github.com/rust-lang/rust/commit/59cb1705d790ac15d336525c4e2aa5bf5c9cf104"}], "stats": {"total": 461, "additions": 274, "deletions": 187}, "files": [{"sha": "dcc0f8545e5d77f560094aea0dbab7a5ee4b7985", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -298,6 +298,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: BodyId, s: Span, id: NodeId) {\n         walk_fn(self, fk, fd, b, s, id)\n     }\n+    fn visit_use(&mut self, path: &'v Path, id: NodeId, hir_id: HirId) {\n+        walk_use(self, path, id, hir_id)\n+    }\n     fn visit_trait_item(&mut self, ti: &'v TraitItem) {\n         walk_trait_item(self, ti)\n     }\n@@ -471,8 +474,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             }\n         }\n         ItemKind::Use(ref path, _) => {\n-            visitor.visit_id(item.id);\n-            visitor.visit_path(path, item.hir_id);\n+            visitor.visit_use(path, item.id, item.hir_id);\n         }\n         ItemKind::Static(ref typ, _, body) |\n         ItemKind::Const(ref typ, body) => {\n@@ -554,6 +556,14 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n     walk_list!(visitor, visit_attribute, &item.attrs);\n }\n \n+pub fn walk_use<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                    path: &'v Path,\n+                                    item_id: NodeId,\n+                                    hir_id: HirId) {\n+    visitor.visit_id(item_id);\n+    visitor.visit_path(path, hir_id);\n+}\n+\n pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n                                          enum_definition: &'v EnumDef,\n                                          generics: &'v Generics,\n@@ -652,6 +662,9 @@ pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              path_span: Span,\n                                              segment: &'v PathSegment) {\n     visitor.visit_ident(segment.ident);\n+    if let Some(id) = segment.id {\n+        visitor.visit_id(id);\n+    }\n     if let Some(ref args) = segment.args {\n         visitor.visit_generic_args(path_span, args);\n     }"}, {"sha": "3aea26c6829a5592e8c35eb8d1f5b3dcc0d6f290", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 79, "deletions": 31, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -1069,6 +1069,9 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_attr(&mut self, attr: &Attribute) -> Attribute {\n+        // Note that we explicitly do not walk the path. Since we don't really\n+        // lower attributes (we use the AST version) there is nowhere to keep\n+        // the HirIds. We don't actually need HIR version of attributes anyway.\n         Attribute {\n             id: attr.id,\n             style: attr.style,\n@@ -1682,6 +1685,7 @@ impl<'a> LoweringContext<'a> {\n                         num_lifetimes,\n                         parenthesized_generic_args,\n                         itctx.reborrow(),\n+                        None,\n                     )\n                 })\n                 .collect(),\n@@ -1725,6 +1729,7 @@ impl<'a> LoweringContext<'a> {\n                 0,\n                 ParenthesizedGenericArgs::Warn,\n                 itctx.reborrow(),\n+                None,\n             ));\n             let qpath = hir::QPath::TypeRelative(ty, segment);\n \n@@ -1753,6 +1758,7 @@ impl<'a> LoweringContext<'a> {\n         p: &Path,\n         ident: Option<Ident>,\n         param_mode: ParamMode,\n+        explicit_owner: Option<NodeId>,\n     ) -> hir::Path {\n         hir::Path {\n             def,\n@@ -1766,6 +1772,7 @@ impl<'a> LoweringContext<'a> {\n                         0,\n                         ParenthesizedGenericArgs::Err,\n                         ImplTraitContext::disallowed(),\n+                        explicit_owner,\n                     )\n                 })\n                 .chain(ident.map(|ident| hir::PathSegment::from_ident(ident)))\n@@ -1776,7 +1783,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_path(&mut self, id: NodeId, p: &Path, param_mode: ParamMode) -> hir::Path {\n         let def = self.expect_full_def(id);\n-        self.lower_path_extra(def, p, None, param_mode)\n+        self.lower_path_extra(def, p, None, param_mode, None)\n     }\n \n     fn lower_path_segment(\n@@ -1787,6 +1794,7 @@ impl<'a> LoweringContext<'a> {\n         expected_lifetimes: usize,\n         parenthesized_generic_args: ParenthesizedGenericArgs,\n         itctx: ImplTraitContext<'_>,\n+        explicit_owner: Option<NodeId>,\n     ) -> hir::PathSegment {\n         let (mut generic_args, infer_types) = if let Some(ref generic_args) = segment.args {\n             let msg = \"parenthesized parameters may only be used with a trait\";\n@@ -1858,9 +1866,15 @@ impl<'a> LoweringContext<'a> {\n         }\n \n         let def = self.expect_full_def(segment.id);\n+        let id = if let Some(owner) = explicit_owner {\n+            self.lower_node_id_with_owner(segment.id, owner)\n+        } else {\n+            self.lower_node_id(segment.id)\n+        };\n+\n         hir::PathSegment::new(\n             segment.ident,\n-            Some(segment.id),\n+            Some(id.node_id),\n             Some(def),\n             generic_args,\n             infer_types,\n@@ -2944,19 +2958,20 @@ impl<'a> LoweringContext<'a> {\n         attrs: &hir::HirVec<Attribute>,\n     ) -> hir::ItemKind {\n         let path = &tree.prefix;\n+        let segments = prefix\n+            .segments\n+            .iter()\n+            .chain(path.segments.iter())\n+            .cloned()\n+            .collect();\n \n         match tree.kind {\n             UseTreeKind::Simple(rename, id1, id2) => {\n                 *name = tree.ident().name;\n \n                 // First apply the prefix to the path\n                 let mut path = Path {\n-                    segments: prefix\n-                        .segments\n-                        .iter()\n-                        .chain(path.segments.iter())\n-                        .cloned()\n-                        .collect(),\n+                    segments,\n                     span: path.span,\n                 };\n \n@@ -2976,9 +2991,18 @@ impl<'a> LoweringContext<'a> {\n                 // for later\n                 let ret_def = defs.next().unwrap_or(Def::Err);\n \n+                // Here, we are looping over namespaces, if they exist for the definition\n+                // being imported. We only handle type and value namespaces because we\n+                // won't be dealing with macros in the rest of the compiler.\n+                // Essentially a single `use` which imports two names is desugared into\n+                // two imports.\n                 for (def, &new_node_id) in defs.zip([id1, id2].iter()) {\n                     let vis = vis.clone();\n                     let name = name.clone();\n+                    let mut path = path.clone();\n+                    for seg in &mut path.segments {\n+                        seg.id = self.sess.next_node_id();\n+                    }\n                     let span = path.span;\n                     self.resolver.definitions().create_def_with_parent(\n                         parent_def_index,\n@@ -2991,7 +3015,8 @@ impl<'a> LoweringContext<'a> {\n \n                     self.with_hir_id_owner(new_node_id, |this| {\n                         let new_id = this.lower_node_id(new_node_id);\n-                        let path = this.lower_path_extra(def, &path, None, ParamMode::Explicit);\n+                        let path =\n+                            this.lower_path_extra(def, &path, None, ParamMode::Explicit, None);\n                         let item = hir::ItemKind::Use(P(path), hir::UseKind::Single);\n                         let vis_kind = match vis.node {\n                             hir::VisibilityKind::Public => hir::VisibilityKind::Public,\n@@ -3001,7 +3026,6 @@ impl<'a> LoweringContext<'a> {\n                                 let id = this.next_id();\n                                 hir::VisibilityKind::Restricted {\n                                     path: path.clone(),\n-                                    // We are allocating a new NodeId here\n                                     id: id.node_id,\n                                     hir_id: id.hir_id,\n                                 }\n@@ -3024,50 +3048,60 @@ impl<'a> LoweringContext<'a> {\n                     });\n                 }\n \n-                let path = P(self.lower_path_extra(ret_def, &path, None, ParamMode::Explicit));\n+                let path =\n+                    P(self.lower_path_extra(ret_def, &path, None, ParamMode::Explicit, None));\n                 hir::ItemKind::Use(path, hir::UseKind::Single)\n             }\n             UseTreeKind::Glob => {\n                 let path = P(self.lower_path(\n                     id,\n                     &Path {\n-                        segments: prefix\n-                            .segments\n-                            .iter()\n-                            .chain(path.segments.iter())\n-                            .cloned()\n-                            .collect(),\n+                        segments,\n                         span: path.span,\n                     },\n                     ParamMode::Explicit,\n                 ));\n                 hir::ItemKind::Use(path, hir::UseKind::Glob)\n             }\n             UseTreeKind::Nested(ref trees) => {\n+                // Nested imports are desugared into simple imports.\n+\n                 let prefix = Path {\n-                    segments: prefix\n-                        .segments\n-                        .iter()\n-                        .chain(path.segments.iter())\n-                        .cloned()\n-                        .collect(),\n+                    segments,\n                     span: prefix.span.to(path.span),\n                 };\n \n-                // Add all the nested PathListItems in the HIR\n+                // Add all the nested PathListItems to the HIR.\n                 for &(ref use_tree, id) in trees {\n                     self.allocate_hir_id_counter(id, &use_tree);\n+\n                     let LoweredNodeId {\n                         node_id: new_id,\n                         hir_id: new_hir_id,\n                     } = self.lower_node_id(id);\n \n                     let mut vis = vis.clone();\n                     let mut name = name.clone();\n-                    let item =\n-                        self.lower_use_tree(use_tree, &prefix, new_id, &mut vis, &mut name, &attrs);\n+                    let mut prefix = prefix.clone();\n \n+                    // Give the segments new ids since they are being cloned.\n+                    for seg in &mut prefix.segments {\n+                        seg.id = self.sess.next_node_id();\n+                    }\n+\n+                    // Each `use` import is an item and thus are owners of the\n+                    // names in the path. Up to this point the nested import is\n+                    // the current owner, since we want each desugared import to\n+                    // own its own names, we have to adjust the owner before\n+                    // lowering the rest of the import.\n                     self.with_hir_id_owner(new_id, |this| {\n+                        let item = this.lower_use_tree(use_tree,\n+                                                       &prefix,\n+                                                       new_id,\n+                                                       &mut vis,\n+                                                       &mut name,\n+                                                       attrs);\n+\n                         let vis_kind = match vis.node {\n                             hir::VisibilityKind::Public => hir::VisibilityKind::Public,\n                             hir::VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n@@ -3076,7 +3110,6 @@ impl<'a> LoweringContext<'a> {\n                                 let id = this.next_id();\n                                 hir::VisibilityKind::Restricted {\n                                     path: path.clone(),\n-                                    // We are allocating a new NodeId here\n                                     id: id.node_id,\n                                     hir_id: id.hir_id,\n                                 }\n@@ -3089,7 +3122,7 @@ impl<'a> LoweringContext<'a> {\n                             hir::Item {\n                                 id: new_id,\n                                 hir_id: new_hir_id,\n-                                name: name,\n+                                name,\n                                 attrs: attrs.clone(),\n                                 node: item,\n                                 vis,\n@@ -3653,6 +3686,7 @@ impl<'a> LoweringContext<'a> {\n                     0,\n                     ParenthesizedGenericArgs::Err,\n                     ImplTraitContext::disallowed(),\n+                    None,\n                 );\n                 let args = args.iter().map(|x| self.lower_expr(x)).collect();\n                 hir::ExprKind::MethodCall(hir_seg, seg.ident.span, args)\n@@ -4506,8 +4540,15 @@ impl<'a> LoweringContext<'a> {\n                 } else {\n                     self.lower_node_id(id)\n                 };\n+                let def = self.expect_full_def(id);\n                 hir::VisibilityKind::Restricted {\n-                    path: P(self.lower_path(id, path, ParamMode::Explicit)),\n+                    path: P(self.lower_path_extra(\n+                        def,\n+                        path,\n+                        None,\n+                        ParamMode::Explicit,\n+                        explicit_owner,\n+                    )),\n                     id: lowered_id.node_id,\n                     hir_id: lowered_id.hir_id,\n                 }\n@@ -4814,8 +4855,15 @@ impl<'a> LoweringContext<'a> {\n         params: Option<P<hir::GenericArgs>>,\n         is_value: bool\n     ) -> hir::Path {\n-        self.resolver\n-            .resolve_str_path(span, self.crate_root, components, params, is_value)\n+        let mut path = self.resolver\n+            .resolve_str_path(span, self.crate_root, components, params, is_value);\n+\n+        for seg in path.segments.iter_mut() {\n+            if let Some(id) = seg.id {\n+                seg.id = Some(self.lower_node_id(id).node_id);\n+            }\n+        }\n+        path\n     }\n \n     fn ty_path(&mut self, id: LoweredNodeId, span: Span, qpath: hir::QPath) -> hir::Ty {"}, {"sha": "8c701d9e4188fafa44fcebf7fdd4d536f3fb9087", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -210,17 +210,22 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                     None => format!(\"{:?}\", node)\n                 };\n \n-                if hir_id == ::hir::DUMMY_HIR_ID {\n-                    debug!(\"Maybe you forgot to lower the node id {:?}?\", id);\n-                }\n+                let forgot_str = if hir_id == ::hir::DUMMY_HIR_ID {\n+                    format!(\"\\nMaybe you forgot to lower the node id {:?}?\", id)\n+                } else {\n+                    String::new()\n+                };\n \n                 bug!(\"inconsistent DepNode for `{}`: \\\n-                      current_dep_node_owner={}, hir_id.owner={}\",\n+                      current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?}) {}\",\n                     node_str,\n                     self.definitions\n                         .def_path(self.current_dep_node_owner)\n                         .to_string_no_crate(),\n-                    self.definitions.def_path(hir_id.owner).to_string_no_crate())\n+                    self.current_dep_node_owner,\n+                    self.definitions.def_path(hir_id.owner).to_string_no_crate(),\n+                    hir_id.owner,\n+                    forgot_str)\n             }\n         }\n "}, {"sha": "896a6163eba64466d44f30d34418c3e0da84bbde", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n         walk(self);\n \n         if owner_def_index == CRATE_DEF_INDEX {\n-            return\n+            return;\n         }\n \n         // There's always at least one entry for the owning item itself\n@@ -129,13 +129,16 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n                                            local_id,\n                                            self.hir_map.node_to_string(node_id)));\n             }\n-\n             self.errors.push(format!(\n                 \"ItemLocalIds not assigned densely in {}. \\\n-                Max ItemLocalId = {}, missing IDs = {:?}\",\n+                Max ItemLocalId = {}, missing IDs = {:?}; seens IDs = {:?}\",\n                 self.hir_map.def_path(DefId::local(owner_def_index)).to_string_no_crate(),\n                 max,\n-                missing_items));\n+                missing_items,\n+                self.hir_ids_seen\n+                    .values()\n+                    .map(|n| format!(\"({:?} {})\", n, self.hir_map.node_to_string(*n)))\n+                    .collect::<Vec<_>>()));\n         }\n     }\n }\n@@ -155,6 +158,7 @@ impl<'a, 'hir: 'a> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n             self.errors.push(format!(\"HirIdValidator: No HirId assigned for NodeId {}: {:?}\",\n                                      node_id,\n                                      self.hir_map.node_to_string(node_id)));\n+            return;\n         }\n \n         if owner != stable_id.owner {"}, {"sha": "7a20146130d9480e640e0d1ba328bd980eed2b38", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -1100,7 +1100,7 @@ impl<'a> print::State<'a> {\n             Node::AnonConst(a)    => self.print_anon_const(&a),\n             Node::Expr(a)         => self.print_expr(&a),\n             Node::Stmt(a)         => self.print_stmt(&a),\n-            Node::PathSegment(_)  => bug!(\"cannot print PathSegment\"),\n+            Node::PathSegment(a)  => self.print_path_segment(&a),\n             Node::Ty(a)           => self.print_type(&a),\n             Node::TraitRef(a)     => self.print_trait_ref(&a),\n             Node::Binding(a)      |"}, {"sha": "a2095ff40c0402da70feed0d958ee80d406e2d1d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -347,6 +347,11 @@ impl fmt::Display for Path {\n pub struct PathSegment {\n     /// The identifier portion of this path segment.\n     pub ident: Ident,\n+    // `id` and `def` are optional. We currently only use these in save-analysis,\n+    // any path segments without these will not have save-analysis info and\n+    // therefore will not have 'jump to def' in IDEs, but otherwise will not be\n+    // affected. (In general, we don't bother to get the defs for synthesized\n+    // segments, only for segments which have come from the AST).\n     pub id: Option<NodeId>,\n     pub def: Option<Def>,\n "}, {"sha": "e69d32ad1deafbddc9d8420276aeb19dddaf304f", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -1633,6 +1633,17 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n+    pub fn print_path_segment(&mut self, segment: &hir::PathSegment) -> io::Result<()> {\n+        if segment.ident.name != keywords::CrateRoot.name() &&\n+           segment.ident.name != keywords::DollarCrate.name() {\n+           self.print_ident(segment.ident)?;\n+           segment.with_generic_args(|generic_args| {\n+               self.print_generic_args(generic_args, segment.infer_types, false)\n+           })?;\n+        }\n+        Ok(())\n+    }\n+\n     pub fn print_qpath(&mut self,\n                        qpath: &hir::QPath,\n                        colons_before_params: bool)"}, {"sha": "0285a3c568cc1bd306e1df975ab30f27ba69bab4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -1675,8 +1675,8 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n             PathResult::Module(ModuleOrUniformRoot::Module(module)) =>\n                 module.def().unwrap(),\n             PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 =>\n-                *def = path_res.base_def(),\n-            PathResult::NonModule(..) =>\n+                path_res.base_def(),\n+            PathResult::NonModule(..) => {\n                 if let PathResult::Failed(span, msg, _) = self.resolve_path(\n                     None,\n                     &path,\n@@ -1686,7 +1686,9 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     CrateLint::No,\n                 ) {\n                     error_callback(self, span, ResolutionError::FailedToResolve(&msg));\n-                },\n+                }\n+                Def::Err\n+            }\n             PathResult::Module(ModuleOrUniformRoot::UniformRoot(_)) |\n             PathResult::Indeterminate => unreachable!(),\n             PathResult::Failed(span, msg, _) => {\n@@ -3042,7 +3044,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         let report_errors = |this: &mut Self, def: Option<Def>| {\n             // Make the base error.\n             let expected = source.descr_expected();\n-            let path_str = names_to_string(path);\n+            let path_str = Segment::names_to_string(path);\n             let item_str = path.last().unwrap().ident;\n             let code = source.error_code(def.is_some());\n             let (base_msg, fallback_label, base_span) = if let Some(def) = def {"}, {"sha": "810aff7f9b0a86c7eaca20a8945f31f04ccc8d87", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -1314,7 +1314,6 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                                                        \"consider making the enum public\",\n                                                        suggestion);\n                         err.emit();\n-                    }\n                 }\n             }\n         }"}, {"sha": "a7fe1bb421c378805a4e769479144016243ec8c3", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -1624,10 +1624,6 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 if let Some(fn_data) = self.save_ctxt.get_extern_item_data(item) {\n                     down_cast_data!(fn_data, DefData, item.span);\n \n-                    self.nest_tables(\n-                        item.id,\n-                        |v| v.process_formals(&decl.inputs, &fn_data.qualname),\n-                    );\n                     self.process_generic_params(generics, &fn_data.qualname, item.id);\n                     self.dumper.dump_def(&access, fn_data);\n                 }"}, {"sha": "7689406b59a04917ab8d67e0c6063618d8a13987", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -57,7 +57,7 @@ use std::env;\n use std::fs::File;\n use std::path::{Path, PathBuf};\n \n-use syntax::ast::{self, Attribute, NodeId, PatKind};\n+use syntax::ast::{self, Attribute, DUMMY_NODE_ID, NodeId, PatKind};\n use syntax::source_map::Spanned;\n use syntax::parse::lexer::comments::strip_doc_comment_decoration;\n use syntax::print::pprust;\n@@ -703,6 +703,10 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             false\n         }\n \n+        if path_seg.id == DUMMY_NODE_ID {\n+            return None;\n+        }\n+\n         let def = self.get_path_def(path_seg.id);\n         let span = path_seg.ident.span;\n         filter!(self.span_utils, span);"}, {"sha": "85d1f3df05b1d2a1c49f0ea50eab1f11c05bd637", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -95,7 +95,7 @@ pub fn add_type_ascription_to_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirValidated, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_type_ascription_to_parameter() {\n     let closure = |x: u32| x + 1u32;"}, {"sha": "dd1c2bd51260b066f2942a2f519165f6722b3caf", "filename": "src/test/mir-opt/end_region_1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_1.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -22,7 +22,7 @@ fn main() {\n // START rustc.main.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n //     ...\n-//     let _2: &'10_1rs i32;\n+//     let _2: &'11_1rs i32;\n //     ...\n //     let _1: i32;\n //     ...\n@@ -31,10 +31,10 @@ fn main() {\n //         _1 = const 3i32;\n //         FakeRead(ForLet, _1);\n //         StorageLive(_2);\n-//         _2 = &'10_1rs _1;\n+//         _2 = &'11_1rs _1;\n //         FakeRead(ForLet, _2);\n //         _0 = ();\n-//         EndRegion('10_1rs);\n+//         EndRegion('11_1rs);\n //         StorageDead(_2);\n //         StorageDead(_1);\n //         return;"}, {"sha": "6b0a28b8110073c9eac5bd5a7e48a2b4dd31973d", "filename": "src/test/mir-opt/end_region_2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_2.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -27,9 +27,9 @@ fn main() {\n // START rustc.main.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n //     ...\n-//     let _7: &'23_3rs bool;\n+//     let _7: &'26_3rs bool;\n //     ...\n-//     let _3: &'23_1rs bool;\n+//     let _3: &'26_1rs bool;\n //     ...\n //     let _2: bool;\n //     ...\n@@ -47,7 +47,7 @@ fn main() {\n //         _2 = const true;\n //         FakeRead(ForLet, _2);\n //         StorageLive(_3);\n-//         _3 = &'23_1rs _2;\n+//         _3 = &'26_1rs _2;\n //         FakeRead(ForLet, _3);\n //         StorageLive(_5);\n //         _5 = _2;\n@@ -59,7 +59,7 @@ fn main() {\n //     bb4: {\n //         _0 = ();\n //         StorageDead(_5);\n-//         EndRegion('23_1rs);\n+//         EndRegion('26_1rs);\n //         StorageDead(_3);\n //         StorageDead(_2);\n //         return;\n@@ -68,12 +68,12 @@ fn main() {\n //         _4 = ();\n //         StorageDead(_5);\n //         StorageLive(_7);\n-//         _7 = &'23_3rs _2;\n+//         _7 = &'26_3rs _2;\n //         FakeRead(ForLet, _7);\n //         _1 = ();\n-//         EndRegion('23_3rs);\n+//         EndRegion('26_3rs);\n //         StorageDead(_7);\n-//         EndRegion('23_1rs);\n+//         EndRegion('26_1rs);\n //         StorageDead(_3);\n //         StorageDead(_2);\n //         goto -> bb1;"}, {"sha": "d8d48358e53fc27fb98a708dbeae316a480d7f5c", "filename": "src/test/mir-opt/end_region_3.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_3.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -28,9 +28,9 @@ fn main() {\n // START rustc.main.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n //     ...\n-//     let _7: &'26_3rs bool;\n+//     let _7: &'30_3rs bool;\n //     ...\n-//     let _3: &'26_1rs bool;\n+//     let _3: &'30_1rs bool;\n //     ...\n //     let mut _1: bool;\n //     ...\n@@ -48,7 +48,7 @@ fn main() {\n //     bb2: {\n //         _1 = const true;\n //         StorageLive(_3);\n-//         _3 = &'26_1rs _1;\n+//         _3 = &'30_1rs _1;\n //         FakeRead(ForLet, _3);\n //         StorageLive(_5);\n //         _5 = _1;\n@@ -60,7 +60,7 @@ fn main() {\n //     bb4: {\n //         _0 = ();\n //         StorageDead(_5);\n-//         EndRegion('26_1rs);\n+//         EndRegion('30_1rs);\n //         StorageDead(_3);\n //         StorageDead(_1);\n //         return;\n@@ -69,12 +69,12 @@ fn main() {\n //         _4 = ();\n //         StorageDead(_5);\n //         StorageLive(_7);\n-//         _7 = &'26_3rs _1;\n+//         _7 = &'30_3rs _1;\n //         FakeRead(ForLet, _7);\n //         _2 = ();\n-//         EndRegion('26_3rs);\n+//         EndRegion('30_3rs);\n //         StorageDead(_7);\n-//         EndRegion('26_1rs);\n+//         EndRegion('30_1rs);\n //         StorageDead(_3);\n //         goto -> bb1;\n //     }"}, {"sha": "359ed07a9c0953466257eb38bfef40fd4818f624", "filename": "src/test/mir-opt/end_region_4.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -32,9 +32,9 @@ fn foo(i: i32) {\n // START rustc.main.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n //     ...\n-//     let _6: &'26_4rs i32;\n+//     let _6: &'31_4rs i32;\n //     ...\n-//     let _3: &'26_2rs i32;\n+//     let _3: &'31_2rs i32;\n //     ...\n //     let _2: i32;\n //     ...\n@@ -50,7 +50,7 @@ fn foo(i: i32) {\n //         _2 = const 0i32;\n //         FakeRead(ForLet, _2);\n //         StorageLive(_3);\n-//         _3 = &'26_2rs _2;\n+//         _3 = &'31_2rs _2;\n //         FakeRead(ForLet, _3);\n //         StorageLive(_5);\n //         _5 = (*_3);\n@@ -62,18 +62,18 @@ fn foo(i: i32) {\n //     bb2: {\n //         StorageDead(_5);\n //         StorageLive(_6);\n-//         _6 = &'26_4rs _2;\n+//         _6 = &'31_4rs _2;\n //         FakeRead(ForLet, _6);\n //         _0 = ();\n-//         EndRegion('26_4rs);\n+//         EndRegion('31_4rs);\n //         StorageDead(_6);\n-//         EndRegion('26_2rs);\n+//         EndRegion('31_2rs);\n //         StorageDead(_3);\n //         StorageDead(_2);\n //         drop(_1) -> [return: bb4, unwind: bb1];\n //     }\n //     bb3: {\n-//         EndRegion('26_2rs);\n+//         EndRegion('31_2rs);\n //         drop(_1) -> bb1;\n //     }\n //     bb4: {"}, {"sha": "3b632e198cd669dbef85b63062c888eee7a31b9d", "filename": "src/test/mir-opt/end_region_5.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -33,15 +33,15 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     let _1: D;\n //     ...\n //     let mut _2: ();\n-//     let mut _3: [closure@NodeId(28) d:&'14s D];\n-//     let mut _4: &'14s D;\n+//     let mut _3: [closure@NodeId(28) d:&'18s D];\n+//     let mut _4: &'18s D;\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n //         FakeRead(ForLet, _1);\n //         StorageLive(_3);\n //         StorageLive(_4);\n-//         _4 = &'14s _1;\n+//         _4 = &'18s _1;\n //         _3 = [closure@NodeId(28)] { d: move _4 };\n //         StorageDead(_4);\n //         _2 = const foo(move _3) -> [return: bb2, unwind: bb3];\n@@ -50,13 +50,13 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         resume;\n //     }\n //     bb2: {\n-//         EndRegion('14s);\n+//         EndRegion('18s);\n //         StorageDead(_3);\n //         _0 = ();\n //         drop(_1) -> [return: bb4, unwind: bb1];\n //     }\n //     bb3: {\n-//         EndRegion('14s);\n+//         EndRegion('18s);\n //         drop(_1) -> bb1;\n //     }\n //     bb4: {\n@@ -67,11 +67,11 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // END rustc.main.SimplifyCfg-qualify-consts.after.mir\n \n // START rustc.main-{{closure}}.SimplifyCfg-qualify-consts.after.mir\n-// fn main::{{closure}}(_1: [closure@NodeId(28) d:&'14s D]) -> i32 {\n+// fn main::{{closure}}(_1: [closure@NodeId(28) d:&'18s D]) -> i32 {\n //    let mut _0: i32;\n //\n //    bb0: {\n-//        _0 = ((*(_1.0: &'14s D)).0: i32);\n+//        _0 = ((*(_1.0: &'18s D)).0: i32);\n //        return;\n //    }\n // END rustc.main-{{closure}}.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "03c7de02ec11166236399cd1626c60b6329c5103", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -33,15 +33,15 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     let _1: D;\n //     ...\n //     let mut _2: ();\n-//     let mut _3: [closure@NodeId(33) d:&'19s D];\n-//     let mut _4: &'19s D;\n+//     let mut _3: [closure@NodeId(33) d:&'24s D];\n+//     let mut _4: &'24s D;\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n //         FakeRead(ForLet, _1);\n //         StorageLive(_3);\n //         StorageLive(_4);\n-//         _4 = &'19s _1;\n+//         _4 = &'24s _1;\n //         _3 = [closure@NodeId(33)] { d: move _4 };\n //         StorageDead(_4);\n //         _2 = const foo(move _3) -> [return: bb2, unwind: bb3];\n@@ -50,13 +50,13 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         resume;\n //     }\n //     bb2: {\n-//         EndRegion('19s);\n+//         EndRegion('24s);\n //         StorageDead(_3);\n //         _0 = ();\n //         drop(_1) -> [return: bb4, unwind: bb1];\n //     }\n //     bb3: {\n-//         EndRegion('19s);\n+//         EndRegion('24s);\n //         drop(_1) -> bb1;\n //     }\n //     bb4: {\n@@ -66,17 +66,17 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // END rustc.main.SimplifyCfg-qualify-consts.after.mir\n \n // START rustc.main-{{closure}}.SimplifyCfg-qualify-consts.after.mir\n-// fn main::{{closure}}(_1: [closure@NodeId(33) d:&'19s D]) -> i32 {\n+// fn main::{{closure}}(_1: [closure@NodeId(33) d:&'24s D]) -> i32 {\n //     let mut _0: i32;\n //     ...\n-//     let _2: &'16_0rs D;\n+//     let _2: &'21_0rs D;\n //     ...\n //     bb0: {\n //         StorageLive(_2);\n-//         _2 = &'16_0rs (*(_1.0: &'19s D));\n+//         _2 = &'21_0rs (*(_1.0: &'24s D));\n //         FakeRead(ForLet, _2);\n //         _0 = ((*_2).0: i32);\n-//         EndRegion('16_0rs);\n+//         EndRegion('21_0rs);\n //         StorageDead(_2);\n //         return;\n //     }"}, {"sha": "56e3e0aa6f7a9a6ff195389ecb53682035817d3b", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -70,14 +70,14 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // fn main::{{closure}}(_1: [closure@NodeId(33) d:D]) -> i32 {\n //     let mut _0: i32;\n //     ...\n-//     let _2: &'16_0rs D;\n+//     let _2: &'21_0rs D;\n //     ...\n //     bb0: {\n //         StorageLive(_2);\n-//         _2 = &'16_0rs (_1.0: D);\n+//         _2 = &'21_0rs (_1.0: D);\n //         FakeRead(ForLet, _2);\n //         _0 = ((*_2).0: i32);\n-//         EndRegion('16_0rs);\n+//         EndRegion('21_0rs);\n //         StorageDead(_2);\n //         drop(_1) -> [return: bb2, unwind: bb1];\n //     }"}, {"sha": "0a54dcaa0d33fa31f574df55d0f02868b4c69119", "filename": "src/test/mir-opt/end_region_8.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -31,18 +31,18 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // fn main() -> () {\n //    let mut _0: ();\n //    ...\n-//    let _2: &'21_1rs D;\n+//    let _2: &'26_1rs D;\n //    ...\n //    let _1: D;\n //    ...\n //    let mut _3: ();\n-//    let mut _4: [closure@NodeId(33) r:&'19s D];\n+//    let mut _4: [closure@NodeId(33) r:&'24s D];\n //    bb0: {\n //        StorageLive(_1);\n //        _1 = D::{{constructor}}(const 0i32,);\n //        FakeRead(ForLet, _1);\n //        StorageLive(_2);\n-//        _2 = &'21_1rs _1;\n+//        _2 = &'26_1rs _1;\n //        FakeRead(ForLet, _2);\n //        StorageLive(_4);\n //        _4 = [closure@NodeId(33)] { r: _2 };\n@@ -52,16 +52,16 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //        resume;\n //    }\n //    bb2: {\n-//        EndRegion('19s);\n+//        EndRegion('24s);\n //        StorageDead(_4);\n //        _0 = ();\n-//        EndRegion('21_1rs);\n+//        EndRegion('26_1rs);\n //        StorageDead(_2);\n //        drop(_1) -> [return: bb4, unwind: bb1];\n //    }\n //    bb3: {\n-//        EndRegion('19s);\n-//        EndRegion('21_1rs);\n+//        EndRegion('24s);\n+//        EndRegion('26_1rs);\n //        drop(_1) -> bb1;\n //    }\n //    bb4: {\n@@ -72,11 +72,11 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // END rustc.main.SimplifyCfg-qualify-consts.after.mir\n \n // START rustc.main-{{closure}}.SimplifyCfg-qualify-consts.after.mir\n-// fn main::{{closure}}(_1: [closure@NodeId(33) r:&'19s D]) -> i32 {\n+// fn main::{{closure}}(_1: [closure@NodeId(33) r:&'24s D]) -> i32 {\n //     let mut _0: i32;\n //\n //     bb0: {\n-//         _0 = ((*(_1.0: &'21_1rs D)).0: i32);\n+//         _0 = ((*(_1.0: &'26_1rs D)).0: i32);\n //         return;\n //     }\n // }"}, {"sha": "ef2d949d3074eb4c990c8c06636c5d190abb9f1c", "filename": "src/test/mir-opt/end_region_9.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_9.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -41,7 +41,7 @@ fn main() {\n // fn main() -> () {\n //     let mut _0: ();\n //     ...\n-//     let mut _4: &'33_0rs i32;\n+//     let mut _4: &'37_0rs i32;\n //     ...\n //     let _2: i32;\n //     ...\n@@ -79,14 +79,14 @@ fn main() {\n //    bb5: {\n //        _0 = ();\n //        StorageDead(_7);\n-//        EndRegion('33_0rs);\n+//        EndRegion('37_0rs);\n //        StorageDead(_4);\n //        StorageDead(_2);\n //        StorageDead(_1);\n //        return;\n //    }\n //    bb6: {\n-//        _4 = &'33_0rs _2;\n+//        _4 = &'37_0rs _2;\n //        _6 = ();\n //        StorageDead(_7);\n //        _1 = const true;"}, {"sha": "3dbc73caf65d87e6d396fa5975f73adf0bf93094", "filename": "src/test/mir-opt/end_region_cyclic.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -45,24 +45,24 @@ fn query() -> bool { true }\n //     scope 1 {\n //     }\n //     scope 2 {\n-//         let _2: S<'36_0rs>;\n+//         let _2: S<'49_0rs>;\n //     }\n //     let mut _1: ();\n-//     let mut _3: std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>;\n-//     let mut _4: std::option::Option<&'36_0rs S<'36_0rs>>;\n+//     let mut _3: std::cell::Cell<std::option::Option<&'49_0rs S<'49_0rs>>>;\n+//     let mut _4: std::option::Option<&'49_0rs S<'49_0rs>>;\n //     let mut _5: ();\n-//     let mut _6: &'17s std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>;\n-//     let mut _7: std::option::Option<&'36_0rs S<'36_0rs>>;\n-//     let mut _8: &'36_0rs S<'36_0rs>;\n-//     let mut _9: &'36_0rs S<'36_0rs>;\n+//     let mut _6: &'25s std::cell::Cell<std::option::Option<&'49_0rs S<'49_0rs>>>;\n+//     let mut _7: std::option::Option<&'49_0rs S<'49_0rs>>;\n+//     let mut _8: &'49_0rs S<'49_0rs>;\n+//     let mut _9: &'49_0rs S<'49_0rs>;\n //     let mut _10: ();\n //     let mut _11: bool;\n //     let mut _12: !;\n //     let mut _13: ();\n-//     let mut _14: &'34s std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>;\n-//     let mut _15: std::option::Option<&'36_0rs S<'36_0rs>>;\n-//     let mut _16: &'36_0rs S<'36_0rs>;\n-//     let mut _17: &'36_0rs S<'36_0rs>;\n+//     let mut _14: &'47s std::cell::Cell<std::option::Option<&'49_0rs S<'49_0rs>>>;\n+//     let mut _15: std::option::Option<&'49_0rs S<'49_0rs>>;\n+//     let mut _16: &'49_0rs S<'49_0rs>;\n+//     let mut _17: &'49_0rs S<'49_0rs>;\n //     bb0: {\n //         goto -> bb1;\n //     }\n@@ -73,30 +73,30 @@ fn query() -> bool { true }\n //         StorageLive(_2);\n //         StorageLive(_3);\n //         StorageLive(_4);\n-//         _4 = std::option::Option<&'36_0rs S<'36_0rs>>::None;\n+//         _4 = std::option::Option<&'49_0rs S<'49_0rs>>::None;\n //         _3 = const <std::cell::Cell<T>>::new(move _4) -> [return: bb4, unwind: bb3];\n //     }\n //     bb3: {\n //         resume;\n //     }\n //     bb4: {\n //         StorageDead(_4);\n-//         _2 = S<'36_0rs> { r: move _3 };\n+//         _2 = S<'49_0rs> { r: move _3 };\n //         StorageDead(_3);\n //         FakeRead(ForLet, _2);\n //         StorageLive(_6);\n-//         _6 = &'17s (_2.0: std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>);\n+//         _6 = &'25s (_2.0: std::cell::Cell<std::option::Option<&'49_0rs S<'49_0rs>>>);\n //         StorageLive(_7);\n //         StorageLive(_8);\n //         StorageLive(_9);\n-//         _9 = &'36_0rs _2;\n-//         _8 = &'36_0rs (*_9);\n-//         _7 = std::option::Option<&'36_0rs S<'36_0rs>>::Some(move _8,);\n+//         _9 = &'49_0rs _2;\n+//         _8 = &'49_0rs (*_9);\n+//         _7 = std::option::Option<&'49_0rs S<'49_0rs>>::Some(move _8,);\n //         StorageDead(_8);\n //         _5 = const <std::cell::Cell<T>>::set(move _6, move _7) -> [return: bb5, unwind: bb3];\n //     }\n //     bb5: {\n-//         EndRegion('17s);\n+//         EndRegion('25s);\n //         StorageDead(_7);\n //         StorageDead(_6);\n //         StorageDead(_9);\n@@ -109,31 +109,31 @@ fn query() -> bool { true }\n //     bb7: {\n //         _0 = ();\n //         StorageDead(_11);\n-//         EndRegion('36_0rs);\n+//         EndRegion('49_0rs);\n //         StorageDead(_2);\n //         return;\n //     }\n //     bb8: {\n //         _10 = ();\n //         StorageDead(_11);\n //         StorageLive(_14);\n-//         _14 = &'34s (_2.0: std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>);\n+//         _14 = &'47s (_2.0: std::cell::Cell<std::option::Option<&'49_0rs S<'49_0rs>>>);\n //         StorageLive(_15);\n //         StorageLive(_16);\n //         StorageLive(_17);\n-//         _17 = &'36_0rs _2;\n-//         _16 = &'36_0rs (*_17);\n-//         _15 = std::option::Option<&'36_0rs S<'36_0rs>>::Some(move _16,);\n+//         _17 = &'49_0rs _2;\n+//         _16 = &'49_0rs (*_17);\n+//         _15 = std::option::Option<&'49_0rs S<'49_0rs>>::Some(move _16,);\n //         StorageDead(_16);\n //         _13 = const <std::cell::Cell<T>>::set(move _14, move _15) -> [return: bb9, unwind: bb3];\n //     }\n //     bb9: {\n-//         EndRegion('34s);\n+//         EndRegion('47s);\n //         StorageDead(_15);\n //         StorageDead(_14);\n //         StorageDead(_17);\n //         _1 = ();\n-//         EndRegion('36_0rs);\n+//         EndRegion('49_0rs);\n //         StorageDead(_2);\n //         goto -> bb1;\n //     }"}, {"sha": "a5107d304386f6b56b0caeaa1edfd4f9ce588982", "filename": "src/test/mir-opt/end_region_destruction_extents_1.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -41,16 +41,16 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n \n // Notes on the MIR output below:\n //\n-// 1. The `EndRegion('10s)` is allowed to precede the `drop(_3)`\n+// 1. The `EndRegion('13s)` is allowed to precede the `drop(_3)`\n //    solely because of the #[may_dangle] mentioned above.\n //\n-// 2. Regarding the occurrence of `EndRegion('12ds)` *after* `StorageDead(_6)`\n-//    (where we have borrows `&'12ds _6`): Eventually:\n+// 2. Regarding the occurrence of `EndRegion('15ds)` *after* `StorageDead(_6)`\n+//    (where we have borrows `&'15ds _6`): Eventually:\n //\n //    i. this code should be rejected (by mir-borrowck), or\n //\n //    ii. the MIR code generation should be changed so that the\n-//        EndRegion('12ds)` precedes `StorageDead(_6)` in the\n+//        EndRegion('15ds)` precedes `StorageDead(_6)` in the\n //        control-flow.  (Note: arielb1 views drop+storagedead as one\n //        unit, and does not see this option as a useful avenue to\n //        explore.), or\n@@ -66,33 +66,33 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n // START rustc.main.QualifyAndPromoteConstants.before.mir\n // fn main() -> () {\n // let mut _0: ();\n-//     let mut _1: &'12ds S1;\n-//     let mut _2: D1<'12ds, '10s>;\n-//     let mut _3: &'12ds S1;\n-//     let mut _4: &'12ds S1;\n+//     let mut _1: &'15ds S1;\n+//     let mut _2: D1<'15ds, '13s>;\n+//     let mut _3: &'15ds S1;\n+//     let mut _4: &'15ds S1;\n //     let _5: S1;\n-//     let mut _6: &'10s S1;\n-//     let mut _7: &'10s S1;\n+//     let mut _6: &'13s S1;\n+//     let mut _7: &'13s S1;\n //     let _8: S1;\n //     bb0: {\n //         StorageLive(_2);\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         StorageLive(_5);\n //         _5 = S1::{{constructor}}(const \"ex1\",);\n-//         _4 = &'12ds _5;\n-//         _3 = &'12ds (*_4);\n+//         _4 = &'15ds _5;\n+//         _3 = &'15ds (*_4);\n //         StorageLive(_6);\n //         StorageLive(_7);\n //         StorageLive(_8);\n //         _8 = S1::{{constructor}}(const \"dang1\",);\n-//         _7 = &'10s _8;\n-//         _6 = &'10s (*_7);\n-//         _2 = D1<'12ds, '10s>::{{constructor}}(move _3, move _6);\n-//         EndRegion('10s);\n+//         _7 = &'13s _8;\n+//         _6 = &'13s (*_7);\n+//         _2 = D1<'15ds, '13s>::{{constructor}}(move _3, move _6);\n+//         EndRegion('13s);\n //         StorageDead(_6);\n //         StorageDead(_3);\n-//         _1 = (_2.0: &'12ds S1);\n+//         _1 = (_2.0: &'15ds S1);\n //         drop(_2) -> [return: bb2, unwind: bb1];\n //     }\n //     bb1: {\n@@ -104,7 +104,7 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n //         StorageDead(_8);\n //         StorageDead(_4);\n //         StorageDead(_5);\n-//         EndRegion('12ds);\n+//         EndRegion('15ds);\n //         _0 = ();\n //         return;\n //     }\n@@ -114,29 +114,29 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n // START rustc.main.QualifyAndPromoteConstants.after.mir\n // fn main() -> (){\n //     let mut _0: ();\n-//     let mut _1: &'12ds S1;\n-//     let mut _2: D1<'12ds, '10s>;\n-//     let mut _3: &'12ds S1;\n-//     let mut _4: &'12ds S1;\n+//     let mut _1: &'15ds S1;\n+//     let mut _2: D1<'15ds, '13s>;\n+//     let mut _3: &'15ds S1;\n+//     let mut _4: &'15ds S1;\n //     let _5: S1;\n-//     let mut _6: &'10s S1;\n-//     let mut _7: &'10s S1;\n+//     let mut _6: &'13s S1;\n+//     let mut _7: &'13s S1;\n //     let _8: S1;\n //     bb0: {\n //         StorageLive(_2);\n //         StorageLive(_3);\n //         StorageLive(_4);\n-//         _4 = &'12ds (promoted[1]: S1);\n-//         _3 = &'12ds (*_4);\n+//         _4 = &'15ds (promoted[1]: S1);\n+//         _3 = &'15ds (*_4);\n //         StorageLive(_6);\n //         StorageLive(_7);\n-//         _7 = &'10s (promoted[0]: S1);\n-//         _6 = &'10s (*_7);\n-//         _2 = D1<'12ds, '10s>::{{constructor}}(move _3, move _6);\n-//         EndRegion('10s);\n+//         _7 = &'13s (promoted[0]: S1);\n+//         _6 = &'13s (*_7);\n+//         _2 = D1<'15ds, '13s>::{{constructor}}(move _3, move _6);\n+//         EndRegion('13s);\n //         StorageDead(_6);\n //         StorageDead(_3);\n-//         _1 = (_2.0: &'12ds S1);\n+//         _1 = (_2.0: &'15ds S1);\n //         drop(_2) -> [return: bb2, unwind: bb1];\n //     }\n //     bb1: {\n@@ -146,7 +146,7 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n //         StorageDead(_2);\n //         StorageDead(_7);\n //         StorageDead(_4);\n-//         EndRegion('12ds);\n+//         EndRegion('15ds);\n //         _0 = ();\n //         return;\n //     }"}, {"sha": "f1544968adb6a2135afe4b3486db2191fb787d44", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -40,19 +40,19 @@ fn main() {\n //     ...\n //     bb0: {\n //         ...\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(10)))), [_1: i32]);\n+//         Validate(Suspend(ReScope(Node(ItemLocalId(13)))), [_1: i32]);\n //         _6 = &ReErased mut _1;\n-//         Validate(Acquire, [(*_6): i32/ReScope(Node(ItemLocalId(10)))]);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(10)))), [(*_6): i32/ReScope(Node(ItemLocalId(10)))]);\n+//         Validate(Acquire, [(*_6): i32/ReScope(Node(ItemLocalId(13)))]);\n+//         Validate(Suspend(ReScope(Node(ItemLocalId(13)))), [(*_6): i32/ReScope(Node(ItemLocalId(13)))]);\n //         _5 = &ReErased mut (*_6);\n-//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(10)))]);\n-//         Validate(Release, [_2: (), _3: &ReScope(Node(ItemLocalId(10))) Test, _5: &ReScope(Node(ItemLocalId(10))) mut i32]);\n+//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(13)))]);\n+//         Validate(Release, [_2: (), _3: &ReScope(Node(ItemLocalId(13))) Test, _5: &ReScope(Node(ItemLocalId(13))) mut i32]);\n //         _2 = const Test::foo(move _3, move _5) -> bb1;\n //     }\n //\n //     bb1: {\n //         Validate(Acquire, [_2: ()]);\n-//         EndRegion(ReScope(Node(ItemLocalId(10))));\n+//         EndRegion(ReScope(Node(ItemLocalId(13))));\n //         ...\n //         return;\n //     }\n@@ -64,11 +64,11 @@ fn main() {\n //     bb0: {\n //         Validate(Acquire, [_1: &ReFree(DefId(0/1:11 ~ validate_1[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(65)], _2: &ReFree(DefId(0/1:11 ~ validate_1[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n //         StorageLive(_3);\n-//         Validate(Suspend(ReScope(Remainder { block: ItemLocalId(25), first_statement_index: 0 })), [(*_2): i32]);\n+//         Validate(Suspend(ReScope(Remainder { block: ItemLocalId(31), first_statement_index: 0 })), [(*_2): i32]);\n //         _3 = &ReErased (*_2);\n-//         Validate(Acquire, [(*_3): i32/ReScope(Remainder { block: ItemLocalId(25), first_statement_index: 0 }) (imm)]);\n+//         Validate(Acquire, [(*_3): i32/ReScope(Remainder { block: ItemLocalId(31), first_statement_index: 0 }) (imm)]);\n //         _0 = (*_3);\n-//         EndRegion(ReScope(Remainder { block: ItemLocalId(25), first_statement_index: 0 }));\n+//         EndRegion(ReScope(Remainder { block: ItemLocalId(31), first_statement_index: 0 }));\n //         StorageDead(_3);\n //         return;\n //     }"}, {"sha": "ce840397713ad6031063f69b97a21552734f301c", "filename": "src/test/mir-opt/validate_3.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -48,27 +48,27 @@ fn main() {\n //         StorageLive(_1);\n //         _1 = Test { x: const 0i32 };\n //         StorageLive(_2);\n-//         Validate(Suspend(ReScope(Remainder { block: ItemLocalId(20), first_statement_index: 3 })), [_1: Test]);\n+//         Validate(Suspend(ReScope(Remainder { block: ItemLocalId(24), first_statement_index: 3 })), [_1: Test]);\n //         _2 = &ReErased _1;\n-//         Validate(Acquire, [(*_2): Test/ReScope(Remainder { block: ItemLocalId(20), first_statement_index: 3 }) (imm)]);\n+//         Validate(Acquire, [(*_2): Test/ReScope(Remainder { block: ItemLocalId(24), first_statement_index: 3 }) (imm)]);\n //         StorageLive(_4);\n //         StorageLive(_5);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(18)))), [((*_2).0: i32): i32/ReScope(Remainder { block: ItemLocalId(20), first_statement_index: 3 }) (imm)]);\n+//         Validate(Suspend(ReScope(Node(ItemLocalId(22)))), [((*_2).0: i32): i32/ReScope(Remainder { block: ItemLocalId(24), first_statement_index: 3 }) (imm)]);\n //         _5 = &ReErased ((*_2).0: i32);\n-//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(18))) (imm)]);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(18)))), [(*_5): i32/ReScope(Node(ItemLocalId(18))) (imm)]);\n+//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(22))) (imm)]);\n+//         Validate(Suspend(ReScope(Node(ItemLocalId(22)))), [(*_5): i32/ReScope(Node(ItemLocalId(22))) (imm)]);\n //         _4 = &ReErased (*_5);\n-//         Validate(Acquire, [(*_4): i32/ReScope(Node(ItemLocalId(18))) (imm)]);\n-//         Validate(Release, [_3: (), _4: &ReScope(Node(ItemLocalId(18))) i32]);\n+//         Validate(Acquire, [(*_4): i32/ReScope(Node(ItemLocalId(22))) (imm)]);\n+//         Validate(Release, [_3: (), _4: &ReScope(Node(ItemLocalId(22))) i32]);\n //         _3 = const foo(move _4) -> bb1;\n //     }\n //     bb1: {\n //         Validate(Acquire, [_3: ()]);\n-//         EndRegion(ReScope(Node(ItemLocalId(18))));\n+//         EndRegion(ReScope(Node(ItemLocalId(22))));\n //         StorageDead(_4);\n //         StorageDead(_5);\n //         _0 = ();\n-//         EndRegion(ReScope(Remainder { block: ItemLocalId(20), first_statement_index: 3 }));\n+//         EndRegion(ReScope(Remainder { block: ItemLocalId(24), first_statement_index: 3 }));\n //         StorageDead(_2);\n //         StorageDead(_1);\n //         return;"}, {"sha": "955de0c3bad043e45d8d46c2722e6bc5199e87dc", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ac2aae51034f93c23cffde7be711a86f9d139f/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=63ac2aae51034f93c23cffde7be711a86f9d139f", "patch": "@@ -53,12 +53,12 @@ fn main() {\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         StorageLive(_5);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(12)))), [(*_2): i32]);\n+//         Validate(Suspend(ReScope(Node(ItemLocalId(16)))), [(*_2): i32]);\n //         _5 = &ReErased mut (*_2);\n-//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(12)))]);\n+//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(16)))]);\n //         _4 = move _5 as *mut i32 (Misc);\n //         _3 = move _4;\n-//         EndRegion(ReScope(Node(ItemLocalId(12))));\n+//         EndRegion(ReScope(Node(ItemLocalId(16))));\n //         StorageDead(_4);\n //         StorageDead(_5);\n //         Validate(Release, [_0: bool, _3: *mut i32]);"}]}