{"sha": "8b191b5a6ead811e6d42b55c5695b6dda71aca90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMTkxYjVhNmVhZDgxMWU2ZDQyYjU1YzU2OTViNmRkYTcxYWNhOTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-31T13:57:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-31T13:57:08Z"}, "message": "Auto merge of #5666 - flip1995:rollup-yjyvvbg, r=flip1995\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #5637 (new lint: vec_resize_to_zero)\n - #5656 (len_zero: skip ranges if feature `range_is_empty` is not enabled)\n - #5663 (add testcase that no longer ICEs)\n\nFailed merges:\n\nr? @ghost\n\nchangelog: rollup", "tree": {"sha": "42c89d74003caed8d29f777aadb7b70c01e8e93a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42c89d74003caed8d29f777aadb7b70c01e8e93a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b191b5a6ead811e6d42b55c5695b6dda71aca90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b191b5a6ead811e6d42b55c5695b6dda71aca90", "html_url": "https://github.com/rust-lang/rust/commit/8b191b5a6ead811e6d42b55c5695b6dda71aca90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b191b5a6ead811e6d42b55c5695b6dda71aca90/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "871f3ed92e082225ed81b31e7eef2a2083645712", "url": "https://api.github.com/repos/rust-lang/rust/commits/871f3ed92e082225ed81b31e7eef2a2083645712", "html_url": "https://github.com/rust-lang/rust/commit/871f3ed92e082225ed81b31e7eef2a2083645712"}, {"sha": "00c656d8eecc8908954c3f2f651d4feb80694c38", "url": "https://api.github.com/repos/rust-lang/rust/commits/00c656d8eecc8908954c3f2f651d4feb80694c38", "html_url": "https://github.com/rust-lang/rust/commit/00c656d8eecc8908954c3f2f651d4feb80694c38"}], "stats": {"total": 245, "additions": 244, "deletions": 1}, "files": [{"sha": "f7dae3dcfff0f6c0dca0190a725b16bb72e7b2c9", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -1630,6 +1630,7 @@ Released 2018-09-13\n [`useless_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute\n [`useless_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec\n [`vec_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#vec_box\n+[`vec_resize_to_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#vec_resize_to_zero\n [`verbose_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#verbose_bit_mask\n [`verbose_file_reads`]: https://rust-lang.github.io/rust-clippy/master/index.html#verbose_file_reads\n [`vtable_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#vtable_address_comparisons"}, {"sha": "f5bfede75a76171a0deed70db698ce938b56b359", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_item_name, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::{get_item_name, higher, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -259,6 +259,17 @@ fn check_len(\n \n /// Checks if this type has an `is_empty` method.\n fn has_is_empty(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+    /// Special case ranges until `range_is_empty` is stabilized. See issue 3807.\n+    fn should_skip_range(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+        higher::range(cx, expr).map_or(false, |_| {\n+            !cx.tcx\n+                .features()\n+                .declared_lib_features\n+                .iter()\n+                .any(|(name, _)| name.as_str() == \"range_is_empty\")\n+        })\n+    }\n+\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_, '_>, item: &ty::AssocItem) -> bool {\n         if let ty::AssocKind::Fn = item.kind {\n@@ -284,6 +295,10 @@ fn has_is_empty(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n         })\n     }\n \n+    if should_skip_range(cx, expr) {\n+        return false;\n+    }\n+\n     let ty = &walk_ptrs_ty(cx.tables.expr_ty(expr));\n     match ty.kind {\n         ty::Dynamic(ref tt, ..) => {"}, {"sha": "4f0ecab393d03b3c4a6e79583e82ddf9188de32e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -325,6 +325,7 @@ mod unwrap;\n mod use_self;\n mod useless_conversion;\n mod vec;\n+mod vec_resize_to_zero;\n mod verbose_file_reads;\n mod wildcard_dependencies;\n mod wildcard_imports;\n@@ -847,6 +848,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n         &utils::internal_lints::PRODUCE_ICE,\n         &vec::USELESS_VEC,\n+        &vec_resize_to_zero::VEC_RESIZE_TO_ZERO,\n         &verbose_file_reads::VERBOSE_FILE_READS,\n         &wildcard_dependencies::WILDCARD_DEPENDENCIES,\n         &wildcard_imports::ENUM_GLOB_USE,\n@@ -1062,6 +1064,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box manual_non_exhaustive::ManualNonExhaustive);\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n     store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n+    store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n@@ -1430,6 +1433,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n         LintId::of(&useless_conversion::USELESS_CONVERSION),\n         LintId::of(&vec::USELESS_VEC),\n+        LintId::of(&vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),\n         LintId::of(&write::PRINT_WITH_NEWLINE),\n@@ -1677,6 +1681,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n+        LintId::of(&vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n     ]);\n \n     store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec!["}, {"sha": "3b7e9739211b0520cca61321ff7498bcc90c97ef", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -138,5 +138,6 @@ pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];\n pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n pub const VEC_NEW: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"new\"];\n+pub const VEC_RESIZE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"resize\"];\n pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];\n pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];"}, {"sha": "86cbfa8203d54679500f47b854add4b1d18de784", "filename": "clippy_lints/src/vec_resize_to_zero.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -0,0 +1,59 @@\n+use crate::utils::span_lint_and_then;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Spanned;\n+\n+use crate::utils::{match_def_path, paths};\n+use rustc_ast::ast::LitKind;\n+use rustc_hir as hir;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Finds occurences of `Vec::resize(0, an_int)`\n+    ///\n+    /// **Why is this bad?** This is probably an argument inversion mistake.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// vec!(1, 2, 3, 4, 5).resize(0, 5)\n+    /// ```\n+    pub VEC_RESIZE_TO_ZERO,\n+    correctness,\n+    \"emptying a vector with `resize(0, an_int)` instead of `clear()` is probably an argument inversion mistake\"\n+}\n+\n+declare_lint_pass!(VecResizeToZero => [VEC_RESIZE_TO_ZERO]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VecResizeToZero {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n+        if_chain! {\n+            if let hir::ExprKind::MethodCall(path_segment, _, ref args) = expr.kind;\n+            if let Some(method_def_id) = cx.tables.type_dependent_def_id(expr.hir_id);\n+            if match_def_path(cx, method_def_id, &paths::VEC_RESIZE) && args.len() == 3;\n+            if let ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = args[1].kind;\n+            if let ExprKind::Lit(Spanned { node: LitKind::Int(..), .. }) = args[2].kind;\n+            then {\n+                let method_call_span = expr.span.with_lo(path_segment.ident.span.lo());\n+                span_lint_and_then(\n+                    cx,\n+                    VEC_RESIZE_TO_ZERO,\n+                    expr.span,\n+                    \"emptying a vector with `resize`\",\n+                    |db| {\n+                        db.help(\"the arguments may be inverted...\");\n+                        db.span_suggestion(\n+                            method_call_span,\n+                            \"...or you can empty the vector with\",\n+                            \"clear()\".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "1e94ca00c1457f29ad92b172171e5f6bac2e203e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -2460,6 +2460,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"types\",\n     },\n+    Lint {\n+        name: \"vec_resize_to_zero\",\n+        group: \"correctness\",\n+        desc: \"emptying a vector with `resize(0, an_int)` instead of `clear()` is probably an argument inversion mistake\",\n+        deprecation: None,\n+        module: \"vec_resize_to_zero\",\n+    },\n     Lint {\n         name: \"verbose_bit_mask\",\n         group: \"style\","}, {"sha": "4feab7910b7445da53bf0c73ac25bea9ce160a66", "filename": "tests/ui/crashes/ice-3969.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Fcrashes%2Fice-3969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Fcrashes%2Fice-3969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3969.rs?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -0,0 +1,51 @@\n+// https://github.com/rust-lang/rust-clippy/issues/3969\n+// used to crash: error: internal compiler error:\n+// src/librustc_traits/normalize_erasing_regions.rs:43: could not fully normalize `<i32 as\n+// std::iter::Iterator>::Item test from rustc ./ui/trivial-bounds/trivial-bounds-inconsistent.rs\n+\n+// Check that tautalogically false bounds are accepted, and are used\n+// in type inference.\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+trait A {}\n+\n+impl A for i32 {}\n+\n+struct Dst<X: ?Sized> {\n+    x: X,\n+}\n+\n+struct TwoStrs(str, str)\n+where\n+    str: Sized;\n+\n+fn unsized_local()\n+where\n+    for<'a> Dst<A + 'a>: Sized,\n+{\n+    let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+}\n+\n+fn return_str() -> str\n+where\n+    str: Sized,\n+{\n+    *\"Sized\".to_string().into_boxed_str()\n+}\n+\n+fn use_op(s: String) -> String\n+where\n+    String: ::std::ops::Neg<Output = String>,\n+{\n+    -s\n+}\n+\n+fn use_for()\n+where\n+    i32: Iterator,\n+{\n+    for _ in 2i32 {}\n+}\n+\n+fn main() {}"}, {"sha": "923db0664a714f53804c76a9e08986e2f8e50327", "filename": "tests/ui/crashes/ice-3969.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Fcrashes%2Fice-3969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Fcrashes%2Fice-3969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3969.stderr?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -0,0 +1,22 @@\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/ice-3969.rs:25:17\n+   |\n+LL |     for<'a> Dst<A + 'a>: Sized,\n+   |                 ^^^^^^ help: use `dyn`: `dyn A + 'a`\n+   |\n+   = note: `-D bare-trait-objects` implied by `-D warnings`\n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/ice-3969.rs:27:16\n+   |\n+LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+   |                ^ help: use `dyn`: `dyn A`\n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/ice-3969.rs:27:57\n+   |\n+LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+   |                                                         ^ help: use `dyn`: `dyn A`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "a29b832eb6019af0dda1ffc160fe49ebfac08f32", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -141,3 +141,11 @@ fn main() {\n fn test_slice(b: &[u8]) {\n     if !b.is_empty() {}\n }\n+\n+mod issue_3807 {\n+    // Avoid suggesting changes to ranges if the user did not enable `range_is_empty`.\n+    // See https://github.com/rust-lang/rust/issues/48111#issuecomment-445132965\n+    fn no_suggestion() {\n+        let _ = (0..42).len() == 0;\n+    }\n+}"}, {"sha": "8fd0093f4fdbbc13e31205003209de35fa9a21df", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -141,3 +141,11 @@ fn main() {\n fn test_slice(b: &[u8]) {\n     if b.len() != 0 {}\n }\n+\n+mod issue_3807 {\n+    // Avoid suggesting changes to ranges if the user did not enable `range_is_empty`.\n+    // See https://github.com/rust-lang/rust/issues/48111#issuecomment-445132965\n+    fn no_suggestion() {\n+        let _ = (0..42).len() == 0;\n+    }\n+}"}, {"sha": "7da26f8ff4d477b9ab0cde400eb834b44ee24cde", "filename": "tests/ui/len_zero_ranges.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Flen_zero_ranges.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Flen_zero_ranges.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero_ranges.fixed?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![feature(range_is_empty)]\n+#![warn(clippy::len_zero)]\n+#![allow(unused)]\n+\n+mod issue_3807 {\n+    // With the feature enabled, `is_empty` should be suggested\n+    fn suggestion_is_fine() {\n+        let _ = (0..42).is_empty();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "be7b4244bc06c4d27463f35de2181ca23ab2c20a", "filename": "tests/ui/len_zero_ranges.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Flen_zero_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Flen_zero_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero_ranges.rs?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![feature(range_is_empty)]\n+#![warn(clippy::len_zero)]\n+#![allow(unused)]\n+\n+mod issue_3807 {\n+    // With the feature enabled, `is_empty` should be suggested\n+    fn suggestion_is_fine() {\n+        let _ = (0..42).len() == 0;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6e5fa41fb08a55c127f9bb7a8e34624498e018d5", "filename": "tests/ui/len_zero_ranges.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Flen_zero_ranges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Flen_zero_ranges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero_ranges.stderr?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -0,0 +1,10 @@\n+error: length comparison to zero\n+  --> $DIR/len_zero_ranges.rs:10:17\n+   |\n+LL |         let _ = (0..42).len() == 0;\n+   |                 ^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `(0..42).is_empty()`\n+   |\n+   = note: `-D clippy::len-zero` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0263e2f5f20c113920111ee6b41e62f89a1944ed", "filename": "tests/ui/vec_resize_to_zero.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_resize_to_zero.rs?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -0,0 +1,15 @@\n+#![warn(clippy::vec_resize_to_zero)]\n+\n+fn main() {\n+    // applicable here\n+    vec![1, 2, 3, 4, 5].resize(0, 5);\n+\n+    // not applicable\n+    vec![1, 2, 3, 4, 5].resize(2, 5);\n+\n+    // applicable here, but only implemented for integer litterals for now\n+    vec![\"foo\", \"bar\", \"baz\"].resize(0, \"bar\");\n+\n+    // not applicable\n+    vec![\"foo\", \"bar\", \"baz\"].resize(2, \"bar\")\n+}"}, {"sha": "feb846298c656878246193fd8968b2c67127b260", "filename": "tests/ui/vec_resize_to_zero.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Fvec_resize_to_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b191b5a6ead811e6d42b55c5695b6dda71aca90/tests%2Fui%2Fvec_resize_to_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_resize_to_zero.stderr?ref=8b191b5a6ead811e6d42b55c5695b6dda71aca90", "patch": "@@ -0,0 +1,13 @@\n+error: emptying a vector with `resize`\n+  --> $DIR/vec_resize_to_zero.rs:5:5\n+   |\n+LL |     vec![1, 2, 3, 4, 5].resize(0, 5);\n+   |     ^^^^^^^^^^^^^^^^^^^^------------\n+   |                         |\n+   |                         help: ...or you can empty the vector with: `clear()`\n+   |\n+   = note: `-D clippy::vec-resize-to-zero` implied by `-D warnings`\n+   = help: the arguments may be inverted...\n+\n+error: aborting due to previous error\n+"}]}