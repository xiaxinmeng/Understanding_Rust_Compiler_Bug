{"sha": "ba9093e8271bb108bc5914cd88e2803af2b6ebba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOTA5M2U4MjcxYmIxMDhiYzU5MTRjZDg4ZTI4MDNhZjJiNmViYmE=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-19T23:18:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-19T23:18:11Z"}, "message": "Clarify some wording in Rust 2021 lint docs", "tree": {"sha": "3b5d565c21c39b9fc796a090104bffcf2f2a4302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b5d565c21c39b9fc796a090104bffcf2f2a4302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba9093e8271bb108bc5914cd88e2803af2b6ebba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhHuazCRBK7hj4Ov3rIwAASqQIAI4yr96pws6n/Yjg11IWukg2\nHa08NeLhq6+VKAqex81UZJ6II+n8m2e+81R97ye/yxmwyWo7iXS3b4XZGzw5q9om\nezx+rQT7ll8fxbxFSw/rXf6L0ktvpJSeG6fh0z4IPWZkDqrEXlzzQ5xeQhyeQAKY\nu6zxcgZ7QzySjbZXFi5BOP00+MM647Ud+pj2o1xX6kVNd0BxZJ/ubMtbmfJ9527f\nCkumtR2MggGMF+tmvd9ZAV2SD6bwc22xpnkLUXNcnD4cCuXTGRQ46gNEIwWwsScN\ntYBZuX84S1TLpPyll9Sh2aosY0tVx1TxsvC3d10eSmm7bOmuxtmh4lEqOhDy3OY=\n=j1tI\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b5d565c21c39b9fc796a090104bffcf2f2a4302\nparent 7960030d6915a771f5ab72c3897a7ed50c3ed4bd\nauthor Noah Lev <camelidcamel@gmail.com> 1629415091 -0700\ncommitter GitHub <noreply@github.com> 1629415091 -0700\n\nClarify some wording in Rust 2021 lint docs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9093e8271bb108bc5914cd88e2803af2b6ebba", "html_url": "https://github.com/rust-lang/rust/commit/ba9093e8271bb108bc5914cd88e2803af2b6ebba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba9093e8271bb108bc5914cd88e2803af2b6ebba/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7960030d6915a771f5ab72c3897a7ed50c3ed4bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7960030d6915a771f5ab72c3897a7ed50c3ed4bd", "html_url": "https://github.com/rust-lang/rust/commit/7960030d6915a771f5ab72c3897a7ed50c3ed4bd"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "457be5e7a58994815e2e4e4bbcb9edc6209de402", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ba9093e8271bb108bc5914cd88e2803af2b6ebba/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9093e8271bb108bc5914cd88e2803af2b6ebba/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=ba9093e8271bb108bc5914cd88e2803af2b6ebba", "patch": "@@ -3070,16 +3070,19 @@ declare_lint! {\n \n declare_lint! {\n     /// The `rust_2021_incompatible_closure_captures` lint detects variables that aren't completely\n-    /// captured in Rust 2021 and affect the Drop order of at least one path starting at this variable.\n-    /// It can also detect when a variable implements a trait, but one of its field does not and\n-    /// the field is captured by a closure and used with the assumption that said field implements\n+    /// captured in Rust 2021, such that the `Drop` order of their fields may differ between\n+    /// Rust 2018 and 2021.\n+    ///\n+    /// It can also detect when a variable implements a trait like `Send`, but one of its fields does not,\n+    /// and the field is captured by a closure and used with the assumption that said field implements\n     /// the same trait as the root variable.\n     ///\n     /// ### Example of drop reorder\n     ///\n     /// ```rust,compile_fail\n-    /// # #![deny(rust_2021_incompatible_closure_captures)]\n+    /// #![deny(rust_2021_incompatible_closure_captures)]\n     /// # #![allow(unused)]\n+    ///\n     /// struct FancyInteger(i32);\n     ///\n     /// impl Drop for FancyInteger {\n@@ -3133,8 +3136,8 @@ declare_lint! {\n     /// ### Explanation\n     ///\n     /// In the above example, only `fptr.0` is captured in Rust 2021.\n-    /// The field is of type *mut i32 which doesn't implement Send, making the code invalid as the\n-    /// field cannot be sent between thread safely.\n+    /// The field is of type `*mut i32`, which doesn't implement `Send`,\n+    /// making the code invalid as the field cannot be sent between threads safely.\n     pub RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES,\n     Allow,\n     \"detects closures affected by Rust 2021 changes\",\n@@ -3254,6 +3257,7 @@ declare_lint! {\n     ///\n     /// ```rust,compile_fail\n     /// #![deny(rust_2021_incompatible_or_patterns)]\n+    ///\n     /// macro_rules! match_any {\n     ///     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n     ///         match $expr {\n@@ -3275,7 +3279,7 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// In Rust 2021, the pat matcher will match new patterns, which include the | character.\n+    /// In Rust 2021, the `pat` matcher will match additional patterns, which include the `|` character.\n     pub RUST_2021_INCOMPATIBLE_OR_PATTERNS,\n     Allow,\n     \"detects usage of old versions of or-patterns\",\n@@ -3320,8 +3324,8 @@ declare_lint! {\n     /// In Rust 2021, one of the important introductions is the [prelude changes], which add\n     /// `TryFrom`, `TryInto`, and `FromIterator` into the standard library's prelude. Since this\n     /// results in an ambiguity as to which method/function to call when an existing `try_into`\n-    ///  method is called via dot-call syntax or a `try_from`/`from_iter` associated function\n-    ///  is called directly on a type.\n+    /// method is called via dot-call syntax or a `try_from`/`from_iter` associated function\n+    /// is called directly on a type.\n     ///\n     /// [prelude changes]: https://blog.rust-lang.org/inside-rust/2021/03/04/planning-rust-2021.html#prelude-changes\n     pub RUST_2021_PRELUDE_COLLISIONS,"}]}