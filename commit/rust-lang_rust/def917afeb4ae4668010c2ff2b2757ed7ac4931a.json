{"sha": "def917afeb4ae4668010c2ff2b2757ed7ac4931a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZjkxN2FmZWI0YWU0NjY4MDEwYzJmZjJiMjc1N2VkN2FjNDkzMWE=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2015-10-18T21:28:47Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2015-10-19T02:57:32Z"}, "message": "Implement `eh_unwind_resume` in libstd.", "tree": {"sha": "59ea2cfebaf29c154c4e4103031e8f2e8036a4bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59ea2cfebaf29c154c4e4103031e8f2e8036a4bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/def917afeb4ae4668010c2ff2b2757ed7ac4931a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/def917afeb4ae4668010c2ff2b2757ed7ac4931a", "html_url": "https://github.com/rust-lang/rust/commit/def917afeb4ae4668010c2ff2b2757ed7ac4931a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/def917afeb4ae4668010c2ff2b2757ed7ac4931a/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1da466253c1fe6491f330a4ae5aa56da950928bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1da466253c1fe6491f330a4ae5aa56da950928bf", "html_url": "https://github.com/rust-lang/rust/commit/1da466253c1fe6491f330a4ae5aa56da950928bf"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "04f677a90c43f5ffe053bb49b22d0ac4b3885365", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/def917afeb4ae4668010c2ff2b2757ed7ac4931a/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def917afeb4ae4668010c2ff2b2757ed7ac4931a/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=def917afeb4ae4668010c2ff2b2757ed7ac4931a", "patch": "@@ -142,6 +142,9 @@ extern \"C\" {\n                                    -> _Unwind_Reason_Code;\n \n     pub fn _Unwind_DeleteException(exception: *mut _Unwind_Exception);\n+\n+    #[unwind]\n+    pub fn _Unwind_Resume(exception: *mut _Unwind_Exception) -> !;\n }\n \n // ... and now we just providing access to SjLj counterspart"}, {"sha": "5ee14d9f57af84f3dae22fab8669e0e4b53de938", "filename": "src/libstd/sys/common/unwind/gcc.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/def917afeb4ae4668010c2ff2b2757ed7ac4931a/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def917afeb4ae4668010c2ff2b2757ed7ac4931a/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs?ref=def917afeb4ae4668010c2ff2b2757ed7ac4931a", "patch": "@@ -231,3 +231,10 @@ pub mod eabi {\n         }\n     }\n }\n+\n+#[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\", not(test)))]\n+#[lang = \"eh_unwind_resume\"]\n+#[unwind]\n+unsafe extern fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n+    uw::_Unwind_Resume(panic_ctx as *mut uw::_Unwind_Exception);\n+}"}, {"sha": "92f059d68e1a33ab2f306d30537749e39d2dca64", "filename": "src/libstd/sys/common/unwind/seh64_gnu.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/def917afeb4ae4668010c2ff2b2757ed7ac4931a/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def917afeb4ae4668010c2ff2b2757ed7ac4931a/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs?ref=def917afeb4ae4668010c2ff2b2757ed7ac4931a", "patch": "@@ -190,17 +190,10 @@ unsafe extern fn rust_eh_personality(\n     ExceptionContinueSearch\n }\n \n-// The `resume` instruction, found at the end of the landing pads, and whose job\n-// is to resume stack unwinding, is typically lowered by LLVM into a call to\n-// `_Unwind_Resume` routine.  To avoid confusion with the same symbol exported\n-// from libgcc, we redirect it to `rust_eh_unwind_resume`.\n-// Since resolution of this symbol is done by the linker, `rust_eh_unwind_resume`\n-// must be marked `pub` + `#[no_mangle]`.  (Can we make it a lang item?)\n-\n-#[lang = \"eh_unwind_resume\"]\n #[cfg(not(test))]\n+#[lang = \"eh_unwind_resume\"]\n #[unwind]\n-unsafe extern fn rust_eh_unwind_resume(panic_ctx: LPVOID) {\n+unsafe extern fn rust_eh_unwind_resume(panic_ctx: LPVOID) -> ! {\n     let params = [panic_ctx as ULONG_PTR];\n     RaiseException(RUST_PANIC,\n                    EXCEPTION_NONCONTINUABLE,"}]}