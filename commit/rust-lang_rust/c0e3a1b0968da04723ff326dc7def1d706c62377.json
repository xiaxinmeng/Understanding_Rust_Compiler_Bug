{"sha": "c0e3a1b0968da04723ff326dc7def1d706c62377", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZTNhMWIwOTY4ZGEwNDcyM2ZmMzI2ZGM3ZGVmMWQ3MDZjNjIzNzc=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-01-18T15:56:53Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-02-15T13:27:33Z"}, "message": "Add `to_raw_parts` methods to `*const`, `*mut`, and `NonNull`\n\nThese are not named `into_` because they do not consume their receiver\nsince raw pointers are `Copy`.", "tree": {"sha": "0cf2f006bd40ea7dc667be9bb8973697b229a8a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cf2f006bd40ea7dc667be9bb8973697b229a8a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e3a1b0968da04723ff326dc7def1d706c62377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e3a1b0968da04723ff326dc7def1d706c62377", "html_url": "https://github.com/rust-lang/rust/commit/c0e3a1b0968da04723ff326dc7def1d706c62377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e3a1b0968da04723ff326dc7def1d706c62377/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "937d580a2522186a1d5e1b5cd107f9ce8213b7ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/937d580a2522186a1d5e1b5cd107f9ce8213b7ec", "html_url": "https://github.com/rust-lang/rust/commit/937d580a2522186a1d5e1b5cd107f9ce8213b7ec"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "bd89ec27ae22336ebe606064628f33e56dae8933", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0e3a1b0968da04723ff326dc7def1d706c62377/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e3a1b0968da04723ff326dc7def1d706c62377/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=c0e3a1b0968da04723ff326dc7def1d706c62377", "patch": "@@ -48,6 +48,17 @@ impl<T: ?Sized> *const T {\n         self as _\n     }\n \n+    /// Decompose a (possibly wide) pointer into is address and metadata components.\n+    ///\n+    /// The pointer can be later reconstructed with [`from_raw_parts`].\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[inline]\n+    pub const fn to_raw_parts(self) -> (*const (), <T as super::Pointee>::Metadata) {\n+        (self.cast(), super::metadata(self))\n+    }\n+\n     /// Returns `None` if the pointer is null, or else returns a shared reference to\n     /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_ref`]\n     /// must be used instead."}, {"sha": "0661ccc020014864d335e1fe011f72ac5049cffd", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0e3a1b0968da04723ff326dc7def1d706c62377/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e3a1b0968da04723ff326dc7def1d706c62377/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=c0e3a1b0968da04723ff326dc7def1d706c62377", "patch": "@@ -28,8 +28,9 @@ pub trait Pointee {\n pub trait Thin = Pointee<Metadata = ()>;\n \n /// Extract the metadata component of a pointer.\n+#[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n #[inline]\n-pub fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {\n+pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {\n     // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T\n     // and PtrComponents<T> have the same memory layouts. Only std can make this\n     // guarantee."}, {"sha": "731b97a06cbc61b710f4913b860922872fd0eb07", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0e3a1b0968da04723ff326dc7def1d706c62377/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e3a1b0968da04723ff326dc7def1d706c62377/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=c0e3a1b0968da04723ff326dc7def1d706c62377", "patch": "@@ -47,6 +47,17 @@ impl<T: ?Sized> *mut T {\n         self as _\n     }\n \n+    /// Decompose a (possibly wide) pointer into is address and metadata components.\n+    ///\n+    /// The pointer can be later reconstructed with [`from_raw_parts_mut`].\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[inline]\n+    pub const fn to_raw_parts(self) -> (*mut (), <T as super::Pointee>::Metadata) {\n+        (self.cast(), super::metadata(self))\n+    }\n+\n     /// Returns `None` if the pointer is null, or else returns a shared reference to\n     /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_ref`]\n     /// must be used instead."}, {"sha": "00cb1e1b271450ea19e32abb03a924c62bd3ddbc", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0e3a1b0968da04723ff326dc7def1d706c62377/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e3a1b0968da04723ff326dc7def1d706c62377/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=c0e3a1b0968da04723ff326dc7def1d706c62377", "patch": "@@ -193,6 +193,17 @@ impl<T: ?Sized> NonNull<T> {\n         }\n     }\n \n+    /// Decompose a (possibly wide) pointer into is address and metadata components.\n+    ///\n+    /// The pointer can be later reconstructed with [`NonNull::from_raw_parts`].\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[rustc_const_unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n+    #[inline]\n+    pub const fn to_raw_parts(self) -> (NonNull<()>, <T as super::Pointee>::Metadata) {\n+        (self.cast(), super::metadata(self.as_ptr()))\n+    }\n+\n     /// Acquires the underlying `*mut` pointer.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_as_ptr\", since = \"1.32.0\")]"}]}