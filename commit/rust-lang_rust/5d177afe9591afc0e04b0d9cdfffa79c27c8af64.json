{"sha": "5d177afe9591afc0e04b0d9cdfffa79c27c8af64", "node_id": "C_kwDOAAsO6NoAKDVkMTc3YWZlOTU5MWFmYzBlMDRiMGQ5Y2RmZmZhNzljMjdjOGFmNjQ", "commit": {"author": {"name": "Ed Page", "email": "eopage@gmail.com", "date": "2023-05-17T14:34:25Z"}, "committer": {"name": "Ed Page", "email": "eopage@gmail.com", "date": "2023-05-17T14:34:25Z"}, "message": "docs: Clarify OsStr is self-synchronizing", "tree": {"sha": "038a9e3af6b17b5162a3cb3205605d8f5e210d75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/038a9e3af6b17b5162a3cb3205605d8f5e210d75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d177afe9591afc0e04b0d9cdfffa79c27c8af64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d177afe9591afc0e04b0d9cdfffa79c27c8af64", "html_url": "https://github.com/rust-lang/rust/commit/5d177afe9591afc0e04b0d9cdfffa79c27c8af64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d177afe9591afc0e04b0d9cdfffa79c27c8af64/comments", "author": {"login": "epage", "id": 60961, "node_id": "MDQ6VXNlcjYwOTYx", "avatar_url": "https://avatars.githubusercontent.com/u/60961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epage", "html_url": "https://github.com/epage", "followers_url": "https://api.github.com/users/epage/followers", "following_url": "https://api.github.com/users/epage/following{/other_user}", "gists_url": "https://api.github.com/users/epage/gists{/gist_id}", "starred_url": "https://api.github.com/users/epage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epage/subscriptions", "organizations_url": "https://api.github.com/users/epage/orgs", "repos_url": "https://api.github.com/users/epage/repos", "events_url": "https://api.github.com/users/epage/events{/privacy}", "received_events_url": "https://api.github.com/users/epage/received_events", "type": "User", "site_admin": false}, "committer": {"login": "epage", "id": 60961, "node_id": "MDQ6VXNlcjYwOTYx", "avatar_url": "https://avatars.githubusercontent.com/u/60961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epage", "html_url": "https://github.com/epage", "followers_url": "https://api.github.com/users/epage/followers", "following_url": "https://api.github.com/users/epage/following{/other_user}", "gists_url": "https://api.github.com/users/epage/gists{/gist_id}", "starred_url": "https://api.github.com/users/epage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epage/subscriptions", "organizations_url": "https://api.github.com/users/epage/orgs", "repos_url": "https://api.github.com/users/epage/repos", "events_url": "https://api.github.com/users/epage/events{/privacy}", "received_events_url": "https://api.github.com/users/epage/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9aaad0939e1507990f02676e7f70b88a85a9aea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9aaad0939e1507990f02676e7f70b88a85a9aea", "html_url": "https://github.com/rust-lang/rust/commit/f9aaad0939e1507990f02676e7f70b88a85a9aea"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "dd92b9cf76a4e92b7b883aac35b012241787bc6b", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5d177afe9591afc0e04b0d9cdfffa79c27c8af64/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d177afe9591afc0e04b0d9cdfffa79c27c8af64/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=5d177afe9591afc0e04b0d9cdfffa79c27c8af64", "patch": "@@ -670,18 +670,22 @@ impl OsStr {\n     /// Converts a slice of bytes to an OS string slice without checking that the string contains\n     /// valid `OsStr`-encoded data.\n     ///\n+    /// The byte encoding is an unspecified, platform-specific, self-synchronizing superset of UTF-8.\n+    /// By being a self-synchronizing superset of UTF-8, this encoding is also a superset of 7-bit\n+    /// ASCII.\n+    ///\n     /// See the [module's toplevel documentation about conversions][conversions] for safe,\n     /// cross-platform [conversions] from/to native representations.\n     ///\n     /// # Safety\n     ///\n-    /// `OsStr`'s encoding is an unspecified superset of UTF-8 and callers must\n-    /// pass in bytes that originated as a mixture of validated UTF-8 and bytes from\n-    /// [`OsStr::as_os_str_bytes`] from within the same rust version built for the same target\n-    /// platform.  For example, reconstructing an `OsStr` from bytes sent over the network or stored\n-    /// in a file will likely violate these safety rules.  The bytes from `OsStr::as_os_str_bytes`\n-    /// may be split either immediately before or immediately after some valid non-empty UTF-8\n-    /// substring\n+    /// As the encoding is unspecified, callers must pass in bytes that originated as a mixture of\n+    /// validated UTF-8 and bytes from [`OsStr::as_os_str_bytes`] from within the same rust version\n+    /// built for the same target platform.  For example, reconstructing an `OsStr` from bytes sent\n+    /// over the network or stored in a file will likely violate these safety rules.\n+    ///\n+    /// Due to the encoding being self-synchronizing, the bytes from [`OsStr::as_os_str_bytes`] can be\n+    /// split either immediately before or immediately after any valid non-empty UTF-8 substring.\n     ///\n     /// # Example\n     ///\n@@ -881,6 +885,10 @@ impl OsStr {\n     /// Converts an OS string slice to a byte slice.  To convert the byte slice back into an OS\n     /// string slice, use the [`OsStr::from_os_str_bytes_unchecked`] function.\n     ///\n+    /// The byte encoding is an unspecified, platform-specific, self-synchronizing superset of UTF-8.\n+    /// By being a self-synchronizing superset of UTF-8, this encoding is also a superset of 7-bit\n+    /// ASCII.\n+    ///\n     /// Note: As the encoding is unspecified, any sub-slice of bytes that is not valid UTF-8 should\n     /// be treated as opaque and only comparable within the same rust version built for the same\n     /// target platform.  For example, sending the slice over the network or storing it in a file"}]}