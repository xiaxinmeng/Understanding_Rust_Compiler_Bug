{"sha": "6acd0ac51a1843bbbcd4ff85e8b62b654b9f383a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhY2QwYWM1MWExODQzYmJiY2Q0ZmY4NWU4YjYyYjY1NGI5ZjM4M2E=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-15T16:32:19Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-15T16:32:19Z"}, "message": "Make find_path tests adhere to style guide", "tree": {"sha": "febe82cde2f958138f1cc397b1df3652f4912df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/febe82cde2f958138f1cc397b1df3652f4912df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6acd0ac51a1843bbbcd4ff85e8b62b654b9f383a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6acd0ac51a1843bbbcd4ff85e8b62b654b9f383a", "html_url": "https://github.com/rust-lang/rust/commit/6acd0ac51a1843bbbcd4ff85e8b62b654b9f383a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6acd0ac51a1843bbbcd4ff85e8b62b654b9f383a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dafc57019a54fa7778fc8a9c844de42ff205175", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dafc57019a54fa7778fc8a9c844de42ff205175", "html_url": "https://github.com/rust-lang/rust/commit/4dafc57019a54fa7778fc8a9c844de42ff205175"}], "stats": {"total": 587, "additions": 327, "deletions": 260}, "files": [{"sha": "317ca86ecc02dd352239304738319123b1008e95", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 327, "deletions": 260, "changes": 587, "blob_url": "https://github.com/rust-lang/rust/blob/6acd0ac51a1843bbbcd4ff85e8b62b654b9f383a/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6acd0ac51a1843bbbcd4ff85e8b62b654b9f383a/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=6acd0ac51a1843bbbcd4ff85e8b62b654b9f383a", "patch": "@@ -425,106 +425,145 @@ mod tests {\n \n     #[test]\n     fn same_module() {\n-        let code = r#\"\n-            //- /main.rs\n-            struct S;\n-            $0\n-        \"#;\n-        check_found_path(code, \"S\", \"S\", \"crate::S\", \"self::S\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+struct S;\n+$0\n+        \"#,\n+            \"S\",\n+            \"S\",\n+            \"crate::S\",\n+            \"self::S\",\n+        );\n     }\n \n     #[test]\n     fn enum_variant() {\n-        let code = r#\"\n-            //- /main.rs\n-            enum E { A }\n-            $0\n-        \"#;\n-        check_found_path(code, \"E::A\", \"E::A\", \"E::A\", \"E::A\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+enum E { A }\n+$0\n+        \"#,\n+            \"E::A\",\n+            \"E::A\",\n+            \"E::A\",\n+            \"E::A\",\n+        );\n     }\n \n     #[test]\n     fn sub_module() {\n-        let code = r#\"\n-            //- /main.rs\n-            mod foo {\n-                pub struct S;\n-            }\n-            $0\n-        \"#;\n-        check_found_path(code, \"foo::S\", \"foo::S\", \"crate::foo::S\", \"self::foo::S\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+mod foo {\n+    pub struct S;\n+}\n+$0\n+        \"#,\n+            \"foo::S\",\n+            \"foo::S\",\n+            \"crate::foo::S\",\n+            \"self::foo::S\",\n+        );\n     }\n \n     #[test]\n     fn super_module() {\n-        let code = r#\"\n-            //- /main.rs\n-            mod foo;\n-            //- /foo.rs\n-            mod bar;\n-            struct S;\n-            //- /foo/bar.rs\n-            $0\n-        \"#;\n-        check_found_path(code, \"super::S\", \"super::S\", \"crate::foo::S\", \"super::S\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+mod foo;\n+//- /foo.rs\n+mod bar;\n+struct S;\n+//- /foo/bar.rs\n+$0\n+        \"#,\n+            \"super::S\",\n+            \"super::S\",\n+            \"crate::foo::S\",\n+            \"super::S\",\n+        );\n     }\n \n     #[test]\n     fn self_module() {\n-        let code = r#\"\n-            //- /main.rs\n-            mod foo;\n-            //- /foo.rs\n-            $0\n-        \"#;\n-        check_found_path(code, \"self\", \"self\", \"crate::foo\", \"self\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+mod foo;\n+//- /foo.rs\n+$0\n+        \"#,\n+            \"self\",\n+            \"self\",\n+            \"crate::foo\",\n+            \"self\",\n+        );\n     }\n \n     #[test]\n     fn crate_root() {\n-        let code = r#\"\n-            //- /main.rs\n-            mod foo;\n-            //- /foo.rs\n-            $0\n-        \"#;\n-        check_found_path(code, \"crate\", \"crate\", \"crate\", \"crate\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+mod foo;\n+//- /foo.rs\n+$0\n+        \"#,\n+            \"crate\",\n+            \"crate\",\n+            \"crate\",\n+            \"crate\",\n+        );\n     }\n \n     #[test]\n     fn same_crate() {\n-        let code = r#\"\n-            //- /main.rs\n-            mod foo;\n-            struct S;\n-            //- /foo.rs\n-            $0\n-        \"#;\n-        check_found_path(code, \"crate::S\", \"crate::S\", \"crate::S\", \"crate::S\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+mod foo;\n+struct S;\n+//- /foo.rs\n+$0\n+        \"#,\n+            \"crate::S\",\n+            \"crate::S\",\n+            \"crate::S\",\n+            \"crate::S\",\n+        );\n     }\n \n     #[test]\n     fn different_crate() {\n-        let code = r#\"\n-            //- /main.rs crate:main deps:std\n-            $0\n-            //- /std.rs crate:std\n-            pub struct S;\n-        \"#;\n-        check_found_path(code, \"std::S\", \"std::S\", \"std::S\", \"std::S\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:std\n+$0\n+//- /std.rs crate:std\n+pub struct S;\n+        \"#,\n+            \"std::S\",\n+            \"std::S\",\n+            \"std::S\",\n+            \"std::S\",\n+        );\n     }\n \n     #[test]\n     fn different_crate_renamed() {\n-        let code = r#\"\n-            //- /main.rs crate:main deps:std\n-            extern crate std as std_renamed;\n-            $0\n-            //- /std.rs crate:std\n-            pub struct S;\n-        \"#;\n         check_found_path(\n-            code,\n+            r#\"\n+//- /main.rs crate:main deps:std\n+extern crate std as std_renamed;\n+$0\n+//- /std.rs crate:std\n+pub struct S;\n+        \"#,\n             \"std_renamed::S\",\n             \"std_renamed::S\",\n             \"std_renamed::S\",\n@@ -537,41 +576,38 @@ mod tests {\n         cov_mark::check!(partially_imported);\n         // Tests that short paths are used even for external items, when parts of the path are\n         // already in scope.\n-        let code = r#\"\n-            //- /main.rs crate:main deps:syntax\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:syntax\n \n-            use syntax::ast;\n-            $0\n+use syntax::ast;\n+$0\n \n-            //- /lib.rs crate:syntax\n-            pub mod ast {\n-                pub enum ModuleItem {\n-                    A, B, C,\n-                }\n-            }\n-        \"#;\n-        check_found_path(\n-            code,\n+//- /lib.rs crate:syntax\n+pub mod ast {\n+    pub enum ModuleItem {\n+        A, B, C,\n+    }\n+}\n+        \"#,\n             \"ast::ModuleItem\",\n             \"syntax::ast::ModuleItem\",\n             \"syntax::ast::ModuleItem\",\n             \"syntax::ast::ModuleItem\",\n         );\n \n-        let code = r#\"\n-            //- /main.rs crate:main deps:syntax\n-\n-            $0\n-\n-            //- /lib.rs crate:syntax\n-            pub mod ast {\n-                pub enum ModuleItem {\n-                    A, B, C,\n-                }\n-            }\n-        \"#;\n         check_found_path(\n-            code,\n+            r#\"\n+//- /main.rs crate:main deps:syntax\n+$0\n+\n+//- /lib.rs crate:syntax\n+pub mod ast {\n+    pub enum ModuleItem {\n+        A, B, C,\n+    }\n+}\n+        \"#,\n             \"syntax::ast::ModuleItem\",\n             \"syntax::ast::ModuleItem\",\n             \"syntax::ast::ModuleItem\",\n@@ -581,140 +617,174 @@ mod tests {\n \n     #[test]\n     fn same_crate_reexport() {\n-        let code = r#\"\n-            //- /main.rs\n-            mod bar {\n-                mod foo { pub(super) struct S; }\n-                pub(crate) use foo::*;\n-            }\n-            $0\n-        \"#;\n-        check_found_path(code, \"bar::S\", \"bar::S\", \"crate::bar::S\", \"self::bar::S\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+mod bar {\n+    mod foo { pub(super) struct S; }\n+    pub(crate) use foo::*;\n+}\n+$0\n+        \"#,\n+            \"bar::S\",\n+            \"bar::S\",\n+            \"crate::bar::S\",\n+            \"self::bar::S\",\n+        );\n     }\n \n     #[test]\n     fn same_crate_reexport_rename() {\n-        let code = r#\"\n-            //- /main.rs\n-            mod bar {\n-                mod foo { pub(super) struct S; }\n-                pub(crate) use foo::S as U;\n-            }\n-            $0\n-        \"#;\n-        check_found_path(code, \"bar::U\", \"bar::U\", \"crate::bar::U\", \"self::bar::U\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+mod bar {\n+    mod foo { pub(super) struct S; }\n+    pub(crate) use foo::S as U;\n+}\n+$0\n+        \"#,\n+            \"bar::U\",\n+            \"bar::U\",\n+            \"crate::bar::U\",\n+            \"self::bar::U\",\n+        );\n     }\n \n     #[test]\n     fn different_crate_reexport() {\n-        let code = r#\"\n-            //- /main.rs crate:main deps:std\n-            $0\n-            //- /std.rs crate:std deps:core\n-            pub use core::S;\n-            //- /core.rs crate:core\n-            pub struct S;\n-        \"#;\n-        check_found_path(code, \"std::S\", \"std::S\", \"std::S\", \"std::S\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:std\n+$0\n+//- /std.rs crate:std deps:core\n+pub use core::S;\n+//- /core.rs crate:core\n+pub struct S;\n+        \"#,\n+            \"std::S\",\n+            \"std::S\",\n+            \"std::S\",\n+            \"std::S\",\n+        );\n     }\n \n     #[test]\n     fn prelude() {\n-        let code = r#\"\n-            //- /main.rs crate:main deps:std\n-            $0\n-            //- /std.rs crate:std\n-            pub mod prelude { pub struct S; }\n-            #[prelude_import]\n-            pub use prelude::*;\n-        \"#;\n-        check_found_path(code, \"S\", \"S\", \"S\", \"S\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:std\n+$0\n+//- /std.rs crate:std\n+pub mod prelude { pub struct S; }\n+#[prelude_import]\n+pub use prelude::*;\n+        \"#,\n+            \"S\",\n+            \"S\",\n+            \"S\",\n+            \"S\",\n+        );\n     }\n \n     #[test]\n     fn enum_variant_from_prelude() {\n         let code = r#\"\n-            //- /main.rs crate:main deps:std\n-            $0\n-            //- /std.rs crate:std\n-            pub mod prelude {\n-                pub enum Option<T> { Some(T), None }\n-                pub use Option::*;\n-            }\n-            #[prelude_import]\n-            pub use prelude::*;\n+//- /main.rs crate:main deps:std\n+$0\n+//- /std.rs crate:std\n+pub mod prelude {\n+    pub enum Option<T> { Some(T), None }\n+    pub use Option::*;\n+}\n+#[prelude_import]\n+pub use prelude::*;\n         \"#;\n         check_found_path(code, \"None\", \"None\", \"None\", \"None\");\n         check_found_path(code, \"Some\", \"Some\", \"Some\", \"Some\");\n     }\n \n     #[test]\n     fn shortest_path() {\n-        let code = r#\"\n-            //- /main.rs\n-            pub mod foo;\n-            pub mod baz;\n-            struct S;\n-            $0\n-            //- /foo.rs\n-            pub mod bar { pub struct S; }\n-            //- /baz.rs\n-            pub use crate::foo::bar::S;\n-        \"#;\n-        check_found_path(code, \"baz::S\", \"baz::S\", \"crate::baz::S\", \"self::baz::S\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+pub mod foo;\n+pub mod baz;\n+struct S;\n+$0\n+//- /foo.rs\n+pub mod bar { pub struct S; }\n+//- /baz.rs\n+pub use crate::foo::bar::S;\n+        \"#,\n+            \"baz::S\",\n+            \"baz::S\",\n+            \"crate::baz::S\",\n+            \"self::baz::S\",\n+        );\n     }\n \n     #[test]\n     fn discount_private_imports() {\n-        let code = r#\"\n-            //- /main.rs\n-            mod foo;\n-            pub mod bar { pub struct S; }\n-            use bar::S;\n-            //- /foo.rs\n-            $0\n-        \"#;\n-        // crate::S would be shorter, but using private imports seems wrong\n-        check_found_path(code, \"crate::bar::S\", \"crate::bar::S\", \"crate::bar::S\", \"crate::bar::S\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+mod foo;\n+pub mod bar { pub struct S; }\n+use bar::S;\n+//- /foo.rs\n+$0\n+        \"#,\n+            // crate::S would be shorter, but using private imports seems wrong\n+            \"crate::bar::S\",\n+            \"crate::bar::S\",\n+            \"crate::bar::S\",\n+            \"crate::bar::S\",\n+        );\n     }\n \n     #[test]\n     fn import_cycle() {\n-        let code = r#\"\n-            //- /main.rs\n-            pub mod foo;\n-            pub mod bar;\n-            pub mod baz;\n-            //- /bar.rs\n-            $0\n-            //- /foo.rs\n-            pub use super::baz;\n-            pub struct S;\n-            //- /baz.rs\n-            pub use super::foo;\n-        \"#;\n-        check_found_path(code, \"crate::foo::S\", \"crate::foo::S\", \"crate::foo::S\", \"crate::foo::S\");\n+        check_found_path(\n+            r#\"\n+//- /main.rs\n+pub mod foo;\n+pub mod bar;\n+pub mod baz;\n+//- /bar.rs\n+$0\n+//- /foo.rs\n+pub use super::baz;\n+pub struct S;\n+//- /baz.rs\n+pub use super::foo;\n+        \"#,\n+            \"crate::foo::S\",\n+            \"crate::foo::S\",\n+            \"crate::foo::S\",\n+            \"crate::foo::S\",\n+        );\n     }\n \n     #[test]\n     fn prefer_std_paths_over_alloc() {\n         cov_mark::check!(prefer_std_paths);\n-        let code = r#\"\n-        //- /main.rs crate:main deps:alloc,std\n-        $0\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:alloc,std\n+$0\n \n-        //- /std.rs crate:std deps:alloc\n-        pub mod sync {\n-            pub use alloc::sync::Arc;\n-        }\n+//- /std.rs crate:std deps:alloc\n+pub mod sync {\n+    pub use alloc::sync::Arc;\n+}\n \n-        //- /zzz.rs crate:alloc\n-        pub mod sync {\n-            pub struct Arc;\n-        }\n-        \"#;\n-        check_found_path(\n-            code,\n+//- /zzz.rs crate:alloc\n+pub mod sync {\n+    pub struct Arc;\n+}\n+        \"#,\n             \"std::sync::Arc\",\n             \"std::sync::Arc\",\n             \"std::sync::Arc\",\n@@ -725,26 +795,25 @@ mod tests {\n     #[test]\n     fn prefer_core_paths_over_std() {\n         cov_mark::check!(prefer_no_std_paths);\n-        let code = r#\"\n-        //- /main.rs crate:main deps:core,std\n-        #![no_std]\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:core,std\n+#![no_std]\n \n-        $0\n+$0\n \n-        //- /std.rs crate:std deps:core\n+//- /std.rs crate:std deps:core\n \n-        pub mod fmt {\n-            pub use core::fmt::Error;\n-        }\n+pub mod fmt {\n+    pub use core::fmt::Error;\n+}\n \n-        //- /zzz.rs crate:core\n+//- /zzz.rs crate:core\n \n-        pub mod fmt {\n-            pub struct Error;\n-        }\n-        \"#;\n-        check_found_path(\n-            code,\n+pub mod fmt {\n+    pub struct Error;\n+}\n+        \"#,\n             \"core::fmt::Error\",\n             \"core::fmt::Error\",\n             \"core::fmt::Error\",\n@@ -754,26 +823,25 @@ mod tests {\n \n     #[test]\n     fn prefer_alloc_paths_over_std() {\n-        let code = r#\"\n-        //- /main.rs crate:main deps:alloc,std\n-        #![no_std]\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:alloc,std\n+#![no_std]\n \n-        $0\n+$0\n \n-        //- /std.rs crate:std deps:alloc\n+//- /std.rs crate:std deps:alloc\n \n-        pub mod sync {\n-            pub use alloc::sync::Arc;\n-        }\n+pub mod sync {\n+    pub use alloc::sync::Arc;\n+}\n \n-        //- /zzz.rs crate:alloc\n+//- /zzz.rs crate:alloc\n \n-        pub mod sync {\n-            pub struct Arc;\n-        }\n-        \"#;\n-        check_found_path(\n-            code,\n+pub mod sync {\n+    pub struct Arc;\n+}\n+            \"#,\n             \"alloc::sync::Arc\",\n             \"alloc::sync::Arc\",\n             \"alloc::sync::Arc\",\n@@ -783,20 +851,19 @@ mod tests {\n \n     #[test]\n     fn prefer_shorter_paths_if_not_alloc() {\n-        let code = r#\"\n-        //- /main.rs crate:main deps:megaalloc,std\n-        $0\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:megaalloc,std\n+$0\n \n-        //- /std.rs crate:std deps:megaalloc\n-        pub mod sync {\n-            pub use megaalloc::sync::Arc;\n-        }\n+//- /std.rs crate:std deps:megaalloc\n+pub mod sync {\n+    pub use megaalloc::sync::Arc;\n+}\n \n-        //- /zzz.rs crate:megaalloc\n-        pub struct Arc;\n-        \"#;\n-        check_found_path(\n-            code,\n+//- /zzz.rs crate:megaalloc\n+pub struct Arc;\n+            \"#,\n             \"megaalloc::Arc\",\n             \"megaalloc::Arc\",\n             \"megaalloc::Arc\",\n@@ -807,12 +874,12 @@ mod tests {\n     #[test]\n     fn builtins_are_in_scope() {\n         let code = r#\"\n-        //- /main.rs\n-        $0\n+//- /main.rs\n+$0\n \n-        pub mod primitive {\n-            pub use u8;\n-        }\n+pub mod primitive {\n+    pub use u8;\n+}\n         \"#;\n         check_found_path(code, \"u8\", \"u8\", \"u8\", \"u8\");\n         check_found_path(code, \"u16\", \"u16\", \"u16\", \"u16\");\n@@ -822,10 +889,10 @@ mod tests {\n     fn inner_items() {\n         check_found_path(\n             r#\"\n-            fn main() {\n-                struct Inner {}\n-                $0\n-            }\n+fn main() {\n+    struct Inner {}\n+    $0\n+}\n         \"#,\n             \"Inner\",\n             \"Inner\",\n@@ -838,12 +905,12 @@ mod tests {\n     fn inner_items_from_outer_scope() {\n         check_found_path(\n             r#\"\n-            fn main() {\n-                struct Struct {}\n-                {\n-                    $0\n-                }\n-            }\n+fn main() {\n+    struct Struct {}\n+    {\n+        $0\n+    }\n+}\n         \"#,\n             \"Struct\",\n             \"Struct\",\n@@ -857,14 +924,14 @@ mod tests {\n         cov_mark::check!(prefixed_in_block_expression);\n         check_found_path(\n             r#\"\n-            fn main() {\n-                mod module {\n-                    struct Struct {}\n-                }\n-                {\n-                    $0\n-                }\n-            }\n+fn main() {\n+    mod module {\n+        struct Struct {}\n+    }\n+    {\n+        $0\n+    }\n+}\n         \"#,\n             \"module::Struct\",\n             \"module::Struct\",\n@@ -877,14 +944,14 @@ mod tests {\n     fn outer_items_with_inner_items_present() {\n         check_found_path(\n             r#\"\n-            mod module {\n-                pub struct CompleteMe;\n-            }\n+mod module {\n+    pub struct CompleteMe;\n+}\n \n-            fn main() {\n-                fn inner() {}\n-                $0\n-            }\n+fn main() {\n+    fn inner() {}\n+    $0\n+}\n             \"#,\n             \"module::CompleteMe\",\n             \"module::CompleteMe\","}]}