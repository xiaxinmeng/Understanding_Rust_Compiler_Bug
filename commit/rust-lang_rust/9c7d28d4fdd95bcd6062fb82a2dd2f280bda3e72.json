{"sha": "9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljN2QyOGQ0ZmRkOTViY2Q2MDYyZmI4MmEyZGQyZjI4MGJkYTNlNzI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-22T09:25:39Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-27T03:58:38Z"}, "message": "Pre-intern \"0\", \"1\", ..., \"9\", and use where appropriate.", "tree": {"sha": "e7008d43a01a6e8f055512953b51f91142e3fa97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7008d43a01a6e8f055512953b51f91142e3fa97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "html_url": "https://github.com/rust-lang/rust/commit/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58c68d00fd1702b74e67dcb6f6f54483c066ef31", "url": "https://api.github.com/repos/rust-lang/rust/commits/58c68d00fd1702b74e67dcb6f6f54483c066ef31", "html_url": "https://github.com/rust-lang/rust/commit/58c68d00fd1702b74e67dcb6f6f54483c066ef31"}], "stats": {"total": 61, "additions": 48, "deletions": 13}, "files": [{"sha": "1d51e7cd74222085133f510bbc60c6a90d1b88a4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "patch": "@@ -2956,7 +2956,7 @@ impl<'a> LoweringContext<'a> {\n             ident: match f.ident {\n                 Some(ident) => ident,\n                 // FIXME(jseyfried): positional field hygiene\n-                None => Ident::new(Symbol::intern(&index.to_string()), f.span),\n+                None => Ident::new(sym::integer(index), f.span),\n             },\n             vis: self.lower_visibility(&f.vis, None),\n             ty: self.lower_ty(&f.ty, ImplTraitContext::disallowed()),"}, {"sha": "bde27c71f9a6d242f68bcd5f8c4c2b08b912ac85", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "patch": "@@ -5,8 +5,7 @@ use crate::session::CrateDisambiguator;\n use syntax::ast::*;\n use syntax::ext::hygiene::Mark;\n use syntax::visit;\n-use syntax::symbol::kw;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::{kw, sym};\n use syntax::parse::token::{self, Token};\n use syntax_pos::Span;\n \n@@ -221,7 +220,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                           _: &'a Generics, _: NodeId, _: Span) {\n         for (index, field) in data.fields().iter().enumerate() {\n             let name = field.ident.map(|ident| ident.name)\n-                .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n+                .unwrap_or_else(|| sym::integer(index));\n             let def = self.create_def(field.id,\n                                       DefPathData::ValueNs(name.as_interned_str()),\n                                       field.span);"}, {"sha": "6af43b04a7d60646368b1e1c97ffa655d03facb9", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "patch": "@@ -1316,7 +1316,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n                 for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {\n                     let subpat_ty = self.pat_ty_adjusted(&subpat)?; // see (*2)\n-                    let interior = InteriorField(FieldIndex(i, Name::intern(&i.to_string())));\n+                    let interior = InteriorField(FieldIndex(i, sym::integer(i)));\n                     let subcmt = Rc::new(\n                         self.cat_imm_interior(pat, cmt.clone(), subpat_ty, interior));\n                     self.cat_pattern_(subcmt, &subpat, op)?;\n@@ -1363,7 +1363,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 };\n                 for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {\n                     let subpat_ty = self.pat_ty_adjusted(&subpat)?; // see (*2)\n-                    let interior = InteriorField(FieldIndex(i, Name::intern(&i.to_string())));\n+                    let interior = InteriorField(FieldIndex(i, sym::integer(i)));\n                     let subcmt = Rc::new(\n                         self.cat_imm_interior(pat, cmt.clone(), subpat_ty, interior));\n                     self.cat_pattern_(subcmt, &subpat, op)?;"}, {"sha": "1f6e54807d8cb16fdb504837d859c00d855ce455", "filename": "src/librustc_macros/src/symbols.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs?ref=9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "patch": "@@ -96,6 +96,7 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n \n     let mut keyword_stream = quote! {};\n     let mut symbols_stream = quote! {};\n+    let mut digits_stream = quote! {};\n     let mut prefill_stream = quote! {};\n     let mut counter = 0u32;\n     let mut keys = HashSet::<String>::new();\n@@ -106,6 +107,7 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n         }\n     };\n \n+    // Generate the listed keywords.\n     for keyword in &input.keywords.0 {\n         let name = &keyword.name;\n         let value = &keyword.value;\n@@ -119,6 +121,7 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n         counter += 1;\n     }\n \n+    // Generate the listed symbols.\n     for symbol in &input.symbols.0 {\n         let name = &symbol.name;\n         let value = match &symbol.value {\n@@ -135,6 +138,19 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n         counter += 1;\n     }\n \n+    // Generate symbols for the strings \"0\", \"1\", ..., \"9\".\n+    for n in 0..10 {\n+        let n = n.to_string();\n+        check_dup(&n);\n+        prefill_stream.extend(quote! {\n+            #n,\n+        });\n+        digits_stream.extend(quote! {\n+            Symbol::new(#counter),\n+        });\n+        counter += 1;\n+    }\n+\n     let tt = TokenStream::from(quote! {\n         macro_rules! keywords {\n             () => {\n@@ -145,6 +161,10 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n         macro_rules! symbols {\n             () => {\n                 #symbols_stream\n+\n+                pub const digits_array: &[Symbol; 10] = &[\n+                    #digits_stream\n+                ];\n             }\n         }\n "}, {"sha": "ccc38191a93b861887e0dc8ba03d5d7182ea4fd6", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "patch": "@@ -2,7 +2,7 @@ use std::fmt::Write;\n use std::hash::Hash;\n use std::ops::RangeInclusive;\n \n-use syntax_pos::symbol::Symbol;\n+use syntax_pos::symbol::{sym, Symbol};\n use rustc::hir;\n use rustc::ty::layout::{self, Size, Align, TyLayout, LayoutOf, VariantIdx};\n use rustc::ty;\n@@ -188,7 +188,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> ValidityVisitor<'rt, 'a, '\n \n                 PathElem::ClosureVar(name.unwrap_or_else(|| {\n                     // Fall back to showing the field index.\n-                    Symbol::intern(&field.to_string())\n+                    sym::integer(field)\n                 }))\n             }\n "}, {"sha": "a06a84f162a96a266b7b78e38d4acde9911fdf37", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "patch": "@@ -1,7 +1,7 @@\n use crate::ast::{self, Ident};\n use crate::parse::ParseSess;\n use crate::parse::token::{self, Token};\n-use crate::symbol::Symbol;\n+use crate::symbol::{sym, Symbol};\n use crate::parse::unescape;\n use crate::parse::unescape_error_reporting::{emit_unescape_error, push_escaped_char};\n \n@@ -754,7 +754,7 @@ impl<'a> StringReader<'a> {\n                 }\n                 _ => {\n                     // just a 0\n-                    return (token::Integer, self.name_from(start_bpos));\n+                    return (token::Integer, sym::integer(0));\n                 }\n             }\n         } else if c.is_digit(10) {"}, {"sha": "80bb89ef81a41cbaba226e78b35efbfb7aa1f84f", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "patch": "@@ -197,7 +197,7 @@ impl LitKind {\n                     ast::LitIntType::Signed(ty) => Some(Symbol::intern(ty.ty_to_string())),\n                     ast::LitIntType::Unsuffixed => None,\n                 };\n-                (token::Integer, Symbol::intern(&n.to_string()), suffix)\n+                (token::Integer, sym::integer(n), suffix)\n             }\n             LitKind::Float(symbol, ty) => {\n                 (token::Float, symbol, Some(Symbol::intern(ty.ty_to_string())))"}, {"sha": "6167a90b22af0fe37caad680a8f61218b64698b3", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=9c7d28d4fdd95bcd6062fb82a2dd2f280bda3e72", "patch": "@@ -9,10 +9,10 @@ use rustc_data_structures::newtype_index;\n use rustc_macros::symbols;\n use serialize::{Decodable, Decoder, Encodable, Encoder};\n \n-use std::fmt;\n-use std::str;\n use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n+use std::fmt;\n use std::hash::{Hash, Hasher};\n+use std::str;\n \n use crate::hygiene::SyntaxContext;\n use crate::{Span, DUMMY_SP, GLOBALS};\n@@ -102,6 +102,9 @@ symbols! {\n     // Symbols that can be referred to with syntax_pos::sym::*. The symbol is\n     // the stringified identifier unless otherwise specified (e.g.\n     // `proc_dash_macro` represents \"proc-macro\").\n+    //\n+    // As well as the symbols listed, there are symbols for the the strings\n+    // \"0\", \"1\", ..., \"9\", which are accessible via `sym::integer`.\n     Symbols {\n         aarch64_target_feature,\n         abi,\n@@ -966,8 +969,21 @@ pub mod kw {\n \n // This module has a very short name because it's used a lot.\n pub mod sym {\n+    use std::convert::TryInto;\n     use super::Symbol;\n+\n     symbols!();\n+\n+    // Get the symbol for an integer. The first few non-negative integers each\n+    // have a static symbol and therefore are fast.\n+    pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {\n+        if let Result::Ok(idx) = n.try_into() {\n+            if let Option::Some(&sym) = digits_array.get(idx) {\n+                return sym;\n+            }\n+        }\n+        Symbol::intern(&n.to_string())\n+    }\n }\n \n impl Symbol {"}]}