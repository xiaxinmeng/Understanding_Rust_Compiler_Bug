{"sha": "429b16e907238ef7f39dc7119263e661ec270b71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOWIxNmU5MDcyMzhlZjdmMzlkYzcxMTkyNjNlNjYxZWMyNzBiNzE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-10T20:44:40Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-17T18:10:28Z"}, "message": "Make `newtype_index` methods const", "tree": {"sha": "fe81becad83ba6381e1e7c8c269817be2237aa78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe81becad83ba6381e1e7c8c269817be2237aa78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/429b16e907238ef7f39dc7119263e661ec270b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/429b16e907238ef7f39dc7119263e661ec270b71", "html_url": "https://github.com/rust-lang/rust/commit/429b16e907238ef7f39dc7119263e661ec270b71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/429b16e907238ef7f39dc7119263e661ec270b71/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59f4ba95045e91a63e921e0d736242d7e1ffabec", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f4ba95045e91a63e921e0d736242d7e1ffabec", "html_url": "https://github.com/rust-lang/rust/commit/59f4ba95045e91a63e921e0d736242d7e1ffabec"}], "stats": {"total": 30, "additions": 6, "deletions": 24}, "files": [{"sha": "bae97a4fa08f1e382b72212a4fb3a6e392709a7f", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/429b16e907238ef7f39dc7119263e661ec270b71/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429b16e907238ef7f39dc7119263e661ec270b71/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=429b16e907238ef7f39dc7119263e661ec270b71", "patch": "@@ -120,62 +120,44 @@ macro_rules! newtype_index {\n         impl $type {\n             $v const MAX_AS_U32: u32 = $max;\n \n-            $v const MAX: Self = Self::from_u32_const($max);\n+            $v const MAX: Self = Self::from_u32($max);\n \n             #[inline]\n-            $v fn from_usize(value: usize) -> Self {\n+            $v const fn from_usize(value: usize) -> Self {\n                 assert!(value <= ($max as usize));\n                 unsafe {\n                     Self::from_u32_unchecked(value as u32)\n                 }\n             }\n \n             #[inline]\n-            $v fn from_u32(value: u32) -> Self {\n+            $v const fn from_u32(value: u32) -> Self {\n                 assert!(value <= $max);\n                 unsafe {\n                     Self::from_u32_unchecked(value)\n                 }\n             }\n \n-            /// Hacky variant of `from_u32` for use in constants.\n-            /// This version checks the \"max\" constraint by using an\n-            /// invalid array dereference.\n-            #[inline]\n-            $v const fn from_u32_const(value: u32) -> Self {\n-                // This will fail at const eval time unless `value <=\n-                // max` is true (in which case we get the index 0).\n-                // It will also fail at runtime, of course, but in a\n-                // kind of wacky way.\n-                let _ = [\"out of range value used\"][\n-                    !(value <= $max) as usize\n-                ];\n-\n-                unsafe {\n-                    Self { private: value }\n-                }\n-            }\n-\n             #[inline]\n             $v const unsafe fn from_u32_unchecked(value: u32) -> Self {\n                 Self { private: value }\n             }\n \n             /// Extracts the value of this index as an integer.\n             #[inline]\n-            $v fn index(self) -> usize {\n+            $v const fn index(self) -> usize {\n                 self.as_usize()\n             }\n \n             /// Extracts the value of this index as a `u32`.\n             #[inline]\n-            $v fn as_u32(self) -> u32 {\n+            $v const fn as_u32(self) -> u32 {\n                 self.private\n             }\n \n             /// Extracts the value of this index as a `usize`.\n             #[inline]\n-            $v fn as_usize(self) -> usize {\n+            $v const fn as_usize(self) -> usize {\n                 self.as_u32() as usize\n             }\n         }"}]}