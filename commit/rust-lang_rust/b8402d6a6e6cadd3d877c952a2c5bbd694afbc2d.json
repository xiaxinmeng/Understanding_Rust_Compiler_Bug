{"sha": "b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NDAyZDZhNmU2Y2FkZDNkODc3Yzk1MmEyYzViYmQ2OTRhZmJjMmQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-22T09:36:54Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-24T07:04:23Z"}, "message": "assign the correct `DefId` in `nominal_obligations`", "tree": {"sha": "ad616505fa0d6e76f9b766bd6ebd1c3d36e7c407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad616505fa0d6e76f9b766bd6ebd1c3d36e7c407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d", "html_url": "https://github.com/rust-lang/rust/commit/b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d3f401df47cf680180c357fabdc8c76c2a08ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d3f401df47cf680180c357fabdc8c76c2a08ab", "html_url": "https://github.com/rust-lang/rust/commit/f8d3f401df47cf680180c357fabdc8c76c2a08ab"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "909cd2aa1551ec3bd93f7393a4da20c961334ffb", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d", "patch": "@@ -7,8 +7,9 @@ use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_span::Span;\n-use std::rc::Rc;\n \n+use std::iter;\n+use std::rc::Rc;\n /// Returns the set of obligations needed to make `arg` well-formed.\n /// If `arg` contains unresolved inference variables, this may include\n /// further WF obligations. However, if `arg` IS an unresolved\n@@ -616,13 +617,24 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n     ) -> Vec<traits::PredicateObligation<'tcx>> {\n-        let predicates = self.infcx.tcx.predicates_of(def_id).instantiate(self.infcx.tcx, substs);\n+        let predicates = self.infcx.tcx.predicates_of(def_id);\n+        let mut origins = vec![def_id; predicates.predicates.len()];\n+        let mut head = predicates;\n+        while let Some(parent) = head.parent {\n+            head = self.infcx.tcx.predicates_of(parent);\n+            origins.extend(iter::repeat(parent).take(head.predicates.len()));\n+        }\n+\n+        let predicates = predicates.instantiate(self.infcx.tcx, substs);\n+        debug_assert_eq!(predicates.predicates.len(), origins.len());\n+\n         predicates\n             .predicates\n             .into_iter()\n             .zip(predicates.spans.into_iter())\n-            .map(|(pred, span)| {\n-                let cause = self.cause(traits::BindingObligation(def_id, span));\n+            .zip(origins.into_iter().rev())\n+            .map(|((pred, span), origin_def_id)| {\n+                let cause = self.cause(traits::BindingObligation(origin_def_id, span));\n                 traits::Obligation::new(cause, self.param_env, pred)\n             })\n             .filter(|pred| !pred.has_escaping_bound_vars())"}, {"sha": "4af68118be31fda7ff6c53d2ec9a430ae8417982", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr?ref=b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d", "patch": "@@ -33,7 +33,7 @@ LL |     let _ = const_evaluatable_lib::test1::<T>();\n   ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n-   |          ---------------------------- required by this bound in `test1::{{constant}}#1`\n+   |          ---------------------------- required by this bound in `test1`\n    |\n    = note: this may fail depending on what value the parameter takes\n \n@@ -46,7 +46,7 @@ LL |     let _ = const_evaluatable_lib::test1::<T>();\n   ::: $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n-   |                           ---------------------------- required by this bound in `test1::{{constant}}#1`\n+   |                           ---------------------------- required by this bound in `test1`\n    |\n    = note: this may fail depending on what value the parameter takes\n "}, {"sha": "dd27b81ee03423f60148001998f0b577acecd0ff", "filename": "src/test/ui/const-generics/const_evaluatable_checked/let-bindings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr?ref=b8402d6a6e6cadd3d877c952a2c5bbd694afbc2d", "patch": "@@ -2,7 +2,7 @@ error: constant expression depends on a generic parameter\n   --> $DIR/let-bindings.rs:6:68\n    |\n LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                                                    ^^^^^^^^^^^^^^^^^^^^ required by this bound in `test::{{constant}}#0`\n+   |                                                                    ^^^^^^^^^^^^^^^^^^^^ required by this bound in `test`\n    |\n    = help: consider moving this anonymous constant into a `const` function\n "}]}