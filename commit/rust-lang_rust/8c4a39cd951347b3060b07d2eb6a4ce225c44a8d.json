{"sha": "8c4a39cd951347b3060b07d2eb6a4ce225c44a8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNGEzOWNkOTUxMzQ3YjMwNjBiMDdkMmViNmE0Y2UyMjVjNDRhOGQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-10-18T05:04:28Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-10-27T01:44:05Z"}, "message": "review changes", "tree": {"sha": "5fad4c63f9e2ac98b111ac5126664d32c2f43e98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fad4c63f9e2ac98b111ac5126664d32c2f43e98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d", "html_url": "https://github.com/rust-lang/rust/commit/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9322332140fe934ece4476ade531009b2f71f033", "url": "https://api.github.com/repos/rust-lang/rust/commits/9322332140fe934ece4476ade531009b2f71f033", "html_url": "https://github.com/rust-lang/rust/commit/9322332140fe934ece4476ade531009b2f71f033"}], "stats": {"total": 77, "additions": 60, "deletions": 17}, "files": [{"sha": "eee34324a6583a192dadd6b642640271642a1b66", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8c4a39cd951347b3060b07d2eb6a4ce225c44a8d", "patch": "@@ -43,8 +43,9 @@ use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n \n use std::collections::HashSet;\n \n-use syntax::{ast, feature_gate};\n+use syntax::ast;\n use syntax::attr;\n+use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::Span;\n \n use rustc::hir::{self, PatKind};\n@@ -749,7 +750,19 @@ declare_lint! {\n \n /// Checks for use of attributes which have been deprecated.\n #[derive(Clone)]\n-pub struct DeprecatedAttr;\n+pub struct DeprecatedAttr {\n+    // This is not free to compute, so we want to keep it around, rather than\n+    // compute it for every attribute.\n+    depr_attrs: Vec<&'static (&'static str, AttributeType, AttributeGate)>,\n+}\n+\n+impl DeprecatedAttr {\n+    pub fn new() -> DeprecatedAttr {\n+        DeprecatedAttr {\n+            depr_attrs: deprecated_attributes(),\n+        }\n+    }\n+}\n \n impl LintPass for DeprecatedAttr {\n     fn get_lints(&self) -> LintArray {\n@@ -760,14 +773,16 @@ impl LintPass for DeprecatedAttr {\n impl EarlyLintPass for DeprecatedAttr {\n     fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n         let name = &*attr.name();\n-        for &(n, _, ref g) in feature_gate::KNOWN_ATTRIBUTES {\n+        for &&(n, _, ref g) in &self.depr_attrs {\n             if n == name {\n-                if let &feature_gate::AttributeGate::Gated(feature_gate::Stability::Deprecated,\n-                                                           ref name,\n-                                                           ..) = g {\n+                if let &AttributeGate::Gated(Stability::Deprecated(link),\n+                                             ref name,\n+                                             ref reason,\n+                                             _) = g {\n                     cx.span_lint(DEPRECATED,\n                                  attr.span,\n-                                 &format!(\"use of deprecated attribute: {}\", name));\n+                                 &format!(\"use of deprecated attribute `{}`: {}. See {}\",\n+                                          name, reason, link));\n                 }\n                 return;\n             }"}, {"sha": "5fc4952965bda0db235d6b020870da223f609d78", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=8c4a39cd951347b3060b07d2eb6a4ce225c44a8d", "patch": "@@ -37,6 +37,7 @@\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n+#![feature(dotdot_in_tuple_patterns)]\n \n #[macro_use]\n extern crate syntax;\n@@ -95,6 +96,14 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             )\n     }\n \n+    macro_rules! add_early_builtin_with_new {\n+        ($sess:ident, $($name:ident),*,) => (\n+            {$(\n+                store.register_early_pass($sess, false, box $name::new());\n+                )*}\n+            )\n+    }\n+\n     macro_rules! add_lint_group {\n         ($sess:ident, $name:expr, $($lint:ident),*) => (\n             store.register_group($sess, false, $name, vec![$(LintId::of($lint)),*]);\n@@ -103,9 +112,12 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n     add_early_builtin!(sess,\n                        UnusedParens,\n-                       DeprecatedAttr,\n                        );\n \n+    add_early_builtin_with_new!(sess,\n+                                DeprecatedAttr,\n+                                );\n+\n     add_builtin!(sess,\n                  HardwiredLints,\n                  WhileTrue,"}, {"sha": "f2cbafe32df18f305cf92164bc44630628922b3e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8c4a39cd951347b3060b07d2eb6a4ce225c44a8d", "patch": "@@ -377,17 +377,28 @@ pub enum AttributeGate {\n     Ungated,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq)]\n+impl AttributeGate {\n+    fn is_deprecated(&self) -> bool {\n+        match *self {\n+            Gated(Stability::Deprecated(_), ..) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum Stability {\n     Unstable,\n-    Deprecated,\n+    // Argument is tracking issue link.\n+    Deprecated(&'static str),\n }\n \n // fn() is not Debug\n impl ::std::fmt::Debug for AttributeGate {\n     fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n         match *self {\n-            Gated(_, ref name, ref expl, _) => write!(fmt, \"Gated({}, {})\", name, expl),\n+            Gated(ref stab, ref name, ref expl, _) =>\n+                write!(fmt, \"Gated({:?}, {}, {})\", stab, name, expl),\n             Ungated => write!(fmt, \"Ungated\")\n         }\n     }\n@@ -402,6 +413,10 @@ macro_rules! cfg_fn {\n     }}\n }\n \n+pub fn deprecated_attributes() -> Vec<&'static (&'static str, AttributeType, AttributeGate)> {\n+    KNOWN_ATTRIBUTES.iter().filter(|a| a.2.is_deprecated()).collect()\n+}\n+\n // Attributes that have a special meaning to rustc or rustdoc\n pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGate)] = &[\n     // Normal attributes\n@@ -643,11 +658,11 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"link_section\", Whitelisted, Ungated),\n     (\"no_builtins\", Whitelisted, Ungated),\n     (\"no_mangle\", Whitelisted, Ungated),\n-    (\"no_debug\", Whitelisted, Gated(Stability::Deprecated,\n-                                    \"no_debug\",\n-                                    \"the `#[no_debug]` attribute \\\n-                                     is an experimental feature\",\n-                                    cfg_fn!(no_debug))),\n+    (\"no_debug\", Whitelisted, Gated(\n+        Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29721\"),\n+        \"no_debug\",\n+        \"the `#[no_debug]` attribute is an experimental feature\",\n+        cfg_fn!(no_debug))),\n     (\"omit_gdb_pretty_printer_section\", Whitelisted, Gated(Stability::Unstable,\n                                                        \"omit_gdb_pretty_printer_section\",\n                                                        \"the `#[omit_gdb_pretty_printer_section]` \\"}, {"sha": "b2f2787899301207d4f57fcd1aec34011324fe30", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=8c4a39cd951347b3060b07d2eb6a4ce225c44a8d", "patch": "@@ -34,6 +34,7 @@\n #![cfg_attr(stage0, feature(question_mark))]\n #![feature(rustc_diagnostic_macros)]\n #![feature(specialization)]\n+#![feature(dotdot_in_tuple_patterns)]\n \n extern crate serialize;\n extern crate term;"}, {"sha": "b663c136ee525bc9f54cac840bbe4d8a3c2d0ca2", "filename": "src/test/compile-fail/feature-gate-no-debug-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4a39cd951347b3060b07d2eb6a4ce225c44a8d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug-2.rs?ref=8c4a39cd951347b3060b07d2eb6a4ce225c44a8d", "patch": "@@ -11,5 +11,5 @@\n #![deny(deprecated)]\n #![feature(no_debug)]\n \n-#[no_debug] //~ ERROR use of deprecated attribute: no_debug\n+#[no_debug] //~ ERROR use of deprecated attribute `no_debug`\n fn main() {}"}]}