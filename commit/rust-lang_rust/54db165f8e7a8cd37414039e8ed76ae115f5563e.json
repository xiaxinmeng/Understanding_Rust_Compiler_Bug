{"sha": "54db165f8e7a8cd37414039e8ed76ae115f5563e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZGIxNjVmOGU3YThjZDM3NDE0MDM5ZThlZDc2YWUxMTVmNTU2M2U=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-11T06:26:06Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-11T06:26:06Z"}, "message": "Implement a cache for looking up yields", "tree": {"sha": "31ce1f862abef49fad7942a07924e42013135efc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ce1f862abef49fad7942a07924e42013135efc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54db165f8e7a8cd37414039e8ed76ae115f5563e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54db165f8e7a8cd37414039e8ed76ae115f5563e", "html_url": "https://github.com/rust-lang/rust/commit/54db165f8e7a8cd37414039e8ed76ae115f5563e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54db165f8e7a8cd37414039e8ed76ae115f5563e/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6601ab9b1b569f81df9afa199de77cc205132e0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6601ab9b1b569f81df9afa199de77cc205132e0e", "html_url": "https://github.com/rust-lang/rust/commit/6601ab9b1b569f81df9afa199de77cc205132e0e"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "1f75d09c3172435be755793bb6158449851933e0", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/54db165f8e7a8cd37414039e8ed76ae115f5563e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54db165f8e7a8cd37414039e8ed76ae115f5563e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=54db165f8e7a8cd37414039e8ed76ae115f5563e", "patch": "@@ -24,6 +24,7 @@ use std::mem;\n use std::rc::Rc;\n use syntax::codemap;\n use syntax::ast;\n+use syntax::ast::NodeId;\n use syntax_pos::Span;\n use ty::TyCtxt;\n use ty::maps::Providers;\n@@ -1167,29 +1168,56 @@ fn region_maps<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     Rc::new(maps)\n }\n \n-struct YieldFinder(Option<Span>);\n+struct YieldFinder<'a> {\n+    cache: &'a mut FxHashMap<NodeId, Option<Span>>,\n+    result: Option<Span>,\n+}\n+\n+impl<'a> YieldFinder<'a> {\n+    fn lookup<F: FnOnce(&mut Self)>(&mut self, id: NodeId, f: F) {\n+        if let Some(result) = self.cache.get(&id) {\n+            self.result = *result;\n+            return;\n+        }\n+        if self.result.is_some() {\n+            return;\n+        }\n+        f(self);\n+        self.cache.insert(id, self.result);\n+    }\n+}\n \n-impl<'tcx> Visitor<'tcx> for YieldFinder {\n+impl<'a, 'tcx> Visitor<'tcx> for YieldFinder<'a> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         if let hir::ExprYield(..) = expr.node {\n-            if self.0.is_none() {\n-                self.0 = Some(expr.span);\n-            }\n+            self.result = Some(expr.span);\n+            return;\n         }\n \n-        intravisit::walk_expr(self, expr);\n+        self.lookup(expr.id, |this| {\n+            intravisit::walk_expr(this, expr);\n+        });\n+    }\n+\n+    fn visit_block(&mut self, block: &'tcx hir::Block) {\n+        self.lookup(block.id, |this| {\n+            intravisit::walk_block(this, block);\n+        });\n     }\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Checks whether the given code extent contains a `yield`. If so,\n-    /// returns `Some(span)` with the span of the \"first\" yield we find.\n-    pub fn yield_in_extent(self, extent: CodeExtent) -> Option<Span> {\n-        let mut finder = YieldFinder(None);\n+    /// returns `Some(span)` with the span of a yield we found.\n+    pub fn yield_in_extent(self, extent: CodeExtent, cache: &mut FxHashMap<NodeId, Option<Span>>) -> Option<Span> {\n+        let mut finder = YieldFinder {\n+            cache,\n+            result: None,\n+        };\n \n         match extent {\n             CodeExtent::DestructionScope(node_id) |\n@@ -1199,33 +1227,33 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     Node::NodeTraitItem(_) |\n                     Node::NodeImplItem(_) => {\n                         let body = self.hir.body(self.hir.body_owned_by(node_id));\n-                        intravisit::walk_body(&mut finder, body);\n+                        finder.visit_body(body);\n                     }\n-                    Node::NodeExpr(expr) => intravisit::walk_expr(&mut finder, expr),\n-                    Node::NodeStmt(stmt) => intravisit::walk_stmt(&mut finder, stmt),\n-                    Node::NodeBlock(block) => intravisit::walk_block(&mut finder, block),\n+                    Node::NodeExpr(expr) => finder.visit_expr(expr),\n+                    Node::NodeStmt(stmt) => finder.visit_stmt(stmt),\n+                    Node::NodeBlock(block) => finder.visit_block(block),\n                     _ => bug!(),\n                 }\n             }\n \n             CodeExtent::CallSiteScope(body_id) |\n             CodeExtent::ParameterScope(body_id) => {\n-                intravisit::walk_body(&mut finder, self.hir.body(body_id))\n+                finder.visit_body(self.hir.body(body_id))\n             }\n \n             CodeExtent::Remainder(r) => {\n                 if let Node::NodeBlock(block) = self.hir.get(r.block) {\n                     for stmt in &block.stmts[(r.first_statement_index as usize + 1)..] {\n-                        intravisit::walk_stmt(&mut finder, stmt);\n+                        finder.visit_stmt(stmt);\n                     }\n-                    block.expr.as_ref().map(|e| intravisit::walk_expr(&mut finder, e));\n+                    block.expr.as_ref().map(|e| finder.visit_expr(e));\n                 } else {\n                     bug!()\n                 }\n             }\n         }\n \n-        finder.0\n+        finder.result\n     }\n }\n "}, {"sha": "ca047b0d488abe16fb063826c015f6063ae543f5", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54db165f8e7a8cd37414039e8ed76ae115f5563e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54db165f8e7a8cd37414039e8ed76ae115f5563e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=54db165f8e7a8cd37414039e8ed76ae115f5563e", "patch": "@@ -36,7 +36,7 @@ use rustc::middle::region::{self, RegionMaps};\n use rustc::middle::free_region::RegionRelations;\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::maps::Providers;\n-\n+use rustc::util::nodemap::FxHashMap;\n use std::fmt;\n use std::rc::Rc;\n use std::hash::{Hash, Hasher};\n@@ -827,7 +827,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                 // block remainder that starts with\n                                 // `let a`) for a yield. We can cite\n                                 // that for the user.\n-                                self.tcx.yield_in_extent(value_extent)\n+                                self.tcx.yield_in_extent(value_extent, &mut FxHashMap())\n                             } else {\n                                 None\n                             }"}, {"sha": "a5440e6d99216fbd2d87844b4eb93c5030cb96e2", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/54db165f8e7a8cd37414039e8ed76ae115f5563e/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54db165f8e7a8cd37414039e8ed76ae115f5563e/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=54db165f8e7a8cd37414039e8ed76ae115f5563e", "patch": "@@ -14,12 +14,16 @@ use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Body, Pat, PatKind, Expr};\n use rustc::middle::region::{RegionMaps, CodeExtent};\n use rustc::ty::Ty;\n+use syntax::ast::NodeId;\n+use syntax::codemap::Span;\n use std::rc::Rc;\n use super::FnCtxt;\n use util::nodemap::FxHashSet;\n+use util::nodemap::FxHashMap;\n \n struct InteriorVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n+    cache: FxHashMap<NodeId, Option<Span>>,\n     types: FxHashSet<Ty<'tcx>>,\n     region_maps: Rc<RegionMaps>,\n }\n@@ -28,7 +32,7 @@ impl<'a, 'gcx, 'tcx> InteriorVisitor<'a, 'gcx, 'tcx> {\n     fn record(&mut self, ty: Ty<'tcx>, scope: Option<CodeExtent>, expr: Option<&'tcx Expr>) {\n         use syntax_pos::DUMMY_SP;\n \n-        if scope.map(|s| self.fcx.tcx.yield_in_extent(s).is_some()).unwrap_or(true) {\n+        if scope.map(|s| self.fcx.tcx.yield_in_extent(s, &mut self.cache).is_some()).unwrap_or(true) {\n             if log_enabled!(log::LogLevel::Debug) {\n                 if let Some(s) = scope {\n                     let span = s.span(&self.fcx.tcx.hir).unwrap_or(DUMMY_SP);\n@@ -61,6 +65,7 @@ pub fn resolve_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     let mut visitor = InteriorVisitor {\n         fcx,\n         types: FxHashSet(),\n+        cache: FxHashMap(),\n         region_maps: fcx.tcx.region_maps(def_id),\n     };\n     intravisit::walk_body(&mut visitor, body);"}]}