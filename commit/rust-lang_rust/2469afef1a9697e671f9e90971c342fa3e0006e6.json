{"sha": "2469afef1a9697e671f9e90971c342fa3e0006e6", "node_id": "C_kwDOAAsO6NoAKDI0NjlhZmVmMWE5Njk3ZTY3MWY5ZTkwOTcxYzM0MmZhM2UwMDA2ZTY", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-29T11:29:07Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-02T02:44:04Z"}, "message": "Make the BUG_REPORT_URL configurable by tools\n\nThis greatly simplifies how hard it is to set a custom bug report url; previously tools had to copy\nthe entire hook implementation.\n\n- Switch clippy to the new hook\n\n  This also adds a `extra_info` callback so clippy can include its own version number, which differs\n  from rustc's.\n\n- Call `install_ice_hook` in rustfmt", "tree": {"sha": "7f9eab4c89d6a5401e314df98197146645ea5be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f9eab4c89d6a5401e314df98197146645ea5be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2469afef1a9697e671f9e90971c342fa3e0006e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2469afef1a9697e671f9e90971c342fa3e0006e6", "html_url": "https://github.com/rust-lang/rust/commit/2469afef1a9697e671f9e90971c342fa3e0006e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2469afef1a9697e671f9e90971c342fa3e0006e6/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0be14565fd331e9c96123dda33bf1105f35201c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0be14565fd331e9c96123dda33bf1105f35201c", "html_url": "https://github.com/rust-lang/rust/commit/f0be14565fd331e9c96123dda33bf1105f35201c"}], "stats": {"total": 226, "additions": 115, "deletions": 111}, "files": [{"sha": "92153e91a277d3dc836f5cb9d6f7bdc7fe8058a5", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 57, "deletions": 46, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/2469afef1a9697e671f9e90971c342fa3e0006e6/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2469afef1a9697e671f9e90971c342fa3e0006e6/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=2469afef1a9697e671f9e90971c342fa3e0006e6", "patch": "@@ -25,7 +25,7 @@ use rustc_data_structures::profiling::{\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{\n-    DiagnosticMessage, ErrorGuaranteed, PResult, SubdiagnosticMessage, TerminalUrl,\n+    DiagnosticMessage, ErrorGuaranteed, Handler, PResult, SubdiagnosticMessage, TerminalUrl,\n };\n use rustc_feature::find_gated_cfg;\n use rustc_fluent_macro::fluent_messages;\n@@ -55,7 +55,7 @@ use std::panic::{self, catch_unwind};\n use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n use std::str;\n-use std::sync::LazyLock;\n+use std::sync::OnceLock;\n use std::time::Instant;\n \n // This import blocks the use of panicking `print` and `println` in all the code\n@@ -119,7 +119,7 @@ pub const EXIT_SUCCESS: i32 = 0;\n /// Exit status code used for compilation failures and invalid flags.\n pub const EXIT_FAILURE: i32 = 1;\n \n-const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust/issues/new\\\n+pub const DEFAULT_BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust/issues/new\\\n     ?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\";\n \n const ICE_REPORT_COMPILER_FLAGS: &[&str] = &[\"-Z\", \"-C\", \"--crate-type\"];\n@@ -1195,43 +1195,66 @@ pub fn catch_with_exit_code(f: impl FnOnce() -> interface::Result<()>) -> i32 {\n     }\n }\n \n-static DEFAULT_HOOK: LazyLock<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> =\n-    LazyLock::new(|| {\n-        let hook = panic::take_hook();\n-        panic::set_hook(Box::new(|info| {\n-            // If the error was caused by a broken pipe then this is not a bug.\n-            // Write the error and return immediately. See #98700.\n-            #[cfg(windows)]\n-            if let Some(msg) = info.payload().downcast_ref::<String>() {\n-                if msg.starts_with(\"failed printing to stdout: \") && msg.ends_with(\"(os error 232)\")\n-                {\n-                    early_error_no_abort(ErrorOutputType::default(), &msg);\n-                    return;\n-                }\n-            };\n+/// Stores the default panic hook, from before [`install_ice_hook`] was called.\n+static DEFAULT_HOOK: OnceLock<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> =\n+    OnceLock::new();\n+\n+/// Installs a panic hook that will print the ICE message on unexpected panics.\n+///\n+/// The hook is intended to be useable even by external tools. You can pass a custom\n+/// `bug_report_url`, or report arbitrary info in `extra_info`. Note that `extra_info` is called in\n+/// a context where *the thread is currently panicking*, so it must not panic or the process will\n+/// abort.\n+///\n+/// If you have no extra info to report, pass the empty closure `|_| ()` as the argument to\n+/// extra_info.\n+///\n+/// A custom rustc driver can skip calling this to set up a custom ICE hook.\n+pub fn install_ice_hook(bug_report_url: &'static str, extra_info: fn(&Handler)) {\n+    // If the user has not explicitly overridden \"RUST_BACKTRACE\", then produce\n+    // full backtraces. When a compiler ICE happens, we want to gather\n+    // as much information as possible to present in the issue opened\n+    // by the user. Compiler developers and other rustc users can\n+    // opt in to less-verbose backtraces by manually setting \"RUST_BACKTRACE\"\n+    // (e.g. `RUST_BACKTRACE=1`)\n+    if std::env::var(\"RUST_BACKTRACE\").is_err() {\n+        std::env::set_var(\"RUST_BACKTRACE\", \"full\");\n+    }\n \n-            // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n-            // Don't do this for delayed bugs, which already emit their own more useful backtrace.\n-            if !info.payload().is::<rustc_errors::DelayedBugPanic>() {\n-                (*DEFAULT_HOOK)(info);\n+    let default_hook = DEFAULT_HOOK.get_or_init(panic::take_hook);\n \n-                // Separate the output with an empty line\n-                eprintln!();\n+    panic::set_hook(Box::new(move |info| {\n+        // If the error was caused by a broken pipe then this is not a bug.\n+        // Write the error and return immediately. See #98700.\n+        #[cfg(windows)]\n+        if let Some(msg) = info.payload().downcast_ref::<String>() {\n+            if msg.starts_with(\"failed printing to stdout: \") && msg.ends_with(\"(os error 232)\") {\n+                early_error_no_abort(ErrorOutputType::default(), &msg);\n+                return;\n             }\n+        };\n \n-            // Print the ICE message\n-            report_ice(info, BUG_REPORT_URL);\n-        }));\n-        hook\n-    });\n+        // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n+        // Don't do this for delayed bugs, which already emit their own more useful backtrace.\n+        if !info.payload().is::<rustc_errors::DelayedBugPanic>() {\n+            (*default_hook)(info);\n+\n+            // Separate the output with an empty line\n+            eprintln!();\n+        }\n+\n+        // Print the ICE message\n+        report_ice(info, bug_report_url, extra_info);\n+    }));\n+}\n \n /// Prints the ICE message, including query stack, but without backtrace.\n ///\n /// The message will point the user at `bug_report_url` to report the ICE.\n ///\n /// When `install_ice_hook` is called, this function will be called as the panic\n /// hook.\n-pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n+pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str, extra_info: fn(&Handler)) {\n     let fallback_bundle =\n         rustc_errors::fallback_fluent_bundle(crate::DEFAULT_LOCALE_RESOURCES.to_vec(), false);\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n@@ -1276,29 +1299,17 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n \n     interface::try_print_query_stack(&handler, num_frames);\n \n+    // We don't trust this callback not to panic itself, so run it at the end after we're sure we've\n+    // printed all the relevant info.\n+    extra_info(&handler);\n+\n     #[cfg(windows)]\n     if env::var(\"RUSTC_BREAK_ON_ICE\").is_ok() {\n         // Trigger a debugger if we crashed during bootstrap\n         unsafe { windows::Win32::System::Diagnostics::Debug::DebugBreak() };\n     }\n }\n \n-/// Installs a panic hook that will print the ICE message on unexpected panics.\n-///\n-/// A custom rustc driver can skip calling this to set up a custom ICE hook.\n-pub fn install_ice_hook() {\n-    // If the user has not explicitly overridden \"RUST_BACKTRACE\", then produce\n-    // full backtraces. When a compiler ICE happens, we want to gather\n-    // as much information as possible to present in the issue opened\n-    // by the user. Compiler developers and other rustc users can\n-    // opt in to less-verbose backtraces by manually setting \"RUST_BACKTRACE\"\n-    // (e.g. `RUST_BACKTRACE=1`)\n-    if std::env::var(\"RUST_BACKTRACE\").is_err() {\n-        std::env::set_var(\"RUST_BACKTRACE\", \"full\");\n-    }\n-    LazyLock::force(&DEFAULT_HOOK);\n-}\n-\n /// This allows tools to enable rust logging without having to magically match rustc's\n /// tracing crate version.\n pub fn init_rustc_env_logger() {\n@@ -1369,7 +1380,7 @@ pub fn main() -> ! {\n     init_rustc_env_logger();\n     signal_handler::install();\n     let mut callbacks = TimePassesCallbacks::default();\n-    install_ice_hook();\n+    install_ice_hook(DEFAULT_BUG_REPORT_URL, |_| ());\n     let exit_code = catch_with_exit_code(|| {\n         let args = env::args_os()\n             .enumerate()"}, {"sha": "2746debbfab613ef9a94c45b84134470c2b1766c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2469afef1a9697e671f9e90971c342fa3e0006e6/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2469afef1a9697e671f9e90971c342fa3e0006e6/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=2469afef1a9697e671f9e90971c342fa3e0006e6", "patch": "@@ -154,7 +154,11 @@ pub fn main() {\n         }\n     }\n \n-    rustc_driver::install_ice_hook();\n+    rustc_driver::install_ice_hook(\n+        \"https://github.com/rust-lang/rust/issues/new\\\n+    ?labels=C-bug%2C+I-ICE%2C+T-rustdoc&template=ice.md\",\n+        |_| (),\n+    );\n \n     // When using CI artifacts with `download-rustc`, tracing is unconditionally built\n     // with `--features=static_max_level_info`, which disables almost all rustdoc logging. To avoid"}, {"sha": "59bf447a7cd0758c9961b1cc826b4d4498dc487b", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 9, "deletions": 61, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2469afef1a9697e671f9e90971c342fa3e0006e6/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2469afef1a9697e671f9e90971c342fa3e0006e6/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=2469afef1a9697e671f9e90971c342fa3e0006e6", "patch": "@@ -11,7 +11,6 @@\n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n extern crate rustc_driver;\n-extern crate rustc_errors;\n extern crate rustc_interface;\n extern crate rustc_session;\n extern crate rustc_span;\n@@ -20,13 +19,10 @@ use rustc_interface::interface;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::Symbol;\n \n-use std::borrow::Cow;\n use std::env;\n use std::ops::Deref;\n-use std::panic;\n use std::path::Path;\n use std::process::exit;\n-use std::sync::LazyLock;\n \n /// If a command-line option matches `find_arg`, then apply the predicate `pred` on its value. If\n /// true, then return it. The parameter is assumed to be either `--arg=value` or `--arg value`.\n@@ -198,66 +194,18 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \n const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust-clippy/issues/new\";\n \n-type PanicCallback = dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static;\n-static ICE_HOOK: LazyLock<Box<PanicCallback>> = LazyLock::new(|| {\n-    let hook = panic::take_hook();\n-    panic::set_hook(Box::new(|info| report_clippy_ice(info, BUG_REPORT_URL)));\n-    hook\n-});\n-\n-fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n-    // Invoke our ICE handler, which prints the actual panic message and optionally a backtrace\n-    (*ICE_HOOK)(info);\n-\n-    // Separate the output with an empty line\n-    eprintln!();\n-\n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(), false);\n-    let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n-        rustc_errors::ColorConfig::Auto,\n-        None,\n-        None,\n-        fallback_bundle,\n-        false,\n-        false,\n-        None,\n-        false,\n-        false,\n-        rustc_errors::TerminalUrl::No,\n-    ));\n-    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n-\n-    // a .span_bug or .bug call has already printed what\n-    // it wants to print.\n-    if !info.payload().is::<rustc_errors::ExplicitBug>() {\n-        let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n-        handler.emit_diagnostic(&mut d);\n-    }\n-\n-    let version_info = rustc_tools_util::get_version_info!();\n-\n-    let xs: Vec<Cow<'static, str>> = vec![\n-        \"the compiler unexpectedly panicked. this is a bug.\".into(),\n-        format!(\"we would appreciate a bug report: {bug_report_url}\").into(),\n-        format!(\"Clippy version: {version_info}\").into(),\n-    ];\n-\n-    for note in &xs {\n-        handler.note_without_error(note.as_ref());\n-    }\n-\n-    // If backtraces are enabled, also print the query stack\n-    let backtrace = env::var_os(\"RUST_BACKTRACE\").map_or(false, |x| &x != \"0\");\n-\n-    let num_frames = if backtrace { None } else { Some(2) };\n-\n-    interface::try_print_query_stack(&handler, num_frames);\n-}\n-\n #[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n-    LazyLock::force(&ICE_HOOK);\n+\n+    rustc_driver::install_ice_hook(BUG_REPORT_URL, |handler| {\n+        // FIXME: this macro calls unwrap internally but is called in a panicking context!  It's not\n+        // as simple as moving the call from the hook to main, because `install_ice_hook` doesn't\n+        // accept a generic closure.\n+        let version_info = rustc_tools_util::get_version_info!();\n+        handler.note_without_error(format!(\"Clippy version: {version_info}\"));\n+    });\n+\n     exit(rustc_driver::catch_with_exit_code(move || {\n         let mut orig_args: Vec<String> = env::args().collect();\n         let has_sysroot_arg = arg_value(&orig_args, \"--sysroot\", |_| true).is_some();"}, {"sha": "2c0074951d6e5d9b201a3b047621997567ac5d64", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2469afef1a9697e671f9e90971c342fa3e0006e6/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2469afef1a9697e671f9e90971c342fa3e0006e6/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=2469afef1a9697e671f9e90971c342fa3e0006e6", "patch": "@@ -286,11 +286,10 @@ fn main() {\n     // (`install_ice_hook` might change `RUST_BACKTRACE`.)\n     let env_snapshot = env::vars_os().collect::<Vec<_>>();\n \n-    // Earliest rustc setup.\n-    rustc_driver::install_ice_hook();\n-\n     // If the environment asks us to actually be rustc, then do that.\n     if let Some(crate_kind) = env::var_os(\"MIRI_BE_RUSTC\") {\n+        // Earliest rustc setup.\n+        rustc_driver::install_ice_hook(rustc_driver::DEFAULT_BUG_REPORT_URL, |_| ());\n         rustc_driver::init_rustc_env_logger();\n \n         let target_crate = if crate_kind == \"target\" {\n@@ -309,6 +308,9 @@ fn main() {\n         )\n     }\n \n+    // Add an ICE bug report hook.\n+    rustc_driver::install_ice_hook(\"https://github.com/rust-lang/miri/issues/new\", |_| ());\n+\n     // Init loggers the Miri way.\n     init_early_loggers();\n "}, {"sha": "47846424b06e4a139c015c25e898e76685b15e7f", "filename": "src/tools/rustfmt/src/bin/main.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2469afef1a9697e671f9e90971c342fa3e0006e6/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2469afef1a9697e671f9e90971c342fa3e0006e6/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs?ref=2469afef1a9697e671f9e90971c342fa3e0006e6", "patch": "@@ -1,3 +1,5 @@\n+#![feature(rustc_private)]\n+\n use anyhow::{format_err, Result};\n \n use io::Error as IoError;\n@@ -19,7 +21,14 @@ use crate::rustfmt::{\n     FormatReportFormatterBuilder, Input, Session, Verbosity,\n };\n \n+const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rustfmt/issues/new?labels=bug\";\n+\n+// N.B. these crates are loaded from the sysroot, so they need extern crate.\n+extern crate rustc_driver;\n+\n fn main() {\n+    rustc_driver::install_ice_hook(BUG_REPORT_URL, |_| ());\n+\n     env_logger::Builder::from_env(\"RUSTFMT_LOG\").init();\n     let opts = make_opts();\n "}, {"sha": "cc066447d313b3d6dab5d2c1bfe09561231551c3", "filename": "tests/rustdoc-ui/ice-bug-report-url.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2469afef1a9697e671f9e90971c342fa3e0006e6/tests%2Frustdoc-ui%2Fice-bug-report-url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2469afef1a9697e671f9e90971c342fa3e0006e6/tests%2Frustdoc-ui%2Fice-bug-report-url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fice-bug-report-url.rs?ref=2469afef1a9697e671f9e90971c342fa3e0006e6", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Ztreat-err-as-bug\n+// failure-status: 101\n+// error-pattern: aborting due to\n+// error-pattern: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-rustdoc&template=ice.md\n+\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\" -> \"note: rustc {version} running on {platform}\"\n+// normalize-stderr-test \"thread.*panicked at .*, compiler.*\" -> \"thread panicked at 'aborting due to `-Z treat-err-as-bug`'\"\n+// normalize-stderr-test \"\\s*\\d{1,}: .*\\n\" -> \"\"\n+// normalize-stderr-test \"\\s at .*\\n\" -> \"\"\n+// normalize-stderr-test \".*note: Some details are omitted.*\\n\" -> \"\"\n+\n+fn wrong()\n+//~^ ERROR expected one of"}, {"sha": "cfb73a9b9193f30e21270a5967e770889e0facee", "filename": "tests/rustdoc-ui/ice-bug-report-url.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2469afef1a9697e671f9e90971c342fa3e0006e6/tests%2Frustdoc-ui%2Fice-bug-report-url.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2469afef1a9697e671f9e90971c342fa3e0006e6/tests%2Frustdoc-ui%2Fice-bug-report-url.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fice-bug-report-url.stderr?ref=2469afef1a9697e671f9e90971c342fa3e0006e6", "patch": "@@ -0,0 +1,16 @@\n+error: expected one of `->`, `where`, or `{`, found `<eof>`\n+  --> $DIR/ice-bug-report-url.rs:13:10\n+   |\n+LL | fn wrong()\n+   |          ^ expected one of `->`, `where`, or `{`\n+\n+thread panicked at 'aborting due to `-Z treat-err-as-bug`'\n+stack backtrace:\n+error: the compiler unexpectedly panicked. this is a bug.\n+\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-rustdoc&template=ice.md\n+\n+note: rustc {version} running on {platform}\n+\n+query stack during panic:\n+end of query stack"}]}