{"sha": "b389615560c1b0e03c5e1b408ad63dc42ed85dd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzODk2MTU1NjBjMWIwZTAzYzVlMWI0MDhhZDYzZGM0MmVkODVkZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-11T07:32:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-11T07:32:04Z"}, "message": "auto merge of #12617 : sfackler/rust/item-modifier, r=alexcrichton\n\nWhere ItemDecorator creates new items given a single item, ItemModifier\r\nalters the tagged item in place. The expansion rules for this are a bit\r\nweird, but I think are the most reasonable option available.\r\n\r\nWhen an item is expanded, all ItemModifier attributes are stripped from\r\nit and the item is folded through all ItemModifiers. At that point, the\r\nprocess repeats until there are no ItemModifiers in the new item.\r\n\r\ncc @huonw", "tree": {"sha": "73064854a9158c2497df4670daa647d1f24b8a5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73064854a9158c2497df4670daa647d1f24b8a5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b389615560c1b0e03c5e1b408ad63dc42ed85dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b389615560c1b0e03c5e1b408ad63dc42ed85dd4", "html_url": "https://github.com/rust-lang/rust/commit/b389615560c1b0e03c5e1b408ad63dc42ed85dd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b389615560c1b0e03c5e1b408ad63dc42ed85dd4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b63cd004fc22089fbec7d74fc5a54536d093b1b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b63cd004fc22089fbec7d74fc5a54536d093b1b4", "html_url": "https://github.com/rust-lang/rust/commit/b63cd004fc22089fbec7d74fc5a54536d093b1b4"}, {"sha": "eb4cbd55a859be68d381ce4fdb597b0893c18c04", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4cbd55a859be68d381ce4fdb597b0893c18c04", "html_url": "https://github.com/rust-lang/rust/commit/eb4cbd55a859be68d381ce4fdb597b0893c18c04"}], "stats": {"total": 115, "additions": 101, "deletions": 14}, "files": [{"sha": "76fd68a52651356158fecb0bcd7120dadbe4f71c", "filename": "src/libstd/vec_ng.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b389615560c1b0e03c5e1b408ad63dc42ed85dd4/src%2Flibstd%2Fvec_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b389615560c1b0e03c5e1b408ad63dc42ed85dd4/src%2Flibstd%2Fvec_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec_ng.rs?ref=b389615560c1b0e03c5e1b408ad63dc42ed85dd4", "patch": "@@ -108,6 +108,21 @@ impl<T: Clone> Vec<T> {\n         }\n         *self.get_mut(index) = val;\n     }\n+\n+    pub fn partitioned(&self, f: |&T| -> bool) -> (Vec<T>, Vec<T>) {\n+        let mut lefts = Vec::new();\n+        let mut rights = Vec::new();\n+\n+        for elt in self.iter() {\n+            if f(elt) {\n+                lefts.push(elt.clone());\n+            } else {\n+                rights.push(elt.clone());\n+            }\n+        }\n+\n+        (lefts, rights)\n+    }\n }\n \n impl<T:Clone> Clone for Vec<T> {"}, {"sha": "ae8c13a5f98705a3f27354b81c6f0b9f484dea70", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b389615560c1b0e03c5e1b408ad63dc42ed85dd4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b389615560c1b0e03c5e1b408ad63dc42ed85dd4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=b389615560c1b0e03c5e1b408ad63dc42ed85dd4", "patch": "@@ -38,6 +38,9 @@ pub struct MacroDef {\n pub type ItemDecorator =\n     fn(&mut ExtCtxt, Span, @ast::MetaItem, @ast::Item, |@ast::Item|);\n \n+pub type ItemModifier =\n+    fn(&mut ExtCtxt, Span, @ast::MetaItem, @ast::Item) -> @ast::Item;\n+\n pub struct BasicMacroExpander {\n     expander: MacroExpanderFn,\n     span: Option<Span>\n@@ -126,21 +129,27 @@ impl MacResult {\n     }\n }\n \n+/// An enum representing the different kinds of syntax extensions.\n pub enum SyntaxExtension {\n-    // #[deriving] and such\n+    /// A syntax extension that is attached to an item and creates new items\n+    /// based upon it.\n+    ///\n+    /// `#[deriving(...)]` is an `ItemDecorator`.\n     ItemDecorator(ItemDecorator),\n \n-    // Token-tree expanders\n-    NormalTT(~MacroExpander:'static, Option<Span>),\n+    /// A syntax extension that is attached to an item and modifies it\n+    /// in-place.\n+    ItemModifier(ItemModifier),\n \n-    // An IdentTT is a macro that has an\n-    // identifier in between the name of the\n-    // macro and the argument. Currently,\n-    // the only examples of this is\n-    // macro_rules!\n+    /// A normal, function-like syntax extension.\n+    ///\n+    /// `bytes!` is a `NormalTT`.\n+    NormalTT(~MacroExpander:'static, Option<Span>),\n \n-    // perhaps macro_rules! will lose its odd special identifier argument,\n-    // and this can go away also\n+    /// A function-like syntax extension that has an extra ident before\n+    /// the block.\n+    ///\n+    /// `macro_rules!` is an `IdentTT`.\n     IdentTT(~IdentMacroExpander:'static, Option<Span>),\n }\n "}, {"sha": "dc79ceb4daae230a089394cd1264eb8e3d26ea85", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b389615560c1b0e03c5e1b408ad63dc42ed85dd4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b389615560c1b0e03c5e1b408ad63dc42ed85dd4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b389615560c1b0e03c5e1b408ad63dc42ed85dd4", "patch": "@@ -260,7 +260,9 @@ macro_rules! with_exts_frame (\n // When we enter a module, record it, for the sake of `module!`\n pub fn expand_item(it: @ast::Item, fld: &mut MacroExpander)\n                    -> SmallVector<@ast::Item> {\n-    let mut decorator_items: SmallVector<@ast::Item> = SmallVector::zero();\n+    let it = expand_item_modifiers(it, fld);\n+\n+    let mut decorator_items = SmallVector::zero();\n     for attr in it.attrs.rev_iter() {\n         let mname = attr.name();\n \n@@ -307,6 +309,48 @@ pub fn expand_item(it: @ast::Item, fld: &mut MacroExpander)\n     new_items\n }\n \n+fn expand_item_modifiers(mut it: @ast::Item, fld: &mut MacroExpander)\n+                         -> @ast::Item {\n+    let (modifiers, attrs) = it.attrs.partitioned(|attr| {\n+        match fld.extsbox.find(&intern(attr.name().get())) {\n+            Some(&ItemModifier(_)) => true,\n+            _ => false\n+        }\n+    });\n+\n+    it = @ast::Item {\n+        attrs: attrs,\n+        ..(*it).clone()\n+    };\n+\n+    if modifiers.is_empty() {\n+        return it;\n+    }\n+\n+    for attr in modifiers.iter() {\n+        let mname = attr.name();\n+\n+        match fld.extsbox.find(&intern(mname.get())) {\n+            Some(&ItemModifier(dec_fn)) => {\n+                fld.cx.bt_push(ExpnInfo {\n+                    call_site: attr.span,\n+                    callee: NameAndSpan {\n+                        name: mname.get().to_str(),\n+                        format: MacroAttribute,\n+                        span: None,\n+                    }\n+                });\n+                it = dec_fn(fld.cx, attr.span, attr.node.value, it);\n+                fld.cx.bt_pop();\n+            }\n+            _ => unreachable!()\n+        }\n+    }\n+\n+    // expansion may have added new ItemModifiers\n+    expand_item_modifiers(it, fld)\n+}\n+\n // does this attribute list contain \"macro_escape\" ?\n pub fn contains_macro_escape(attrs: &[ast::Attribute]) -> bool {\n     attr::contains_name(attrs, \"macro_escape\")\n@@ -492,6 +536,7 @@ fn load_extern_macros(krate: &ast::ViewItem, fld: &mut MacroExpander) {\n                 NormalTT(ext, _) => NormalTT(ext, Some(krate.span)),\n                 IdentTT(ext, _) => IdentTT(ext, Some(krate.span)),\n                 ItemDecorator(ext) => ItemDecorator(ext),\n+                ItemModifier(ext) => ItemModifier(ext),\n             };\n             fld.extsbox.insert(name, extension);\n         });"}, {"sha": "b473ca3264e51b0d9f7dd3f21160a8e36e32a03b", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b389615560c1b0e03c5e1b408ad63dc42ed85dd4/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b389615560c1b0e03c5e1b408ad63dc42ed85dd4/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=b389615560c1b0e03c5e1b408ad63dc42ed85dd4", "patch": "@@ -10,11 +10,11 @@\n \n // force-host\n \n-#[feature(globs, macro_registrar, macro_rules, quote)];\n+#[feature(globs, macro_registrar, macro_rules, quote, managed_boxes)];\n \n extern crate syntax;\n \n-use syntax::ast::{Name, TokenTree};\n+use syntax::ast::{Name, TokenTree, Item, MetaItem};\n use syntax::codemap::Span;\n use syntax::ext::base::*;\n use syntax::parse::token;\n@@ -32,13 +32,22 @@ pub fn macro_registrar(register: |Name, SyntaxExtension|) {\n             span: None,\n         },\n         None));\n+    register(token::intern(\"into_foo\"), ItemModifier(expand_into_foo));\n }\n \n-pub fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> MacResult {\n+fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> MacResult {\n     if !tts.is_empty() {\n         cx.span_fatal(sp, \"make_a_1 takes no arguments\");\n     }\n     MRExpr(quote_expr!(cx, 1i))\n }\n \n+fn expand_into_foo(cx: &mut ExtCtxt, sp: Span, attr: @MetaItem, it: @Item)\n+                   -> @Item {\n+    @Item {\n+        attrs: it.attrs.clone(),\n+        ..(*quote_item!(cx, enum Foo { Bar, Baz }).unwrap()).clone()\n+    }\n+}\n+\n pub fn foo() {}"}, {"sha": "6f412f01bb991876fa603e3ef8811924c31a8529", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b389615560c1b0e03c5e1b408ad63dc42ed85dd4/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b389615560c1b0e03c5e1b408ad63dc42ed85dd4/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=b389615560c1b0e03c5e1b408ad63dc42ed85dd4", "patch": "@@ -19,7 +19,16 @@\n #[phase(syntax)]\n extern crate macro_crate_test;\n \n+#[into_foo]\n+#[deriving(Eq, Clone, Show)]\n+fn foo() -> AFakeTypeThatHadBetterGoAway {}\n+\n pub fn main() {\n     assert_eq!(1, make_a_1!());\n     assert_eq!(2, exported_macro!());\n+\n+    assert_eq!(Bar, Bar);\n+    test(None::<Foo>);\n }\n+\n+fn test<T: Eq+Clone>(_: Option<T>) {}"}]}