{"sha": "9ac42ca7437f93b496000da80de04223da5175f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYzQyY2E3NDM3ZjkzYjQ5NjAwMGRhODBkZTA0MjIzZGE1MTc1ZjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-13T00:47:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-13T00:47:37Z"}, "message": "rustc: Resolve variant names in patterns", "tree": {"sha": "10335a1f2e38735e8f8f5c5b363a700b676dee05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10335a1f2e38735e8f8f5c5b363a700b676dee05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ac42ca7437f93b496000da80de04223da5175f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac42ca7437f93b496000da80de04223da5175f0", "html_url": "https://github.com/rust-lang/rust/commit/9ac42ca7437f93b496000da80de04223da5175f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ac42ca7437f93b496000da80de04223da5175f0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc5fa9bf67c8a3e5b8fc119143265ec6cbe63be9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5fa9bf67c8a3e5b8fc119143265ec6cbe63be9", "html_url": "https://github.com/rust-lang/rust/commit/bc5fa9bf67c8a3e5b8fc119143265ec6cbe63be9"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "c3dd7ef13b0d34855d246c7d66f6a4d3cc418173", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9ac42ca7437f93b496000da80de04223da5175f0/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac42ca7437f93b496000da80de04223da5175f0/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=9ac42ca7437f93b496000da80de04223da5175f0", "patch": "@@ -137,6 +137,30 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n     ret std.list.find[scope,def](e.scopes, bind in_scope(i, _));\n }\n \n+fn fold_pat_tag(&env e, &span sp, ident i, vec[@ast.pat] args,\n+                option.t[ast.variant_def] old_def, ann a) -> @ast.pat {\n+    auto new_def;\n+    alt (lookup_name(e, i)) {\n+        case (some[def](?d)) {\n+            alt (d) {\n+                case (ast.def_variant(?did, ?vid)) {\n+                    new_def = some[ast.variant_def](tup(did, vid));\n+                }\n+                case (_) {\n+                    e.sess.err(\"not a tag variant: \" + i);\n+                    new_def = none[ast.variant_def];\n+                }\n+            }\n+        }\n+        case (none[def]) {\n+            new_def = none[ast.variant_def];\n+            e.sess.err(\"unresolved name: \" + i);\n+        }\n+    }\n+\n+    ret @fold.respan[ast.pat_](sp, ast.pat_tag(i, args, new_def, a));\n+}\n+\n fn fold_expr_name(&env e, &span sp, &ast.name n,\n                   &option.t[def] d, ann a) -> @ast.expr {\n \n@@ -207,7 +231,8 @@ fn resolve_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n \n     let fold.ast_fold[env] fld = fold.new_identity_fold[env]();\n \n-    fld = @rec( fold_expr_name = bind fold_expr_name(_,_,_,_,_),\n+    fld = @rec( fold_pat_tag = bind fold_pat_tag(_,_,_,_,_,_),\n+                fold_expr_name = bind fold_expr_name(_,_,_,_,_),\n                 fold_ty_path = bind fold_ty_path(_,_,_,_),\n                 update_env_for_crate = bind update_env_for_crate(_,_),\n                 update_env_for_item = bind update_env_for_item(_,_),"}]}