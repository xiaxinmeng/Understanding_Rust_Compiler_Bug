{"sha": "db85512bd8d922e0785029eff41152b0f35690f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiODU1MTJiZDhkOTIyZTA3ODUwMjllZmY0MTE1MmIwZjM1NjkwZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-09T06:31:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-09T06:31:49Z"}, "message": "Auto merge of #79767 - tmiasko:malformed-required-const, r=matthewjasper\n\nDon't ICE on malformed `rustc_args_required_const` attribute", "tree": {"sha": "bbf2236970b2f54c90b1179978775a2caf970e4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbf2236970b2f54c90b1179978775a2caf970e4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db85512bd8d922e0785029eff41152b0f35690f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db85512bd8d922e0785029eff41152b0f35690f1", "html_url": "https://github.com/rust-lang/rust/commit/db85512bd8d922e0785029eff41152b0f35690f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db85512bd8d922e0785029eff41152b0f35690f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8080f54677e57ca56f20f514f14affc64827d66b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8080f54677e57ca56f20f514f14affc64827d66b", "html_url": "https://github.com/rust-lang/rust/commit/8080f54677e57ca56f20f514f14affc64827d66b"}, {"sha": "50c6fd6dd52b97334d8b3628cf2f66985b25acc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c6fd6dd52b97334d8b3628cf2f66985b25acc4", "html_url": "https://github.com/rust-lang/rust/commit/50c6fd6dd52b97334d8b3628cf2f66985b25acc4"}], "stats": {"total": 118, "additions": 72, "deletions": 46}, "files": [{"sha": "73fb28e5c9aa68eafacd3ec875fb0638d4c23d88", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 53, "deletions": 45, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/db85512bd8d922e0785029eff41152b0f35690f1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db85512bd8d922e0785029eff41152b0f35690f1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=db85512bd8d922e0785029eff41152b0f35690f1", "patch": "@@ -545,60 +545,68 @@ impl CheckAttrVisitor<'tcx> {\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) -> bool {\n-        if let Target::Fn | Target::Method(..) | Target::ForeignFn = target {\n-            let mut invalid_args = vec![];\n-            for meta in attr.meta_item_list().expect(\"no meta item list\") {\n-                if let Some(LitKind::Int(val, _)) = meta.literal().map(|lit| &lit.kind) {\n-                    if let Some(ItemLike::Item(Item {\n-                        kind: ItemKind::Fn(FnSig { decl, .. }, ..),\n-                        ..\n-                    }))\n-                    | Some(ItemLike::ForeignItem(ForeignItem {\n-                        kind: ForeignItemKind::Fn(decl, ..),\n-                        ..\n-                    })) = item\n-                    {\n-                        let arg_count = decl.inputs.len() as u128;\n-                        if *val >= arg_count {\n-                            let span = meta.span();\n-                            self.tcx\n-                                .sess\n-                                .struct_span_err(span, \"index exceeds number of arguments\")\n-                                .span_label(\n-                                    span,\n-                                    format!(\n-                                        \"there {} only {} argument{}\",\n-                                        if arg_count != 1 { \"are\" } else { \"is\" },\n-                                        arg_count,\n-                                        pluralize!(arg_count)\n-                                    ),\n-                                )\n-                                .emit();\n-                            return false;\n-                        }\n-                    } else {\n-                        bug!(\"should be a function item\");\n+        let is_function = matches!(target, Target::Fn | Target::Method(..) | Target::ForeignFn);\n+        if !is_function {\n+            self.tcx\n+                .sess\n+                .struct_span_err(attr.span, \"attribute should be applied to a function\")\n+                .span_label(*span, \"not a function\")\n+                .emit();\n+            return false;\n+        }\n+\n+        let list = match attr.meta_item_list() {\n+            // The attribute form is validated on AST.\n+            None => return false,\n+            Some(it) => it,\n+        };\n+\n+        let mut invalid_args = vec![];\n+        for meta in list {\n+            if let Some(LitKind::Int(val, _)) = meta.literal().map(|lit| &lit.kind) {\n+                if let Some(ItemLike::Item(Item {\n+                    kind: ItemKind::Fn(FnSig { decl, .. }, ..),\n+                    ..\n+                }))\n+                | Some(ItemLike::ForeignItem(ForeignItem {\n+                    kind: ForeignItemKind::Fn(decl, ..),\n+                    ..\n+                })) = item\n+                {\n+                    let arg_count = decl.inputs.len() as u128;\n+                    if *val >= arg_count {\n+                        let span = meta.span();\n+                        self.tcx\n+                            .sess\n+                            .struct_span_err(span, \"index exceeds number of arguments\")\n+                            .span_label(\n+                                span,\n+                                format!(\n+                                    \"there {} only {} argument{}\",\n+                                    if arg_count != 1 { \"are\" } else { \"is\" },\n+                                    arg_count,\n+                                    pluralize!(arg_count)\n+                                ),\n+                            )\n+                            .emit();\n+                        return false;\n                     }\n                 } else {\n-                    invalid_args.push(meta.span());\n+                    bug!(\"should be a function item\");\n                 }\n-            }\n-            if !invalid_args.is_empty() {\n-                self.tcx\n-                    .sess\n-                    .struct_span_err(invalid_args, \"arguments should be non-negative integers\")\n-                    .emit();\n-                false\n             } else {\n-                true\n+                invalid_args.push(meta.span());\n             }\n-        } else {\n+        }\n+\n+        if !invalid_args.is_empty() {\n             self.tcx\n                 .sess\n-                .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                .span_label(*span, \"not a function\")\n+                .struct_span_err(invalid_args, \"arguments should be non-negative integers\")\n                 .emit();\n             false\n+        } else {\n+            true\n         }\n     }\n "}, {"sha": "99508baeb0070b56d002896f8def14877ae83640", "filename": "src/test/ui/invalid-rustc_args_required_const-arguments.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db85512bd8d922e0785029eff41152b0f35690f1/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db85512bd8d922e0785029eff41152b0f35690f1/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.rs?ref=db85512bd8d922e0785029eff41152b0f35690f1", "patch": "@@ -23,4 +23,10 @@ extern {\n     fn foo7(_: u8);\n }\n \n+#[rustc_args_required_const] //~ ERROR malformed `rustc_args_required_const` attribute\n+fn bar1() {}\n+\n+#[rustc_args_required_const = 1] //~ ERROR malformed `rustc_args_required_const` attribute\n+fn bar2() {}\n+\n fn main() {}"}, {"sha": "932344f0a33c5877fa1bfd357714e180bcc146ff", "filename": "src/test/ui/invalid-rustc_args_required_const-arguments.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db85512bd8d922e0785029eff41152b0f35690f1/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db85512bd8d922e0785029eff41152b0f35690f1/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-rustc_args_required_const-arguments.stderr?ref=db85512bd8d922e0785029eff41152b0f35690f1", "patch": "@@ -6,6 +6,18 @@ LL | #[rustc_args_required_const(0usize)]\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n+error: malformed `rustc_args_required_const` attribute input\n+  --> $DIR/invalid-rustc_args_required_const-arguments.rs:26:1\n+   |\n+LL | #[rustc_args_required_const]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_args_required_const(N)]`\n+\n+error: malformed `rustc_args_required_const` attribute input\n+  --> $DIR/invalid-rustc_args_required_const-arguments.rs:29:1\n+   |\n+LL | #[rustc_args_required_const = 1]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_args_required_const(N)]`\n+\n error: index exceeds number of arguments\n   --> $DIR/invalid-rustc_args_required_const-arguments.rs:3:29\n    |\n@@ -44,5 +56,5 @@ error: index exceeds number of arguments\n LL |     #[rustc_args_required_const(1)]\n    |                                 ^ there is only 1 argument\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n "}]}