{"sha": "3680ecd8a6e8dcac98833bc8bbc349277f780419", "node_id": "C_kwDOAAsO6NoAKDM2ODBlY2Q4YTZlOGRjYWM5ODgzM2JjOGJiYzM0OTI3N2Y3ODA0MTk", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-21T05:11:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-21T05:11:13Z"}, "message": "Rollup merge of #90099 - SkiFire13:fix-vec-swap-remove, r=dtolnay\n\nFix MIRI UB in `Vec::swap_remove`\n\nFixes #90055\n\nI find it weird that `Vec::swap_remove` read the last element to the stack just to immediately put it back in the `Vec` in place of the one at index `index`. It seems much more natural to me to just read the element at position `index` and then move the last element in its place. I guess this might also slightly improve codegen.", "tree": {"sha": "c96cd17109ce7c0f9bd8ea0e2d5ab1e4f6cf56ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c96cd17109ce7c0f9bd8ea0e2d5ab1e4f6cf56ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3680ecd8a6e8dcac98833bc8bbc349277f780419", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcPZxCRBK7hj4Ov3rIwAAReIIAAZxZvkvwvNwQhRkwNKzIe9l\ndMm435XmyZfOCZTMRm+CKwlDsvaTREoBk8hdE5FeC1oWOhTMyfP60K8vn4jjFQ/1\nLRFw0x2AaDXEi/na858sr67ZiZAhf2hscKPDHJZrU29AJ5dxx68DykFKE0NklVdb\n8I7PUJ/gXTsmCCY74DFbgj78CWK/5/LUP6hkqWvxkeELorONCx6l3jF9Z5VW4TGe\n2ZvlCh2NaUKzI2iGSRCw20XmikXVHgkdRbx9h83inWUYuit9csg7IUeCzLE+CWNe\n8NfcL5eIKDSowrdlhUxq+EO1nCj/8SyuAexaWsmY1e55aJOZbQf/Vt0q8Ys36KU=\n=ExES\n-----END PGP SIGNATURE-----\n", "payload": "tree c96cd17109ce7c0f9bd8ea0e2d5ab1e4f6cf56ef\nparent 68a5680fc5961f1c91e79debae2f0994c1136a69\nparent 0aa68a8db9dfffb2756279cc621b1b15a896423d\nauthor Yuki Okushi <jtitor@2k36.org> 1634793073 +0900\ncommitter GitHub <noreply@github.com> 1634793073 +0900\n\nRollup merge of #90099 - SkiFire13:fix-vec-swap-remove, r=dtolnay\n\nFix MIRI UB in `Vec::swap_remove`\n\nFixes #90055\n\nI find it weird that `Vec::swap_remove` read the last element to the stack just to immediately put it back in the `Vec` in place of the one at index `index`. It seems much more natural to me to just read the element at position `index` and then move the last element in its place. I guess this might also slightly improve codegen.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3680ecd8a6e8dcac98833bc8bbc349277f780419", "html_url": "https://github.com/rust-lang/rust/commit/3680ecd8a6e8dcac98833bc8bbc349277f780419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3680ecd8a6e8dcac98833bc8bbc349277f780419/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a5680fc5961f1c91e79debae2f0994c1136a69", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a5680fc5961f1c91e79debae2f0994c1136a69", "html_url": "https://github.com/rust-lang/rust/commit/68a5680fc5961f1c91e79debae2f0994c1136a69"}, {"sha": "0aa68a8db9dfffb2756279cc621b1b15a896423d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa68a8db9dfffb2756279cc621b1b15a896423d", "html_url": "https://github.com/rust-lang/rust/commit/0aa68a8db9dfffb2756279cc621b1b15a896423d"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "d52c78eedf3fad28836477edd8dbc74489a609aa", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3680ecd8a6e8dcac98833bc8bbc349277f780419/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3680ecd8a6e8dcac98833bc8bbc349277f780419/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=3680ecd8a6e8dcac98833bc8bbc349277f780419", "patch": "@@ -1305,10 +1305,11 @@ impl<T, A: Allocator> Vec<T, A> {\n             // We replace self[index] with the last element. Note that if the\n             // bounds check above succeeds there must be a last element (which\n             // can be self[index] itself).\n-            let last = ptr::read(self.as_ptr().add(len - 1));\n-            let hole = self.as_mut_ptr().add(index);\n+            let value = ptr::read(self.as_ptr().add(index));\n+            let base_ptr = self.as_mut_ptr();\n+            ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);\n             self.set_len(len - 1);\n-            ptr::replace(hole, last)\n+            value\n         }\n     }\n "}]}