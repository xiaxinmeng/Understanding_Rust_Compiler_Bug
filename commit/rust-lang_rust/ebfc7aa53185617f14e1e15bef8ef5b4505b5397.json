{"sha": "ebfc7aa53185617f14e1e15bef8ef5b4505b5397", "node_id": "C_kwDOAAsO6NoAKGViZmM3YWE1MzE4NTYxN2YxNGUxZTE1YmVmOGVmNWI0NTA1YjUzOTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-24T16:56:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-24T16:56:32Z"}, "message": "Auto merge of #100803 - klensy:do-not-encode-preinterned-symbols, r=bjorn3\n\nSymbols: do not write string values of preinterned symbols into compiled artifacts\n\nr? `@bjorn3`\n\nFollowup for #98851\n\nhttps://github.com/rust-lang/rust/pull/98851#issuecomment-1215606291", "tree": {"sha": "84e41374423ad00866a502792ba13bdfa7d3eb48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e41374423ad00866a502792ba13bdfa7d3eb48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebfc7aa53185617f14e1e15bef8ef5b4505b5397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebfc7aa53185617f14e1e15bef8ef5b4505b5397", "html_url": "https://github.com/rust-lang/rust/commit/ebfc7aa53185617f14e1e15bef8ef5b4505b5397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a24f08ba43166cfee86d868b3fe8612aec6faca", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a24f08ba43166cfee86d868b3fe8612aec6faca", "html_url": "https://github.com/rust-lang/rust/commit/4a24f08ba43166cfee86d868b3fe8612aec6faca"}, {"sha": "f6329485a83c1d241635e0dedbf62929e193b10a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6329485a83c1d241635e0dedbf62929e193b10a", "html_url": "https://github.com/rust-lang/rust/commit/f6329485a83c1d241635e0dedbf62929e193b10a"}], "stats": {"total": 80, "additions": 57, "deletions": 23}, "files": [{"sha": "92590c33b9d1e90b765492e3894a35854d7f6c80", "filename": "compiler/rustc_macros/src/symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs?ref=ebfc7aa53185617f14e1e15bef8ef5b4505b5397", "patch": "@@ -195,10 +195,10 @@ fn symbols_with_errors(input: TokenStream) -> (TokenStream, Vec<syn::Error>) {\n             #n,\n         });\n     }\n-    let _ = counter; // for future use\n \n     let output = quote! {\n         const SYMBOL_DIGITS_BASE: u32 = #digits_base;\n+        const PREINTERNED_SYMBOLS_COUNT: u32 = #counter;\n \n         #[doc(hidden)]\n         #[allow(non_upper_case_globals)]"}, {"sha": "d0e0aa91480c917eb56c5243795c9c5ef5c3c1f3", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=ebfc7aa53185617f14e1e15bef8ef5b4505b5397", "patch": "@@ -631,6 +631,10 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Symbol {\n \n                 sym\n             }\n+            SYMBOL_PREINTERNED => {\n+                let symbol_index = d.read_u32();\n+                Symbol::new_from_decoded(symbol_index)\n+            }\n             _ => unreachable!(),\n         }\n     }"}, {"sha": "cd5da40150d4e15ba1fb896c5fe1af6fdb7d7f90", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ebfc7aa53185617f14e1e15bef8ef5b4505b5397", "patch": "@@ -317,17 +317,24 @@ impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {\n \n impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Symbol {\n     fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) {\n-        match s.symbol_table.entry(*self) {\n-            Entry::Vacant(o) => {\n-                s.opaque.emit_u8(SYMBOL_STR);\n-                let pos = s.opaque.position();\n-                o.insert(pos);\n-                s.emit_str(self.as_str());\n-            }\n-            Entry::Occupied(o) => {\n-                let x = o.get().clone();\n-                s.emit_u8(SYMBOL_OFFSET);\n-                s.emit_usize(x);\n+        // if symbol preinterned, emit tag and symbol index\n+        if self.is_preinterned() {\n+            s.opaque.emit_u8(SYMBOL_PREINTERNED);\n+            s.opaque.emit_u32(self.as_u32());\n+        } else {\n+            // otherwise write it as string or as offset to it\n+            match s.symbol_table.entry(*self) {\n+                Entry::Vacant(o) => {\n+                    s.opaque.emit_u8(SYMBOL_STR);\n+                    let pos = s.opaque.position();\n+                    o.insert(pos);\n+                    s.emit_str(self.as_str());\n+                }\n+                Entry::Occupied(o) => {\n+                    let x = o.get().clone();\n+                    s.emit_u8(SYMBOL_OFFSET);\n+                    s.emit_usize(x);\n+                }\n             }\n         }\n     }"}, {"sha": "e6cceaf29d51f08172195392ca89b90d79a6bced", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ebfc7aa53185617f14e1e15bef8ef5b4505b5397", "patch": "@@ -448,6 +448,7 @@ const TAG_PARTIAL_SPAN: u8 = 2;\n // Tags for encoding Symbol's\n const SYMBOL_STR: u8 = 0;\n const SYMBOL_OFFSET: u8 = 1;\n+const SYMBOL_PREINTERNED: u8 = 2;\n \n pub fn provide(providers: &mut Providers) {\n     encoder::provide(providers);"}, {"sha": "5ef95911f562d851a91bf09e623c7de6cf84b6b7", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=ebfc7aa53185617f14e1e15bef8ef5b4505b5397", "patch": "@@ -42,6 +42,7 @@ const TAG_EXPN_DATA: u8 = 1;\n // Tags for encoding Symbol's\n const SYMBOL_STR: u8 = 0;\n const SYMBOL_OFFSET: u8 = 1;\n+const SYMBOL_PREINTERNED: u8 = 2;\n \n /// Provides an interface to incremental compilation data cached from the\n /// previous compilation session. This data will eventually include the results\n@@ -745,6 +746,10 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Symbol {\n \n                 sym\n             }\n+            SYMBOL_PREINTERNED => {\n+                let symbol_index = d.read_u32();\n+                Symbol::new_from_decoded(symbol_index)\n+            }\n             _ => unreachable!(),\n         }\n     }\n@@ -939,17 +944,24 @@ impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for Span {\n // copy&paste impl from rustc_metadata\n impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for Symbol {\n     fn encode(&self, s: &mut CacheEncoder<'a, 'tcx>) {\n-        match s.symbol_table.entry(*self) {\n-            Entry::Vacant(o) => {\n-                s.encoder.emit_u8(SYMBOL_STR);\n-                let pos = s.encoder.position();\n-                o.insert(pos);\n-                s.emit_str(self.as_str());\n-            }\n-            Entry::Occupied(o) => {\n-                let x = o.get().clone();\n-                s.emit_u8(SYMBOL_OFFSET);\n-                s.emit_usize(x);\n+        // if symbol preinterned, emit tag and symbol index\n+        if self.is_preinterned() {\n+            s.encoder.emit_u8(SYMBOL_PREINTERNED);\n+            s.encoder.emit_u32(self.as_u32());\n+        } else {\n+            // otherwise write it as string or as offset to it\n+            match s.symbol_table.entry(*self) {\n+                Entry::Vacant(o) => {\n+                    s.encoder.emit_u8(SYMBOL_STR);\n+                    let pos = s.encoder.position();\n+                    o.insert(pos);\n+                    s.emit_str(self.as_str());\n+                }\n+                Entry::Occupied(o) => {\n+                    let x = o.get().clone();\n+                    s.emit_u8(SYMBOL_OFFSET);\n+                    s.emit_usize(x);\n+                }\n             }\n         }\n     }"}, {"sha": "e4bbbbf83cbaaf7f7bf2e445cc7c4d365575c80e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc7aa53185617f14e1e15bef8ef5b4505b5397/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ebfc7aa53185617f14e1e15bef8ef5b4505b5397", "patch": "@@ -1804,6 +1804,11 @@ impl Symbol {\n         Symbol(SymbolIndex::from_u32(n))\n     }\n \n+    /// for use in Decoder only\n+    pub fn new_from_decoded(n: u32) -> Self {\n+        Self::new(n)\n+    }\n+\n     /// Maps a string to its interned representation.\n     pub fn intern(string: &str) -> Self {\n         with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))\n@@ -2028,6 +2033,11 @@ impl Symbol {\n     pub fn can_be_raw(self) -> bool {\n         self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()\n     }\n+\n+    /// Is this symbol was interned in compiler's `symbols!` macro\n+    pub fn is_preinterned(self) -> bool {\n+        self.as_u32() < PREINTERNED_SYMBOLS_COUNT\n+    }\n }\n \n impl Ident {"}]}