{"sha": "b71ddd68619b417272f77a89b5eab04f6bc64534", "node_id": "C_kwDOAAsO6NoAKGI3MWRkZDY4NjE5YjQxNzI3MmY3N2E4OWI1ZWFiMDRmNmJjNjQ1MzQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-03T09:18:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-03T09:18:26Z"}, "message": "Rollup merge of #97664 - estebank:suggest-bound-derive-copy, r=compiler-errors\n\nOn E0204 suggest missing type param bounds\n\n```\nerror[E0204]: the trait `Copy` may not be implemented for this type\n  --> f42.rs:9:17\n   |\n9  | #[derive(Debug, Copy, Clone)]\n   |                 ^^^^\n10 | pub struct AABB<K>{\n11 |     pub loc: Vector2<K>,\n   |     ------------------- this field does not implement `Copy`\n12 |     pub size: Vector2<K>\n   |     -------------------- this field does not implement `Copy`\n   |\nnote: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n  --> f42.rs:11:5\n   |\n11 |     pub loc: Vector2<K>,\n   |     ^^^^^^^^^^^^^^^^^^^\nnote: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n  --> f42.rs:12:5\n   |\n12 |     pub size: Vector2<K>\n   |     ^^^^^^^^^^^^^^^^^^^^\n   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider restricting type parameter `K`\n   |\n10 | pub struct AABB<K: Debug>{\n   |                  +++++++\n```\n\nFix #89137.", "tree": {"sha": "ae1abd05522134063139dd55ff355eee914bd930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae1abd05522134063139dd55ff355eee914bd930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b71ddd68619b417272f77a89b5eab04f6bc64534", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJimdHjCRBK7hj4Ov3rIwAAM1wIADWRX9tSu3PTc6X28vyhnNce\nCqEdFJPCw8abl8yqOb+RXUmL3EnfOZPFIGRoCwOSAo+EarilunULT4Rmfe0PaCtc\nYdgcttcAUw2QB2id7E8bnJXO7VZkRCNO801SBADT03khkCSmq5HKptvvJgSRqSnW\nhsp0UHdDtPvZz6Cq30kSViBE7F7EsNdbDG6nR7szwySWdMUqEy+SXZ+hvXgocx1M\nrk7tGesaD7ZoqPvyCDnHrnRc3zd3kwPBgk1OXuZxrPQwGS7x8uZEIDUBLrDCDM51\nHcT7pZkIqus095HBC8xBW8JBlk72jUxy0ceQH6xJAt3d0288xyoam4RfG4Ob9OA=\n=8egT\n-----END PGP SIGNATURE-----\n", "payload": "tree ae1abd05522134063139dd55ff355eee914bd930\nparent a6d79398559b2f8e423391a0ebb394228b03064b\nparent f9aa2e02cdfdeea64ed58d2956047c2c155186f3\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654247906 +0200\ncommitter GitHub <noreply@github.com> 1654247906 +0200\n\nRollup merge of #97664 - estebank:suggest-bound-derive-copy, r=compiler-errors\n\nOn E0204 suggest missing type param bounds\n\n```\nerror[E0204]: the trait `Copy` may not be implemented for this type\n  --> f42.rs:9:17\n   |\n9  | #[derive(Debug, Copy, Clone)]\n   |                 ^^^^\n10 | pub struct AABB<K>{\n11 |     pub loc: Vector2<K>,\n   |     ------------------- this field does not implement `Copy`\n12 |     pub size: Vector2<K>\n   |     -------------------- this field does not implement `Copy`\n   |\nnote: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n  --> f42.rs:11:5\n   |\n11 |     pub loc: Vector2<K>,\n   |     ^^^^^^^^^^^^^^^^^^^\nnote: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n  --> f42.rs:12:5\n   |\n12 |     pub size: Vector2<K>\n   |     ^^^^^^^^^^^^^^^^^^^^\n   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider restricting type parameter `K`\n   |\n10 | pub struct AABB<K: Debug>{\n   |                  +++++++\n```\n\nFix #89137.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b71ddd68619b417272f77a89b5eab04f6bc64534", "html_url": "https://github.com/rust-lang/rust/commit/b71ddd68619b417272f77a89b5eab04f6bc64534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b71ddd68619b417272f77a89b5eab04f6bc64534/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d79398559b2f8e423391a0ebb394228b03064b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d79398559b2f8e423391a0ebb394228b03064b", "html_url": "https://github.com/rust-lang/rust/commit/a6d79398559b2f8e423391a0ebb394228b03064b"}, {"sha": "f9aa2e02cdfdeea64ed58d2956047c2c155186f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9aa2e02cdfdeea64ed58d2956047c2c155186f3", "html_url": "https://github.com/rust-lang/rust/commit/f9aa2e02cdfdeea64ed58d2956047c2c155186f3"}], "stats": {"total": 240, "additions": 219, "deletions": 21}, "files": [{"sha": "9bb64d4023bcabec70e7b6fdd110c2d4c2ac17d3", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -272,7 +272,10 @@ pub fn suggest_constraining_type_params<'a>(\n             continue;\n         }\n \n-        let constraint = constraints.iter().map(|&(c, _)| c).collect::<Vec<_>>().join(\" + \");\n+        let mut constraint = constraints.iter().map(|&(c, _)| c).collect::<Vec<_>>();\n+        constraint.sort();\n+        constraint.dedup();\n+        let constraint = constraint.join(\" + \");\n         let mut suggest_restrict = |span, bound_list_non_empty| {\n             suggestions.push((\n                 span,"}, {"sha": "c809b8bdd73db56eb530d8c10f89b11426d6d553", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -2,7 +2,7 @@\n //! up data structures required by type-checking/codegen.\n \n use crate::errors::{CopyImplOnNonAdt, CopyImplOnTypeWithDtor, DropImplOnWrongItem};\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n@@ -11,12 +11,12 @@ use rustc_infer::infer;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{RegionckMode, TyCtxtInferExt};\n use rustc_middle::ty::adjustment::CoerceUnsizedInfo;\n-use rustc_middle::ty::TypeFoldable;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, suggest_constraining_type_params, Ty, TyCtxt, TypeFoldable};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::misc::{can_type_implement_copy, CopyImplementationError};\n use rustc_trait_selection::traits::predicate_for_trait_def;\n use rustc_trait_selection::traits::{self, ObligationCause, TraitEngine, TraitEngineExt};\n+use std::collections::BTreeMap;\n \n pub fn check_trait(tcx: TyCtxt<'_>, trait_def_id: DefId) {\n     let lang_items = tcx.lang_items();\n@@ -91,6 +91,20 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                 E0204,\n                 \"the trait `Copy` may not be implemented for this type\"\n             );\n+\n+            // We'll try to suggest constraining type parameters to fulfill the requirements of\n+            // their `Copy` implementation.\n+            let mut generics = None;\n+            if let ty::Adt(def, _substs) = self_type.kind() {\n+                let self_def_id = def.did();\n+                if let Some(local) = self_def_id.as_local() {\n+                    let self_item = tcx.hir().expect_item(local);\n+                    generics = self_item.kind.generics();\n+                }\n+            }\n+            let mut errors: BTreeMap<_, Vec<_>> = Default::default();\n+            let mut bounds = vec![];\n+\n             for (field, ty) in fields {\n                 let field_span = tcx.def_span(field.did);\n                 err.span_label(field_span, \"this field does not implement `Copy`\");\n@@ -115,17 +129,46 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                         // FIXME: This error could be more descriptive, especially if the error_predicate\n                         // contains a foreign type or if it's a deeply nested type...\n                         if error_predicate != error.root_obligation.predicate {\n-                            err.span_note(\n-                                error.obligation.cause.span,\n-                                &format!(\n-                                    \"the `Copy` impl for `{}` requires that `{}`\",\n-                                    ty, error_predicate\n-                                ),\n-                            );\n+                            errors\n+                                .entry((ty.to_string(), error_predicate.to_string()))\n+                                .or_default()\n+                                .push(error.obligation.cause.span);\n+                        }\n+                        if let ty::PredicateKind::Trait(ty::TraitPredicate {\n+                            trait_ref,\n+                            polarity: ty::ImplPolarity::Positive,\n+                            ..\n+                        }) = error_predicate.kind().skip_binder()\n+                        {\n+                            let ty = trait_ref.self_ty();\n+                            if let ty::Param(_) = ty.kind() {\n+                                bounds.push((\n+                                    format!(\"{ty}\"),\n+                                    trait_ref.print_only_trait_path().to_string(),\n+                                    Some(trait_ref.def_id),\n+                                ));\n+                            }\n                         }\n                     }\n                 });\n             }\n+            for ((ty, error_predicate), spans) in errors {\n+                let span: MultiSpan = spans.into();\n+                err.span_note(\n+                    span,\n+                    &format!(\"the `Copy` impl for `{}` requires that `{}`\", ty, error_predicate),\n+                );\n+            }\n+            if let Some(generics) = generics {\n+                suggest_constraining_type_params(\n+                    tcx,\n+                    generics,\n+                    &mut err,\n+                    bounds.iter().map(|(param, constraint, def_id)| {\n+                        (param.as_str(), constraint.as_str(), *def_id)\n+                    }),\n+                );\n+            }\n             err.emit();\n         }\n         Err(CopyImplementationError::NotAnAdt) => {"}, {"sha": "45acf5beb121794ed3797b639a4d99db49d60efd", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.fixed", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -21,7 +21,7 @@ fn duplicate_tup2<A: Copy, B: Copy>(t: (A, B)) -> ((A, B), (A, B)) {\n     (t, t) //~ use of moved value: `t`\n }\n \n-fn duplicate_custom<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) {\n+fn duplicate_custom<T: Copy + Trait>(t: S<T>) -> (S<T>, S<T>) {\n     //~^ HELP consider restricting type parameter `T`\n     (t, t) //~ use of moved value: `t`\n }\n@@ -39,29 +39,29 @@ trait A {}\n trait B {}\n \n // Test where bounds are added with different bound placements\n-fn duplicate_custom_1<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) where {\n+fn duplicate_custom_1<T: Copy + Trait>(t: S<T>) -> (S<T>, S<T>) where {\n     //~^ HELP consider restricting type parameter `T`\n     (t, t) //~ use of moved value: `t`\n }\n \n fn duplicate_custom_2<T>(t: S<T>) -> (S<T>, S<T>)\n where\n-    T: A + Trait + Copy,\n+    T: A + Copy + Trait,\n     //~^ HELP consider further restricting this bound\n {\n     (t, t) //~ use of moved value: `t`\n }\n \n fn duplicate_custom_3<T>(t: S<T>) -> (S<T>, S<T>)\n where\n-    T: A + Trait + Copy,\n+    T: A + Copy + Trait,\n     //~^ HELP consider further restricting this bound\n     T: B,\n {\n     (t, t) //~ use of moved value: `t`\n }\n \n-fn duplicate_custom_4<T: A + Trait + Copy>(t: S<T>) -> (S<T>, S<T>)\n+fn duplicate_custom_4<T: A + Copy + Trait>(t: S<T>) -> (S<T>, S<T>)\n //~^ HELP consider further restricting this bound\n where\n     T: B,"}, {"sha": "5a84e3b81a6565e7de14817cb7fbf6dea2fdebf0", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -75,7 +75,7 @@ LL |     (t, t)\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn duplicate_custom<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) {\n+LL | fn duplicate_custom<T: Copy + Trait>(t: S<T>) -> (S<T>, S<T>) {\n    |                      ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n@@ -91,7 +91,7 @@ LL |     (t, t)\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn duplicate_custom_1<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) where {\n+LL | fn duplicate_custom_1<T: Copy + Trait>(t: S<T>) -> (S<T>, S<T>) where {\n    |                        ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n@@ -107,7 +107,7 @@ LL |     (t, t)\n    |\n help: consider further restricting this bound\n    |\n-LL |     T: A + Trait + Copy,\n+LL |     T: A + Copy + Trait,\n    |          ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n@@ -123,7 +123,7 @@ LL |     (t, t)\n    |\n help: consider further restricting this bound\n    |\n-LL |     T: A + Trait + Copy,\n+LL |     T: A + Copy + Trait,\n    |          ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n@@ -139,7 +139,7 @@ LL |     (t, t)\n    |\n help: consider further restricting this bound\n    |\n-LL | fn duplicate_custom_4<T: A + Trait + Copy>(t: S<T>) -> (S<T>, S<T>)\n+LL | fn duplicate_custom_4<T: A + Copy + Trait>(t: S<T>) -> (S<T>, S<T>)\n    |                            ++++++++++++++\n \n error[E0382]: use of moved value: `t`"}, {"sha": "ac0b14fba83b620ec2c032ad50eee86777cd8a37", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-2.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.fixed?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+use std::fmt::Debug;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct Vector2<T: Debug + Copy + Clone>{\n+    pub x: T,\n+    pub y: T\n+}\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct AABB<K: Debug + std::marker::Copy>{\n+    pub loc: Vector2<K>, //~ ERROR the trait bound `K: Copy` is not satisfied\n+    pub size: Vector2<K>\n+}\n+\n+fn main() {}"}, {"sha": "31f8cd6fcf79e782e237674cb7b01bf77cb49a7e", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.rs?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+use std::fmt::Debug;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct Vector2<T: Debug + Copy + Clone>{\n+    pub x: T,\n+    pub y: T\n+}\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct AABB<K: Debug>{\n+    pub loc: Vector2<K>, //~ ERROR the trait bound `K: Copy` is not satisfied\n+    pub size: Vector2<K>\n+}\n+\n+fn main() {}"}, {"sha": "03082be690fbfbd4639cde778a05cbd4b662c530", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-2.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-2.stderr?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `K: Copy` is not satisfied\n+  --> $DIR/missing-bound-in-derive-copy-impl-2.rs:12:14\n+   |\n+LL |     pub loc: Vector2<K>,\n+   |              ^^^^^^^^^^ the trait `Copy` is not implemented for `K`\n+   |\n+note: required by a bound in `Vector2`\n+  --> $DIR/missing-bound-in-derive-copy-impl-2.rs:5:31\n+   |\n+LL | pub struct Vector2<T: Debug + Copy + Clone>{\n+   |                               ^^^^ required by this bound in `Vector2`\n+help: consider further restricting this bound\n+   |\n+LL | pub struct AABB<K: Debug + std::marker::Copy>{\n+   |                          +++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "304360d48a2615627d197d784e8f187a253d04cc", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-3.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.fixed?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -0,0 +1,16 @@\n+//run-rustfix\n+use std::fmt::Debug;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct Vector2<T: Debug + Copy + Clone>{\n+    pub x: T,\n+    pub y: T\n+}\n+\n+#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented for this type\n+pub struct AABB<K: Copy + Debug>{\n+    pub loc: Vector2<K>,\n+    pub size: Vector2<K>\n+}\n+\n+fn main() {}"}, {"sha": "14e1fbb33112ade31a13efaf05683e1e6d79ebae", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-3.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.rs?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -0,0 +1,16 @@\n+//run-rustfix\n+use std::fmt::Debug;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct Vector2<T: Debug + Copy + Clone>{\n+    pub x: T,\n+    pub y: T\n+}\n+\n+#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented for this type\n+pub struct AABB<K: Copy>{\n+    pub loc: Vector2<K>,\n+    pub size: Vector2<K>\n+}\n+\n+fn main() {}"}, {"sha": "4eb1e318d97c30172b8d92d2579f42f9875360b2", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl-3.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl-3.stderr?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -0,0 +1,27 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/missing-bound-in-derive-copy-impl-3.rs:10:17\n+   |\n+LL | #[derive(Debug, Copy, Clone)]\n+   |                 ^^^^\n+LL | pub struct AABB<K: Copy>{\n+LL |     pub loc: Vector2<K>,\n+   |     ------------------- this field does not implement `Copy`\n+LL |     pub size: Vector2<K>\n+   |     -------------------- this field does not implement `Copy`\n+   |\n+note: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n+  --> $DIR/missing-bound-in-derive-copy-impl-3.rs:12:5\n+   |\n+LL |     pub loc: Vector2<K>,\n+   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     pub size: Vector2<K>\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting this bound\n+   |\n+LL | pub struct AABB<K: Copy + Debug>{\n+   |                         +++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}, {"sha": "52163bddd4ff5ab269abe11b2e39fba504c1be49", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.rs?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -0,0 +1,15 @@\n+use std::fmt::Debug;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct Vector2<T: Debug + Copy + Clone>{\n+    pub x: T,\n+    pub y: T\n+}\n+\n+#[derive(Debug, Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented for this type\n+pub struct AABB<K>{\n+    pub loc: Vector2<K>,\n+    pub size: Vector2<K>\n+}\n+\n+fn main() {}"}, {"sha": "1cf2ab95bc3a8a6a878bc59cebb36c28a9906a82", "filename": "src/test/ui/suggestions/missing-bound-in-derive-copy-impl.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b71ddd68619b417272f77a89b5eab04f6bc64534/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-derive-copy-impl.stderr?ref=b71ddd68619b417272f77a89b5eab04f6bc64534", "patch": "@@ -0,0 +1,27 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/missing-bound-in-derive-copy-impl.rs:9:17\n+   |\n+LL | #[derive(Debug, Copy, Clone)]\n+   |                 ^^^^\n+LL | pub struct AABB<K>{\n+LL |     pub loc: Vector2<K>,\n+   |     ------------------- this field does not implement `Copy`\n+LL |     pub size: Vector2<K>\n+   |     -------------------- this field does not implement `Copy`\n+   |\n+note: the `Copy` impl for `Vector2<K>` requires that `K: Debug`\n+  --> $DIR/missing-bound-in-derive-copy-impl.rs:11:5\n+   |\n+LL |     pub loc: Vector2<K>,\n+   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     pub size: Vector2<K>\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider restricting type parameter `K`\n+   |\n+LL | pub struct AABB<K: Debug>{\n+   |                  +++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}]}