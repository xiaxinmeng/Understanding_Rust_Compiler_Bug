{"sha": "90a35861dd3f5bdf2b023c24c6dc45bb88485996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYTM1ODYxZGQzZjViZGYyYjAyM2MyNGM2ZGM0NWJiODg0ODU5OTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-23T22:09:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-23T22:09:00Z"}, "message": "Rollup merge of #56342 - killercup:collect-into-option-docs, r=bluss\n\nImprove docs for collecting into `Option`s\n\nChanges the original example to use more idiomatic formatting as well\nas `.checked_add`. Also adds a second example to show a case where the\n`.collect` returns `None`.", "tree": {"sha": "8b83b7aea92c446d0d34eef2870a23c1cc76fa09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b83b7aea92c446d0d34eef2870a23c1cc76fa09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90a35861dd3f5bdf2b023c24c6dc45bb88485996", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcIAd8CRBK7hj4Ov3rIwAAdHIIAEL5uybQofHmIREq31gLOsWn\nHsK/7XsSTUDTOffSBXl2E+Nv1ya50uVTQui0EZ4vkAm6i9LbCXPpdRsUyMNI7yow\nGLSmcsC15hT5HH8ER3n+rHD4BHfyf1px0nQIlwAglA9YoAESm1geQHzeMZk+0tVw\n+hKwpBBPKEn2B+p/PLBIPFT6/mwKbUgAR/JDNhtPMCZfaRg+9nHdaF2p6r/5C5A6\nBXKNBQygPo/k7xXnLe+IoieTvdx1Kq7RhurTkpW4Dqs0XBSAmySkmOFiNi8enT6P\nXdRKOkpe1WeLc6I0IF6MMEp7y2QZfQwFLGqCbcz1bFM1Q60vbg2hSejKoR5JZpw=\n=rgFY\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b83b7aea92c446d0d34eef2870a23c1cc76fa09\nparent 4c971620e4bfa32df3e9da02772a2a1c68be004f\nparent 2c0f011ca28dbe2941369315bd78a1dbbb7f950e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1545602940 +0100\ncommitter GitHub <noreply@github.com> 1545602940 +0100\n\nRollup merge of #56342 - killercup:collect-into-option-docs, r=bluss\n\nImprove docs for collecting into `Option`s\n\nChanges the original example to use more idiomatic formatting as well\nas `.checked_add`. Also adds a second example to show a case where the\n`.collect` returns `None`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90a35861dd3f5bdf2b023c24c6dc45bb88485996", "html_url": "https://github.com/rust-lang/rust/commit/90a35861dd3f5bdf2b023c24c6dc45bb88485996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90a35861dd3f5bdf2b023c24c6dc45bb88485996/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c971620e4bfa32df3e9da02772a2a1c68be004f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c971620e4bfa32df3e9da02772a2a1c68be004f", "html_url": "https://github.com/rust-lang/rust/commit/4c971620e4bfa32df3e9da02772a2a1c68be004f"}, {"sha": "2c0f011ca28dbe2941369315bd78a1dbbb7f950e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f011ca28dbe2941369315bd78a1dbbb7f950e", "html_url": "https://github.com/rust-lang/rust/commit/2c0f011ca28dbe2941369315bd78a1dbbb7f950e"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "dbad29229eb8d5090fd406c01daea8bdda98044f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/90a35861dd3f5bdf2b023c24c6dc45bb88485996/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a35861dd3f5bdf2b023c24c6dc45bb88485996/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=90a35861dd3f5bdf2b023c24c6dc45bb88485996", "patch": "@@ -1253,20 +1253,42 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// returned. Should no [`None`][Option::None] occur, a container with the\n     /// values of each [`Option`] is returned.\n     ///\n-    /// Here is an example which increments every integer in a vector,\n-    /// checking for overflow:\n+    /// # Examples\n+    ///\n+    /// Here is an example which increments every integer in a vector.\n+    /// `We use the checked variant of `add` that returns `None` when the\n+    /// calculation would result in an overflow.\n     ///\n     /// ```\n-    /// use std::u16;\n+    /// let items = vec![0_u16, 1, 2];\n+    ///\n+    /// let res: Option<Vec<u16>> = items\n+    ///     .iter()\n+    ///     .map(|x| x.checked_add(1))\n+    ///     .collect();\n     ///\n-    /// let v = vec![1, 2];\n-    /// let res: Option<Vec<u16>> = v.iter().map(|&x: &u16|\n-    ///     if x == u16::MAX { None }\n-    ///     else { Some(x + 1) }\n-    /// ).collect();\n-    /// assert!(res == Some(vec![2, 3]));\n+    /// assert_eq!(res, Some(vec![1, 2, 3]));\n     /// ```\n     ///\n+    /// As you can see, this will return the expected, valid items.\n+    ///\n+    /// Here is another example that tries to subtract one from another list\n+    /// of integers, this time checking for underflow:\n+    ///\n+    /// ```\n+    /// let items = vec![2_u16, 1, 0];\n+    ///\n+    /// let res: Option<Vec<u16>> = items\n+    ///     .iter()\n+    ///     .map(|x| x.checked_sub(1))\n+    ///     .collect();\n+    ///\n+    /// assert_eq!(res, None);\n+    /// ```\n+    ///\n+    /// Since the last element is zero, it would underflow. Thus, the resulting\n+    /// value is `None`.\n+    ///\n     /// [`Iterator`]: ../iter/trait.Iterator.html\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=Option<A>>>(iter: I) -> Option<V> {"}]}