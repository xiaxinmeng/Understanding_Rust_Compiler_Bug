{"sha": "cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjQxYWVkZDNhNWUyMWMxNjlhMGE5MWRmZDYwMGU4ZTM3MGQyOTE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-03-09T03:54:52Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-03-09T19:43:45Z"}, "message": "Use subtyping on the target of unsizing coercions.", "tree": {"sha": "0d4f7706eb30cf32e8114ef3cabe026bc6850c60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d4f7706eb30cf32e8114ef3cabe026bc6850c60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "html_url": "https://github.com/rust-lang/rust/commit/cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74bc7fda8c1cdb8bbf29d9901cbfc31a2e0da86b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74bc7fda8c1cdb8bbf29d9901cbfc31a2e0da86b", "html_url": "https://github.com/rust-lang/rust/commit/74bc7fda8c1cdb8bbf29d9901cbfc31a2e0da86b"}], "stats": {"total": 102, "additions": 80, "deletions": 22}, "files": [{"sha": "c43291557f7fa4034959ac0f2fb1eb06a89c03ac", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "patch": "@@ -453,18 +453,32 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n             }\n             _ => (source, None),\n         };\n-        let source = source.adjust_for_autoref(self.tcx, reborrow);\n+        let coerce_source = source.adjust_for_autoref(self.tcx, reborrow);\n+\n+        let adjust = Adjust::DerefRef {\n+            autoderefs: if reborrow.is_some() { 1 } else { 0 },\n+            autoref: reborrow,\n+            unsize: true,\n+        };\n+\n+        // Setup either a subtyping or a LUB relationship between\n+        // the `CoerceUnsized` target type and the expected type.\n+        // We only have the latter, so we use an inference variable\n+        // for the former and let type inference do the rest.\n+        let origin = TypeVariableOrigin::MiscVariable(self.cause.span);\n+        let coerce_target = self.next_ty_var(origin);\n+        let mut coercion = self.unify_and(coerce_target, target, adjust)?;\n \n         let mut selcx = traits::SelectionContext::new(self);\n \n         // Use a FIFO queue for this custom fulfillment procedure.\n         let mut queue = VecDeque::new();\n-        let mut obligations = vec![];\n \n         // Create an obligation for `Source: CoerceUnsized<Target>`.\n         let cause = ObligationCause::misc(self.cause.span, self.body_id);\n         queue.push_back(self.tcx\n-            .predicate_for_trait_def(cause, coerce_unsized_did, 0, source, &[target]));\n+            .predicate_for_trait_def(cause, coerce_unsized_did, 0,\n+                                     coerce_source, &[coerce_target]));\n \n         // Keep resolving `CoerceUnsized` and `Unsize` predicates to avoid\n         // emitting a coercion in cases like `Foo<$1>` -> `Foo<$2>`, where\n@@ -475,7 +489,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n             let trait_ref = match obligation.predicate {\n                 ty::Predicate::Trait(ref tr) if traits.contains(&tr.def_id()) => tr.clone(),\n                 _ => {\n-                    obligations.push(obligation);\n+                    coercion.obligations.push(obligation);\n                     continue;\n                 }\n             };\n@@ -503,11 +517,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n             }\n         }\n \n-        success(Adjust::DerefRef {\n-            autoderefs: if reborrow.is_some() { 1 } else { 0 },\n-            autoref: reborrow,\n-            unsize: true,\n-        }, target, obligations)\n+        Ok(coercion)\n     }\n \n     fn coerce_from_safe_fn(&self,"}, {"sha": "e37b6a2bb9c99aa0993c5c3525edc5c322efc696", "filename": "src/test/compile-fail/object-lifetime-default-elision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-elision.rs?ref=cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "patch": "@@ -79,7 +79,7 @@ fn load3<'a,'b>(ss: &'a SomeTrait) -> &'b SomeTrait {\n     // which fails to type check.\n \n     ss\n-        //~^ ERROR lifetime bound not satisfied\n+        //~^ ERROR cannot infer\n         //~| ERROR cannot infer\n }\n "}, {"sha": "c0dd5200f6cb4e97be5e24eddf6f1d699f27052a", "filename": "src/test/compile-fail/object-lifetime-default-from-box-error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs?ref=cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "patch": "@@ -25,7 +25,7 @@ fn load(ss: &mut SomeStruct) -> Box<SomeTrait> {\n     // `Box<SomeTrait>` defaults to a `'static` bound, so this return\n     // is illegal.\n \n-    ss.r //~ ERROR lifetime bound not satisfied\n+    ss.r //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn store(ss: &mut SomeStruct, b: Box<SomeTrait>) {\n@@ -38,7 +38,7 @@ fn store(ss: &mut SomeStruct, b: Box<SomeTrait>) {\n fn store1<'b>(ss: &mut SomeStruct, b: Box<SomeTrait+'b>) {\n     // Here we override the lifetimes explicitly, and so naturally we get an error.\n \n-    ss.r = b; //~ ERROR lifetime bound not satisfied\n+    ss.r = b; //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() {"}, {"sha": "ad6c5a31bbbd3fbc4076af08cde2723acd0992ad", "filename": "src/test/compile-fail/regions-close-over-type-parameter-multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-multiple.rs?ref=cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "patch": "@@ -27,7 +27,7 @@ fn make_object_good2<'a,'b,A:SomeTrait+'a+'b>(v: A) -> Box<SomeTrait+'b> {\n \n fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<SomeTrait+'c> {\n     // A outlives 'a AND 'b...but not 'c.\n-    box v as Box<SomeTrait+'a> //~ ERROR lifetime bound not satisfied\n+    box v as Box<SomeTrait+'a> //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() {"}, {"sha": "17fd55b031b61463513dc077928a330bb5ffe6ac", "filename": "src/test/compile-fail/regions-proc-bound-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs?ref=cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "patch": "@@ -16,7 +16,7 @@ fn borrowed_proc<'a>(x: &'a isize) -> Box<FnMut()->(isize) + 'a> {\n \n fn static_proc(x: &isize) -> Box<FnMut()->(isize) + 'static> {\n     // This is illegal, because the region bound on `proc` is 'static.\n-    Box::new(move|| { *x }) //~ ERROR does not fulfill the required lifetime\n+    Box::new(move|| { *x }) //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() { }"}, {"sha": "e8ada6a1755719205422e74f43591b9bf8ea138f", "filename": "src/test/compile-fail/regions-trait-object-subtyping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fregions-trait-object-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fregions-trait-object-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-object-subtyping.rs?ref=cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "patch": "@@ -22,8 +22,8 @@ fn foo2<'a:'b,'b>(x: &'b mut (Dummy+'a)) -> &'b mut (Dummy+'b) {\n \n fn foo3<'a,'b>(x: &'a mut Dummy) -> &'b mut Dummy {\n     // Without knowing 'a:'b, we can't coerce\n-    x //~ ERROR lifetime bound not satisfied\n-     //~^ ERROR cannot infer\n+    x //~ ERROR cannot infer an appropriate lifetime\n+     //~^ ERROR cannot infer an appropriate lifetime\n }\n \n struct Wrapper<T>(T);"}, {"sha": "d3bf92e85f411a5207e03786dc844487d7417dcf", "filename": "src/test/compile-fail/variance-contravariant-arg-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-arg-object.rs?ref=cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "patch": "@@ -21,15 +21,15 @@ fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n                                 -> Box<Get<&'min i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n                                    -> Box<Get<&'max i32>>\n     where 'max : 'min\n {\n     // Previously OK:\n-    v //~ ERROR mismatched types\n+    v //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() { }"}, {"sha": "0e94e35df2839895fdc389f970eeb6396db708e0", "filename": "src/test/compile-fail/variance-covariant-arg-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-arg-object.rs?ref=cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "patch": "@@ -22,14 +22,14 @@ fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n     where 'max : 'min\n {\n     // Previously OK, now an error as traits are invariant.\n-    v //~ ERROR mismatched types\n+    v //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n                                    -> Box<Get<&'max i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() { }"}, {"sha": "aa3e06c015d503829e89c839c2beb07e52a40e4e", "filename": "src/test/compile-fail/variance-invariant-arg-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fvariance-invariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Fcompile-fail%2Fvariance-invariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-invariant-arg-object.rs?ref=cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "patch": "@@ -18,14 +18,14 @@ fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n                                 -> Box<Get<&'min i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n                                    -> Box<Get<&'max i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() { }"}, {"sha": "b19708f5a89316f46bad187fdca87bf5235eb932", "filename": "src/test/run-pass/coerce-unsize-subtype.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Frun-pass%2Fcoerce-unsize-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb41aedd3a5e21c169a0a91dfd600e8e370d291/src%2Ftest%2Frun-pass%2Fcoerce-unsize-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-unsize-subtype.rs?ref=cfb41aedd3a5e21c169a0a91dfd600e8e370d291", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-expanded FIXME #23616\n+\n+use std::rc::Rc;\n+\n+fn lub_short<'a, T>(_: &[&'a T], _: &[&'a T]) {}\n+\n+// The two arguments are a subtype of their LUB, after coercion.\n+fn long_and_short<'a, T>(xs: &[&'static T; 1], ys: &[&'a T; 1]) {\n+    lub_short(xs, ys);\n+}\n+\n+// The argument coerces to a subtype of the return type.\n+fn long_to_short<'a, 'b, T>(xs: &'b [&'static T; 1]) -> &'b [&'a T] {\n+    xs\n+}\n+\n+// Rc<T> is covariant over T just like &T.\n+fn long_to_short_rc<'a, T>(xs: Rc<[&'static T; 1]>) -> Rc<[&'a T]> {\n+    xs\n+}\n+\n+// LUB-coercion (if-else/match/array) coerces `xs: &'b [&'static T: N]`\n+// to a subtype of the LUB of `xs` and `ys` (i.e. `&'b [&'a T]`),\n+// regardless of the order they appear (in if-else/match/array).\n+fn long_and_short_lub1<'a, 'b, T>(xs: &'b [&'static T; 1], ys: &'b [&'a T]) {\n+    let _order1 = [xs, ys];\n+    let _order2 = [ys, xs];\n+}\n+\n+// LUB-coercion should also have the exact same effect when `&'b [&'a T; N]`\n+// needs to be coerced, i.e. the resulting type is not &'b [&'static T], but\n+// rather the `&'b [&'a T]` LUB.\n+fn long_and_short_lub2<'a, 'b, T>(xs: &'b [&'static T], ys: &'b [&'a T; 1]) {\n+    let _order1 = [xs, ys];\n+    let _order2 = [ys, xs];\n+}\n+\n+fn main() {}"}]}