{"sha": "4d44e09cb1db2788f59159c4b9055e339ed2181d", "node_id": "C_kwDOAAsO6NoAKDRkNDRlMDljYjFkYjI3ODhmNTkxNTljNGI5MDU1ZTMzOWVkMjE4MWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T09:33:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T09:33:23Z"}, "message": "Auto merge of #102165 - matthiaskrgr:rollup-n5oquhe, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #100734 (Split out async_fn_in_trait into a separate feature)\n - #101664 (Note if mismatched types have a similar name)\n - #101815 (Migrated the rustc_passes annotation without effect diagnostic infrastructure)\n - #102042 (Distribute rust-docs-json via rustup.)\n - #102066 (rustdoc: remove unnecessary `max-width` on headers)\n - #102095 (Deduplicate two functions that would soon have been three)\n - #102104 (Set 'exec-env:RUST_BACKTRACE=0' in const-eval-select tests)\n - #102112 (Allow full relro on powerpc64-unknown-linux-gnu)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ecf4fae12dfe52c30ef4301e1683ee781e2f5d7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecf4fae12dfe52c30ef4301e1683ee781e2f5d7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d44e09cb1db2788f59159c4b9055e339ed2181d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d44e09cb1db2788f59159c4b9055e339ed2181d", "html_url": "https://github.com/rust-lang/rust/commit/4d44e09cb1db2788f59159c4b9055e339ed2181d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d44e09cb1db2788f59159c4b9055e339ed2181d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc4d574ff2ffcfe76db36116cc4f193384065985", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4d574ff2ffcfe76db36116cc4f193384065985", "html_url": "https://github.com/rust-lang/rust/commit/bc4d574ff2ffcfe76db36116cc4f193384065985"}, {"sha": "8e3b9bca65d7d79a3b0e9c33fed8d8c93dd66041", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3b9bca65d7d79a3b0e9c33fed8d8c93dd66041", "html_url": "https://github.com/rust-lang/rust/commit/8e3b9bca65d7d79a3b0e9c33fed8d8c93dd66041"}], "stats": {"total": 514, "additions": 442, "deletions": 72}, "files": [{"sha": "a11721ba0213ad39b846c9321cd28b51fc052c47", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -332,6 +332,15 @@ impl FnDeclKind {\n             _ => false,\n         }\n     }\n+\n+    fn async_fn_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n+        match self {\n+            FnDeclKind::Fn | FnDeclKind::Inherent => true,\n+            FnDeclKind::Impl if tcx.features().async_fn_in_trait => true,\n+            FnDeclKind::Trait if tcx.features().async_fn_in_trait => true,\n+            _ => false,\n+        }\n+    }\n }\n \n #[derive(Copy, Clone)]\n@@ -1692,14 +1701,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }));\n \n         let output = if let Some((ret_id, span)) = make_ret_async {\n-            if !kind.impl_trait_allowed(self.tcx) {\n+            if !kind.async_fn_allowed(self.tcx) {\n                 match kind {\n                     FnDeclKind::Trait | FnDeclKind::Impl => {\n                         self.tcx\n                             .sess\n                             .create_feature_err(\n                                 TraitFnAsync { fn_span, span },\n-                                sym::return_position_impl_trait_in_trait,\n+                                sym::async_fn_in_trait,\n                             )\n                             .emit();\n                     }\n@@ -1917,9 +1926,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let future_bound = this.lower_async_fn_output_type_to_future_bound(\n                     output,\n                     span,\n-                    ImplTraitContext::ReturnPositionOpaqueTy {\n-                        origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n-                        in_trait,\n+                    if in_trait && !this.tcx.features().return_position_impl_trait_in_trait {\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::TraitReturn)\n+                    } else {\n+                        ImplTraitContext::ReturnPositionOpaqueTy {\n+                            origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n+                            in_trait,\n+                        }\n                     },\n                 );\n "}, {"sha": "995ad4fe2585986a8b28a91fe92ea59050c61817", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -268,3 +268,6 @@ passes_link_ordinal = attribute should be applied to a foreign function or stati\n \n passes_collapse_debuginfo = `collapse_debuginfo` attribute should be applied to macro definitions\n     .label = not a macro definition\n+\n+passes_deprecated_annotation_has_no_effect = this `#[deprecated]` annotation has no effect\n+    .suggestion = remove the unnecessary deprecation attribute"}, {"sha": "4c891fbf16e94f8b40d9eea344451b792c4c7cf1", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -312,6 +312,8 @@ declare_features! (\n     (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n+    /// Alows async functions to be declared, implemented, and used in traits.\n+    (incomplete, async_fn_in_trait, \"CURRENT_RUSTC_VERSION\", Some(91611), None),\n     /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics."}, {"sha": "82099d9e3f345c759f0acb26b846e5b18b418742", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 111, "deletions": 4, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -51,6 +51,7 @@ use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePa\n \n use crate::infer;\n use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n+use crate::infer::ExpectedFound;\n use crate::traits::error_reporting::report_object_safety_error;\n use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n@@ -1653,8 +1654,114 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 ),\n                 Mismatch::Fixed(s) => (s.into(), s.into(), None),\n             };\n-            match (&terr, expected == found) {\n-                (TypeError::Sorts(values), extra) => {\n+\n+            enum Similar<'tcx> {\n+                Adts { expected: ty::AdtDef<'tcx>, found: ty::AdtDef<'tcx> },\n+                PrimitiveFound { expected: ty::AdtDef<'tcx>, found: Ty<'tcx> },\n+                PrimitiveExpected { expected: Ty<'tcx>, found: ty::AdtDef<'tcx> },\n+            }\n+\n+            let similarity = |ExpectedFound { expected, found }: ExpectedFound<Ty<'tcx>>| {\n+                if let ty::Adt(expected, _) = expected.kind() && let Some(primitive) = found.primitive_symbol() {\n+                    let path = self.tcx.def_path(expected.did()).data;\n+                    let name = path.last().unwrap().data.get_opt_name();\n+                    if name == Some(primitive) {\n+                        return Some(Similar::PrimitiveFound { expected: *expected, found });\n+                    }\n+                } else if let Some(primitive) = expected.primitive_symbol() && let ty::Adt(found, _) = found.kind() {\n+                    let path = self.tcx.def_path(found.did()).data;\n+                    let name = path.last().unwrap().data.get_opt_name();\n+                    if name == Some(primitive) {\n+                        return Some(Similar::PrimitiveExpected { expected, found: *found });\n+                    }\n+                } else if let ty::Adt(expected, _) = expected.kind() && let ty::Adt(found, _) = found.kind() {\n+                    if !expected.did().is_local() && expected.did().krate == found.did().krate {\n+                        // Most likely types from different versions of the same crate\n+                        // are in play, in which case this message isn't so helpful.\n+                        // A \"perhaps two different versions...\" error is already emitted for that.\n+                        return None;\n+                    }\n+                    let f_path = self.tcx.def_path(found.did()).data;\n+                    let e_path = self.tcx.def_path(expected.did()).data;\n+\n+                    if let (Some(e_last), Some(f_last)) = (e_path.last(), f_path.last()) && e_last ==  f_last {\n+                        return Some(Similar::Adts{expected: *expected, found: *found});\n+                    }\n+                }\n+                None\n+            };\n+\n+            match terr {\n+                // If two types mismatch but have similar names, mention that specifically.\n+                TypeError::Sorts(values) if let Some(s) = similarity(values) => {\n+                    let diagnose_primitive =\n+                        |prim: Ty<'tcx>,\n+                         shadow: Ty<'tcx>,\n+                         defid: DefId,\n+                         diagnostic: &mut Diagnostic| {\n+                            let name = shadow.sort_string(self.tcx);\n+                            diagnostic.note(format!(\n+                            \"{prim} and {name} have similar names, but are actually distinct types\"\n+                        ));\n+                            diagnostic\n+                                .note(format!(\"{prim} is a primitive defined by the language\"));\n+                            let def_span = self.tcx.def_span(defid);\n+                            let msg = if defid.is_local() {\n+                                format!(\"{name} is defined in the current crate\")\n+                            } else {\n+                                let crate_name = self.tcx.crate_name(defid.krate);\n+                                format!(\"{name} is defined in crate `{crate_name}\")\n+                            };\n+                            diagnostic.span_note(def_span, msg);\n+                        };\n+\n+                    let diagnose_adts =\n+                        |expected_adt : ty::AdtDef<'tcx>,\n+                         found_adt: ty::AdtDef<'tcx>,\n+                         diagnostic: &mut Diagnostic| {\n+                            let found_name = values.found.sort_string(self.tcx);\n+                            let expected_name = values.expected.sort_string(self.tcx);\n+\n+                            let found_defid = found_adt.did();\n+                            let expected_defid = expected_adt.did();\n+\n+                            diagnostic.note(format!(\"{found_name} and {expected_name} have similar names, but are actually distinct types\"));\n+                            for (defid, name) in\n+                                [(found_defid, found_name), (expected_defid, expected_name)]\n+                            {\n+                                let def_span = self.tcx.def_span(defid);\n+\n+                                let msg = if found_defid.is_local() && expected_defid.is_local() {\n+                                    let module = self\n+                                        .tcx\n+                                        .parent_module_from_def_id(defid.expect_local())\n+                                        .to_def_id();\n+                                    let module_name = self.tcx.def_path(module).to_string_no_crate_verbose();\n+                                    format!(\"{name} is defined in module `crate{module_name}` of the current crate\")\n+                                } else if defid.is_local() {\n+                                    format!(\"{name} is defined in the current crate\")\n+                                } else {\n+                                    let crate_name = self.tcx.crate_name(defid.krate);\n+                                    format!(\"{name} is defined in crate `{crate_name}`\")\n+                                };\n+                                diagnostic.span_note(def_span, msg);\n+                            }\n+                        };\n+\n+                    match s {\n+                        Similar::Adts{expected, found} => {\n+                            diagnose_adts(expected, found, diag)\n+                        }\n+                        Similar::PrimitiveFound{expected, found: prim} => {\n+                            diagnose_primitive(prim, values.expected, expected.did(), diag)\n+                        }\n+                        Similar::PrimitiveExpected{expected: prim, found} => {\n+                            diagnose_primitive(prim, values.found, found.did(), diag)\n+                        }\n+                    }\n+                }\n+                TypeError::Sorts(values) => {\n+                    let extra = expected == found;\n                     let sort_string = |ty: Ty<'tcx>| match (extra, ty.kind()) {\n                         (true, ty::Opaque(def_id, _)) => {\n                             let sm = self.tcx.sess.source_map();\n@@ -1707,10 +1814,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         );\n                     }\n                 }\n-                (TypeError::ObjectUnsafeCoercion(_), _) => {\n+                TypeError::ObjectUnsafeCoercion(_) => {\n                     diag.note_unsuccessful_coercion(found, expected);\n                 }\n-                (_, _) => {\n+                _ => {\n                     debug!(\n                         \"note_type_err: exp_found={:?}, expected={:?} found={:?}\",\n                         exp_found, expected, found"}, {"sha": "909a597e22135add6f36fc08c2f4467bc50f48b9", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -20,6 +20,7 @@\n #![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n #![cfg_attr(bootstrap, feature(let_else))]\n+#![feature(if_let_guard)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(try_blocks)]"}, {"sha": "e773b3032aab83d4bce4fd3d54017f81b75f43ae", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -19,7 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n-use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n@@ -2207,6 +2207,35 @@ impl<'tcx> Ty<'tcx> {\n             }\n         }\n     }\n+\n+    // If `self` is a primitive, return its [`Symbol`].\n+    pub fn primitive_symbol(self) -> Option<Symbol> {\n+        match self.kind() {\n+            ty::Bool => Some(sym::bool),\n+            ty::Char => Some(sym::char),\n+            ty::Float(f) => match f {\n+                ty::FloatTy::F32 => Some(sym::f32),\n+                ty::FloatTy::F64 => Some(sym::f64),\n+            },\n+            ty::Int(f) => match f {\n+                ty::IntTy::Isize => Some(sym::isize),\n+                ty::IntTy::I8 => Some(sym::i8),\n+                ty::IntTy::I16 => Some(sym::i16),\n+                ty::IntTy::I32 => Some(sym::i32),\n+                ty::IntTy::I64 => Some(sym::i64),\n+                ty::IntTy::I128 => Some(sym::i128),\n+            },\n+            ty::Uint(f) => match f {\n+                ty::UintTy::Usize => Some(sym::usize),\n+                ty::UintTy::U8 => Some(sym::u8),\n+                ty::UintTy::U16 => Some(sym::u16),\n+                ty::UintTy::U32 => Some(sym::u32),\n+                ty::UintTy::U64 => Some(sym::u64),\n+                ty::UintTy::U128 => Some(sym::u128),\n+            },\n+            _ => None,\n+        }\n+    }\n }\n \n /// Extra information about why we ended up with a particular variance."}, {"sha": "cdfa7cf7f93c27613392e6dc45d599a8c5016167", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -658,3 +658,10 @@ pub struct CollapseDebuginfo {\n     #[label]\n     pub defn_span: Span,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[diag(passes::deprecated_annotation_has_no_effect)]\n+pub struct DeprecatedAnnotationHasNoEffect {\n+    #[suggestion(applicability = \"machine-applicable\", code = \"\")]\n+    pub span: Span,\n+}"}, {"sha": "3f23b027aef28490b229b7501311f5bf1fcd2691", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -1,6 +1,7 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n+use crate::errors;\n use rustc_attr::{\n     self as attr, rust_version_symbol, ConstStability, Stability, StabilityLevel, Unstable,\n     UnstableReason, VERSION_PLACEHOLDER,\n@@ -122,16 +123,12 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n \n             if kind == AnnotationKind::Prohibited || kind == AnnotationKind::DeprecationProhibited {\n                 let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                self.tcx.struct_span_lint_hir(USELESS_DEPRECATED, hir_id, *span, |lint| {\n-                    lint.build(\"this `#[deprecated]` annotation has no effect\")\n-                        .span_suggestion_short(\n-                            *span,\n-                            \"remove the unnecessary deprecation attribute\",\n-                            \"\",\n-                            rustc_errors::Applicability::MachineApplicable,\n-                        )\n-                        .emit();\n-                });\n+                self.tcx.emit_spanned_lint(\n+                    USELESS_DEPRECATED,\n+                    hir_id,\n+                    *span,\n+                    errors::DeprecatedAnnotationHasNoEffect { span: *span },\n+                );\n             }\n \n             // `Deprecation` is just two pointers, no need to intern it"}, {"sha": "502ef67fc676754eb64ee17b25f2106c59d4495d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -396,6 +396,7 @@ symbols! {\n         assume_init,\n         async_await,\n         async_closure,\n+        async_fn_in_trait,\n         atomic,\n         atomic_mod,\n         atomics,"}, {"sha": "1cb9ce40cb1e51376e64d48e1e7d7c7ffc92c6b6", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -1,16 +1,12 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, RelroLevel, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"ppc64\".into();\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n-    // ld.so in at least RHEL6 on ppc64 has a bug related to BIND_NOW, so only enable partial RELRO\n-    // for now. https://github.com/rust-lang/rust/pull/43170#issuecomment-315411474\n-    base.relro_level = RelroLevel::Partial;\n-\n     Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".into(),\n         pointer_width: 64,"}, {"sha": "680dbf7037fad501467923c117155c71b818ccb7", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -717,27 +717,13 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n         Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: false }\n     }\n \n-    fn report_type_error(&self, t: Ty<'tcx>) {\n+    fn report_error(&self, p: impl Into<ty::GenericArg<'tcx>>) {\n         if !self.tcx.sess.has_errors().is_some() {\n             self.infcx\n                 .emit_inference_failure_err(\n                     Some(self.body.id()),\n                     self.span.to_span(self.tcx),\n-                    t.into(),\n-                    E0282,\n-                    false,\n-                )\n-                .emit();\n-        }\n-    }\n-\n-    fn report_const_error(&self, c: ty::Const<'tcx>) {\n-        if self.tcx.sess.has_errors().is_none() {\n-            self.infcx\n-                .emit_inference_failure_err(\n-                    Some(self.body.id()),\n-                    self.span.to_span(self.tcx),\n-                    c.into(),\n+                    p.into(),\n                     E0282,\n                     false,\n                 )\n@@ -782,7 +768,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             }\n             Err(_) => {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n-                self.report_type_error(t);\n+                self.report_error(t);\n                 self.replaced_with_error = true;\n                 self.tcx().ty_error()\n             }\n@@ -799,7 +785,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             Ok(ct) => self.tcx.erase_regions(ct),\n             Err(_) => {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n-                self.report_const_error(ct);\n+                self.report_error(ct);\n                 self.replaced_with_error = true;\n                 self.tcx().const_error(ct.ty())\n             }"}, {"sha": "b7bc96cc86dac9006a336223ce7226c8077e7bbd", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -86,29 +86,23 @@ impl Step for JsonDocs {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let default = run.builder.config.docs;\n-        run.alias(\"rust-json-docs\").default_condition(default)\n+        run.alias(\"rust-docs-json\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(JsonDocs { host: run.target });\n     }\n \n-    /// Builds the `rust-json-docs` installer component.\n+    /// Builds the `rust-docs-json` installer component.\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n-        // This prevents JSON docs from being built for \"dist\" or \"install\"\n-        // on the stable/beta channels. The JSON format is not stable yet and\n-        // should not be included in stable/beta toolchains.\n-        if !builder.build.unstable_features() {\n-            return None;\n-        }\n-\n         let host = self.host;\n         builder.ensure(crate::doc::JsonStd { stage: builder.top_stage, target: host });\n \n         let dest = \"share/doc/rust/json\";\n \n-        let mut tarball = Tarball::new(builder, \"rust-json-docs\", &host.triple);\n+        let mut tarball = Tarball::new(builder, \"rust-docs-json\", &host.triple);\n         tarball.set_product_name(\"Rust Documentation In JSON Format\");\n+        tarball.is_preview(true);\n         tarball.add_bulk_dir(&builder.json_doc_out(host), dest);\n         Some(tarball.generate())\n     }"}, {"sha": "3461d083c604de06902fb541b830c9c17ac51bee", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -666,7 +666,6 @@ h2.location a {\n }\n \n .method > .code-header, .trait-impl > .code-header {\n-\tmax-width: calc(100% - 41px);\n \tdisplay: block;\n }\n "}, {"sha": "7eb00d825a5c32488a081cbd231823f2928d23d0", "filename": "src/test/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -83,7 +83,7 @@ assert-position: (\n )\n \n // Checking on very small mobile. The `i` should be on its own line.\n-size: (410, 600)\n+size: (365, 600)\n compare-elements-position-false: (\n     \"//*[@id='method.create_an_iterator_from_read']//a[text()='NotableStructWithLongName']\",\n     \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\","}, {"sha": "4fa54c6e3696023e0e7411ea84834e63f54d5575", "filename": "src/test/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -9,7 +9,7 @@ LL |     async fn foo() {}\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/async-trait-fn.rs:5:5\n@@ -22,7 +22,7 @@ LL |     async fn bar(&self) {}\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/async-trait-fn.rs:7:5\n@@ -35,7 +35,7 @@ LL |     async fn baz() {\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0308]: mismatched types\n   --> $DIR/async-trait-fn.rs:3:20"}, {"sha": "62a243e69e7431593c5e2fce0428c1dff0313473", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -90,7 +90,7 @@ LL |     async fn foo() {}\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0308]: mismatched types\n   --> $DIR/edition-deny-async-fns-2015.rs:18:20"}, {"sha": "792f378cb57f1d015aab86757afcb7a4cc33888a", "filename": "src/test/ui/async-await/feature-gate-async_fn_in_trait.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fasync-await%2Ffeature-gate-async_fn_in_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fasync-await%2Ffeature-gate-async_fn_in_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ffeature-gate-async_fn_in_trait.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -0,0 +1,25 @@\n+// edition:2021\n+\n+// RPITIT is not enough to allow use of async functions\n+#![allow(incomplete_features)]\n+#![feature(return_position_impl_trait_in_trait)]\n+\n+trait T {\n+    async fn foo(); //~ ERROR functions in traits cannot be declared `async`\n+}\n+\n+// Both return_position_impl_trait_in_trait and async_fn_in_trait are required for this (see also\n+// feature-gate-return_position_impl_trait_in_trait.rs)\n+trait T2 {\n+    async fn foo() -> impl Sized; //~ ERROR functions in traits cannot be declared `async`\n+}\n+\n+trait T3 {\n+    fn foo() -> impl std::future::Future<Output = ()>;\n+}\n+\n+impl T3 for () {\n+    async fn foo() {} //~ ERROR functions in traits cannot be declared `async`\n+}\n+\n+fn main() {}"}, {"sha": "2a5fbd1ecd03d932d05ad986aef426bcc7d39d38", "filename": "src/test/ui/async-await/feature-gate-async_fn_in_trait.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fasync-await%2Ffeature-gate-async_fn_in_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fasync-await%2Ffeature-gate-async_fn_in_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ffeature-gate-async_fn_in_trait.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -0,0 +1,42 @@\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/feature-gate-async_fn_in_trait.rs:8:5\n+   |\n+LL |     async fn foo();\n+   |     -----^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/feature-gate-async_fn_in_trait.rs:14:5\n+   |\n+LL |     async fn foo() -> impl Sized;\n+   |     -----^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/feature-gate-async_fn_in_trait.rs:22:5\n+   |\n+LL |     async fn foo() {}\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0706`."}, {"sha": "a497cebe3c3d8c0f27c8b897780a71106709e622", "filename": "src/test/ui/async-await/issues/issue-95307.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -9,7 +9,7 @@ LL |     async fn new() -> [u8; _];\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error: in expressions, `_` can only be used on the left-hand side of an assignment\n   --> $DIR/issue-95307.rs:7:28"}, {"sha": "637765fff11e42b2446649bb43c8a2231d5329f6", "filename": "src/test/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -1,5 +1,18 @@\n+// edition:2021\n+\n+// async_fn_in_trait is not enough to allow use of RPITIT\n+#![allow(incomplete_features)]\n+#![feature(async_fn_in_trait)]\n+\n trait Foo {\n     fn bar() -> impl Sized; //~ ERROR `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+    fn baz() -> Box<impl std::fmt::Display>; //~ ERROR `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+}\n+\n+// Both return_position_impl_trait_in_trait and async_fn_in_trait are required for this (see also\n+// feature-gate-async_fn_in_trait.rs)\n+trait AsyncFoo {\n+    async fn bar() -> impl Sized; //~ ERROR `impl Trait` only allowed in function and inherent method return types, not in trait method return\n }\n \n fn main() {}"}, {"sha": "aeabed4a6ab66d550f9e1ed82f852eabbcb88d4b", "filename": "src/test/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -1,12 +1,30 @@\n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n-  --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:2:17\n+  --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:8:17\n    |\n LL |     fn bar() -> impl Sized;\n    |                 ^^^^^^^^^^\n    |\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+  --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:9:21\n+   |\n+LL |     fn baz() -> Box<impl std::fmt::Display>;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+  --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:15:23\n+   |\n+LL |     async fn bar() -> impl Sized;\n+   |                       ^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0562`."}, {"sha": "a8f23f81dea025b7d690a857836eac842052d585", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name2.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -5,6 +5,18 @@ LL | fn bar(x: x::Foo) -> y::Foo {\n    |                      ------ expected `y::Foo` because of return type\n LL |     return x;\n    |            ^ expected enum `y::Foo`, found enum `x::Foo`\n+   |\n+   = note: enum `x::Foo` and enum `y::Foo` have similar names, but are actually distinct types\n+note: enum `x::Foo` is defined in module `crate::x` of the current crate\n+  --> $DIR/fully-qualified-type-name2.rs:4:5\n+   |\n+LL |     pub enum Foo { }\n+   |     ^^^^^^^^^^^^\n+note: enum `y::Foo` is defined in module `crate::y` of the current crate\n+  --> $DIR/fully-qualified-type-name2.rs:8:5\n+   |\n+LL |     pub enum Foo { }\n+   |     ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1164a3a5b01802b6558e519e78a9813dc2579b26", "filename": "src/test/ui/intrinsics/const-eval-select-backtrace-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace-std.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -1,6 +1,7 @@\n // See issue #100696.\n // run-fail\n // check-run-results\n+// exec-env:RUST_BACKTRACE=0\n fn main() {\n     &\"\"[1..];\n }"}, {"sha": "463cd52c5aa7b6f701d1e12649477e75545a8cf1", "filename": "src/test/ui/intrinsics/const-eval-select-backtrace-std.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace-std.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace-std.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace-std.run.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -1,2 +1,2 @@\n-thread 'main' panicked at 'byte index 1 is out of bounds of ``', $DIR/const-eval-select-backtrace-std.rs:5:6\n+thread 'main' panicked at 'byte index 1 is out of bounds of ``', $DIR/const-eval-select-backtrace-std.rs:6:6\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "ef1c7c4195b9160508b3fa517fb7b2f38f22d438", "filename": "src/test/ui/intrinsics/const-eval-select-backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -2,6 +2,7 @@\n // See issue #100696.\n // run-fail\n // check-run-results\n+// exec-env:RUST_BACKTRACE=0\n \n #[track_caller]\n fn uhoh() {"}, {"sha": "54e28db5e533dcd86efbab084a535097cf5c2699", "filename": "src/test/ui/intrinsics/const-eval-select-backtrace.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-backtrace.run.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -1,2 +1,2 @@\n-thread 'main' panicked at 'Aaah!', $DIR/const-eval-select-backtrace.rs:16:9\n+thread 'main' panicked at 'Aaah!', $DIR/const-eval-select-backtrace.rs:17:9\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "61550b887552065dd161ab16c888587d1235994f", "filename": "src/test/ui/mismatched_types/show_module.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -0,0 +1,18 @@\n+pub mod blah {\n+    pub mod baz {\n+        pub struct Foo;\n+    }\n+}\n+\n+pub mod meh {\n+    pub struct Foo;\n+}\n+\n+pub type Foo = blah::baz::Foo;\n+\n+fn foo() -> Foo {\n+    meh::Foo\n+    //~^ ERROR mismatched types [E0308]\n+}\n+\n+fn main() {}"}, {"sha": "5e48e0955aae94e17626e04255a9771a9ec340d1", "filename": "src/test/ui/mismatched_types/show_module.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/show_module.rs:14:5\n+   |\n+LL | fn foo() -> Foo {\n+   |             --- expected `baz::Foo` because of return type\n+LL |     meh::Foo\n+   |     ^^^^^^^^ expected struct `baz::Foo`, found struct `meh::Foo`\n+   |\n+   = note: struct `meh::Foo` and struct `baz::Foo` have similar names, but are actually distinct types\n+note: struct `meh::Foo` is defined in module `crate::meh` of the current crate\n+  --> $DIR/show_module.rs:8:5\n+   |\n+LL |     pub struct Foo;\n+   |     ^^^^^^^^^^^^^^\n+note: struct `baz::Foo` is defined in module `crate::blah::baz` of the current crate\n+  --> $DIR/show_module.rs:3:9\n+   |\n+LL |         pub struct Foo;\n+   |         ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4b9157f39bf4894d78a0f5f3bbd48d4bbd1129ce", "filename": "src/test/ui/mismatched_types/similar_paths.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -0,0 +1,11 @@\n+enum Option<T> {\n+    Some(T),\n+    None,\n+}\n+\n+pub fn foo() -> Option<u8> {\n+    Some(42_u8)\n+    //~^ ERROR mismatched types [E0308]\n+}\n+\n+fn main() {}"}, {"sha": "e65ae58d4ce96ab55d5db11fc6c64c0d9b5de25c", "filename": "src/test/ui/mismatched_types/similar_paths.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/similar_paths.rs:7:5\n+   |\n+LL | pub fn foo() -> Option<u8> {\n+   |                 ---------- expected `Option<u8>` because of return type\n+LL |     Some(42_u8)\n+   |     ^^^^^^^^^^^ expected enum `Option`, found enum `std::option::Option`\n+   |\n+   = note: enum `std::option::Option` and enum `Option` have similar names, but are actually distinct types\n+note: enum `std::option::Option` is defined in crate `core`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL | pub enum Option<T> {\n+   | ^^^^^^^^^^^^^^^^^^\n+note: enum `Option` is defined in the current crate\n+  --> $DIR/similar_paths.rs:1:1\n+   |\n+LL | enum Option<T> {\n+   | ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8f5b7cce46908abcdb36141f672126a73e01862d", "filename": "src/test/ui/mismatched_types/similar_paths_primitive.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -0,0 +1,10 @@\n+#![allow(non_camel_case_types)]\n+\n+struct bool;\n+\n+fn foo(_: bool) {}\n+\n+fn main() {\n+    foo(true);\n+    //~^ ERROR mismatched types [E0308]\n+}"}, {"sha": "8a2f73945e84184d0d00e9e1e478279b15631966", "filename": "src/test/ui/mismatched_types/similar_paths_primitive.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/similar_paths_primitive.rs:8:9\n+   |\n+LL |     foo(true);\n+   |     --- ^^^^ expected struct `bool`, found `bool`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: bool and struct `bool` have similar names, but are actually distinct types\n+   = note: bool is a primitive defined by the language\n+note: struct `bool` is defined in the current crate\n+  --> $DIR/similar_paths_primitive.rs:3:1\n+   |\n+LL | struct bool;\n+   | ^^^^^^^^^^^\n+note: function defined here\n+  --> $DIR/similar_paths_primitive.rs:5:4\n+   |\n+LL | fn foo(_: bool) {}\n+   |    ^^^ -------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "800b5a43a0066802da036d6ab63b25c38b62d95a", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -147,7 +147,7 @@ LL |         async fn ft1();\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/fn-header-semantic-fail.rs:21:9\n@@ -160,7 +160,7 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/fn-header-semantic-fail.rs:29:9\n@@ -173,7 +173,7 @@ LL |         async fn ft1() {}\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/fn-header-semantic-fail.rs:33:9\n@@ -186,7 +186,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0391]: cycle detected when computing type of `main::ff5::{opaque#0}`\n   --> $DIR/fn-header-semantic-fail.rs:12:44"}, {"sha": "1354abb4f144ba4d2b5e9cebb1d30ebccf0d90aa", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -33,7 +33,7 @@ LL |     async fn associated();\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n@@ -46,7 +46,7 @@ LL |     async fn associated();\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2c1fa7b36b60ea93fab5ea00265bb6d45be9476b", "filename": "src/test/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -51,7 +51,7 @@ LL | trait C{async fn new(val: T) {}\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n warning: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:6:57"}, {"sha": "fcafd315ebf5450e5f0ea68e6281a6d52969bf46", "filename": "src/test/ui/type/type-mismatch-same-crate-name.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -6,6 +6,17 @@ LL |         a::try_foo(foo2);\n    |         |\n    |         arguments to this function are incorrect\n    |\n+   = note: struct `main::a::Foo` and struct `main::a::Foo` have similar names, but are actually distinct types\n+note: struct `main::a::Foo` is defined in crate `crate_a2`\n+  --> $DIR/auxiliary/crate_a2.rs:1:1\n+   |\n+LL | pub struct Foo;\n+   | ^^^^^^^^^^^^^^\n+note: struct `main::a::Foo` is defined in crate `crate_a1`\n+  --> $DIR/auxiliary/crate_a1.rs:1:1\n+   |\n+LL | pub struct Foo;\n+   | ^^^^^^^^^^^^^^\n    = note: perhaps two different versions of crate `crate_a1` are being used?\n note: function defined here\n   --> $DIR/auxiliary/crate_a1.rs:10:8"}, {"sha": "14311cff5c8c53a568100a4fa23025e9b3e25ce9", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44e09cb1db2788f59159c4b9055e339ed2181d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=4d44e09cb1db2788f59159c4b9055e339ed2181d", "patch": "@@ -184,7 +184,7 @@ static PKG_INSTALLERS: &[&str] = &[\"x86_64-apple-darwin\", \"aarch64-apple-darwin\"\n \n static MINGW: &[&str] = &[\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"];\n \n-static NIGHTLY_ONLY_COMPONENTS: &[&str] = &[\"miri-preview\"];\n+static NIGHTLY_ONLY_COMPONENTS: &[&str] = &[\"miri-preview\", \"rust-docs-json-preview\"];\n \n macro_rules! t {\n     ($e:expr) => {\n@@ -294,6 +294,7 @@ impl Builder {\n         package!(\"rust-mingw\", MINGW);\n         package!(\"rust-std\", TARGETS);\n         self.package(\"rust-docs\", &mut manifest.pkg, HOSTS, DOCS_FALLBACK);\n+        self.package(\"rust-docs-json-preview\", &mut manifest.pkg, HOSTS, DOCS_FALLBACK);\n         package!(\"rust-src\", &[\"*\"]);\n         package!(\"rls-preview\", HOSTS);\n         package!(\"rust-analyzer-preview\", HOSTS);\n@@ -379,6 +380,7 @@ impl Builder {\n         rename(\"rustfmt\", \"rustfmt-preview\");\n         rename(\"clippy\", \"clippy-preview\");\n         rename(\"miri\", \"miri-preview\");\n+        rename(\"rust-docs-json\", \"rust-docs-json-preview\");\n         rename(\"rust-analyzer\", \"rust-analyzer-preview\");\n     }\n \n@@ -435,6 +437,7 @@ impl Builder {\n             host_component(\"rustfmt-preview\"),\n             host_component(\"llvm-tools-preview\"),\n             host_component(\"rust-analysis\"),\n+            host_component(\"rust-docs-json\"),\n         ]);\n \n         extensions.extend("}]}