{"sha": "1c18f6ddfa5a390184b67b66124b372c9d49eda2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMThmNmRkZmE1YTM5MDE4NGI2N2I2NjEyNGIzNzJjOWQ0OWVkYTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-28T16:22:09Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-28T16:22:09Z"}, "message": "implement slice patterns", "tree": {"sha": "5cbb88d602e2ac63d652bfadbeef06098f77c2c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cbb88d602e2ac63d652bfadbeef06098f77c2c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c18f6ddfa5a390184b67b66124b372c9d49eda2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX6+4xAAoJEFbW7qD8Z6xGx/sP/ivydpSC6xOnfpaz4nFMS8oH\nTJQoR4FL/WPcWZH3W2Na1+w5GZuMjMYL6aagU4CC+wHbl1vPEhZi9QqUiuMPvL4X\nedRGie8kVDEA3ZSwXi/EuNBgzR+C9AjMTjwWqMuKFgC/700sgRP+l8XaYiqkbxv+\nxZ3OImSWv1uXhfZNIfF9VxHYZKRs5wKyoOGZf30vtS4Sh2yHxZb5HUd6AaVikUK5\nsFtzPfr06eWp1H5ic5r1kAwTH8EPpwTwQDccqbdOWfU3wI0Vbigd1yl0MtbnLW4S\n+AQ3pWPyan9RE3rocw5BKCXty3ohOQ24dpI5S/ANHLoEOhwCbvfOgGRqe3NvWnpD\nbXP8Mhj0cGiHaHqV2/GfTSpKUmMnKTHDfpTg9VYtIfz+62cHIIoiqt29GBbm44qk\nm56iX22F5UTxnrnfVTubhu7ZYdrjl2jcbmZ0ds2VlkPIiz8WuuEALrXCjP/4LMk/\nlsNpmOzMg601aFR8lqLAK/mEBrQmbXLBN/PPZVEUhoJT3bzlChLKUUHvpdJHIHVJ\nUw88ZRtkrTSTHIuVjyP6X/WWbYLL7AZFavnv8bs2TbmvS1/o3G6oaSVjAH4AHI+L\nfHRy+8/I29GszpoqAbmQ4ic+/ZX3D0oSME3ov0/aNUKHCsrssTBCVOvrEtlB9INs\nMD0AKfLT/6XIyDIRHgdr\n=kY0n\n-----END PGP SIGNATURE-----", "payload": "tree 5cbb88d602e2ac63d652bfadbeef06098f77c2c4\nparent 73f6d6e418dfc3f00dff441db0176481d0dfaaad\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1475079729 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1475079729 +0200\n\nimplement slice patterns"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c18f6ddfa5a390184b67b66124b372c9d49eda2", "html_url": "https://github.com/rust-lang/rust/commit/1c18f6ddfa5a390184b67b66124b372c9d49eda2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c18f6ddfa5a390184b67b66124b372c9d49eda2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73f6d6e418dfc3f00dff441db0176481d0dfaaad", "url": "https://api.github.com/repos/rust-lang/rust/commits/73f6d6e418dfc3f00dff441db0176481d0dfaaad", "html_url": "https://github.com/rust-lang/rust/commit/73f6d6e418dfc3f00dff441db0176481d0dfaaad"}], "stats": {"total": 166, "additions": 150, "deletions": 16}, "files": [{"sha": "cf43c33b5fcb2108c523b4d7d917252d58e9dc0b", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1c18f6ddfa5a390184b67b66124b372c9d49eda2/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c18f6ddfa5a390184b67b66124b372c9d49eda2/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=1c18f6ddfa5a390184b67b66124b372c9d49eda2", "patch": "@@ -576,15 +576,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Len(ref lvalue) => {\n                 let src = self.eval_lvalue(lvalue)?;\n                 let ty = self.lvalue_ty(lvalue);\n-                match ty.sty {\n-                    ty::TyArray(_, n) => self.memory.write_usize(dest, n as u64)?,\n-                    ty::TySlice(_) => if let LvalueExtra::Length(len) = src.extra {\n-                        self.memory.write_usize(dest, len)?;\n-                    } else {\n-                        bug!(\"Rvalue::Len of a slice given non-slice pointer: {:?}\", src);\n-                    },\n-                    _ => bug!(\"Rvalue::Len expected array or slice, got {:?}\", ty),\n-                }\n+                let (_, len) = src.elem_ty_and_len(ty);\n+                self.memory.write_usize(dest, len)?;\n             }\n \n             Ref(_, _, ref lvalue) => {\n@@ -889,19 +882,34 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     Index(ref operand) => {\n-                        let elem_size = match base_ty.sty {\n-                            ty::TyArray(elem_ty, _) |\n-                            ty::TySlice(elem_ty) => self.type_size(elem_ty),\n-                            _ => bug!(\"indexing expected an array or slice, got {:?}\", base_ty),\n-                        };\n+                        let (elem_ty, len) = base.elem_ty_and_len(base_ty);\n+                        let elem_size = self.type_size(elem_ty);\n                         let n_ptr = self.eval_operand(operand)?;\n                         let usize = self.tcx.types.usize;\n                         let n = self.value_to_primval(n_ptr, usize)?.expect_uint(\"Projection::Index expected usize\");\n+                        assert!(n < len);\n                         base.ptr.offset(n as isize * elem_size as isize)\n                     }\n \n-                    ConstantIndex { .. } => unimplemented!(),\n-                    Subslice { .. } => unimplemented!(),\n+                    ConstantIndex { offset, min_length, from_end } => {\n+                        let (elem_ty, n) = base.elem_ty_and_len(base_ty);\n+                        let elem_size = self.type_size(elem_ty);\n+                        assert!(n >= min_length as u64);\n+                        if from_end {\n+                            base.ptr.offset((n as isize - offset as isize) * elem_size as isize)\n+                        } else {\n+                            base.ptr.offset(offset as isize * elem_size as isize)\n+                        }\n+                    },\n+                    Subslice { from, to } => {\n+                        let (elem_ty, n) = base.elem_ty_and_len(base_ty);\n+                        let elem_size = self.type_size(elem_ty);\n+                        assert!((from as u64) <= n - (to as u64));\n+                        return Ok(Lvalue {\n+                            ptr: base.ptr.offset(from as isize * elem_size as isize),\n+                            extra: LvalueExtra::Length(n - to as u64 - from as u64),\n+                        })\n+                    },\n                 }\n             }\n         };\n@@ -1172,6 +1180,17 @@ impl Lvalue {\n         assert_eq!(self.extra, LvalueExtra::None);\n         self.ptr\n     }\n+    fn elem_ty_and_len<'tcx>(self, ty: Ty<'tcx>) -> (Ty<'tcx>, u64) {\n+        match ty.sty {\n+            ty::TyArray(elem, n) => (elem, n as u64),\n+            ty::TySlice(elem) => if let LvalueExtra::Length(len) = self.extra {\n+                (elem, len)\n+            } else {\n+                bug!(\"elem_ty_and_len called on a slice given non-slice lvalue: {:?}\", self);\n+            },\n+            _ => bug!(\"elem_ty_and_len expected array or slice, got {:?}\", ty),\n+        }\n+    }\n }\n \n impl<'mir, 'tcx: 'mir> Deref for CachedMir<'mir, 'tcx> {"}, {"sha": "cee0caeb465f56d3206266d85cc4f6f769730fb3", "filename": "tests/run-pass/issue-15080.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1c18f6ddfa5a390184b67b66124b372c9d49eda2/tests%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c18f6ddfa5a390184b67b66124b372c9d49eda2/tests%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-15080.rs?ref=1c18f6ddfa5a390184b67b66124b372c9d49eda2", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(slice_patterns)]\n+\n+fn main() {\n+    let mut x: &[_] = &[1, 2, 3, 4];\n+\n+    let mut result = vec!();\n+    loop {\n+        x = match *x {\n+            [1, n, 3, ref rest..] => {\n+                result.push(n);\n+                rest\n+            }\n+            [n, ref rest..] => {\n+                result.push(n);\n+                rest\n+            }\n+            [] =>\n+                break\n+        }\n+    }\n+    assert_eq!(result, [2, 4]);\n+}"}, {"sha": "6c87e8d35fbf0643c1402c409329ad64d4aa4ab3", "filename": "tests/run-pass/issue-17877.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c18f6ddfa5a390184b67b66124b372c9d49eda2/tests%2Frun-pass%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c18f6ddfa5a390184b67b66124b372c9d49eda2/tests%2Frun-pass%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-17877.rs?ref=1c18f6ddfa5a390184b67b66124b372c9d49eda2", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(slice_patterns)]\n+\n+fn main() {\n+    assert_eq!(match [0u8; 1024] {\n+        _ => 42_usize,\n+    }, 42_usize);\n+\n+    assert_eq!(match [0u8; 1024] {\n+        [1, _..] => 0_usize,\n+        [0, _..] => 1_usize,\n+        _ => 2_usize\n+    }, 1_usize);\n+}"}, {"sha": "ac80a4211ada627fbfc0c0a2eb50dfda3d31f570", "filename": "tests/run-pass/vec-matching-fold.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1c18f6ddfa5a390184b67b66124b372c9d49eda2/tests%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c18f6ddfa5a390184b67b66124b372c9d49eda2/tests%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvec-matching-fold.rs?ref=1c18f6ddfa5a390184b67b66124b372c9d49eda2", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(advanced_slice_patterns)]\n+#![feature(slice_patterns)]\n+\n+use std::fmt::Debug;\n+\n+fn foldl<T, U, F>(values: &[T],\n+                  initial: U,\n+                  mut function: F)\n+                  -> U where\n+    U: Clone+Debug, T:Debug,\n+    F: FnMut(U, &T) -> U,\n+{    match values {\n+        &[ref head, ref tail..] =>\n+            foldl(tail, function(initial, head), function),\n+        &[] => {\n+            // FIXME: call guards\n+            let res = initial.clone(); res\n+        }\n+    }\n+}\n+\n+fn foldr<T, U, F>(values: &[T],\n+                  initial: U,\n+                  mut function: F)\n+                  -> U where\n+    U: Clone,\n+    F: FnMut(&T, U) -> U,\n+{\n+    match values {\n+        &[ref head.., ref tail] =>\n+            foldr(head, function(tail, initial), function),\n+        &[] => {\n+            // FIXME: call guards\n+            let res = initial.clone(); res\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    let x = &[1, 2, 3, 4, 5];\n+\n+    let product = foldl(x, 1, |a, b| a * *b);\n+    assert_eq!(product, 120);\n+\n+    let sum = foldr(x, 0, |a, b| *a + b);\n+    assert_eq!(sum, 15);\n+}"}]}