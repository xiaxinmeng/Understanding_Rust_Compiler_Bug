{"sha": "653dcaac2b9b647ebcf417dbc1e55341c10160b9", "node_id": "C_kwDOAAsO6NoAKDY1M2RjYWFjMmI5YjY0N2ViY2Y0MTdkYmMxZTU1MzQxYzEwMTYwYjk", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-26T01:22:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-26T01:22:20Z"}, "message": "Rollup merge of #89216 - r00ster91:bigo, r=dtolnay\n\nConsistent big O notation\n\nThis makes the big O time complexity notation in places with markdown support more consistent.\nInspired by #89210", "tree": {"sha": "bad03149285ff2b553f5dafb85379089fb2bba9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bad03149285ff2b553f5dafb85379089fb2bba9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/653dcaac2b9b647ebcf417dbc1e55341c10160b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhT8tNCRBK7hj4Ov3rIwAAfHEIABfwBdxHqysYFWf979HOWfJi\ngqIkvsksRsWASR0qXhRNJTdr0ZMk0zQllMBobjO1hOFpVw5nKw7b8zAuRgQLYzEP\nI8RS1a3mqg9gN2xC0EiSAdj21j2NfCGyR808yZW8YT93HXIq4zFwEDsuFXhAMMM1\noXDcP32BkP/8lN3YXP6sWr0lDdFRCTKi+BqyMp6ZhPDih6hWMcTFAJjEIc4ozdkX\nQhFkJvxdxUcR9OZ5SLKr8HBw7HDyCQSjkTw1kHxYPYQLoFkUStqIirVGWDmpieDW\nnGfIB8c+E5ktxvRBvXle83h+O1o2TjA+CjcVnVBN523445t2JCAt4b0q35CSpzg=\n=NSdf\n-----END PGP SIGNATURE-----\n", "payload": "tree bad03149285ff2b553f5dafb85379089fb2bba9d\nparent c118d8b79b2e10d6922423ecb6162ffe8f5d07fb\nparent 956f87fb04f589ac2fbe262a043c9f3cad6b2ac0\nauthor Manish Goregaokar <manishsmail@gmail.com> 1632619340 -0700\ncommitter GitHub <noreply@github.com> 1632619340 -0700\n\nRollup merge of #89216 - r00ster91:bigo, r=dtolnay\n\nConsistent big O notation\n\nThis makes the big O time complexity notation in places with markdown support more consistent.\nInspired by #89210\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/653dcaac2b9b647ebcf417dbc1e55341c10160b9", "html_url": "https://github.com/rust-lang/rust/commit/653dcaac2b9b647ebcf417dbc1e55341c10160b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/653dcaac2b9b647ebcf417dbc1e55341c10160b9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c118d8b79b2e10d6922423ecb6162ffe8f5d07fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c118d8b79b2e10d6922423ecb6162ffe8f5d07fb", "html_url": "https://github.com/rust-lang/rust/commit/c118d8b79b2e10d6922423ecb6162ffe8f5d07fb"}, {"sha": "956f87fb04f589ac2fbe262a043c9f3cad6b2ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/956f87fb04f589ac2fbe262a043c9f3cad6b2ac0", "html_url": "https://github.com/rust-lang/rust/commit/956f87fb04f589ac2fbe262a043c9f3cad6b2ac0"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "c2e09eb13c3564e5452ecf940b2eddbb7e228c14", "filename": "RELEASES.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653dcaac2b9b647ebcf417dbc1e55341c10160b9/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/653dcaac2b9b647ebcf417dbc1e55341c10160b9/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=653dcaac2b9b647ebcf417dbc1e55341c10160b9", "patch": "@@ -5170,7 +5170,7 @@ Libraries\n - [Upgrade to Unicode 10.0.0][42999]\n - [Reimplemented `{f32, f64}::{min, max}` in Rust instead of using CMath.][42430]\n - [Skip the main thread's manual stack guard on Linux][43072]\n-- [Iterator::nth for `ops::{Range, RangeFrom}` is now done in O(1) time][43077]\n+- [Iterator::nth for `ops::{Range, RangeFrom}` is now done in *O*(1) time][43077]\n - [`#[repr(align(N))]` attribute max number is now 2^31 - 1.][43097] This was\n   previously 2^15.\n - [`{OsStr, Path}::Display` now avoids allocations where possible][42613]\n@@ -8473,7 +8473,7 @@ Libraries\n   algorithm][s].\n * [`std::io::copy` allows `?Sized` arguments][cc].\n * The `Windows`, `Chunks`, and `ChunksMut` iterators over slices all\n-  [override `count`, `nth` and `last` with an O(1)\n+  [override `count`, `nth` and `last` with an *O*(1)\n   implementation][it].\n * [`Default` is implemented for arrays up to `[T; 32]`][d].\n * [`IntoRawFd` has been added to the Unix-specific prelude,\n@@ -8995,7 +8995,7 @@ Libraries\n * The `Default` implementation for `Arc` [no longer requires `Sync +\n   Send`][arc].\n * [The `Iterator` methods `count`, `nth`, and `last` have been\n-  overridden for slices to have O(1) performance instead of O(n)][si].\n+  overridden for slices to have *O*(1) performance instead of *O*(*n*)][si].\n * Incorrect handling of paths on Windows has been improved in both the\n   compiler and the standard library.\n * [`AtomicPtr` gained a `Default` implementation][ap]."}, {"sha": "d8ac815a15821c114860dca527a26e9fdd62c87e", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/653dcaac2b9b647ebcf417dbc1e55341c10160b9/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653dcaac2b9b647ebcf417dbc1e55341c10160b9/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=653dcaac2b9b647ebcf417dbc1e55341c10160b9", "patch": "@@ -3,7 +3,7 @@\n //! Also computes as the resulting DAG if each SCC is replaced with a\n //! node in the graph. This uses [Tarjan's algorithm](\n //! https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm)\n-//! that completes in *O(n)* time.\n+//! that completes in *O*(*n*) time.\n \n use crate::fx::FxHashSet;\n use crate::graph::vec_graph::VecGraph;"}, {"sha": "20e2a3b9696e8560cb80d71d50cd9d8d6a0c281d", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/653dcaac2b9b647ebcf417dbc1e55341c10160b9/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653dcaac2b9b647ebcf417dbc1e55341c10160b9/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=653dcaac2b9b647ebcf417dbc1e55341c10160b9", "patch": "@@ -9,7 +9,7 @@ mod index_map;\n pub use index_map::SortedIndexMultiMap;\n \n /// `SortedMap` is a data structure with similar characteristics as BTreeMap but\n-/// slightly different trade-offs: lookup, insertion, and removal are O(log(N))\n+/// slightly different trade-offs: lookup, insertion, and removal are *O*(log(*n*))\n /// and elements can be iterated in order cheaply.\n ///\n /// `SortedMap` can be faster than a `BTreeMap` for small sizes (<50) since it"}, {"sha": "4ed3702f7d22479d8ab1e77be4c49dc139f5b1ec", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/653dcaac2b9b647ebcf417dbc1e55341c10160b9/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653dcaac2b9b647ebcf417dbc1e55341c10160b9/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=653dcaac2b9b647ebcf417dbc1e55341c10160b9", "patch": "@@ -3,7 +3,7 @@\n //! Insertion and popping the largest element have *O*(log(*n*)) time complexity.\n //! Checking the largest element is *O*(1). Converting a vector to a binary heap\n //! can be done in-place, and has *O*(*n*) complexity. A binary heap can also be\n-//! converted to a sorted vector in-place, allowing it to be used for an *O*(*n* \\* log(*n*))\n+//! converted to a sorted vector in-place, allowing it to be used for an *O*(*n* * log(*n*))\n //! in-place heapsort.\n //!\n //! # Examples\n@@ -243,9 +243,9 @@ use super::SpecExtend;\n ///\n /// # Time complexity\n ///\n-/// | [push] | [pop]     | [peek]/[peek\\_mut] |\n-/// |--------|-----------|--------------------|\n-/// | O(1)~  | *O*(log(*n*)) | *O*(1)               |\n+/// | [push]  | [pop]         | [peek]/[peek\\_mut] |\n+/// |---------|---------------|--------------------|\n+/// | *O*(1)~ | *O*(log(*n*)) | *O*(1)             |\n ///\n /// The value for `push` is an expected cost; the method documentation gives a\n /// more detailed analysis."}, {"sha": "4440b1f599f76862321a8b7d11fbe86e7d6c61d9", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/653dcaac2b9b647ebcf417dbc1e55341c10160b9/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653dcaac2b9b647ebcf417dbc1e55341c10160b9/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=653dcaac2b9b647ebcf417dbc1e55341c10160b9", "patch": "@@ -1,8 +1,8 @@\n //! A contiguous growable array type with heap-allocated contents, written\n //! `Vec<T>`.\n //!\n-//! Vectors have `O(1)` indexing, amortized `O(1)` push (to the end) and\n-//! `O(1)` pop (from the end).\n+//! Vectors have *O*(1) indexing, amortized *O*(1) push (to the end) and\n+//! *O*(1) pop (from the end).\n //!\n //! Vectors ensure they never allocate more than `isize::MAX` bytes.\n //!\n@@ -1270,7 +1270,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// The removed element is replaced by the last element of the vector.\n     ///\n-    /// This does not preserve ordering, but is O(1).\n+    /// This does not preserve ordering, but is *O*(1).\n     ///\n     /// # Panics\n     ///"}, {"sha": "f2336fb2865b09edba5660d34399d6c3150a2926", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/653dcaac2b9b647ebcf417dbc1e55341c10160b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653dcaac2b9b647ebcf417dbc1e55341c10160b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=653dcaac2b9b647ebcf417dbc1e55341c10160b9", "patch": "@@ -1795,10 +1795,11 @@ pub trait Iterator {\n     /// The relative order of partitioned items is not maintained.\n     ///\n     /// # Current implementation\n+    ///\n     /// Current algorithms tries finding the first element for which the predicate evaluates\n     /// to false, and the last element for which it evaluates to true and repeatedly swaps them.\n     ///\n-    /// Time Complexity: *O*(*N*)\n+    /// Time complexity: *O*(*n*)\n     ///\n     /// See also [`is_partitioned()`] and [`partition()`].\n     ///"}, {"sha": "6ca0525cdbe328de45402ce63fd8c909b19e233b", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/653dcaac2b9b647ebcf417dbc1e55341c10160b9/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653dcaac2b9b647ebcf417dbc1e55341c10160b9/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=653dcaac2b9b647ebcf417dbc1e55341c10160b9", "patch": "@@ -97,11 +97,11 @@\n //!\n //! ## Sequences\n //!\n-//! |                | get(i)         | insert(i)       | remove(i)      | append | split_off(i)   |\n-//! |----------------|----------------|-----------------|----------------|--------|----------------|\n-//! | [`Vec`]        | O(1)           | O(n-i)*         | O(n-i)         | O(m)*  | O(n-i)         |\n-//! | [`VecDeque`]   | O(1)           | O(min(i, n-i))* | O(min(i, n-i)) | O(m)*  | O(min(i, n-i)) |\n-//! | [`LinkedList`] | O(min(i, n-i)) | O(min(i, n-i))  | O(min(i, n-i)) | O(1)   | O(min(i, n-i)) |\n+//! |                | get(i)                 | insert(i)               | remove(i)              | append    | split_off(i)           |\n+//! |----------------|------------------------|-------------------------|------------------------|-----------|------------------------|\n+//! | [`Vec`]        | *O*(1)                 | *O*(*n*-*i*)*           | *O*(*n*-*i*)           | *O*(*m*)* | *O*(*n*-*i*)           |\n+//! | [`VecDeque`]   | *O*(1)                 | *O*(min(*i*, *n*-*i*))* | *O*(min(*i*, *n*-*i*)) | *O*(*m*)* | *O*(min(*i*, *n*-*i*)) |\n+//! | [`LinkedList`] | *O*(min(*i*, *n*-*i*)) | *O*(min(*i*, *n*-*i*))  | *O*(min(*i*, *n*-*i*)) | *O*(1)    | *O*(min(*i*, *n*-*i*)) |\n //!\n //! Note that where ties occur, [`Vec`] is generally going to be faster than [`VecDeque`], and\n //! [`VecDeque`] is generally going to be faster than [`LinkedList`].\n@@ -110,10 +110,10 @@\n //!\n //! For Sets, all operations have the cost of the equivalent Map operation.\n //!\n-//! |              | get       | insert    | remove    | range     | append |\n-//! |--------------|-----------|-----------|-----------|-----------|--------|\n-//! | [`HashMap`]  | O(1)~     | O(1)~*    | O(1)~     | N/A       | N/A    |\n-//! | [`BTreeMap`] | O(log(n)) | O(log(n)) | O(log(n)) | O(log(n)) | O(n+m) |\n+//! |              | get           | insert        | remove        | range         | append       |\n+//! |--------------|---------------|---------------|---------------|---------------|--------------|\n+//! | [`HashMap`]  | *O*(1)~       | *O*(1)~*      | *O*(1)~       | N/A           | N/A          |\n+//! | [`BTreeMap`] | *O*(log(*n*)) | *O*(log(*n*)) | *O*(log(*n*)) | *O*(log(*n*)) | *O*(*n*+*m*) |\n //!\n //! # Correct and Efficient Usage of Collections\n //!"}, {"sha": "82a76aa73c583fb78ecaea7bb101cca179d71547", "filename": "library/std/src/ffi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/653dcaac2b9b647ebcf417dbc1e55341c10160b9/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653dcaac2b9b647ebcf417dbc1e55341c10160b9/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs?ref=653dcaac2b9b647ebcf417dbc1e55341c10160b9", "patch": "@@ -43,8 +43,8 @@\n //! terminator, so the buffer length is really `len+1` characters.\n //! Rust strings don't have a nul terminator; their length is always\n //! stored and does not need to be calculated. While in Rust\n-//! accessing a string's length is a `O(1)` operation (because the\n-//! length is stored); in C it is an `O(length)` operation because the\n+//! accessing a string's length is an *O*(1) operation (because the\n+//! length is stored); in C it is an *O*(*n*) operation because the\n //! length needs to be computed by scanning the string for the nul\n //! terminator.\n //!"}, {"sha": "8a699f13f2ed267328eeca69fed865048b05225c", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/653dcaac2b9b647ebcf417dbc1e55341c10160b9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653dcaac2b9b647ebcf417dbc1e55341c10160b9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=653dcaac2b9b647ebcf417dbc1e55341c10160b9", "patch": "@@ -995,7 +995,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for use of `.iter().nth()` (and the related\n-    /// `.iter_mut().nth()`) on standard library types with O(1) element access.\n+    /// `.iter_mut().nth()`) on standard library types with *O*(1) element access.\n     ///\n     /// ### Why is this bad?\n     /// `.get()` and `.get_mut()` are more efficient and more"}]}