{"sha": "8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NzZiM2I5YjBiZjY1MmNkZGY2OGQ5ZGRjYjViNWZhMzFkODI5YWI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-28T12:34:03Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-28T12:34:03Z"}, "message": "Resolve const parameters with modern hygiene\n\nDeclarations were already modernized, resulting in cases where a macro\ncouldn't resolve it's own identifier.", "tree": {"sha": "a938616009328fb8eb89c49be2e4d8915a564315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a938616009328fb8eb89c49be2e4d8915a564315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab", "html_url": "https://github.com/rust-lang/rust/commit/8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dca17e62def01ee8c8621db7925d55f9275f6d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dca17e62def01ee8c8621db7925d55f9275f6d9", "html_url": "https://github.com/rust-lang/rust/commit/3dca17e62def01ee8c8621db7925d55f9275f6d9"}], "stats": {"total": 150, "additions": 128, "deletions": 22}, "files": [{"sha": "8884d1cd27f79159b832595683f5bc056ff12ca5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab", "patch": "@@ -872,8 +872,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         debug!(\"(resolving function) entering function\");\n         let rib_kind = match function_kind {\n             FnKind::ItemFn(..) => FnItemRibKind,\n-            FnKind::Method(..) => AssocItemRibKind,\n-            FnKind::Closure(_) => NormalRibKind,\n+            FnKind::Method(..) | FnKind::Closure(_) => NormalRibKind,\n         };\n \n         // Create a value rib for the function.\n@@ -2310,21 +2309,32 @@ impl<'a> Resolver<'a> {\n         if ident.name == kw::Invalid {\n             return Some(LexicalScopeBinding::Res(Res::Err));\n         }\n-        ident.span = if ident.name == kw::SelfUpper {\n+        let (general_span, modern_span) = if ident.name == kw::SelfUpper {\n             // FIXME(jseyfried) improve `Self` hygiene\n-            ident.span.with_ctxt(SyntaxContext::empty())\n+            let empty_span = ident.span.with_ctxt(SyntaxContext::empty());\n+            (empty_span, empty_span)\n         } else if ns == TypeNS {\n-            ident.span.modern()\n+            let modern_span = ident.span.modern();\n+            (modern_span, modern_span)\n         } else {\n-            ident.span.modern_and_legacy()\n+            (ident.span.modern_and_legacy(), ident.span.modern())\n         };\n+        ident.span = general_span;\n+        let modern_ident = Ident { span: modern_span, ..ident };\n \n         // Walk backwards up the ribs in scope.\n         let record_used = record_used_id.is_some();\n         let mut module = self.graph_root;\n         for i in (0 .. self.ribs[ns].len()).rev() {\n             debug!(\"walk rib\\n{:?}\", self.ribs[ns][i].bindings);\n-            if let Some(res) = self.ribs[ns][i].bindings.get(&ident).cloned() {\n+            // Use the rib kind to determine whether we are resolving parameters\n+            // (modern hygiene) or local variables (legacy hygiene).\n+            let rib_ident = if let AssocItemRibKind | ItemRibKind = self.ribs[ns][i].kind {\n+                modern_ident\n+            } else {\n+                ident\n+            };\n+            if let Some(res) = self.ribs[ns][i].bindings.get(&rib_ident).cloned() {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Res(\n                     self.validate_res_from_ribs(ns, i, res, record_used, path_span),\n@@ -2360,7 +2370,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        ident.span = ident.span.modern();\n+        ident = modern_ident;\n         let mut poisoned = None;\n         loop {\n             let opt_module = if let Some(node_id) = record_used_id {"}, {"sha": "9dc5adfce478af719383a10fcef9557a308c4a4c", "filename": "src/test/ui/hygiene/generic_params.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.rs?ref=8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab", "patch": "@@ -0,0 +1,104 @@\n+// Ensure that generic parameters always have modern hygiene.\n+\n+// check-pass\n+// ignore-pretty pretty-printing is unhygienic\n+\n+#![feature(decl_macro, rustc_attrs, const_generics)]\n+\n+mod type_params {\n+    macro m($T:ident) {\n+        fn f<$T: Clone, T: PartialEq>(t1: $T, t2: T) -> ($T, bool) {\n+            (t1.clone(), t2 == t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    macro n($T:ident) {\n+        fn g<$T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+        fn h<T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"transparent\"]\n+    macro p($T:ident) {\n+        fn j<$T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+        fn k<T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+    }\n+\n+    m!(T);\n+    n!(T);\n+    p!(T);\n+}\n+\n+mod lifetime_params {\n+    macro m($a:lifetime) {\n+        fn f<'b, 'c, $a: 'b, 'a: 'c>(t1: &$a(), t2: &'a ()) -> (&'b (), &'c ()) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    macro n($a:lifetime) {\n+        fn g<$a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+        fn h<'a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"transparent\"]\n+    macro p($a:lifetime) {\n+        fn j<$a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+        fn k<'a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    m!('a);\n+    n!('a);\n+    p!('a);\n+}\n+\n+mod const_params {\n+    macro m($C:ident) {\n+        fn f<const $C: usize, const C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); $C], [(); C]) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    macro n($C:ident) {\n+        fn g<const $C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+        fn h<const C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"transparent\"]\n+    macro p($C:ident) {\n+        fn j<const $C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+        fn k<const C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    m!(C);\n+    n!(C);\n+    p!(C);\n+}\n+\n+fn main() {}"}, {"sha": "ecd228a5db5c80abed211d881d20d219e3026e18", "filename": "src/test/ui/hygiene/generic_params.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr?ref=8876b3b9b0bf652cddf68d9ddcb5b5fa31d829ab", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/generic_params.rs:6:37\n+   |\n+LL | #![feature(decl_macro, rustc_attrs, const_generics)]\n+   |                                     ^^^^^^^^^^^^^^\n+"}, {"sha": "b296bfe59888721d8c0a1404d414e30f5c55c828", "filename": "src/test/ui/hygiene/ty_params.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3dca17e62def01ee8c8621db7925d55f9275f6d9/src%2Ftest%2Fui%2Fhygiene%2Fty_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dca17e62def01ee8c8621db7925d55f9275f6d9/src%2Ftest%2Fui%2Fhygiene%2Fty_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fty_params.rs?ref=3dca17e62def01ee8c8621db7925d55f9275f6d9", "patch": "@@ -1,14 +0,0 @@\n-// check-pass\n-// ignore-pretty pretty-printing is unhygienic\n-\n-#![feature(decl_macro)]\n-\n-macro m($T:ident) {\n-    fn f<T, $T>(t: T, t2: $T) -> (T, $T) {\n-        (t, t2)\n-    }\n-}\n-\n-m!(T);\n-\n-fn main() {}"}]}