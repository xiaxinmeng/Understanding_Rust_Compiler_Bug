{"sha": "bfd11235a6a5cd2f23d5ed219ebba579b2078505", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZDExMjM1YTZhNWNkMmYyM2Q1ZWQyMTllYmJhNTc5YjIwNzg1MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-30T08:03:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-30T08:03:42Z"}, "message": "Auto merge of #5380 - lzutao:deprecate-REPLACE_CONSTS, r=phansch\n\nDeprecate REPLACE_CONSTS lint\n\nCloses #5346\nchangelog: Deprecate `replace_consts` lint", "tree": {"sha": "f0049cc456f133a92b60911d77da04dcfb07af0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0049cc456f133a92b60911d77da04dcfb07af0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfd11235a6a5cd2f23d5ed219ebba579b2078505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd11235a6a5cd2f23d5ed219ebba579b2078505", "html_url": "https://github.com/rust-lang/rust/commit/bfd11235a6a5cd2f23d5ed219ebba579b2078505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfd11235a6a5cd2f23d5ed219ebba579b2078505/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0254c421f90813e14abd9d982deb5f1b1dfb5b0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0254c421f90813e14abd9d982deb5f1b1dfb5b0c", "html_url": "https://github.com/rust-lang/rust/commit/0254c421f90813e14abd9d982deb5f1b1dfb5b0c"}, {"sha": "d055b7d61c44b7a401ebc470e3d1e3bd06a4d360", "url": "https://api.github.com/repos/rust-lang/rust/commits/d055b7d61c44b7a401ebc470e3d1e3bd06a4d360", "html_url": "https://github.com/rust-lang/rust/commit/d055b7d61c44b7a401ebc470e3d1e3bd06a4d360"}], "stats": {"total": 480, "additions": 14, "deletions": 466}, "files": [{"sha": "fefbb3486fdc9f3bacf50fde7512a6956ac0c4c0", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfd11235a6a5cd2f23d5ed219ebba579b2078505/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfd11235a6a5cd2f23d5ed219ebba579b2078505/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=bfd11235a6a5cd2f23d5ed219ebba579b2078505", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 362 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 361 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "6e8ca647dd7ae930e9c7dde397c4ae78e0178314", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfd11235a6a5cd2f23d5ed219ebba579b2078505/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd11235a6a5cd2f23d5ed219ebba579b2078505/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=bfd11235a6a5cd2f23d5ed219ebba579b2078505", "patch": "@@ -147,3 +147,11 @@ declare_deprecated_lint! {\n     pub UNUSED_LABEL,\n     \"this lint has been uplifted to rustc and is now called `unused_labels`\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** Associated-constants are now preferred.\n+    pub REPLACE_CONSTS,\n+    \"associated-constants `MIN`/`MAX` of integers are prefer to `{min,max}_value()` and module constants\"\n+}"}, {"sha": "704b46a87c9120f4207ef2a466f4d1bcfc936ef6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfd11235a6a5cd2f23d5ed219ebba579b2078505/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd11235a6a5cd2f23d5ed219ebba579b2078505/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bfd11235a6a5cd2f23d5ed219ebba579b2078505", "patch": "@@ -291,7 +291,6 @@ pub mod redundant_pub_crate;\n pub mod redundant_static_lifetimes;\n pub mod reference;\n pub mod regex;\n-pub mod replace_consts;\n pub mod returns;\n pub mod serde_api;\n pub mod shadow;\n@@ -470,6 +469,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::unused_label\",\n         \"this lint has been uplifted to rustc and is now called `unused_labels`\",\n     );\n+    store.register_removed(\n+        \"clippy::replace_consts\",\n+        \"associated-constants `MIN`/`MAX` of integers are prefer to `{min,max}_value()` and module constants\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -755,7 +758,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &regex::INVALID_REGEX,\n         &regex::REGEX_MACRO,\n         &regex::TRIVIAL_REGEX,\n-        &replace_consts::REPLACE_CONSTS,\n         &returns::LET_AND_RETURN,\n         &returns::NEEDLESS_RETURN,\n         &returns::UNUSED_UNIT,\n@@ -953,7 +955,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box identity_conversion::IdentityConversion::default());\n     store.register_late_pass(|| box types::ImplicitHasher);\n     store.register_late_pass(|| box fallible_impl_from::FallibleImplFrom);\n-    store.register_late_pass(|| box replace_consts::ReplaceConsts);\n     store.register_late_pass(|| box types::UnitArg);\n     store.register_late_pass(|| box double_comparison::DoubleComparisons);\n     store.register_late_pass(|| box question_mark::QuestionMark);\n@@ -1110,7 +1111,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n         LintId::of(&non_expressive_names::SIMILAR_NAMES),\n         LintId::of(&ranges::RANGE_PLUS_ONE),\n-        LintId::of(&replace_consts::REPLACE_CONSTS),\n         LintId::of(&shadow::SHADOW_UNRELATED),\n         LintId::of(&strings::STRING_ADD_ASSIGN),\n         LintId::of(&trait_bounds::TYPE_REPETITION_IN_BOUNDS),"}, {"sha": "aca1ebbd5080fbf281625d0f495626426b35cb9e", "filename": "clippy_lints/src/replace_consts.rs", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/0254c421f90813e14abd9d982deb5f1b1dfb5b0c/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0254c421f90813e14abd9d982deb5f1b1dfb5b0c/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=0254c421f90813e14abd9d982deb5f1b1dfb5b0c", "patch": "@@ -1,103 +0,0 @@\n-use crate::utils::{match_def_path, span_lint_and_sugg};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{Expr, ExprKind, Node};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of standard library\n-    /// `const`s that could be replaced by `const fn`s.\n-    ///\n-    /// **Why is this bad?** `const fn`s exist\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// let x = std::u32::MIN;\n-    /// let y = std::u32::MAX;\n-    /// ```\n-    ///\n-    /// Could be written:\n-    ///\n-    /// ```rust\n-    /// let x = u32::min_value();\n-    /// let y = u32::max_value();\n-    /// ```\n-    pub REPLACE_CONSTS,\n-    pedantic,\n-    \"Lint usages of standard library `const`s that could be replaced by `const fn`s\"\n-}\n-\n-declare_lint_pass!(ReplaceConsts => [REPLACE_CONSTS]);\n-\n-fn in_pattern(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n-    let map = &cx.tcx.hir();\n-    let parent_id = map.get_parent_node(expr.hir_id);\n-\n-    if let Some(node) = map.find(parent_id) {\n-        if let Node::Pat(_) = node {\n-            return true;\n-        }\n-    }\n-\n-    false\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Path(ref qp) = expr.kind;\n-            if let Res::Def(DefKind::Const, def_id) = cx.tables.qpath_res(qp, expr.hir_id);\n-            // Do not lint within patterns as function calls are disallowed in them\n-            if !in_pattern(cx, expr);\n-            then {\n-                for &(ref const_path, repl_snip) in &REPLACEMENTS {\n-                    if match_def_path(cx, def_id, const_path) {\n-                        span_lint_and_sugg(\n-                            cx,\n-                            REPLACE_CONSTS,\n-                            expr.span,\n-                            &format!(\"using `{}`\", const_path.last().expect(\"empty path\")),\n-                            \"try this\",\n-                            repl_snip.to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        return;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-const REPLACEMENTS: [([&str; 3], &str); 24] = [\n-    // Min\n-    ([\"core\", \"isize\", \"MIN\"], \"isize::min_value()\"),\n-    ([\"core\", \"i8\", \"MIN\"], \"i8::min_value()\"),\n-    ([\"core\", \"i16\", \"MIN\"], \"i16::min_value()\"),\n-    ([\"core\", \"i32\", \"MIN\"], \"i32::min_value()\"),\n-    ([\"core\", \"i64\", \"MIN\"], \"i64::min_value()\"),\n-    ([\"core\", \"i128\", \"MIN\"], \"i128::min_value()\"),\n-    ([\"core\", \"usize\", \"MIN\"], \"usize::min_value()\"),\n-    ([\"core\", \"u8\", \"MIN\"], \"u8::min_value()\"),\n-    ([\"core\", \"u16\", \"MIN\"], \"u16::min_value()\"),\n-    ([\"core\", \"u32\", \"MIN\"], \"u32::min_value()\"),\n-    ([\"core\", \"u64\", \"MIN\"], \"u64::min_value()\"),\n-    ([\"core\", \"u128\", \"MIN\"], \"u128::min_value()\"),\n-    // Max\n-    ([\"core\", \"isize\", \"MAX\"], \"isize::max_value()\"),\n-    ([\"core\", \"i8\", \"MAX\"], \"i8::max_value()\"),\n-    ([\"core\", \"i16\", \"MAX\"], \"i16::max_value()\"),\n-    ([\"core\", \"i32\", \"MAX\"], \"i32::max_value()\"),\n-    ([\"core\", \"i64\", \"MAX\"], \"i64::max_value()\"),\n-    ([\"core\", \"i128\", \"MAX\"], \"i128::max_value()\"),\n-    ([\"core\", \"usize\", \"MAX\"], \"usize::max_value()\"),\n-    ([\"core\", \"u8\", \"MAX\"], \"u8::max_value()\"),\n-    ([\"core\", \"u16\", \"MAX\"], \"u16::max_value()\"),\n-    ([\"core\", \"u32\", \"MAX\"], \"u32::max_value()\"),\n-    ([\"core\", \"u64\", \"MAX\"], \"u64::max_value()\"),\n-    ([\"core\", \"u128\", \"MAX\"], \"u128::max_value()\"),\n-];"}, {"sha": "5777e7d90e58562cfdc928818e00d7833d1c8af3", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfd11235a6a5cd2f23d5ed219ebba579b2078505/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd11235a6a5cd2f23d5ed219ebba579b2078505/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=bfd11235a6a5cd2f23d5ed219ebba579b2078505", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 362] = [\n+pub const ALL_LINTS: [Lint; 361] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1792,13 +1792,6 @@ pub const ALL_LINTS: [Lint; 362] = [\n         deprecation: None,\n         module: \"regex\",\n     },\n-    Lint {\n-        name: \"replace_consts\",\n-        group: \"pedantic\",\n-        desc: \"Lint usages of standard library `const`s that could be replaced by `const fn`s\",\n-        deprecation: None,\n-        module: \"replace_consts\",\n-    },\n     Lint {\n         name: \"rest_pat_in_fully_bound_structs\",\n         group: \"restriction\","}, {"sha": "108474408e0f87e33e2450f775bd56b26a92d6e4", "filename": "tests/ui/replace_consts.fixed", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/0254c421f90813e14abd9d982deb5f1b1dfb5b0c/tests%2Fui%2Freplace_consts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0254c421f90813e14abd9d982deb5f1b1dfb5b0c/tests%2Fui%2Freplace_consts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.fixed?ref=0254c421f90813e14abd9d982deb5f1b1dfb5b0c", "patch": "@@ -1,99 +0,0 @@\n-// run-rustfix\n-#![feature(integer_atomics)]\n-#![allow(unused_variables, clippy::blacklisted_name)]\n-#![deny(clippy::replace_consts)]\n-\n-use std::sync::atomic::*;\n-\n-#[rustfmt::skip]\n-fn bad() {\n-    // Min\n-    { let foo = isize::min_value(); };\n-    { let foo = i8::min_value(); };\n-    { let foo = i16::min_value(); };\n-    { let foo = i32::min_value(); };\n-    { let foo = i64::min_value(); };\n-    { let foo = i128::min_value(); };\n-    { let foo = usize::min_value(); };\n-    { let foo = u8::min_value(); };\n-    { let foo = u16::min_value(); };\n-    { let foo = u32::min_value(); };\n-    { let foo = u64::min_value(); };\n-    { let foo = u128::min_value(); };\n-    // Max\n-    { let foo = isize::max_value(); };\n-    { let foo = i8::max_value(); };\n-    { let foo = i16::max_value(); };\n-    { let foo = i32::max_value(); };\n-    { let foo = i64::max_value(); };\n-    { let foo = i128::max_value(); };\n-    { let foo = usize::max_value(); };\n-    { let foo = u8::max_value(); };\n-    { let foo = u16::max_value(); };\n-    { let foo = u32::max_value(); };\n-    { let foo = u64::max_value(); };\n-    { let foo = u128::max_value(); };\n-}\n-\n-#[rustfmt::skip]\n-fn good() {\n-    // Atomic\n-    { let foo = AtomicBool::new(false); };\n-    { let foo = AtomicIsize::new(0); };\n-    { let foo = AtomicI8::new(0); };\n-    { let foo = AtomicI16::new(0); };\n-    { let foo = AtomicI32::new(0); };\n-    { let foo = AtomicI64::new(0); };\n-    { let foo = AtomicUsize::new(0); };\n-    { let foo = AtomicU8::new(0); };\n-    { let foo = AtomicU16::new(0); };\n-    { let foo = AtomicU32::new(0); };\n-    { let foo = AtomicU64::new(0); };\n-    // Min\n-    { let foo = isize::min_value(); };\n-    { let foo = i8::min_value(); };\n-    { let foo = i16::min_value(); };\n-    { let foo = i32::min_value(); };\n-    { let foo = i64::min_value(); };\n-    { let foo = i128::min_value(); };\n-    { let foo = usize::min_value(); };\n-    { let foo = u8::min_value(); };\n-    { let foo = u16::min_value(); };\n-    { let foo = u32::min_value(); };\n-    { let foo = u64::min_value(); };\n-    { let foo = u128::min_value(); };\n-    // Max\n-    { let foo = isize::max_value(); };\n-    { let foo = i8::max_value(); };\n-    { let foo = i16::max_value(); };\n-    { let foo = i32::max_value(); };\n-    { let foo = i64::max_value(); };\n-    { let foo = i128::max_value(); };\n-    { let foo = usize::max_value(); };\n-    { let foo = u8::max_value(); };\n-    { let foo = u16::max_value(); };\n-    { let foo = u32::max_value(); };\n-    { let foo = u64::max_value(); };\n-    { let foo = u128::max_value(); };\n-\n-    let x = 42;\n-\n-    let _ = match x {\n-        std::i8::MIN => -1,\n-        1..=std::i8::MAX => 1,\n-        _ => 0\n-    };\n-\n-    let _ = if let std::i8::MIN = x {\n-        -1\n-    } else if let 1..=std::i8::MAX = x {\n-        1\n-    } else {\n-        0\n-    };\n-}\n-\n-fn main() {\n-    bad();\n-    good();\n-}"}, {"sha": "dae3422a35f002287bda2bc59e59245639175157", "filename": "tests/ui/replace_consts.rs", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/0254c421f90813e14abd9d982deb5f1b1dfb5b0c/tests%2Fui%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0254c421f90813e14abd9d982deb5f1b1dfb5b0c/tests%2Fui%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.rs?ref=0254c421f90813e14abd9d982deb5f1b1dfb5b0c", "patch": "@@ -1,99 +0,0 @@\n-// run-rustfix\n-#![feature(integer_atomics)]\n-#![allow(unused_variables, clippy::blacklisted_name)]\n-#![deny(clippy::replace_consts)]\n-\n-use std::sync::atomic::*;\n-\n-#[rustfmt::skip]\n-fn bad() {\n-    // Min\n-    { let foo = std::isize::MIN; };\n-    { let foo = std::i8::MIN; };\n-    { let foo = std::i16::MIN; };\n-    { let foo = std::i32::MIN; };\n-    { let foo = std::i64::MIN; };\n-    { let foo = std::i128::MIN; };\n-    { let foo = std::usize::MIN; };\n-    { let foo = std::u8::MIN; };\n-    { let foo = std::u16::MIN; };\n-    { let foo = std::u32::MIN; };\n-    { let foo = std::u64::MIN; };\n-    { let foo = std::u128::MIN; };\n-    // Max\n-    { let foo = std::isize::MAX; };\n-    { let foo = std::i8::MAX; };\n-    { let foo = std::i16::MAX; };\n-    { let foo = std::i32::MAX; };\n-    { let foo = std::i64::MAX; };\n-    { let foo = std::i128::MAX; };\n-    { let foo = std::usize::MAX; };\n-    { let foo = std::u8::MAX; };\n-    { let foo = std::u16::MAX; };\n-    { let foo = std::u32::MAX; };\n-    { let foo = std::u64::MAX; };\n-    { let foo = std::u128::MAX; };\n-}\n-\n-#[rustfmt::skip]\n-fn good() {\n-    // Atomic\n-    { let foo = AtomicBool::new(false); };\n-    { let foo = AtomicIsize::new(0); };\n-    { let foo = AtomicI8::new(0); };\n-    { let foo = AtomicI16::new(0); };\n-    { let foo = AtomicI32::new(0); };\n-    { let foo = AtomicI64::new(0); };\n-    { let foo = AtomicUsize::new(0); };\n-    { let foo = AtomicU8::new(0); };\n-    { let foo = AtomicU16::new(0); };\n-    { let foo = AtomicU32::new(0); };\n-    { let foo = AtomicU64::new(0); };\n-    // Min\n-    { let foo = isize::min_value(); };\n-    { let foo = i8::min_value(); };\n-    { let foo = i16::min_value(); };\n-    { let foo = i32::min_value(); };\n-    { let foo = i64::min_value(); };\n-    { let foo = i128::min_value(); };\n-    { let foo = usize::min_value(); };\n-    { let foo = u8::min_value(); };\n-    { let foo = u16::min_value(); };\n-    { let foo = u32::min_value(); };\n-    { let foo = u64::min_value(); };\n-    { let foo = u128::min_value(); };\n-    // Max\n-    { let foo = isize::max_value(); };\n-    { let foo = i8::max_value(); };\n-    { let foo = i16::max_value(); };\n-    { let foo = i32::max_value(); };\n-    { let foo = i64::max_value(); };\n-    { let foo = i128::max_value(); };\n-    { let foo = usize::max_value(); };\n-    { let foo = u8::max_value(); };\n-    { let foo = u16::max_value(); };\n-    { let foo = u32::max_value(); };\n-    { let foo = u64::max_value(); };\n-    { let foo = u128::max_value(); };\n-\n-    let x = 42;\n-\n-    let _ = match x {\n-        std::i8::MIN => -1,\n-        1..=std::i8::MAX => 1,\n-        _ => 0\n-    };\n-\n-    let _ = if let std::i8::MIN = x {\n-        -1\n-    } else if let 1..=std::i8::MAX = x {\n-        1\n-    } else {\n-        0\n-    };\n-}\n-\n-fn main() {\n-    bad();\n-    good();\n-}"}, {"sha": "458f63953efadd4c1df8e3ca4ce94f6d96704dc2", "filename": "tests/ui/replace_consts.stderr", "status": "removed", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/0254c421f90813e14abd9d982deb5f1b1dfb5b0c/tests%2Fui%2Freplace_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0254c421f90813e14abd9d982deb5f1b1dfb5b0c/tests%2Fui%2Freplace_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.stderr?ref=0254c421f90813e14abd9d982deb5f1b1dfb5b0c", "patch": "@@ -1,152 +0,0 @@\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:11:17\n-   |\n-LL |     { let foo = std::isize::MIN; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::min_value()`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/replace_consts.rs:4:9\n-   |\n-LL | #![deny(clippy::replace_consts)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:12:17\n-   |\n-LL |     { let foo = std::i8::MIN; };\n-   |                 ^^^^^^^^^^^^ help: try this: `i8::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:13:17\n-   |\n-LL |     { let foo = std::i16::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i16::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:14:17\n-   |\n-LL |     { let foo = std::i32::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i32::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:15:17\n-   |\n-LL |     { let foo = std::i64::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i64::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:16:17\n-   |\n-LL |     { let foo = std::i128::MIN; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `i128::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:17:17\n-   |\n-LL |     { let foo = std::usize::MIN; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `usize::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:18:17\n-   |\n-LL |     { let foo = std::u8::MIN; };\n-   |                 ^^^^^^^^^^^^ help: try this: `u8::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:19:17\n-   |\n-LL |     { let foo = std::u16::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u16::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:20:17\n-   |\n-LL |     { let foo = std::u32::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u32::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:21:17\n-   |\n-LL |     { let foo = std::u64::MIN; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u64::min_value()`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:22:17\n-   |\n-LL |     { let foo = std::u128::MIN; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `u128::min_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:24:17\n-   |\n-LL |     { let foo = std::isize::MAX; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:25:17\n-   |\n-LL |     { let foo = std::i8::MAX; };\n-   |                 ^^^^^^^^^^^^ help: try this: `i8::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:26:17\n-   |\n-LL |     { let foo = std::i16::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i16::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:27:17\n-   |\n-LL |     { let foo = std::i32::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i32::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:28:17\n-   |\n-LL |     { let foo = std::i64::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `i64::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:29:17\n-   |\n-LL |     { let foo = std::i128::MAX; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `i128::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:30:17\n-   |\n-LL |     { let foo = std::usize::MAX; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `usize::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:31:17\n-   |\n-LL |     { let foo = std::u8::MAX; };\n-   |                 ^^^^^^^^^^^^ help: try this: `u8::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:32:17\n-   |\n-LL |     { let foo = std::u16::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u16::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:33:17\n-   |\n-LL |     { let foo = std::u32::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u32::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:34:17\n-   |\n-LL |     { let foo = std::u64::MAX; };\n-   |                 ^^^^^^^^^^^^^ help: try this: `u64::max_value()`\n-\n-error: using `MAX`\n-  --> $DIR/replace_consts.rs:35:17\n-   |\n-LL |     { let foo = std::u128::MAX; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `u128::max_value()`\n-\n-error: aborting due to 24 previous errors\n-"}]}