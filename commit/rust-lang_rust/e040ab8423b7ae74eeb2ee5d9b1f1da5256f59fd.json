{"sha": "e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNDBhYjg0MjNiN2FlNzRlZWIyZWU1ZDliMWYxZGE1MjU2ZjU5ZmQ=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-17T18:22:11Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-31T01:04:19Z"}, "message": "Impl-ize interner.", "tree": {"sha": "68f9087d3330940d1b4ed468b13f282da2645119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f9087d3330940d1b4ed468b13f282da2645119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd", "html_url": "https://github.com/rust-lang/rust/commit/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7125971c652393af33fbc7121edfd4ecb7307eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7125971c652393af33fbc7121edfd4ecb7307eb", "html_url": "https://github.com/rust-lang/rust/commit/a7125971c652393af33fbc7121edfd4ecb7307eb"}], "stats": {"total": 102, "additions": 50, "deletions": 52}, "files": [{"sha": "c5a56cac1f23214cacc8a837bbfa676ca6c38d6d", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd", "patch": "@@ -9,7 +9,6 @@ import tuple::extensions;\n \n import ast::ident;\n import util::interner;\n-import interner::{intern, get};\n import print::pprust;\n import pprust::{item_to_str, ty_to_str};\n import ext::base::{mk_ctxt, ext_ctxt};"}, {"sha": "f70a1fae59d05e4aeb58978293ebba9f1f3e940e", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd", "patch": "@@ -1,4 +1,4 @@\n-import util::interner::{interner,intern};\n+import util::interner::interner;\n import diagnostic::span_handler;\n import codemap::span;\n import ext::tt::transcribe::{tt_reader,  new_tt_reader, dup_tt_reader,\n@@ -217,7 +217,7 @@ fn consume_any_line_comment(rdr: string_reader)\n                     bump(rdr);\n                 }\n                 ret some({\n-                    tok: token::DOC_COMMENT(intern(*rdr.interner, @acc)),\n+                    tok: token::DOC_COMMENT(rdr.interner.intern(@acc)),\n                     sp: ast_util::mk_sp(start_chpos, rdr.chpos)\n                 });\n             } else {\n@@ -262,7 +262,7 @@ fn consume_block_comment(rdr: string_reader)\n             bump(rdr);\n             bump(rdr);\n             ret some({\n-                tok: token::DOC_COMMENT(intern(*rdr.interner, @acc)),\n+                tok: token::DOC_COMMENT(rdr.interner.intern(@acc)),\n                 sp: ast_util::mk_sp(start_chpos, rdr.chpos)\n             });\n         }\n@@ -395,13 +395,11 @@ fn scan_number(c: char, rdr: string_reader) -> token::token {\n         if c == '3' && n == '2' {\n             bump(rdr);\n             bump(rdr);\n-            ret token::LIT_FLOAT(intern(*rdr.interner, @num_str),\n-                                 ast::ty_f32);\n+            ret token::LIT_FLOAT(rdr.interner.intern(@num_str), ast::ty_f32);\n         } else if c == '6' && n == '4' {\n             bump(rdr);\n             bump(rdr);\n-            ret token::LIT_FLOAT(intern(*rdr.interner, @num_str),\n-                                 ast::ty_f64);\n+            ret token::LIT_FLOAT(rdr.interner.intern(@num_str), ast::ty_f64);\n             /* FIXME (#2252): if this is out of range for either a\n             32-bit or 64-bit float, it won't be noticed till the\n             back-end.  */\n@@ -410,8 +408,7 @@ fn scan_number(c: char, rdr: string_reader) -> token::token {\n         }\n     }\n     if is_float {\n-        ret token::LIT_FLOAT(intern(*rdr.interner, @num_str),\n-                             ast::ty_f);\n+        ret token::LIT_FLOAT(rdr.interner.intern(@num_str), ast::ty_f);\n     } else {\n         if str::len(num_str) == 0u {\n             rdr.fatal(~\"no valid digits found for number\");\n@@ -459,7 +456,7 @@ fn next_token_inner(rdr: string_reader) -> token::token {\n         let is_mod_name = c == ':' && nextch(rdr) == ':';\n \n         // FIXME: perform NFKC normalization here. (Issue #2253)\n-        ret token::IDENT(intern(*rdr.interner, @accum_str), is_mod_name);\n+        ret token::IDENT(rdr.interner.intern(@accum_str), is_mod_name);\n     }\n     if is_dec_digit(c) {\n         ret scan_number(c, rdr);\n@@ -623,7 +620,7 @@ fn next_token_inner(rdr: string_reader) -> token::token {\n             }\n         }\n         bump(rdr);\n-        ret token::LIT_STR(intern(*rdr.interner, @accum_str));\n+        ret token::LIT_STR(rdr.interner.intern(@accum_str));\n       }\n       '-' {\n         if nextch(rdr) == '>' {"}, {"sha": "ac130024546d536c46ef9389d712efd1cf0a77e3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd", "patch": "@@ -224,7 +224,7 @@ class parser {\n         self.sess.span_diagnostic.span_warn(copy self.span, m)\n     }\n     pure fn get_str(i: token::str_num) -> @~str {\n-        interner::get(*self.reader.interner(), i)\n+        (*self.reader.interner()).get(i)\n     }\n     fn get_id() -> node_id { next_node_id(self.sess) }\n \n@@ -2121,8 +2121,7 @@ class parser {\n             }\n \n             if self.eat_keyword(~\"of\") {\n-                let for_atom = interner::intern(*self.reader.interner(),\n-                                                @~\"for\");\n+                let for_atom = (*self.reader.interner()).intern(@~\"for\");\n                 traits = self.parse_trait_ref_list\n                     (token::IDENT(for_atom, false));\n                 if traits.len() >= 1 && option::is_none(ident_old) {"}, {"sha": "eecb6cf405f6533be3300deed840a3f4b375448a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd", "patch": "@@ -165,24 +165,16 @@ fn to_str(in: interner<@~str>, t: token) -> ~str {\n       LIT_INT_UNSUFFIXED(i) {\n         int::to_str(i as int, 10u)\n       }\n-      LIT_FLOAT(s, t) {\n-        *interner::get(in, s) +\n-            ast_util::float_ty_to_str(t)\n-      }\n-      LIT_STR(s) {\n-        ~\"\\\"\"\n-            + str::escape_default(*interner::get(in, s))\n-            + ~\"\\\"\"\n-      }\n+      LIT_FLOAT(s, t) { *in.get(s) + ast_util::float_ty_to_str(t) }\n+      LIT_STR(s) { ~\"\\\"\" + str::escape_default( *in.get(s)) + ~\"\\\"\" }\n \n       /* Name components */\n-      IDENT(s, _) {\n-        *interner::get(in, s)\n-      }\n+      IDENT(s, _) { *in.get(s) }\n+\n       UNDERSCORE { ~\"_\" }\n \n       /* Other */\n-      DOC_COMMENT(s) { *interner::get(in, s) }\n+      DOC_COMMENT(s) { *in.get(s) }\n       EOF { ~\"<eof>\" }\n       INTERPOLATED(nt) {\n         ~\"an interpolated \" +"}, {"sha": "9adc3b05ac691f7278710786cb795638373e34c6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd", "patch": "@@ -9,6 +9,7 @@ import ast::{required, provided};\n import ast_util::operator_prec;\n import dvec::{dvec, extensions};\n import parse::classify::*;\n+import util::interner;\n \n // The ps is stored here to prevent recursive type.\n enum ann_node {\n@@ -27,6 +28,7 @@ fn no_ann() -> pp_ann {\n type ps =\n     @{s: pp::printer,\n       cm: option<codemap>,\n+      //in: interner::interner<@~str>,\n       comments: option<~[comments::cmnt]>,\n       literals: option<~[comments::lit]>,\n       mut cur_cmnt: uint,\n@@ -47,6 +49,7 @@ fn end(s: ps) {\n fn rust_printer(writer: io::writer) -> ps {\n     ret @{s: pp::mk_printer(writer, default_columns),\n           cm: none::<codemap>,\n+        //in: interner::mk::<@~str>(|x| str::hash(*x), |x,y| str::eq(*x, *y)),\n           comments: none::<~[comments::cmnt]>,\n           literals: none::<~[comments::lit]>,\n           mut cur_cmnt: 0u,\n@@ -63,14 +66,16 @@ const default_columns: uint = 78u;\n // Requires you to pass an input filename and reader so that\n // it can scan the input text for comments and literals to\n // copy forward.\n-fn print_crate(cm: codemap, span_diagnostic: diagnostic::span_handler,\n+fn print_crate(cm: codemap, //in: interner::interner<@~str>,\n+               span_diagnostic: diagnostic::span_handler,\n                crate: @ast::crate, filename: ~str, in: io::reader,\n                out: io::writer, ann: pp_ann, is_expanded: bool) {\n     let r = comments::gather_comments_and_literals(span_diagnostic,\n                                                    filename, in);\n     let s =\n         @{s: pp::mk_printer(out, default_columns),\n           cm: some(cm),\n+          //in: in,\n           comments: some(r.cmnts),\n           // If the code is post expansion, don't use the table of\n           // literals, since it doesn't correspond with the literals"}, {"sha": "f25604ab99167310261785e5a819ddd804248f06", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd", "patch": "@@ -5,36 +5,42 @@ import std::map;\n import std::map::{hashmap, hashfn, eqfn};\n import dvec::{dvec, extensions};\n \n-type interner<T: const> =\n+type hash_interner<T: const> =\n     {map: hashmap<T, uint>,\n      vect: dvec<T>,\n      hasher: hashfn<T>,\n      eqer: eqfn<T>};\n \n fn mk<T: const copy>(hasher: hashfn<T>, eqer: eqfn<T>) -> interner<T> {\n     let m = map::hashmap::<T, uint>(hasher, eqer);\n-    ret {map: m, vect: dvec(), hasher: hasher, eqer: eqer};\n+    let hi: hash_interner<T> =\n+        {map: m, vect: dvec(), hasher: hasher, eqer: eqer};\n+    ret hi as interner::<T>;\n }\n \n-fn intern<T: const copy>(itr: interner<T>, val: T) -> uint {\n-    alt itr.map.find(val) {\n-      some(idx) { ret idx; }\n-      none {\n-        let new_idx = itr.vect.len();\n-        itr.map.insert(val, new_idx);\n-        itr.vect.push(val);\n-        ret new_idx;\n-      }\n-    }\n+/* when traits can extend traits, we should extend index<uint,T> to get [] */\n+iface interner<T: const copy> {\n+    fn intern(T) -> uint;\n+    pure fn get(uint) -> T;\n+    fn len() -> uint;\n }\n \n-// |get| isn't \"pure\" in the traditional sense, because it can go from\n-// failing to returning a value as items are interned. But for typestate,\n-// where we first check a pred and then rely on it, ceasing to fail is ok.\n-pure fn get<T: const copy>(itr: interner<T>, idx: uint) -> T {\n-    unchecked {\n-        itr.vect.get_elt(idx)\n+impl <T: const copy> of interner<T> for hash_interner<T> {\n+    fn intern(val: T) -> uint {\n+        alt self.map.find(val) {\n+          some(idx) { ret idx; }\n+          none {\n+            let new_idx = self.vect.len();\n+            self.map.insert(val, new_idx);\n+            self.vect.push(val);\n+            ret new_idx;\n+          }\n+        }\n     }\n-}\n \n-fn len<T: const>(itr: interner<T>) -> uint { ret itr.vect.len(); }\n+    // this isn't \"pure\" in the traditional sense, because it can go from\n+    // failing to returning a value as items are interned. But for typestate,\n+    // where we first check a pred and then rely on it, ceasing to fail is ok.\n+    pure fn get(idx: uint) -> T { self.vect.get_elt(idx) }\n+    fn len() -> uint { ret self.vect.len(); }\n+}\n\\ No newline at end of file"}, {"sha": "152e6bfe0c3d8e1b054c8808d9f83b261a4810a9", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=e040ab8423b7ae74eeb2ee5d9b1f1da5256f59fd", "patch": "@@ -335,7 +335,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> ~[u8] {\n         else { ~[shape_struct] }, sub = ~[];\n         do option::iter(m_dtor_did) |dtor_did| {\n           let ri = @{did: dtor_did, parent_id: some(did), tps: tps};\n-          let id = interner::intern(ccx.shape_cx.resources, ri);\n+          let id = ccx.shape_cx.resources.intern(ri);\n           add_u16(s, id as u16);\n         };\n         for ty::class_items_as_mutable_fields(ccx.tcx, did, substs).each |f| {\n@@ -569,9 +569,9 @@ fn gen_enum_shapes(ccx: @crate_ctxt) -> ValueRef {\n \n fn gen_resource_shapes(ccx: @crate_ctxt) -> ValueRef {\n     let mut dtors = ~[];\n-    let len = interner::len(ccx.shape_cx.resources);\n+    let len = ccx.shape_cx.resources.len();\n     for uint::range(0u, len) |i| {\n-        let ri = interner::get(ccx.shape_cx.resources, i);\n+        let ri = ccx.shape_cx.resources.get(i);\n         for ri.tps.each() |s| { assert !ty::type_has_params(s); }\n         do option::iter(ri.parent_id) |id| {\n             dtors += ~[trans::base::get_res_dtor(ccx, ri.did, id, ri.tps)];"}]}