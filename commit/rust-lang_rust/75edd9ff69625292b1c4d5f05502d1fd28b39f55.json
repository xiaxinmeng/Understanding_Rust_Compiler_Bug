{"sha": "75edd9ff69625292b1c4d5f05502d1fd28b39f55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZWRkOWZmNjk2MjUyOTJiMWM0ZDVmMDU1MDJkMWZkMjhiMzlmNTU=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-01-25T21:47:56Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-02-04T01:48:17Z"}, "message": "Move useful ast building functions into their own module.", "tree": {"sha": "ce39641a83407c98b2d355e7759b629778083be2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce39641a83407c98b2d355e7759b629778083be2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75edd9ff69625292b1c4d5f05502d1fd28b39f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75edd9ff69625292b1c4d5f05502d1fd28b39f55", "html_url": "https://github.com/rust-lang/rust/commit/75edd9ff69625292b1c4d5f05502d1fd28b39f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75edd9ff69625292b1c4d5f05502d1fd28b39f55/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dcb674525c5169a8649475699e60e0cbaed8c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dcb674525c5169a8649475699e60e0cbaed8c0a", "html_url": "https://github.com/rust-lang/rust/commit/9dcb674525c5169a8649475699e60e0cbaed8c0a"}], "stats": {"total": 89, "additions": 50, "deletions": 39}, "files": [{"sha": "40e66037f3a454270abd33fe07c8b6ab6f5f3f80", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75edd9ff69625292b1c4d5f05502d1fd28b39f55/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/75edd9ff69625292b1c4d5f05502d1fd28b39f55/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=75edd9ff69625292b1c4d5f05502d1fd28b39f55", "patch": "@@ -74,6 +74,7 @@ mod syntax {\n     mod ext {\n         mod base;\n         mod expand;\n+        mod build;\n \n         mod fmt;\n         mod env;"}, {"sha": "821e499c4a82afd76353bccfea4659bce5652167", "filename": "src/comp/syntax/ext/build.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/75edd9ff69625292b1c4d5f05502d1fd28b39f55/src%2Fcomp%2Fsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75edd9ff69625292b1c4d5f05502d1fd28b39f55/src%2Fcomp%2Fsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbuild.rs?ref=75edd9ff69625292b1c4d5f05502d1fd28b39f55", "patch": "@@ -0,0 +1,47 @@\n+import core::{vec, str, option};\n+import option::{some};\n+import codemap::span;\n+import syntax::ext::base::ext_ctxt;\n+\n+// NOTE: Moved from fmt.rs which had this fixme:\n+// FIXME: Cleanup the naming of these functions\n+\n+fn make_new_lit(cx: ext_ctxt, sp: span, lit: ast::lit_) -> @ast::expr {\n+    let sp_lit = @{node: lit, span: sp};\n+    ret @{id: cx.next_id(), node: ast::expr_lit(sp_lit), span: sp};\n+}\n+fn make_new_str(cx: ext_ctxt, sp: span, s: str) -> @ast::expr {\n+    let lit = ast::lit_str(s);\n+    ret make_new_lit(cx, sp, lit);\n+}\n+fn make_new_int(cx: ext_ctxt, sp: span, i: int) -> @ast::expr {\n+    let lit = ast::lit_int(i as i64, ast::ty_i);\n+    ret make_new_lit(cx, sp, lit);\n+}\n+fn make_new_uint(cx: ext_ctxt, sp: span, u: uint) -> @ast::expr {\n+    let lit = ast::lit_uint(u as u64, ast::ty_u);\n+    ret make_new_lit(cx, sp, lit);\n+}\n+fn make_add_expr(cx: ext_ctxt, sp: span, lhs: @ast::expr, rhs: @ast::expr)\n+   -> @ast::expr {\n+    let binexpr = ast::expr_binary(ast::add, lhs, rhs);\n+    ret @{id: cx.next_id(), node: binexpr, span: sp};\n+}\n+fn make_path_expr(cx: ext_ctxt, sp: span, idents: [ast::ident]) ->\n+   @ast::expr {\n+    let path = {global: false, idents: idents, types: []};\n+    let sp_path = @{node: path, span: sp};\n+    let pathexpr = ast::expr_path(sp_path);\n+    ret @{id: cx.next_id(), node: pathexpr, span: sp};\n+}\n+fn make_vec_expr(cx: ext_ctxt, sp: span, exprs: [@ast::expr]) ->\n+   @ast::expr {\n+    let vecexpr = ast::expr_vec(exprs, ast::imm);\n+    ret @{id: cx.next_id(), node: vecexpr, span: sp};\n+}\n+fn make_call(cx: ext_ctxt, sp: span, fn_path: [ast::ident],\n+             args: [@ast::expr]) -> @ast::expr {\n+    let pathexpr = make_path_expr(cx, sp, fn_path);\n+    let callexpr = ast::expr_call(pathexpr, args, false);\n+    ret @{id: cx.next_id(), node: callexpr, span: sp};\n+}"}, {"sha": "e9e0e2f194aacd2c1a0befa4deb74e3f390f37cb", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/75edd9ff69625292b1c4d5f05502d1fd28b39f55/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75edd9ff69625292b1c4d5f05502d1fd28b39f55/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=75edd9ff69625292b1c4d5f05502d1fd28b39f55", "patch": "@@ -10,6 +10,7 @@ import option::{some};\n import extfmt::ct::*;\n import base::*;\n import codemap::span;\n+import syntax::ext::build::*;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: @ast::expr,\n@@ -41,47 +42,9 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: @ast::expr,\n // FIXME: A lot of these functions for producing expressions can probably\n // be factored out in common with other code that builds expressions.\n // FIXME: Cleanup the naming of these functions\n+// NOTE: Moved many of the common ones to build.rs --kevina\n fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n    -> @ast::expr {\n-    fn make_new_lit(cx: ext_ctxt, sp: span, lit: ast::lit_) -> @ast::expr {\n-        let sp_lit = @{node: lit, span: sp};\n-        ret @{id: cx.next_id(), node: ast::expr_lit(sp_lit), span: sp};\n-    }\n-    fn make_new_str(cx: ext_ctxt, sp: span, s: str) -> @ast::expr {\n-        let lit = ast::lit_str(s);\n-        ret make_new_lit(cx, sp, lit);\n-    }\n-    fn make_new_int(cx: ext_ctxt, sp: span, i: int) -> @ast::expr {\n-        let lit = ast::lit_int(i as i64, ast::ty_i);\n-        ret make_new_lit(cx, sp, lit);\n-    }\n-    fn make_new_uint(cx: ext_ctxt, sp: span, u: uint) -> @ast::expr {\n-        let lit = ast::lit_uint(u as u64, ast::ty_u);\n-        ret make_new_lit(cx, sp, lit);\n-    }\n-    fn make_add_expr(cx: ext_ctxt, sp: span, lhs: @ast::expr, rhs: @ast::expr)\n-       -> @ast::expr {\n-        let binexpr = ast::expr_binary(ast::add, lhs, rhs);\n-        ret @{id: cx.next_id(), node: binexpr, span: sp};\n-    }\n-    fn make_path_expr(cx: ext_ctxt, sp: span, idents: [ast::ident]) ->\n-       @ast::expr {\n-        let path = {global: false, idents: idents, types: []};\n-        let sp_path = @{node: path, span: sp};\n-        let pathexpr = ast::expr_path(sp_path);\n-        ret @{id: cx.next_id(), node: pathexpr, span: sp};\n-    }\n-    fn make_vec_expr(cx: ext_ctxt, sp: span, exprs: [@ast::expr]) ->\n-       @ast::expr {\n-        let vecexpr = ast::expr_vec(exprs, ast::imm);\n-        ret @{id: cx.next_id(), node: vecexpr, span: sp};\n-    }\n-    fn make_call(cx: ext_ctxt, sp: span, fn_path: [ast::ident],\n-                 args: [@ast::expr]) -> @ast::expr {\n-        let pathexpr = make_path_expr(cx, sp, fn_path);\n-        let callexpr = ast::expr_call(pathexpr, args, false);\n-        ret @{id: cx.next_id(), node: callexpr, span: sp};\n-    }\n     fn make_rec_expr(cx: ext_ctxt, sp: span,\n                      fields: [{ident: ast::ident, ex: @ast::expr}]) ->\n        @ast::expr {"}]}