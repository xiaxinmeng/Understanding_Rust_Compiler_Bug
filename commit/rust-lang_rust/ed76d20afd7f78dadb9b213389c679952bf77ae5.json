{"sha": "ed76d20afd7f78dadb9b213389c679952bf77ae5", "node_id": "C_kwDOAAsO6NoAKGVkNzZkMjBhZmQ3Zjc4ZGFkYjliMjEzMzg5YzY3OTk1MmJmNzdhZTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-21T14:37:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-21T14:37:10Z"}, "message": "Auto merge of #2409 - RalfJung:cargo-miri-rustc, r=RalfJung\n\ncargo-miri: set RUSTC to us\n\nWorks around https://github.com/rust-lang/cargo/issues/10885.", "tree": {"sha": "7b080e2ba14b0e8c9a8f06ee6fffe3c4bb570ef3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b080e2ba14b0e8c9a8f06ee6fffe3c4bb570ef3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed76d20afd7f78dadb9b213389c679952bf77ae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed76d20afd7f78dadb9b213389c679952bf77ae5", "html_url": "https://github.com/rust-lang/rust/commit/ed76d20afd7f78dadb9b213389c679952bf77ae5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed76d20afd7f78dadb9b213389c679952bf77ae5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f973bdf2d870db29ef746a381ebade25393ad03", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f973bdf2d870db29ef746a381ebade25393ad03", "html_url": "https://github.com/rust-lang/rust/commit/0f973bdf2d870db29ef746a381ebade25393ad03"}, {"sha": "bb52965b73bb5885591fdd5b596a8d8f36d75f4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb52965b73bb5885591fdd5b596a8d8f36d75f4e", "html_url": "https://github.com/rust-lang/rust/commit/bb52965b73bb5885591fdd5b596a8d8f36d75f4e"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "48beb7c935d67a0746e67a0f120b4e3c8cc0cfd6", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ed76d20afd7f78dadb9b213389c679952bf77ae5/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed76d20afd7f78dadb9b213389c679952bf77ae5/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=ed76d20afd7f78dadb9b213389c679952bf77ae5", "patch": "@@ -212,7 +212,11 @@ fn find_miri() -> PathBuf {\n         return path.into();\n     }\n     let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n-    path.set_file_name(\"miri\");\n+    if cfg!(windows) {\n+        path.set_file_name(\"miri.exe\");\n+    } else {\n+        path.set_file_name(\"miri\");\n+    }\n     path\n }\n \n@@ -661,14 +665,20 @@ fn phase_cargo_miri(mut args: env::Args) {\n         );\n     }\n     cmd.env(\"RUSTC_WRAPPER\", &cargo_miri_path);\n-    // Having both `RUSTC_WRAPPER` and `RUSTC` set does some odd things, so let's avoid that.\n-    // See <https://github.com/rust-lang/miri/issues/2238>.\n+    // We are going to invoke `MIRI` for everything, not `RUSTC`.\n     if env::var_os(\"RUSTC\").is_some() && env::var_os(\"MIRI\").is_none() {\n         println!(\n             \"WARNING: Ignoring `RUSTC` environment variable; set `MIRI` if you want to control the binary used as the driver.\"\n         );\n     }\n-    cmd.env_remove(\"RUSTC\");\n+    // We'd prefer to just clear this env var, but cargo does not always honor `RUSTC_WRAPPER`\n+    // (https://github.com/rust-lang/cargo/issues/10885). There is no good way to single out these invocations;\n+    // some build scripts use the RUSTC env var as well. So we set it directly to the `miri` driver and\n+    // hope that all they do is ask for the version number -- things could quickly go downhill from here.\n+    // In `main`, we need the value of `RUSTC` to distinguish RUSTC_WRAPPER invocations from rustdoc\n+    // or TARGET_RUNNER invocations, so we canonicalize it here to make it exceedingly unlikely that\n+    // there would be a collision.\n+    cmd.env(\"RUSTC\", &fs::canonicalize(find_miri()).unwrap());\n \n     let runner_env_name =\n         |triple: &str| format!(\"CARGO_TARGET_{}_RUNNER\", triple.to_uppercase().replace('-', \"_\"));\n@@ -814,10 +824,10 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n \n             if verbose > 0 {\n                 eprintln!(\n-                    \"[cargo-miri rustc] captured input:\\n{}\",\n+                    \"[cargo-miri rustc inside rustdoc] captured input:\\n{}\",\n                     std::str::from_utf8(&env.stdin).unwrap()\n                 );\n-                eprintln!(\"[cargo-miri rustc] {:?}\", cmd);\n+                eprintln!(\"[cargo-miri rustc inside rustdoc] going to run:\\n{:?}\", cmd);\n             }\n \n             exec_with_pipe(cmd, &env.stdin);\n@@ -900,7 +910,10 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n \n     // Run it.\n     if verbose > 0 {\n-        eprint!(\"[cargo-miri rustc] \");\n+        eprintln!(\n+            \"[cargo-miri rustc] target_crate={target_crate} runnable_crate={runnable_crate} print={print}\"\n+        );\n+        eprintln!(\"[cargo-miri rustc] going to run:\");\n         if verbose > 1 {\n             for (key, value) in env_vars_from_cmd(&cmd) {\n                 eprintln!(\"{key}={value:?} \\\\\");\n@@ -1173,8 +1186,14 @@ fn main() {\n \n     match args.next().as_deref() {\n         Some(\"miri\") => phase_cargo_miri(args),\n-        Some(\"rustc\") => phase_rustc(args, RustcPhase::Build),\n         Some(arg) => {\n+            // If the first arg is equal to the RUSTC variable (which should be set at this point),\n+            // then we need to behave as rustc. This is the somewhat counter-intuitive behavior of\n+            // having both RUSTC and RUSTC_WRAPPER set (see\n+            // https://github.com/rust-lang/cargo/issues/10886).\n+            if arg == env::var_os(\"RUSTC\").unwrap() {\n+                return phase_rustc(args, RustcPhase::Build);\n+            }\n             // We have to distinguish the \"runner\" and \"rustdoc\" cases.\n             // As runner, the first argument is the binary (a file that should exist, with an absolute path);\n             // as rustdoc, the first argument is a flag (`--something`)."}, {"sha": "516c730e3fbdbff97f44a02a6f40e4e6d40a194e", "filename": "src/bin/miri.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed76d20afd7f78dadb9b213389c679952bf77ae5/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed76d20afd7f78dadb9b213389c679952bf77ae5/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=ed76d20afd7f78dadb9b213389c679952bf77ae5", "patch": "@@ -220,16 +220,17 @@ fn compile_time_sysroot() -> Option<String> {\n     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n     Some(match (home, toolchain) {\n         (Some(home), Some(toolchain)) => {\n-            // Check that at runtime, we are still in this toolchain.\n-            let toolchain_runtime =\n-                env::var_os(\"RUSTUP_TOOLCHAIN\").or_else(|| env::var_os(\"MULTIRUST_TOOLCHAIN\"));\n-            if !matches!(toolchain_runtime, Some(r) if r == toolchain) {\n-                show_error(format!(\n-                    \"This Miri got built with local toolchain `{toolchain}`, but now is being run under a different toolchain. \\n\\\n+            // Check that at runtime, we are still in this toolchain (if there is any toolchain).\n+            if let Some(toolchain_runtime) =\n+                env::var_os(\"RUSTUP_TOOLCHAIN\").or_else(|| env::var_os(\"MULTIRUST_TOOLCHAIN\"))\n+            {\n+                if toolchain_runtime != toolchain {\n+                    show_error(format!(\n+                        \"This Miri got built with local toolchain `{toolchain}`, but now is being run under a different toolchain. \\n\\\n                     Make sure to run Miri in the toolchain it got built with, e.g. via `cargo +{toolchain} miri`.\"\n-                ));\n+                    ));\n+                }\n             }\n-\n             format!(\"{}/toolchains/{}\", home, toolchain)\n         }\n         _ => option_env!(\"RUST_SYSROOT\")"}]}