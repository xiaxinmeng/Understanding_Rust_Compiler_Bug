{"sha": "67d762d896c8748009d1843ebf9e2e0760ed33a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZDc2MmQ4OTZjODc0ODAwOWQxODQzZWJmOWUyZTA3NjBlZDMzYTA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-09T08:04:24Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-10T11:20:26Z"}, "message": "Refactor suggestion diagnostic API to allow for multiple suggestions", "tree": {"sha": "5a7ccecb7b413d1a17cb2ed2933948325b32d8f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a7ccecb7b413d1a17cb2ed2933948325b32d8f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d762d896c8748009d1843ebf9e2e0760ed33a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlkS93oACgkQpp+NIls6\n19kDaxAAoJB+dCEZSTiXyCA3LLW/2GXioOhLxIsy+74Pu+hpXuYKMvHPXmhZMi0Z\nK/E+Zx84arDG4l/w4d1NfpJ9IHKckH9uFdHfWeCGcdEuz7yL0Trtb1Gy2meA+UjS\n5vGohAcGkR3cQEkEPHVEDqpTCIV5BDMOYdcUwVp6sOzfc7Z6Reo9a3oGEhuyF2SI\nihoxlHgyujzBZz3CHzUY/ovArx05ompKJEgVbSCuXCXUAFQTAZ7YGB+mb8sdhTcN\nGCIbp8okWITZEdEYUKZwq6jeu54hQ7PVOP9CscydqX5RgBcBUHepMd27aTiQwrqQ\nJfH4pWxIxAiK1H/uoGc0FPtkMFVGXwVyyuWbA02mMv0R7iRxM68uvUGdZK9Wzc6U\nZ0m2Wrw4m6uGlmuw7W5nPKq33QbB+4XmbfCo2e4m98yI4b3BlakLDFiK3hg4vqTd\n3+z5drX/alIeQArtlP49M5WRYbMgqLDdjVKlKsALargHI13k2nJWI26u84BAzn4J\nAwEUGBTdw8GOBwMNRD9x6wHIe3gAiIEd6N2mevrHLeGaL6A9TpU3oQ3nqg2WAptD\nkuyjPgmnk66vMCZ3WSbJ6LNhn1oZCiyOFu+JhZuMkhHzsLb8C05NPnb6O0alGqom\n7Ft3UW5PFLepRnZABYwKuMcfKuH4j6tEXGUgdOA80z7SzI0eMd4=\n=82Bh\n-----END PGP SIGNATURE-----", "payload": "tree 5a7ccecb7b413d1a17cb2ed2933948325b32d8f6\nparent 58b33ad70cdd11f9ce7b5874c6effab9627e51aa\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1494317064 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1494415226 +0200\n\nRefactor suggestion diagnostic API to allow for multiple suggestions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d762d896c8748009d1843ebf9e2e0760ed33a0", "html_url": "https://github.com/rust-lang/rust/commit/67d762d896c8748009d1843ebf9e2e0760ed33a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d762d896c8748009d1843ebf9e2e0760ed33a0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58b33ad70cdd11f9ce7b5874c6effab9627e51aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/58b33ad70cdd11f9ce7b5874c6effab9627e51aa", "html_url": "https://github.com/rust-lang/rust/commit/58b33ad70cdd11f9ce7b5874c6effab9627e51aa"}], "stats": {"total": 251, "additions": 149, "deletions": 102}, "files": [{"sha": "e129e313626dc00cf1f2196a8612f370651a592b", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/67d762d896c8748009d1843ebf9e2e0760ed33a0/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d762d896c8748009d1843ebf9e2e0760ed33a0/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=67d762d896c8748009d1843ebf9e2e0760ed33a0", "patch": "@@ -23,7 +23,7 @@ pub struct Diagnostic {\n     pub code: Option<String>,\n     pub span: MultiSpan,\n     pub children: Vec<SubDiagnostic>,\n-    pub suggestion: Option<CodeSuggestion>,\n+    pub suggestions: Vec<CodeSuggestion>,\n }\n \n /// For example a note attached to an error.\n@@ -87,7 +87,7 @@ impl Diagnostic {\n             code: code,\n             span: MultiSpan::new(),\n             children: vec![],\n-            suggestion: None,\n+            suggestions: vec![],\n         }\n     }\n \n@@ -204,10 +204,16 @@ impl Diagnostic {\n     ///\n     /// See `diagnostic::CodeSuggestion` for more information.\n     pub fn span_suggestion(&mut self, sp: Span, msg: &str, suggestion: String) -> &mut Self {\n-        assert!(self.suggestion.is_none());\n-        self.suggestion = Some(CodeSuggestion {\n-            msp: sp.into(),\n-            substitutes: vec![suggestion],\n+        self.suggestions.push(CodeSuggestion {\n+            substitutes: vec![(sp, vec![suggestion])],\n+            msg: msg.to_owned(),\n+        });\n+        self\n+    }\n+\n+    pub fn span_suggestions(&mut self, sp: Span, msg: &str, suggestions: Vec<String>) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutes: vec![(sp, suggestions)],\n             msg: msg.to_owned(),\n         });\n         self"}, {"sha": "d03a4acb9fc580389224d8985ff449ca5f235467", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67d762d896c8748009d1843ebf9e2e0760ed33a0/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d762d896c8748009d1843ebf9e2e0760ed33a0/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=67d762d896c8748009d1843ebf9e2e0760ed33a0", "patch": "@@ -148,6 +148,11 @@ impl<'a> DiagnosticBuilder<'a> {\n                                     msg: &str,\n                                     suggestion: String)\n                                     -> &mut Self);\n+    forward!(pub fn span_suggestions(&mut self,\n+                                     sp: Span,\n+                                     msg: &str,\n+                                     suggestions: Vec<String>)\n+                                     -> &mut Self);\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: String) -> &mut Self);\n "}, {"sha": "564c472305c3afe1f2ade910c7b5900c36f4221f", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 45, "deletions": 30, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/67d762d896c8748009d1843ebf9e2e0760ed33a0/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d762d896c8748009d1843ebf9e2e0760ed33a0/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=67d762d896c8748009d1843ebf9e2e0760ed33a0", "patch": "@@ -35,22 +35,37 @@ impl Emitter for EmitterWriter {\n         let mut primary_span = db.span.clone();\n         let mut children = db.children.clone();\n \n-        if let Some(sugg) = db.suggestion.clone() {\n-            assert_eq!(sugg.msp.primary_spans().len(), sugg.substitutes.len());\n+        if db.suggestions.len() == 1 {\n+            let sugg = &db.suggestions[0];\n             // don't display multispans as labels\n             if sugg.substitutes.len() == 1 &&\n+               // don't display multi-suggestions as labels\n+               sugg.substitutes[0].1.len() == 1 &&\n                // don't display long messages as labels\n                sugg.msg.split_whitespace().count() < 10 &&\n                // don't display multiline suggestions as labels\n-               sugg.substitutes[0].find('\\n').is_none() {\n-                let msg = format!(\"help: {} `{}`\", sugg.msg, sugg.substitutes[0]);\n-                primary_span.push_span_label(sugg.msp.primary_spans()[0], msg);\n+               sugg.substitutes[0].1[0].find('\\n').is_none() {\n+                let msg = format!(\"help: {} `{}`\", sugg.msg, sugg.substitutes[0].1[0]);\n+                primary_span.push_span_label(sugg.substitutes[0].0, msg);\n             } else {\n                 children.push(SubDiagnostic {\n                     level: Level::Help,\n                     message: Vec::new(),\n                     span: MultiSpan::new(),\n-                    render_span: Some(Suggestion(sugg)),\n+                    render_span: Some(Suggestion(sugg.clone())),\n+                });\n+            }\n+        } else {\n+            // if there are multiple suggestions, print them all in full\n+            // to be consistent. We could try to figure out if we can\n+            // make one (or the first one) inline, but that would give\n+            // undue importance to a semi-random suggestion\n+            for sugg in &db.suggestions {\n+                children.push(SubDiagnostic {\n+                    level: Level::Help,\n+                    message: Vec::new(),\n+                    span: MultiSpan::new(),\n+                    render_span: Some(Suggestion(sugg.clone())),\n                 });\n             }\n         }\n@@ -1054,38 +1069,38 @@ impl EmitterWriter {\n                                -> io::Result<()> {\n         use std::borrow::Borrow;\n \n-        let primary_span = suggestion.msp.primary_span().unwrap();\n+        let primary_span = suggestion.substitutes[0].0;\n         if let Some(ref cm) = self.cm {\n             let mut buffer = StyledBuffer::new();\n \n-            buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n-            buffer.append(0, \": \", Style::HeaderMsg);\n-            self.msg_to_buffer(&mut buffer,\n-                               &[(suggestion.msg.to_owned(), Style::NoStyle)],\n-                               max_line_num_len,\n-                               \"suggestion\",\n-                               Some(Style::HeaderMsg));\n-\n             let lines = cm.span_to_lines(primary_span).unwrap();\n \n             assert!(!lines.lines.is_empty());\n \n-            let complete = suggestion.splice_lines(cm.borrow());\n-\n-            // print the suggestion without any line numbers, but leave\n-            // space for them. This helps with lining up with previous\n-            // snippets from the actual error being reported.\n-            let mut lines = complete.lines();\n-            let mut row_num = 1;\n-            for line in lines.by_ref().take(MAX_HIGHLIGHT_LINES) {\n-                draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n-                buffer.append(row_num, line, Style::NoStyle);\n-                row_num += 1;\n-            }\n+            for complete in suggestion.splice_lines(cm.borrow()) {\n+                buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n+                buffer.append(0, \": \", Style::HeaderMsg);\n+                self.msg_to_buffer(&mut buffer,\n+                                &[(suggestion.msg.to_owned(), Style::NoStyle)],\n+                                max_line_num_len,\n+                                \"suggestion\",\n+                                Some(Style::HeaderMsg));\n+\n+                // print the suggestion without any line numbers, but leave\n+                // space for them. This helps with lining up with previous\n+                // snippets from the actual error being reported.\n+                let mut lines = complete.lines();\n+                let mut row_num = 1;\n+                for line in lines.by_ref().take(MAX_HIGHLIGHT_LINES) {\n+                    draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n+                    buffer.append(row_num, line, Style::NoStyle);\n+                    row_num += 1;\n+                }\n \n-            // if we elided some lines, add an ellipsis\n-            if let Some(_) = lines.next() {\n-                buffer.append(row_num, \"...\", Style::NoStyle);\n+                // if we elided some lines, add an ellipsis\n+                if let Some(_) = lines.next() {\n+                    buffer.append(row_num, \"...\", Style::NoStyle);\n+                }\n             }\n             emit_to_destination(&buffer.render(), level, &mut self.dst)?;\n         }"}, {"sha": "8e378935094ed71923c62cd213f753d6bf50412e", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 54, "deletions": 31, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/67d762d896c8748009d1843ebf9e2e0760ed33a0/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d762d896c8748009d1843ebf9e2e0760ed33a0/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=67d762d896c8748009d1843ebf9e2e0760ed33a0", "patch": "@@ -65,8 +65,25 @@ pub enum RenderSpan {\n \n #[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub struct CodeSuggestion {\n-    pub msp: MultiSpan,\n-    pub substitutes: Vec<String>,\n+    /// Each substitute can have multiple variants due to multiple\n+    /// applicable suggestions\n+    ///\n+    /// `foo.bar` might be replaced with `a.b` or `x.y` by replacing\n+    /// `foo` and `bar` on their own:\n+    ///\n+    /// ```\n+    /// vec![\n+    ///     (0..3, vec![\"a\", \"x\"]),\n+    ///     (4..7, vec![\"b\", \"y\"]),\n+    /// ]\n+    /// ```\n+    ///\n+    /// or by replacing the entire span:\n+    ///\n+    /// ```\n+    /// vec![(0..7, vec![\"a.b\", \"x.y\"])]\n+    /// ```\n+    pub substitutes: Vec<(Span, Vec<String>)>,\n     pub msg: String,\n }\n \n@@ -79,8 +96,8 @@ pub trait CodeMapper {\n }\n \n impl CodeSuggestion {\n-    /// Returns the assembled code suggestion.\n-    pub fn splice_lines(&self, cm: &CodeMapper) -> String {\n+    /// Returns the assembled code suggestions.\n+    pub fn splice_lines(&self, cm: &CodeMapper) -> Vec<String> {\n         use syntax_pos::{CharPos, Loc, Pos};\n \n         fn push_trailing(buf: &mut String,\n@@ -102,20 +119,22 @@ impl CodeSuggestion {\n             }\n         }\n \n-        let mut primary_spans = self.msp.primary_spans().to_owned();\n-\n-        assert_eq!(primary_spans.len(), self.substitutes.len());\n-        if primary_spans.is_empty() {\n-            return format!(\"\");\n+        if self.substitutes.is_empty() {\n+            return vec![String::new()];\n         }\n \n+        let mut primary_spans: Vec<_> = self.substitutes\n+            .iter()\n+            .map(|&(sp, ref sub)| (sp, sub))\n+            .collect();\n+\n         // Assumption: all spans are in the same file, and all spans\n         // are disjoint. Sort in ascending order.\n-        primary_spans.sort_by_key(|sp| sp.lo);\n+        primary_spans.sort_by_key(|sp| sp.0.lo);\n \n         // Find the bounding span.\n-        let lo = primary_spans.iter().map(|sp| sp.lo).min().unwrap();\n-        let hi = primary_spans.iter().map(|sp| sp.hi).min().unwrap();\n+        let lo = primary_spans.iter().map(|sp| sp.0.lo).min().unwrap();\n+        let hi = primary_spans.iter().map(|sp| sp.0.hi).min().unwrap();\n         let bounding_span = Span {\n             lo: lo,\n             hi: hi,\n@@ -138,33 +157,37 @@ impl CodeSuggestion {\n         prev_hi.col = CharPos::from_usize(0);\n \n         let mut prev_line = fm.get_line(lines.lines[0].line_index);\n-        let mut buf = String::new();\n+        let mut bufs = vec![String::new(); self.substitutes[0].1.len()];\n \n-        for (sp, substitute) in primary_spans.iter().zip(self.substitutes.iter()) {\n+        for (sp, substitutes) in primary_spans {\n             let cur_lo = cm.lookup_char_pos(sp.lo);\n-            if prev_hi.line == cur_lo.line {\n-                push_trailing(&mut buf, prev_line, &prev_hi, Some(&cur_lo));\n-            } else {\n-                push_trailing(&mut buf, prev_line, &prev_hi, None);\n-                // push lines between the previous and current span (if any)\n-                for idx in prev_hi.line..(cur_lo.line - 1) {\n-                    if let Some(line) = fm.get_line(idx) {\n-                        buf.push_str(line);\n-                        buf.push('\\n');\n+            for (buf, substitute) in bufs.iter_mut().zip(substitutes) {\n+                if prev_hi.line == cur_lo.line {\n+                    push_trailing(buf, prev_line, &prev_hi, Some(&cur_lo));\n+                } else {\n+                    push_trailing(buf, prev_line, &prev_hi, None);\n+                    // push lines between the previous and current span (if any)\n+                    for idx in prev_hi.line..(cur_lo.line - 1) {\n+                        if let Some(line) = fm.get_line(idx) {\n+                            buf.push_str(line);\n+                            buf.push('\\n');\n+                        }\n+                    }\n+                    if let Some(cur_line) = fm.get_line(cur_lo.line - 1) {\n+                        buf.push_str(&cur_line[..cur_lo.col.to_usize()]);\n                     }\n                 }\n-                if let Some(cur_line) = fm.get_line(cur_lo.line - 1) {\n-                    buf.push_str(&cur_line[..cur_lo.col.to_usize()]);\n-                }\n+                buf.push_str(substitute);\n             }\n-            buf.push_str(substitute);\n             prev_hi = cm.lookup_char_pos(sp.hi);\n             prev_line = fm.get_line(prev_hi.line - 1);\n         }\n-        push_trailing(&mut buf, prev_line, &prev_hi, None);\n-        // remove trailing newline\n-        buf.pop();\n-        buf\n+        for buf in &mut bufs {\n+            push_trailing(buf, prev_line, &prev_hi, None);\n+            // remove trailing newline\n+            buf.pop();\n+        }\n+        bufs\n     }\n }\n "}, {"sha": "3d0b0b228a84d54f8099c6254b6dc1d06f4ce67c", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/67d762d896c8748009d1843ebf9e2e0760ed33a0/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d762d896c8748009d1843ebf9e2e0760ed33a0/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=67d762d896c8748009d1843ebf9e2e0760ed33a0", "patch": "@@ -22,9 +22,8 @@\n use codemap::{CodeMap, FilePathMapping};\n use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n use errors::registry::Registry;\n-use errors::{Level, DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion, CodeMapper};\n+use errors::{DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion, CodeMapper};\n use errors::emitter::Emitter;\n-use errors::snippet::Style;\n \n use std::rc::Rc;\n use std::io::{self, Write};\n@@ -154,23 +153,26 @@ impl Diagnostic {\n     fn from_diagnostic_builder(db: &DiagnosticBuilder,\n                                je: &JsonEmitter)\n                                -> Diagnostic {\n-        let sugg = db.suggestion.as_ref().map(|sugg| {\n-            SubDiagnostic {\n-                level: Level::Help,\n-                message: vec![(sugg.msg.clone(), Style::NoStyle)],\n-                span: MultiSpan::new(),\n-                render_span: Some(RenderSpan::Suggestion(sugg.clone())),\n-            }\n+        let sugg = db.suggestions.iter().flat_map(|sugg| {\n+            je.render(sugg).into_iter().map(move |rendered| {\n+                Diagnostic {\n+                    message: sugg.msg.clone(),\n+                    code: None,\n+                    level: \"help\",\n+                    spans: DiagnosticSpan::from_suggestion(sugg, je),\n+                    children: vec![],\n+                    rendered: Some(rendered),\n+                }\n+            })\n         });\n-        let sugg = sugg.as_ref();\n         Diagnostic {\n             message: db.message(),\n             code: DiagnosticCode::map_opt_string(db.code.clone(), je),\n             level: db.level.to_str(),\n             spans: DiagnosticSpan::from_multispan(&db.span, je),\n-            children: db.children.iter().chain(sugg).map(|c| {\n+            children: db.children.iter().map(|c| {\n                 Diagnostic::from_sub_diagnostic(c, je)\n-            }).collect(),\n+            }).chain(sugg).collect(),\n             rendered: None,\n         }\n     }\n@@ -184,8 +186,7 @@ impl Diagnostic {\n                      .map(|sp| DiagnosticSpan::from_render_span(sp, je))\n                      .unwrap_or_else(|| DiagnosticSpan::from_multispan(&db.span, je)),\n             children: vec![],\n-            rendered: db.render_span.as_ref()\n-                                    .and_then(|rsp| je.render(rsp)),\n+            rendered: None,\n         }\n     }\n }\n@@ -278,14 +279,19 @@ impl DiagnosticSpan {\n \n     fn from_suggestion(suggestion: &CodeSuggestion, je: &JsonEmitter)\n                        -> Vec<DiagnosticSpan> {\n-        assert_eq!(suggestion.msp.span_labels().len(), suggestion.substitutes.len());\n-        suggestion.msp.span_labels()\n-                      .into_iter()\n-                      .zip(&suggestion.substitutes)\n-                      .map(|(span_label, suggestion)| {\n-                          DiagnosticSpan::from_span_label(span_label,\n-                                                          Some(suggestion),\n-                                                          je)\n+        suggestion.substitutes\n+                      .iter()\n+                      .flat_map(|&(span, ref suggestion)| {\n+                          suggestion.iter().map(move |suggestion| {\n+                              let span_label = SpanLabel {\n+                                  span,\n+                                  is_primary: true,\n+                                  label: None,\n+                              };\n+                              DiagnosticSpan::from_span_label(span_label,\n+                                                              Some(suggestion),\n+                                                              je)\n+                          })\n                       })\n                       .collect()\n     }\n@@ -294,8 +300,9 @@ impl DiagnosticSpan {\n         match *rsp {\n             RenderSpan::FullSpan(ref msp) =>\n                 DiagnosticSpan::from_multispan(msp, je),\n-            RenderSpan::Suggestion(ref suggestion) =>\n-                DiagnosticSpan::from_suggestion(suggestion, je),\n+            // regular diagnostics don't produce this anymore\n+            // will be removed in a later commit\n+            RenderSpan::Suggestion(_) => unreachable!(),\n         }\n     }\n }\n@@ -351,17 +358,8 @@ impl DiagnosticCode {\n }\n \n impl JsonEmitter {\n-    fn render(&self, render_span: &RenderSpan) -> Option<String> {\n-        use std::borrow::Borrow;\n-\n-        match *render_span {\n-            RenderSpan::FullSpan(_) => {\n-                None\n-            }\n-            RenderSpan::Suggestion(ref suggestion) => {\n-                Some(suggestion.splice_lines(self.cm.borrow()))\n-            }\n-        }\n+    fn render(&self, suggestion: &CodeSuggestion) -> Vec<String> {\n+        suggestion.splice_lines(&*self.cm)\n     }\n }\n "}]}