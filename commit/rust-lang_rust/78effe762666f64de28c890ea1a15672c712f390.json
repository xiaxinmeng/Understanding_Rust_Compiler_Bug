{"sha": "78effe762666f64de28c890ea1a15672c712f390", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZWZmZTc2MjY2NmY2NGRlMjhjODkwZWExYTE1NjcyYzcxMmYzOTA=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-03T19:34:00Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-06T02:05:07Z"}, "message": "std: Rewrite the HashSet set operation iterators\n\nUse the Repeat iterator to carry the \"explicit closure capture\" that was\npreviously done with the custom EnvFilterIterator.", "tree": {"sha": "e4c65a3b91eb44075eeb5d8681327058056fea0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4c65a3b91eb44075eeb5d8681327058056fea0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78effe762666f64de28c890ea1a15672c712f390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78effe762666f64de28c890ea1a15672c712f390", "html_url": "https://github.com/rust-lang/rust/commit/78effe762666f64de28c890ea1a15672c712f390", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78effe762666f64de28c890ea1a15672c712f390/comments", "author": null, "committer": null, "parents": [{"sha": "8046218f0f18b853df571d85ac4ace003c3905b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8046218f0f18b853df571d85ac4ace003c3905b9", "html_url": "https://github.com/rust-lang/rust/commit/8046218f0f18b853df571d85ac4ace003c3905b9"}], "stats": {"total": 54, "additions": 17, "deletions": 37}, "files": [{"sha": "fbc471c0ae05d4b289235134ec8366d040459437", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 17, "deletions": 37, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/78effe762666f64de28c890ea1a15672c712f390/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78effe762666f64de28c890ea1a15672c712f390/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=78effe762666f64de28c890ea1a15672c712f390", "patch": "@@ -19,7 +19,8 @@ use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n use clone::Clone;\n use cmp::{Eq, Equiv};\n use hash::Hash;\n-use iterator::{Iterator, IteratorUtil, FromIterator, Extendable, Chain, range};\n+use iterator::{Iterator, IteratorUtil, FromIterator, Extendable, range};\n+use iterator::{FilterMap, Chain, Repeat, Zip};\n use num;\n use option::{None, Option, Some};\n use rand::RngUtil;\n@@ -712,10 +713,12 @@ impl<T:Hash + Eq> HashSet<T> {\n     }\n \n     /// Visit the values representing the difference\n-    pub fn difference_iter<'a>(&'a self, other: &'a HashSet<T>)\n-        -> SetAlgebraIter<'a, T> {\n-        EnvFilterIterator{iter: self.iter(), env: other,\n-                          filter: |elt, other| !other.contains(elt) }\n+    pub fn difference_iter<'a>(&'a self, other: &'a HashSet<T>) -> SetAlgebraIter<'a, T> {\n+        Repeat::new(other)\n+            .zip(self.iter())\n+            .filter_map(|(other, elt)| {\n+                if !other.contains(elt) { Some(elt) } else { None }\n+            })\n     }\n \n     /// Visit the values representing the symmetric difference\n@@ -727,8 +730,11 @@ impl<T:Hash + Eq> HashSet<T> {\n     /// Visit the values representing the intersection\n     pub fn intersection_iter<'a>(&'a self, other: &'a HashSet<T>)\n         -> SetAlgebraIter<'a, T> {\n-        EnvFilterIterator{iter: self.iter(), env: other,\n-                          filter: |elt, other| other.contains(elt) }\n+        Repeat::new(other)\n+            .zip(self.iter())\n+            .filter_map(|(other, elt)| {\n+                if other.contains(elt) { Some(elt) } else { None }\n+            })\n     }\n \n     /// Visit the values representing the union\n@@ -756,38 +762,12 @@ impl<K: Eq + Hash, T: Iterator<K>> Extendable<K, T> for HashSet<K> {\n     }\n }\n \n-// FIXME #7814: use std::iterator::FilterIterator\n-/// Building block for Set operation iterators\n-pub struct EnvFilterIterator<A, Env, I> {\n-    priv env: Env,\n-    priv filter: &'static fn(&A, Env) -> bool,\n-    priv iter: I,\n-}\n-\n-impl<'self, A, Env: Clone, I: Iterator<&'self A>> Iterator<&'self A>\n-        for EnvFilterIterator<A, Env, I> {\n-    #[inline]\n-    fn next(&mut self) -> Option<&'self A> {\n-        loop {\n-            match self.iter.next() {\n-                Some(elt) => if (self.filter)(elt, self.env.clone()) {\n-                    return Some(elt)\n-                },\n-                None => return None,\n-            }\n-        }\n-    }\n-\n-    #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n-        let (_, upper) = self.iter.size_hint();\n-        (0, upper)\n-    }\n-}\n-\n+// `Repeat` is used to feed the filter closure an explicit capture\n+// of a reference to the other set\n /// Set operations iterator\n pub type SetAlgebraIter<'self, T> =\n-    EnvFilterIterator<T, &'self HashSet<T>, HashSetIterator<'self, T>>;\n+    FilterMap<'static,(&'self HashSet<T>, &'self T), &'self T,\n+              Zip<Repeat<&'self HashSet<T>>,HashSetIterator<'self,T>>>;\n \n \n #[cfg(test)]"}]}