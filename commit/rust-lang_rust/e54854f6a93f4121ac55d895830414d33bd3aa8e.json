{"sha": "e54854f6a93f4121ac55d895830414d33bd3aa8e", "node_id": "C_kwDOAAsO6NoAKGU1NDg1NGY2YTkzZjQxMjFhYzU1ZDg5NTgzMDQxNGQzM2JkM2FhOGU", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-04-17T23:19:08Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-04-20T18:36:50Z"}, "message": "add subst_identity_iter and subst_identity_iter_copied methods on EarlyBinder; use this to simplify some EarlyBinder noise around explicit_item_bounds calls", "tree": {"sha": "39a6e52cbddc140a69e8bd86ad58c22cdfc9f510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39a6e52cbddc140a69e8bd86ad58c22cdfc9f510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e54854f6a93f4121ac55d895830414d33bd3aa8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e54854f6a93f4121ac55d895830414d33bd3aa8e", "html_url": "https://github.com/rust-lang/rust/commit/e54854f6a93f4121ac55d895830414d33bd3aa8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e54854f6a93f4121ac55d895830414d33bd3aa8e/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3b279fcc54eea8e4fb094d1672a3907489aa66b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b279fcc54eea8e4fb094d1672a3907489aa66b", "html_url": "https://github.com/rust-lang/rust/commit/f3b279fcc54eea8e4fb094d1672a3907489aa66b"}], "stats": {"total": 95, "additions": 44, "deletions": 51}, "files": [{"sha": "d84e7b5881cfe7cd364f76821eea87790260a693", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -318,11 +318,10 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n             tcx,\n             selftys: vec![],\n         };\n-        let prohibit_opaque =\n-            tcx.explicit_item_bounds(def_id).transpose_iter().try_for_each(|bound| {\n-                let predicate = bound.map_bound(|&(predicate, _)| predicate).subst_identity();\n-                predicate.visit_with(&mut visitor)\n-            });\n+        let prohibit_opaque = tcx\n+            .explicit_item_bounds(def_id)\n+            .subst_identity_iter_copied()\n+            .try_for_each(|(predicate, _)| predicate.visit_with(&mut visitor));\n \n         if let Some(ty) = prohibit_opaque.break_value() {\n             visitor.visit_item(&item);"}, {"sha": "80ab711c15c0e8f57fcb19a0a113a5bb07c5f21b", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -361,8 +361,7 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n                             param_env,\n                             item_def_id,\n                             tcx.explicit_item_bounds(item_def_id)\n-                                .transpose_iter()\n-                                .map(|bound| bound.map_bound(|b| *b).subst_identity())\n+                                .subst_identity_iter_copied()\n                                 .collect::<Vec<_>>(),\n                             &FxIndexSet::default(),\n                             gat_def_id.def_id,\n@@ -1128,8 +1127,7 @@ fn check_associated_type_bounds(wfcx: &WfCheckingCtxt<'_, '_>, item: ty::AssocIt\n     let bounds = wfcx.tcx().explicit_item_bounds(item.def_id);\n \n     debug!(\"check_associated_type_bounds: bounds={:?}\", bounds);\n-    let wf_obligations = bounds.transpose_iter().flat_map(|b| {\n-        let (bound, bound_span) = b.map_bound(|b| *b).subst_identity();\n+    let wf_obligations = bounds.subst_identity_iter_copied().flat_map(|(bound, bound_span)| {\n         let normalized_bound = wfcx.normalize(span, None, bound);\n         traits::wf::predicate_obligations(\n             wfcx.infcx,"}, {"sha": "e735b048d7343f7ed4d29f2a894ec9ed93caf15b", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -153,8 +153,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n     let mut collector =\n         OpaqueTypeLifetimeCollector { tcx, root_def_id: item_def_id.to_def_id(), variances };\n     let id_substs = ty::InternalSubsts::identity_for_item(tcx, item_def_id);\n-    for pred in tcx.explicit_item_bounds(item_def_id).transpose_iter() {\n-        let pred = pred.map_bound(|(pred, _)| *pred).subst(tcx, id_substs);\n+    for (pred, _) in tcx.explicit_item_bounds(item_def_id).subst_iter_copied(tcx, id_substs) {\n         debug!(?pred);\n \n         // We only ignore opaque type substs if the opaque type is the outermost type."}, {"sha": "d23fe9650805dca283ba1fd3458069d2c34fbe46", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -571,8 +571,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         // FIXME: support adding the attribute to TAITs\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n             let mut has_emitted = false;\n-            for bound in fcx.tcx.explicit_item_bounds(def).transpose_iter() {\n-                let predicate = bound.map_bound(|&(pred, _)| pred).subst_identity();\n+            for (predicate, _) in fcx.tcx.explicit_item_bounds(def).subst_identity_iter_copied() {\n                 // We only look at the `DefId`, so it is safe to skip the binder here.\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(ref poly_trait_predicate)) =\n                     predicate.kind().skip_binder()"}, {"sha": "15715c8fca039a7af21ae2913c70739052974a25", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -74,9 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n         // For every projection predicate in the opaque type's explicit bounds,\n         // check that the type that we're assigning actually satisfies the bounds\n         // of the associated type.\n-        for bound in cx.tcx.explicit_item_bounds(def_id).transpose_iter() {\n-            let (pred, pred_span) = bound.map_bound(|b| *b).subst_identity();\n-\n+        for (pred, pred_span) in cx.tcx.explicit_item_bounds(def_id).subst_identity_iter_copied() {\n             // Liberate bound regions in the predicate since we\n             // don't actually care about lifetimes in this check.\n             let predicate = cx.tcx.liberate_late_bound_regions(def_id, pred.kind());"}, {"sha": "eb175e96997b3cf074d7d7e3b25ebe51c59ebe39", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -254,29 +254,23 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 }\n                 ty::Adt(def, _) => is_def_must_use(cx, def.did(), span),\n                 ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n-                    elaborate(\n-                        cx.tcx,\n-                        cx.tcx\n-                            .explicit_item_bounds(def)\n-                            .transpose_iter()\n-                            .map(|bound| bound.map_bound(|b| *b).subst_identity()),\n-                    )\n-                    // We only care about self bounds for the impl-trait\n-                    .filter_only_self()\n-                    .find_map(|(pred, _span)| {\n-                        // We only look at the `DefId`, so it is safe to skip the binder here.\n-                        if let ty::PredicateKind::Clause(ty::Clause::Trait(\n-                            ref poly_trait_predicate,\n-                        )) = pred.kind().skip_binder()\n-                        {\n-                            let def_id = poly_trait_predicate.trait_ref.def_id;\n-\n-                            is_def_must_use(cx, def_id, span)\n-                        } else {\n-                            None\n-                        }\n-                    })\n-                    .map(|inner| MustUsePath::Opaque(Box::new(inner)))\n+                    elaborate(cx.tcx, cx.tcx.explicit_item_bounds(def).subst_identity_iter_copied())\n+                        // We only care about self bounds for the impl-trait\n+                        .filter_only_self()\n+                        .find_map(|(pred, _span)| {\n+                            // We only look at the `DefId`, so it is safe to skip the binder here.\n+                            if let ty::PredicateKind::Clause(ty::Clause::Trait(\n+                                ref poly_trait_predicate,\n+                            )) = pred.kind().skip_binder()\n+                            {\n+                                let def_id = poly_trait_predicate.trait_ref.def_id;\n+\n+                                is_def_must_use(cx, def_id, span)\n+                            } else {\n+                                None\n+                            }\n+                        })\n+                        .map(|inner| MustUsePath::Opaque(Box::new(inner)))\n                 }\n                 ty::Dynamic(binders, _, _) => binders.iter().find_map(|predicate| {\n                     if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder()"}, {"sha": "a5e98fe6224dc6378b0fd92fcc9db7e38a86e335", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -1611,7 +1611,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = ty.kind() else { return false };\n         let future_trait = self.require_lang_item(LangItem::Future, None);\n \n-        self.explicit_item_bounds(def_id).skip_binder().iter().any(|(predicate, _)| {\n+        self.explicit_item_bounds(def_id).subst_identity_iter_copied().any(|(predicate, _)| {\n             let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() else {\n                 return false;\n             };"}, {"sha": "6361789d3973b7ff7c6453aadfcc27e692bc2c5e", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -625,6 +625,12 @@ where\n     ) -> SubstIter<'s, 'tcx, I> {\n         SubstIter { it: self.0.into_iter(), tcx, substs }\n     }\n+\n+    /// Similar to [`subst_identity`](EarlyBinder::subst_identity),\n+    /// but on an iterator of `TypeFoldable` values.\n+    pub fn subst_identity_iter(self) -> I::IntoIter {\n+        self.0.into_iter()\n+    }\n }\n \n pub struct SubstIter<'s, 'tcx, I: IntoIterator> {\n@@ -677,6 +683,12 @@ where\n     ) -> SubstIterCopied<'s, 'tcx, I> {\n         SubstIterCopied { it: self.0.into_iter(), tcx, substs }\n     }\n+\n+    /// Similar to [`subst_identity`](EarlyBinder::subst_identity),\n+    /// but on an iterator of values that deref to a `TypeFoldable`.\n+    pub fn subst_identity_iter_copied(self) -> impl Iterator<Item = <I::Item as Deref>::Target> {\n+        self.0.into_iter().map(|v| *v)\n+    }\n }\n \n pub struct SubstIterCopied<'a, 'tcx, I: IntoIterator> {"}, {"sha": "4cfb2e1fffa88ed2948f39181c66283a3e8fc7d4", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -1800,9 +1800,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         // FIXME: support adding the attribute to TAITs\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n             let mut has_emitted = false;\n-            for bound in tcx.explicit_item_bounds(def).transpose_iter() {\n-                let predicate = bound.map_bound(|&(pred, _)| pred).subst_identity();\n-\n+            for (predicate, _) in tcx.explicit_item_bounds(def).subst_identity_iter_copied() {\n                 // We only look at the `DefId`, so it is safe to skip the binder here.\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(ref poly_trait_predicate)) =\n                     predicate.kind().skip_binder()"}, {"sha": "73e2efc3b000e4722815d69ae362632aff6ce29a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -297,8 +297,7 @@ fn bounds_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span\n     tcx.associated_items(trait_def_id)\n         .in_definition_order()\n         .filter(|item| item.kind == ty::AssocKind::Type)\n-        .flat_map(|item| tcx.explicit_item_bounds(item.def_id).transpose_iter())\n-        .map(|bound| bound.map_bound(|b| *b).subst_identity())\n+        .flat_map(|item| tcx.explicit_item_bounds(item.def_id).subst_identity_iter_copied())\n         .filter_map(|pred_span| predicate_references_self(tcx, pred_span))\n         .collect()\n }"}, {"sha": "c992a5388d19900577ff1574d1cafa38a4f4a555", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -1315,10 +1315,8 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n             }\n \n             if let ty::TraitContainer = assoc_item.container {\n-                let bounds = tcx\n-                    .explicit_item_bounds(assoc_item.def_id)\n-                    .transpose_iter()\n-                    .map(|bound| bound.map_bound(|b| *b).subst_identity());\n+                let bounds =\n+                    tcx.explicit_item_bounds(assoc_item.def_id).subst_identity_iter_copied();\n                 let predicates = tcx.explicit_predicates_of(assoc_item.def_id).predicates;\n                 let predicates =\n                     tcx.arena.alloc_from_iter(bounds.chain(predicates.iter().copied()));"}, {"sha": "cb700126c2bd5b074ae400e4e452144f2e91edd6", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e54854f6a93f4121ac55d895830414d33bd3aa8e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e54854f6a93f4121ac55d895830414d33bd3aa8e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=e54854f6a93f4121ac55d895830414d33bd3aa8e", "patch": "@@ -90,8 +90,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                         return false;\n                     }\n \n-                    for bound in cx.tcx.explicit_item_bounds(def_id).transpose_iter() {\n-                        let (predicate, _span) = bound.map_bound(|b| *b).subst_identity();\n+                    for (predicate, _span) in cx.tcx.explicit_item_bounds(def_id).subst_identity_iter_copied() {\n                         match predicate.kind().skip_binder() {\n                             // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n                             // and check substituions to find `U`."}]}