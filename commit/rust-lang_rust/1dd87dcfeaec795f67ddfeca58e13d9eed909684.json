{"sha": "1dd87dcfeaec795f67ddfeca58e13d9eed909684", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZDg3ZGNmZWFlYzc5NWY2N2RkZmVjYTU4ZTEzZDllZWQ5MDk2ODQ=", "commit": {"author": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-10-24T01:33:19Z"}, "committer": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-10-28T03:09:10Z"}, "message": "Don't use panicking helpers in Parser.", "tree": {"sha": "1d60e670292b14026e2ab0083198cad0d46fe823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d60e670292b14026e2ab0083198cad0d46fe823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd87dcfeaec795f67ddfeca58e13d9eed909684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd87dcfeaec795f67ddfeca58e13d9eed909684", "html_url": "https://github.com/rust-lang/rust/commit/1dd87dcfeaec795f67ddfeca58e13d9eed909684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd87dcfeaec795f67ddfeca58e13d9eed909684/comments", "author": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7172490f8f5c3a9d924a1abdc5123b64c18f4ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7172490f8f5c3a9d924a1abdc5123b64c18f4ea", "html_url": "https://github.com/rust-lang/rust/commit/f7172490f8f5c3a9d924a1abdc5123b64c18f4ea"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "984e73f85f610656a72263de4e1c64ce5eb65837", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=1dd87dcfeaec795f67ddfeca58e13d9eed909684", "patch": "@@ -79,7 +79,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                     cx.span_err(sp, \"malformed inline assembly\");\n                     return DummyResult::expr(sp);\n                 }\n-                let (s, style) = match expr_to_string(cx, p.parse_expr(),\n+                let (s, style) = match expr_to_string(cx, panictry!(p.parse_expr_nopanic()),\n                                                    \"inline assembly must be a string literal\") {\n                     Some((s, st)) => (s, st),\n                     // let compilation continue\n@@ -102,7 +102,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                     let span = p.last_span;\n \n                     panictry!(p.expect(&token::OpenDelim(token::Paren)));\n-                    let out = p.parse_expr();\n+                    let out = panictry!(p.parse_expr_nopanic());\n                     panictry!(p.expect(&token::CloseDelim(token::Paren)));\n \n                     // Expands a read+write operand into two operands.\n@@ -146,7 +146,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                     }\n \n                     panictry!(p.expect(&token::OpenDelim(token::Paren)));\n-                    let input = p.parse_expr();\n+                    let input = panictry!(p.parse_expr_nopanic());\n                     panictry!(p.expect(&token::CloseDelim(token::Paren)));\n \n                     inputs.push((constraint, input));"}, {"sha": "641d1b45453e8bdbc66316e7ec01aa5c8f788163", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1dd87dcfeaec795f67ddfeca58e13d9eed909684", "patch": "@@ -809,7 +809,7 @@ pub fn get_single_str_from_tts(cx: &mut ExtCtxt,\n         cx.span_err(sp, &format!(\"{} takes 1 argument\", name));\n         return None\n     }\n-    let ret = cx.expander().fold_expr(p.parse_expr());\n+    let ret = cx.expander().fold_expr(panictry!(p.parse_expr_nopanic()));\n     if p.token != token::Eof {\n         cx.span_err(sp, &format!(\"{} takes 1 argument\", name));\n     }\n@@ -826,7 +826,7 @@ pub fn get_exprs_from_tts(cx: &mut ExtCtxt,\n     let mut p = cx.new_parser_from_tts(tts);\n     let mut es = Vec::new();\n     while p.token != token::Eof {\n-        es.push(cx.expander().fold_expr(p.parse_expr()));\n+        es.push(cx.expander().fold_expr(panictry!(p.parse_expr_nopanic())));\n         if panictry!(p.eat(&token::Comma)){\n             continue;\n         }"}, {"sha": "c56342371c84ed9a72dc305763626be38e3baea1", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=1dd87dcfeaec795f67ddfeca58e13d9eed909684", "patch": "@@ -93,7 +93,7 @@ fn parse_args(ecx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         ecx.span_err(sp, \"requires at least a format string argument\");\n         return None;\n     }\n-    let fmtstr = p.parse_expr();\n+    let fmtstr = panictry!(p.parse_expr_nopanic());\n     let mut named = false;\n     while p.token != token::Eof {\n         if !panictry!(p.eat(&token::Comma)) {\n@@ -124,7 +124,7 @@ fn parse_args(ecx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             let name: &str = &ident.name.as_str();\n \n             panictry!(p.expect(&token::Eq));\n-            let e = p.parse_expr();\n+            let e = panictry!(p.parse_expr_nopanic());\n             match names.get(name) {\n                 None => {}\n                 Some(prev) => {\n@@ -138,7 +138,7 @@ fn parse_args(ecx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             order.push(name.to_string());\n             names.insert(name.to_string(), e);\n         } else {\n-            args.push(p.parse_expr());\n+            args.push(panictry!(p.parse_expr_nopanic()));\n         }\n     }\n     Some((fmtstr, args, order, names))"}, {"sha": "1e337c29f2b6875b788ff07b49243126e1d2d4c5", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=1dd87dcfeaec795f67ddfeca58e13d9eed909684", "patch": "@@ -694,7 +694,7 @@ fn parse_arguments_to_quote(cx: &ExtCtxt, tts: &[ast::TokenTree])\n     let mut p = cx.new_parser_from_tts(tts);\n     p.quote_depth += 1;\n \n-    let cx_expr = p.parse_expr();\n+    let cx_expr = panictry!(p.parse_expr_nopanic());\n     if !panictry!(p.eat(&token::Comma)) {\n         panic!(p.fatal(\"expected token `,`\"));\n     }"}, {"sha": "72ba7359d4d94798ae0ce8da3945dbd982d8a7dc", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=1dd87dcfeaec795f67ddfeca58e13d9eed909684", "patch": "@@ -109,13 +109,13 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree\n     }\n     impl<'a> base::MacResult for ExpandResult<'a> {\n         fn make_expr(mut self: Box<ExpandResult<'a>>) -> Option<P<ast::Expr>> {\n-            Some(self.p.parse_expr())\n+            Some(panictry!(self.p.parse_expr_nopanic()))\n         }\n         fn make_items(mut self: Box<ExpandResult<'a>>)\n                       -> Option<SmallVector<P<ast::Item>>> {\n             let mut ret = SmallVector::zero();\n             while self.p.token != token::Eof {\n-                match self.p.parse_item() {\n+                match panictry!(self.p.parse_item_nopanic()) {\n                     Some(item) => ret.push(item),\n                     None => panic!(self.p.span_fatal(\n                         self.p.span,"}, {"sha": "5cb5b95e2cb0c1be12c8fdaf3eff0dbea09c5167", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=1dd87dcfeaec795f67ddfeca58e13d9eed909684", "patch": "@@ -503,18 +503,18 @@ pub fn parse_nt(p: &mut Parser, sp: Span, name: &str) -> Nonterminal {\n     // check at the beginning and the parser checks after each bump\n     panictry!(p.check_unknown_macro_variable());\n     match name {\n-        \"item\" => match p.parse_item() {\n+        \"item\" => match panictry!(p.parse_item_nopanic()) {\n             Some(i) => token::NtItem(i),\n             None => panic!(p.fatal(\"expected an item keyword\"))\n         },\n         \"block\" => token::NtBlock(panictry!(p.parse_block())),\n-        \"stmt\" => match p.parse_stmt() {\n+        \"stmt\" => match panictry!(p.parse_stmt_nopanic()) {\n             Some(s) => token::NtStmt(s),\n             None => panic!(p.fatal(\"expected a statement\"))\n         },\n-        \"pat\" => token::NtPat(p.parse_pat()),\n-        \"expr\" => token::NtExpr(p.parse_expr()),\n-        \"ty\" => token::NtTy(p.parse_ty()),\n+        \"pat\" => token::NtPat(panictry!(p.parse_pat_nopanic())),\n+        \"expr\" => token::NtExpr(panictry!(p.parse_expr_nopanic())),\n+        \"ty\" => token::NtTy(panictry!(p.parse_ty_nopanic())),\n         // this could be handled like a token, since it is one\n         \"ident\" => match p.token {\n             token::Ident(sn,b) => { panictry!(p.bump()); token::NtIdent(Box::new(sn),b) }"}, {"sha": "a98c001dc0e60cd0baf795eb27901700adca1968", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=1dd87dcfeaec795f67ddfeca58e13d9eed909684", "patch": "@@ -66,18 +66,18 @@ impl<'a> ParserAnyMacro<'a> {\n \n impl<'a> MacResult for ParserAnyMacro<'a> {\n     fn make_expr(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Expr>> {\n-        let ret = self.parser.borrow_mut().parse_expr();\n+        let ret = panictry!(self.parser.borrow_mut().parse_expr_nopanic());\n         self.ensure_complete_parse(true);\n         Some(ret)\n     }\n     fn make_pat(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Pat>> {\n-        let ret = self.parser.borrow_mut().parse_pat();\n+        let ret = panictry!(self.parser.borrow_mut().parse_pat_nopanic());\n         self.ensure_complete_parse(false);\n         Some(ret)\n     }\n     fn make_items(self: Box<ParserAnyMacro<'a>>) -> Option<SmallVector<P<ast::Item>>> {\n         let mut ret = SmallVector::zero();\n-        while let Some(item) = self.parser.borrow_mut().parse_item() {\n+        while let Some(item) = panictry!(self.parser.borrow_mut().parse_item_nopanic()) {\n             ret.push(item);\n         }\n         self.ensure_complete_parse(false);\n@@ -119,7 +119,7 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n     }\n \n     fn make_ty(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Ty>> {\n-        let ret = self.parser.borrow_mut().parse_ty();\n+        let ret = panictry!(self.parser.borrow_mut().parse_ty_nopanic());\n         self.ensure_complete_parse(true);\n         Some(ret)\n     }"}, {"sha": "2275d95c7c2d6f33e4cf8a591106cebce228f1ff", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=1dd87dcfeaec795f67ddfeca58e13d9eed909684", "patch": "@@ -116,7 +116,7 @@ pub fn parse_expr_from_source_str(name: String,\n                                   sess: &ParseSess)\n                                   -> P<ast::Expr> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n-    maybe_aborted(p.parse_expr(), p)\n+    maybe_aborted(panictry!(p.parse_expr_nopanic()), p)\n }\n \n pub fn parse_item_from_source_str(name: String,\n@@ -125,7 +125,7 @@ pub fn parse_item_from_source_str(name: String,\n                                   sess: &ParseSess)\n                                   -> Option<P<ast::Item>> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n-    maybe_aborted(p.parse_item(),p)\n+    maybe_aborted(panictry!(p.parse_item_nopanic()), p)\n }\n \n pub fn parse_meta_from_source_str(name: String,\n@@ -134,7 +134,7 @@ pub fn parse_meta_from_source_str(name: String,\n                                   sess: &ParseSess)\n                                   -> P<ast::MetaItem> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n-    maybe_aborted(p.parse_meta_item(),p)\n+    maybe_aborted(p.parse_meta_item(), p)\n }\n \n pub fn parse_stmt_from_source_str(name: String,\n@@ -148,7 +148,7 @@ pub fn parse_stmt_from_source_str(name: String,\n         name,\n         source\n     );\n-    maybe_aborted(p.parse_stmt(), p)\n+    maybe_aborted(panictry!(p.parse_stmt_nopanic()), p)\n }\n \n // Warning: This parses with quote_depth > 0, which is not the default."}, {"sha": "6afcd61aa3d89ba873cce6f90292fc2ea06346e6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd87dcfeaec795f67ddfeca58e13d9eed909684/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1dd87dcfeaec795f67ddfeca58e13d9eed909684", "patch": "@@ -359,7 +359,8 @@ impl<'a> Parser<'a> {\n     }\n \n     // Panicing fns (for now!)\n-    // This is so that the quote_*!() syntax extensions\n+    // These functions are used by the quote_*!() syntax extensions, but shouldn't\n+    // be used otherwise.\n     pub fn parse_expr(&mut self) -> P<Expr> {\n         panictry!(self.parse_expr_nopanic())\n     }"}]}