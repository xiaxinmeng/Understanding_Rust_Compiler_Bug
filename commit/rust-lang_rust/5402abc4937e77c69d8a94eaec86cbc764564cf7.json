{"sha": "5402abc4937e77c69d8a94eaec86cbc764564cf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MDJhYmM0OTM3ZTc3YzY5ZDhhOTRlYWVjODZjYmM3NjQ1NjRjZjc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-27T12:47:11Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-27T12:47:11Z"}, "message": "Improve Debug implementations of Mutex and RwLock.\n\nThey now show the poison flag and use debug_non_exhaustive.", "tree": {"sha": "dfcab3d38aa0c57668f8e2ec2e652bfea4352b7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfcab3d38aa0c57668f8e2ec2e652bfea4352b7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5402abc4937e77c69d8a94eaec86cbc764564cf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5402abc4937e77c69d8a94eaec86cbc764564cf7", "html_url": "https://github.com/rust-lang/rust/commit/5402abc4937e77c69d8a94eaec86cbc764564cf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5402abc4937e77c69d8a94eaec86cbc764564cf7/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feaac19f1710ebcfecc783d51f52a9b0d8e998f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/feaac19f1710ebcfecc783d51f52a9b0d8e998f5", "html_url": "https://github.com/rust-lang/rust/commit/feaac19f1710ebcfecc783d51f52a9b0d8e998f5"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "98c34282e0c49f6a303f4c4faf94efc7a3bcba06", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5402abc4937e77c69d8a94eaec86cbc764564cf7/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5402abc4937e77c69d8a94eaec86cbc764564cf7/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=5402abc4937e77c69d8a94eaec86cbc764564cf7", "patch": "@@ -441,10 +441,13 @@ impl<T: ?Sized + Default> Default for Mutex<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut d = f.debug_struct(\"Mutex\");\n         match self.try_lock() {\n-            Ok(guard) => f.debug_struct(\"Mutex\").field(\"data\", &&*guard).finish(),\n+            Ok(guard) => {\n+                d.field(\"data\", &&*guard);\n+            }\n             Err(TryLockError::Poisoned(err)) => {\n-                f.debug_struct(\"Mutex\").field(\"data\", &&**err.get_ref()).finish()\n+                d.field(\"data\", &&**err.get_ref());\n             }\n             Err(TryLockError::WouldBlock) => {\n                 struct LockedPlaceholder;\n@@ -453,10 +456,11 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T> {\n                         f.write_str(\"<locked>\")\n                     }\n                 }\n-\n-                f.debug_struct(\"Mutex\").field(\"data\", &LockedPlaceholder).finish()\n+                d.field(\"data\", &LockedPlaceholder);\n             }\n         }\n+        d.field(\"poisoned\", &self.poison.get());\n+        d.finish_non_exhaustive()\n     }\n }\n "}, {"sha": "ee5fe06ac1effc152dc915d2c49e1355ee5b40c4", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5402abc4937e77c69d8a94eaec86cbc764564cf7/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5402abc4937e77c69d8a94eaec86cbc764564cf7/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=5402abc4937e77c69d8a94eaec86cbc764564cf7", "patch": "@@ -422,10 +422,13 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for RwLock<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut d = f.debug_struct(\"RwLock\");\n         match self.try_read() {\n-            Ok(guard) => f.debug_struct(\"RwLock\").field(\"data\", &&*guard).finish(),\n+            Ok(guard) => {\n+                d.field(\"data\", &&*guard);\n+            }\n             Err(TryLockError::Poisoned(err)) => {\n-                f.debug_struct(\"RwLock\").field(\"data\", &&**err.get_ref()).finish()\n+                d.field(\"data\", &&**err.get_ref());\n             }\n             Err(TryLockError::WouldBlock) => {\n                 struct LockedPlaceholder;\n@@ -434,10 +437,11 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n                         f.write_str(\"<locked>\")\n                     }\n                 }\n-\n-                f.debug_struct(\"RwLock\").field(\"data\", &LockedPlaceholder).finish()\n+                d.field(\"data\", &LockedPlaceholder);\n             }\n         }\n+        d.field(\"poisoned\", &self.poison.get());\n+        d.finish_non_exhaustive()\n     }\n }\n "}]}