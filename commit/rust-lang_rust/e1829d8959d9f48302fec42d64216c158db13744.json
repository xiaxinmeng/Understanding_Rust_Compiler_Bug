{"sha": "e1829d8959d9f48302fec42d64216c158db13744", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxODI5ZDg5NTlkOWY0ODMwMmZlYzQyZDY0MjE2YzE1OGRiMTM3NDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-30T21:57:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-30T21:57:16Z"}, "message": "minor", "tree": {"sha": "8bc2d88ffbda6fe5dce4d6e792bfd9b70ccf527d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bc2d88ffbda6fe5dce4d6e792bfd9b70ccf527d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1829d8959d9f48302fec42d64216c158db13744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1829d8959d9f48302fec42d64216c158db13744", "html_url": "https://github.com/rust-lang/rust/commit/e1829d8959d9f48302fec42d64216c158db13744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1829d8959d9f48302fec42d64216c158db13744/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40bdd2e161e0e29805462fe3f2a8ea624e4a38d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/40bdd2e161e0e29805462fe3f2a8ea624e4a38d4", "html_url": "https://github.com/rust-lang/rust/commit/40bdd2e161e0e29805462fe3f2a8ea624e4a38d4"}], "stats": {"total": 144, "additions": 73, "deletions": 71}, "files": [{"sha": "20dcde82068554952bb8f513d6b9c28b4f1b5507", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 73, "deletions": 71, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/e1829d8959d9f48302fec42d64216c158db13744/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1829d8959d9f48302fec42d64216c158db13744/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=e1829d8959d9f48302fec42d64216c158db13744", "patch": "@@ -8,7 +8,7 @@ use crate::{\n };\n \n pub fn generate_assists_docs(mode: Mode) -> Result<()> {\n-    let assists = collect_assists()?;\n+    let assists = Assist::collect()?;\n     generate_tests(&assists, mode)?;\n     generate_docs(&assists, mode)?;\n     Ok(())\n@@ -22,81 +22,61 @@ struct Assist {\n     after: String,\n }\n \n-fn hide_hash_comments(text: &str) -> String {\n-    text.split('\\n') // want final newline\n-        .filter(|&it| !(it.starts_with(\"# \") || it == \"#\"))\n-        .map(|it| format!(\"{}\\n\", it))\n-        .collect()\n-}\n-\n-fn reveal_hash_comments(text: &str) -> String {\n-    text.split('\\n') // want final newline\n-        .map(|it| {\n-            if it.starts_with(\"# \") {\n-                &it[2..]\n-            } else if it == \"#\" {\n-                \"\"\n-            } else {\n-                it\n-            }\n-        })\n-        .map(|it| format!(\"{}\\n\", it))\n-        .collect()\n-}\n-\n-fn collect_assists() -> Result<Vec<Assist>> {\n-    let mut res = Vec::new();\n-    for path in rust_files(&project_root().join(codegen::ASSISTS_DIR)) {\n-        collect_file(&mut res, path.as_path())?;\n-    }\n-    res.sort_by(|lhs, rhs| lhs.id.cmp(&rhs.id));\n-    return Ok(res);\n-\n-    fn collect_file(acc: &mut Vec<Assist>, path: &Path) -> Result<()> {\n-        let text = fs::read_to_string(path)?;\n-        let comment_blocks = extract_comment_blocks_with_empty_lines(&text);\n-\n-        for block in comment_blocks {\n-            // FIXME: doesn't support blank lines yet, need to tweak\n-            // `extract_comment_blocks` for that.\n-            let mut lines = block.iter();\n-            let first_line = lines.next().unwrap();\n-            if !first_line.starts_with(\"Assist: \") {\n-                continue;\n-            }\n-            let id = first_line[\"Assist: \".len()..].to_string();\n-            assert!(\n-                id.chars().all(|it| it.is_ascii_lowercase() || it == '_'),\n-                \"invalid assist id: {:?}\",\n-                id\n-            );\n-\n-            let doc = take_until(lines.by_ref(), \"```\").trim().to_string();\n-            assert!(\n-                doc.chars().next().unwrap().is_ascii_uppercase() && doc.ends_with('.'),\n-                \"\\n\\n{}: assist docs should be proper sentences, with capitalization and a full stop at the end.\\n\\n{}\\n\\n\",\n-                id, doc,\n-            );\n-\n-            let before = take_until(lines.by_ref(), \"```\");\n-\n-            assert_eq!(lines.next().unwrap().as_str(), \"->\");\n-            assert_eq!(lines.next().unwrap().as_str(), \"```\");\n-            let after = take_until(lines.by_ref(), \"```\");\n-            acc.push(Assist { id, doc, before, after })\n+impl Assist {\n+    fn collect() -> Result<Vec<Assist>> {\n+        let mut res = Vec::new();\n+        for path in rust_files(&project_root().join(codegen::ASSISTS_DIR)) {\n+            collect_file(&mut res, path.as_path())?;\n         }\n+        res.sort_by(|lhs, rhs| lhs.id.cmp(&rhs.id));\n+        return Ok(res);\n+\n+        fn collect_file(acc: &mut Vec<Assist>, path: &Path) -> Result<()> {\n+            let text = fs::read_to_string(path)?;\n+            let comment_blocks = extract_comment_blocks_with_empty_lines(&text);\n+\n+            for block in comment_blocks {\n+                // FIXME: doesn't support blank lines yet, need to tweak\n+                // `extract_comment_blocks` for that.\n+                let mut lines = block.iter();\n+                let first_line = lines.next().unwrap();\n+                if !first_line.starts_with(\"Assist: \") {\n+                    continue;\n+                }\n+                let id = first_line[\"Assist: \".len()..].to_string();\n+                assert!(\n+                    id.chars().all(|it| it.is_ascii_lowercase() || it == '_'),\n+                    \"invalid assist id: {:?}\",\n+                    id\n+                );\n+\n+                let doc = take_until(lines.by_ref(), \"```\").trim().to_string();\n+                assert!(\n+                    doc.chars().next().unwrap().is_ascii_uppercase() && doc.ends_with('.'),\n+                    \"\\n\\n{}: assist docs should be proper sentences, with capitalization and a full stop at the end.\\n\\n{}\\n\\n\",\n+                    id, doc,\n+                );\n+\n+                let before = take_until(lines.by_ref(), \"```\");\n+\n+                assert_eq!(lines.next().unwrap().as_str(), \"->\");\n+                assert_eq!(lines.next().unwrap().as_str(), \"```\");\n+                let after = take_until(lines.by_ref(), \"```\");\n+                acc.push(Assist { id, doc, before, after })\n+            }\n \n-        fn take_until<'a>(lines: impl Iterator<Item = &'a String>, marker: &str) -> String {\n-            let mut buf = Vec::new();\n-            for line in lines {\n-                if line == marker {\n-                    break;\n+            fn take_until<'a>(lines: impl Iterator<Item = &'a String>, marker: &str) -> String {\n+                let mut buf = Vec::new();\n+                for line in lines {\n+                    if line == marker {\n+                        break;\n+                    }\n+                    buf.push(line.clone());\n                 }\n-                buf.push(line.clone());\n+                buf.join(\"\\n\")\n             }\n-            buf.join(\"\\n\")\n+            Ok(())\n         }\n-        Ok(())\n     }\n }\n \n@@ -157,3 +137,25 @@ fn generate_docs(assists: &[Assist], mode: Mode) -> Result<()> {\n \n     codegen::update(&project_root().join(codegen::ASSISTS_DOCS), &buf, mode)\n }\n+\n+fn hide_hash_comments(text: &str) -> String {\n+    text.split('\\n') // want final newline\n+        .filter(|&it| !(it.starts_with(\"# \") || it == \"#\"))\n+        .map(|it| format!(\"{}\\n\", it))\n+        .collect()\n+}\n+\n+fn reveal_hash_comments(text: &str) -> String {\n+    text.split('\\n') // want final newline\n+        .map(|it| {\n+            if it.starts_with(\"# \") {\n+                &it[2..]\n+            } else if it == \"#\" {\n+                \"\"\n+            } else {\n+                it\n+            }\n+        })\n+        .map(|it| format!(\"{}\\n\", it))\n+        .collect()\n+}"}]}