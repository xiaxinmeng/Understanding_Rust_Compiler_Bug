{"sha": "6e2249d2fd83c2323189f1be02477e2e293bbcf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMjI0OWQyZmQ4M2MyMzIzMTg5ZjFiZTAyNDc3ZTJlMjkzYmJjZjQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-11T05:34:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-11T05:34:51Z"}, "message": "Rollup merge of #80881 - jyn514:intra-doc-self, r=GuillaumeGomez\n\n Fix intra-doc links to `Self` and `crate`\n\nCloses https://github.com/rust-lang/rust/issues/77732.", "tree": {"sha": "8e207fa4177b403d9b724aca45b791195a606503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e207fa4177b403d9b724aca45b791195a606503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e2249d2fd83c2323189f1be02477e2e293bbcf4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf++N7CRBK7hj4Ov3rIwAAdHIIACePv5Xqftj/Kn16AJRP5gEc\nzkP2j3hyW0kFxGc07oDSB89VVMdNpuBgAlF520wI8fVWmgM63mVQFuUNzFgYt1iM\nYgxFWTSzrJRkPsMlI02S34puie7RNJRI4aawklN1zxP/scXYPyS/tmITuDBMxfpr\nJuCpPLnlUzpd6ZCSO22smnEkIzMSWm55TG4e+d2eZFS8mzDbmdLqkntTMput6hdh\nmGZqKcOsAycFX3BxjOTW22e5Nm603ECO1rqpvub+TwEKwK18jg9HKdOaZj33kOGe\nFRUpJTBa7opC2wPNmL4q1EqlCYAcMXdD2bZp452AknoZ+vGZdxU3lTM9b7+60PA=\n=5J5e\n-----END PGP SIGNATURE-----\n", "payload": "tree 8e207fa4177b403d9b724aca45b791195a606503\nparent 95a6279de70db29668bc7fe6eac19f0c81ef9070\nparent a52341d784b3b7a6acacae4c2f461de735651fee\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610343291 +0900\ncommitter GitHub <noreply@github.com> 1610343291 +0900\n\nRollup merge of #80881 - jyn514:intra-doc-self, r=GuillaumeGomez\n\n Fix intra-doc links to `Self` and `crate`\n\nCloses https://github.com/rust-lang/rust/issues/77732.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2249d2fd83c2323189f1be02477e2e293bbcf4", "html_url": "https://github.com/rust-lang/rust/commit/6e2249d2fd83c2323189f1be02477e2e293bbcf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e2249d2fd83c2323189f1be02477e2e293bbcf4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95a6279de70db29668bc7fe6eac19f0c81ef9070", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a6279de70db29668bc7fe6eac19f0c81ef9070", "html_url": "https://github.com/rust-lang/rust/commit/95a6279de70db29668bc7fe6eac19f0c81ef9070"}, {"sha": "a52341d784b3b7a6acacae4c2f461de735651fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a52341d784b3b7a6acacae4c2f461de735651fee", "html_url": "https://github.com/rust-lang/rust/commit/a52341d784b3b7a6acacae4c2f461de735651fee"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "9252ed2e831e32ab8dc3607e967d76afda4afd07", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6e2249d2fd83c2323189f1be02477e2e293bbcf4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2249d2fd83c2323189f1be02477e2e293bbcf4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=6e2249d2fd83c2323189f1be02477e2e293bbcf4", "patch": "@@ -504,15 +504,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             match res {\n                 // FIXME(#76467): make this fallthrough to lookup the associated\n                 // item a separate function.\n-                Res::Def(DefKind::AssocFn | DefKind::AssocConst, _) => {\n-                    assert_eq!(ns, ValueNS);\n-                }\n-                Res::Def(DefKind::AssocTy, _) => {\n-                    assert_eq!(ns, TypeNS);\n-                }\n-                Res::Def(DefKind::Variant, _) => {\n-                    return handle_variant(cx, res, extra_fragment);\n-                }\n+                Res::Def(DefKind::AssocFn | DefKind::AssocConst, _) => assert_eq!(ns, ValueNS),\n+                Res::Def(DefKind::AssocTy, _) => assert_eq!(ns, TypeNS),\n+                Res::Def(DefKind::Variant, _) => return handle_variant(cx, res, extra_fragment),\n                 // Not a trait item; just return what we found.\n                 Res::Primitive(ty) => {\n                     if extra_fragment.is_some() {\n@@ -522,12 +516,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     }\n                     return Ok((res, Some(ty.as_str().to_owned())));\n                 }\n-                Res::Def(DefKind::Mod, _) => {\n-                    return Ok((res, extra_fragment.clone()));\n-                }\n-                _ => {\n-                    return Ok((res, extra_fragment.clone()));\n-                }\n+                _ => return Ok((res, extra_fragment.clone())),\n             }\n         }\n \n@@ -1024,12 +1013,18 @@ impl LinkCollector<'_, '_> {\n \n         let resolved_self;\n         // replace `Self` with suitable item's parent name\n-        if path_str.starts_with(\"Self::\") {\n+        let is_lone_self = path_str == \"Self\";\n+        let is_lone_crate = path_str == \"crate\";\n+        if path_str.starts_with(\"Self::\") || is_lone_self {\n             if let Some(ref name) = self_name {\n-                resolved_self = format!(\"{}::{}\", name, &path_str[6..]);\n-                path_str = &resolved_self;\n+                if is_lone_self {\n+                    path_str = name;\n+                } else {\n+                    resolved_self = format!(\"{}::{}\", name, &path_str[6..]);\n+                    path_str = &resolved_self;\n+                }\n             }\n-        } else if path_str.starts_with(\"crate::\") {\n+        } else if path_str.starts_with(\"crate::\") || is_lone_crate {\n             use rustc_span::def_id::CRATE_DEF_INDEX;\n \n             // HACK(jynelson): rustc_resolve thinks that `crate` is the crate currently being documented.\n@@ -1038,8 +1033,12 @@ impl LinkCollector<'_, '_> {\n             // HACK(jynelson)(2): If we just strip `crate::` then suddenly primitives become ambiguous\n             // (consider `crate::char`). Instead, change it to `self::`. This works because 'self' is now the crate root.\n             // FIXME(#78696): This doesn't always work.\n-            resolved_self = format!(\"self::{}\", &path_str[\"crate::\".len()..]);\n-            path_str = &resolved_self;\n+            if is_lone_crate {\n+                path_str = \"self\";\n+            } else {\n+                resolved_self = format!(\"self::{}\", &path_str[\"crate::\".len()..]);\n+                path_str = &resolved_self;\n+            }\n             module_id = DefId { krate, index: CRATE_DEF_INDEX };\n         }\n "}, {"sha": "54902f12eb18ccc70c209d2fb905dc6c3fe3e720", "filename": "src/test/rustdoc/intra-doc-crate/auxiliary/self.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e2249d2fd83c2323189f1be02477e2e293bbcf4/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2249d2fd83c2323189f1be02477e2e293bbcf4/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fauxiliary%2Fself.rs?ref=6e2249d2fd83c2323189f1be02477e2e293bbcf4", "patch": "@@ -1,4 +1,7 @@\n #![crate_name = \"cross_crate_self\"]\n+\n+/// Link to [Self]\n+/// Link to [crate]\n pub struct S;\n \n impl S {"}, {"sha": "4db63b12b6bb75f16306674fd2c65b19d1990ed0", "filename": "src/test/rustdoc/intra-doc-crate/self.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e2249d2fd83c2323189f1be02477e2e293bbcf4/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2249d2fd83c2323189f1be02477e2e293bbcf4/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-crate%2Fself.rs?ref=6e2249d2fd83c2323189f1be02477e2e293bbcf4", "patch": "@@ -1,6 +1,9 @@\n // aux-build:self.rs\n+// build-aux-docs\n \n extern crate cross_crate_self;\n \n // @has self/struct.S.html '//a[@href=\"../self/struct.S.html#method.f\"]' \"Self::f\"\n+// @has self/struct.S.html '//a[@href=\"../self/struct.S.html\"]' \"Self\"\n+// @has self/struct.S.html '//a[@href=\"../cross_crate_self/index.html\"]' \"crate\"\n pub use cross_crate_self::S;"}]}