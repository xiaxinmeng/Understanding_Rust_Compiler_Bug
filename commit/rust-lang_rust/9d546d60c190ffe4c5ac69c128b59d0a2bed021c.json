{"sha": "9d546d60c190ffe4c5ac69c128b59d0a2bed021c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNTQ2ZDYwYzE5MGZmZTRjNWFjNjljMTI4YjU5ZDBhMmJlZDAyMWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-20T05:24:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-20T19:38:44Z"}, "message": "rustdoc: Display tuple structs correctly\n\nThe fields of tuple structs recently gained the ability to have privacy\nassociated with them, but rustdoc was not updated accodingly. This moves the\nstruct field filtering to the rendering phase in order to preserve the ordering\nof struct fields to allow tuple structs to have their private fields printed as\nunderscores.\n\nCloses #13594", "tree": {"sha": "e104e8aa6c5b6c99f1c4c56c938047b7cdc5fdfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e104e8aa6c5b6c99f1c4c56c938047b7cdc5fdfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d546d60c190ffe4c5ac69c128b59d0a2bed021c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d546d60c190ffe4c5ac69c128b59d0a2bed021c", "html_url": "https://github.com/rust-lang/rust/commit/9d546d60c190ffe4c5ac69c128b59d0a2bed021c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d546d60c190ffe4c5ac69c128b59d0a2bed021c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba25fecfeffdbc96d31172f483bd20cffa635b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba25fecfeffdbc96d31172f483bd20cffa635b3e", "html_url": "https://github.com/rust-lang/rust/commit/ba25fecfeffdbc96d31172f483bd20cffa635b3e"}], "stats": {"total": 74, "additions": 51, "deletions": 23}, "files": [{"sha": "3f1c99cffd640228e7948fb8735cf607ae4b6d8c", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d546d60c190ffe4c5ac69c128b59d0a2bed021c/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d546d60c190ffe4c5ac69c128b59d0a2bed021c/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=9d546d60c190ffe4c5ac69c128b59d0a2bed021c", "patch": "@@ -652,7 +652,7 @@ pub enum Type {\n     Proc(~ClosureDecl),\n     /// extern \"ABI\" fn\n     BareFunction(~BareFunctionDecl),\n-    Tuple(Vec<Type> ),\n+    Tuple(Vec<Type>),\n     Vector(~Type),\n     FixedVector(~Type, ~str),\n     String,\n@@ -713,25 +713,24 @@ impl Clean<Type> for ast::Ty {\n }\n \n #[deriving(Clone, Encodable, Decodable)]\n-pub struct StructField {\n-    pub type_: Type,\n+pub enum StructField {\n+    HiddenStructField,\n+    TypedStructField(Type),\n }\n \n impl Clean<Item> for ast::StructField {\n     fn clean(&self) -> Item {\n         let (name, vis) = match self.node.kind {\n-            ast::NamedField(id, vis) => (Some(id), Some(vis)),\n-            _ => (None, None)\n+            ast::NamedField(id, vis) => (Some(id), vis),\n+            ast::UnnamedField(vis) => (None, vis)\n         };\n         Item {\n             name: name.clean(),\n             attrs: self.node.attrs.clean().move_iter().collect(),\n             source: self.span.clean(),\n-            visibility: vis,\n+            visibility: Some(vis),\n             id: self.node.id,\n-            inner: StructFieldItem(StructField {\n-                type_: self.node.ty.clean(),\n-            }),\n+            inner: StructFieldItem(TypedStructField(self.node.ty.clean())),\n         }\n     }\n }\n@@ -837,7 +836,7 @@ impl Clean<Item> for doctree::Variant {\n #[deriving(Clone, Encodable, Decodable)]\n pub enum VariantKind {\n     CLikeVariant,\n-    TupleVariant(Vec<Type> ),\n+    TupleVariant(Vec<Type>),\n     StructVariant(VariantStruct),\n }\n "}, {"sha": "aff9a29c838ab73d5b2891ac4d55a61e2e84d856", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9d546d60c190ffe4c5ac69c128b59d0a2bed021c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d546d60c190ffe4c5ac69c128b59d0a2bed021c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9d546d60c190ffe4c5ac69c128b59d0a2bed021c", "patch": "@@ -1345,16 +1345,22 @@ fn item_struct(w: &mut Writer, it: &clean::Item,\n                        Some(&s.generics),\n                        s.struct_type,\n                        s.fields.as_slice(),\n-                       s.fields_stripped,\n                        \"\",\n                        true));\n     try!(write!(w, \"</pre>\"));\n \n     try!(document(w, it));\n+    let mut fields = s.fields.iter().filter(|f| {\n+        match f.inner {\n+            clean::StructFieldItem(clean::HiddenStructField) => false,\n+            clean::StructFieldItem(clean::TypedStructField(..)) => true,\n+            _ => false,\n+        }\n+    }).peekable();\n     match s.struct_type {\n-        doctree::Plain if s.fields.len() > 0 => {\n+        doctree::Plain if fields.peek().is_some() => {\n             try!(write!(w, \"<h2 class='fields'>Fields</h2>\\n<table>\"));\n-            for field in s.fields.iter() {\n+            for field in fields {\n                 try!(write!(w, \"<tr><td id='structfield.{name}'>\\\n                                   <code>{name}</code></td><td>\",\n                               name = field.name.get_ref().as_slice()));\n@@ -1400,7 +1406,6 @@ fn item_enum(w: &mut Writer, it: &clean::Item, e: &clean::Enum) -> fmt::Result {\n                                                None,\n                                                s.struct_type,\n                                                s.fields.as_slice(),\n-                                               s.fields_stripped,\n                                                \"    \",\n                                                false));\n                         }\n@@ -1429,9 +1434,18 @@ fn item_enum(w: &mut Writer, it: &clean::Item, e: &clean::Enum) -> fmt::Result {\n                 clean::VariantItem(ref var) => {\n                     match var.kind {\n                         clean::StructVariant(ref s) => {\n+                            let mut fields = s.fields.iter().filter(|f| {\n+                                match f.inner {\n+                                    clean::StructFieldItem(ref t) => match *t {\n+                                        clean::HiddenStructField => false,\n+                                        clean::TypedStructField(..) => true,\n+                                    },\n+                                    _ => false,\n+                                }\n+                            });\n                             try!(write!(w, \"<h3 class='fields'>Fields</h3>\\n\n                                               <table>\"));\n-                            for field in s.fields.iter() {\n+                            for field in fields {\n                                 try!(write!(w, \"<tr><td \\\n                                                   id='variant.{v}.field.{f}'>\\\n                                                   <code>{f}</code></td><td>\",\n@@ -1460,7 +1474,6 @@ fn render_struct(w: &mut Writer, it: &clean::Item,\n                  g: Option<&clean::Generics>,\n                  ty: doctree::StructType,\n                  fields: &[clean::Item],\n-                 fields_stripped: bool,\n                  tab: &str,\n                  structhead: bool) -> fmt::Result {\n     try!(write!(w, \"{}{}{}\",\n@@ -1474,17 +1487,21 @@ fn render_struct(w: &mut Writer, it: &clean::Item,\n     match ty {\n         doctree::Plain => {\n             try!(write!(w, \" \\\\{\\n{}\", tab));\n+            let mut fields_stripped = false;\n             for field in fields.iter() {\n                 match field.inner {\n-                    clean::StructFieldItem(ref ty) => {\n+                    clean::StructFieldItem(clean::HiddenStructField) => {\n+                        fields_stripped = true;\n+                    }\n+                    clean::StructFieldItem(clean::TypedStructField(ref ty)) => {\n                         try!(write!(w, \"    {}{}: {},\\n{}\",\n                                       VisSpace(field.visibility),\n                                       field.name.get_ref().as_slice(),\n-                                      ty.type_,\n+                                      *ty,\n                                       tab));\n                     }\n-                    _ => unreachable!()\n-                }\n+                    _ => unreachable!(),\n+                };\n             }\n \n             if fields_stripped {\n@@ -1499,8 +1516,11 @@ fn render_struct(w: &mut Writer, it: &clean::Item,\n                     try!(write!(w, \", \"));\n                 }\n                 match field.inner {\n-                    clean::StructFieldItem(ref field) => {\n-                        try!(write!(w, \"{}\", field.type_));\n+                    clean::StructFieldItem(clean::HiddenStructField) => {\n+                        try!(write!(w, \"_\"))\n+                    }\n+                    clean::StructFieldItem(clean::TypedStructField(ref ty)) => {\n+                        try!(write!(w, \"{}{}\", VisSpace(field.visibility), *ty))\n                     }\n                     _ => unreachable!()\n                 }"}, {"sha": "9b6d04f2ca44297652e9810bdb1996a23f4e855b", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d546d60c190ffe4c5ac69c128b59d0a2bed021c/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d546d60c190ffe4c5ac69c128b59d0a2bed021c/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=9d546d60c190ffe4c5ac69c128b59d0a2bed021c", "patch": "@@ -129,12 +129,21 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n                 }\n             }\n \n-            clean::ViewItemItem(..) | clean::StructFieldItem(..) => {\n+            clean::ViewItemItem(..) => {\n                 if i.visibility != Some(ast::Public) {\n                     return None\n                 }\n             }\n \n+            clean::StructFieldItem(..) => {\n+                if i.visibility != Some(ast::Public) {\n+                    return Some(clean::Item {\n+                        inner: clean::StructFieldItem(clean::HiddenStructField),\n+                        ..i\n+                    })\n+                }\n+            }\n+\n             // handled below\n             clean::ModuleItem(..) => {}\n "}]}