{"sha": "829b70330e93779575daa35fc4ddc1dd0df15efa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOWI3MDMzMGU5Mzc3OTU3NWRhYTM1ZmM0ZGRjMWRkMGRmMTVlZmE=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-11-07T00:07:32Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-11-14T06:33:39Z"}, "message": "always add an unreachable branch on matches to give more info to llvm about which values are possible", "tree": {"sha": "7a099761e087209ab308405a69ed2dc0b641c62d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a099761e087209ab308405a69ed2dc0b641c62d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/829b70330e93779575daa35fc4ddc1dd0df15efa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/829b70330e93779575daa35fc4ddc1dd0df15efa", "html_url": "https://github.com/rust-lang/rust/commit/829b70330e93779575daa35fc4ddc1dd0df15efa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/829b70330e93779575daa35fc4ddc1dd0df15efa/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b53f0a6620c3451a10573ea5c5a51b4c18088ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b53f0a6620c3451a10573ea5c5a51b4c18088ec", "html_url": "https://github.com/rust-lang/rust/commit/9b53f0a6620c3451a10573ea5c5a51b4c18088ec"}], "stats": {"total": 73, "additions": 42, "deletions": 31}, "files": [{"sha": "439f028ca8add0ab6a68443564c49b41684e7c37", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/829b70330e93779575daa35fc4ddc1dd0df15efa/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829b70330e93779575daa35fc4ddc1dd0df15efa/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=829b70330e93779575daa35fc4ddc1dd0df15efa", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let num_enum_variants = self.hir.num_variants(adt_def);\n                 let used_variants = variants.count();\n                 let mut otherwise_block = None;\n-                let mut target_blocks = Vec::with_capacity(num_enum_variants);\n+                let mut target_blocks = Vec::with_capacity(num_enum_variants + 1);\n                 let mut targets = Vec::with_capacity(used_variants + 1);\n                 let mut values = Vec::with_capacity(used_variants);\n                 let tcx = self.hir.tcx();\n@@ -205,7 +205,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 if let Some(otherwise_block) = otherwise_block {\n                     targets.push(otherwise_block);\n                 } else {\n-                    values.pop();\n+                    let unreachable_block = self.cfg.start_new_block();\n+                    targets.push(unreachable_block);\n+                    target_blocks.push(unreachable_block);\n                 }\n                 debug!(\"num_enum_variants: {}, tested variants: {:?}, variants: {:?}\",\n                        num_enum_variants, values, variants);"}, {"sha": "660b6346c57f16cfde0c095096dfc0404727aaf7", "filename": "src/test/codegen/match.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/829b70330e93779575daa35fc4ddc1dd0df15efa/src%2Ftest%2Fcodegen%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829b70330e93779575daa35fc4ddc1dd0df15efa/src%2Ftest%2Fcodegen%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmatch.rs?ref=829b70330e93779575daa35fc4ddc1dd0df15efa", "patch": "@@ -21,12 +21,15 @@ pub enum E {\n #[no_mangle]\n pub fn exhaustive_match(e: E) {\n // CHECK: switch{{.*}}, label %[[OTHERWISE:[a-zA-Z0-9_]+]] [\n-// CHECK-NEXT: i[[TY:[0-9]+]] [[DISCR:[0-9]+]], label %[[TRUE:[a-zA-Z0-9_]+]]\n+// CHECK-NEXT: i[[TY:[0-9]+]] [[DISCR:[0-9]+]], label %[[A:[a-zA-Z0-9_]+]]\n+// CHECK-NEXT: i[[TY:[0-9]+]] [[DISCR:[0-9]+]], label %[[B:[a-zA-Z0-9_]+]]\n // CHECK-NEXT: ]\n-// CHECK: [[TRUE]]:\n+// CHECK: [[A]]:\n // CHECK-NEXT: br label %[[EXIT:[a-zA-Z0-9_]+]]\n-// CHECK: [[OTHERWISE]]:\n+// CHECK: [[B]]:\n // CHECK-NEXT: br label %[[EXIT:[a-zA-Z0-9_]+]]\n+// CHECK: [[OTHERWISE]]:\n+// CHECK-NEXT: unreachable\n     match e {\n         E::A => (),\n         E::B => (),"}, {"sha": "318db7a9e3e1ab84a34e4d75d2dc03663eb2b59e", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/829b70330e93779575daa35fc4ddc1dd0df15efa/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829b70330e93779575daa35fc4ddc1dd0df15efa/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=829b70330e93779575daa35fc4ddc1dd0df15efa", "patch": "@@ -54,53 +54,56 @@ fn main() {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n //      _5 = discriminant(_2);\n-//      switchInt(_5) -> [0isize: bb5, otherwise: bb3];\n+//      switchInt(_5) -> [0isize: bb5, 1isize: bb3, otherwise: bb7];\n //  }\n //  bb1: { // arm1\n //      StorageLive(_7);\n //      _7 = _3;\n //      _1 = (const 1i32, _7);\n //      StorageDead(_7);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n //  bb2: { // binding3(empty) and arm3\n //      _1 = (const 3i32, const 3i32);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n //  bb3: {\n-//      falseEdges -> [real: bb7, imaginary: bb4]; //pre_binding1\n+//      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n //  }\n //  bb4: {\n-//      falseEdges -> [real: bb10, imaginary: bb5]; //pre_binding2\n+//      falseEdges -> [real: bb11, imaginary: bb5]; //pre_binding2\n //  }\n //  bb5: {\n //      falseEdges -> [real: bb2, imaginary: bb6]; //pre_binding3\n //  }\n //  bb6: {\n //      unreachable;\n //  }\n-//  bb7: { // binding1 and guard\n+//  bb7: {\n+//      unreachable;\n+//  }\n+//  bb8: { // binding1 and guard\n //      StorageLive(_3);\n //      _3 = ((_2 as Some).0: i32);\n //      StorageLive(_6);\n-//      _6 = const guard() -> bb8;\n+//      _6 = const guard() -> bb9;\n //  }\n-//  bb8: { // end of guard\n-//      switchInt(_6) -> [0u8: bb9, otherwise: bb1];\n+//  bb9: { // end of guard\n+//      switchInt(_6) -> [0u8: bb10, otherwise: bb1];\n //  }\n-//  bb9: { // to pre_binding2\n+//  bb10: { // to pre_binding2\n //      falseEdges -> [real: bb4, imaginary: bb4];\n //  }\n-//  bb10: { // bindingNoLandingPads.before.mir2 and arm2\n+//  bb11: { // bindingNoLandingPads.before.mir2 and arm2\n //      StorageLive(_4);\n //      _4 = ((_2 as Some).0: i32);\n //      StorageLive(_8);\n //      _8 = _4;\n //      _1 = (const 2i32, _8);\n //      StorageDead(_8);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n-//  bb11: {\n+//  bb12: {\n //      ...\n //      return;\n //  }\n@@ -111,53 +114,56 @@ fn main() {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n //      _5 = discriminant(_2);\n-//      switchInt(_5) -> [0isize: bb4, otherwise: bb3];\n+//      switchInt(_5) -> [0isize: bb4, 1isize: bb3, otherwise: bb7];\n //  }\n //  bb1: { // arm1\n //      StorageLive(_7);\n //      _7 = _3;\n //      _1 = (const 1i32, _7);\n //      StorageDead(_7);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n //  bb2: { // binding3(empty) and arm3\n //      _1 = (const 3i32, const 3i32);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n //  bb3: {\n-//      falseEdges -> [real: bb7, imaginary: bb4]; //pre_binding1\n+//      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n //  }\n //  bb4: {\n //      falseEdges -> [real: bb2, imaginary: bb5]; //pre_binding2\n //  }\n //  bb5: {\n-//      falseEdges -> [real: bb10, imaginary: bb6]; //pre_binding3\n+//      falseEdges -> [real: bb11, imaginary: bb6]; //pre_binding3\n //  }\n //  bb6: {\n //      unreachable;\n //  }\n-//  bb7: { // binding1 and guard\n+//  bb7: {\n+//      unreachable;\n+//  }\n+//  bb8: { // binding1 and guard\n //      StorageLive(_3);\n //      _3 = ((_2 as Some).0: i32);\n //      StorageLive(_6);\n-//      _6 = const guard() -> bb8;\n+//      _6 = const guard() -> bb9;\n //  }\n-//  bb8: { // end of guard\n-//      switchInt(_6) -> [0u8: bb9, otherwise: bb1];\n+//  bb9: { // end of guard\n+//      switchInt(_6) -> [0u8: bb10, otherwise: bb1];\n //  }\n-//  bb9: { // to pre_binding2\n+//  bb10: { // to pre_binding2\n //      falseEdges -> [real: bb5, imaginary: bb4];\n //  }\n-//  bb10: { // binding2 and arm2\n+//  bb11: { // binding2 and arm2\n //      StorageLive(_4);\n //      _4 = ((_2 as Some).0: i32);\n //      StorageLive(_8);\n //      _8 = _4;\n //      _1 = (const 2i32, _8);\n //      StorageDead(_8);\n-//      goto -> bb11;\n+//      goto -> bb12;\n //  }\n-//  bb11: {\n+//  bb12: {\n //      ...\n //      return;\n //  }"}]}