{"sha": "31c5cec55bd8b43e6082f79dff888f52b585621d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYzVjZWM1NWJkOGI0M2U2MDgyZjc5ZGZmODg4ZjUyYjU4NTYyMWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-02T23:00:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-03T05:36:36Z"}, "message": "Purge placement new; Make borrowck know about unary move.\n\ncc #3071", "tree": {"sha": "22a99047877c7f42f141f0afeaa1641daf06ec01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a99047877c7f42f141f0afeaa1641daf06ec01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31c5cec55bd8b43e6082f79dff888f52b585621d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31c5cec55bd8b43e6082f79dff888f52b585621d", "html_url": "https://github.com/rust-lang/rust/commit/31c5cec55bd8b43e6082f79dff888f52b585621d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31c5cec55bd8b43e6082f79dff888f52b585621d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2bb2f08372ad6e688ea0b7915d003cd4053cfec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bb2f08372ad6e688ea0b7915d003cd4053cfec", "html_url": "https://github.com/rust-lang/rust/commit/c2bb2f08372ad6e688ea0b7915d003cd4053cfec"}], "stats": {"total": 361, "additions": 75, "deletions": 286}, "files": [{"sha": "c1f39a9470ca686279c05a35f0b5bc1889d5e837", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -887,7 +887,7 @@ struct port_set<T: send> : recv<T> {\n         while result == none && ports.len() > 0 {\n             let i = wait_many(ports.map(|p| p.header()));\n             alt move ports[i].try_recv() {\n-                some(m) {\n+                some(copy m) {\n                     result = some(move m);\n                 }\n                 none {\n@@ -907,7 +907,7 @@ struct port_set<T: send> : recv<T> {\n \n     fn recv() -> T {\n         match move self.try_recv() {\n-            some(x) { move x }\n+            some(copy x) { move x }\n             none { fail ~\"port_set: endpoints closed\" }\n         }\n     }"}, {"sha": "84675d9569ae6369adb844b3d8ae72a7d09efad1", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -4,6 +4,7 @@ export arena, arena_with_size;\n \n import list;\n import list::{list, cons, nil};\n+import unsafe::reinterpret_cast;\n \n type chunk = {data: ~[u8], mut fill: uint};\n \n@@ -27,7 +28,12 @@ fn arena() -> arena {\n     arena_with_size(32u)\n }\n \n-impl arena for arena {\n+#[abi = \"rust-intrinsic\"]\n+extern mod rusti {\n+    fn move_val_init<T>(&dst: T, -src: T);\n+}\n+\n+impl &arena {\n     fn alloc_grow(n_bytes: uint, align: uint) -> *() {\n         // Allocate a new chunk.\n         let mut head = list::head(self.chunks);\n@@ -59,10 +65,13 @@ impl arena for arena {\n     }\n \n     #[inline(always)]\n-    fn alloc(tydesc: *()) -> *() {\n+    fn alloc<T>(op: fn() -> T) -> &self/T {\n         unsafe {\n-            let tydesc = tydesc as *sys::type_desc;\n-            self.alloc_inner((*tydesc).size, (*tydesc).align)\n+            let tydesc = sys::get_type_desc::<T>();\n+            let ptr = self.alloc_inner((*tydesc).size, (*tydesc).align);\n+            let ptr: *mut T = reinterpret_cast(ptr);\n+            rusti::move_val_init(*ptr, op());\n+            return reinterpret_cast(ptr);\n         }\n     }\n }"}, {"sha": "36ac307ea5cf7d5bca3be2d6c91a3adac1bdbb91", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -81,7 +81,7 @@ enum def {\n     def_ty(def_id),\n     def_prim_ty(prim_ty),\n     def_ty_param(def_id, uint),\n-    def_binding(node_id),\n+    def_binding(node_id, binding_mode),\n     def_use(def_id),\n     def_upvar(node_id /* local id of closed over var */,\n               @def    /* closed over def */,\n@@ -342,10 +342,6 @@ enum expr_ {\n     expr_ret(option<@expr>),\n     expr_log(int, @expr, @expr),\n \n-    expr_new(/* arena */ @expr,\n-             /* id for the alloc() call */ node_id,\n-             /* value */ @expr),\n-\n     /* just an assert */\n     expr_assert(@expr),\n "}, {"sha": "d1c553ec5ae950ec3185071f9b538937104f5320", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -55,7 +55,7 @@ pure fn def_id_of_def(d: def) -> def_id {\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n       def_use(id) | def_class(id, _) { id }\n       def_arg(id, _) | def_local(id, _) | def_self(id) |\n-      def_upvar(id, _, _) | def_binding(id) | def_region(id)\n+      def_upvar(id, _, _) | def_binding(id, _) | def_region(id)\n       | def_typaram_binder(id) {\n         local_def(id)\n       }"}, {"sha": "bbf6df468f860635de0a9a378d5823cbb23e1ead", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -395,11 +395,6 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n     let fold_mac = |x| fold_mac_(x, fld);\n \n     return alt e {\n-          expr_new(p, i, v) {\n-            expr_new(fld.fold_expr(p),\n-                     fld.new_id(i),\n-                     fld.fold_expr(v))\n-          }\n           expr_vstore(e, v) {\n             expr_vstore(fld.fold_expr(e), v)\n           }"}, {"sha": "f697685796f34fa98cef605b32716f1522b9fd21", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -27,7 +27,7 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              expr_call, expr_cast, expr_copy, expr_do_body,\n              expr_fail, expr_field, expr_fn, expr_fn_block, expr_if,\n              expr_index, expr_lit, expr_log, expr_loop,\n-             expr_loop_body, expr_mac, expr_move, expr_new, expr_path,\n+             expr_loop_body, expr_mac, expr_move, expr_path,\n              expr_rec, expr_ret, expr_swap, expr_struct, expr_tup, expr_unary,\n              expr_unary_move, expr_vec, expr_vstore, expr_while, extern_fn,\n              field, fn_decl, foreign_item, foreign_item_fn, foreign_mod,\n@@ -783,13 +783,6 @@ class parser {\n             }\n         } else if token::is_bar(self.token) {\n             return pexpr(self.parse_lambda_expr());\n-        } else if self.eat_keyword(~\"new\") {\n-            self.expect(token::LPAREN);\n-            let r = self.parse_expr();\n-            self.expect(token::RPAREN);\n-            let v = self.parse_expr();\n-            return self.mk_pexpr(lo, self.span.hi,\n-                              expr_new(r, self.get_id(), v));\n         } else if self.eat_keyword(~\"if\") {\n             return pexpr(self.parse_if_expr());\n         } else if self.eat_keyword(~\"for\") {"}, {"sha": "800800504fdc6b440afdbeb3b9a7b81b1d521486", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -1190,13 +1190,6 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         word_nbsp(s, ~\"assert\");\n         print_expr(s, expr);\n       }\n-      ast::expr_new(p, _, v) {\n-        word_nbsp(s, ~\"new\");\n-        popen(s);\n-        print_expr(s, p);\n-        pclose(s);\n-        print_expr(s, v);\n-      }\n       ast::expr_mac(m) { print_mac(s, m); }\n     }\n     s.ann.post(ann_node);"}, {"sha": "f2159af34e76e9cf34fa84f89678f670c064b258", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -361,10 +361,6 @@ fn visit_mac<E>(m: mac, e: E, v: vt<E>) {\n \n fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n     alt ex.node {\n-      expr_new(pool, _, val) {\n-        v.visit_expr(pool, e, v);\n-        v.visit_expr(val, e, v);\n-      }\n       expr_vstore(x, _) { v.visit_expr(x, e, v); }\n       expr_vec(es, _) { visit_exprs(es, e, v); }\n       expr_rec(flds, base) {"}, {"sha": "5478f8fb423a69096418ab5a7e78c1d21b73cf61", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -366,7 +366,7 @@ impl of tr for ast::def {\n           ast::def_ty(did) { ast::def_ty(did.tr(xcx)) }\n           ast::def_prim_ty(p) { ast::def_prim_ty(p) }\n           ast::def_ty_param(did, v) { ast::def_ty_param(did.tr(xcx), v) }\n-          ast::def_binding(nid) { ast::def_binding(xcx.tr_id(nid)) }\n+          ast::def_binding(nid, bm) { ast::def_binding(xcx.tr_id(nid), bm) }\n           ast::def_use(did) { ast::def_use(did.tr(xcx)) }\n           ast::def_upvar(nid1, def, nid2) {\n             ast::def_upvar(xcx.tr_id(nid1), @(*def).tr(xcx), xcx.tr_id(nid2))"}, {"sha": "977d373c3f9b7d2e02c1dd55b0d84ce2fe167534", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -178,7 +178,7 @@ impl public_methods for borrowck_ctxt {\n           ast::expr_copy(*) | ast::expr_cast(*) | ast::expr_fail(*) |\n           ast::expr_vstore(*) | ast::expr_vec(*) | ast::expr_tup(*) |\n           ast::expr_if(*) | ast::expr_log(*) |\n-          ast::expr_new(*) | ast::expr_binary(*) | ast::expr_while(*) |\n+          ast::expr_binary(*) | ast::expr_while(*) |\n           ast::expr_block(*) | ast::expr_loop(*) | ast::expr_alt(*) |\n           ast::expr_lit(*) | ast::expr_break | ast::expr_mac(*) |\n           ast::expr_again | ast::expr_rec(*) | ast::expr_struct(*) |\n@@ -266,7 +266,14 @@ impl public_methods for borrowck_ctxt {\n               mutbl:m, ty:expr_ty}\n           }\n \n-          ast::def_binding(pid) {\n+          ast::def_binding(vid, ast::bind_by_value) {\n+            // by-value bindings are basically local variables\n+            @{id:id, span:span,\n+              cat:cat_local(vid), lp:some(@lp_local(vid)),\n+              mutbl:m_imm, ty:expr_ty}\n+          }\n+\n+          ast::def_binding(pid, ast::bind_by_ref) {\n             // bindings are \"special\" since they are implicit pointers.\n \n             // lookup the mutability for this binding that we found in"}, {"sha": "4fa149b931b84efb804edff93c820d3244723547", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -579,6 +579,9 @@ fn check_loans_in_expr(expr: @ast::expr,\n         self.check_assignment(at_straight_up, dest);\n         self.check_move_out(src);\n       }\n+      ast::expr_unary_move(src) {\n+        self.check_move_out(src);\n+      }\n       ast::expr_assign(dest, _) |\n       ast::expr_assign_op(_, dest, _) {\n         self.check_assignment(at_straight_up, dest);"}, {"sha": "a868c9190f8f2f17b782cef4fe97dfea8610eaf0", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -465,7 +465,7 @@ fn visit_expr(expr: @expr, &&self: @ir_maps, vt: vt<@ir_maps>) {\n       // otherwise, live nodes are not required:\n       expr_index(*) | expr_field(*) | expr_vstore(*) |\n       expr_vec(*) | expr_rec(*) | expr_call(*) | expr_tup(*) |\n-      expr_new(*) | expr_log(*) | expr_binary(*) |\n+      expr_log(*) | expr_binary(*) |\n       expr_assert(*) | expr_addr_of(*) | expr_copy(*) |\n       expr_loop_body(*) | expr_do_body(*) | expr_cast(*) |\n       expr_unary(*) | expr_fail(*) |\n@@ -1094,7 +1094,6 @@ class liveness {\n             self.propagate_through_expr(l, ln)\n           }\n \n-          expr_new(l, _, r) |\n           expr_log(_, l, r) |\n           expr_index(l, r) |\n           expr_binary(_, l, r) {\n@@ -1463,7 +1462,7 @@ fn check_expr(expr: @expr, &&self: @liveness, vt: vt<@liveness>) {\n       expr_while(*) | expr_loop(*) |\n       expr_index(*) | expr_field(*) | expr_vstore(*) |\n       expr_vec(*) | expr_rec(*) | expr_tup(*) |\n-      expr_new(*) | expr_log(*) | expr_binary(*) |\n+      expr_log(*) | expr_binary(*) |\n       expr_assert(*) | expr_copy(*) |\n       expr_loop_body(*) | expr_do_body(*) |\n       expr_cast(*) | expr_unary(*) | expr_fail(*) |"}, {"sha": "243c2af19b23d1915bb6fca4d1ae06b030c79a6d", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -15,11 +15,11 @@ import syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param,\n                      def_typaram_binder};\n import syntax::ast::{def_upvar, def_use, def_variant, expr, expr_assign_op};\n import syntax::ast::{expr_binary, expr_cast, expr_field, expr_fn};\n-import syntax::ast::{expr_fn_block, expr_index, expr_new, expr_path};\n+import syntax::ast::{expr_fn_block, expr_index, expr_path};\n import syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n import syntax::ast::{def_upvar, def_use, def_variant, div, eq, expr};\n import syntax::ast::{expr_assign_op, expr_binary, expr_cast, expr_field};\n-import syntax::ast::{expr_fn, expr_fn_block, expr_index, expr_new, expr_path};\n+import syntax::ast::{expr_fn, expr_fn_block, expr_index, expr_path};\n import syntax::ast::{expr_struct, expr_unary, fn_decl, foreign_item};\n import syntax::ast::{foreign_item_fn, ge, gt, ident, trait_ref, impure_fn};\n import syntax::ast::{instance_var, item, item_class, item_const, item_enum};\n@@ -3734,7 +3734,7 @@ class Resolver {\n         let pat_id = pattern.id;\n         do walk_pat(pattern) |pattern| {\n             alt pattern.node {\n-                pat_ident(_, path, _)\n+                pat_ident(binding_mode, path, _)\n                         if !path.global && path.idents.len() == 1u => {\n \n                     // The meaning of pat_ident with no type parameters\n@@ -3781,7 +3781,7 @@ class Resolver {\n                                     // For pattern arms, we must use\n                                     // `def_binding` definitions.\n \n-                                    def_binding(pattern.id)\n+                                    def_binding(pattern.id, binding_mode)\n                                 }\n                                 IrrefutableMode {\n                                     // But for locals, we use `def_local`.\n@@ -4315,10 +4315,6 @@ class Resolver {\n                 self.impl_map.insert(expr.id,\n                                      self.current_module.impl_scopes);\n             }\n-            expr_new(container, _, _) {\n-                self.impl_map.insert(container.id,\n-                                     self.current_module.impl_scopes);\n-            }\n             _ {\n                 // Nothing to do.\n             }"}, {"sha": "78c24cdfdbf7021e93da53ef0eb13fc608272c91", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -2411,7 +2411,7 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n         assert (cx.fcx.llargs.contains_key(nid));\n         return take_local(cx.fcx.llargs, nid);\n       }\n-      ast::def_local(nid, _) | ast::def_binding(nid) {\n+      ast::def_local(nid, _) | ast::def_binding(nid, _) {\n         assert (cx.fcx.lllocals.contains_key(nid));\n         return take_local(cx.fcx.lllocals, nid);\n       }\n@@ -3771,43 +3771,6 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n             assert dest == ignore;\n             return trans_assign_op(bcx, e, op, dst, src);\n           }\n-          ast::expr_new(pool, alloc_id, val) {\n-            // First, call pool->alloc(tydesc) to get back a void*.\n-            // Then, cast this memory to the required type and evaluate value\n-            // into it.\n-            let ccx = bcx.ccx();\n-\n-            // Allocate space for the ptr that will be returned from\n-            // `pool.alloc()`:\n-            let ptr_ty = expr_ty(bcx, e);\n-            let ptr_ptr_val = alloc_ty(bcx, ptr_ty);\n-\n-            debug!{\"ptr_ty = %s\", ppaux::ty_to_str(tcx, ptr_ty)};\n-            debug!{\"ptr_ptr_val = %s\", val_str(ccx.tn, ptr_ptr_val)};\n-\n-            let void_ty = ty::mk_nil_ptr(tcx);\n-            let llvoid_ty = type_of(ccx, void_ty);\n-            let voidval = PointerCast(bcx, ptr_ptr_val, T_ptr(llvoid_ty));\n-            debug!{\"voidval = %s\", val_str(ccx.tn, voidval)};\n-\n-            let static_ti = get_tydesc(ccx, expr_ty(bcx, val));\n-            lazily_emit_all_tydesc_glue(ccx, static_ti);\n-            let lltydesc = PointerCast(bcx, static_ti.tydesc, llvoid_ty);\n-\n-            let origin = bcx.ccx().maps.method_map.get(alloc_id);\n-            let bcx = trans_call_inner(\n-                bcx, e.info(), node_id_type(bcx, alloc_id), void_ty,\n-                |bcx| impl::trans_method_callee(bcx, alloc_id,\n-                                                 pool, origin),\n-                arg_vals(~[lltydesc]),\n-                save_in(voidval));\n-\n-            debug!{\"dest = %s\", dest_str(ccx, dest)};\n-            let ptr_val = Load(bcx, ptr_ptr_val);\n-            debug!{\"ptr_val = %s\", val_str(ccx.tn, ptr_val)};\n-            let bcx = trans_expr(bcx, val, save_in(ptr_val));\n-            store_in_dest(bcx, ptr_val, dest)\n-          }\n           _ {\n             bcx.tcx().sess.span_bug(e.span, ~\"trans_expr reached \\\n                                              fall-through case\");"}, {"sha": "c5a35b4b587bae447ee2aef9bcd515868224951c", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -228,9 +228,6 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n       expr_log(_, _, val) {\n         node_type_needs(cx, use_tydesc, val.id);\n       }\n-      expr_new(_, _, v) {\n-        node_type_needs(cx, use_repr, v.id);\n-      }\n       expr_call(f, _, _) {\n         vec::iter(ty::ty_fn_args(ty::node_id_to_type(cx.ccx.tcx, f.id)), |a| {\n             alt a.mode {"}, {"sha": "eb39d4ec561c95adf2d4a8bdae933c752a5953cb", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -525,7 +525,7 @@ fn expr_to_constr_arg(tcx: ty::ctxt, e: @expr) -> @constr_arg_use {\n       expr_path(p) {\n         alt tcx.def_map.find(e.id) {\n           some(def_local(nid, _)) | some(def_arg(nid, _)) |\n-          some(def_binding(nid)) | some(def_upvar(nid, _, _)) {\n+          some(def_binding(nid, _)) | some(def_upvar(nid, _, _)) {\n             return @respan(p.span,\n                         carg_ident({ident: p.idents[0], node: nid}));\n           }\n@@ -762,7 +762,7 @@ fn local_node_id_to_def(fcx: fn_ctxt, i: node_id) -> option<def> {\n fn local_node_id_to_def_id(fcx: fn_ctxt, i: node_id) -> option<def_id> {\n     alt local_node_id_to_def(fcx, i) {\n       some(def_local(nid, _)) | some(def_arg(nid, _)) |\n-      some(def_binding(nid)) | some(def_upvar(nid, _, _)) {\n+      some(def_binding(nid, _)) | some(def_upvar(nid, _, _)) {\n         some(local_def(nid))\n       }\n       _ { none }"}, {"sha": "35b2560f00c066322033a3a461a10244073a45e6", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 47, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -70,7 +70,7 @@ import astconv::{ast_conv, ast_path_to_ty, ast_ty_to_ty};\n import astconv::{ast_region_to_region};\n import collect::{methods}; // ccx.to_ty()\n import middle::ty::{tv_vid, vid};\n-import regionmanip::{replace_bound_regions_in_fn_ty, region_of};\n+import regionmanip::{replace_bound_regions_in_fn_ty};\n import rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n import rscope::{in_binding_rscope, region_scope, type_rscope};\n import syntax::ast::ty_i;\n@@ -1846,51 +1846,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           }\n         }\n       }\n-      ast::expr_new(p, alloc_id, v) {\n-        bot |= check_expr(fcx, p, none);\n-        bot |= check_expr(fcx, v, none);\n-\n-        let p_ty = fcx.expr_ty(p);\n-\n-        let lkup = method::lookup(fcx, p, p, expr.id, alloc_id,\n-                                  @~\"alloc\", p_ty, ~[], false);\n-        alt lkup.method() {\n-          some(entry) {\n-            fcx.ccx.method_map.insert(alloc_id, entry);\n-\n-            // Check that the alloc() method has the expected\n-            // type, which should be fn(tydesc: *()) -> *().\n-            let expected_ty = {\n-                let ty_nilp = ty::mk_ptr(tcx, {ty: ty::mk_nil(tcx),\n-                                              mutbl: ast::m_imm});\n-                let m = ast::expl(ty::default_arg_mode_for_ty(ty_nilp));\n-                ty::mk_fn(tcx, {purity: ast::impure_fn,\n-                                proto: ast::proto_any,\n-                                inputs: ~[{mode: m, ty: ty_nilp}],\n-                                output: ty_nilp,\n-                                ret_style: ast::return_val})\n-            };\n-\n-            demand::suptype(fcx, expr.span,\n-                           expected_ty, fcx.node_ty(alloc_id));\n-          }\n-\n-          none {\n-            let t_err = fcx.infcx.resolve_type_vars_if_possible(p_ty);\n-            let msg = fmt!{\"no `alloc()` method found for type `%s`\",\n-                           fcx.infcx.ty_to_str(t_err)};\n-            tcx.sess.span_err(expr.span, msg);\n-          }\n-        }\n-\n-        // The region value must have a type like &r.T.  The resulting\n-        // memory will be allocated into the region `r`.\n-        let pool_region = region_of(fcx, p);\n-        let v_ty = fcx.expr_ty(v);\n-        let res_ty = ty::mk_rptr(tcx, pool_region, {ty: v_ty,\n-                                                    mutbl: ast::m_imm});\n-        fcx.write_ty(expr.id, res_ty);\n-      }\n     }\n     if bot { fcx.write_bot(expr.id); }\n \n@@ -2204,7 +2159,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       ast::def_variant(_, id) | ast::def_class(id, _) {\n         return ty::lookup_item_type(fcx.ccx.tcx, id);\n       }\n-      ast::def_binding(nid) {\n+      ast::def_binding(nid, _) {\n         assert (fcx.locals.contains_key(nid));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, nid));\n         return no_params(typ);"}, {"sha": "e50ec14ccf91bd5e090f8b5ea8bcb4137d6add30", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -161,72 +161,3 @@ fn replace_bound_regions_in_fn_ty(\n         }\n     }\n }\n-\n-/* Returns the region that &expr should be placed into.  If expr is an\n- * lvalue, this will be the region of the lvalue.  Otherwise, if region is\n- * an rvalue, the semantics are that the result is stored into a temporary\n- * stack position and so the resulting region will be the enclosing block.\n- */\n-fn region_of(fcx: @fn_ctxt, expr: @ast::expr) -> ty::region {\n-    debug!{\"region_of(expr=%s)\", expr_to_str(expr)};\n-    return alt expr.node {\n-      ast::expr_path(path) {\n-        def(fcx, expr, lookup_def(fcx, path.span, expr.id))}\n-      ast::expr_field(base, _, _) {\n-        deref(fcx, base)}\n-      ast::expr_index(base, _) {\n-        deref(fcx, base)}\n-      ast::expr_unary(ast::deref, base) {\n-        deref(fcx, base)}\n-      _ {\n-        borrow(fcx, expr)}\n-    };\n-\n-    fn borrow(fcx: @fn_ctxt, expr: @ast::expr) -> ty::region {\n-        ty::encl_region(fcx.ccx.tcx, expr.id)\n-    }\n-\n-    fn deref(fcx: @fn_ctxt, base: @ast::expr) -> ty::region {\n-        let base_ty = fcx.expr_ty(base);\n-        let base_ty = structurally_resolved_type(fcx, base.span, base_ty);\n-        alt ty::get(base_ty).struct {\n-          ty::ty_rptr(region, _) { region }\n-          ty::ty_box(_) | ty::ty_uniq(_) { borrow(fcx, base) }\n-          _ { region_of(fcx, base) }\n-        }\n-    }\n-\n-    fn def(fcx: @fn_ctxt, expr: @ast::expr, d: ast::def) -> ty::region {\n-        alt d {\n-          ast::def_arg(local_id, _) |\n-          ast::def_local(local_id, _) |\n-          ast::def_binding(local_id) {\n-            debug!{\"region_of.def/arg/local/binding(id=%d)\", local_id};\n-            let local_scope = fcx.ccx.tcx.region_map.get(local_id);\n-            ty::re_scope(local_scope)\n-          }\n-          ast::def_upvar(_, inner, _) {\n-            debug!{\"region_of.def/upvar\"};\n-            def(fcx, expr, *inner)\n-          }\n-          ast::def_self(*) {\n-            alt fcx.in_scope_regions.find(ty::br_self) {\n-              some(r) {r}\n-              none {\n-                // eventually, this should never happen... self should\n-                // always be an &self.T rptr\n-                borrow(fcx, expr)\n-              }\n-            }\n-          }\n-          ast::def_fn(_, _) | ast::def_mod(_) |\n-          ast::def_foreign_mod(_) | ast::def_const(_) |\n-          ast::def_use(_) | ast::def_variant(_, _) |\n-          ast::def_ty(_) | ast::def_prim_ty(_) |\n-          ast::def_ty_param(_, _) | ast::def_typaram_binder(*) |\n-          ast::def_class(_, _) | ast::def_region(_) {\n-            ty::re_static\n-          }\n-        }\n-    }\n-}"}, {"sha": "84d05a8aee235046ae79fcf47293ba78fd7aa904", "filename": "src/rustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -99,10 +99,6 @@ fn visit_expr(e: @ast::expr, wbcx: wb_ctxt, v: wb_vt) {\n         }\n       }\n \n-      ast::expr_new(_, alloc_id, _) {\n-        resolve_type_vars_for_node(wbcx, e.span, alloc_id);\n-      }\n-\n       ast::expr_binary(*) | ast::expr_unary(*) | ast::expr_assign_op(*)\n         | ast::expr_index(*) {\n         maybe_resolve_type_vars_for_node(wbcx, e.span, e.callee_id);"}, {"sha": "8ccb2e61d41381b76d246a89b1f2e6d1c234169a", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -15,11 +15,12 @@ fn item_check(t: &tree) -> int {\n \n fn bottom_up_tree(arena: &arena::arena, item: int, depth: int) -> &tree {\n     if depth > 0 {\n-        return new(*arena) node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n-                             bottom_up_tree(arena, 2 * item, depth - 1),\n-                             item);\n+        return arena.alloc(\n+            || node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n+                    bottom_up_tree(arena, 2 * item, depth - 1),\n+                    item));\n     }\n-    return new(*arena) nil;\n+    return arena.alloc(|| nil);\n }\n \n fn main(args: ~[~str]) {"}, {"sha": "53bb3a6d0653ae165efc78e8bb113a8131498a51", "filename": "src/test/compile-fail/borrowck-unary-move-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -0,0 +1,9 @@\n+class noncopyable {\n+    i: (); new() { self.i = (); } drop { #error[\"dropped\"]; }\n+}\n+enum wrapper = noncopyable;\n+\n+fn main() {\n+    let x1 = wrapper(noncopyable());\n+    let _x2 = move *x1; //~ ERROR moving out of enum content\n+}\n\\ No newline at end of file"}, {"sha": "1c8117fd82084489450d37d0e606854fee374ddb", "filename": "src/test/compile-fail/borrowck-unary-move.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -0,0 +1,11 @@\n+fn foo(+x: ~int) -> int {\n+    let y = &*x; //~ NOTE loan of argument granted here\n+    free(move x); //~ ERROR moving out of argument prohibited due to outstanding loan\n+    *y\n+}\n+\n+fn free(+_x: ~int) {\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "2cbf91c8d2a3e68992031a695f2ce954fd57bdd7", "filename": "src/test/compile-fail/placement-new-bad-method-type.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c2bb2f08372ad6e688ea0b7915d003cd4053cfec/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bb2f08372ad6e688ea0b7915d003cd4053cfec/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fplacement-new-bad-method-type.rs?ref=c2bb2f08372ad6e688ea0b7915d003cd4053cfec", "patch": "@@ -1,19 +0,0 @@\n-import libc, unsafe;\n-\n-enum malloc_pool = ();\n-\n-trait alloc {\n-    fn alloc(sz: int, align: int) -> *();\n-}\n-\n-impl methods of alloc for malloc_pool {\n-    fn alloc(sz: int, align: int) -> *() {\n-        fail;\n-    }\n-}\n-\n-fn main() {\n-    let p = &malloc_pool(());\n-    let x = new(*p) 4u;\n-    //~^ ERROR mismatched types: expected `fn(*()) -> *()`\n-}"}, {"sha": "60c70bfec3073092707918abada80aa1ec9bf2a4", "filename": "src/test/run-pass/placement-new-arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -3,7 +3,7 @@ import std::arena::arena;\n \n fn main() {\n     let p = &arena();\n-    let x = new(*p) 4u;\n+    let x = p.alloc(|| 4u);\n     io::print(fmt!{\"%u\", *x});\n     assert *x == 4u;\n }"}, {"sha": "96e56a7d8e5caa16c66f68e281bd603bb16cd22d", "filename": "src/test/run-pass/placement-new-leaky.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c2bb2f08372ad6e688ea0b7915d003cd4053cfec/src%2Ftest%2Frun-pass%2Fplacement-new-leaky.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bb2f08372ad6e688ea0b7915d003cd4053cfec/src%2Ftest%2Frun-pass%2Fplacement-new-leaky.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-leaky.rs?ref=c2bb2f08372ad6e688ea0b7915d003cd4053cfec", "patch": "@@ -1,27 +0,0 @@\n-import libc, unsafe;\n-\n-enum malloc_pool = ();\n-\n-impl methods for malloc_pool {\n-    fn alloc_inner(sz: uint, align: uint) -> *() {\n-        unsafe {\n-            unsafe::reinterpret_cast(libc::malloc(sz as libc::size_t))\n-        }\n-    }\n-    fn alloc(tydesc: *()) -> *() {\n-        unsafe {\n-            let tydesc = tydesc as *sys::type_desc;\n-            self.alloc_inner((*tydesc).size, (*tydesc).align)\n-        }\n-    }\n-}\n-\n-fn main() {\n-    let p = &malloc_pool(());\n-    let x = new(*p) 4u;\n-    io::print(fmt!{\"%u\", *x});\n-    assert *x == 4u;\n-    unsafe {\n-        libc::free(unsafe::reinterpret_cast(x));\n-    }\n-}"}, {"sha": "9cc4e2abca9fc94a97c9ef0505025b783680234e", "filename": "src/test/run-pass/regions-mock-trans-impls.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c5cec55bd8b43e6082f79dff888f52b585621d/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs?ref=31c5cec55bd8b43e6082f79dff888f52b585621d", "patch": "@@ -1,6 +1,6 @@\n+use std;\n import libc, sys, unsafe;\n-\n-enum arena = ();\n+import std::arena::arena;\n \n type bcx = {\n     fcx: &fcx\n@@ -15,34 +15,19 @@ type ccx = {\n     x: int\n };\n \n-impl arena for arena {\n-    fn alloc_inner(sz: uint, _align: uint) -> *() unsafe {\n-        return unsafe::reinterpret_cast(libc::malloc(sz as libc::size_t));\n-    }\n-    fn alloc(tydesc: *()) -> *() {\n-        unsafe {\n-            let tydesc = tydesc as *sys::type_desc;\n-            self.alloc_inner((*tydesc).size, (*tydesc).align)\n-        }\n-    }\n-}\n-\n fn h(bcx : &bcx) -> &bcx {\n-    return new(*bcx.fcx.arena) { fcx: bcx.fcx };\n+    return bcx.fcx.arena.alloc(|| { fcx: bcx.fcx });\n }\n \n fn g(fcx : &fcx) {\n     let bcx = { fcx: fcx };\n-    let bcx2 = h(&bcx);\n-    unsafe {\n-        libc::free(unsafe::reinterpret_cast(bcx2));\n-    }\n+    h(&bcx);\n }\n \n fn f(ccx : &ccx) {\n-    let a = arena(());\n-    let fcx = { arena: &a, ccx: ccx };\n-    return g(&fcx);\n+    let a = arena();\n+    let fcx = &{ arena: &a, ccx: ccx };\n+    return g(fcx);\n }\n \n fn main() {"}]}