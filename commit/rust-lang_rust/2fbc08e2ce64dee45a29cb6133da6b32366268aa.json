{"sha": "2fbc08e2ce64dee45a29cb6133da6b32366268aa", "node_id": "C_kwDOAAsO6NoAKDJmYmMwOGUyY2U2NGRlZTQ1YTI5Y2I2MTMzZGE2YjMyMzY2MjY4YWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-14T06:40:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-14T06:40:58Z"}, "message": "Auto merge of #100516 - compiler-errors:rollup-fgrfeb3, r=compiler-errors\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #99646 (Only point out a single function parameter if we have a single arg incompatibility)\n - #100299 (make `clean::Item::span` return `Option` instead of dummy span)\n - #100335 (Rustdoc-Json: Add `Path` type for traits.)\n - #100367 (Suggest the path separator when a dot is used on a trait)\n - #100431 (Enum variant ctor inherits the stability of the enum variant)\n - #100446 (Suggest removing a semicolon after impl/trait items)\n - #100468 (Use an extensionless `x` script for non-Windows)\n - #100479 (Argument type error improvements)\n\nFailed merges:\n\n - #100483 (Point to generic or arg if it's the self type of unsatisfied projection predicate)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1f98e1b9929f847869ccbbc86f2f241e81126588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f98e1b9929f847869ccbbc86f2f241e81126588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fbc08e2ce64dee45a29cb6133da6b32366268aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbc08e2ce64dee45a29cb6133da6b32366268aa", "html_url": "https://github.com/rust-lang/rust/commit/2fbc08e2ce64dee45a29cb6133da6b32366268aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fbc08e2ce64dee45a29cb6133da6b32366268aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d70c0ecfae6dd9cb00ffae9ad806c47256c9ef15", "url": "https://api.github.com/repos/rust-lang/rust/commits/d70c0ecfae6dd9cb00ffae9ad806c47256c9ef15", "html_url": "https://github.com/rust-lang/rust/commit/d70c0ecfae6dd9cb00ffae9ad806c47256c9ef15"}, {"sha": "b3e76aa491e798bdc998d67f0b327147cf675734", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e76aa491e798bdc998d67f0b327147cf675734", "html_url": "https://github.com/rust-lang/rust/commit/b3e76aa491e798bdc998d67f0b327147cf675734"}], "stats": {"total": 1112, "additions": 843, "deletions": 269}, "files": [{"sha": "772b81992c46b9252de05eb66a0c2653f951ad6f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -1424,7 +1424,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// E0271, like `src/test/ui/issues/issue-39970.stderr`.\n     #[tracing::instrument(\n         level = \"debug\",\n-        skip(self, diag, secondary_span, swap_secondary_and_primary, force_label)\n+        skip(self, diag, secondary_span, swap_secondary_and_primary, prefer_label)\n     )]\n     pub fn note_type_err(\n         &self,\n@@ -1434,7 +1434,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         mut values: Option<ValuePairs<'tcx>>,\n         terr: &TypeError<'tcx>,\n         swap_secondary_and_primary: bool,\n-        force_label: bool,\n+        prefer_label: bool,\n     ) {\n         let span = cause.span();\n \n@@ -1612,7 +1612,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             TypeError::ObjectUnsafeCoercion(_) => {}\n             _ => {\n                 let mut label_or_note = |span: Span, msg: &str| {\n-                    if force_label || &[span] == diag.span.primary_spans() {\n+                    if (prefer_label && is_simple_error) || &[span] == diag.span.primary_spans() {\n                         diag.span_label(span, msg);\n                     } else {\n                         diag.span_note(span, msg);"}, {"sha": "33bebfc2c9ab55c9fe94f20e2be462cc3e0045bd", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -2268,7 +2268,7 @@ impl<'a> Parser<'a> {\n                     attrs: attrs.into(),\n                     ty,\n                     pat,\n-                    span: lo.to(this.token.span),\n+                    span: lo.to(this.prev_token.span),\n                     id: DUMMY_NODE_ID,\n                     is_placeholder: false,\n                 },"}, {"sha": "c6dd5e7fda30ce2a3579de6645cd25b20bcb9372", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -675,14 +675,44 @@ impl<'a> Parser<'a> {\n             }\n             match parse_item(self) {\n                 Ok(None) => {\n+                    let is_unnecessary_semicolon = !items.is_empty()\n+                        // When the close delim is `)` in a case like the following, `token.kind` is expected to be `token::CloseDelim(Delimiter::Parenthesis)`,\n+                        // but the actual `token.kind` is `token::CloseDelim(Delimiter::Bracket)`.\n+                        // This is because the `token.kind` of the close delim is treated as the same as\n+                        // that of the open delim in `TokenTreesReader::parse_token_tree`, even if the delimiters of them are different.\n+                        // Therefore, `token.kind` should not be compared here.\n+                        //\n+                        // issue-60075.rs\n+                        // ```\n+                        // trait T {\n+                        //     fn qux() -> Option<usize> {\n+                        //         let _ = if true {\n+                        //         });\n+                        //          ^ this close delim\n+                        //         Some(4)\n+                        //     }\n+                        // ```\n+                        && self\n+                            .span_to_snippet(self.prev_token.span)\n+                            .map_or(false, |snippet| snippet == \"}\")\n+                        && self.token.kind == token::Semi;\n+                    let semicolon_span = self.token.span;\n                     // We have to bail or we'll potentially never make progress.\n                     let non_item_span = self.token.span;\n                     self.consume_block(Delimiter::Brace, ConsumeClosingDelim::Yes);\n-                    self.struct_span_err(non_item_span, \"non-item in item list\")\n-                        .span_label(open_brace_span, \"item list starts here\")\n+                    let mut err = self.struct_span_err(non_item_span, \"non-item in item list\");\n+                    err.span_label(open_brace_span, \"item list starts here\")\n                         .span_label(non_item_span, \"non-item starts here\")\n-                        .span_label(self.prev_token.span, \"item list ends here\")\n-                        .emit();\n+                        .span_label(self.prev_token.span, \"item list ends here\");\n+                    if is_unnecessary_semicolon {\n+                        err.span_suggestion(\n+                            semicolon_span,\n+                            \"consider removing this semicolon\",\n+                            \"\",\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                    err.emit();\n                     break;\n                 }\n                 Ok(Some(item)) => items.extend(item),"}, {"sha": "f884e04a9511254977a3a96cf40142e8129f98ed", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -460,7 +460,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                         AnnotationKind::Required,\n                         InheritDeprecation::Yes,\n                         InheritConstStability::No,\n-                        InheritStability::No,\n+                        InheritStability::Yes,\n                         |_| {},\n                     );\n                 }\n@@ -600,6 +600,9 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n \n     fn visit_variant(&mut self, var: &'tcx Variant<'tcx>) {\n         self.check_missing_stability(self.tcx.hir().local_def_id(var.id), var.span);\n+        if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n+            self.check_missing_stability(self.tcx.hir().local_def_id(ctor_hir_id), var.span);\n+        }\n         intravisit::walk_variant(self, var);\n     }\n "}, {"sha": "09c1f44826fa4b41772c5921931041849d17a6ad", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -985,27 +985,45 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let ns = source.namespace();\n         let is_expected = &|res| source.is_expected(res);\n \n-        let path_sep = |err: &mut Diagnostic, expr: &Expr| match expr.kind {\n-            ExprKind::Field(_, ident) => {\n+        let path_sep = |err: &mut Diagnostic, expr: &Expr, kind: DefKind| {\n+            const MESSAGE: &str = \"use the path separator to refer to an item\";\n+\n+            let (lhs_span, rhs_span) = match &expr.kind {\n+                ExprKind::Field(base, ident) => (base.span, ident.span),\n+                ExprKind::MethodCall(_, receiver, _, span) => (receiver.span, *span),\n+                _ => return false,\n+            };\n+\n+            if lhs_span.eq_ctxt(rhs_span) {\n                 err.span_suggestion(\n-                    expr.span,\n-                    \"use the path separator to refer to an item\",\n-                    format!(\"{}::{}\", path_str, ident),\n+                    lhs_span.between(rhs_span),\n+                    MESSAGE,\n+                    \"::\",\n                     Applicability::MaybeIncorrect,\n                 );\n                 true\n-            }\n-            ExprKind::MethodCall(ref segment, ..) => {\n-                let span = expr.span.with_hi(segment.ident.span.hi());\n-                err.span_suggestion(\n-                    span,\n-                    \"use the path separator to refer to an item\",\n-                    format!(\"{}::{}\", path_str, segment.ident),\n+            } else if kind == DefKind::Struct\n+            && let Some(lhs_source_span) = lhs_span.find_ancestor_inside(expr.span)\n+            && let Ok(snippet) = self.r.session.source_map().span_to_snippet(lhs_source_span)\n+            {\n+                // The LHS is a type that originates from a macro call.\n+                // We have to add angle brackets around it.\n+\n+                err.span_suggestion_verbose(\n+                    lhs_source_span.until(rhs_span),\n+                    MESSAGE,\n+                    format!(\"<{snippet}>::\"),\n                     Applicability::MaybeIncorrect,\n                 );\n                 true\n+            } else {\n+                // Either we were unable to obtain the source span / the snippet or\n+                // the LHS originates from a macro call and it is not a type and thus\n+                // there is no way to replace `.` with `::` and still somehow suggest\n+                // valid Rust code.\n+\n+                false\n             }\n-            _ => false,\n         };\n \n         let find_span = |source: &PathSource<'_>, err: &mut Diagnostic| {\n@@ -1027,7 +1045,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             match source {\n                 PathSource::Expr(Some(\n                     parent @ Expr { kind: ExprKind::Field(..) | ExprKind::MethodCall(..), .. },\n-                )) if path_sep(err, &parent) => {}\n+                )) if path_sep(err, &parent, DefKind::Struct) => {}\n                 PathSource::Expr(\n                     None\n                     | Some(Expr {\n@@ -1143,8 +1161,11 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     }\n                 }\n             }\n-            (Res::Def(DefKind::Mod, _), PathSource::Expr(Some(parent))) => {\n-                if !path_sep(err, &parent) {\n+            (\n+                Res::Def(kind @ (DefKind::Mod | DefKind::Trait), _),\n+                PathSource::Expr(Some(parent)),\n+            ) => {\n+                if !path_sep(err, &parent, kind) {\n                     return false;\n                 }\n             }"}, {"sha": "a7df5320296cd77b7e52107a487fd4d33e8bf0cf", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -440,30 +440,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_expr: &hir::Expr<'tcx>,\n     ) {\n         // Next, let's construct the error\n-        let (error_span, full_call_span, ctor_of) = match &call_expr.kind {\n+        let (error_span, full_call_span, ctor_of, is_method) = match &call_expr.kind {\n             hir::ExprKind::Call(\n                 hir::Expr { hir_id, span, kind: hir::ExprKind::Path(qpath), .. },\n                 _,\n             ) => {\n                 if let Res::Def(DefKind::Ctor(of, _), _) =\n                     self.typeck_results.borrow().qpath_res(qpath, *hir_id)\n                 {\n-                    (call_span, *span, Some(of))\n+                    (call_span, *span, Some(of), false)\n                 } else {\n-                    (call_span, *span, None)\n+                    (call_span, *span, None, false)\n                 }\n             }\n-            hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, None),\n+            hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, None, false),\n             hir::ExprKind::MethodCall(path_segment, _, span) => {\n                 let ident_span = path_segment.ident.span;\n                 let ident_span = if let Some(args) = path_segment.args {\n                     ident_span.with_hi(args.span_ext.hi())\n                 } else {\n                     ident_span\n                 };\n-                (\n-                    *span, ident_span, None, // methods are never ctors\n-                )\n+                // methods are never ctors\n+                (*span, ident_span, None, true)\n             }\n             k => span_bug!(call_span, \"checking argument types on a non-call: `{:?}`\", k),\n         };\n@@ -545,7 +544,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let coerced_ty = expectation.only_has_type(self).unwrap_or(formal_input_ty);\n             let can_coerce = self.can_coerce(arg_ty, coerced_ty);\n             if !can_coerce {\n-                return Compatibility::Incompatible(None);\n+                return Compatibility::Incompatible(Some(ty::error::TypeError::Sorts(\n+                    ty::error::ExpectedFound::new(true, coerced_ty, arg_ty),\n+                )));\n             }\n \n             // Using probe here, since we don't want this subtyping to affect inference.\n@@ -659,7 +660,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             Applicability::MachineApplicable,\n                         );\n                     };\n-                    self.label_fn_like(&mut err, fn_def_id, callee_ty);\n+                    self.label_fn_like(&mut err, fn_def_id, callee_ty, Some(mismatch_idx), is_method);\n                     err.emit();\n                     return;\n                 }\n@@ -701,16 +702,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         errors.drain_filter(|error| {\n-                let Error::Invalid(provided_idx, expected_idx, Compatibility::Incompatible(error)) = error else { return false };\n+                let Error::Invalid(provided_idx, expected_idx, Compatibility::Incompatible(Some(e))) = error else { return false };\n                 let (provided_ty, provided_span) = provided_arg_tys[*provided_idx];\n                 let (expected_ty, _) = formal_and_expected_inputs[*expected_idx];\n                 let cause = &self.misc(provided_span);\n                 let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n-                if let Some(e) = error {\n-                    if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n-                        self.report_and_explain_type_error(trace, e).emit();\n-                        return true;\n-                    }\n+                if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n+                    self.report_and_explain_type_error(trace, e).emit();\n+                    return true;\n                 }\n                 false\n             });\n@@ -749,7 +748,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 format!(\"arguments to this {} are incorrect\", call_name),\n             );\n             // Call out where the function is defined\n-            self.label_fn_like(&mut err, fn_def_id, callee_ty);\n+            self.label_fn_like(\n+                &mut err,\n+                fn_def_id,\n+                callee_ty,\n+                Some(expected_idx.as_usize()),\n+                is_method,\n+            );\n             err.emit();\n             return;\n         }\n@@ -1031,7 +1036,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         // Call out where the function is defined\n-        self.label_fn_like(&mut err, fn_def_id, callee_ty);\n+        self.label_fn_like(&mut err, fn_def_id, callee_ty, None, is_method);\n \n         // And add a suggestion block for all of the parameters\n         let suggestion_text = match suggestion_text {\n@@ -1781,6 +1786,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         callable_def_id: Option<DefId>,\n         callee_ty: Option<Ty<'tcx>>,\n+        // A specific argument should be labeled, instead of all of them\n+        expected_idx: Option<usize>,\n+        is_method: bool,\n     ) {\n         let Some(mut def_id) = callable_def_id else {\n             return;\n@@ -1881,14 +1889,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .get_if_local(def_id)\n                 .and_then(|node| node.body_id())\n                 .into_iter()\n-                .flat_map(|id| self.tcx.hir().body(id).params);\n+                .flat_map(|id| self.tcx.hir().body(id).params)\n+                .skip(if is_method { 1 } else { 0 });\n \n-            for param in params {\n+            for (_, param) in params\n+                .into_iter()\n+                .enumerate()\n+                .filter(|(idx, _)| expected_idx.map_or(true, |expected_idx| expected_idx == *idx))\n+            {\n                 spans.push_span_label(param.span, \"\");\n             }\n \n             let def_kind = self.tcx.def_kind(def_id);\n             err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n+        } else if let Some(hir::Node::Expr(e)) = self.tcx.hir().get_if_local(def_id)\n+            && let hir::ExprKind::Closure(hir::Closure { body, .. }) = &e.kind\n+        {\n+            let param = expected_idx\n+                .and_then(|expected_idx| self.tcx.hir().body(*body).params.get(expected_idx));\n+            let (kind, span) = if let Some(param) = param {\n+                (\"closure parameter\", param.span)\n+            } else {\n+                (\"closure\", self.tcx.def_span(def_id))\n+            };\n+            err.span_note(span, &format!(\"{} defined here\", kind));\n         } else {\n             let def_kind = self.tcx.def_kind(def_id);\n             err.span_note("}, {"sha": "9a08a7be0f5f7198a5efe0c2add00948d3536e76", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -80,7 +80,7 @@ TESTS_IN_MINGW_2 := \\\n \tsrc/test/ui\n \n ci-mingw-subset-1:\n-\t$(Q)$(CFG_SRC_DIR)/x.sh test --stage 2 $(TESTS_IN_MINGW_2:%=--exclude %)\n+\t$(Q)$(CFG_SRC_DIR)/x test --stage 2 $(TESTS_IN_MINGW_2:%=--exclude %)\n ci-mingw-subset-2:\n \t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_MINGW_2)\n "}, {"sha": "14d0ffd75005fb5216aa13b9804f7fe1cc8a1f94", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-12/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -44,15 +44,15 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n \n-# NOTE: intentionally uses all of `x.py`, `x.sh`, and `x.ps1` to make sure they all work on Linux.\n+# NOTE: intentionally uses all of `x.py`, `x`, and `x.ps1` to make sure they all work on Linux.\n ENV SCRIPT ../x.py --stage 2 test --exclude src/tools/tidy && \\\n            # Run the `mir-opt` tests again but this time for a 32-bit target.\n            # This enforces that tests using `// EMIT_MIR_FOR_EACH_BIT_WIDTH` have\n            # both 32-bit and 64-bit outputs updated by the PR author, before\n            # the PR is approved and tested for merging.\n            # It will also detect tests lacking `// EMIT_MIR_FOR_EACH_BIT_WIDTH`,\n            # despite having different output on 32-bit vs 64-bit targets.\n-           ../x.sh --stage 2 test src/test/mir-opt \\\n+           ../x --stage 2 test src/test/mir-opt \\\n                              --host='' --target=i686-unknown-linux-gnu && \\\n            # Run the UI test suite again, but in `--pass=check` mode\n            #"}, {"sha": "ce06a79a21c3f58a770606027708e84b6552afa0", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -57,7 +57,7 @@ def check_generic_bound(bound):\n     if \"trait_bound\" in bound:\n         for param in bound[\"trait_bound\"][\"generic_params\"]:\n             check_generic_param(param)\n-        check_type(bound[\"trait_bound\"][\"trait\"])\n+        check_path(bound[\"trait_bound\"][\"trait\"])\n \n \n def check_decl(decl):\n@@ -66,35 +66,35 @@ def check_decl(decl):\n     if decl[\"output\"]:\n         check_type(decl[\"output\"])\n \n+def check_path(path):\n+    args = path[\"args\"]\n+    if args:\n+        if \"angle_bracketed\" in args:\n+            for arg in args[\"angle_bracketed\"][\"args\"]:\n+                if \"type\" in arg:\n+                    check_type(arg[\"type\"])\n+                elif \"const\" in arg:\n+                    check_type(arg[\"const\"][\"type\"])\n+            for binding in args[\"angle_bracketed\"][\"bindings\"]:\n+                if \"equality\" in binding[\"binding\"]:\n+                    term = binding[\"binding\"][\"equality\"]\n+                    if \"type\" in term: check_type(term[\"type\"])\n+                    elif \"const\" in term: check_type(term[\"const\"])\n+                elif \"constraint\" in binding[\"binding\"]:\n+                    for bound in binding[\"binding\"][\"constraint\"]:\n+                        check_generic_bound(bound)\n+        elif \"parenthesized\" in args:\n+            for input_ty in args[\"parenthesized\"][\"inputs\"]:\n+                check_type(input_ty)\n+            if args[\"parenthesized\"][\"output\"]:\n+                check_type(args[\"parenthesized\"][\"output\"])\n+    if not valid_id(path[\"id\"]):\n+        print(\"Type contained an invalid ID:\", path[\"id\"])\n+        sys.exit(1)\n \n def check_type(ty):\n     if ty[\"kind\"] == \"resolved_path\":\n-        for bound in ty[\"inner\"][\"param_names\"]:\n-            check_generic_bound(bound)\n-        args = ty[\"inner\"][\"args\"]\n-        if args:\n-            if \"angle_bracketed\" in args:\n-                for arg in args[\"angle_bracketed\"][\"args\"]:\n-                    if \"type\" in arg:\n-                        check_type(arg[\"type\"])\n-                    elif \"const\" in arg:\n-                        check_type(arg[\"const\"][\"type\"])\n-                for binding in args[\"angle_bracketed\"][\"bindings\"]:\n-                    if \"equality\" in binding[\"binding\"]:\n-                        term = binding[\"binding\"][\"equality\"]\n-                        if \"type\" in term: check_type(term[\"type\"])\n-                        elif \"const\" in term: check_type(term[\"const\"])\n-                    elif \"constraint\" in binding[\"binding\"]:\n-                        for bound in binding[\"binding\"][\"constraint\"]:\n-                            check_generic_bound(bound)\n-            elif \"parenthesized\" in args:\n-                for input_ty in args[\"parenthesized\"][\"inputs\"]:\n-                    check_type(input_ty)\n-                if args[\"parenthesized\"][\"output\"]:\n-                    check_type(args[\"parenthesized\"][\"output\"])\n-        if not valid_id(ty[\"inner\"][\"id\"]):\n-            print(\"Type contained an invalid ID:\", ty[\"inner\"][\"id\"])\n-            sys.exit(1)\n+        check_path(ty[\"inner\"])\n     elif ty[\"kind\"] == \"tuple\":\n         for ty in ty[\"inner\"]:\n             check_type(ty)\n@@ -111,7 +111,7 @@ def check_type(ty):\n         check_decl(ty[\"inner\"][\"decl\"])\n     elif ty[\"kind\"] == \"qualified_path\":\n         check_type(ty[\"inner\"][\"self_type\"])\n-        check_type(ty[\"inner\"][\"trait\"])\n+        check_path(ty[\"inner\"][\"trait\"])\n \n \n work_list = set([crate[\"root\"]])\n@@ -174,7 +174,7 @@ def check_type(ty):\n     elif item[\"kind\"] == \"impl\":\n         check_generics(item[\"inner\"][\"generics\"])\n         if item[\"inner\"][\"trait\"]:\n-            check_type(item[\"inner\"][\"trait\"])\n+            check_path(item[\"inner\"][\"trait\"])\n         if item[\"inner\"][\"blanket_impl\"]:\n             check_type(item[\"inner\"][\"blanket_impl\"])\n         check_type(item[\"inner\"][\"for\"])"}, {"sha": "1a4786c9b0664a056fa0243142e70d1c577e5fb5", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -415,29 +415,28 @@ impl Item {\n             .unwrap_or(false)\n     }\n \n-    pub(crate) fn span(&self, tcx: TyCtxt<'_>) -> Span {\n+    pub(crate) fn span(&self, tcx: TyCtxt<'_>) -> Option<Span> {\n         let kind = match &*self.kind {\n             ItemKind::StrippedItem(k) => k,\n             _ => &*self.kind,\n         };\n         match kind {\n-            ItemKind::ModuleItem(Module { span, .. }) => *span,\n-            ItemKind::ImplItem(box Impl { kind: ImplKind::Auto, .. }) => Span::dummy(),\n+            ItemKind::ModuleItem(Module { span, .. }) => Some(*span),\n+            ItemKind::ImplItem(box Impl { kind: ImplKind::Auto, .. }) => None,\n             ItemKind::ImplItem(box Impl { kind: ImplKind::Blanket(_), .. }) => {\n                 if let ItemId::Blanket { impl_id, .. } = self.item_id {\n-                    rustc_span(impl_id, tcx)\n+                    Some(rustc_span(impl_id, tcx))\n                 } else {\n                     panic!(\"blanket impl item has non-blanket ID\")\n                 }\n             }\n-            _ => {\n-                self.item_id.as_def_id().map(|did| rustc_span(did, tcx)).unwrap_or_else(Span::dummy)\n-            }\n+            _ => self.item_id.as_def_id().map(|did| rustc_span(did, tcx)),\n         }\n     }\n \n     pub(crate) fn attr_span(&self, tcx: TyCtxt<'_>) -> rustc_span::Span {\n-        crate::passes::span_of_attrs(&self.attrs).unwrap_or_else(|| self.span(tcx).inner())\n+        crate::passes::span_of_attrs(&self.attrs)\n+            .unwrap_or_else(|| self.span(tcx).map_or(rustc_span::DUMMY_SP, |span| span.inner()))\n     }\n \n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n@@ -2109,14 +2108,6 @@ impl Span {\n         self.0\n     }\n \n-    pub(crate) fn dummy() -> Self {\n-        Self(rustc_span::DUMMY_SP)\n-    }\n-\n-    pub(crate) fn is_dummy(&self) -> bool {\n-        self.0.is_dummy()\n-    }\n-\n     pub(crate) fn filename(&self, sess: &Session) -> FileName {\n         sess.source_map().span_to_filename(self.0)\n     }"}, {"sha": "6f029c66c0b7dfa9e1752ceb7a796298e67c78f8", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -301,13 +301,10 @@ impl<'tcx> Context<'tcx> {\n     /// may happen, for example, with externally inlined items where the source\n     /// of their crate documentation isn't known.\n     pub(super) fn src_href(&self, item: &clean::Item) -> Option<String> {\n-        self.href_from_span(item.span(self.tcx()), true)\n+        self.href_from_span(item.span(self.tcx())?, true)\n     }\n \n     pub(crate) fn href_from_span(&self, span: clean::Span, with_lines: bool) -> Option<String> {\n-        if span.is_dummy() {\n-            return None;\n-        }\n         let mut root = self.root_path();\n         let mut path = String::new();\n         let cnum = span.cnum(self.sess());"}, {"sha": "5ed5299e09bc0e537210c1588f0d42005f556f48", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -2677,7 +2677,7 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n         let contents = match fs::read_to_string(&path) {\n             Ok(contents) => contents,\n             Err(err) => {\n-                let span = item.span(tcx).inner();\n+                let span = item.span(tcx).map_or(rustc_span::DUMMY_SP, |span| span.inner());\n                 tcx.sess\n                     .span_err(span, &format!(\"failed to read file {}: {}\", path.display(), err));\n                 return false;"}, {"sha": "f37c54e42983f09dfb369718a473cfdb1a8a12a4", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -53,6 +53,7 @@ impl LocalSourcesCollector<'_, '_> {\n     fn add_local_source(&mut self, item: &clean::Item) {\n         let sess = self.tcx.sess;\n         let span = item.span(self.tcx);\n+        let Some(span) = span else { return };\n         // skip all synthetic \"files\"\n         if !is_real_and_local(span, sess) {\n             return;\n@@ -109,6 +110,7 @@ impl DocVisitor for SourceCollector<'_, '_> {\n \n         let tcx = self.cx.tcx();\n         let span = item.span(tcx);\n+        let Some(span) = span else { return };\n         let sess = tcx.sess;\n \n         // If we're not rendering sources, there's nothing to do."}, {"sha": "5f3793ead42baf7d6aa98cb10fa89eb7368854ab", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -59,7 +59,7 @@ impl JsonRenderer<'_> {\n             id: from_item_id_with_name(item_id, self.tcx, name),\n             crate_id: item_id.krate().as_u32(),\n             name: name.map(|sym| sym.to_string()),\n-            span: self.convert_span(span),\n+            span: span.and_then(|span| self.convert_span(span)),\n             visibility: self.convert_visibility(visibility),\n             docs,\n             attrs,\n@@ -428,10 +428,8 @@ impl FromWithTcx<clean::GenericBound> for GenericBound {\n         use clean::GenericBound::*;\n         match bound {\n             TraitBound(clean::PolyTrait { trait_, generic_params }, modifier) => {\n-                // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-                let trait_ = clean::Type::Path { path: trait_ }.into_tcx(tcx);\n                 GenericBound::TraitBound {\n-                    trait_,\n+                    trait_: trait_.into_tcx(tcx),\n                     generic_params: generic_params.into_tcx(tcx),\n                     modifier: from_trait_bound_modifier(modifier),\n                 }\n@@ -460,12 +458,7 @@ impl FromWithTcx<clean::Type> for Type {\n         };\n \n         match ty {\n-            clean::Type::Path { path } => Type::ResolvedPath {\n-                name: path.whole_name(),\n-                id: from_item_id(path.def_id().into(), tcx),\n-                args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n-                param_names: Vec::new(),\n-            },\n+            clean::Type::Path { path } => Type::ResolvedPath(path.into_tcx(tcx)),\n             clean::Type::DynTrait(bounds, lt) => Type::DynTrait(DynTrait {\n                 lifetime: lt.map(convert_lifetime),\n                 traits: bounds.into_tcx(tcx),\n@@ -487,16 +480,22 @@ impl FromWithTcx<clean::Type> for Type {\n                 mutable: mutability == ast::Mutability::Mut,\n                 type_: Box::new((*type_).into_tcx(tcx)),\n             },\n-            QPath { assoc, self_type, trait_, .. } => {\n-                // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-                let trait_ = clean::Type::Path { path: trait_ }.into_tcx(tcx);\n-                Type::QualifiedPath {\n-                    name: assoc.name.to_string(),\n-                    args: Box::new(assoc.args.clone().into_tcx(tcx)),\n-                    self_type: Box::new((*self_type).into_tcx(tcx)),\n-                    trait_: Box::new(trait_),\n-                }\n-            }\n+            QPath { assoc, self_type, trait_, .. } => Type::QualifiedPath {\n+                name: assoc.name.to_string(),\n+                args: Box::new(assoc.args.clone().into_tcx(tcx)),\n+                self_type: Box::new((*self_type).into_tcx(tcx)),\n+                trait_: trait_.into_tcx(tcx),\n+            },\n+        }\n+    }\n+}\n+\n+impl FromWithTcx<clean::Path> for Path {\n+    fn from_tcx(path: clean::Path, tcx: TyCtxt<'_>) -> Path {\n+        Path {\n+            name: path.whole_name(),\n+            id: from_item_id(path.def_id().into(), tcx),\n+            args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n         }\n     }\n }\n@@ -565,19 +564,14 @@ impl FromWithTcx<clean::PolyTrait> for PolyTrait {\n         clean::PolyTrait { trait_, generic_params }: clean::PolyTrait,\n         tcx: TyCtxt<'_>,\n     ) -> Self {\n-        PolyTrait {\n-            trait_: clean::Type::Path { path: trait_ }.into_tcx(tcx),\n-            generic_params: generic_params.into_tcx(tcx),\n-        }\n+        PolyTrait { trait_: trait_.into_tcx(tcx), generic_params: generic_params.into_tcx(tcx) }\n     }\n }\n \n impl FromWithTcx<clean::Impl> for Impl {\n     fn from_tcx(impl_: clean::Impl, tcx: TyCtxt<'_>) -> Self {\n         let provided_trait_methods = impl_.provided_trait_methods(tcx);\n         let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = impl_;\n-        // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-        let trait_ = trait_.map(|path| clean::Type::Path { path }.into_tcx(tcx));\n         // FIXME: use something like ImplKind in JSON?\n         let (synthetic, blanket_impl) = match kind {\n             clean::ImplKind::Normal | clean::ImplKind::FakeVaradic => (false, None),\n@@ -595,7 +589,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n                 .into_iter()\n                 .map(|x| x.to_string())\n                 .collect(),\n-            trait_,\n+            trait_: trait_.map(|path| path.into_tcx(tcx)),\n             for_: for_.into_tcx(tcx),\n             items: ids(items, tcx),\n             negative: negative_polarity,"}, {"sha": "48835abf9525b46b0e69be8cbbc51430b577761c", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -215,7 +215,6 @@ impl<'a, 'b> DocVisitor for CoverageCalculator<'a, 'b> {\n                     None,\n                 );\n \n-                let filename = i.span(self.ctx.tcx).filename(self.ctx.sess());\n                 let has_doc_example = tests.found_tests != 0;\n                 // The `expect_def_id()` should be okay because `local_def_id_to_hir_id`\n                 // would presumably panic if a fake `DefIndex` were passed.\n@@ -261,13 +260,16 @@ impl<'a, 'b> DocVisitor for CoverageCalculator<'a, 'b> {\n                 let should_have_docs = !should_be_ignored\n                     && (level != lint::Level::Allow || matches!(source, LintLevelSource::Default));\n \n-                debug!(\"counting {:?} {:?} in {:?}\", i.type_(), i.name, filename);\n-                self.items.entry(filename).or_default().count_item(\n-                    has_docs,\n-                    has_doc_example,\n-                    should_have_doc_example(self.ctx, i),\n-                    should_have_docs,\n-                );\n+                if let Some(span) = i.span(self.ctx.tcx) {\n+                    let filename = span.filename(self.ctx.sess());\n+                    debug!(\"counting {:?} {:?} in {:?}\", i.type_(), i.name, filename);\n+                    self.items.entry(filename).or_default().count_item(\n+                        has_docs,\n+                        has_doc_example,\n+                        should_have_doc_example(self.ctx, i),\n+                        should_have_docs,\n+                    );\n+                }\n             }\n         }\n "}, {"sha": "7dcad66b1f992b8df236aa0c59e23d7f275f622c", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 17;\n+pub const FORMAT_VERSION: u32 = 18;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -133,7 +133,7 @@ pub struct DynTrait {\n /// A trait and potential HRTBs\n pub struct PolyTrait {\n     #[serde(rename = \"trait\")]\n-    pub trait_: Type,\n+    pub trait_: Path,\n     /// Used for Higher-Rank Trait Bounds (HRTBs)\n     /// ```text\n     /// dyn for<'a> Fn() -> &'a i32\"\n@@ -447,7 +447,7 @@ pub enum WherePredicate {\n pub enum GenericBound {\n     TraitBound {\n         #[serde(rename = \"trait\")]\n-        trait_: Type,\n+        trait_: Path,\n         /// Used for Higher-Rank Trait Bounds (HRTBs)\n         /// ```text\n         /// where F: for<'a, 'b> Fn(&'a u8, &'b u8)\n@@ -481,12 +481,7 @@ pub enum Term {\n #[serde(tag = \"kind\", content = \"inner\")]\n pub enum Type {\n     /// Structs, enums, and traits\n-    ResolvedPath {\n-        name: String,\n-        id: Id,\n-        args: Option<Box<GenericArgs>>,\n-        param_names: Vec<GenericBound>,\n-    },\n+    ResolvedPath(Path),\n     DynTrait(DynTrait),\n     /// Parameterized types\n     Generic(String),\n@@ -527,10 +522,24 @@ pub enum Type {\n         args: Box<GenericArgs>,\n         self_type: Box<Type>,\n         #[serde(rename = \"trait\")]\n-        trait_: Box<Type>,\n+        trait_: Path,\n     },\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+pub struct Path {\n+    pub name: String,\n+    pub id: Id,\n+    /// Generic arguments to the type\n+    /// ```test\n+    /// std::borrow::Cow<'static, str>\n+    ///                 ^^^^^^^^^^^^^^\n+    ///                 |\n+    ///                 this part\n+    /// ```\n+    pub args: Option<Box<GenericArgs>>,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct FunctionPointer {\n     pub decl: FnDecl,\n@@ -574,7 +583,7 @@ pub struct Impl {\n     pub generics: Generics,\n     pub provided_trait_methods: Vec<String>,\n     #[serde(rename = \"trait\")]\n-    pub trait_: Option<Type>,\n+    pub trait_: Option<Path>,\n     #[serde(rename = \"for\")]\n     pub for_: Type,\n     pub items: Vec<Id>,"}, {"sha": "98ba8e99d820c79b1a8b20ef8e43402e591f5ae2", "filename": "src/test/rustdoc-json/fns/generic_args.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -14,7 +14,7 @@ pub trait GenericFoo<'a> {}\n // @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].name\" '\"F\"'\n // @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.default\" 'null'\n // @count - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" '$foo'\n+// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" '$foo'\n // @count - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[*]\" 1\n // @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][0]\" '\"f\"'\n // @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n@@ -24,12 +24,12 @@ pub fn generics<F: Foo>(f: F) {}\n // @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.where_predicates\" \"[]\"\n // @count - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[*]\" 1\n // @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].name\" '\"impl Foo\"'\n-// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $foo\n // @count - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[*]\" 1\n // @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][0]\" '\"f\"'\n // @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n // @count - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[*]\" 1\n-// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.id\" $foo\n pub fn impl_trait(f: impl Foo) {}\n \n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 3\n@@ -43,11 +43,11 @@ pub fn impl_trait(f: impl Foo) {}\n \n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\", \"kind\": \"generic\"}'\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n \n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.type\" '{\"inner\": \"G\", \"kind\": \"generic\"}'\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $generic_foo\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.trait.id\" $generic_foo\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[*]\" 1\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].name\" \\\"\\'a\\\"\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n@@ -57,7 +57,7 @@ pub fn impl_trait(f: impl Foo) {}\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.lifetime\" \\\"\\'b\\\"\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.type\" '{\"inner\": \"H\", \"kind\": \"generic\"}'\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.generic_params\" \"[]\"\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[*]\" 1\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].name\" \\\"\\'b\\\""}, {"sha": "46f250a99b9b665e993b5c27ac6111e3111e56ab", "filename": "src/test/rustdoc-json/fns/generic_returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -11,7 +11,7 @@ pub trait Foo {}\n // @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.inputs\" []\n // @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.kind\" '\"impl_trait\"'\n // @count - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[*]\" 1\n-// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[0].trait_bound.trait.id\" $foo\n pub fn get_foo() -> impl Foo {\n     Fooer {}\n }"}, {"sha": "e55e1e9400dc6c4b50df07521866249641dc08fd", "filename": "src/test/rustdoc-json/fns/generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -10,17 +10,17 @@ pub trait Wham {}\n // @count - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[*]\" 1\n // @is    - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].name\" '\"T\"'\n // @has   - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" false\n-// @has   - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" $wham_id\n+// @has   - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n // @is    - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.decl.inputs\" '[[\"w\", {\"inner\": \"T\", \"kind\": \"generic\"}]]'\n pub fn one_generic_param_fn<T: Wham>(w: T) {}\n \n // @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.where_predicates\" []\n // @count - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[*]\" 1\n // @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].name\" '\"impl Wham\"'\n // @has   - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" true\n-// @has   - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" $wham_id\n+// @has   - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n // @count - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[*]\" 1\n // @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][0]\" '\"w\"'\n // @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n-// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.inner.id\" $wham_id\n+// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.id\" $wham_id\n pub fn one_synthetic_generic_param_fn(w: impl Wham) {}"}, {"sha": "fb32d7c31bc9b3a4fcc6b7912685cb49b615cfe7", "filename": "src/test/rustdoc-json/impls/auto.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauto.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,18 @@\n+#![feature(no_core, auto_traits, lang_items)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+pub auto trait Bar {}\n+\n+/// has span\n+impl Foo {\n+    pub fn baz(&self) {}\n+}\n+\n+// Testing spans, so all tests below code\n+// @is auto.json \"$.index[*][?(@.kind=='impl' && @.inner.synthetic==true)].span\" null\n+// @is - \"$.index[*][?(@.docs=='has span')].span.begin\" \"[10, 0]\"\n+// @is - \"$.index[*][?(@.docs=='has span')].span.end\" \"[12, 1]\"\n+pub struct Foo;"}, {"sha": "ce2f3912ba650168f9f4630c8acde94aaf32ccd6", "filename": "src/test/rustdoc-json/traits/supertrait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -9,18 +9,18 @@ pub trait Loud {}\n \n // @set very_loud_id = - \"$.index[*][?(@.name=='VeryLoud')].id\"\n // @count - \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[*]\" 1\n-// @is -    \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[0].trait_bound.trait.inner.id\" $loud_id\n+// @is -    \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[0].trait_bound.trait.id\" $loud_id\n pub trait VeryLoud: Loud {}\n \n // @set sounds_good_id = - \"$.index[*][?(@.name=='SoundsGood')].id\"\n pub trait SoundsGood {}\n \n // @count - \"$.index[*][?(@.name=='MetalBand')].inner.bounds[*]\" 2\n-// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[0].trait_bound.trait.inner.id\" $very_loud_id\n-// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[1].trait_bound.trait.inner.id\" $sounds_good_id\n+// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[0].trait_bound.trait.id\" $very_loud_id\n+// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[1].trait_bound.trait.id\" $sounds_good_id\n pub trait MetalBand: VeryLoud + SoundsGood {}\n \n // @count - \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[*]\" 2\n-// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[1].trait_bound.trait.inner.id\" $very_loud_id\n-// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[0].trait_bound.trait.inner.id\" $sounds_good_id\n+// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[1].trait_bound.trait.id\" $very_loud_id\n+// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[0].trait_bound.trait.id\" $sounds_good_id\n pub trait DnabLatem: SoundsGood + VeryLoud {}"}, {"sha": "690dccc8287042e30095d29795928afae00453b5", "filename": "src/test/rustdoc-json/type/dyn.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -21,10 +21,10 @@ use std::fmt::Debug;\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].generic_params\" []\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].generic_params\" []\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].generic_params\" []\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.inner.name\" '\"Send\"'\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].trait.inner.name\" '\"Sync\"'\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.name\" '\"Fn\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.name\" '\"Send\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].trait.name\" '\"Sync\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;\n \n // @is - \"$.index[*][?(@.name=='RefFn')].kind\" \\\"typedef\\\"\n@@ -36,14 +36,13 @@ pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;\n // @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.lifetime\" null\n // @count - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[*]\" 1\n // @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.kind\" '\"resolved_path\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.name\" '\"Fn\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n pub type RefFn<'a> = &'a dyn for<'b> Fn(&'b i32) -> &'b i32;\n \n-// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.name\" '\"Send\"'\n-// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.inner.name\" '\"Debug\"'\n+// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.name\" '\"Send\"'\n+// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.name\" '\"Debug\"'\n pub type WeirdOrder = Box<dyn Send + Debug>;"}, {"sha": "5b0c4caee21869550698fa747f3635939d2cd9f7", "filename": "src/test/rustdoc-json/type/hrtb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -19,7 +19,7 @@ where\n // @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" null\n // @count - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[*]\" 1\n // @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].trait.name\" '\"Fn\"'\n pub fn dynfn(f: &dyn for<'a, 'b> Fn(&'a i32, &'b i32)) {\n     let zero = 0;\n     f(&zero, &zero);"}, {"sha": "303f0869578535b96d33c2a39cfefbcca30e72a7", "filename": "src/test/ui/argument-suggestions/invalid_arguments.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -24,7 +24,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:6:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n-   |    ^^^^^^^^^^^^ -------  -------\n+   |    ^^^^^^^^^^^^          -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:17:16\n@@ -38,7 +38,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:6:4\n    |\n LL | fn two_arg_same(_a: i32, _b: i32) {}\n-   |    ^^^^^^^^^^^^ -------  -------\n+   |    ^^^^^^^^^^^^ -------\n \n error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:18:3\n@@ -66,7 +66,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:7:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: f32) {}\n-   |    ^^^^^^^^^^^^ -------  -------\n+   |    ^^^^^^^^^^^^          -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:20:16\n@@ -80,7 +80,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:7:4\n    |\n LL | fn two_arg_diff(_a: i32, _b: f32) {}\n-   |    ^^^^^^^^^^^^ -------  -------\n+   |    ^^^^^^^^^^^^ -------\n \n error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:21:3\n@@ -108,7 +108,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n    |\n LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^ -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:25:21\n@@ -122,7 +122,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n    |\n LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^          -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:26:26\n@@ -136,7 +136,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n    |\n LL | fn three_arg_diff(_a: i32, _b: f32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^                   --------\n \n error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:28:3\n@@ -207,7 +207,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n    |\n LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^^^ -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:35:23\n@@ -221,7 +221,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n    |\n LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^^^          -------\n \n error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:36:26\n@@ -235,7 +235,7 @@ note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n    |\n LL | fn three_arg_repeat(_a: i32, _b: i32, _c: &str) {}\n-   |    ^^^^^^^^^^^^^^^^ -------  -------  --------\n+   |    ^^^^^^^^^^^^^^^^                   --------\n \n error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:38:3"}, {"sha": "804cb1aa322190344eecfd1d60c619cfce52f32a", "filename": "src/test/ui/argument-suggestions/issue-96638.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -2,7 +2,9 @@ error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n   --> $DIR/issue-96638.rs:8:5\n    |\n LL |     f(&x, \"\");\n-   |     ^ -- an argument of type `usize` is missing\n+   |     ^ --  -- expected `usize`, found `&str`\n+   |       |\n+   |       an argument of type `usize` is missing\n    |\n note: function defined here\n   --> $DIR/issue-96638.rs:1:4"}, {"sha": "b5dedf0f4fa05494a8b9dea6823f83639cda07ef", "filename": "src/test/ui/argument-suggestions/issue-97484.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -2,8 +2,9 @@ error[E0061]: this function takes 4 arguments but 7 arguments were supplied\n   --> $DIR/issue-97484.rs:12:5\n    |\n LL |     foo(&&A, B, C, D, E, F, G);\n-   |     ^^^      -  -        - argument of type `F` unexpected\n-   |              |  |\n+   |     ^^^      -  -     -  - argument of type `F` unexpected\n+   |              |  |     |\n+   |              |  |     expected `&E`, found struct `E`\n    |              |  argument of type `C` unexpected\n    |              argument of type `B` unexpected\n    |"}, {"sha": "7ec56afae1ce993e43d68e1b74b61da19f87bd03", "filename": "src/test/ui/argument-suggestions/too-long.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,41 @@\n+struct Qux;\n+\n+impl Qux {\n+    fn foo(\n+        &self,\n+        a: i32,\n+        b: i32,\n+        c: i32,\n+        d: i32,\n+        e: i32,\n+        f: i32,\n+        g: i32,\n+        h: i32,\n+        i: i32,\n+        j: i32,\n+        k: i32,\n+        l: i32,\n+    ) {\n+    }\n+}\n+\n+fn what(\n+    qux: &Qux,\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: &i32,\n+    g: i32,\n+    h: i32,\n+    i: i32,\n+    j: i32,\n+    k: i32,\n+    l: i32,\n+) {\n+    qux.foo(a, b, c, d, e, f, g, h, i, j, k, l);\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "bd430194c5edf6ec57b7f41fa34d243bf3ff4ca2", "filename": "src/test/ui/argument-suggestions/too-long.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/too-long.rs:37:28\n+   |\n+LL |     qux.foo(a, b, c, d, e, f, g, h, i, j, k, l);\n+   |         ---                ^ expected `i32`, found `&i32`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+note: associated function defined here\n+  --> $DIR/too-long.rs:4:8\n+   |\n+LL |     fn foo(\n+   |        ^^^\n+...\n+LL |         f: i32,\n+   |         ------\n+help: consider dereferencing the borrow\n+   |\n+LL |     qux.foo(a, b, c, d, e, *f, g, h, i, j, k, l);\n+   |                            +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1309041ab9a59b346c4b3b38d05055600c5d5dc0", "filename": "src/test/ui/argument-suggestions/two-mismatch-notes.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,11 @@\n+#[derive(Copy, Clone)]\n+struct Wrapper<T>(T);\n+\n+fn foo(_: fn(i32), _: Wrapper<i32>) {}\n+\n+fn f(_: u32) {}\n+\n+fn main() {\n+    let w = Wrapper::<isize>(1isize);\n+    foo(f, w); //~ ERROR arguments to this function are incorrect\n+}"}, {"sha": "7873cf964cbbc978b278bf3cf58b0a5320152d66", "filename": "src/test/ui/argument-suggestions/two-mismatch-notes.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,29 @@\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/two-mismatch-notes.rs:10:5\n+   |\n+LL |     foo(f, w);\n+   |     ^^^\n+   |\n+note: expected `i32`, found `u32`\n+  --> $DIR/two-mismatch-notes.rs:10:9\n+   |\n+LL |     foo(f, w);\n+   |         ^\n+   = note: expected fn pointer `fn(i32)`\n+                 found fn item `fn(u32) {f}`\n+note: expected `i32`, found `isize`\n+  --> $DIR/two-mismatch-notes.rs:10:12\n+   |\n+LL |     foo(f, w);\n+   |            ^\n+   = note: expected struct `Wrapper<i32>`\n+              found struct `Wrapper<isize>`\n+note: function defined here\n+  --> $DIR/two-mismatch-notes.rs:4:4\n+   |\n+LL | fn foo(_: fn(i32), _: Wrapper<i32>) {}\n+   |    ^^^ ----------  ---------------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e761c6c62a6cf43c549b4da0d70b4cff84605167", "filename": "src/test/ui/associated-types/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -10,7 +10,7 @@ note: function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:25:4\n    |\n LL | fn dent<C:Car>(c: C, color: C::Color) { c.chip_paint(color) }\n-   |    ^^^^        ----  ---------------\n+   |    ^^^^              ---------------\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:28:23\n@@ -24,7 +24,7 @@ note: function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:25:4\n    |\n LL | fn dent<C:Car>(c: C, color: C::Color) { c.chip_paint(color) }\n-   |    ^^^^        ----  ---------------\n+   |    ^^^^              ---------------\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:32:28\n@@ -38,7 +38,7 @@ note: associated function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:12:8\n    |\n LL |     fn chip_paint(&self, c: Self::Color) { }\n-   |        ^^^^^^^^^^ -----  --------------\n+   |        ^^^^^^^^^^        --------------\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:33:28\n@@ -52,7 +52,7 @@ note: associated function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:12:8\n    |\n LL |     fn chip_paint(&self, c: Self::Color) { }\n-   |        ^^^^^^^^^^ -----  --------------\n+   |        ^^^^^^^^^^        --------------\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c37d469890c08689134f3beadbd3a8ddd17e561b", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -10,7 +10,7 @@ note: function defined here\n   --> $DIR/associated-types-path-2.rs:13:8\n    |\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   |        ^^         ----  -------\n+   |        ^^               -------\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     f1(2i32, 4u32);"}, {"sha": "2494c3feb2a89206e5feff16ebf644aacdcb5e55", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -42,7 +42,7 @@ note: function defined here\n   --> $DIR/generator-desc.rs:8:4\n    |\n LL | fn fun<F: Future<Output = ()>>(f1: F, f2: F) {}\n-   |    ^^^                         -----  -----\n+   |    ^^^                                -----\n \n error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:14:26\n@@ -67,7 +67,7 @@ note: function defined here\n   --> $DIR/generator-desc.rs:8:4\n    |\n LL | fn fun<F: Future<Output = ()>>(f1: F, f2: F) {}\n-   |    ^^^                         -----  -----\n+   |    ^^^                                -----\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5cbdef218311416f5ed1669d6a3cb44cbb15d9d1", "filename": "src/test/ui/coercion/coerce-reborrow-multi-arg-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -12,7 +12,7 @@ note: function defined here\n   --> $DIR/coerce-reborrow-multi-arg-fail.rs:1:4\n    |\n LL | fn test<T>(_a: T, _b: T) {}\n-   |    ^^^^    -----  -----\n+   |    ^^^^           -----\n \n error: aborting due to previous error\n "}, {"sha": "1207dc7e7a2ff4415da00c5e039b3e4b16418d39", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -12,7 +12,7 @@ note: function defined here\n   --> $DIR/coerce-to-bang.rs:3:4\n    |\n LL | fn foo(x: usize, y: !, z: usize) { }\n-   |    ^^^ --------  ----  --------\n+   |    ^^^           ----\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:18:13\n@@ -28,7 +28,7 @@ note: function defined here\n   --> $DIR/coerce-to-bang.rs:3:4\n    |\n LL | fn foo(x: usize, y: !, z: usize) { }\n-   |    ^^^ --------  ----  --------\n+   |    ^^^           ----\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:26:12\n@@ -44,7 +44,7 @@ note: function defined here\n   --> $DIR/coerce-to-bang.rs:3:4\n    |\n LL | fn foo(x: usize, y: !, z: usize) { }\n-   |    ^^^ --------  ----  --------\n+   |    ^^^           ----\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:36:12\n@@ -60,7 +60,7 @@ note: function defined here\n   --> $DIR/coerce-to-bang.rs:3:4\n    |\n LL | fn foo(x: usize, y: !, z: usize) { }\n-   |    ^^^ --------  ----  --------\n+   |    ^^^           ----\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:45:12\n@@ -76,7 +76,7 @@ note: function defined here\n   --> $DIR/coerce-to-bang.rs:3:4\n    |\n LL | fn foo(x: usize, y: !, z: usize) { }\n-   |    ^^^ --------  ----  --------\n+   |    ^^^           ----\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:50:21"}, {"sha": "f03a47d5c2c75c4727ba65d9685265b190159a0f", "filename": "src/test/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -15,7 +15,7 @@ note: function defined here\n   --> $DIR/fn-item-type.rs:7:4\n    |\n LL | fn eq<T>(x: T, y: T) { }\n-   |    ^^    ----  ----\n+   |    ^^          ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:22:19\n@@ -34,7 +34,7 @@ note: function defined here\n   --> $DIR/fn-item-type.rs:7:4\n    |\n LL | fn eq<T>(x: T, y: T) { }\n-   |    ^^    ----  ----\n+   |    ^^          ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:29:23\n@@ -53,7 +53,7 @@ note: function defined here\n   --> $DIR/fn-item-type.rs:7:4\n    |\n LL | fn eq<T>(x: T, y: T) { }\n-   |    ^^    ----  ----\n+   |    ^^          ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:38:26\n@@ -72,7 +72,7 @@ note: function defined here\n   --> $DIR/fn-item-type.rs:7:4\n    |\n LL | fn eq<T>(x: T, y: T) { }\n-   |    ^^    ----  ----\n+   |    ^^          ----\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:45:19\n@@ -90,7 +90,7 @@ note: function defined here\n   --> $DIR/fn-item-type.rs:7:4\n    |\n LL | fn eq<T>(x: T, y: T) { }\n-   |    ^^    ----  ----\n+   |    ^^          ----\n \n error: aborting due to 5 previous errors\n "}, {"sha": "15b2bbeb7c29526b1bfb1a223ff465cf227dbca0", "filename": "src/test/ui/issues/issue-11374.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -14,7 +14,7 @@ note: associated function defined here\n   --> $DIR/issue-11374.rs:13:12\n    |\n LL |     pub fn read_to(&mut self, vec: &mut [u8]) {\n-   |            ^^^^^^^ ---------  --------------\n+   |            ^^^^^^^            --------------\n \n error: aborting due to previous error\n "}, {"sha": "e499d0572f607c278f7f6ad8334de0d29e3e34fb", "filename": "src/test/ui/issues/issue-18819.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -2,11 +2,13 @@ error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-18819.rs:16:5\n    |\n LL |     print_x(X);\n-   |     ^^^^^^^---\n-   |            ||\n-   |            |expected reference, found struct `X`\n-   |            an argument of type `&str` is missing\n+   |     ^^^^^^^--- an argument of type `&str` is missing\n    |\n+note: expected reference, found struct `X`\n+  --> $DIR/issue-18819.rs:16:13\n+   |\n+LL |     print_x(X);\n+   |             ^\n    = note: expected reference `&dyn Foo<Item = bool>`\n                  found struct `X`\n note: function defined here"}, {"sha": "e9b49c89bf162d519745cd1bbeadc824ac449e8d", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -8,7 +8,7 @@ note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:5:8\n    |\n LL |     fn zero(self) -> Foo { self }\n-   |        ^^^^ ----\n+   |        ^^^^\n help: remove the extra argument\n    |\n LL |     x.zero()\n@@ -24,7 +24,7 @@ note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:6:8\n    |\n LL |     fn one(self, _: isize) -> Foo { self }\n-   |        ^^^ ----  --------\n+   |        ^^^       --------\n help: provide the argument\n    |\n LL |      .one(/* isize */)\n@@ -40,7 +40,7 @@ note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:7:8\n    |\n LL |     fn two(self, _: isize, _: isize) -> Foo { self }\n-   |        ^^^ ----  --------  --------\n+   |        ^^^       --------  --------\n help: provide the argument\n    |\n LL |      .two(0, /* isize */);\n@@ -80,7 +80,7 @@ note: associated function defined here\n   --> $DIR/method-call-err-msg.rs:8:8\n    |\n LL |     fn three<T>(self, _: T, _: T, _: T) -> Foo { self }\n-   |        ^^^^^    ----  ----  ----  ----\n+   |        ^^^^^          ----  ----  ----\n help: provide the arguments\n    |\n LL |     y.three::<usize>(/* usize */, /* usize */, /* usize */);"}, {"sha": "63704735490faa9890e37d9ec496ac3085b6e985", "filename": "src/test/ui/parser/suggest-removing-semicolon-after-impl-trait-items.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fparser%2Fsuggest-removing-semicolon-after-impl-trait-items.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fparser%2Fsuggest-removing-semicolon-after-impl-trait-items.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest-removing-semicolon-after-impl-trait-items.fixed?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+trait Foo {\n+    fn bar() {} //~ ERROR non-item in item list\n+}\n+\n+fn main() {}"}, {"sha": "4650b05e20ce8852e5688087707d0cb9fd981e7e", "filename": "src/test/ui/parser/suggest-removing-semicolon-after-impl-trait-items.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fparser%2Fsuggest-removing-semicolon-after-impl-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fparser%2Fsuggest-removing-semicolon-after-impl-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest-removing-semicolon-after-impl-trait-items.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+trait Foo {\n+    fn bar() {}; //~ ERROR non-item in item list\n+}\n+\n+fn main() {}"}, {"sha": "396e0c130f11b1222c119932894530188f0de6c4", "filename": "src/test/ui/parser/suggest-removing-semicolon-after-impl-trait-items.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fparser%2Fsuggest-removing-semicolon-after-impl-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fparser%2Fsuggest-removing-semicolon-after-impl-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fsuggest-removing-semicolon-after-impl-trait-items.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,15 @@\n+error: non-item in item list\n+  --> $DIR/suggest-removing-semicolon-after-impl-trait-items.rs:4:16\n+   |\n+LL | trait Foo {\n+   |           - item list starts here\n+LL |     fn bar() {};\n+   |                ^\n+   |                |\n+   |                non-item starts here\n+   |                help: consider removing this semicolon\n+LL | }\n+   | - item list ends here\n+\n+error: aborting due to previous error\n+"}, {"sha": "1d8835036065b3e9d85b739eee13463473a88de4", "filename": "src/test/ui/resolve/issue-100365.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,50 @@\n+fn main() {\n+    let addr = Into::<std::net::IpAddr>.into([127, 0, 0, 1]);\n+    //~^ ERROR expected value, found trait `Into`\n+    //~| HELP use the path separator\n+\n+    let _ = Into.into(());\n+    //~^ ERROR expected value, found trait `Into`\n+    //~| HELP use the path separator\n+\n+    let _ = Into::<()>.into;\n+    //~^ ERROR expected value, found trait `Into`\n+    //~| HELP use the path separator\n+}\n+\n+macro_rules! Trait {\n+    () => {\n+        ::std::iter::Iterator\n+        //~^ ERROR expected value, found trait `std::iter::Iterator`\n+        //~| ERROR expected value, found trait `std::iter::Iterator`\n+    };\n+}\n+\n+macro_rules! create {\n+    () => {\n+        Into::<String>.into(\"\")\n+        //~^ ERROR expected value, found trait `Into`\n+        //~| HELP use the path separator\n+    };\n+}\n+\n+fn interaction_with_macros() {\n+    //\n+    // Note that if the receiver is a macro call, we do not want to suggest to replace\n+    // `.` with `::` as that would be a syntax error.\n+    // Since the receiver is a trait and not a type, we cannot suggest to surround\n+    // it with angle brackets. It would be interpreted as a trait object type void of\n+    // `dyn` which is most likely not what the user intended to write.\n+    // `<_ as Trait!()>::` is also not an option as it's equally syntactically invalid.\n+    //\n+\n+    Trait!().map(std::convert::identity); // no `help` here!\n+\n+    Trait!().map; // no `help` here!\n+\n+    //\n+    // Ensure that the suggestion is shown for expressions inside of macro definitions.\n+    //\n+\n+    let _ = create!();\n+}"}, {"sha": "372d7726668044683e848cb7a223b2933fdf90a5", "filename": "src/test/ui/resolve/issue-100365.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,54 @@\n+error[E0423]: expected value, found trait `Into`\n+  --> $DIR/issue-100365.rs:2:16\n+   |\n+LL |     let addr = Into::<std::net::IpAddr>.into([127, 0, 0, 1]);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^- help: use the path separator to refer to an item: `::`\n+\n+error[E0423]: expected value, found trait `Into`\n+  --> $DIR/issue-100365.rs:6:13\n+   |\n+LL |     let _ = Into.into(());\n+   |             ^^^^- help: use the path separator to refer to an item: `::`\n+\n+error[E0423]: expected value, found trait `Into`\n+  --> $DIR/issue-100365.rs:10:13\n+   |\n+LL |     let _ = Into::<()>.into;\n+   |             ^^^^^^^^^^- help: use the path separator to refer to an item: `::`\n+\n+error[E0423]: expected value, found trait `std::iter::Iterator`\n+  --> $DIR/issue-100365.rs:17:9\n+   |\n+LL |         ::std::iter::Iterator\n+   |         ^^^^^^^^^^^^^^^^^^^^^ not a value\n+...\n+LL |     Trait!().map(std::convert::identity); // no `help` here!\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `Trait` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found trait `std::iter::Iterator`\n+  --> $DIR/issue-100365.rs:17:9\n+   |\n+LL |         ::std::iter::Iterator\n+   |         ^^^^^^^^^^^^^^^^^^^^^ not a value\n+...\n+LL |     Trait!().map; // no `help` here!\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `Trait` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found trait `Into`\n+  --> $DIR/issue-100365.rs:25:9\n+   |\n+LL |         Into::<String>.into(\"\")\n+   |         ^^^^^^^^^^^^^^- help: use the path separator to refer to an item: `::`\n+...\n+LL |     let _ = create!();\n+   |             --------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0423`."}, {"sha": "31a76261408ef7021eecf5beac57e5dd24b35255", "filename": "src/test/ui/resolve/issue-22692.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -1,3 +1,60 @@\n fn main() {\n-    let _ = String.new(); //~ ERROR expected value, found struct `String`\n+    let _ = String.new();\n+    //~^ ERROR expected value, found struct `String`\n+    //~| HELP use the path separator\n+\n+    let _ = String.default;\n+    //~^ ERROR expected value, found struct `String`\n+    //~| HELP use the path separator\n+\n+    let _ = Vec::<()>.with_capacity(1);\n+    //~^ ERROR expected value, found struct `Vec`\n+    //~| HELP use the path separator\n+}\n+\n+macro_rules! Type {\n+    () => {\n+        ::std::cell::Cell\n+        //~^ ERROR expected value, found struct `std::cell::Cell`\n+        //~| ERROR expected value, found struct `std::cell::Cell`\n+        //~| ERROR expected value, found struct `std::cell::Cell`\n+    };\n+}\n+\n+macro_rules! create {\n+    (type method) => {\n+        Vec.new()\n+        //~^ ERROR expected value, found struct `Vec`\n+        //~| HELP use the path separator\n+    };\n+    (type field) => {\n+        Vec.new\n+        //~^ ERROR expected value, found struct `Vec`\n+        //~| HELP use the path separator\n+    };\n+    (macro method) => {\n+        Type!().new(0)\n+        //~^ HELP use the path separator\n+    };\n+}\n+\n+fn interaction_with_macros() {\n+    //\n+    // Verify that we do not only suggest to replace `.` with `::` if the receiver is a\n+    // macro call but that we also correctly suggest to surround it with angle brackets.\n+    //\n+\n+    Type!().get();\n+    //~^ HELP use the path separator\n+\n+    Type! {}.get;\n+    //~^ HELP use the path separator\n+\n+    //\n+    // Ensure that the suggestion is shown for expressions inside of macro definitions.\n+    //\n+\n+    let _ = create!(type method);\n+    let _ = create!(type field);\n+    let _ = create!(macro method);\n }"}, {"sha": "6962aa161e92a5e9ee096220163fa460d91ea1b7", "filename": "src/test/ui/resolve/issue-22692.stderr", "status": "modified", "additions": 81, "deletions": 4, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -2,10 +2,87 @@ error[E0423]: expected value, found struct `String`\n   --> $DIR/issue-22692.rs:2:13\n    |\n LL |     let _ = String.new();\n-   |             ^^^^^^----\n-   |             |\n-   |             help: use the path separator to refer to an item: `String::new`\n+   |             ^^^^^^- help: use the path separator to refer to an item: `::`\n \n-error: aborting due to previous error\n+error[E0423]: expected value, found struct `String`\n+  --> $DIR/issue-22692.rs:6:13\n+   |\n+LL |     let _ = String.default;\n+   |             ^^^^^^- help: use the path separator to refer to an item: `::`\n+\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-22692.rs:10:13\n+   |\n+LL |     let _ = Vec::<()>.with_capacity(1);\n+   |             ^^^^^^^^^- help: use the path separator to refer to an item: `::`\n+\n+error[E0423]: expected value, found struct `std::cell::Cell`\n+  --> $DIR/issue-22692.rs:17:9\n+   |\n+LL |         ::std::cell::Cell\n+   |         ^^^^^^^^^^^^^^^^^\n+...\n+LL |     Type!().get();\n+   |     ------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `Type` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: use the path separator to refer to an item\n+   |\n+LL |     <Type!()>::get();\n+   |     ~~~~~~~~~~~\n+\n+error[E0423]: expected value, found struct `std::cell::Cell`\n+  --> $DIR/issue-22692.rs:17:9\n+   |\n+LL |         ::std::cell::Cell\n+   |         ^^^^^^^^^^^^^^^^^\n+...\n+LL |     Type! {}.get;\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `Type` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: use the path separator to refer to an item\n+   |\n+LL |     <Type! {}>::get;\n+   |     ~~~~~~~~~~~~\n+\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-22692.rs:26:9\n+   |\n+LL |         Vec.new()\n+   |         ^^^- help: use the path separator to refer to an item: `::`\n+...\n+LL |     let _ = create!(type method);\n+   |             -------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-22692.rs:31:9\n+   |\n+LL |         Vec.new\n+   |         ^^^- help: use the path separator to refer to an item: `::`\n+...\n+LL |     let _ = create!(type field);\n+   |             ------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found struct `std::cell::Cell`\n+  --> $DIR/issue-22692.rs:17:9\n+   |\n+LL |         ::std::cell::Cell\n+   |         ^^^^^^^^^^^^^^^^^\n+...\n+LL |     let _ = create!(macro method);\n+   |             --------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `Type` which comes from the expansion of the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: use the path separator to refer to an item\n+   |\n+LL |         <Type!()>::new(0)\n+   |         ~~~~~~~~~~~\n+\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0423`."}, {"sha": "4764cf2db20e86ccc94cba2f5baa037797851fc0", "filename": "src/test/ui/resolve/suggest-path-for-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-for-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-for-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-for-tuple-struct.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -2,17 +2,13 @@ error[E0423]: expected value, found struct `SomeTupleStruct`\n   --> $DIR/suggest-path-for-tuple-struct.rs:22:13\n    |\n LL |     let _ = SomeTupleStruct.new();\n-   |             ^^^^^^^^^^^^^^^----\n-   |             |\n-   |             help: use the path separator to refer to an item: `SomeTupleStruct::new`\n+   |             ^^^^^^^^^^^^^^^- help: use the path separator to refer to an item: `::`\n \n error[E0423]: expected value, found struct `SomeRegularStruct`\n   --> $DIR/suggest-path-for-tuple-struct.rs:24:13\n    |\n LL |     let _ = SomeRegularStruct.new();\n-   |             ^^^^^^^^^^^^^^^^^----\n-   |             |\n-   |             help: use the path separator to refer to an item: `SomeRegularStruct::new`\n+   |             ^^^^^^^^^^^^^^^^^- help: use the path separator to refer to an item: `::`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d5d6b13d62c284aaa400650e2e594fd233d8d058", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -16,44 +16,96 @@ pub mod a {\n fn h1() -> i32 {\n     a.I\n     //~^ ERROR expected value, found module `a`\n+    //~| HELP use the path separator\n }\n \n fn h2() -> i32 {\n     a.g()\n     //~^ ERROR expected value, found module `a`\n+    //~| HELP use the path separator\n }\n \n fn h3() -> i32 {\n     a.b.J\n     //~^ ERROR expected value, found module `a`\n+    //~| HELP use the path separator\n }\n \n fn h4() -> i32 {\n     a::b.J\n     //~^ ERROR expected value, found module `a::b`\n+    //~| HELP a constant with a similar name exists\n+    //~| HELP use the path separator\n }\n \n fn h5() {\n     a.b.f();\n     //~^ ERROR expected value, found module `a`\n+    //~| HELP use the path separator\n     let v = Vec::new();\n     v.push(a::b);\n     //~^ ERROR expected value, found module `a::b`\n+    //~| HELP a constant with a similar name exists\n }\n \n fn h6() -> i32 {\n     a::b.f()\n     //~^ ERROR expected value, found module `a::b`\n+    //~| HELP a constant with a similar name exists\n+    //~| HELP use the path separator\n }\n \n fn h7() {\n     a::b\n     //~^ ERROR expected value, found module `a::b`\n+    //~| HELP a constant with a similar name exists\n }\n \n fn h8() -> i32 {\n     a::b()\n     //~^ ERROR expected function, found module `a::b`\n+    //~| HELP a constant with a similar name exists\n+}\n+\n+macro_rules! module {\n+    () => {\n+        a\n+        //~^ ERROR expected value, found module `a`\n+        //~| ERROR expected value, found module `a`\n+    };\n+}\n+\n+macro_rules! create {\n+    (method) => {\n+        a.f()\n+        //~^ ERROR expected value, found module `a`\n+        //~| HELP use the path separator\n+    };\n+    (field) => {\n+        a.f\n+        //~^ ERROR expected value, found module `a`\n+        //~| HELP use the path separator\n+    };\n+}\n+\n+fn h9() {\n+    //\n+    // Note that if the receiver is a macro call, we do not want to suggest to replace\n+    // `.` with `::` as that would be a syntax error.\n+    // Since the receiver is a module and not a type, we cannot suggest to surround\n+    // it with angle brackets.\n+    //\n+\n+    module!().g::<()>(); // no `help` here!\n+\n+    module!().g; // no `help` here!\n+\n+    //\n+    // Ensure that the suggestion is shown for expressions inside of macro definitions.\n+    //\n+\n+    let _ = create!(method);\n+    let _ = create!(field);\n }\n \n fn main() {}"}, {"sha": "a4ce0deeb70f59b5aee008a41222937340a549b0", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.stderr", "status": "modified", "additions": 59, "deletions": 23, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -2,28 +2,22 @@ error[E0423]: expected value, found module `a`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:17:5\n    |\n LL |     a.I\n-   |     ^--\n-   |     |\n-   |     help: use the path separator to refer to an item: `a::I`\n+   |     ^- help: use the path separator to refer to an item: `::`\n \n error[E0423]: expected value, found module `a`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:22:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:23:5\n    |\n LL |     a.g()\n-   |     ^--\n-   |     |\n-   |     help: use the path separator to refer to an item: `a::g`\n+   |     ^- help: use the path separator to refer to an item: `::`\n \n error[E0423]: expected value, found module `a`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:27:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:29:5\n    |\n LL |     a.b.J\n-   |     ^--\n-   |     |\n-   |     help: use the path separator to refer to an item: `a::b`\n+   |     ^- help: use the path separator to refer to an item: `::`\n \n error[E0423]: expected value, found module `a::b`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:32:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:35:5\n    |\n LL |     pub const I: i32 = 1;\n    |     --------------------- similarly named constant `I` defined here\n@@ -34,22 +28,20 @@ LL |     a::b.J\n help: use the path separator to refer to an item\n    |\n LL |     a::b::J\n-   |\n+   |         ~~\n help: a constant with a similar name exists\n    |\n LL |     a::I.J\n    |        ~\n \n error[E0423]: expected value, found module `a`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:37:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:42:5\n    |\n LL |     a.b.f();\n-   |     ^--\n-   |     |\n-   |     help: use the path separator to refer to an item: `a::b`\n+   |     ^- help: use the path separator to refer to an item: `::`\n \n error[E0423]: expected value, found module `a::b`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:40:12\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:46:12\n    |\n LL |     pub const I: i32 = 1;\n    |     --------------------- similarly named constant `I` defined here\n@@ -60,7 +52,7 @@ LL |     v.push(a::b);\n    |               help: a constant with a similar name exists: `I`\n \n error[E0423]: expected value, found module `a::b`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:45:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:52:5\n    |\n LL |     pub const I: i32 = 1;\n    |     --------------------- similarly named constant `I` defined here\n@@ -71,14 +63,14 @@ LL |     a::b.f()\n help: use the path separator to refer to an item\n    |\n LL |     a::b::f()\n-   |     ~~~~~~~\n+   |         ~~\n help: a constant with a similar name exists\n    |\n LL |     a::I.f()\n    |        ~\n \n error[E0423]: expected value, found module `a::b`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:50:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:59:5\n    |\n LL |     pub const I: i32 = 1;\n    |     --------------------- similarly named constant `I` defined here\n@@ -89,7 +81,7 @@ LL |     a::b\n    |        help: a constant with a similar name exists: `I`\n \n error[E0423]: expected function, found module `a::b`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:55:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:65:5\n    |\n LL |     pub const I: i32 = 1;\n    |     --------------------- similarly named constant `I` defined here\n@@ -99,6 +91,50 @@ LL |     a::b()\n    |        |\n    |        help: a constant with a similar name exists: `I`\n \n-error: aborting due to 9 previous errors\n+error[E0423]: expected value, found module `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:72:9\n+   |\n+LL |         a\n+   |         ^ not a value\n+...\n+LL |     module!().g::<()>(); // no `help` here!\n+   |     --------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `module` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found module `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:72:9\n+   |\n+LL |         a\n+   |         ^ not a value\n+...\n+LL |     module!().g; // no `help` here!\n+   |     --------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `module` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found module `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:80:9\n+   |\n+LL |         a.f()\n+   |         ^- help: use the path separator to refer to an item: `::`\n+...\n+LL |     let _ = create!(method);\n+   |             --------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found module `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:85:9\n+   |\n+LL |         a.f\n+   |         ^- help: use the path separator to refer to an item: `::`\n+...\n+LL |     let _ = create!(field);\n+   |             -------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0423`."}, {"sha": "28a911d0c5bfa2f45264f36f69c77948843a4485", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -78,7 +78,7 @@ note: function defined here\n   --> $DIR/issue-34264.rs:3:4\n    |\n LL | fn bar(x, y: usize) {}\n-   |    ^^^ -  --------\n+   |    ^^^    --------\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:10:5"}, {"sha": "d2afd277ecf79edd74633d9f74da968c2e2e4816", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -72,7 +72,7 @@ note: associated function defined here\n   --> $DIR/missing-unit-argument.rs:6:8\n    |\n LL |     fn baz(self, (): ()) { }\n-   |        ^^^ ----  ------\n+   |        ^^^       ------\n help: provide the argument\n    |\n LL |     S.baz(());\n@@ -88,7 +88,7 @@ note: associated function defined here\n   --> $DIR/missing-unit-argument.rs:7:8\n    |\n LL |     fn generic<T>(self, _: T) { }\n-   |        ^^^^^^^    ----  ----\n+   |        ^^^^^^^          ----\n help: provide the argument\n    |\n LL |     S.generic::<()>(());"}, {"sha": "74c6023d7fbbd97d0de51e297fe58d641890cd90", "filename": "src/test/ui/stability-attribute/auxiliary/ctor-stability.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fctor-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fctor-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fctor-stability.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,8 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"none\", since = \"1.0\")]\n+\n+#[stable(feature = \"none\", since = \"1.0\")]\n+pub enum Foo {\n+    A,\n+}"}, {"sha": "fcab0cb109940a8fed1fe66be4774be1298e598e", "filename": "src/test/ui/stability-attribute/ctor-stability.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fstability-attribute%2Fctor-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fstability-attribute%2Fctor-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fctor-stability.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:ctor-stability.rs\n+// check-pass\n+\n+extern crate ctor_stability;\n+\n+fn main() {\n+    let _ = ctor_stability::Foo::A;\n+}"}, {"sha": "4c952669cfafda9f0aae592cf2350f1178f3af00", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -2,10 +2,13 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:6:34\n    |\n LL |     let _: Option<(i32, bool)> = Some(1, 2);\n-   |                                  ^^^^ -  - argument of type `{integer}` unexpected\n-   |                                       |\n-   |                                       expected tuple, found integer\n+   |                                  ^^^^    - argument of type `{integer}` unexpected\n    |\n+note: expected tuple, found integer\n+  --> $DIR/args-instead-of-tuple-errors.rs:6:39\n+   |\n+LL |     let _: Option<(i32, bool)> = Some(1, 2);\n+   |                                       ^\n    = note: expected tuple `(i32, bool)`\n                found type `{integer}`\n note: tuple variant defined here\n@@ -22,10 +25,13 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:8:5\n    |\n LL |     int_bool(1, 2);\n-   |     ^^^^^^^^ -  - argument of type `{integer}` unexpected\n-   |              |\n-   |              expected tuple, found integer\n+   |     ^^^^^^^^    - argument of type `{integer}` unexpected\n    |\n+note: expected tuple, found integer\n+  --> $DIR/args-instead-of-tuple-errors.rs:8:14\n+   |\n+LL |     int_bool(1, 2);\n+   |              ^\n    = note: expected tuple `(i32, bool)`\n                found type `{integer}`\n note: function defined here"}, {"sha": "78e5634b2de2a46bfd612a98980a7d5bd2b64222", "filename": "src/test/ui/suggestions/assoc-const-as-field.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-const-as-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-const-as-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-const-as-field.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -2,9 +2,7 @@ error[E0423]: expected value, found struct `Mod::Foo`\n   --> $DIR/assoc-const-as-field.rs:11:9\n    |\n LL |     foo(Mod::Foo.Bar);\n-   |         ^^^^^^^^----\n-   |         |\n-   |         help: use the path separator to refer to an item: `Mod::Foo::Bar`\n+   |         ^^^^^^^^- help: use the path separator to refer to an item: `::`\n \n error: aborting due to previous error\n "}, {"sha": "d58f1e2d9e59c47a03c75a359f4ae7c8098d8e1f", "filename": "src/test/ui/traits/multidispatch-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-bad.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -10,7 +10,7 @@ note: function defined here\n   --> $DIR/multidispatch-bad.rs:13:4\n    |\n LL | fn test<T,U>(_: T, _: U)\n-   |    ^^^^      ----  ----\n+   |    ^^^^            ----\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     test(22i32, 44u32);"}, {"sha": "7029d298d71e276b670de443d15171106e47ceab", "filename": "src/test/ui/tuple/add-tuple-within-arguments.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -8,7 +8,7 @@ note: function defined here\n   --> $DIR/add-tuple-within-arguments.rs:1:4\n    |\n LL | fn foo(s: &str, a: (i32, i32), s2: &str) {}\n-   |    ^^^ -------  -------------  --------\n+   |    ^^^          -------------\n help: wrap these arguments in parentheses to construct a tuple\n    |\n LL |     foo(\"hi\", (1, 2), \"hi\");\n@@ -28,7 +28,7 @@ note: function defined here\n   --> $DIR/add-tuple-within-arguments.rs:3:4\n    |\n LL | fn bar(s: &str, a: (&str,), s2: &str) {}\n-   |    ^^^ -------  ----------  --------\n+   |    ^^^          ----------\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     bar(\"hi\", (\"hi\",), \"hi\");"}, {"sha": "968cb75db7633582680eee04cd997990409bbc1e", "filename": "src/test/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -2,10 +2,13 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-3.rs:9:16\n    |\n LL |         groups.push(new_group, vec![process]);\n-   |                ^^^^ ---------  ------------- argument of type `Vec<&Process>` unexpected\n-   |                     |\n-   |                     expected tuple, found struct `Vec`\n+   |                ^^^^            ------------- argument of type `Vec<&Process>` unexpected\n    |\n+note: expected tuple, found struct `Vec`\n+  --> $DIR/wrong_argument_ice-3.rs:9:21\n+   |\n+LL |         groups.push(new_group, vec![process]);\n+   |                     ^^^^^^^^^\n    = note: expected tuple `(Vec<String>, Vec<Process>)`\n              found struct `Vec<String>`\n note: associated function defined here"}, {"sha": "455f83f5721bdfbb7a7f7974bfe15a3a47fe82fe", "filename": "src/test/ui/unboxed-closures/unboxed-closures-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -6,11 +6,11 @@ LL |     let z = f(1_usize, 2);\n    |             |\n    |             arguments to this function are incorrect\n    |\n-note: closure defined here\n-  --> $DIR/unboxed-closures-type-mismatch.rs:4:17\n+note: closure parameter defined here\n+  --> $DIR/unboxed-closures-type-mismatch.rs:4:18\n    |\n LL |     let mut f = |x: isize, y: isize| -> isize { x + y };\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^\n help: change the type of the numeric literal from `usize` to `isize`\n    |\n LL |     let z = f(1_isize, 2);"}, {"sha": "30903f56d93b03ffd1450538121e69a09cf220ee", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -98,7 +98,7 @@ mod os_impl {\n     pub fn check(path: &Path, bad: &mut bool) {\n         use std::ffi::OsStr;\n \n-        const ALLOWED: &[&str] = &[\"configure\"];\n+        const ALLOWED: &[&str] = &[\"configure\", \"x\"];\n \n         crate::walk_no_read(\n             path,"}, {"sha": "704d0f791f333d0ddca4c333a16fdf62643bb4c7", "filename": "x", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/x", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/x", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "previous_filename": "x.sh"}, {"sha": "86cea606591ba088e4643cd4b0bd2d29125d4c72", "filename": "x.ps1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/x.ps1", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/x.ps1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.ps1?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env pwsh\n \n-# See x.sh for why these scripts exist.\n+# See ./x for why these scripts exist.\n \n $xpy = Join-Path $PSScriptRoot x.py\n # Start-Process for some reason splits arguments on spaces. (Isn't powershell supposed to be simpler than bash?)"}, {"sha": "6df4033d55d7273bd064cedbddf4c959ee1dd301", "filename": "x.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fbc08e2ce64dee45a29cb6133da6b32366268aa/x.py", "raw_url": "https://github.com/rust-lang/rust/raw/2fbc08e2ce64dee45a29cb6133da6b32366268aa/x.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.py?ref=2fbc08e2ce64dee45a29cb6133da6b32366268aa", "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env python3\n # Some systems don't have `python3` in their PATH. This isn't supported by x.py directly;\n-# they should use `x.sh` or `x.ps1` instead.\n+# they should use `x` or `x.ps1` instead.\n \n # This file is only a \"symlink\" to bootstrap.py, all logic should go there.\n "}]}