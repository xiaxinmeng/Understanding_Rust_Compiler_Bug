{"sha": "ea6cb8744ac951a5f59cf38ea8d6515a67aedfee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNmNiODc0NGFjOTUxYTVmNTljZjM4ZWE4ZDY1MTVhNjdhZWRmZWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-12T10:08:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-12T10:08:23Z"}, "message": "Rollup merge of #34749 - GuillaumeGomez:any_doc, r=steveklabnik\n\nImprove std::any module doc\n\nFixes #29340.\n\nr? @steveklabnik", "tree": {"sha": "b9491278d2a318a98438a266a4d1aa6f17be984f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9491278d2a318a98438a266a4d1aa6f17be984f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea6cb8744ac951a5f59cf38ea8d6515a67aedfee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea6cb8744ac951a5f59cf38ea8d6515a67aedfee", "html_url": "https://github.com/rust-lang/rust/commit/ea6cb8744ac951a5f59cf38ea8d6515a67aedfee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea6cb8744ac951a5f59cf38ea8d6515a67aedfee/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e4b82356db90c96aea2ab060df00de7c035081", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e4b82356db90c96aea2ab060df00de7c035081", "html_url": "https://github.com/rust-lang/rust/commit/e2e4b82356db90c96aea2ab060df00de7c035081"}, {"sha": "4c3cff6c658cd0500d10052448eee9fd4cab079c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3cff6c658cd0500d10052448eee9fd4cab079c", "html_url": "https://github.com/rust-lang/rust/commit/4c3cff6c658cd0500d10052448eee9fd4cab079c"}], "stats": {"total": 160, "additions": 158, "deletions": 2}, "files": [{"sha": "a452be2565b655e14597eed0116d65386bc53210", "filename": "src/libcore/any.rs", "status": "modified", "additions": 158, "deletions": 2, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/ea6cb8744ac951a5f59cf38ea8d6515a67aedfee/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6cb8744ac951a5f59cf38ea8d6515a67aedfee/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=ea6cb8744ac951a5f59cf38ea8d6515a67aedfee", "patch": "@@ -92,6 +92,23 @@ use marker::{Reflect, Sized};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Any: Reflect + 'static {\n     /// Gets the `TypeId` of `self`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(get_type_id)]\n+    ///\n+    /// use std::any::{Any, TypeId};\n+    ///\n+    /// fn is_string(s: &Any) -> bool {\n+    ///     TypeId::of::<String>() == s.get_type_id()\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(is_string(&0), false);\n+    ///     assert_eq!(is_string(&\"cookie monster\".to_owned()), true);\n+    /// }\n+    /// ```\n     #[unstable(feature = \"get_type_id\",\n                reason = \"this method will likely be replaced by an associated static\",\n                issue = \"27745\")]\n@@ -125,7 +142,26 @@ impl fmt::Debug for Any + Send {\n }\n \n impl Any {\n-    /// Returns true if the boxed type is the same as `T`\n+    /// Returns true if the boxed type is the same as `T`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn is_string(s: &Any) {\n+    ///     if s.is::<String>() {\n+    ///         println!(\"It's a string!\");\n+    ///     } else {\n+    ///         println!(\"Not a string...\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     is_string(&0);\n+    ///     is_string(&\"cookie monster\".to_owned());\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is<T: Any>(&self) -> bool {\n@@ -141,6 +177,25 @@ impl Any {\n \n     /// Returns some reference to the boxed value if it is of type `T`, or\n     /// `None` if it isn't.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn print_if_string(s: &Any) {\n+    ///     if let Some(string) = s.downcast_ref::<String>() {\n+    ///         println!(\"It's a string({}): '{}'\", string.len(), string);\n+    ///     } else {\n+    ///         println!(\"Not a string...\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     print_if_string(&0);\n+    ///     print_if_string(&\"cookie monster\".to_owned());\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n@@ -159,6 +214,29 @@ impl Any {\n \n     /// Returns some mutable reference to the boxed value if it is of type `T`, or\n     /// `None` if it isn't.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn modify_if_u32(s: &mut Any) {\n+    ///     if let Some(num) = s.downcast_mut::<u32>() {\n+    ///         *num = 42;\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let mut x = 10u32;\n+    ///     let mut s = \"starlord\".to_owned();\n+    ///\n+    ///     modify_if_u32(&mut x);\n+    ///     modify_if_u32(&mut s);\n+    ///\n+    ///     assert_eq!(x, 42);\n+    ///     assert_eq!(&s, \"starlord\");\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n@@ -178,20 +256,81 @@ impl Any {\n \n impl Any+Send {\n     /// Forwards to the method defined on the type `Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn is_string(s: &(Any + Send)) {\n+    ///     if s.is::<String>() {\n+    ///         println!(\"It's a string!\");\n+    ///     } else {\n+    ///         println!(\"Not a string...\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     is_string(&0);\n+    ///     is_string(&\"cookie monster\".to_owned());\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is<T: Any>(&self) -> bool {\n         Any::is::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn print_if_string(s: &(Any + Send)) {\n+    ///     if let Some(string) = s.downcast_ref::<String>() {\n+    ///         println!(\"It's a string({}): '{}'\", string.len(), string);\n+    ///     } else {\n+    ///         println!(\"Not a string...\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     print_if_string(&0);\n+    ///     print_if_string(&\"cookie monster\".to_owned());\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n         Any::downcast_ref::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn modify_if_u32(s: &mut (Any+ Send)) {\n+    ///     if let Some(num) = s.downcast_mut::<u32>() {\n+    ///         *num = 42;\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let mut x = 10u32;\n+    ///     let mut s = \"starlord\".to_owned();\n+    ///\n+    ///     modify_if_u32(&mut x);\n+    ///     modify_if_u32(&mut s);\n+    ///\n+    ///     assert_eq!(x, 42);\n+    ///     assert_eq!(&s, \"starlord\");\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n@@ -220,7 +359,24 @@ pub struct TypeId {\n \n impl TypeId {\n     /// Returns the `TypeId` of the type this generic function has been\n-    /// instantiated with\n+    /// instantiated with.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(get_type_id)]\n+    ///\n+    /// use std::any::{Any, TypeId};\n+    ///\n+    /// fn is_string(s: &Any) -> bool {\n+    ///     TypeId::of::<String>() == s.get_type_id()\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(is_string(&0), false);\n+    ///     assert_eq!(is_string(&\"cookie monster\".to_owned()), true);\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn of<T: ?Sized + Reflect + 'static>() -> TypeId {\n         TypeId {"}]}