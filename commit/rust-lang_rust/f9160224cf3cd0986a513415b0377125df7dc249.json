{"sha": "f9160224cf3cd0986a513415b0377125df7dc249", "node_id": "C_kwDOAAsO6NoAKGY5MTYwMjI0Y2YzY2QwOTg2YTUxMzQxNWIwMzc3MTI1ZGY3ZGMyNDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-10T05:53:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-10T05:53:35Z"}, "message": "Rollup merge of #103675 - lyming2007:issue-103271-fix, r=fee1-dead\n\nremove redundent \"<>\" for ty::Slice with reference type\n\nthis fix #103271", "tree": {"sha": "23dc2046445bd71a105b42314bf4d087f6e9e503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23dc2046445bd71a105b42314bf4d087f6e9e503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9160224cf3cd0986a513415b0377125df7dc249", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbJHfCRBK7hj4Ov3rIwAAgtUIACt+20gUUKZHMgIsNRIPvLhm\nvzeQRX52pACdCki+CH+u0jV+B/Au/j/9XvZfgeTCSOTERjunZpwSyyCSxX/l59mk\nWdrFFKmJUl6v5dEhXgTXdZ12blkjkq5cp4iuClTalyzk0Q25YCE9CdVkzxU8pAyC\ns4L/xWlR98xcCCj77T1kTeWX1dkVI4SnZNT/ue0uVhhE4I7r3zbubhB/kPFqynwN\nkYYYcF9z9BRy2kb5bLv3hZn2BoI3UbOJBv6ul4GStd4+HIAYurBLAuehaGcBfBQd\ngOSVoaCIEjeF88Uixilmdw3sk5X39GMSJ0cXiW6s6V3UfoJzwUgKn6Wh8bYpBLg=\n=WDnW\n-----END PGP SIGNATURE-----\n", "payload": "tree 23dc2046445bd71a105b42314bf4d087f6e9e503\nparent 0c4a81c97b6309e7239eb0000bc46a5d348a2230\nparent 0b6934d6c6fed66e5e783b355de1f33ab3d51efb\nauthor Michael Goulet <michael@errs.io> 1668059615 -0800\ncommitter GitHub <noreply@github.com> 1668059615 -0800\n\nRollup merge of #103675 - lyming2007:issue-103271-fix, r=fee1-dead\n\nremove redundent \"<>\" for ty::Slice with reference type\n\nthis fix #103271\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9160224cf3cd0986a513415b0377125df7dc249", "html_url": "https://github.com/rust-lang/rust/commit/f9160224cf3cd0986a513415b0377125df7dc249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9160224cf3cd0986a513415b0377125df7dc249/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c4a81c97b6309e7239eb0000bc46a5d348a2230", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c4a81c97b6309e7239eb0000bc46a5d348a2230", "html_url": "https://github.com/rust-lang/rust/commit/0c4a81c97b6309e7239eb0000bc46a5d348a2230"}, {"sha": "0b6934d6c6fed66e5e783b355de1f33ab3d51efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6934d6c6fed66e5e783b355de1f33ab3d51efb", "html_url": "https://github.com/rust-lang/rust/commit/0b6934d6c6fed66e5e783b355de1f33ab3d51efb"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "43a5145b7e74d6bb974c9dd03d4e3b9df4b0c7fd", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9160224cf3cd0986a513415b0377125df7dc249/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9160224cf3cd0986a513415b0377125df7dc249/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=f9160224cf3cd0986a513415b0377125df7dc249", "patch": "@@ -1900,6 +1900,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         | ty::Str\n                         | ty::Projection(_)\n                         | ty::Param(_) => format!(\"{deref_ty}\"),\n+                        // we need to test something like  <&[_]>::len\n+                        // and Vec::function();\n+                        // <&[_]>::len doesn't need an extra \"<>\" between\n+                        // but for Adt type like Vec::function()\n+                        // we would suggest <[_]>::function();\n+                        _ if self.tcx.sess.source_map().span_wrapped_by_angle_bracket(ty.span)  => format!(\"{deref_ty}\"),\n                         _ => format!(\"<{deref_ty}>\"),\n                     };\n                     err.span_suggestion_verbose("}, {"sha": "7ea028b12efc41f40fe19250c427ddd5608e68bf", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f9160224cf3cd0986a513415b0377125df7dc249/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9160224cf3cd0986a513415b0377125df7dc249/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=f9160224cf3cd0986a513415b0377125df7dc249", "patch": "@@ -753,6 +753,50 @@ impl SourceMap {\n         }\n     }\n \n+    /// Given a 'Span', tries to tell if the next character is '>'\n+    /// and the previous charactoer is '<' after skipping white space\n+    /// return true if wrapped by '<>'\n+    pub fn span_wrapped_by_angle_bracket(&self, span: Span) -> bool {\n+        self.span_to_source(span, |src, start_index, end_index| {\n+            if src.get(start_index..end_index).is_none() {\n+                return Ok(false);\n+            }\n+            // test the right side to match '>' after skipping white space\n+            let end_src = &src[end_index..];\n+            let mut i = 0;\n+            while let Some(cc) = end_src.chars().nth(i) {\n+                if cc == ' ' {\n+                    i = i + 1;\n+                } else if cc == '>' {\n+                    // found > in the right;\n+                    break;\n+                } else {\n+                    // failed to find '>' return false immediately\n+                    return Ok(false);\n+                }\n+            }\n+            // test the left side to match '<' after skipping white space\n+            i = start_index;\n+            let start_src = &src[0..start_index];\n+            while let Some(cc) = start_src.chars().nth(i) {\n+                if cc == ' ' {\n+                    if i == 0 {\n+                        return Ok(false);\n+                    }\n+                    i = i - 1;\n+                } else if cc == '<' {\n+                    // found < in the left\n+                    break;\n+                } else {\n+                    // failed to find '<' return false immediately\n+                    return Ok(false);\n+                }\n+            }\n+            return Ok(true);\n+        })\n+        .map_or(false, |is_accessible| is_accessible)\n+    }\n+\n     /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`\n     /// `c`.\n     pub fn span_through_char(&self, sp: Span, c: char) -> Span {"}, {"sha": "bd3254af3df71837010a1eb3f74c77e537078889", "filename": "src/test/ui/type/issue-103271.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9160224cf3cd0986a513415b0377125df7dc249/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9160224cf3cd0986a513415b0377125df7dc249/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs?ref=f9160224cf3cd0986a513415b0377125df7dc249", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let iter_fun = <&[u32]>::iter;\n+    //~^ ERROR no function or associated item named `iter` found for reference `&[u32]` in the current scope [E0599]\n+    //~| function or associated item not found in `&[u32]`\n+    //~| HELP the function `iter` is implemented on `[u32]`\n+    for item in iter_fun(&[1,1]) {\n+        let x: &u32 = item;\n+        assert_eq!(x, &1);\n+    }\n+}"}, {"sha": "02a59d4b99c4df3cb7f4e39b1a55541207ea6ceb", "filename": "src/test/ui/type/issue-103271.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9160224cf3cd0986a513415b0377125df7dc249/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9160224cf3cd0986a513415b0377125df7dc249/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr?ref=f9160224cf3cd0986a513415b0377125df7dc249", "patch": "@@ -0,0 +1,14 @@\n+error[E0599]: no function or associated item named `iter` found for reference `&[u32]` in the current scope\n+  --> $DIR/issue-103271.rs:2:30\n+   |\n+LL |     let iter_fun = <&[u32]>::iter;\n+   |                              ^^^^ function or associated item not found in `&[u32]`\n+   |\n+help: the function `iter` is implemented on `[u32]`\n+   |\n+LL |     let iter_fun = <[u32]>::iter;\n+   |                     ~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}