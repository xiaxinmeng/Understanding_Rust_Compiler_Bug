{"sha": "bd92499c5e65248b3dd2078e2f428f33004cba3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOTI0OTljNWU2NTI0OGIzZGQyMDc4ZTJmNDI4ZjMzMDA0Y2JhM2Q=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-11-14T04:45:25Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-29T20:09:10Z"}, "message": "Allow parsing of macros in statement position.", "tree": {"sha": "e3e38e5da81edaa2a989e5f218849737df085f3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3e38e5da81edaa2a989e5f218849737df085f3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd92499c5e65248b3dd2078e2f428f33004cba3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd92499c5e65248b3dd2078e2f428f33004cba3d", "html_url": "https://github.com/rust-lang/rust/commit/bd92499c5e65248b3dd2078e2f428f33004cba3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd92499c5e65248b3dd2078e2f428f33004cba3d/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9814e58815a847e93c42c3987c3659104708f484", "url": "https://api.github.com/repos/rust-lang/rust/commits/9814e58815a847e93c42c3987c3659104708f484", "html_url": "https://github.com/rust-lang/rust/commit/9814e58815a847e93c42c3987c3659104708f484"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "3beef2d3eb24b37a7b8c7e4e909ec65359154db3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bd92499c5e65248b3dd2078e2f428f33004cba3d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd92499c5e65248b3dd2078e2f428f33004cba3d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bd92499c5e65248b3dd2078e2f428f33004cba3d", "patch": "@@ -52,12 +52,12 @@ use ast::{_mod, add, arg, arm, attribute,\n              pat_tup, pat_uniq, pat_wild, path, private, Proto, ProtoBare,\n              ProtoBorrowed, ProtoBox, ProtoUniq, provided, public, pure_fn,\n              purity, re_static, re_self, re_anon, re_named, region,\n-             rem, required, ret_style,\n-             return_val, self_ty, shl, shr, stmt, stmt_decl, stmt_expr,\n-             stmt_semi, struct_def, struct_field, struct_variant_kind,\n-             subtract, sty_box, sty_by_ref, sty_region, sty_static, sty_uniq,\n-             sty_value, token_tree, trait_method, trait_ref, tt_delim, tt_seq,\n-             tt_tok, tt_nonterminal, tuple_variant_kind, Ty, ty_, ty_bot,\n+             rem, required, ret_style, return_val, self_ty, shl, shr, stmt,\n+             stmt_decl, stmt_expr, stmt_semi, stmt_mac, struct_def,\n+             struct_field, struct_variant_kind, subtract, sty_box, sty_by_ref,\n+             sty_region, sty_static, sty_uniq, sty_value, token_tree,\n+             trait_method, trait_ref, tt_delim, tt_seq, tt_tok,\n+             tt_nonterminal, tuple_variant_kind, Ty, ty_, ty_bot,\n              ty_box, ty_field, ty_fn, ty_infer, ty_mac, ty_method, ty_nil,\n              ty_param, ty_param_bound, ty_path, ty_ptr, ty_rec, ty_rptr,\n              ty_tup, ty_u32, ty_uniq, ty_vec, ty_fixed_length_vec,\n@@ -2207,6 +2207,39 @@ impl Parser {\n             self.expect_keyword(~\"let\");\n             let decl = self.parse_let();\n             return @spanned(lo, decl.span.hi, stmt_decl(decl, self.get_id()));\n+        } else if is_ident(self.token)\n+            && !self.is_any_keyword(copy self.token)\n+            && self.look_ahead(1) == token::NOT {\n+            // Potential trouble: if we allow macros with paths instead of\n+            // idents, we'd need to look ahead past the whole path here...\n+            let pth = self.parse_value_path();\n+            self.bump();\n+\n+            let id = if self.token == token::LPAREN {\n+                token::special_idents::invalid // no special identifier\n+            } else {\n+                self.parse_ident()\n+            };\n+\n+            let tts = self.parse_unspanned_seq(\n+                token::LPAREN, token::RPAREN, seq_sep_none(),\n+                |p| p.parse_token_tree());\n+            let hi = self.span.hi;\n+\n+            if id == token::special_idents::invalid {\n+                return @spanned(lo, hi, stmt_mac(\n+                    spanned(lo, hi, mac_invoc_tt(pth, tts))));\n+            } else {\n+                // if it has a special ident, it's definitely an item\n+                return @spanned(lo, hi, stmt_decl(\n+                    @spanned(lo, hi, decl_item(\n+                        self.mk_item(\n+                            lo, hi, id /*id is good here*/,\n+                            item_mac(spanned(lo, hi, mac_invoc_tt(pth, tts))),\n+                            inherited, ~[/*no attrs*/]))),\n+                    self.get_id()));\n+            }\n+\n         } else {\n             let mut item_attrs;\n             match self.parse_outer_attrs_or_ext(first_item_attrs) {"}]}