{"sha": "96b44f6f659acc13bba63e29263e504f84b19fc3", "node_id": "C_kwDOAAsO6NoAKDk2YjQ0ZjZmNjU5YWNjMTNiYmE2M2UyOTI2M2U1MDRmODRiMTlmYzM", "commit": {"author": {"name": "Markus Reiter", "email": "me@reitermark.us", "date": "2022-08-16T18:23:32Z"}, "committer": {"name": "Markus Reiter", "email": "me@reitermark.us", "date": "2022-09-12T17:04:16Z"}, "message": "Use `DisplayBuffer` for socket addresses.", "tree": {"sha": "67199ecb5d4404ae1192bffdbb51084a366f62b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67199ecb5d4404ae1192bffdbb51084a366f62b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96b44f6f659acc13bba63e29263e504f84b19fc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEbU1eLXPTwjnhHZwHJFKTtRcCZVsFAmMfZpARHG1lQHJlaXRl\ncm1hcmsudXMACgkQJFKTtRcCZVv7JA/+IIOpXwIH66nJN00bpI6IS3hGqc9xeccB\nFUn9Oky/blquHvkx1I/EfLyMqbOzx4+xm3pPm+t36cmZkMeUtgBIbnGOXjJzHZLF\nk/bF0pKlH5KGs30kET5XVefd/qSFAAkLv1WI3xmytMjFZd+fdj7wFDBpQS8iShVD\nf+lE/qKdpnff6R5f/b+tFkiSBH9ejnOwuoss3FmVvOdHxwHnMue9XJ47sInc8Vmp\nkW5/ES/pYr6Ftrqe+1Qv3NDV6SUQRppBQhq4fnS4ChPaAjQWqO8HGqagynhGunvX\nv8hfZHncPWD49W40/QVsRiOKo9oDIXNuifFsOEAwN6hWnJTDOGMxpAyDkctCfJAp\nmrijEVsWI+VQBgHO04XTudsyMCNv9k7ECWJ8qj4mVfLPEjE2fwW1zypVqIUInDOl\nDObx2+G2fenWd7EYbDmrjrVmw57OiGT42D0IGytzxzN9AcleK6FiHTgaPZ8I8L85\n5c6cqAIHu41bvpQyvOq9sLIFlXY8syUZcYE5QM5r0CPnASONPs8CuaQEX6qJ29fp\nGsq4jU124yVla4DzF/ilUJp5IHELJe5xW/3ZrPt5BND15G9TQZd6HdUj23C7bsgx\np9A6c8gkamfzhnTdwquYcgGKq26rQm5bzX/j2SmOM9bdeKwFpW+o+Xxh76CtogCF\nbOynwANOFPc=\n=Vwtd\n-----END PGP SIGNATURE-----", "payload": "tree 67199ecb5d4404ae1192bffdbb51084a366f62b2\nparent 7f115e3cd239af753aeb398a114fa321a3ce584b\nauthor Markus Reiter <me@reitermark.us> 1660674212 +0200\ncommitter Markus Reiter <me@reitermark.us> 1663002256 +0200\n\nUse `DisplayBuffer` for socket addresses.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96b44f6f659acc13bba63e29263e504f84b19fc3", "html_url": "https://github.com/rust-lang/rust/commit/96b44f6f659acc13bba63e29263e504f84b19fc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96b44f6f659acc13bba63e29263e504f84b19fc3/comments", "author": {"login": "reitermarkus", "id": 1309829, "node_id": "MDQ6VXNlcjEzMDk4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1309829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reitermarkus", "html_url": "https://github.com/reitermarkus", "followers_url": "https://api.github.com/users/reitermarkus/followers", "following_url": "https://api.github.com/users/reitermarkus/following{/other_user}", "gists_url": "https://api.github.com/users/reitermarkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/reitermarkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reitermarkus/subscriptions", "organizations_url": "https://api.github.com/users/reitermarkus/orgs", "repos_url": "https://api.github.com/users/reitermarkus/repos", "events_url": "https://api.github.com/users/reitermarkus/events{/privacy}", "received_events_url": "https://api.github.com/users/reitermarkus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reitermarkus", "id": 1309829, "node_id": "MDQ6VXNlcjEzMDk4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1309829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reitermarkus", "html_url": "https://github.com/reitermarkus", "followers_url": "https://api.github.com/users/reitermarkus/followers", "following_url": "https://api.github.com/users/reitermarkus/following{/other_user}", "gists_url": "https://api.github.com/users/reitermarkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/reitermarkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reitermarkus/subscriptions", "organizations_url": "https://api.github.com/users/reitermarkus/orgs", "repos_url": "https://api.github.com/users/reitermarkus/repos", "events_url": "https://api.github.com/users/reitermarkus/events{/privacy}", "received_events_url": "https://api.github.com/users/reitermarkus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f115e3cd239af753aeb398a114fa321a3ce584b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f115e3cd239af753aeb398a114fa321a3ce584b", "html_url": "https://github.com/rust-lang/rust/commit/7f115e3cd239af753aeb398a114fa321a3ce584b"}], "stats": {"total": 80, "additions": 34, "deletions": 46}, "files": [{"sha": "7aadf06e92fc6a5b80c04ea34f4256ee07295cee", "filename": "library/std/src/net/addr/display_buffer.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fdisplay_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fdisplay_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fdisplay_buffer.rs?ref=96b44f6f659acc13bba63e29263e504f84b19fc3", "patch": "@@ -3,12 +3,12 @@ use crate::mem::MaybeUninit;\n use crate::str;\n \n /// Used for slow path in `Display` implementations when alignment is required.\n-pub struct IpDisplayBuffer<const SIZE: usize> {\n+pub struct DisplayBuffer<const SIZE: usize> {\n     buf: [MaybeUninit<u8>; SIZE],\n     len: usize,\n }\n \n-impl<const SIZE: usize> IpDisplayBuffer<SIZE> {\n+impl<const SIZE: usize> DisplayBuffer<SIZE> {\n     #[inline]\n     pub const fn new() -> Self {\n         Self { buf: MaybeUninit::uninit_array(), len: 0 }\n@@ -25,7 +25,7 @@ impl<const SIZE: usize> IpDisplayBuffer<SIZE> {\n     }\n }\n \n-impl<const SIZE: usize> fmt::Write for IpDisplayBuffer<SIZE> {\n+impl<const SIZE: usize> fmt::Write for DisplayBuffer<SIZE> {\n     fn write_str(&mut self, s: &str) -> fmt::Result {\n         let bytes = s.as_bytes();\n ", "previous_filename": "library/std/src/net/ip/display_buffer.rs"}, {"sha": "a670f7168334a87e0626bc045fdc67c3435ed506", "filename": "library/std/src/net/addr/ip/mod.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fip%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fip%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fip%2Fmod.rs?ref=96b44f6f659acc13bba63e29263e504f84b19fc3", "patch": "@@ -8,8 +8,7 @@ use crate::mem::transmute;\n use crate::sys::net::netc as c;\n use crate::sys_common::{FromInner, IntoInner};\n \n-mod display_buffer;\n-use display_buffer::IpDisplayBuffer;\n+use super::display_buffer::DisplayBuffer;\n \n /// An IP address, either IPv4 or IPv6.\n ///\n@@ -997,7 +996,7 @@ impl fmt::Display for Ipv4Addr {\n         } else {\n             const LONGEST_IPV4_ADDR: &str = \"255.255.255.255\";\n \n-            let mut buf = IpDisplayBuffer::<{ LONGEST_IPV4_ADDR.len() }>::new();\n+            let mut buf = DisplayBuffer::<{ LONGEST_IPV4_ADDR.len() }>::new();\n             // Buffer is long enough for the longest possible IPv4 address, so this should never fail.\n             write!(buf, \"{}.{}.{}.{}\", octets[0], octets[1], octets[2], octets[3]).unwrap();\n \n@@ -1844,7 +1843,7 @@ impl fmt::Display for Ipv6Addr {\n         } else {\n             const LONGEST_IPV6_ADDR: &str = \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\";\n \n-            let mut buf = IpDisplayBuffer::<{ LONGEST_IPV6_ADDR.len() }>::new();\n+            let mut buf = DisplayBuffer::<{ LONGEST_IPV6_ADDR.len() }>::new();\n             // Buffer is long enough for the longest possible IPv6 address, so this should never fail.\n             write!(buf, \"{}\", self).unwrap();\n ", "previous_filename": "library/std/src/net/ip.rs"}, {"sha": "7c3430b2b217c5b838e22a63bf3511e846bc0f56", "filename": "library/std/src/net/addr/ip/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fip%2Ftests.rs?ref=96b44f6f659acc13bba63e29263e504f84b19fc3", "previous_filename": "library/std/src/net/ip/tests.rs"}, {"sha": "afecab3049848b9be997414624d92ff247169a2c", "filename": "library/std/src/net/addr/mod.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fmod.rs?ref=96b44f6f659acc13bba63e29263e504f84b19fc3", "patch": "@@ -0,0 +1,4 @@\n+mod display_buffer;\n+\n+pub mod ip;\n+pub mod socket;"}, {"sha": "33b0dfa03e0ed3b029138814e459330962dbd1f5", "filename": "library/std/src/net/addr/socket/mod.rs", "status": "renamed", "additions": 22, "deletions": 36, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fsocket%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fsocket%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fsocket%2Fmod.rs?ref=96b44f6f659acc13bba63e29263e504f84b19fc3", "patch": "@@ -2,9 +2,9 @@\n mod tests;\n \n use crate::cmp::Ordering;\n-use crate::fmt;\n+use crate::fmt::{self, Write};\n use crate::hash;\n-use crate::io::{self, Write};\n+use crate::io;\n use crate::iter;\n use crate::mem;\n use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n@@ -15,6 +15,8 @@ use crate::sys_common::net::LookupHost;\n use crate::sys_common::{FromInner, IntoInner};\n use crate::vec;\n \n+use super::display_buffer::DisplayBuffer;\n+\n /// An internet socket address, either IPv4 or IPv6.\n ///\n /// Internet socket addresses consist of an [IP address], a 16-bit port number, as well\n@@ -616,25 +618,18 @@ impl fmt::Debug for SocketAddr {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for SocketAddrV4 {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // Fast path: if there's no alignment stuff, write to the output buffer\n-        // directly\n+        // If there are no alignment requirements, write the socket address directly to `f`.\n+        // Otherwise, write it to a local buffer and then use `f.pad`.\n         if f.precision().is_none() && f.width().is_none() {\n             write!(f, \"{}:{}\", self.ip(), self.port())\n         } else {\n-            const IPV4_SOCKET_BUF_LEN: usize = (3 * 4)  // the segments\n-                + 3  // the separators\n-                + 1 + 5; // the port\n-            let mut buf = [0; IPV4_SOCKET_BUF_LEN];\n-            let mut buf_slice = &mut buf[..];\n-\n-            // Unwrap is fine because writing to a sufficiently-sized\n-            // buffer is infallible\n-            write!(buf_slice, \"{}:{}\", self.ip(), self.port()).unwrap();\n-            let len = IPV4_SOCKET_BUF_LEN - buf_slice.len();\n-\n-            // This unsafe is OK because we know what is being written to the buffer\n-            let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n-            f.pad(buf)\n+            const LONGEST_IPV4_SOCKET_ADDR: &str = \"255.255.255.255:65536\";\n+\n+            let mut buf = DisplayBuffer::<{ LONGEST_IPV4_SOCKET_ADDR.len() }>::new();\n+            // Buffer is long enough for the longest possible IPv4 socket address, so this should never fail.\n+            write!(buf, \"{}:{}\", self.ip(), self.port()).unwrap();\n+\n+            f.pad(buf.as_str())\n         }\n     }\n }\n@@ -649,35 +644,26 @@ impl fmt::Debug for SocketAddrV4 {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for SocketAddrV6 {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // Fast path: if there's no alignment stuff, write to the output\n-        // buffer directly\n+        // If there are no alignment requirements, write the socket address directly to `f`.\n+        // Otherwise, write it to a local buffer and then use `f.pad`.\n         if f.precision().is_none() && f.width().is_none() {\n             match self.scope_id() {\n                 0 => write!(f, \"[{}]:{}\", self.ip(), self.port()),\n                 scope_id => write!(f, \"[{}%{}]:{}\", self.ip(), scope_id, self.port()),\n             }\n         } else {\n-            const IPV6_SOCKET_BUF_LEN: usize = (4 * 8)  // The address\n-            + 7  // The colon separators\n-            + 2  // The brackets\n-            + 1 + 10 // The scope id\n-            + 1 + 5; // The port\n-\n-            let mut buf = [0; IPV6_SOCKET_BUF_LEN];\n-            let mut buf_slice = &mut buf[..];\n+            const LONGEST_IPV6_SOCKET_ADDR: &str =\n+                \"[ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff%4294967296]:65536\";\n \n+            let mut buf = DisplayBuffer::<{ LONGEST_IPV6_SOCKET_ADDR.len() }>::new();\n             match self.scope_id() {\n-                0 => write!(buf_slice, \"[{}]:{}\", self.ip(), self.port()),\n-                scope_id => write!(buf_slice, \"[{}%{}]:{}\", self.ip(), scope_id, self.port()),\n+                0 => write!(buf, \"[{}]:{}\", self.ip(), self.port()),\n+                scope_id => write!(buf, \"[{}%{}]:{}\", self.ip(), scope_id, self.port()),\n             }\n-            // Unwrap is fine because writing to a sufficiently-sized\n-            // buffer is infallible\n+            // Buffer is long enough for the longest possible IPv6 socket address, so this should never fail.\n             .unwrap();\n-            let len = IPV6_SOCKET_BUF_LEN - buf_slice.len();\n \n-            // This unsafe is OK because we know what is being written to the buffer\n-            let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n-            f.pad(buf)\n+            f.pad(buf.as_str())\n         }\n     }\n }", "previous_filename": "library/std/src/net/addr.rs"}, {"sha": "585a17451a0b7ca225d670ec1dbad031fd98fa5e", "filename": "library/std/src/net/addr/socket/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fsocket%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fsocket%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr%2Fsocket%2Ftests.rs?ref=96b44f6f659acc13bba63e29263e504f84b19fc3", "previous_filename": "library/std/src/net/addr/tests.rs"}, {"sha": "8dd0936133dc0cf74470272d4b7c6568ad592435", "filename": "library/std/src/net/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b44f6f659acc13bba63e29263e504f84b19fc3/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs?ref=96b44f6f659acc13bba63e29263e504f84b19fc3", "patch": "@@ -24,9 +24,9 @@\n use crate::io::{self, ErrorKind};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::addr::{SocketAddr, SocketAddrV4, SocketAddrV6, ToSocketAddrs};\n+pub use self::addr::ip::{IpAddr, Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::ip::{IpAddr, Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n+pub use self::addr::socket::{SocketAddr, SocketAddrV4, SocketAddrV6, ToSocketAddrs};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::parser::AddrParseError;\n #[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n@@ -37,7 +37,6 @@ pub use self::tcp::{Incoming, TcpListener, TcpStream};\n pub use self::udp::UdpSocket;\n \n mod addr;\n-mod ip;\n mod parser;\n mod tcp;\n #[cfg(test)]"}]}