{"sha": "3099451020e8ef8dc4c5799e82f926cc364c7034", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOTk0NTEwMjBlOGVmOGRjNGM1Nzk5ZTgyZjkyNmNjMzY0YzcwMzQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-04-17T18:36:19Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-04-17T18:40:51Z"}, "message": "Add result sanity check to `is_to_be_inferred`.\n\nThis version of `is_to_be_inferred` double-checks the result from\n`inferred_map` by querying the `named_region_map` and `ast_map` and\nthen asserts that the `inferred_map` state is consistent with its own\nfindings.  (See issue 13261 for further discussion of the approaches).", "tree": {"sha": "952ac6afc7fb0195b6977745557871a5df1ee229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/952ac6afc7fb0195b6977745557871a5df1ee229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3099451020e8ef8dc4c5799e82f926cc364c7034", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3099451020e8ef8dc4c5799e82f926cc364c7034", "html_url": "https://github.com/rust-lang/rust/commit/3099451020e8ef8dc4c5799e82f926cc364c7034", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3099451020e8ef8dc4c5799e82f926cc364c7034/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "364d82e7f3edb03031db9221be107d146615d610", "url": "https://api.github.com/repos/rust-lang/rust/commits/364d82e7f3edb03031db9221be107d146615d610", "html_url": "https://github.com/rust-lang/rust/commit/364d82e7f3edb03031db9221be107d146615d610"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "ecf4f67e7cd736f463983d772f26fadb4185cf9d", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3099451020e8ef8dc4c5799e82f926cc364c7034/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3099451020e8ef8dc4c5799e82f926cc364c7034/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=3099451020e8ef8dc4c5799e82f926cc364c7034", "patch": "@@ -198,6 +198,7 @@ use arena::Arena;\n use middle::ty;\n use std::fmt;\n use syntax::ast;\n+use syntax::ast_map;\n use syntax::ast_util;\n use syntax::owned_slice::OwnedSlice;\n use syntax::visit;\n@@ -517,6 +518,13 @@ impl<'a> Visitor<()> for ConstraintContext<'a> {\n     }\n }\n \n+/// Is `param_id` a lifetime according to `map`?\n+fn is_lifetime(map: &ast_map::Map, param_id: ast::NodeId) -> bool {\n+    match map.find(param_id) {\n+        Some(ast_map::NodeLifetime(..)) => true, _ => false\n+    }\n+}\n+\n impl<'a> ConstraintContext<'a> {\n     fn tcx(&self) -> &'a ty::ctxt {\n         self.terms_cx.tcx\n@@ -533,8 +541,68 @@ impl<'a> ConstraintContext<'a> {\n         }\n     }\n \n+    fn find_binding_for_lifetime(&self, param_id: ast::NodeId) -> ast::NodeId {\n+        let tcx = self.terms_cx.tcx;\n+        assert!(is_lifetime(&tcx.map, param_id));\n+        match tcx.named_region_map.find(&param_id) {\n+            Some(&ast::DefEarlyBoundRegion(_, lifetime_decl_id))\n+                => lifetime_decl_id,\n+            Some(_) => fail!(\"should not encounter non early-bound cases\"),\n+\n+            // The lookup should only fail when `param_id` is\n+            // itself a lifetime binding: use it as the decl_id.\n+            None    => param_id,\n+        }\n+\n+    }\n+\n+    /// Is `param_id` a type parameter for which we infer variance?\n     fn is_to_be_inferred(&self, param_id: ast::NodeId) -> bool {\n-        self.terms_cx.inferred_map.contains_key(&param_id)\n+        let result = self.terms_cx.inferred_map.contains_key(&param_id);\n+\n+        // To safe-guard against invalid inferred_map constructions,\n+        // double-check if variance is inferred at some use of a type\n+        // parameter (by inspecting parent of its binding declaration\n+        // to see if it is introduced by a type or by a fn/impl).\n+\n+        let check_result = |this:&ConstraintContext| -> bool {\n+            let tcx = this.terms_cx.tcx;\n+            let decl_id = this.find_binding_for_lifetime(param_id);\n+            // Currently only called on lifetimes; double-checking that.\n+            assert!(is_lifetime(&tcx.map, param_id));\n+            let parent_id = tcx.map.get_parent(decl_id);\n+            let parent = tcx.map.find(parent_id).unwrap_or_else(\n+                || fail!(\"tcx.map missing entry for id: {}\", parent_id));\n+\n+            let is_inferred;\n+            macro_rules! cannot_happen { () => { {\n+                fail!(\"invalid parent: {:s} for {:s}\",\n+                      tcx.map.node_to_str(parent_id),\n+                      tcx.map.node_to_str(param_id));\n+            } } }\n+\n+            match parent {\n+                ast_map::NodeItem(p) => {\n+                    match p.node {\n+                        ast::ItemTy(..) |\n+                        ast::ItemEnum(..) |\n+                        ast::ItemStruct(..) |\n+                        ast::ItemTrait(..)   => is_inferred = true,\n+                        ast::ItemFn(..)      => is_inferred = false,\n+                        _                    => cannot_happen!(),\n+                    }\n+                }\n+                ast_map::NodeTraitMethod(..) => is_inferred = false,\n+                ast_map::NodeMethod(_)       => is_inferred = false,\n+                _                            => cannot_happen!(),\n+            }\n+\n+            return is_inferred;\n+        };\n+\n+        assert_eq!(result, check_result(self));\n+\n+        return result;\n     }\n \n     fn declared_variance(&self,"}]}