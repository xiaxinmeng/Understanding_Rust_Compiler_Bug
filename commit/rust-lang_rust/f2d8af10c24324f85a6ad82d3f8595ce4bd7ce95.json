{"sha": "f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95", "node_id": "C_kwDOAAsO6NoAKGYyZDhhZjEwYzI0MzI0Zjg1YTZhZDgyZDNmODU5NWNlNGJkN2NlOTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-09T18:39:51Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-11T06:57:48Z"}, "message": "Do not mention private Self types from other crates", "tree": {"sha": "0b3b42ddc2ac63139cfcf8c6452072ed4d613ca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b3b42ddc2ac63139cfcf8c6452072ed4d613ca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95", "html_url": "https://github.com/rust-lang/rust/commit/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a51fb2ba827f24ec4d676a9575a0a5e46afd302a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51fb2ba827f24ec4d676a9575a0a5e46afd302a", "html_url": "https://github.com/rust-lang/rust/commit/a51fb2ba827f24ec4d676a9575a0a5e46afd302a"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "7ac3815179a39605ae54cb37abff38f88cbf05dd", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95", "patch": "@@ -1805,8 +1805,26 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         || self.tcx.is_builtin_derive(def_id)\n                 })\n                 .filter_map(|def_id| self.tcx.impl_trait_ref(def_id))\n-                // Avoid mentioning type parameters.\n-                .filter(|trait_ref| !matches!(trait_ref.self_ty().kind(), ty::Param(_)))\n+                .filter(|trait_ref| {\n+                    let self_ty = trait_ref.self_ty();\n+                    // Avoid mentioning type parameters.\n+                    if let ty::Param(_) = self_ty.kind() {\n+                        false\n+                    }\n+                    // Avoid mentioning types that are private to another crate\n+                    else if let ty::Adt(def, _) = self_ty.peel_refs().kind() {\n+                        // FIXME(compiler-errors): This could be generalized, both to\n+                        // be more granular, and probably look past other `#[fundamental]`\n+                        // types, too.\n+                        match self.tcx.visibility(def.did()) {\n+                            ty::Visibility::Public => true,\n+                            ty::Visibility::Restricted(def_id) => def_id.is_local(),\n+                            ty::Visibility::Invisible => false,\n+                        }\n+                    } else {\n+                        true\n+                    }\n+                })\n                 .collect();\n             return report(normalized_impl_candidates, err);\n         }"}, {"sha": "115df70a690607bcc8dc2f1e0d34f850c6d53c21", "filename": "src/test/ui/suggestions/auxiliary/meow.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmeow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmeow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmeow.rs?ref=f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95", "patch": "@@ -0,0 +1,11 @@\n+pub trait Meow {\n+    fn meow(&self) {}\n+}\n+\n+pub struct GlobalMeow;\n+\n+impl Meow for GlobalMeow {}\n+\n+pub(crate) struct PrivateMeow;\n+\n+impl Meow for PrivateMeow {}"}, {"sha": "91f574f35b80bc9242effafdf79c4b05226ffc7b", "filename": "src/test/ui/suggestions/issue-99080.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.rs?ref=f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:meow.rs\n+\n+extern crate meow;\n+\n+use meow::Meow;\n+\n+fn needs_meow<T: Meow>(t: T) {}\n+\n+fn main() {\n+    needs_meow(1usize);\n+    //~^ ERROR the trait bound `usize: Meow` is not satisfied\n+}\n+\n+struct LocalMeow;\n+\n+impl Meow for LocalMeow {}"}, {"sha": "d1908dd9d0d862bec0d92c9cc7893db76bdb7547", "filename": "src/test/ui/suggestions/issue-99080.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99080.stderr?ref=f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: the trait bound `usize: Meow` is not satisfied\n+  --> $DIR/issue-99080.rs:10:16\n+   |\n+LL |     needs_meow(1usize);\n+   |     ---------- ^^^^^^ the trait `Meow` is not implemented for `usize`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the following other types implement trait `Meow`:\n+             GlobalMeow\n+             LocalMeow\n+note: required by a bound in `needs_meow`\n+  --> $DIR/issue-99080.rs:7:18\n+   |\n+LL | fn needs_meow<T: Meow>(t: T) {}\n+   |                  ^^^^ required by this bound in `needs_meow`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6ce57b6263e4110da94d15405e4dcde2423288e4", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr?ref=f2d8af10c24324f85a6ad82d3f8595ce4bd7ce95", "patch": "@@ -15,7 +15,6 @@ LL |     s.strip_suffix(b'\\n').unwrap_or(s)\n              &'c &'b str\n              [char; N]\n              char\n-             pattern::MultiCharEqPattern<C>\n    = note: required because of the requirements on the impl of `Pattern<'_>` for `u8`\n \n error: aborting due to previous error"}]}