{"sha": "2b7f1a4f2437eb20dc71eeda13976249f02ad408", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiN2YxYTRmMjQzN2ViMjBkYzcxZWVkYTEzOTc2MjQ5ZjAyYWQ0MDg=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-04T21:30:11Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-28T16:49:20Z"}, "message": "parser comments only", "tree": {"sha": "55e17e397201658365a1dc9e475415277c508f2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55e17e397201658365a1dc9e475415277c508f2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b7f1a4f2437eb20dc71eeda13976249f02ad408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b7f1a4f2437eb20dc71eeda13976249f02ad408", "html_url": "https://github.com/rust-lang/rust/commit/2b7f1a4f2437eb20dc71eeda13976249f02ad408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b7f1a4f2437eb20dc71eeda13976249f02ad408/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c73a9c9cd08991b8766b6badabcb08f5c6b48799", "url": "https://api.github.com/repos/rust-lang/rust/commits/c73a9c9cd08991b8766b6badabcb08f5c6b48799", "html_url": "https://github.com/rust-lang/rust/commit/c73a9c9cd08991b8766b6badabcb08f5c6b48799"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "9ebc6af04a97f56642c6520512d91063b76b4b9d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b7f1a4f2437eb20dc71eeda13976249f02ad408/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7f1a4f2437eb20dc71eeda13976249f02ad408/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2b7f1a4f2437eb20dc71eeda13976249f02ad408", "patch": "@@ -763,6 +763,7 @@ pub impl Parser {\n         return ty_rptr(opt_lifetime, mt);\n     }\n \n+    // parse an optional mode.\n     fn parse_arg_mode(&self) -> mode {\n         if self.eat(&token::BINOP(token::MINUS)) {\n             self.obsolete(*self.span, ObsoleteMode);\n@@ -829,6 +830,7 @@ pub impl Parser {\n                   ty: t, pat: pat, id: self.get_id() }\n     }\n \n+    // parse a single function argument\n     fn parse_arg(&self) -> arg_or_capture_item {\n         either::Left(self.parse_arg_general(true))\n     }\n@@ -2883,6 +2885,8 @@ pub impl Parser {\n         self.bump();\n     }\n \n+    // parse the argument list and result type of a function\n+    // that may have a self type.\n     fn parse_fn_decl_with_self(\n         &self,\n         parse_arg_fn:\n@@ -3056,6 +3060,7 @@ pub impl Parser {\n         }\n     }\n \n+    // parse the name and optional generic types of a function header.\n     fn parse_fn_header(&self) -> (ident, ast::Generics) {\n         let id = self.parse_ident();\n         let generics = self.parse_generics();\n@@ -3073,6 +3078,7 @@ pub impl Parser {\n                      span: mk_sp(lo, hi) }\n     }\n \n+    // parse an item-position function declaration.\n     fn parse_item_fn(&self, purity: purity, abis: AbiSet) -> item_info {\n         let (ident, generics) = self.parse_fn_header();\n         let decl = self.parse_fn_decl(|p| p.parse_arg());"}]}