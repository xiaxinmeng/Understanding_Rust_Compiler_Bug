{"sha": "f7febc8865a2cb2287b034f6588d7617fa0fc6e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZmViYzg4NjVhMmNiMjI4N2IwMzRmNjU4OGQ3NjE3ZmEwZmM2ZTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-19T22:01:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-19T22:01:35Z"}, "message": "Rollup merge of #82570 - WaffleLapkin:split_whitespace_as_str, r=m-ou-se\n\nAdd `as_str` method for split whitespace str iterators\n\nThis PR adds `as_str` methods to `SplitWhitespace` and `SplitAsciiWhitespace`\nstr iterators. The methods return the remainder, similar to `as_str` methods on\n`Chars` and other split iterators. This PR is a continuation of https://github.com/rust-lang/rust/pull/75265, which added `as_str` for all other str split iterators.\n\nThe feature gate for new methods is `#![feature(str_split_whitespace_as_str)]`.\n\n`SplitWhitespace` and `SplitAsciiWhitespace` use iterators under the hood, so to implement `as_str` it's required to either\n1. Make fields of some iterators `pub(crate)`\n2. Add getter methods (like `into_inner`, `inner`, `inner_mut`...) to some (all) iterators\n3. Completely rewrite `SplitWhitespace` and `SplitAsciiWhitespace`\n\nThis PR uses the 1. approach since it's easier to implement and requires fewer changes (and no changes to the public API). If you think that's not the right way, please, tell me.\n\nr? `@m-ou-se`", "tree": {"sha": "83193b13f7b471f7e129851f49e351d855d43d7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83193b13f7b471f7e129851f49e351d855d43d7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7febc8865a2cb2287b034f6588d7617fa0fc6e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVR9ACRBK7hj4Ov3rIwAAdHIIAD1n6JQ+02PxwVIa/jPMoVCu\nboXZMhl4Cdo4dVClpntJX/COf0fAzP4LxfL6wOzR2O7GAB2/eZnRzaSgMPg+pATE\nZmr2bXSyW12IUzJ/UKeltGXKbIpprmJFNUwyPF10Z5v9pDPtpwTjUX+Z484c3Ynq\nce5kjC/xq0yGZ4oz/AjR5GYKcs03XkmtS5mOUUtORwo45kDebsbwWQOmIAJsY0Aw\nWouewiCphMZs/+wIdBcr0RsXylOcp3t4WZkjaHM847xIPrznJxAWQ9OAl6Ttkq5+\n4NX5a2XDyftaZ8AvRmUGMzfcQh9105PN60+bXdwfOp8qeR7eelAqDyf8hGO7/Wk=\n=BAwp\n-----END PGP SIGNATURE-----\n", "payload": "tree 83193b13f7b471f7e129851f49e351d855d43d7e\nparent ae1a2df255d747423d2a7f2be270c7927cf48874\nparent d4fd8538cb01f8be6083d2597a294c673f968290\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616191295 +0100\ncommitter GitHub <noreply@github.com> 1616191295 +0100\n\nRollup merge of #82570 - WaffleLapkin:split_whitespace_as_str, r=m-ou-se\n\nAdd `as_str` method for split whitespace str iterators\n\nThis PR adds `as_str` methods to `SplitWhitespace` and `SplitAsciiWhitespace`\nstr iterators. The methods return the remainder, similar to `as_str` methods on\n`Chars` and other split iterators. This PR is a continuation of https://github.com/rust-lang/rust/pull/75265, which added `as_str` for all other str split iterators.\n\nThe feature gate for new methods is `#![feature(str_split_whitespace_as_str)]`.\n\n`SplitWhitespace` and `SplitAsciiWhitespace` use iterators under the hood, so to implement `as_str` it's required to either\n1. Make fields of some iterators `pub(crate)`\n2. Add getter methods (like `into_inner`, `inner`, `inner_mut`...) to some (all) iterators\n3. Completely rewrite `SplitWhitespace` and `SplitAsciiWhitespace`\n\nThis PR uses the 1. approach since it's easier to implement and requires fewer changes (and no changes to the public API). If you think that's not the right way, please, tell me.\n\nr? `@m-ou-se`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7febc8865a2cb2287b034f6588d7617fa0fc6e9", "html_url": "https://github.com/rust-lang/rust/commit/f7febc8865a2cb2287b034f6588d7617fa0fc6e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7febc8865a2cb2287b034f6588d7617fa0fc6e9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae1a2df255d747423d2a7f2be270c7927cf48874", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1a2df255d747423d2a7f2be270c7927cf48874", "html_url": "https://github.com/rust-lang/rust/commit/ae1a2df255d747423d2a7f2be270c7927cf48874"}, {"sha": "d4fd8538cb01f8be6083d2597a294c673f968290", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fd8538cb01f8be6083d2597a294c673f968290", "html_url": "https://github.com/rust-lang/rust/commit/d4fd8538cb01f8be6083d2597a294c673f968290"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "0337892b9e8e18f9abd465682673e8189827b3a3", "filename": "library/core/src/iter/adapters/filter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7febc8865a2cb2287b034f6588d7617fa0fc6e9/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7febc8865a2cb2287b034f6588d7617fa0fc6e9/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs?ref=f7febc8865a2cb2287b034f6588d7617fa0fc6e9", "patch": "@@ -13,7 +13,8 @@ use crate::ops::Try;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Filter<I, P> {\n-    iter: I,\n+    // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods\n+    pub(crate) iter: I,\n     predicate: P,\n }\n impl<I, P> Filter<I, P> {"}, {"sha": "2a4b7efd5e665e4ad8504d26d012478ec749e0d6", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7febc8865a2cb2287b034f6588d7617fa0fc6e9/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7febc8865a2cb2287b034f6588d7617fa0fc6e9/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=f7febc8865a2cb2287b034f6588d7617fa0fc6e9", "patch": "@@ -57,7 +57,8 @@ use crate::ops::Try;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Map<I, F> {\n-    iter: I,\n+    // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods\n+    pub(crate) iter: I,\n     f: F,\n }\n "}, {"sha": "c82b76df6ff10299c4bcd675ae868393aa50f892", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7febc8865a2cb2287b034f6588d7617fa0fc6e9/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7febc8865a2cb2287b034f6588d7617fa0fc6e9/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=f7febc8865a2cb2287b034f6588d7617fa0fc6e9", "patch": "@@ -335,9 +335,11 @@ pub struct Split<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n {\n-    v: &'a [T],\n+    // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods\n+    pub(crate) v: &'a [T],\n     pred: P,\n-    finished: bool,\n+    // Used for `SplitAsciiWhitespace` `as_str` method\n+    pub(crate) finished: bool,\n }\n \n impl<'a, T: 'a, P: FnMut(&T) -> bool> Split<'a, T, P> {"}, {"sha": "4eac017f9153c74e1c9713910fe53b0e9f3b550b", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f7febc8865a2cb2287b034f6588d7617fa0fc6e9/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7febc8865a2cb2287b034f6588d7617fa0fc6e9/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=f7febc8865a2cb2287b034f6588d7617fa0fc6e9", "patch": "@@ -1200,6 +1200,30 @@ impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for SplitWhitespace<'_> {}\n \n+impl<'a> SplitWhitespace<'a> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_whitespace_as_str)]\n+    ///\n+    /// let mut split = \"Mary had a little lamb\".split_whitespace();\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    ///\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    ///\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.inner.iter.as_str()\n+    }\n+}\n+\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n impl<'a> Iterator for SplitAsciiWhitespace<'a> {\n     type Item = &'a str;\n@@ -1231,6 +1255,35 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n+impl<'a> SplitAsciiWhitespace<'a> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_whitespace_as_str)]\n+    ///\n+    /// let mut split = \"Mary had a little lamb\".split_ascii_whitespace();\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    ///\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    ///\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        if self.inner.iter.iter.finished {\n+            return \"\";\n+        }\n+\n+        // SAFETY: Slice is created from str.\n+        unsafe { crate::str::from_utf8_unchecked(&self.inner.iter.iter.v) }\n+    }\n+}\n+\n #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, P: Pattern<'a>> Iterator for SplitInclusive<'a, P> {\n     type Item = &'a str;"}]}