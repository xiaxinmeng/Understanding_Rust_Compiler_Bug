{"sha": "f3ac19e8cd8be78f1eb96893482edac038739bb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYWMxOWU4Y2Q4YmU3OGYxZWI5Njg5MzQ4MmVkYWMwMzg3MzliYjE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-08-24T20:02:55Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-08-24T20:02:55Z"}, "message": "Support extern types", "tree": {"sha": "8a2cdf4db86466eca026b32a52822092248e95ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a2cdf4db86466eca026b32a52822092248e95ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ac19e8cd8be78f1eb96893482edac038739bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ac19e8cd8be78f1eb96893482edac038739bb1", "html_url": "https://github.com/rust-lang/rust/commit/f3ac19e8cd8be78f1eb96893482edac038739bb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ac19e8cd8be78f1eb96893482edac038739bb1/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed09bd3cc6a37d7d22038adf7ff815f0188a9949", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed09bd3cc6a37d7d22038adf7ff815f0188a9949", "html_url": "https://github.com/rust-lang/rust/commit/ed09bd3cc6a37d7d22038adf7ff815f0188a9949"}], "stats": {"total": 607, "additions": 16, "deletions": 591}, "files": [{"sha": "69affa0ea8970c0356f5d55ef887ff579b50f141", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac19e8cd8be78f1eb96893482edac038739bb1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac19e8cd8be78f1eb96893482edac038739bb1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f3ac19e8cd8be78f1eb96893482edac038739bb1", "patch": "@@ -1688,9 +1688,9 @@ dependencies = [\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.1.2\"\n+version = \"1.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bab6142ac77be714b1ea78faca6efaed5478c50724786b0fe80d8528d10692b3\"\n+checksum = \"ca4d39065b45f658d33013f7cc93ee050708cd543f6e07dd15b4293fcf217e12\"\n \n [[package]]\n name = \"unicode-bidi\""}, {"sha": "6a503d7853ee5f81d3431f19bdbc8481bbfff04f", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac19e8cd8be78f1eb96893482edac038739bb1/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac19e8cd8be78f1eb96893482edac038739bb1/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=f3ac19e8cd8be78f1eb96893482edac038739bb1", "patch": "@@ -557,6 +557,10 @@ impl Ctx {\n                             let statik = self.lower_static(&ast)?;\n                             statik.into()\n                         }\n+                        ast::ExternItem::TypeAlias(ty) => {\n+                            let id = self.lower_type_alias(&ty)?;\n+                            id.into()\n+                        }\n                         ast::ExternItem::MacroCall(_) => return None,\n                     };\n                     self.add_attrs(id.into(), attrs);"}, {"sha": "5ca30dac90c4fad2843aa5cd67b8bf153f0e4f50", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac19e8cd8be78f1eb96893482edac038739bb1/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac19e8cd8be78f1eb96893482edac038739bb1/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=f3ac19e8cd8be78f1eb96893482edac038739bb1", "patch": "@@ -46,6 +46,7 @@ union U { to_be: bool, not_to_be: u8 }\n enum E { V }\n \n extern {\n+    type Ext;\n     static EXT: u8;\n     fn ext();\n }\n@@ -65,6 +66,7 @@ extern {\n             Baz: t v\n             E: t\n             EXT: v\n+            Ext: t\n             U: t\n             ext: v\n         \"#]],"}, {"sha": "d6af5755caf354ecff5d2ac7d4e21735f132ed47", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac19e8cd8be78f1eb96893482edac038739bb1/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac19e8cd8be78f1eb96893482edac038739bb1/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=f3ac19e8cd8be78f1eb96893482edac038739bb1", "patch": "@@ -1380,6 +1380,7 @@ pub enum ExternItem {\n     Fn(Fn),\n     MacroCall(MacroCall),\n     Static(Static),\n+    TypeAlias(TypeAlias),\n }\n impl ast::AttrsOwner for ExternItem {}\n impl ast::NameOwner for ExternItem {}\n@@ -3339,10 +3340,13 @@ impl From<MacroCall> for ExternItem {\n impl From<Static> for ExternItem {\n     fn from(node: Static) -> ExternItem { ExternItem::Static(node) }\n }\n+impl From<TypeAlias> for ExternItem {\n+    fn from(node: TypeAlias) -> ExternItem { ExternItem::TypeAlias(node) }\n+}\n impl AstNode for ExternItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            FN | MACRO_CALL | STATIC => true,\n+            FN | MACRO_CALL | STATIC | TYPE_ALIAS => true,\n             _ => false,\n         }\n     }\n@@ -3351,6 +3355,7 @@ impl AstNode for ExternItem {\n             FN => ExternItem::Fn(Fn { syntax }),\n             MACRO_CALL => ExternItem::MacroCall(MacroCall { syntax }),\n             STATIC => ExternItem::Static(Static { syntax }),\n+            TYPE_ALIAS => ExternItem::TypeAlias(TypeAlias { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3360,6 +3365,7 @@ impl AstNode for ExternItem {\n             ExternItem::Fn(it) => &it.syntax,\n             ExternItem::MacroCall(it) => &it.syntax,\n             ExternItem::Static(it) => &it.syntax,\n+            ExternItem::TypeAlias(it) => &it.syntax,\n         }\n     }\n }"}, {"sha": "0750b5657fb30df191f087e15daba5f0370c2424", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac19e8cd8be78f1eb96893482edac038739bb1/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac19e8cd8be78f1eb96893482edac038739bb1/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=f3ac19e8cd8be78f1eb96893482edac038739bb1", "patch": "@@ -15,7 +15,7 @@ flate2 = \"1.0\"\n pico-args = \"0.3.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"1.1.1\"\n+ungrammar = \"1.1.3\"\n walkdir = \"2.3.1\"\n write-json =  \"0.1.0\"\n # Avoid adding more dependencies to this crate"}, {"sha": "aca23890c6d617fc9d201edbf263bccad1792983", "filename": "xtask/src/codegen/rust.ungram", "status": "removed", "additions": 0, "deletions": 587, "changes": 587, "blob_url": "https://github.com/rust-lang/rust/blob/ed09bd3cc6a37d7d22038adf7ff815f0188a9949/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/ed09bd3cc6a37d7d22038adf7ff815f0188a9949/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=ed09bd3cc6a37d7d22038adf7ff815f0188a9949", "patch": "@@ -1,587 +0,0 @@\n-//*************************//\n-// Names, Paths and Macros //\n-//*************************//\n-\n-Name =\n-  'ident'\n-\n-NameRef =\n-  'ident' | 'int_number'\n-\n-Path =\n-  (qualifier:Path '::')? segment:PathSegment\n-\n-PathSegment =\n-  'crate' | 'self' | 'super'\n-| '::' NameRef\n-| NameRef GenericArgList?\n-| NameRef ParamList RetType?\n-| '<' PathType ('as' PathType)? '>'\n-\n-GenericArgList =\n-  '::'? '<' (GenericArg (',' GenericArg)* ','?)? '>'\n-\n-GenericArg =\n-  TypeArg\n-| AssocTypeArg\n-| LifetimeArg\n-| ConstArg\n-\n-TypeArg =\n-  Type\n-\n-AssocTypeArg =\n-  NameRef (':' TypeBoundList | '=' Type)\n-\n-LifetimeArg =\n-  'lifetime'\n-\n-ConstArg =\n-  Expr\n-\n-MacroCall =\n-  Attr* Path '!' Name? TokenTree ';'?\n-\n-TokenTree =\n-  '(' ')'\n-| '{' '}'\n-| '[' ']'\n-\n-MacroItems =\n-  Item*\n-\n-MacroStmts =\n-  statements:Stmt*\n-  Expr?\n-\n-//*************************//\n-//          Items          //\n-//*************************//\n-\n-SourceFile =\n-  'shebang'?\n-  Attr*\n-  Item*\n-\n-Item =\n-  Const\n-| Enum\n-| ExternBlock\n-| ExternCrate\n-| Fn\n-| Impl\n-| MacroCall\n-| Module\n-| Static\n-| Struct\n-| Trait\n-| TypeAlias\n-| Union\n-| Use\n-\n-Module =\n-  Attr* Visibility? 'mod' Name\n-  (ItemList | ';')\n-\n-ItemList =\n-  '{' Attr* Item* '}'\n-\n-ExternCrate =\n-  Attr* Visibility? 'extern' 'crate' (NameRef | 'self') Rename? ';'\n-\n-Rename =\n-  'as' (Name | '_')\n-\n-Use =\n-  Attr* Visibility? 'use' UseTree ';'\n-\n-UseTree =\n-  (Path? '::')? ('*' | UseTreeList )\n-| Path Rename?\n-\n-UseTreeList =\n-  '{' (UseTree (',' UseTree)* ','?)? '}'\n-\n-Fn =\n- Attr* Visibility?\n- 'default'? ('async' | 'const')? 'unsafe'? Abi?\n- 'fn' Name GenericParamList? ParamList RetType?\n- WhereClause?\n- (body:BlockExpr | ';')\n-\n-Abi =\n-  'extern' 'string'?\n-\n-ParamList =\n-  '('(\n-    SelfParam\n-  | (SelfParam ',')? (Param (',' Param)* ','?)?\n-  )')'\n-\n-SelfParam =\n-  Attr* (\n-    ('&' 'lifetime'?)? 'mut'? 'self'\n-  | 'mut'? 'self' ':' Type\n-  )\n-\n-Param =\n-  Attr* (\n-    Pat (':' Type)\n-  | Type\n-  | '...'\n-  )\n-\n-RetType =\n-  '->' Type\n-\n-TypeAlias =\n-  Attr* Visibility? 'default'? 'type' Name GenericParamList? (':' TypeBoundList?)? WhereClause?\n-  '=' Type ';'\n-\n-Struct =\n-  Attr* Visibility? 'struct' Name GenericParamList? (\n-    WhereClause?  (RecordFieldList | ';')\n-  | TupleFieldList WhereClause? ';'\n-  )\n-\n-RecordFieldList =\n- '{' fields:(RecordField (',' RecordField)* ','?)? '}'\n-\n-RecordField =\n-  Attr* Visibility? Name ':' Type\n-\n-TupleFieldList =\n-  '(' fields:(TupleField (',' TupleField)* ','?)? ')'\n-\n-TupleField =\n-  Attr* Visibility? Type\n-\n-FieldList =\n-  RecordFieldList\n-| TupleFieldList\n-\n-Enum =\n-  Attr* Visibility? 'enum' Name GenericParamList? WhereClause?\n-  VariantList\n-\n-VariantList =\n- '{' (Variant (',' Variant)* ','?)? '}'\n-\n-Variant =\n-  Attr* Visibility? Name FieldList ('=' Expr)?\n-\n-Union =\n-  Attr* Visibility? 'union' Name GenericParamList? WhereClause?\n-  RecordFieldList\n-\n-AdtDef =\n-  Enum\n-| Struct\n-| Union\n-\n-Const =\n-  Attr* Visibility? 'default'? 'const' (Name | '_') ':' Type\n-  '=' body:Expr ';'\n-\n-Static =\n-  Attr* Visibility? 'static'? 'mut'? Name ':' Type\n-  '=' body:Expr ';'\n-\n-Trait =\n-  Attr* Visibility? 'unsafe'? 'auto'? 'trait' Name GenericParamList\n-  (':' TypeBoundList?)? WhereClause\n-  AssocItemList\n-\n-AssocItemList =\n-  '{' Attr* AssocItem* '}'\n-\n-AssocItem =\n-  Const\n-| Fn\n-| MacroCall\n-| TypeAlias\n-\n-Impl =\n-  Attr* Visibility?\n-  'default'? 'unsafe'? 'impl' 'const'? GenericParamList?\n-  ('!'? target_trait:Type 'for')? target_type:Type\n-  WhereClause?\n-  AssocItemList\n-\n-ExternBlock =\n-  Attr* Abi ExternItemList\n-\n-ExternItemList =\n-  '{' Attr* ExternItem* '}'\n-\n-ExternItem =\n-  Fn | Static | MacroCall\n-\n-GenericParamList =\n-  '<' (GenericParam (',' GenericParam)* ','?)? '>'\n-\n-GenericParam =\n-  ConstParam\n-| LifetimeParam\n-| TypeParam\n-\n-TypeParam =\n-  Attr* Name (':' TypeBoundList?)?\n-  ('=' default_type:Type)?\n-\n-ConstParam =\n-  Attr* 'const' Name ':' Type\n-  ('=' default_val:Expr)?\n-\n-LifetimeParam =\n-  Attr* 'lifetime' (':' TypeBoundList?)?\n-\n-WhereClause =\n-  'where' predicates:(WherePred (',' WherePred)* ','?)\n-\n-WherePred =\n-  ('for' GenericParamList)?  ('lifetime' | Type) ':' TypeBoundList\n-\n-Visibility =\n-  'pub' ('('\n-    'super'\n-  | 'self'\n-  | 'crate'\n-  | 'in' Path\n-  ')')?\n-\n-Attr =\n-  '#' '!'? '[' Path ('=' Literal | TokenTree)? ']'\n-\n-//****************************//\n-// Statements and Expressions //\n-//****************************//\n-\n-Stmt =\n-  ExprStmt\n-| Item\n-| LetStmt\n-\n-LetStmt =\n-  Attr* 'let' Pat (':' Type)?\n-  '=' initializer:Expr ';'\n-\n-ExprStmt =\n-  Attr* Expr ';'?\n-\n-Expr =\n-  ArrayExpr\n-| AwaitExpr\n-| BinExpr\n-| BlockExpr\n-| BoxExpr\n-| BreakExpr\n-| CallExpr\n-| CastExpr\n-| ClosureExpr\n-| ContinueExpr\n-| EffectExpr\n-| FieldExpr\n-| ForExpr\n-| IfExpr\n-| IndexExpr\n-| Literal\n-| LoopExpr\n-| MacroCall\n-| MatchExpr\n-| MethodCallExpr\n-| ParenExpr\n-| PathExpr\n-| PrefixExpr\n-| RangeExpr\n-| RecordExpr\n-| RefExpr\n-| ReturnExpr\n-| TryExpr\n-| TupleExpr\n-| WhileExpr\n-\n-Literal =\n-  Attr* value:(\n-    'int_number' | 'float_number'\n-  | 'string' | 'raw_string'\n-  | 'byte_string' | 'raw_byte_string'\n-  | 'true' | 'false'\n-  | 'char' | 'byte'\n-  )\n-\n-PathExpr =\n-  Attr* Path\n-\n-BlockExpr =\n-  '{'\n-    Attr*\n-    statements:Stmt*\n-    Expr?\n-  '}'\n-\n-RefExpr =\n-  Attr* '&' ('raw' |'mut' | 'const') Expr\n-\n-TryExpr =\n-  Attr* Expr '?'\n-\n-EffectExpr =\n-  Attr* Label? ('try' | 'unsafe' | 'async') BlockExpr\n-\n-PrefixExpr =\n-  Attr* op:('-' | '!' | '*') Expr\n-\n-BinExpr =\n-  Attr*\n-  lhs:Expr\n-  op:(\n-    '||' | '&&'\n-    | '==' | '!=' | '<=' | '>=' | '<' | '>'\n-    | '+' | '*' | '-' | '/' | '%' | '<<' | '>>' | '^' | '|' | '&'\n-    | '=' | '+=' | '/=' | '*=' | '%=' | '>>=' | '<<=' | '-=' | '|=' | '&=' | '^='\n-  )\n-  rhs:Expr\n-\n-CastExpr =\n-  Attr* Expr 'as' Type\n-\n-ParenExpr =\n-  Attr* '(' Attr* Expr ')'\n-\n-ArrayExpr =\n-  Attr* '[' Attr* (\n-    (Expr (',' Expr)* ','?)?\n-  | Expr ';' Expr\n-  ) ']'\n-\n-IndexExpr =\n-  Attr* base:Expr '[' index:Expr ']'\n-\n-TupleExpr =\n-  Attr* '(' Attr* fields:(Expr (',' Expr)* ','?)? ')'\n-\n-RecordExpr =\n-  Path RecordExprFieldList\n-\n-RecordExprFieldList =\n-  '{'\n-    Attr*\n-    fields:(RecordExprField (',' RecordExprField)* ','?)\n-    ('..' spread:Expr)?\n-  '}'\n-\n-RecordExprField =\n-  Attr* NameRef (':' Expr)?\n-\n-CallExpr =\n-  Attr* Expr ArgList\n-\n-ArgList =\n-  '(' args:(Expr (',' Expr)* ','?)? ')'\n-\n-MethodCallExpr =\n-  Attr* Expr '.' NameRef GenericArgList? ArgList\n-\n-FieldExpr =\n-  Attr* Expr '.' NameRef\n-\n-ClosureExpr =\n-  Attr* 'static'? 'async'? 'move'?  ParamList RetType?\n-  body:Expr\n-\n-IfExpr =\n-  Attr* 'if' Condition then_branch:BlockExpr\n-  ('else' else_branch:(IfExpr | BlockExpr))?\n-\n-Condition =\n-  'let' Pat '=' Expr\n-| Expr\n-\n-LoopExpr =\n-  Attr* Label? 'loop'\n-  loop_body:BlockExpr\n-\n-ForExpr =\n-  Attr* Label? 'for' Pat 'in' iterable:Expr\n-  loop_body:BlockExpr\n-\n-WhileExpr =\n-  Attr* Label? 'while' Condition\n-  loop_body:BlockExpr\n-\n-Label =\n-  'lifetime'\n-\n-BreakExpr =\n-  Attr* 'break' 'lifetime'? Expr?\n-\n-ContinueExpr =\n-  Attr* 'continue' 'lifetime'?\n-\n-RangeExpr =\n-  Attr* start:Expr? op:('..' | '..=') end:Expr?\n-\n-MatchExpr =\n-  Attr* 'match' Expr MatchArmList\n-\n-MatchArmList =\n-  '{'\n-    Attr*\n-    arms:MatchArm*\n-  '}'\n-\n-MatchArm =\n-  Attr* Pat guard:MatchGuard? '=>' Expr ','?\n-\n-MatchGuard =\n-  'if' Expr\n-\n-ReturnExpr =\n-  Attr* 'return' Expr?\n-\n-AwaitExpr =\n-  Attr* Expr '.' 'await'\n-\n-BoxExpr =\n-  Attr* 'box' Expr\n-\n-//*************************//\n-//          Types          //\n-//*************************//\n-\n-Type =\n-  ArrayType\n-| DynTraitType\n-| FnPointerType\n-| ForType\n-| ImplTraitType\n-| InferType\n-| NeverType\n-| ParenType\n-| PathType\n-| PointerType\n-| ReferenceType\n-| SliceType\n-| TupleType\n-\n-ParenType =\n-  '(' Type ')'\n-\n-NeverType =\n-  '!'\n-\n-PathType =\n-  Path\n-\n-TupleType =\n-  '(' fields:(Type (',' Type)* ','?)? ')'\n-\n-PointerType =\n-  '*' ('const' | 'mut') Type\n-\n-ReferenceType =\n-  '&' 'lifetime'? 'mut'? Type\n-\n-ArrayType =\n-  '[' Type ';' Expr ']'\n-\n-SliceType =\n-  '[' Type ']'\n-\n-InferType =\n-  '_'\n-\n-FnPointerType =\n-  'const'? 'async'? 'unsafe'? Abi? 'fn' ParamList RetType?\n-\n-ForType =\n-  'for' GenericParamList Type\n-\n-ImplTraitType =\n-  'impl' TypeBoundList\n-\n-DynTraitType =\n-  'dyn' TypeBoundList\n-\n-TypeBoundList =\n-  bounds:(TypeBound ('+' TypeBound)* '+'?)\n-\n-TypeBound =\n-  'lifetime'\n-| '?'? Type\n-\n-//************************//\n-//        Patterns        //\n-//************************//\n-\n-Pat =\n-  IdentPat\n-| BoxPat\n-| RestPat\n-| LiteralPat\n-| MacroPat\n-| OrPat\n-| ParenPat\n-| PathPat\n-| WildcardPat\n-| RangePat\n-| RecordPat\n-| RefPat\n-| SlicePat\n-| TuplePat\n-| TupleStructPat\n-\n-LiteralPat =\n-  Literal\n-\n-IdentPat =\n-  Attr* 'ref'? 'mut'? Name ('@' Pat)?\n-\n-WildcardPat =\n-  '_'\n-\n-RangePat =\n-  start:Pat op:('..' | '..=') end:Pat\n-\n-RefPat =\n-  '&' 'mut'? Pat\n-\n-RecordPat =\n-  Path RecordPatFieldList\n-\n-RecordPatFieldList =\n-  '{'\n-    fields:(RecordPatField (',' RecordPatField)* ','?)\n-    '..'?\n-  '}'\n-\n-RecordPatField =\n-  Attr* (NameRef ':')? Pat\n-\n-TupleStructPat =\n-   Path '(' fields:(Pat (',' Pat)* ','?)? ')'\n-\n-TuplePat =\n-   '(' fields:(Pat (',' Pat)* ','?)? ')'\n-\n-ParenPat =\n-  '(' Pat ')'\n-\n-SlicePat =\n-  '[' (Pat (',' Pat)* ','?)? ']'\n-\n-PathPat =\n-  Path\n-\n-OrPat =\n-  (Pat ('|' Pat)* '|'?)\n-\n-BoxPat =\n-  'box' Pat\n-\n-RestPat =\n-  '..'\n-\n-MacroPat =\n-  MacroCall"}]}