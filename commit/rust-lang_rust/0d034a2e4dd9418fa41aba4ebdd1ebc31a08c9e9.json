{"sha": "0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMDM0YTJlNGRkOTQxOGZhNDFhYmE0ZWJkZDFlYmMzMWEwOGM5ZTk=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-04T00:17:26Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-10T16:52:12Z"}, "message": "Fix inhabitedness of non-exhaustive variants.\n\nThis commit ensures that non-exhaustive variants are considered\ninhabited when used in extern crates.", "tree": {"sha": "2b8181dccce6f74086ff1f74385d4a383930648d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b8181dccce6f74086ff1f74385d4a383930648d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlzVrDwACgkQAXYLT59T\n8VSRWA//RlQWZiCLJWNnkoMmFFUo80aGeS7LGlVgnG7JKrRm5BZ1ta8PE5ddtKz6\nLQGv5H07pHfwLvVJ5w3LOEI45csGwFhNFojew59pXsyuxjh9YLBuqzdhA7+zKy/i\nfexQCvFkjMZYWOovrWngtJcxFM6SbJR2yb78+VGjSbL4rVQePSYzYgt6mqTXFYEx\nZCTjCofHM/ifWVqpewpKQNEQZ1ZA1hrvMuVtIaVEkRdFxzkbNRRYxwq+IbO2ahZY\nIXtwTJU7CUqeh3ZVH0TmQ7pWdhemWww/A70xXj6QgWneN4zsvWX22Py/pxKei/mi\n+48CIxEvk3M4RVGMLJrzjRRYGLkjGA+6s4pTfHogpZ+u+K+Rts6/49i9h/zv1Xsk\nyQ9h25NhzoyvPYfnhMKkBV5aMw1Wsi5O5MXEgwyyxY4hdOoBb+kWptoRxWkjGQAy\n4ZrKFKLSHT6xDdqRJSh6cwYiGZzxH/JE9qg1X9LhcJDvNfwPj7srr5s2mWHsHRyn\nyFZkIG/GyCGncj7p8IpJDP+NG6C3XfrFFFhhLDrtopJd0vsiZE3UnJwxf/uLSk6D\n0o/vluqo6049Pb18HjwKZI2SctKKedvLKtX3QdCfC3/qHM4oeBJZDEWiQoad4wWT\nOrp5mux/QiaqbPnOglrnIRatgOb66Wh0YCpBiKZS0EcKyt4ust0=\n=OeQJ\n-----END PGP SIGNATURE-----", "payload": "tree 2b8181dccce6f74086ff1f74385d4a383930648d\nparent 0db087e6840cc865bcf8be09ff940f2ac13341ac\nauthor David Wood <david@davidtw.co> 1556929046 +0100\ncommitter David Wood <david@davidtw.co> 1557507132 +0100\n\nFix inhabitedness of non-exhaustive variants.\n\nThis commit ensures that non-exhaustive variants are considered\ninhabited when used in extern crates.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9", "html_url": "https://github.com/rust-lang/rust/commit/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0db087e6840cc865bcf8be09ff940f2ac13341ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db087e6840cc865bcf8be09ff940f2ac13341ac", "html_url": "https://github.com/rust-lang/rust/commit/0db087e6840cc865bcf8be09ff940f2ac13341ac"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "2fc07fb20bf162186fff163e5b0204913989e836", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9", "patch": "@@ -134,9 +134,14 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n             AdtKind::Enum => true,\n             AdtKind::Struct => false,\n         };\n-        DefIdForest::union(tcx, self.fields.iter().map(|f| {\n-            f.uninhabited_from(tcx, substs, is_enum)\n-        }))\n+        // Non-exhaustive variants from other crates are always considered inhabited.\n+        if self.is_field_list_non_exhaustive() && !self.def_id.is_local() {\n+            DefIdForest::empty()\n+        } else {\n+            DefIdForest::union(tcx, self.fields.iter().map(|f| {\n+                f.uninhabited_from(tcx, substs, is_enum)\n+            }))\n+        }\n     }\n }\n "}, {"sha": "fd4416fc2b7632acfd07a8efc5d50dc3cf108c19", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9", "patch": "@@ -388,6 +388,18 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn is_non_exhaustive_variant<'p>(&self, pattern: &'p Pattern<'tcx>) -> bool\n+        where 'a: 'p\n+    {\n+        match *pattern.kind {\n+            PatternKind::Variant { adt_def, variant_index, .. } => {\n+                let ref variant = adt_def.variants[variant_index];\n+                variant.is_field_list_non_exhaustive()\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     fn is_non_exhaustive_enum(&self, ty: Ty<'tcx>) -> bool {\n         match ty.sty {\n             ty::Adt(adt_def, ..) => adt_def.is_variant_list_non_exhaustive(),\n@@ -1097,10 +1109,17 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     debug!(\"is_useful_expand_first_col: pcx={:#?}, expanding {:#?}\", pcx, v[0]);\n \n     if let Some(constructors) = pat_constructors(cx, v[0], pcx) {\n-        debug!(\"is_useful - expanding constructors: {:#?}\", constructors);\n-        split_grouped_constructors(cx.tcx, constructors, matrix, pcx.ty).into_iter().map(|c|\n-            is_useful_specialized(cx, matrix, v, c, pcx.ty, witness)\n-        ).find(|result| result.is_useful()).unwrap_or(NotUseful)\n+        let is_declared_nonexhaustive = cx.is_non_exhaustive_variant(v[0]) && !cx.is_local(pcx.ty);\n+        debug!(\"is_useful - expanding constructors: {:#?}, is_declared_nonexhaustive: {:?}\",\n+               constructors, is_declared_nonexhaustive);\n+\n+        if is_declared_nonexhaustive {\n+            Useful\n+        } else {\n+            split_grouped_constructors(cx.tcx, constructors, matrix, pcx.ty).into_iter().map(|c|\n+                is_useful_specialized(cx, matrix, v, c, pcx.ty, witness)\n+            ).find(|result| result.is_useful()).unwrap_or(NotUseful)\n+        }\n     } else {\n         debug!(\"is_useful - expanding wildcard\");\n "}, {"sha": "260c2e04d74f78a9bf6dfa188df0c03a3bb19bc0", "filename": "src/test/ui/pattern/const-pat-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr?ref=0d034a2e4dd9418fa41aba4ebdd1ebc31a08c9e9", "patch": "@@ -1,4 +1,4 @@\n-thread 'rustc' panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())', src/librustc_mir/hair/pattern/_match.rs:1071:5\n+thread 'rustc' panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())', src/librustc_mir/hair/pattern/_match.rs:1083:5\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n error: internal compiler error: unexpected panic"}]}