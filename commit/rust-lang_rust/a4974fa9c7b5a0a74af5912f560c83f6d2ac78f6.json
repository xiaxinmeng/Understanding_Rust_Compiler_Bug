{"sha": "a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6", "node_id": "C_kwDOAAsO6NoAKGE0OTc0ZmE5YzdiNWEwYTc0YWY1OTEyZjU2MGM4M2Y2ZDJhYzc4ZjY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-02T23:12:47Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-04T18:12:42Z"}, "message": "Split `-Zchalk` flag into `-Ztrait-solver=(stock|chalk|next)` flag", "tree": {"sha": "3b8dbd73c06d7ec42db9bf4913ac6986c04cbd53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b8dbd73c06d7ec42db9bf4913ac6986c04cbd53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6", "html_url": "https://github.com/rust-lang/rust/commit/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df756439df8110e8e5ff490b68d2886c8c6ae221", "url": "https://api.github.com/repos/rust-lang/rust/commits/df756439df8110e8e5ff490b68d2886c8c6ae221", "html_url": "https://github.com/rust-lang/rust/commit/df756439df8110e8e5ff490b68d2886c8c6ae221"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "316e2e29cd8b31c107aaed69dcc00f04bb232e50", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6", "patch": "@@ -4,6 +4,7 @@ use crate::interface::parse_cfgspecs;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::rustc_optgroups;\n+use rustc_session::config::TraitSolver;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{\n     BranchProtection, Externs, OomStrategy, OutputType, OutputTypes, PAuthKey, PacRet,\n@@ -722,7 +723,6 @@ fn test_unstable_options_tracking_hash() {\n             pac_ret: Some(PacRet { leaf: true, key: PAuthKey::B })\n         })\n     );\n-    tracked!(chalk, true);\n     tracked!(codegen_backend, Some(\"abc\".to_string()));\n     tracked!(crate_attr, vec![\"abc\".to_string()]);\n     tracked!(debug_info_for_profiling, true);\n@@ -792,6 +792,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(thinlto, Some(true));\n     tracked!(thir_unsafeck, true);\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n+    tracked!(trait_solver, TraitSolver::Chalk);\n     tracked!(translate_remapped_path_to_local_path, false);\n     tracked!(trap_unreachable, Some(false));\n     tracked!(treat_err_as_bug, NonZeroUsize::new(1));"}, {"sha": "4f1175856dc3fab0cf14f21a48d7b6baf5a3d2a6", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6", "patch": "@@ -554,6 +554,16 @@ pub enum PrintRequest {\n     SplitDebuginfo,\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub enum TraitSolver {\n+    /// Stock trait solver in `rustc_trait_selection::traits::select`\n+    Stock,\n+    /// Chalk trait solver\n+    Chalk,\n+    /// Experimental trait solver in `rustc_trait_selection::solve`\n+    Next,\n+}\n+\n pub enum Input {\n     /// Load source code from a file.\n     File(PathBuf),\n@@ -2761,7 +2771,7 @@ pub(crate) mod dep_tracking {\n         BranchProtection, CFGuard, CFProtection, CrateType, DebugInfo, ErrorOutputType,\n         InstrumentCoverage, LdImpl, LinkerPluginLto, LocationDetail, LtoCli, OomStrategy, OptLevel,\n         OutputType, OutputTypes, Passes, SourceFileHashAlgorithm, SplitDwarfKind,\n-        SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n+        SwitchWithOptPath, SymbolManglingVersion, TraitSolver, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n@@ -2861,6 +2871,7 @@ pub(crate) mod dep_tracking {\n         BranchProtection,\n         OomStrategy,\n         LanguageIdentifier,\n+        TraitSolver,\n     );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)"}, {"sha": "9ce50246b08aaffdadb62bad0cf3df9d0a695e19", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6", "patch": "@@ -382,6 +382,8 @@ mod desc {\n         \"`all` (default), `except-unused-generics`, `except-unused-functions`, or `off`\";\n     pub const parse_unpretty: &str = \"`string` or `string=string`\";\n     pub const parse_treat_err_as_bug: &str = \"either no value or a number bigger than 0\";\n+    pub const parse_trait_solver: &str =\n+        \"one of the supported solver modes (`stock`, `chalk`, or `next`)\";\n     pub const parse_lto: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, `fat`, or omitted\";\n     pub const parse_linker_plugin_lto: &str =\n@@ -880,6 +882,16 @@ mod parse {\n         }\n     }\n \n+    pub(crate) fn parse_trait_solver(slot: &mut TraitSolver, v: Option<&str>) -> bool {\n+        match v {\n+            Some(\"stock\") => *slot = TraitSolver::Stock,\n+            Some(\"chalk\") => *slot = TraitSolver::Chalk,\n+            Some(\"next\") => *slot = TraitSolver::Next,\n+            _ => return false,\n+        }\n+        true\n+    }\n+\n     pub(crate) fn parse_lto(slot: &mut LtoCli, v: Option<&str>) -> bool {\n         if v.is_some() {\n             let mut bool_arg = None;\n@@ -1249,8 +1261,6 @@ options! {\n         \"instrument control-flow architecture protection\"),\n     cgu_partitioning_strategy: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the codegen unit partitioning strategy to use\"),\n-    chalk: bool = (false, parse_bool, [TRACKED],\n-        \"enable the experimental Chalk-based trait solving engine\"),\n     codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the backend to use\"),\n     combine_cgu: bool = (false, parse_bool, [TRACKED],\n@@ -1609,6 +1619,8 @@ options! {\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n     track_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n         \"tracks where in rustc a diagnostic was emitted\"),\n+    trait_solver: TraitSolver = (TraitSolver::Stock, parse_trait_solver, [TRACKED],\n+        \"specify the trait solver mode used by rustc (default: stock)\"),\n     // Diagnostics are considered side-effects of a query (see `QuerySideEffects`) and are saved\n     // alongside query results and changes to translation options can affect diagnostics - so\n     // translation options should be tracked."}, {"sha": "bd56d058a4901e6d5bf41f67607b3e66c8cf06b4", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6", "patch": "@@ -3,6 +3,7 @@ use std::fmt::Debug;\n \n use super::TraitEngine;\n use super::{ChalkFulfillmentContext, FulfillmentContext};\n+use crate::solve::FulfillmentCtxt as NextFulfillmentCtxt;\n use crate::traits::NormalizeExt;\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -20,6 +21,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_session::config::TraitSolver;\n use rustc_span::Span;\n \n pub trait TraitEngineExt<'tcx> {\n@@ -29,18 +31,18 @@ pub trait TraitEngineExt<'tcx> {\n \n impl<'tcx> TraitEngineExt<'tcx> for dyn TraitEngine<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> Box<Self> {\n-        if tcx.sess.opts.unstable_opts.chalk {\n-            Box::new(ChalkFulfillmentContext::new())\n-        } else {\n-            Box::new(FulfillmentContext::new())\n+        match tcx.sess.opts.unstable_opts.trait_solver {\n+            TraitSolver::Stock => Box::new(FulfillmentContext::new()),\n+            TraitSolver::Chalk => Box::new(ChalkFulfillmentContext::new()),\n+            TraitSolver::Next => Box::new(NextFulfillmentCtxt::new()),\n         }\n     }\n \n     fn new_in_snapshot(tcx: TyCtxt<'tcx>) -> Box<Self> {\n-        if tcx.sess.opts.unstable_opts.chalk {\n-            Box::new(ChalkFulfillmentContext::new_in_snapshot())\n-        } else {\n-            Box::new(FulfillmentContext::new_in_snapshot())\n+        match tcx.sess.opts.unstable_opts.trait_solver {\n+            TraitSolver::Stock => Box::new(FulfillmentContext::new_in_snapshot()),\n+            TraitSolver::Chalk => Box::new(ChalkFulfillmentContext::new_in_snapshot()),\n+            TraitSolver::Next => Box::new(NextFulfillmentCtxt::new()),\n         }\n     }\n }"}, {"sha": "ac52316d9c91792e952781a5df69537dd030046d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6", "patch": "@@ -40,6 +40,7 @@ use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n     TypeVisitable,\n };\n+use rustc_session::config::TraitSolver;\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::sym;\n@@ -1167,7 +1168,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n \n                     ty::PredicateKind::WellFormed(ty) => {\n-                        if !self.tcx.sess.opts.unstable_opts.chalk {\n+                        if self.tcx.sess.opts.unstable_opts.trait_solver != TraitSolver::Chalk {\n                             // WF predicates cannot themselves make\n                             // errors. They can only block due to\n                             // ambiguity; otherwise, they always"}, {"sha": "15526b34ed2d851a6f357b67e220e281b23cf52d", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::ty::{\n     self, Binder, GenericArg, GenericArgKind, GenericParamDefKind, InternalSubsts, SubstsRef,\n     ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt,\n };\n+use rustc_session::config::TraitSolver;\n use rustc_span::def_id::DefId;\n \n use crate::traits::project::{normalize_with_depth, normalize_with_depth_to};\n@@ -767,8 +768,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         debug!(?closure_def_id, ?trait_ref, ?nested, \"confirm closure candidate obligations\");\n \n         // FIXME: Chalk\n-\n-        if !self.tcx().sess.opts.unstable_opts.chalk {\n+        if self.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Chalk {\n             nested.push(obligation.with(\n                 self.tcx(),\n                 ty::Binder::dummy(ty::PredicateKind::ClosureKind(closure_def_id, substs, kind)),"}, {"sha": "86afac113d79e4f9cef5ee2998f73a5e89bee5d0", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=a4974fa9c7b5a0a74af5912f560c83f6d2ac78f6", "patch": "@@ -2,6 +2,7 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt};\n+use rustc_session::config::TraitSolver;\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>(\n@@ -121,7 +122,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // are any errors at that point, so outside of type inference you can be\n     // sure that this will succeed without errors anyway.\n \n-    if tcx.sess.opts.unstable_opts.chalk {\n+    if tcx.sess.opts.unstable_opts.trait_solver == TraitSolver::Chalk {\n         let environment = well_formed_types_in_env(tcx, def_id);\n         predicates.extend(environment);\n     }"}]}