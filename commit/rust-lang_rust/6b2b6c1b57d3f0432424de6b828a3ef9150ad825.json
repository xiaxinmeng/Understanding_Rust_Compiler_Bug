{"sha": "6b2b6c1b57d3f0432424de6b828a3ef9150ad825", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMmI2YzFiNTdkM2YwNDMyNDI0ZGU2YjgyOGEzZWY5MTUwYWQ4MjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-30T16:42:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-30T16:42:24Z"}, "message": "Merge #8698\n\n8698: fix: search only crate-level prelude when looking for an item r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8688\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "02f41c4fdb0615f27370e9ea4c6837d3cb66421c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02f41c4fdb0615f27370e9ea4c6837d3cb66421c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b2b6c1b57d3f0432424de6b828a3ef9150ad825", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgjDNwCRBK7hj4Ov3rIwAAaggIAIWno067BAahjhKTUzhF48cR\nWH9meBAHdCbGUNaSssrHaEy6sIY63/v1aD3JvOC0d6s0nD6ZtcUjr0hsOAdO5Ptr\nz16X6hhNK9Sadss2EJX+efUl139wV5/Y0fsfKo2XdCvWBUh5O1K5EuAzhNrLr6jJ\npmvsVCUCcHPO5ceDPo3zh3Mv0WMdfo+LE+FPIb8FqGcdy2zHFOuKgc9q7/AQcmwC\nDsxovuz4niwPdHTc8VOREsVX+QWdp1M6bJRkkWPl0K1JkkC1/LENFxveiIDncrKN\n+MOtdzF1cyZlN2Vnnkb0oLIBno4VO4Cy9d4/YWH+jXhZ5JdiOBcSomFWDPVRAhg=\n=7jyg\n-----END PGP SIGNATURE-----\n", "payload": "tree 02f41c4fdb0615f27370e9ea4c6837d3cb66421c\nparent b5b4a1f23dd4d544eec0699bda9df39235617711\nparent 6873920c4f371db13e221d7ba9a599ed7efb95dd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1619800944 +0000\ncommitter GitHub <noreply@github.com> 1619800944 +0000\n\nMerge #8698\n\n8698: fix: search only crate-level prelude when looking for an item r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8688\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2b6c1b57d3f0432424de6b828a3ef9150ad825", "html_url": "https://github.com/rust-lang/rust/commit/6b2b6c1b57d3f0432424de6b828a3ef9150ad825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b2b6c1b57d3f0432424de6b828a3ef9150ad825/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5b4a1f23dd4d544eec0699bda9df39235617711", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b4a1f23dd4d544eec0699bda9df39235617711", "html_url": "https://github.com/rust-lang/rust/commit/b5b4a1f23dd4d544eec0699bda9df39235617711"}, {"sha": "6873920c4f371db13e221d7ba9a599ed7efb95dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6873920c4f371db13e221d7ba9a599ed7efb95dd", "html_url": "https://github.com/rust-lang/rust/commit/6873920c4f371db13e221d7ba9a599ed7efb95dd"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "c06a372948dad27b382245d4844a3f1e674f3be8", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6b2b6c1b57d3f0432424de6b828a3ef9150ad825/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2b6c1b57d3f0432424de6b828a3ef9150ad825/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=6b2b6c1b57d3f0432424de6b828a3ef9150ad825", "patch": "@@ -130,15 +130,17 @@ fn find_path_inner(\n     }\n \n     // - if the item is the crate root of a dependency crate, return the name from the extern prelude\n-    for (name, def_id) in root.def_map(db).extern_prelude() {\n+    let root_def_map = root.def_map(db);\n+    for (name, def_id) in root_def_map.extern_prelude() {\n         if item == ItemInNs::Types(*def_id) {\n             let name = scope_name.unwrap_or_else(|| name.clone());\n             return Some(ModPath::from_segments(PathKind::Plain, vec![name]));\n         }\n     }\n \n     // - if the item is in the prelude, return the name from there\n-    if let Some(prelude_module) = def_map.prelude() {\n+    if let Some(prelude_module) = root_def_map.prelude() {\n+        // Preludes in block DefMaps are ignored, only the crate DefMap is searched\n         let prelude_def_map = prelude_module.def_map(db);\n         let prelude_scope: &crate::item_scope::ItemScope =\n             &prelude_def_map[prelude_module.local_id].scope;\n@@ -1057,4 +1059,28 @@ fn f() {\n             \"dep\",\n         );\n     }\n+\n+    #[test]\n+    fn prelude_with_inner_items() {\n+        check_found_path(\n+            r#\"\n+//- /main.rs crate:main deps:std\n+fn f() {\n+    fn inner() {}\n+    $0\n+}\n+//- /std.rs crate:std\n+pub mod prelude {\n+    pub enum Option { None }\n+    pub use Option::*;\n+}\n+#[prelude_import]\n+pub use prelude::*;\n+        \"#,\n+            \"None\",\n+            \"None\",\n+            \"None\",\n+            \"None\",\n+        );\n+    }\n }"}]}