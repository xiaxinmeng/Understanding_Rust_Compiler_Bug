{"sha": "0a96e089bade29e1b19d5a5aacd97fbdfff222fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOTZlMDg5YmFkZTI5ZTFiMTlkNWE1YWFjZDk3ZmJkZmZmMjIyZmQ=", "commit": {"author": {"name": "Prabakaran Kumaresshan", "email": "4676330+nixphix@users.noreply.github.com", "date": "2020-08-16T16:58:45Z"}, "committer": {"name": "Prabakaran Kumaresshan", "email": "4676330+nixphix@users.noreply.github.com", "date": "2020-08-16T16:58:45Z"}, "message": "Switch to intra-doc links in /sys/windows/ext/{ffi,fs,process}.rs", "tree": {"sha": "3a9ab43a458023331d7364f108180f53f688366a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a9ab43a458023331d7364f108180f53f688366a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a96e089bade29e1b19d5a5aacd97fbdfff222fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a96e089bade29e1b19d5a5aacd97fbdfff222fd", "html_url": "https://github.com/rust-lang/rust/commit/0a96e089bade29e1b19d5a5aacd97fbdfff222fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a96e089bade29e1b19d5a5aacd97fbdfff222fd/comments", "author": {"login": "nixphix", "id": 4676330, "node_id": "MDQ6VXNlcjQ2NzYzMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4676330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixphix", "html_url": "https://github.com/nixphix", "followers_url": "https://api.github.com/users/nixphix/followers", "following_url": "https://api.github.com/users/nixphix/following{/other_user}", "gists_url": "https://api.github.com/users/nixphix/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixphix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixphix/subscriptions", "organizations_url": "https://api.github.com/users/nixphix/orgs", "repos_url": "https://api.github.com/users/nixphix/repos", "events_url": "https://api.github.com/users/nixphix/events{/privacy}", "received_events_url": "https://api.github.com/users/nixphix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nixphix", "id": 4676330, "node_id": "MDQ6VXNlcjQ2NzYzMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4676330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixphix", "html_url": "https://github.com/nixphix", "followers_url": "https://api.github.com/users/nixphix/followers", "following_url": "https://api.github.com/users/nixphix/following{/other_user}", "gists_url": "https://api.github.com/users/nixphix/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixphix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixphix/subscriptions", "organizations_url": "https://api.github.com/users/nixphix/orgs", "repos_url": "https://api.github.com/users/nixphix/repos", "events_url": "https://api.github.com/users/nixphix/events{/privacy}", "received_events_url": "https://api.github.com/users/nixphix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4fb355c6ce4e534e0998d83b68591bbe234ddb", "html_url": "https://github.com/rust-lang/rust/commit/7a4fb355c6ce4e534e0998d83b68591bbe234ddb"}], "stats": {"total": 42, "additions": 8, "deletions": 34}, "files": [{"sha": "1df2a0df143b3c4436bcf75924a6869b0bfb0356", "filename": "library/std/src/sys/windows/ext/ffi.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0a96e089bade29e1b19d5a5aacd97fbdfff222fd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a96e089bade29e1b19d5a5aacd97fbdfff222fd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=0a96e089bade29e1b19d5a5aacd97fbdfff222fd", "patch": "@@ -30,13 +30,13 @@\n //! [`OsString`] is the Rust wrapper for owned strings in the\n //! preferred representation of the operating system. On Windows,\n //! this struct gets augmented with an implementation of the\n-//! [`OsStringExt`] trait, which has a [`from_wide`] method. This\n+//! [`OsStringExt`] trait, which has a [`OsStringExt::from_wide`] method. This\n //! lets you create an [`OsString`] from a `&[u16]` slice; presumably\n //! you get such a slice out of a `WCHAR` Windows API.\n //!\n //! Similarly, [`OsStr`] is the Rust wrapper for borrowed strings from\n //! preferred representation of the operating system. On Windows, the\n-//! [`OsStrExt`] trait provides the [`encode_wide`] method, which\n+//! [`OsStrExt`] trait provides the [`OsStrExt::encode_wide`] method, which\n //! outputs an [`EncodeWide`] iterator. You can [`collect`] this\n //! iterator, for example, to obtain a `Vec<u16>`; you can later get a\n //! pointer to this vector's contents and feed it to Windows APIs.\n@@ -47,15 +47,8 @@\n //! ill-formed UTF-16.\n //!\n //! [ill-formed-utf-16]: https://simonsapin.github.io/wtf-8/#ill-formed-utf-16\n-//! [`OsString`]: ../../../ffi/struct.OsString.html\n-//! [`OsStr`]: ../../../ffi/struct.OsStr.html\n-//! [`OsStringExt`]: trait.OsStringExt.html\n-//! [`OsStrExt`]: trait.OsStrExt.html\n-//! [`EncodeWide`]: struct.EncodeWide.html\n-//! [`from_wide`]: trait.OsStringExt.html#tymethod.from_wide\n-//! [`encode_wide`]: trait.OsStrExt.html#tymethod.encode_wide\n-//! [`collect`]: ../../../iter/trait.Iterator.html#method.collect\n-//! [U+FFFD]: ../../../char/constant.REPLACEMENT_CHARACTER.html\n+//! [`collect`]: crate::iter::Iterator::collect\n+//! [U+FFFD]: crate::char::REPLACEMENT_CHARACTER\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -68,14 +61,12 @@ use crate::sys_common::{AsInner, FromInner};\n pub use crate::sys_common::wtf8::EncodeWide;\n \n /// Windows-specific extensions to [`OsString`].\n-///\n-/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n     /// Creates an `OsString` from a potentially ill-formed UTF-16 slice of\n     /// 16-bit code units.\n     ///\n-    /// This is lossless: calling [`encode_wide`] on the resulting string\n+    /// This is lossless: calling [`OsStrExt::encode_wide`] on the resulting string\n     /// will always return the original code units.\n     ///\n     /// # Examples\n@@ -89,8 +80,6 @@ pub trait OsStringExt {\n     ///\n     /// let string = OsString::from_wide(&source[..]);\n     /// ```\n-    ///\n-    /// [`encode_wide`]: ./trait.OsStrExt.html#tymethod.encode_wide\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_wide(wide: &[u16]) -> Self;\n }\n@@ -103,14 +92,12 @@ impl OsStringExt for OsString {\n }\n \n /// Windows-specific extensions to [`OsStr`].\n-///\n-/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     /// Re-encodes an `OsStr` as a wide character sequence, i.e., potentially\n     /// ill-formed UTF-16.\n     ///\n-    /// This is lossless: calling [`OsString::from_wide`] and then\n+    /// This is lossless: calling [`OsStringExt::from_wide`] and then\n     /// `encode_wide` on the result will yield the original code units.\n     /// Note that the encoding does not add a final null terminator.\n     ///\n@@ -128,8 +115,6 @@ pub trait OsStrExt {\n     /// let result: Vec<u16> = string.encode_wide().collect();\n     /// assert_eq!(&source[..], &result[..]);\n     /// ```\n-    ///\n-    /// [`OsString::from_wide`]: ./trait.OsStringExt.html#tymethod.from_wide\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn encode_wide(&self) -> EncodeWide<'_>;\n }"}, {"sha": "e0615f2d33431953283a15a23a7b8ab135bb3647", "filename": "library/std/src/sys/windows/ext/fs.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a96e089bade29e1b19d5a5aacd97fbdfff222fd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a96e089bade29e1b19d5a5aacd97fbdfff222fd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=0a96e089bade29e1b19d5a5aacd97fbdfff222fd", "patch": "@@ -8,9 +8,7 @@ use crate::path::Path;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut};\n \n-/// Windows-specific extensions to [`File`].\n-///\n-/// [`File`]: ../../../fs/struct.File.html\n+/// Windows-specific extensions to [`fs::File`].\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Seeks to a given position and reads a number of bytes.\n@@ -94,8 +92,6 @@ impl FileExt for fs::File {\n }\n \n /// Windows-specific extensions to [`fs::OpenOptions`].\n-///\n-/// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n pub trait OpenOptionsExt {\n     /// Overrides the `dwDesiredAccess` argument to the call to [`CreateFile`]\n@@ -295,7 +291,6 @@ impl OpenOptionsExt for OpenOptions {\n /// The data members that this trait exposes correspond to the members\n /// of the [`BY_HANDLE_FILE_INFORMATION`] structure.\n ///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n /// [`BY_HANDLE_FILE_INFORMATION`]:\n ///     https://docs.microsoft.com/en-us/windows/win32/api/fileapi/ns-fileapi-by_handle_file_information\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n@@ -499,11 +494,9 @@ impl MetadataExt for Metadata {\n     }\n }\n \n-/// Windows-specific extensions to [`FileType`].\n+/// Windows-specific extensions to [`fs::FileType`].\n ///\n /// On Windows, a symbolic link knows whether it is a file or directory.\n-///\n-/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[unstable(feature = \"windows_file_type_ext\", issue = \"none\")]\n pub trait FileTypeExt {\n     /// Returns `true` if this file type is a symbolic link that is also a directory."}, {"sha": "61e4c6a1d1718d6a44a82cf6a17ae0ed94a95120", "filename": "library/std/src/sys/windows/ext/process.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a96e089bade29e1b19d5a5aacd97fbdfff222fd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a96e089bade29e1b19d5a5aacd97fbdfff222fd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=0a96e089bade29e1b19d5a5aacd97fbdfff222fd", "patch": "@@ -73,8 +73,6 @@ impl IntoRawHandle for process::ChildStderr {\n }\n \n /// Windows-specific extensions to [`process::ExitStatus`].\n-///\n-/// [`process::ExitStatus`]: ../../../../std/process/struct.ExitStatus.html\n #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `u32` return value of\n@@ -91,8 +89,6 @@ impl ExitStatusExt for process::ExitStatus {\n }\n \n /// Windows-specific extensions to the [`process::Command`] builder.\n-///\n-/// [`process::Command`]: ../../../../std/process/struct.Command.html\n #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n pub trait CommandExt {\n     /// Sets the [process creation flags][1] to be passed to `CreateProcess`."}]}