{"sha": "f6cb58caeedf509cc80dd376bbb2541a0446046b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2Y2I1OGNhZWVkZjUwOWNjODBkZDM3NmJiYjI1NDFhMDQ0NjA0NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-25T09:21:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-25T09:21:45Z"}, "message": "auto merge of #19149 : alexcrichton/rust/issue-19091, r=aturon\n\nThis change applies the conventions to unwrap listed in [RFC 430][rfc] to rename\r\nnon-failing `unwrap` methods to `into_inner`. This is a breaking change, but all\r\n`unwrap` methods are retained as `#[deprecated]` for the near future. To update\r\ncode rename `unwrap` method calls to `into_inner`.\r\n\r\n[rfc]: https://github.com/rust-lang/rfcs/pull/430\r\n[breaking-change]\r\n\r\ncc #19091", "tree": {"sha": "342842df92d03e14065608b8bef510e7b4980b05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/342842df92d03e14065608b8bef510e7b4980b05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6cb58caeedf509cc80dd376bbb2541a0446046b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6cb58caeedf509cc80dd376bbb2541a0446046b", "html_url": "https://github.com/rust-lang/rust/commit/f6cb58caeedf509cc80dd376bbb2541a0446046b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6cb58caeedf509cc80dd376bbb2541a0446046b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c1d853fba0068f9fd34b43a565ded01b199506c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1d853fba0068f9fd34b43a565ded01b199506c", "html_url": "https://github.com/rust-lang/rust/commit/0c1d853fba0068f9fd34b43a565ded01b199506c"}, {"sha": "f1f6c1286f24f6f762a9b195ac678b55d20c9a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f6c1286f24f6f762a9b195ac678b55d20c9a9b", "html_url": "https://github.com/rust-lang/rust/commit/f1f6c1286f24f6f762a9b195ac678b55d20c9a9b"}], "stats": {"total": 108, "additions": 84, "deletions": 24}, "files": [{"sha": "a3291e01942f1325a555e44d839f3cd0ddca0116", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -1248,14 +1248,18 @@ pub struct MoveItems<T> {\n impl<T> MoveItems<T> {\n     #[inline]\n     /// Drops all items that have not yet been moved and returns the empty vector.\n-    pub fn unwrap(mut self) -> Vec<T> {\n+    pub fn into_inner(mut self) -> Vec<T> {\n         unsafe {\n             for _x in self { }\n             let MoveItems { allocation, cap, ptr: _ptr, end: _end } = self;\n             mem::forget(self);\n             Vec { ptr: allocation, cap: cap, len: 0 }\n         }\n     }\n+\n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub fn unwrap(self) -> Vec<T> { self.into_inner() }\n }\n \n impl<T> Iterator<T> for MoveItems<T> {"}, {"sha": "587bb4cb110e1af178643297f81d058533bba548", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -256,15 +256,19 @@ impl<T> RefCell<T> {\n     }\n \n     /// Consumes the `RefCell`, returning the wrapped value.\n-    #[unstable = \"may be renamed, depending on global conventions\"]\n-    pub fn unwrap(self) -> T {\n+    #[unstable = \"recently renamed per RFC 430\"]\n+    pub fn into_inner(self) -> T {\n         // Since this function takes `self` (the `RefCell`) by value, the\n         // compiler statically verifies that it is not currently borrowed.\n         // Therefore the following assertion is just a `debug_assert!`.\n         debug_assert!(self.borrow.get() == UNUSED);\n-        unsafe{self.value.unwrap()}\n+        unsafe { self.value.into_inner() }\n     }\n \n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub fn unwrap(self) -> T { self.into_inner() }\n+\n     /// Attempts to immutably borrow the wrapped value.\n     ///\n     /// The borrow lasts until the returned `Ref` exits scope. Multiple\n@@ -518,5 +522,9 @@ impl<T> UnsafeCell<T> {\n     #[inline]\n     #[unstable = \"conventions around the name `unwrap` are still under \\\n                   development\"]\n-    pub unsafe fn unwrap(self) -> T { self.value }\n+    pub unsafe fn into_inner(self) -> T { self.value }\n+\n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub unsafe fn unwrap(self) -> T { self.into_inner() }\n }"}, {"sha": "1b2b044b49afec6a3b17c58e6c109945d5d65f36", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -827,5 +827,5 @@ pub fn check_crate(tcx: &ty::ctxt,\n     }\n \n     tcx.sess.abort_if_errors();\n-    *tcx.node_lint_levels.borrow_mut() = cx.node_levels.unwrap();\n+    *tcx.node_lint_levels.borrow_mut() = cx.node_levels.into_inner();\n }"}, {"sha": "d67d0fa59ae28899c5cec1faa385de71537982be", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -2148,7 +2148,7 @@ pub unsafe extern \"C\" fn rust_llvm_string_write_impl(sr: RustStringRef,\n pub fn build_string(f: |RustStringRef|) -> Option<String> {\n     let mut buf = RefCell::new(Vec::new());\n     f(&mut buf as RustStringRepr as RustStringRef);\n-    String::from_utf8(buf.unwrap()).ok()\n+    String::from_utf8(buf.into_inner()).ok()\n }\n \n pub unsafe fn twine_to_string(tr: TwineRef) -> String {"}, {"sha": "b923bb076c3016a730620651e2c59933cc0218a5", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -899,7 +899,7 @@ fn run_work_multithreaded(sess: &Session,\n \n     let mut panicked = false;\n     for future in futures.into_iter() {\n-        match future.unwrap() {\n+        match future.into_inner() {\n             Ok(()) => {},\n             Err(_) => {\n                 panicked = true;"}, {"sha": "d62b1485db33adc4c015b88616833fe421d4671a", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -254,11 +254,15 @@ impl CString {\n     ///\n     /// Prefer `.as_ptr()` when just retrieving a pointer to the\n     /// string data, as that does not relinquish ownership.\n-    pub unsafe fn unwrap(mut self) -> *const libc::c_char {\n+    pub unsafe fn into_inner(mut self) -> *const libc::c_char {\n         self.owns_buffer_ = false;\n         self.buf\n     }\n \n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub unsafe fn unwrap(self) -> *const libc::c_char { self.into_inner() }\n+\n     /// Return the number of bytes in the CString (not including the NUL\n     /// terminator).\n     #[inline]"}, {"sha": "1f94d7b4fa6117ae6ccc09e5f87ca53dc3586ff7", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -138,11 +138,15 @@ impl<T> CVec<T> {\n     /// Note that if you want to access the underlying pointer without\n     /// cancelling the destructor, you can simply call `transmute` on the return\n     /// value of `get(0)`.\n-    pub unsafe fn unwrap(mut self) -> *mut T {\n+    pub unsafe fn into_inner(mut self) -> *mut T {\n         self.dtor = None;\n         self.base\n     }\n \n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub unsafe fn unwrap(self) -> *mut T { self.into_inner() }\n+\n     /// Returns the number of items in this vector.\n     pub fn len(&self) -> uint { self.len }\n "}, {"sha": "148323762c8b8710869cf490f134db410df460b1", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -83,7 +83,11 @@ impl<R: Reader> BufferedReader<R> {\n     /// Unwraps this `BufferedReader`, returning the underlying reader.\n     ///\n     /// Note that any leftover data in the internal buffer is lost.\n-    pub fn unwrap(self) -> R { self.inner }\n+    pub fn into_inner(self) -> R { self.inner }\n+\n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub fn unwrap(self) -> R { self.into_inner() }\n }\n \n impl<R: Reader> Buffer for BufferedReader<R> {\n@@ -180,11 +184,15 @@ impl<W: Writer> BufferedWriter<W> {\n     /// Unwraps this `BufferedWriter`, returning the underlying writer.\n     ///\n     /// The buffer is flushed before returning the writer.\n-    pub fn unwrap(mut self) -> W {\n+    pub fn into_inner(mut self) -> W {\n         // FIXME(#12628): is panicking the right thing to do if flushing panicks?\n         self.flush_buf().unwrap();\n         self.inner.take().unwrap()\n     }\n+\n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub fn unwrap(self) -> W { self.into_inner() }\n }\n \n impl<W: Writer> Writer for BufferedWriter<W> {\n@@ -244,7 +252,11 @@ impl<W: Writer> LineBufferedWriter<W> {\n     /// Unwraps this `LineBufferedWriter`, returning the underlying writer.\n     ///\n     /// The internal buffer is flushed before returning the writer.\n-    pub fn unwrap(self) -> W { self.inner.unwrap() }\n+    pub fn into_inner(self) -> W { self.inner.into_inner() }\n+\n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub fn unwrap(self) -> W { self.into_inner() }\n }\n \n impl<W: Writer> Writer for LineBufferedWriter<W> {\n@@ -341,10 +353,14 @@ impl<S: Stream> BufferedStream<S> {\n     ///\n     /// The internal buffer is flushed before returning the stream. Any leftover\n     /// data in the read buffer is lost.\n-    pub fn unwrap(self) -> S {\n+    pub fn into_inner(self) -> S {\n         let InternalBufferedWriter(w) = self.inner.inner;\n-        w.unwrap()\n+        w.into_inner()\n     }\n+\n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub fn unwrap(self) -> S { self.into_inner() }\n }\n \n impl<S: Stream> Buffer for BufferedStream<S> {"}, {"sha": "f27951f263da2a736e2b5dedf071bb729149874d", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -62,7 +62,7 @@ impl Writer for Vec<u8> {\n /// let mut w = MemWriter::new();\n /// w.write(&[0, 1, 2]);\n ///\n-/// assert_eq!(w.unwrap(), vec!(0, 1, 2));\n+/// assert_eq!(w.into_inner(), vec!(0, 1, 2));\n /// ```\n #[deprecated = \"use the Vec<u8> Writer implementation directly\"]\n #[deriving(Clone)]\n@@ -95,7 +95,11 @@ impl MemWriter {\n \n     /// Unwraps this `MemWriter`, returning the underlying buffer\n     #[inline]\n-    pub fn unwrap(self) -> Vec<u8> { self.buf }\n+    pub fn into_inner(self) -> Vec<u8> { self.buf }\n+\n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub fn unwrap(self) -> Vec<u8> { self.into_inner() }\n }\n \n impl Writer for MemWriter {\n@@ -150,7 +154,11 @@ impl MemReader {\n \n     /// Unwraps this `MemReader`, returning the underlying buffer\n     #[inline]\n-    pub fn unwrap(self) -> Vec<u8> { self.buf }\n+    pub fn into_inner(self) -> Vec<u8> { self.buf }\n+\n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub fn unwrap(self) -> Vec<u8> { self.into_inner() }\n }\n \n impl Reader for MemReader {"}, {"sha": "4788ba79b7fa8451f684d8e614b5c9a90bb6d541", "filename": "src/libstd/io/tempfile.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fio%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fio%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftempfile.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -73,11 +73,15 @@ impl TempDir {\n     /// Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\n     /// This discards the wrapper so that the automatic deletion of the\n     /// temporary directory is prevented.\n-    pub fn unwrap(self) -> Path {\n+    pub fn into_inner(self) -> Path {\n         let mut tmpdir = self;\n         tmpdir.path.take().unwrap()\n     }\n \n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub fn unwrap(self) -> Path { self.into_inner() }\n+\n     /// Access the wrapped `std::path::Path` to the temporary directory.\n     pub fn path<'a>(&'a self) -> &'a Path {\n         self.path.as_ref().unwrap()"}, {"sha": "8e0cd6608164a2cee1688e8767d138f6b7d70772", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -28,7 +28,11 @@ impl<R: Reader> LimitReader<R> {\n     }\n \n     /// Consumes the `LimitReader`, returning the underlying `Reader`.\n-    pub fn unwrap(self) -> R { self.inner }\n+    pub fn into_inner(self) -> R { self.inner }\n+\n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner\"]\n+    pub fn unwrap(self) -> R { self.into_inner() }\n \n     /// Returns the number of bytes that can be read before the `LimitReader`\n     /// will return EOF.\n@@ -207,10 +211,14 @@ impl<R: Reader, W: Writer> TeeReader<R, W> {\n \n     /// Consumes the `TeeReader`, returning the underlying `Reader` and\n     /// `Writer`.\n-    pub fn unwrap(self) -> (R, W) {\n+    pub fn into_inner(self) -> (R, W) {\n         let TeeReader { reader, writer } = self;\n         (reader, writer)\n     }\n+\n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner\"]\n+    pub fn unwrap(self) -> (R, W) { self.into_inner() }\n }\n \n impl<R: Reader, W: Writer> Reader for TeeReader<R, W> {"}, {"sha": "d6f413a082854eb08a25c857419a1ca9fe99bb46", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -54,7 +54,7 @@ impl<A:Clone> Future<A> {\n \n impl<A> Future<A> {\n     /// Gets the value from this future, forcing evaluation.\n-    pub fn unwrap(mut self) -> A {\n+    pub fn into_inner(mut self) -> A {\n         self.get_ref();\n         let state = replace(&mut self.state, Evaluating);\n         match state {\n@@ -63,6 +63,10 @@ impl<A> Future<A> {\n         }\n     }\n \n+    /// Deprecated, use into_inner() instead\n+    #[deprecated = \"renamed to into_inner()\"]\n+    pub fn unwrap(self) -> A { self.into_inner() }\n+\n     pub fn get_ref<'a>(&'a mut self) -> &'a A {\n         /*!\n         * Executes the future's closure and then returns a reference"}, {"sha": "c852b4efbd8a3f85d6dadda38d1f07d77efd5322", "filename": "src/libstd/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -197,7 +197,7 @@ impl TaskBuilder {\n     /// completes or panics. Equivalent to `.try_future(f).unwrap()`.\n     #[unstable = \"Error type may change.\"]\n     pub fn try<T:Send>(self, f: proc():Send -> T) -> Result<T, Box<Any + Send>> {\n-        self.try_future(f).unwrap()\n+        self.try_future(f).into_inner()\n     }\n }\n "}, {"sha": "9acb12c56d93fef0bccd6aeb415371aacbf51b86", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cb58caeedf509cc80dd376bbb2541a0446046b/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f6cb58caeedf509cc80dd376bbb2541a0446046b", "patch": "@@ -1059,7 +1059,7 @@ pub fn run_test(opts: &TestOpts,\n             let result_future = task.try_future(testfn);\n \n             let stdout = reader.read_to_end().unwrap().into_iter().collect();\n-            let task_result = result_future.unwrap();\n+            let task_result = result_future.into_inner();\n             let test_result = calc_result(&desc, task_result.is_ok());\n             monitor_ch.send((desc.clone(), test_result, stdout));\n         })"}]}