{"sha": "1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYzdmNWMwYmNhYzczMDliZDM1YWNkOGE1YzNmMjVhNDQyZWY3MDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-08T16:17:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-08T16:17:48Z"}, "message": "Auto merge of #4602 - EthanTheMaster:issue-4001, r=flip1995\n\nAdd suggestion for mul_add\n\nIssue #4001: Whenever `a*b+c` is found where `a`,`b`, and `c` are floats, a lint is suggested saying to use `a.mul_add(b, c)`. Using `mul_add` may give a performance boost depending on the target architecture and also has higher numerical accuracy as there is no round off when doing `a*b`.\n\nchangelog: New lint: `manual_mul_add`", "tree": {"sha": "ff960cc65a393e07cd145453ab8d1b1c87ff8c67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff960cc65a393e07cd145453ab8d1b1c87ff8c67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "html_url": "https://github.com/rust-lang/rust/commit/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cb983338e924ec85898880d60e65f2a1291b7be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb983338e924ec85898880d60e65f2a1291b7be", "html_url": "https://github.com/rust-lang/rust/commit/5cb983338e924ec85898880d60e65f2a1291b7be"}, {"sha": "327c91f8c707c1265c4a5b350f736cda4334b764", "url": "https://api.github.com/repos/rust-lang/rust/commits/327c91f8c707c1265c4a5b350f736cda4334b764", "html_url": "https://github.com/rust-lang/rust/commit/327c91f8c707c1265c4a5b350f736cda4334b764"}], "stats": {"total": 260, "additions": 258, "deletions": 2}, "files": [{"sha": "7415c5fa2262322bb2b22499dc18bf38fb17f2da", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "patch": "@@ -1063,6 +1063,7 @@ Released 2018-09-13\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug\n [`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n+[`manual_mul_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_mul_add\n [`manual_saturating_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic\n [`manual_swap`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_swap\n [`many_single_char_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names"}, {"sha": "aff8a36eca7cf2fb107bbf1fcfa117663c01ea21", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 319 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 320 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "452e4e9787dbd33bf0bdd8a65d815b6e80f4c0b6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "patch": "@@ -224,6 +224,7 @@ pub mod misc_early;\n pub mod missing_const_for_fn;\n pub mod missing_doc;\n pub mod missing_inline;\n+pub mod mul_add;\n pub mod multiple_crate_versions;\n pub mod mut_mut;\n pub mod mut_reference;\n@@ -604,6 +605,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n     reg.register_late_lint_pass(box inherent_to_string::InherentToString);\n     reg.register_late_lint_pass(box trait_bounds::TraitBounds);\n     reg.register_late_lint_pass(box comparison_chain::ComparisonChain);\n+    reg.register_late_lint_pass(box mul_add::MulAddCheck);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -836,6 +838,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         misc_early::UNNEEDED_FIELD_PATTERN,\n         misc_early::UNNEEDED_WILDCARD_PATTERN,\n         misc_early::ZERO_PREFIXED_LITERAL,\n+        mul_add::MANUAL_MUL_ADD,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,\n         needless_bool::BOOL_COMPARISON,\n@@ -1173,6 +1176,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         methods::OR_FUN_CALL,\n         methods::SINGLE_CHAR_PATTERN,\n         misc::CMP_OWNED,\n+        mul_add::MANUAL_MUL_ADD,\n         mutex_atomic::MUTEX_ATOMIC,\n         redundant_clone::REDUNDANT_CLONE,\n         slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,"}, {"sha": "02e403eee18012e71c2614483f5052e3b249f7ac", "filename": "clippy_lints/src/mul_add.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/clippy_lints%2Fsrc%2Fmul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/clippy_lints%2Fsrc%2Fmul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmul_add.rs?ref=1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "patch": "@@ -0,0 +1,106 @@\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+use rustc_errors::Applicability;\n+\n+use crate::utils::*;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for expressions of the form `a * b + c`\n+    /// or `c + a * b` where `a`, `b`, `c` are floats and suggests using\n+    /// `a.mul_add(b, c)` instead.\n+    ///\n+    /// **Why is this bad?** Calculating `a * b + c` may lead to slight\n+    /// numerical inaccuracies as `a * b` is rounded before being added to\n+    /// `c`. Depending on the target architecture, `mul_add()` may be more\n+    /// performant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// # let a = 0_f32;\n+    /// # let b = 0_f32;\n+    /// # let c = 0_f32;\n+    /// let foo = (a * b) + c;\n+    /// ```\n+    ///\n+    /// can be written as\n+    ///\n+    /// ```rust\n+    /// # let a = 0_f32;\n+    /// # let b = 0_f32;\n+    /// # let c = 0_f32;\n+    /// let foo = a.mul_add(b, c);\n+    /// ```\n+    pub MANUAL_MUL_ADD,\n+    perf,\n+    \"Using `a.mul_add(b, c)` for floating points has higher numerical precision than `a * b + c`\"\n+}\n+\n+declare_lint_pass!(MulAddCheck => [MANUAL_MUL_ADD]);\n+\n+fn is_float<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr) -> bool {\n+    cx.tables.expr_ty(expr).is_floating_point()\n+}\n+\n+// Checks whether expression is multiplication of two floats\n+fn is_float_mult_expr<'a, 'tcx, 'b>(cx: &LateContext<'a, 'tcx>, expr: &'b Expr) -> Option<(&'b Expr, &'b Expr)> {\n+    if let ExprKind::Binary(op, lhs, rhs) = &expr.kind {\n+        if let BinOpKind::Mul = op.node {\n+            if is_float(cx, &lhs) && is_float(cx, &rhs) {\n+                return Some((&lhs, &rhs));\n+            }\n+        }\n+    }\n+\n+    None\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MulAddCheck {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if let ExprKind::Binary(op, lhs, rhs) = &expr.kind {\n+            if let BinOpKind::Add = op.node {\n+                //Converts mult_lhs * mult_rhs + rhs to mult_lhs.mult_add(mult_rhs, rhs)\n+                if let Some((mult_lhs, mult_rhs)) = is_float_mult_expr(cx, lhs) {\n+                    if is_float(cx, rhs) {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            MANUAL_MUL_ADD,\n+                            expr.span,\n+                            \"consider using mul_add() for better numerical precision\",\n+                            \"try\",\n+                            format!(\n+                                \"{}.mul_add({}, {})\",\n+                                snippet(cx, mult_lhs.span, \"_\"),\n+                                snippet(cx, mult_rhs.span, \"_\"),\n+                                snippet(cx, rhs.span, \"_\"),\n+                            ),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+                //Converts lhs + mult_lhs * mult_rhs to mult_lhs.mult_add(mult_rhs, lhs)\n+                if let Some((mult_lhs, mult_rhs)) = is_float_mult_expr(cx, rhs) {\n+                    if is_float(cx, lhs) {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            MANUAL_MUL_ADD,\n+                            expr.span,\n+                            \"consider using mul_add() for better numerical precision\",\n+                            \"try\",\n+                            format!(\n+                                \"{}.mul_add({}, {})\",\n+                                snippet(cx, mult_lhs.span, \"_\"),\n+                                snippet(cx, mult_rhs.span, \"_\"),\n+                                snippet(cx, lhs.span, \"_\"),\n+                            ),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "8793d98f29f61a7b8a35afcbd4a3bbb1b4b33474", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 319] = [\n+pub const ALL_LINTS: [Lint; 320] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -938,6 +938,13 @@ pub const ALL_LINTS: [Lint; 319] = [\n         deprecation: None,\n         module: \"loops\",\n     },\n+    Lint {\n+        name: \"manual_mul_add\",\n+        group: \"perf\",\n+        desc: \"Using `a.mul_add(b, c)` for floating points has higher numerical precision than `a * b + c`\",\n+        deprecation: None,\n+        module: \"mul_add\",\n+    },\n     Lint {\n         name: \"manual_saturating_arithmetic\",\n         group: \"style\","}, {"sha": "1322e002c64131f1530ea88ddce87a65c1018714", "filename": "tests/ui/mul_add.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/tests%2Fui%2Fmul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/tests%2Fui%2Fmul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add.rs?ref=1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "patch": "@@ -0,0 +1,16 @@\n+#![warn(clippy::manual_mul_add)]\n+#![allow(unused_variables)]\n+\n+fn mul_add_test() {\n+    let a: f64 = 1234.567;\n+    let b: f64 = 45.67834;\n+    let c: f64 = 0.0004;\n+\n+    // Examples of not auto-fixable expressions\n+    let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n+    let test2 = 1234.567 * 45.67834 + 0.0004;\n+}\n+\n+fn main() {\n+    mul_add_test();\n+}"}, {"sha": "92c3b9e03c15e771fba5596aa706033b9407cadf", "filename": "tests/ui/mul_add.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/tests%2Fui%2Fmul_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/tests%2Fui%2Fmul_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add.stderr?ref=1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "patch": "@@ -0,0 +1,34 @@\n+error: consider using mul_add() for better numerical precision\n+  --> $DIR/mul_add.rs:10:17\n+   |\n+LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(a * b + c).mul_add((c + a * b), (c + (a * b) + c))`\n+   |\n+   = note: `-D clippy::manual-mul-add` implied by `-D warnings`\n+\n+error: consider using mul_add() for better numerical precision\n+  --> $DIR/mul_add.rs:10:17\n+   |\n+LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n+   |                 ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n+\n+error: consider using mul_add() for better numerical precision\n+  --> $DIR/mul_add.rs:10:31\n+   |\n+LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n+   |                               ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n+\n+error: consider using mul_add() for better numerical precision\n+  --> $DIR/mul_add.rs:10:46\n+   |\n+LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n+   |                                              ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n+\n+error: consider using mul_add() for better numerical precision\n+  --> $DIR/mul_add.rs:11:17\n+   |\n+LL |     let test2 = 1234.567 * 45.67834 + 0.0004;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `1234.567.mul_add(45.67834, 0.0004)`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "4af7c7e3e1a5d04f342e74bb252b314420a5fd8d", "filename": "tests/ui/mul_add_fixable.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/tests%2Fui%2Fmul_add_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/tests%2Fui%2Fmul_add_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add_fixable.fixed?ref=1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_mul_add)]\n+#![allow(unused_variables)]\n+\n+fn mul_add_test() {\n+    let a: f64 = 1234.567;\n+    let b: f64 = 45.67834;\n+    let c: f64 = 0.0004;\n+\n+    // Auto-fixable examples\n+    let test1 = a.mul_add(b, c);\n+    let test2 = a.mul_add(b, c);\n+\n+    let test3 = a.mul_add(b, c);\n+    let test4 = a.mul_add(b, c);\n+\n+    let test5 = a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c)) + c;\n+    let test6 = 1234.567_f64.mul_add(45.67834_f64, 0.0004_f64);\n+}\n+\n+fn main() {\n+    mul_add_test();\n+}"}, {"sha": "8b42f6f184a4c32b747d10852c5f724c1ea0018f", "filename": "tests/ui/mul_add_fixable.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/tests%2Fui%2Fmul_add_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/tests%2Fui%2Fmul_add_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add_fixable.rs?ref=1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_mul_add)]\n+#![allow(unused_variables)]\n+\n+fn mul_add_test() {\n+    let a: f64 = 1234.567;\n+    let b: f64 = 45.67834;\n+    let c: f64 = 0.0004;\n+\n+    // Auto-fixable examples\n+    let test1 = a * b + c;\n+    let test2 = c + a * b;\n+\n+    let test3 = (a * b) + c;\n+    let test4 = c + (a * b);\n+\n+    let test5 = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n+    let test6 = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n+}\n+\n+fn main() {\n+    mul_add_test();\n+}"}, {"sha": "123ab2ff100afea54953f8edf4c512ceff471cac", "filename": "tests/ui/mul_add_fixable.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/tests%2Fui%2Fmul_add_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703/tests%2Fui%2Fmul_add_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add_fixable.stderr?ref=1dc7f5c0bcac7309bd35acd8a5c3f25a442ef703", "patch": "@@ -0,0 +1,40 @@\n+error: consider using mul_add() for better numerical precision\n+  --> $DIR/mul_add_fixable.rs:12:17\n+   |\n+LL |     let test1 = a * b + c;\n+   |                 ^^^^^^^^^ help: try: `a.mul_add(b, c)`\n+   |\n+   = note: `-D clippy::manual-mul-add` implied by `-D warnings`\n+\n+error: consider using mul_add() for better numerical precision\n+  --> $DIR/mul_add_fixable.rs:13:17\n+   |\n+LL |     let test2 = c + a * b;\n+   |                 ^^^^^^^^^ help: try: `a.mul_add(b, c)`\n+\n+error: consider using mul_add() for better numerical precision\n+  --> $DIR/mul_add_fixable.rs:15:17\n+   |\n+LL |     let test3 = (a * b) + c;\n+   |                 ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n+\n+error: consider using mul_add() for better numerical precision\n+  --> $DIR/mul_add_fixable.rs:16:17\n+   |\n+LL |     let test4 = c + (a * b);\n+   |                 ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n+\n+error: consider using mul_add() for better numerical precision\n+  --> $DIR/mul_add_fixable.rs:18:17\n+   |\n+LL |     let test5 = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c))`\n+\n+error: consider using mul_add() for better numerical precision\n+  --> $DIR/mul_add_fixable.rs:19:17\n+   |\n+LL |     let test6 = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `1234.567_f64.mul_add(45.67834_f64, 0.0004_f64)`\n+\n+error: aborting due to 6 previous errors\n+"}]}