{"sha": "cc2a1271d430d633b712dab71e2e58feb959c01b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMmExMjcxZDQzMGQ2MzNiNzEyZGFiNzFlMmU1OGZlYjk1OWMwMWI=", "commit": {"author": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2021-08-25T13:48:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-25T13:48:53Z"}, "message": "Rollup merge of #88226 - steffahn:an_rc, r=michaelwoerister\n\nFix typo \u201ca Rc\u201d \u2192 \u201can Rc\u201d (and a few more)\n\nAfter stumbling about it in the dev-guide, I\u2019ve devided to eliminate all mentions of \u201ca Rc\u201d, replacing it with \u201can Rc\u201d. E.g.\n```plain\n$ rg \"(^|[^'])\\ba\\b[^\\w=:]*\\bRc\"\ncompiler/rustc_data_structures/src/owning_ref/mod.rs\n1149:/// Typedef of a owning reference that uses a `Rc` as the owner.\n\nlibrary/std/src/ffi/os_str.rs\n919:    /// Converts a [`OsString`] into a [`Rc`]`<OsStr>` without copying or allocating.\n\nlibrary/std/src/ffi/c_str.rs\n961:    /// Converts a [`CString`] into a [`Rc`]`<CStr>` without copying or allocating.\n\nsrc/doc/rustc-dev-guide/src/query.md\n61:are cheaply cloneable; insert a `Rc` if necessary).\n\nsrc/doc/book/src/ch15-06-reference-cycles.md\n72:decreases the reference count of the `a` `Rc<List>` instance from 2 to 1 as\n\nlibrary/alloc/src/rc.rs\n1746:    /// Converts a generic type `T` into a `Rc<T>`\n```\n_(the match in the book is a false positive)_\nSince the dev-guide is a submodule, it\u2019s getting a separate PR: rust-lang/rustc-dev-guide#1191\n\nI\u2019ve also gone ahead and done the same search for `RwLock` and hit a few cases in the `OwningRef` adaption. Then, I couldn\u2019t keep the countless cases of \u201ca owning \u2026\u201d or \u201ca owner\u201d unaddressed, which concludes this PR.\n\n`@rustbot` label C-cleanup", "tree": {"sha": "4520f55b5f8aed08f940dffe7953f78f7764fb1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4520f55b5f8aed08f940dffe7953f78f7764fb1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2a1271d430d633b712dab71e2e58feb959c01b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhJkpGCRBK7hj4Ov3rIwAANAMIAFHKQc1mHbU6xgQWfsb5xS+f\nMqAEUlqTulPFkT6yLQEWTE4VH727tRRplLJZEc7QKT4ttQRUfi5wKaLb3h86uM2q\nYz6TJHwuPKMjtUDhIvq2U6QtoZKhNoOZSW0LZ27qGbcJdwsG2sAtY6AgN+hv1RmY\n8tLVq7wZETk0dTtvPbiC1GfFTNi/2qdB3D84gY+u2tWbUlpiSck79cVtVI5P9qdp\nvb2+eRtuet9hu4nfQsbYeIBEEBgT9ar6huxLDgUP/zLuksvc4tpvdmTa23pTKhFr\nE4b1BzP906htzpuMtlGPEN0bomIGcN7/N9JP8g487475aV8apRfad7LLt8ZS+wY=\n=uINO\n-----END PGP SIGNATURE-----\n", "payload": "tree 4520f55b5f8aed08f940dffe7953f78f7764fb1e\nparent b09c2547df8c0ab832b5b6764f8587e850a12533\nparent 6248dbcf70fbae9cf6fda9e2b2ba55aeb5837b36\nauthor L\u00e9o Lanteri Thauvin <leseulartichaut@gmail.com> 1629899333 +0200\ncommitter GitHub <noreply@github.com> 1629899333 +0200\n\nRollup merge of #88226 - steffahn:an_rc, r=michaelwoerister\n\nFix typo \u201ca Rc\u201d \u2192 \u201can Rc\u201d (and a few more)\n\nAfter stumbling about it in the dev-guide, I\u2019ve devided to eliminate all mentions of \u201ca Rc\u201d, replacing it with \u201can Rc\u201d. E.g.\n```plain\n$ rg \"(^|[^'])\\ba\\b[^\\w=:]*\\bRc\"\ncompiler/rustc_data_structures/src/owning_ref/mod.rs\n1149:/// Typedef of a owning reference that uses a `Rc` as the owner.\n\nlibrary/std/src/ffi/os_str.rs\n919:    /// Converts a [`OsString`] into a [`Rc`]`<OsStr>` without copying or allocating.\n\nlibrary/std/src/ffi/c_str.rs\n961:    /// Converts a [`CString`] into a [`Rc`]`<CStr>` without copying or allocating.\n\nsrc/doc/rustc-dev-guide/src/query.md\n61:are cheaply cloneable; insert a `Rc` if necessary).\n\nsrc/doc/book/src/ch15-06-reference-cycles.md\n72:decreases the reference count of the `a` `Rc<List>` instance from 2 to 1 as\n\nlibrary/alloc/src/rc.rs\n1746:    /// Converts a generic type `T` into a `Rc<T>`\n```\n_(the match in the book is a false positive)_\nSince the dev-guide is a submodule, it\u2019s getting a separate PR: rust-lang/rustc-dev-guide#1191\n\nI\u2019ve also gone ahead and done the same search for `RwLock` and hit a few cases in the `OwningRef` adaption. Then, I couldn\u2019t keep the countless cases of \u201ca owning \u2026\u201d or \u201ca owner\u201d unaddressed, which concludes this PR.\n\n`@rustbot` label C-cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2a1271d430d633b712dab71e2e58feb959c01b", "html_url": "https://github.com/rust-lang/rust/commit/cc2a1271d430d633b712dab71e2e58feb959c01b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2a1271d430d633b712dab71e2e58feb959c01b/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b09c2547df8c0ab832b5b6764f8587e850a12533", "url": "https://api.github.com/repos/rust-lang/rust/commits/b09c2547df8c0ab832b5b6764f8587e850a12533", "html_url": "https://github.com/rust-lang/rust/commit/b09c2547df8c0ab832b5b6764f8587e850a12533"}, {"sha": "6248dbcf70fbae9cf6fda9e2b2ba55aeb5837b36", "url": "https://api.github.com/repos/rust-lang/rust/commits/6248dbcf70fbae9cf6fda9e2b2ba55aeb5837b36", "html_url": "https://github.com/rust-lang/rust/commit/6248dbcf70fbae9cf6fda9e2b2ba55aeb5837b36"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "e7397bf13bad43319c3ebcb0f4874dd74e3cf78e", "filename": "compiler/rustc_data_structures/src/owning_ref/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc2a1271d430d633b712dab71e2e58feb959c01b/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2a1271d430d633b712dab71e2e58feb959c01b/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs?ref=cc2a1271d430d633b712dab71e2e58feb959c01b", "patch": "@@ -5,7 +5,7 @@\n \n This crate provides the _owning reference_ types `OwningRef` and `OwningRefMut`\n that enables it to bundle a reference together with the owner of the data it points to.\n-This allows moving and dropping of a `OwningRef` without needing to recreate the reference.\n+This allows moving and dropping of an `OwningRef` without needing to recreate the reference.\n \n This can sometimes be useful because Rust borrowing rules normally prevent\n moving a type that has been moved from. For example, this kind of code gets rejected:\n@@ -1146,7 +1146,7 @@ pub type VecRef<T, U = T> = OwningRef<Vec<T>, U>;\n /// Typedef of an owning reference that uses a `String` as the owner.\n pub type StringRef = OwningRef<String, str>;\n \n-/// Typedef of an owning reference that uses a `Rc` as the owner.\n+/// Typedef of an owning reference that uses an `Rc` as the owner.\n pub type RcRef<T, U = T> = OwningRef<Rc<T>, U>;\n /// Typedef of an owning reference that uses an `Arc` as the owner.\n pub type ArcRef<T, U = T> = OwningRef<Arc<T>, U>;\n@@ -1157,9 +1157,9 @@ pub type RefRef<'a, T, U = T> = OwningRef<Ref<'a, T>, U>;\n pub type RefMutRef<'a, T, U = T> = OwningRef<RefMut<'a, T>, U>;\n /// Typedef of an owning reference that uses a `MutexGuard` as the owner.\n pub type MutexGuardRef<'a, T, U = T> = OwningRef<MutexGuard<'a, T>, U>;\n-/// Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.\n+/// Typedef of an owning reference that uses an `RwLockReadGuard` as the owner.\n pub type RwLockReadGuardRef<'a, T, U = T> = OwningRef<RwLockReadGuard<'a, T>, U>;\n-/// Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.\n+/// Typedef of an owning reference that uses an `RwLockWriteGuard` as the owner.\n pub type RwLockWriteGuardRef<'a, T, U = T> = OwningRef<RwLockWriteGuard<'a, T>, U>;\n \n /// Typedef of a mutable owning reference that uses a `Box` as the owner.\n@@ -1173,7 +1173,7 @@ pub type StringRefMut = OwningRefMut<String, str>;\n pub type RefMutRefMut<'a, T, U = T> = OwningRefMut<RefMut<'a, T>, U>;\n /// Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.\n pub type MutexGuardRefMut<'a, T, U = T> = OwningRefMut<MutexGuard<'a, T>, U>;\n-/// Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.\n+/// Typedef of a mutable owning reference that uses an `RwLockWriteGuard` as the owner.\n pub type RwLockWriteGuardRefMut<'a, T, U = T> = OwningRef<RwLockWriteGuard<'a, T>, U>;\n \n unsafe impl<'a, T: 'a> IntoErased<'a> for Box<T> {"}, {"sha": "0814652a5d47d595822ed1a7492d2ad81f97b60c", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc2a1271d430d633b712dab71e2e58feb959c01b/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2a1271d430d633b712dab71e2e58feb959c01b/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=cc2a1271d430d633b712dab71e2e58feb959c01b", "patch": "@@ -1745,7 +1745,7 @@ impl<T: ?Sized> fmt::Pointer for Rc<T> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n impl<T> From<T> for Rc<T> {\n-    /// Converts a generic type `T` into a `Rc<T>`\n+    /// Converts a generic type `T` into an `Rc<T>`\n     ///\n     /// The conversion allocates on the heap and moves `t`\n     /// from the stack into it."}, {"sha": "de05c377852950120a0d70655d2ab94c87a53248", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc2a1271d430d633b712dab71e2e58feb959c01b/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2a1271d430d633b712dab71e2e58feb959c01b/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=cc2a1271d430d633b712dab71e2e58feb959c01b", "patch": "@@ -958,7 +958,7 @@ impl From<&CStr> for Arc<CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Rc<CStr> {\n-    /// Converts a [`CString`] into a [`Rc`]`<CStr>` without copying or allocating.\n+    /// Converts a [`CString`] into an [`Rc`]`<CStr>` without copying or allocating.\n     #[inline]\n     fn from(s: CString) -> Rc<CStr> {\n         let rc: Rc<[u8]> = Rc::from(s.into_inner());"}, {"sha": "21f354caf6ae9fba2d1ed486ff7411a5dec7e9ea", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc2a1271d430d633b712dab71e2e58feb959c01b/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2a1271d430d633b712dab71e2e58feb959c01b/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=cc2a1271d430d633b712dab71e2e58feb959c01b", "patch": "@@ -916,7 +916,7 @@ impl From<&OsStr> for Arc<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Rc<OsStr> {\n-    /// Converts an [`OsString`] into a [`Rc`]`<OsStr>` without copying or allocating.\n+    /// Converts an [`OsString`] into an [`Rc`]`<OsStr>` without copying or allocating.\n     #[inline]\n     fn from(s: OsString) -> Rc<OsStr> {\n         let rc = s.inner.into_rc();"}, {"sha": "27a599315dc1c580095682525d05da3f03237c4e", "filename": "src/test/ui/drop/dropck_legal_cycles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc2a1271d430d633b712dab71e2e58feb959c01b/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2a1271d430d633b712dab71e2e58feb959c01b/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs?ref=cc2a1271d430d633b712dab71e2e58feb959c01b", "patch": "@@ -368,7 +368,7 @@ pub fn main() {\n     // We can use refcells if we're single-threaded (as this test is).\n     // If one were to generalize these constructions to a\n     // multi-threaded context, then it might seem like we could choose\n-    // between either a RwLock or a Mutex to hold the owned arcs on\n+    // between either an RwLock or a Mutex to hold the owned arcs on\n     // each node.\n     //\n     // Part of the point of this test is to actually confirm that the"}]}