{"sha": "7accf6bc37c059a83a58c82f463f02a02ed2226f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhY2NmNmJjMzdjMDU5YTgzYTU4YzgyZjQ2M2YwMmEwMmVkMjIyNmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-13T13:50:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-13T13:50:35Z"}, "message": "Merge #7799\n\n7799: Related tests r=matklad a=vsrs\n\n![tests](https://user-images.githubusercontent.com/62505555/109397453-a9013680-7947-11eb-8b11-ac03079f7645.gif)\r\nThis adds an ability to look for tests for the item under the cursor: function, constant, data type, etc\r\n\r\nThe LSP part is bound to change. But the feature itself already works and I'm looking for a feedback :)\r\n\r\n\n\nCo-authored-by: vsrs <vit@conrlab.com>", "tree": {"sha": "979c8ebe39bde9c989cb1a09f06cea4cf7cb04ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/979c8ebe39bde9c989cb1a09f06cea4cf7cb04ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7accf6bc37c059a83a58c82f463f02a02ed2226f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgTMMrCRBK7hj4Ov3rIwAAdHIIAB1ii2jq7NFYmh4FiVQybfMK\nbaoKZP70mAPNlxVupGFnTehS2OkOM9tD6XRwjNVS/OD/hnT9n6BtehZLcr/2hsGV\nPVUrYIT6/DPCQV7E4pQjyvDAMseMZ6kAbOi7chXHqtOvUNG8MwKi8zgW5epEd2JI\n5lr3bra+cbIBRLRKlE8oTDnWEqJrqimMw+aSSy+5B2pakCUi2JR7RPF6WDaKikeG\nFcI6ICGo1ghTXeQ3MC9aMOCcMPvCAQeLoVz+cP5GHH0m/5Mixc5QZXsv2XrY7CLf\nj7ProJ4X/t/1ylWjQdwKX0Vz7eNbnSwuHU9T3JH6bkm4SX2kmm5LUc9fl/EkU2s=\n=YcdM\n-----END PGP SIGNATURE-----\n", "payload": "tree 979c8ebe39bde9c989cb1a09f06cea4cf7cb04ac\nparent 9674490b45a931399a9a05cd3a4c7e8fae9ec2a8\nparent 49cdb2452a225dec3834e69fb011c3d7e68084f7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615643435 +0000\ncommitter GitHub <noreply@github.com> 1615643435 +0000\n\nMerge #7799\n\n7799: Related tests r=matklad a=vsrs\n\n![tests](https://user-images.githubusercontent.com/62505555/109397453-a9013680-7947-11eb-8b11-ac03079f7645.gif)\r\nThis adds an ability to look for tests for the item under the cursor: function, constant, data type, etc\r\n\r\nThe LSP part is bound to change. But the feature itself already works and I'm looking for a feedback :)\r\n\r\n\n\nCo-authored-by: vsrs <vit@conrlab.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7accf6bc37c059a83a58c82f463f02a02ed2226f", "html_url": "https://github.com/rust-lang/rust/commit/7accf6bc37c059a83a58c82f463f02a02ed2226f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7accf6bc37c059a83a58c82f463f02a02ed2226f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9674490b45a931399a9a05cd3a4c7e8fae9ec2a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9674490b45a931399a9a05cd3a4c7e8fae9ec2a8", "html_url": "https://github.com/rust-lang/rust/commit/9674490b45a931399a9a05cd3a4c7e8fae9ec2a8"}, {"sha": "49cdb2452a225dec3834e69fb011c3d7e68084f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/49cdb2452a225dec3834e69fb011c3d7e68084f7", "html_url": "https://github.com/rust-lang/rust/commit/49cdb2452a225dec3834e69fb011c3d7e68084f7"}], "stats": {"total": 499, "additions": 471, "deletions": 28}, "files": [{"sha": "069fc01d0c7e3c89d1f7aba5268c9dadbddc59d9", "filename": "crates/cfg/src/cfg_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -49,7 +49,7 @@ impl fmt::Display for CfgAtom {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum CfgExpr {\n     Invalid,\n     Atom(CfgAtom),"}, {"sha": "a8b169e87b4955cab8ebd884e238e3a98c565d1e", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -447,6 +447,15 @@ impl Analysis {\n         self.with_db(|db| runnables::runnables(db, file_id))\n     }\n \n+    /// Returns the set of tests for the given file position.\n+    pub fn related_tests(\n+        &self,\n+        position: FilePosition,\n+        search_scope: Option<SearchScope>,\n+    ) -> Cancelable<Vec<Runnable>> {\n+        self.with_db(|db| runnables::related_tests(db, position, search_scope))\n+    }\n+\n     /// Computes syntax highlighting for the given file\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HlRange>> {\n         self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false))"}, {"sha": "faa91541e673debed2386bcb3d8344dfec435865", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 338, "deletions": 6, "changes": 344, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -1,28 +1,35 @@\n use std::fmt;\n \n+use ast::NameOwner;\n use cfg::CfgExpr;\n use hir::{AsAssocItem, HasAttrs, HasSource, Semantics};\n use ide_assists::utils::test_related_attribute;\n-use ide_db::{defs::Definition, RootDatabase, SymbolKind};\n+use ide_db::{\n+    base_db::{FilePosition, FileRange},\n+    defs::Definition,\n+    search::SearchScope,\n+    RootDatabase, SymbolKind,\n+};\n use itertools::Itertools;\n+use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{self, AstNode, AttrsOwner},\n     match_ast, SyntaxNode,\n };\n \n use crate::{\n     display::{ToNav, TryToNav},\n-    FileId, NavigationTarget,\n+    references, FileId, NavigationTarget,\n };\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Hash, PartialEq, Eq)]\n pub struct Runnable {\n     pub nav: NavigationTarget,\n     pub kind: RunnableKind,\n     pub cfg: Option<CfgExpr>,\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Hash, PartialEq, Eq)]\n pub enum TestId {\n     Name(String),\n     Path(String),\n@@ -37,7 +44,7 @@ impl fmt::Display for TestId {\n     }\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Hash, PartialEq, Eq)]\n pub enum RunnableKind {\n     Test { test_id: TestId, attr: TestAttr },\n     TestMod { path: String },\n@@ -105,6 +112,105 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     res\n }\n \n+// Feature: Related Tests\n+//\n+// Provides a sneak peek of all tests where the current item is used.\n+//\n+// The simplest way to use this feature is via the context menu:\n+//  - Right-click on the selected item. The context menu opens.\n+//  - Select **Peek related tests**\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: Peek related tests**\n+// |===\n+pub(crate) fn related_tests(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+    search_scope: Option<SearchScope>,\n+) -> Vec<Runnable> {\n+    let sema = Semantics::new(db);\n+    let mut res: FxHashSet<Runnable> = FxHashSet::default();\n+\n+    find_related_tests(&sema, position, search_scope, &mut res);\n+\n+    res.into_iter().collect_vec()\n+}\n+\n+fn find_related_tests(\n+    sema: &Semantics<RootDatabase>,\n+    position: FilePosition,\n+    search_scope: Option<SearchScope>,\n+    tests: &mut FxHashSet<Runnable>,\n+) {\n+    if let Some(refs) = references::find_all_refs(&sema, position, search_scope) {\n+        for (file_id, refs) in refs.references {\n+            let file = sema.parse(file_id);\n+            let file = file.syntax();\n+            let functions = refs.iter().filter_map(|(range, _)| {\n+                let token = file.token_at_offset(range.start()).next()?;\n+                let token = sema.descend_into_macros(token);\n+                let syntax = token.parent();\n+                syntax.ancestors().find_map(ast::Fn::cast)\n+            });\n+\n+            for fn_def in functions {\n+                if let Some(runnable) = as_test_runnable(&sema, &fn_def) {\n+                    // direct test\n+                    tests.insert(runnable);\n+                } else if let Some(module) = parent_test_module(&sema, &fn_def) {\n+                    // indirect test\n+                    find_related_tests_in_module(sema, &fn_def, &module, tests);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn find_related_tests_in_module(\n+    sema: &Semantics<RootDatabase>,\n+    fn_def: &ast::Fn,\n+    parent_module: &hir::Module,\n+    tests: &mut FxHashSet<Runnable>,\n+) {\n+    if let Some(fn_name) = fn_def.name() {\n+        let mod_source = parent_module.definition_source(sema.db);\n+        let range = match mod_source.value {\n+            hir::ModuleSource::Module(m) => m.syntax().text_range(),\n+            hir::ModuleSource::BlockExpr(b) => b.syntax().text_range(),\n+            hir::ModuleSource::SourceFile(f) => f.syntax().text_range(),\n+        };\n+\n+        let file_id = mod_source.file_id.original_file(sema.db);\n+        let mod_scope = SearchScope::file_range(FileRange { file_id, range });\n+        let fn_pos = FilePosition { file_id, offset: fn_name.syntax().text_range().start() };\n+        find_related_tests(sema, fn_pos, Some(mod_scope), tests)\n+    }\n+}\n+\n+fn as_test_runnable(sema: &Semantics<RootDatabase>, fn_def: &ast::Fn) -> Option<Runnable> {\n+    if test_related_attribute(&fn_def).is_some() {\n+        let function = sema.to_def(fn_def)?;\n+        runnable_fn(sema, function)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn parent_test_module(sema: &Semantics<RootDatabase>, fn_def: &ast::Fn) -> Option<hir::Module> {\n+    fn_def.syntax().ancestors().find_map(|node| {\n+        let module = ast::Module::cast(node)?;\n+        let module = sema.to_def(&module)?;\n+\n+        if has_test_function_or_multiple_test_submodules(sema, &module) {\n+            Some(module)\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n fn runnables_mod(sema: &Semantics<RootDatabase>, acc: &mut Vec<Runnable>, module: hir::Module) {\n     acc.extend(module.declarations(sema.db).into_iter().filter_map(|def| {\n         let runnable = match def {\n@@ -256,7 +362,7 @@ fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Op\n     Some(res)\n }\n \n-#[derive(Debug, Copy, Clone)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct TestAttr {\n     pub ignore: bool,\n }\n@@ -349,6 +455,12 @@ mod tests {\n         );\n     }\n \n+    fn check_tests(ra_fixture: &str, expect: Expect) {\n+        let (analysis, position) = fixture::position(ra_fixture);\n+        let tests = analysis.related_tests(position, None).unwrap();\n+        expect.assert_debug_eq(&tests);\n+    }\n+\n     #[test]\n     fn test_runnables() {\n         check(\n@@ -1074,4 +1186,224 @@ mod tests {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn find_no_tests() {\n+        check_tests(\n+            r#\"\n+//- /lib.rs\n+fn foo$0() {  };\n+\"#,\n+            expect![[r#\"\n+                []\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn find_direct_fn_test() {\n+        check_tests(\n+            r#\"\n+//- /lib.rs\n+fn foo$0() { };\n+\n+mod tests {\n+    #[test]\n+    fn foo_test() {\n+        super::foo()\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 31..85,\n+                            focus_range: 46..54,\n+                            name: \"foo_test\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"tests::foo_test\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn find_direct_struct_test() {\n+        check_tests(\n+            r#\"\n+//- /lib.rs\n+struct Fo$0o;\n+fn foo(arg: &Foo) { };\n+\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn foo_test() {\n+        foo(Foo);\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+            [\n+                Runnable {\n+                    nav: NavigationTarget {\n+                        file_id: FileId(\n+                            0,\n+                        ),\n+                        full_range: 71..122,\n+                        focus_range: 86..94,\n+                        name: \"foo_test\",\n+                        kind: Function,\n+                    },\n+                    kind: Test {\n+                        test_id: Path(\n+                            \"tests::foo_test\",\n+                        ),\n+                        attr: TestAttr {\n+                            ignore: false,\n+                        },\n+                    },\n+                    cfg: None,\n+                },\n+            ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn find_indirect_fn_test() {\n+        check_tests(\n+            r#\"\n+//- /lib.rs\n+fn foo$0() { };\n+\n+mod tests {\n+    use super::foo;\n+\n+    fn check1() {\n+        check2()\n+    }\n+\n+    fn check2() {\n+        foo()\n+    }\n+\n+    #[test]\n+    fn foo_test() {\n+        check1()\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 133..183,\n+                            focus_range: 148..156,\n+                            name: \"foo_test\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"tests::foo_test\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn tests_are_unique() {\n+        check_tests(\n+            r#\"\n+//- /lib.rs\n+fn foo$0() { };\n+\n+mod tests {\n+    use super::foo;\n+\n+    #[test]\n+    fn foo_test() {\n+        foo();\n+        foo();\n+    }\n+\n+    #[test]\n+    fn foo2_test() {\n+        foo();\n+        foo();\n+    }\n+\n+}\n+\"#,\n+            expect![[r#\"\n+            [\n+                Runnable {\n+                    nav: NavigationTarget {\n+                        file_id: FileId(\n+                            0,\n+                        ),\n+                        full_range: 52..115,\n+                        focus_range: 67..75,\n+                        name: \"foo_test\",\n+                        kind: Function,\n+                    },\n+                    kind: Test {\n+                        test_id: Path(\n+                            \"tests::foo_test\",\n+                        ),\n+                        attr: TestAttr {\n+                            ignore: false,\n+                        },\n+                    },\n+                    cfg: None,\n+                },\n+                Runnable {\n+                    nav: NavigationTarget {\n+                        file_id: FileId(\n+                            0,\n+                        ),\n+                        full_range: 121..185,\n+                        focus_range: 136..145,\n+                        name: \"foo2_test\",\n+                        kind: Function,\n+                    },\n+                    kind: Test {\n+                        test_id: Path(\n+                            \"tests::foo2_test\",\n+                        ),\n+                        attr: TestAttr {\n+                            ignore: false,\n+                        },\n+                    },\n+                    cfg: None,\n+                },\n+            ]\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "fa18703e193450b3be8682ad34e5c6adbcbed96b", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -86,6 +86,10 @@ impl SearchScope {\n         SearchScope::new(std::iter::once((file, None)).collect())\n     }\n \n+    pub fn file_range(range: FileRange) -> SearchScope {\n+        SearchScope::new(std::iter::once((range.file_id, Some(range.range))).collect())\n+    }\n+\n     pub fn files(files: &[FileId]) -> SearchScope {\n         SearchScope::new(files.iter().map(|f| (*f, None)).collect())\n     }"}, {"sha": "706a39dab19d951f31de864801a39ed970ea005e", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -555,7 +555,7 @@ pub(crate) fn handle_runnables(\n         if should_skip_target(&runnable, cargo_spec.as_ref()) {\n             continue;\n         }\n-        let mut runnable = to_proto::runnable(&snap, file_id, runnable)?;\n+        let mut runnable = to_proto::runnable(&snap, runnable)?;\n         if expect_test {\n             runnable.label = format!(\"{} + expect\", runnable.label);\n             runnable.args.expect_test = Some(true);\n@@ -607,6 +607,24 @@ pub(crate) fn handle_runnables(\n     Ok(res)\n }\n \n+pub(crate) fn handle_related_tests(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_types::TextDocumentPositionParams,\n+) -> Result<Vec<lsp_ext::TestInfo>> {\n+    let _p = profile::span(\"handle_related_tests\");\n+    let position = from_proto::file_position(&snap, params)?;\n+\n+    let tests = snap.analysis.related_tests(position, None)?;\n+    let mut res = Vec::new();\n+    for it in tests {\n+        if let Ok(runnable) = to_proto::runnable(&snap, it) {\n+            res.push(lsp_ext::TestInfo { runnable })\n+        }\n+    }\n+\n+    Ok(res)\n+}\n+\n pub(crate) fn handle_completion(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::CompletionParams,\n@@ -772,7 +790,7 @@ pub(crate) fn handle_hover(\n             contents: HoverContents::Markup(to_proto::markup_content(info.info.markup)),\n             range: Some(range),\n         },\n-        actions: prepare_hover_actions(&snap, position.file_id, &info.info.actions),\n+        actions: prepare_hover_actions(&snap, &info.info.actions),\n     };\n \n     Ok(Some(hover))\n@@ -1440,17 +1458,16 @@ fn show_impl_command_link(\n \n fn runnable_action_links(\n     snap: &GlobalStateSnapshot,\n-    file_id: FileId,\n     runnable: Runnable,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n-    let cargo_spec = CargoTargetSpec::for_file(&snap, file_id).ok()?;\n+    let cargo_spec = CargoTargetSpec::for_file(&snap, runnable.nav.file_id).ok()?;\n     let hover_config = snap.config.hover();\n     if !hover_config.runnable() || should_skip_target(&runnable, cargo_spec.as_ref()) {\n         return None;\n     }\n \n     let action: &'static _ = runnable.action();\n-    to_proto::runnable(snap, file_id, runnable).ok().map(|r| {\n+    to_proto::runnable(snap, runnable).ok().map(|r| {\n         let mut group = lsp_ext::CommandLinkGroup::default();\n \n         if hover_config.run {\n@@ -1489,7 +1506,6 @@ fn goto_type_action_links(\n \n fn prepare_hover_actions(\n     snap: &GlobalStateSnapshot,\n-    file_id: FileId,\n     actions: &[HoverAction],\n ) -> Vec<lsp_ext::CommandLinkGroup> {\n     if snap.config.hover().none() || !snap.config.hover_actions() {\n@@ -1500,7 +1516,7 @@ fn prepare_hover_actions(\n         .iter()\n         .filter_map(|it| match it {\n             HoverAction::Implementation(position) => show_impl_command_link(snap, position),\n-            HoverAction::Runnable(r) => runnable_action_links(snap, file_id, r.clone()),\n+            HoverAction::Runnable(r) => runnable_action_links(snap, r.clone()),\n             HoverAction::GoToType(targets) => goto_type_action_links(snap, targets),\n         })\n         .collect()"}, {"sha": "efcdcd1d97557795ab9d931adf91628f866a027a", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -177,6 +177,19 @@ pub struct CargoRunnable {\n     pub expect_test: Option<bool>,\n }\n \n+pub enum RelatedTests {}\n+\n+impl Request for RelatedTests {\n+    type Params = lsp_types::TextDocumentPositionParams;\n+    type Result = Vec<TestInfo>;\n+    const METHOD: &'static str = \"rust-analyzer/relatedTests\";\n+}\n+\n+#[derive(Debug, Deserialize, Serialize)]\n+pub struct TestInfo {\n+    pub runnable: Runnable,\n+}\n+\n pub enum InlayHints {}\n \n impl Request for InlayHints {"}, {"sha": "984790d354cdc5b02c9155b875f9280b202e1ecb", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -500,6 +500,7 @@ impl GlobalState {\n             .on::<lsp_ext::ExpandMacro>(handlers::handle_expand_macro)\n             .on::<lsp_ext::ParentModule>(handlers::handle_parent_module)\n             .on::<lsp_ext::Runnables>(handlers::handle_runnables)\n+            .on::<lsp_ext::RelatedTests>(handlers::handle_related_tests)\n             .on::<lsp_ext::InlayHints>(handlers::handle_inlay_hints)\n             .on::<lsp_ext::CodeActionRequest>(handlers::handle_code_action)\n             .on::<lsp_ext::CodeActionResolveRequest>(handlers::handle_code_action_resolve)"}, {"sha": "9ca0915b99d0aa5ab78f6a96e32b624799666206", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -838,11 +838,10 @@ pub(crate) fn resolved_code_action(\n \n pub(crate) fn runnable(\n     snap: &GlobalStateSnapshot,\n-    file_id: FileId,\n     runnable: Runnable,\n ) -> Result<lsp_ext::Runnable> {\n     let config = snap.config.runnables();\n-    let spec = CargoTargetSpec::for_file(snap, file_id)?;\n+    let spec = CargoTargetSpec::for_file(snap, runnable.nav.file_id)?;\n     let workspace_root = spec.as_ref().map(|it| it.workspace_root.clone());\n     let target = spec.as_ref().map(|s| s.target.clone());\n     let (cargo_args, executable_args) =\n@@ -875,7 +874,7 @@ pub(crate) fn code_lens(\n             let annotation_range = range(&line_index, annotation.range);\n \n             let action = run.action();\n-            let r = runnable(&snap, run.nav.file_id, run)?;\n+            let r = runnable(&snap, run)?;\n \n             let command = if debug {\n                 command::debug_single(&r)"}, {"sha": "694fafcd5c6141a03eb8626a794d9398c8ab3438", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: d279d971d4f62cd7\n+lsp_ext.rs hash: 4dfa8d7035f4aee7\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this  issue:\n@@ -579,3 +579,19 @@ This request is sent from client to server to open the current project's Cargo.t\n ```\n \n `experimental/openCargoToml` returns a single `Link` to the start of the `[package]` keyword.\n+\n+## Related tests\n+\n+This request is sent from client to server to get the list of tests for the specified position.\n+\n+**Method:** `rust-analyzer/relatedTests`\n+\n+**Request:** `TextDocumentPositionParams`\n+\n+**Response:** `TestInfo[]`\n+\n+```typescript\n+interface TestInfo {\n+    runnable: Runnable;\n+}\n+```"}, {"sha": "923e9b35a01f8a36acad94e34c34b3a31f7dad37", "filename": "editors/code/package.json", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -203,6 +203,11 @@\n                 \"command\": \"rust-analyzer.openCargoToml\",\n                 \"title\": \"Open Cargo.toml\",\n                 \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.peekTests\",\n+                \"title\": \"Peek related tests\",\n+                \"category\": \"Rust Analyzer\"\n             }\n         ],\n         \"keybindings\": [\n@@ -1165,7 +1170,14 @@\n                     \"command\": \"rust-analyzer.openCargoToml\",\n                     \"when\": \"inRustProject\"\n                 }\n+            ],\n+            \"editor/context\": [\n+                {\n+                    \"command\": \"rust-analyzer.peekTests\",\n+                    \"when\": \"inRustProject\",\n+                    \"group\": \"navigation@1000\"\n+                }\n             ]\n         }\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "694f445bc36ed708ae447715c750e1669daf54f2", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -9,6 +9,7 @@ import { RunnableQuickPick, selectRunnable, createTask, createArgs } from './run\n import { AstInspector } from './ast_inspector';\n import { isRustDocument, sleep, isRustEditor } from './util';\n import { startDebugSession, makeDebugConfig } from './debug';\n+import { LanguageClient } from 'vscode-languageclient/node';\n \n export * from './ast_inspector';\n export * from './run';\n@@ -455,17 +456,20 @@ export function reloadWorkspace(ctx: Ctx): Cmd {\n     return async () => ctx.client.sendRequest(ra.reloadWorkspace);\n }\n \n+async function showReferencesImpl(client: LanguageClient, uri: string, position: lc.Position, locations: lc.Location[]) {\n+    if (client) {\n+        await vscode.commands.executeCommand(\n+            'editor.action.showReferences',\n+            vscode.Uri.parse(uri),\n+            client.protocol2CodeConverter.asPosition(position),\n+            locations.map(client.protocol2CodeConverter.asLocation),\n+        );\n+    }\n+}\n+\n export function showReferences(ctx: Ctx): Cmd {\n     return async (uri: string, position: lc.Position, locations: lc.Location[]) => {\n-        const client = ctx.client;\n-        if (client) {\n-            await vscode.commands.executeCommand(\n-                'editor.action.showReferences',\n-                vscode.Uri.parse(uri),\n-                client.protocol2CodeConverter.asPosition(position),\n-                locations.map(client.protocol2CodeConverter.asLocation),\n-            );\n-        }\n+        await showReferencesImpl(ctx.client, uri, position, locations);\n     };\n }\n \n@@ -554,6 +558,36 @@ export function run(ctx: Ctx): Cmd {\n     };\n }\n \n+export function peekTests(ctx: Ctx): Cmd {\n+    const client = ctx.client;\n+\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor || !client) return;\n+\n+        await vscode.window.withProgress({\n+            location: vscode.ProgressLocation.Notification,\n+            title: \"Looking for tests...\",\n+            cancellable: false,\n+        }, async (_progress, _token) => {\n+            const uri = editor.document.uri.toString();\n+            const position = client.code2ProtocolConverter.asPosition(\n+                editor.selection.active,\n+            );\n+\n+            const tests = await client.sendRequest(ra.relatedTests, {\n+                textDocument: { uri: uri },\n+                position: position,\n+            });\n+            const locations: lc.Location[] = tests.map(it =>\n+                lc.Location.create(it.runnable.location!.targetUri, it.runnable.location!.targetSelectionRange));\n+\n+            await showReferencesImpl(client, uri, position, locations);\n+        });\n+    };\n+}\n+\n+\n export function runSingle(ctx: Ctx): Cmd {\n     return async (runnable: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;"}, {"sha": "52de29e04fd59f260081a1eac5cc5522cda0ad18", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -72,6 +72,12 @@ export interface Runnable {\n }\n export const runnables = new lc.RequestType<RunnablesParams, Runnable[], void>(\"experimental/runnables\");\n \n+export interface TestInfo {\n+    runnable: Runnable;\n+}\n+\n+export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, TestInfo[], void>(\"rust-analyzer/relatedTests\");\n+\n export type InlayHint = InlayHint.TypeHint | InlayHint.ParamHint | InlayHint.ChainingHint;\n \n export namespace InlayHint {"}, {"sha": "925103f56253de4e43f6f0659feb568aee6f5075", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7accf6bc37c059a83a58c82f463f02a02ed2226f/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7accf6bc37c059a83a58c82f463f02a02ed2226f/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=7accf6bc37c059a83a58c82f463f02a02ed2226f", "patch": "@@ -113,6 +113,7 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('newDebugConfig', commands.newDebugConfig);\n     ctx.registerCommand('openDocs', commands.openDocs);\n     ctx.registerCommand('openCargoToml', commands.openCargoToml);\n+    ctx.registerCommand('peekTests', commands.peekTests);\n \n     defaultOnEnter.dispose();\n     ctx.registerCommand('onEnter', commands.onEnter);"}]}