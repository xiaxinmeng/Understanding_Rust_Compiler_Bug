{"sha": "2fd2210b880498829bf1556aee47f3753887ecfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDIyMTBiODgwNDk4ODI5YmYxNTU2YWVlNDdmMzc1Mzg4N2VjZmE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-12T13:41:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-12T13:41:46Z"}, "message": "prevent other `encode` methods from breaking `derive(RustcEncodable)`", "tree": {"sha": "637b875edac406c6d91460d3225640c2a9e425dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/637b875edac406c6d91460d3225640c2a9e425dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd2210b880498829bf1556aee47f3753887ecfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd2210b880498829bf1556aee47f3753887ecfa", "html_url": "https://github.com/rust-lang/rust/commit/2fd2210b880498829bf1556aee47f3753887ecfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd2210b880498829bf1556aee47f3753887ecfa/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28c9fdafc06a259c25c1b889044fd49b4dfc69e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/28c9fdafc06a259c25c1b889044fd49b4dfc69e2", "html_url": "https://github.com/rust-lang/rust/commit/28c9fdafc06a259c25c1b889044fd49b4dfc69e2"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "60d644ba7681a01ada36443c2de39d3b45b5b4ec", "filename": "src/librustc_incremental/persist/data.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2210b880498829bf1556aee47f3753887ecfa/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2210b880498829bf1556aee47f3753887ecfa/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs?ref=2fd2210b880498829bf1556aee47f3753887ecfa", "patch": "@@ -11,8 +11,7 @@\n //! The data that we will serialize and deserialize.\n \n use rustc::dep_graph::DepNode;\n-use rustc_serialize::{Decoder as RustcDecoder,\n-                      Encodable as RustcEncodable, Encoder as RustcEncoder};\n+use rustc_serialize::{Decoder as RustcDecoder, Encoder as RustcEncoder};\n \n use super::directory::DefPathIndex;\n \n@@ -32,4 +31,3 @@ pub struct SerializedHash {\n     /// the hash itself, computed by `calculate_item_hash`\n     pub hash: u64,\n }\n-"}, {"sha": "7f4c7d919c0cbd87ad7d30c4dc43eef156edf10d", "filename": "src/librustc_incremental/persist/directory.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2210b880498829bf1556aee47f3753887ecfa/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2210b880498829bf1556aee47f3753887ecfa/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs?ref=2fd2210b880498829bf1556aee47f3753887ecfa", "patch": "@@ -18,8 +18,7 @@ use rustc::hir::map::DefPath;\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n use rustc::util::nodemap::DefIdMap;\n-use rustc_serialize::{Decoder as RustcDecoder,\n-                      Encodable as RustcEncodable, Encoder as RustcEncoder};\n+use rustc_serialize::{Decoder as RustcDecoder, Encoder as RustcEncoder};\n use std::fmt::{self, Debug};\n \n /// Index into the DefIdDirectory"}, {"sha": "6e47f2dd08f6b3470bc6e52fa37d85f5a6411101", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2210b880498829bf1556aee47f3753887ecfa/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2210b880498829bf1556aee47f3753887ecfa/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=2fd2210b880498829bf1556aee47f3753887ecfa", "patch": "@@ -162,7 +162,7 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                 attributes: Vec::new(),\n                 is_unsafe: false,\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| {\n-                    encodable_substructure(a, b, c)\n+                    encodable_substructure(a, b, c, krate)\n                 })),\n             }\n         ),\n@@ -173,12 +173,14 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n }\n \n fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n-                          substr: &Substructure) -> P<Expr> {\n+                          substr: &Substructure, krate: &'static str) -> P<Expr> {\n     let encoder = substr.nonself_args[0].clone();\n     // throw an underscore in front to suppress unused variable warnings\n     let blkarg = cx.ident_of(\"_e\");\n     let blkencoder = cx.expr_ident(trait_span, blkarg);\n-    let encode = cx.ident_of(\"encode\");\n+    let fn_path = cx.expr_path(cx.path_global(trait_span, vec![cx.ident_of(krate),\n+                                                               cx.ident_of(\"Encodable\"),\n+                                                               cx.ident_of(\"encode\")]));\n \n     return match *substr.fields {\n         Struct(_, ref fields) => {\n@@ -196,8 +198,8 @@ fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                         token::intern_and_get_ident(&format!(\"_field{}\", i))\n                     }\n                 };\n-                let enc = cx.expr_method_call(span, self_.clone(),\n-                                              encode, vec!(blkencoder.clone()));\n+                let self_ref = cx.expr_addr_of(span, self_.clone());\n+                let enc = cx.expr_call(span, fn_path.clone(), vec![self_ref, blkencoder.clone()]);\n                 let lambda = cx.lambda_expr_1(span, enc, blkarg);\n                 let call = cx.expr_method_call(span, blkencoder.clone(),\n                                                emit_struct_field,\n@@ -245,8 +247,9 @@ fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n             if !fields.is_empty() {\n                 let last = fields.len() - 1;\n                 for (i, &FieldInfo { ref self_, span, .. }) in fields.iter().enumerate() {\n-                    let enc = cx.expr_method_call(span, self_.clone(),\n-                                                  encode, vec!(blkencoder.clone()));\n+                let self_ref = cx.expr_addr_of(span, self_.clone());\n+                    let enc = cx.expr_call(span, fn_path.clone(), vec![self_ref,\n+                                                                       blkencoder.clone()]);\n                     let lambda = cx.lambda_expr_1(span, enc, blkarg);\n                     let call = cx.expr_method_call(span, blkencoder.clone(),\n                                                    emit_variant_arg,"}, {"sha": "655b08225ab399d14549d01ec7a669c38af8af85", "filename": "src/test/run-pass-fulldeps/rustc_encodable_hygiene.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2fd2210b880498829bf1556aee47f3753887ecfa/src%2Ftest%2Frun-pass-fulldeps%2Frustc_encodable_hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd2210b880498829bf1556aee47f3753887ecfa/src%2Ftest%2Frun-pass-fulldeps%2Frustc_encodable_hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Frustc_encodable_hygiene.rs?ref=2fd2210b880498829bf1556aee47f3753887ecfa", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_private)]\n+\n+#[allow(dead_code)]\n+\n+extern crate serialize as rustc_serialize;\n+\n+#[derive(RustcDecodable, RustcEncodable,Debug)]\n+struct A {\n+    a: String,\n+}\n+\n+trait Trait {\n+    fn encode(&self);\n+}\n+\n+impl<T> Trait for T {\n+    fn encode(&self) {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {}"}]}