{"sha": "ce316268014ed7bc3599324b379be1331997d3ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMzE2MjY4MDE0ZWQ3YmMzNTk5MzI0YjM3OWJlMTMzMTk5N2QzYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-17T16:47:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-17T16:47:46Z"}, "message": "Auto merge of #37112 - pnkfelix:fix-issue-36744, r=arielb1\n\nFix ICE: inject bitcast if types mismatch for invokes/calls/stores\n\nFix ICE: inject bitcast if types mismatch for invokes/calls\n\nFix #36744", "tree": {"sha": "56145cd332167835fedc966d89dec96db9c6ec71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56145cd332167835fedc966d89dec96db9c6ec71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce316268014ed7bc3599324b379be1331997d3ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce316268014ed7bc3599324b379be1331997d3ab", "html_url": "https://github.com/rust-lang/rust/commit/ce316268014ed7bc3599324b379be1331997d3ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce316268014ed7bc3599324b379be1331997d3ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07b86d0d4d41976f52aa318960e605534ee42d4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/07b86d0d4d41976f52aa318960e605534ee42d4f", "html_url": "https://github.com/rust-lang/rust/commit/07b86d0d4d41976f52aa318960e605534ee42d4f"}, {"sha": "05626546081394f4ba0c9d916c35e48cc29d2af6", "url": "https://api.github.com/repos/rust-lang/rust/commits/05626546081394f4ba0c9d916c35e48cc29d2af6", "html_url": "https://github.com/rust-lang/rust/commit/05626546081394f4ba0c9d916c35e48cc29d2af6"}], "stats": {"total": 127, "additions": 110, "deletions": 17}, "files": [{"sha": "8556e95903c18b51b055a0d9af6aa4c53bbc06a2", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 56, "deletions": 17, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ce316268014ed7bc3599324b379be1331997d3ab/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce316268014ed7bc3599324b379be1331997d3ab/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=ce316268014ed7bc3599324b379be1331997d3ab", "patch": "@@ -22,6 +22,7 @@ use value::Value;\n use util::nodemap::FnvHashMap;\n use libc::{c_uint, c_char};\n \n+use std::borrow::Cow;\n use std::ffi::CString;\n use std::ptr;\n use syntax_pos::Span;\n@@ -175,8 +176,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                    .collect::<Vec<String>>()\n                    .join(\", \"));\n \n-        check_call(\"invoke\", llfn, args);\n-\n+        let args = self.check_call(\"invoke\", llfn, args);\n         let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(ptr::null_mut());\n \n         unsafe {\n@@ -543,6 +543,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"Store {:?} -> {:?}\", Value(val), Value(ptr));\n         assert!(!self.llbuilder.is_null());\n         self.count_insn(\"store\");\n+        let ptr = self.check_store(val, ptr);\n         unsafe {\n             llvm::LLVMBuildStore(self.llbuilder, val, ptr)\n         }\n@@ -552,6 +553,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"Store {:?} -> {:?}\", Value(val), Value(ptr));\n         assert!(!self.llbuilder.is_null());\n         self.count_insn(\"store.volatile\");\n+        let ptr = self.check_store(val, ptr);\n         unsafe {\n             let insn = llvm::LLVMBuildStore(self.llbuilder, val, ptr);\n             llvm::LLVMSetVolatile(insn, llvm::True);\n@@ -562,6 +564,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn atomic_store(&self, val: ValueRef, ptr: ValueRef, order: AtomicOrdering) {\n         debug!(\"Store {:?} -> {:?}\", Value(val), Value(ptr));\n         self.count_insn(\"store.atomic\");\n+        let ptr = self.check_store(val, ptr);\n         unsafe {\n             let ty = Type::from_ref(llvm::LLVMTypeOf(ptr));\n             let align = llalign_of_pref(self.ccx, ty.element_type());\n@@ -857,8 +860,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                    .collect::<Vec<String>>()\n                    .join(\", \"));\n \n-        check_call(\"call\", llfn, args);\n-\n+        let args = self.check_call(\"call\", llfn, args);\n         let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(ptr::null_mut());\n \n         unsafe {\n@@ -1100,10 +1102,32 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             llvm::LLVMRustBuildAtomicFence(self.llbuilder, order, scope);\n         }\n     }\n-}\n \n-fn check_call(typ: &str, llfn: ValueRef, args: &[ValueRef]) {\n-    if cfg!(debug_assertions) {\n+    /// Returns the ptr value that should be used for storing `val`.\n+    fn check_store<'b>(&self,\n+                       val: ValueRef,\n+                       ptr: ValueRef) -> ValueRef {\n+        let dest_ptr_ty = val_ty(ptr);\n+        let stored_ty = val_ty(val);\n+        let stored_ptr_ty = stored_ty.ptr_to();\n+\n+        assert_eq!(dest_ptr_ty.kind(), llvm::TypeKind::Pointer);\n+\n+        if dest_ptr_ty == stored_ptr_ty {\n+            ptr\n+        } else {\n+            debug!(\"Type mismatch in store. \\\n+                    Expected {:?}, got {:?}; inserting bitcast\",\n+                   dest_ptr_ty, stored_ptr_ty);\n+            self.bitcast(ptr, stored_ptr_ty)\n+        }\n+    }\n+\n+    /// Returns the args that should be used for a call to `llfn`.\n+    fn check_call<'b>(&self,\n+                      typ: &str,\n+                      llfn: ValueRef,\n+                      args: &'b [ValueRef]) -> Cow<'b, [ValueRef]> {\n         let mut fn_ty = val_ty(llfn);\n         // Strip off pointers\n         while fn_ty.kind() == llvm::TypeKind::Pointer {\n@@ -1115,16 +1139,31 @@ fn check_call(typ: &str, llfn: ValueRef, args: &[ValueRef]) {\n \n         let param_tys = fn_ty.func_params();\n \n-        let iter = param_tys.into_iter()\n-            .zip(args.iter().map(|&v| val_ty(v)));\n-        for (i, (expected_ty, actual_ty)) in iter.enumerate() {\n-            if expected_ty != actual_ty {\n-                bug!(\"Type mismatch in function call of {:?}. \\\n-                      Expected {:?} for param {}, got {:?}\",\n-                     Value(llfn),\n-                     expected_ty, i, actual_ty);\n+        let all_args_match = param_tys.iter()\n+            .zip(args.iter().map(|&v| val_ty(v)))\n+            .all(|(expected_ty, actual_ty)| *expected_ty == actual_ty);\n+\n+        if all_args_match {\n+            return Cow::Borrowed(args);\n+        }\n+\n+        let casted_args: Vec<_> = param_tys.into_iter()\n+            .zip(args.iter())\n+            .enumerate()\n+            .map(|(i, (expected_ty, &actual_val))| {\n+                let actual_ty = val_ty(actual_val);\n+                if expected_ty != actual_ty {\n+                    debug!(\"Type mismatch in function call of {:?}. \\\n+                            Expected {:?} for param {}, got {:?}; injecting bitcast\",\n+                           Value(llfn),\n+                           expected_ty, i, actual_ty);\n+                    self.bitcast(actual_val, expected_ty)\n+                } else {\n+                    actual_val\n+                }\n+            })\n+            .collect();\n \n-            }\n-        }\n+        return Cow::Owned(casted_args);\n     }\n }"}, {"sha": "1859cc9ca00b547cb422312351a1e9a7a1d79a0f", "filename": "src/test/run-pass/issue-36744-bitcast-args-if-needed.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ce316268014ed7bc3599324b379be1331997d3ab/src%2Ftest%2Frun-pass%2Fissue-36744-bitcast-args-if-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce316268014ed7bc3599324b379be1331997d3ab/src%2Ftest%2Frun-pass%2Fissue-36744-bitcast-args-if-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36744-bitcast-args-if-needed.rs?ref=ce316268014ed7bc3599324b379be1331997d3ab", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This tests for an ICE (and, if ignored, subsequent LLVM abort) when\n+// a lifetime-parametric fn is passed into a context whose expected\n+// type has a differing lifetime parameterization.\n+\n+struct A<'a> {\n+    _a: &'a i32,\n+}\n+\n+fn call<T>(s: T, functions: &Vec<for <'n> fn(&'n T)>) {\n+    for function in functions {\n+        function(&s);\n+    }\n+}\n+\n+fn f(a: &A) { println!(\"a holds {}\", a._a); }\n+\n+fn main() {\n+    let a = A { _a: &10 };\n+\n+    let vec: Vec<for <'u,'v> fn(&'u A<'v>)> = vec![f];\n+    call(a, &vec);\n+}"}, {"sha": "1766edb06b481a9b47c8ef58cec2a02550335522", "filename": "src/test/run-pass/issue-36744-without-calls.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce316268014ed7bc3599324b379be1331997d3ab/src%2Ftest%2Frun-pass%2Fissue-36744-without-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce316268014ed7bc3599324b379be1331997d3ab/src%2Ftest%2Frun-pass%2Fissue-36744-without-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36744-without-calls.rs?ref=ce316268014ed7bc3599324b379be1331997d3ab", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests for an LLVM abort when storing a lifetime-parametric fn into\n+// context that is expecting one that is not lifetime-parametric\n+// (i.e. has no `for <'_>`).\n+\n+pub struct A<'a>(&'a ());\n+pub struct S<T>(T);\n+\n+pub fn bad<'s>(v: &mut S<fn(A<'s>)>, y: S<for<'b> fn(A<'b>)>) {\n+    *v = y;\n+}\n+\n+fn main() {}"}]}