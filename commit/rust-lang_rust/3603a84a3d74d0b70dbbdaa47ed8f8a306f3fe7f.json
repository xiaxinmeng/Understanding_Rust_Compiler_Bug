{"sha": "3603a84a3d74d0b70dbbdaa47ed8f8a306f3fe7f", "node_id": "C_kwDOAAsO6NoAKDM2MDNhODRhM2Q3NGQwYjcwZGJiZGFhNDdlZDhmOGEzMDZmM2ZlN2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T10:45:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T10:45:39Z"}, "message": "Auto merge of #111517 - lukas-code:addr-of-mutate, r=tmiasko\n\nallow mutating function args through `&raw const`\n\nFixes https://github.com/rust-lang/rust/issues/111502 by \"turning off the sketchy optimization while we figure out if this is ok\", like `@JakobDegen` said.\n\nThe first commit in this PR removes some suspicious looking logic from the same method, but should have no functional changes, since it doesn't modify the `context` outside of the method. Best reviewed commit by commit.\n\nr? opsem", "tree": {"sha": "ef0a961b9fe41ee699873b51f9298b632458578c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef0a961b9fe41ee699873b51f9298b632458578c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3603a84a3d74d0b70dbbdaa47ed8f8a306f3fe7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3603a84a3d74d0b70dbbdaa47ed8f8a306f3fe7f", "html_url": "https://github.com/rust-lang/rust/commit/3603a84a3d74d0b70dbbdaa47ed8f8a306f3fe7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3603a84a3d74d0b70dbbdaa47ed8f8a306f3fe7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1", "html_url": "https://github.com/rust-lang/rust/commit/0a0e045e50352d5b8c5c99e965c16aa978a0cbe1"}, {"sha": "9c418e5170a2fb125ae260af1fd94e538201888d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c418e5170a2fb125ae260af1fd94e538201888d", "html_url": "https://github.com/rust-lang/rust/commit/9c418e5170a2fb125ae260af1fd94e538201888d"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "a133c9d4782c8bc2f0f61010b58d1b2eff2ea27e", "filename": "compiler/rustc_mir_transform/src/deduce_param_attrs.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3603a84a3d74d0b70dbbdaa47ed8f8a306f3fe7f/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3603a84a3d74d0b70dbbdaa47ed8f8a306f3fe7f/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs?ref=3603a84a3d74d0b70dbbdaa47ed8f8a306f3fe7f", "patch": "@@ -8,7 +8,7 @@\n use rustc_hir::def_id::LocalDefId;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n-use rustc_middle::mir::{Body, Local, Location, Operand, Terminator, TerminatorKind, RETURN_PLACE};\n+use rustc_middle::mir::{Body, Location, Operand, Place, Terminator, TerminatorKind, RETURN_PLACE};\n use rustc_middle::ty::{self, DeducedParamAttrs, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n \n@@ -29,31 +29,31 @@ impl DeduceReadOnly {\n }\n \n impl<'tcx> Visitor<'tcx> for DeduceReadOnly {\n-    fn visit_local(&mut self, local: Local, mut context: PlaceContext, _: Location) {\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n         // We're only interested in arguments.\n-        if local == RETURN_PLACE || local.index() > self.mutable_args.domain_size() {\n+        if place.local == RETURN_PLACE || place.local.index() > self.mutable_args.domain_size() {\n             return;\n         }\n \n-        // Replace place contexts that are moves with copies. This is safe in all cases except\n-        // function argument position, which we already handled in `visit_terminator()` by using the\n-        // ArgumentChecker. See the comment in that method for more details.\n-        //\n-        // In the future, we might want to move this out into a separate pass, but for now let's\n-        // just do it on the fly because that's faster.\n-        if matches!(context, PlaceContext::NonMutatingUse(NonMutatingUseContext::Move)) {\n-            context = PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy);\n-        }\n-\n-        match context {\n-            PlaceContext::MutatingUse(..)\n-            | PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) => {\n+        let mark_as_mutable = match context {\n+            PlaceContext::MutatingUse(..) => {\n                 // This is a mutation, so mark it as such.\n-                self.mutable_args.insert(local.index() - 1);\n+                true\n+            }\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf) => {\n+                // Whether mutating though a `&raw const` is allowed is still undecided, so we\n+                // disable any sketchy `readonly` optimizations for now.\n+                // But we only need to do this if the pointer would point into the argument.\n+                !place.is_indirect()\n             }\n             PlaceContext::NonMutatingUse(..) | PlaceContext::NonUse(..) => {\n                 // Not mutating, so it's fine.\n+                false\n             }\n+        };\n+\n+        if mark_as_mutable {\n+            self.mutable_args.insert(place.local.index() - 1);\n         }\n     }\n "}, {"sha": "bea1aad235242575af515452dac19ea26c1250bb", "filename": "tests/codegen/addr-of-mutate.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3603a84a3d74d0b70dbbdaa47ed8f8a306f3fe7f/tests%2Fcodegen%2Faddr-of-mutate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3603a84a3d74d0b70dbbdaa47ed8f8a306f3fe7f/tests%2Fcodegen%2Faddr-of-mutate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Faddr-of-mutate.rs?ref=3603a84a3d74d0b70dbbdaa47ed8f8a306f3fe7f", "patch": "@@ -0,0 +1,34 @@\n+// compile-flags: -C opt-level=3 -C no-prepopulate-passes\n+// min-llvm-version: 15.0 (for opaque pointers)\n+\n+#![crate_type = \"lib\"]\n+\n+// Test for the absence of `readonly` on the argument when it is mutated via `&raw const`.\n+// See <https://github.com/rust-lang/rust/issues/111502>.\n+\n+// CHECK: i8 @foo(ptr noalias nocapture noundef dereferenceable(128) %x)\n+#[no_mangle]\n+pub fn foo(x: [u8; 128]) -> u8 {\n+    let ptr = core::ptr::addr_of!(x).cast_mut();\n+    unsafe {\n+        (*ptr)[0] = 1;\n+    }\n+    x[0]\n+}\n+\n+// CHECK: i1 @second(ptr noalias nocapture noundef dereferenceable({{[0-9]+}}) %a_ptr_and_b)\n+#[no_mangle]\n+pub unsafe fn second(a_ptr_and_b: (*mut (i32, bool), (i64, bool))) -> bool {\n+    let b_bool_ptr = core::ptr::addr_of!(a_ptr_and_b.1.1).cast_mut();\n+    (*b_bool_ptr) = true;\n+    a_ptr_and_b.1.1\n+}\n+\n+// If going through a deref (and there are no other mutating accesses), then `readonly` is fine.\n+// CHECK: i1 @third(ptr noalias nocapture noundef readonly dereferenceable({{[0-9]+}}) %a_ptr_and_b)\n+#[no_mangle]\n+pub unsafe fn third(a_ptr_and_b: (*mut (i32, bool), (i64, bool))) -> bool {\n+    let b_bool_ptr = core::ptr::addr_of!((*a_ptr_and_b.0).1).cast_mut();\n+    (*b_bool_ptr) = true;\n+    a_ptr_and_b.1.1\n+}"}]}