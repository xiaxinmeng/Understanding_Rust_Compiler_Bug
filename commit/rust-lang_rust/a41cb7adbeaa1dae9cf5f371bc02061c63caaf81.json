{"sha": "a41cb7adbeaa1dae9cf5f371bc02061c63caaf81", "node_id": "C_kwDOAAsO6NoAKGE0MWNiN2FkYmVhYTFkYWU5Y2Y1ZjM3MWJjMDIwNjFjNjNjYWFmODE", "commit": {"author": {"name": "koka", "email": "koka.code@gmail.com", "date": "2022-10-22T07:36:36Z"}, "committer": {"name": "koka", "email": "koka.code@gmail.com", "date": "2022-10-23T14:20:20Z"}, "message": "fix: support `map_or` for `or_fun_call` lint\n\n* add `rest_arg` to pass second argument from `map_or(U, F)`\n* extract some procedures into closure\n\nrefac: rename rest_arg/second_arg\n\nrefac: organize function argument order\n\n* put `second_arg` next to `arg` argument", "tree": {"sha": "ffe23af0fb559e88c93afa4c323f99d4e431f720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffe23af0fb559e88c93afa4c323f99d4e431f720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTeiB5r8ReBHCJcHiKlkXpAaXd0zQUCY1VNrQAKCRClkXpAaXd0\nzWSTAP9X4iJ2trJlkjfNl+jU75mVU57sI0n/+gHx1Gjw9uw6SAEAjlFFnLZcR5ux\nrZe4bd7GCC+cyj85gvkCnN26yoo7vQg=\n=7X3n\n-----END PGP SIGNATURE-----", "payload": "tree ffe23af0fb559e88c93afa4c323f99d4e431f720\nparent b72e451310d65ddf69441a641e2ebd6886c813b8\nauthor koka <koka.code@gmail.com> 1666424196 +0900\ncommitter koka <koka.code@gmail.com> 1666534820 +0900\n\nfix: support `map_or` for `or_fun_call` lint\n\n* add `rest_arg` to pass second argument from `map_or(U, F)`\n* extract some procedures into closure\n\nrefac: rename rest_arg/second_arg\n\nrefac: organize function argument order\n\n* put `second_arg` next to `arg` argument\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81", "html_url": "https://github.com/rust-lang/rust/commit/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/comments", "author": {"login": "koka831", "id": 14945055, "node_id": "MDQ6VXNlcjE0OTQ1MDU1", "avatar_url": "https://avatars.githubusercontent.com/u/14945055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koka831", "html_url": "https://github.com/koka831", "followers_url": "https://api.github.com/users/koka831/followers", "following_url": "https://api.github.com/users/koka831/following{/other_user}", "gists_url": "https://api.github.com/users/koka831/gists{/gist_id}", "starred_url": "https://api.github.com/users/koka831/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koka831/subscriptions", "organizations_url": "https://api.github.com/users/koka831/orgs", "repos_url": "https://api.github.com/users/koka831/repos", "events_url": "https://api.github.com/users/koka831/events{/privacy}", "received_events_url": "https://api.github.com/users/koka831/received_events", "type": "User", "site_admin": false}, "committer": {"login": "koka831", "id": 14945055, "node_id": "MDQ6VXNlcjE0OTQ1MDU1", "avatar_url": "https://avatars.githubusercontent.com/u/14945055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koka831", "html_url": "https://github.com/koka831", "followers_url": "https://api.github.com/users/koka831/followers", "following_url": "https://api.github.com/users/koka831/following{/other_user}", "gists_url": "https://api.github.com/users/koka831/gists{/gist_id}", "starred_url": "https://api.github.com/users/koka831/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koka831/subscriptions", "organizations_url": "https://api.github.com/users/koka831/orgs", "repos_url": "https://api.github.com/users/koka831/repos", "events_url": "https://api.github.com/users/koka831/events{/privacy}", "received_events_url": "https://api.github.com/users/koka831/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b72e451310d65ddf69441a641e2ebd6886c813b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b72e451310d65ddf69441a641e2ebd6886c813b8", "html_url": "https://github.com/rust-lang/rust/commit/b72e451310d65ddf69441a641e2ebd6886c813b8"}], "stats": {"total": 113, "additions": 92, "deletions": 21}, "files": [{"sha": "4460f38fcc18f8ff5743eda8ecdbb1347617ce88", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=a41cb7adbeaa1dae9cf5f371bc02061c63caaf81", "patch": "@@ -83,6 +83,8 @@ pub(super) fn check<'tcx>(\n         method_span: Span,\n         self_expr: &hir::Expr<'_>,\n         arg: &'tcx hir::Expr<'_>,\n+        // `Some` if fn has second argument\n+        second_arg: Option<&hir::Expr<'_>>,\n         span: Span,\n         // None if lambda is required\n         fun_span: Option<Span>,\n@@ -109,30 +111,40 @@ pub(super) fn check<'tcx>(\n             if poss.contains(&name);\n \n             then {\n-                let macro_expanded_snipped;\n-                let sugg: Cow<'_, str> = {\n+                let sugg = {\n                     let (snippet_span, use_lambda) = match (fn_has_arguments, fun_span) {\n                         (false, Some(fun_span)) => (fun_span, false),\n                         _ => (arg.span, true),\n                     };\n-                    let snippet = {\n-                        let not_macro_argument_snippet = snippet_with_macro_callsite(cx, snippet_span, \"..\");\n-                        if not_macro_argument_snippet == \"vec![]\" {\n-                            macro_expanded_snipped = snippet(cx, snippet_span, \"..\");\n+\n+                    let format_span = |span: Span| {\n+                        let not_macro_argument_snippet = snippet_with_macro_callsite(cx, span, \"..\");\n+                        let snip = if not_macro_argument_snippet == \"vec![]\" {\n+                            let macro_expanded_snipped = snippet(cx, snippet_span, \"..\");\n                             match macro_expanded_snipped.strip_prefix(\"$crate::vec::\") {\n-                                Some(stripped) => Cow::from(stripped),\n+                                Some(stripped) => Cow::Owned(stripped.to_owned()),\n                                 None => macro_expanded_snipped,\n                             }\n                         } else {\n                             not_macro_argument_snippet\n-                        }\n+                        };\n+\n+                        snip.to_string()\n                     };\n \n-                    if use_lambda {\n+                    let snip = format_span(snippet_span);\n+                    let snip = if use_lambda {\n                         let l_arg = if fn_has_arguments { \"_\" } else { \"\" };\n-                        format!(\"|{l_arg}| {snippet}\").into()\n+                        format!(\"|{l_arg}| {snip}\")\n                     } else {\n-                        snippet\n+                        snip\n+                    };\n+\n+                    if let Some(f) = second_arg {\n+                        let f = format_span(f.span);\n+                        format!(\"{snip}, {f}\")\n+                    } else {\n+                        snip\n                     }\n                 };\n                 let span_replace_word = method_span.with_hi(span.hi());\n@@ -149,8 +161,8 @@ pub(super) fn check<'tcx>(\n         }\n     }\n \n-    if let [arg] = args {\n-        let inner_arg = if let hir::ExprKind::Block(\n+    let extract_inner_arg = |arg: &'tcx hir::Expr<'_>| {\n+        if let hir::ExprKind::Block(\n             hir::Block {\n                 stmts: [],\n                 expr: Some(expr),\n@@ -162,19 +174,32 @@ pub(super) fn check<'tcx>(\n             expr\n         } else {\n             arg\n-        };\n+        }\n+    };\n+\n+    if let [arg] = args {\n+        let inner_arg = extract_inner_arg(arg);\n         match inner_arg.kind {\n             hir::ExprKind::Call(fun, or_args) => {\n                 let or_has_args = !or_args.is_empty();\n                 if !check_unwrap_or_default(cx, name, fun, arg, or_has_args, expr.span, method_span) {\n                     let fun_span = if or_has_args { None } else { Some(fun.span) };\n-                    check_general_case(cx, name, method_span, receiver, arg, expr.span, fun_span);\n+                    check_general_case(cx, name, method_span, receiver, arg, None, expr.span, fun_span);\n                 }\n             },\n             hir::ExprKind::Index(..) | hir::ExprKind::MethodCall(..) => {\n-                check_general_case(cx, name, method_span, receiver, arg, expr.span, None);\n+                check_general_case(cx, name, method_span, receiver, arg, None, expr.span, None);\n             },\n             _ => (),\n         }\n     }\n+\n+    // `map_or` takes two arguments\n+    if let [arg, lambda] = args {\n+        let inner_arg = extract_inner_arg(arg);\n+        if let hir::ExprKind::Call(fun, or_args) = inner_arg.kind {\n+            let fun_span = if or_args.is_empty() { Some(fun.span) } else { None };\n+            check_general_case(cx, name, method_span, receiver, arg, Some(lambda), expr.span, fun_span);\n+        }\n+    }\n }"}, {"sha": "fc8511626b3d122264723e47ec3291caf74f6bb7", "filename": "tests/ui/manual_ok_or.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2Fmanual_ok_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2Fmanual_ok_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_ok_or.fixed?ref=a41cb7adbeaa1dae9cf5f371bc02061c63caaf81", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::manual_ok_or)]\n+#![allow(clippy::or_fun_call)]\n #![allow(clippy::disallowed_names)]\n #![allow(clippy::redundant_closure)]\n #![allow(dead_code)]"}, {"sha": "b5303d33f5fd1e4b683bc4e20ea36a15ebc9ebaa", "filename": "tests/ui/manual_ok_or.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_ok_or.rs?ref=a41cb7adbeaa1dae9cf5f371bc02061c63caaf81", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![warn(clippy::manual_ok_or)]\n+#![allow(clippy::or_fun_call)]\n #![allow(clippy::disallowed_names)]\n #![allow(clippy::redundant_closure)]\n #![allow(dead_code)]"}, {"sha": "b4a17f143e3fce05ed999748c4f1bdc19983ec81", "filename": "tests/ui/manual_ok_or.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2Fmanual_ok_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2Fmanual_ok_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_ok_or.stderr?ref=a41cb7adbeaa1dae9cf5f371bc02061c63caaf81", "patch": "@@ -1,25 +1,25 @@\n error: this pattern reimplements `Option::ok_or`\n-  --> $DIR/manual_ok_or.rs:11:5\n+  --> $DIR/manual_ok_or.rs:12:5\n    |\n LL |     foo.map_or(Err(\"error\"), |v| Ok(v));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `foo.ok_or(\"error\")`\n    |\n    = note: `-D clippy::manual-ok-or` implied by `-D warnings`\n \n error: this pattern reimplements `Option::ok_or`\n-  --> $DIR/manual_ok_or.rs:14:5\n+  --> $DIR/manual_ok_or.rs:15:5\n    |\n LL |     foo.map_or(Err(\"error\"), Ok);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `foo.ok_or(\"error\")`\n \n error: this pattern reimplements `Option::ok_or`\n-  --> $DIR/manual_ok_or.rs:17:5\n+  --> $DIR/manual_ok_or.rs:18:5\n    |\n LL |     None::<i32>.map_or(Err(\"error\"), |v| Ok(v));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `None::<i32>.ok_or(\"error\")`\n \n error: this pattern reimplements `Option::ok_or`\n-  --> $DIR/manual_ok_or.rs:21:5\n+  --> $DIR/manual_ok_or.rs:22:5\n    |\n LL | /     foo.map_or(Err::<i32, &str>(\n LL | |         &format!("}, {"sha": "be9a65506e13168d6f00f0da19f277abebf6a86f", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=a41cb7adbeaa1dae9cf5f371bc02061c63caaf81", "patch": "@@ -236,4 +236,20 @@ mod issue9608 {\n     }\n }\n \n+mod issue8993 {\n+    fn g() -> i32 {\n+        3\n+    }\n+\n+    fn f(n: i32) -> i32 {\n+        n\n+    }\n+\n+    fn test_map_or() {\n+        let _ = Some(4).map_or_else(g, |v| v);\n+        let _ = Some(4).map_or_else(g, f);\n+        let _ = Some(4).map_or(0, f);\n+    }\n+}\n+\n fn main() {}"}, {"sha": "628c970463890db8d636e86de6f2694372e9c4b7", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=a41cb7adbeaa1dae9cf5f371bc02061c63caaf81", "patch": "@@ -236,4 +236,20 @@ mod issue9608 {\n     }\n }\n \n+mod issue8993 {\n+    fn g() -> i32 {\n+        3\n+    }\n+\n+    fn f(n: i32) -> i32 {\n+        n\n+    }\n+\n+    fn test_map_or() {\n+        let _ = Some(4).map_or(g(), |v| v);\n+        let _ = Some(4).map_or(g(), f);\n+        let _ = Some(4).map_or(0, f);\n+    }\n+}\n+\n fn main() {}"}, {"sha": "ba3001db7a5f47ed934090edb0003c73a1f18098", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a41cb7adbeaa1dae9cf5f371bc02061c63caaf81/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=a41cb7adbeaa1dae9cf5f371bc02061c63caaf81", "patch": "@@ -156,5 +156,17 @@ error: use of `unwrap_or` followed by a call to `new`\n LL |         .unwrap_or(String::new());\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n-error: aborting due to 26 previous errors\n+error: use of `map_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:249:25\n+   |\n+LL |         let _ = Some(4).map_or(g(), |v| v);\n+   |                         ^^^^^^^^^^^^^^^^^^ help: try this: `map_or_else(g, |v| v)`\n+\n+error: use of `map_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:250:25\n+   |\n+LL |         let _ = Some(4).map_or(g(), f);\n+   |                         ^^^^^^^^^^^^^^ help: try this: `map_or_else(g, f)`\n+\n+error: aborting due to 28 previous errors\n "}]}