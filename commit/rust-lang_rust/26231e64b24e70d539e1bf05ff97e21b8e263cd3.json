{"sha": "26231e64b24e70d539e1bf05ff97e21b8e263cd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MjMxZTY0YjI0ZTcwZDUzOWUxYmYwNWZmOTdlMjFiOGUyNjNjZDM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-03T09:21:44Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-03T09:21:44Z"}, "message": "Remove some more unnecessary `mut`", "tree": {"sha": "0980a51a136649adaae07682b116d407ad7a411d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0980a51a136649adaae07682b116d407ad7a411d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26231e64b24e70d539e1bf05ff97e21b8e263cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26231e64b24e70d539e1bf05ff97e21b8e263cd3", "html_url": "https://github.com/rust-lang/rust/commit/26231e64b24e70d539e1bf05ff97e21b8e263cd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26231e64b24e70d539e1bf05ff97e21b8e263cd3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37e18e7a304a1c013c59babc69ad9af4f54d8b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/37e18e7a304a1c013c59babc69ad9af4f54d8b03", "html_url": "https://github.com/rust-lang/rust/commit/37e18e7a304a1c013c59babc69ad9af4f54d8b03"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "ca488e98e53ebdf2acb9a1f60484ba5bcb65b738", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26231e64b24e70d539e1bf05ff97e21b8e263cd3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26231e64b24e70d539e1bf05ff97e21b8e263cd3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=26231e64b24e70d539e1bf05ff97e21b8e263cd3", "patch": "@@ -466,7 +466,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     /// Note that the value does not matter if the type is sized. For unsized types,\n     /// the value has to be a fat pointer, and we only care about the \"extra\" data in it.\n     pub fn size_and_align_of_dst(\n-        &mut self,\n+        &self,\n         ty: Ty<'tcx>,\n         value: Value,\n     ) -> EvalResult<'tcx, (Size, Align)> {\n@@ -494,7 +494,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n                     // Recurse to get the size of the dynamically sized field (must be\n                     // the last field).\n-                    let field_ty = layout.field(&self, layout.fields.count() - 1)?.ty;\n+                    let field_ty = layout.field(self, layout.fields.count() - 1)?.ty;\n                     let (unsized_size, unsized_align) =\n                         self.size_and_align_of_dst(field_ty, value)?;\n \n@@ -532,7 +532,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 }\n \n                 ty::TySlice(_) | ty::TyStr => {\n-                    let (elem_size, align) = layout.field(&self, 0)?.size_and_align();\n+                    let (elem_size, align) = layout.field(self, 0)?.size_and_align();\n                     let (_, len) = self.into_slice(value)?;\n                     Ok((elem_size * len, align))\n                 }"}, {"sha": "732c85bd0147a18ab56342c2bef097a5c10d8999", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26231e64b24e70d539e1bf05ff97e21b8e263cd3/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26231e64b24e70d539e1bf05ff97e21b8e263cd3/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=26231e64b24e70d539e1bf05ff97e21b8e263cd3", "patch": "@@ -11,7 +11,7 @@ use rustc::mir::interpret::{EvalResult, Scalar, Value};\n \n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     fn binop_with_overflow(\n-        &mut self,\n+        &self,\n         op: mir::BinOp,\n         left: ValTy<'tcx>,\n         right: ValTy<'tcx>,"}]}