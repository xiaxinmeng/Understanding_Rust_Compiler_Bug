{"sha": "59d0bff0e63efc7b48e55d6e512848bfc233353e", "node_id": "C_kwDOAAsO6NoAKDU5ZDBiZmYwZTYzZWZjN2I0OGU1NWQ2ZTUxMjg0OGJmYzIzMzM1M2U", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-28T17:18:53Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:12Z"}, "message": "Reduce follow-up errors that are not helpful", "tree": {"sha": "05fe82f12d83140b96f189077a67b71a56fb38d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05fe82f12d83140b96f189077a67b71a56fb38d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d0bff0e63efc7b48e55d6e512848bfc233353e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d0bff0e63efc7b48e55d6e512848bfc233353e", "html_url": "https://github.com/rust-lang/rust/commit/59d0bff0e63efc7b48e55d6e512848bfc233353e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d0bff0e63efc7b48e55d6e512848bfc233353e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6560d77a534167a8b86e1e968328cf1f717304dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6560d77a534167a8b86e1e968328cf1f717304dc", "html_url": "https://github.com/rust-lang/rust/commit/6560d77a534167a8b86e1e968328cf1f717304dc"}], "stats": {"total": 250, "additions": 40, "deletions": 210}, "files": [{"sha": "139cebe0e43d8b5c6f882acff1da82ca3e68db72", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) -> VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>> {\n         opaque_ty_decls\n             .into_iter()\n-            .filter_map(|(opaque_type_key, (concrete_type, decl_span, origin))| {\n+            .map(|(opaque_type_key, (concrete_type, decl_span, origin))| {\n                 let substs = opaque_type_key.substs;\n                 // FIXME: why are the spans in decl_span often DUMMY_SP?\n                 let span = decl_span.substitute_dummy(span);\n@@ -112,8 +112,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     span,\n                 );\n \n-                check_opaque_type_parameter_valid(infcx.tcx, opaque_type_key, origin, span)\n-                    .then_some((opaque_type_key, remapped_type))\n+                (\n+                    opaque_type_key,\n+                    if check_opaque_type_parameter_valid(infcx.tcx, opaque_type_key, origin, span) {\n+                        remapped_type\n+                    } else {\n+                        infcx.tcx.ty_error()\n+                    },\n+                )\n             })\n             .collect()\n     }"}, {"sha": "ea1bd2be4529d238096d67386b64e1f0872a6f81", "filename": "src/test/ui/generic-associated-types/issue-88595.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -18,7 +18,6 @@ struct C;\n impl<'a> A<'a> for C {\n     type B<'b> = impl Clone;\n     //~^ ERROR: lifetime bound not satisfied\n-    //~| ERROR: unconstrained opaque type\n \n     fn a(&'a self) -> Self::B<'a> {} //~ ERROR: non-defining opaque type use in defining scope\n }"}, {"sha": "e1d55fa228c2efe696621558719839bf9bdef054", "filename": "src/test/ui/generic-associated-types/issue-88595.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -16,7 +16,7 @@ LL |     type B<'b> = impl Clone;\n    |            ^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-88595.rs:23:35\n+  --> $DIR/issue-88595.rs:22:35\n    |\n LL |     fn a(&'a self) -> Self::B<'a> {}\n    |                                   ^^\n@@ -29,14 +29,6 @@ LL | impl<'a> A<'a> for C {\n LL |     type B<'b> = impl Clone;\n    |            ^^\n \n-error: unconstrained opaque type\n-  --> $DIR/issue-88595.rs:19:18\n-   |\n-LL |     type B<'b> = impl Clone;\n-   |                  ^^^^^^^^^^\n-   |\n-   = note: `B` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0478`."}, {"sha": "4d2890b5de583c48bc63a8e6d727e4d3516f03f1", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -7,7 +7,6 @@ trait TraitWithAssoc {\n }\n \n type Foo<V> = impl Trait<V>;\n-//~^ ERROR unconstrained opaque type\n \n trait Trait<U> {}\n "}, {"sha": "c405b1f6af2057428a78bf0dc88993d954d99ad7", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -1,5 +1,5 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/bound_reduction2.rs:17:5\n+  --> $DIR/bound_reduction2.rs:16:5\n    |\n LL |     ()\n    |     ^^\n@@ -10,13 +10,5 @@ note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n LL | type Foo<V> = impl Trait<V>;\n    |          ^\n \n-error: unconstrained opaque type\n-  --> $DIR/bound_reduction2.rs:9:15\n-   |\n-LL | type Foo<V> = impl Trait<V>;\n-   |               ^^^^^^^^^^^^^\n-   |\n-   = note: `Foo` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "83d22161e4e75617fb3845576e8b6843d0eb966a", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -4,7 +4,6 @@\n #![feature(type_alias_impl_trait)]\n \n type X<'a> = impl Into<&'static str> + From<&'a str>;\n-//~^ ERROR unconstrained opaque type\n \n fn f<'a: 'static>(t: &'a str) -> X<'a> {\n     //~^ WARNING unnecessary lifetime parameter"}, {"sha": "d87ef2ec79c1a26bd14f122938098e1605769ab1", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -1,27 +1,19 @@\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/bounds-are-checked.rs:9:6\n+  --> $DIR/bounds-are-checked.rs:8:6\n    |\n LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n    |      ^^^^^^^^^^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/bounds-are-checked.rs:11:5\n+  --> $DIR/bounds-are-checked.rs:10:5\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |        -- cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n ...\n LL |     t\n    |     ^\n \n-error: unconstrained opaque type\n-  --> $DIR/bounds-are-checked.rs:6:14\n-   |\n-LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `X` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "c9b9e128f88e2af5930ded809662381f75202870", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -3,7 +3,7 @@\n fn main() {}\n \n type Two<'a, 'b> = impl std::fmt::Debug;\n-//~^ ERROR unconstrained opaque type\n+\n \n fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n     t"}, {"sha": "222aaea78d9829a60638027746bcfeab425718f3", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -10,13 +10,5 @@ note: lifetime used multiple times\n LL | type Two<'a, 'b> = impl std::fmt::Debug;\n    |          ^^  ^^\n \n-error: unconstrained opaque type\n-  --> $DIR/generic_duplicate_lifetime_param.rs:5:20\n-   |\n-LL | type Two<'a, 'b> = impl std::fmt::Debug;\n-   |                    ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `Two` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "093c1c231861f1893fb4c0e68d35a21546575ddc", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -6,11 +6,11 @@ fn main() {}\n \n // test that unused generic parameters are ok\n type TwoTys<T, U> = impl Debug;\n-//~^ ERROR unconstrained opaque type\n+\n type TwoLifetimes<'a, 'b> = impl Debug;\n-//~^ ERROR unconstrained opaque type\n+\n type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n-//~^ ERROR unconstrained opaque type\n+\n \n fn one_ty<T: Debug>(t: T) -> TwoTys<T, T> {\n     t"}, {"sha": "922e41e0f688344b8a0ad57c80fa7926f758f699", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.stderr", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -10,14 +10,6 @@ note: type used multiple times\n LL | type TwoTys<T, U> = impl Debug;\n    |             ^  ^\n \n-error: unconstrained opaque type\n-  --> $DIR/generic_duplicate_param_use.rs:8:21\n-   |\n-LL | type TwoTys<T, U> = impl Debug;\n-   |                     ^^^^^^^^^^\n-   |\n-   = note: `TwoTys` must be used in combination with a concrete type within the same module\n-\n error: non-defining opaque type use in defining scope\n   --> $DIR/generic_duplicate_param_use.rs:21:5\n    |\n@@ -30,14 +22,6 @@ note: lifetime used multiple times\n LL | type TwoLifetimes<'a, 'b> = impl Debug;\n    |                   ^^  ^^\n \n-error: unconstrained opaque type\n-  --> $DIR/generic_duplicate_param_use.rs:10:29\n-   |\n-LL | type TwoLifetimes<'a, 'b> = impl Debug;\n-   |                             ^^^^^^^^^^\n-   |\n-   = note: `TwoLifetimes` must be used in combination with a concrete type within the same module\n-\n error: non-defining opaque type use in defining scope\n   --> $DIR/generic_duplicate_param_use.rs:26:5\n    |\n@@ -50,13 +34,5 @@ note: constant used multiple times\n LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n    |                      ^               ^\n \n-error: unconstrained opaque type\n-  --> $DIR/generic_duplicate_param_use.rs:12:50\n-   |\n-LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n-   |                                                  ^^^^^^^^^^\n-   |\n-   = note: `TwoConsts` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "81bf9770d02a8b3cf7367f6f3407a3febcb9d470", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -8,11 +8,6 @@ fn main() {}\n type Two<T, U> = impl Debug;\n //~^ ERROR `T` doesn't implement `Debug`\n \n-fn one<T: Debug>(t: T) -> Two<T, T> {\n-    t\n-    //~^ ERROR non-defining opaque type use in defining scope\n-}\n-\n fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n     t\n }"}, {"sha": "84aa260b099b65c9f63bea169118d3c4dfe0ef6d", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -1,15 +1,3 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use2.rs:12:5\n-   |\n-LL |     t\n-   |     ^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use2.rs:8:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n error[E0277]: `T` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use2.rs:8:18\n    |\n@@ -21,6 +9,6 @@ help: consider restricting type parameter `T`\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           +++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "c95692182c2780a0dc3faba27906c5cd79e52b37", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -8,11 +8,6 @@ fn main() {}\n type Two<T, U> = impl Debug;\n //~^ ERROR `T` doesn't implement `Debug`\n \n-fn one<T: Debug>(t: T) -> Two<T, T> {\n-    t\n-    //~^ ERROR non-defining opaque type use in defining scope\n-}\n-\n fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n     t\n }"}, {"sha": "e5a70fa8ce56e38e4b06000d7839e876af427308", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -1,23 +1,11 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use3.rs:12:5\n-   |\n-LL |     t\n-   |     ^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use3.rs:8:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use3.rs:20:1\n+  --> $DIR/generic_duplicate_param_use3.rs:15:1\n    |\n LL | fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `T`, got `U`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use3.rs:16:1\n+  --> $DIR/generic_duplicate_param_use3.rs:11:1\n    |\n LL | fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,6 +21,6 @@ help: consider restricting type parameter `T`\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           +++++++++++++++++\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "aee2550e9078a8ed23e7c27bc20046b1e817bd70", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -8,11 +8,6 @@ fn main() {}\n type Two<T, U> = impl Debug;\n //~^ ERROR `U` doesn't implement `Debug`\n \n-fn one<T: Debug>(t: T) -> Two<T, T> {\n-    t\n-    //~^ ERROR non-defining opaque type use in defining scope\n-}\n-\n fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n     u\n }"}, {"sha": "0491d61030e3442f75741deeb9f0c8588c8959ce", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -1,15 +1,3 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use4.rs:12:5\n-   |\n-LL |     t\n-   |     ^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use4.rs:8:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n error[E0277]: `U` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use4.rs:8:18\n    |\n@@ -21,6 +9,6 @@ help: consider restricting type parameter `U`\n LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n    |              +++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "f39741a6a625cc2d693309227e45982ad3515156", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -5,11 +5,11 @@ use std::fmt::Debug;\n fn main() {}\n \n type OneTy<T> = impl Debug;\n-//~^ ERROR unconstrained opaque type\n+\n type OneLifetime<'a> = impl Debug;\n-//~^ ERROR unconstrained opaque type\n+\n type OneConst<const X: usize> = impl Debug;\n-//~^ ERROR unconstrained opaque type\n+\n \n // Not defining uses, because they doesn't define *all* possible generics.\n "}, {"sha": "36694900c17b4af5615f2b501cd68e15af2c4ce2", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -10,14 +10,6 @@ note: used non-generic type `u32` for generic parameter\n LL | type OneTy<T> = impl Debug;\n    |            ^\n \n-error: unconstrained opaque type\n-  --> $DIR/generic_nondefining_use.rs:7:17\n-   |\n-LL | type OneTy<T> = impl Debug;\n-   |                 ^^^^^^^^^^\n-   |\n-   = note: `OneTy` must be used in combination with a concrete type within the same module\n-\n error: non-defining opaque type use in defining scope\n   --> $DIR/generic_nondefining_use.rs:22:5\n    |\n@@ -27,14 +19,6 @@ LL | type OneLifetime<'a> = impl Debug;\n LL |     6u32\n    |     ^^^^\n \n-error: unconstrained opaque type\n-  --> $DIR/generic_nondefining_use.rs:9:24\n-   |\n-LL | type OneLifetime<'a> = impl Debug;\n-   |                        ^^^^^^^^^^\n-   |\n-   = note: `OneLifetime` must be used in combination with a concrete type within the same module\n-\n error: non-defining opaque type use in defining scope\n   --> $DIR/generic_nondefining_use.rs:27:5\n    |\n@@ -47,13 +31,5 @@ note: used non-generic constant `123_usize` for generic parameter\n LL | type OneConst<const X: usize> = impl Debug;\n    |                     ^\n \n-error: unconstrained opaque type\n-  --> $DIR/generic_nondefining_use.rs:11:33\n-   |\n-LL | type OneConst<const X: usize> = impl Debug;\n-   |                                 ^^^^^^^^^^\n-   |\n-   = note: `OneConst` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "4fc7679311a2e55b031dd0cf0c460c979476212b", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -6,7 +6,6 @@ trait IterBits {\n }\n \n type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n-//~^ ERROR unconstrained opaque type\n \n impl<T: Copy, E> IterBits for T\n where"}, {"sha": "bbc93657be32f27501c851460adbfb0554ee0826", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -1,5 +1,5 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-60564.rs:21:9\n+  --> $DIR/issue-60564.rs:20:9\n    |\n LL |         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -10,13 +10,5 @@ note: used non-generic type `u8` for generic parameter\n LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n    |                         ^\n \n-error: unconstrained opaque type\n-  --> $DIR/issue-60564.rs:8:30\n-   |\n-LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `IterBitsIter` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "5223fb1c702d6753c92e6f6ac2e9938732faf792", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -5,7 +5,7 @@\n #![feature(type_alias_impl_trait)]\n trait Trait<T> {}\n type Alias<'a, U> = impl Trait<U>;\n-//~^ ERROR unconstrained opaque type\n+\n fn f<'a>() -> Alias<'a, ()> {}\n //~^ ERROR non-defining opaque type use in defining scope\n "}, {"sha": "7fb9a0c410e83c8c976a78979f913279f462b84e", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use-2.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use-2.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -10,13 +10,5 @@ note: used non-generic type `()` for generic parameter\n LL | type Alias<'a, U> = impl Trait<U>;\n    |                ^\n \n-error: unconstrained opaque type\n-  --> $DIR/issue-68368-non-defining-use-2.rs:7:21\n-   |\n-LL | type Alias<'a, U> = impl Trait<U>;\n-   |                     ^^^^^^^^^^^^^\n-   |\n-   = note: `Alias` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "b50462bf237bb9509f9d090097ef9675af48b8b8", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -5,7 +5,7 @@\n #![feature(type_alias_impl_trait)]\n trait Trait<T> {}\n type Alias<'a, U> = impl Trait<U>;\n-//~^ ERROR unconstrained opaque type\n+\n fn f<'a>() -> Alias<'a, ()> {}\n //~^ ERROR non-defining opaque type use in defining scope\n "}, {"sha": "8059621b61a096bc84ed17714d7130d44e864d72", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -10,13 +10,5 @@ note: used non-generic type `()` for generic parameter\n LL | type Alias<'a, U> = impl Trait<U>;\n    |                ^\n \n-error: unconstrained opaque type\n-  --> $DIR/issue-68368-non-defining-use.rs:7:21\n-   |\n-LL | type Alias<'a, U> = impl Trait<U>;\n-   |                     ^^^^^^^^^^^^^\n-   |\n-   = note: `Alias` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "5b332b8cb6bd8ce63a3142350d1d5b99d58a226b", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -7,11 +7,6 @@ fn main() {}\n type Two<T, U> = impl Debug;\n //~^ ERROR `T` doesn't implement `Debug`\n \n-fn two<T: Debug>(t: T) -> Two<T, u32> {\n-    (t, 4i8)\n-    //~^ ERROR non-defining opaque type use in defining scope\n-}\n-\n fn three<T: Debug, U>(t: T) -> Two<T, U> {\n     (t, 5i8)\n }"}, {"sha": "f946dc48a4bf98e3b5a2a7ec6b98655e62c9d5ee", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59d0bff0e63efc7b48e55d6e512848bfc233353e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr?ref=59d0bff0e63efc7b48e55d6e512848bfc233353e", "patch": "@@ -1,23 +1,11 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/not_a_defining_use.rs:11:5\n-   |\n-LL |     (t, 4i8)\n-   |     ^^^^^^^^\n-   |\n-note: used non-generic type `u32` for generic parameter\n-  --> $DIR/not_a_defining_use.rs:7:13\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |             ^\n-\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/not_a_defining_use.rs:29:1\n+  --> $DIR/not_a_defining_use.rs:24:1\n    |\n LL | fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, i8)`, got `(T, <U as Bar>::Blub)`\n    |\n note: previous use here\n-  --> $DIR/not_a_defining_use.rs:15:1\n+  --> $DIR/not_a_defining_use.rs:10:1\n    |\n LL | fn three<T: Debug, U>(t: T) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -34,6 +22,6 @@ help: consider restricting type parameter `T`\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           +++++++++++++++++\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}