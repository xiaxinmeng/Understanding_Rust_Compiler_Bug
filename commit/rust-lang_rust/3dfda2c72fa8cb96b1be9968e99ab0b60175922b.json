{"sha": "3dfda2c72fa8cb96b1be9968e99ab0b60175922b", "node_id": "C_kwDOAAsO6NoAKDNkZmRhMmM3MmZhOGNiOTZiMWJlOTk2OGU5OWFiMGI2MDE3NTkyMmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-09T21:40:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-09T21:40:04Z"}, "message": "Rollup merge of #109985 - blyxyas:is_test_crate, r=compiler-errors\n\nAdd little `is_test_crate` function\n\nOk, this is quite a story.\nI'm mainly a Clippy contributor, so I was fixing [this Clippy issue](https://github.com/rust-lang/rust-clippy/pull/10584) about a lint having to ignore test modules but that wasn't ignoring test files (integration test, `test/` dirs and such).\n\nAs test **files** don't tend to have an inner `#[cfg(test)]` module inside them, I tried everything, looking for filenames, looking for item's parents in the HIR Map, doing black magic...\n\nI even asked [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/.E2.9C.94.20Checking.20if.20file.20is.20integration.20test), and jyn answered something about `--cfg test`. Aha! That's something that I might be looking for, so I started looking at `rustc_driver_impl` flag parsing and configuration and all that.\n\nThen, I stumbled on [this function right here](https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/compiler/rustc_driver_impl/src/lib.rs#L174-L181), and noticed the argument `config: Config`. That's a hint.\n\nSo [Config](https://doc.rust-lang.org/beta/nightly-rustc/rustc_interface/interface/struct.Config.html) has the field `opts: Options`, and [`Options`](https://doc.rust-lang.org/beta/nightly-rustc/rustc_session/options/struct.Options.html) has the field `test`.\n\nThis journey has been ~7 or 8 hours in 3 days, it's a very hard thing to find, so this PR adds a mini-function to check if the current crate is a testing one. So that no one has to travel through the same as me, and can just search for `is_test_crate` in the documentation.", "tree": {"sha": "fe8604beae0573c9acad435732d2554f7f839047", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe8604beae0573c9acad435732d2554f7f839047"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dfda2c72fa8cb96b1be9968e99ab0b60175922b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkMzC0CRBK7hj4Ov3rIwAAQ80IAHxh2uxB07/P1tI+ZcBSnW0/\nsyXcObxz/7dNd9JJL8ZleXxINF+g2PIDeOgebWpwBiwPx226/g2Qe+ia824c+3kB\n8EykIp7GKA0h5iah01EU+Q3P5DCoC35pUhX75hHWx3DOtN363Ge7lLZH8hMUfxoH\n+jW2nvlzqc0eGwzjIkXEXJo8B+dUHyBKnhn/Tvk7Y0dp5r5g9e+TEzo/k5rg4QFJ\n9q88DE+Izk7DKRzQUAVnPyr1BRHEAv/5RAxmI8xsNfd6N4XhhU3+dgBeX9ELL6UY\nDIOOPr1OGdIvvQCb01zVJuuMW9FPxNMH/0oGVpTGw1uizyUVKCk5qlPz8moEJIU=\n=breb\n-----END PGP SIGNATURE-----\n", "payload": "tree fe8604beae0573c9acad435732d2554f7f839047\nparent 4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da\nparent 2c976765b8e426506285b334e0a1506c78b135e2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681076404 +0200\ncommitter GitHub <noreply@github.com> 1681076404 +0200\n\nRollup merge of #109985 - blyxyas:is_test_crate, r=compiler-errors\n\nAdd little `is_test_crate` function\n\nOk, this is quite a story.\nI'm mainly a Clippy contributor, so I was fixing [this Clippy issue](https://github.com/rust-lang/rust-clippy/pull/10584) about a lint having to ignore test modules but that wasn't ignoring test files (integration test, `test/` dirs and such).\n\nAs test **files** don't tend to have an inner `#[cfg(test)]` module inside them, I tried everything, looking for filenames, looking for item's parents in the HIR Map, doing black magic...\n\nI even asked [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/.E2.9C.94.20Checking.20if.20file.20is.20integration.20test), and jyn answered something about `--cfg test`. Aha! That's something that I might be looking for, so I started looking at `rustc_driver_impl` flag parsing and configuration and all that.\n\nThen, I stumbled on [this function right here](https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/compiler/rustc_driver_impl/src/lib.rs#L174-L181), and noticed the argument `config: Config`. That's a hint.\n\nSo [Config](https://doc.rust-lang.org/beta/nightly-rustc/rustc_interface/interface/struct.Config.html) has the field `opts: Options`, and [`Options`](https://doc.rust-lang.org/beta/nightly-rustc/rustc_session/options/struct.Options.html) has the field `test`.\n\nThis journey has been ~7 or 8 hours in 3 days, it's a very hard thing to find, so this PR adds a mini-function to check if the current crate is a testing one. So that no one has to travel through the same as me, and can just search for `is_test_crate` in the documentation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfda2c72fa8cb96b1be9968e99ab0b60175922b", "html_url": "https://github.com/rust-lang/rust/commit/3dfda2c72fa8cb96b1be9968e99ab0b60175922b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da", "html_url": "https://github.com/rust-lang/rust/commit/4e165c1c9923e19fa91ddcdb09fbc9d07f7c29da"}, {"sha": "2c976765b8e426506285b334e0a1506c78b135e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c976765b8e426506285b334e0a1506c78b135e2", "html_url": "https://github.com/rust-lang/rust/commit/2c976765b8e426506285b334e0a1506c78b135e2"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "80f497333a632933a764385bfc771ec573c4f415", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=3dfda2c72fa8cb96b1be9968e99ab0b60175922b", "patch": "@@ -53,7 +53,7 @@ pub fn inject(krate: &mut ast::Crate, sess: &Session, resolver: &mut dyn Resolve\n     // even in non-test builds\n     let test_runner = get_test_runner(span_diagnostic, &krate);\n \n-    if sess.opts.test {\n+    if sess.is_test_crate() {\n         let panic_strategy = match (panic_strategy, sess.opts.unstable_opts.panic_abort_tests) {\n             (PanicStrategy::Abort, true) => PanicStrategy::Abort,\n             (PanicStrategy::Abort, false) => {"}, {"sha": "7a5fa5a370cb9af889e177adaf1bf8c92df764ec", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=3dfda2c72fa8cb96b1be9968e99ab0b60175922b", "patch": "@@ -2301,7 +2301,7 @@ fn add_native_libs_from_crate(\n                         || (whole_archive == None\n                             && bundle\n                             && cnum == LOCAL_CRATE\n-                            && sess.opts.test);\n+                            && sess.is_test_crate());\n \n                     if bundle && cnum != LOCAL_CRATE {\n                         if let Some(filename) = lib.filename {"}, {"sha": "0e4e20c7cd1d4de48821d8d2369de0c3dc87dcb1", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=3dfda2c72fa8cb96b1be9968e99ab0b60175922b", "patch": "@@ -230,7 +230,7 @@ fn configure_and_expand(\n             features: Some(features),\n             recursion_limit,\n             trace_mac: sess.opts.unstable_opts.trace_macros,\n-            should_test: sess.opts.test,\n+            should_test: sess.is_test_crate(),\n             span_debug: sess.opts.unstable_opts.span_debug,\n             proc_macro_backtrace: sess.opts.unstable_opts.proc_macro_backtrace,\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n@@ -292,7 +292,7 @@ fn configure_and_expand(\n     }\n \n     sess.time(\"maybe_create_a_macro_crate\", || {\n-        let is_test_crate = sess.opts.test;\n+        let is_test_crate = sess.is_test_crate();\n         rustc_builtin_macros::proc_macro_harness::inject(\n             &mut krate,\n             sess,"}, {"sha": "4a35c6794663e09e8d1b927fdfb39df29bcd4e6b", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=3dfda2c72fa8cb96b1be9968e99ab0b60175922b", "patch": "@@ -530,7 +530,7 @@ struct MissingStabilityAnnotations<'tcx> {\n impl<'tcx> MissingStabilityAnnotations<'tcx> {\n     fn check_missing_stability(&self, def_id: LocalDefId, span: Span) {\n         let stab = self.tcx.stability().local_stability(def_id);\n-        if !self.tcx.sess.opts.test\n+        if !self.tcx.sess.is_test_crate()\n             && stab.is_none()\n             && self.effective_visibilities.is_reachable(def_id)\n         {"}, {"sha": "ae3fd0ede6cffba21b839fc13b7db32adc6812b6", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=3dfda2c72fa8cb96b1be9968e99ab0b60175922b", "patch": "@@ -393,7 +393,7 @@ impl Resolver<'_, '_> {\n             // If we are in the `--test` mode, suppress a help that adds the `#[cfg(test)]`\n             // attribute; however, if not, suggest adding the attribute. There is no way to\n             // retrieve attributes here because we do not have a `TyCtxt` yet.\n-            let test_module_span = if tcx.sess.opts.test {\n+            let test_module_span = if tcx.sess.is_test_crate() {\n                 None\n             } else {\n                 let parent_module = visitor.r.get_nearest_non_block_module("}, {"sha": "613abaa8e3cd168d86acf8cec0e82b7d9ede20b6", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=3dfda2c72fa8cb96b1be9968e99ab0b60175922b", "patch": "@@ -1258,7 +1258,7 @@ pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateCo\n     // some default and generated configuration items.\n     let default_cfg = default_configuration(sess);\n     // If the user wants a test runner, then add the test cfg.\n-    if sess.opts.test {\n+    if sess.is_test_crate() {\n         user_cfg.insert((sym::test, None));\n     }\n     user_cfg.extend(default_cfg.iter().cloned());"}, {"sha": "340bb158e1791e593e97b7185cb6de22fbc913e2", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfda2c72fa8cb96b1be9968e99ab0b60175922b/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=3dfda2c72fa8cb96b1be9968e99ab0b60175922b", "patch": "@@ -294,6 +294,11 @@ impl Session {\n         self.crate_types.get().unwrap().as_slice()\n     }\n \n+    /// Returns true if the crate is a testing one.\n+    pub fn is_test_crate(&self) -> bool {\n+        self.opts.test\n+    }\n+\n     pub fn needs_crate_hash(&self) -> bool {\n         // Why is the crate hash needed for these configurations?\n         // - debug_assertions: for the \"fingerprint the result\" check in"}]}