{"sha": "48fc7d9351662fcd2c41cc64815b6d568698f76d", "node_id": "C_kwDOAAsO6NoAKDQ4ZmM3ZDkzNTE2NjJmY2QyYzQxY2M2NDgxNWI2ZDU2ODY5OGY3NmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-02T02:59:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-02T02:59:44Z"}, "message": "Auto merge of #91003 - psumbera:sparc64-abi, r=nagisa\n\nfix sparc64 ABI for aggregates with floating point members\n\nFixes #86163", "tree": {"sha": "263313c73df8bb12a9e2c403352d1738ca9d35fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/263313c73df8bb12a9e2c403352d1738ca9d35fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48fc7d9351662fcd2c41cc64815b6d568698f76d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48fc7d9351662fcd2c41cc64815b6d568698f76d", "html_url": "https://github.com/rust-lang/rust/commit/48fc7d9351662fcd2c41cc64815b6d568698f76d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48fc7d9351662fcd2c41cc64815b6d568698f76d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d61135280dbc452d6aad6e5b41796e7fd1bd625", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d61135280dbc452d6aad6e5b41796e7fd1bd625", "html_url": "https://github.com/rust-lang/rust/commit/0d61135280dbc452d6aad6e5b41796e7fd1bd625"}, {"sha": "dcd48250d762632a581b032c256d391c0c8b133a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd48250d762632a581b032c256d391c0c8b133a", "html_url": "https://github.com/rust-lang/rust/commit/dcd48250d762632a581b032c256d391c0c8b133a"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "a8b1e70e2bb801e432b5940d126bd4cad33eca63", "filename": "src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48fc7d9351662fcd2c41cc64815b6d568698f76d/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48fc7d9351662fcd2c41cc64815b6d568698f76d/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=48fc7d9351662fcd2c41cc64815b6d568698f76d", "patch": "@@ -48,8 +48,8 @@ impl GccType for CastTarget {\n         let mut args: Vec<_> = self\n             .prefix\n             .iter()\n-            .flat_map(|option_kind| {\n-                option_kind.map(|kind| Reg { kind, size: self.prefix_chunk_size }.gcc_type(cx))\n+            .flat_map(|option_reg| {\n+                option_reg.map(|reg| reg.gcc_type(cx))\n             })\n             .chain((0..rest_count).map(|_| rest_gcc_unit))\n             .collect();"}]}