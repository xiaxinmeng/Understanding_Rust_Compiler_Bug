{"sha": "dcf8e895038a7677711b8168ee12e1d47f6018bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZjhlODk1MDM4YTc2Nzc3MTFiODE2OGVlMTJlMWQ0N2Y2MDE4YmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-02T16:42:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-02T17:15:51Z"}, "message": "fix generated AST", "tree": {"sha": "243fb4eed6602a47fa8594bbf9879b7be31aa721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/243fb4eed6602a47fa8594bbf9879b7be31aa721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcf8e895038a7677711b8168ee12e1d47f6018bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf8e895038a7677711b8168ee12e1d47f6018bc", "html_url": "https://github.com/rust-lang/rust/commit/dcf8e895038a7677711b8168ee12e1d47f6018bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcf8e895038a7677711b8168ee12e1d47f6018bc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "470fc4765cd3ccc764d3265034d18766374371aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/470fc4765cd3ccc764d3265034d18766374371aa", "html_url": "https://github.com/rust-lang/rust/commit/470fc4765cd3ccc764d3265034d18766374371aa"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "fd85a323151ecf24d12fa00b390c75a1c9540f3f", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcf8e895038a7677711b8168ee12e1d47f6018bc/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf8e895038a7677711b8168ee12e1d47f6018bc/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=dcf8e895038a7677711b8168ee12e1d47f6018bc", "patch": "@@ -1003,7 +1003,7 @@ impl FnDef {\n     pub fn param_list(&self) -> Option<ParamList> {\n         AstChildren::new(&self.syntax).next()\n     }\n-    pub fn body(&self) -> Option<Block> {\n+    pub fn body(&self) -> Option<BlockExpr> {\n         AstChildren::new(&self.syntax).next()\n     }\n     pub fn ret_type(&self) -> Option<RetType> {"}, {"sha": "37166182f9205d4a40d284fd8379012f2c15e029", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcf8e895038a7677711b8168ee12e1d47f6018bc/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/dcf8e895038a7677711b8168ee12e1d47f6018bc/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=dcf8e895038a7677711b8168ee12e1d47f6018bc", "patch": "@@ -275,7 +275,7 @@ Grammar(\n                 \"AttrsOwner\",\n                 \"DocCommentsOwner\"\n             ],\n-            options: [ \"ParamList\", [\"body\", \"Block\"], \"RetType\" ],\n+            options: [ \"ParamList\", [\"body\", \"BlockExpr\"], \"RetType\" ],\n         ),\n         \"RetType\": (options: [\"TypeRef\"]),\n         \"StructDef\": ("}, {"sha": "edb6076bbaafe2560b16e71657a32a02dfba94c4", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcf8e895038a7677711b8168ee12e1d47f6018bc/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf8e895038a7677711b8168ee12e1d47f6018bc/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=dcf8e895038a7677711b8168ee12e1d47f6018bc", "patch": "@@ -203,7 +203,8 @@ fn api_walkthrough() {\n     assert_eq!(name.text(), \"foo\");\n \n     // Let's get the `1 + 1` expression!\n-    let block: ast::Block = func.body().unwrap();\n+    let body: ast::BlockExpr = func.body().unwrap();\n+    let block = body.block().unwrap();\n     let expr: ast::Expr = block.expr().unwrap();\n \n     // Enums are used to group related ast nodes together, and can be used for"}]}