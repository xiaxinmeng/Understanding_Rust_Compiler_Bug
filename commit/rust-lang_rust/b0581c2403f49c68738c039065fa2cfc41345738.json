{"sha": "b0581c2403f49c68738c039065fa2cfc41345738", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNTgxYzI0MDNmNDljNjg3MzhjMDM5MDY1ZmEyY2ZjNDEzNDU3Mzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-24T15:59:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T15:59:47Z"}, "message": "Merge #2381\n\n2381: Add proc-macro crate type handling r=JasperDeSutter a=JasperDeSutter\n\nResolves the libproc_macro crate in crates that are the proc-macro type.\r\nThis doesn't seem the ideal implementation though, since the compiler still requires you to write `extern crate proc_macro;` (even in 2018 edition).\n\nCo-authored-by: JasperDeSutter <jasper.desutter@gmail.com>", "tree": {"sha": "2a977c54f7203f3f11784b7ee7ece20fd3b7ef9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a977c54f7203f3f11784b7ee7ece20fd3b7ef9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0581c2403f49c68738c039065fa2cfc41345738", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2qjzCRBK7hj4Ov3rIwAAdHIIADNnxb8J2bbyvqSunirsUAPN\nxsuVT0xY8YrphFu9tL17YaVZqRrDsyQYdRVcST2xq+odPTea6bBSOVY9kNO71rTr\nHbXza2/DfvpjjMwgXeFl4WbtDn2TGYXEKG+B6GlCycybkTkOc/vQgOuP1Wzhv7u4\n5xOHe7hxdPiKmbqV+vw137muA7ebvgewKVtILrpGFV80GKPkSJDc5CVcefXrpApu\nO0EglhLmmjen75Exx5YXFe8nyF9YyANqz91VUztQ092/CHdiuL0xXS0cWIiuI3JY\nMOcMooiptxFLK5Dagy3XykHImPVAVy7dYykuL36PgBkOPQi1U136qHgV6S383bg=\n=zNVq\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a977c54f7203f3f11784b7ee7ece20fd3b7ef9e\nparent 775bd98e5cf7918acf0dd72009ac14cf758ed0ca\nparent 6a8b4f873aa42f3522d3a92384019272b6ccefd2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574611187 +0000\ncommitter GitHub <noreply@github.com> 1574611187 +0000\n\nMerge #2381\n\n2381: Add proc-macro crate type handling r=JasperDeSutter a=JasperDeSutter\n\nResolves the libproc_macro crate in crates that are the proc-macro type.\r\nThis doesn't seem the ideal implementation though, since the compiler still requires you to write `extern crate proc_macro;` (even in 2018 edition).\n\nCo-authored-by: JasperDeSutter <jasper.desutter@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0581c2403f49c68738c039065fa2cfc41345738", "html_url": "https://github.com/rust-lang/rust/commit/b0581c2403f49c68738c039065fa2cfc41345738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0581c2403f49c68738c039065fa2cfc41345738/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "html_url": "https://github.com/rust-lang/rust/commit/775bd98e5cf7918acf0dd72009ac14cf758ed0ca"}, {"sha": "6a8b4f873aa42f3522d3a92384019272b6ccefd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a8b4f873aa42f3522d3a92384019272b6ccefd2", "html_url": "https://github.com/rust-lang/rust/commit/6a8b4f873aa42f3522d3a92384019272b6ccefd2"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "351997dcdbeb7b3db9bcc35d8466ad0deca816b0", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0581c2403f49c68738c039065fa2cfc41345738/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0581c2403f49c68738c039065fa2cfc41345738/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=b0581c2403f49c68738c039065fa2cfc41345738", "patch": "@@ -54,11 +54,13 @@ struct TargetData {\n     name: String,\n     root: PathBuf,\n     kind: TargetKind,\n+    is_proc_macro: bool,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum TargetKind {\n     Bin,\n+    /// Any kind of Cargo lib crate-type (dylib, rlib, proc-macro, ...).\n     Lib,\n     Example,\n     Test,\n@@ -74,6 +76,7 @@ impl TargetKind {\n                 \"test\" => TargetKind::Test,\n                 \"bench\" => TargetKind::Bench,\n                 \"example\" => TargetKind::Example,\n+                \"proc-macro\" => TargetKind::Lib,\n                 _ if kind.contains(\"lib\") => TargetKind::Lib,\n                 _ => continue,\n             };\n@@ -123,6 +126,9 @@ impl Target {\n     pub fn kind(self, ws: &CargoWorkspace) -> TargetKind {\n         ws.targets[self].kind\n     }\n+    pub fn is_proc_macro(self, ws: &CargoWorkspace) -> bool {\n+        ws.targets[self].is_proc_macro\n+    }\n }\n \n impl CargoWorkspace {\n@@ -155,11 +161,13 @@ impl CargoWorkspace {\n             let pkg_data = &mut packages[pkg];\n             pkg_by_id.insert(id, pkg);\n             for meta_tgt in meta_pkg.targets {\n+                let is_proc_macro = meta_tgt.kind.as_slice() == &[\"proc-macro\"];\n                 let tgt = targets.alloc(TargetData {\n                     pkg,\n                     name: meta_tgt.name,\n                     root: meta_tgt.src_path.clone(),\n                     kind: TargetKind::new(meta_tgt.kind.as_slice()),\n+                    is_proc_macro,\n                 });\n                 pkg_data.targets.push(tgt);\n             }"}, {"sha": "55ff4d6efc78e6a966a20c9b6cf5d228316a927c", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b0581c2403f49c68738c039065fa2cfc41345738/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0581c2403f49c68738c039065fa2cfc41345738/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=b0581c2403f49c68738c039065fa2cfc41345738", "patch": "@@ -211,6 +211,8 @@ impl ProjectWorkspace {\n                 let libcore = sysroot.core().and_then(|it| sysroot_crates.get(&it).copied());\n                 let liballoc = sysroot.alloc().and_then(|it| sysroot_crates.get(&it).copied());\n                 let libstd = sysroot.std().and_then(|it| sysroot_crates.get(&it).copied());\n+                let libproc_macro =\n+                    sysroot.proc_macro().and_then(|it| sysroot_crates.get(&it).copied());\n \n                 let mut pkg_to_lib_crate = FxHashMap::default();\n                 let mut pkg_crates = FxHashMap::default();\n@@ -237,6 +239,21 @@ impl ProjectWorkspace {\n                                 lib_tgt = Some(crate_id);\n                                 pkg_to_lib_crate.insert(pkg, crate_id);\n                             }\n+                            if tgt.is_proc_macro(&cargo) {\n+                                if let Some(proc_macro) = libproc_macro {\n+                                    if let Err(_) = crate_graph.add_dep(\n+                                        crate_id,\n+                                        \"proc_macro\".into(),\n+                                        proc_macro,\n+                                    ) {\n+                                        log::error!(\n+                                            \"cyclic dependency on proc_macro for {}\",\n+                                            pkg.name(&cargo)\n+                                        )\n+                                    }\n+                                }\n+                            }\n+\n                             pkg_crates.entry(pkg).or_insert_with(Vec::new).push(crate_id);\n                         }\n                     }"}, {"sha": "10ca391b6aa947ae22180f15fd1b30d9cae7d443", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0581c2403f49c68738c039065fa2cfc41345738/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0581c2403f49c68738c039065fa2cfc41345738/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=b0581c2403f49c68738c039065fa2cfc41345738", "patch": "@@ -39,6 +39,10 @@ impl Sysroot {\n         self.by_name(\"std\")\n     }\n \n+    pub fn proc_macro(&self) -> Option<SysrootCrate> {\n+        self.by_name(\"proc_macro\")\n+    }\n+\n     pub fn crates<'a>(&'a self) -> impl Iterator<Item = SysrootCrate> + ExactSizeIterator + 'a {\n         self.crates.iter().map(|(id, _data)| id)\n     }\n@@ -74,7 +78,7 @@ impl Sysroot {\n             }\n         }\n         if let Some(alloc) = sysroot.by_name(\"alloc\") {\n-            if let Some(core) = sysroot.by_name(\"core\") {\n+            if let Some(core) = sysroot.core() {\n                 sysroot.crates[alloc].deps.push(core);\n             }\n         }"}]}