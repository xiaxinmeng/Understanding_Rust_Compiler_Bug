{"sha": "9802c0ccd0cf408260961eb61581b61363c4b47b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MDJjMGNjZDBjZjQwODI2MDk2MWViNjE1ODFiNjEzNjNjNGI0N2I=", "commit": {"author": {"name": "Jon Gjengset", "email": "jongje@amazon.com", "date": "2020-12-17T01:38:21Z"}, "committer": {"name": "Jon Gjengset", "email": "jongje@amazon.com", "date": "2020-12-17T01:38:37Z"}, "message": "Default to host platform for cargo metadata\n\nThis modifies the logic for calling cargo metadata so that it will use\nthe host platform if no explicit target platform is given. This is\nneeded since cargo metadata defaults to outputting information for _all_\ntargets.\n\nFixes #6908.", "tree": {"sha": "81be12d7e34db589eba33024a25af854cf93aaa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81be12d7e34db589eba33024a25af854cf93aaa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9802c0ccd0cf408260961eb61581b61363c4b47b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9802c0ccd0cf408260961eb61581b61363c4b47b", "html_url": "https://github.com/rust-lang/rust/commit/9802c0ccd0cf408260961eb61581b61363c4b47b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9802c0ccd0cf408260961eb61581b61363c4b47b/comments", "author": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "554dd215c729c3598ceb014f61d9d295d554036a", "url": "https://api.github.com/repos/rust-lang/rust/commits/554dd215c729c3598ceb014f61d9d295d554036a", "html_url": "https://github.com/rust-lang/rust/commit/554dd215c729c3598ceb014f61d9d295d554036a"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "91fb645da9916a5292b65d568e0d4faafb50ee8a", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9802c0ccd0cf408260961eb61581b61363c4b47b/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9802c0ccd0cf408260961eb61581b61363c4b47b/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=9802c0ccd0cf408260961eb61581b61363c4b47b", "patch": "@@ -16,6 +16,7 @@ use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n \n use crate::cfg_flag::CfgFlag;\n+use crate::utf8_stdout;\n \n /// `CargoWorkspace` represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n@@ -166,8 +167,35 @@ impl CargoWorkspace {\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent.to_path_buf());\n         }\n-        if let Some(target) = config.target.as_ref() {\n-            meta.other_options(vec![String::from(\"--filter-platform\"), target.clone()]);\n+        let target = if let Some(target) = config.target.as_ref() {\n+            Some(target.clone())\n+        } else {\n+            // cargo metadata defaults to giving information for _all_ targets.\n+            // In the absence of a preference from the user, we use the host platform.\n+            let mut rustc = Command::new(toolchain::rustc());\n+            rustc.current_dir(cargo_toml.parent().unwrap()).arg(\"-vV\");\n+            log::debug!(\"Discovering host platform by {:?}\", rustc);\n+            match utf8_stdout(rustc) {\n+                Ok(stdout) => {\n+                    let field = \"host: \";\n+                    let target =\n+                        stdout.lines().find(|l| l.starts_with(field)).map(|l| &l[field.len()..]);\n+                    if let Some(target) = target {\n+                        Some(target.to_string())\n+                    } else {\n+                        // If we fail to resolve the host platform, it's not the end of the world.\n+                        log::info!(\"rustc -vV did not report host platform, got:\\n{}\", stdout);\n+                        None\n+                    }\n+                }\n+                Err(e) => {\n+                    log::warn!(\"Failed to discover host platform: {}\", e);\n+                    None\n+                }\n+            }\n+        };\n+        if let Some(target) = target {\n+            meta.other_options(vec![String::from(\"--filter-platform\"), target]);\n         }\n         let mut meta = meta.exec().with_context(|| {\n             format!(\"Failed to run `cargo metadata --manifest-path {}`\", cargo_toml.display())"}]}