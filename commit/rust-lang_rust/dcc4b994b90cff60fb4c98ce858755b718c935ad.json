{"sha": "dcc4b994b90cff60fb4c98ce858755b718c935ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYzRiOTk0YjkwY2ZmNjBmYjRjOThjZTg1ODc1NWI3MThjOTM1YWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-29T00:00:53Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-30T08:32:43Z"}, "message": "Turn INCOMPLETE_FEATURES into a lint.", "tree": {"sha": "4bbf2703e806c2b55994569eed88e3ecb1f99fca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bbf2703e806c2b55994569eed88e3ecb1f99fca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcc4b994b90cff60fb4c98ce858755b718c935ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc4b994b90cff60fb4c98ce858755b718c935ad", "html_url": "https://github.com/rust-lang/rust/commit/dcc4b994b90cff60fb4c98ce858755b718c935ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcc4b994b90cff60fb4c98ce858755b718c935ad/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eeaaa722d6ac6d24de6e4d3faefb7c44e674b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eeaaa722d6ac6d24de6e4d3faefb7c44e674b37", "html_url": "https://github.com/rust-lang/rust/commit/4eeaaa722d6ac6d24de6e4d3faefb7c44e674b37"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "6ac68e86e4be9630d0580c2d675670989cd9d85a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dcc4b994b90cff60fb4c98ce858755b718c935ad/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc4b994b90cff60fb4c98ce858755b718c935ad/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=dcc4b994b90cff60fb4c98ce858755b718c935ad", "patch": "@@ -33,13 +33,12 @@ use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n use rustc::util::nodemap::FxHashSet;\n \n use syntax::tokenstream::{TokenTree, TokenStream};\n-use syntax::ast;\n+use syntax::ast::{self, Expr};\n use syntax::ptr::P;\n-use syntax::ast::Expr;\n use syntax::attr::{self, HasAttrs, AttributeTemplate};\n use syntax::source_map::Spanned;\n use syntax::edition::Edition;\n-use syntax::feature_gate::{AttributeGate, AttributeType};\n+use syntax::feature_gate::{self, AttributeGate, AttributeType};\n use syntax::feature_gate::{Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::{Symbol, kw, sym};\n@@ -1831,3 +1830,35 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n         }\n     }\n }\n+\n+declare_lint! {\n+    pub INCOMPLETE_FEATURES,\n+    Warn,\n+    \"incomplete features that may function improperly in some or all cases\"\n+}\n+\n+declare_lint_pass!(\n+    /// Check for used feature gates in `INCOMPLETE_FEATURES` in `feature_gate.rs`.\n+    IncompleteFeatures => [INCOMPLETE_FEATURES]\n+);\n+\n+impl EarlyLintPass for IncompleteFeatures {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &ast::Crate) {\n+        let features = cx.sess.features_untracked();\n+        features.declared_lang_features\n+            .iter().map(|(name, span, _)| (name, span))\n+            .chain(features.declared_lib_features.iter().map(|(name, span)| (name, span)))\n+            .filter(|(name, _)| feature_gate::INCOMPLETE_FEATURES.iter().any(|f| name == &f))\n+            .for_each(|(name, &span)| {\n+                cx.struct_span_lint(\n+                    INCOMPLETE_FEATURES,\n+                    span,\n+                    &format!(\n+                        \"the feature `{}` is incomplete and may cause the compiler to crash\",\n+                        name,\n+                    )\n+                )\n+                .emit();\n+            });\n+    }\n+}"}, {"sha": "78bc164ba1a0f0fcc16c3ff93647f22a41ba69bf", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcc4b994b90cff60fb4c98ce858755b718c935ad/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc4b994b90cff60fb4c98ce858755b718c935ad/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=dcc4b994b90cff60fb4c98ce858755b718c935ad", "patch": "@@ -97,6 +97,7 @@ macro_rules! early_lint_passes {\n             DeprecatedAttr: DeprecatedAttr::new(),\n             WhileTrue: WhileTrue,\n             NonAsciiIdents: NonAsciiIdents,\n+            IncompleteFeatures: IncompleteFeatures,\n         ]);\n     )\n }"}, {"sha": "2b43baefab744834e29d506ae21c33bcbb7837d7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dcc4b994b90cff60fb4c98ce858755b718c935ad/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcc4b994b90cff60fb4c98ce858755b718c935ad/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=dcc4b994b90cff60fb4c98ce858755b718c935ad", "patch": "@@ -569,10 +569,10 @@ declare_features! (\n     // -------------------------------------------------------------------------\n );\n \n-// Some features are known to be incomplete and using them is likely to have\n-// unanticipated results, such as compiler crashes. We warn the user about these\n-// to alert them.\n-const INCOMPLETE_FEATURES: &[Symbol] = &[\n+/// Some features are known to be incomplete and using them is likely to have\n+/// unanticipated results, such as compiler crashes. We warn the user about these\n+/// to alert them.\n+pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::impl_trait_in_bindings,\n     sym::generic_associated_types,\n     sym::const_generics,\n@@ -2338,15 +2338,6 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             }\n \n             let name = mi.name_or_empty();\n-            if INCOMPLETE_FEATURES.iter().any(|f| name == *f) {\n-                span_handler.struct_span_warn(\n-                    mi.span(),\n-                    &format!(\n-                        \"the feature `{}` is incomplete and may cause the compiler to crash\",\n-                        name\n-                    )\n-                ).emit();\n-            }\n \n             if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n                 if *edition <= crate_edition {"}]}