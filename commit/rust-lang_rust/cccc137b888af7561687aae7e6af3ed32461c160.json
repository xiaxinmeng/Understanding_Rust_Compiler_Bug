{"sha": "cccc137b888af7561687aae7e6af3ed32461c160", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjY2MxMzdiODg4YWY3NTYxNjg3YWFlN2U2YWYzZWQzMjQ2MWMxNjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-26T21:36:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-26T21:36:57Z"}, "message": "Auto merge of #25675 - bluss:rustdoc-assoc-types-index, r=alexcrichton\n\nrustdoc: Associated type fixes\r\n\r\nThe first commit fixes a bug with \"dud\" items in the search index from\r\nmisrepresented `type` items in trait impl blocks.\r\n\r\nFor a trait *implementation* there are typedefs which are the types for\r\nthat particular trait and implementor. Skip these in the search index.\r\n\r\nThere were lots of dud items in the search index due to this (search for\r\nItem, Iterator's associated type).\r\n\r\nAdd a boolean to clean::TypedefItem so that it tracks whether the it is\r\na type alias on its own, or if it's a `type` item in a trait impl.\r\n\r\nThe second commit fixes a bug that made signatures and where bounds\r\nusing associated types (if they were not on `Self`) incorrect.\r\n\r\nThe third commit fixes so that where clauses in type alias definititons\r\nare shown.\r\n\r\nFixes #22442\r\nFixes #24417\r\nFixes #25769", "tree": {"sha": "79f170a7e8f8c7fba46074d90c10396d867ec269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79f170a7e8f8c7fba46074d90c10396d867ec269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cccc137b888af7561687aae7e6af3ed32461c160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cccc137b888af7561687aae7e6af3ed32461c160", "html_url": "https://github.com/rust-lang/rust/commit/cccc137b888af7561687aae7e6af3ed32461c160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cccc137b888af7561687aae7e6af3ed32461c160/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1742a01f8d5717f1ab2f445c4d4656633b4c88b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1742a01f8d5717f1ab2f445c4d4656633b4c88b9", "html_url": "https://github.com/rust-lang/rust/commit/1742a01f8d5717f1ab2f445c4d4656633b4c88b9"}, {"sha": "06304ed52201ea0cae7a09f2546123c78a60a193", "url": "https://api.github.com/repos/rust-lang/rust/commits/06304ed52201ea0cae7a09f2546123c78a60a193", "html_url": "https://github.com/rust-lang/rust/commit/06304ed52201ea0cae7a09f2546123c78a60a193"}], "stats": {"total": 111, "additions": 83, "deletions": 28}, "files": [{"sha": "de978971bbe618c953a44adea88e7da409d80420", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cccc137b888af7561687aae7e6af3ed32461c160/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc137b888af7561687aae7e6af3ed32461c160/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=cccc137b888af7561687aae7e6af3ed32461c160", "patch": "@@ -217,7 +217,7 @@ fn build_type(cx: &DocContext, tcx: &ty::ctxt, did: ast::DefId) -> clean::ItemEn\n     clean::TypedefItem(clean::Typedef {\n         type_: t.ty.clean(cx),\n         generics: (&t.generics, &predicates, subst::TypeSpace).clean(cx),\n-    })\n+    }, false)\n }\n \n pub fn build_impls(cx: &DocContext, tcx: &ty::ctxt,\n@@ -370,7 +370,7 @@ pub fn build_impl(cx: &DocContext,\n                                subst::ParamSpace::TypeSpace).clean(cx);\n                 Some(clean::Item {\n                     name: Some(assoc_ty.name.clean(cx)),\n-                    inner: clean::TypedefItem(typedef),\n+                    inner: clean::TypedefItem(typedef, true),\n                     source: clean::Span::empty(),\n                     attrs: vec![],\n                     visibility: None,"}, {"sha": "e366caf92f773f2b6fcc2f5a069d2f1acf017788", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cccc137b888af7561687aae7e6af3ed32461c160/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc137b888af7561687aae7e6af3ed32461c160/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cccc137b888af7561687aae7e6af3ed32461c160", "patch": "@@ -343,7 +343,7 @@ pub enum ItemEnum {\n     EnumItem(Enum),\n     FunctionItem(Function),\n     ModuleItem(Module),\n-    TypedefItem(Typedef),\n+    TypedefItem(Typedef, bool /* is associated type */),\n     StaticItem(Static),\n     ConstantItem(Constant),\n     TraitItem(Trait),\n@@ -664,6 +664,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n                 path: path,\n                 typarams: None,\n                 did: did,\n+                is_generic: false,\n             },\n             lifetimes: vec![]\n         }, ast::TraitBoundModifier::None)\n@@ -706,7 +707,12 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n         }\n \n         TraitBound(PolyTrait {\n-            trait_: ResolvedPath { path: path, typarams: None, did: self.def_id, },\n+            trait_: ResolvedPath {\n+                path: path,\n+                typarams: None,\n+                did: self.def_id,\n+                is_generic: false,\n+            },\n             lifetimes: late_bounds\n         }, ast::TraitBoundModifier::None)\n     }\n@@ -1286,7 +1292,7 @@ impl Clean<Item> for ast::ImplItem {\n                     type_params: Vec::new(),\n                     where_predicates: Vec::new()\n                 },\n-            }),\n+            }, true),\n             ast::MacImplItem(_) => {\n                 MacroItem(Macro {\n                     source: self.span.to_src(cx),\n@@ -1401,11 +1407,13 @@ pub struct PolyTrait {\n /// it does not preserve mutability or boxes.\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum Type {\n-    /// structs/enums/traits (anything that'd be an ast::TyPath)\n+    /// structs/enums/traits (most that'd be an ast::TyPath)\n     ResolvedPath {\n         path: Path,\n         typarams: Option<Vec<TyParamBound>>,\n         did: ast::DefId,\n+        /// true if is a `T::Name` path for associated types\n+        is_generic: bool,\n     },\n     /// For parameterized types, so the consumer of the JSON don't go\n     /// looking for types which don't exist anywhere.\n@@ -1594,8 +1602,13 @@ impl Clean<Type> for ast::Ty {\n             TyObjectSum(ref lhs, ref bounds) => {\n                 let lhs_ty = lhs.clean(cx);\n                 match lhs_ty {\n-                    ResolvedPath { path, typarams: None, did } => {\n-                        ResolvedPath { path: path, typarams: Some(bounds.clean(cx)), did: did}\n+                    ResolvedPath { path, typarams: None, did, is_generic } => {\n+                        ResolvedPath {\n+                            path: path,\n+                            typarams: Some(bounds.clean(cx)),\n+                            did: did,\n+                            is_generic: is_generic,\n+                        }\n                     }\n                     _ => {\n                         lhs_ty // shouldn't happen\n@@ -1675,6 +1688,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     path: path,\n                     typarams: None,\n                     did: did,\n+                    is_generic: false,\n                 }\n             }\n             ty::ty_trait(box ty::TyTrait { ref principal, ref bounds }) => {\n@@ -1689,6 +1703,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     path: path,\n                     typarams: Some(typarams),\n                     did: did,\n+                    is_generic: false,\n                 }\n             }\n             ty::ty_tup(ref t) => Tuple(t.clean(cx)),\n@@ -2085,7 +2100,7 @@ impl Clean<Item> for doctree::Typedef {\n             inner: TypedefItem(Typedef {\n                 type_: self.ty.clean(cx),\n                 generics: self.gen.clean(cx),\n-            }),\n+            }, false),\n         }\n     }\n }\n@@ -2255,7 +2270,7 @@ fn build_deref_target_impls(cx: &DocContext,\n \n     for item in items {\n         let target = match item.inner {\n-            TypedefItem(ref t) => &t.type_,\n+            TypedefItem(ref t, true) => &t.type_,\n             _ => continue,\n         };\n         let primitive = match *target {\n@@ -2580,10 +2595,7 @@ fn resolve_type(cx: &DocContext,\n         None => panic!(\"unresolved id not in defmap\")\n     };\n \n-    match def {\n-        def::DefSelfTy(..) if path.segments.len() == 1 => {\n-            return Generic(token::get_name(special_idents::type_self.name).to_string());\n-        }\n+    let is_generic = match def {\n         def::DefPrimTy(p) => match p {\n             ast::TyStr => return Primitive(Str),\n             ast::TyBool => return Primitive(Bool),\n@@ -2601,13 +2613,14 @@ fn resolve_type(cx: &DocContext,\n             ast::TyFloat(ast::TyF32) => return Primitive(F32),\n             ast::TyFloat(ast::TyF64) => return Primitive(F64),\n         },\n-        def::DefTyParam(_, _, _, n) => {\n-            return Generic(token::get_name(n).to_string())\n+        def::DefSelfTy(..) if path.segments.len() == 1 => {\n+            return Generic(token::get_name(special_idents::type_self.name).to_string());\n         }\n-        _ => {}\n+        def::DefSelfTy(..) | def::DefTyParam(..) => true,\n+        _ => false,\n     };\n     let did = register_def(&*cx, def);\n-    ResolvedPath { path: path, typarams: None, did: did }\n+    ResolvedPath { path: path, typarams: None, did: did, is_generic: is_generic }\n }\n \n fn register_def(cx: &DocContext, def: def::Def) -> ast::DefId {\n@@ -2821,6 +2834,7 @@ fn lang_struct(cx: &DocContext, did: Option<ast::DefId>,\n                 }\n             }],\n         },\n+        is_generic: false,\n     }\n }\n "}, {"sha": "3929630267ac1469513dd543d23377e421dd4c0d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cccc137b888af7561687aae7e6af3ed32461c160/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc137b888af7561687aae7e6af3ed32461c160/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=cccc137b888af7561687aae7e6af3ed32461c160", "patch": "@@ -437,9 +437,9 @@ impl fmt::Display for clean::Type {\n             clean::Generic(ref name) => {\n                 f.write_str(name)\n             }\n-            clean::ResolvedPath{ did, ref typarams, ref path } => {\n-                // Paths like Self::Output should be rendered with all segments\n-                try!(resolved_path(f, did, path, path.segments[0].name == \"Self\"));\n+            clean::ResolvedPath{ did, ref typarams, ref path, is_generic } => {\n+                // Paths like T::Output and Self::Output should be rendered with all segments\n+                try!(resolved_path(f, did, path, is_generic));\n                 tybounds(f, typarams)\n             }\n             clean::Infer => write!(f, \"_\"),"}, {"sha": "c4f2c7207ac39520aa2aa72da7db49df88812572", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cccc137b888af7561687aae7e6af3ed32461c160/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc137b888af7561687aae7e6af3ed32461c160/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cccc137b888af7561687aae7e6af3ed32461c160", "patch": "@@ -865,7 +865,7 @@ impl DocFolder for Cache {\n             clean::StructItem(ref s)          => self.generics(&s.generics),\n             clean::EnumItem(ref e)            => self.generics(&e.generics),\n             clean::FunctionItem(ref f)        => self.generics(&f.generics),\n-            clean::TypedefItem(ref t)         => self.generics(&t.generics),\n+            clean::TypedefItem(ref t, _)      => self.generics(&t.generics),\n             clean::TraitItem(ref t)           => self.generics(&t.generics),\n             clean::ImplItem(ref i)            => self.generics(&i.generics),\n             clean::TyMethodItem(ref i)        => self.generics(&i.generics),\n@@ -931,6 +931,10 @@ impl DocFolder for Cache {\n                         ((Some(*last), path), true)\n                     }\n                 }\n+                clean::TypedefItem(_, true) => {\n+                    // skip associated types in impls\n+                    ((None, None), false)\n+                }\n                 _ => ((None, Some(&*self.stack)), false)\n             };\n             let hidden_field = match item.inner {\n@@ -1492,7 +1496,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::TraitItem(ref t) => item_trait(fmt, self.cx, self.item, t),\n             clean::StructItem(ref s) => item_struct(fmt, self.item, s),\n             clean::EnumItem(ref e) => item_enum(fmt, self.item, e),\n-            clean::TypedefItem(ref t) => item_typedef(fmt, self.item, t),\n+            clean::TypedefItem(ref t, _) => item_typedef(fmt, self.item, t),\n             clean::MacroItem(ref m) => item_macro(fmt, self.item, m),\n             clean::PrimitiveItem(ref p) => item_primitive(fmt, self.item, p),\n             clean::StaticItem(ref i) | clean::ForeignStaticItem(ref i) =>\n@@ -2304,10 +2308,10 @@ fn render_deref_methods(w: &mut fmt::Formatter, impl_: &Impl) -> fmt::Result {\n     let deref_type = impl_.impl_.trait_.as_ref().unwrap();\n     let target = impl_.impl_.items.iter().filter_map(|item| {\n         match item.inner {\n-            clean::TypedefItem(ref t) => Some(&t.type_),\n+            clean::TypedefItem(ref t, true) => Some(&t.type_),\n             _ => None,\n         }\n-    }).next().unwrap();\n+    }).next().expect(\"Expected associated type binding\");\n     let what = AssocItemRender::DerefFor { trait_: deref_type, type_: target };\n     match *target {\n         clean::ResolvedPath { did, .. } => render_assoc_items(w, did, what),\n@@ -2357,7 +2361,7 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n                     try!(write!(w, \"</code></h4>\\n\"));\n                 }\n             }\n-            clean::TypedefItem(ref tydef) => {\n+            clean::TypedefItem(ref tydef, _) => {\n                 let name = item.name.as_ref().unwrap();\n                 try!(write!(w, \"<h4 id='assoc_type.{}' class='{}'><code>\",\n                             *name,\n@@ -2447,10 +2451,11 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n \n fn item_typedef(w: &mut fmt::Formatter, it: &clean::Item,\n                 t: &clean::Typedef) -> fmt::Result {\n-    try!(write!(w, \"<pre class='rust typedef'>type {}{} = {};</pre>\",\n+    try!(write!(w, \"<pre class='rust typedef'>type {}{}{where_clause} = {type_};</pre>\",\n                   it.name.as_ref().unwrap(),\n                   t.generics,\n-                  t.type_));\n+                  where_clause = WhereClause(&t.generics),\n+                  type_ = t.type_));\n \n     document(w, it)\n }"}, {"sha": "d5047ade062dc164f9b7a296923b13aafe3a8b8e", "filename": "src/test/rustdoc/assoc-types.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cccc137b888af7561687aae7e6af3ed32461c160/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc137b888af7561687aae7e6af3ed32461c160/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-types.rs?ref=cccc137b888af7561687aae7e6af3ed32461c160", "patch": "@@ -18,3 +18,25 @@ pub trait Index<I: ?Sized> {\n     //      \"fn index<'a>(&'a self, index: I) -> &'a Self::Output\"\n     fn index<'a>(&'a self, index: I) -> &'a Self::Output;\n }\n+\n+// @has assoc_types/fn.use_output.html\n+// @has - '//*[@class=\"rust fn\"]' '-> &T::Output'\n+pub fn use_output<T: Index<usize>>(obj: &T, index: usize) -> &T::Output {\n+    obj.index(index)\n+}\n+\n+pub trait Feed {\n+    type Input;\n+}\n+\n+// @has assoc_types/fn.use_input.html\n+// @has - '//*[@class=\"rust fn\"]' 'T::Input'\n+pub fn use_input<T: Feed>(_feed: &T, _element: T::Input) { }\n+\n+// @has assoc_types/fn.cmp_input.html\n+// @has - '//*[@class=\"rust fn\"]' 'where T::Input: PartialEq<U::Input>'\n+pub fn cmp_input<T: Feed, U: Feed>(a: &T::Input, b: &U::Input) -> bool\n+    where T::Input: PartialEq<U::Input>\n+{\n+    a == b\n+}"}, {"sha": "70b77f6760d8b24299a4ebdb8afcd3a05e538e7c", "filename": "src/test/rustdoc/search-index.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cccc137b888af7561687aae7e6af3ed32461c160/src%2Ftest%2Frustdoc%2Fsearch-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc137b888af7561687aae7e6af3ed32461c160/src%2Ftest%2Frustdoc%2Fsearch-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsearch-index.rs?ref=cccc137b888af7561687aae7e6af3ed32461c160", "patch": "@@ -10,6 +10,8 @@\n \n #![crate_name = \"rustdoc_test\"]\n \n+use std::ops::Deref;\n+\n // @has search-index.js Foo\n pub use private::Foo;\n \n@@ -24,3 +26,11 @@ mod private {\n         fn trait_method(&self) {} // @!has - priv_method\n     }\n }\n+\n+pub struct Bar;\n+\n+impl Deref for Bar {\n+    // @!has search-index.js Target\n+    type Target = Bar;\n+    fn deref(&self) -> &Bar { self }\n+}"}, {"sha": "91ec69d9a3cbbdbeaaff4adcd705862997122097", "filename": "src/test/rustdoc/where.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cccc137b888af7561687aae7e6af3ed32461c160/src%2Ftest%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc137b888af7561687aae7e6af3ed32461c160/src%2Ftest%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere.rs?ref=cccc137b888af7561687aae7e6af3ed32461c160", "patch": "@@ -42,3 +42,7 @@ pub enum Foxtrot<F> { Foxtrot1(F) }\n // @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//code' \\\n //          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\"\n impl<F> MyTrait for Foxtrot<F> where F: MyTrait {}\n+\n+// @has foo/type.Golf.html '//pre[@class=\"rust typedef\"]' \\\n+//          \"type Golf<T> where T: Clone = (T, T)\"\n+pub type Golf<T> where T: Clone = (T, T);"}]}