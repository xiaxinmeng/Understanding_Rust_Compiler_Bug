{"sha": "b6360fbc4c6d3898d51dfcbe9b042fef515133d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MzYwZmJjNGM2ZDM4OThkNTFkZmNiZTliMDQyZmVmNTE1MTMzZDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-29T07:10:26Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-31T00:45:51Z"}, "message": "qualify_consts: extract check_short_circuiting_in_const_local.", "tree": {"sha": "a5b46de597c12f0d443ad3b053ebe48cef671a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5b46de597c12f0d443ad3b053ebe48cef671a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6360fbc4c6d3898d51dfcbe9b042fef515133d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6360fbc4c6d3898d51dfcbe9b042fef515133d1", "html_url": "https://github.com/rust-lang/rust/commit/b6360fbc4c6d3898d51dfcbe9b042fef515133d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6360fbc4c6d3898d51dfcbe9b042fef515133d1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f184b369d6332195ef61f0395cf32bd787e4368", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f184b369d6332195ef61f0395cf32bd787e4368", "html_url": "https://github.com/rust-lang/rust/commit/8f184b369d6332195ef61f0395cf32bd787e4368"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "0a9e2a5974300d620b7b78b3ef3e14fe386fe8c6", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b6360fbc4c6d3898d51dfcbe9b042fef515133d1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6360fbc4c6d3898d51dfcbe9b042fef515133d1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=b6360fbc4c6d3898d51dfcbe9b042fef515133d1", "patch": "@@ -1655,37 +1655,8 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n                 _ => None,\n             };\n \n-            if !body.control_flow_destroyed.is_empty() {\n-                let mut locals = body.vars_iter();\n-                if let Some(local) = locals.next() {\n-                    let span = body.local_decls[local].source_info.span;\n-                    let mut error = tcx.sess.struct_span_err(\n-                        span,\n-                        &format!(\n-                            \"new features like let bindings are not permitted in {}s \\\n-                            which also use short circuiting operators\",\n-                            mode,\n-                        ),\n-                    );\n-                    for (span, kind) in body.control_flow_destroyed.iter() {\n-                        error.span_note(\n-                            *span,\n-                            &format!(\"use of {} here does not actually short circuit due to \\\n-                            the const evaluator presently not being able to do control flow. \\\n-                            See https://github.com/rust-lang/rust/issues/49146 for more \\\n-                            information.\", kind),\n-                        );\n-                    }\n-                    for local in locals {\n-                        let span = body.local_decls[local].source_info.span;\n-                        error.span_note(\n-                            span,\n-                            \"more locals defined here\",\n-                        );\n-                    }\n-                    error.emit();\n-                }\n-            }\n+            check_short_circuiting_in_const_local(tcx, body, mode);\n+\n             let promoted_temps = match mode {\n                 // Already computed by `mir_const_qualif`.\n                 Mode::Const => const_promoted_temps.unwrap(),\n@@ -1762,6 +1733,39 @@ fn determine_mode(tcx: TyCtxt<'_>, hir_id: HirId, def_id: DefId) -> Mode {\n     }\n }\n \n+fn check_short_circuiting_in_const_local(tcx: TyCtxt<'_>, body: &mut Body<'tcx>, mode: Mode) {\n+    if body.control_flow_destroyed.is_empty() {\n+        return;\n+    }\n+\n+    let mut locals = body.vars_iter();\n+    if let Some(local) = locals.next() {\n+        let span = body.local_decls[local].source_info.span;\n+        let mut error = tcx.sess.struct_span_err(\n+            span,\n+            &format!(\n+                \"new features like let bindings are not permitted in {}s \\\n+                which also use short circuiting operators\",\n+                mode,\n+            ),\n+        );\n+        for (span, kind) in body.control_flow_destroyed.iter() {\n+            error.span_note(\n+                *span,\n+                &format!(\"use of {} here does not actually short circuit due to \\\n+                the const evaluator presently not being able to do control flow. \\\n+                See https://github.com/rust-lang/rust/issues/49146 for more \\\n+                information.\", kind),\n+            );\n+        }\n+        for local in locals {\n+            let span = body.local_decls[local].source_info.span;\n+            error.span_note(span, \"more locals defined here\");\n+        }\n+        error.emit();\n+    }\n+}\n+\n fn args_required_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<FxHashSet<usize>> {\n     let attrs = tcx.get_attrs(def_id);\n     let attr = attrs.iter().find(|a| a.check_name(sym::rustc_args_required_const))?;"}]}