{"sha": "36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2Y2M4MWFjNzFlNDI0NmJmNThhMzc1ODczNWNjNjhmN2FkYjVlMGY=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-07-02T21:48:35Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-07-02T21:48:35Z"}, "message": "Move AssistKind into AssistId", "tree": {"sha": "9d14ddf58d873049fa5efc79dbdb83ed165aec8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d14ddf58d873049fa5efc79dbdb83ed165aec8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "html_url": "https://github.com/rust-lang/rust/commit/36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d58e168246e1ca64f3ce3936e90077922b82d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d58e168246e1ca64f3ce3936e90077922b82d05", "html_url": "https://github.com/rust-lang/rust/commit/1d58e168246e1ca64f3ce3936e90077922b82d05"}], "stats": {"total": 230, "additions": 90, "deletions": 140}, "files": [{"sha": "3640bb4d26569d268910068874b8e473adbe75df", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -19,7 +19,7 @@ use ra_text_edit::TextEditBuilder;\n \n use crate::{\n     assist_config::{AssistConfig, SnippetCap},\n-    Assist, AssistId, AssistKind, GroupLabel, ResolvedAssist,\n+    Assist, AssistId, GroupLabel, ResolvedAssist,\n };\n \n /// `AssistContext` allows to apply an assist or check if it could be applied.\n@@ -135,24 +135,22 @@ impl Assists {\n     pub(crate) fn add(\n         &mut self,\n         id: AssistId,\n-        kind: AssistKind,\n         label: impl Into<String>,\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n-        let label = Assist::new(id, kind, label.into(), None, target);\n+        let label = Assist::new(id, label.into(), None, target);\n         self.add_impl(label, f)\n     }\n     pub(crate) fn add_group(\n         &mut self,\n         group: &GroupLabel,\n         id: AssistId,\n-        kind: AssistKind,\n         label: impl Into<String>,\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n-        let label = Assist::new(id, kind, label.into(), Some(group.clone()), target);\n+        let label = Assist::new(id, label.into(), Some(group.clone()), target);\n         self.add_impl(label, f)\n     }\n     fn add_impl(&mut self, label: Assist, f: impl FnOnce(&mut AssistBuilder)) -> Option<()> {"}, {"sha": "acb07e36a25065462f9d1c9bd7d4575b9dc26a10", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         format!(\"Add custom impl `{}` for `{}`\", trait_token.text().as_str(), annotated_name);\n \n     let target = attr.syntax().text_range();\n-    acc.add(AssistId(\"add_custom_impl\"), AssistKind::Refactor, label, target, |builder| {\n+    acc.add(AssistId(\"add_custom_impl\", AssistKind::Refactor), label, target, |builder| {\n         let new_attr_input = input\n             .syntax()\n             .descendants_with_tokens()"}, {"sha": "12acfbbe497c6c75569f358d24f5ba462ce772b2", "filename": "crates/ra_assists/src/handlers/add_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn add_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     let target = nominal.syntax().text_range();\n-    acc.add(AssistId(\"add_derive\"), AssistKind::Refactor, \"Add `#[derive]`\", target, |builder| {\n+    acc.add(AssistId(\"add_derive\", AssistKind::Refactor), \"Add `#[derive]`\", target, |builder| {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_simple_call())"}, {"sha": "39a5321d171ef44ddc407b7355d65f6751932d31", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -59,8 +59,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n \n     let inferred_type = ty.display_source_code(ctx.db(), module.into()).ok()?;\n     acc.add(\n-        AssistId(\"add_explicit_type\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"add_explicit_type\", AssistKind::RefactorRewrite),\n         format!(\"Insert explicit type `{}`\", inferred_type),\n         pat_range,\n         |builder| match ascribed_ty {"}, {"sha": "a324670ed1f8be4764e6d00fa010cf0e66c41c85", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -45,8 +45,7 @@ pub(crate) fn add_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext) ->\n \n     let target = variant.syntax().text_range();\n     acc.add(\n-        AssistId(\"add_from_impl_for_enum\"),\n-        AssistKind::Refactor,\n+        AssistId(\"add_from_impl_for_enum\", AssistKind::Refactor),\n         \"Add From impl for this enum variant\",\n         target,\n         |edit| {"}, {"sha": "6f2950daff5b4dc6e64679d7f5ae87b4bb61cb80", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -63,8 +63,7 @@ pub(crate) fn add_function(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n     let target = call.syntax().text_range();\n     acc.add(\n-        AssistId(\"add_function\"),\n-        AssistKind::RefactorExtract,\n+        AssistId(\"add_function\", AssistKind::RefactorExtract),\n         \"Add function\",\n         target,\n         |builder| {"}, {"sha": "2f603ef9cfaf3f1d9cb2b7bbffd13692901d1094", "filename": "crates/ra_assists/src/handlers/add_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -27,8 +27,7 @@ pub(crate) fn add_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let name = nominal.name()?;\n     let target = nominal.syntax().text_range();\n     acc.add(\n-        AssistId(\"add_impl\"),\n-        AssistKind::Refactor,\n+        AssistId(\"add_impl\", AssistKind::Refactor),\n         format!(\"Implement {}\", name.text().as_str()),\n         target,\n         |edit| {"}, {"sha": "d6aaf53f10246a3b1cd80d85ef5d6170f730f04f", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -147,7 +147,7 @@ fn add_missing_impl_members_inner(\n     }\n \n     let target = impl_def.syntax().text_range();\n-    acc.add(AssistId(assist_id), AssistKind::QuickFix, label, target, |builder| {\n+    acc.add(AssistId(assist_id, AssistKind::QuickFix), label, target, |builder| {\n         let n_existing_items = impl_item_list.assoc_items().count();\n         let source_scope = ctx.sema.scope_for_def(trait_);\n         let target_scope = ctx.sema.scope(impl_item_list.syntax());"}, {"sha": "84eda548605911eb93485c7dfede3d8c3650b174", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -43,8 +43,7 @@ pub(crate) fn add_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     let target = strukt.syntax().text_range();\n     acc.add(\n-        AssistId(\"add_new\"),\n-        AssistKind::Refactor,\n+        AssistId(\"add_new\", AssistKind::Refactor),\n         \"Add default constructor\",\n         target,\n         |builder| {"}, {"sha": "f7e1a7b05df118106758f9d44313d178f0769202", "filename": "crates/ra_assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -46,8 +46,7 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         return None;\n     }\n     acc.add(\n-        AssistId(\"add_turbo_fish\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"add_turbo_fish\", AssistKind::RefactorRewrite),\n         \"Add `::<>`\",\n         ident.text_range(),\n         |builder| match ctx.config.snippet_cap {"}, {"sha": "de701f8b8313cdc9e8c5ea9229bff1cf90b76fec", "filename": "crates/ra_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -40,8 +40,7 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let not_rhs = invert_boolean_expression(rhs);\n \n     acc.add(\n-        AssistId(\"apply_demorgan\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"apply_demorgan\", AssistKind::RefactorRewrite),\n         \"Apply De Morgan's law\",\n         op_range,\n         |edit| {"}, {"sha": "947be3b9b4a8f10340d9041d3b89b7b856435b5a", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -48,8 +48,7 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     for import in proposed_imports {\n         acc.add_group(\n             &group,\n-            AssistId(\"auto_import\"),\n-            AssistKind::QuickFix,\n+            AssistId(\"auto_import\", AssistKind::QuickFix),\n             format!(\"Import `{}`\", &import),\n             range,\n             |builder| {"}, {"sha": "24e5f6963220f00472c2b7758d787c8f7f076232", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -35,8 +35,7 @@ pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContex\n     let block_expr = &fn_def.body()?;\n \n     acc.add(\n-        AssistId(\"change_return_type_to_result\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"change_return_type_to_result\", AssistKind::RefactorRewrite),\n         \"Change return type to Result\",\n         type_ref.syntax().text_range(),\n         |builder| {"}, {"sha": "703ee2143f2f2463099978827a89461b00ddd0dc", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -63,8 +63,7 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n \n     acc.add(\n-        AssistId(\"change_visibility\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"change_visibility\", AssistKind::RefactorRewrite),\n         \"Change visibility to pub(crate)\",\n         target,\n         |edit| {\n@@ -77,8 +76,7 @@ fn change_vis(acc: &mut Assists, vis: ast::Visibility) -> Option<()> {\n     if vis.syntax().text() == \"pub\" {\n         let target = vis.syntax().text_range();\n         return acc.add(\n-            AssistId(\"change_visibility\"),\n-            AssistKind::RefactorRewrite,\n+            AssistId(\"change_visibility\", AssistKind::RefactorRewrite),\n             \"Change Visibility to pub(crate)\",\n             target,\n             |edit| {\n@@ -89,8 +87,7 @@ fn change_vis(acc: &mut Assists, vis: ast::Visibility) -> Option<()> {\n     if vis.syntax().text() == \"pub(crate)\" {\n         let target = vis.syntax().text_range();\n         return acc.add(\n-            AssistId(\"change_visibility\"),\n-            AssistKind::RefactorRewrite,\n+            AssistId(\"change_visibility\", AssistKind::RefactorRewrite),\n             \"Change visibility to pub\",\n             target,\n             |edit| {"}, {"sha": "330459f3c85322fac7fa42ffad6f4ea56a555290", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -100,8 +100,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n \n     let target = if_expr.syntax().text_range();\n     acc.add(\n-        AssistId(\"convert_to_guarded_return\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"convert_to_guarded_return\", AssistKind::RefactorRewrite),\n         \"Convert to guarded return\",\n         target,\n         |edit| {"}, {"sha": "2b8e273b3e2eb3c9225e0f3aa101c3d166e16033", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -49,8 +49,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n     let current_module = enum_hir.module(ctx.db());\n     let target = variant.syntax().text_range();\n     acc.add(\n-        AssistId(\"extract_struct_from_enum_variant\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"extract_struct_from_enum_variant\", AssistKind::RefactorRewrite),\n         \"Extract struct from enum variant\",\n         target,\n         |builder| {"}, {"sha": "481baf1a40ab39ce97f750332c878503e340ae9d", "filename": "crates/ra_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -44,8 +44,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n     }\n     let target = expr.syntax().text_range();\n     acc.add(\n-        AssistId(\"extract_variable\"),\n-        AssistKind::RefactorExtract,\n+        AssistId(\"extract_variable\", AssistKind::RefactorExtract),\n         \"Extract into variable\",\n         target,\n         move |edit| {"}, {"sha": "511355e079d4bda8018b58aa1ce0977bff265d1f", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -104,8 +104,7 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n \n     let target = match_expr.syntax().text_range();\n     acc.add(\n-        AssistId(\"fill_match_arms\"),\n-        AssistKind::QuickFix,\n+        AssistId(\"fill_match_arms\", AssistKind::QuickFix),\n         \"Fill match arms\",\n         target,\n         |builder| {"}, {"sha": "e212557c821565f083458b41ca213adcd80f58ee", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -58,7 +58,7 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n         Some(name) => format!(\"Change visibility of {} to {}\", name, missing_visibility),\n     };\n \n-    acc.add(AssistId(\"fix_visibility\"), AssistKind::QuickFix, assist_label, target, |builder| {\n+    acc.add(AssistId(\"fix_visibility\", AssistKind::QuickFix), assist_label, target, |builder| {\n         builder.edit_file(target_file);\n         match ctx.config.snippet_cap {\n             Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n@@ -101,7 +101,7 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n     let assist_label =\n         format!(\"Change visibility of {}.{} to {}\", parent_name, target_name, missing_visibility);\n \n-    acc.add(AssistId(\"fix_visibility\"), AssistKind::QuickFix, assist_label, target, |builder| {\n+    acc.add(AssistId(\"fix_visibility\", AssistKind::QuickFix), assist_label, target, |builder| {\n         builder.edit_file(target_file);\n         match ctx.config.snippet_cap {\n             Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),"}, {"sha": "3cd5326505e2ed5a9457fc98fbbaa376bf687dd8", "filename": "crates/ra_assists/src/handlers/flip_binexpr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -34,8 +34,7 @@ pub(crate) fn flip_binexpr(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     }\n \n     acc.add(\n-        AssistId(\"flip_binexpr\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"flip_binexpr\", AssistKind::RefactorRewrite),\n         \"Flip binary expression\",\n         op_range,\n         |edit| {"}, {"sha": "55a971dc77e0fa06491a4f465d8a3d0899f76195", "filename": "crates/ra_assists/src/handlers/flip_comma.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -29,8 +29,7 @@ pub(crate) fn flip_comma(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     }\n \n     acc.add(\n-        AssistId(\"flip_comma\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"flip_comma\", AssistKind::RefactorRewrite),\n         \"Flip comma\",\n         comma.text_range(),\n         |edit| {"}, {"sha": "1234f4d2966e65416d2d0839c6b8080ce4747ecc", "filename": "crates/ra_assists/src/handlers/flip_trait_bound.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -34,8 +34,7 @@ pub(crate) fn flip_trait_bound(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n     let target = plus.text_range();\n     acc.add(\n-        AssistId(\"flip_trait_bound\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"flip_trait_bound\", AssistKind::RefactorRewrite),\n         \"Flip trait bounds\",\n         target,\n         |edit| {"}, {"sha": "2fdfabaf53fe674edb76a9c5bc2906fa02e7cc98", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -111,8 +111,7 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n \n     let target = bind_pat.syntax().text_range();\n     acc.add(\n-        AssistId(\"inline_local_variable\"),\n-        AssistKind::RefactorInline,\n+        AssistId(\"inline_local_variable\", AssistKind::RefactorInline),\n         \"Inline variable\",\n         target,\n         move |builder| {"}, {"sha": "967593031cfdbe90f3683cb06760fe1518bd6733", "filename": "crates/ra_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -83,7 +83,7 @@ fn generate_fn_def_assist(\n             _ => return None,\n         }\n     };\n-    acc.add(AssistId(ASSIST_NAME), AssistKind::Refactor, ASSIST_LABEL, lifetime_loc, |builder| {\n+    acc.add(AssistId(ASSIST_NAME, AssistKind::Refactor), ASSIST_LABEL, lifetime_loc, |builder| {\n         add_lifetime_param(fn_def, builder, end_of_fn_ident, new_lifetime_param);\n         builder.replace(lifetime_loc, format!(\"'{}\", new_lifetime_param));\n         loc_needing_lifetime.map(|loc| builder.insert(loc, format!(\"'{} \", new_lifetime_param)));\n@@ -98,7 +98,7 @@ fn generate_impl_def_assist(\n ) -> Option<()> {\n     let new_lifetime_param = generate_unique_lifetime_param_name(&impl_def.type_param_list())?;\n     let end_of_impl_kw = impl_def.impl_token()?.text_range().end();\n-    acc.add(AssistId(ASSIST_NAME), AssistKind::Refactor, ASSIST_LABEL, lifetime_loc, |builder| {\n+    acc.add(AssistId(ASSIST_NAME, AssistKind::Refactor), ASSIST_LABEL, lifetime_loc, |builder| {\n         add_lifetime_param(impl_def, builder, end_of_impl_kw, new_lifetime_param);\n         builder.replace(lifetime_loc, format!(\"'{}\", new_lifetime_param));\n     })"}, {"sha": "bbe3f364360515b31cd601192950cdb356a3358b", "filename": "crates/ra_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -54,7 +54,7 @@ pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let else_node = else_block.syntax();\n     let else_range = else_node.text_range();\n     let then_range = then_node.text_range();\n-    acc.add(AssistId(\"invert_if\"), AssistKind::RefactorRewrite, \"Invert if\", if_range, |edit| {\n+    acc.add(AssistId(\"invert_if\", AssistKind::RefactorRewrite), \"Invert if\", if_range, |edit| {\n         edit.replace(cond_range, flip_cond.syntax().text());\n         edit.replace(else_range, then_node.text());\n         edit.replace(then_range, else_node.text());"}, {"sha": "1beccb61c09c436040b72f1d849e4703ce3ffc0d", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -57,8 +57,7 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n \n     let target = tree.syntax().text_range();\n     acc.add(\n-        AssistId(\"merge_imports\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"merge_imports\", AssistKind::RefactorRewrite),\n         \"Merge imports\",\n         target,\n         |builder| {"}, {"sha": "186a1f61839b8d9bbf95167ea26a7c411c621edb", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -60,8 +60,7 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n     }\n \n     acc.add(\n-        AssistId(\"merge_match_arms\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"merge_match_arms\", AssistKind::RefactorRewrite),\n         \"Merge match arms\",\n         current_text_range,\n         |edit| {"}, {"sha": "ba3dafb9955e86d3b2d88533e4572007804805c5", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -51,8 +51,7 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n \n     let target = type_param_list.syntax().text_range();\n     acc.add(\n-        AssistId(\"move_bounds_to_where_clause\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"move_bounds_to_where_clause\", AssistKind::RefactorRewrite),\n         \"Move to where clause\",\n         target,\n         |edit| {"}, {"sha": "4060d34c641455993534c84d2a6cde8d169e33cd", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -41,8 +41,7 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext) ->\n \n     let target = guard.syntax().text_range();\n     acc.add(\n-        AssistId(\"move_guard_to_arm_body\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"move_guard_to_arm_body\", AssistKind::RefactorRewrite),\n         \"Move guard to arm body\",\n         target,\n         |edit| {\n@@ -106,8 +105,7 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n \n     let target = if_expr.syntax().text_range();\n     acc.add(\n-        AssistId(\"move_arm_cond_to_match_guard\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"move_arm_cond_to_match_guard\", AssistKind::RefactorRewrite),\n         \"Move condition to match guard\",\n         target,\n         |edit| {"}, {"sha": "96679e1609dbd59849afbe135be4fff4d65caabe", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -27,8 +27,7 @@ pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     let value = token.value()?;\n     let target = token.syntax().text_range();\n     acc.add(\n-        AssistId(\"make_raw_string\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"make_raw_string\", AssistKind::RefactorRewrite),\n         \"Rewrite as raw string\",\n         target,\n         |edit| {\n@@ -65,8 +64,7 @@ pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     let value = token.value()?;\n     let target = token.syntax().text_range();\n     acc.add(\n-        AssistId(\"make_usual_string\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"make_usual_string\", AssistKind::RefactorRewrite),\n         \"Rewrite as regular string\",\n         target,\n         |edit| {\n@@ -95,7 +93,7 @@ pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext) -> Optio\n pub(crate) fn add_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let target = token.text_range();\n-    acc.add(AssistId(\"add_hash\"), AssistKind::Refactor, \"Add # to raw string\", target, |edit| {\n+    acc.add(AssistId(\"add_hash\", AssistKind::Refactor), \"Add # to raw string\", target, |edit| {\n         edit.insert(token.text_range().start() + TextSize::of('r'), \"#\");\n         edit.insert(token.text_range().end(), \"#\");\n     })\n@@ -125,8 +123,7 @@ pub(crate) fn remove_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     }\n     let target = token.text_range();\n     acc.add(\n-        AssistId(\"remove_hash\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"remove_hash\", AssistKind::RefactorRewrite),\n         \"Remove hash from raw string\",\n         target,\n         |edit| {"}, {"sha": "a616cca5794742e4eff0707ca5efc50ce7fdce88", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -38,7 +38,7 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n \n     let target = macro_call.syntax().text_range();\n-    acc.add(AssistId(\"remove_dbg\"), AssistKind::Refactor, \"Remove dbg!()\", target, |builder| {\n+    acc.add(AssistId(\"remove_dbg\", AssistKind::Refactor), \"Remove dbg!()\", target, |builder| {\n         builder.replace(macro_range, macro_content);\n     })\n }"}, {"sha": "ef55c354ee5c9aaea805fc7c016a0028db12f23f", "filename": "crates/ra_assists/src/handlers/remove_mut.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -27,8 +27,7 @@ pub(crate) fn remove_mut(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     let target = mut_token.text_range();\n     acc.add(\n-        AssistId(\"remove_mut\"),\n-        AssistKind::Refactor,\n+        AssistId(\"remove_mut\", AssistKind::Refactor),\n         \"Remove `mut` keyword\",\n         target,\n         |builder| {"}, {"sha": "2ac1c56cf539f90eb5de11b0f22035152a5e902e", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -43,8 +43,7 @@ fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     let target = record.syntax().text_range();\n     acc.add(\n-        AssistId(\"reorder_fields\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"reorder_fields\", AssistKind::RefactorRewrite),\n         \"Reorder record fields\",\n         target,\n         |edit| {"}, {"sha": "b7e30a7f27e204df43e3821665463c246e5d1241", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -49,8 +49,7 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n \n     let target = if_expr.syntax().text_range();\n     acc.add(\n-        AssistId(\"replace_if_let_with_match\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"replace_if_let_with_match\", AssistKind::RefactorRewrite),\n         \"Replace with match\",\n         target,\n         move |edit| {"}, {"sha": "a49292c970a5a44d6bca1b1dbeb2dee28f676a81", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -45,8 +45,7 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n \n     let target = let_kw.text_range();\n     acc.add(\n-        AssistId(\"replace_let_with_if_let\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"replace_let_with_if_let\", AssistKind::RefactorRewrite),\n         \"Replace with if-let\",\n         target,\n         |edit| {"}, {"sha": "dfd314abf4ba8b66deb4f5d0cd96ebf6620590d8", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -37,8 +37,7 @@ pub(crate) fn replace_qualified_name_with_use(\n \n     let target = path.syntax().text_range();\n     acc.add(\n-        AssistId(\"replace_qualified_name_with_use\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"replace_qualified_name_with_use\", AssistKind::RefactorRewrite),\n         \"Replace qualified path with use\",\n         target,\n         |builder| {"}, {"sha": "e5a4bb23c3d3a222078fa06f34f2dcc83ec0019b", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -47,8 +47,7 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n     let happy_variant = TryEnum::from_ty(&ctx.sema, &ty)?.happy_case();\n     let target = method_call.syntax().text_range();\n     acc.add(\n-        AssistId(\"replace_unwrap_with_match\"),\n-        AssistKind::RefactorRewrite,\n+        AssistId(\"replace_unwrap_with_match\", AssistKind::RefactorRewrite),\n         \"Replace unwrap with match\",\n         target,\n         |builder| {"}, {"sha": "4ca5c3ca14cd6b276a3dea9b640cf088706cd6f4", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn split_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     }\n \n     let target = colon_colon.text_range();\n-    acc.add(AssistId(\"split_import\"), AssistKind::RefactorRewrite, \"Split import\", target, |edit| {\n+    acc.add(AssistId(\"split_import\", AssistKind::RefactorRewrite), \"Split import\", target, |edit| {\n         edit.replace_ast(use_tree, new_tree);\n     })\n }"}, {"sha": "8b38695a94852cdb48cc58121d88e6d5ba4fcaf0", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 27, "deletions": 39, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -27,7 +27,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let assist_id = AssistId(\"unwrap_block\");\n+    let assist_id = AssistId(\"unwrap_block\", AssistKind::RefactorRewrite);\n     let assist_label = \"Unwrap block\";\n \n     let l_curly_token = ctx.find_token_at_offset(T!['{'])?;\n@@ -50,55 +50,43 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                     let ancestor_then_branch = ancestor.then_branch()?;\n \n                     let target = then_branch.syntax().text_range();\n-                    return acc.add(\n-                        assist_id,\n-                        AssistKind::Refactor,\n-                        assist_label,\n-                        target,\n-                        |edit| {\n-                            let range_to_del_else_if = TextRange::new(\n-                                ancestor_then_branch.syntax().text_range().end(),\n-                                l_curly_token.text_range().start(),\n-                            );\n-                            let range_to_del_rest = TextRange::new(\n-                                then_branch.syntax().text_range().end(),\n-                                if_expr.syntax().text_range().end(),\n-                            );\n-\n-                            edit.delete(range_to_del_rest);\n-                            edit.delete(range_to_del_else_if);\n-                            edit.replace(\n-                                target,\n-                                update_expr_string(then_branch.to_string(), &[' ', '{']),\n-                            );\n-                        },\n-                    );\n+                    return acc.add(assist_id, assist_label, target, |edit| {\n+                        let range_to_del_else_if = TextRange::new(\n+                            ancestor_then_branch.syntax().text_range().end(),\n+                            l_curly_token.text_range().start(),\n+                        );\n+                        let range_to_del_rest = TextRange::new(\n+                            then_branch.syntax().text_range().end(),\n+                            if_expr.syntax().text_range().end(),\n+                        );\n+\n+                        edit.delete(range_to_del_rest);\n+                        edit.delete(range_to_del_else_if);\n+                        edit.replace(\n+                            target,\n+                            update_expr_string(then_branch.to_string(), &[' ', '{']),\n+                        );\n+                    });\n                 }\n             } else {\n                 let target = block.syntax().text_range();\n-                return acc.add(\n-                    assist_id,\n-                    AssistKind::RefactorRewrite,\n-                    assist_label,\n-                    target,\n-                    |edit| {\n-                        let range_to_del = TextRange::new(\n-                            then_branch.syntax().text_range().end(),\n-                            l_curly_token.text_range().start(),\n-                        );\n+                return acc.add(assist_id, assist_label, target, |edit| {\n+                    let range_to_del = TextRange::new(\n+                        then_branch.syntax().text_range().end(),\n+                        l_curly_token.text_range().start(),\n+                    );\n \n-                        edit.delete(range_to_del);\n-                        edit.replace(target, update_expr_string(block.to_string(), &[' ', '{']));\n-                    },\n-                );\n+                    edit.delete(range_to_del);\n+                    edit.replace(target, update_expr_string(block.to_string(), &[' ', '{']));\n+                });\n             }\n         }\n         _ => return None,\n     };\n \n     let unwrapped = unwrap_trivial_block(block);\n     let target = unwrapped.syntax().text_range();\n-    acc.add(assist_id, AssistKind::RefactorRewrite, assist_label, target, |builder| {\n+    acc.add(assist_id, assist_label, target, |builder| {\n         builder.replace(\n             parent.syntax().text_range(),\n             update_expr_string(unwrapped.to_string(), &[' ', '{', '\\n']),"}, {"sha": "201213c73ca63297dc73b64a5d8b637589c70ca8", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -26,18 +26,29 @@ pub(crate) use crate::assist_context::{AssistContext, Assists};\n \n pub use assist_config::AssistConfig;\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum AssistKind {\n+    None,\n+    QuickFix,\n+    Refactor,\n+    RefactorExtract,\n+    RefactorInline,\n+    RefactorRewrite,\n+    Source,\n+    OrganizeImports,\n+}\n+\n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n-pub struct AssistId(pub &'static str);\n+pub struct AssistId(pub &'static str, pub AssistKind);\n \n #[derive(Clone, Debug)]\n pub struct GroupLabel(pub String);\n \n #[derive(Debug, Clone)]\n pub struct Assist {\n     pub id: AssistId,\n-    pub kind: AssistKind,\n     /// Short description of the assist, as shown in the UI.\n     pub label: String,\n     pub group: Option<GroupLabel>,\n@@ -52,18 +63,6 @@ pub struct ResolvedAssist {\n     pub source_change: SourceChange,\n }\n \n-#[derive(Debug, Copy, Clone)]\n-pub enum AssistKind {\n-    None,\n-    QuickFix,\n-    Refactor,\n-    RefactorExtract,\n-    RefactorInline,\n-    RefactorRewrite,\n-    Source,\n-    OrganizeImports,\n-}\n-\n impl Assist {\n     /// Return all the assists applicable at the given position.\n     ///\n@@ -99,14 +98,13 @@ impl Assist {\n \n     pub(crate) fn new(\n         id: AssistId,\n-        kind: AssistKind,\n         label: String,\n         group: Option<GroupLabel>,\n         target: TextRange,\n     ) -> Assist {\n         // FIXME: make fields private, so that this invariant can't be broken\n         assert!(label.starts_with(|c: char| c.is_uppercase()));\n-        Assist { id, kind, label, group, target }\n+        Assist { id, label, group, target }\n     }\n }\n "}, {"sha": "e16d6482a5ad5e9492544c528fe227da77b49b4f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cc81ac71e4246bf58a3758735cc68f7adb5e0f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=36cc81ac71e4246bf58a3758735cc68f7adb5e0f", "patch": "@@ -650,7 +650,7 @@ pub(crate) fn unresolved_code_action(\n         title: assist.label,\n         id: Some(format!(\"{}:{}\", assist.id.0.to_owned(), index.to_string())),\n         group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n-        kind: Some(code_action_kind(assist.kind)),\n+        kind: Some(code_action_kind(assist.id.1)),\n         edit: None,\n         command: None,\n     };"}]}