{"sha": "366c1786e61d14a89cebd354b78ce6a68202b699", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NmMxNzg2ZTYxZDE0YTg5Y2ViZDM1NGI3OGNlNmE2ODIwMmI2OTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-09T11:36:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-09T11:36:39Z"}, "message": "Rollup merge of #71555 - cjgillot:nameless, r=matthewjasper\n\nRemove ast::{Ident, Name} reexports.\n\nThe reexport of `Symbol` into `Name` confused me.", "tree": {"sha": "65f4c282c3cf15c9ec36ba20603fccaa918c9a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65f4c282c3cf15c9ec36ba20603fccaa918c9a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/366c1786e61d14a89cebd354b78ce6a68202b699", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetpXHCRBK7hj4Ov3rIwAAdHIIADUj0Tmwz/kBPIOlvgUkPYJ+\nVDk3gvbxJ0Bk+eZI8L5+noxnxj6fGBjUTKUT0+4jNknAmLOHafriA9mw+hBPYTvU\nHlDZ5IJ97mTwPX77kgIW5TFvjNx3K34IrFnJSMmLQDxnFVsr0qzPptZAX32V5FXw\nov1bvYzOrSfZahbJbeYO/kI1fcnoafrJGR2t0/fGze2pqrTxmITWXEVTrouqKPVQ\nhy0bZ15JV/GAetZj5b/wDpEuS3m97sBBNYceQxilKH/C2HQKh48KH0nisdt+hZvK\ny9Rr3eZBrP/64gJPsFB91+/Udfk4vAkZeNU1tvoNbjUGiMy82UR5qHCQCGlDyqY=\n=qvMD\n-----END PGP SIGNATURE-----\n", "payload": "tree 65f4c282c3cf15c9ec36ba20603fccaa918c9a58\nparent 8c0310d18caf38197f708a6e5a1c03b065373e6c\nparent 32507d691058d3efae2ad3fce9e7ff14a387f856\nauthor Ralf Jung <post@ralfj.de> 1589024199 +0200\ncommitter GitHub <noreply@github.com> 1589024199 +0200\n\nRollup merge of #71555 - cjgillot:nameless, r=matthewjasper\n\nRemove ast::{Ident, Name} reexports.\n\nThe reexport of `Symbol` into `Name` confused me.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/366c1786e61d14a89cebd354b78ce6a68202b699", "html_url": "https://github.com/rust-lang/rust/commit/366c1786e61d14a89cebd354b78ce6a68202b699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/366c1786e61d14a89cebd354b78ce6a68202b699/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c0310d18caf38197f708a6e5a1c03b065373e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0310d18caf38197f708a6e5a1c03b065373e6c", "html_url": "https://github.com/rust-lang/rust/commit/8c0310d18caf38197f708a6e5a1c03b065373e6c"}, {"sha": "32507d691058d3efae2ad3fce9e7ff14a387f856", "url": "https://api.github.com/repos/rust-lang/rust/commits/32507d691058d3efae2ad3fce9e7ff14a387f856", "html_url": "https://github.com/rust-lang/rust/commit/32507d691058d3efae2ad3fce9e7ff14a387f856"}], "stats": {"total": 1132, "additions": 539, "deletions": 593}, "files": [{"sha": "34d83e0d339a300276e3f4ac63ce0ee0203b7166", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -4226,7 +4226,6 @@ name = \"rustc_privacy\"\n version = \"0.0.0\"\n dependencies = [\n  \"log\",\n- \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\","}, {"sha": "15bf4b70e2fdcb8c732f9bfb1b91bd3ce6840236", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -22,8 +22,6 @@ pub use crate::util::parser::ExprPrecedence;\n pub use GenericArgs::*;\n pub use UnsafeSource::*;\n \n-pub use rustc_span::symbol::{Ident, Symbol as Name};\n-\n use crate::ptr::P;\n use crate::token::{self, DelimToken};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n@@ -34,7 +32,7 @@ use rustc_data_structures::thin_vec::ThinVec;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{self, Decoder, Encoder};\n use rustc_span::source_map::{respan, Spanned};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n use std::convert::TryFrom;\n@@ -2451,7 +2449,7 @@ pub enum ItemKind {\n     /// An `extern crate` item, with the optional *original* crate name if the crate was renamed.\n     ///\n     /// E.g., `extern crate foo` or `extern crate foo_bar as foo`.\n-    ExternCrate(Option<Name>),\n+    ExternCrate(Option<Symbol>),\n     /// A use declaration item (`use`).\n     ///\n     /// E.g., `use foo;`, `use foo::bar;` or `use foo::bar as FooBar;`."}, {"sha": "b812f2dadf6d40321e22740da1c7dad7047c3471", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,8 +3,8 @@\n use crate::ast;\n use crate::ast::{AttrId, AttrItem, AttrKind, AttrStyle, AttrVec, Attribute};\n use crate::ast::{Expr, GenericParam, Item, Lit, LitKind, Local, Stmt, StmtKind};\n-use crate::ast::{Ident, Name, Path, PathSegment};\n use crate::ast::{MacArgs, MacDelimiter, MetaItem, MetaItemKind, NestedMetaItem};\n+use crate::ast::{Path, PathSegment};\n use crate::mut_visit::visit_clobber;\n use crate::ptr::P;\n use crate::token::{self, Token};\n@@ -14,7 +14,7 @@ use rustc_data_structures::sync::Lock;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::source_map::{BytePos, Spanned};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n \n use log::debug;\n@@ -113,7 +113,7 @@ impl NestedMetaItem {\n     }\n \n     /// Returns a name and single literal value tuple of the `MetaItem`.\n-    pub fn name_value_literal(&self) -> Option<(Name, &Lit)> {\n+    pub fn name_value_literal(&self) -> Option<(Symbol, &Lit)> {\n         self.meta_item().and_then(|meta_item| {\n             meta_item.meta_item_list().and_then(|meta_item_list| {\n                 if meta_item_list.len() == 1 {"}, {"sha": "d533aecf2df6b04d9ef91f04c4f7cf5c7adf648b", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -15,6 +15,7 @@ use crate::tokenstream::*;\n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::sync::Lrc;\n use rustc_span::source_map::{respan, Spanned};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use smallvec::{smallvec, Array, SmallVec};"}, {"sha": "a5b9c2a95bbea14074f4fbf7d03257bf65432cde", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable_Generic;\n use rustc_span::symbol::kw;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{self, Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::{fmt, mem};\n@@ -145,7 +145,7 @@ impl Lit {\n     }\n }\n \n-pub fn ident_can_begin_expr(name: ast::Name, span: Span, is_raw: bool) -> bool {\n+pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {\n     let ident_token = Token::new(Ident(name, is_raw), span);\n \n     !ident_token.is_reserved_ident()\n@@ -173,7 +173,7 @@ pub fn ident_can_begin_expr(name: ast::Name, span: Span, is_raw: bool) -> bool {\n         .contains(&name)\n }\n \n-fn ident_can_begin_type(name: ast::Name, span: Span, is_raw: bool) -> bool {\n+fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {\n     let ident_token = Token::new(Ident(name, is_raw), span);\n \n     !ident_token.is_reserved_ident()\n@@ -229,18 +229,18 @@ pub enum TokenKind {\n     /// Do not forget about `NtIdent` when you want to match on identifiers.\n     /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to\n     /// treat regular and interpolated identifiers in the same way.\n-    Ident(ast::Name, /* is_raw */ bool),\n+    Ident(Symbol, /* is_raw */ bool),\n     /// Lifetime identifier token.\n     /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.\n     /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to\n     /// treat regular and interpolated lifetime identifiers in the same way.\n-    Lifetime(ast::Name),\n+    Lifetime(Symbol),\n \n     Interpolated(Lrc<Nonterminal>),\n \n     // Can be expanded into several tokens.\n     /// A doc comment.\n-    DocComment(ast::Name),\n+    DocComment(Symbol),\n \n     // Junk. These carry no data because we don't really care about the data\n     // they *would* carry, and don't really want to allocate a new ident for\n@@ -249,9 +249,9 @@ pub enum TokenKind {\n     Whitespace,\n     /// A comment.\n     Comment,\n-    Shebang(ast::Name),\n+    Shebang(Symbol),\n     /// A completely invalid token which should be skipped.\n-    Unknown(ast::Name),\n+    Unknown(Symbol),\n \n     Eof,\n }\n@@ -325,8 +325,8 @@ impl Token {\n         Token::new(TokenKind::Whitespace, DUMMY_SP)\n     }\n \n-    /// Recovers a `Token` from an `ast::Ident`. This creates a raw identifier if necessary.\n-    pub fn from_ast_ident(ident: ast::Ident) -> Self {\n+    /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.\n+    pub fn from_ast_ident(ident: Ident) -> Self {\n         Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)\n     }\n \n@@ -488,19 +488,19 @@ impl Token {\n     }\n \n     /// Returns an identifier if this token is an identifier.\n-    pub fn ident(&self) -> Option<(ast::Ident, /* is_raw */ bool)> {\n+    pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {\n         let token = self.uninterpolate();\n         match token.kind {\n-            Ident(name, is_raw) => Some((ast::Ident::new(name, token.span), is_raw)),\n+            Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),\n             _ => None,\n         }\n     }\n \n     /// Returns a lifetime identifier if this token is a lifetime.\n-    pub fn lifetime(&self) -> Option<ast::Ident> {\n+    pub fn lifetime(&self) -> Option<Ident> {\n         let token = self.uninterpolate();\n         match token.kind {\n-            Lifetime(name) => Some(ast::Ident::new(name, token.span)),\n+            Lifetime(name) => Some(Ident::new(name, token.span)),\n             _ => None,\n         }\n     }\n@@ -577,28 +577,28 @@ impl Token {\n     }\n \n     pub fn is_path_segment_keyword(&self) -> bool {\n-        self.is_non_raw_ident_where(ast::Ident::is_path_segment_keyword)\n+        self.is_non_raw_ident_where(Ident::is_path_segment_keyword)\n     }\n \n     // Returns true for reserved identifiers used internally for elided lifetimes,\n     // unnamed method parameters, crate root module, error recovery etc.\n     pub fn is_special_ident(&self) -> bool {\n-        self.is_non_raw_ident_where(ast::Ident::is_special)\n+        self.is_non_raw_ident_where(Ident::is_special)\n     }\n \n     /// Returns `true` if the token is a keyword used in the language.\n     pub fn is_used_keyword(&self) -> bool {\n-        self.is_non_raw_ident_where(ast::Ident::is_used_keyword)\n+        self.is_non_raw_ident_where(Ident::is_used_keyword)\n     }\n \n     /// Returns `true` if the token is a keyword reserved for possible future use.\n     pub fn is_unused_keyword(&self) -> bool {\n-        self.is_non_raw_ident_where(ast::Ident::is_unused_keyword)\n+        self.is_non_raw_ident_where(Ident::is_unused_keyword)\n     }\n \n     /// Returns `true` if the token is either a special identifier or a keyword.\n     pub fn is_reserved_ident(&self) -> bool {\n-        self.is_non_raw_ident_where(ast::Ident::is_reserved)\n+        self.is_non_raw_ident_where(Ident::is_reserved)\n     }\n \n     /// Returns `true` if the token is the identifier `true` or `false`.\n@@ -607,7 +607,7 @@ impl Token {\n     }\n \n     /// Returns `true` if the token is a non-raw identifier for which `pred` holds.\n-    pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(ast::Ident) -> bool) -> bool {\n+    pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {\n         match self.ident() {\n             Some((id, false)) => pred(id),\n             _ => false,\n@@ -746,8 +746,8 @@ pub enum Nonterminal {\n     NtPat(P<ast::Pat>),\n     NtExpr(P<ast::Expr>),\n     NtTy(P<ast::Ty>),\n-    NtIdent(ast::Ident, /* is_raw */ bool),\n-    NtLifetime(ast::Ident),\n+    NtIdent(Ident, /* is_raw */ bool),\n+    NtLifetime(Ident),\n     NtLiteral(P<ast::Expr>),\n     /// Stuff inside brackets for attributes\n     NtMeta(P<ast::AttrItem>),"}, {"sha": "63f483663bfa6a24b2cb309167fddc34cb88bb4d", "filename": "src/librustc_ast/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fvisit.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -17,6 +17,7 @@ use crate::ast::*;\n use crate::token::Token;\n use crate::tokenstream::{TokenStream, TokenTree};\n \n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n \n #[derive(Copy, Clone, PartialEq)]\n@@ -74,7 +75,7 @@ impl<'a> FnKind<'a> {\n /// to monitor future changes to `Visitor` in case a new method with a\n /// new default implementation gets introduced.)\n pub trait Visitor<'ast>: Sized {\n-    fn visit_name(&mut self, _span: Span, _name: Name) {\n+    fn visit_name(&mut self, _span: Span, _name: Symbol) {\n         // Nothing to do.\n     }\n     fn visit_ident(&mut self, ident: Ident) {"}, {"sha": "8da3aa633b85fb0c4b058c88e16a268bde194873", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -9,7 +9,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n \n impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_exprs(&mut self, exprs: &[AstP<Expr>]) -> &'hir [hir::Expr<'hir>] {"}, {"sha": "eced17c9245f2480dc67ca0b76f89dc960ad5066", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -12,7 +12,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LocalDefId;\n use rustc_span::source_map::{respan, DesugaringKind};\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n "}, {"sha": "7e6dfbf00f591e41a76a9909bd425f09bb085e7b", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -63,7 +63,7 @@ use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind, ExpnData, ExpnKind};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n use log::{debug, trace};"}, {"sha": "496e401d06124f789eb0fcb3866e4a7e70d14fd2", "filename": "src/librustc_ast_lowering/pat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_lowering%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_lowering%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpat.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -5,6 +5,7 @@ use rustc_ast::ptr::P;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n+use rustc_span::symbol::Ident;\n use rustc_span::{source_map::Spanned, Span};\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {"}, {"sha": "e5ce51f8d2d1f45152badd12dc5915d52fefd8dc", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -9,6 +9,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n use rustc_session::lint::builtin::ELIDED_LIFETIMES_IN_PATHS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use log::debug;"}, {"sha": "46c415413e92b687f826147bb56445e717719a94", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -20,7 +20,7 @@ use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n use rustc_session::lint::LintBuffer;\n use rustc_session::Session;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n use std::mem;\n use std::ops::DerefMut;"}, {"sha": "ffd741a7b37b02888675d7eed26ccebdfeaee2aa", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -7,7 +7,7 @@ use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Features, GateIssue, UnstableFeatures};\n use rustc_session::parse::{feature_err, feature_err_issue, ParseSess};\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n \n use log::debug;\n@@ -252,7 +252,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n     }\n \n-    fn visit_name(&mut self, sp: Span, name: ast::Name) {\n+    fn visit_name(&mut self, sp: Span, name: Symbol) {\n         if !name.as_str().is_ascii() {\n             gate_feature_post!(\n                 &self,"}, {"sha": "3cf562b927e2e4b0199c7eec229159da0aa827dc", "filename": "src/librustc_ast_passes/node_count.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_passes%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_passes%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fnode_count.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -2,6 +2,7 @@\n \n use rustc_ast::ast::*;\n use rustc_ast::visit::*;\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n pub struct NodeCounter {"}, {"sha": "e6803fdd7f1578046256ec3611320000aa690d70", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::util::parser::{self, AssocOp, Fixity};\n use rustc_ast::util::{classify, comments};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{SourceMap, Spanned};\n-use rustc_span::symbol::{kw, sym, IdentPrinter};\n+use rustc_span::symbol::{kw, sym, Ident, IdentPrinter, Symbol};\n use rustc_span::{BytePos, FileName, Span};\n \n use std::borrow::Cow;\n@@ -26,8 +26,8 @@ pub enum MacHeader<'a> {\n }\n \n pub enum AnnNode<'a> {\n-    Ident(&'a ast::Ident),\n-    Name(&'a ast::Name),\n+    Ident(&'a Ident),\n+    Name(&'a Symbol),\n     Block(&'a ast::Block),\n     Item(&'a ast::Item),\n     SubItem(ast::NodeId),\n@@ -118,16 +118,16 @@ pub fn print_crate<'a>(\n         // of the feature gate, so we fake them up here.\n \n         // `#![feature(prelude_import)]`\n-        let pi_nested = attr::mk_nested_word_item(ast::Ident::with_dummy_span(sym::prelude_import));\n-        let list = attr::mk_list_item(ast::Ident::with_dummy_span(sym::feature), vec![pi_nested]);\n+        let pi_nested = attr::mk_nested_word_item(Ident::with_dummy_span(sym::prelude_import));\n+        let list = attr::mk_list_item(Ident::with_dummy_span(sym::feature), vec![pi_nested]);\n         let fake_attr = attr::mk_attr_inner(list);\n         s.print_attribute(&fake_attr);\n \n         // Currently, in Rust 2018 we don't have `extern crate std;` at the crate\n         // root, so this is not needed, and actually breaks things.\n         if edition == Edition::Edition2015 {\n             // `#![no_std]`\n-            let no_std_meta = attr::mk_word_item(ast::Ident::with_dummy_span(sym::no_std));\n+            let no_std_meta = attr::mk_word_item(Ident::with_dummy_span(sym::no_std));\n             let fake_attr = attr::mk_attr_inner(no_std_meta);\n             s.print_attribute(&fake_attr);\n         }\n@@ -389,7 +389,7 @@ impl std::ops::DerefMut for State<'_> {\n \n pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::DerefMut {\n     fn comments(&mut self) -> &mut Option<Comments<'a>>;\n-    fn print_ident(&mut self, ident: ast::Ident);\n+    fn print_ident(&mut self, ident: Ident);\n     fn print_generic_args(&mut self, args: &ast::GenericArgs, colons_before_params: bool);\n \n     fn strsep<T, F>(\n@@ -671,7 +671,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         &mut self,\n         header: Option<MacHeader<'_>>,\n         has_bang: bool,\n-        ident: Option<ast::Ident>,\n+        ident: Option<Ident>,\n         delim: DelimToken,\n         tts: TokenStream,\n         convert_dollar_crate: bool,\n@@ -782,7 +782,7 @@ impl<'a> PrintState<'a> for State<'a> {\n         &mut self.comments\n     }\n \n-    fn print_ident(&mut self, ident: ast::Ident) {\n+    fn print_ident(&mut self, ident: Ident) {\n         self.s.word(IdentPrinter::for_ast_ident(ident, ident.is_raw_guess()).to_string());\n         self.ann.post(self, AnnNode::Ident(&ident))\n     }\n@@ -1001,7 +1001,7 @@ impl<'a> State<'a> {\n \n     fn print_item_const(\n         &mut self,\n-        ident: ast::Ident,\n+        ident: Ident,\n         mutbl: Option<ast::Mutability>,\n         ty: &ast::Ty,\n         body: Option<&ast::Expr>,\n@@ -1032,7 +1032,7 @@ impl<'a> State<'a> {\n \n     fn print_associated_type(\n         &mut self,\n-        ident: ast::Ident,\n+        ident: Ident,\n         generics: &ast::Generics,\n         bounds: &ast::GenericBounds,\n         ty: Option<&ast::Ty>,\n@@ -1281,7 +1281,7 @@ impl<'a> State<'a> {\n         &mut self,\n         enum_definition: &ast::EnumDef,\n         generics: &ast::Generics,\n-        ident: ast::Ident,\n+        ident: Ident,\n         span: rustc_span::Span,\n         visibility: &ast::Visibility,\n     ) {\n@@ -1337,7 +1337,7 @@ impl<'a> State<'a> {\n         &mut self,\n         struct_def: &ast::VariantData,\n         generics: &ast::Generics,\n-        ident: ast::Ident,\n+        ident: Ident,\n         span: rustc_span::Span,\n         print_finalizer: bool,\n     ) {\n@@ -2116,7 +2116,7 @@ impl<'a> State<'a> {\n         self.s.word(i.to_string())\n     }\n \n-    crate fn print_name(&mut self, name: ast::Name) {\n+    crate fn print_name(&mut self, name: Symbol) {\n         self.s.word(name.to_string());\n         self.ann.post(self, AnnNode::Name(&name))\n     }\n@@ -2322,7 +2322,7 @@ impl<'a> State<'a> {\n     fn print_fn_full(\n         &mut self,\n         sig: &ast::FnSig,\n-        name: ast::Ident,\n+        name: Ident,\n         generics: &ast::Generics,\n         vis: &ast::Visibility,\n         defaultness: ast::Defaultness,\n@@ -2347,7 +2347,7 @@ impl<'a> State<'a> {\n         &mut self,\n         decl: &ast::FnDecl,\n         header: ast::FnHeader,\n-        name: Option<ast::Ident>,\n+        name: Option<Ident>,\n         generics: &ast::Generics,\n     ) {\n         self.print_fn_header_info(header);\n@@ -2614,7 +2614,7 @@ impl<'a> State<'a> {\n         ext: ast::Extern,\n         unsafety: ast::Unsafe,\n         decl: &ast::FnDecl,\n-        name: Option<ast::Ident>,\n+        name: Option<Ident>,\n         generic_params: &[ast::GenericParam],\n     ) {\n         self.ibox(INDENT_UNIT);"}, {"sha": "f51439f89ffbe9a5f2cfcba73294339095e0eb0b", "filename": "src/librustc_ast_pretty/pprust/tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust%2Ftests.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -4,11 +4,12 @@ use rustc_ast::ast;\n use rustc_ast::with_default_globals;\n use rustc_span;\n use rustc_span::source_map::respan;\n+use rustc_span::symbol::Ident;\n \n fn fun_to_string(\n     decl: &ast::FnDecl,\n     header: ast::FnHeader,\n-    name: ast::Ident,\n+    name: Ident,\n     generics: &ast::Generics,\n ) -> String {\n     to_string(|s| {\n@@ -26,7 +27,7 @@ fn variant_to_string(var: &ast::Variant) -> String {\n #[test]\n fn test_fun_to_string() {\n     with_default_globals(|| {\n-        let abba_ident = ast::Ident::from_str(\"abba\");\n+        let abba_ident = Ident::from_str(\"abba\");\n \n         let decl =\n             ast::FnDecl { inputs: Vec::new(), output: ast::FnRetTy::Default(rustc_span::DUMMY_SP) };\n@@ -41,7 +42,7 @@ fn test_fun_to_string() {\n #[test]\n fn test_variant_to_string() {\n     with_default_globals(|| {\n-        let ident = ast::Ident::from_str(\"principal_skinner\");\n+        let ident = Ident::from_str(\"principal_skinner\");\n \n         let var = ast::Variant {\n             ident,"}, {"sha": "166cd628350304720538dd74c9202585502095bf", "filename": "src/librustc_builtin_macros/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fassert.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -7,7 +7,7 @@ use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n pub fn expand_assert<'cx>("}, {"sha": "8a1741c0654660347b40fc71607b3db784d3f8b2", "filename": "src/librustc_builtin_macros/concat_idents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fconcat_idents.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_expand::base::{self, *};\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n \n pub fn expand_concat_idents<'cx>(\n@@ -39,10 +39,10 @@ pub fn expand_concat_idents<'cx>(\n         }\n     }\n \n-    let ident = ast::Ident::new(Symbol::intern(&res_str), cx.with_call_site_ctxt(sp));\n+    let ident = Ident::new(Symbol::intern(&res_str), cx.with_call_site_ctxt(sp));\n \n     struct ConcatIdentsResult {\n-        ident: ast::Ident,\n+        ident: Ident,\n     }\n \n     impl base::MacResult for ConcatIdentsResult {"}, {"sha": "5dbf3825ce6930139a38e0163f274682350f39f2", "filename": "src/librustc_builtin_macros/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fclone.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -5,7 +5,7 @@ use crate::deriving::path_std;\n use rustc_ast::ast::{self, Expr, GenericArg, Generics, ItemKind, MetaItem, VariantData};\n use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n pub fn expand_deriving_clone(\n@@ -135,8 +135,7 @@ fn cs_clone_shallow(\n     let mut stmts = Vec::new();\n     if is_union {\n         // let _: AssertParamIsCopy<Self>;\n-        let self_ty =\n-            cx.ty_path(cx.path_ident(trait_span, ast::Ident::with_dummy_span(kw::SelfUpper)));\n+        let self_ty = cx.ty_path(cx.path_ident(trait_span, Ident::with_dummy_span(kw::SelfUpper)));\n         assert_ty_bounds(cx, &mut stmts, self_ty, trait_span, \"AssertParamIsCopy\");\n     } else {\n         match *substr.fields {"}, {"sha": "b3b15b897828a6adfa9846f2d8ecbae6edc6d6a3", "filename": "src/librustc_builtin_macros/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Feq.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -2,10 +2,10 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n-use rustc_ast::ast::{self, Expr, GenericArg, Ident, MetaItem};\n+use rustc_ast::ast::{self, Expr, GenericArg, MetaItem};\n use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n \n pub fn expand_deriving_eq("}, {"sha": "030d2c837428ba915bb3710eba7513ea86b0b511", "filename": "src/librustc_builtin_macros/deriving/cmp/ord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Ford.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -5,7 +5,7 @@ use crate::deriving::path_std;\n use rustc_ast::ast::{self, Expr, MetaItem};\n use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n \n pub fn expand_deriving_ord(\n@@ -45,15 +45,15 @@ pub fn expand_deriving_ord(\n pub fn ordering_collapsed(\n     cx: &mut ExtCtxt<'_>,\n     span: Span,\n-    self_arg_tags: &[ast::Ident],\n+    self_arg_tags: &[Ident],\n ) -> P<ast::Expr> {\n     let lft = cx.expr_ident(span, self_arg_tags[0]);\n     let rgt = cx.expr_addr_of(span, cx.expr_ident(span, self_arg_tags[1]));\n-    cx.expr_method_call(span, lft, ast::Ident::new(sym::cmp, span), vec![rgt])\n+    cx.expr_method_call(span, lft, Ident::new(sym::cmp, span), vec![rgt])\n }\n \n pub fn cs_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n-    let test_id = ast::Ident::new(sym::cmp, span);\n+    let test_id = Ident::new(sym::cmp, span);\n     let equals_path = cx.path_global(span, cx.std_path(&[sym::cmp, sym::Ordering, sym::Equal]));\n \n     let cmp_path = cx.std_path(&[sym::cmp, sym::Ord, sym::cmp]);"}, {"sha": "f29f91e82312befde7d93c190d569e1caa421b26", "filename": "src/librustc_builtin_macros/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -7,7 +7,7 @@ use crate::deriving::{path_local, path_std, pathvec_std};\n use rustc_ast::ast::{self, BinOpKind, Expr, MetaItem};\n use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n \n pub fn expand_deriving_partial_ord(\n@@ -104,7 +104,7 @@ pub fn some_ordering_collapsed(\n     cx: &mut ExtCtxt<'_>,\n     span: Span,\n     op: OrderingOp,\n-    self_arg_tags: &[ast::Ident],\n+    self_arg_tags: &[Ident],\n ) -> P<ast::Expr> {\n     let lft = cx.expr_ident(span, self_arg_tags[0]);\n     let rgt = cx.expr_addr_of(span, cx.expr_ident(span, self_arg_tags[1]));\n@@ -119,7 +119,7 @@ pub fn some_ordering_collapsed(\n }\n \n pub fn cs_partial_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n-    let test_id = ast::Ident::new(sym::cmp, span);\n+    let test_id = Ident::new(sym::cmp, span);\n     let ordering = cx.path_global(span, cx.std_path(&[sym::cmp, sym::Ordering, sym::Equal]));\n     let ordering_expr = cx.expr_path(ordering.clone());\n     let equals_expr = cx.expr_some(span, ordering_expr);"}, {"sha": "99c2b6f8a4eac38dfba90b50d999f303c342fd80", "filename": "src/librustc_builtin_macros/deriving/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdebug.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -2,11 +2,11 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n-use rustc_ast::ast::{self, Ident};\n+use rustc_ast::ast;\n use rustc_ast::ast::{Expr, MetaItem};\n use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n pub fn expand_deriving_debug("}, {"sha": "0ba9df08383a4ab70d0d09386f0878584a58b5f2", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -181,15 +181,15 @@ use std::cell::RefCell;\n use std::iter;\n use std::vec;\n \n-use rustc_ast::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n+use rustc_ast::ast::{self, BinOpKind, EnumDef, Expr, Generics, PatKind};\n use rustc_ast::ast::{GenericArg, GenericParamKind, VariantData};\n use rustc_ast::ptr::P;\n use rustc_attr as attr;\n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n use ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n@@ -222,7 +222,7 @@ pub struct TraitDef<'a> {\n \n     pub methods: Vec<MethodDef<'a>>,\n \n-    pub associated_types: Vec<(ast::Ident, Ty<'a>)>,\n+    pub associated_types: Vec<(Ident, Ty<'a>)>,\n }\n \n pub struct MethodDef<'a> {\n@@ -336,14 +336,14 @@ pub fn combine_substructure(\n /// is not global and starts with `T`, or a `TyQPath`.\n fn find_type_parameters(\n     ty: &ast::Ty,\n-    ty_param_names: &[ast::Name],\n+    ty_param_names: &[Symbol],\n     cx: &ExtCtxt<'_>,\n ) -> Vec<P<ast::Ty>> {\n     use rustc_ast::visit;\n \n     struct Visitor<'a, 'b> {\n         cx: &'a ExtCtxt<'b>,\n-        ty_param_names: &'a [ast::Name],\n+        ty_param_names: &'a [Symbol],\n         types: Vec<P<ast::Ty>>,\n     }\n \n@@ -620,7 +620,7 @@ impl<'a> TraitDef<'a> {\n                 .peekable();\n \n             if ty_params.peek().is_some() {\n-                let ty_param_names: Vec<ast::Name> =\n+                let ty_param_names: Vec<Symbol> =\n                     ty_params.map(|ty_param| ty_param.ident.name).collect();\n \n                 for field_ty in field_tys {\n@@ -1223,7 +1223,7 @@ impl<'a> MethodDef<'a> {\n             .collect::<Vec<String>>();\n \n         let self_arg_idents =\n-            self_arg_names.iter().map(|name| cx.ident_of(name, sp)).collect::<Vec<ast::Ident>>();\n+            self_arg_names.iter().map(|name| cx.ident_of(name, sp)).collect::<Vec<Ident>>();\n \n         // The `vi_idents` will be bound, solely in the catch-all, to\n         // a series of let statements mapping each self_arg to an int\n@@ -1234,7 +1234,7 @@ impl<'a> MethodDef<'a> {\n                 let vi_suffix = format!(\"{}_vi\", &name[..]);\n                 cx.ident_of(&vi_suffix[..], trait_.span)\n             })\n-            .collect::<Vec<ast::Ident>>();\n+            .collect::<Vec<Ident>>();\n \n         // Builds, via callback to call_substructure_method, the\n         // delegated expression that handles the catch-all case,\n@@ -1598,7 +1598,7 @@ impl<'a> TraitDef<'a> {\n     fn create_subpatterns(\n         &self,\n         cx: &mut ExtCtxt<'_>,\n-        field_paths: Vec<ast::Ident>,\n+        field_paths: Vec<Ident>,\n         mutbl: ast::Mutability,\n         use_temporaries: bool,\n     ) -> Vec<P<ast::Pat>> {\n@@ -1670,7 +1670,7 @@ impl<'a> TraitDef<'a> {\n     fn create_enum_variant_pattern(\n         &self,\n         cx: &mut ExtCtxt<'_>,\n-        enum_ident: ast::Ident,\n+        enum_ident: Ident,\n         variant: &'a ast::Variant,\n         prefix: &str,\n         mutbl: ast::Mutability,"}, {"sha": "62cbdb19a8894e0700b66cefdef55af657b28a0f", "filename": "src/librustc_builtin_macros/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -4,11 +4,11 @@\n pub use PtrTy::*;\n pub use Ty::*;\n \n-use rustc_ast::ast::{self, Expr, GenericArg, GenericParamKind, Generics, Ident, SelfKind};\n+use rustc_ast::ast::{self, Expr, GenericArg, GenericParamKind, Generics, SelfKind};\n use rustc_ast::ptr::P;\n use rustc_expand::base::ExtCtxt;\n use rustc_span::source_map::{respan, DUMMY_SP};\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, Ident};\n use rustc_span::Span;\n \n /// The types of pointers"}, {"sha": "9660cade3824115cd58565a4e29564fc6eb82b60", "filename": "src/librustc_builtin_macros/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,7 +3,7 @@\n use rustc_ast::ast::{self, ItemKind, MetaItem};\n use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, MultiItemModifier};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n \n macro path_local($x:ident) {\n@@ -154,7 +154,7 @@ fn inject_impl_of_structural_trait(\n \n     let newitem = cx.item(\n         span,\n-        ast::Ident::invalid(),\n+        Ident::invalid(),\n         attrs,\n         ItemKind::Impl {\n             unsafety: ast::Unsafe::No,"}, {"sha": "21e1889513b01457049ba6287c2e25fa9c117a23", "filename": "src/librustc_builtin_macros/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fenv.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,10 +3,10 @@\n // interface.\n //\n \n-use rustc_ast::ast::{self, GenericArg, Ident};\n+use rustc_ast::ast::{self, GenericArg};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_expand::base::{self, *};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n use std::env;"}, {"sha": "efce62881985ef68e760241f327a59661fdaeeed", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span};\n \n use std::borrow::Cow;\n@@ -535,7 +535,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         self.count_args_index_offset = sofar;\n     }\n \n-    fn rtpath(ecx: &ExtCtxt<'_>, s: &str) -> Vec<ast::Ident> {\n+    fn rtpath(ecx: &ExtCtxt<'_>, s: &str) -> Vec<Ident> {\n         ecx.std_path(&[sym::fmt, sym::rt, sym::v1, Symbol::intern(s)])\n     }\n \n@@ -794,7 +794,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         macsp: Span,\n         mut sp: Span,\n         ty: &ArgumentType,\n-        arg: ast::Ident,\n+        arg: Ident,\n     ) -> P<ast::Expr> {\n         sp = ecx.with_def_site_ctxt(sp);\n         let arg = ecx.expr_ident(sp, arg);"}, {"sha": "feda17c1812cb2a5baa280b2912cb3822dccc878", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,13 +1,13 @@\n use crate::util::check_builtin_macro_attribute;\n \n-use rustc_ast::ast::{self, Attribute, Expr, FnHeader, FnSig, Generics, Ident, Param};\n+use rustc_ast::ast::{self, Attribute, Expr, FnHeader, FnSig, Generics, Param};\n use rustc_ast::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n use rustc_ast::expand::allocator::{\n     AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS,\n };\n use rustc_ast::ptr::P;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n pub fn expand("}, {"sha": "2729239f62b9086953bb62f541eb9c478674cee5", "filename": "src/librustc_builtin_macros/global_asm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -15,6 +15,7 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::DiagnosticBuilder;\n use rustc_expand::base::{self, *};\n use rustc_span::source_map::respan;\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use smallvec::smallvec;\n \n@@ -25,7 +26,7 @@ pub fn expand_global_asm<'cx>(\n ) -> Box<dyn base::MacResult + 'cx> {\n     match parse_global_asm(cx, sp, tts) {\n         Ok(Some(global_asm)) => MacEager::items(smallvec![P(ast::Item {\n-            ident: ast::Ident::invalid(),\n+            ident: Ident::invalid(),\n             attrs: Vec::new(),\n             id: ast::DUMMY_NODE_ID,\n             kind: ast::ItemKind::GlobalAsm(P(global_asm)),"}, {"sha": "cc77bb73c5ae14fb6afd1b1cc173ad86043669bb", "filename": "src/librustc_builtin_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flib.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -14,11 +14,10 @@ extern crate proc_macro;\n \n use crate::deriving::*;\n \n-use rustc_ast::ast::Ident;\n use rustc_expand::base::{MacroExpanderFn, Resolver, SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::BangProcMacro;\n use rustc_span::edition::Edition;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Ident};\n \n mod assert;\n mod cfg;"}, {"sha": "adaf5f03079eb061096323c8bb36679d4be6ff3c", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,6 +1,6 @@\n use std::mem;\n \n-use rustc_ast::ast::{self, Ident, NodeId};\n+use rustc_ast::ast::{self, NodeId};\n use rustc_ast::attr;\n use rustc_ast::expand::is_proc_macro_attr;\n use rustc_ast::ptr::P;\n@@ -11,17 +11,17 @@ use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_session::parse::ParseSess;\n use rustc_span::hygiene::AstPass;\n use rustc_span::source_map::SourceMap;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::smallvec;\n use std::cell::RefCell;\n \n struct ProcMacroDerive {\n     id: NodeId,\n-    trait_name: ast::Name,\n+    trait_name: Symbol,\n     function_name: Ident,\n     span: Span,\n-    attrs: Vec<ast::Name>,\n+    attrs: Vec<Symbol>,\n }\n \n enum ProcMacroDefType {\n@@ -480,7 +480,7 @@ fn mk_decls(\n \n     let anon_constant = cx.item_const(\n         span,\n-        ast::Ident::new(kw::Underscore, span),\n+        Ident::new(kw::Underscore, span),\n         cx.ty(span, ast::TyKind::Tup(Vec::new())),\n         block,\n     );"}, {"sha": "cd3773c76c483ec5dcfaa968f81a5f4b9a9ef3f2", "filename": "src/librustc_builtin_macros/standard_library_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -60,17 +60,17 @@ pub fn inject(\n     let name = names[0];\n \n     let import_path = if rust_2018 {\n-        [name, sym::prelude, sym::v1].iter().map(|symbol| ast::Ident::new(*symbol, span)).collect()\n+        [name, sym::prelude, sym::v1].iter().map(|symbol| Ident::new(*symbol, span)).collect()\n     } else {\n         [kw::PathRoot, name, sym::prelude, sym::v1]\n             .iter()\n-            .map(|symbol| ast::Ident::new(*symbol, span))\n+            .map(|symbol| Ident::new(*symbol, span))\n             .collect()\n     };\n \n     let use_item = cx.item(\n         span,\n-        ast::Ident::invalid(),\n+        Ident::invalid(),\n         vec![cx.attribute(cx.meta_word(span, sym::prelude_import))],\n         ast::ItemKind::Use(P(ast::UseTree {\n             prefix: cx.path(span, import_path),"}, {"sha": "d62f34bab1a31e41685071989d2a4160de90b709", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -7,7 +7,7 @@ use rustc_ast::attr;\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n use rustc_span::source_map::respan;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n \n use std::iter;\n@@ -105,7 +105,7 @@ pub fn expand_test_or_bench(\n \n     let (sp, attr_sp) = (cx.with_def_site_ctxt(item.span), cx.with_def_site_ctxt(attr_sp));\n \n-    let test_id = ast::Ident::new(sym::test, attr_sp);\n+    let test_id = Ident::new(sym::test, attr_sp);\n \n     // creates test::$name\n     let test_path = |name| cx.path(sp, vec![test_id, cx.ident_of(name, sp)]);\n@@ -172,12 +172,12 @@ pub fn expand_test_or_bench(\n \n     let mut test_const = cx.item(\n         sp,\n-        ast::Ident::new(item.ident.name, sp),\n+        Ident::new(item.ident.name, sp),\n         vec![\n             // #[cfg(test)]\n             cx.attribute(attr::mk_list_item(\n-                ast::Ident::new(sym::cfg, attr_sp),\n-                vec![attr::mk_nested_word_item(ast::Ident::new(sym::test, attr_sp))],\n+                Ident::new(sym::cfg, attr_sp),\n+                vec![attr::mk_nested_word_item(Ident::new(sym::test, attr_sp))],\n             )),\n             // #[rustc_test_marker]\n             cx.attribute(cx.meta_word(attr_sp, sym::rustc_test_marker)),\n@@ -288,7 +288,7 @@ pub fn expand_test_or_bench(\n     ]\n }\n \n-fn item_path(mod_path: &[ast::Ident], item_ident: &ast::Ident) -> String {\n+fn item_path(mod_path: &[Ident], item_ident: &Ident) -> String {\n     mod_path\n         .iter()\n         .chain(iter::once(item_ident))"}, {"sha": "34ed4c800e04ff62d0deefb960a2defc83546bd3", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,7 +1,7 @@\n // Code that generates a test runner to run all the tests in a crate\n \n use log::debug;\n-use rustc_ast::ast::{self, Ident};\n+use rustc_ast::ast;\n use rustc_ast::attr;\n use rustc_ast::entry::{self, EntryPointType};\n use rustc_ast::mut_visit::{ExpectOne, *};\n@@ -12,7 +12,7 @@ use rustc_feature::Features;\n use rustc_session::parse::ParseSess;\n use rustc_span::hygiene::{AstPass, SyntaxContext, Transparency};\n use rustc_span::source_map::respan;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::PanicStrategy;\n use smallvec::{smallvec, SmallVec};"}, {"sha": "fb9a27ed001f43bd4ad1a03d6b82037b7304d011", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -19,7 +19,6 @@ use crate::llvm::debuginfo::{\n use crate::value::Value;\n \n use log::debug;\n-use rustc_ast::ast;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -93,7 +92,7 @@ pub const UNKNOWN_COLUMN_NUMBER: c_uint = 0;\n pub const NO_SCOPE_METADATA: Option<&DIScope> = None;\n \n #[derive(Copy, Debug, Hash, Eq, PartialEq, Clone)]\n-pub struct UniqueTypeId(ast::Name);\n+pub struct UniqueTypeId(Symbol);\n \n /// The `TypeMap` is where the `CrateDebugContext` holds the type metadata nodes\n /// created so far. The metadata nodes are indexed by `UniqueTypeId`, and, for\n@@ -1300,7 +1299,7 @@ fn use_enum_fallback(cx: &CodegenCx<'_, '_>) -> bool {\n fn generator_layout_and_saved_local_names(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n-) -> (&'tcx GeneratorLayout<'tcx>, IndexVec<mir::GeneratorSavedLocal, Option<ast::Name>>) {\n+) -> (&'tcx GeneratorLayout<'tcx>, IndexVec<mir::GeneratorSavedLocal, Option<Symbol>>) {\n     let body = tcx.optimized_mir(def_id);\n     let generator_layout = body.generator_layout.as_ref().unwrap();\n     let mut generator_saved_local_names = IndexVec::from_elem(None, &generator_layout.field_tys);\n@@ -1656,7 +1655,7 @@ enum VariantInfo<'a, 'tcx> {\n     Generator {\n         substs: SubstsRef<'tcx>,\n         generator_layout: &'tcx GeneratorLayout<'tcx>,\n-        generator_saved_local_names: &'a IndexVec<mir::GeneratorSavedLocal, Option<ast::Name>>,\n+        generator_saved_local_names: &'a IndexVec<mir::GeneratorSavedLocal, Option<Symbol>>,\n         variant_index: VariantIdx,\n     },\n }"}, {"sha": "8c9a2c09c272c41558fda7dae7c57f609ae2ed09", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -17,7 +17,6 @@ use crate::llvm::debuginfo::{\n };\n use crate::value::Value;\n \n-use rustc_ast::ast;\n use rustc_codegen_ssa::debuginfo::type_names;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext, VariableKind};\n use rustc_codegen_ssa::traits::*;\n@@ -529,7 +528,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn create_dbg_var(\n         &self,\n         dbg_context: &FunctionDebugContext<&'ll DIScope>,\n-        variable_name: ast::Name,\n+        variable_name: Symbol,\n         variable_type: Ty<'tcx>,\n         scope_metadata: &'ll DIScope,\n         variable_kind: VariableKind,"}, {"sha": "1ee0f489ffc104ef2daefa3ec07834790190744e", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,10 +1,9 @@\n use super::BackendTypes;\n use crate::mir::debuginfo::{FunctionDebugContext, VariableKind};\n-use rustc_ast::ast::Name;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::mir;\n use rustc_middle::ty::{Instance, Ty};\n-use rustc_span::{SourceFile, Span};\n+use rustc_span::{SourceFile, Span, Symbol};\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::Size;\n \n@@ -36,7 +35,7 @@ pub trait DebugInfoMethods<'tcx>: BackendTypes {\n     fn create_dbg_var(\n         &self,\n         dbg_context: &FunctionDebugContext<Self::DIScope>,\n-        variable_name: Name,\n+        variable_name: Symbol,\n         variable_type: Ty<'tcx>,\n         scope_metadata: Self::DIScope,\n         variable_kind: VariableKind,"}, {"sha": "a443b8f464f1c08fb1b4edd1ece6b25d317ce56f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -11,6 +11,7 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n use rustc_session::config::{Input, PpMode, PpSourceMode};\n use rustc_session::Session;\n+use rustc_span::symbol::Ident;\n use rustc_span::FileName;\n \n use std::cell::Cell;\n@@ -284,7 +285,7 @@ impl<'a> PrinterSupport for HygieneAnnotation<'a> {\n impl<'a> pprust::PpAnn for HygieneAnnotation<'a> {\n     fn post(&self, s: &mut pprust::State<'_>, node: pprust::AnnNode<'_>) {\n         match node {\n-            pprust::AnnNode::Ident(&ast::Ident { name, span }) => {\n+            pprust::AnnNode::Ident(&Ident { name, span }) => {\n                 s.s.space();\n                 s.synth_comment(format!(\"{}{:?}\", name.as_u32(), span.ctxt()))\n             }"}, {"sha": "fe5bf6f82c6d38b44a9cf9177f30079feba1a06a", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,7 +1,7 @@\n use crate::expand::{self, AstFragment, Invocation};\n use crate::module::DirectoryOwnership;\n \n-use rustc_ast::ast::{self, Attribute, Name, NodeId, PatKind};\n+use rustc_ast::ast::{self, Attribute, NodeId, PatKind};\n use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n@@ -796,7 +796,7 @@ impl SyntaxExtension {\n         span: Span,\n         helper_attrs: Vec<Symbol>,\n         edition: Edition,\n-        name: Name,\n+        name: Symbol,\n         attrs: &[ast::Attribute],\n     ) -> SyntaxExtension {\n         let allow_internal_unstable = attr::allow_internal_unstable(&attrs, &sess.span_diagnostic)\n@@ -885,7 +885,7 @@ pub trait Resolver {\n \n     fn resolve_dollar_crates(&mut self);\n     fn visit_ast_fragment_with_placeholders(&mut self, expn_id: ExpnId, fragment: &AstFragment);\n-    fn register_builtin_macro(&mut self, ident: ast::Ident, ext: SyntaxExtension);\n+    fn register_builtin_macro(&mut self, ident: Ident, ext: SyntaxExtension);\n \n     fn expansion_for_ast_pass(\n         &mut self,\n@@ -913,7 +913,7 @@ pub trait Resolver {\n \n #[derive(Clone)]\n pub struct ModuleData {\n-    pub mod_path: Vec<ast::Ident>,\n+    pub mod_path: Vec<Ident>,\n     pub directory: PathBuf,\n }\n \n@@ -1052,16 +1052,16 @@ impl<'a> ExtCtxt<'a> {\n     pub fn set_trace_macros(&mut self, x: bool) {\n         self.ecfg.trace_mac = x\n     }\n-    pub fn ident_of(&self, st: &str, sp: Span) -> ast::Ident {\n-        ast::Ident::from_str_and_span(st, sp)\n+    pub fn ident_of(&self, st: &str, sp: Span) -> Ident {\n+        Ident::from_str_and_span(st, sp)\n     }\n-    pub fn std_path(&self, components: &[Symbol]) -> Vec<ast::Ident> {\n+    pub fn std_path(&self, components: &[Symbol]) -> Vec<Ident> {\n         let def_site = self.with_def_site_ctxt(DUMMY_SP);\n         iter::once(Ident::new(kw::DollarCrate, def_site))\n             .chain(components.iter().map(|&s| Ident::with_dummy_span(s)))\n             .collect()\n     }\n-    pub fn name_of(&self, st: &str) -> ast::Name {\n+    pub fn name_of(&self, st: &str) -> Symbol {\n         Symbol::intern(st)\n     }\n "}, {"sha": "be2c52a85eb2ac5c6c7e00b14cf0ce02f9ed54f1", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,28 +1,28 @@\n use crate::base::ExtCtxt;\n \n-use rustc_ast::ast::{self, AttrVec, BlockCheckMode, Expr, Ident, PatKind, UnOp};\n+use rustc_ast::ast::{self, AttrVec, BlockCheckMode, Expr, PatKind, UnOp};\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_span::source_map::{respan, Spanned};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n use rustc_span::Span;\n \n impl<'a> ExtCtxt<'a> {\n-    pub fn path(&self, span: Span, strs: Vec<ast::Ident>) -> ast::Path {\n+    pub fn path(&self, span: Span, strs: Vec<Ident>) -> ast::Path {\n         self.path_all(span, false, strs, vec![])\n     }\n-    pub fn path_ident(&self, span: Span, id: ast::Ident) -> ast::Path {\n+    pub fn path_ident(&self, span: Span, id: Ident) -> ast::Path {\n         self.path(span, vec![id])\n     }\n-    pub fn path_global(&self, span: Span, strs: Vec<ast::Ident>) -> ast::Path {\n+    pub fn path_global(&self, span: Span, strs: Vec<Ident>) -> ast::Path {\n         self.path_all(span, true, strs, vec![])\n     }\n     pub fn path_all(\n         &self,\n         span: Span,\n         global: bool,\n-        mut idents: Vec<ast::Ident>,\n+        mut idents: Vec<Ident>,\n         args: Vec<ast::GenericArg>,\n     ) -> ast::Path {\n         assert!(!idents.is_empty());\n@@ -63,7 +63,7 @@ impl<'a> ExtCtxt<'a> {\n \n     // Might need to take bounds as an argument in the future, if you ever want\n     // to generate a bounded existential trait type.\n-    pub fn ty_ident(&self, span: Span, ident: ast::Ident) -> P<ast::Ty> {\n+    pub fn ty_ident(&self, span: Span, ident: Ident) -> P<ast::Ty> {\n         self.ty_path(self.path_ident(span, ident))\n     }\n \n@@ -74,7 +74,7 @@ impl<'a> ExtCtxt<'a> {\n         }\n     }\n \n-    pub fn const_ident(&self, span: Span, ident: ast::Ident) -> ast::AnonConst {\n+    pub fn const_ident(&self, span: Span, ident: Ident) -> ast::AnonConst {\n         self.anon_const(span, ast::ExprKind::Path(None, self.path_ident(span, ident)))\n     }\n \n@@ -95,7 +95,7 @@ impl<'a> ExtCtxt<'a> {\n     pub fn typaram(\n         &self,\n         span: Span,\n-        ident: ast::Ident,\n+        ident: Ident,\n         attrs: Vec<ast::Attribute>,\n         bounds: ast::GenericBounds,\n         default: Option<P<ast::Ty>>,\n@@ -129,14 +129,14 @@ impl<'a> ExtCtxt<'a> {\n         )\n     }\n \n-    pub fn lifetime(&self, span: Span, ident: ast::Ident) -> ast::Lifetime {\n+    pub fn lifetime(&self, span: Span, ident: Ident) -> ast::Lifetime {\n         ast::Lifetime { id: ast::DUMMY_NODE_ID, ident: ident.with_span_pos(span) }\n     }\n \n     pub fn lifetime_def(\n         &self,\n         span: Span,\n-        ident: ast::Ident,\n+        ident: Ident,\n         attrs: Vec<ast::Attribute>,\n         bounds: ast::GenericBounds,\n     ) -> ast::GenericParam {\n@@ -155,13 +155,7 @@ impl<'a> ExtCtxt<'a> {\n         ast::Stmt { id: ast::DUMMY_NODE_ID, span: expr.span, kind: ast::StmtKind::Expr(expr) }\n     }\n \n-    pub fn stmt_let(\n-        &self,\n-        sp: Span,\n-        mutbl: bool,\n-        ident: ast::Ident,\n-        ex: P<ast::Expr>,\n-    ) -> ast::Stmt {\n+    pub fn stmt_let(&self, sp: Span, mutbl: bool, ident: Ident, ex: P<ast::Expr>) -> ast::Stmt {\n         let pat = if mutbl {\n             let binding_mode = ast::BindingMode::ByValue(ast::Mutability::Mut);\n             self.pat_ident_binding_mode(sp, ident, binding_mode)\n@@ -218,7 +212,7 @@ impl<'a> ExtCtxt<'a> {\n         self.expr(path.span, ast::ExprKind::Path(None, path))\n     }\n \n-    pub fn expr_ident(&self, span: Span, id: ast::Ident) -> P<ast::Expr> {\n+    pub fn expr_ident(&self, span: Span, id: Ident) -> P<ast::Expr> {\n         self.expr_path(self.path_ident(span, id))\n     }\n     pub fn expr_self(&self, span: Span) -> P<ast::Expr> {\n@@ -251,18 +245,13 @@ impl<'a> ExtCtxt<'a> {\n     ) -> P<ast::Expr> {\n         self.expr(span, ast::ExprKind::Call(expr, args))\n     }\n-    pub fn expr_call_ident(\n-        &self,\n-        span: Span,\n-        id: ast::Ident,\n-        args: Vec<P<ast::Expr>>,\n-    ) -> P<ast::Expr> {\n+    pub fn expr_call_ident(&self, span: Span, id: Ident, args: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n         self.expr(span, ast::ExprKind::Call(self.expr_ident(span, id), args))\n     }\n     pub fn expr_call_global(\n         &self,\n         sp: Span,\n-        fn_path: Vec<ast::Ident>,\n+        fn_path: Vec<Ident>,\n         args: Vec<P<ast::Expr>>,\n     ) -> P<ast::Expr> {\n         let pathexpr = self.expr_path(self.path_global(sp, fn_path));\n@@ -272,7 +261,7 @@ impl<'a> ExtCtxt<'a> {\n         &self,\n         span: Span,\n         expr: P<ast::Expr>,\n-        ident: ast::Ident,\n+        ident: Ident,\n         mut args: Vec<P<ast::Expr>>,\n     ) -> P<ast::Expr> {\n         args.insert(0, expr);\n@@ -304,7 +293,7 @@ impl<'a> ExtCtxt<'a> {\n     pub fn expr_struct_ident(\n         &self,\n         span: Span,\n-        id: ast::Ident,\n+        id: Ident,\n         fields: Vec<ast::Field>,\n     ) -> P<ast::Expr> {\n         self.expr_struct(span, self.path_ident(span, id), fields)\n@@ -405,15 +394,15 @@ impl<'a> ExtCtxt<'a> {\n     pub fn pat_lit(&self, span: Span, expr: P<ast::Expr>) -> P<ast::Pat> {\n         self.pat(span, PatKind::Lit(expr))\n     }\n-    pub fn pat_ident(&self, span: Span, ident: ast::Ident) -> P<ast::Pat> {\n+    pub fn pat_ident(&self, span: Span, ident: Ident) -> P<ast::Pat> {\n         let binding_mode = ast::BindingMode::ByValue(ast::Mutability::Not);\n         self.pat_ident_binding_mode(span, ident, binding_mode)\n     }\n \n     pub fn pat_ident_binding_mode(\n         &self,\n         span: Span,\n-        ident: ast::Ident,\n+        ident: Ident,\n         bm: ast::BindingMode,\n     ) -> P<ast::Pat> {\n         let pat = PatKind::Ident(bm, ident.with_span_pos(span), None);\n@@ -517,7 +506,7 @@ impl<'a> ExtCtxt<'a> {\n         )\n     }\n \n-    pub fn lambda(&self, span: Span, ids: Vec<ast::Ident>, body: P<ast::Expr>) -> P<ast::Expr> {\n+    pub fn lambda(&self, span: Span, ids: Vec<Ident>, body: P<ast::Expr>) -> P<ast::Expr> {\n         let fn_decl = self.fn_decl(\n             ids.iter().map(|id| self.param(span, *id, self.ty(span, ast::TyKind::Infer))).collect(),\n             ast::FnRetTy::Default(span),\n@@ -544,20 +533,15 @@ impl<'a> ExtCtxt<'a> {\n         self.lambda(span, Vec::new(), body)\n     }\n \n-    pub fn lambda1(&self, span: Span, body: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr> {\n+    pub fn lambda1(&self, span: Span, body: P<ast::Expr>, ident: Ident) -> P<ast::Expr> {\n         self.lambda(span, vec![ident], body)\n     }\n \n-    pub fn lambda_stmts_1(\n-        &self,\n-        span: Span,\n-        stmts: Vec<ast::Stmt>,\n-        ident: ast::Ident,\n-    ) -> P<ast::Expr> {\n+    pub fn lambda_stmts_1(&self, span: Span, stmts: Vec<ast::Stmt>, ident: Ident) -> P<ast::Expr> {\n         self.lambda1(span, self.expr_block(self.block(span, stmts)), ident)\n     }\n \n-    pub fn param(&self, span: Span, ident: ast::Ident, ty: P<ast::Ty>) -> ast::Param {\n+    pub fn param(&self, span: Span, ident: Ident, ty: P<ast::Ty>) -> ast::Param {\n         let arg_pat = self.pat_ident(span, ident);\n         ast::Param {\n             attrs: AttrVec::default(),\n@@ -653,7 +637,7 @@ impl<'a> ExtCtxt<'a> {\n         attr::mk_attr_outer(mi)\n     }\n \n-    pub fn meta_word(&self, sp: Span, w: ast::Name) -> ast::MetaItem {\n+    pub fn meta_word(&self, sp: Span, w: Symbol) -> ast::MetaItem {\n         attr::mk_word_item(Ident::new(w, sp))\n     }\n }"}, {"sha": "427d04d3a9753472b6ce0414f8c2ae1f255710c4", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -7,7 +7,7 @@ use crate::module::{parse_external_mod, push_directory, Directory, DirectoryOwne\n use crate::placeholders::{placeholder, PlaceholderExpander};\n use crate::proc_macro::collect_derives;\n \n-use rustc_ast::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n+use rustc_ast::ast::{self, AttrItem, Block, LitKind, NodeId, PatKind, Path};\n use rustc_ast::ast::{ItemKind, MacArgs, MacStmtStyle, StmtKind};\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n@@ -25,7 +25,7 @@ use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::source_map::respan;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{FileName, Span, DUMMY_SP};\n \n use smallvec::{smallvec, SmallVec};"}, {"sha": "a728261d711a72464f99b078f6003854bbb20a35", "filename": "src/librustc_expand/mbe.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -9,10 +9,10 @@ crate mod macro_rules;\n crate mod quoted;\n crate mod transcribe;\n \n-use rustc_ast::ast;\n use rustc_ast::token::{self, Token, TokenKind};\n use rustc_ast::tokenstream::DelimSpan;\n \n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use rustc_data_structures::sync::Lrc;\n@@ -82,13 +82,9 @@ enum TokenTree {\n     /// A kleene-style repetition sequence\n     Sequence(DelimSpan, Lrc<SequenceRepetition>),\n     /// e.g., `$var`\n-    MetaVar(Span, ast::Ident),\n+    MetaVar(Span, Ident),\n     /// e.g., `$var:expr`. This is only used in the left hand side of MBE macros.\n-    MetaVarDecl(\n-        Span,\n-        ast::Ident, /* name to bind */\n-        ast::Ident, /* kind of nonterminal */\n-    ),\n+    MetaVarDecl(Span, Ident /* name to bind */, Ident /* kind of nonterminal */),\n }\n \n impl TokenTree {"}, {"sha": "0cf092d912bcf5c0aa365ad85664785f80bff366", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -76,7 +76,6 @@ use TokenTreeOrTokenTreeSlice::*;\n \n use crate::mbe::{self, TokenTree};\n \n-use rustc_ast::ast::Name;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, DocComment, Nonterminal, Token};\n use rustc_ast_pretty::pprust;\n@@ -766,7 +765,7 @@ fn get_macro_ident(token: &Token) -> Option<(Ident, bool)> {\n ///\n /// Returning `false` is a *stability guarantee* that such a matcher will *never* begin with that\n /// token. Be conservative (return true) if not sure.\n-fn may_begin_with(token: &Token, name: Name) -> bool {\n+fn may_begin_with(token: &Token, name: Symbol) -> bool {\n     /// Checks whether the non-terminal may contain a single (non-keyword) identifier.\n     fn may_be_ident(nt: &token::Nonterminal) -> bool {\n         match *nt {"}, {"sha": "ecadf320f87c4101f557460209677e25f214c701", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -21,7 +21,7 @@ use rustc_parse::parser::Parser;\n use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::Transparency;\n-use rustc_span::symbol::{kw, sym, MacroRulesNormalizedIdent, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, MacroRulesNormalizedIdent, Symbol};\n use rustc_span::Span;\n \n use log::debug;\n@@ -39,7 +39,7 @@ crate struct ParserAnyMacro<'a> {\n     /// Span of the expansion site of the macro this parser is for\n     site_span: Span,\n     /// The ident of the macro we're parsing\n-    macro_ident: ast::Ident,\n+    macro_ident: Ident,\n     arm_span: Span,\n }\n \n@@ -88,7 +88,7 @@ fn emit_frag_parse_err(\n     parser: &Parser<'_>,\n     orig_parser: &mut Parser<'_>,\n     site_span: Span,\n-    macro_ident: ast::Ident,\n+    macro_ident: Ident,\n     arm_span: Span,\n     kind: AstFragmentKind,\n ) {\n@@ -166,7 +166,7 @@ impl<'a> ParserAnyMacro<'a> {\n }\n \n struct MacroRulesMacroExpander {\n-    name: ast::Ident,\n+    name: Ident,\n     span: Span,\n     transparency: Transparency,\n     lhses: Vec<mbe::TokenTree>,\n@@ -215,7 +215,7 @@ fn generic_extension<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n     def_span: Span,\n-    name: ast::Ident,\n+    name: Ident,\n     transparency: Transparency,\n     arg: TokenStream,\n     lhses: &[mbe::TokenTree],\n@@ -400,9 +400,9 @@ pub fn compile_declarative_macro(\n     };\n \n     let diag = &sess.span_diagnostic;\n-    let lhs_nm = ast::Ident::new(sym::lhs, def.span);\n-    let rhs_nm = ast::Ident::new(sym::rhs, def.span);\n-    let tt_spec = ast::Ident::new(sym::tt, def.span);\n+    let lhs_nm = Ident::new(sym::lhs, def.span);\n+    let rhs_nm = Ident::new(sym::rhs, def.span);\n+    let tt_spec = Ident::new(sym::tt, def.span);\n \n     // Parse the macro_rules! invocation\n     let (macro_rules, body) = match &def.kind {"}, {"sha": "3295f5b392d6dfb8a902f653bb51984823cef317", "filename": "src/librustc_expand/mbe/quoted.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,12 +1,11 @@\n use crate::mbe::macro_parser;\n use crate::mbe::{Delimited, KleeneOp, KleeneToken, SequenceRepetition, TokenTree};\n \n-use rustc_ast::ast;\n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream;\n use rustc_ast_pretty::pprust;\n use rustc_session::parse::ParseSess;\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, Ident};\n \n use rustc_span::Span;\n \n@@ -67,7 +66,7 @@ pub(super) fn parse(\n                     tree => tree.as_ref().map(tokenstream::TokenTree::span).unwrap_or(start_sp),\n                 };\n                 sess.missing_fragment_specifiers.borrow_mut().insert(span);\n-                result.push(TokenTree::MetaVarDecl(span, ident, ast::Ident::invalid()));\n+                result.push(TokenTree::MetaVarDecl(span, ident, Ident::invalid()));\n             }\n \n             // Not a metavar or no matchers allowed, so just return the tree\n@@ -145,7 +144,7 @@ fn parse_tree(\n                 let msg =\n                     format!(\"expected identifier, found `{}`\", pprust::token_to_string(&token),);\n                 sess.span_diagnostic.span_err(token.span, &msg);\n-                TokenTree::MetaVar(token.span, ast::Ident::invalid())\n+                TokenTree::MetaVar(token.span, Ident::invalid())\n             }\n \n             // There are no more tokens. Just return the `$` we already have."}, {"sha": "9bb2b57b7f591ff509e238bf2a5684afe286a217", "filename": "src/librustc_expand/module.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmodule.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,10 +1,10 @@\n-use rustc_ast::ast::{self, Attribute, Ident, Mod};\n+use rustc_ast::ast::{Attribute, Mod};\n use rustc_ast::{attr, token};\n use rustc_errors::{struct_span_err, PResult};\n use rustc_parse::new_parser_from_file;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FileName, Span};\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Ident};\n \n use std::path::{self, Path, PathBuf};\n \n@@ -18,7 +18,7 @@ pub struct Directory {\n pub enum DirectoryOwnership {\n     Owned {\n         // None if `mod.rs`, `Some(\"foo\")` if we're in `foo.rs`.\n-        relative: Option<ast::Ident>,\n+        relative: Option<Ident>,\n     },\n     UnownedViaBlock,\n     UnownedViaMod,\n@@ -40,7 +40,7 @@ pub struct ModulePathSuccess {\n \n crate fn parse_external_mod(\n     sess: &ParseSess,\n-    id: ast::Ident,\n+    id: Ident,\n     span: Span, // The span to blame on errors.\n     Directory { mut ownership, path }: Directory,\n     attrs: &mut Vec<Attribute>,\n@@ -125,7 +125,7 @@ crate fn push_directory(\n \n fn submod_path<'a>(\n     sess: &'a ParseSess,\n-    id: ast::Ident,\n+    id: Ident,\n     span: Span,\n     attrs: &[Attribute],\n     ownership: DirectoryOwnership,\n@@ -236,9 +236,9 @@ pub fn submod_path_from_attr(attrs: &[Attribute], dir_path: &Path) -> Option<Pat\n // Public for rustfmt usage.\n pub fn default_submod_path<'a>(\n     sess: &'a ParseSess,\n-    id: ast::Ident,\n+    id: Ident,\n     span: Span,\n-    relative: Option<ast::Ident>,\n+    relative: Option<Ident>,\n     dir_path: &Path,\n ) -> ModulePath<'a> {\n     // If we're in a foo.rs file instead of a mod.rs file,"}, {"sha": "48da1a3ccc420a41c70ca975cf02b2ab529983a8", "filename": "src/librustc_expand/mut_visit/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmut_visit%2Ftests.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,9 +1,10 @@\n use crate::tests::{matches_codepattern, string_to_crate};\n \n-use rustc_ast::ast::{self, Ident};\n+use rustc_ast::ast;\n use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::with_default_globals;\n use rustc_ast_pretty::pprust;\n+use rustc_span::symbol::Ident;\n \n // This version doesn't care about getting comments or doc-strings in.\n fn fake_print_crate(s: &mut pprust::State<'_>, krate: &ast::Crate) {\n@@ -14,7 +15,7 @@ fn fake_print_crate(s: &mut pprust::State<'_>, krate: &ast::Crate) {\n struct ToZzIdentMutVisitor;\n \n impl MutVisitor for ToZzIdentMutVisitor {\n-    fn visit_ident(&mut self, ident: &mut ast::Ident) {\n+    fn visit_ident(&mut self, ident: &mut Ident) {\n         *ident = Ident::from_str(\"zz\");\n     }\n     fn visit_mac(&mut self, mac: &mut ast::MacCall) {"}, {"sha": "437f6e62d7d330473b209b68a15f080bf5699aca", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,6 +1,6 @@\n use crate::tests::{matches_codepattern, string_to_stream, with_error_checking_parse};\n \n-use rustc_ast::ast::{self, Name, PatKind};\n+use rustc_ast::ast::{self, PatKind};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n@@ -100,12 +100,12 @@ fn string_to_tts_1() {\n \n         let expected = TokenStream::new(vec![\n             TokenTree::token(token::Ident(kw::Fn, false), sp(0, 2)).into(),\n-            TokenTree::token(token::Ident(Name::intern(\"a\"), false), sp(3, 4)).into(),\n+            TokenTree::token(token::Ident(Symbol::intern(\"a\"), false), sp(3, 4)).into(),\n             TokenTree::Delimited(\n                 DelimSpan::from_pair(sp(5, 6), sp(13, 14)),\n                 token::DelimToken::Paren,\n                 TokenStream::new(vec![\n-                    TokenTree::token(token::Ident(Name::intern(\"b\"), false), sp(6, 7)).into(),\n+                    TokenTree::token(token::Ident(Symbol::intern(\"b\"), false), sp(6, 7)).into(),\n                     TokenTree::token(token::Colon, sp(8, 9)).into(),\n                     TokenTree::token(token::Ident(sym::i32, false), sp(10, 13)).into(),\n                 ])\n@@ -116,7 +116,7 @@ fn string_to_tts_1() {\n                 DelimSpan::from_pair(sp(15, 16), sp(20, 21)),\n                 token::DelimToken::Brace,\n                 TokenStream::new(vec![\n-                    TokenTree::token(token::Ident(Name::intern(\"b\"), false), sp(17, 18)).into(),\n+                    TokenTree::token(token::Ident(Symbol::intern(\"b\"), false), sp(17, 18)).into(),\n                     TokenTree::token(token::Semi, sp(18, 19)).into(),\n                 ])\n                 .into(),"}, {"sha": "23f7a5b28fe80109558277d22d6ebc96e919e9db", "filename": "src/librustc_expand/placeholders.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fplaceholders.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -5,6 +5,7 @@ use rustc_ast::ast;\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n use rustc_span::source_map::{dummy_spanned, DUMMY_SP};\n+use rustc_span::symbol::Ident;\n \n use smallvec::{smallvec, SmallVec};\n \n@@ -23,7 +24,7 @@ pub fn placeholder(\n         }\n     }\n \n-    let ident = ast::Ident::invalid();\n+    let ident = Ident::invalid();\n     let attrs = Vec::new();\n     let vis = vis.unwrap_or_else(|| dummy_spanned(ast::VisibilityKind::Inherited));\n     let span = DUMMY_SP;"}, {"sha": "afc6dc36eb43017516a9a8632ff3ae437c7be5cd", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -10,7 +10,7 @@ use rustc_errors::Diagnostic;\n use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use rustc_session::parse::ParseSess;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{self, kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n \n use pm::bridge::{server, TokenTree};\n@@ -143,7 +143,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n             Ident(name, false) if name == kw::DollarCrate => tt!(Ident::dollar_crate()),\n             Ident(name, is_raw) => tt!(Ident::new(sess, name, is_raw)),\n             Lifetime(name) => {\n-                let ident = ast::Ident::new(name, span).without_first_quote();\n+                let ident = symbol::Ident::new(name, span).without_first_quote();\n                 stack.push(tt!(Ident::new(sess, ident.name, false)));\n                 tt!(Punct::new('\\'', true))\n             }"}, {"sha": "caaa08df499812105d4e654f0a8e2fbd97cbd93e", "filename": "src/librustc_expand/tokenstream/tests.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftokenstream%2Ftests.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,10 +1,9 @@\n use crate::tests::string_to_stream;\n \n-use rustc_ast::ast::Name;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{TokenStream, TokenStreamBuilder, TokenTree};\n use rustc_ast::with_default_globals;\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{BytePos, Span, Symbol};\n use smallvec::smallvec;\n \n fn string_to_ts(string: &str) -> TokenStream {\n@@ -87,7 +86,7 @@ fn test_is_empty() {\n     with_default_globals(|| {\n         let test0: TokenStream = Vec::<TokenTree>::new().into_iter().collect();\n         let test1: TokenStream =\n-            TokenTree::token(token::Ident(Name::intern(\"a\"), false), sp(0, 1)).into();\n+            TokenTree::token(token::Ident(Symbol::intern(\"a\"), false), sp(0, 1)).into();\n         let test2 = string_to_ts(\"foo(bar::baz)\");\n \n         assert_eq!(test0.is_empty(), true);"}, {"sha": "eafff6705ba6c0ace74f5c40dc5f89f25862e4ac", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,7 +3,7 @@ use crate::def_id::DefId;\n crate use crate::hir_id::HirId;\n use crate::itemlikevisit;\n \n-use rustc_ast::ast::{self, CrateSugar, Ident, LlvmAsmDialect, Name};\n+use rustc_ast::ast::{self, CrateSugar, LlvmAsmDialect};\n use rustc_ast::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use rustc_ast::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::ast::{CaptureBy, Movability, Mutability};\n@@ -13,7 +13,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::{SourceMap, Spanned};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n \n@@ -2443,7 +2443,7 @@ pub enum ItemKind<'hir> {\n     /// An `extern crate` item, with optional *original* crate name if the crate was renamed.\n     ///\n     /// E.g., `extern crate foo` or `extern crate foo_bar as foo`.\n-    ExternCrate(Option<Name>),\n+    ExternCrate(Option<Symbol>),\n \n     /// `use foo::bar::*;` or `use foo::bar::baz as quux;`\n     ///\n@@ -2611,7 +2611,7 @@ pub type TraitMap<ID = HirId> = NodeMap<Vec<TraitCandidate<ID>>>;\n \n // Map from the NodeId of a glob import to a list of items which are actually\n // imported.\n-pub type GlobMap = NodeMap<FxHashSet<Name>>;\n+pub type GlobMap = NodeMap<FxHashSet<Symbol>>;\n \n #[derive(Copy, Clone, Debug, HashStable_Generic)]\n pub enum Node<'hir> {"}, {"sha": "0270d0de5c7d750e16a3033ea1ab8ef0baa07874", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -34,8 +34,9 @@\n use crate::hir::*;\n use crate::hir_id::CRATE_HIR_ID;\n use crate::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n-use rustc_ast::ast::{Attribute, Ident, Label, Name};\n+use rustc_ast::ast::{Attribute, Label};\n use rustc_ast::walk_list;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n \n pub struct DeepVisitor<'v, V> {\n@@ -317,7 +318,7 @@ pub trait Visitor<'v>: Sized {\n     fn visit_id(&mut self, _hir_id: HirId) {\n         // Nothing to do.\n     }\n-    fn visit_name(&mut self, _span: Span, _name: Name) {\n+    fn visit_name(&mut self, _span: Span, _name: Symbol) {\n         // Nothing to do.\n     }\n     fn visit_ident(&mut self, ident: Ident) {\n@@ -395,7 +396,7 @@ pub trait Visitor<'v>: Sized {\n     fn visit_variant_data(\n         &mut self,\n         s: &'v VariantData<'v>,\n-        _: Name,\n+        _: Symbol,\n         _: &'v Generics<'v>,\n         _parent_id: HirId,\n         _: Span,"}, {"sha": "2f1b5da8e13a0e39a9927baf56b5523c54325fc8", "filename": "src/librustc_hir/pat_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_hir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_hir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fpat_util.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,7 +1,7 @@\n use crate::def::{CtorOf, DefKind, Res};\n use crate::def_id::DefId;\n use crate::hir::{self, HirId, PatKind};\n-use rustc_ast::ast;\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use std::iter::{Enumerate, ExactSizeIterator};\n@@ -79,7 +79,7 @@ impl hir::Pat<'_> {\n \n     /// Call `f` on every \"binding\" in a pattern, e.g., on `a` in\n     /// `match foo() { Some(a) => (), None => () }`\n-    pub fn each_binding(&self, mut f: impl FnMut(hir::BindingAnnotation, HirId, Span, ast::Ident)) {\n+    pub fn each_binding(&self, mut f: impl FnMut(hir::BindingAnnotation, HirId, Span, Ident)) {\n         self.walk_always(|p| {\n             if let PatKind::Binding(binding_mode, _, ident, _) = p.kind {\n                 f(binding_mode, p.hir_id, p.span, ident);\n@@ -93,7 +93,7 @@ impl hir::Pat<'_> {\n     /// When encountering an or-pattern `p_0 | ... | p_n` only `p_0` will be visited.\n     pub fn each_binding_or_first(\n         &self,\n-        f: &mut impl FnMut(hir::BindingAnnotation, HirId, Span, ast::Ident),\n+        f: &mut impl FnMut(hir::BindingAnnotation, HirId, Span, Ident),\n     ) {\n         self.walk(|p| match &p.kind {\n             PatKind::Or(ps) => {\n@@ -140,7 +140,7 @@ impl hir::Pat<'_> {\n         satisfies\n     }\n \n-    pub fn simple_ident(&self) -> Option<ast::Ident> {\n+    pub fn simple_ident(&self) -> Option<Ident> {\n         match self.kind {\n             PatKind::Binding(\n                 hir::BindingAnnotation::Unannotated | hir::BindingAnnotation::Mutable,"}, {"sha": "f8a42376d146a115991a9e1ea458a855ecbf489f", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -10,7 +10,7 @@ use rustc_hir as hir;\n use rustc_hir::{GenericArg, GenericParam, GenericParamKind, Node};\n use rustc_hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n use rustc_span::source_map::{SourceMap, Spanned};\n-use rustc_span::symbol::{kw, IdentPrinter};\n+use rustc_span::symbol::{kw, Ident, IdentPrinter, Symbol};\n use rustc_span::{self, BytePos, FileName};\n use rustc_target::spec::abi::Abi;\n \n@@ -23,7 +23,7 @@ pub fn id_to_string(map: &dyn rustc_hir::intravisit::Map<'_>, hir_id: hir::HirId\n }\n \n pub enum AnnNode<'a> {\n-    Name(&'a ast::Name),\n+    Name(&'a Symbol),\n     Block(&'a hir::Block<'a>),\n     Item(&'a hir::Item<'a>),\n     SubItem(hir::HirId),\n@@ -145,7 +145,7 @@ impl<'a> PrintState<'a> for State<'a> {\n         &mut self.comments\n     }\n \n-    fn print_ident(&mut self, ident: ast::Ident) {\n+    fn print_ident(&mut self, ident: Ident) {\n         self.s.word(IdentPrinter::for_ast_ident(ident, ident.is_raw_guess()).to_string());\n         self.ann.post(self, AnnNode::Name(&ident.name))\n     }\n@@ -453,7 +453,7 @@ impl<'a> State<'a> {\n \n     fn print_associated_const(\n         &mut self,\n-        ident: ast::Ident,\n+        ident: Ident,\n         ty: &hir::Ty<'_>,\n         default: Option<hir::BodyId>,\n         vis: &hir::Visibility<'_>,\n@@ -473,7 +473,7 @@ impl<'a> State<'a> {\n \n     fn print_associated_type(\n         &mut self,\n-        ident: ast::Ident,\n+        ident: Ident,\n         generics: &hir::Generics<'_>,\n         bounds: Option<hir::GenericBounds<'_>>,\n         ty: Option<&hir::Ty<'_>>,\n@@ -768,7 +768,7 @@ impl<'a> State<'a> {\n         &mut self,\n         enum_definition: &hir::EnumDef<'_>,\n         generics: &hir::Generics<'_>,\n-        name: ast::Name,\n+        name: Symbol,\n         span: rustc_span::Span,\n         visibility: &hir::Visibility<'_>,\n     ) {\n@@ -827,7 +827,7 @@ impl<'a> State<'a> {\n         &mut self,\n         struct_def: &hir::VariantData<'_>,\n         generics: &hir::Generics<'_>,\n-        name: ast::Name,\n+        name: Symbol,\n         span: rustc_span::Span,\n         print_finalizer: bool,\n     ) {\n@@ -886,11 +886,11 @@ impl<'a> State<'a> {\n     }\n     pub fn print_method_sig(\n         &mut self,\n-        ident: ast::Ident,\n+        ident: Ident,\n         m: &hir::FnSig<'_>,\n         generics: &hir::Generics<'_>,\n         vis: &hir::Visibility<'_>,\n-        arg_names: &[ast::Ident],\n+        arg_names: &[Ident],\n         body_id: Option<hir::BodyId>,\n     ) {\n         self.print_fn(&m.decl, m.header, Some(ident.name), generics, vis, arg_names, body_id)\n@@ -1297,7 +1297,7 @@ impl<'a> State<'a> {\n                 self.bopen();\n \n                 // Print `let _t = $init;`:\n-                let temp = ast::Ident::from_str(\"_t\");\n+                let temp = Ident::from_str(\"_t\");\n                 self.print_local(Some(init), |this| this.print_ident(temp));\n                 self.s.word(\";\");\n \n@@ -1496,8 +1496,8 @@ impl<'a> State<'a> {\n         self.s.word(i.to_string())\n     }\n \n-    pub fn print_name(&mut self, name: ast::Name) {\n-        self.print_ident(ast::Ident::with_dummy_span(name))\n+    pub fn print_name(&mut self, name: Symbol) {\n+        self.print_ident(Ident::with_dummy_span(name))\n     }\n \n     pub fn print_for_decl(&mut self, loc: &hir::Local<'_>, coll: &hir::Expr<'_>) {\n@@ -1888,10 +1888,10 @@ impl<'a> State<'a> {\n         &mut self,\n         decl: &hir::FnDecl<'_>,\n         header: hir::FnHeader,\n-        name: Option<ast::Name>,\n+        name: Option<Symbol>,\n         generics: &hir::Generics<'_>,\n         vis: &hir::Visibility<'_>,\n-        arg_names: &[ast::Ident],\n+        arg_names: &[Ident],\n         body_id: Option<hir::BodyId>,\n     ) {\n         self.print_fn_header_info(header, vis);\n@@ -2154,9 +2154,9 @@ impl<'a> State<'a> {\n         abi: Abi,\n         unsafety: hir::Unsafety,\n         decl: &hir::FnDecl<'_>,\n-        name: Option<ast::Name>,\n+        name: Option<Symbol>,\n         generic_params: &[hir::GenericParam<'_>],\n-        arg_names: &[ast::Ident],\n+        arg_names: &[Ident],\n     ) {\n         self.ibox(INDENT_UNIT);\n         if !generic_params.is_empty() {"}, {"sha": "807ae586348e9785309911ea596c49cb014b81e4", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -44,7 +44,7 @@ use rustc_middle::dep_graph::debug::{DepNodeFilter, EdgeFilter};\n use rustc_middle::dep_graph::{DepGraphQuery, DepKind, DepNode, DepNodeExt};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n \n use std::env;\n@@ -89,7 +89,7 @@ pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n }\n \n type Sources = Vec<(Span, DefId, DepNode)>;\n-type Targets = Vec<(Span, ast::Name, hir::HirId, DepNode)>;\n+type Targets = Vec<(Span, Symbol, hir::HirId, DepNode)>;\n \n struct IfThisChanged<'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -98,7 +98,7 @@ struct IfThisChanged<'tcx> {\n }\n \n impl IfThisChanged<'tcx> {\n-    fn argument(&self, attr: &ast::Attribute) -> Option<ast::Name> {\n+    fn argument(&self, attr: &ast::Attribute) -> Option<Symbol> {\n         let mut value = None;\n         for list_item in attr.meta_item_list().unwrap_or_default() {\n             match list_item.ident() {"}, {"sha": "eee6e73ed10734860b3f4135b684c2cf52b7b1f8", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -147,7 +147,7 @@ impl AssertModuleSource<'tcx> {\n         );\n     }\n \n-    fn field(&self, attr: &ast::Attribute, name: Symbol) -> ast::Name {\n+    fn field(&self, attr: &ast::Attribute, name: Symbol) -> Symbol {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n             if item.check_name(name) {\n                 if let Some(value) = item.value_str() {"}, {"sha": "9bf992537dfaff9af04540da6621f10465c07f02", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -499,7 +499,7 @@ fn check_config(tcx: TyCtxt<'_>, attr: &Attribute) -> bool {\n     }\n }\n \n-fn expect_associated_value(tcx: TyCtxt<'_>, item: &NestedMetaItem) -> ast::Name {\n+fn expect_associated_value(tcx: TyCtxt<'_>, item: &NestedMetaItem) -> Symbol {\n     if let Some(value) = item.value_str() {\n         value\n     } else {"}, {"sha": "67632a97df792889436da53beaad639b164f553f", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -10,7 +10,6 @@ pub(crate) use self::undo_log::{InferCtxtUndoLogs, Snapshot, UndoLog};\n \n use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n \n-use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::Rollback;\n@@ -457,7 +456,7 @@ pub enum SubregionOrigin<'tcx> {\n     /// the containing trait.\n     CompareImplMethodObligation {\n         span: Span,\n-        item_name: ast::Name,\n+        item_name: Symbol,\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n     },\n@@ -519,7 +518,7 @@ pub enum RegionVariableOrigin {\n \n     UpvarRegion(ty::UpvarId, Span),\n \n-    BoundRegionInCoherence(ast::Name),\n+    BoundRegionInCoherence(Symbol),\n \n     /// This origin is used for the inference variables that we create\n     /// during NLL region processing."}, {"sha": "f873358ff9fdd81a0a7cd2a8622dab31292324a5", "filename": "src/librustc_infer/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,20 +1,20 @@\n use super::ObjectSafetyViolation;\n \n use crate::infer::InferCtxt;\n-use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::TyCtxt;\n+use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use std::fmt;\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn report_extra_impl_obligation(\n         &self,\n         error_span: Span,\n-        item_name: ast::Name,\n+        item_name: Symbol,\n         _impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n         requirement: &dyn fmt::Display,"}, {"sha": "7d5289cd46f5b678aebc66e16e8932aceaae05c2", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -41,7 +41,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::FutureIncompatibleInfo;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span};\n use rustc_target::abi::VariantIdx;\n use rustc_trait_selection::traits::misc::can_type_implement_copy;\n@@ -1428,7 +1428,7 @@ impl KeywordIdents {\n         &mut self,\n         cx: &EarlyContext<'_>,\n         UnderMacro(under_macro): UnderMacro,\n-        ident: ast::Ident,\n+        ident: Ident,\n     ) {\n         let next_edition = match cx.sess.edition() {\n             Edition::Edition2015 => {\n@@ -1482,7 +1482,7 @@ impl EarlyLintPass for KeywordIdents {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::MacCall) {\n         self.check_tokens(cx, mac.args.inner_tokens());\n     }\n-    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n+    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n         self.check_ident_token(cx, UnderMacro(false), ident);\n     }\n }"}, {"sha": "06987ffa3d569c77588fb7b1b2ba884e0d38da76", "filename": "src/librustc_lint/early.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fearly.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -20,6 +20,7 @@ use rustc_ast::ast;\n use rustc_ast::visit as ast_visit;\n use rustc_session::lint::{BufferedEarlyLint, LintBuffer, LintPass};\n use rustc_session::Session;\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use log::debug;\n@@ -159,7 +160,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         ast_visit::walk_ty(self, t);\n     }\n \n-    fn visit_ident(&mut self, ident: ast::Ident) {\n+    fn visit_ident(&mut self, ident: Ident) {\n         run_early_pass!(self, check_ident, ident);\n     }\n "}, {"sha": "12b7459e88dc32ec100c22abeef1b2d2a9d7893b", "filename": "src/librustc_lint/internal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Finternal.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -2,13 +2,13 @@\n //! Clippy.\n \n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n-use rustc_ast::ast::{Ident, Item, ItemKind};\n+use rustc_ast::ast::{Item, ItemKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,"}, {"sha": "c8f827b1f5cedf23681e876a2e8bff4a4551c4d2", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -25,6 +25,7 @@ use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::LintPass;\n+use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n use log::debug;\n@@ -192,7 +193,7 @@ impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> hir_visit::Visitor<'tcx>\n     fn visit_variant_data(\n         &mut self,\n         s: &'tcx hir::VariantData<'tcx>,\n-        _: ast::Name,\n+        _: Symbol,\n         _: &'tcx hir::Generics<'tcx>,\n         _: hir::HirId,\n         _: Span,\n@@ -227,7 +228,7 @@ impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> hir_visit::Visitor<'tcx>\n         hir_visit::walk_ty(self, t);\n     }\n \n-    fn visit_name(&mut self, sp: Span, name: ast::Name) {\n+    fn visit_name(&mut self, sp: Span, name: Symbol) {\n         lint_callback!(self, check_name, sp, name);\n     }\n "}, {"sha": "b791d313fc4f438a47e0e850da80401770ab3a6b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -64,6 +64,7 @@ use rustc_session::lint::builtin::{\n     INTRA_DOC_LINK_RESOLUTION_FAILURE, INVALID_CODEBLOCK_ATTRIBUTE, MISSING_DOC_CODE_EXAMPLES,\n     PRIVATE_DOC_TESTS,\n };\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n \n use array_into_iter::ArrayIntoIter;"}, {"sha": "ad02b2637d22f1da7b6832aa08c9008271d8a689", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,7 +1,7 @@\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::{Ident, SymbolStr};\n use std::hash::{Hash, Hasher};\n use std::ops::Deref;\n \n@@ -155,7 +155,7 @@ impl EarlyLintPass for NonAsciiIdents {\n                 .or_insert((symbol_str, sp));\n         }\n     }\n-    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n+    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n         use unicode_security::GeneralSecurityProfile;\n         let name_str = ident.name.as_str();\n         if name_str.is_ascii() {"}, {"sha": "04a398a29ba7b916c63a675158f617fb6689a584", "filename": "src/librustc_lint/passes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_lint%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fpasses.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -5,6 +5,7 @@ use rustc_data_structures::sync;\n use rustc_hir as hir;\n use rustc_session::lint::builtin::HardwiredLints;\n use rustc_session::lint::LintPass;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n \n #[macro_export]\n@@ -14,7 +15,7 @@ macro_rules! late_lint_methods {\n             fn check_param(a: &$hir hir::Param<$hir>);\n             fn check_body(a: &$hir hir::Body<$hir>);\n             fn check_body_post(a: &$hir hir::Body<$hir>);\n-            fn check_name(a: Span, b: ast::Name);\n+            fn check_name(a: Span, b: Symbol);\n             fn check_crate(a: &$hir hir::Crate<$hir>);\n             fn check_crate_post(a: &$hir hir::Crate<$hir>);\n             fn check_mod(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n@@ -155,7 +156,7 @@ macro_rules! early_lint_methods {\n     ($macro:path, $args:tt) => (\n         $macro!($args, [\n             fn check_param(a: &ast::Param);\n-            fn check_ident(a: ast::Ident);\n+            fn check_ident(a: Ident);\n             fn check_crate(a: &ast::Crate);\n             fn check_crate_post(a: &ast::Crate);\n             fn check_mod(a: &ast::Mod, b: Span, c: ast::NodeId);"}, {"sha": "32149c0afd597f7445e3f54455270e73ef9cd989", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -4,7 +4,7 @@ use crate::creader::CrateMetadataRef;\n use crate::rmeta::table::{FixedSizeEncoding, Table};\n use crate::rmeta::*;\n \n-use rustc_ast::ast::{self, Ident};\n+use rustc_ast::ast;\n use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -33,7 +33,7 @@ use rustc_middle::util::common::record_time;\n use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder};\n use rustc_session::Session;\n use rustc_span::source_map::{respan, Spanned};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{self, hygiene::MacroKind, BytePos, Pos, Span, DUMMY_SP};\n \n use log::debug;\n@@ -917,7 +917,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     /// Iterates over all the stability attributes in the given crate.\n-    fn get_lib_features(&self, tcx: TyCtxt<'tcx>) -> &'tcx [(ast::Name, Option<ast::Name>)] {\n+    fn get_lib_features(&self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {\n         // FIXME: For a proc macro crate, not sure whether we should return the \"host\"\n         // features or an empty Vec. Both don't cause ICEs.\n         tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))\n@@ -1205,7 +1205,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .collect::<Vec<_>>()\n     }\n \n-    fn get_struct_field_names(&self, id: DefIndex, sess: &Session) -> Vec<Spanned<ast::Name>> {\n+    fn get_struct_field_names(&self, id: DefIndex, sess: &Session) -> Vec<Spanned<Symbol>> {\n         self.root\n             .tables\n             .children\n@@ -1317,7 +1317,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_fn_param_names(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [ast::Name] {\n+    fn get_fn_param_names(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Symbol] {\n         let param_names = match self.kind(id) {\n             EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,\n             EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,"}, {"sha": "b18272675c0b25a87a27fb8eca209b00514450dd", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::ty::query::QueryConfig;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::{self, Span, Spanned};\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n \n use rustc_data_structures::sync::Lrc;\n use smallvec::SmallVec;\n@@ -419,7 +419,7 @@ impl CStore {\n             .disambiguated_data\n             .data\n             .get_opt_name()\n-            .map(ast::Ident::with_dummy_span) // FIXME: cross-crate hygiene\n+            .map(Ident::with_dummy_span) // FIXME: cross-crate hygiene\n             .expect(\"no name in load_macro\");\n \n         LoadedMacro::MacroDef("}, {"sha": "2589e162dffe21c2ea416f0ed093790aa855c6a1", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -2,7 +2,7 @@ use crate::rmeta::table::FixedSizeEncoding;\n use crate::rmeta::*;\n \n use log::{debug, trace};\n-use rustc_ast::ast::{self, Ident};\n+use rustc_ast::ast;\n use rustc_ast::attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -32,7 +32,7 @@ use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder};\n use rustc_session::config::CrateType;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, ExternalSource, FileName, SourceFile, Span};\n use rustc_target::abi::VariantIdx;\n use std::hash::Hash;\n@@ -989,7 +989,7 @@ impl EncodeContext<'tcx> {\n         }\n     }\n \n-    fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[ast::Name]> {\n+    fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Symbol]> {\n         self.tcx.dep_graph.with_ignore(|| {\n             let body = self.tcx.hir().body(body_id);\n             self.lazy(body.params.iter().map(|arg| match arg.pat.kind {\n@@ -999,7 +999,7 @@ impl EncodeContext<'tcx> {\n         })\n     }\n \n-    fn encode_fn_param_names(&mut self, param_names: &[ast::Ident]) -> Lazy<[ast::Name]> {\n+    fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Symbol]> {\n         self.lazy(param_names.iter().map(|ident| ident.name))\n     }\n \n@@ -1410,7 +1410,7 @@ impl EncodeContext<'tcx> {\n         self.lazy(deps.iter().map(|&(_, ref dep)| dep))\n     }\n \n-    fn encode_lib_features(&mut self) -> Lazy<[(ast::Name, Option<ast::Name>)]> {\n+    fn encode_lib_features(&mut self) -> Lazy<[(Symbol, Option<Symbol>)]> {\n         let tcx = self.tcx;\n         let lib_features = tcx.lib_features();\n         self.lazy(lib_features.to_vec())"}, {"sha": "669307612055ae51636459a63c038e0b2c304cfc", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -215,7 +215,7 @@ crate struct CrateRoot<'tcx> {\n \n #[derive(RustcEncodable, RustcDecodable)]\n crate struct CrateDep {\n-    pub name: ast::Name,\n+    pub name: Symbol,\n     pub hash: Svh,\n     pub host_hash: Option<Svh>,\n     pub kind: DepKind,\n@@ -327,7 +327,7 @@ struct ModData {\n struct FnData {\n     asyncness: hir::IsAsync,\n     constness: hir::Constness,\n-    param_names: Lazy<[ast::Name]>,\n+    param_names: Lazy<[Symbol]>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}, {"sha": "a97db3134dc9e97fcd7be67da34bb7a563448649", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -65,7 +65,7 @@ macro_rules! arena_types {\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n             [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,\n             [] attribute: rustc_ast::ast::Attribute,\n-            [] name_set: rustc_data_structures::fx::FxHashSet<rustc_ast::ast::Name>,\n+            [] name_set: rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>,\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types"}, {"sha": "83baf6cc433452668259366ebfeda2d951cf95e2", "filename": "src/librustc_middle/hir/exports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fhir%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fhir%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fexports.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,9 +1,9 @@\n use crate::ty;\n \n-use rustc_ast::ast;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::DefIdMap;\n use rustc_macros::HashStable;\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use std::fmt::Debug;\n@@ -15,7 +15,7 @@ pub type ExportMap<Id> = DefIdMap<Vec<Export<Id>>>;\n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct Export<Id> {\n     /// The name of the target.\n-    pub ident: ast::Ident,\n+    pub ident: Ident,\n     /// The resolution of the target.\n     pub res: Res<Id>,\n     /// The span of the target."}, {"sha": "a2e4372f017cedb150da24e24b54e8537380a1a3", "filename": "src/librustc_middle/hir/map/blocks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fblocks.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -12,10 +12,11 @@\n //! for the `Code` associated with a particular NodeId.\n \n use crate::hir::map::Map;\n-use rustc_ast::ast::{Attribute, Ident};\n+use rustc_ast::ast::Attribute;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Expr, FnDecl, Node};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n /// An FnLikeNode is a Node that is like a fn, in that it has a decl"}, {"sha": "de0373c138497bd54fc39f03ee8c6ca6cf230539", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,7 +3,7 @@ use self::collector::NodeCollector;\n use crate::hir::{Owner, OwnerNodes};\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n-use rustc_ast::ast::{self, Name, NodeId};\n+use rustc_ast::ast::{self, NodeId};\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -14,7 +14,7 @@ use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n@@ -452,7 +452,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn ty_param_name(&self, id: HirId) -> Name {\n+    pub fn ty_param_name(&self, id: HirId) -> Symbol {\n         match self.get(id) {\n             Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {\n                 kw::SelfUpper\n@@ -824,7 +824,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn opt_name(&self, id: HirId) -> Option<Name> {\n+    pub fn opt_name(&self, id: HirId) -> Option<Symbol> {\n         Some(match self.get(id) {\n             Node::Item(i) => i.ident.name,\n             Node::ForeignItem(fi) => fi.ident.name,\n@@ -840,7 +840,7 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n-    pub fn name(&self, id: HirId) -> Name {\n+    pub fn name(&self, id: HirId) -> Symbol {\n         match self.opt_name(id) {\n             Some(name) => name,\n             None => bug!(\"no name for {}\", self.node_to_string(id)),\n@@ -952,42 +952,42 @@ impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n }\n \n trait Named {\n-    fn name(&self) -> Name;\n+    fn name(&self) -> Symbol;\n }\n \n impl<T: Named> Named for Spanned<T> {\n-    fn name(&self) -> Name {\n+    fn name(&self) -> Symbol {\n         self.node.name()\n     }\n }\n \n impl Named for Item<'_> {\n-    fn name(&self) -> Name {\n+    fn name(&self) -> Symbol {\n         self.ident.name\n     }\n }\n impl Named for ForeignItem<'_> {\n-    fn name(&self) -> Name {\n+    fn name(&self) -> Symbol {\n         self.ident.name\n     }\n }\n impl Named for Variant<'_> {\n-    fn name(&self) -> Name {\n+    fn name(&self) -> Symbol {\n         self.ident.name\n     }\n }\n impl Named for StructField<'_> {\n-    fn name(&self) -> Name {\n+    fn name(&self) -> Symbol {\n         self.ident.name\n     }\n }\n impl Named for TraitItem<'_> {\n-    fn name(&self) -> Name {\n+    fn name(&self) -> Symbol {\n         self.ident.name\n     }\n }\n impl Named for ImplItem<'_> {\n-    fn name(&self) -> Name {\n+    fn name(&self) -> Symbol {\n         self.ident.name\n     }\n }"}, {"sha": "62e6e1249818a36dce9ecae470ea96f821764914", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -19,7 +19,6 @@ use rustc_target::abi::VariantIdx;\n \n use polonius_engine::Atom;\n pub use rustc_ast::ast::Mutability;\n-use rustc_ast::ast::Name;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::dominators::{dominators, Dominators};\n use rustc_data_structures::graph::{self, GraphSuccessors};\n@@ -968,7 +967,7 @@ impl<'tcx> LocalDecl<'tcx> {\n /// Debug information pertaining to a user variable.\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct VarDebugInfo<'tcx> {\n-    pub name: Name,\n+    pub name: Symbol,\n \n     /// Source info of the user variable, including the scope\n     /// within which the variable is visible (to debuginfo)"}, {"sha": "2ceba51949420dc6501f25a3b229ee0758b5d9e3", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -640,7 +640,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query fn_arg_names(_: DefId) -> &'tcx [ast::Name] {}\n+        query fn_arg_names(_: DefId) -> &'tcx [Symbol] {}\n         /// Gets the rendered value of the specified constant or associated constant.\n         /// Used by rustdoc.\n         query rendered_const(_: DefId) -> String {}\n@@ -1053,7 +1053,7 @@ rustc_queries! {\n             desc { \"looking up all possibly unused extern crates\" }\n         }\n         query names_imported_by_glob_use(def_id: LocalDefId)\n-            -> &'tcx FxHashSet<ast::Name> {\n+            -> &'tcx FxHashSet<Symbol> {\n             eval_always\n             desc { |tcx| \"names_imported_by_glob_use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n         }"}, {"sha": "1254174a7a5f9690d782ac4739bf8b518a7434fe", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -13,9 +13,9 @@ use crate::mir::interpret::ErrorHandled;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, AdtKind, Ty, TyCtxt};\n \n-use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n \n@@ -207,14 +207,14 @@ pub enum ObligationCauseCode<'tcx> {\n \n     /// Error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplMethodObligation {\n-        item_name: ast::Name,\n+        item_name: Symbol,\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n     },\n \n     /// Error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplTypeObligation {\n-        item_name: ast::Name,\n+        item_name: Symbol,\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n     },\n@@ -575,10 +575,10 @@ pub enum ObjectSafetyViolation {\n     SupertraitSelf(SmallVec<[Span; 1]>),\n \n     /// Method has something illegal.\n-    Method(ast::Name, MethodViolationCode, Span),\n+    Method(Symbol, MethodViolationCode, Span),\n \n     /// Associated const.\n-    AssocConst(ast::Name, Span),\n+    AssocConst(Symbol, Span),\n }\n \n impl ObjectSafetyViolation {"}, {"sha": "4f02aaa96acd3026421407e741175f272f250288", "filename": "src/librustc_middle/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,11 +1,11 @@\n use crate::ich::{self, StableHashingContext};\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::{self, TyCtxt};\n-use rustc_ast::ast::Ident;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::{DefId, DefIdMap};\n+use rustc_span::symbol::Ident;\n \n /// A per-trait graph of impls in specialization order. At the moment, this\n /// graph forms a tree rooted with the trait itself, with all other nodes"}, {"sha": "86b740b8503b81cff91aaae03a57d191b931a292", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -380,7 +380,7 @@ pub struct TypeckTables<'tcx> {\n \n     /// Records the reasons that we picked the kind of each closure;\n     /// not all closures are present in the map.\n-    closure_kind_origins: ItemLocalMap<(Span, ast::Name)>,\n+    closure_kind_origins: ItemLocalMap<(Span, Symbol)>,\n \n     /// For each fn, records the \"liberated\" types of its arguments\n     /// and return type. Liberated means that all bound regions\n@@ -625,11 +625,11 @@ impl<'tcx> TypeckTables<'tcx> {\n         self.upvar_capture_map[&upvar_id]\n     }\n \n-    pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, ast::Name)> {\n+    pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, Symbol)> {\n         LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }\n     }\n \n-    pub fn closure_kind_origins_mut(&mut self) -> LocalTableInContextMut<'_, (Span, ast::Name)> {\n+    pub fn closure_kind_origins_mut(&mut self) -> LocalTableInContextMut<'_, (Span, Symbol)> {\n         LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }\n     }\n \n@@ -945,10 +945,10 @@ pub struct GlobalCtxt<'tcx> {\n     maybe_unused_extern_crates: Vec<(DefId, Span)>,\n     /// A map of glob use to a set of names it actually imports. Currently only\n     /// used in save-analysis.\n-    glob_map: FxHashMap<LocalDefId, FxHashSet<ast::Name>>,\n+    glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n-    pub extern_prelude: FxHashMap<ast::Name, bool>,\n+    pub extern_prelude: FxHashMap<Symbol, bool>,\n \n     // Internal cache for metadata decoding. No need to track deps on this.\n     pub rcache: Lock<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,"}, {"sha": "7c4e4d095bc5d95e3c3d09c5e87231059e1df473", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -4,13 +4,14 @@ use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n use crate::ty::subst::Subst;\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n \n-use rustc_ast::ast::{self, Ident, IntTy, UintTy};\n+use rustc_ast::ast::{self, IntTy, UintTy};\n use rustc_attr as attr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::call::{\n     ArgAbi, ArgAttribute, ArgAttributes, Conv, FnAbi, PassMode, Reg, RegKind,\n@@ -1628,9 +1629,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         let adt_kind = adt_def.adt_kind();\n         let adt_packed = adt_def.repr.pack.is_some();\n \n-        let build_variant_info = |n: Option<Ident>,\n-                                  flds: &[ast::Name],\n-                                  layout: TyAndLayout<'tcx>| {\n+        let build_variant_info = |n: Option<Ident>, flds: &[Symbol], layout: TyAndLayout<'tcx>| {\n             let mut min_size = Size::ZERO;\n             let field_info: Vec<_> = flds\n                 .iter()"}, {"sha": "02fe7adcd07389718c8694d260559a651c79f306", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -17,7 +17,7 @@ use crate::traits::{self, Reveal};\n use crate::ty;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::{Discr, IntTypeExt};\n-use rustc_ast::ast::{self, Ident, Name};\n+use rustc_ast::ast;\n use rustc_ast::node_id::{NodeId, NodeMap, NodeSet};\n use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n@@ -38,7 +38,7 @@ use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n use rustc_session::DataTypeKind;\n use rustc_span::hygiene::ExpnId;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::{Align, VariantIdx};\n \n@@ -128,7 +128,7 @@ pub struct ResolverOutputs {\n     pub glob_map: GlobMap,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n-    pub extern_prelude: FxHashMap<Name, bool>,\n+    pub extern_prelude: FxHashMap<Symbol, bool>,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug, HashStable)]"}, {"sha": "2684492a40695ddb398d2b5876ac90b98c6baa56", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -12,7 +12,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Namespace};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n-use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_target::abi::{Integer, Size};\n use rustc_target::spec::abi::Abi;\n \n@@ -1452,7 +1452,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n             if !self.empty_path {\n                 write!(self, \"::\")?;\n             }\n-            if ast::Ident::from_str(&name).is_raw_guess() {\n+            if Ident::from_str(&name).is_raw_guess() {\n                 write!(self, \"r#\")?;\n             }\n             write!(self, \"{}\", name)?;"}, {"sha": "71c2c24cc0a9ff8b7d7139f5a5fb43e0ded3163e", "filename": "src/librustc_middle/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -4,7 +4,6 @@ use crate::mir::{self, interpret};\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, Ty};\n-use rustc_ast::ast::Ident;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, Once};\n@@ -20,6 +19,7 @@ use rustc_serialize::{\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::hygiene::{ExpnId, SyntaxContext};\n use rustc_span::source_map::{SourceMap, StableSourceFileId};\n+use rustc_span::symbol::Ident;\n use rustc_span::CachingSourceMapView;\n use rustc_span::{BytePos, SourceFile, Span, DUMMY_SP};\n use std::mem;"}, {"sha": "a6cf3b7e2ee74537a233c38ec3d1d5415a60b97a", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -16,14 +16,14 @@ use crate::ty::{\n };\n use crate::ty::{List, ParamEnv, ParamEnvAnd, TyS};\n use polonius_engine::Atom;\n-use rustc_ast::ast::{self, Ident};\n+use rustc_ast::ast;\n use rustc_data_structures::captures::Captures;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n-use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_target::abi::{Size, VariantIdx};\n use rustc_target::spec::abi;\n use std::borrow::Cow;"}, {"sha": "d3ab7df817b38c9713f7b9c8c433a180422efe60", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,6 +1,5 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n-use rustc_ast::ast::Name;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n@@ -22,7 +21,7 @@ use rustc_middle::mir::{Terminator, TerminatorKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, RegionVid, TyCtxt};\n use rustc_session::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT, UNUSED_MUT};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::{Span, Symbol, DUMMY_SP};\n \n use either::Either;\n use smallvec::SmallVec;\n@@ -77,7 +76,7 @@ crate use region_infer::RegionInferenceContext;\n // FIXME(eddyb) perhaps move this somewhere more centrally.\n #[derive(Debug)]\n crate struct Upvar {\n-    name: Name,\n+    name: Symbol,\n \n     var_hir_id: HirId,\n \n@@ -534,7 +533,7 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     upvars: Vec<Upvar>,\n \n     /// Names of local (user) variables (extracted from `var_debug_info`).\n-    local_names: IndexVec<Local, Option<Name>>,\n+    local_names: IndexVec<Local, Option<Symbol>>,\n \n     /// Record the region names generated for each region in the given\n     /// MIR def so that we can reuse them later in help/error messages."}, {"sha": "220691c1570d22b94e90b16d57e2d01ee2aa86c8", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,6 +1,5 @@\n use crate::{shim, util};\n use required_consts::RequiredConstsVisitor;\n-use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n@@ -11,7 +10,7 @@ use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::steal::Steal;\n use rustc_middle::ty::{InstanceDef, TyCtxt, TypeFoldable};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n \n pub mod add_call_guards;\n@@ -78,7 +77,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> FxHashSet<LocalDefId> {\n         fn visit_variant_data(\n             &mut self,\n             v: &'tcx hir::VariantData<'tcx>,\n-            _: ast::Name,\n+            _: Symbol,\n             _: &'tcx hir::Generics<'tcx>,\n             _: hir::HirId,\n             _: Span,"}, {"sha": "43e9f305245cfef69cf8c641234713de0e4e91a7", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -10,14 +10,14 @@ use crate::build::ForGuard::{self, OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n use crate::hair::{self, *};\n-use rustc_ast::ast::Name;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::HirId;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty};\n use rustc_span::Span;\n+use rustc_span::symbol::Symbol;\n use rustc_target::abi::VariantIdx;\n use smallvec::{smallvec, SmallVec};\n \n@@ -570,7 +570,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         f: &mut impl FnMut(\n             &mut Self,\n             Mutability,\n-            Name,\n+            Symbol,\n             BindingMode,\n             HirId,\n             Span,\n@@ -737,7 +737,7 @@ fn traverse_candidate<'pat, 'tcx: 'pat, C, T, I>(\n struct Binding<'tcx> {\n     span: Span,\n     source: Place<'tcx>,\n-    name: Name,\n+    name: Symbol,\n     var_id: HirId,\n     var_ty: Ty<'tcx>,\n     mutability: Mutability,\n@@ -1924,7 +1924,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         source_info: SourceInfo,\n         visibility_scope: SourceScope,\n         mutability: Mutability,\n-        name: Name,\n+        name: Symbol,\n         mode: BindingMode,\n         var_id: HirId,\n         var_ty: Ty<'tcx>,"}, {"sha": "f38471da94ee2dcf12a78ffef02fdcd7b0898e38", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -24,7 +24,7 @@ use rustc_middle::ty::{self, AdtDef, DefIdTree, Region, Ty, TyCtxt, UserType};\n use rustc_middle::ty::{\n     CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n };\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::{Span, Symbol, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n \n use std::cmp::Ordering;\n@@ -128,7 +128,7 @@ crate enum PatKind<'tcx> {\n     /// `x`, `ref x`, `x @ P`, etc.\n     Binding {\n         mutability: Mutability,\n-        name: ast::Name,\n+        name: Symbol,\n         mode: BindingMode,\n         var: hir::HirId,\n         ty: Ty<'tcx>,\n@@ -932,7 +932,7 @@ macro_rules! CloneImpls {\n }\n \n CloneImpls! { <'tcx>\n-    Span, Field, Mutability, ast::Name, hir::HirId, usize, ty::Const<'tcx>,\n+    Span, Field, Mutability, Symbol, hir::HirId, usize, ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode, &'tcx AdtDef,\n     SubstsRef<'tcx>, &'tcx GenericArg<'tcx>, UserType<'tcx>,\n     UserTypeProjection, PatTyProj<'tcx>"}, {"sha": "437d0ffa1196d6ed100050974fb01c4594c08c39", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,9 +1,7 @@\n use super::ty::AllowPlus;\n use super::{BlockMode, Parser, PathStyle, SemiColonMode, SeqSep, TokenExpectType, TokenType};\n \n-use rustc_ast::ast::{\n-    self, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, Param,\n-};\n+use rustc_ast::ast::{self, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Item, Param};\n use rustc_ast::ast::{AttrVec, ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Lit, LitKind, TokenKind};\n@@ -13,7 +11,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err};\n use rustc_errors::{Applicability, DiagnosticBuilder, Handler, PResult};\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, Ident};\n use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n \n use log::{debug, trace};"}, {"sha": "ca497a3b06f4a712f2f4b7d06d98418d42d969d6", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -4,7 +4,7 @@ use super::{BlockMode, Parser, PathStyle, Restrictions, TokenType};\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n-use rustc_ast::ast::{self, AttrStyle, AttrVec, CaptureBy, Field, Ident, Lit, UnOp, DUMMY_NODE_ID};\n+use rustc_ast::ast::{self, AttrStyle, AttrVec, CaptureBy, Field, Lit, UnOp, DUMMY_NODE_ID};\n use rustc_ast::ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n use rustc_ast::ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast::ptr::P;\n@@ -15,7 +15,7 @@ use rustc_ast::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{Applicability, DiagnosticBuilder, PResult};\n use rustc_span::source_map::{self, Span, Spanned};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use std::mem;\n \n /// Possibly accepts an `token::Interpolated` expression (a pre-parsed expression"}, {"sha": "4fe0453e9c87f5a544788df15acf8c89380e8de9", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -4,7 +4,7 @@ use super::{FollowedByType, Parser, PathStyle};\n \n use crate::maybe_whole;\n \n-use rustc_ast::ast::{self, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n+use rustc_ast::ast::{self, AttrStyle, AttrVec, Attribute, DUMMY_NODE_ID};\n use rustc_ast::ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind, Mod};\n use rustc_ast::ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};\n use rustc_ast::ast::{BindingMode, Block, FnDecl, FnSig, Param, SelfKind};\n@@ -18,7 +18,7 @@ use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, PResult, StashKey};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{self, Span};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n use log::debug;\n use std::convert::TryFrom;\n@@ -804,7 +804,7 @@ impl<'a> Parser<'a> {\n         if self.eat_keyword(kw::As) { self.parse_ident_or_underscore().map(Some) } else { Ok(None) }\n     }\n \n-    fn parse_ident_or_underscore(&mut self) -> PResult<'a, ast::Ident> {\n+    fn parse_ident_or_underscore(&mut self) -> PResult<'a, Ident> {\n         match self.token.ident() {\n             Some((ident @ Ident { name: kw::Underscore, .. }, false)) => {\n                 self.bump();\n@@ -834,7 +834,7 @@ impl<'a> Parser<'a> {\n         Ok((item_name, ItemKind::ExternCrate(orig_name)))\n     }\n \n-    fn parse_crate_name_with_dashes(&mut self) -> PResult<'a, ast::Ident> {\n+    fn parse_crate_name_with_dashes(&mut self) -> PResult<'a, Ident> {\n         let error_msg = \"crate name using dashes are not valid in `extern crate` statements\";\n         let suggestion_msg = \"if the original crate name uses dashes you need to use underscores \\\n                               in the code\";"}, {"sha": "bdb4d7c9df6be3c494ef64622aefcbd85594dd62", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -14,7 +14,7 @@ use crate::lexer::UnmatchedBrace;\n \n use log::debug;\n use rustc_ast::ast::DUMMY_NODE_ID;\n-use rustc_ast::ast::{self, AttrStyle, AttrVec, Const, CrateSugar, Extern, Ident, Unsafe};\n+use rustc_ast::ast::{self, AttrStyle, AttrVec, Const, CrateSugar, Extern, Unsafe};\n use rustc_ast::ast::{\n     Async, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind,\n };\n@@ -26,7 +26,7 @@ use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{respan, Span, DUMMY_SP};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n use std::{cmp, mem, slice};\n \n@@ -424,11 +424,11 @@ impl<'a> Parser<'a> {\n     }\n \n     // Public for rustfmt usage.\n-    pub fn parse_ident(&mut self) -> PResult<'a, ast::Ident> {\n+    pub fn parse_ident(&mut self) -> PResult<'a, Ident> {\n         self.parse_ident_common(true)\n     }\n \n-    fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, ast::Ident> {\n+    fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {\n         match self.token.ident() {\n             Some((ident, is_raw)) => {\n                 if !is_raw && ident.is_reserved() {"}, {"sha": "6603d0afc0248d6cf52ad3d147c3cf8a05d95d7d", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,14 +1,14 @@\n use super::{Parser, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use rustc_ast::ast::{self, AttrVec, Attribute, FieldPat, MacCall, Pat, PatKind, RangeEnd};\n-use rustc_ast::ast::{BindingMode, Expr, ExprKind, Ident, Mutability, Path, QSelf, RangeSyntax};\n+use rustc_ast::ast::{BindingMode, Expr, ExprKind, Mutability, Path, QSelf, RangeSyntax};\n use rustc_ast::mut_visit::{noop_visit_mac, noop_visit_pat, MutVisitor};\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult};\n use rustc_span::source_map::{respan, Span, Spanned};\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident};\n \n type Expected = Option<&'static str>;\n "}, {"sha": "5210614548da394ad1be004206084660ce8b343a", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,12 +3,12 @@ use super::{Parser, TokenType};\n use crate::maybe_whole;\n use rustc_ast::ast::{self, AngleBracketedArg, AngleBracketedArgs, GenericArg, ParenthesizedArgs};\n use rustc_ast::ast::{AnonConst, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode};\n-use rustc_ast::ast::{Ident, Path, PathSegment, QSelf};\n+use rustc_ast::ast::{Path, PathSegment, QSelf};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token};\n use rustc_errors::{pluralize, Applicability, PResult};\n use rustc_span::source_map::{BytePos, Span};\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident};\n \n use log::debug;\n use std::mem;"}, {"sha": "1dcf0e7c7a98a233e85dbeb260a8a12247e0a245", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::lint;\n \n use rustc_ast::{ast, attr};\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Symbol};\n \n // Any local node that may call something in its body block should be\n // explored. For example, if it's a live Node::Item that is a\n@@ -229,7 +229,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     fn visit_variant_data(\n         &mut self,\n         def: &'tcx hir::VariantData<'tcx>,\n-        _: ast::Name,\n+        _: Symbol,\n         _: &hir::Generics<'_>,\n         _: hir::HirId,\n         _: rustc_span::Span,\n@@ -551,7 +551,7 @@ impl DeadVisitor<'tcx> {\n         &mut self,\n         id: hir::HirId,\n         span: rustc_span::Span,\n-        name: ast::Name,\n+        name: Symbol,\n         participle: &str,\n     ) {\n         if !name.as_str().starts_with('_') {"}, {"sha": "75ac8e731b5dab5978b17a25e87a197a22498858", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -96,7 +96,6 @@\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n-use rustc_ast::ast;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -108,7 +107,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n \n use std::collections::VecDeque;\n@@ -245,13 +244,13 @@ struct CaptureInfo {\n #[derive(Copy, Clone, Debug)]\n struct LocalInfo {\n     id: HirId,\n-    name: ast::Name,\n+    name: Symbol,\n     is_shorthand: bool,\n }\n \n #[derive(Copy, Clone, Debug)]\n enum VarKind {\n-    Param(HirId, ast::Name),\n+    Param(HirId, Symbol),\n     Local(LocalInfo),\n     CleanExit,\n }"}, {"sha": "c3a60166968888c41799308ce85c4b98d9529b39", "filename": "src/librustc_plugin_impl/load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_plugin_impl%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_plugin_impl%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fload.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,12 +1,12 @@\n //! Used by `rustc` when loading a plugin.\n \n use crate::Registry;\n-use rustc_ast::ast::{Crate, Ident};\n+use rustc_ast::ast::Crate;\n use rustc_errors::struct_span_err;\n use rustc_metadata::locator;\n use rustc_middle::middle::cstore::MetadataLoader;\n use rustc_session::Session;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n \n use std::borrow::ToOwned;"}, {"sha": "6110d2ef7fc9a18baca9d23afbc0b0761770a451", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -15,7 +15,6 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n rustc_session = { path = \"../librustc_session\" }\n-rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n log = \"0.4\""}, {"sha": "917e2f548302f59b56d3927a6eea5193c15f1fc3", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -4,7 +4,6 @@\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n-use rustc_ast::ast::Ident;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n@@ -22,7 +21,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n \n use std::marker::PhantomData;"}, {"sha": "d0eb1cfc222e66e7e7fb36c46b403e5a25c181c2", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -17,7 +17,6 @@ use crate::{Module, ModuleData, ModuleKind, NameBinding, NameBindingKind, Segmen\n \n use rustc_ast::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use rustc_ast::ast::{AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n-use rustc_ast::ast::{Ident, Name};\n use rustc_ast::token::{self, Token};\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_attr as attr;\n@@ -34,7 +33,7 @@ use rustc_middle::middle::cstore::CrateStore;\n use rustc_middle::ty;\n use rustc_span::hygiene::{ExpnId, MacroKind};\n use rustc_span::source_map::{respan, Spanned};\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n use log::debug;\n@@ -293,7 +292,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         self.insert_field_names(def_id, field_names);\n     }\n \n-    fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Name>>) {\n+    fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Symbol>>) {\n         if !field_names.is_empty() {\n             self.r.field_names.insert(def_id, field_names);\n         }\n@@ -953,7 +952,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n     fn add_macro_use_binding(\n         &mut self,\n-        name: ast::Name,\n+        name: Symbol,\n         binding: &'a NameBinding<'a>,\n         span: Span,\n         allow_shadowing: bool,"}, {"sha": "c66e9a6040669659428bf3d537d239522020ba50", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -2,7 +2,7 @@ use std::cmp::Reverse;\n use std::ptr;\n \n use log::debug;\n-use rustc_ast::ast::{self, Ident, Path};\n+use rustc_ast::ast::{self, Path};\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n@@ -16,7 +16,7 @@ use rustc_middle::ty::{self, DefIdTree};\n use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::SourceMap;\n-use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{BytePos, MultiSpan, Span};\n \n use crate::imports::{Import, ImportKind, ImportResolver};"}, {"sha": "a1e05d21b58d524bebabc187d44f5663661c6822", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -9,7 +9,7 @@ use crate::{BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet, Weak};\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n-use rustc_ast::ast::{Ident, Name, NodeId};\n+use rustc_ast::ast::NodeId;\n use rustc_ast::unwrap_or;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashSet;\n@@ -24,7 +24,7 @@ use rustc_session::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPOR\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::DiagnosticMessageId;\n use rustc_span::hygiene::ExpnId;\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{MultiSpan, Span};\n \n use log::*;\n@@ -57,7 +57,7 @@ pub enum ImportKind<'a> {\n                                        // n.b. `max_vis` is only used in `finalize_import` to check for re-export errors.\n     },\n     ExternCrate {\n-        source: Option<Name>,\n+        source: Option<Symbol>,\n         target: Ident,\n     },\n     MacroUse,"}, {"sha": "e541920e89ed451ed96d93bdf9a07f126c6a4274", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -24,7 +24,7 @@ use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::TraitCandidate;\n use rustc_middle::{bug, span_bug};\n use rustc_session::lint;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n \n@@ -1194,7 +1194,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n     fn check_trait_item<F>(&mut self, ident: Ident, ns: Namespace, span: Span, err: F)\n     where\n-        F: FnOnce(Name, &str) -> ResolutionError<'_>,\n+        F: FnOnce(Symbol, &str) -> ResolutionError<'_>,\n     {\n         // If there is a TraitRef in scope for an impl, then the method must be in the\n         // trait."}, {"sha": "dc92b465c2bc1ef9469ce291151cd301906c3f3d", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -5,7 +5,7 @@ use crate::path_names_to_string;\n use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n-use rustc_ast::ast::{self, Expr, ExprKind, Ident, Item, ItemKind, NodeId, Path, Ty, TyKind};\n+use rustc_ast::ast::{self, Expr, ExprKind, Item, ItemKind, NodeId, Path, Ty, TyKind};\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n@@ -16,7 +16,7 @@ use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::PrimTy;\n use rustc_session::config::nightly_options;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n \n use log::debug;\n@@ -1047,7 +1047,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         span: Span,\n         count: usize,\n-        lifetime_names: &FxHashSet<ast::Ident>,\n+        lifetime_names: &FxHashSet<Ident>,\n         params: &[ElisionFailureInfo],\n     ) {\n         let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok();"}, {"sha": "a3fbb28f22a56745a330c5fc7ecfbbc605462e89", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -6,7 +6,6 @@\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n use crate::late::diagnostics::{ForLifetimeSpanType, MissingLifetimeSpot};\n-use rustc_ast::ast;\n use rustc_ast::attr;\n use rustc_ast::walk_list;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -22,7 +21,7 @@ use rustc_middle::middle::resolve_lifetime::*;\n use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_session::lint;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -175,7 +174,7 @@ crate struct LifetimeContext<'a, 'tcx> {\n     is_in_fn_syntax: bool,\n \n     /// List of labels in the function/method currently under analysis.\n-    labels_in_fn: Vec<ast::Ident>,\n+    labels_in_fn: Vec<Ident>,\n \n     /// Cache for cross-crate per-definition object lifetime defaults.\n     xcrate_object_lifetime_defaults: DefIdMap<Vec<ObjectLifetimeDefault>>,\n@@ -1064,7 +1063,7 @@ fn check_mixed_explicit_and_in_band_defs(tcx: TyCtxt<'_>, params: &[hir::Generic\n     }\n }\n \n-fn signal_shadowing_problem(tcx: TyCtxt<'_>, name: ast::Name, orig: Original, shadower: Shadower) {\n+fn signal_shadowing_problem(tcx: TyCtxt<'_>, name: Symbol, orig: Original, shadower: Shadower) {\n     let mut err = if let (ShadowKind::Lifetime, ShadowKind::Lifetime) = (orig.kind, shadower.kind) {\n         // lifetime/lifetime shadowing is an error\n         struct_span_err!(\n@@ -1102,7 +1101,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     struct GatherLabels<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         scope: ScopeRef<'a>,\n-        labels_in_fn: &'a mut Vec<ast::Ident>,\n+        labels_in_fn: &'a mut Vec<Ident>,\n     }\n \n     let mut gather =\n@@ -1138,15 +1137,11 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n         }\n     }\n \n-    fn expression_label(ex: &hir::Expr<'_>) -> Option<ast::Ident> {\n+    fn expression_label(ex: &hir::Expr<'_>) -> Option<Ident> {\n         if let hir::ExprKind::Loop(_, Some(label), _) = ex.kind { Some(label.ident) } else { None }\n     }\n \n-    fn check_if_label_shadows_lifetime(\n-        tcx: TyCtxt<'_>,\n-        mut scope: ScopeRef<'_>,\n-        label: ast::Ident,\n-    ) {\n+    fn check_if_label_shadows_lifetime(tcx: TyCtxt<'_>, mut scope: ScopeRef<'_>, label: Ident) {\n         loop {\n             match *scope {\n                 Scope::Body { s, .. }\n@@ -1360,11 +1355,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n     /// helper method to determine the span to remove when suggesting the\n     /// deletion of a lifetime\n-    fn lifetime_deletion_span(\n-        &self,\n-        name: ast::Ident,\n-        generics: &hir::Generics<'_>,\n-    ) -> Option<Span> {\n+    fn lifetime_deletion_span(&self, name: Ident, generics: &hir::Generics<'_>) -> Option<Span> {\n         generics.params.iter().enumerate().find_map(|(i, param)| {\n             if param.name.ident() == name {\n                 let mut in_band = false;\n@@ -2394,7 +2385,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         if let Some(params) = error {\n             // If there's no lifetime available, suggest `'static`.\n             if self.report_elision_failure(&mut err, params) && lifetime_names.is_empty() {\n-                lifetime_names.insert(ast::Ident::from_str(\"'static\"));\n+                lifetime_names.insert(Ident::from_str(\"'static\"));\n             }\n         }\n         self.add_missing_lifetime_specifiers_label("}, {"sha": "2031b7868c0d089539768279dd1e1be61ff86aff", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -17,7 +17,7 @@ pub use rustc_hir::def::{Namespace, PerNS};\n \n use Determinacy::*;\n \n-use rustc_ast::ast::{self, FloatTy, Ident, IntTy, Name, NodeId, UintTy};\n+use rustc_ast::ast::{self, FloatTy, IntTy, NodeId, UintTy};\n use rustc_ast::ast::{Crate, CRATE_NODE_ID};\n use rustc_ast::ast::{ItemKind, Path};\n use rustc_ast::attr;\n@@ -47,7 +47,7 @@ use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n use log::debug;\n@@ -147,7 +147,7 @@ impl<'a> ParentScope<'a> {\n \n #[derive(Eq)]\n struct BindingError {\n-    name: Name,\n+    name: Symbol,\n     origin: BTreeSet<Span>,\n     target: BTreeSet<Span>,\n     could_be_path: bool,\n@@ -176,23 +176,23 @@ enum ResolutionError<'a> {\n     GenericParamsFromOuterFunction(Res, HasGenericParams),\n     /// Error E0403: the name is already used for a type or const parameter in this generic\n     /// parameter list.\n-    NameAlreadyUsedInParameterList(Name, Span),\n+    NameAlreadyUsedInParameterList(Symbol, Span),\n     /// Error E0407: method is not a member of trait.\n-    MethodNotMemberOfTrait(Name, &'a str),\n+    MethodNotMemberOfTrait(Symbol, &'a str),\n     /// Error E0437: type is not a member of trait.\n-    TypeNotMemberOfTrait(Name, &'a str),\n+    TypeNotMemberOfTrait(Symbol, &'a str),\n     /// Error E0438: const is not a member of trait.\n-    ConstNotMemberOfTrait(Name, &'a str),\n+    ConstNotMemberOfTrait(Symbol, &'a str),\n     /// Error E0408: variable `{}` is not bound in all patterns.\n     VariableNotBoundInPattern(&'a BindingError),\n     /// Error E0409: variable `{}` is bound in inconsistent ways within the same match arm.\n-    VariableBoundWithDifferentMode(Name, Span),\n+    VariableBoundWithDifferentMode(Symbol, Span),\n     /// Error E0415: identifier is bound more than once in this parameter list.\n     IdentifierBoundMoreThanOnceInParameterList(&'a str),\n     /// Error E0416: identifier is bound more than once in the same pattern.\n     IdentifierBoundMoreThanOnceInSamePattern(&'a str),\n     /// Error E0426: use of undeclared label.\n-    UndeclaredLabel(&'a str, Option<Name>),\n+    UndeclaredLabel(&'a str, Option<Symbol>),\n     /// Error E0429: `self` imports are only allowed within a `{ }` list.\n     SelfImportsOnlyAllowedWithin,\n     /// Error E0430: `self` import can only appear once in the list.\n@@ -206,7 +206,7 @@ enum ResolutionError<'a> {\n     /// Error E0435: attempt to use a non-constant value in a constant.\n     AttemptToUseNonConstantValueInConstant,\n     /// Error E0530: `X` bindings cannot shadow `Y`s.\n-    BindingShadowsSomethingUnacceptable(&'a str, Name, &'a NameBinding<'a>),\n+    BindingShadowsSomethingUnacceptable(&'a str, Symbol, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n     /// Error E0735: type parameters with a default cannot use `Self`\n@@ -406,12 +406,12 @@ enum ModuleKind {\n     /// * A normal module \u2012 either `mod from_file;` or `mod from_block { }`.\n     /// * A trait or an enum (it implicitly contains associated types, methods and variant\n     ///   constructors).\n-    Def(DefKind, DefId, Name),\n+    Def(DefKind, DefId, Symbol),\n }\n \n impl ModuleKind {\n     /// Get name of the module.\n-    pub fn name(&self) -> Option<Name> {\n+    pub fn name(&self) -> Option<Symbol> {\n         match self {\n             ModuleKind::Block(..) => None,\n             ModuleKind::Def(.., name) => Some(*name),\n@@ -786,7 +786,7 @@ impl<'a> NameBinding<'a> {\n /// All other types are defined somewhere and possibly imported, but the primitive ones need\n /// special handling, since they have no place of origin.\n struct PrimitiveTypeTable {\n-    primitive_types: FxHashMap<Name, PrimTy>,\n+    primitive_types: FxHashMap<Symbol, PrimTy>,\n }\n \n impl PrimitiveTypeTable {\n@@ -838,7 +838,7 @@ pub struct Resolver<'a> {\n \n     /// Names of fields of an item `DefId` accessible with dot syntax.\n     /// Used for hints during error reporting.\n-    field_names: FxHashMap<DefId, Vec<Spanned<Name>>>,\n+    field_names: FxHashMap<DefId, Vec<Spanned<Symbol>>>,\n \n     /// All imports known to succeed or fail.\n     determined_imports: Vec<&'a Import<'a>>,\n@@ -913,11 +913,11 @@ pub struct Resolver<'a> {\n \n     crate_loader: CrateLoader<'a>,\n     macro_names: FxHashSet<Ident>,\n-    builtin_macros: FxHashMap<Name, SyntaxExtension>,\n+    builtin_macros: FxHashMap<Symbol, SyntaxExtension>,\n     registered_attrs: FxHashSet<Ident>,\n     registered_tools: FxHashSet<Ident>,\n-    macro_use_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n-    all_macros: FxHashMap<Name, Res>,\n+    macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n+    all_macros: FxHashMap<Symbol, Res>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n     dummy_ext_derive: Lrc<SyntaxExtension>,\n@@ -947,7 +947,7 @@ pub struct Resolver<'a> {\n     helper_attrs: FxHashMap<ExpnId, Vec<Ident>>,\n \n     /// Avoid duplicated errors for \"name already defined\".\n-    name_already_seen: FxHashMap<Name, Span>,\n+    name_already_seen: FxHashMap<Symbol, Span>,\n \n     potentially_unused_imports: Vec<&'a Import<'a>>,\n \n@@ -956,7 +956,7 @@ pub struct Resolver<'a> {\n     struct_constructors: DefIdMap<(Res, ty::Visibility)>,\n \n     /// Features enabled for this crate.\n-    active_features: FxHashSet<Name>,\n+    active_features: FxHashSet<Symbol>,\n \n     /// Stores enum visibilities to properly build a reduced graph\n     /// when visiting the correspondent variants.\n@@ -1044,8 +1044,8 @@ impl rustc_ast_lowering::Resolver for Resolver<'_> {\n     fn resolve_str_path(\n         &mut self,\n         span: Span,\n-        crate_root: Option<Name>,\n-        components: &[Name],\n+        crate_root: Option<Symbol>,\n+        components: &[Symbol],\n         ns: Namespace,\n     ) -> (ast::Path, Res) {\n         let root = if crate_root.is_some() { kw::PathRoot } else { kw::Crate };\n@@ -2678,7 +2678,7 @@ impl<'a> Resolver<'a> {\n     fn add_suggestion_for_rename_of_use(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        name: Name,\n+        name: Symbol,\n         import: &Import<'_>,\n         binding_span: Span,\n     ) {\n@@ -2914,12 +2914,12 @@ impl<'a> Resolver<'a> {\n     }\n \n     // For rustdoc.\n-    pub fn all_macros(&self) -> &FxHashMap<Name, Res> {\n+    pub fn all_macros(&self) -> &FxHashMap<Symbol, Res> {\n         &self.all_macros\n     }\n }\n \n-fn names_to_string(names: &[Name]) -> String {\n+fn names_to_string(names: &[Symbol]) -> String {\n     let mut result = String::new();\n     for (i, name) in names.iter().filter(|name| **name != kw::PathRoot).enumerate() {\n         if i > 0 {\n@@ -2941,14 +2941,14 @@ fn path_names_to_string(path: &Path) -> String {\n fn module_to_string(module: Module<'_>) -> Option<String> {\n     let mut names = Vec::new();\n \n-    fn collect_mod(names: &mut Vec<Name>, module: Module<'_>) {\n+    fn collect_mod(names: &mut Vec<Symbol>, module: Module<'_>) {\n         if let ModuleKind::Def(.., name) = module.kind {\n             if let Some(parent) = module.parent {\n                 names.push(name);\n                 collect_mod(names, parent);\n             }\n         } else {\n-            names.push(Name::intern(\"<opaque>\"));\n+            names.push(Symbol::intern(\"<opaque>\"));\n             collect_mod(names, module.parent.unwrap());\n         }\n     }"}, {"sha": "1b6268dc8cbcfbb6b3a84190fca9d4bf9568971b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -6,7 +6,7 @@ use crate::Namespace::*;\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy};\n use crate::{CrateLint, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n-use rustc_ast::ast::{self, Ident, NodeId};\n+use rustc_ast::ast::{self, NodeId};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, StabilityLevel};\n use rustc_data_structures::fx::FxHashSet;\n@@ -23,7 +23,7 @@ use rustc_session::lint::builtin::UNUSED_MACROS;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n use rustc_data_structures::sync::Lrc;\n@@ -165,7 +165,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         parent_scope.module.unexpanded_invocations.borrow_mut().remove(&expansion);\n     }\n \n-    fn register_builtin_macro(&mut self, ident: ast::Ident, ext: SyntaxExtension) {\n+    fn register_builtin_macro(&mut self, ident: Ident, ext: SyntaxExtension) {\n         if self.builtin_macros.insert(ident.name, ext).is_some() {\n             self.session\n                 .span_err(ident.span, &format!(\"built-in macro `{}` was already defined\", ident));"}, {"sha": "534fe172bef9c64b41e1efdd86fa6014cb6f1330", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -26,6 +26,7 @@ use rustc_middle::span_bug;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::config::Input;\n use rustc_span::source_map::{respan, DUMMY_SP};\n+use rustc_span::symbol::Ident;\n use rustc_span::*;\n \n use std::env;\n@@ -264,7 +265,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         sig: &'l ast::FnSig,\n         body: Option<&'l ast::Block>,\n         id: ast::NodeId,\n-        ident: ast::Ident,\n+        ident: Ident,\n         generics: &'l ast::Generics,\n         vis: ast::Visibility,\n         span: Span,\n@@ -419,7 +420,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     fn process_assoc_const(\n         &mut self,\n         id: ast::NodeId,\n-        ident: ast::Ident,\n+        ident: Ident,\n         typ: &'l ast::Ty,\n         expr: Option<&'l ast::Expr>,\n         parent_id: DefId,"}, {"sha": "8ae6853210f18d29d247c19c4c85d0c9139e31a9", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -24,6 +24,7 @@ use rustc_middle::{bug, span_bug};\n use rustc_session::config::{CrateType, Input, OutputType};\n use rustc_session::output::{filename_for_metadata, out_filename};\n use rustc_span::source_map::Spanned;\n+use rustc_span::symbol::Ident;\n use rustc_span::*;\n \n use std::cell::Cell;\n@@ -405,7 +406,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n \n     // FIXME would be nice to take a MethodItem here, but the ast provides both\n     // trait and impl flavours, so the caller must do the disassembly.\n-    pub fn get_method_data(&self, id: ast::NodeId, ident: ast::Ident, span: Span) -> Option<Def> {\n+    pub fn get_method_data(&self, id: ast::NodeId, ident: Ident, span: Span) -> Option<Def> {\n         // The qualname for a method is the trait name or name of the struct in an impl in\n         // which the method is declared in, followed by the method's name.\n         let (qualname, parent_scope, decl_id, docs, attributes) = match self\n@@ -914,7 +915,7 @@ fn make_signature(decl: &ast::FnDecl, generics: &ast::Generics) -> String {\n // variables (idents) from patterns.\n struct PathCollector<'l> {\n     collected_paths: Vec<(NodeId, &'l ast::Path)>,\n-    collected_idents: Vec<(NodeId, ast::Ident, ast::Mutability)>,\n+    collected_idents: Vec<(NodeId, Ident, ast::Mutability)>,\n }\n \n impl<'l> PathCollector<'l> {"}, {"sha": "bda9ff93b02ef0f19494dc90d0b935300168b044", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -32,6 +32,7 @@ use rls_data::{SigElement, Signature};\n use rustc_ast::ast::{self, Extern, NodeId};\n use rustc_ast_pretty::pprust;\n use rustc_hir::def::{DefKind, Res};\n+use rustc_span::symbol::{Ident, Symbol};\n \n pub fn item_signature(item: &ast::Item, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {\n@@ -69,7 +70,7 @@ pub fn variant_signature(variant: &ast::Variant, scx: &SaveContext<'_, '_>) -> O\n \n pub fn method_signature(\n     id: NodeId,\n-    ident: ast::Ident,\n+    ident: Ident,\n     generics: &ast::Generics,\n     m: &ast::FnSig,\n     scx: &SaveContext<'_, '_>,\n@@ -82,7 +83,7 @@ pub fn method_signature(\n \n pub fn assoc_const_signature(\n     id: NodeId,\n-    ident: ast::Name,\n+    ident: Symbol,\n     ty: &ast::Ty,\n     default: Option<&ast::Expr>,\n     scx: &SaveContext<'_, '_>,\n@@ -95,7 +96,7 @@ pub fn assoc_const_signature(\n \n pub fn assoc_type_signature(\n     id: NodeId,\n-    ident: ast::Ident,\n+    ident: Ident,\n     bounds: Option<&ast::GenericBounds>,\n     default: Option<&ast::Ty>,\n     scx: &SaveContext<'_, '_>,\n@@ -803,7 +804,7 @@ fn name_and_generics(\n     offset: usize,\n     generics: &ast::Generics,\n     id: NodeId,\n-    name: ast::Ident,\n+    name: Ident,\n     scx: &SaveContext<'_, '_>,\n ) -> Result {\n     let name = name.to_string();\n@@ -821,7 +822,7 @@ fn name_and_generics(\n \n fn make_assoc_type_signature(\n     id: NodeId,\n-    ident: ast::Ident,\n+    ident: Ident,\n     bounds: Option<&ast::GenericBounds>,\n     default: Option<&ast::Ty>,\n     scx: &SaveContext<'_, '_>,\n@@ -853,7 +854,7 @@ fn make_assoc_type_signature(\n \n fn make_assoc_const_signature(\n     id: NodeId,\n-    ident: ast::Name,\n+    ident: Symbol,\n     ty: &ast::Ty,\n     default: Option<&ast::Expr>,\n     scx: &SaveContext<'_, '_>,\n@@ -884,7 +885,7 @@ fn make_assoc_const_signature(\n \n fn make_method_signature(\n     id: NodeId,\n-    ident: ast::Ident,\n+    ident: Ident,\n     generics: &ast::Generics,\n     m: &ast::FnSig,\n     scx: &SaveContext<'_, '_>,"}, {"sha": "47df82690e07d82599c8de1676e319627a7b96a4", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -17,14 +17,13 @@ use super::{VtableClosureData, VtableFnPointerData, VtableGeneratorData, VtableI\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use crate::traits::error_reporting::InferCtxtExt;\n-use rustc_ast::ast::Ident;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::DUMMY_SP;\n \n pub use rustc_middle::traits::Reveal;"}, {"sha": "6529d784ad45293af55465bf511f16e42cb6015e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -8,7 +8,6 @@\n use crate::collect::PlaceholderHirTyCollector;\n use crate::middle::resolve_lifetime as rl;\n use crate::require_c_abi_if_c_variadic;\n-use rustc_ast::ast;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::ErrorReported;\n@@ -27,7 +26,7 @@ use rustc_middle::ty::{GenericParamDef, GenericParamDefKind};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, LATE_BOUND_LIFETIME_ARGUMENTS};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits;\n@@ -114,7 +113,7 @@ pub enum SizedByDefault {\n }\n \n struct ConvertedBinding<'a, 'tcx> {\n-    item_name: ast::Ident,\n+    item_name: Ident,\n     kind: ConvertedBindingKind<'a, 'tcx>,\n     span: Span,\n }\n@@ -1183,11 +1182,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         )\n     }\n \n-    fn trait_defines_associated_type_named(\n-        &self,\n-        trait_def_id: DefId,\n-        assoc_name: ast::Ident,\n-    ) -> bool {\n+    fn trait_defines_associated_type_named(&self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n         self.tcx()\n             .associated_items(trait_def_id)\n             .find_by_name_and_kind(self.tcx(), assoc_name, ty::AssocKind::Type, trait_def_id)\n@@ -1938,7 +1933,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         span: Span,\n         type_str: &str,\n         trait_str: &str,\n-        name: ast::Name,\n+        name: Symbol,\n     ) {\n         let mut err = struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\");\n         if let (Some(_), Ok(snippet)) = (\n@@ -1969,7 +1964,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     fn find_bound_for_assoc_item(\n         &self,\n         ty_param_def_id: LocalDefId,\n-        assoc_name: ast::Ident,\n+        assoc_name: Ident,\n         span: Span,\n     ) -> Result<ty::PolyTraitRef<'tcx>, ErrorReported> {\n         let tcx = self.tcx();\n@@ -2006,7 +2001,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         all_candidates: impl Fn() -> I,\n         ty_param_name: impl Fn() -> String,\n-        assoc_name: ast::Ident,\n+        assoc_name: Ident,\n         span: Span,\n         is_equality: impl Fn() -> Option<String>,\n     ) -> Result<ty::PolyTraitRef<'tcx>, ErrorReported>\n@@ -2124,7 +2119,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         all_candidates: impl Fn() -> I,\n         ty_param_name: &str,\n-        assoc_name: ast::Ident,\n+        assoc_name: Ident,\n         span: Span,\n     ) where\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,"}, {"sha": "ae6c1738da77dce1b742e250671057ace0d3c46d", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,14 +1,14 @@\n use super::method::MethodCallee;\n use super::{FnCtxt, Needs, PlaceOp};\n \n-use rustc_ast::ast::Ident;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_infer::infer::{InferCtxt, InferOk};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, OverloadedDeref};\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt, WithConstness};\n use rustc_middle::ty::{ToPredicate, TypeFoldable};\n use rustc_session::DiagnosticMessageId;\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{self, TraitEngine};"}, {"sha": "52ddacc1c4b1a537f2d10286176e3b7ec772f16e", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,7 +3,6 @@ use super::method::MethodCallee;\n use super::{Expectation, FnCtxt, Needs, TupleArgumentsFlag};\n use crate::type_error_struct;\n \n-use rustc_ast::ast::Ident;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -15,6 +14,7 @@ use rustc_middle::ty::adjustment::{\n };\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_target::spec::abi;\n "}, {"sha": "71e1b32aeaa90e9a668cde56b66d61b70bc48724", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -37,7 +37,7 @@ use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{AdtKind, Visibility};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n \n use std::fmt::Display;\n@@ -1411,7 +1411,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         find_best_match_for_name(names, field, None)\n     }\n \n-    fn available_field_names(&self, variant: &'tcx ty::VariantDef) -> Vec<ast::Name> {\n+    fn available_field_names(&self, variant: &'tcx ty::VariantDef) -> Vec<Symbol> {\n         variant\n             .fields\n             .iter()\n@@ -1426,7 +1426,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .collect()\n     }\n \n-    fn name_series_display(&self, names: Vec<ast::Name>) -> String {\n+    fn name_series_display(&self, names: Vec<Symbol>) -> String {\n         // dynamic limit, to never omit just one field\n         let limit = if names.len() == 6 { 6 } else { 5 };\n         let mut display =\n@@ -1443,7 +1443,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n         needs: Needs,\n         base: &'tcx hir::Expr<'tcx>,\n-        field: ast::Ident,\n+        field: Ident,\n     ) -> Ty<'tcx> {\n         let expr_t = self.check_expr_with_needs(base, needs);\n         let expr_t = self.structurally_resolved_type(base.span, expr_t);\n@@ -1522,7 +1522,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn ban_nonexisting_field(\n         &self,\n-        field: ast::Ident,\n+        field: Ident,\n         base: &'tcx hir::Expr<'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n         expr_t: Ty<'tcx>,\n@@ -1560,7 +1560,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr: &hir::Expr<'_>,\n         expr_t: Ty<'tcx>,\n-        field: ast::Ident,\n+        field: Ident,\n         base_did: DefId,\n     ) {\n         let struct_path = self.tcx().def_path_str(base_did);\n@@ -1589,7 +1589,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n-    fn ban_take_value_of_method(&self, expr: &hir::Expr<'_>, expr_t: Ty<'tcx>, field: ast::Ident) {\n+    fn ban_take_value_of_method(&self, expr: &hir::Expr<'_>, expr_t: Ty<'tcx>, field: Ident) {\n         let mut err = type_error_struct!(\n             self.tcx().sess,\n             field.span,\n@@ -1636,7 +1636,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         def: &'tcx ty::AdtDef,\n-        field: ast::Ident,\n+        field: Ident,\n     ) {\n         if let Some(suggested_field_name) =\n             Self::suggest_field_name(def.non_enum_variant(), &field.as_str(), vec![])\n@@ -1665,7 +1665,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         expr: &hir::Expr<'_>,\n         base: &hir::Expr<'_>,\n-        field: ast::Ident,\n+        field: Ident,\n         len: &ty::Const<'tcx>,\n     ) {\n         if let (Some(len), Ok(user_index)) =\n@@ -1689,7 +1689,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         expr: &hir::Expr<'_>,\n         base: &hir::Expr<'_>,\n-        field: ast::Ident,\n+        field: Ident,\n     ) {\n         if let Ok(base) = self.tcx.sess.source_map().span_to_snippet(base.span) {\n             let msg = format!(\"`{}` is a raw pointer; try dereferencing it\", base);"}, {"sha": "a254aecf07bab3248d08701dc126e67c9a224261", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -11,7 +11,6 @@ pub use self::CandidateSource::*;\n pub use self::MethodError::*;\n \n use crate::check::FnCtxt;\n-use rustc_ast::ast;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -22,6 +21,7 @@ use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TypeFoldable, WithConstness};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -104,7 +104,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Determines whether the type `self_ty` supports a method name `method_name` or not.\n     pub fn method_exists(\n         &self,\n-        method_name: ast::Ident,\n+        method_name: Ident,\n         self_ty: Ty<'tcx>,\n         call_expr_id: hir::HirId,\n         allow_private: bool,\n@@ -133,7 +133,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         err: &mut DiagnosticBuilder<'a>,\n         msg: &str,\n-        method_name: ast::Ident,\n+        method_name: Ident,\n         self_ty: Ty<'tcx>,\n         call_expr: &hir::Expr<'_>,\n     ) {\n@@ -260,7 +260,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn lookup_probe(\n         &self,\n         span: Span,\n-        method_name: ast::Ident,\n+        method_name: Ident,\n         self_ty: Ty<'tcx>,\n         call_expr: &'tcx hir::Expr<'tcx>,\n         scope: ProbeScope,\n@@ -290,7 +290,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn lookup_method_in_trait(\n         &self,\n         span: Span,\n-        m_name: ast::Ident,\n+        m_name: Ident,\n         trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         opt_input_types: Option<&[Ty<'tcx>]>,\n@@ -414,7 +414,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn resolve_ufcs(\n         &self,\n         span: Span,\n-        method_name: ast::Ident,\n+        method_name: Ident,\n         self_ty: Ty<'tcx>,\n         expr_id: hir::HirId,\n     ) -> Result<(DefKind, DefId), MethodError<'tcx>> {\n@@ -478,7 +478,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn associated_item(\n         &self,\n         def_id: DefId,\n-        item_name: ast::Ident,\n+        item_name: Ident,\n         ns: Namespace,\n     ) -> Option<ty::AssocItem> {\n         self.tcx"}, {"sha": "7f1d77e5b97d871dfc61377596b31f4c734e4c1d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::config::nightly_options;\n use rustc_session::lint;\n-use rustc_span::{symbol::Symbol, Span, DUMMY_SP};\n+use rustc_span::{symbol::Ident, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::query::method_autoderef::MethodAutoderefBadTy;\n use rustc_trait_selection::traits::query::method_autoderef::{\n@@ -55,7 +55,7 @@ struct ProbeContext<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     span: Span,\n     mode: Mode,\n-    method_name: Option<ast::Ident>,\n+    method_name: Option<Ident>,\n     return_type: Option<Ty<'tcx>>,\n \n     /// This is the OriginalQueryValues for the steps queries\n@@ -268,7 +268,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         span: Span,\n         mode: Mode,\n-        item_name: ast::Ident,\n+        item_name: Ident,\n         is_suggestion: IsSuggestion,\n         self_ty: Ty<'tcx>,\n         scope_expr_id: hir::HirId,\n@@ -295,7 +295,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &'a self,\n         span: Span,\n         mode: Mode,\n-        method_name: Option<ast::Ident>,\n+        method_name: Option<Ident>,\n         return_type: Option<Ty<'tcx>>,\n         is_suggestion: IsSuggestion,\n         self_ty: Ty<'tcx>,\n@@ -518,7 +518,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         fcx: &'a FnCtxt<'a, 'tcx>,\n         span: Span,\n         mode: Mode,\n-        method_name: Option<ast::Ident>,\n+        method_name: Option<Ident>,\n         return_type: Option<Ty<'tcx>>,\n         orig_steps_var_values: OriginalQueryValues<'tcx>,\n         steps: Lrc<Vec<CandidateStep<'tcx>>>,\n@@ -978,7 +978,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         Ok(())\n     }\n \n-    fn candidate_method_names(&self) -> Vec<ast::Ident> {\n+    fn candidate_method_names(&self) -> Vec<Ident> {\n         let mut set = FxHashSet::default();\n         let mut names: Vec<_> = self\n             .inherent_candidates"}, {"sha": "cf26c94418e2d2d10235ccd770d0fc8176c136b7", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -2,7 +2,6 @@\n //! found or is otherwise invalid.\n \n use crate::check::FnCtxt;\n-use rustc_ast::ast;\n use rustc_ast::util::lev_distance;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n@@ -18,7 +17,7 @@ use rustc_middle::ty::print::with_crate_prefix;\n use rustc_middle::ty::{\n     self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, Ident};\n use rustc_span::{source_map, FileName, Span};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::Obligation;\n@@ -72,7 +71,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         span: Span,\n         rcvr_ty: Ty<'tcx>,\n-        item_name: ast::Ident,\n+        item_name: Ident,\n         source: SelfSource<'b>,\n         error: MethodError<'tcx>,\n         args: Option<&'tcx [hir::Expr<'tcx>]>,\n@@ -923,7 +922,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         span: Span,\n         rcvr_ty: Ty<'tcx>,\n-        item_name: ast::Ident,\n+        item_name: Ident,\n         source: SelfSource<'b>,\n         valid_out_of_scope_traits: Vec<DefId>,\n         unsatisfied_predicates: &[(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)],\n@@ -1378,7 +1377,7 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n }\n \n fn print_disambiguation_help(\n-    item_name: ast::Ident,\n+    item_name: Ident,\n     args: Option<&'tcx [hir::Expr<'tcx>]>,\n     err: &mut DiagnosticBuilder<'_>,\n     trait_name: String,"}, {"sha": "956e09ec52b4a35db8c1afb84c21516a178bec5d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3718,14 +3718,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n-    fn resolve_place_op(&self, op: PlaceOp, is_mut: bool) -> (Option<DefId>, ast::Ident) {\n+    fn resolve_place_op(&self, op: PlaceOp, is_mut: bool) -> (Option<DefId>, Ident) {\n         let (tr, name) = match (op, is_mut) {\n             (PlaceOp::Deref, false) => (self.tcx.lang_items().deref_trait(), sym::deref),\n             (PlaceOp::Deref, true) => (self.tcx.lang_items().deref_mut_trait(), sym::deref_mut),\n             (PlaceOp::Index, false) => (self.tcx.lang_items().index_trait(), sym::index),\n             (PlaceOp::Index, true) => (self.tcx.lang_items().index_mut_trait(), sym::index_mut),\n         };\n-        (tr, ast::Ident::with_dummy_span(name))\n+        (tr, Ident::with_dummy_span(name))\n     }\n \n     fn try_overloaded_place_op(\n@@ -4824,19 +4824,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Given a function block's `HirId`, returns its `FnDecl` if it exists, or `None` otherwise.\n-    fn get_parent_fn_decl(\n-        &self,\n-        blk_id: hir::HirId,\n-    ) -> Option<(&'tcx hir::FnDecl<'tcx>, ast::Ident)> {\n+    fn get_parent_fn_decl(&self, blk_id: hir::HirId) -> Option<(&'tcx hir::FnDecl<'tcx>, Ident)> {\n         let parent = self.tcx.hir().get(self.tcx.hir().get_parent_item(blk_id));\n         self.get_node_fn_decl(parent).map(|(fn_decl, ident, _)| (fn_decl, ident))\n     }\n \n     /// Given a function `Node`, return its `FnDecl` if it exists, or `None` otherwise.\n-    fn get_node_fn_decl(\n-        &self,\n-        node: Node<'tcx>,\n-    ) -> Option<(&'tcx hir::FnDecl<'tcx>, ast::Ident, bool)> {\n+    fn get_node_fn_decl(&self, node: Node<'tcx>) -> Option<(&'tcx hir::FnDecl<'tcx>, Ident, bool)> {\n         match node {\n             Node::Item(&hir::Item { ident, kind: hir::ItemKind::Fn(ref sig, ..), .. }) => {\n                 // This is less than ideal, it will not suggest a return type span on any"}, {"sha": "00ff2af82e30356f6af2420a2289314022acae97", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -2,7 +2,6 @@\n \n use super::method::MethodCallee;\n use super::{FnCtxt, Needs};\n-use rustc_ast::ast::Ident;\n use rustc_errors::{self, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -11,6 +10,7 @@ use rustc_middle::ty::adjustment::{\n };\n use rustc_middle::ty::TyKind::{Adt, Array, Char, FnDef, Never, Ref, Str, Tuple, Uint};\n use rustc_middle::ty::{self, suggest_constraining_type_param, Ty, TyCtxt, TypeFoldable};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n "}, {"sha": "8a10427260eee23ff71213ced558a099747476d8", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::{self, BindingMode, Ty, TypeFoldable};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{Span, Spanned};\n+use rustc_span::symbol::Ident;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n \n use std::cmp;\n@@ -1133,7 +1134,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n-    fn error_field_already_bound(&self, span: Span, ident: ast::Ident, other_field: Span) {\n+    fn error_field_already_bound(&self, span: Span, ident: Ident, other_field: Span) {\n         struct_span_err!(\n             self.tcx.sess,\n             span,\n@@ -1149,8 +1150,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn error_inexistent_fields(\n         &self,\n         kind_name: &str,\n-        inexistent_fields: &[ast::Ident],\n-        unmentioned_fields: &mut Vec<ast::Ident>,\n+        inexistent_fields: &[Ident],\n+        unmentioned_fields: &mut Vec<Ident>,\n         variant: &ty::VariantDef,\n     ) {\n         let tcx = self.tcx;\n@@ -1225,7 +1226,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn error_unmentioned_fields(\n         &self,\n         span: Span,\n-        unmentioned_fields: &[ast::Ident],\n+        unmentioned_fields: &[Ident],\n         variant: &ty::VariantDef,\n     ) {\n         let field_names = if unmentioned_fields.len() == 1 {"}, {"sha": "6aa8242193d5fce87d9a22a4ae2c1f9e6023b30e", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -35,15 +35,14 @@ use super::FnCtxt;\n use crate::expr_use_visitor as euv;\n use crate::mem_categorization as mc;\n use crate::mem_categorization::PlaceBase;\n-use rustc_ast::ast;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_infer::infer::UpvarRegion;\n use rustc_middle::ty::{self, Ty, TyCtxt, UpvarSubsts};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn closure_analyze(&self, body: &'tcx hir::Body<'tcx>) {\n@@ -261,7 +260,7 @@ struct InferBorrowKind<'a, 'tcx> {\n \n     // If we modified `current_closure_kind`, this field contains a `Some()` with the\n     // variable access that caused us to do so.\n-    current_origin: Option<(Span, ast::Name)>,\n+    current_origin: Option<(Span, Symbol)>,\n \n     // For each upvar that we access, we track the minimal kind of\n     // access we need (ref, ref mut, move, etc).\n@@ -415,7 +414,7 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n         closure_id: LocalDefId,\n         new_kind: ty::ClosureKind,\n         upvar_span: Span,\n-        var_name: ast::Name,\n+        var_name: Symbol,\n     ) {\n         debug!(\n             \"adjust_closure_kind(closure_id={:?}, new_kind={:?}, upvar_span={:?}, var_name={})\",\n@@ -480,6 +479,6 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n     }\n }\n \n-fn var_name(tcx: TyCtxt<'_>, var_hir_id: hir::HirId) -> ast::Name {\n+fn var_name(tcx: TyCtxt<'_>, var_hir_id: hir::HirId) -> Symbol {\n     tcx.hir().name(var_hir_id)\n }"}, {"sha": "b79ac50da8fa33c8f8647f18e1be076d0b690b67", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{\n     self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_session::parse::feature_err;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::may_define_opaque_type;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -1226,7 +1226,7 @@ fn check_variances_for_type_defn<'tcx>(\n     }\n }\n \n-fn report_bivariance(tcx: TyCtxt<'_>, span: Span, param_name: ast::Name) {\n+fn report_bivariance(tcx: TyCtxt<'_>, span: Span, param_name: Symbol) {\n     let mut err = error_392(tcx, span, param_name);\n \n     let suggested_marker_id = tcx.lang_items().phantom_data();\n@@ -1368,7 +1368,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-fn error_392(tcx: TyCtxt<'_>, span: Span, param_name: ast::Name) -> DiagnosticBuilder<'_> {\n+fn error_392(tcx: TyCtxt<'_>, span: Span, param_name: Symbol) -> DiagnosticBuilder<'_> {\n     let mut err =\n         struct_span_err!(tcx.sess, span, E0392, \"parameter `{}` is never used\", param_name);\n     err.span_label(span, \"unused parameter\");"}, {"sha": "dfe86aecbf727c41d00b12e69912e201e8cb5c83", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,12 +1,11 @@\n-use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = DefIdSet::default();\n@@ -202,7 +201,7 @@ struct ExternCrateToLint {\n     /// if `Some`, then this is renamed (`extern crate orig_name as\n     /// crate_name`), and -- perhaps surprisingly -- this stores the\n     /// *original* name (`item.name` will contain the new name)\n-    orig_name: Option<ast::Name>,\n+    orig_name: Option<Symbol>,\n \n     /// if `false`, the original name started with `_`, so we shouldn't lint\n     /// about it going unused (but we should still emit idiom lints)."}, {"sha": "854bd03b2648679237144d5980f852b8bddf43c3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -19,7 +19,7 @@ use crate::check::intrinsic::intrinsic_operation_unsafety;\n use crate::constrained_generic_params as cgp;\n use crate::middle::resolve_lifetime as rl;\n use rustc_ast::ast;\n-use rustc_ast::ast::{Ident, MetaItemKind};\n+use rustc_ast::ast::MetaItemKind;\n use rustc_attr::{list_contains_name, mark_used, InlineAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -42,7 +42,7 @@ use rustc_middle::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n@@ -813,7 +813,7 @@ fn convert_variant(\n     adt_kind: ty::AdtKind,\n     parent_did: LocalDefId,\n ) -> ty::VariantDef {\n-    let mut seen_fields: FxHashMap<ast::Ident, Span> = Default::default();\n+    let mut seen_fields: FxHashMap<Ident, Span> = Default::default();\n     let hir_id = tcx.hir().as_local_hir_id(variant_did.unwrap_or(parent_did));\n     let fields = def\n         .fields()"}, {"sha": "716263393ba8d69173936f7c21197dce3244f686", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,7 +3,7 @@ use super::*;\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::with_default_globals;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n \n fn word_cfg(s: &str) -> Cfg {"}, {"sha": "4bf3649dcc2e259c2138b0cd79d9f93f561a4154", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -12,6 +12,7 @@ use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::ty;\n use rustc_mir::const_eval::is_min_const_fn;\n use rustc_span::hygiene::MacroKind;\n+use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n use crate::clean::{self, GetDefId, ToSource, TypeKind};\n@@ -37,7 +38,7 @@ type Attrs<'hir> = rustc_middle::ty::Attributes<'hir>;\n pub fn try_inline(\n     cx: &DocContext<'_>,\n     res: Res,\n-    name: ast::Name,\n+    name: Symbol,\n     attrs: Option<Attrs<'_>>,\n     visited: &mut FxHashSet<DefId>,\n ) -> Option<Vec<clean::Item>> {\n@@ -515,7 +516,7 @@ fn build_static(cx: &DocContext<'_>, did: DefId, mutable: bool) -> clean::Static\n     }\n }\n \n-fn build_macro(cx: &DocContext<'_>, did: DefId, name: ast::Name) -> clean::ItemEnum {\n+fn build_macro(cx: &DocContext<'_>, did: DefId, name: Symbol) -> clean::ItemEnum {\n     let imported_from = cx.tcx.original_crate_name(did.krate);\n     match cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())) {\n         LoadedMacro::MacroDef(def, _) => {"}, {"sha": "8cd9ab41aa40a7a4193c700b532c955e776a47e7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -9,7 +9,7 @@ mod simplify;\n pub mod types;\n pub mod utils;\n \n-use rustc_ast::ast::{self, Ident};\n+use rustc_ast::ast;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n@@ -24,7 +24,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n use rustc_mir::const_eval::is_min_const_fn;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, Pos};\n use rustc_typeck::hir_ty_to_ty;\n \n@@ -921,7 +921,7 @@ impl Clean<Item> for doctree::Function<'_> {\n     }\n }\n \n-impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], &'a [ast::Ident]) {\n+impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], &'a [Ident]) {\n     fn clean(&self, cx: &DocContext<'_>) -> Arguments {\n         Arguments {\n             values: self\n@@ -2006,7 +2006,7 @@ impl Clean<String> for Ident {\n     }\n }\n \n-impl Clean<String> for ast::Name {\n+impl Clean<String> for Symbol {\n     #[inline]\n     fn clean(&self, _: &DocContext<'_>) -> String {\n         self.to_string()"}, {"sha": "8bf811877a6a86aec8ff8174e970ac268d5f9ee1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -8,7 +8,7 @@ use std::rc::Rc;\n use std::sync::Arc;\n use std::{slice, vec};\n \n-use rustc_ast::ast::{self, AttrStyle, Ident};\n+use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::attr;\n use rustc_ast::util::comments::strip_doc_comment_decoration;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -21,7 +21,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::middle::stability;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DUMMY_SP;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{self, FileName};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;"}, {"sha": "5b13832742770fd2f5b927ba45c11a44e111baeb", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,15 +3,14 @@\n pub use self::StructType::*;\n \n use rustc_ast::ast;\n-use rustc_ast::ast::Name;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::{self, Span};\n+use rustc_span::{self, Span, Symbol};\n \n use rustc_hir as hir;\n use rustc_hir::def_id::CrateNum;\n \n pub struct Module<'hir> {\n-    pub name: Option<Name>,\n+    pub name: Option<Symbol>,\n     pub attrs: &'hir [ast::Attribute],\n     pub where_outer: Span,\n     pub where_inner: Span,\n@@ -39,7 +38,7 @@ pub struct Module<'hir> {\n \n impl Module<'hir> {\n     pub fn new(\n-        name: Option<Name>,\n+        name: Option<Symbol>,\n         attrs: &'hir [ast::Attribute],\n         vis: &'hir hir::Visibility<'hir>,\n     ) -> Module<'hir> {\n@@ -86,7 +85,7 @@ pub struct Struct<'hir> {\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub id: hir::HirId,\n     pub struct_type: StructType,\n-    pub name: Name,\n+    pub name: Symbol,\n     pub generics: &'hir hir::Generics<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n     pub fields: &'hir [hir::StructField<'hir>],\n@@ -97,7 +96,7 @@ pub struct Union<'hir> {\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub id: hir::HirId,\n     pub struct_type: StructType,\n-    pub name: Name,\n+    pub name: Symbol,\n     pub generics: &'hir hir::Generics<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n     pub fields: &'hir [hir::StructField<'hir>],\n@@ -111,11 +110,11 @@ pub struct Enum<'hir> {\n     pub attrs: &'hir [ast::Attribute],\n     pub id: hir::HirId,\n     pub whence: Span,\n-    pub name: Name,\n+    pub name: Symbol,\n }\n \n pub struct Variant<'hir> {\n-    pub name: Name,\n+    pub name: Symbol,\n     pub id: hir::HirId,\n     pub attrs: &'hir [ast::Attribute],\n     pub def: &'hir hir::VariantData<'hir>,\n@@ -126,7 +125,7 @@ pub struct Function<'hir> {\n     pub decl: &'hir hir::FnDecl<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n     pub id: hir::HirId,\n-    pub name: Name,\n+    pub name: Symbol,\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub header: hir::FnHeader,\n     pub whence: Span,\n@@ -137,7 +136,7 @@ pub struct Function<'hir> {\n pub struct Typedef<'hir> {\n     pub ty: &'hir hir::Ty<'hir>,\n     pub gen: &'hir hir::Generics<'hir>,\n-    pub name: Name,\n+    pub name: Symbol,\n     pub id: hir::HirId,\n     pub attrs: &'hir [ast::Attribute],\n     pub whence: Span,\n@@ -146,7 +145,7 @@ pub struct Typedef<'hir> {\n \n pub struct OpaqueTy<'hir> {\n     pub opaque_ty: &'hir hir::OpaqueTy<'hir>,\n-    pub name: Name,\n+    pub name: Symbol,\n     pub id: hir::HirId,\n     pub attrs: &'hir [ast::Attribute],\n     pub whence: Span,\n@@ -158,7 +157,7 @@ pub struct Static<'hir> {\n     pub type_: &'hir hir::Ty<'hir>,\n     pub mutability: hir::Mutability,\n     pub expr: hir::BodyId,\n-    pub name: Name,\n+    pub name: Symbol,\n     pub attrs: &'hir [ast::Attribute],\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub id: hir::HirId,\n@@ -168,7 +167,7 @@ pub struct Static<'hir> {\n pub struct Constant<'hir> {\n     pub type_: &'hir hir::Ty<'hir>,\n     pub expr: hir::BodyId,\n-    pub name: Name,\n+    pub name: Symbol,\n     pub attrs: &'hir [ast::Attribute],\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub id: hir::HirId,\n@@ -178,7 +177,7 @@ pub struct Constant<'hir> {\n pub struct Trait<'hir> {\n     pub is_auto: hir::IsAuto,\n     pub unsafety: hir::Unsafety,\n-    pub name: Name,\n+    pub name: Symbol,\n     pub items: Vec<&'hir hir::TraitItem<'hir>>,\n     pub generics: &'hir hir::Generics<'hir>,\n     pub bounds: &'hir [hir::GenericBound<'hir>],\n@@ -189,7 +188,7 @@ pub struct Trait<'hir> {\n }\n \n pub struct TraitAlias<'hir> {\n-    pub name: Name,\n+    pub name: Symbol,\n     pub generics: &'hir hir::Generics<'hir>,\n     pub bounds: &'hir [hir::GenericBound<'hir>],\n     pub attrs: &'hir [ast::Attribute],\n@@ -217,7 +216,7 @@ pub struct Impl<'hir> {\n pub struct ForeignItem<'hir> {\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub id: hir::HirId,\n-    pub name: Name,\n+    pub name: Symbol,\n     pub kind: &'hir hir::ForeignItemKind<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n     pub whence: Span,\n@@ -226,17 +225,17 @@ pub struct ForeignItem<'hir> {\n // For Macro we store the DefId instead of the NodeId, since we also create\n // these imported macro_rules (which only have a DUMMY_NODE_ID).\n pub struct Macro<'hir> {\n-    pub name: Name,\n+    pub name: Symbol,\n     pub hid: hir::HirId,\n     pub def_id: hir::def_id::DefId,\n     pub attrs: &'hir [ast::Attribute],\n     pub whence: Span,\n     pub matchers: Vec<Span>,\n-    pub imported_from: Option<Name>,\n+    pub imported_from: Option<Symbol>,\n }\n \n pub struct ExternCrate<'hir> {\n-    pub name: Name,\n+    pub name: Symbol,\n     pub cnum: CrateNum,\n     pub path: Option<String>,\n     pub vis: &'hir hir::Visibility<'hir>,\n@@ -245,7 +244,7 @@ pub struct ExternCrate<'hir> {\n }\n \n pub struct Import<'hir> {\n-    pub name: Name,\n+    pub name: Symbol,\n     pub id: hir::HirId,\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n@@ -255,10 +254,10 @@ pub struct Import<'hir> {\n }\n \n pub struct ProcMacro<'hir> {\n-    pub name: Name,\n+    pub name: Symbol,\n     pub id: hir::HirId,\n     pub kind: MacroKind,\n-    pub helpers: Vec<Name>,\n+    pub helpers: Vec<Symbol>,\n     pub attrs: &'hir [ast::Attribute],\n     pub whence: Span,\n }"}, {"sha": "fbdb538cd874cc62f338a4a9c69787108a720c2c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::ast::{self, Ident};\n+use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_expand::base::SyntaxExtensionKind;\n use rustc_feature::UnstableFeatures;\n@@ -12,7 +12,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_resolve::ParentScope;\n use rustc_session::lint;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n \n use std::ops::Range;"}, {"sha": "d2a950027cf877981574e461b04a3dd1ba150884", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, Span};\n \n use std::mem;\n@@ -85,7 +85,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_variant_data(\n         &mut self,\n         item: &'tcx hir::Item,\n-        name: ast::Name,\n+        name: Symbol,\n         sd: &'tcx hir::VariantData,\n         generics: &'tcx hir::Generics,\n     ) -> Struct<'tcx> {\n@@ -106,7 +106,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_union_data(\n         &mut self,\n         item: &'tcx hir::Item,\n-        name: ast::Name,\n+        name: Symbol,\n         sd: &'tcx hir::VariantData,\n         generics: &'tcx hir::Generics,\n     ) -> Union<'tcx> {\n@@ -127,7 +127,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_enum_def(\n         &mut self,\n         it: &'tcx hir::Item,\n-        name: ast::Name,\n+        name: Symbol,\n         def: &'tcx hir::EnumDef,\n         generics: &'tcx hir::Generics,\n     ) -> Enum<'tcx> {\n@@ -157,7 +157,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         &mut self,\n         om: &mut Module<'tcx>,\n         item: &'tcx hir::Item,\n-        name: ast::Name,\n+        name: Symbol,\n         decl: &'tcx hir::FnDecl,\n         header: hir::FnHeader,\n         generics: &'tcx hir::Generics,\n@@ -234,7 +234,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         vis: &'tcx hir::Visibility,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n-        name: Option<ast::Name>,\n+        name: Option<Symbol>,\n     ) -> Module<'tcx> {\n         let mut om = Module::new(name, attrs, vis);\n         om.where_outer = span;\n@@ -264,7 +264,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         &mut self,\n         id: hir::HirId,\n         res: Res,\n-        renamed: Option<ast::Ident>,\n+        renamed: Option<Ident>,\n         glob: bool,\n         om: &mut Module<'tcx>,\n         please_inline: bool,\n@@ -375,12 +375,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         ret\n     }\n \n-    fn visit_item(\n-        &mut self,\n-        item: &'tcx hir::Item,\n-        renamed: Option<ast::Ident>,\n-        om: &mut Module<'tcx>,\n-    ) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item, renamed: Option<Ident>, om: &mut Module<'tcx>) {\n         debug!(\"visiting item {:?}\", item);\n         let ident = renamed.unwrap_or(item.ident);\n \n@@ -593,7 +588,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_foreign_item(\n         &mut self,\n         item: &'tcx hir::ForeignItem,\n-        renamed: Option<ast::Ident>,\n+        renamed: Option<Ident>,\n         om: &mut Module<'tcx>,\n     ) {\n         // If inlining we only want to include public functions.\n@@ -612,11 +607,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     }\n \n     // Convert each `exported_macro` into a doc item.\n-    fn visit_local_macro(\n-        &self,\n-        def: &'tcx hir::MacroDef,\n-        renamed: Option<ast::Name>,\n-    ) -> Macro<'tcx> {\n+    fn visit_local_macro(&self, def: &'tcx hir::MacroDef, renamed: Option<Symbol>) -> Macro<'tcx> {\n         debug!(\"visit_local_macro: {}\", def.ident);\n         let tts = def.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n         // Extract the spans of all matchers. They represent the \"interface\" of the macro."}, {"sha": "a3d31d257748d9e340d931a43be31a718d79cf2d", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -32,6 +32,7 @@ use rustc_parse::new_parser_from_source_str;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{Spanned, DUMMY_SP, FileName};\n use rustc_span::source_map::FilePathMapping;\n+use rustc_span::symbol::Ident;\n use rustc_ast::ast::*;\n use rustc_ast::mut_visit::{self, MutVisitor, visit_clobber};\n use rustc_ast::ptr::P;"}, {"sha": "278d043732f4942631731dda65e2f96873ee47e6", "filename": "src/tools/clippy/clippy_lints/src/bytecount.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,12 +3,13 @@ use crate::utils::{\n     span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n-use rustc_ast::ast::{Name, UintTy};\n+use rustc_ast::ast::{UintTy};\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for naive byte counts\n@@ -95,11 +96,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ByteCount {\n     }\n }\n \n-fn check_arg(name: Name, arg: Name, needle: &Expr<'_>) -> bool {\n+fn check_arg(name: Symbol, arg: Symbol, needle: &Expr<'_>) -> bool {\n     name == arg && !contains_name(name, needle)\n }\n \n-fn get_path_name(expr: &Expr<'_>) -> Option<Name> {\n+fn get_path_name(expr: &Expr<'_>) -> Option<Symbol> {\n     match expr.kind {\n         ExprKind::Box(ref e) | ExprKind::AddrOf(BorrowKind::Ref, _, ref e) | ExprKind::Unary(UnOp::UnDeref, ref e) => {\n             get_path_name(e)"}, {"sha": "475610dda47535ee60e11b840234ca44ed2f49e6", "filename": "src/tools/clippy/clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -2,11 +2,12 @@\n \n use crate::utils::span_lint_and_then;\n use crate::utils::sugg::DiagnosticBuilderExt;\n-use rustc_ast::ast::{Attribute, Name};\n+use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n use rustc_hir::{TraitFn, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `#[inline]` on trait methods without bodies\n@@ -38,7 +39,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InlineFnWithoutBody {\n     }\n }\n \n-fn check_attrs(cx: &LateContext<'_, '_>, name: Name, attrs: &[Attribute]) {\n+fn check_attrs(cx: &LateContext<'_, '_>, name: Symbol, attrs: &[Attribute]) {\n     for attr in attrs {\n         if !attr.check_name(sym!(inline)) {\n             continue;"}, {"sha": "2ec0b5a8d6fb4ef6d5cec2a209fa276ddd11ffbb", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,13 +1,13 @@\n use crate::utils::{get_item_name, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n-use rustc_ast::ast::{LitKind, Name};\n+use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{AssocItemKind, BinOpKind, Expr, ExprKind, ImplItemRef, Item, ItemKind, TraitItemRef};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::{Span, Spanned};\n+use rustc_span::source_map::{Span, Spanned, Symbol};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for getting the length of something via `.len()`\n@@ -226,7 +226,7 @@ fn check_cmp(cx: &LateContext<'_, '_>, span: Span, method: &Expr<'_>, lit: &Expr\n fn check_len(\n     cx: &LateContext<'_, '_>,\n     span: Span,\n-    method_name: Name,\n+    method_name: Symbol,\n     args: &[Expr<'_>],\n     lit: &LitKind,\n     op: &str,"}, {"sha": "1f135cba6e4ee97156715db034622b65f803f779", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -333,7 +333,7 @@ mod zero_div_zero;\n pub use crate::utils::conf::Conf;\n \n mod reexport {\n-    pub use rustc_ast::ast::Name;\n+    pub use rustc_span::Symbol as Name;\n }\n \n /// Register all pre expansion lints"}, {"sha": "0163b3f8dbc8e58898bef2762a244583c2dd57ee", "filename": "src/tools/clippy/clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -3,14 +3,14 @@ use crate::utils::{\n     is_copy, is_type_diagnostic_item, match_trait_method, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n-use rustc_ast::ast::Ident;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Span;\n+use rustc_span::Span;\n+use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `iterator.map(|x| x.clone())` and suggests"}, {"sha": "2b51b73207585fe978725d17d1ceb31cfc7ed535", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,13 +1,13 @@\n use crate::utils::{span_lint, span_lint_and_then};\n use rustc_ast::ast::{\n-    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Ident, Item, ItemKind, Local, MacCall, Pat, PatKind,\n+    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, MacCall, Pat, PatKind,\n };\n use rustc_ast::attr;\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::{Ident, SymbolStr};\n use std::cmp::Ordering;\n \n declare_clippy_lint! {"}, {"sha": "735800e7e74160ee079aefcdaf3a20b65189122a", "filename": "src/tools/clippy/clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,9 +1,9 @@\n use crate::utils::span_lint;\n-use rustc_ast::ast::{Ident, Item, ItemKind, UseTree, UseTreeKind};\n+use rustc_ast::ast::{Item, ItemKind, UseTree, UseTreeKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::{Ident, SymbolStr};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for imports that remove \"unsafe\" from an item's"}, {"sha": "bd7da57c665dc4d82b32cf626a5887e7b8cb618f", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,6 +1,5 @@\n use crate::consts::{constant_context, constant_simple};\n use crate::utils::differing_macro_contexts;\n-use rustc_ast::ast::Name;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::{\n     BinOpKind, Block, BlockCheckMode, BodyId, BorrowKind, CaptureBy, Expr, ExprKind, Field, FnRetTy, GenericArg,\n@@ -10,6 +9,7 @@ use rustc_hir::{\n use rustc_lint::LateContext;\n use rustc_middle::ich::StableHashingContextProvider;\n use rustc_middle::ty::TypeckTables;\n+use rustc_span::Symbol;\n use std::hash::Hash;\n \n /// Type used to check whether two ast are the same. This is different from the\n@@ -544,7 +544,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n-    pub fn hash_name(&mut self, n: Name) {\n+    pub fn hash_name(&mut self, n: Symbol) {\n         n.as_str().hash(&mut self.s);\n     }\n "}, {"sha": "8e1b047f6f80aa4a645947c9a80812569da9d766", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -4,7 +4,7 @@ use crate::utils::{\n     span_lint_and_help, span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n-use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, Name, NodeId};\n+use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, NodeId};\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n@@ -17,7 +17,7 @@ use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::{Symbol, SymbolStr};\n \n use std::borrow::{Borrow, Cow};\n \n@@ -245,8 +245,8 @@ impl EarlyLintPass for ClippyLintsInternal {\n \n #[derive(Clone, Debug, Default)]\n pub struct LintWithoutLintPass {\n-    declared_lints: FxHashMap<Name, Span>,\n-    registered_lints: FxHashSet<Name>,\n+    declared_lints: FxHashMap<Symbol, Span>,\n+    registered_lints: FxHashSet<Symbol>,\n }\n \n impl_lint_pass!(LintWithoutLintPass => [DEFAULT_LINT, LINT_WITHOUT_LINT_PASS]);\n@@ -357,7 +357,7 @@ fn is_lint_ref_type<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &Ty<'_>) -> bool {\n }\n \n struct LintCollector<'a, 'tcx> {\n-    output: &'a mut FxHashSet<Name>,\n+    output: &'a mut FxHashSet<Symbol>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n "}, {"sha": "2fd080e9ef0f848b67f6e00427f5149e83cee0d9", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1069,7 +1069,7 @@ pub fn is_allowed(cx: &LateContext<'_, '_>, lint: &'static Lint, id: HirId) -> b\n     cx.tcx.lint_level_at_node(lint, id).0 == Level::Allow\n }\n \n-pub fn get_arg_name(pat: &Pat<'_>) -> Option<ast::Name> {\n+pub fn get_arg_name(pat: &Pat<'_>) -> Option<Name> {\n     match pat.kind {\n         PatKind::Binding(.., ident, None) => Some(ident.name),\n         PatKind::Ref(ref subpat, _) => get_arg_name(subpat),"}, {"sha": "fb6bd5e81585952fc3cce822970710686566cf8a", "filename": "src/tools/clippy/clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,10 +1,9 @@\n use crate::utils::{get_pat_name, match_var, snippet};\n-use rustc_ast::ast::Name;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, BodyId, Expr, ExprKind, Param};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n-use rustc_span::source_map::Span;\n+use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n \n pub fn get_spans(\n@@ -25,7 +24,7 @@ pub fn get_spans(\n \n fn extract_clone_suggestions<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n-    name: Name,\n+    name: Symbol,\n     replace: &[(&'static str, &'static str)],\n     body: &'tcx Body<'_>,\n ) -> Option<Vec<(Span, Cow<'static, str>)>> {\n@@ -46,7 +45,7 @@ fn extract_clone_suggestions<'a, 'tcx>(\n \n struct PtrCloneVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    name: Name,\n+    name: Symbol,\n     replace: &'a [(&'static str, &'static str)],\n     spans: Vec<(Span, Cow<'static, str>)>,\n     abort: bool,\n@@ -83,6 +82,6 @@ impl<'a, 'tcx> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n     }\n }\n \n-fn get_binding_name(arg: &Param<'_>) -> Option<Name> {\n+fn get_binding_name(arg: &Param<'_>) -> Option<Symbol> {\n     get_pat_name(&arg.pat)\n }"}, {"sha": "e85356779877cbfdb62abae5e5cb71929264a706", "filename": "src/tools/clippy/clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c1786e61d14a89cebd354b78ce6a68202b699/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=366c1786e61d14a89cebd354b78ce6a68202b699", "patch": "@@ -1,5 +1,4 @@\n use crate::utils::match_var;\n-use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n@@ -8,7 +7,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n-use rustc_span::symbol::Ident;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n@@ -78,7 +77,7 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n }\n \n pub struct UsedVisitor {\n-    pub var: ast::Name, // var to look for\n+    pub var: Symbol,    // var to look for\n     pub used: bool,     // has the var been used otherwise?\n }\n "}]}