{"sha": "9a6216ed05e353825a712c265923993b8b19d887", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNjIxNmVkMDVlMzUzODI1YTcxMmMyNjU5MjM5OTNiOGIxOWQ4ODc=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-11-29T07:15:44Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-12T06:31:04Z"}, "message": "Address review feedback\n\n* Fix typo\n* Handle None value instead of using `unwrap()`\n* `pop()` instead of `x.truncate(x.len() - 1)`", "tree": {"sha": "fb5be388838e2d3a65ff30686832bbb3a8944f23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb5be388838e2d3a65ff30686832bbb3a8944f23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a6216ed05e353825a712c265923993b8b19d887", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlwQqykACgkQtvoGpuDi\nZlsDOQ/+I/FFcwEaxDAM09W+1sBh9Q6SUzStHFnIe3SNDgVnmha+/veWe7rJNpWI\nXT6YfvbTZ0qurHY/qwSrBaeEbbPraXHaAG7rjeENWg2Dw0X2oRE3CHHw1KiaBN4a\ntFkSo+w3nwIlJh8RvL5bSuPEy6kBNS+2zrmnk/7pq/gx3ARHlLcHHvbv3KxKNGml\nHz2Kl+WI2/CxhzKrRNEL1vVh0r1ykFoMTPoq9egU8Mqvcrp2r4m4SswZ0LaPasX+\nhDzW8dEQm6F4wRm2ekdUjPk2WhvteduYBGR8rlFjIbGzmrwF+k/NqvGF1xzK1vZh\nKAChmA7DyGcWrnCAWWyRS4rQt40QxBPGc6I4nLoEd9wfsBymxXQE1hkQUOzaMmhG\nsk3Fzzmyo75if2BJ2WMR/OGDBbAlWLBrPlslV7kOhCdA/oaNKNYwqifH+e8jtpuC\nleg2gtNvOMJWSaf9jNSVXpO22vSH7Jbf/rtguGmrT0vYF/8OMfMNCRvAWQiOAeKo\nJnBTdcITOwS7Fo+JQZtHXhzC+MjfiloSMQzddq7YxoRrmSsMUuBPSzL1vqoVI8ej\ngDIJPro52Uyb+Fk78zrqSAIh8BKa5VHbWyN1hdtVrTO4hK6OpYRYXlRfXWqJ962p\nspJqe9P4yKU9dIlDsnEFFkLhIGceOT26+c7vy+yfYr0f2c2G28k=\n=FT67\n-----END PGP SIGNATURE-----", "payload": "tree fb5be388838e2d3a65ff30686832bbb3a8944f23\nparent 5f007a88b4d650068525d4300aa9d773a572de11\nauthor Philipp Hansch <dev@phansch.net> 1543475744 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1544596264 +0100\n\nAddress review feedback\n\n* Fix typo\n* Handle None value instead of using `unwrap()`\n* `pop()` instead of `x.truncate(x.len() - 1)`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6216ed05e353825a712c265923993b8b19d887", "html_url": "https://github.com/rust-lang/rust/commit/9a6216ed05e353825a712c265923993b8b19d887", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a6216ed05e353825a712c265923993b8b19d887/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f007a88b4d650068525d4300aa9d773a572de11", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f007a88b4d650068525d4300aa9d773a572de11", "html_url": "https://github.com/rust-lang/rust/commit/5f007a88b4d650068525d4300aa9d773a572de11"}], "stats": {"total": 78, "additions": 52, "deletions": 26}, "files": [{"sha": "79c4c5f05306f8870e55a6e3a8522f9bb1a93bf7", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 52, "deletions": 26, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/9a6216ed05e353825a712c265923993b8b19d887/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6216ed05e353825a712c265923993b8b19d887/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=9a6216ed05e353825a712c265923993b8b19d887", "patch": "@@ -83,35 +83,61 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 };\n \n                 // We need to remove the last trailing newline from the string because the\n-                // underlying `fmt::write` function doesn't know wether `println!` or `print!` was\n+                // underlying `fmt::write` function doesn't know whether `println!` or `print!` was\n                 // used.\n-                let mut write_output: String = write_output_string(write_args).unwrap();\n-                if write_output.ends_with('\\n') {\n-                    write_output.truncate(write_output.len() - 1)\n-                }\n-                if let Some(macro_name) = calling_macro {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        EXPLICIT_WRITE,\n-                        expr.span,\n-                        &format!(\n-                            \"use of `{}!({}(), ...).unwrap()`\",\n-                            macro_name,\n-                            dest_name\n-                        ),\n-                        \"try this\",\n-                        format!(\"{}{}!(\\\"{}\\\")\", prefix, macro_name.replace(\"write\", \"print\"), write_output.escape_default())\n-                    );\n+                if let Some(mut write_output) = write_output_string(write_args) {\n+                    if write_output.ends_with('\\n') {\n+                        write_output.pop();\n+                    }\n+\n+                    if let Some(macro_name) = calling_macro {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            EXPLICIT_WRITE,\n+                            expr.span,\n+                            &format!(\n+                                \"use of `{}!({}(), ...).unwrap()`\",\n+                                macro_name,\n+                                dest_name\n+                            ),\n+                            \"try this\",\n+                            format!(\"{}{}!(\\\"{}\\\")\", prefix, macro_name.replace(\"write\", \"print\"), write_output.escape_default())\n+                        );\n+                    } else {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            EXPLICIT_WRITE,\n+                            expr.span,\n+                            &format!(\"use of `{}().write_fmt(...).unwrap()`\", dest_name),\n+                            \"try this\",\n+                            format!(\"{}print!(\\\"{}\\\")\", prefix, write_output.escape_default())\n+                        );\n+                    }\n                 } else {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        EXPLICIT_WRITE,\n-                        expr.span,\n-                        &format!(\"use of `{}().write_fmt(...).unwrap()`\", dest_name),\n-                        \"try this\",\n-                        format!(\"{}print!(\\\"{}\\\")\", prefix, write_output.escape_default())\n-                    );\n+                    // We don't have a proper suggestion\n+                    if let Some(macro_name) = calling_macro {\n+                        span_lint(\n+                            cx,\n+                            EXPLICIT_WRITE,\n+                            expr.span,\n+                            &format!(\n+                                \"use of `{}!({}(), ...).unwrap()`. Consider using `{}{}!` instead\",\n+                                macro_name,\n+                                dest_name,\n+                                prefix,\n+                                macro_name.replace(\"write\", \"print\")\n+                            )\n+                        );\n+                    } else {\n+                        span_lint(\n+                            cx,\n+                            EXPLICIT_WRITE,\n+                            expr.span,\n+                            &format!(\"use of `{}().write_fmt(...).unwrap()`. Consider using `{}print!` instead\", dest_name, prefix),\n+                        );\n+                    }\n                 }\n+\n             }\n         }\n     }"}]}