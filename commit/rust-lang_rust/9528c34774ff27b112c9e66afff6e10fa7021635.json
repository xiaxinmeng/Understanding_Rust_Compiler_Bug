{"sha": "9528c34774ff27b112c9e66afff6e10fa7021635", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MjhjMzQ3NzRmZjI3YjExMmM5ZTY2YWZmZjZlMTBmYTcwMjE2MzU=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-02-24T04:48:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-02T18:28:14Z"}, "message": "Begin implementing #fmt in rustc", "tree": {"sha": "4d5f9bde4c48eed1a188f6002e88daa93f4ea28b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d5f9bde4c48eed1a188f6002e88daa93f4ea28b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9528c34774ff27b112c9e66afff6e10fa7021635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9528c34774ff27b112c9e66afff6e10fa7021635", "html_url": "https://github.com/rust-lang/rust/commit/9528c34774ff27b112c9e66afff6e10fa7021635", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9528c34774ff27b112c9e66afff6e10fa7021635/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2d36e00ce2b58272b52a5c1f999b0bcb61d066b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d36e00ce2b58272b52a5c1f999b0bcb61d066b", "html_url": "https://github.com/rust-lang/rust/commit/e2d36e00ce2b58272b52a5c1f999b0bcb61d066b"}], "stats": {"total": 145, "additions": 141, "deletions": 4}, "files": [{"sha": "18add3bdfbd7e002c355b97769b06e9f3d916645", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9528c34774ff27b112c9e66afff6e10fa7021635/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9528c34774ff27b112c9e66afff6e10fa7021635/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=9528c34774ff27b112c9e66afff6e10fa7021635", "patch": "@@ -185,7 +185,7 @@ tag expr_ {\n     expr_field(@expr, ident, ann);\n     expr_index(@expr, @expr, ann);\n     expr_path(path, option.t[def], ann);\n-    expr_ext(path, vec[@expr], option.t[@expr], ann);\n+    expr_ext(path, vec[@expr], option.t[@expr], option.t[@expr], ann);\n     expr_fail;\n     expr_ret(option.t[@expr]);\n     expr_put(option.t[@expr]);\n@@ -363,6 +363,17 @@ fn is_call_expr(@expr e) -> bool {\n     }\n }\n \n+fn is_ext_expr(@expr e) -> bool {\n+    alt (e.node) {\n+        case (expr_ext(_, _, _, _, _)) {\n+            ret true;\n+        }\n+        case (_) {\n+            ret false;\n+        }\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "cb70805a335cdafd0ea4fab41f97c7091c725b2e", "filename": "src/comp/front/extfmt.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/9528c34774ff27b112c9e66afff6e10fa7021635/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9528c34774ff27b112c9e66afff6e10fa7021635/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=9528c34774ff27b112c9e66afff6e10fa7021635", "patch": "@@ -0,0 +1,84 @@\n+/* The 'fmt' extension is modeled on the posix printf system.\n+ * \n+ * A posix conversion ostensibly looks like this:\n+ * \n+ * %[parameter][flags][width][.precision][length]type\n+ * \n+ * Given the different numeric type bestiary we have, we omit the 'length'\n+ * parameter and support slightly different conversions for 'type':\n+ * \n+ * %[parameter][flags][width][.precision]type\n+ * \n+ * we also only support translating-to-rust a tiny subset of the possible\n+ * combinations at the moment.\n+ */\n+\n+use std;\n+\n+import std.option;\n+\n+tag signedness {\n+    signed;\n+    unsigned;\n+}\n+\n+tag caseness {\n+    case_upper;\n+    case_lower;\n+}\n+\n+tag ty {\n+    ty_bool;\n+    ty_str;\n+    ty_char;\n+    ty_int(signedness);\n+    ty_bits;\n+    ty_hex(caseness);\n+    // FIXME: More types\n+}\n+\n+tag flag {\n+    flag_left_justify;\n+    flag_left_zero_pad;\n+    flag_left_space_pad;\n+    flag_plus_if_positive;\n+    flag_alternate;\n+}\n+\n+tag count {\n+    count_is(int);\n+    count_is_param(int);\n+    count_is_next_param;\n+    count_implied;\n+}\n+\n+// A formatted conversion from an expression to a string\n+tag conv {\n+    conv_param(option.t[int]);\n+    conv_flags(vec[flag]);\n+    conv_width(count);\n+    conv_precision(count);\n+    conv_ty(ty);\n+}\n+\n+// A fragment of the output sequence\n+tag piece {\n+    piece_string(str);\n+    piece_conv(str);\n+}\n+\n+fn expand_syntax_ext(vec[@ast.expr] args,\n+                     option.t[@ast.expr] body) -> @ast.expr {\n+    fail;\n+}\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C ../.. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}, {"sha": "8f6db17d88d9e53d8eac7d34e57bcba3e681ae14", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9528c34774ff27b112c9e66afff6e10fa7021635/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9528c34774ff27b112c9e66afff6e10fa7021635/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=9528c34774ff27b112c9e66afff6e10fa7021635", "patch": "@@ -656,7 +656,10 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n                                            some(token.COMMA),\n                                            pf, p);\n             hi = es.span;\n-            ex = ast.expr_ext(pth, es.node, none[@ast.expr], ast.ann_none);\n+            ex = ast.expr_ext(pth, es.node, none[@ast.expr],\n+                              none[@ast.expr], ast.ann_none);\n+            // FIXME: Here is probably not the right place for this\n+            ex = expand_syntax_ext(p, @spanned(lo, hi, ex)).node;\n         }\n \n         case (token.FAIL) {\n@@ -736,6 +739,36 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n     ret @spanned(lo, hi, ex);\n }\n \n+/* \n+ * FIXME: This is a crude approximation of the syntax-extension system,\n+ * for purposes of prototyping and/or hard-wiring any extensions we\n+ * wish to use while bootstrapping. The eventual aim is to permit\n+ * loading rust crates to process extensions, but this will likely\n+ * require a rust-based frontend, or an ocaml-FFI-based connection to\n+ * rust crates. At the moment we have neither.\n+ */\n+\n+impure fn expand_syntax_ext(parser p, @ast.expr ext) -> @ast.expr {\n+    check (ast.is_ext_expr(ext));\n+    alt (ext.node) {\n+        case (ast.expr_ext(?path, ?args, ?body, _, ?ann)) {\n+            check (_vec.len[ast.ident](path.node.idents) > 0u);\n+            auto extname = path.node.idents.(0);\n+            if (_str.eq(extname, \"fmt\")) {\n+                auto expanded = extfmt.expand_syntax_ext(args, body);\n+                check (ast.is_ext_expr(expanded));\n+                auto newexpr = ast.expr_ext(path, args, body,\n+                                            some[@ast.expr](expanded), ann);\n+\n+                ret @spanned(ext.span, ext.span, newexpr);\n+            } else {\n+                p.err(\"unknown syntax extension\");\n+            }\n+        }\n+    }\n+    fail;\n+}\n+\n impure fn extend_expr_by_ident(parser p, span lo, span hi,\n                                @ast.expr e, ast.ident i) -> @ast.expr {\n     auto e_ = e.node;"}, {"sha": "16d24e9b277912410369f8dc81a2bbebb189f20d", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9528c34774ff27b112c9e66afff6e10fa7021635/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9528c34774ff27b112c9e66afff6e10fa7021635/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=9528c34774ff27b112c9e66afff6e10fa7021635", "patch": "@@ -5,6 +5,7 @@ use std;\n \n mod front {\n     mod ast;\n+    mod extfmt;\n     mod lexer;\n     mod parser;\n     mod token;"}, {"sha": "66fe4fd7ce020bc1a364e121e41bc1d267d9ce83", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9528c34774ff27b112c9e66afff6e10fa7021635/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9528c34774ff27b112c9e66afff6e10fa7021635/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=9528c34774ff27b112c9e66afff6e10fa7021635", "patch": "@@ -1,5 +1,13 @@\n use std;\n+import std._str;\n+\n+fn test(str actual, str expected) {\n+  log actual;\n+  log expected;\n+  check (_str.eq(actual, expected));\n+}\n+\n fn main() {\n-  auto s = #fmt(\"hello %d friends and %s things\", 10, \"formatted\");\n-  log s;\n+  test(#fmt(\"hello %d friends and %s things\", 10, \"formatted\"),\n+       \"hello 10 friends and formatted things\");\n }"}]}