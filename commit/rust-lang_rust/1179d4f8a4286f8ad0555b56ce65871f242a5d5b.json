{"sha": "1179d4f8a4286f8ad0555b56ce65871f242a5d5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNzlkNGY4YTQyODZmOGFkMDU1NWI1NmNlNjU4NzFmMjQyYTVkNWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-14T18:25:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-14T18:25:56Z"}, "message": "fix int ptr ops on 32bit", "tree": {"sha": "15374c7690425007eb8fd46267c5d43e7549394b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15374c7690425007eb8fd46267c5d43e7549394b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1179d4f8a4286f8ad0555b56ce65871f242a5d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1179d4f8a4286f8ad0555b56ce65871f242a5d5b", "html_url": "https://github.com/rust-lang/rust/commit/1179d4f8a4286f8ad0555b56ce65871f242a5d5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1179d4f8a4286f8ad0555b56ce65871f242a5d5b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98a5b24ef7eb05ae52d63ce9e050d6ac144ba345", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a5b24ef7eb05ae52d63ce9e050d6ac144ba345", "html_url": "https://github.com/rust-lang/rust/commit/98a5b24ef7eb05ae52d63ce9e050d6ac144ba345"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "078cbc12369f34d64590cf30e26cbfbf35fe8030", "filename": "src/operator.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1179d4f8a4286f8ad0555b56ce65871f242a5d5b/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1179d4f8a4286f8ad0555b56ce65871f242a5d5b/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=1179d4f8a4286f8ad0555b56ce65871f242a5d5b", "patch": "@@ -20,7 +20,7 @@ pub trait EvalContextExt<'tcx> {\n         &self,\n         bin_op: mir::BinOp,\n         left: Pointer,\n-        right: i128,\n+        right: u128,\n         signed: bool,\n     ) -> EvalResult<'tcx, (Scalar, bool)>;\n }\n@@ -138,7 +138,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                 self.ptr_int_arithmetic(\n                     bin_op,\n                     left.to_ptr()?,\n-                    right.to_bits(self.memory.pointer_size())? as i128,\n+                    right.to_bits(self.memory.pointer_size())?,\n                     left_kind == isize,\n                 ).map(Some)\n             }\n@@ -150,7 +150,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                 self.ptr_int_arithmetic(\n                     bin_op,\n                     right.to_ptr()?,\n-                    left.to_bits(self.memory.pointer_size())? as i128,\n+                    left.to_bits(self.memory.pointer_size())?,\n                     left_kind == isize,\n                 ).map(Some)\n             }\n@@ -162,7 +162,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n         &self,\n         bin_op: mir::BinOp,\n         left: Pointer,\n-        right: i128,\n+        right: u128,\n         signed: bool,\n     ) -> EvalResult<'tcx, (Scalar, bool)> {\n         use rustc::mir::BinOp::*;\n@@ -174,23 +174,31 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n         Ok(match bin_op {\n             Sub =>\n                 // The only way this can overflow is by underflowing, so signdeness of the right operands does not matter\n-                map_to_primval(left.overflowing_signed_offset(-right, self)),\n+                map_to_primval(left.overflowing_signed_offset(-(right as i128), self)),\n             Add if signed =>\n-                map_to_primval(left.overflowing_signed_offset(right, self)),\n+                map_to_primval(left.overflowing_signed_offset(right as i128, self)),\n             Add if !signed =>\n                 map_to_primval(left.overflowing_offset(Size::from_bytes(right as u64), self)),\n \n             BitAnd if !signed => {\n                 let ptr_base_align = self.memory.get(left.alloc_id)?.align.abi();\n-                let base_mask : u64 = !(ptr_base_align - 1);\n-                let right = right as u64;\n+                let base_mask = {\n+                    // FIXME: Use interpret::truncate, once that takes a Size instead of a Layout\n+                    let shift = 128 - self.memory.pointer_size().bits();\n+                    let value = !(ptr_base_align as u128 - 1);\n+                    // truncate (shift left to drop out leftover values, shift right to fill with zeroes)\n+                    (value << shift) >> shift\n+                };\n                 let ptr_size = self.memory.pointer_size().bytes() as u8;\n+                trace!(\"Ptr BitAnd, align {}, operand {:#010x}, base_mask {:#010x}\",\n+                    ptr_base_align, right, base_mask);\n                 if right & base_mask == base_mask {\n                     // Case 1: The base address bits are all preserved, i.e., right is all-1 there\n-                    (Scalar::Ptr(Pointer::new(left.alloc_id, Size::from_bytes(left.offset.bytes() & right))), false)\n+                    let offset = (left.offset.bytes() as u128 & right) as u64;\n+                    (Scalar::Ptr(Pointer::new(left.alloc_id, Size::from_bytes(offset))), false)\n                 } else if right & base_mask == 0 {\n                     // Case 2: The base address bits are all taken away, i.e., right is all-0 there\n-                    (Scalar::Bits { bits: (left.offset.bytes() & right) as u128, size: ptr_size }, false)\n+                    (Scalar::Bits { bits: (left.offset.bytes() as u128) & right, size: ptr_size }, false)\n                 } else {\n                     return err!(ReadPointerAsBytes);\n                 }"}]}