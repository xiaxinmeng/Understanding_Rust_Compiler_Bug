{"sha": "e9fbe79292783972a222afd270db3f77c0b4f3c8", "node_id": "C_kwDOAAsO6NoAKGU5ZmJlNzkyOTI3ODM5NzJhMjIyYWZkMjcwZGIzZjc3YzBiNGYzYzg", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-28T00:20:50Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-28T00:20:50Z"}, "message": "Remove &self from PrintState::to_string", "tree": {"sha": "2f720a2ea5ee669abe2a9c86e3e7d45f714bc312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f720a2ea5ee669abe2a9c86e3e7d45f714bc312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9fbe79292783972a222afd270db3f77c0b4f3c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHKWGIACgkQ+boUO5X/\nbYIzZxAAyIPXa09GZSiM8zsYxzAjFX/iQ52L2QRZsbAkF5c4/iMsdOoV9G8DKudV\nLLU9QDoUUrh9AdckjFkBJDI62E8tlqW2Y9yozmVYUAlU3iIogn0Je+n8yTkwG8T4\nZjD3cJMJlPjUR6SoI5fmYQdpNHWsAZxEl8J26DMG6eO9Pytg6L4zm962+9IFE2oR\njECVQ7eij7Q8UOwjtxpVXY60X21D7tSXvoIEqdtZjzY6ZHPk+AjhVgTYuQk22PAA\nqck8eUTWNbF0NZ0Ftbj6+2wT/atZzf9d3c28ASheXe7VPMJvaKcd/fcgARIYopOe\nPfoU1HaRHK0ncMFct5znNonL6AHxHE9MHEoX49q+AJzIhJxNY0TeB3rn9Infz7zR\n1J3sqjWvXQICDBhVjIkNphAthdfca3WzcU4D1mNk2RPuc3w60pcnbruK4UZ3u+Fi\nlNLE/bc8gzpboFMuHFlfcM+ZIW8bPi4HTUXE8Hi9JUHWs7reh5wcBLfZgLeYDM3s\nokFW8+CdOlb5fZYnUcPC+i+LH2rSI2VOCJH7Mkq2EBf7QYpr2GdGQNJEgCm/GrGi\nssKs3QcAEVsFsfamAHHk+C7W1eT4s6cxF11IFAqLdF2DPhGX8mB1AYZ3gNVfBDbd\nnnHX0nIhak6/2A746moiNzgM89I5QD/xNYqPPFS9QLeMnfH8N0s=\n=sIpq\n-----END PGP SIGNATURE-----", "payload": "tree 2f720a2ea5ee669abe2a9c86e3e7d45f714bc312\nparent f8abed9ed48bace6be0087bcd44ed534e239b8d8\nauthor David Tolnay <dtolnay@gmail.com> 1640650850 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640650850 -0800\n\nRemove &self from PrintState::to_string\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9fbe79292783972a222afd270db3f77c0b4f3c8", "html_url": "https://github.com/rust-lang/rust/commit/e9fbe79292783972a222afd270db3f77c0b4f3c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9fbe79292783972a222afd270db3f77c0b4f3c8/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8abed9ed48bace6be0087bcd44ed534e239b8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8abed9ed48bace6be0087bcd44ed534e239b8d8", "html_url": "https://github.com/rust-lang/rust/commit/f8abed9ed48bace6be0087bcd44ed534e239b8d8"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "ac9e7d06c4e4006fb9563cd55fe0af516869272b", "filename": "compiler/rustc_ast_pretty/src/pprust/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9fbe79292783972a222afd270db3f77c0b4f3c8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9fbe79292783972a222afd270db3f77c0b4f3c8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs?ref=e9fbe79292783972a222afd270db3f77c0b4f3c8", "patch": "@@ -73,11 +73,11 @@ pub fn attribute_to_string(attr: &ast::Attribute) -> String {\n }\n \n pub fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {\n-    State::new().to_string(f)\n+    State::to_string(f)\n }\n \n pub fn crate_to_string_for_macros(krate: &ast::Crate) -> String {\n-    State::new().to_string(|s| {\n+    State::to_string(|s| {\n         s.print_inner_attributes(&krate.attrs);\n         for item in &krate.items {\n             s.print_item(item);"}, {"sha": "95615164ac751b2714d139fd9eef9c33742c271e", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e9fbe79292783972a222afd270db3f77c0b4f3c8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9fbe79292783972a222afd270db3f77c0b4f3c8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=e9fbe79292783972a222afd270db3f77c0b4f3c8", "patch": "@@ -211,7 +211,7 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n }\n \n fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {\n-    format!(\"{}{}\", State::new().to_string(|s| s.print_visibility(vis)), s)\n+    format!(\"{}{}\", State::to_string(|s| s.print_visibility(vis)), s)\n }\n \n impl std::ops::Deref for State<'_> {\n@@ -792,55 +792,55 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn ty_to_string(&self, ty: &ast::Ty) -> String {\n-        self.to_string(|s| s.print_type(ty))\n+        Self::to_string(|s| s.print_type(ty))\n     }\n \n     fn bounds_to_string(&self, bounds: &[ast::GenericBound]) -> String {\n-        self.to_string(|s| s.print_type_bounds(\"\", bounds))\n+        Self::to_string(|s| s.print_type_bounds(\"\", bounds))\n     }\n \n     fn pat_to_string(&self, pat: &ast::Pat) -> String {\n-        self.to_string(|s| s.print_pat(pat))\n+        Self::to_string(|s| s.print_pat(pat))\n     }\n \n     fn expr_to_string(&self, e: &ast::Expr) -> String {\n-        self.to_string(|s| s.print_expr(e))\n+        Self::to_string(|s| s.print_expr(e))\n     }\n \n     fn tt_to_string(&self, tt: &TokenTree) -> String {\n-        self.to_string(|s| s.print_tt(tt, false))\n+        Self::to_string(|s| s.print_tt(tt, false))\n     }\n \n     fn tts_to_string(&self, tokens: &TokenStream) -> String {\n-        self.to_string(|s| s.print_tts(tokens, false))\n+        Self::to_string(|s| s.print_tts(tokens, false))\n     }\n \n     fn stmt_to_string(&self, stmt: &ast::Stmt) -> String {\n-        self.to_string(|s| s.print_stmt(stmt))\n+        Self::to_string(|s| s.print_stmt(stmt))\n     }\n \n     fn item_to_string(&self, i: &ast::Item) -> String {\n-        self.to_string(|s| s.print_item(i))\n+        Self::to_string(|s| s.print_item(i))\n     }\n \n     fn generic_params_to_string(&self, generic_params: &[ast::GenericParam]) -> String {\n-        self.to_string(|s| s.print_generic_params(generic_params))\n+        Self::to_string(|s| s.print_generic_params(generic_params))\n     }\n \n     fn path_to_string(&self, p: &ast::Path) -> String {\n-        self.to_string(|s| s.print_path(p, false, 0))\n+        Self::to_string(|s| s.print_path(p, false, 0))\n     }\n \n     fn path_segment_to_string(&self, p: &ast::PathSegment) -> String {\n-        self.to_string(|s| s.print_path_segment(p, false))\n+        Self::to_string(|s| s.print_path_segment(p, false))\n     }\n \n     fn vis_to_string(&self, v: &ast::Visibility) -> String {\n-        self.to_string(|s| s.print_visibility(v))\n+        Self::to_string(|s| s.print_visibility(v))\n     }\n \n     fn block_to_string(&self, blk: &ast::Block) -> String {\n-        self.to_string(|s| {\n+        Self::to_string(|s| {\n             // Containing cbox, will be closed by `print_block` at `}`.\n             s.cbox(INDENT_UNIT);\n             // Head-ibox, will be closed by `print_block` after `{`.\n@@ -850,22 +850,22 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn meta_list_item_to_string(&self, li: &ast::NestedMetaItem) -> String {\n-        self.to_string(|s| s.print_meta_list_item(li))\n+        Self::to_string(|s| s.print_meta_list_item(li))\n     }\n \n     fn attr_item_to_string(&self, ai: &ast::AttrItem) -> String {\n-        self.to_string(|s| s.print_attr_item(ai, ai.path.span))\n+        Self::to_string(|s| s.print_attr_item(ai, ai.path.span))\n     }\n \n     fn attribute_to_string(&self, attr: &ast::Attribute) -> String {\n-        self.to_string(|s| s.print_attribute(attr))\n+        Self::to_string(|s| s.print_attribute(attr))\n     }\n \n     fn param_to_string(&self, arg: &ast::Param) -> String {\n-        self.to_string(|s| s.print_param(arg, false))\n+        Self::to_string(|s| s.print_param(arg, false))\n     }\n \n-    fn to_string(&self, f: impl FnOnce(&mut State<'_>)) -> String {\n+    fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {\n         let mut printer = State::new();\n         f(&mut printer);\n         printer.s.eof()\n@@ -1199,7 +1199,7 @@ impl<'a> State<'a> {\n                 );\n             }\n             ast::ItemKind::Mod(unsafety, ref mod_kind) => {\n-                self.head(self.to_string(|s| {\n+                self.head(Self::to_string(|s| {\n                     s.print_visibility(&item.vis);\n                     s.print_unsafety(unsafety);\n                     s.word(\"mod\");\n@@ -1225,7 +1225,7 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::ItemKind::ForeignMod(ref nmod) => {\n-                self.head(self.to_string(|s| {\n+                self.head(Self::to_string(|s| {\n                     s.print_unsafety(nmod.unsafety);\n                     s.word(\"extern\");\n                 }));\n@@ -1444,7 +1444,7 @@ impl<'a> State<'a> {\n                 ast::CrateSugar::JustCrate => self.word_nbsp(\"crate\"),\n             },\n             ast::VisibilityKind::Restricted { ref path, .. } => {\n-                let path = self.to_string(|s| s.print_path(path, false, 0));\n+                let path = Self::to_string(|s| s.print_path(path, false, 0));\n                 if path == \"self\" || path == \"super\" {\n                     self.word_nbsp(format!(\"pub({})\", path))\n                 } else {"}]}