{"sha": "59abf93b799a588e07060c7e4efd5f20cdce4293", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YWJmOTNiNzk5YTU4OGUwNzA2MGM3ZTRlZmQ1ZjIwY2RjZTQyOTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-04-09T22:32:41Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-04-10T01:06:22Z"}, "message": "llvm: Update llvm to use new gcnoteroot infrastructure", "tree": {"sha": "80e87fb9af4f63469403711fa03561bf2bdf7d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80e87fb9af4f63469403711fa03561bf2bdf7d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59abf93b799a588e07060c7e4efd5f20cdce4293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59abf93b799a588e07060c7e4efd5f20cdce4293", "html_url": "https://github.com/rust-lang/rust/commit/59abf93b799a588e07060c7e4efd5f20cdce4293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59abf93b799a588e07060c7e4efd5f20cdce4293/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92470336dd89d01f1eab34b45fe97c1a6a33f8d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/92470336dd89d01f1eab34b45fe97c1a6a33f8d4", "html_url": "https://github.com/rust-lang/rust/commit/92470336dd89d01f1eab34b45fe97c1a6a33f8d4"}], "stats": {"total": 238, "additions": 2, "deletions": 236}, "files": [{"sha": "8453f7b94688c2e703b9ea35b5df92d6ed00076a", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59abf93b799a588e07060c7e4efd5f20cdce4293/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/59abf93b799a588e07060c7e4efd5f20cdce4293/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=59abf93b799a588e07060c7e4efd5f20cdce4293", "patch": "@@ -12,8 +12,7 @@ LLVM_EXTRA_INCDIRS_$(1)= -iquote $(S)src/llvm/include \\\n                          -iquote llvm/$(1)/include\n endif\n \n-RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, RustGCMetadataPrinter.cpp \\\n-    RustGCStrategy.cpp RustWrapper.cpp)\n+RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, RustWrapper.cpp)\n \n # Behind an ifdef for now since this requires a patched LLVM.\n ifdef CFG_STACK_GROWTH"}, {"sha": "8b035b5fe83ca15df171e581681bbc9cbd7e2ae0", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=59abf93b799a588e07060c7e4efd5f20cdce4293", "patch": "@@ -1 +1 @@\n-Subproject commit 4119fda4c6c4df372bd6edbbb08d48c7941577b5\n+Subproject commit 8b035b5fe83ca15df171e581681bbc9cbd7e2ae0"}, {"sha": "f002b67224f55770f2080f94468ceecd7e620055", "filename": "src/rustllvm/RustGCMetadataPrinter.cpp", "status": "removed", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/92470336dd89d01f1eab34b45fe97c1a6a33f8d4/src%2Frustllvm%2FRustGCMetadataPrinter.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/92470336dd89d01f1eab34b45fe97c1a6a33f8d4/src%2Frustllvm%2FRustGCMetadataPrinter.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustGCMetadataPrinter.cpp?ref=92470336dd89d01f1eab34b45fe97c1a6a33f8d4", "patch": "@@ -1,202 +0,0 @@\n-//===-- RustGCPrinter.cpp - Rust garbage collection map printer -----------===\n-//\n-//                     The LLVM Compiler Infrastructure\n-//\n-// This file is distributed under the University of Illinois Open Source\n-// License. See LICENSE.TXT for details.\n-//\n-//===----------------------------------------------------------------------===\n-//\n-// This file defines the emitter for the Rust garbage collection stack maps.\n-//\n-//===----------------------------------------------------------------------===\n-\n-#include \"llvm/Constants.h\"\n-#include \"llvm/DerivedTypes.h\"\n-#include \"llvm/Module.h\"\n-#include \"llvm/CodeGen/GCs.h\"\n-#include \"llvm/CodeGen/AsmPrinter.h\"\n-#include \"llvm/CodeGen/GCMetadataPrinter.h\"\n-#include \"llvm/MC/MCAsmInfo.h\"\n-#include \"llvm/MC/MCContext.h\"\n-#include \"llvm/MC/MCSymbol.h\"\n-#include \"llvm/MC/MCStreamer.h\"\n-#include \"llvm/Target/Mangler.h\"\n-#include \"llvm/Target/TargetData.h\"\n-#include \"llvm/Target/TargetLoweringObjectFile.h\"\n-#include \"llvm/Target/TargetMachine.h\"\n-#include \"llvm/ADT/SmallString.h\"\n-#include \"llvm/Support/ErrorHandling.h\"\n-#include \"llvm/Support/FormattedStream.h\"\n-#include <cctype>\n-#include <map>\n-\n-using namespace llvm;\n-\n-namespace {\n-  enum RustGCMetaType {\n-    RGCMT_DestIndex,  // Type descriptor index -> type descriptor.\n-    RGCMT_SrcIndex,   // Value -> type descriptor index.\n-    RGCMT_Static      // Value with static type descriptor.\n-  };\n-\n-  class RustGCMetadataPrinter : public GCMetadataPrinter {\n-  private:\n-    std::pair<RustGCMetaType,const Constant *>\n-      GetGCMetadataForRoot(const GCRoot &Root);\n-    void EmitGCMetadata(AsmPrinter &AP, MCStreamer &Out, GCRoot &Root);\n-    bool HandleDestIndex(const GCRoot &Root);\n-  public:\n-    void beginAssembly(AsmPrinter &AP) {};\n-    void finishAssembly(AsmPrinter &AP);\n-  };\n-\n-  struct OrderedSymbol {\n-    unsigned Index;\n-    MCSymbol *Sym;\n-\n-    OrderedSymbol(unsigned I, MCSymbol *S) : Index(I), Sym(S) {}\n-\n-    static OrderedSymbol make(unsigned I, MCSymbol *S) {\n-      OrderedSymbol OS(I, S);\n-      return OS;\n-    }\n-  };\n-}\n-\n-static GCMetadataPrinterRegistry::Add<RustGCMetadataPrinter>\n-X(\"rust\", \"Rust GC metadata printer\");\n-\n-\n-typedef std::vector< std::pair< MCSymbol *,std::vector<GCRoot> > > RootMap;\n-\n-std::pair<RustGCMetaType,const Constant *>\n-RustGCMetadataPrinter::GetGCMetadataForRoot(const GCRoot &Root) {\n-  const GlobalVariable *GCMetaVar =\n-    cast<const GlobalVariable>(Root.Metadata->stripPointerCasts());\n-\n-  const Constant *GCMetaInit = GCMetaVar->getInitializer();\n-  if (isa<ConstantAggregateZero>(GCMetaInit)) {\n-    // \"zeroinitializer\": expand to (0, 0).\n-    IntegerType *I32 = IntegerType::get(GCMetaInit->getContext(), 32);\n-    ConstantInt *Zero = ConstantInt::get(I32, 0);\n-    return std::make_pair(RGCMT_DestIndex, Zero);\n-  }\n-\n-  const ConstantStruct *GCMeta =\n-    cast<const ConstantStruct>(GCMetaVar->getInitializer());\n-\n-  RustGCMetaType GCMetaType = (RustGCMetaType)\n-    (cast<const ConstantInt>(GCMeta->getOperand(0))->getZExtValue());\n-  const Constant *Payload = cast<const Constant>(GCMeta->getOperand(1));\n-  return std::make_pair(GCMetaType, Payload);\n-}\n-\n-void RustGCMetadataPrinter::EmitGCMetadata(AsmPrinter &AP, MCStreamer &Out,\n-                                           GCRoot &Root) {\n-  int WordSize = AP.TM.getTargetData()->getPointerSize();\n-\n-  std::pair<RustGCMetaType,const Constant *> Pair =\n-    GetGCMetadataForRoot(Root);\n-  const GlobalValue *Tydesc = 0;\n-\n-  switch (Pair.first) {\n-  case RGCMT_DestIndex: // Dest index.\n-    assert(0 && \"Dest index should not be here!\");\n-  case RGCMT_SrcIndex:\n-    // TODO: Use the mapping to find the tydesc frame offset.\n-    Out.EmitIntValue(1, WordSize, 0);\n-    Out.EmitIntValue(0, WordSize, 0);\n-    return;\n-  case 2: // Static type descriptor.\n-    Out.EmitIntValue(0, WordSize, 0);\n-    Tydesc = cast<const GlobalValue>(Pair.second);\n-    break;\n-  }\n-\n-  MCSymbol *TydescSym = AP.Mang->getSymbol(Tydesc);\n-  Out.EmitSymbolValue(TydescSym, WordSize, 0);\n-}\n-\n-// Records the destination index of a type descriptor in the type descriptor\n-// map, if this GC root is a destination index. Returns true if the GC root is\n-// a destination index and false otherwise.\n-bool RustGCMetadataPrinter::HandleDestIndex(const GCRoot &Root) {\n-  std::pair<RustGCMetaType,const Constant *> Pair =\n-    GetGCMetadataForRoot(Root);\n-  return Pair.first == RGCMT_DestIndex; // TODO\n-}\n-\n-void RustGCMetadataPrinter::finishAssembly(AsmPrinter &AP) {\n-  MCStreamer &Out = AP.OutStreamer;\n-\n-  // Use the data section.\n-  Out.SwitchSection(AP.getObjFileLowering().getDataSection());\n-\n-  // Iterate over each function.\n-  RootMap Map;\n-\n-  iterator FI = begin(), FE = end();\n-  while (FI != FE) {\n-    GCFunctionInfo &GCFI = **FI;\n-\n-    // Iterate over each safe point.\n-    GCFunctionInfo::iterator SPI = GCFI.begin(), SPE = GCFI.end();\n-    while (SPI != SPE) {\n-      std::vector<GCRoot> Roots;\n-\n-      // Iterate over each live root.\n-      GCFunctionInfo::live_iterator LI = GCFI.live_begin(SPI);\n-      GCFunctionInfo::live_iterator LE = GCFI.live_end(SPI);\n-      while (LI != LE) {\n-        if (!HandleDestIndex(*LI))\n-          Roots.push_back(*LI);\n-        ++LI;\n-      }\n-\n-      Map.push_back(std::make_pair(SPI->Label, Roots));\n-      ++SPI;\n-    }\n-    ++FI;\n-  }\n-\n-  // Write out the map.\n-  Out.AddBlankLine();\n-\n-  int WordSize = AP.TM.getTargetData()->getPointerSize();\n-\n-  MCSymbol *SafePointSym = AP.GetExternalSymbolSymbol(\"rust_gc_safe_points\");\n-  Out.EmitSymbolAttribute(SafePointSym, MCSA_Global);\n-  Out.EmitLabel(SafePointSym);\n-  Out.EmitIntValue(Map.size(), WordSize, 0);\n-\n-  std::vector<MCSymbol *> FrameMapLabels;\n-\n-  RootMap::iterator MI = Map.begin(), ME = Map.end();\n-  unsigned i = 0;\n-  while (MI != ME) {\n-    Out.EmitSymbolValue(MI->first, WordSize, 0);\n-    MCSymbol *FrameMapLabel = AP.GetTempSymbol(\"rust_frame_map_label\", i);\n-    Out.EmitSymbolValue(FrameMapLabel, WordSize, 0);\n-    FrameMapLabels.push_back(FrameMapLabel);\n-    ++MI, ++i;\n-  }\n-\n-  MI = Map.begin(), i = 0;\n-  while (MI != ME) {\n-    Out.EmitLabel(FrameMapLabels[i]);\n-\n-    std::vector<GCRoot> &Roots = MI->second;\n-    Out.EmitIntValue(Roots.size(), WordSize, 0);\n-\n-    std::vector<GCRoot>::iterator RI = Roots.begin(), RE = Roots.end();\n-    while (RI != RE) {\n-      Out.EmitIntValue(RI->StackOffset, WordSize, 0);\n-      EmitGCMetadata(AP, Out, *RI);\n-      ++RI;\n-    }\n-\n-    ++MI, ++i;\n-  }\n-}\n-"}, {"sha": "a6645d15a48b5c522c92958fae58e90fc720bb44", "filename": "src/rustllvm/RustGCStrategy.cpp", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/92470336dd89d01f1eab34b45fe97c1a6a33f8d4/src%2Frustllvm%2FRustGCStrategy.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/92470336dd89d01f1eab34b45fe97c1a6a33f8d4/src%2Frustllvm%2FRustGCStrategy.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustGCStrategy.cpp?ref=92470336dd89d01f1eab34b45fe97c1a6a33f8d4", "patch": "@@ -1,31 +0,0 @@\n-//===- RustGCStrategy.cpp - Rust garbage collection strategy ----*- C++ -*-===\n-//\n-//                     The LLVM Compiler Infrastructure\n-//\n-// This file is distributed under the University of Illinois Open Source\n-// License. See LICENSE.TXT for details.\n-//\n-//===----------------------------------------------------------------------===\n-//\n-// This file defines the garbage collection strategy for Rust.\n-//\n-//===----------------------------------------------------------------------===\n-\n-#include \"llvm/CodeGen/GCs.h\"\n-#include \"llvm/CodeGen/GCStrategy.h\"\n-\n-using namespace llvm;\n-\n-class RustGCStrategy : public GCStrategy {\n-public:\n-  RustGCStrategy() {\n-    NeededSafePoints = 1 << GC::PostCall;\n-    UsesMetadata = true;\n-    InitRoots = false;  // LLVM crashes with this on due to bitcasts.\n-  }\n-};\n-\n-static GCRegistry::Add<RustGCStrategy>\n-RustGCStrategyRegistration(\"rust\", \"Rust GC\");\n-\n-"}]}