{"sha": "b85796fe3613e20a4af21933783a3d993bb8d7ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NTc5NmZlMzYxM2UyMGE0YWYyMTkzMzc4M2EzZDk5M2JiOGQ3YWQ=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-04-25T16:08:23Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-03T23:47:38Z"}, "message": "Properly parenthesize to avoid operator precedence errors", "tree": {"sha": "aad50954856ded763c7650858d6c61b0165a24af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aad50954856ded763c7650858d6c61b0165a24af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85796fe3613e20a4af21933783a3d993bb8d7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85796fe3613e20a4af21933783a3d993bb8d7ad", "html_url": "https://github.com/rust-lang/rust/commit/b85796fe3613e20a4af21933783a3d993bb8d7ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85796fe3613e20a4af21933783a3d993bb8d7ad/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82f8d4d6f1645dd08b107c3ead9155412637739b", "url": "https://api.github.com/repos/rust-lang/rust/commits/82f8d4d6f1645dd08b107c3ead9155412637739b", "html_url": "https://github.com/rust-lang/rust/commit/82f8d4d6f1645dd08b107c3ead9155412637739b"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "66971ee02620d0f3f0eeae52a87c4e81070b8ed0", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b85796fe3613e20a4af21933783a3d993bb8d7ad/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85796fe3613e20a4af21933783a3d993bb8d7ad/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=b85796fe3613e20a4af21933783a3d993bb8d7ad", "patch": "@@ -175,7 +175,12 @@ fn detect_option_if_let_else<'a>(cx: &LateContext<'_, 'a>, expr: &'a Expr<'a>) -\n             let capture_name = id.name.to_ident_string();\n             let wrap_braces = utils::get_enclosing_block(cx, expr.hir_id).map_or(false, |parent| {\n                 if_chain! {\n-                    if let Some(Expr { kind: ExprKind::Match(condition, arms, MatchSource::IfDesugar{contains_else_clause: true}|MatchSource::IfLetDesugar{contains_else_clause: true}), .. } ) = parent.expr;\n+                    if let Some(Expr { kind: ExprKind::Match(\n+                                _,\n+                                arms,\n+                                MatchSource::IfDesugar{contains_else_clause: true}\n+                                    | MatchSource::IfLetDesugar{contains_else_clause: true}),\n+                                .. } ) = parent.expr;\n                     if expr.hir_id == arms[1].body.hir_id;\n                     then {\n                         true\n@@ -184,8 +189,19 @@ fn detect_option_if_let_else<'a>(cx: &LateContext<'_, 'a>, expr: &'a Expr<'a>) -\n                     }\n                 }\n             });\n+            let parens_around_option = match &let_body.kind {\n+                ExprKind::Call(..)\n+                        | ExprKind::MethodCall(..)\n+                        | ExprKind::Loop(..)\n+                        | ExprKind::Match(..)\n+                        | ExprKind::Block(..)\n+                        | ExprKind::Field(..)\n+                        | ExprKind::Path(_)\n+                    => false,\n+                _ => true,\n+            };\n             Some(OptionIfLetElseOccurence {\n-                option: format!(\"{}\", Sugg::hir(cx, let_body, \"..\")),\n+                option: format!(\"{}{}{}\", if parens_around_option { \"(\" } else { \"\" }, Sugg::hir(cx, let_body, \"..\"), if parens_around_option { \")\" } else { \"\" }),\n                 method_sugg: format!(\"{}\", method_sugg),\n                 some_expr: format!(\"|{}| {}\", capture_name, Sugg::hir(cx, some_body, \"..\")),\n                 none_expr: format!(\"{}{}\", if method_sugg == \"map_or\" { \"\" } else { \"|| \" }, Sugg::hir(cx, none_body, \"..\")),\n@@ -209,7 +225,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OptionIfLetElse {\n                 format!(\n                     \"{}{}.{}({}, {}){}\",\n                     if detection.wrap_braces { \"{ \" } else { \"\" },\n-                    detection.option, detection.method_sugg, detection.none_expr, detection.some_expr,\n+                    detection.option,\n+                    detection.method_sugg,\n+                    detection.none_expr,\n+                    detection.some_expr,\n                     if detection.wrap_braces { \" }\" } else { \"\" },\n                 ),\n                 Applicability::MachineApplicable,"}, {"sha": "80b162714acaaa6977c450530790ad1549100361", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b85796fe3613e20a4af21933783a3d993bb8d7ad/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b85796fe3613e20a4af21933783a3d993bb8d7ad/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=b85796fe3613e20a4af21933783a3d993bb8d7ad", "patch": "@@ -5,12 +5,16 @@ fn bad1(string: Option<&str>) -> (bool, &str) {\n     string.map_or((false, \"hello\"), |x| (true, x))\n }\n \n-fn bad2(string: Option<&str>) -> Option<(bool, &str)> {\n+fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {\n     if string.is_none() {\n         None\n     } else { string.map_or(Some((false, \"\")), |x| Some((true, x))) }\n }\n \n+fn unop_bad(string: &Option<&str>) -> usize {\n+    (*string).map_or(0, |s| s.len())\n+}\n+\n fn longer_body(arg: Option<u32>) -> u32 {\n     arg.map_or(13, |x| {\n         let y = x * x;\n@@ -48,7 +52,8 @@ fn main() {\n     let optional = Some(5);\n     let _ = optional.map_or(5, |x| x + 2);\n     let _ = bad1(None);\n-    let _ = bad2(None);\n+    let _ = else_if_option(None);\n+    let _ = unop_bad(&None);\n     let _ = longer_body(None);\n     test_map_or_else(None);\n     let _ = negative_tests(None);"}, {"sha": "7c43fbea373f3653f35196d92e1347c8c2c1ed74", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b85796fe3613e20a4af21933783a3d993bb8d7ad/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85796fe3613e20a4af21933783a3d993bb8d7ad/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=b85796fe3613e20a4af21933783a3d993bb8d7ad", "patch": "@@ -9,7 +9,7 @@ fn bad1(string: Option<&str>) -> (bool, &str) {\n     }\n }\n \n-fn bad2(string: Option<&str>) -> Option<(bool, &str)> {\n+fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {\n     if string.is_none() {\n         None\n     } else if let Some(x) = string {\n@@ -19,6 +19,14 @@ fn bad2(string: Option<&str>) -> Option<(bool, &str)> {\n     }\n }\n \n+fn unop_bad(string: &Option<&str>) -> usize {\n+    if let Some(s) = *string {\n+        s.len()\n+    } else {\n+        0\n+    }\n+}\n+\n fn longer_body(arg: Option<u32>) -> u32 {\n     if let Some(x) = arg {\n         let y = x * x;\n@@ -60,7 +68,8 @@ fn main() {\n     let optional = Some(5);\n     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n     let _ = bad1(None);\n-    let _ = bad2(None);\n+    let _ = else_if_option(None);\n+    let _ = unop_bad(&None);\n     let _ = longer_body(None);\n     test_map_or_else(None);\n     let _ = negative_tests(None);"}, {"sha": "b932fe59759008422fd70092c0e3a071b4cad4dc", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b85796fe3613e20a4af21933783a3d993bb8d7ad/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b85796fe3613e20a4af21933783a3d993bb8d7ad/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=b85796fe3613e20a4af21933783a3d993bb8d7ad", "patch": "@@ -24,6 +24,16 @@ LL | |     }\n error: use Option::map_or instead of an if let/else\n   --> $DIR/option_if_let_else.rs:23:5\n    |\n+LL | /     if let Some(s) = *string {\n+LL | |         s.len()\n+LL | |     } else {\n+LL | |         0\n+LL | |     }\n+   | |_____^ help: try: `(*string).map_or(0, |s| s.len())`\n+\n+error: use Option::map_or instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:31:5\n+   |\n LL | /     if let Some(x) = arg {\n LL | |         let y = x * x;\n LL | |         y * y\n@@ -41,7 +51,7 @@ LL |     })\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:32:13\n+  --> $DIR/option_if_let_else.rs:40:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -64,10 +74,10 @@ LL |     }, |x| x * x * x * x);\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:61:13\n+  --> $DIR/option_if_let_else.rs:69:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}]}