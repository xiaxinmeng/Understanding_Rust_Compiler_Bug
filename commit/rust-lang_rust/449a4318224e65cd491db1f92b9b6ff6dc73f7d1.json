{"sha": "449a4318224e65cd491db1f92b9b6ff6dc73f7d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OWE0MzE4MjI0ZTY1Y2Q0OTFkYjFmOTJiOWI2ZmY2ZGM3M2Y3ZDE=", "commit": {"author": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-05-19T17:37:00Z"}, "committer": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-05-19T17:38:37Z"}, "message": "rustdoc: render `<Self as X>::Y` type casts properly", "tree": {"sha": "be94f147cb029a34f6a8a7fb26a21f06023bee18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be94f147cb029a34f6a8a7fb26a21f06023bee18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/449a4318224e65cd491db1f92b9b6ff6dc73f7d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDDGYqKFKtc1ioGY0jGL+mKYvxGIFAmClTR0ACgkQjGL+mKYv\nxGKuQA/9ExmJzNKtqg4uA8+6hcwtFTwGAHqMcIsC1/8bvjLQGA/9WQjcUWlpVHvR\nsyhNNP/C75rNA0n+ftv17DFNroc6Kdq1WKMBwcpHCHY+n8y44dDexVcalAcIT69F\nx1wA0iEkfxzZX3wsdcECiWMGRrE9+7BwuD5YRllQ69fh0ZSlopxdbcSnMyYTplp5\n3JjbP3MubUnncu1eY4ZO/V9TFKDSXXA4X5qxTpZJjkyqnmNKboNwKk6GB3yn1yKF\n9zvmEWtNXeLd4gqsxOCJZOTeGOSAl+1S2pbY41vOfPe9LQbqNfQU3KP3rXGVrVbz\n7101x75uuhrI+nmrcXrwhuKsp9/JkJPIA6Ed3NRrA1Hmv5UjkLoEOl6QzlFm7JY5\nMXLDnKxJBzz9Rz94ANa+VM0bMhne2pFcc3VOGtUnlPuSkcPcd7aXQdW6eMXMnz4F\nawMVUDvIjE1YaaVM9UBvWRUkpEZStthHeOfJVVV9PPY16d9F7gR7xDG5PttSdD7v\nlZGz6CEgL79QTk86VaGwrqpXawaeNptNd6lq49F6LogfZ3xPDlnZoCcOrK7rMpE3\nKn/MbXHMZkr2zaAQ1V4yUYA21binwNLlKNLzI4LWqsFItMhsNGPMAGQxCugrEDkE\nsc5qhvyDYljIM4/zYnYcbtqiavXGPLLiT5pEeRFwUheF8R9HHkU=\n=ZBA7\n-----END PGP SIGNATURE-----", "payload": "tree be94f147cb029a34f6a8a7fb26a21f06023bee18\nparent 3e827cc21e0734edd26170e8d1481f0d66a1426b\nauthor Justus K <justus.k@protonmail.com> 1621445820 +0200\ncommitter Justus K <justus.k@protonmail.com> 1621445917 +0200\n\nrustdoc: render `<Self as X>::Y` type casts properly\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/449a4318224e65cd491db1f92b9b6ff6dc73f7d1", "html_url": "https://github.com/rust-lang/rust/commit/449a4318224e65cd491db1f92b9b6ff6dc73f7d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/comments", "author": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e827cc21e0734edd26170e8d1481f0d66a1426b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e827cc21e0734edd26170e8d1481f0d66a1426b", "html_url": "https://github.com/rust-lang/rust/commit/3e827cc21e0734edd26170e8d1481f0d66a1426b"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "35ff57f85a56227c220f327b1592839938e1d7a9", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=449a4318224e65cd491db1f92b9b6ff6dc73f7d1", "patch": "@@ -561,7 +561,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 }\n                 WherePredicate::EqPredicate { lhs, rhs } => {\n                     match lhs {\n-                        Type::QPath { name: left_name, ref self_type, ref trait_ } => {\n+                        Type::QPath { name: left_name, ref self_type, ref trait_, .. } => {\n                             let ty = &*self_type;\n                             match **trait_ {\n                                 Type::ResolvedPath {"}, {"sha": "a14eefaf57147da27b524fbc40631b02d1c64399", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=449a4318224e65cd491db1f92b9b6ff6dc73f7d1", "patch": "@@ -588,6 +588,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n                     self_type: box clean::Generic(ref s),\n                     trait_: box clean::ResolvedPath { did, .. },\n                     name: ref _name,\n+                    ..\n                 },\n             ref bounds,\n         } => !(bounds.is_empty() || *s == kw::SelfUpper && did == trait_did),"}, {"sha": "231f13adeb68c2b578de4d6b930b6efd44129c95", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=449a4318224e65cd491db1f92b9b6ff6dc73f7d1", "patch": "@@ -418,9 +418,11 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n             GenericBound::TraitBound(t, _) => t.trait_,\n             GenericBound::Outlives(_) => panic!(\"cleaning a trait got a lifetime\"),\n         };\n+        let self_type = self.self_ty().clean(cx);\n         Type::QPath {\n             name: cx.tcx.associated_item(self.item_def_id).ident.name,\n-            self_type: box self.self_ty().clean(cx),\n+            self_def_id: self_type.def_id(),\n+            self_type: box self_type,\n             trait_: box trait_,\n         }\n     }\n@@ -1104,7 +1106,7 @@ impl Clean<Item> for ty::AssocItem {\n                         .filter_map(|pred| {\n                             let (name, self_type, trait_, bounds) = match *pred {\n                                 WherePredicate::BoundPredicate {\n-                                    ty: QPath { ref name, ref self_type, ref trait_ },\n+                                    ty: QPath { ref name, ref self_type, ref trait_, .. },\n                                     ref bounds,\n                                 } => (name, self_type, trait_, bounds),\n                                 _ => return None,\n@@ -1282,16 +1284,15 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n \n             let segments = if p.is_global() { &p.segments[1..] } else { &p.segments };\n             let trait_segments = &segments[..segments.len() - 1];\n+            let trait_def = cx.tcx.associated_item(p.res.def_id()).container.id();\n             let trait_path = self::Path {\n                 global: p.is_global(),\n-                res: Res::Def(\n-                    DefKind::Trait,\n-                    cx.tcx.associated_item(p.res.def_id()).container.id(),\n-                ),\n+                res: Res::Def(DefKind::Trait, trait_def),\n                 segments: trait_segments.clean(cx),\n             };\n             Type::QPath {\n                 name: p.segments.last().expect(\"segments were empty\").ident.name,\n+                self_def_id: Some(DefId::local(qself.hir_id.owner.local_def_index)),\n                 self_type: box qself.clean(cx),\n                 trait_: box resolve_type(cx, trait_path, hir_id),\n             }\n@@ -1306,6 +1307,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n             let trait_path = hir::Path { span, res, segments: &[] }.clean(cx);\n             Type::QPath {\n                 name: segment.ident.name,\n+                self_def_id: res.opt_def_id(),\n                 self_type: box qself.clean(cx),\n                 trait_: box resolve_type(cx, trait_path, hir_id),\n             }"}, {"sha": "de88e249b67f8a5ada5233a41794e76a133ee924", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=449a4318224e65cd491db1f92b9b6ff6dc73f7d1", "patch": "@@ -1519,6 +1519,7 @@ crate enum Type {\n     QPath {\n         name: Symbol,\n         self_type: Box<Type>,\n+        self_def_id: Option<DefId>,\n         trait_: Box<Type>,\n     },\n \n@@ -1665,7 +1666,7 @@ impl Type {\n \n     crate fn projection(&self) -> Option<(&Type, DefId, Symbol)> {\n         let (self_, trait_, name) = match self {\n-            QPath { self_type, trait_, name } => (self_type, trait_, name),\n+            QPath { self_type, trait_, name, .. } => (self_type, trait_, name),\n             _ => return None,\n         };\n         let trait_did = match **trait_ {"}, {"sha": "2c31a502565aaba84f340e59134d7308ac4164bd", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=449a4318224e65cd491db1f92b9b6ff6dc73f7d1", "patch": "@@ -175,8 +175,9 @@ crate fn strip_type(ty: Type) -> Type {\n         Type::BorrowedRef { lifetime, mutability, type_ } => {\n             Type::BorrowedRef { lifetime, mutability, type_: Box::new(strip_type(*type_)) }\n         }\n-        Type::QPath { name, self_type, trait_ } => Type::QPath {\n+        Type::QPath { name, self_type, trait_, self_def_id } => Type::QPath {\n             name,\n+            self_def_id,\n             self_type: Box::new(strip_type(*self_type)),\n             trait_: Box::new(strip_type(*trait_)),\n         },"}, {"sha": "3c1d03a78f1cd86d5f7ed0b8ed64e179523f6902", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=449a4318224e65cd491db1f92b9b6ff6dc73f7d1", "patch": "@@ -18,7 +18,7 @@ use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_target::spec::abi::Abi;\n \n use crate::clean::{\n-    self, utils::find_nearest_parent_module, ExternalCrate, FakeDefId, PrimitiveType,\n+    self, utils::find_nearest_parent_module, ExternalCrate, FakeDefId, GetDefId, PrimitiveType,\n };\n use crate::formats::item_type::ItemType;\n use crate::html::escape::Escape;\n@@ -836,10 +836,13 @@ fn fmt_type<'cx>(\n                 write!(f, \"impl {}\", print_generic_bounds(bounds, cx))\n             }\n         }\n-        clean::QPath { ref name, ref self_type, ref trait_ } => {\n+        clean::QPath { ref name, ref self_type, ref trait_, ref self_def_id } => {\n             let should_show_cast = match *trait_ {\n                 box clean::ResolvedPath { ref path, .. } => {\n-                    !path.segments.is_empty() && !self_type.is_self_type()\n+                    !path.segments.is_empty()\n+                        && self_def_id\n+                            .zip(trait_.def_id())\n+                            .map_or(!self_type.is_self_type(), |(id, trait_)| id != trait_)\n                 }\n                 _ => true,\n             };"}, {"sha": "c6646ba9ae4d2bc52faeb7cfe4681640ee5b4e7a", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a4318224e65cd491db1f92b9b6ff6dc73f7d1/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=449a4318224e65cd491db1f92b9b6ff6dc73f7d1", "patch": "@@ -396,7 +396,7 @@ impl FromWithTcx<clean::Type> for Type {\n                 mutable: mutability == ast::Mutability::Mut,\n                 type_: Box::new((*type_).into_tcx(tcx)),\n             },\n-            QPath { name, self_type, trait_ } => Type::QualifiedPath {\n+            QPath { name, self_type, trait_, .. } => Type::QualifiedPath {\n                 name: name.to_string(),\n                 self_type: Box::new((*self_type).into_tcx(tcx)),\n                 trait_: Box::new((*trait_).into_tcx(tcx)),"}]}