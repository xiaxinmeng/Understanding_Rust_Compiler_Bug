{"sha": "fec4335407c9a292c524e07996ccd4d26c563548", "node_id": "C_kwDOAAsO6NoAKGZlYzQzMzU0MDdjOWEyOTJjNTI0ZTA3OTk2Y2NkNGQyNmM1NjM1NDg", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-12T19:01:33Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-27T17:16:16Z"}, "message": "Apply noundef metadata to loads of types that do not permit raw init\n\nThis matches the noundef attributes we apply on arguments/return types.", "tree": {"sha": "4af67f978ab9bb4689527c4f1048c2fcf4a8eb83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4af67f978ab9bb4689527c4f1048c2fcf4a8eb83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec4335407c9a292c524e07996ccd4d26c563548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec4335407c9a292c524e07996ccd4d26c563548", "html_url": "https://github.com/rust-lang/rust/commit/fec4335407c9a292c524e07996ccd4d26c563548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec4335407c9a292c524e07996ccd4d26c563548/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1fe7e7c95e14dd8a420edf2f8a160c70211e04", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1fe7e7c95e14dd8a420edf2f8a160c70211e04", "html_url": "https://github.com/rust-lang/rust/commit/3b1fe7e7c95e14dd8a420edf2f8a160c70211e04"}], "stats": {"total": 102, "additions": 98, "deletions": 4}, "files": [{"sha": "77aaa3010f2e6ec33656b704a55986fec8f19125", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fec4335407c9a292c524e07996ccd4d26c563548/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec4335407c9a292c524e07996ccd4d26c563548/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=fec4335407c9a292c524e07996ccd4d26c563548", "patch": "@@ -479,6 +479,10 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             load: &'ll Value,\n             scalar: abi::Scalar,\n         ) {\n+            if !scalar.is_always_valid(bx) {\n+                bx.noundef_metadata(load);\n+            }\n+\n             match scalar.value {\n                 abi::Int(..) => {\n                     if !scalar.is_always_valid(bx) {\n@@ -1215,6 +1219,16 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n+    fn noundef_metadata(&mut self, load: &'ll Value) {\n+        unsafe {\n+            llvm::LLVMSetMetadata(\n+                load,\n+                llvm::MD_noundef as c_uint,\n+                llvm::LLVMMDNodeInContext(self.cx.llcx, ptr::null(), 0),\n+            );\n+        }\n+    }\n+\n     pub fn minnum(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         unsafe { llvm::LLVMRustBuildMinNum(self.llbuilder, lhs, rhs) }\n     }"}, {"sha": "81ae97a80cc170cbd66acc3f0c6cc77ec4e92b85", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fec4335407c9a292c524e07996ccd4d26c563548/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec4335407c9a292c524e07996ccd4d26c563548/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=fec4335407c9a292c524e07996ccd4d26c563548", "patch": "@@ -442,6 +442,7 @@ pub enum MetadataType {\n     MD_mem_parallel_loop_access = 10,\n     MD_nonnull = 11,\n     MD_type = 19,\n+    MD_noundef = 29,\n }\n \n /// LLVMRustAsmDialect"}, {"sha": "977175a4a621dffe17d7a6cc5c6bc61c286b9e48", "filename": "src/test/codegen/loads.rs", "status": "modified", "additions": 83, "deletions": 4, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/fec4335407c9a292c524e07996ccd4d26c563548/src%2Ftest%2Fcodegen%2Floads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec4335407c9a292c524e07996ccd4d26c563548/src%2Ftest%2Fcodegen%2Floads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Floads.rs?ref=fec4335407c9a292c524e07996ccd4d26c563548", "patch": "@@ -2,11 +2,87 @@\n \n #![crate_type = \"lib\"]\n \n+use std::mem::MaybeUninit;\n+use std::num::NonZeroU16;\n+\n pub struct Bytes {\n-  a: u8,\n-  b: u8,\n-  c: u8,\n-  d: u8,\n+    a: u8,\n+    b: u8,\n+    c: u8,\n+    d: u8,\n+}\n+\n+#[derive(Copy, Clone)]\n+pub enum MyBool {\n+    True,\n+    False,\n+}\n+\n+// CHECK-LABEL: @load_ref\n+#[no_mangle]\n+pub fn load_ref<'a>(x: &&'a i32) -> &'a i32 {\n+// Alignment of a reference itself is target dependent, so just match any alignment:\n+// the main thing we care about here is !nonnull and !noundef.\n+// CHECK: load i32*, i32** %x, align {{[0-9]+}}, !nonnull !{{[0-9]+}}, !noundef !{{[0-9]+}}\n+    *x\n+}\n+\n+// CHECK-LABEL: @load_box\n+#[no_mangle]\n+pub fn load_box<'a>(x: Box<Box<i32>>) -> Box<i32> {\n+// Alignment of a box itself is target dependent, so just match any alignment:\n+// the main thing we care about here is !nonnull and !noundef.\n+// CHECK: load i32*, i32** %x, align {{[0-9]+}}, !nonnull !{{[0-9]+}}, !noundef !{{[0-9]+}}\n+    *x\n+}\n+\n+// CHECK-LABEL: @load_bool\n+#[no_mangle]\n+pub fn load_bool(x: &bool) -> bool {\n+// CHECK: load i8, i8* %x, align 1, !range ![[BOOL_RANGE:[0-9]+]], !noundef !{{[0-9]+}}\n+    *x\n+}\n+\n+// CHECK-LABEL: @load_maybeuninit_bool\n+#[no_mangle]\n+pub fn load_maybeuninit_bool(x: &MaybeUninit<bool>) -> MaybeUninit<bool> {\n+// CHECK: load i8, i8* %x, align 1{{$}}\n+    *x\n+}\n+\n+// CHECK-LABEL: @load_enum_bool\n+#[no_mangle]\n+pub fn load_enum_bool(x: &MyBool) -> MyBool {\n+// CHECK: load i8, i8* %x, align 1, !range ![[BOOL_RANGE]], !noundef !{{[0-9]+}}\n+    *x\n+}\n+\n+// CHECK-LABEL: @load_maybeuninit_enum_bool\n+#[no_mangle]\n+pub fn load_maybeuninit_enum_bool(x: &MaybeUninit<MyBool>) -> MaybeUninit<MyBool> {\n+// CHECK: load i8, i8* %x, align 1{{$}}\n+    *x\n+}\n+\n+// CHECK-LABEL: @load_int\n+#[no_mangle]\n+pub fn load_int(x: &u16) -> u16 {\n+// CHECK: load i16, i16* %x, align 2{{$}}\n+    *x\n+}\n+\n+// CHECK-LABEL: @load_nonzero_int\n+#[no_mangle]\n+pub fn load_nonzero_int(x: &NonZeroU16) -> NonZeroU16 {\n+// CHECK: load i16, i16* %x, align 2, !range ![[NONZEROU16_RANGE:[0-9]+]], !noundef !{{[0-9]+}}\n+    *x\n+}\n+\n+// CHECK-LABEL: @load_option_nonzero_int\n+#[no_mangle]\n+pub fn load_option_nonzero_int(x: &Option<NonZeroU16>) -> Option<NonZeroU16> {\n+// CHECK: load i16, i16* %x, align 2{{$}}\n+    *x\n }\n \n // CHECK-LABEL: @borrow\n@@ -43,3 +119,6 @@ pub fn small_struct_alignment(x: Bytes) -> Bytes {\n // CHECK: ret i32 [[VAR]]\n     x\n }\n+\n+// CHECK: ![[BOOL_RANGE]] = !{i8 0, i8 2}\n+// CHECK: ![[NONZEROU16_RANGE]] = !{i16 1, i16 0}"}]}