{"sha": "38a5338c63a37d09589b8cd44742b17a3913433d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YTUzMzhjNjNhMzdkMDk1ODliOGNkNDQ3NDJiMTdhMzkxMzQzM2Q=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-05-03T18:56:25Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-05-09T18:05:11Z"}, "message": "Add detailed error explanation for E0504\n\nRemoved unnecessary use of threads from E0504\n\nCleaned up line ending on E0504\n\nAdded more examples for E0504\n\nChanged to erroneous code wording\n\nSwitched Rc example to thread/Arc example\n\nAdded comments describing why errors no longer occur", "tree": {"sha": "86122ce6fe233e2d666636a7e1c96cb965655c51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86122ce6fe233e2d666636a7e1c96cb965655c51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38a5338c63a37d09589b8cd44742b17a3913433d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38a5338c63a37d09589b8cd44742b17a3913433d", "html_url": "https://github.com/rust-lang/rust/commit/38a5338c63a37d09589b8cd44742b17a3913433d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38a5338c63a37d09589b8cd44742b17a3913433d/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af0a433865321ee9fc5287eef63227baf4cba109", "url": "https://api.github.com/repos/rust-lang/rust/commits/af0a433865321ee9fc5287eef63227baf4cba109", "html_url": "https://github.com/rust-lang/rust/commit/af0a433865321ee9fc5287eef63227baf4cba109"}], "stats": {"total": 105, "additions": 104, "deletions": 1}, "files": [{"sha": "1802ab43161fbc4ca4086bfcf936442533a1e733", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 104, "deletions": 1, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/38a5338c63a37d09589b8cd44742b17a3913433d/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a5338c63a37d09589b8cd44742b17a3913433d/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=38a5338c63a37d09589b8cd44742b17a3913433d", "patch": "@@ -454,6 +454,110 @@ fn foo(a: &mut i32) {\n ```\n \"##,\n \n+E0504: r##\"\n+This error occurs when an attempt is made to move a borrowed variable into a\n+closure.\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+struct FancyNum {\n+    num: u8\n+}\n+\n+fn main() {\n+    let fancy_num = FancyNum { num: 5 };\n+    let fancy_ref = &fancy_num;\n+\n+    let x = move || {\n+        println!(\"child function: {}\", fancy_num.num);\n+        // error: cannot move `fancy_num` into closure because it is borrowed\n+    };\n+\n+    x();\n+    println!(\"main function: {}\", fancy_ref.num);\n+}\n+```\n+\n+Here, `fancy_num` is borrowed by `fancy_ref` and so cannot be moved into\n+the closure `x`. There is no way to move a value into a closure while it is\n+borrowed, as that would invalidate the borrow.\n+\n+If the closure can't outlive the value being moved, try using a reference\n+rather than moving:\n+\n+```\n+struct FancyNum {\n+    num: u8\n+}\n+\n+fn main() {\n+    let fancy_num = FancyNum { num: 5 };\n+    let fancy_ref = &fancy_num;\n+\n+    let x = move || {\n+        // fancy_ref is usable here because it doesn't move `fancy_num`\n+        println!(\"child function: {}\", fancy_ref.num);\n+    };\n+\n+    x();\n+\n+    println!(\"main function: {}\", fancy_num.num);\n+}\n+```\n+\n+If the value has to be borrowed and then moved, try limiting the lifetime of\n+the borrow using a scoped block:\n+\n+```\n+struct FancyNum {\n+    num: u8\n+}\n+\n+fn main() {\n+    let fancy_num = FancyNum { num: 5 };\n+\n+    {\n+        let fancy_ref = &fancy_num;\n+        println!(\"main function: {}\", fancy_ref.num);\n+        // `fancy_ref` goes out of scope here\n+    }\n+\n+    let x = move || {\n+        // `fancy_num` can be moved now (no more references exist)\n+        println!(\"child function: {}\", fancy_num.num);\n+    };\n+\n+    x();\n+}\n+```\n+\n+If the lifetime of a reference isn't enough, such as in the case of threading,\n+consider using an `Arc` to create a reference-counted value:\n+\n+```\n+use std::sync::Arc;\n+use std::thread;\n+\n+struct FancyNum {\n+    num: u8\n+}\n+\n+fn main() {\n+    let fancy_ref1 = Arc::new(FancyNum { num: 5 });\n+    let fancy_ref2 = fancy_ref1.clone();\n+\n+    let x = thread::spawn(move || {\n+        // `fancy_ref1` can be moved and has a `'static` lifetime\n+        println!(\"child thread: {}\", fancy_ref1.num);\n+    });\n+\n+    x.join().expect(\"child thread should finish\");\n+    println!(\"main thread: {}\", fancy_ref2.num);\n+}\n+```\n+\"##,\n+\n E0506: r##\"\n This error occurs when an attempt is made to assign to a borrowed value.\n \n@@ -661,7 +765,6 @@ register_diagnostics! {\n     E0500, // closure requires unique access to `..` but .. is already borrowed\n     E0502, // cannot borrow `..`.. as .. because .. is also borrowed as ...\n     E0503, // cannot use `..` because it was mutably borrowed\n-    E0504, // cannot move `..` into closure because it is borrowed\n     E0505, // cannot move out of `..` because it is borrowed\n     E0508, // cannot move out of type `..`, a non-copy fixed-size array\n     E0509, // cannot move out of type `..`, which defines the `Drop` trait"}]}