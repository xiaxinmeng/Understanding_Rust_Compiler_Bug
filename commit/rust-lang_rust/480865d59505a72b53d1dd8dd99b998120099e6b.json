{"sha": "480865d59505a72b53d1dd8dd99b998120099e6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MDg2NWQ1OTUwNWE3MmI1M2QxZGQ4ZGQ5OWI5OTgxMjAwOTllNmI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-08T18:28:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-08T18:28:18Z"}, "message": "Rollup merge of #81817 - hameerabbasi:mcp-635, r=oli-obk\n\nAdd option to emit compiler stderr per bitwidth.\n\nSee rust-lang/compiler-team#365\n\nr? `@oli-obk`", "tree": {"sha": "ecb2a7270434c7548e8ce4de8f5d4262ee1c9379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecb2a7270434c7548e8ce4de8f5d4262ee1c9379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/480865d59505a72b53d1dd8dd99b998120099e6b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIYLDCRBK7hj4Ov3rIwAAdHIIAF+9dv9XNKqlHAV1urrVvDfB\nAYY7Y29HTjiSdz9/yVeSIFFY3VxCKWzBke3g0TUkIWijnQyZrOVSyjHSDy4N9XSI\nLwU8ub4c3TvNLE8j436QqAvAQhAZ56YMeLK/slOpLUqKvNZ0TeK9YuJBYg81NwCP\n7bmLi4tFMn2nyp9H8mAiUNWu7EMttJwFc6EDc6mpay73KbT3+QpVvXQCKQi608gH\nNDgrZ2J+B0jS7n9Jg0ZAzJII4I3GhcmAbfpTuGj70MgBOchNgYqZ+Q9UEVITtFnj\no2QvMxUwKrMrCw1NszmgQG5IfBUOLnFf3+sGcXKh+gIGfwyMGfU27BcfDhbhVIQ=\n=LGXx\n-----END PGP SIGNATURE-----\n", "payload": "tree ecb2a7270434c7548e8ce4de8f5d4262ee1c9379\nparent b263981fd7c1285cddf2f207554749a425d42978\nparent b700878eb23aae3cf228e4ef7d2a74d2fa79358e\nauthor Mara Bos <m-ou.se@m-ou.se> 1612808898 +0100\ncommitter GitHub <noreply@github.com> 1612808898 +0100\n\nRollup merge of #81817 - hameerabbasi:mcp-635, r=oli-obk\n\nAdd option to emit compiler stderr per bitwidth.\n\nSee rust-lang/compiler-team#365\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/480865d59505a72b53d1dd8dd99b998120099e6b", "html_url": "https://github.com/rust-lang/rust/commit/480865d59505a72b53d1dd8dd99b998120099e6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/480865d59505a72b53d1dd8dd99b998120099e6b/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b263981fd7c1285cddf2f207554749a425d42978", "url": "https://api.github.com/repos/rust-lang/rust/commits/b263981fd7c1285cddf2f207554749a425d42978", "html_url": "https://github.com/rust-lang/rust/commit/b263981fd7c1285cddf2f207554749a425d42978"}, {"sha": "b700878eb23aae3cf228e4ef7d2a74d2fa79358e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b700878eb23aae3cf228e4ef7d2a74d2fa79358e", "html_url": "https://github.com/rust-lang/rust/commit/b700878eb23aae3cf228e4ef7d2a74d2fa79358e"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "429a8c98cd57cd5f3fdb70e33ed46bdccea6a563", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/480865d59505a72b53d1dd8dd99b998120099e6b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/480865d59505a72b53d1dd8dd99b998120099e6b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=480865d59505a72b53d1dd8dd99b998120099e6b", "patch": "@@ -333,6 +333,8 @@ pub struct TestProps {\n     pub assembly_output: Option<String>,\n     // If true, the test is expected to ICE\n     pub should_ice: bool,\n+    // If true, the stderr is expected to be different across bit-widths.\n+    pub stderr_per_bitwidth: bool,\n }\n \n impl TestProps {\n@@ -372,6 +374,7 @@ impl TestProps {\n             rustfix_only_machine_applicable: false,\n             assembly_output: None,\n             should_ice: false,\n+            stderr_per_bitwidth: false,\n         }\n     }\n \n@@ -538,6 +541,10 @@ impl TestProps {\n                 if self.assembly_output.is_none() {\n                     self.assembly_output = config.parse_assembly_output(ln);\n                 }\n+\n+                if !self.stderr_per_bitwidth {\n+                    self.stderr_per_bitwidth = config.parse_stderr_per_bitwidth(ln);\n+                }\n             });\n         }\n \n@@ -774,6 +781,10 @@ impl Config {\n         self.parse_name_directive(line, \"ignore-pass\")\n     }\n \n+    fn parse_stderr_per_bitwidth(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"stderr-per-bitwidth\")\n+    }\n+\n     fn parse_assembly_output(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"assembly-output\").map(|r| r.trim().to_string())\n     }"}, {"sha": "1ec32184d9898e8ba5f11a383c31e2e294493279", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/480865d59505a72b53d1dd8dd99b998120099e6b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/480865d59505a72b53d1dd8dd99b998120099e6b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=480865d59505a72b53d1dd8dd99b998120099e6b", "patch": "@@ -3124,7 +3124,12 @@ impl<'test> TestCx<'test> {\n                     errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n                 }\n                 if !self.props.dont_check_compiler_stderr {\n-                    errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n+                    let kind = if self.props.stderr_per_bitwidth {\n+                        format!(\"{}bit.stderr\", get_pointer_width(&self.config.target))\n+                    } else {\n+                        String::from(\"stderr\")\n+                    };\n+                    errors += self.compare_output(&kind, &normalized_stderr, &expected_stderr);\n                 }\n             }\n             TestOutput::Run => {"}]}