{"sha": "ce064722469672a504d8a1720ab4d2f681c21610", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMDY0NzIyNDY5NjcyYTUwNGQ4YTE3MjBhYjRkMmY2ODFjMjE2MTA=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-11T03:06:49Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-16T22:11:59Z"}, "message": "replace `walk_ptrs_ty` with `peel_refs`", "tree": {"sha": "d99b18ac2e68b530fd98672f739f00efd7f49ef5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d99b18ac2e68b530fd98672f739f00efd7f49ef5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce064722469672a504d8a1720ab4d2f681c21610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce064722469672a504d8a1720ab4d2f681c21610", "html_url": "https://github.com/rust-lang/rust/commit/ce064722469672a504d8a1720ab4d2f681c21610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce064722469672a504d8a1720ab4d2f681c21610/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ce2d6b40e85bf543b3a9e38cd08c7065b357807", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce2d6b40e85bf543b3a9e38cd08c7065b357807", "html_url": "https://github.com/rust-lang/rust/commit/2ce2d6b40e85bf543b3a9e38cd08c7065b357807"}], "stats": {"total": 115, "additions": 51, "deletions": 64}, "files": [{"sha": "d7d02ebf985c81ae602d8c6e78eaf5fc1bb94b8d", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,6 +1,5 @@\n use crate::utils::{\n-    contains_name, get_pat_name, match_type, paths, single_segment_path, snippet_with_applicability,\n-    span_lint_and_sugg, walk_ptrs_ty,\n+    contains_name, get_pat_name, match_type, paths, single_segment_path, snippet_with_applicability, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::UintTy;\n@@ -53,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for ByteCount {\n                     if let ExprKind::Binary(ref op, ref l, ref r) = body.value.kind;\n                     if op.node == BinOpKind::Eq;\n                     if match_type(cx,\n-                               walk_ptrs_ty(cx.typeck_results().expr_ty(&filter_args[0])),\n+                               cx.typeck_results().expr_ty(&filter_args[0]).peel_refs(),\n                                &paths::SLICE_ITER);\n                     then {\n                         let needle = match get_path_name(l) {\n@@ -63,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for ByteCount {\n                                 _ => { return; }\n                             }\n                         };\n-                        if ty::Uint(UintTy::U8) != *walk_ptrs_ty(cx.typeck_results().expr_ty(needle)).kind() {\n+                        if ty::Uint(UintTy::U8) != *cx.typeck_results().expr_ty(needle).peel_refs().kind() {\n                             return;\n                         }\n                         let haystack = if let ExprKind::MethodCall(ref path, _, ref args, _) ="}, {"sha": "c0529a34cc411ed5fca26c63b8e4e0eefcca2b5d", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -7,7 +7,7 @@ use rustc_span::source_map::Spanned;\n \n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n-use crate::utils::{match_type, snippet_with_applicability, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::{match_type, snippet_with_applicability, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for calculation of subsecond microseconds or milliseconds\n@@ -43,7 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for DurationSubsec {\n         if_chain! {\n             if let ExprKind::Binary(Spanned { node: BinOpKind::Div, .. }, ref left, ref right) = expr.kind;\n             if let ExprKind::MethodCall(ref method_path, _ , ref args, _) = left.kind;\n-            if match_type(cx, walk_ptrs_ty(cx.typeck_results().expr_ty(&args[0])), &paths::DURATION);\n+            if match_type(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), &paths::DURATION);\n             if let Some((Constant::Int(divisor), _)) = constant(cx, cx.typeck_results(), right);\n             then {\n                 let suggested_fn = match (method_path.ident.as_str().as_ref(), divisor) {"}, {"sha": "35a5d00f4aa5ae6764c4501af5f52ce3afff05d1", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::SpanlessEq;\n use crate::utils::{get_item_name, higher, is_type_diagnostic_item, match_type, paths, snippet, snippet_opt};\n-use crate::utils::{snippet_with_applicability, span_lint_and_then, walk_ptrs_ty};\n+use crate::utils::{snippet_with_applicability, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n@@ -106,7 +106,7 @@ fn check_cond<'a>(cx: &LateContext<'_>, check: &'a Expr<'a>) -> Option<(&'static\n         if let ExprKind::AddrOf(BorrowKind::Ref, _, ref key) = params[1].kind;\n         then {\n             let map = &params[0];\n-            let obj_ty = walk_ptrs_ty(cx.typeck_results().expr_ty(map));\n+            let obj_ty = cx.typeck_results().expr_ty(map).peel_refs();\n \n             return if match_type(cx, obj_ty, &paths::BTREEMAP) {\n                 Some((\"BTreeMap\", map, key))"}, {"sha": "a9e05fddbe7625dc7dc98d74dd39679c034982bf", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,7 +1,5 @@\n use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT};\n-use crate::utils::{\n-    is_expn_of, is_type_diagnostic_item, match_def_path, method_chain_args, span_lint_and_then, walk_ptrs_ty,\n-};\n+use crate::utils::{is_expn_of, is_type_diagnostic_item, match_def_path, method_chain_args, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -96,7 +94,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n \n             // check for `unwrap`\n             if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n-                let reciever_ty = walk_ptrs_ty(self.typeck_results.expr_ty(&arglists[0][0]));\n+                let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n                 if is_type_diagnostic_item(self.lcx, reciever_ty, sym!(option_type))\n                     || is_type_diagnostic_item(self.lcx, reciever_ty, sym!(result_type))\n                 {"}, {"sha": "d6541010bca2326691b8b3e961f14f2bdb77db3f", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::paths;\n use crate::utils::{\n     is_expn_of, is_type_diagnostic_item, last_path_segment, match_def_path, match_function_call, snippet,\n-    span_lint_and_then, walk_ptrs_ty,\n+    span_lint_and_then,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n@@ -90,7 +90,7 @@ fn on_argumentv1_new<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arms: &\n         if let PatKind::Tuple(ref pats, None) = arms[0].pat.kind;\n         if pats.len() == 1;\n         then {\n-            let ty = walk_ptrs_ty(cx.typeck_results().pat_ty(&pats[0]));\n+            let ty = cx.typeck_results().pat_ty(&pats[0]).peel_refs();\n             if *ty.kind() != rustc_middle::ty::Str && !is_type_diagnostic_item(cx, ty, sym!(string_type)) {\n                 return None;\n             }"}, {"sha": "0877b44d90138a3bbfe0bbf0b4d7bbfa82a3dc13", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -5,7 +5,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{\n     get_trait_def_id, implements_trait, is_type_diagnostic_item, paths, return_ty, span_lint_and_help,\n-    trait_ref_of_method, walk_ptrs_ty,\n+    trait_ref_of_method,\n };\n \n declare_clippy_lint! {\n@@ -125,7 +125,7 @@ fn show_lint(cx: &LateContext<'_>, item: &ImplItem<'_>) {\n     // Get the real type of 'self'\n     let fn_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n     let self_type = cx.tcx.fn_sig(fn_def_id).input(0);\n-    let self_type = walk_ptrs_ty(self_type.skip_binder());\n+    let self_type = self_type.skip_binder().peel_refs();\n \n     // Emit either a warning or an error\n     if implements_trait(cx, self_type, display_trait_id, &[]) {"}, {"sha": "c9c4891bb08acf67f4161184424f50b4ac486ea8", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_item_name, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::{get_item_name, snippet_with_applicability, span_lint, span_lint_and_sugg};\n use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -285,7 +285,7 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         })\n     }\n \n-    let ty = &walk_ptrs_ty(cx.typeck_results().expr_ty(expr));\n+    let ty = &cx.typeck_results().expr_ty(expr).peel_refs();\n     match ty.kind() {\n         ty::Dynamic(ref tt, ..) => tt.principal().map_or(false, |principal| {\n             cx.tcx"}, {"sha": "331b6c6c34a9447ab8d08c63f53fe51c239456fb", "filename": "clippy_lints/src/match_on_vec_items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,4 +1,3 @@\n-use crate::utils::walk_ptrs_ty;\n use crate::utils::{is_type_diagnostic_item, is_type_lang_item, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -90,12 +89,12 @@ fn is_vec_indexing<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Opti\n \n fn is_vector(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n-    let ty = walk_ptrs_ty(ty);\n+    let ty = ty.peel_refs();\n     is_type_diagnostic_item(cx, ty, sym!(vec_type))\n }\n \n fn is_full_range(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n-    let ty = walk_ptrs_ty(ty);\n+    let ty = ty.peel_refs();\n     is_type_lang_item(cx, ty, LangItem::RangeFull)\n }"}, {"sha": "11380f83316f8d454cf97406512ea957c18dd026", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -6,7 +6,7 @@ use crate::utils::{\n     expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n     is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, multispan_sugg, remove_blocks, snippet,\n     snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n-    span_lint_and_then, walk_ptrs_ty,\n+    span_lint_and_then,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n@@ -794,7 +794,7 @@ fn check_overlapping_arms<'tcx>(cx: &LateContext<'tcx>, ex: &'tcx Expr<'_>, arms\n }\n \n fn check_wild_err_arm(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n-    let ex_ty = walk_ptrs_ty(cx.typeck_results().expr_ty(ex));\n+    let ex_ty = cx.typeck_results().expr_ty(ex).peel_refs();\n     if is_type_diagnostic_item(cx, ex_ty, sym!(result_type)) {\n         for arm in arms {\n             if let PatKind::TupleStruct(ref path, ref inner, _) = arm.pat.kind {"}, {"sha": "dadd0f8ebb7c85992fde8064b4805f50201f7a77", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -32,8 +32,8 @@ use crate::utils::{\n     is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path, match_qpath,\n     match_trait_method, match_type, match_var, method_calls, method_chain_args, paths, remove_blocks, return_ty,\n     single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n-    span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty,\n-    walk_ptrs_ty_depth, SpanlessEq,\n+    span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty_depth,\n+    SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -1774,7 +1774,7 @@ fn lint_or_fun_call<'tcx>(\n     ) {\n         if let hir::ExprKind::MethodCall(ref path, _, ref args, _) = &arg.kind {\n             if path.ident.as_str() == \"len\" {\n-                let ty = walk_ptrs_ty(cx.typeck_results().expr_ty(&args[0]));\n+                let ty = cx.typeck_results().expr_ty(&args[0]).peel_refs();\n \n                 match ty.kind() {\n                     ty::Slice(_) | ty::Array(_, _) => return,\n@@ -1881,7 +1881,7 @@ fn lint_expect_fun_call(\n                         && (method_name.ident.name == sym!(as_str) || method_name.ident.name == sym!(as_ref))\n                         && {\n                             let arg_type = cx.typeck_results().expr_ty(&call_args[0]);\n-                            let base_type = walk_ptrs_ty(arg_type);\n+                            let base_type = arg_type.peel_refs();\n                             *base_type.kind() == ty::Str || is_type_diagnostic_item(cx, base_type, sym!(string_type))\n                         }\n                     {\n@@ -2142,7 +2142,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Exp\n }\n \n fn lint_clone_on_ref_ptr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n-    let obj_ty = walk_ptrs_ty(cx.typeck_results().expr_ty(arg));\n+    let obj_ty = cx.typeck_results().expr_ty(arg).peel_refs();\n \n     if let ty::Adt(_, subst) = obj_ty.kind() {\n         let caller_type = if is_type_diagnostic_item(cx, obj_ty, sym::Rc) {\n@@ -2173,7 +2173,7 @@ fn lint_string_extend(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::E\n     let arg = &args[1];\n     if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n         let target = &arglists[0][0];\n-        let self_ty = walk_ptrs_ty(cx.typeck_results().expr_ty(target));\n+        let self_ty = cx.typeck_results().expr_ty(target).peel_refs();\n         let ref_str = if *self_ty.kind() == ty::Str {\n             \"\"\n         } else if is_type_diagnostic_item(cx, self_ty, sym!(string_type)) {\n@@ -2201,7 +2201,7 @@ fn lint_string_extend(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::E\n }\n \n fn lint_extend(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n-    let obj_ty = walk_ptrs_ty(cx.typeck_results().expr_ty(&args[0]));\n+    let obj_ty = cx.typeck_results().expr_ty(&args[0]).peel_refs();\n     if is_type_diagnostic_item(cx, obj_ty, sym!(string_type)) {\n         lint_string_extend(cx, expr, args);\n     }\n@@ -2384,7 +2384,7 @@ fn lint_iter_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, iter_\n         }\n     } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(caller_expr), sym!(vec_type))\n         || matches!(\n-            &walk_ptrs_ty(cx.typeck_results().expr_ty(caller_expr)).kind(),\n+            &cx.typeck_results().expr_ty(caller_expr).peel_refs().kind(),\n             ty::Array(_, _)\n         )\n     {\n@@ -2587,7 +2587,7 @@ fn derefs_to_slice<'tcx>(\n \n /// lint use of `unwrap()` for `Option`s and `Result`s\n fn lint_unwrap(cx: &LateContext<'_>, expr: &hir::Expr<'_>, unwrap_args: &[hir::Expr<'_>]) {\n-    let obj_ty = walk_ptrs_ty(cx.typeck_results().expr_ty(&unwrap_args[0]));\n+    let obj_ty = cx.typeck_results().expr_ty(&unwrap_args[0]).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym!(option_type)) {\n         Some((UNWRAP_USED, \"an Option\", \"None\"))\n@@ -2615,7 +2615,7 @@ fn lint_unwrap(cx: &LateContext<'_>, expr: &hir::Expr<'_>, unwrap_args: &[hir::E\n \n /// lint use of `expect()` for `Option`s and `Result`s\n fn lint_expect(cx: &LateContext<'_>, expr: &hir::Expr<'_>, expect_args: &[hir::Expr<'_>]) {\n-    let obj_ty = walk_ptrs_ty(cx.typeck_results().expr_ty(&expect_args[0]));\n+    let obj_ty = cx.typeck_results().expr_ty(&expect_args[0]).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym!(option_type)) {\n         Some((EXPECT_USED, \"an Option\", \"None\"))\n@@ -3134,7 +3134,7 @@ fn lint_chars_cmp(\n         if segment.ident.name == sym!(Some);\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n-            let self_ty = walk_ptrs_ty(cx.typeck_results().expr_ty_adjusted(&args[0][0]));\n+            let self_ty = cx.typeck_results().expr_ty_adjusted(&args[0][0]).peel_refs();\n \n             if *self_ty.kind() != ty::Str {\n                 return false;"}, {"sha": "909e79f661a6d83959d765c57ebbe7a7a7caa514", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -17,7 +17,7 @@ use crate::utils::sugg::Sugg;\n use crate::utils::{\n     get_item_name, get_parent_expr, higher, implements_trait, in_constant, is_integer_const, iter_input_pats,\n     last_path_segment, match_qpath, match_trait_method, paths, snippet, snippet_opt, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, span_lint_hir_and_then, walk_ptrs_ty, SpanlessEq,\n+    span_lint_and_then, span_lint_hir_and_then, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -561,7 +561,7 @@ fn is_signum(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n }\n \n fn is_float(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    let value = &walk_ptrs_ty(cx.typeck_results().expr_ty(expr)).kind();\n+    let value = &cx.typeck_results().expr_ty(expr).peel_refs().kind();\n \n     if let ty::Array(arr_ty, _) = value {\n         return matches!(arr_ty.kind(), ty::Float(_));\n@@ -571,7 +571,7 @@ fn is_float(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n }\n \n fn is_array(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    matches!(&walk_ptrs_ty(cx.typeck_results().expr_ty(expr)).kind(), ty::Array(_, _))\n+    matches!(&cx.typeck_results().expr_ty(expr).peel_refs().kind(), ty::Array(_, _))\n }\n \n fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left: bool) {"}, {"sha": "8a2dbdc50eaea36af1fa272d37b8a098d2b88963", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_def_path, paths, span_lint, trait_ref_of_method, walk_ptrs_ty};\n+use crate::utils::{match_def_path, paths, span_lint, trait_ref_of_method};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{Adt, Array, RawPtr, Ref, Slice, Tuple, Ty, TypeAndMut};\n@@ -98,7 +98,7 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, item_hir_id: hir::HirId, decl: &hir::\n // We want to lint 1. sets or maps with 2. not immutable key types and 3. no unerased\n // generics (because the compiler cannot ensure immutability for unknown types).\n fn check_ty<'tcx>(cx: &LateContext<'tcx>, span: Span, ty: Ty<'tcx>) {\n-    let ty = walk_ptrs_ty(ty);\n+    let ty = ty.peel_refs();\n     if let Adt(def, substs) = ty.kind() {\n         if [&paths::HASHMAP, &paths::BTREEMAP, &paths::HASHSET, &paths::BTREESET]\n             .iter()"}, {"sha": "73a99a3a2f870a3f7351ee1a3da2cc6828ad121b", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_type, paths, span_lint, walk_ptrs_ty};\n+use crate::utils::{match_type, paths, span_lint};\n use rustc_ast::ast::LitKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -30,7 +30,7 @@ declare_lint_pass!(OpenOptions => [NONSENSICAL_OPEN_OPTIONS]);\n impl<'tcx> LateLintPass<'tcx> for OpenOptions {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if let ExprKind::MethodCall(ref path, _, ref arguments, _) = e.kind {\n-            let obj_ty = walk_ptrs_ty(cx.typeck_results().expr_ty(&arguments[0]));\n+            let obj_ty = cx.typeck_results().expr_ty(&arguments[0]).peel_refs();\n             if path.ident.name == sym!(open) && match_type(cx, obj_ty, &paths::OPEN_OPTIONS) {\n                 let mut options = Vec::new();\n                 get_open_options(cx, &arguments[0], &mut options);\n@@ -58,7 +58,7 @@ enum OpenOption {\n \n fn get_open_options(cx: &LateContext<'_>, argument: &Expr<'_>, options: &mut Vec<(OpenOption, Argument)>) {\n     if let ExprKind::MethodCall(ref path, _, ref arguments, _) = argument.kind {\n-        let obj_ty = walk_ptrs_ty(cx.typeck_results().expr_ty(&arguments[0]));\n+        let obj_ty = cx.typeck_results().expr_ty(&arguments[0]).peel_refs();\n \n         // Only proceed if this is a call on some object of type std::fs::OpenOptions\n         if match_type(cx, obj_ty, &paths::OPEN_OPTIONS) && arguments.len() >= 2 {"}, {"sha": "6eeb031d383c856e1e195e865415abe4fd367cb8", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_type, paths, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::{match_type, paths, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -46,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for PathBufPushOverwrite {\n             if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind;\n             if path.ident.name == sym!(push);\n             if args.len() == 2;\n-            if match_type(cx, walk_ptrs_ty(cx.typeck_results().expr_ty(&args[0])), &paths::PATH_BUF);\n+            if match_type(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), &paths::PATH_BUF);\n             if let Some(get_index_arg) = args.get(1);\n             if let ExprKind::Lit(ref lit) = get_index_arg.kind;\n             if let LitKind::Str(ref path_lit, _) = lit.node;"}, {"sha": "ae6013530091e23716caadc26a3bc0df5144be44", "filename": "clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,5 +1,5 @@\n use crate::consts::{constant_context, Constant};\n-use crate::utils::{in_macro, is_type_diagnostic_item, snippet, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::{in_macro, is_type_diagnostic_item, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n@@ -44,7 +44,7 @@ impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n             if let Some(Constant::Int(1)) = constant_context(cx, cx.typeck_results()).expr(&count);\n             if !in_macro(receiver.span);\n             then {\n-                let ty = walk_ptrs_ty(cx.typeck_results().expr_ty(&receiver));\n+                let ty = cx.typeck_results().expr_ty(&receiver).peel_refs();\n                 if ty.is_str() {\n                     span_lint_and_sugg(\n                         cx,"}, {"sha": "15b66684eab702b4f1c74874fa9f52540cbf81bc", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -8,7 +8,7 @@ use rustc_span::source_map::Spanned;\n use if_chain::if_chain;\n \n use crate::utils::SpanlessEq;\n-use crate::utils::{get_parent_expr, is_allowed, is_type_diagnostic_item, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::{get_parent_expr, is_allowed, is_type_diagnostic_item, span_lint, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for string appends of the form `x = x + y` (without\n@@ -134,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for StringAdd {\n }\n \n fn is_string(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n-    is_type_diagnostic_item(cx, walk_ptrs_ty(cx.typeck_results().expr_ty(e)), sym!(string_type))\n+    is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(e).peel_refs(), sym!(string_type))\n }\n \n fn is_add(cx: &LateContext<'_>, src: &Expr<'_>, target: &Expr<'_>) -> bool {"}, {"sha": "54b38d9f4ced2142e3201034c82fce78d54ed9f5", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,7 +1,6 @@\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     differing_macro_contexts, eq_expr_value, is_type_diagnostic_item, snippet_with_applicability, span_lint_and_then,\n-    walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -194,7 +193,7 @@ fn check_for_slice<'a>(cx: &LateContext<'_>, lhs1: &'a Expr<'_>, lhs2: &'a Expr<\n     if let ExprKind::Index(ref lhs1, ref idx1) = lhs1.kind {\n         if let ExprKind::Index(ref lhs2, ref idx2) = lhs2.kind {\n             if eq_expr_value(cx, lhs1, lhs2) {\n-                let ty = walk_ptrs_ty(cx.typeck_results().expr_ty(lhs1));\n+                let ty = cx.typeck_results().expr_ty(lhs1).peel_refs();\n \n                 if matches!(ty.kind(), ty::Slice(_))\n                     || matches!(ty.kind(), ty::Array(_, _))"}, {"sha": "0f8797243eca316ae24c9512246239b8c376fccd", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_type_diagnostic_item, method_chain_args, return_ty, span_lint_and_then, walk_ptrs_ty};\n+use crate::utils::{is_type_diagnostic_item, method_chain_args, return_ty, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -81,7 +81,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindExpectUnwrap<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         // check for `expect`\n         if let Some(arglists) = method_chain_args(expr, &[\"expect\"]) {\n-            let reciever_ty = walk_ptrs_ty(self.typeck_results.expr_ty(&arglists[0][0]));\n+            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n             if is_type_diagnostic_item(self.lcx, reciever_ty, sym!(option_type))\n                 || is_type_diagnostic_item(self.lcx, reciever_ty, sym!(result_type))\n             {\n@@ -91,7 +91,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindExpectUnwrap<'a, 'tcx> {\n \n         // check for `unwrap`\n         if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n-            let reciever_ty = walk_ptrs_ty(self.typeck_results.expr_ty(&arglists[0][0]));\n+            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n             if is_type_diagnostic_item(self.lcx, reciever_ty, sym!(option_type))\n                 || is_type_diagnostic_item(self.lcx, reciever_ty, sym!(result_type))\n             {"}, {"sha": "bfe426a25eb893e9520e28bb7b22d46bda17dd2c", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n     is_expn_of, match_def_path, match_qpath, match_type, method_calls, path_to_res, paths, qpath_res, run_lints,\n-    snippet, span_lint, span_lint_and_help, span_lint_and_sugg, walk_ptrs_ty, SpanlessEq,\n+    snippet, span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, NodeId};\n@@ -427,7 +427,7 @@ impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n             if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind;\n             let fn_name = path.ident;\n             if let Some(sugg) = self.map.get(&*fn_name.as_str());\n-            let ty = walk_ptrs_ty(cx.typeck_results().expr_ty(&args[0]));\n+            let ty = cx.typeck_results().expr_ty(&args[0]).peel_refs();\n             if match_type(cx, ty, &paths::EARLY_CONTEXT)\n                 || match_type(cx, ty, &paths::LATE_CONTEXT);\n             then {\n@@ -460,7 +460,7 @@ impl<'tcx> LateLintPass<'tcx> for OuterExpnDataPass {\n             let args = arg_lists[1];\n             if args.len() == 1;\n             let self_arg = &args[0];\n-            let self_ty = walk_ptrs_ty(cx.typeck_results().expr_ty(self_arg));\n+            let self_ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n             if match_type(cx, self_ty, &paths::SYNTAX_CONTEXT);\n             then {\n                 span_lint_and_sugg("}, {"sha": "ea52741b7cc42ffc5197dfeb75a7fba08039936b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce064722469672a504d8a1720ab4d2f681c21610/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ce064722469672a504d8a1720ab4d2f681c21610", "patch": "@@ -754,14 +754,6 @@ pub fn walk_ptrs_hir_ty<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> &'tcx hir::Ty<'tcx> {\n     }\n }\n \n-/// Returns the base type for references and raw pointers.\n-pub fn walk_ptrs_ty(ty: Ty<'_>) -> Ty<'_> {\n-    match ty.kind() {\n-        ty::Ref(_, ty, _) => walk_ptrs_ty(ty),\n-        _ => ty,\n-    }\n-}\n-\n /// Returns the base type for references and raw pointers, and count reference\n /// depth.\n pub fn walk_ptrs_ty_depth(ty: Ty<'_>) -> (Ty<'_>, usize) {"}]}