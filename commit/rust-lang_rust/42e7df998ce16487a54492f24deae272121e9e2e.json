{"sha": "42e7df998ce16487a54492f24deae272121e9e2e", "node_id": "C_kwDOAAsO6NoAKDQyZTdkZjk5OGNlMTY0ODdhNTQ0OTJmMjRkZWFlMjcyMTIxZTllMmU", "commit": {"author": {"name": "Arpad Borsos", "email": "arpad.borsos@sentry.io", "date": "2022-12-29T16:25:40Z"}, "committer": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2022-12-30T07:52:35Z"}, "message": "Add regression test for #105501\n\nThe test was minified from the published `msf-ice:0.2.1` crate which failed in a crater run.\n\nA faulty compiler was triggering a `higher-ranked lifetime error`:\n\n> could not prove `[async block@...]: Send`", "tree": {"sha": "c7122b0f59f611aa5eb44b04955ae21cfc15c329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7122b0f59f611aa5eb44b04955ae21cfc15c329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42e7df998ce16487a54492f24deae272121e9e2e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZNNjbpmzULCa7LeL/HvKd4JLMpgFAmOumOQACgkQ/HvKd4JL\nMpikSw/+IV2JF2aTWVa0v/clAzKWiy5MZ+tggv2iciVAzvofQC+zkwZvlwi/zmLB\nm6wc/WzuYlyxcxgOgOK1IkPT2TH/eBAgljQQHEd98vCmjLC2BHeipPD5axiwNiky\nmpRNNaPGTYhNRGHrXh22ISrJIp/gjofTJ8kUYdJgpcEXqNh4EFq4WZGOXtYcSiOK\n3CxKjZrWpCaQne2eOJuLdWoZqX4+orFiJjAHBy8IFBxT6rcXGmq8IOw/AgvOJlj8\nmzM1a2RL4I6gBb0IGg0q7rEP6bIxDPMYHj72NU7oJIRo64QVmS/4HNRJXW0Qftsl\ntgrjAit7if0CASHn746nQ3lkk96oOJfr4t7/g93MyW/uV/Hh9MaAoWvG8eF3VSFB\nw0SjsWVHmu3ZYAGcBeC8anHTn+G4HA84g2UJliKLV59SHrk0yZW3kDzCIO9Bp5Iu\nVZFA1cR92A9CW0uhzL+/QDZXkOJn8kd8SdOzVpko5OguA+m51jfX8eqLgznow1NY\njqhb4j6rkZYofWXtpe2Zk3goiVhKGamLRB79mmPIc+hkSfSVOzoDYVTbNOrLerRB\nw0isvoT1p9pchKkkoxafe1OOASpZqIIAd3ufUIYl6XiSx45Aepgd4LqGlsnmL4Td\nENyfzxvPlzyVwTWaW9cR+lmda3LMKYdsGN+qnh1MPuokrOkN1M4=\n=VMRe\n-----END PGP SIGNATURE-----", "payload": "tree c7122b0f59f611aa5eb44b04955ae21cfc15c329\nparent 808be91da07c91e4d6006cca0ad78385785a741e\nauthor Arpad Borsos <arpad.borsos@sentry.io> 1672331140 +0100\ncommitter Arpad Borsos <swatinem@swatinem.de> 1672386755 +0100\n\nAdd regression test for #105501\n\nThe test was minified from the published `msf-ice:0.2.1` crate which failed in a crater run.\n\nA faulty compiler was triggering a `higher-ranked lifetime error`:\n\n> could not prove `[async block@...]: Send`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42e7df998ce16487a54492f24deae272121e9e2e", "html_url": "https://github.com/rust-lang/rust/commit/42e7df998ce16487a54492f24deae272121e9e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42e7df998ce16487a54492f24deae272121e9e2e/comments", "author": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "808be91da07c91e4d6006cca0ad78385785a741e", "url": "https://api.github.com/repos/rust-lang/rust/commits/808be91da07c91e4d6006cca0ad78385785a741e", "html_url": "https://github.com/rust-lang/rust/commit/808be91da07c91e4d6006cca0ad78385785a741e"}], "stats": {"total": 165, "additions": 165, "deletions": 0}, "files": [{"sha": "f30d2a9d81a6affd7e0d637ed4e82c15252be1d2", "filename": "src/test/ui/async-await/issue-105501.rs", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/42e7df998ce16487a54492f24deae272121e9e2e/src%2Ftest%2Fui%2Fasync-await%2Fissue-105501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e7df998ce16487a54492f24deae272121e9e2e/src%2Ftest%2Fui%2Fasync-await%2Fissue-105501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-105501.rs?ref=42e7df998ce16487a54492f24deae272121e9e2e", "patch": "@@ -0,0 +1,165 @@\n+// check-pass\n+// edition:2018\n+\n+// This is a regression test for https://github.com/rust-lang/rust/issues/105501.\n+// It was minified from the published `msf-ice:0.2.1` crate which failed in a crater run.\n+// A faulty compiler was triggering a `higher-ranked lifetime error`:\n+//\n+// > could not prove `[async block@...]: Send`\n+\n+use mini_futures::Stream;\n+\n+fn is_send(_: impl Send) {}\n+\n+pub fn main() {\n+    let fut = async {\n+        let mut stream = mini_futures::iter([()])\n+            .then(|_| async {})\n+            .map(|_| async { None })\n+            .buffered()\n+            .filter_map(std::future::ready);\n+\n+        stream.next().await\n+    };\n+\n+    is_send(async move {\n+        let _: Option<()> = fut.await;\n+    });\n+}\n+\n+// this is a simplified subset of `futures::StreamExt` and related types\n+mod mini_futures {\n+    use std::future::Future;\n+    use std::pin::Pin;\n+    use std::task::{Context, Poll};\n+\n+    pub fn iter<I>(_: I) -> Iter<I::IntoIter>\n+    where\n+        I: IntoIterator,\n+    {\n+        todo!()\n+    }\n+\n+    pub trait Stream {\n+        type Item;\n+\n+        fn then<Fut, F>(self, _: F) -> Then<Self, Fut, F>\n+        where\n+            F: FnMut(Self::Item) -> Fut,\n+            Fut: Future,\n+            Self: Sized,\n+        {\n+            todo!()\n+        }\n+\n+        fn map<T, F>(self, _: F) -> Map<Self, F>\n+        where\n+            F: FnMut(Self::Item) -> T,\n+            Self: Sized,\n+        {\n+            todo!()\n+        }\n+\n+        fn buffered(self) -> Buffered<Self>\n+        where\n+            Self::Item: Future,\n+            Self: Sized,\n+        {\n+            todo!()\n+        }\n+\n+        fn filter_map<Fut, T, F>(self, _: F) -> FilterMap<Self, Fut, F>\n+        where\n+            F: FnMut(Self::Item) -> Fut,\n+            Fut: Future<Output = Option<T>>,\n+            Self: Sized,\n+        {\n+            todo!()\n+        }\n+\n+        fn next(&mut self) -> Next<'_, Self> {\n+            todo!()\n+        }\n+    }\n+\n+    pub struct Iter<I> {\n+        __: I,\n+    }\n+    impl<I> Stream for Iter<I>\n+    where\n+        I: Iterator,\n+    {\n+        type Item = I::Item;\n+    }\n+\n+    pub struct Then<St, Fut, F> {\n+        __: (St, Fut, F),\n+    }\n+    impl<St, Fut, F> Stream for Then<St, Fut, F>\n+    where\n+        St: Stream,\n+        F: FnMut(St::Item) -> Fut,\n+        Fut: Future,\n+    {\n+        type Item = Fut::Output;\n+    }\n+\n+    pub struct Map<St, F> {\n+        __: (St, F),\n+    }\n+    impl<St, F> Stream for Map<St, F>\n+    where\n+        St: Stream,\n+        F: FnMut1<St::Item>,\n+    {\n+        type Item = F::Output;\n+    }\n+\n+    pub trait FnMut1<A> {\n+        type Output;\n+    }\n+    impl<T, A, R> FnMut1<A> for T\n+    where\n+        T: FnMut(A) -> R,\n+    {\n+        type Output = R;\n+    }\n+\n+    pub struct Buffered<St>\n+    where\n+        St: Stream,\n+        St::Item: Future,\n+    {\n+        __: (St, St::Item),\n+    }\n+    impl<St> Stream for Buffered<St>\n+    where\n+        St: Stream,\n+        St::Item: Future,\n+    {\n+        type Item = <St::Item as Future>::Output;\n+    }\n+\n+    pub struct FilterMap<St, Fut, F> {\n+        __: (St, Fut, F),\n+    }\n+    impl<St, Fut, F, T> Stream for FilterMap<St, Fut, F>\n+    where\n+        St: Stream,\n+        F: FnMut1<St::Item, Output = Fut>,\n+        Fut: Future<Output = Option<T>>,\n+    {\n+        type Item = T;\n+    }\n+\n+    pub struct Next<'a, St: ?Sized> {\n+        __: &'a mut St,\n+    }\n+    impl<St: ?Sized + Stream> Future for Next<'_, St> {\n+        type Output = Option<St::Item>;\n+\n+        fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {\n+            todo!()\n+        }\n+    }\n+}"}]}