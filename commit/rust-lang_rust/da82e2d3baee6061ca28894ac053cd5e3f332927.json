{"sha": "da82e2d3baee6061ca28894ac053cd5e3f332927", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhODJlMmQzYmFlZTYwNjFjYTI4ODk0YWMwNTNjZDVlM2YzMzI5Mjc=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2015-10-21T06:24:56Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2015-10-21T06:24:56Z"}, "message": "added code snippet help to match_bool", "tree": {"sha": "b284b084c22f9e541d20bba99e448dda211ad52a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b284b084c22f9e541d20bba99e448dda211ad52a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da82e2d3baee6061ca28894ac053cd5e3f332927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da82e2d3baee6061ca28894ac053cd5e3f332927", "html_url": "https://github.com/rust-lang/rust/commit/da82e2d3baee6061ca28894ac053cd5e3f332927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da82e2d3baee6061ca28894ac053cd5e3f332927/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fdeaa704ce4e5ad7051b25599e78ee39f510319", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdeaa704ce4e5ad7051b25599e78ee39f510319", "html_url": "https://github.com/rust-lang/rust/commit/8fdeaa704ce4e5ad7051b25599e78ee39f510319"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "a7cfefd7af5bad715c84f8b8532dced72866bb88", "filename": "src/matches.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/da82e2d3baee6061ca28894ac053cd5e3f332927/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da82e2d3baee6061ca28894ac053cd5e3f332927/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=da82e2d3baee6061ca28894ac053cd5e3f332927", "patch": "@@ -1,6 +1,7 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n use rustc::middle::ty;\n+use syntax::ast::Lit_::LitBool;\n \n use utils::{snippet, span_lint, span_help_and_lint, in_external_macro, expr_block};\n \n@@ -66,10 +67,58 @@ impl LateLintPass for MatchPass {\n             // check preconditions for MATCH_BOOL\n             // type of expression == bool\n             if cx.tcx.expr_ty(ex).sty == ty::TyBool {\n-\n-                span_lint(cx, MATCH_BOOL, expr.span,\n+                if arms.len() == 2 && arms[0].pats.len() == 1 { // no guards\n+                    let exprs = if let PatLit(ref arm_bool) = arms[0].pats[0].node {\n+                        if let ExprLit(ref lit) = arm_bool.node {\n+                            if let LitBool(val) = lit.node { \n+                                if val {\n+                                    Some((&*arms[0].body, &*arms[1].body))\n+                                } else {\n+                                    Some((&*arms[1].body, &*arms[0].body))\n+                                }\n+                            } else { None }\n+                        } else { None }\n+                    } else { None };\n+                    if let Some((ref true_expr, ref false_expr)) = exprs {\n+                        if !is_unit_expr(true_expr) {\n+                            if !is_unit_expr(false_expr) {\n+                                span_help_and_lint(cx, MATCH_BOOL, expr.span,\n+                                    \"you seem to be trying to match on a boolean expression. \\\n+                                   Consider using an if..else block:\",\n+                                   &format!(\"try\\nif {} {} else {}\",\n+                                        snippet(cx, ex.span, \"b\"),\n+                                        expr_block(cx, true_expr, None, \"..\"),\n+                                        expr_block(cx, false_expr, None, \"..\")));\n+                            } else {\n+                                span_help_and_lint(cx, MATCH_BOOL, expr.span,\n+                                    \"you seem to be trying to match on a boolean expression. \\\n+                                   Consider using an if..else block:\",\n+                                   &format!(\"try\\nif {} {}\",\n+                                        snippet(cx, ex.span, \"b\"),\n+                                        expr_block(cx, true_expr, None, \"..\")));\n+                            }\n+                        } else if !is_unit_expr(false_expr) {\n+                            span_help_and_lint(cx, MATCH_BOOL, expr.span,\n+                                \"you seem to be trying to match on a boolean expression. \\\n+                               Consider using an if..else block:\",\n+                               &format!(\"try\\nif !{} {}\",\n+                                    snippet(cx, ex.span, \"b\"),\n+                                    expr_block(cx, false_expr, None, \"..\")));\n+                        } else {\n+                            span_lint(cx, MATCH_BOOL, expr.span,\n                                    \"you seem to be trying to match on a boolean expression. \\\n                                    Consider using an if..else block\");\n+                        }\n+                    } else {\n+                        span_lint(cx, MATCH_BOOL, expr.span,\n+                            \"you seem to be trying to match on a boolean expression. \\\n+                            Consider using an if..else block\");\n+                    }\n+                } else {\n+                    span_lint(cx, MATCH_BOOL, expr.span,\n+                        \"you seem to be trying to match on a boolean expression. \\\n+                        Consider using an if..else block\");\n+                }\n             }\n         }\n     }"}, {"sha": "f0cc650f7535caabd34d6efaac728e7a9fd19d68", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/da82e2d3baee6061ca28894ac053cd5e3f332927/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da82e2d3baee6061ca28894ac053cd5e3f332927/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=da82e2d3baee6061ca28894ac053cd5e3f332927", "patch": "@@ -48,8 +48,25 @@ fn match_bool() {\n \n     let option = 1;\n     match option == 1 {  //~ ERROR you seem to be trying to match on a boolean expression\n+        true => 1,\n+        false => 0,\n+    };\n+    \n+    match test { //~ ERROR you seem to be trying to match on a boolean expression\n         true => (),\n-        false => (),\n+        false => { println!(\"Noooo!\"); },\n+    };\n+    \n+    match test { //~ ERROR you seem to be trying to match on a boolean expression\n+        //~^ERROR you seem to be trying to use match\n+        //TODO: Remove duplicate warning\n+        false => { println!(\"Noooo!\"); },\n+        _ => (),\n+    };\n+    \n+    match test { //~ ERROR you seem to be trying to match on a boolean expression\n+        false => { println!(\"Noooo!\"); },\n+        true => { println!(\"Yes!\"); },\n     };\n \n     // Not linted"}]}