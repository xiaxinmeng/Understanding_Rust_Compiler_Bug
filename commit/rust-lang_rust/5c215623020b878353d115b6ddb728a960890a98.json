{"sha": "5c215623020b878353d115b6ddb728a960890a98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMjE1NjIzMDIwYjg3ODM1M2QxMTViNmRkYjcyOGE5NjA4OTBhOTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-21T19:50:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-10-01T19:32:59Z"}, "message": "std: Move platform specific env code into sys", "tree": {"sha": "6d360cf840bdb2c312e122a6e3a54eeb74af9feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d360cf840bdb2c312e122a6e3a54eeb74af9feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c215623020b878353d115b6ddb728a960890a98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c215623020b878353d115b6ddb728a960890a98", "html_url": "https://github.com/rust-lang/rust/commit/5c215623020b878353d115b6ddb728a960890a98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c215623020b878353d115b6ddb728a960890a98/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6457bb67678c719d610e8f27f827c2e1ea56111", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6457bb67678c719d610e8f27f827c2e1ea56111", "html_url": "https://github.com/rust-lang/rust/commit/e6457bb67678c719d610e8f27f827c2e1ea56111"}], "stats": {"total": 386, "additions": 203, "deletions": 183}, "files": [{"sha": "bf05f8326b5f9cab360964d68325a9e117c34a1b", "filename": "src/libstd/env.rs", "status": "modified", "additions": 9, "deletions": 183, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/5c215623020b878353d115b6ddb728a960890a98/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c215623020b878353d115b6ddb728a960890a98/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=5c215623020b878353d115b6ddb728a960890a98", "patch": "@@ -649,6 +649,8 @@ impl DoubleEndedIterator for ArgsOs {\n /// Constants associated with the current target\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub mod consts {\n+    use sys::env::os;\n+\n     /// A string describing the architecture of the CPU that is currently\n     /// in use.\n     ///\n@@ -673,7 +675,7 @@ pub mod consts {\n     /// - unix\n     /// - windows\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const FAMILY: &'static str = super::os::FAMILY;\n+    pub const FAMILY: &'static str = os::FAMILY;\n \n     /// A string describing the specific operating system in use.\n     /// Example value is `linux`.\n@@ -692,7 +694,7 @@ pub mod consts {\n     /// - android\n     /// - windows\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const OS: &'static str = super::os::OS;\n+    pub const OS: &'static str = os::OS;\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform. Example value is `lib`.\n@@ -702,7 +704,7 @@ pub mod consts {\n     /// - lib\n     /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const DLL_PREFIX: &'static str = super::os::DLL_PREFIX;\n+    pub const DLL_PREFIX: &'static str = os::DLL_PREFIX;\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform. Example value is `.so`.\n@@ -713,7 +715,7 @@ pub mod consts {\n     /// - .dylib\n     /// - .dll\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const DLL_SUFFIX: &'static str = super::os::DLL_SUFFIX;\n+    pub const DLL_SUFFIX: &'static str = os::DLL_SUFFIX;\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot. Example value is `so`.\n@@ -724,7 +726,7 @@ pub mod consts {\n     /// - dylib\n     /// - dll\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const DLL_EXTENSION: &'static str = super::os::DLL_EXTENSION;\n+    pub const DLL_EXTENSION: &'static str = os::DLL_EXTENSION;\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform. Example value is `.exe`.\n@@ -736,7 +738,7 @@ pub mod consts {\n     /// - .pexe\n     /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const EXE_SUFFIX: &'static str = super::os::EXE_SUFFIX;\n+    pub const EXE_SUFFIX: &'static str = os::EXE_SUFFIX;\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform. Example value is `exe`.\n@@ -746,183 +748,7 @@ pub mod consts {\n     /// - exe\n     /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const EXE_EXTENSION: &'static str = super::os::EXE_EXTENSION;\n-\n-}\n-\n-#[cfg(target_os = \"linux\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"linux\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n-}\n-\n-#[cfg(target_os = \"macos\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"macos\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".dylib\";\n-    pub const DLL_EXTENSION: &'static str = \"dylib\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n-}\n-\n-#[cfg(target_os = \"ios\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"ios\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".dylib\";\n-    pub const DLL_EXTENSION: &'static str = \"dylib\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n-}\n-\n-#[cfg(target_os = \"freebsd\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"freebsd\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n-}\n-\n-#[cfg(target_os = \"dragonfly\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"dragonfly\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n-}\n-\n-#[cfg(target_os = \"bitrig\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"bitrig\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n-}\n-\n-#[cfg(target_os = \"netbsd\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"netbsd\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n-}\n-\n-#[cfg(target_os = \"openbsd\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"openbsd\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n-}\n-\n-#[cfg(target_os = \"android\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"android\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n-}\n-\n-#[cfg(target_os = \"solaris\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"solaris\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n-}\n-\n-#[cfg(target_os = \"windows\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"windows\";\n-    pub const OS: &'static str = \"windows\";\n-    pub const DLL_PREFIX: &'static str = \"\";\n-    pub const DLL_SUFFIX: &'static str = \".dll\";\n-    pub const DLL_EXTENSION: &'static str = \"dll\";\n-    pub const EXE_SUFFIX: &'static str = \".exe\";\n-    pub const EXE_EXTENSION: &'static str = \"exe\";\n-}\n-\n-#[cfg(all(target_os = \"nacl\", not(target_arch = \"le32\")))]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"nacl\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \".nexe\";\n-    pub const EXE_EXTENSION: &'static str = \"nexe\";\n-}\n-#[cfg(all(target_os = \"nacl\", target_arch = \"le32\"))]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"pnacl\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".pso\";\n-    pub const DLL_EXTENSION: &'static str = \"pso\";\n-    pub const EXE_SUFFIX: &'static str = \".pexe\";\n-    pub const EXE_EXTENSION: &'static str = \"pexe\";\n-}\n-\n-#[cfg(all(target_os = \"emscripten\", target_arch = \"asmjs\"))]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"emscripten\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \".js\";\n-    pub const EXE_EXTENSION: &'static str = \"js\";\n-}\n-\n-#[cfg(all(target_os = \"emscripten\", target_arch = \"wasm32\"))]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"emscripten\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \".js\";\n-    pub const EXE_EXTENSION: &'static str = \"js\";\n-}\n-\n-#[cfg(target_os = \"haiku\")]\n-mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"haiku\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \"\";\n-    pub const EXE_EXTENSION: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = os::EXE_EXTENSION;\n }\n \n #[cfg(target_arch = \"x86\")]"}, {"sha": "92c4899b3d52a384dab51174d8bc8bae4d21cd72", "filename": "src/libstd/sys/unix/env.rs", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/5c215623020b878353d115b6ddb728a960890a98/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c215623020b878353d115b6ddb728a960890a98/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fenv.rs?ref=5c215623020b878353d115b6ddb728a960890a98", "patch": "@@ -0,0 +1,173 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[cfg(target_os = \"linux\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"linux\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n+#[cfg(target_os = \"macos\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"macos\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".dylib\";\n+    pub const DLL_EXTENSION: &'static str = \"dylib\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n+#[cfg(target_os = \"ios\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"ios\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".dylib\";\n+    pub const DLL_EXTENSION: &'static str = \"dylib\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n+#[cfg(target_os = \"freebsd\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"freebsd\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n+#[cfg(target_os = \"dragonfly\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"dragonfly\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n+#[cfg(target_os = \"bitrig\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"bitrig\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n+#[cfg(target_os = \"netbsd\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"netbsd\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n+#[cfg(target_os = \"openbsd\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"openbsd\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n+#[cfg(target_os = \"android\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"android\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n+#[cfg(target_os = \"solaris\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"solaris\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n+#[cfg(all(target_os = \"nacl\", not(target_arch = \"le32\")))]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"nacl\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \".nexe\";\n+    pub const EXE_EXTENSION: &'static str = \"nexe\";\n+}\n+#[cfg(all(target_os = \"nacl\", target_arch = \"le32\"))]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"pnacl\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".pso\";\n+    pub const DLL_EXTENSION: &'static str = \"pso\";\n+    pub const EXE_SUFFIX: &'static str = \".pexe\";\n+    pub const EXE_EXTENSION: &'static str = \"pexe\";\n+}\n+\n+#[cfg(target_os = \"haiku\")]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"haiku\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n+#[cfg(all(target_os = \"emscripten\", target_arch = \"asmjs\"))]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"emscripten\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \".js\";\n+    pub const EXE_EXTENSION: &'static str = \"js\";\n+}\n+\n+#[cfg(all(target_os = \"emscripten\", target_arch = \"wasm32\"))]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"emscripten\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \".js\";\n+    pub const EXE_EXTENSION: &'static str = \"js\";\n+}"}, {"sha": "abe7018f25d7e3f33043340ea39cd790f809c763", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c215623020b878353d115b6ddb728a960890a98/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c215623020b878353d115b6ddb728a960890a98/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=5c215623020b878353d115b6ddb728a960890a98", "patch": "@@ -34,6 +34,7 @@ pub mod android;\n #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n pub mod backtrace;\n pub mod condvar;\n+pub mod env;\n pub mod ext;\n pub mod fd;\n pub mod fs;"}, {"sha": "e6d74895774cea73d7e646128c775cf57ec47777", "filename": "src/libstd/sys/windows/env.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5c215623020b878353d115b6ddb728a960890a98/src%2Flibstd%2Fsys%2Fwindows%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c215623020b878353d115b6ddb728a960890a98/src%2Flibstd%2Fsys%2Fwindows%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fenv.rs?ref=5c215623020b878353d115b6ddb728a960890a98", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod os {\n+    pub const FAMILY: &'static str = \"windows\";\n+    pub const OS: &'static str = \"windows\";\n+    pub const DLL_PREFIX: &'static str = \"\";\n+    pub const DLL_SUFFIX: &'static str = \".dll\";\n+    pub const DLL_EXTENSION: &'static str = \"dll\";\n+    pub const EXE_SUFFIX: &'static str = \".exe\";\n+    pub const EXE_EXTENSION: &'static str = \"exe\";\n+}"}, {"sha": "c31726a4a25741e26107f42956d67a870cde2619", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c215623020b878353d115b6ddb728a960890a98/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c215623020b878353d115b6ddb728a960890a98/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=5c215623020b878353d115b6ddb728a960890a98", "patch": "@@ -22,6 +22,7 @@ pub mod backtrace;\n pub mod c;\n pub mod condvar;\n pub mod dynamic_lib;\n+pub mod env;\n pub mod ext;\n pub mod fs;\n pub mod handle;"}]}