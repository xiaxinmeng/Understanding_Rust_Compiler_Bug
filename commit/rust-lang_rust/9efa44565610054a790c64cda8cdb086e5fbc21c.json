{"sha": "9efa44565610054a790c64cda8cdb086e5fbc21c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZmE0NDU2NTYxMDA1NGE3OTBjNjRjZGE4Y2RiMDg2ZTVmYmMyMWM=", "commit": {"author": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-22T23:02:38Z"}, "committer": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-23T14:03:44Z"}, "message": "Add an explicit \"How can I implement `Ord`\" doc section\n\nReferences:\n- http://stackoverflow.com/q/29884402/51683\n- http://stackoverflow.com/q/28387711/51683", "tree": {"sha": "aad9d3a418a6ce3a47ff9f7997f7735d3b2d0379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aad9d3a418a6ce3a47ff9f7997f7735d3b2d0379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9efa44565610054a790c64cda8cdb086e5fbc21c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9efa44565610054a790c64cda8cdb086e5fbc21c", "html_url": "https://github.com/rust-lang/rust/commit/9efa44565610054a790c64cda8cdb086e5fbc21c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9efa44565610054a790c64cda8cdb086e5fbc21c/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61bb9b2d0709647e2f8532f07c6aa0304cfb464e", "url": "https://api.github.com/repos/rust-lang/rust/commits/61bb9b2d0709647e2f8532f07c6aa0304cfb464e", "html_url": "https://github.com/rust-lang/rust/commit/61bb9b2d0709647e2f8532f07c6aa0304cfb464e"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "15e128c57da780bcbb5da98662bcca281423ce0a", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9efa44565610054a790c64cda8cdb086e5fbc21c/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efa44565610054a790c64cda8cdb086e5fbc21c/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=9efa44565610054a790c64cda8cdb086e5fbc21c", "patch": "@@ -245,8 +245,48 @@ impl Ordering {\n /// - total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true; and\n /// - transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n ///\n+/// ## Derivable\n+///\n /// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n /// ordering based on the top-to-bottom declaration order of the struct's members.\n+///\n+/// ## How can I implement `Ord`?\n+///\n+/// `Ord` requires that the type also be `PartialOrd` and `Eq` (which requires `PartialEq`).\n+///\n+/// Then you must define an implementation for `cmp`. You may find it useful to use\n+/// `cmp` on your type's fields.\n+///\n+/// Here's an example where you want to sort people by height only, disregarding `id`\n+/// and `name`:\n+///\n+/// ```\n+/// use std::cmp::Ordering;\n+/// #[derive(Eq)]\n+/// struct Person {\n+///     id: u32,\n+///     name: String,\n+///     height: u32,\n+/// }\n+///\n+/// impl Ord for Person {\n+///     fn cmp(&self, other: &Self) -> Ordering {\n+///         self.height.cmp(&other.height)\n+///     }\n+/// }\n+///\n+/// impl PartialOrd for Person {\n+///     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+///         Some(self.cmp(other))\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Person {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.height == other.height\n+///     }\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an `Ordering` between `self` and `other`."}]}