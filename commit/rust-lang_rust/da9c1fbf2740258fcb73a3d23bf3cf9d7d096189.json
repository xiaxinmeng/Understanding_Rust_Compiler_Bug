{"sha": "da9c1fbf2740258fcb73a3d23bf3cf9d7d096189", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhOWMxZmJmMjc0MDI1OGZjYjczYTNkMjNiZjNjZjlkN2QwOTYxODk=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-14T12:33:39Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-14T12:59:13Z"}, "message": "libstd: Add tests for BigRational", "tree": {"sha": "6b481fdb76444ab84cda3a25c1fa9ae0ddbc83f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b481fdb76444ab84cda3a25c1fa9ae0ddbc83f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da9c1fbf2740258fcb73a3d23bf3cf9d7d096189", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da9c1fbf2740258fcb73a3d23bf3cf9d7d096189", "html_url": "https://github.com/rust-lang/rust/commit/da9c1fbf2740258fcb73a3d23bf3cf9d7d096189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da9c1fbf2740258fcb73a3d23bf3cf9d7d096189/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76ecce0e0c1e307d0c387b3cc219d8410fe7a6f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/76ecce0e0c1e307d0c387b3cc219d8410fe7a6f6", "html_url": "https://github.com/rust-lang/rust/commit/76ecce0e0c1e307d0c387b3cc219d8410fe7a6f6"}], "stats": {"total": 76, "additions": 56, "deletions": 20}, "files": [{"sha": "0f1b754490db8827274420be22c47e72b4a08014", "filename": "src/libstd/num/rational.rs", "status": "modified", "additions": 56, "deletions": 20, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/da9c1fbf2740258fcb73a3d23bf3cf9d7d096189/src%2Flibstd%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9c1fbf2740258fcb73a3d23bf3cf9d7d096189/src%2Flibstd%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Frational.rs?ref=da9c1fbf2740258fcb73a3d23bf3cf9d7d096189", "patch": "@@ -283,7 +283,7 @@ impl<T: FromStrRadix + Clone + Integer + Ord>\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use core::num::{Zero,One,FromStrRadix};\n+    use core::num::{Zero,One,FromStrRadix,IntConvertible};\n     use core::from_str::FromStr;\n \n     pub static _0 : Rational = Ratio { numer: 0, denom: 1};\n@@ -293,6 +293,12 @@ mod test {\n     pub static _3_2: Rational = Ratio { numer: 3, denom: 2};\n     pub static _neg1_2: Rational =  Ratio { numer: -1, denom: 2};\n \n+    pub fn to_big(n: Rational) -> BigRational {\n+        Ratio::new(\n+            IntConvertible::from_int(n.numer),\n+            IntConvertible::from_int(n.denom)\n+        )\n+    }\n \n     #[test]\n     fn test_test_constants() {\n@@ -340,45 +346,75 @@ mod test {\n \n         #[test]\n         fn test_add() {\n-            assert_eq!(_1 + _1_2, _3_2);\n-            assert_eq!(_1 + _1, _2);\n-            assert_eq!(_1_2 + _3_2, _2);\n-            assert_eq!(_1_2 + _neg1_2, _0);\n+            fn test(a: Rational, b: Rational, c: Rational) {\n+                assert_eq!(a + b, c);\n+                assert_eq!(to_big(a) + to_big(b), to_big(c));\n+            }\n+\n+            test(_1, _1_2, _3_2);\n+            test(_1, _1, _2);\n+            test(_1_2, _3_2, _2);\n+            test(_1_2, _neg1_2, _0);\n         }\n \n         #[test]\n         fn test_sub() {\n-            assert_eq!(_1 - _1_2, _1_2);\n-            assert_eq!(_3_2 - _1_2, _1);\n-            assert_eq!(_1 - _neg1_2, _3_2);\n+            fn test(a: Rational, b: Rational, c: Rational) {\n+                assert_eq!(a - b, c);\n+                assert_eq!(to_big(a) - to_big(b), to_big(c))\n+            }\n+\n+            test(_1, _1_2, _1_2);\n+            test(_3_2, _1_2, _1);\n+            test(_1, _neg1_2, _3_2);\n         }\n \n         #[test]\n         fn test_mul() {\n-            assert_eq!(_1 * _1_2, _1_2);\n-            assert_eq!(_1_2 * _3_2, Ratio::new(3,4));\n-            assert_eq!(_1_2 * _neg1_2, Ratio::new(-1, 4));\n+            fn test(a: Rational, b: Rational, c: Rational) {\n+                assert_eq!(a * b, c);\n+                assert_eq!(to_big(a) * to_big(b), to_big(c))\n+            }\n+\n+            test(_1, _1_2, _1_2);\n+            test(_1_2, _3_2, Ratio::new(3,4));\n+            test(_1_2, _neg1_2, Ratio::new(-1, 4));\n         }\n \n         #[test]\n         fn test_div() {\n-            assert_eq!(_1 / _1_2, _2);\n-            assert_eq!(_3_2 / _1_2, _1 + _2);\n-            assert_eq!(_1 / _neg1_2, _neg1_2 + _neg1_2 + _neg1_2 + _neg1_2);\n+            fn test(a: Rational, b: Rational, c: Rational) {\n+                assert_eq!(a / b, c);\n+                assert_eq!(to_big(a) / to_big(b), to_big(c))\n+            }\n+\n+            test(_1, _1_2, _2);\n+            test(_3_2, _1_2, _1 + _2);\n+            test(_1, _neg1_2, _neg1_2 + _neg1_2 + _neg1_2 + _neg1_2);\n         }\n \n         #[test]\n         fn test_rem() {\n-            assert_eq!(_3_2 % _1, _1_2);\n-            assert_eq!(_2 % _neg1_2, _0);\n-            assert_eq!(_1_2 % _2,  _1_2);\n+            fn test(a: Rational, b: Rational, c: Rational) {\n+                assert_eq!(a % b, c);\n+                assert_eq!(to_big(a) % to_big(b), to_big(c))\n+            }\n+\n+            test(_3_2, _1, _1_2);\n+            test(_2, _neg1_2, _0);\n+            test(_1_2, _2,  _1_2);\n         }\n \n         #[test]\n         fn test_neg() {\n-            assert_eq!(-_0, _0);\n-            assert_eq!(-_1_2, _neg1_2);\n-            assert_eq!(-(-_1), _1);\n+            fn test(a: Rational, b: Rational) {\n+                assert_eq!(-a, b);\n+                assert_eq!(-to_big(a), to_big(b))\n+            }\n+\n+            test(_0, _0);\n+            test(_1_2, _neg1_2);\n+            test(-_1, _1);\n         }\n         #[test]\n         fn test_zero() {"}]}