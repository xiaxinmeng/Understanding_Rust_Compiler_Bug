{"sha": "ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDU0NzQ2YjMxY2ZkZDFjOWYwOGIzZWExMWZmZjRlZjE5YjU4ZTc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-12T10:25:29Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-18T13:37:18Z"}, "message": "Update the previously checkpointed (but unused by bors) tests to reflect current reality.", "tree": {"sha": "3c740ff9f29cb763ac34a34b393aaa63d2a30c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c740ff9f29cb763ac34a34b393aaa63d2a30c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "html_url": "https://github.com/rust-lang/rust/commit/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02a7809f1c10ceab7ffe4652f1211cdc3c6fd4c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/02a7809f1c10ceab7ffe4652f1211cdc3c6fd4c1", "html_url": "https://github.com/rust-lang/rust/commit/02a7809f1c10ceab7ffe4652f1211cdc3c6fd4c1"}], "stats": {"total": 224, "additions": 174, "deletions": 50}, "files": [{"sha": "d949ebae32557571df8bf3284c2c58baafc9782f", "filename": "src/test/ui/borrowck/issue-45983.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -16,7 +16,7 @@ error[E0594]: cannot assign to immutable item `x`\n LL |     give_any(|y| x = Some(y));\n    |                  ^^^^^^^^^^^ cannot mutate\n    |\n-   = note: Value not mutable causing this error: `x`\n+   = note: the value which is causing this path not to be mutable is...: `x`\n \n error[E0596]: cannot borrow immutable item `x` as mutable\n   --> $DIR/issue-45983.rs:17:14"}, {"sha": "81f858f6bfcb007096c57418768bc0445c02971f", "filename": "src/test/ui/did_you_mean/issue-34126.nll.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -1,3 +1,9 @@\n+error[E0596]: cannot borrow immutable item `self` as mutable\n+  --> $DIR/issue-34126.rs:16:18\n+   |\n+LL |         self.run(&mut self); //~ ERROR cannot borrow\n+   |                  ^^^^^^^^^ cannot borrow as mutable\n+\n error[E0502]: cannot borrow `self` as mutable because it is also borrowed as immutable\n   --> $DIR/issue-34126.rs:16:18\n    |\n@@ -8,6 +14,7 @@ LL |         self.run(&mut self); //~ ERROR cannot borrow\n    |         immutable borrow occurs here\n    |         borrow later used here\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0502`.\n+Some errors occurred: E0502, E0596.\n+For more information about an error, try `rustc --explain E0502`."}, {"sha": "40b640b63cf32deee09ec1d4e3e8ac8b6f899fd9", "filename": "src/test/ui/did_you_mean/issue-35937.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable item `f.v` as mutable\n LL |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n    |     ^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `f`\n+   = note: the value which is causing this path not to be mutable is...: `f`\n \n error[E0384]: cannot assign twice to immutable variable `s.x`\n   --> $DIR/issue-35937.rs:26:5"}, {"sha": "8e4426779517c74782bc6e05eb38901e3138f18b", "filename": "src/test/ui/did_you_mean/issue-38147-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable item `*self.s` as mutable\n LL |         self.s.push('x'); //~ ERROR cannot borrow data mutably\n    |         ^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*self`\n+   = note: the value which is causing this path not to be mutable is...: `*self`\n \n error: aborting due to previous error\n "}, {"sha": "6808222cc3241356a46583ebf4b159b772cd84d7", "filename": "src/test/ui/did_you_mean/issue-38147-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable item `*f.s` as mutable\n LL |     f.s.push('x'); //~ ERROR cannot borrow data mutably\n    |     ^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*f`\n+   = note: the value which is causing this path not to be mutable is...: `*f`\n \n error: aborting due to previous error\n "}, {"sha": "f5f5b675e7727b53d90096a75084975ed066da0b", "filename": "src/test/ui/did_you_mean/issue-39544.nll.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -4,87 +4,87 @@ error[E0596]: cannot borrow immutable item `z.x` as mutable\n LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |             ^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `z`\n+   = note: the value which is causing this path not to be mutable is...: `z`\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:26:17\n    |\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*self`\n+   = note: the value which is causing this path not to be mutable is...: `*self`\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:30:17\n    |\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*self`\n+   = note: the value which is causing this path not to be mutable is...: `*self`\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:31:17\n    |\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*other`\n+   = note: the value which is causing this path not to be mutable is...: `*other`\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:35:17\n    |\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*self`\n+   = note: the value which is causing this path not to be mutable is...: `*self`\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:36:17\n    |\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*other`\n+   = note: the value which is causing this path not to be mutable is...: `*other`\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:40:17\n    |\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*self`\n+   = note: the value which is causing this path not to be mutable is...: `*self`\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:41:17\n    |\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*other`\n+   = note: the value which is causing this path not to be mutable is...: `*other`\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:45:17\n    |\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*other`\n+   = note: the value which is causing this path not to be mutable is...: `*other`\n \n error[E0596]: cannot borrow immutable item `z.x` as mutable\n   --> $DIR/issue-39544.rs:51:13\n    |\n LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |             ^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `z`\n+   = note: the value which is causing this path not to be mutable is...: `z`\n \n error[E0596]: cannot borrow immutable item `w.x` as mutable\n   --> $DIR/issue-39544.rs:52:13\n    |\n LL |     let _ = &mut w.x; //~ ERROR cannot borrow\n    |             ^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*w`\n+   = note: the value which is causing this path not to be mutable is...: `*w`\n \n error[E0594]: cannot assign to immutable item `*x.0`\n   --> $DIR/issue-39544.rs:58:5"}, {"sha": "0525e16239d2cb606f8fa29442cb7dc30895bcd1", "filename": "src/test/ui/error-codes/E0389.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -1,10 +1,10 @@\n-error[E0594]: cannot assign to immutable item `fancy_ref.num`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/E0389.rs:18:5\n    |\n+LL |     let fancy_ref = &(&mut fancy);\n+   |                     ------------- help: consider changing this to be a mutable reference: `&mut (&mut fancy)`\n LL |     fancy_ref.num = 6; //~ ERROR E0389\n-   |     ^^^^^^^^^^^^^^^^^ cannot mutate\n-   |\n-   = note: Value not mutable causing this error: `*fancy_ref`\n+   |     ^^^^^^^^^^^^^^^^^ `fancy_ref` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to previous error\n "}, {"sha": "51f8067b8ce5b8428fe7ce654113a275c24585c0", "filename": "src/test/ui/hygiene/fields-move.nll.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -0,0 +1,46 @@\n+error[E0382]: use of moved value: `foo.x`\n+  --> $DIR/fields-move.rs:38:42\n+   |\n+LL |    $foo.x\n+   |    ------ value moved here\n+...\n+LL |     assert_two_copies(copy_modern!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                                          ^^^^^ value used here after move\n+   |\n+   = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `foo.x`\n+  --> $DIR/fields-move.rs:28:9\n+   |\n+LL |    $foo.x\n+   |    ------ value moved here\n+...\n+LL |         $foo.x //~ ERROR use of moved value: `foo.x`\n+   |         ^^^^^^ value used here after move\n+...\n+LL |     assert_two_copies(copy_modern!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                                          ----- value moved here\n+LL |     assert_two_copies(copy_legacy!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                       ----------------- in this macro invocation\n+   |\n+   = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `foo.x`\n+  --> $DIR/fields-move.rs:39:42\n+   |\n+LL |    $foo.x\n+   |    ------ value moved here\n+...\n+LL |         $foo.x //~ ERROR use of moved value: `foo.x`\n+   |         ------ value moved here\n+...\n+LL |     assert_two_copies(copy_modern!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                                          ----- value moved here\n+LL |     assert_two_copies(copy_legacy!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                                          ^^^^^ value used here after move\n+   |\n+   = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "3a0a6f66d61c385f92b16ab6a46ee16a0da65f2a", "filename": "src/test/ui/hygiene/fields-numeric-borrowck.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -0,0 +1,13 @@\n+error: compilation successful\n+  --> $DIR/fields-numeric-borrowck.rs:13:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let mut s = S(0);\n+LL | |     let borrow1 = &mut s.0;\n+LL | |     let S { 0: ref mut borrow2 } = s;\n+LL | |     //~^ ERROR cannot borrow `s.0` as mutable more than once at a time\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "975684fbd41bbb7734fe53af27196d59aa979390", "filename": "src/test/ui/hygiene/fields-numeric-borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n struct S(u8);\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut s = S(0);\n     let borrow1 = &mut s.0;\n     let S { 0: ref mut borrow2 } = s;"}, {"sha": "8045993747934a09c8bad37c719df935f877fa3b", "filename": "src/test/ui/issue-36400.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fissue-36400.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fissue-36400.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36400.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable item `*x` as mutable\n LL |     f(&mut *x); //~ ERROR cannot borrow immutable\n    |       ^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `x`\n+   = note: the value which is causing this path not to be mutable is...: `x`\n \n error: aborting due to previous error\n "}, {"sha": "b97bdeea409c6310e431d7139356b1cf6f07d246", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.nll.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -1,20 +1,26 @@\n-error[E0594]: cannot assign to immutable item `*x`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/enum.rs:19:5\n    |\n+LL |     let Wrap(x) = &Wrap(3);\n+   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |     *x += 1; //~ ERROR cannot assign to immutable\n-   |     ^^^^^^^ cannot mutate\n+   |     ^^^^^^^\n \n-error[E0594]: cannot assign to immutable item `*x`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/enum.rs:23:9\n    |\n+LL |     if let Some(x) = &Some(3) {\n+   |                 - help: consider changing this to be a mutable reference: `&mut`\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n-   |         ^^^^^^^ cannot mutate\n+   |         ^^^^^^^\n \n-error[E0594]: cannot assign to immutable item `*x`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/enum.rs:29:9\n    |\n+LL |     while let Some(x) = &Some(3) {\n+   |                    - help: consider changing this to be a mutable reference: `&mut`\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n-   |         ^^^^^^^ cannot mutate\n+   |         ^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3ee4dc07bb8bbb05bb993fcdfe2ec3bcd1341aa4", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.nll.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -1,20 +1,26 @@\n-error[E0594]: cannot assign to immutable item `*n`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/explicit-mut.rs:17:13\n    |\n+LL |         Some(n) => {\n+   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot mutate\n+   |             ^^^^^^^\n \n-error[E0594]: cannot assign to immutable item `*n`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/explicit-mut.rs:25:13\n    |\n+LL |         Some(n) => {\n+   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot mutate\n+   |             ^^^^^^^\n \n-error[E0594]: cannot assign to immutable item `*n`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/explicit-mut.rs:33:13\n    |\n+LL |         Some(n) => {\n+   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot mutate\n+   |             ^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "26e9ea4dc0bc86b286cf22f096acaa46dc4bd4cc", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -24,7 +24,7 @@ error[E0596]: cannot borrow immutable item `*f.f` as mutable\n LL |     f.f.call_mut(())\n    |     ^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*f`\n+   = note: the value which is causing this path not to be mutable is...: `*f`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:66:13"}, {"sha": "9b5e084bd375134372d1863b936b27a527bcc498", "filename": "src/test/ui/span/borrowck-object-mutability.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -10,7 +10,7 @@ error[E0596]: cannot borrow immutable item `*x` as mutable\n LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `x`\n+   = note: the value which is causing this path not to be mutable is...: `x`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5de246cbb73413f78cd530aa30250ae2f567ba84", "filename": "src/test/ui/span/destructor-restrictions.nll.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -0,0 +1,16 @@\n+error[E0597]: `*a` does not live long enough\n+  --> $DIR/destructor-restrictions.rs:18:10\n+   |\n+LL |         *a.borrow() + 1\n+   |          ^---------\n+   |          |\n+   |          borrowed value does not live long enough\n+   |          borrow may end up in a temporary, created here\n+LL |     }; //~^ ERROR `*a` does not live long enough\n+   |     -- temporary later dropped here, potentially using the reference\n+   |     |\n+   |     borrowed value only lives until here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "56f2d14390ecdb5ee60001ff3214dc6c67cb9301", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.nll.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -0,0 +1,30 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:20:5\n+   |\n+LL |     y.borrow().clone()\n+   |     ^---------\n+   |     |\n+   |     borrowed value does not live long enough\n+   |     borrow may end up in a temporary, created here\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | temporary later dropped here, potentially using the reference\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:27:9\n+   |\n+LL |         y.borrow().clone()\n+   |         ^---------\n+   |         |\n+   |         borrowed value does not live long enough\n+   |         borrow may end up in a temporary, created here\n+LL |     };\n+   |     -- temporary later dropped here, potentially using the reference\n+   |     |\n+   |     borrowed value only lives until here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "063ac376b05ecc43f9e08ed87345336f6e4deeee", "filename": "src/test/ui/span/wf-method-late-bound-regions.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -1,14 +1,14 @@\n-error: compilation successful\n-  --> $DIR/wf-method-late-bound-regions.rs:25:1\n+error[E0597]: `pointer` does not live long enough\n+  --> $DIR/wf-method-late-bound-regions.rs:30:18\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let f = Foo(None);\n-LL | |     let f2 = f;\n-LL | |     let dangling = {\n-...  |\n-LL | |     println!(\"{}\", dangling);\n-LL | | }\n-   | |_^\n+LL |         f2.xmute(&pointer)\n+   |                  ^^^^^^^^ borrowed value does not live long enough\n+LL |     };\n+   |     - borrowed value only lives until here\n+LL |     //~^^ ERROR `pointer` does not live long enough\n+LL |     println!(\"{}\", dangling);\n+   |                    -------- borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "d58c29d4a32d3bdfd307e4379b01302d6b1f7d85", "filename": "src/test/ui/span/wf-method-late-bound-regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs?ref=ea454746b31cfdd1c9f08b3ea11fff4ef19b58e7", "patch": "@@ -11,7 +11,7 @@\n // A method's receiver must be well-formed, even if it has late-bound regions.\n // Because of this, a method's substs being well-formed does not imply that\n // the method's implied bounds are met.\n-#![feature(rustc_attrs)]\n+\n struct Foo<'b>(Option<&'b ()>);\n \n trait Bar<'b> {\n@@ -22,7 +22,7 @@ impl<'b> Bar<'b> for Foo<'b> {\n     fn xmute<'a>(&'a self, u: &'b u32) -> &'a u32 { u }\n }\n \n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+fn main() {\n     let f = Foo(None);\n     let f2 = f;\n     let dangling = {"}]}