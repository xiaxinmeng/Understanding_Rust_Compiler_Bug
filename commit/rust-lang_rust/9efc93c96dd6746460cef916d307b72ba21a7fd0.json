{"sha": "9efc93c96dd6746460cef916d307b72ba21a7fd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZmM5M2M5NmRkNjc0NjQ2MGNlZjkxNmQzMDdiNzJiYTIxYTdmZDA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-03-03T16:29:59Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-03-03T23:32:57Z"}, "message": "Tools built by the bootstrap compiler must be built by it\n\nThis avoids building compilers that we don't need -- most tools will work\njust fine with the downloaded compiler.", "tree": {"sha": "8b50dcd2f9f617b7cf42e3f14051895ff9908abd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b50dcd2f9f617b7cf42e3f14051895ff9908abd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9efc93c96dd6746460cef916d307b72ba21a7fd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9efc93c96dd6746460cef916d307b72ba21a7fd0", "html_url": "https://github.com/rust-lang/rust/commit/9efc93c96dd6746460cef916d307b72ba21a7fd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9efc93c96dd6746460cef916d307b72ba21a7fd0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0086b9e8972fef9fd4af24bae20d45021ed06c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0086b9e8972fef9fd4af24bae20d45021ed06c6", "html_url": "https://github.com/rust-lang/rust/commit/c0086b9e8972fef9fd4af24bae20d45021ed06c6"}], "stats": {"total": 120, "additions": 78, "deletions": 42}, "files": [{"sha": "621e3a95473eb18fd6e9562b10b85c77d058dca6", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9efc93c96dd6746460cef916d307b72ba21a7fd0/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efc93c96dd6746460cef916d307b72ba21a7fd0/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=9efc93c96dd6746460cef916d307b72ba21a7fd0", "patch": "@@ -883,7 +883,11 @@ impl Step for ErrorIndex {\n         builder.info(&format!(\"Documenting error index ({})\", target));\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n-        let mut index = builder.tool_cmd(Tool::ErrorIndex);\n+        let compiler = builder.compiler(2, builder.config.build);\n+        let mut index = tool::ErrorIndex::command(\n+            builder,\n+            compiler,\n+        );\n         index.arg(\"html\");\n         index.arg(out.join(\"error-index.html\"));\n "}, {"sha": "5abf9d69978497a4420bb7d93ab12945db370826", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9efc93c96dd6746460cef916d307b72ba21a7fd0/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efc93c96dd6746460cef916d307b72ba21a7fd0/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=9efc93c96dd6746460cef916d307b72ba21a7fd0", "patch": "@@ -414,7 +414,6 @@ impl Step for Miri {\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct CompiletestTest {\n-    stage: u32,\n     host: Interned<String>,\n }\n \n@@ -427,16 +426,14 @@ impl Step for CompiletestTest {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(CompiletestTest {\n-            stage: run.builder.top_stage,\n             host: run.target,\n         });\n     }\n \n     /// Runs `cargo test` for compiletest.\n     fn run(self, builder: &Builder<'_>) {\n-        let stage = self.stage;\n         let host = self.host;\n-        let compiler = builder.compiler(stage, host);\n+        let compiler = builder.compiler(0, host);\n \n         let mut cargo = tool::prepare_tool_cargo(builder,\n                                                  compiler,\n@@ -1426,7 +1423,10 @@ impl Step for ErrorIndex {\n         t!(fs::create_dir_all(&dir));\n         let output = dir.join(\"error-index.md\");\n \n-        let mut tool = builder.tool_cmd(Tool::ErrorIndex);\n+        let mut tool = tool::ErrorIndex::command(\n+            builder,\n+            builder.compiler(compiler.stage, builder.config.build),\n+        );\n         tool.arg(\"markdown\")\n             .arg(&output)\n             .env(\"CFG_BUILD\", &builder.config.build)"}, {"sha": "4f2aa0b795dc7c0bfbb9dbefe776af591ac1301b", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 68, "deletions": 36, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/9efc93c96dd6746460cef916d307b72ba21a7fd0/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efc93c96dd6746460cef916d307b72ba21a7fd0/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=9efc93c96dd6746460cef916d307b72ba21a7fd0", "patch": "@@ -250,9 +250,9 @@ pub fn prepare_tool_cargo(\n     cargo\n }\n \n-macro_rules! tool {\n+macro_rules! bootstrap_tool {\n     ($(\n-        $name:ident, $path:expr, $tool_name:expr, $mode:expr\n+        $name:ident, $path:expr, $tool_name:expr\n         $(,llvm_tools = $llvm:expr)*\n         $(,is_external_tool = $external:expr)*\n         ;\n@@ -266,10 +266,7 @@ macro_rules! tool {\n \n         impl Tool {\n             pub fn get_mode(&self) -> Mode {\n-                let mode = match self {\n-                    $(Tool::$name => $mode,)+\n-                };\n-                mode\n+                Mode::ToolBootstrap\n             }\n \n             /// Whether this tool requires LLVM to run\n@@ -282,27 +279,15 @@ macro_rules! tool {\n \n         impl<'a> Builder<'a> {\n             pub fn tool_exe(&self, tool: Tool) -> PathBuf {\n-                let stage = self.tool_default_stage(tool);\n                 match tool {\n                     $(Tool::$name =>\n                         self.ensure($name {\n-                            compiler: self.compiler(stage, self.config.build),\n+                            compiler: self.compiler(0, self.config.build),\n                             target: self.config.build,\n                         }),\n                     )+\n                 }\n             }\n-\n-            pub fn tool_default_stage(&self, tool: Tool) -> u32 {\n-                // Compile the error-index in the same stage as rustdoc to avoid\n-                // recompiling rustdoc twice if we can. Otherwise compile\n-                // everything else in stage0 as there's no need to rebootstrap\n-                // everything.\n-                match tool {\n-                    Tool::ErrorIndex if self.top_stage >= 2 => self.top_stage,\n-                    _ => 0,\n-                }\n-            }\n         }\n \n         $(\n@@ -321,7 +306,8 @@ macro_rules! tool {\n \n             fn make_run(run: RunConfig<'_>) {\n                 run.builder.ensure($name {\n-                    compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n+                    // snapshot compiler\n+                    compiler: run.builder.compiler(0, run.builder.config.build),\n                     target: run.target,\n                 });\n             }\n@@ -331,7 +317,7 @@ macro_rules! tool {\n                     compiler: self.compiler,\n                     target: self.target,\n                     tool: $tool_name,\n-                    mode: $mode,\n+                    mode: Mode::ToolBootstrap,\n                     path: $path,\n                     is_optional_tool: false,\n                     source_type: if false $(|| $external)* {\n@@ -347,21 +333,67 @@ macro_rules! tool {\n     }\n }\n \n-tool!(\n-    Rustbook, \"src/tools/rustbook\", \"rustbook\", Mode::ToolBootstrap;\n-    ErrorIndex, \"src/tools/error_index_generator\", \"error_index_generator\", Mode::ToolRustc;\n-    UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\", Mode::ToolBootstrap;\n-    Tidy, \"src/tools/tidy\", \"tidy\", Mode::ToolBootstrap;\n-    Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::ToolBootstrap;\n-    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::ToolBootstrap;\n-    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolBootstrap, llvm_tools = true;\n-    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolBootstrap;\n-    RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolBootstrap;\n-    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolBootstrap,\n-        is_external_tool = true;\n-    RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::ToolBootstrap;\n+bootstrap_tool!(\n+    Rustbook, \"src/tools/rustbook\", \"rustbook\";\n+    UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\";\n+    Tidy, \"src/tools/tidy\", \"tidy\";\n+    Linkchecker, \"src/tools/linkchecker\", \"linkchecker\";\n+    CargoTest, \"src/tools/cargotest\", \"cargotest\";\n+    Compiletest, \"src/tools/compiletest\", \"compiletest\", llvm_tools = true;\n+    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\";\n+    RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\";\n+    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", is_external_tool = true;\n+    RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\";\n );\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct ErrorIndex {\n+    pub compiler: Compiler,\n+}\n+\n+impl ErrorIndex {\n+    pub fn command(builder: &Builder<'_>, compiler: Compiler) -> Command {\n+        let mut cmd = Command::new(builder.ensure(ErrorIndex {\n+            compiler\n+        }));\n+        add_lib_path(\n+            vec![PathBuf::from(&builder.sysroot_libdir(compiler, compiler.host))],\n+            &mut cmd,\n+        );\n+        cmd\n+    }\n+}\n+\n+impl Step for ErrorIndex {\n+    type Output = PathBuf;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/error_index_generator\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        // Compile the error-index in the same stage as rustdoc to avoid\n+        // recompiling rustdoc twice if we can.\n+        let stage = if run.builder.top_stage >= 2 { run.builder.top_stage } else { 0 };\n+        run.builder.ensure(ErrorIndex {\n+            compiler: run.builder.compiler(stage, run.builder.config.build),\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+        builder.ensure(ToolBuild {\n+            compiler: self.compiler,\n+            target: self.compiler.host,\n+            tool: \"error_index_generator\",\n+            mode: Mode::ToolRustc,\n+            path: \"src/tools/error_index_generator\",\n+            is_optional_tool: false,\n+            source_type: SourceType::InTree,\n+            extra_features: Vec::new(),\n+        }).expect(\"expected to build -- essential tool\")\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RemoteTestServer {\n     pub compiler: Compiler,\n@@ -625,7 +657,7 @@ impl<'a> Builder<'a> {\n     /// `host`.\n     pub fn tool_cmd(&self, tool: Tool) -> Command {\n         let mut cmd = Command::new(self.tool_exe(tool));\n-        let compiler = self.compiler(self.tool_default_stage(tool), self.config.build);\n+        let compiler = self.compiler(0, self.config.build);\n         self.prepare_tool_cmd(compiler, tool, &mut cmd);\n         cmd\n     }\n@@ -637,7 +669,7 @@ impl<'a> Builder<'a> {\n     fn prepare_tool_cmd(&self, compiler: Compiler, tool: Tool, cmd: &mut Command) {\n         let host = &compiler.host;\n         let mut lib_paths: Vec<PathBuf> = vec![\n-            if compiler.stage == 0 && tool != Tool::ErrorIndex {\n+            if compiler.stage == 0 {\n                 self.build.rustc_snapshot_libdir()\n             } else {\n                 PathBuf::from(&self.sysroot_libdir(compiler, compiler.host))"}]}