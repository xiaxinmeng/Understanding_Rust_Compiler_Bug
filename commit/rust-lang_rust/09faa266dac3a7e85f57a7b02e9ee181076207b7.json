{"sha": "09faa266dac3a7e85f57a7b02e9ee181076207b7", "node_id": "C_kwDOAAsO6NoAKDA5ZmFhMjY2ZGFjM2E3ZTg1ZjU3YTdiMDJlOWVlMTgxMDc2MjA3Yjc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-01-17T15:03:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-17T15:03:03Z"}, "message": "Rollup merge of #101698 - raldone01:feat/const_cmp_typeid, r=scottmcm\n\nConstify `TypeId` ordering impls\n\nTracking issue: #101871\n\nAdding const ordering to `TypeId` allows rtti crates to optimize some casting scenarios (without transmuting to `u64`). This would also prevent these crates from breaking if the underlying type is changed from `u64` to something different.\n\nFeature gate: `#![feature(const_cmp_type_id)]`", "tree": {"sha": "3eb4f20b30e59ad50fec3915bb375455dfeb415f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eb4f20b30e59ad50fec3915bb375455dfeb415f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09faa266dac3a7e85f57a7b02e9ee181076207b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjxrinCRBK7hj4Ov3rIwAAdKUIAAV3gYjxskrb6RCezB5aErWU\nu8W3mYXpq3Vo8hJWu0LjJoIo9oCF4VwBaCBl950iGrnSaOywfh0ONaoIIqT3hmQ/\nWXF3lqbDEJxhH5p1XnWe3rml0ddRTV/d5bYDeqf8aT9x0n+PnywowPN4YHk6A8Cz\nR8TqvLylwMoSAGQO8UANJZP4rEDrJi+8fYYDjTQgEg5SDSRvRX3jy0gwpmUIcGTL\npn1DExI/FV1JJfvwgf5qjTj3hovBtqJYfVBuwD9hU6B/29khsW5oiIlH+8VGezia\nKy0EbcK/9nEYrxLZAu1CffUbh9cXcKWxGGWeEV55J8hwMUoZqy7hPJtgGIAPceI=\n=VR2A\n-----END PGP SIGNATURE-----\n", "payload": "tree 3eb4f20b30e59ad50fec3915bb375455dfeb415f\nparent f34cc658eb477958e2b73e05586e7af66faefad9\nparent 7355ab3fe33518bbcaeb04ef0629674b6902293a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1673967783 +0530\ncommitter GitHub <noreply@github.com> 1673967783 +0530\n\nRollup merge of #101698 - raldone01:feat/const_cmp_typeid, r=scottmcm\n\nConstify `TypeId` ordering impls\n\nTracking issue: #101871\n\nAdding const ordering to `TypeId` allows rtti crates to optimize some casting scenarios (without transmuting to `u64`). This would also prevent these crates from breaking if the underlying type is changed from `u64` to something different.\n\nFeature gate: `#![feature(const_cmp_type_id)]`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09faa266dac3a7e85f57a7b02e9ee181076207b7", "html_url": "https://github.com/rust-lang/rust/commit/09faa266dac3a7e85f57a7b02e9ee181076207b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09faa266dac3a7e85f57a7b02e9ee181076207b7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f34cc658eb477958e2b73e05586e7af66faefad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f34cc658eb477958e2b73e05586e7af66faefad9", "html_url": "https://github.com/rust-lang/rust/commit/f34cc658eb477958e2b73e05586e7af66faefad9"}, {"sha": "7355ab3fe33518bbcaeb04ef0629674b6902293a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7355ab3fe33518bbcaeb04ef0629674b6902293a", "html_url": "https://github.com/rust-lang/rust/commit/7355ab3fe33518bbcaeb04ef0629674b6902293a"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "c0fb0d993c3ed939ad5087a1dbb04f555463115e", "filename": "library/core/src/any.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09faa266dac3a7e85f57a7b02e9ee181076207b7/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09faa266dac3a7e85f57a7b02e9ee181076207b7/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=09faa266dac3a7e85f57a7b02e9ee181076207b7", "patch": "@@ -662,7 +662,8 @@ impl dyn Any + Send + Sync {\n /// While `TypeId` implements `Hash`, `PartialOrd`, and `Ord`, it is worth\n /// noting that the hashes and ordering will vary between Rust releases. Beware\n /// of relying on them inside of your code!\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+#[derive(Clone, Copy, Debug, Hash, Eq)]\n+#[derive_const(PartialEq, PartialOrd, Ord)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct TypeId {\n     t: u64,"}, {"sha": "909997340f36efc0d35704b01eba7cf647b9220a", "filename": "tests/ui/const-generics/issues/issue-90318.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09faa266dac3a7e85f57a7b02e9ee181076207b7/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09faa266dac3a7e85f57a7b02e9ee181076207b7/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs?ref=09faa266dac3a7e85f57a7b02e9ee181076207b7", "patch": "@@ -12,14 +12,14 @@ impl True for If<true> {}\n fn consume<T: 'static>(_val: T)\n where\n     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-    //~^ ERROR: can't compare\n+    //~^ overly complex generic constant\n {\n }\n \n fn test<T: 'static>()\n where\n     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-    //~^ ERROR: can't compare\n+    //~^ overly complex generic constant\n {\n }\n "}, {"sha": "f13fd795d7a1020c98c8788c1a4798cbcebf8152", "filename": "tests/ui/const-generics/issues/issue-90318.stderr", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/09faa266dac3a7e85f57a7b02e9ee181076207b7/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09faa266dac3a7e85f57a7b02e9ee181076207b7/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr?ref=09faa266dac3a7e85f57a7b02e9ee181076207b7", "patch": "@@ -1,29 +1,24 @@\n-error[E0277]: can't compare `TypeId` with `_` in const contexts\n-  --> $DIR/issue-90318.rs:14:28\n+error: overly complex generic constant\n+  --> $DIR/issue-90318.rs:14:8\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |                            ^^ no implementation for `TypeId == _`\n+   |        ^^-----------------^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          borrowing is not supported in generic constants\n    |\n-   = help: the trait `~const PartialEq<_>` is not implemented for `TypeId`\n-note: the trait `PartialEq<_>` is implemented for `TypeId`, but that implementation is not `const`\n-  --> $DIR/issue-90318.rs:14:28\n-   |\n-LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |                            ^^\n+   = help: consider moving this anonymous constant into a `const` function\n+   = note: this operation may be supported in the future\n \n-error[E0277]: can't compare `TypeId` with `_` in const contexts\n-  --> $DIR/issue-90318.rs:21:28\n+error: overly complex generic constant\n+  --> $DIR/issue-90318.rs:21:8\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |                            ^^ no implementation for `TypeId == _`\n+   |        ^^-----------------^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          borrowing is not supported in generic constants\n    |\n-   = help: the trait `~const PartialEq<_>` is not implemented for `TypeId`\n-note: the trait `PartialEq<_>` is implemented for `TypeId`, but that implementation is not `const`\n-  --> $DIR/issue-90318.rs:21:28\n-   |\n-LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |                            ^^\n+   = help: consider moving this anonymous constant into a `const` function\n+   = note: this operation may be supported in the future\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "f10d1c24f7dedfb1397d1286a277c759619e76cf", "filename": "tests/ui/consts/const_cmp_type_id.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09faa266dac3a7e85f57a7b02e9ee181076207b7/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09faa266dac3a7e85f57a7b02e9ee181076207b7/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.rs?ref=09faa266dac3a7e85f57a7b02e9ee181076207b7", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+#![feature(const_type_id)]\n+#![feature(const_trait_impl)]\n+\n+use std::any::TypeId;\n+\n+const fn main() {\n+    assert!(TypeId::of::<u8>() == TypeId::of::<u8>());\n+    assert!(TypeId::of::<()>() != TypeId::of::<u8>());\n+    const _A: bool = TypeId::of::<u8>() < TypeId::of::<u16>();\n+    // can't assert `_A` because it is not deterministic\n+}"}, {"sha": "addcc1eaab60bb514d472f03d09109ea267aba38", "filename": "tests/ui/consts/issue-73976-monomorphic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09faa266dac3a7e85f57a7b02e9ee181076207b7/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09faa266dac3a7e85f57a7b02e9ee181076207b7/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs?ref=09faa266dac3a7e85f57a7b02e9ee181076207b7", "patch": "@@ -7,6 +7,7 @@\n \n #![feature(const_type_id)]\n #![feature(const_type_name)]\n+#![feature(const_trait_impl)]\n \n use std::any::{self, TypeId};\n \n@@ -17,7 +18,7 @@ impl<T: 'static> GetTypeId<T> {\n }\n \n const fn check_type_id<T: 'static>() -> bool {\n-    matches!(GetTypeId::<T>::VALUE, GetTypeId::<usize>::VALUE)\n+    GetTypeId::<T>::VALUE == GetTypeId::<usize>::VALUE\n }\n \n pub struct GetTypeNameLen<T>(T);"}]}