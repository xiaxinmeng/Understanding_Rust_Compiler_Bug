{"sha": "9da2112238c565a7e36ada0a1f9c899961910131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYTIxMTIyMzhjNTY1YTdlMzZhZGEwYTFmOWM4OTk5NjE5MTAxMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T13:01:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T13:01:47Z"}, "message": "Auto merge of #46320 - arielb1:always-resume, r=nikomatsakis\n\nAlways unwind through a Resume and other fixes\n\nShould fix most of the small MIR borrowck issues.\n\nr? @nikomatsakis", "tree": {"sha": "ad7c5fb08c68177d4539dc57c7e4d5c212c50ba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad7c5fb08c68177d4539dc57c7e4d5c212c50ba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9da2112238c565a7e36ada0a1f9c899961910131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9da2112238c565a7e36ada0a1f9c899961910131", "html_url": "https://github.com/rust-lang/rust/commit/9da2112238c565a7e36ada0a1f9c899961910131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9da2112238c565a7e36ada0a1f9c899961910131/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ebb4dead9cd005867e65ffe449e16e0a338507", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ebb4dead9cd005867e65ffe449e16e0a338507", "html_url": "https://github.com/rust-lang/rust/commit/d0ebb4dead9cd005867e65ffe449e16e0a338507"}, {"sha": "ff0b84df58be1f96843f6698cb7d59b2157de14e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0b84df58be1f96843f6698cb7d59b2157de14e", "html_url": "https://github.com/rust-lang/rust/commit/ff0b84df58be1f96843f6698cb7d59b2157de14e"}], "stats": {"total": 867, "additions": 550, "deletions": 317}, "files": [{"sha": "cd4ed8081c3bda662c6dd59567ab205e0a820fcf", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -733,6 +733,10 @@ impl<'tcx> Terminator<'tcx> {\n     pub fn successors_mut(&mut self) -> Vec<&mut BasicBlock> {\n         self.kind.successors_mut()\n     }\n+\n+    pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {\n+        self.kind.unwind_mut()\n+    }\n }\n \n impl<'tcx> TerminatorKind<'tcx> {\n@@ -811,6 +815,27 @@ impl<'tcx> TerminatorKind<'tcx> {\n             }\n         }\n     }\n+\n+    pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {\n+        match *self {\n+            TerminatorKind::Goto { .. } |\n+            TerminatorKind::Resume |\n+            TerminatorKind::Return |\n+            TerminatorKind::Unreachable |\n+            TerminatorKind::GeneratorDrop |\n+            TerminatorKind::Yield { .. } |\n+            TerminatorKind::SwitchInt { .. } |\n+            TerminatorKind::FalseEdges { .. } => {\n+                None\n+            },\n+            TerminatorKind::Call { cleanup: ref mut unwind, .. } |\n+            TerminatorKind::Assert { cleanup: ref mut unwind, .. } |\n+            TerminatorKind::DropAndReplace { ref mut unwind, .. } |\n+            TerminatorKind::Drop { ref mut unwind, .. } => {\n+                Some(unwind)\n+            }\n+        }\n+    }\n }\n \n impl<'tcx> BasicBlockData<'tcx> {"}, {"sha": "ee48d1d369d53e8aba1edec3dcd8f1d16d7d9dbc", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 72, "deletions": 30, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -384,33 +384,23 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 // StorageDead, but we don't always emit those (notably on unwind paths),\n                 // so this \"extra check\" serves as a kind of backup.\n                 let domain = flow_state.borrows.base_results.operator();\n-                for borrow in domain.borrows() {\n-                    let root_place = self.prefixes(\n-                        &borrow.place,\n-                        PrefixSet::All\n-                    ).last().unwrap();\n-                    match root_place {\n-                        Place::Static(_) => {\n-                            self.access_place(\n-                                ContextKind::StorageDead.new(loc),\n-                                (&root_place, self.mir.source_info(borrow.location).span),\n-                                (Deep, Write(WriteKind::StorageDeadOrDrop)),\n-                                LocalMutationIsAllowed::Yes,\n-                                flow_state\n-                            );\n-                        }\n-                        Place::Local(_) => {\n-                            self.access_place(\n-                                ContextKind::StorageDead.new(loc),\n-                                (&root_place, self.mir.source_info(borrow.location).span),\n-                                (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),\n-                                LocalMutationIsAllowed::Yes,\n-                                flow_state\n-                            );\n-                        }\n-                        Place::Projection(_) => ()\n+                let data = domain.borrows();\n+                flow_state.borrows.with_elems_outgoing(|borrows| for i in borrows {\n+                    let borrow = &data[i];\n+\n+                    if self.place_is_invalidated_at_exit(&borrow.place) {\n+                        debug!(\"borrow conflicts at exit {:?}\", borrow);\n+                        let borrow_span = self.mir.source_info(borrow.location).span;\n+                        // FIXME: should be talking about the region lifetime instead\n+                        // of just a span here.\n+                        let end_span = domain.opt_region_end_span(&borrow.region);\n+\n+                        self.report_borrowed_value_does_not_live_long_enough(\n+                            ContextKind::StorageDead.new(loc),\n+                            (&borrow.place, borrow_span),\n+                            end_span)\n                     }\n-                }\n+                });\n             }\n             TerminatorKind::Goto { target: _ } |\n             TerminatorKind::Unreachable |\n@@ -594,7 +584,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                     context, common_prefix, place_span, bk,\n                                     &borrow, end_issued_loan_span)\n                             }\n-                             WriteKind::StorageDeadOrDrop => {\n+                            WriteKind::StorageDeadOrDrop => {\n                                 let end_span =\n                                     flow_state.borrows.base_results.operator().opt_region_end_span(\n                                         &borrow.region);\n@@ -751,6 +741,50 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Operand::Constant(_) => {}\n         }\n     }\n+\n+    /// Returns whether a borrow of this place is invalidated when the function\n+    /// exits\n+    fn place_is_invalidated_at_exit(&self, place: &Place<'tcx>) -> bool {\n+        debug!(\"place_is_invalidated_at_exit({:?})\", place);\n+        let root_place = self.prefixes(place, PrefixSet::All).last().unwrap();\n+\n+        // FIXME(nll-rfc#40): do more precise destructor tracking here. For now\n+        // we just know that all locals are dropped at function exit (otherwise\n+        // we'll have a memory leak) and assume that all statics have a destructor.\n+        let (might_be_alive, will_be_dropped) = match root_place {\n+            Place::Static(statik) => {\n+                // Thread-locals might be dropped after the function exits, but\n+                // \"true\" statics will never be.\n+                let is_thread_local = self.tcx.get_attrs(statik.def_id).iter().any(|attr| {\n+                    attr.check_name(\"thread_local\")\n+                });\n+\n+                (true, is_thread_local)\n+            }\n+            Place::Local(_) => {\n+                // Locals are always dropped at function exit, and if they\n+                // have a destructor it would've been called already.\n+                (false, true)\n+            }\n+            Place::Projection(..) => bug!(\"root of {:?} is a projection ({:?})?\",\n+                                           place, root_place)\n+        };\n+\n+        if !will_be_dropped {\n+            debug!(\"place_is_invalidated_at_exit({:?}) - won't be dropped\", place);\n+            return false;\n+        }\n+\n+        // FIXME: replace this with a proper borrow_conflicts_with_place when\n+        // that is merged.\n+        let prefix_set = if might_be_alive {\n+            PrefixSet::Supporting\n+        } else {\n+            PrefixSet::Shallow\n+        };\n+\n+        self.prefixes(place, prefix_set).any(|prefix| prefix == root_place)\n+    }\n }\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n@@ -1667,13 +1701,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n     fn report_borrowed_value_does_not_live_long_enough(&mut self,\n                                                        _: Context,\n-                                                       (place, span): (&Place, Span),\n+                                                       (place, span): (&Place<'tcx>, Span),\n                                                        end_span: Option<Span>) {\n-        let proper_span = match *place {\n+        let root_place = self.prefixes(place, PrefixSet::All).last().unwrap();\n+        let proper_span = match *root_place {\n             Place::Local(local) => self.mir.local_decls[local].source_info.span,\n             _ => span\n         };\n-\n         let mut err = self.tcx.path_does_not_live_long_enough(span, \"borrowed value\", Origin::Mir);\n         err.span_label(proper_span, \"temporary value created here\");\n         err.span_label(span, \"temporary value dropped here while still borrowed\");\n@@ -2162,4 +2196,12 @@ impl<BD> FlowInProgress<BD> where BD: BitDenotation {\n         let univ = self.base_results.sets().bits_per_block();\n         self.curr_state.elems(univ)\n     }\n+\n+    fn with_elems_outgoing<F>(&self, f: F) where F: FnOnce(indexed_set::Elems<BD::Idx>) {\n+        let mut curr_state = self.curr_state.clone();\n+        curr_state.union(&self.stmt_gen);\n+        curr_state.subtract(&self.stmt_kill);\n+        let univ = self.base_results.sets().bits_per_block();\n+        f(curr_state.elems(univ));\n+    }\n }"}, {"sha": "ed339110537f6a017528c3a5ee83f5654354b678", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -255,7 +255,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     this.cfg.terminate(block, source_info, TerminatorKind::Call {\n                         func: fun,\n                         args,\n-                        cleanup,\n+                        cleanup: Some(cleanup),\n                         destination: if diverges {\n                             None\n                         } else {\n@@ -273,7 +273,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Break { .. } |\n             ExprKind::InlineAsm { .. } |\n             ExprKind::Return {.. } => {\n-                this.stmt_expr(block, expr)\n+                unpack!(block = this.stmt_expr(block, expr));\n+                this.cfg.push_assign_unit(block, source_info, destination);\n+                block.unit()\n             }\n \n             // these are the cases that are more naturally handled by some other mode"}, {"sha": "b2357b771572fa6a1896b97612fa0e8fe0f22d6f", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         }),\n                         args: vec![val, expect],\n                         destination: Some((eq_result.clone(), eq_block)),\n-                        cleanup,\n+                        cleanup: Some(cleanup),\n                     });\n \n                     // check the result"}, {"sha": "630d0bf179294d2e1db7e09e332086cecaf43e58", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 38, "deletions": 27, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -383,7 +383,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         assert_eq!(scope.region_scope, region_scope.0);\n \n         self.cfg.push_end_region(self.hir.tcx(), block, region_scope.1, scope.region_scope);\n+        let resume_block = self.resume_block();\n         unpack!(block = build_scope_drops(&mut self.cfg,\n+                                          resume_block,\n                                           &scope,\n                                           &self.scopes,\n                                           block,\n@@ -422,6 +424,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n \n         {\n+        let resume_block = self.resume_block();\n         let mut rest = &mut self.scopes[(len - scope_count)..];\n         while let Some((scope, rest_)) = {rest}.split_last_mut() {\n             rest = rest_;\n@@ -441,6 +444,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.cfg.push_end_region(self.hir.tcx(), block, region_scope.1, scope.region_scope);\n \n             unpack!(block = build_scope_drops(&mut self.cfg,\n+                                              resume_block,\n                                               scope,\n                                               rest,\n                                               block,\n@@ -468,6 +472,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let src_info = self.scopes[0].source_info(self.fn_span);\n         let mut block = self.cfg.start_new_block();\n         let result = block;\n+        let resume_block = self.resume_block();\n         let mut rest = &mut self.scopes[..];\n \n         while let Some((scope, rest_)) = {rest}.split_last_mut() {\n@@ -491,6 +496,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.cfg.push_end_region(self.hir.tcx(), block, src_info, scope.region_scope);\n \n             unpack!(block = build_scope_drops(&mut self.cfg,\n+                                              resume_block,\n                                               scope,\n                                               rest,\n                                               block,\n@@ -701,18 +707,31 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// This path terminates in Resume. Returns the start of the path.\n     /// See module comment for more details. None indicates there\u2019s no\n     /// cleanup to do at this point.\n-    pub fn diverge_cleanup(&mut self) -> Option<BasicBlock> {\n+    pub fn diverge_cleanup(&mut self) -> BasicBlock {\n         self.diverge_cleanup_gen(false)\n     }\n \n-    fn diverge_cleanup_gen(&mut self, generator_drop: bool) -> Option<BasicBlock> {\n-        if !self.scopes.iter().any(|scope| scope.needs_cleanup) {\n-            return None;\n+    fn resume_block(&mut self) -> BasicBlock {\n+        if let Some(target) = self.cached_resume_block {\n+            target\n+        } else {\n+            let resumeblk = self.cfg.start_new_cleanup_block();\n+            self.cfg.terminate(resumeblk,\n+                               SourceInfo {\n+                                   scope: ARGUMENT_VISIBILITY_SCOPE,\n+                                   span: self.fn_span\n+                               },\n+                               TerminatorKind::Resume);\n+            self.cached_resume_block = Some(resumeblk);\n+            resumeblk\n         }\n-        assert!(!self.scopes.is_empty()); // or `any` above would be false\n+    }\n+\n+    fn diverge_cleanup_gen(&mut self, generator_drop: bool) -> BasicBlock {\n+        // To start, create the resume terminator.\n+        let mut target = self.resume_block();\n \n-        let Builder { ref mut cfg, ref mut scopes,\n-                      ref mut cached_resume_block, .. } = *self;\n+        let Builder { ref mut cfg, ref mut scopes, .. } = *self;\n \n         // Build up the drops in **reverse** order. The end result will\n         // look like:\n@@ -725,23 +744,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // store caches. If everything is cached, we'll just walk right\n         // to left reading the cached results but never created anything.\n \n-        // To start, create the resume terminator.\n-        let mut target = if let Some(target) = *cached_resume_block {\n-            target\n-        } else {\n-            let resumeblk = cfg.start_new_cleanup_block();\n-            cfg.terminate(resumeblk,\n-                          scopes[0].source_info(self.fn_span),\n-                          TerminatorKind::Resume);\n-            *cached_resume_block = Some(resumeblk);\n-            resumeblk\n-        };\n-\n-        for scope in scopes.iter_mut() {\n-            target = build_diverge_scope(self.hir.tcx(), cfg, scope.region_scope_span,\n-                                         scope, target, generator_drop);\n+        if scopes.iter().any(|scope| scope.needs_cleanup) {\n+            for scope in scopes.iter_mut() {\n+                target = build_diverge_scope(self.hir.tcx(), cfg, scope.region_scope_span,\n+                                             scope, target, generator_drop);\n+            }\n         }\n-        Some(target)\n+\n+        target\n     }\n \n     /// Utility function for *non*-scope code to build their own drops\n@@ -760,7 +770,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                            TerminatorKind::Drop {\n                                location,\n                                target: next_target,\n-                               unwind: diverge_target,\n+                               unwind: Some(diverge_target),\n                            });\n         next_target.unit()\n     }\n@@ -779,7 +789,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                location,\n                                value,\n                                target: next_target,\n-                               unwind: diverge_target,\n+                               unwind: Some(diverge_target),\n                            });\n         next_target.unit()\n     }\n@@ -804,7 +814,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                expected,\n                                msg,\n                                target: success_block,\n-                               cleanup,\n+                               cleanup: Some(cleanup),\n                            });\n \n         success_block\n@@ -813,6 +823,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n /// Builds drops for pop_scope and exit_scope.\n fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n+                           resume_block: BasicBlock,\n                            scope: &Scope<'tcx>,\n                            earlier_scopes: &[Scope<'tcx>],\n                            mut block: BasicBlock,\n@@ -868,7 +879,7 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n                 cfg.terminate(block, source_info, TerminatorKind::Drop {\n                     location: drop_data.location.clone(),\n                     target: next,\n-                    unwind: on_diverge\n+                    unwind: Some(on_diverge.unwrap_or(resume_block))\n                 });\n                 block = next;\n             }"}, {"sha": "19ab45dda95453a3000ffde578f369f647a05e77", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -132,6 +132,10 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n         &self.borrows[idx].location\n     }\n \n+    pub fn nonlexical_regioncx(&self) -> Option<&'a RegionInferenceContext<'tcx>> {\n+        self.nonlexical_regioncx\n+    }\n+\n     /// Returns the span for the \"end point\" given region. This will\n     /// return `None` if NLL is enabled, since that concept has no\n     /// meaning there.  Otherwise, return region span if it exists and\n@@ -208,6 +212,12 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n             mir::StatementKind::Assign(_, ref rhs) => {\n                 if let mir::Rvalue::Ref(region, _, ref place) = *rhs {\n                     if is_unsafe_place(self.tcx, self.mir, place) { return; }\n+                    if let RegionKind::ReEmpty = region {\n+                        // If the borrowed value is dead, the region for it\n+                        // can be empty. Don't track the borrow in that case.\n+                        return\n+                    }\n+\n                     let index = self.location_map.get(&location).unwrap_or_else(|| {\n                         panic!(\"could not find BorrowIndex for location {:?}\", location);\n                     });"}, {"sha": "830838c60375898d32ee913936a92465c276db74", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -36,6 +36,7 @@ pub mod elaborate_drops;\n pub mod add_call_guards;\n pub mod promote_consts;\n pub mod qualify_consts;\n+pub mod remove_noop_landing_pads;\n pub mod dump_mir;\n pub mod deaggregator;\n pub mod instcombine;\n@@ -226,8 +227,11 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n \n     let mut mir = tcx.mir_validated(def_id).steal();\n     run_passes![tcx, mir, def_id, 2;\n+        // Remove all things not needed by analysis\n         no_landing_pads::NoLandingPads,\n         simplify_branches::SimplifyBranches::new(\"initial\"),\n+        remove_noop_landing_pads::RemoveNoopLandingPads,\n+        simplify::SimplifyCfg::new(\"early-opt\"),\n \n         // These next passes must be executed together\n         add_call_guards::CriticalCallEdges,\n@@ -255,6 +259,8 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         instcombine::InstCombine,\n         deaggregator::Deaggregator,\n         copy_prop::CopyPropagation,\n+        remove_noop_landing_pads::RemoveNoopLandingPads,\n+        simplify::SimplifyCfg::new(\"final\"),\n         simplify::SimplifyLocals,\n \n         generator::StateTransform,"}, {"sha": "c8f171d4160c61cd20280f7811584d8cd23a7ca0", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -38,23 +38,8 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n                         bb: BasicBlock,\n                         terminator: &mut Terminator<'tcx>,\n                         location: Location) {\n-        match terminator.kind {\n-            TerminatorKind::Goto { .. } |\n-            TerminatorKind::Resume |\n-            TerminatorKind::Return |\n-            TerminatorKind::Unreachable |\n-            TerminatorKind::GeneratorDrop |\n-            TerminatorKind::Yield { .. } |\n-            TerminatorKind::SwitchInt { .. } |\n-            TerminatorKind::FalseEdges { .. } => {\n-                /* nothing to do */\n-            },\n-            TerminatorKind::Call { cleanup: ref mut unwind, .. } |\n-            TerminatorKind::Assert { cleanup: ref mut unwind, .. } |\n-            TerminatorKind::DropAndReplace { ref mut unwind, .. } |\n-            TerminatorKind::Drop { ref mut unwind, .. } => {\n-                unwind.take();\n-            },\n+        if let Some(unwind) = terminator.kind.unwind_mut() {\n+            unwind.take();\n         }\n         self.super_terminator(bb, terminator, location);\n     }"}, {"sha": "d29174d57192bf1f50df372e3d7fe70f0eb4ddf7", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -0,0 +1,137 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::ty::TyCtxt;\n+use rustc::mir::*;\n+use rustc_data_structures::bitvec::BitVector;\n+use rustc_data_structures::indexed_vec::Idx;\n+use transform::{MirPass, MirSource};\n+use util::patch::MirPatch;\n+\n+/// A pass that removes no-op landing pads and replaces jumps to them with\n+/// `None`. This is important because otherwise LLVM generates terrible\n+/// code for these.\n+pub struct RemoveNoopLandingPads;\n+\n+impl MirPass for RemoveNoopLandingPads {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _src: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n+        if tcx.sess.no_landing_pads() {\n+            return\n+        }\n+\n+        debug!(\"remove_noop_landing_pads({:?})\", mir);\n+        self.remove_nop_landing_pads(mir);\n+    }\n+}\n+\n+impl RemoveNoopLandingPads {\n+    fn is_nop_landing_pad(&self, bb: BasicBlock, mir: &Mir, nop_landing_pads: &BitVector)\n+                          -> bool\n+    {\n+        for stmt in &mir[bb].statements {\n+            match stmt.kind {\n+                StatementKind::StorageLive(_) |\n+                StatementKind::StorageDead(_) |\n+                StatementKind::EndRegion(_) |\n+                StatementKind::Nop => {\n+                    // These are all nops in a landing pad (there's some\n+                    // borrowck interaction between EndRegion and storage\n+                    // instructions, but this should all run after borrowck).\n+                }\n+\n+                StatementKind::Assign(Place::Local(_), Rvalue::Use(_)) => {\n+                    // Writing to a local (e.g. a drop flag) does not\n+                    // turn a landing pad to a non-nop\n+                }\n+\n+                StatementKind::Assign(_, _) |\n+                StatementKind::SetDiscriminant { .. } |\n+                StatementKind::InlineAsm { .. } |\n+                StatementKind::Validate { .. } => {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        let terminator = mir[bb].terminator();\n+        match terminator.kind {\n+            TerminatorKind::Goto { .. } |\n+            TerminatorKind::Resume |\n+            TerminatorKind::SwitchInt { .. } |\n+            TerminatorKind::FalseEdges { .. } => {\n+                terminator.successors().iter().all(|succ| {\n+                    nop_landing_pads.contains(succ.index())\n+                })\n+            },\n+            TerminatorKind::GeneratorDrop |\n+            TerminatorKind::Yield { .. } |\n+            TerminatorKind::Return |\n+            TerminatorKind::Unreachable |\n+            TerminatorKind::Call { .. } |\n+            TerminatorKind::Assert { .. } |\n+            TerminatorKind::DropAndReplace { .. } |\n+            TerminatorKind::Drop { .. } => {\n+                false\n+            }\n+        }\n+    }\n+\n+    fn remove_nop_landing_pads(&self, mir: &mut Mir) {\n+        // make sure there's a single resume block\n+        let resume_block = {\n+            let patch = MirPatch::new(mir);\n+            let resume_block = patch.resume_block();\n+            patch.apply(mir);\n+            resume_block\n+        };\n+        debug!(\"remove_noop_landing_pads: resume block is {:?}\", resume_block);\n+\n+        let mut jumps_folded = 0;\n+        let mut landing_pads_removed = 0;\n+        let mut nop_landing_pads = BitVector::new(mir.basic_blocks().len());\n+\n+        // This is a post-order traversal, so that if A post-dominates B\n+        // then A will be visited before B.\n+        let postorder: Vec<_> = traversal::postorder(mir).map(|(bb, _)| bb).collect();\n+        for bb in postorder {\n+            debug!(\"  processing {:?}\", bb);\n+            for target in mir[bb].terminator_mut().successors_mut() {\n+                if *target != resume_block && nop_landing_pads.contains(target.index()) {\n+                    debug!(\"    folding noop jump to {:?} to resume block\", target);\n+                    *target = resume_block;\n+                    jumps_folded += 1;\n+                }\n+            }\n+\n+            match mir[bb].terminator_mut().unwind_mut() {\n+                Some(unwind) => {\n+                    if *unwind == Some(resume_block) {\n+                        debug!(\"    removing noop landing pad\");\n+                        jumps_folded -= 1;\n+                        landing_pads_removed += 1;\n+                        *unwind = None;\n+                    }\n+                }\n+                _ => {}\n+            }\n+\n+            let is_nop_landing_pad = self.is_nop_landing_pad(bb, mir, &nop_landing_pads);\n+            if is_nop_landing_pad {\n+                nop_landing_pads.insert(bb.index());\n+            }\n+            debug!(\"    is_nop_landing_pad({:?}) = {}\", bb, is_nop_landing_pad);\n+        }\n+\n+        debug!(\"removed {:?} jumps and {:?} landing pads\", jumps_folded, landing_pads_removed);\n+    }\n+}"}, {"sha": "e7675b4ceaf29fea911aeb57fe07de48dc26ae13", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -124,8 +124,6 @@ impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n                     self.collapse_goto_chain(successor, &mut changed);\n                 }\n \n-                changed |= self.simplify_unwind(&mut terminator);\n-\n                 let mut new_stmts = vec![];\n                 let mut inner_changed = true;\n                 while inner_changed {\n@@ -238,38 +236,6 @@ impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> {\n         true\n     }\n \n-    // turn an unwind branch to a resume block into a None\n-    fn simplify_unwind(&mut self, terminator: &mut Terminator<'tcx>) -> bool {\n-        let unwind = match terminator.kind {\n-            TerminatorKind::Drop { ref mut unwind, .. } |\n-            TerminatorKind::DropAndReplace { ref mut unwind, .. } |\n-            TerminatorKind::Call { cleanup: ref mut unwind, .. } |\n-            TerminatorKind::Assert { cleanup: ref mut unwind, .. } =>\n-                unwind,\n-            _ => return false\n-        };\n-\n-        if let &mut Some(unwind_block) = unwind {\n-            let is_resume_block = match self.basic_blocks[unwind_block] {\n-                BasicBlockData {\n-                    ref statements,\n-                    terminator: Some(Terminator {\n-                        kind: TerminatorKind::Resume, ..\n-                    }), ..\n-                } if statements.is_empty() => true,\n-                _ => false\n-            };\n-            if is_resume_block {\n-                debug!(\"simplifying unwind to {:?} from {:?}\",\n-                       unwind_block, terminator.source_info);\n-                *unwind = None;\n-            }\n-            return is_resume_block;\n-        }\n-\n-        false\n-    }\n-\n     fn strip_nops(&mut self) {\n         for blk in self.basic_blocks.iter_mut() {\n             blk.statements.retain(|stmt| if let StatementKind::Nop = stmt.kind {"}, {"sha": "7009c6f33e61a8f2a8926bfebb069bc6470a9f01", "filename": "src/test/compile-fail/borrowck/borrowck-local-borrow-with-panic-outlives-fn.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n+fn cplusplus_mode_exceptionally_unsafe(x: &mut Option<&'static mut isize>) {\n+    let mut z = (0, 0);\n+    *x = Some(&mut z.1); //[ast]~ ERROR [E0597]\n+                         //[mir]~^ ERROR [E0597]\n+    panic!(\"catch me for a dangling pointer!\")\n+}\n+\n+fn main() {\n+    cplusplus_mode_exceptionally_unsafe(&mut None);\n+}"}, {"sha": "321c05c49035697e1611d9611cba8d3af7ea05b9", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -50,16 +50,16 @@ fn main() {\n //         StorageLive(_5);\n //         StorageLive(_6);\n //         _6 = move _4;\n-//         replace(_5 <- move _6) -> [return: bb1, unwind: bb5];\n+//         replace(_5 <-move _6) -> [return: bb2, unwind: bb5];\n //     }\n //     bb1: {\n-//         drop(_6) -> [return: bb6, unwind: bb4];\n+//         resume;\n //     }\n //     bb2: {\n-//         resume;\n+//         drop(_6) -> [return: bb6, unwind: bb4];\n //     }\n //     bb3: {\n-//         drop(_4) -> bb2;\n+//         drop(_4) -> bb1;\n //     }\n //     bb4: {\n //         drop(_5) -> bb3;\n@@ -74,7 +74,7 @@ fn main() {\n //     }\n //     bb7: {\n //         StorageDead(_5);\n-//         drop(_4) -> bb8;\n+//         drop(_4) -> [return: bb8, unwind: bb1];\n //     }\n //     bb8: {\n //         StorageDead(_4);"}, {"sha": "ed9c303a16fd4781aa074477d2784e0f830f5082", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -44,20 +44,20 @@ impl Drop for S {\n //         StorageLive(_1);\n //         StorageLive(_2);\n //         _2 = Box(S);\n-//         (*_2) = const S::new() -> [return: bb1, unwind: bb3];\n+//         (*_2) = const S::new() -> [return: bb2, unwind: bb3];\n //     }\n //\n //     bb1: {\n-//         _1 = move _2;\n-//         drop(_2) -> bb4;\n+//         resume;\n //     }\n //\n //     bb2: {\n-//         resume;\n+//         _1 = move _2;\n+//         drop(_2) -> bb4;\n //     }\n //\n //     bb3: {\n-//         drop(_2) -> bb2;\n+//         drop(_2) -> bb1;\n //     }\n //\n //     bb4: {\n@@ -72,7 +72,7 @@ impl Drop for S {\n //     }\n //\n //     bb6: {\n-//         drop(_1) -> bb2;\n+//         drop(_1) -> bb1;\n //     }\n //\n //     bb7: {"}, {"sha": "ded818688d72f0aded96c3c38813d15496c0989e", "filename": "src/test/mir-opt/end_region_4.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -51,9 +51,12 @@ fn foo(i: i32) {\n //         _3 = &'26_2rs _2;\n //         StorageLive(_5);\n //         _5 = (*_3);\n-//         _4 = const foo(move _5) -> [return: bb1, unwind: bb3];\n+//         _4 = const foo(move _5) -> [return: bb2, unwind: bb3];\n //     }\n //     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n //         StorageDead(_5);\n //         StorageLive(_6);\n //         _6 = &'26_4rs _2;\n@@ -63,14 +66,11 @@ fn foo(i: i32) {\n //         EndRegion('26_2rs);\n //         StorageDead(_3);\n //         StorageDead(_2);\n-//         drop(_1) -> bb4;\n-//     }\n-//     bb2: {\n-//         resume;\n+//         drop(_1) -> [return: bb4, unwind: bb1];\n //     }\n //     bb3: {\n //         EndRegion('26_2rs);\n-//         drop(_1) -> bb2;\n+//         drop(_1) -> bb1;\n //     }\n //     bb4: {\n //         StorageDead(_1);"}, {"sha": "1da97a997a19c38034e25c2068a9e3be66623bf1", "filename": "src/test/mir-opt/end_region_5.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -43,20 +43,20 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         _4 = &'14s _1;\n //         _3 = [closure@NodeId(18)] { d: move _4 };\n //         StorageDead(_4);\n-//         _2 = const foo(move _3) -> [return: bb1, unwind: bb3];\n+//         _2 = const foo(move _3) -> [return: bb2, unwind: bb3];\n //     }\n //     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n //         EndRegion('14s);\n //         StorageDead(_3);\n //         _0 = ();\n-//         drop(_1) -> bb4;\n-//     }\n-//     bb2: {\n-//         resume;\n+//         drop(_1) -> [return: bb4, unwind: bb1];\n //     }\n //     bb3: {\n //         EndRegion('14s);\n-//         drop(_1) -> bb2;\n+//         drop(_1) -> bb1;\n //     }\n //     bb4: {\n //         StorageDead(_1);"}, {"sha": "dadc755eb8c579a571932815bdeb1511e0d60246", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -43,20 +43,20 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         _4 = &'19s _1;\n //         _3 = [closure@NodeId(22)] { d: move _4 };\n //         StorageDead(_4);\n-//         _2 = const foo(move _3) -> [return: bb1, unwind: bb3];\n+//         _2 = const foo(move _3) -> [return: bb2, unwind: bb3];\n //     }\n //     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n //         EndRegion('19s);\n //         StorageDead(_3);\n //         _0 = ();\n-//         drop(_1) -> bb4;\n-//     }\n-//     bb2: {\n-//         resume;\n+//         drop(_1) -> [return: bb4, unwind: bb1];\n //     }\n //     bb3: {\n //         EndRegion('19s);\n-//         drop(_1) -> bb2;\n+//         drop(_1) -> bb1;\n //     }\n //     bb4: {\n //         StorageDead(_1);"}, {"sha": "1426174b482b64af54495f376ab182502ea48096", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -63,7 +63,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     bb6: {\n //         StorageDead(_3);\n //         _0 = ();\n-//         drop(_1) -> bb7;\n+//         drop(_1) -> [return: bb7, unwind: bb1];\n //     }\n //     bb7: {\n //         StorageDead(_1);\n@@ -88,9 +88,12 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         StorageDead(_3);\n //         EndRegion('15_0rs);\n //         StorageDead(_2);\n-//         drop(_1) -> bb1;\n+//         drop(_1) -> [return: bb2, unwind: bb1];\n //     }\n //     bb1: {\n+//         resume;\n+//     }\n+//     bb2: {\n //         return;\n //     }\n // }"}, {"sha": "405864aba94365fb85c895a2665553d58978c092", "filename": "src/test/mir-opt/end_region_8.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -48,21 +48,21 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //        _5 = _2;\n //        _4 = [closure@NodeId(22)] { r: move _5 };\n //        StorageDead(_5);\n-//        _3 = const foo(move _4) -> [return: bb1, unwind: bb3];\n+//        _3 = const foo(move _4) -> [return: bb2, unwind: bb3];\n //    }\n //    bb1: {\n+//        resume;\n+//    }\n+//    bb2: {\n //        StorageDead(_4);\n //        _0 = ();\n //        EndRegion('21_1rs);\n //        StorageDead(_2);\n-//        drop(_1) -> bb4;\n-//    }\n-//    bb2: {\n-//        resume;\n+//        drop(_1) -> [return: bb4, unwind: bb1];\n //    }\n //    bb3: {\n //        EndRegion('21_1rs);\n-//        drop(_1) -> bb2;\n+//        drop(_1) -> bb1;\n //    }\n //    bb4: {\n //        StorageDead(_1);"}, {"sha": "37a6229febabb33820d83af7ad6781cf647b3fb1", "filename": "src/test/mir-opt/end_region_cyclic.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -62,6 +62,7 @@ fn query() -> bool { true }\n //     let mut _15: std::option::Option<&'35_0rs S<'35_0rs>>;\n //     let mut _16: &'35_0rs S<'35_0rs>;\n //     let mut _17: &'35_0rs S<'35_0rs>;\n+//\n //     bb0: {\n //         goto -> bb1;\n //     }\n@@ -70,9 +71,12 @@ fn query() -> bool { true }\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         _4 = std::option::Option<&'35_0rs S<'35_0rs>>::None;\n-//         _3 = const <std::cell::Cell<T>>::new(move _4) -> bb2;\n+//         _3 = const <std::cell::Cell<T>>::new(move _4) -> [return: bb3, unwind: bb2];\n //     }\n //     bb2: {\n+//         resume;\n+//     }\n+//     bb3: {\n //         StorageDead(_4);\n //         _2 = S<'35_0rs> { r: move _3 };\n //         StorageDead(_3);\n@@ -85,27 +89,27 @@ fn query() -> bool { true }\n //         _8 = &'35_0rs (*_9);\n //         _7 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(move _8,);\n //         StorageDead(_8);\n-//         _5 = const <std::cell::Cell<T>>::set(move _6, move _7) -> bb3;\n+//         _5 = const <std::cell::Cell<T>>::set(move _6, move _7) -> [return: bb4, unwind: bb2];\n //     }\n-//     bb3: {\n+//     bb4: {\n //         EndRegion('16s);\n //         StorageDead(_7);\n //         StorageDead(_6);\n //         StorageDead(_9);\n //         StorageLive(_11);\n-//         _11 = const query() -> bb4;\n-//     }\n-//     bb4: {\n-//         switchInt(move _11) -> [0u8: bb6, otherwise: bb5];\n+//         _11 = const query() -> [return: bb5, unwind: bb2];\n //     }\n //     bb5: {\n+//         switchInt(move _11) -> [0u8: bb7, otherwise: bb6];\n+//     }\n+//     bb6: {\n //         _0 = ();\n //         StorageDead(_11);\n //         EndRegion('35_0rs);\n //         StorageDead(_2);\n //         return;\n //     }\n-//     bb6: {\n+//     bb7: {\n //         _10 = ();\n //         StorageDead(_11);\n //         StorageLive(_14);\n@@ -117,9 +121,9 @@ fn query() -> bool { true }\n //         _16 = &'35_0rs (*_17);\n //         _15 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(move _16,);\n //         StorageDead(_16);\n-//         _13 = const <std::cell::Cell<T>>::set(move _14, move_15) -> bb7;\n+//         _13 = const <std::cell::Cell<T>>::set(move _14, move _15) -> [return: bb8, unwind: bb2];\n //     }\n-//     bb7: {\n+//     bb8: {\n //         EndRegion('33s);\n //         StorageDead(_15);\n //         StorageDead(_14);"}, {"sha": "69c5cdccf49d7627e122d846f6195771b70fcf7f", "filename": "src/test/mir-opt/end_region_destruction_extents_1.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -99,10 +99,14 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n //         _2 = (_3.0: &'12ds S1);\n //         _1 = move _2;\n //         StorageDead(_2);\n-//         drop(_3) -> bb1;\n+//         drop(_3) -> [return: bb2, unwind: bb1];\n //     }\n //\n //     bb1: {\n+//         resume;\n+//     }\n+//\n+//     bb2: {\n //         StorageDead(_3);\n //         StorageDead(_8);\n //         StorageDead(_9);\n@@ -146,10 +150,14 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n //         _2 = (_3.0: &'12ds S1);\n //         _1 = move _2;\n //         StorageDead(_2);\n-//         drop(_3) -> bb1;\n+//         drop(_3) -> [return: bb2, unwind: bb1];\n //     }\n //\n //     bb1: {\n+//         resume;\n+//     }\n+//\n+//     bb2: {\n //         StorageDead(_3);\n //         StorageDead(_8);\n //         StorageDead(_5);"}, {"sha": "1f892b0f9587aeade918d94b9657e49fd7da6f7b", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 116, "deletions": 107, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -49,198 +49,207 @@ fn main() {\n \n // END RUST SOURCE\n //\n-// START rustc.full_tested_match.SimplifyBranches-initial.before.mir\n+// START rustc.full_tested_match.QualifyAndPromoteConstants.after.mir\n //  bb0: {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n //      _5 = discriminant(_2);\n-//      switchInt(move _5) -> [0isize: bb5, 1isize: bb3, otherwise: bb7];\n+//      switchInt(move _5) -> [0isize: bb6, 1isize: bb4, otherwise: bb8];\n //  }\n-//  bb1: { // arm1\n+//  bb1: {\n+//      resume;\n+//  }\n+//  bb2: {  // arm1\n //      StorageLive(_7);\n //      _7 = _3;\n //      _1 = (const 1i32, move _7);\n //      StorageDead(_7);\n-//      goto -> bb12;\n+//      goto -> bb13;\n //  }\n-//  bb2: { // binding3(empty) and arm3\n+//  bb3: { // binding3(empty) and arm3\n //      _1 = (const 3i32, const 3i32);\n-//      goto -> bb12;\n-//  }\n-//  bb3: {\n-//      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n+//      goto -> bb13;\n //  }\n //  bb4: {\n-//      falseEdges -> [real: bb11, imaginary: bb5]; //pre_binding2\n+//      falseEdges -> [real: bb9, imaginary: bb5]; //pre_binding1\n //  }\n //  bb5: {\n-//      falseEdges -> [real: bb2, imaginary: bb6]; //pre_binding3\n+//      falseEdges -> [real: bb12, imaginary: bb6]; //pre_binding2\n //  }\n //  bb6: {\n-//      unreachable;\n+//      falseEdges -> [real: bb3, imaginary: bb7]; //pre_binding3\n //  }\n //  bb7: {\n //      unreachable;\n //  }\n-//  bb8: { // binding1 and guard\n+//  bb8: {\n+//      unreachable;\n+//  }\n+//  bb9: { // binding1 and guard\n //      StorageLive(_3);\n //      _3 = ((_2 as Some).0: i32);\n //      StorageLive(_6);\n-//      _6 = const guard() -> bb9;\n+//      _6 = const guard() -> [return: bb10, unwind: bb1];\n //  }\n-//  bb9: { // end of guard\n-//      switchInt(move _6) -> [0u8: bb10, otherwise: bb1];\n+//  bb10: { // end of guard\n+//      switchInt(move _6) -> [0u8: bb11, otherwise: bb2];\n //  }\n-//  bb10: { // to pre_binding2\n-//      falseEdges -> [real: bb4, imaginary: bb4];\n+//  bb11: { // to pre_binding2\n+//      falseEdges -> [real: bb5, imaginary: bb5];\n //  }\n-//  bb11: { // bindingNoLandingPads.before.mir2 and arm2\n+//  bb12: { // bindingNoLandingPads.before.mir2 and arm2\n //      StorageLive(_4);\n //      _4 = ((_2 as Some).0: i32);\n //      StorageLive(_8);\n //      _8 = _4;\n //      _1 = (const 2i32, move _8);\n //      StorageDead(_8);\n-//      goto -> bb12;\n+//      goto -> bb13;\n //  }\n-//  bb12: {\n+//  bb13: {\n //      ...\n //      return;\n //  }\n-// END rustc.full_tested_match.SimplifyBranches-initial.before.mir\n+// END rustc.full_tested_match.QualifyAndPromoteConstants.after.mir\n //\n-// START rustc.full_tested_match2.SimplifyBranches-initial.before.mir\n+// START rustc.full_tested_match2.QualifyAndPromoteConstants.before.mir\n //  bb0: {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n //      _5 = discriminant(_2);\n-//      switchInt(move _5) -> [0isize: bb4, 1isize: bb3, otherwise: bb7];\n+//      switchInt(move _5) -> [0isize: bb5, 1isize: bb4, otherwise: bb8];\n+//  }\n+//  bb1: {\n+//      resume;\n //  }\n-//  bb1: { // arm1\n+//  bb2: { // arm1\n //      StorageLive(_7);\n //      _7 = _3;\n //      _1 = (const 1i32, move _7);\n //      StorageDead(_7);\n-//      goto -> bb12;\n+//      goto -> bb13;\n //  }\n-//  bb2: { // binding3(empty) and arm3\n+//  bb3: { // binding3(empty) and arm3\n //      _1 = (const 3i32, const 3i32);\n-//      goto -> bb12;\n-//  }\n-//  bb3: {\n-//      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n+//      goto -> bb13;\n //  }\n //  bb4: {\n-//      falseEdges -> [real: bb2, imaginary: bb5]; //pre_binding2\n+//      falseEdges -> [real: bb9, imaginary: bb5]; //pre_binding1\n //  }\n //  bb5: {\n-//      falseEdges -> [real: bb11, imaginary: bb6]; //pre_binding3\n+//      falseEdges -> [real: bb3, imaginary: bb6]; //pre_binding2\n //  }\n //  bb6: {\n-//      unreachable;\n+//      falseEdges -> [real: bb12, imaginary: bb7]; //pre_binding3\n //  }\n //  bb7: {\n //      unreachable;\n //  }\n-//  bb8: { // binding1 and guard\n+//  bb8: {\n+//      unreachable;\n+//  }\n+//  bb9: { // binding1 and guard\n //      StorageLive(_3);\n //      _3 = ((_2 as Some).0: i32);\n //      StorageLive(_6);\n-//      _6 = const guard() -> bb9;\n+//      _6 = const guard() -> [return: bb10, unwind: bb1];\n //  }\n-//  bb9: { // end of guard\n-//      switchInt(move _6) -> [0u8: bb10, otherwise: bb1];\n+//  bb10: { // end of guard\n+//      switchInt(move _6) -> [0u8: bb11, otherwise: bb2];\n //  }\n-//  bb10: { // to pre_binding2\n-//      falseEdges -> [real: bb5, imaginary: bb4];\n+//  bb11: { // to pre_binding2\n+//      falseEdges -> [real: bb6, imaginary: bb5];\n //  }\n-//  bb11: { // binding2 and arm2\n+//  bb12: { // binding2 and arm2\n //      StorageLive(_4);\n //      _4 = ((_2 as Some).0: i32);\n //      StorageLive(_8);\n //      _8 = _4;\n //      _1 = (const 2i32, move _8);\n //      StorageDead(_8);\n-//      goto -> bb12;\n+//      goto -> bb13;\n //  }\n-//  bb12: {\n+//  bb13: {\n //      ...\n //      return;\n //  }\n-// END rustc.full_tested_match2.SimplifyBranches-initial.before.mir\n+// END rustc.full_tested_match2.QualifyAndPromoteConstants.before.mir\n //\n-// START rustc.main.SimplifyBranches-initial.before.mir\n+// START rustc.main.QualifyAndPromoteConstants.before.mir\n // bb0: {\n //     ...\n //     _2 = std::option::Option<i32>::Some(const 1i32,);\n //     _7 = discriminant(_2);\n-//     switchInt(move _7) -> [1isize: bb3, otherwise: bb4];\n+//     switchInt(move _7) -> [1isize: bb4, otherwise: bb5];\n+// }\n+// bb1: {\n+//     resume;\n // }\n-// bb1: { // arm1\n-//      _1 = const 1i32;\n-//      goto -> bb16;\n+// bb2: { // arm1\n+//     _1 = const 1i32;\n+//     goto -> bb17;\n // }\n-// bb2: { // arm3\n+// bb3: { // arm3\n //     _1 = const 3i32;\n-//      goto -> bb16;\n+//     goto -> bb17;\n // }\n //\n-//  bb3: {\n-//      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n-//  }\n-//  bb4: {\n-//      falseEdges -> [real: bb11, imaginary: bb5]; //pre_binding2\n-//  }\n-//  bb5: {\n-//      falseEdges -> [real: bb12, imaginary: bb6]; //pre_binding3\n-//  }\n-//  bb6: {\n-//      falseEdges -> [real: bb15, imaginary: bb7]; //pre_binding4\n-//  }\n-//  bb7: {\n-//      unreachable;\n-//  }\n-//  bb8: { // binding1: Some(w) if guard()\n-//      StorageLive(_3);\n-//      _3 = ((_2 as Some).0: i32);\n-//      StorageLive(_8);\n-//      _8 = const guard() -> bb9;\n-//  }\n-//  bb9: { //end of guard\n-//      switchInt(move _8) -> [0u8: bb10, otherwise: bb1];\n-//  }\n-//  bb10: { // to pre_binding2\n-//      falseEdges -> [real: bb4, imaginary: bb4];\n-//  }\n-//  bb11: { // binding2 & arm2\n-//      StorageLive(_4);\n-//      _4 = _2;\n-//      _1 = const 2i32;\n-//      goto -> bb16;\n-//  }\n-//  bb12: { // binding3: Some(y) if guard2(y)\n-//      StorageLive(_5);\n-//      _5 = ((_2 as Some).0: i32);\n-//      StorageLive(_10);\n-//      StorageLive(_11);\n-//      _11 = _5;\n-//      _10 = const guard2(move _11) -> bb13;\n-//  }\n-//  bb13: { // end of guard2\n-//      StorageDead(_11);\n-//      switchInt(move _10) -> [0u8: bb14, otherwise: bb2];\n-//  }\n-//  bb14: { // to pre_binding4\n-//      falseEdges -> [real: bb6, imaginary: bb6];\n-//  }\n-//  bb15: { // binding4 & arm4\n-//      StorageLive(_6);\n-//      _6 = _2;\n-//      _1 = const 4i32;\n-//      goto -> bb16;\n-//  }\n-// bb16: {\n+// bb4: {\n+//     falseEdges -> [real: bb9, imaginary: bb5]; //pre_binding1\n+// }\n+// bb5: {\n+//     falseEdges -> [real: bb12, imaginary: bb6]; //pre_binding2\n+// }\n+// bb6: {\n+//     falseEdges -> [real: bb13, imaginary: bb7]; //pre_binding3\n+// }\n+// bb7: {\n+//     falseEdges -> [real: bb16, imaginary: bb8]; //pre_binding4\n+// }\n+// bb8: {\n+//     unreachable;\n+// }\n+// bb9: { // binding1: Some(w) if guard()\n+//     StorageLive(_3);\n+//     _3 = ((_2 as Some).0: i32);\n+//     StorageLive(_8);\n+//     _8 = const guard() -> [return: bb10, unwind: bb1];\n+// }\n+// bb10: { //end of guard\n+//    switchInt(move _8) -> [0u8: bb11, otherwise: bb2];\n+// }\n+// bb11: { // to pre_binding2\n+//     falseEdges -> [real: bb5, imaginary: bb5];\n+// }\n+// bb12: { // binding2 & arm2\n+//     StorageLive(_4);\n+//     _4 = _2;\n+//     _1 = const 2i32;\n+//     goto -> bb17;\n+// }\n+// bb13: { // binding3: Some(y) if guard2(y)\n+//     StorageLive(_5);\n+//     _5 = ((_2 as Some).0: i32);\n+//     StorageLive(_10);\n+//     StorageLive(_11);\n+//     _11 = _5;\n+//     _10 = const guard2(move _11) -> [return: bb14, unwind: bb1];\n+// }\n+// bb14: { // end of guard2\n+//     StorageDead(_11);\n+//     switchInt(move _10) -> [0u8: bb15, otherwise: bb3];\n+// }\n+// bb15: { // to pre_binding4\n+//     falseEdges -> [real: bb7, imaginary: bb7];\n+// }\n+// bb16: { // binding4 & arm4\n+//     StorageLive(_6);\n+//     _6 = _2;\n+//     _1 = const 4i32;\n+//     goto -> bb17;\n+// }\n+// bb17: {\n //     ...\n //     return;\n // }\n-// END rustc.main.SimplifyBranches-initial.before.mir\n+// END rustc.main.QualifyAndPromoteConstants.before.mir"}, {"sha": "e4dd99f5a1e75e8874e39f9fc064ac68ae1f30be", "filename": "src/test/mir-opt/nll/liveness-call-subtlety.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -31,15 +31,15 @@ fn main() {\n //            | Live variables at bb0[0]: []\n //        StorageLive(_1);\n //            | Live variables at bb0[1]: []\n-//        _1 = const <std::boxed::Box<T>>::new(const 22usize) -> bb1;\n+//        _1 = const <std::boxed::Box<T>>::new(const 22usize) -> [return: bb2, unwind: bb1];\n //    }\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n-//    | Live variables on entry to bb1: [_1 (drop)]\n-//    bb1: {\n-//            | Live variables at bb1[0]: [_1 (drop)]\n+//    | Live variables on entry to bb2: [_1 (drop)]\n+//    bb2: {\n+//            | Live variables at bb2[0]: [_1 (drop)]\n //        StorageLive(_2);\n-//            | Live variables at bb1[1]: [_1 (drop)]\n-//        _2 = const can_panic() -> [return: bb2, unwind: bb4];\n+//            | Live variables at bb2[1]: [_1 (drop)]\n+//        _2 = const can_panic() -> [return: bb3, unwind: bb4];\n //    }\n // END rustc.main.nll.0.mir"}, {"sha": "8dae773806718094a85ac1e378c72fd8af1ed210", "filename": "src/test/mir-opt/nll/liveness-drop-intra-block.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -25,17 +25,17 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-//    | Live variables on entry to bb1: []\n-//    bb1: {\n-//            | Live variables at bb1[0]: []\n+//    | Live variables on entry to bb2: []\n+//    bb2: {\n+//            | Live variables at bb2[0]: []\n //        _1 = const 55usize;\n-//            | Live variables at bb1[1]: [_1]\n+//            | Live variables at bb2[1]: [_1]\n //        StorageLive(_3);\n-//            | Live variables at bb1[2]: [_1]\n+//            | Live variables at bb2[2]: [_1]\n //        StorageLive(_4);\n-//            | Live variables at bb1[3]: [_1]\n+//            | Live variables at bb2[3]: [_1]\n //        _4 = _1;\n-//            | Live variables at bb1[4]: [_4]\n-//        _3 = const use_x(move _4) -> bb2;\n+//            | Live variables at bb2[4]: [_4]\n+//        _3 = const use_x(move _4) -> [return: bb3, unwind: bb1];\n //    }\n // END rustc.main.nll.0.mir"}, {"sha": "5d799d3d90b414c87c6aea71393b9eeb96b7be6f", "filename": "src/test/mir-opt/nll/liveness-interblock.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -29,22 +29,20 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-//     | Live variables on entry to bb2: [_1]\n-//     bb2: {\n-//             | Live variables at bb2[0]: [_1]\n+//     | Live variables on entry to bb3: [_1]\n+//     bb3: {\n+//             | Live variables at bb3[0]: [_1]\n //         StorageLive(_4);\n-//             | Live variables at bb2[1]: [_1]\n+//             | Live variables at bb3[1]: [_1]\n //         _4 = _1;\n-//             | Live variables at bb2[2]: [_4]\n-//         _3 = const make_live(move _4) -> bb4;\n+//             | Live variables at bb3[2]: [_4]\n+//         _3 = const make_live(move _4) -> [return: bb5, unwind: bb1];\n //     }\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n-//     | Live variables on entry to bb3: []\n-//     bb3: {\n-//             | Live variables at bb3[0]: []\n-//         _5 = const make_dead() -> bb5;\n+//     | Live variables on entry to bb4: []\n+//     bb4: {\n+//             | Live variables at bb4[0]: []\n+//         _5 = const make_dead() -> [return: bb6, unwind: bb1];\n //     }\n // END rustc.main.nll.0.mir\n-\n-"}, {"sha": "36dedeebd538a92c73df3af01e46784d2ff96612", "filename": "src/test/mir-opt/nll/region-liveness-basic.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -31,26 +31,26 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#1r: {bb1[1], bb2[0], bb2[1]}\n-// | '_#2r: {bb1[1], bb2[0], bb2[1]}\n+// | '_#1r: {bb2[1], bb3[0], bb3[1]}\n+// | '_#2r: {bb2[1], bb3[0], bb3[1]}\n // ...\n //             let _2: &'_#2r usize;\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n-//    bb1: {\n-//            | Live variables at bb1[0]: [_1, _3]\n+//    bb2: {\n+//            | Live variables at bb2[0]: [_1, _3]\n //        _2 = &'_#1r _1[_3];\n-//            | Live variables at bb1[1]: [_2]\n-//        switchInt(const true) -> [0u8: bb3, otherwise: bb2];\n+//            | Live variables at bb2[1]: [_2]\n+//        switchInt(const true) -> [0u8: bb4, otherwise: bb3];\n //    }\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n-//    bb2: {\n-//            | Live variables at bb2[0]: [_2]\n+//    bb3: {\n+//            | Live variables at bb3[0]: [_2]\n //        StorageLive(_7);\n-//            | Live variables at bb2[1]: [_2]\n+//            | Live variables at bb3[1]: [_2]\n //        _7 = (*_2);\n-//            | Live variables at bb2[2]: [_7]\n-//        _6 = const use_x(move _7) -> bb4;\n+//            | Live variables at bb3[2]: [_7]\n+//        _6 = const use_x(move _7) -> [return: bb5, unwind: bb1];\n //    }\n // END rustc.main.nll.0.mir"}, {"sha": "04a30dc284d7727f997970d6019fa4b691d394e0", "filename": "src/test/mir-opt/nll/region-liveness-drop-may-dangle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-may-dangle.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -44,5 +44,5 @@ unsafe impl<#[may_dangle] T> Drop for Wrap<T> {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#5r: {bb1[3], bb1[4], bb1[5], bb2[0], bb2[1]}\n+// | '_#5r: {bb2[3], bb2[4], bb2[5], bb3[0], bb3[1]}\n // END rustc.main.nll.0.mir"}, {"sha": "5569fe7f5748c44b7b6ef4b6bf3439421f5dbc49", "filename": "src/test/mir-opt/nll/region-liveness-drop-no-may-dangle.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -13,7 +13,6 @@\n // including) the call to `use_x`. The `else` branch is not included.\n \n // ignore-tidy-linelength\n-// ignore-test #46267\n // compile-flags:-Znll -Zverbose\n //                     ^^^^^^^^^ force compiler to dump more region information\n \n@@ -47,5 +46,5 @@ impl<T> Drop for Wrap<T> {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#5r: {bb1[3], bb1[4], bb1[5], bb2[0], bb2[1], bb2[2], bb3[0], bb4[0], bb4[1], bb4[2], bb6[0], bb7[0], bb7[1], bb8[0]}\n+// | '_#5r: {bb2[3], bb2[4], bb2[5], bb3[0], bb3[1], bb3[2], bb4[0], bb5[0], bb5[1], bb5[2], bb6[0], bb7[0], bb7[1], bb8[0]}\n // END rustc.main.nll.0.mir"}, {"sha": "de2b18fe4afa3596b351049aae48ca6cb8c37eb3", "filename": "src/test/mir-opt/nll/region-liveness-two-disjoint-uses.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -36,10 +36,10 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#1r: {bb1[1], bb2[0], bb2[1]}\n+// | '_#1r: {bb2[1], bb3[0], bb3[1]}\n // ...\n-// | '_#3r: {bb7[2], bb7[3], bb7[4]}\n-// | '_#4r: {bb1[1], bb2[0], bb2[1], bb7[2], bb7[3], bb7[4]}\n+// | '_#3r: {bb8[2], bb8[3], bb8[4]}\n+// | '_#4r: {bb2[1], bb3[0], bb3[1], bb8[2], bb8[3], bb8[4]}\n // ...\n // let mut _2: &'_#4r usize;\n // ..."}, {"sha": "6a2a7cc7149974b00a303b8c83323eda46c1f151", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -32,9 +32,9 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#1r: {bb1[1], bb1[2], bb1[3], bb1[4], bb1[5], bb1[6], bb2[0], bb2[1]}\n-// | '_#2r: {bb1[1], bb1[2], bb1[3], bb1[4], bb1[5], bb1[6], bb2[0], bb2[1]}\n-// | '_#3r: {bb1[5], bb1[6], bb2[0], bb2[1]}\n+// | '_#1r: {bb2[1], bb2[2], bb2[3], bb2[4], bb2[5], bb2[6], bb3[0], bb3[1]}\n+// | '_#2r: {bb2[1], bb2[2], bb2[3], bb2[4], bb2[5], bb2[6], bb3[0], bb3[1]}\n+// | '_#3r: {bb2[5], bb2[6], bb3[0], bb3[1]}\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n // let _2: &'_#2r usize;"}, {"sha": "1b114419448f11b54cbb48d4b69ac09128c4d5c1", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -64,7 +64,7 @@ impl Drop for Droppy {\n //         (_1.0: Aligned) = move _4;\n //         StorageDead(_4);\n //         _0 = ();\n-//         drop(_1) -> bb2;\n+//         drop(_1) -> [return: bb2, unwind: bb1];\n //     }\n // }\n // END rustc.main.EraseRegions.before.mir"}, {"sha": "35786643648eb12d48d8367491ccb35d2adc3ef0", "filename": "src/test/mir-opt/simplify_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -17,11 +17,11 @@ fn main() {\n // END RUST SOURCE\n // START rustc.main.SimplifyBranches-initial.before.mir\n // bb0: {\n-//     switchInt(const false) -> [0u8: bb2, otherwise: bb1];\n+//     switchInt(const false) -> [0u8: bb3, otherwise: bb2];\n // }\n // END rustc.main.SimplifyBranches-initial.before.mir\n // START rustc.main.SimplifyBranches-initial.after.mir\n // bb0: {\n-//     goto -> bb2;\n+//     goto -> bb3;\n // }\n // END rustc.main.SimplifyBranches-initial.after.mir"}, {"sha": "3776a11b3ab825ceb53ad5241d1bfdd3be2b83f0", "filename": "src/test/mir-opt/validate_2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n+// ignore-wasm32-bare unwinding being disabled causes differences in output\n+// ignore-wasm64-bare unwinding being disabled causes differences in output\n // compile-flags: -Z verbose -Z mir-emit-validate=1\n \n fn main() {\n@@ -28,7 +30,7 @@ fn main() {\n //         StorageDead(_3);\n //         _0 = ();\n //         Validate(Release, [_1: std::boxed::Box<[i32]>]);\n-//         drop(_1) -> bb2;\n+//         drop(_1) -> [return: bb2, unwind: bb3];\n //     }\n //     ...\n // }"}, {"sha": "24a4ebd8429dfb559d887d928c824be17f46699b", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -54,6 +54,7 @@ fn main() {\n //         Validate(Acquire, [_1: &ReFree(DefId(0/1:9 ~ validate_4[317d]::write_42[0]::{{closure}}[0]), BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n //         Validate(Release, [_1: &ReFree(DefId(0/1:9 ~ validate_4[317d]::write_42[0]::{{closure}}[0]), BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n //         (*_2) = const 23i32;\n+//         _0 = ();\n //         return;\n //     }\n // }"}, {"sha": "127f9e355c7a27532db03065bbd229c7f391de48", "filename": "src/test/run-pass/issue-8860.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Frun-pass%2Fissue-8860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Frun-pass%2Fissue-8860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8860.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z borrowck=compare\n \n static mut DROP: isize = 0;\n static mut DROP_S: isize = 0;"}, {"sha": "ecb62b1888dd20de8383479a15cd8329bcf397e1", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da2112238c565a7e36ada0a1f9c899961910131/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=9da2112238c565a7e36ada0a1f9c899961910131", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z borrowck=compare\n \n use std::cell::Cell;\n use std::mem::swap;"}]}