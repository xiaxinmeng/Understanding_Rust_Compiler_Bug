{"sha": "777c853b4a8274b293f30c029cc18bccedde9ecf", "node_id": "C_kwDOAAsO6NoAKDc3N2M4NTNiNGE4Mjc0YjI5M2YzMGMwMjljYzE4YmNjZWRkZTllY2Y", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2021-12-31T23:03:07Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2021-12-31T23:03:07Z"}, "message": "Clarify safety comment", "tree": {"sha": "1b2a8c110ce0b5e5f03c88c5425966a313f3c55f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b2a8c110ce0b5e5f03c88c5425966a313f3c55f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/777c853b4a8274b293f30c029cc18bccedde9ecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/777c853b4a8274b293f30c029cc18bccedde9ecf", "html_url": "https://github.com/rust-lang/rust/commit/777c853b4a8274b293f30c029cc18bccedde9ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/777c853b4a8274b293f30c029cc18bccedde9ecf/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f808161bc2852bff52cf3dd1bb4baf3003ef181", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f808161bc2852bff52cf3dd1bb4baf3003ef181", "html_url": "https://github.com/rust-lang/rust/commit/4f808161bc2852bff52cf3dd1bb4baf3003ef181"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "a6e7f08b00bcfe84d014f26afe9b04180679615b", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/777c853b4a8274b293f30c029cc18bccedde9ecf/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777c853b4a8274b293f30c029cc18bccedde9ecf/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=777c853b4a8274b293f30c029cc18bccedde9ecf", "patch": "@@ -2144,6 +2144,8 @@ impl<T, A: Allocator> Vec<T, A> {\n         let ptr = self.as_mut_ptr();\n         // SAFETY:\n         // - `ptr` is guaranteed to be valid for `self.len` elements\n+        // - but the allocation extends out to `self.buf.capacity()` elements, possibly\n+        // uninitialized\n         let spare_ptr = unsafe { ptr.add(self.len) };\n         let spare_ptr = spare_ptr.cast::<MaybeUninit<T>>();\n         let spare_len = self.buf.capacity() - self.len;"}]}