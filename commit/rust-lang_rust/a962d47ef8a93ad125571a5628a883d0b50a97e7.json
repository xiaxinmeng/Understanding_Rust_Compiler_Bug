{"sha": "a962d47ef8a93ad125571a5628a883d0b50a97e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NjJkNDdlZjhhOTNhZDEyNTU3MWE1NjI4YTg4M2QwYjUwYTk3ZTc=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-24T13:17:24Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:24Z"}, "message": "look for default trait candidates", "tree": {"sha": "b3d32dbcd7a5b59c8ed32d667b732e1227ba244f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3d32dbcd7a5b59c8ed32d667b732e1227ba244f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a962d47ef8a93ad125571a5628a883d0b50a97e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a962d47ef8a93ad125571a5628a883d0b50a97e7", "html_url": "https://github.com/rust-lang/rust/commit/a962d47ef8a93ad125571a5628a883d0b50a97e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a962d47ef8a93ad125571a5628a883d0b50a97e7/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4148d5361a7d0ace1cf3b64d07c6252bbce087af", "url": "https://api.github.com/repos/rust-lang/rust/commits/4148d5361a7d0ace1cf3b64d07c6252bbce087af", "html_url": "https://github.com/rust-lang/rust/commit/4148d5361a7d0ace1cf3b64d07c6252bbce087af"}], "stats": {"total": 83, "additions": 75, "deletions": 8}, "files": [{"sha": "db7e0f4d60f94cb87bcce3babb7657f0e74bf158", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=a962d47ef8a93ad125571a5628a883d0b50a97e7", "patch": "@@ -410,3 +410,7 @@ pub fn is_associated_type(cstore: &cstore::CStore, def: ast::DefId) -> bool {\n     decoder::is_associated_type(&*cdata, def.node)\n }\n \n+pub fn is_default_trait(cstore: &cstore::CStore, def: ast::DefId) -> bool {\n+    let cdata = cstore.get_crate_data(def.krate);\n+    decoder::is_default_trait(&*cdata, def.node)\n+}"}, {"sha": "065d78879f1b83548bd97de013393d185e8737d0", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=a962d47ef8a93ad125571a5628a883d0b50a97e7", "patch": "@@ -1563,3 +1563,12 @@ pub fn is_associated_type(cdata: Cmd, id: ast::NodeId) -> bool {\n         Some(item) => item_sort(item) == 't',\n     }\n }\n+\n+\n+pub fn is_default_trait<'tcx>(cdata: Cmd, id: ast::NodeId) -> bool {\n+    let item_doc = lookup_item(id, cdata.data());\n+    match item_family(item_doc) {\n+        Family::DefTrait => true,\n+        _ => false\n+    }\n+}"}, {"sha": "9c71650c7be34deffabc63ce0db01d5fdcaf7d4d", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=a962d47ef8a93ad125571a5628a883d0b50a97e7", "patch": "@@ -221,6 +221,9 @@ pub enum Vtable<'tcx, N> {\n     /// Vtable identifying a particular impl.\n     VtableImpl(VtableImplData<'tcx, N>),\n \n+    /// Vtable for default trait implementations\n+    VtableDefaultTrait(ast::DefId),\n+\n     /// Successful resolution to an obligation provided by the caller\n     /// for some type parameter. The `Vec<N>` represents the\n     /// obligations incurred from normalizing the where-clause (if\n@@ -513,17 +516,18 @@ impl<'tcx, N> Vtable<'tcx, N> {\n     pub fn iter_nested(&self) -> Iter<N> {\n         match *self {\n             VtableImpl(ref i) => i.iter_nested(),\n-            VtableFnPointer(..) => (&[]).iter(),\n-            VtableClosure(..) => (&[]).iter(),\n             VtableParam(ref n) => n.iter(),\n-            VtableObject(_) => (&[]).iter(),\n             VtableBuiltin(ref i) => i.iter_nested(),\n+            VtableObject(_) |\n+            VtableDefaultTrait(..) | VtableFnPointer(..) |\n+            VtableClosure(..) => (&[]).iter(),\n         }\n     }\n \n     pub fn map_nested<M, F>(&self, op: F) -> Vtable<'tcx, M> where F: FnMut(&N) -> M {\n         match *self {\n             VtableImpl(ref i) => VtableImpl(i.map_nested(op)),\n+            VtableDefaultTrait(t) => VtableDefaultTrait(t),\n             VtableFnPointer(ref sig) => VtableFnPointer((*sig).clone()),\n             VtableClosure(d, ref s) => VtableClosure(d, s.clone()),\n             VtableParam(ref n) => VtableParam(n.iter().map(op).collect()),\n@@ -539,6 +543,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableImpl(i) => VtableImpl(i.map_move_nested(op)),\n             VtableFnPointer(sig) => VtableFnPointer(sig),\n             VtableClosure(d, s) => VtableClosure(d, s),\n+            VtableDefaultTrait(t) => VtableDefaultTrait(t),\n             VtableParam(n) => VtableParam(n.into_iter().map(op).collect()),\n             VtableObject(p) => VtableObject(p),\n             VtableBuiltin(no) => VtableBuiltin(no.map_move_nested(op)),"}, {"sha": "ecfd02b69fc577a1d1cfa68c86bf26172a53d696", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=a962d47ef8a93ad125571a5628a883d0b50a97e7", "patch": "@@ -709,6 +709,7 @@ fn assemble_candidates_from_impls<'cx,'tcx>(\n             // projection. And the projection where clause is handled\n             // in `assemble_candidates_from_param_env`.\n         }\n+        super::VtableDefaultTrait(..) |\n         super::VtableBuiltin(..) => {\n             // These traits have no associated types.\n             selcx.tcx().sess.span_bug("}, {"sha": "15a1e3ad34b2267378ce531983b83713fc954009", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=a962d47ef8a93ad125571a5628a883d0b50a97e7", "patch": "@@ -26,7 +26,7 @@ use super::{SelectionError, Unimplemented, Overflow, OutputTypeParameterMismatch\n use super::{Selection};\n use super::{SelectionResult};\n use super::{VtableBuiltin, VtableImpl, VtableParam, VtableClosure,\n-            VtableFnPointer, VtableObject};\n+            VtableFnPointer, VtableObject, VtableDefaultTrait};\n use super::{VtableImplData, VtableObjectData, VtableBuiltinData};\n use super::object_safety;\n use super::{util};\n@@ -136,6 +136,7 @@ enum SelectionCandidate<'tcx> {\n     BuiltinCandidate(ty::BuiltinBound),\n     ParamCandidate(ty::PolyTraitRef<'tcx>),\n     ImplCandidate(ast::DefId),\n+    DefaultTraitCandidate(ast::DefId),\n \n     /// This is a trait matching with a projected type as `Self`, and\n     /// we found an applicable bound in the trait definition.\n@@ -1130,7 +1131,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let self_ty = self.infcx.shallow_resolve(obligation.self_ty());\n         debug!(\"assemble_candidates_from_impls(self_ty={})\", self_ty.repr(self.tcx()));\n \n-        let all_impls = self.all_impls(obligation.predicate.def_id());\n+        let def_id = obligation.predicate.def_id();\n+        let all_impls = self.all_impls(def_id);\n         for &impl_def_id in &all_impls {\n             self.infcx.probe(|snapshot| {\n                 let (skol_obligation_trait_pred, skol_map) =\n@@ -1144,6 +1146,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             });\n         }\n+\n+        if self.tcx().default_trait_impls.borrow().contains(&def_id) {\n+            candidates.vec.push(DefaultTraitCandidate(def_id.clone()))\n+        }\n+\n         Ok(())\n     }\n \n@@ -1646,6 +1653,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(VtableParam(obligations))\n             }\n \n+            DefaultTraitCandidate(trait_def_id) => {\n+                Ok(VtableDefaultTrait(trait_def_id))\n+            }\n+\n             ImplCandidate(impl_def_id) => {\n                 let vtable_impl =\n                     try!(self.confirm_impl_candidate(obligation, impl_def_id));\n@@ -2308,6 +2319,7 @@ impl<'tcx> Repr<'tcx> for SelectionCandidate<'tcx> {\n             BuiltinCandidate(b) => format!(\"BuiltinCandidate({:?})\", b),\n             ParamCandidate(ref a) => format!(\"ParamCandidate({})\", a.repr(tcx)),\n             ImplCandidate(a) => format!(\"ImplCandidate({})\", a.repr(tcx)),\n+            DefaultTraitCandidate(t) => format!(\"DefaultTraitCandidate({:?})\", t),\n             ProjectionCandidate => format!(\"ProjectionCandidate\"),\n             FnPointerCandidate => format!(\"FnPointerCandidate\"),\n             ObjectCandidate => {"}, {"sha": "a0affcff2ceacd9d2efcd0313bb5baf6f0eccc01", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=a962d47ef8a93ad125571a5628a883d0b50a97e7", "patch": "@@ -444,6 +444,9 @@ impl<'tcx, N:Repr<'tcx>> Repr<'tcx> for super::Vtable<'tcx, N> {\n             super::VtableImpl(ref v) =>\n                 v.repr(tcx),\n \n+            super::VtableDefaultTrait(ref t) =>\n+                format!(\"VtableDefaultTrait({:?})\", t),\n+\n             super::VtableClosure(ref d, ref s) =>\n                 format!(\"VtableClosure({},{})\",\n                         d.repr(tcx),"}, {"sha": "5652f23a16d3e5e0d602bb3728cc53eebc4428d7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a962d47ef8a93ad125571a5628a883d0b50a97e7", "patch": "@@ -757,6 +757,9 @@ pub struct ctxt<'tcx> {\n     /// Maps a trait onto a list of impls of that trait.\n     pub trait_impls: RefCell<DefIdMap<Rc<RefCell<Vec<ast::DefId>>>>>,\n \n+    /// Maps a trait onto a list of *default* trait implementations\n+    pub default_trait_impls: RefCell<DefIdSet>,\n+\n     /// Maps a DefId of a type to a list of its inherent impls.\n     /// Contains implementations of methods that are inherent to a type.\n     /// Methods in these implementations don't need to be exported.\n@@ -2493,6 +2496,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         destructor_for_type: RefCell::new(DefIdMap()),\n         destructors: RefCell::new(DefIdSet()),\n         trait_impls: RefCell::new(DefIdMap()),\n+        default_trait_impls: RefCell::new(DefIdSet()),\n         inherent_impls: RefCell::new(DefIdMap()),\n         impl_items: RefCell::new(DefIdMap()),\n         used_unsafe: RefCell::new(NodeSet()),\n@@ -5992,6 +5996,18 @@ pub fn item_variances(tcx: &ctxt, item_id: ast::DefId) -> Rc<ItemVariances> {\n         || Rc::new(csearch::get_item_variances(&tcx.sess.cstore, item_id)))\n }\n \n+/// Records a trait-to-implementation mapping.\n+pub fn record_default_trait_implementation(tcx: &ctxt, trait_def_id: DefId) {\n+\n+    //assert!(did.krate != ast::LOCAL_CRATE);\n+    if tcx.default_trait_impls.borrow().contains(&trait_def_id) {\n+        return;\n+    }\n+\n+    tcx.default_trait_impls.borrow_mut().insert(trait_def_id);\n+}\n+\n+\n /// Records a trait-to-implementation mapping.\n pub fn record_trait_implementation(tcx: &ctxt,\n                                    trait_def_id: DefId,\n@@ -6074,11 +6090,21 @@ pub fn populate_implementations_for_trait_if_necessary(\n     }\n \n     csearch::each_implementation_for_trait(&tcx.sess.cstore, trait_id,\n-            |implementation_def_id| {\n+            |implementation_def_id|{\n         let impl_items = csearch::get_impl_items(&tcx.sess.cstore, implementation_def_id);\n \n-        // Record the trait->implementation mapping.\n-        record_trait_implementation(tcx, trait_id, implementation_def_id);\n+        if csearch::is_default_trait(&tcx.sess.cstore, implementation_def_id) {\n+            record_default_trait_implementation(tcx, trait_id);\n+            tcx.populated_external_traits.borrow_mut().insert(trait_id);\n+\n+            // Nothing else to do for default trait implementations since\n+            // they are not allowed to have type parameters, methods, or any\n+            // other item that could be associated to a trait implementation.\n+            return;\n+        } else {\n+            // Record the trait->implementation mapping.\n+            record_trait_implementation(tcx, trait_id, implementation_def_id);\n+        }\n \n         // For any methods that use a default implementation, add them to\n         // the map. This is a bit unfortunate."}, {"sha": "3f11655e16ec2f83a598d3c8d2c378cd13f5f21a", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=a962d47ef8a93ad125571a5628a883d0b50a97e7", "patch": "@@ -519,6 +519,7 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Vtable<'tcx, N>\n     fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Vtable<'tcx, N> {\n         match *self {\n             traits::VtableImpl(ref v) => traits::VtableImpl(v.fold_with(folder)),\n+            traits::VtableDefaultTrait(t) => traits::VtableDefaultTrait(t),\n             traits::VtableClosure(d, ref s) => {\n                 traits::VtableClosure(d, s.fold_with(folder))\n             }"}, {"sha": "1f90e4ae023b788ef377328881f7bf9531907f97", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=a962d47ef8a93ad125571a5628a883d0b50a97e7", "patch": "@@ -390,6 +390,7 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             Callee { bcx: bcx, data: Fn(llfn) }\n         }\n         traits::VtableBuiltin(..) |\n+        traits::VtableDefaultTrait(..) |\n         traits::VtableParam(..) => {\n             bcx.sess().bug(\n                 &format!(\"resolved vtable bad vtable {} in trans\",\n@@ -714,6 +715,8 @@ pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let methods = traits::supertraits(tcx, trait_ref.clone()).flat_map(|trait_ref| {\n         let vtable = fulfill_obligation(ccx, DUMMY_SP, trait_ref.clone());\n         match vtable {\n+            // Should default trait error here?\n+            traits::VtableDefaultTrait(_) |\n             traits::VtableBuiltin(_) => {\n                 Vec::new().into_iter()\n             }"}, {"sha": "a20fa54f82264e2185659b986029290e26e0ce57", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962d47ef8a93ad125571a5628a883d0b50a97e7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a962d47ef8a93ad125571a5628a883d0b50a97e7", "patch": "@@ -649,7 +649,10 @@ fn convert_item(ccx: &CollectCtxt, it: &ast::Item) {\n                                    &enum_definition.variants);\n         },\n         ast::ItemDefTrait(_, ref ast_trait_ref) => {\n+            let trait_ref = astconv::instantiate_trait_ref(ccx, &ExplicitRscope,\n+                                                           ast_trait_ref, None, None);\n \n+            ty::record_default_trait_implementation(tcx, trait_ref.def_id)\n         }\n         ast::ItemImpl(_, _,\n                       ref generics,"}]}