{"sha": "c86c63436ac074d824d76e151c468554191e168e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NmM2MzQzNmFjMDc0ZDgyNGQ3NmUxNTFjNDY4NTU0MTkxZTE2OGU=", "commit": {"author": {"name": "Hans Niklas Jacob", "email": "hnj@posteo.de", "date": "2021-09-08T14:03:15Z"}, "committer": {"name": "Hans Niklas Jacob", "email": "hnj@posteo.de", "date": "2021-09-09T11:13:48Z"}, "message": "Allow missing code examples in trait impls.", "tree": {"sha": "4fa3fcaf4a8be589a3c021e74f0827c97d4cafb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fa3fcaf4a8be589a3c021e74f0827c97d4cafb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86c63436ac074d824d76e151c468554191e168e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86c63436ac074d824d76e151c468554191e168e", "html_url": "https://github.com/rust-lang/rust/commit/c86c63436ac074d824d76e151c468554191e168e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86c63436ac074d824d76e151c468554191e168e/comments", "author": {"login": "hnj2", "id": 49440977, "node_id": "MDQ6VXNlcjQ5NDQwOTc3", "avatar_url": "https://avatars.githubusercontent.com/u/49440977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hnj2", "html_url": "https://github.com/hnj2", "followers_url": "https://api.github.com/users/hnj2/followers", "following_url": "https://api.github.com/users/hnj2/following{/other_user}", "gists_url": "https://api.github.com/users/hnj2/gists{/gist_id}", "starred_url": "https://api.github.com/users/hnj2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hnj2/subscriptions", "organizations_url": "https://api.github.com/users/hnj2/orgs", "repos_url": "https://api.github.com/users/hnj2/repos", "events_url": "https://api.github.com/users/hnj2/events{/privacy}", "received_events_url": "https://api.github.com/users/hnj2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hnj2", "id": 49440977, "node_id": "MDQ6VXNlcjQ5NDQwOTc3", "avatar_url": "https://avatars.githubusercontent.com/u/49440977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hnj2", "html_url": "https://github.com/hnj2", "followers_url": "https://api.github.com/users/hnj2/followers", "following_url": "https://api.github.com/users/hnj2/following{/other_user}", "gists_url": "https://api.github.com/users/hnj2/gists{/gist_id}", "starred_url": "https://api.github.com/users/hnj2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hnj2/subscriptions", "organizations_url": "https://api.github.com/users/hnj2/orgs", "repos_url": "https://api.github.com/users/hnj2/repos", "events_url": "https://api.github.com/users/hnj2/events{/privacy}", "received_events_url": "https://api.github.com/users/hnj2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02a57fa13291f5bbb9d8efbc71f7423642b8d105", "url": "https://api.github.com/repos/rust-lang/rust/commits/02a57fa13291f5bbb9d8efbc71f7423642b8d105", "html_url": "https://github.com/rust-lang/rust/commit/02a57fa13291f5bbb9d8efbc71f7423642b8d105"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "1b5ec1b08fab04d5383025922c2b5517858523d9", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c86c63436ac074d824d76e151c468554191e168e/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86c63436ac074d824d76e151c468554191e168e/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=c86c63436ac074d824d76e151c468554191e168e", "patch": "@@ -10,6 +10,7 @@ use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::{find_testable_code, ErrorCodes, Ignore, LangString};\n use crate::visit_ast::inherits_doc_hidden;\n+use rustc_hir as hir;\n use rustc_middle::lint::LintLevelSource;\n use rustc_session::lint;\n use rustc_span::symbol::sym;\n@@ -67,13 +68,32 @@ crate fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> boo\n                 | clean::ImportItem(_)\n                 | clean::PrimitiveItem(_)\n                 | clean::KeywordItem(_)\n+                // check for trait impl\n+                | clean::ImplItem(clean::Impl { trait_: Some(_), .. })\n         )\n     {\n         return false;\n     }\n+\n     // The `expect_def_id()` should be okay because `local_def_id_to_hir_id`\n     // would presumably panic if a fake `DefIndex` were passed.\n     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id.expect_def_id().expect_local());\n+\n+    // check if parent is trait impl\n+    if let Some(parent_hir_id) = cx.tcx.hir().find_parent_node(hir_id) {\n+        if let Some(parent_node) = cx.tcx.hir().find(parent_hir_id) {\n+            if matches!(\n+                parent_node,\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }),\n+                    ..\n+                })\n+            ) {\n+                return false;\n+            }\n+        }\n+    }\n+\n     if cx.tcx.hir().attrs(hir_id).lists(sym::doc).has_word(sym::hidden)\n         || inherits_doc_hidden(cx.tcx, hir_id)\n     {"}, {"sha": "7dd2ebfedbbd74b605c4898488da526ae71ddd39", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c86c63436ac074d824d76e151c468554191e168e/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86c63436ac074d824d76e151c468554191e168e/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.rs?ref=c86c63436ac074d824d76e151c468554191e168e", "patch": "@@ -70,6 +70,13 @@ pub union Union {\n     b: f32,\n }\n \n+// no code example and it's fine!\n+impl Clone for Struct {\n+    fn clone(&self) -> Self {\n+        Self { field: self.field }\n+    }\n+}\n+\n \n #[doc(hidden)]\n pub mod foo {"}]}