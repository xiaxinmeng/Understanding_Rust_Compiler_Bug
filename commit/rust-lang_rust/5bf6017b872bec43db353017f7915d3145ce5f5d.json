{"sha": "5bf6017b872bec43db353017f7915d3145ce5f5d", "node_id": "C_kwDOAAsO6NoAKDViZjYwMTdiODcyYmVjNDNkYjM1MzAxN2Y3OTE1ZDMxNDVjZTVmNWQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-30T02:33:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-13T22:27:28Z"}, "message": "remove untagged_union feature gate", "tree": {"sha": "3a259a493b2d30ea00b1b3aacea6ff2543904f6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a259a493b2d30ea00b1b3aacea6ff2543904f6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf6017b872bec43db353017f7915d3145ce5f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf6017b872bec43db353017f7915d3145ce5f5d", "html_url": "https://github.com/rust-lang/rust/commit/5bf6017b872bec43db353017f7915d3145ce5f5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf6017b872bec43db353017f7915d3145ce5f5d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dfede3b9d802771ea9f879808a9ac99060c099f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dfede3b9d802771ea9f879808a9ac99060c099f", "html_url": "https://github.com/rust-lang/rust/commit/6dfede3b9d802771ea9f879808a9ac99060c099f"}], "stats": {"total": 835, "additions": 386, "deletions": 449}, "files": [{"sha": "1fc4d09eb0a1b4cf3f8ff502ade899ca5e36c4f1", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -525,13 +525,6 @@ declare_features! (\n     (incomplete, unsized_locals, \"1.30.0\", Some(48055), None),\n     /// Allows unsized tuple coercion.\n     (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n-    /// Allows `union`s to implement `Drop`. Moreover, `union`s may now include fields\n-    /// that don't implement `Copy` as long as they don't have any drop glue.\n-    /// This is checked recursively. On encountering type variable where no progress can be made,\n-    /// `T: Copy` is used as a substitute for \"no drop glue\".\n-    ///\n-    /// NOTE: A limited form of `union U { ... }` was accepted in 1.19.0.\n-    (active, untagged_unions, \"1.13.0\", Some(55149), None),\n     /// Allows using the `#[used(linker)]` (or `#[used(compiler)]`) attribute.\n     (active, used_with_arg, \"1.60.0\", Some(93798), None),\n     /// Allows `extern \"wasm\" fn`"}, {"sha": "3b0f9a65e07f301ebac6c7492230c5ae2e46951a", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -180,6 +180,9 @@ declare_features! (\n     /// Allows using items which are missing stability attributes\n     (removed, unmarked_api, \"1.0.0\", None, None, None),\n     (removed, unsafe_no_drop_flag, \"1.0.0\", None, None, None),\n+    /// Allows `union` fields that don't implement `Copy` as long as they don't have any drop glue.\n+    (removed, untagged_unions, \"1.13.0\", Some(55149), None,\n+     Some(\"unions with `Copy` and `MaybeUninit` fields are stable; there is no intent to stabilize more\")),\n     /// Allows `#[unwind(..)]`.\n     ///\n     /// Permits specifying whether a function should permit unwinding or abort on unwind."}, {"sha": "a06213ca5f442340d3bb1c9605b859b677500bb1", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 66, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -13,13 +13,12 @@ use rustc_hir::{FieldDef, Generics, HirId, Item, ItemKind, TraitRef, Ty, TyKind,\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{AllowUnstable, DeprecationEntry, Index};\n-use rustc_middle::ty::{self, query::Providers, TyCtxt};\n+use rustc_middle::ty::{query::Providers, TyCtxt};\n use rustc_session::lint;\n use rustc_session::lint::builtin::{INEFFECTIVE_UNSTABLE_TRAIT_IMPL, USELESS_DEPRECATED};\n-use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n use std::cmp::Ordering;\n@@ -766,69 +765,6 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 }\n             }\n \n-            // There's no good place to insert stability check for non-Copy unions,\n-            // so semi-randomly perform it here in stability.rs\n-            hir::ItemKind::Union(..) if !self.tcx.features().untagged_unions => {\n-                let ty = self.tcx.type_of(item.def_id);\n-                let ty::Adt(adt_def, substs) = ty.kind() else { bug!() };\n-\n-                #[allow(rustc::usage_of_qualified_ty)] // `Ty` is `hir::Ty` here, we really want `ty::Ty`.\n-                fn allowed_union_field<'tcx>(\n-                    tcx: TyCtxt<'tcx>,\n-                    param_env: ty::ParamEnv<'tcx>,\n-                    ty: ty::Ty<'tcx>,\n-                ) -> bool {\n-                    // We don't just accept all !needs_drop fields, due to semver concerns.\n-                    match ty.kind() {\n-                        ty::Ref(..) => true, // references never drop (even mutable refs, which are non-Copy and hence fail the later check)\n-                        ty::Tuple(tys) => {\n-                            // allow tuples of allowed types\n-                            tys.iter().all(|ty| allowed_union_field(tcx, param_env, ty))\n-                        }\n-                        ty::Array(elem, _len) => {\n-                            // Like `Copy`, we do *not* special-case length 0.\n-                            allowed_union_field(tcx, param_env, *elem)\n-                        }\n-                        _ => {\n-                            // Fallback case: allow `ManuallyDrop` and things that are `Copy`.\n-                            ty.ty_adt_def().map_or(false, |adt_def| adt_def.is_manually_drop())\n-                                || ty.is_copy_modulo_regions(tcx.at(DUMMY_SP), param_env)\n-                        }\n-                    }\n-                }\n-\n-                // `allowed_union_field` determines which fields are allowed on stable.\n-                let param_env = self.tcx.param_env(item.def_id);\n-                for field in &adt_def.non_enum_variant().fields {\n-                    let field_ty = field.ty(self.tcx, substs);\n-                    if !allowed_union_field(self.tcx, param_env, field_ty) {\n-                        if field_ty.needs_drop(self.tcx, param_env) {\n-                            // Avoid duplicate error: This will error later anyway because fields\n-                            // that need drop are not allowed.\n-                            self.tcx.sess.delay_span_bug(\n-                                item.span,\n-                                \"union should have been rejected due to potentially dropping field\",\n-                            );\n-                        } else {\n-                            feature_err(\n-                                &self.tcx.sess.parse_sess,\n-                                sym::untagged_unions,\n-                                self.tcx.def_span(field.did),\n-                                \"unions with non-`Copy` fields other than `ManuallyDrop<T>`, \\\n-                                references, and tuples of such types are unstable\",\n-                            )\n-                            .emit();\n-                        }\n-                    } else {\n-                        // We allow this field. Make extra sure it does not drop.\n-                        assert!(\n-                            !field_ty.needs_drop(self.tcx, param_env),\n-                            \"we should accept no maybe-dropping union fields\"\n-                        );\n-                    }\n-                }\n-            }\n-\n             _ => (/* pass */),\n         }\n         intravisit::walk_item(self, item);"}, {"sha": "9c522807bf6ba668ec8a58e19b5142763e782e93", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -402,11 +402,37 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n     let item_type = tcx.type_of(item_def_id);\n     if let ty::Adt(def, substs) = item_type.kind() {\n         assert!(def.is_union());\n-        let fields = &def.non_enum_variant().fields;\n+\n+        fn allowed_union_field<'tcx>(\n+            ty: Ty<'tcx>,\n+            tcx: TyCtxt<'tcx>,\n+            param_env: ty::ParamEnv<'tcx>,\n+            span: Span,\n+        ) -> bool {\n+            // We don't just accept all !needs_drop fields, due to semver concerns.\n+            match ty.kind() {\n+                ty::Ref(..) => true, // references never drop (even mutable refs, which are non-Copy and hence fail the later check)\n+                ty::Tuple(tys) => {\n+                    // allow tuples of allowed types\n+                    tys.iter().all(|ty| allowed_union_field(ty, tcx, param_env, span))\n+                }\n+                ty::Array(elem, _len) => {\n+                    // Like `Copy`, we do *not* special-case length 0.\n+                    allowed_union_field(*elem, tcx, param_env, span)\n+                }\n+                _ => {\n+                    // Fallback case: allow `ManuallyDrop` and things that are `Copy`.\n+                    ty.ty_adt_def().map_or(false, |adt_def| adt_def.is_manually_drop())\n+                        || ty.is_copy_modulo_regions(tcx.at(span), param_env)\n+                }\n+            }\n+        }\n+\n         let param_env = tcx.param_env(item_def_id);\n-        for field in fields {\n+        for field in &def.non_enum_variant().fields {\n             let field_ty = field.ty(tcx, substs);\n-            if field_ty.needs_drop(tcx, param_env) {\n+\n+            if !allowed_union_field(field_ty, tcx, param_env, span) {\n                 let (field_span, ty_span) = match tcx.hir().get_if_local(field.did) {\n                     // We are currently checking the type this field came from, so it must be local.\n                     Some(Node::Field(field)) => (field.span, field.ty.span),\n@@ -433,6 +459,9 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n                 )\n                 .emit();\n                 return false;\n+            } else if field_ty.needs_drop(tcx, param_env) {\n+                // This should never happen. But we can get here e.g. in case of name resolution errors.\n+                tcx.sess.delay_span_bug(span, \"we should never accept maybe-dropping union fields\");\n             }\n         }\n     } else {"}, {"sha": "6e464f69510ec22be5f0f29b288a68f32551502c", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,8 +1,8 @@\n #![feature(associated_type_bounds)]\n #![feature(type_alias_impl_trait)]\n-#![feature(untagged_unions)]\n \n use std::iter;\n+use std::mem::ManuallyDrop;\n \n struct SI1<T: Iterator<Item: Copy, Item: Send>> {\n     //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n@@ -74,36 +74,36 @@ where\n \n union UI1<T: Iterator<Item: Copy, Item: Send>> {\n     //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-    f: T,\n+    f: ManuallyDrop<T>,\n }\n union UI2<T: Iterator<Item: Copy, Item: Copy>> {\n     //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-    f: T,\n+    f: ManuallyDrop<T>,\n }\n union UI3<T: Iterator<Item: 'static, Item: 'static>> {\n     //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-    f: T,\n+    f: ManuallyDrop<T>,\n }\n union UW1<T>\n where\n     T: Iterator<Item: Copy, Item: Send>,\n     //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n {\n-    f: T,\n+    f: ManuallyDrop<T>,\n }\n union UW2<T>\n where\n     T: Iterator<Item: Copy, Item: Copy>,\n     //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n {\n-    f: T,\n+    f: ManuallyDrop<T>,\n }\n union UW3<T>\n where\n     T: Iterator<Item: 'static, Item: 'static>,\n     //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n {\n-    f: T,\n+    f: ManuallyDrop<T>,\n }\n \n fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}"}, {"sha": "f26037f07076646be416144672c6cbe04dc154a2", "filename": "src/test/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,6 @@\n #![feature(associated_type_bounds)]\n-#![feature(untagged_unions)]\n+\n+use std::mem::ManuallyDrop;\n \n struct S1 { f: dyn Iterator<Item: Copy> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n@@ -17,12 +18,12 @@ enum E3 { V(dyn Iterator<Item: 'static>) }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n //~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)`\n \n-union U1 { f: dyn Iterator<Item: Copy> }\n+union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n //~| ERROR the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)`\n-union U2 { f: Box<dyn Iterator<Item: Copy>> }\n+union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-union U3 { f: dyn Iterator<Item: 'static> }\n+union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n //~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)`\n "}, {"sha": "978390fa71235526d8b3e9c1ef2d6a2abcd440af", "filename": "src/test/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,59 +1,59 @@\n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:4:29\n+  --> $DIR/inside-adt.rs:5:29\n    |\n LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:6:33\n+  --> $DIR/inside-adt.rs:7:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:8:29\n+  --> $DIR/inside-adt.rs:9:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:11:26\n+  --> $DIR/inside-adt.rs:12:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:14:30\n+  --> $DIR/inside-adt.rs:15:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:16:26\n+  --> $DIR/inside-adt.rs:17:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:20:28\n+  --> $DIR/inside-adt.rs:21:41\n    |\n-LL | union U1 { f: dyn Iterator<Item: Copy> }\n-   |                            ^^^^^^^^^^\n+LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n+   |                                         ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:23:32\n+  --> $DIR/inside-adt.rs:24:45\n    |\n-LL | union U2 { f: Box<dyn Iterator<Item: Copy>> }\n-   |                                ^^^^^^^^^^\n+LL | union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n+   |                                             ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:25:28\n+  --> $DIR/inside-adt.rs:26:41\n    |\n-LL | union U3 { f: dyn Iterator<Item: 'static> }\n-   |                            ^^^^^^^^^^^^^\n+LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n+   |                                         ^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:11:13\n+  --> $DIR/inside-adt.rs:12:13\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -71,7 +71,7 @@ LL | enum E1 { V(Box<dyn Iterator<Item: Copy>>) }\n    |             ++++                        +\n \n error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:16:13\n+  --> $DIR/inside-adt.rs:17:13\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -89,40 +89,42 @@ LL | enum E3 { V(Box<dyn Iterator<Item: 'static>>) }\n    |             ++++                           +\n \n error[E0277]: the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:20:15\n+  --> $DIR/inside-adt.rs:21:15\n    |\n-LL | union U1 { f: dyn Iterator<Item: Copy> }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n+   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Copy> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n+   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Copy> + 'static)>`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n    |\n-LL | union U1 { f: &dyn Iterator<Item: Copy> }\n+LL | union U1 { f: &ManuallyDrop<dyn Iterator<Item: Copy>> }\n    |               +\n help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n-LL | union U1 { f: Box<dyn Iterator<Item: Copy>> }\n-   |               ++++                        +\n+LL | union U1 { f: Box<ManuallyDrop<dyn Iterator<Item: Copy>>> }\n+   |               ++++                                      +\n \n error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:25:15\n+  --> $DIR/inside-adt.rs:26:15\n    |\n-LL | union U3 { f: dyn Iterator<Item: 'static> }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized> + 'static)`\n+   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Sized> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized> + 'static)`\n+   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Sized> + 'static)>`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n    |\n-LL | union U3 { f: &dyn Iterator<Item: 'static> }\n+LL | union U3 { f: &ManuallyDrop<dyn Iterator<Item: 'static>> }\n    |               +\n help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n-LL | union U3 { f: Box<dyn Iterator<Item: 'static>> }\n-   |               ++++                           +\n+LL | union U3 { f: Box<ManuallyDrop<dyn Iterator<Item: 'static>>> }\n+   |               ++++                                         +\n \n error: aborting due to 13 previous errors\n "}, {"sha": "46e5aef04031a260925fe57493c50b65737f467d", "filename": "src/test/ui/associated-type-bounds/union-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(associated_type_bounds)]\n-#![feature(untagged_unions)]\n \n #![allow(unused_assignments)]\n "}, {"sha": "d0eb28c57141177fe2b2ea28a5824b1bd1bf0a60", "filename": "src/test/ui/binding/issue-53114-safety-checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -3,9 +3,9 @@\n // captures the behavior of how `_` bindings are handled with respect to how we\n // flag expressions that are meant to request unsafe blocks.\n \n-#![feature(untagged_unions)]\n-\n+#[derive(Copy, Clone)]\n struct I(i64);\n+#[derive(Copy, Clone)]\n struct F(f64);\n \n union U { a: I, b: F }"}, {"sha": "4c96ccdb25aaa36db21841a5cf9448cede5ccc04", "filename": "src/test/ui/borrowck/borrowck-union-move-assign.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,31 +1,31 @@\n-#![feature(untagged_unions)]\n+use std::mem::ManuallyDrop;\n \n // Non-copy\n struct A;\n struct B;\n \n union U {\n-    a: A,\n-    b: B,\n+    a: ManuallyDrop<A>,\n+    b: ManuallyDrop<B>,\n }\n \n fn main() {\n     unsafe {\n         {\n-            let mut u = U { a: A };\n+            let mut u = U { a: ManuallyDrop::new(A) };\n             let a = u.a;\n             let a = u.a; //~ ERROR use of moved value: `u`\n         }\n         {\n-            let mut u = U { a: A };\n+            let mut u = U { a: ManuallyDrop::new(A) };\n             let a = u.a;\n-            u.a = A;\n+            u.a = ManuallyDrop::new(A);\n             let a = u.a; // OK\n         }\n         {\n-            let mut u = U { a: A };\n+            let mut u = U { a: ManuallyDrop::new(A) };\n             let a = u.a;\n-            u.b = B;\n+            u.b = ManuallyDrop::new(B);\n             let a = u.a; // OK\n         }\n     }"}, {"sha": "af6f6fac40870751bf31f418fd884ea977a8616d", "filename": "src/test/ui/borrowck/borrowck-union-move-assign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move-assign.rs:17:21\n    |\n-LL |             let mut u = U { a: A };\n+LL |             let mut u = U { a: ManuallyDrop::new(A) };\n    |                 ----- move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |             let a = u.a;\n    |                     --- value moved here"}, {"sha": "510547ad5bb74fbdab62fd3a692c6f01a053ae46", "filename": "src/test/ui/borrowck/borrowck-union-move.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,37 +1,37 @@\n-#![feature(untagged_unions)]\n+use std::mem::ManuallyDrop;\n \n #[derive(Clone, Copy)]\n struct Copy;\n struct NonCopy;\n \n union Unn {\n-    n1: NonCopy,\n-    n2: NonCopy,\n+    n1: ManuallyDrop<NonCopy>,\n+    n2: ManuallyDrop<NonCopy>,\n }\n union Ucc {\n     c1: Copy,\n     c2: Copy,\n }\n union Ucn {\n     c: Copy,\n-    n: NonCopy,\n+    n: ManuallyDrop<NonCopy>,\n }\n \n fn main() {\n     unsafe {\n         // 2 NonCopy\n         {\n-            let mut u = Unn { n1: NonCopy };\n+            let mut u = Unn { n1: ManuallyDrop::new(NonCopy) };\n             let a = u.n1;\n             let a = u.n1; //~ ERROR use of moved value: `u`\n         }\n         {\n-            let mut u = Unn { n1: NonCopy };\n+            let mut u = Unn { n1: ManuallyDrop::new(NonCopy) };\n             let a = u.n1;\n             let a = u; //~ ERROR use of moved value: `u`\n         }\n         {\n-            let mut u = Unn { n1: NonCopy };\n+            let mut u = Unn { n1: ManuallyDrop::new(NonCopy) };\n             let a = u.n1;\n             let a = u.n2; //~ ERROR use of moved value: `u`\n         }"}, {"sha": "731607fbdd1f7682c83db4a41ed11109f18f3ca0", "filename": "src/test/ui/borrowck/borrowck-union-move.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:26:21\n    |\n-LL |             let mut u = Unn { n1: NonCopy };\n+LL |             let mut u = Unn { n1: ManuallyDrop::new(NonCopy) };\n    |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here\n@@ -11,7 +11,7 @@ LL |             let a = u.n1;\n error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:31:21\n    |\n-LL |             let mut u = Unn { n1: NonCopy };\n+LL |             let mut u = Unn { n1: ManuallyDrop::new(NonCopy) };\n    |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here\n@@ -21,7 +21,7 @@ LL |             let a = u;\n error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:36:21\n    |\n-LL |             let mut u = Unn { n1: NonCopy };\n+LL |             let mut u = Unn { n1: ManuallyDrop::new(NonCopy) };\n    |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here"}, {"sha": "0bd2147f46331000feb45428c2451e58f59b3a98", "filename": "src/test/ui/borrowck/move-from-union-field-issue-66500.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,8 +1,6 @@\n // Moving from a reference/raw pointer should be an error, even when they're\n // the field of a union.\n \n-#![feature(untagged_unions)]\n-\n union Pointers {\n     a: &'static String,\n     b: &'static mut String,"}, {"sha": "70078582713c673f8d28c90690b6c19b2879d4dc", "filename": "src/test/ui/borrowck/move-from-union-field-issue-66500.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,23 +1,23 @@\n error[E0507]: cannot move out of `*u.a` which is behind a shared reference\n-  --> $DIR/move-from-union-field-issue-66500.rs:14:5\n+  --> $DIR/move-from-union-field-issue-66500.rs:12:5\n    |\n LL |     *u.a\n    |     ^^^^ move occurs because `*u.a` has type `String`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `*u.b` which is behind a mutable reference\n-  --> $DIR/move-from-union-field-issue-66500.rs:18:5\n+  --> $DIR/move-from-union-field-issue-66500.rs:16:5\n    |\n LL |     *u.b\n    |     ^^^^ move occurs because `*u.b` has type `String`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `*u.c` which is behind a raw pointer\n-  --> $DIR/move-from-union-field-issue-66500.rs:22:5\n+  --> $DIR/move-from-union-field-issue-66500.rs:20:5\n    |\n LL |     *u.c\n    |     ^^^^ move occurs because `*u.c` has type `String`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of `*u.d` which is behind a raw pointer\n-  --> $DIR/move-from-union-field-issue-66500.rs:26:5\n+  --> $DIR/move-from-union-field-issue-66500.rs:24:5\n    |\n LL |     *u.d\n    |     ^^^^ move occurs because `*u.d` has type `String`, which does not implement the `Copy` trait"}, {"sha": "d50e74a16ec36b89254586da26fbaeab6ac278e3", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/invalid-union.rs:40:1\n+  --> $DIR/invalid-union.rs:41:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^ constructing invalid value at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\n@@ -10,7 +10,7 @@ LL | fn main() {\n            }\n \n error: erroneous constant used\n-  --> $DIR/invalid-union.rs:41:25\n+  --> $DIR/invalid-union.rs:42:25\n    |\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n@@ -24,7 +24,7 @@ error: aborting due to 2 previous errors\n For more information about this error, try `rustc --explain E0080`.\n Future incompatibility report: Future breakage diagnostic:\n error: erroneous constant used\n-  --> $DIR/invalid-union.rs:41:25\n+  --> $DIR/invalid-union.rs:42:25\n    |\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors"}, {"sha": "efeddf75cb5571f2f155dbe280c11d63f4cd2c80", "filename": "src/test/ui/consts/invalid-union.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -9,8 +9,9 @@\n // build-fail\n // stderr-per-bitwidth\n #![feature(const_mut_refs)]\n-#![feature(untagged_unions)]\n+\n use std::cell::Cell;\n+use std::mem::ManuallyDrop;\n \n #[repr(C)]\n struct S {\n@@ -25,7 +26,7 @@ enum E {\n }\n \n union U {\n-    cell: Cell<u32>,\n+    cell: ManuallyDrop<Cell<u32>>,\n }\n \n const C: S = {"}, {"sha": "11c019be96432edb3158c50afd94a31a6e77b8f2", "filename": "src/test/ui/consts/qualif-union.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,18 +1,19 @@\n // Checks that unions use type based qualification. Regression test for issue #90268.\n-#![feature(untagged_unions)]\n+\n use std::cell::Cell;\n+use std::mem::ManuallyDrop;\n \n-union U { i: u32, c: Cell<u32> }\n+union U { i: u32, c: ManuallyDrop<Cell<u32>> }\n \n-const C1: Cell<u32> = {\n-    unsafe { U { c: Cell::new(0) }.c }\n+const C1: ManuallyDrop<Cell<u32>> = {\n+    unsafe { U { c: ManuallyDrop::new(Cell::new(0)) }.c }\n };\n \n-const C2: Cell<u32> = {\n+const C2: ManuallyDrop<Cell<u32>> = {\n     unsafe { U { i : 0 }.c }\n };\n \n-const C3: Cell<u32> = {\n+const C3: ManuallyDrop<Cell<u32>> = {\n     let mut u = U { i: 0 };\n     u.i = 1;\n     unsafe { u.c }"}, {"sha": "8ec68ada048a5377a7b0a28dde0ec2bc6bdea147", "filename": "src/test/ui/consts/qualif-union.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/qualif-union.rs:27:26\n+  --> $DIR/qualif-union.rs:28:26\n    |\n LL |     let _: &'static _ = &C1;\n    |            ----------    ^^ creates a temporary which is freed while still in use\n@@ -10,7 +10,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/qualif-union.rs:28:26\n+  --> $DIR/qualif-union.rs:29:26\n    |\n LL |     let _: &'static _ = &C2;\n    |            ----------    ^^ creates a temporary which is freed while still in use\n@@ -21,7 +21,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/qualif-union.rs:29:26\n+  --> $DIR/qualif-union.rs:30:26\n    |\n LL |     let _: &'static _ = &C3;\n    |            ----------    ^^ creates a temporary which is freed while still in use\n@@ -32,7 +32,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/qualif-union.rs:30:26\n+  --> $DIR/qualif-union.rs:31:26\n    |\n LL |     let _: &'static _ = &C4;\n    |            ----------    ^^ creates a temporary which is freed while still in use\n@@ -43,7 +43,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/qualif-union.rs:31:26\n+  --> $DIR/qualif-union.rs:32:26\n    |\n LL |     let _: &'static _ = &C5;\n    |            ----------    ^^ creates a temporary which is freed while still in use"}, {"sha": "4e020327447ffed8d1fcdf0929aa1bb8358797ab", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Zsave-analysis\n // This is also a regression test for #69415 and the above flag is needed.\n \n-#![feature(untagged_unions)]\n+use std::mem::ManuallyDrop;\n \n trait Tr1 { type As1: Copy; }\n trait Tr2 { type As2: Copy; }\n@@ -36,9 +36,9 @@ enum _En1<T: Tr1<As1: Tr2>> {\n \n union _Un1<T: Tr1<As1: Tr2>> {\n //~^ ERROR associated type bounds are unstable\n-    outest: std::mem::ManuallyDrop<T>,\n-    outer: T::As1,\n-    inner: <T::As1 as Tr2>::As2,\n+    outest: ManuallyDrop<T>,\n+    outer: ManuallyDrop<T::As1>,\n+    inner: ManuallyDrop<<T::As1 as Tr2>::As2>,\n }\n \n type _TaWhere1<T> where T: Iterator<Item: Copy> = T;"}, {"sha": "75ba482717460f9140b368bff1af44b3664d4258", "filename": "src/test/ui/nll/issue-55651.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fnll%2Fissue-55651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Fnll%2Fissue-55651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55651.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,27 +1,27 @@\n // check-pass\n \n-#![feature(untagged_unions)]\n+use std::mem::ManuallyDrop;\n \n struct A;\n struct B;\n \n union U {\n-    a: A,\n-    b: B,\n+    a: ManuallyDrop<A>,\n+    b: ManuallyDrop<B>,\n }\n \n fn main() {\n     unsafe {\n         {\n-            let mut u = U { a: A };\n+            let mut u = U { a: ManuallyDrop::new(A) };\n             let a = u.a;\n-            u.a = A;\n+            u.a = ManuallyDrop::new(A);\n             let a = u.a; // OK\n         }\n         {\n-            let mut u = U { a: A };\n+            let mut u = U { a: ManuallyDrop::new(A) };\n             let a = u.a;\n-            u.b = B;\n+            u.b = ManuallyDrop::new(B);\n             let a = u.a; // OK\n         }\n     }"}, {"sha": "bef5c7d8c62fcb49902567fb535e1928051cf003", "filename": "src/test/ui/repr/repr-packed-contains-align.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,16 +1,19 @@\n-#![feature(untagged_unions)]\n #![allow(dead_code)]\n \n #[repr(align(16))]\n+#[derive(Clone, Copy)]\n struct SA(i32);\n \n+#[derive(Clone, Copy)]\n struct SB(SA);\n \n #[repr(align(16))]\n+#[derive(Clone, Copy)]\n union UA {\n     i: i32\n }\n \n+#[derive(Clone, Copy)]\n union UB {\n     a: UA\n }"}, {"sha": "4c3a960cad2a6f2d677992774db0f63cfa565412", "filename": "src/test/ui/repr/repr-packed-contains-align.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,5 @@\n error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n-  --> $DIR/repr-packed-contains-align.rs:19:1\n+  --> $DIR/repr-packed-contains-align.rs:22:1\n    |\n LL | struct SC(SA);\n    | ^^^^^^^^^\n@@ -11,7 +11,7 @@ LL | struct SA(i32);\n    | ^^^^^^^^^\n \n error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n-  --> $DIR/repr-packed-contains-align.rs:22:1\n+  --> $DIR/repr-packed-contains-align.rs:25:1\n    |\n LL | struct SD(SB);\n    | ^^^^^^^^^\n@@ -22,86 +22,86 @@ note: `SA` has a `#[repr(align)]` attribute\n LL | struct SA(i32);\n    | ^^^^^^^^^\n note: `SD` contains a field of type `SB`\n-  --> $DIR/repr-packed-contains-align.rs:22:11\n+  --> $DIR/repr-packed-contains-align.rs:25:11\n    |\n LL | struct SD(SB);\n    |           ^^\n note: ...which contains a field of type `SA`\n-  --> $DIR/repr-packed-contains-align.rs:7:11\n+  --> $DIR/repr-packed-contains-align.rs:8:11\n    |\n LL | struct SB(SA);\n    |           ^^\n \n error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n-  --> $DIR/repr-packed-contains-align.rs:25:1\n+  --> $DIR/repr-packed-contains-align.rs:28:1\n    |\n LL | struct SE(UA);\n    | ^^^^^^^^^\n    |\n note: `UA` has a `#[repr(align)]` attribute\n-  --> $DIR/repr-packed-contains-align.rs:10:1\n+  --> $DIR/repr-packed-contains-align.rs:12:1\n    |\n LL | union UA {\n    | ^^^^^^^^\n \n error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n-  --> $DIR/repr-packed-contains-align.rs:28:1\n+  --> $DIR/repr-packed-contains-align.rs:31:1\n    |\n LL | struct SF(UB);\n    | ^^^^^^^^^\n    |\n note: `UA` has a `#[repr(align)]` attribute\n-  --> $DIR/repr-packed-contains-align.rs:10:1\n+  --> $DIR/repr-packed-contains-align.rs:12:1\n    |\n LL | union UA {\n    | ^^^^^^^^\n note: `SF` contains a field of type `UB`\n-  --> $DIR/repr-packed-contains-align.rs:28:11\n+  --> $DIR/repr-packed-contains-align.rs:31:11\n    |\n LL | struct SF(UB);\n    |           ^^\n note: ...which contains a field of type `UA`\n-  --> $DIR/repr-packed-contains-align.rs:15:5\n+  --> $DIR/repr-packed-contains-align.rs:18:5\n    |\n LL |     a: UA\n    |     ^\n \n error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n-  --> $DIR/repr-packed-contains-align.rs:31:1\n+  --> $DIR/repr-packed-contains-align.rs:34:1\n    |\n LL | union UC {\n    | ^^^^^^^^\n    |\n note: `UA` has a `#[repr(align)]` attribute\n-  --> $DIR/repr-packed-contains-align.rs:10:1\n+  --> $DIR/repr-packed-contains-align.rs:12:1\n    |\n LL | union UA {\n    | ^^^^^^^^\n \n error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n-  --> $DIR/repr-packed-contains-align.rs:36:1\n+  --> $DIR/repr-packed-contains-align.rs:39:1\n    |\n LL | union UD {\n    | ^^^^^^^^\n    |\n note: `UA` has a `#[repr(align)]` attribute\n-  --> $DIR/repr-packed-contains-align.rs:10:1\n+  --> $DIR/repr-packed-contains-align.rs:12:1\n    |\n LL | union UA {\n    | ^^^^^^^^\n note: `UD` contains a field of type `UB`\n-  --> $DIR/repr-packed-contains-align.rs:37:5\n+  --> $DIR/repr-packed-contains-align.rs:40:5\n    |\n LL |     n: UB\n    |     ^\n note: ...which contains a field of type `UA`\n-  --> $DIR/repr-packed-contains-align.rs:15:5\n+  --> $DIR/repr-packed-contains-align.rs:18:5\n    |\n LL |     a: UA\n    |     ^\n \n error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n-  --> $DIR/repr-packed-contains-align.rs:41:1\n+  --> $DIR/repr-packed-contains-align.rs:44:1\n    |\n LL | union UE {\n    | ^^^^^^^^\n@@ -113,7 +113,7 @@ LL | struct SA(i32);\n    | ^^^^^^^^^\n \n error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n-  --> $DIR/repr-packed-contains-align.rs:46:1\n+  --> $DIR/repr-packed-contains-align.rs:49:1\n    |\n LL | union UF {\n    | ^^^^^^^^\n@@ -124,12 +124,12 @@ note: `SA` has a `#[repr(align)]` attribute\n LL | struct SA(i32);\n    | ^^^^^^^^^\n note: `UF` contains a field of type `SB`\n-  --> $DIR/repr-packed-contains-align.rs:47:5\n+  --> $DIR/repr-packed-contains-align.rs:50:5\n    |\n LL |     n: SB\n    |     ^\n note: ...which contains a field of type `SA`\n-  --> $DIR/repr-packed-contains-align.rs:7:11\n+  --> $DIR/repr-packed-contains-align.rs:8:11\n    |\n LL | struct SB(SA);\n    |           ^^"}, {"sha": "871208b5ba7859a0b5e2b0831d7ed4c3585f6d7d", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-union.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,11 +1,11 @@\n #![feature(rustc_attrs)]\n-#![feature(untagged_unions)]\n \n #[rustc_outlives]\n union Foo<'b, U: Copy> { //~ ERROR rustc_outlives\n     bar: Bar<'b, U>\n }\n \n+#[derive(Clone, Copy)]\n union Bar<'a, T: Copy> where T: 'a {\n     x: &'a (),\n     y: T,"}, {"sha": "16b64bdc29dd32282ef4176121a992f84c1bb37b", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-union.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,5 @@\n error: rustc_outlives\n-  --> $DIR/explicit-union.rs:5:1\n+  --> $DIR/explicit-union.rs:4:1\n    |\n LL | union Foo<'b, U: Copy> {\n    | ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "27ebd0b54db5ddd5867500e009e22cce1e1fb782", "filename": "src/test/ui/rfc-2093-infer-outlives/nested-union.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,12 +1,12 @@\n #![feature(rustc_attrs)]\n-#![feature(untagged_unions)]\n \n #[rustc_outlives]\n union Foo<'a, T: Copy> { //~ ERROR rustc_outlives\n     field1: Bar<'a, T>\n }\n \n // Type U needs to outlive lifetime 'b\n+#[derive(Clone, Copy)]\n union Bar<'b, U: Copy> {\n     field2: &'b U\n }"}, {"sha": "a785c63ce3d998269276ebe03b2539872dc9a913", "filename": "src/test/ui/rfc-2093-infer-outlives/nested-union.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,5 @@\n error: rustc_outlives\n-  --> $DIR/nested-union.rs:5:1\n+  --> $DIR/nested-union.rs:4:1\n    |\n LL | union Foo<'a, T: Copy> {\n    | ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "216f7372a1cffd99c0dd1f09f20700bfc6f8bbe6", "filename": "src/test/ui/union/field_checks.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Ffield_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Ffield_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Ffield_checks.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -25,8 +25,8 @@ union U3 {\n     a: String, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n-union U32 { // field that does not drop but is not `Copy`, either -- this is the real feature gate test!\n-    a: std::cell::RefCell<i32>, //~ ERROR unions with non-`Copy` fields other than `ManuallyDrop<T>`, references, and tuples of such types are unstable\n+union U32 { // field that does not drop but is not `Copy`, either\n+    a: std::cell::RefCell<i32>, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n union U4<T> {", "previous_filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.rs"}, {"sha": "0e0e545b01a46be869df7747ca4c0b5bea1c3c21", "filename": "src/test/ui/union/field_checks.stderr", "status": "renamed", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Ffield_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Ffield_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Ffield_checks.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,14 +1,5 @@\n-error[E0658]: unions with non-`Copy` fields other than `ManuallyDrop<T>`, references, and tuples of such types are unstable\n-  --> $DIR/feature-gate-untagged_unions.rs:29:5\n-   |\n-LL |     a: std::cell::RefCell<i32>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n-   = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n-\n error[E0740]: unions cannot contain fields that may need dropping\n-  --> $DIR/feature-gate-untagged_unions.rs:25:5\n+  --> $DIR/field_checks.rs:25:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n@@ -20,7 +11,19 @@ LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n error[E0740]: unions cannot contain fields that may need dropping\n-  --> $DIR/feature-gate-untagged_unions.rs:33:5\n+  --> $DIR/field_checks.rs:29:5\n+   |\n+LL |     a: std::cell::RefCell<i32>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   |\n+LL |     a: std::mem::ManuallyDrop<std::cell::RefCell<i32>>,\n+   |        +++++++++++++++++++++++                       +\n+\n+error[E0740]: unions cannot contain fields that may need dropping\n+  --> $DIR/field_checks.rs:33:5\n    |\n LL |     a: T,\n    |     ^^^^\n@@ -32,7 +35,7 @@ LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +\n \n error[E0740]: unions cannot contain fields that may need dropping\n-  --> $DIR/feature-gate-untagged_unions.rs:45:5\n+  --> $DIR/field_checks.rs:45:5\n    |\n LL |     nest: U5,\n    |     ^^^^^^^^\n@@ -45,5 +48,4 @@ LL |     nest: std::mem::ManuallyDrop<U5>,\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0658, E0740.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0740`.", "previous_filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.stderr"}, {"sha": "4dfdc606bb4091333fc6cf2a03934516ee8ffad1", "filename": "src/test/ui/union/issue-41073.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Fissue-41073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Fissue-41073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-41073.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,3 @@\n-#![feature(untagged_unions)]\n-\n union Test {\n     a: A, //~ ERROR unions cannot contain fields that may need dropping\n     b: B"}, {"sha": "b3887fa0f90be86b8b01d829d3f408cb9f738909", "filename": "src/test/ui/union/issue-41073.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,5 @@\n error[E0740]: unions cannot contain fields that may need dropping\n-  --> $DIR/issue-41073.rs:4:5\n+  --> $DIR/issue-41073.rs:2:5\n    |\n LL |     a: A,\n    |     ^^^^"}, {"sha": "ca02de4c61bb8d660b4b942736cea88ae12c0f1c", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.mirunsafeck.stderr", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.mirunsafeck.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,49 +1,69 @@\n-error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0`)\n+error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x`)\n   --> $DIR/union-borrow-move-parent-sibling.rs:56:13\n    |\n-LL |     let a = &mut u.x.0;\n-   |             ---------- mutable borrow occurs here (via `u.x.0`)\n+LL |     let a = &mut (*u.x).0;\n+   |                    --- mutable borrow occurs here (via `u.x`)\n LL |     let b = &u.y;\n-   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x.0` -- occurs here\n+   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x` -- occurs here\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n    |\n-   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0`\n+   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x`\n+\n+error[E0507]: cannot move out of dereference of `ManuallyDrop<((MockVec<u8>, MockVec<u8>), MockVec<u8>)>`\n+  --> $DIR/union-borrow-move-parent-sibling.rs:62:13\n+   |\n+LL |     let a = u.x.0;\n+   |             ^^^^^\n+   |             |\n+   |             move occurs because value has type `(MockVec<u8>, MockVec<u8>)`, which does not implement the `Copy` trait\n+   |             help: consider borrowing here: `&u.x.0`\n \n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:63:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:64:13\n    |\n-LL |     let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n+LL |     let u = U { x: ManuallyDrop::new(((MockVec::new(), MockVec::new()), MockVec::new())) };\n    |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = u.x.0;\n-   |             ----- value moved here\n+LL |     let a = u.x;\n+   |             --- value moved here\n LL |     let b = u.y;\n    |             ^^^ value used here after move\n \n-error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0.0`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:69:13\n+error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x`)\n+  --> $DIR/union-borrow-move-parent-sibling.rs:70:13\n    |\n-LL |     let a = &mut (u.x.0).0;\n-   |             -------------- mutable borrow occurs here (via `u.x.0.0`)\n+LL |     let a = &mut ((*u.x).0).0;\n+   |                     --- mutable borrow occurs here (via `u.x`)\n LL |     let b = &u.y;\n-   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x.0.0` -- occurs here\n+   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x` -- occurs here\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n    |\n-   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0.0`\n+   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x`\n \n-error[E0382]: use of moved value: `u`\n+error[E0507]: cannot move out of dereference of `ManuallyDrop<((MockVec<u8>, MockVec<u8>), MockVec<u8>)>`\n   --> $DIR/union-borrow-move-parent-sibling.rs:76:13\n    |\n-LL |     let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n+LL |     let a = (u.x.0).0;\n+   |             ^^^^^^^^^\n+   |             |\n+   |             move occurs because value has type `MockVec<u8>`, which does not implement the `Copy` trait\n+   |             help: consider borrowing here: `&(u.x.0).0`\n+\n+error[E0382]: use of moved value: `u`\n+  --> $DIR/union-borrow-move-parent-sibling.rs:78:13\n+   |\n+LL |     let u = U { x: ManuallyDrop::new(((MockVec::new(), MockVec::new()), MockVec::new())) };\n    |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = (u.x.0).0;\n-   |             --------- value moved here\n+LL |     let a = u.x;\n+   |             --- value moved here\n LL |     let b = u.y;\n    |             ^^^ value used here after move\n \n error[E0502]: cannot borrow `u` (via `u.x`) as immutable because it is also borrowed as mutable (via `u.y`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:82:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:84:13\n    |\n LL |     let a = &mut *u.y;\n    |                   --- mutable borrow occurs here (via `u.y`)\n@@ -54,7 +74,7 @@ LL |     use_borrow(a);\n    |\n    = note: `u.x` is a field of the union `U`, so it overlaps the field `u.y`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0382, E0502.\n+Some errors have detailed explanations: E0382, E0502, E0507.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "83781c5e55092f04f64172d185261d1749abb57d", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,10 +1,10 @@\n // revisions: mirunsafeck thirunsafeck\n // [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n-#![feature(untagged_unions)]\n #![allow(unused)]\n \n use std::ops::{Deref, DerefMut};\n+use std::mem::ManuallyDrop;\n \n #[derive(Default)]\n struct MockBox<T> {\n@@ -44,47 +44,49 @@ impl<T> DerefMut for MockVec<T> {\n \n \n union U {\n-    x: ((MockVec<u8>, MockVec<u8>), MockVec<u8>),\n-    y: MockBox<MockVec<u8>>,\n+    x: ManuallyDrop<((MockVec<u8>, MockVec<u8>), MockVec<u8>)>,\n+    y: ManuallyDrop<MockBox<MockVec<u8>>>,\n }\n \n fn use_borrow<T>(_: &T) {}\n \n unsafe fn parent_sibling_borrow() {\n-    let mut u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n-    let a = &mut u.x.0;\n+    let mut u = U { x: ManuallyDrop::new(((MockVec::new(), MockVec::new()), MockVec::new())) };\n+    let a = &mut (*u.x).0;\n     let b = &u.y; //~ ERROR cannot borrow `u` (via `u.y`)\n     use_borrow(a);\n }\n \n unsafe fn parent_sibling_move() {\n-    let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n-    let a = u.x.0;\n+    let u = U { x: ManuallyDrop::new(((MockVec::new(), MockVec::new()), MockVec::new())) };\n+    let a = u.x.0; //~ERROR cannot move out of dereference\n+    let a = u.x;\n     let b = u.y; //~ ERROR use of moved value: `u`\n }\n \n unsafe fn grandparent_sibling_borrow() {\n-    let mut u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n-    let a = &mut (u.x.0).0;\n+    let mut u = U { x: ManuallyDrop::new(((MockVec::new(), MockVec::new()), MockVec::new())) };\n+    let a = &mut ((*u.x).0).0;\n     let b = &u.y; //~ ERROR cannot borrow `u` (via `u.y`)\n     use_borrow(a);\n }\n \n unsafe fn grandparent_sibling_move() {\n-    let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n-    let a = (u.x.0).0;\n+    let u = U { x: ManuallyDrop::new(((MockVec::new(), MockVec::new()), MockVec::new())) };\n+    let a = (u.x.0).0; //~ERROR cannot move out of dereference\n+    let a = u.x;\n     let b = u.y; //~ ERROR use of moved value: `u`\n }\n \n unsafe fn deref_sibling_borrow() {\n-    let mut u = U { y: MockBox::default() };\n+    let mut u = U { y: ManuallyDrop::new(MockBox::default()) };\n     let a = &mut *u.y;\n     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n     use_borrow(a);\n }\n \n unsafe fn deref_sibling_move() {\n-    let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n+    let u = U { x: ManuallyDrop::new(((MockVec::new(), MockVec::new()), MockVec::new())) };\n     // No way to test deref-move without Box in union\n     // let a = *u.y;\n     // let b = u.x; ERROR use of moved value: `u`"}, {"sha": "ca02de4c61bb8d660b4b942736cea88ae12c0f1c", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.thirunsafeck.stderr", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.thirunsafeck.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,49 +1,69 @@\n-error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0`)\n+error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x`)\n   --> $DIR/union-borrow-move-parent-sibling.rs:56:13\n    |\n-LL |     let a = &mut u.x.0;\n-   |             ---------- mutable borrow occurs here (via `u.x.0`)\n+LL |     let a = &mut (*u.x).0;\n+   |                    --- mutable borrow occurs here (via `u.x`)\n LL |     let b = &u.y;\n-   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x.0` -- occurs here\n+   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x` -- occurs here\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n    |\n-   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0`\n+   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x`\n+\n+error[E0507]: cannot move out of dereference of `ManuallyDrop<((MockVec<u8>, MockVec<u8>), MockVec<u8>)>`\n+  --> $DIR/union-borrow-move-parent-sibling.rs:62:13\n+   |\n+LL |     let a = u.x.0;\n+   |             ^^^^^\n+   |             |\n+   |             move occurs because value has type `(MockVec<u8>, MockVec<u8>)`, which does not implement the `Copy` trait\n+   |             help: consider borrowing here: `&u.x.0`\n \n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:63:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:64:13\n    |\n-LL |     let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n+LL |     let u = U { x: ManuallyDrop::new(((MockVec::new(), MockVec::new()), MockVec::new())) };\n    |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = u.x.0;\n-   |             ----- value moved here\n+LL |     let a = u.x;\n+   |             --- value moved here\n LL |     let b = u.y;\n    |             ^^^ value used here after move\n \n-error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0.0`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:69:13\n+error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x`)\n+  --> $DIR/union-borrow-move-parent-sibling.rs:70:13\n    |\n-LL |     let a = &mut (u.x.0).0;\n-   |             -------------- mutable borrow occurs here (via `u.x.0.0`)\n+LL |     let a = &mut ((*u.x).0).0;\n+   |                     --- mutable borrow occurs here (via `u.x`)\n LL |     let b = &u.y;\n-   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x.0.0` -- occurs here\n+   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x` -- occurs here\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n    |\n-   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0.0`\n+   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x`\n \n-error[E0382]: use of moved value: `u`\n+error[E0507]: cannot move out of dereference of `ManuallyDrop<((MockVec<u8>, MockVec<u8>), MockVec<u8>)>`\n   --> $DIR/union-borrow-move-parent-sibling.rs:76:13\n    |\n-LL |     let u = U { x: ((MockVec::new(), MockVec::new()), MockVec::new()) };\n+LL |     let a = (u.x.0).0;\n+   |             ^^^^^^^^^\n+   |             |\n+   |             move occurs because value has type `MockVec<u8>`, which does not implement the `Copy` trait\n+   |             help: consider borrowing here: `&(u.x.0).0`\n+\n+error[E0382]: use of moved value: `u`\n+  --> $DIR/union-borrow-move-parent-sibling.rs:78:13\n+   |\n+LL |     let u = U { x: ManuallyDrop::new(((MockVec::new(), MockVec::new()), MockVec::new())) };\n    |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = (u.x.0).0;\n-   |             --------- value moved here\n+LL |     let a = u.x;\n+   |             --- value moved here\n LL |     let b = u.y;\n    |             ^^^ value used here after move\n \n error[E0502]: cannot borrow `u` (via `u.x`) as immutable because it is also borrowed as mutable (via `u.y`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:82:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:84:13\n    |\n LL |     let a = &mut *u.y;\n    |                   --- mutable borrow occurs here (via `u.y`)\n@@ -54,7 +74,7 @@ LL |     use_borrow(a);\n    |\n    = note: `u.x` is a field of the union `U`, so it overlaps the field `u.y`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0382, E0502.\n+Some errors have detailed explanations: E0382, E0502, E0507.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "4b333631ec0f7cc53439427f171f44c0cffbe6d4", "filename": "src/test/ui/union/union-custom-drop.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6dfede3b9d802771ea9f879808a9ac99060c099f/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dfede3b9d802771ea9f879808a9ac99060c099f/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.rs?ref=6dfede3b9d802771ea9f879808a9ac99060c099f", "patch": "@@ -1,19 +0,0 @@\n-// test for a union with a field that's a union with a manual impl Drop\n-// Ensures we do not treat all unions as not having any drop glue.\n-\n-#![feature(untagged_unions)]\n-\n-union Foo {\n-    bar: Bar, //~ ERROR unions cannot contain fields that may need dropping\n-}\n-\n-union Bar {\n-    a: i32,\n-    b: u32,\n-}\n-\n-impl Drop for Bar {\n-    fn drop(&mut self) {}\n-}\n-\n-fn main() {}"}, {"sha": "b5579eeef09777d587c271cf372a28e9ce264f27", "filename": "src/test/ui/union/union-custom-drop.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6dfede3b9d802771ea9f879808a9ac99060c099f/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dfede3b9d802771ea9f879808a9ac99060c099f/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr?ref=6dfede3b9d802771ea9f879808a9ac99060c099f", "patch": "@@ -1,15 +0,0 @@\n-error[E0740]: unions cannot contain fields that may need dropping\n-  --> $DIR/union-custom-drop.rs:7:5\n-   |\n-LL |     bar: Bar,\n-   |     ^^^^^^^^\n-   |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n-   |\n-LL |     bar: std::mem::ManuallyDrop<Bar>,\n-   |          +++++++++++++++++++++++   +\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0740`."}, {"sha": "be5e60ab88a5902b3baca89c4239db94340361a0", "filename": "src/test/ui/union/union-deref.mirunsafeck.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-deref.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-deref.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.mirunsafeck.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,5 @@\n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:17:14\n+  --> $DIR/union-deref.rs:16:14\n    |\n LL |     unsafe { u.f.0 = Vec::new() };\n    |              ^^^\n@@ -8,7 +8,7 @@ LL |     unsafe { u.f.0 = Vec::new() };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:19:19\n+  --> $DIR/union-deref.rs:18:19\n    |\n LL |     unsafe { &mut u.f.0 };\n    |                   ^^^\n@@ -17,7 +17,7 @@ LL |     unsafe { &mut u.f.0 };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:21:14\n+  --> $DIR/union-deref.rs:20:14\n    |\n LL |     unsafe { u.f.0.push(0) };\n    |              ^^^\n@@ -26,7 +26,7 @@ LL |     unsafe { u.f.0.push(0) };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:25:14\n+  --> $DIR/union-deref.rs:24:14\n    |\n LL |     unsafe { u.f.0.0 = Vec::new() };\n    |              ^^^^^\n@@ -35,7 +35,7 @@ LL |     unsafe { u.f.0.0 = Vec::new() };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:27:19\n+  --> $DIR/union-deref.rs:26:19\n    |\n LL |     unsafe { &mut u.f.0.0 };\n    |                   ^^^^^\n@@ -44,7 +44,7 @@ LL |     unsafe { &mut u.f.0.0 };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:29:14\n+  --> $DIR/union-deref.rs:28:14\n    |\n LL |     unsafe { u.f.0.0.push(0) };\n    |              ^^^^^"}, {"sha": "5aa28d93f96edfd786c3d078a669d16ecb785c58", "filename": "src/test/ui/union/union-deref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -3,7 +3,6 @@\n \n //! Test the part of RFC 2514 that is about not applying `DerefMut` coercions\n //! of union fields.\n-#![feature(untagged_unions)]\n \n use std::mem::ManuallyDrop;\n "}, {"sha": "be5e60ab88a5902b3baca89c4239db94340361a0", "filename": "src/test/ui/union/union-deref.thirunsafeck.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-deref.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-deref.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.thirunsafeck.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,5 @@\n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:17:14\n+  --> $DIR/union-deref.rs:16:14\n    |\n LL |     unsafe { u.f.0 = Vec::new() };\n    |              ^^^\n@@ -8,7 +8,7 @@ LL |     unsafe { u.f.0 = Vec::new() };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:19:19\n+  --> $DIR/union-deref.rs:18:19\n    |\n LL |     unsafe { &mut u.f.0 };\n    |                   ^^^\n@@ -17,7 +17,7 @@ LL |     unsafe { &mut u.f.0 };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:21:14\n+  --> $DIR/union-deref.rs:20:14\n    |\n LL |     unsafe { u.f.0.push(0) };\n    |              ^^^\n@@ -26,7 +26,7 @@ LL |     unsafe { u.f.0.push(0) };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:25:14\n+  --> $DIR/union-deref.rs:24:14\n    |\n LL |     unsafe { u.f.0.0 = Vec::new() };\n    |              ^^^^^\n@@ -35,7 +35,7 @@ LL |     unsafe { u.f.0.0 = Vec::new() };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:27:19\n+  --> $DIR/union-deref.rs:26:19\n    |\n LL |     unsafe { &mut u.f.0.0 };\n    |                   ^^^^^\n@@ -44,7 +44,7 @@ LL |     unsafe { &mut u.f.0.0 };\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n-  --> $DIR/union-deref.rs:29:14\n+  --> $DIR/union-deref.rs:28:14\n    |\n LL |     unsafe { u.f.0.0.push(0) };\n    |              ^^^^^"}, {"sha": "53050cf539eafc05a5a02403c66a2109616f6796", "filename": "src/test/ui/union/union-move.mirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -27,7 +27,7 @@ LL |         move_out(x.f1_nocopy);\n    |                  ^^^^^^^^^^^\n    |                  |\n    |                  cannot move out of here\n-   |                  move occurs because `x.f1_nocopy` has type `RefCell<i32>`, which does not implement the `Copy` trait\n+   |                  move occurs because `x.f1_nocopy` has type `ManuallyDrop<RefCell<i32>>`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b8b1ac8046a03533d036e94d316c31e66e381490", "filename": "src/test/ui/union/union-move.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -3,20 +3,20 @@\n \n //! Test the behavior of moving out of non-`Copy` union fields.\n //! Avoid types that `Drop`, we want to focus on moving.\n-#![feature(untagged_unions)]\n \n use std::cell::RefCell;\n+use std::mem::ManuallyDrop;\n \n fn move_out<T>(x: T) {}\n \n union U1 {\n-    f1_nocopy: RefCell<i32>,\n-    f2_nocopy: RefCell<i32>,\n+    f1_nocopy: ManuallyDrop<RefCell<i32>>,\n+    f2_nocopy: ManuallyDrop<RefCell<i32>>,\n     f3_copy: i32,\n }\n \n union U2 {\n-    f1_nocopy: RefCell<i32>,\n+    f1_nocopy: ManuallyDrop<RefCell<i32>>,\n }\n impl Drop for U2 {\n     fn drop(&mut self) {}"}, {"sha": "53050cf539eafc05a5a02403c66a2109616f6796", "filename": "src/test/ui/union/union-move.thirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -27,7 +27,7 @@ LL |         move_out(x.f1_nocopy);\n    |                  ^^^^^^^^^^^\n    |                  |\n    |                  cannot move out of here\n-   |                  move occurs because `x.f1_nocopy` has type `RefCell<i32>`, which does not implement the `Copy` trait\n+   |                  move occurs because `x.f1_nocopy` has type `ManuallyDrop<RefCell<i32>>`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "afa73857ac2a5546c0a0d63d6ce5c8011ba8e623", "filename": "src/test/ui/union/union-nonrepresentable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,8 +1,7 @@\n-#![feature(untagged_unions)]\n \n union U { //~ ERROR recursive type `U` has infinite size\n     a: u8,\n-    b: U,\n+    b: std::mem::ManuallyDrop<U>,\n }\n \n fn main() {}"}, {"sha": "a2380d8bc0e992e3fb833174c5119830ce03b142", "filename": "src/test/ui/union/union-nonrepresentable.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,16 +1,16 @@\n error[E0072]: recursive type `U` has infinite size\n-  --> $DIR/union-nonrepresentable.rs:3:1\n+  --> $DIR/union-nonrepresentable.rs:2:1\n    |\n LL | union U {\n    | ^^^^^^^ recursive type has infinite size\n LL |     a: u8,\n-LL |     b: U,\n-   |        - recursive without indirection\n+LL |     b: std::mem::ManuallyDrop<U>,\n+   |        ------------------------- recursive without indirection\n    |\n help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `U` representable\n    |\n-LL |     b: Box<U>,\n-   |        ++++ +\n+LL |     b: Box<std::mem::ManuallyDrop<U>>,\n+   |        ++++                         +\n \n error: aborting due to previous error\n "}, {"sha": "cb852eff0c60a50d3c15a78ad659772388f68df0", "filename": "src/test/ui/union/union-sized-field.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,18 +1,18 @@\n-#![feature(untagged_unions)]\n+use std::mem::ManuallyDrop;\n \n union Foo<T: ?Sized> {\n-    value: T,\n+    value: ManuallyDrop<T>,\n     //~^ ERROR the size for values of type\n }\n \n struct Foo2<T: ?Sized> {\n-    value: T,\n+    value: ManuallyDrop<T>,\n     //~^ ERROR the size for values of type\n     t: u32,\n }\n \n enum Foo3<T: ?Sized> {\n-    Value(T),\n+    Value(ManuallyDrop<T>),\n     //~^ ERROR the size for values of type\n }\n "}, {"sha": "771e8f261999560b2c99df333469c28b2fc20544", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -3,9 +3,10 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n    |\n LL | union Foo<T: ?Sized> {\n    |           - this type parameter needs to be `std::marker::Sized`\n-LL |     value: T,\n-   |            ^ doesn't have a size known at compile-time\n+LL |     value: ManuallyDrop<T>,\n+   |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n+   = note: required because it appears within the type `ManuallyDrop<T>`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -15,21 +16,22 @@ LL + union Foo<T> {\n    |\n help: borrowed types always have a statically known size\n    |\n-LL |     value: &T,\n+LL |     value: &ManuallyDrop<T>,\n    |            +\n help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n-LL |     value: Box<T>,\n-   |            ++++ +\n+LL |     value: Box<ManuallyDrop<T>>,\n+   |            ++++               +\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:9:12\n    |\n LL | struct Foo2<T: ?Sized> {\n    |             - this type parameter needs to be `std::marker::Sized`\n-LL |     value: T,\n-   |            ^ doesn't have a size known at compile-time\n+LL |     value: ManuallyDrop<T>,\n+   |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n+   = note: required because it appears within the type `ManuallyDrop<T>`\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -39,21 +41,22 @@ LL + struct Foo2<T> {\n    |\n help: borrowed types always have a statically known size\n    |\n-LL |     value: &T,\n+LL |     value: &ManuallyDrop<T>,\n    |            +\n help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n-LL |     value: Box<T>,\n-   |            ++++ +\n+LL |     value: Box<ManuallyDrop<T>>,\n+   |            ++++               +\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:15:11\n    |\n LL | enum Foo3<T: ?Sized> {\n    |           - this type parameter needs to be `std::marker::Sized`\n-LL |     Value(T),\n-   |           ^ doesn't have a size known at compile-time\n+LL |     Value(ManuallyDrop<T>),\n+   |           ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n+   = note: required because it appears within the type `ManuallyDrop<T>`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -63,12 +66,12 @@ LL + enum Foo3<T> {\n    |\n help: borrowed types always have a statically known size\n    |\n-LL |     Value(&T),\n+LL |     Value(&ManuallyDrop<T>),\n    |           +\n help: the `Box` type always has a statically known size and allocates its contents in the heap\n    |\n-LL |     Value(Box<T>),\n-   |           ++++ +\n+LL |     Value(Box<ManuallyDrop<T>>),\n+   |           ++++               +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0aefa21c94480c7f5fe620a6e5f6b510d4efc7da", "filename": "src/test/ui/union/union-unsafe.mir.stderr", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,91 +1,83 @@\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:34:5\n+  --> $DIR/union-unsafe.rs:33:5\n    |\n LL |     *(u.p) = 13;\n    |     ^^^^^^^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:39:5\n+  --> $DIR/union-unsafe.rs:38:5\n    |\n-LL |     u.a = (RefCell::new(0), 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n-   |\n-   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n-\n-error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:40:5\n-   |\n-LL |     u.a.0 = RefCell::new(0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+LL |     u.a = (ManuallyDrop::new(RefCell::new(0)), 1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:47:6\n+  --> $DIR/union-unsafe.rs:46:6\n    |\n LL |     *u3.a = T::default();\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:53:6\n+  --> $DIR/union-unsafe.rs:52:6\n    |\n LL |     *u3.a = T::default();\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:61:13\n+  --> $DIR/union-unsafe.rs:60:13\n    |\n LL |     let a = u1.a;\n    |             ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:64:14\n+  --> $DIR/union-unsafe.rs:63:14\n    |\n LL |     let U1 { a } = u1;\n    |              ^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:65:12\n+  --> $DIR/union-unsafe.rs:64:12\n    |\n LL |     if let U1 { a: 12 } = u1 {}\n    |            ^^^^^^^^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:70:6\n+  --> $DIR/union-unsafe.rs:69:6\n    |\n LL |     *u2.a = String::from(\"new\");\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:74:6\n+  --> $DIR/union-unsafe.rs:73:6\n    |\n LL |     *u3.a = 1;\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:78:6\n+  --> $DIR/union-unsafe.rs:77:6\n    |\n LL |     *u3.a = String::from(\"new\");\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "7e9d9052a6723ef6d97e845c27aa1bb728ddef66", "filename": "src/test/ui/union/union-unsafe.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,7 +1,6 @@\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n \n-#![feature(untagged_unions)]\n use std::mem::ManuallyDrop;\n use std::cell::RefCell;\n \n@@ -26,7 +25,7 @@ union URef {\n }\n \n union URefCell { // field that does not drop but is not `Copy`, either\n-    a: (RefCell<i32>, i32),\n+    a: (ManuallyDrop<RefCell<i32>>, i32),\n }\n \n fn deref_union_field(mut u: URef) {\n@@ -36,8 +35,8 @@ fn deref_union_field(mut u: URef) {\n \n fn assign_noncopy_union_field(mut u: URefCell) {\n     // FIXME(thir-unsafeck)\n-    u.a = (RefCell::new(0), 1); //~ ERROR assignment to union field that might need dropping\n-    u.a.0 = RefCell::new(0); //~ ERROR assignment to union field that might need dropping\n+    u.a = (ManuallyDrop::new(RefCell::new(0)), 1); //~ ERROR assignment to union field\n+    u.a.0 = ManuallyDrop::new(RefCell::new(0)); // OK (assignment does not drop)\n     u.a.1 = 1; // OK\n }\n "}, {"sha": "dbfd92f05d9514addc8919825ee6c7a55b839d66", "filename": "src/test/ui/union/union-unsafe.thir.stderr", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.thir.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,91 +1,83 @@\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:34:6\n+  --> $DIR/union-unsafe.rs:33:6\n    |\n LL |     *(u.p) = 13;\n    |      ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:39:5\n+  --> $DIR/union-unsafe.rs:38:5\n    |\n-LL |     u.a = (RefCell::new(0), 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n-   |\n-   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n-\n-error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:40:5\n-   |\n-LL |     u.a.0 = RefCell::new(0);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+LL |     u.a = (ManuallyDrop::new(RefCell::new(0)), 1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:47:6\n+  --> $DIR/union-unsafe.rs:46:6\n    |\n LL |     *u3.a = T::default();\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:53:6\n+  --> $DIR/union-unsafe.rs:52:6\n    |\n LL |     *u3.a = T::default();\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:61:13\n+  --> $DIR/union-unsafe.rs:60:13\n    |\n LL |     let a = u1.a;\n    |             ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:64:14\n+  --> $DIR/union-unsafe.rs:63:14\n    |\n LL |     let U1 { a } = u1;\n    |              ^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:65:8\n+  --> $DIR/union-unsafe.rs:64:8\n    |\n LL |     if let U1 { a: 12 } = u1 {}\n    |        ^^^^^^^^^^^^^^^^^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:70:6\n+  --> $DIR/union-unsafe.rs:69:6\n    |\n LL |     *u2.a = String::from(\"new\");\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:74:6\n+  --> $DIR/union-unsafe.rs:73:6\n    |\n LL |     *u3.a = 1;\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:78:6\n+  --> $DIR/union-unsafe.rs:77:6\n    |\n LL |     *u3.a = String::from(\"new\");\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "59ab835fba22dc1c4a121e17a2ec8f69fc653479", "filename": "src/test/ui/union/union-unsized.mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsized.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsized.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.mirunsafeck.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/union-unsized.rs:7:8\n+  --> $DIR/union-unsized.rs:5:8\n    |\n LL |     a: str,\n    |        ^^^ doesn't have a size known at compile-time\n@@ -17,7 +17,7 @@ LL |     a: Box<str>,\n    |        ++++   +\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/union-unsized.rs:15:8\n+  --> $DIR/union-unsized.rs:13:8\n    |\n LL |     b: str,\n    |        ^^^ doesn't have a size known at compile-time"}, {"sha": "8e897d7d3c6d66b2a9c0be661ca2ec2ea64fb6ee", "filename": "src/test/ui/union/union-unsized.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,8 +1,6 @@\n // revisions: mirunsafeck thirunsafeck\n // [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n-#![feature(untagged_unions)]\n-\n union U {\n     a: str,\n     //~^ ERROR the size for values of type"}, {"sha": "59ab835fba22dc1c4a121e17a2ec8f69fc653479", "filename": "src/test/ui/union/union-unsized.thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsized.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funion%2Funion-unsized.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.thirunsafeck.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/union-unsized.rs:7:8\n+  --> $DIR/union-unsized.rs:5:8\n    |\n LL |     a: str,\n    |        ^^^ doesn't have a size known at compile-time\n@@ -17,7 +17,7 @@ LL |     a: Box<str>,\n    |        ++++   +\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/union-unsized.rs:15:8\n+  --> $DIR/union-unsized.rs:13:8\n    |\n LL |     b: str,\n    |        ^^^ doesn't have a size known at compile-time"}, {"sha": "0ecd5203dd9d9ab329aee6732aad750754a9894f", "filename": "src/test/ui/unsafe/union-assignop.mirunsafeck.stderr", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.mirunsafeck.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,26 +1,26 @@\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-assignop.rs:20:5\n+  --> $DIR/union-assignop.rs:19:5\n    |\n LL |     foo.a += 5;\n    |     ^^^^^^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-assignop.rs:21:5\n+  --> $DIR/union-assignop.rs:20:6\n    |\n-LL |     foo.b += Dropping;\n-   |     ^^^^^ access to union field\n+LL |     *foo.b += NonCopy;\n+   |      ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-assignop.rs:22:5\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:21:6\n    |\n-LL |     foo.b = Dropping;\n-   |     ^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+LL |     *foo.b = NonCopy;\n+   |      ^^^^^ access to union field\n    |\n-   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/union-assignop.rs:23:5\n@@ -46,14 +46,6 @@ LL |     foo.b = foo.b;\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-assignop.rs:27:5\n-   |\n-LL |     foo.b = foo.b;\n-   |     ^^^^^^^^^^^^^ assignment to union field that might need dropping\n-   |\n-   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "5e667cd10d59f88a1bcde46c977b088241700a17", "filename": "src/test/ui/unsafe/union-assignop.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,30 +1,29 @@\n // revisions: mirunsafeck thirunsafeck\n // [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n-#![feature(untagged_unions)]\n-\n use std::ops::AddAssign;\n+use std::mem::ManuallyDrop;\n \n-struct Dropping;\n-impl AddAssign for Dropping {\n+struct NonCopy;\n+impl AddAssign for NonCopy {\n     fn add_assign(&mut self, _: Self) {}\n }\n \n union Foo {\n     a: u8, // non-dropping\n-    b: Dropping, // treated as dropping\n+    b: ManuallyDrop<NonCopy>,\n }\n \n fn main() {\n     let mut foo = Foo { a: 42 };\n     foo.a += 5; //~ ERROR access to union field is unsafe\n-    foo.b += Dropping; //~ ERROR access to union field is unsafe\n-    foo.b = Dropping; //~ ERROR assignment to union field that might need dropping is unsafe\n+    *foo.b += NonCopy; //~ ERROR access to union field is unsafe\n+    *foo.b = NonCopy; //~ ERROR access to union field is unsafe\n+    foo.b = ManuallyDrop::new(NonCopy);\n     foo.a; //~ ERROR access to union field is unsafe\n     let foo = Foo { a: 42 };\n     foo.b; //~ ERROR access to union field is unsafe\n     let mut foo = Foo { a: 42 };\n     foo.b = foo.b;\n     //~^ ERROR access to union field is unsafe\n-    //~| ERROR assignment to union field that might need dropping\n }"}, {"sha": "24b357e762bba7cd5fa8114896656884506b0f31", "filename": "src/test/ui/unsafe/union-assignop.thirunsafeck.stderr", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-assignop.thirunsafeck.stderr?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,26 +1,26 @@\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-assignop.rs:20:5\n+  --> $DIR/union-assignop.rs:19:5\n    |\n LL |     foo.a += 5;\n    |     ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-assignop.rs:21:5\n+  --> $DIR/union-assignop.rs:20:6\n    |\n-LL |     foo.b += Dropping;\n-   |     ^^^^^ access to union field\n+LL |     *foo.b += NonCopy;\n+   |      ^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-assignop.rs:22:5\n+error[E0133]: access to union field is unsafe and requires unsafe function or block\n+  --> $DIR/union-assignop.rs:21:6\n    |\n-LL |     foo.b = Dropping;\n-   |     ^^^^^^^^^^^^^^^^ assignment to union field that might need dropping\n+LL |     *foo.b = NonCopy;\n+   |      ^^^^^ access to union field\n    |\n-   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/union-assignop.rs:23:5\n@@ -38,14 +38,6 @@ LL |     foo.b;\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error[E0133]: assignment to union field that might need dropping is unsafe and requires unsafe function or block\n-  --> $DIR/union-assignop.rs:27:5\n-   |\n-LL |     foo.b = foo.b;\n-   |     ^^^^^^^^^^^^^ assignment to union field that might need dropping\n-   |\n-   = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n-\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n   --> $DIR/union-assignop.rs:27:13\n    |\n@@ -54,6 +46,6 @@ LL |     foo.b = foo.b;\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "9a53ef908520065fd8e115bbeac9e60dd16f5d2f", "filename": "src/test/ui/unsafe/union-modification.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funsafe%2Funion-modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funsafe%2Funion-modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion-modification.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -2,8 +2,6 @@\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n \n-#![feature(untagged_unions)]\n-\n union Foo {\n     bar: i8,\n     _blah: isize,"}, {"sha": "4338d78eabb9d90af633624e4d35358ddf3b6f80", "filename": "src/test/ui/unsafe/union.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funsafe%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6017b872bec43db353017f7915d3145ce5f5d/src%2Ftest%2Fui%2Funsafe%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funion.rs?ref=5bf6017b872bec43db353017f7915d3145ce5f5d", "patch": "@@ -1,19 +1,19 @@\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n \n-#![feature(untagged_unions)]\n-\n union Foo {\n     bar: i8,\n     zst: (),\n     pizza: Pizza,\n }\n \n+#[derive(Clone, Copy)]\n struct Pizza {\n     topping: Option<PizzaTopping>\n }\n \n #[allow(dead_code)]\n+#[derive(Clone, Copy)]\n enum PizzaTopping {\n     Cheese,\n     Pineapple,"}]}