{"sha": "4900585a4f15f93bb466f8c194445a0e9e628d49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MDA1ODVhNGYxNWY5M2JiNDY2ZjhjMTk0NDQ1YTBlOWU2MjhkNDk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-20T18:32:30Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-20T18:32:30Z"}, "message": "Unify E0109, E0110 and E0111 errors", "tree": {"sha": "95e3efd93d0722ed1c045fd4b3e77ad62c73156b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95e3efd93d0722ed1c045fd4b3e77ad62c73156b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4900585a4f15f93bb466f8c194445a0e9e628d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4900585a4f15f93bb466f8c194445a0e9e628d49", "html_url": "https://github.com/rust-lang/rust/commit/4900585a4f15f93bb466f8c194445a0e9e628d49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4900585a4f15f93bb466f8c194445a0e9e628d49/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c745708aa31e9a54d5a6b10f810a296fe3a56376", "url": "https://api.github.com/repos/rust-lang/rust/commits/c745708aa31e9a54d5a6b10f810a296fe3a56376", "html_url": "https://github.com/rust-lang/rust/commit/c745708aa31e9a54d5a6b10f810a296fe3a56376"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "c65f3443fbb546b0bd9659bfcf40ba4c98ed466e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4900585a4f15f93bb466f8c194445a0e9e628d49/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4900585a4f15f93bb466f8c194445a0e9e628d49/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4900585a4f15f93bb466f8c194445a0e9e628d49", "patch": "@@ -1486,37 +1486,34 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             segment.with_generic_args(|generic_args| {\n                 let (mut err_for_lt, mut err_for_ty, mut err_for_ct) = (false, false, false);\n                 for arg in &generic_args.args {\n-                    let (mut span_err, span, kind) = match arg {\n-                        // FIXME(varkor): unify E0109, E0110 and E0111.\n+                    let (span, kind) = match arg {\n                         hir::GenericArg::Lifetime(lt) => {\n                             if err_for_lt { continue }\n                             err_for_lt = true;\n                             has_err = true;\n-                            (struct_span_err!(self.tcx().sess, lt.span, E0110,\n-                                              \"lifetime arguments are not allowed on this entity\"),\n-                             lt.span,\n-                             \"lifetime\")\n+                            (lt.span, \"lifetime\")\n                         }\n                         hir::GenericArg::Type(ty) => {\n                             if err_for_ty { continue }\n                             err_for_ty = true;\n                             has_err = true;\n-                            (struct_span_err!(self.tcx().sess, ty.span, E0109,\n-                                              \"type arguments are not allowed on this entity\"),\n-                             ty.span,\n-                             \"type\")\n+                            (ty.span, \"type\")\n                         }\n                         hir::GenericArg::Const(ct) => {\n                             if err_for_ct { continue }\n                             err_for_ct = true;\n-                            (struct_span_err!(self.tcx().sess, ct.span, E0111,\n-                                              \"const parameters are not allowed on this type\"),\n-                             ct.span,\n-                             \"const\")\n+                            (ct.span, \"const\")\n                         }\n                     };\n-                    span_err.span_label(span, format!(\"{} argument not allowed\", kind))\n-                            .emit();\n+                    let mut err = struct_span_err!(\n+                        self.tcx().sess,\n+                        span,\n+                        E0109,\n+                        \"{} arguments are not allowed for this type\",\n+                        kind,\n+                    );\n+                    err.span_label(span, format!(\"{} argument not allowed\", kind));\n+                    err.emit();\n                     if err_for_lt && err_for_ty && err_for_ct {\n                         break;\n                     }"}]}