{"sha": "39f8784eb6056c21c120bfa93bbec73e19773727", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5Zjg3ODRlYjYwNTZjMjFjMTIwYmZhOTNiYmVjNzNlMTk3NzM3Mjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-18T22:20:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-18T22:20:36Z"}, "message": "Rollup merge of #71976 - mibac138:let-recovery, r=estebank\n\nImprove diagnostics for `let x += 1`\n\nFixes(?) #66736\n\nThe code responsible for the `E0404` errors is [here](https://github.com/rust-lang/rust/blob/master/src/librustc_parse/parser/ty.rs#L399-L424) which I don't think can be easily modified to prevent emitting an error in one specific case. Because of this I couldn't get rid of `E0404` and instead added `E0067` along with a help message which will fix the problem.\n\nr? @estebank", "tree": {"sha": "f33d820ec959a1bd0152d5ee17cce6bd34712df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f33d820ec959a1bd0152d5ee17cce6bd34712df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39f8784eb6056c21c120bfa93bbec73e19773727", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6+i0CRBK7hj4Ov3rIwAAdHIIADaP6QiVQxmgXr5OCN6Uyg2w\nXbT8LaSp6YYmrDfT7jnbPFA9MnYUMYMCwLceYRf0JkRdIyU9wJ2eUph1C9lNQFuE\n23ZSYBaedod74X70Q5EejSkeICa3mTrdGbEDRlGCq7m68Kxg7hBtNJhO/5LQZh4h\n0UbQuNtjOwFSZvyHDjQJB+GRiPu3GL9zgc8NjXDFJG/57Kzid1WtPXsV/2rWMHfu\nKNoos9xMJeKml4tF/1cqUT9GPjAUtR54mBBTdb+O8IYvD2wu89RJdZ/LUJeY6f16\nPs+aeNF8cepu+eLSfGXcbimdWBHLVtK/tQ4KTWyH3zDByxgdqmEZz9QIJ/Tich0=\n=MwRh\n-----END PGP SIGNATURE-----\n", "payload": "tree f33d820ec959a1bd0152d5ee17cce6bd34712df4\nparent 45d033b21cdd009961860e62e1d1c785ecb2af41\nparent 98532a30901d7544c49fe82f499db53699645de0\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592518836 -0700\ncommitter GitHub <noreply@github.com> 1592518836 -0700\n\nRollup merge of #71976 - mibac138:let-recovery, r=estebank\n\nImprove diagnostics for `let x += 1`\n\nFixes(?) #66736\n\nThe code responsible for the `E0404` errors is [here](https://github.com/rust-lang/rust/blob/master/src/librustc_parse/parser/ty.rs#L399-L424) which I don't think can be easily modified to prevent emitting an error in one specific case. Because of this I couldn't get rid of `E0404` and instead added `E0067` along with a help message which will fix the problem.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39f8784eb6056c21c120bfa93bbec73e19773727", "html_url": "https://github.com/rust-lang/rust/commit/39f8784eb6056c21c120bfa93bbec73e19773727", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39f8784eb6056c21c120bfa93bbec73e19773727/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45d033b21cdd009961860e62e1d1c785ecb2af41", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d033b21cdd009961860e62e1d1c785ecb2af41", "html_url": "https://github.com/rust-lang/rust/commit/45d033b21cdd009961860e62e1d1c785ecb2af41"}, {"sha": "98532a30901d7544c49fe82f499db53699645de0", "url": "https://api.github.com/repos/rust-lang/rust/commits/98532a30901d7544c49fe82f499db53699645de0", "html_url": "https://github.com/rust-lang/rust/commit/98532a30901d7544c49fe82f499db53699645de0"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "53f32b7c800bdaf74af35dfcba588571e1be4f16", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f8784eb6056c21c120bfa93bbec73e19773727/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f8784eb6056c21c120bfa93bbec73e19773727/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=39f8784eb6056c21c120bfa93bbec73e19773727", "patch": "@@ -216,8 +216,28 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the RHS of a local variable declaration (e.g., '= 14;').\n-    fn parse_initializer(&mut self, skip_eq: bool) -> PResult<'a, Option<P<Expr>>> {\n-        if self.eat(&token::Eq) || skip_eq { Ok(Some(self.parse_expr()?)) } else { Ok(None) }\n+    fn parse_initializer(&mut self, eq_optional: bool) -> PResult<'a, Option<P<Expr>>> {\n+        let eq_consumed = match self.token.kind {\n+            token::BinOpEq(..) => {\n+                // Recover `let x <op>= 1` as `let x = 1`\n+                self.struct_span_err(\n+                    self.token.span,\n+                    \"can't reassign to an uninitialized variable\",\n+                )\n+                .span_suggestion_short(\n+                    self.token.span,\n+                    \"initialize the variable\",\n+                    \"=\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n+                self.bump();\n+                true\n+            }\n+            _ => self.eat(&token::Eq),\n+        };\n+\n+        Ok(if eq_consumed || eq_optional { Some(self.parse_expr()?) } else { None })\n     }\n \n     /// Parses a block. No inner attributes are allowed."}, {"sha": "7f58f5df2d4125786ff200cc557cd910d1338554", "filename": "src/test/ui/parser/let-binop.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f8784eb6056c21c120bfa93bbec73e19773727/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f8784eb6056c21c120bfa93bbec73e19773727/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs?ref=39f8784eb6056c21c120bfa93bbec73e19773727", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let a: i8 *= 1; //~ ERROR can't reassign to an uninitialized variable\n+    let _ = a;\n+    let b += 1; //~ ERROR can't reassign to an uninitialized variable\n+    let _ = b;\n+    let c *= 1; //~ ERROR can't reassign to an uninitialized variable\n+    let _ = c;\n+}"}, {"sha": "71431499ac70b8c0ea43c7e8db333fac646da5e4", "filename": "src/test/ui/parser/let-binop.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39f8784eb6056c21c120bfa93bbec73e19773727/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f8784eb6056c21c120bfa93bbec73e19773727/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr?ref=39f8784eb6056c21c120bfa93bbec73e19773727", "patch": "@@ -0,0 +1,20 @@\n+error: can't reassign to an uninitialized variable\n+  --> $DIR/let-binop.rs:2:15\n+   |\n+LL |     let a: i8 *= 1;\n+   |               ^^ help: initialize the variable\n+\n+error: can't reassign to an uninitialized variable\n+  --> $DIR/let-binop.rs:4:11\n+   |\n+LL |     let b += 1;\n+   |           ^^ help: initialize the variable\n+\n+error: can't reassign to an uninitialized variable\n+  --> $DIR/let-binop.rs:6:11\n+   |\n+LL |     let c *= 1;\n+   |           ^^ help: initialize the variable\n+\n+error: aborting due to 3 previous errors\n+"}]}