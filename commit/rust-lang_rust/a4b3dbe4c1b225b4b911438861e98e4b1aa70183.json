{"sha": "a4b3dbe4c1b225b4b911438861e98e4b1aa70183", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YjNkYmU0YzFiMjI1YjRiOTExNDM4ODYxZTk4ZTRiMWFhNzAxODM=", "commit": {"author": {"name": "Edd Barrett", "email": "vext01@gmail.com", "date": "2019-07-23T09:30:13Z"}, "committer": {"name": "Edd Barrett", "email": "vext01@gmail.com", "date": "2019-08-24T18:00:13Z"}, "message": "Improve the documentation for std::hint::black_box.", "tree": {"sha": "c412e58fe91341a06409bcb6cd6688b5edc96131", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c412e58fe91341a06409bcb6cd6688b5edc96131"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4b3dbe4c1b225b4b911438861e98e4b1aa70183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b3dbe4c1b225b4b911438861e98e4b1aa70183", "html_url": "https://github.com/rust-lang/rust/commit/a4b3dbe4c1b225b4b911438861e98e4b1aa70183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4b3dbe4c1b225b4b911438861e98e4b1aa70183/comments", "author": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bc1ce7bdb7f5dc9ea07c0b630c087d8e11140e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc1ce7bdb7f5dc9ea07c0b630c087d8e11140e4", "html_url": "https://github.com/rust-lang/rust/commit/4bc1ce7bdb7f5dc9ea07c0b630c087d8e11140e4"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "3aba07f882d9721c00e54e8e801203a240477068", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4b3dbe4c1b225b4b911438861e98e4b1aa70183/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b3dbe4c1b225b4b911438861e98e4b1aa70183/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=a4b3dbe4c1b225b4b911438861e98e4b1aa70183", "patch": "@@ -104,11 +104,19 @@ pub fn spin_loop() {\n     }\n }\n \n-/// A function that is opaque to the optimizer, to allow benchmarks to\n-/// pretend to use outputs to assist in avoiding dead-code\n-/// elimination.\n+/// An identity function that *__hints__* to the compiler to be maximally pessimistic about what\n+/// `black_box` could do.\n ///\n-/// This function is a no-op, and does not even read from `dummy`.\n+/// [`std::convert::identity`]: https://doc.rust-lang.org/core/convert/fn.identity.html\n+///\n+/// Unlike [`std::convert::identity`], a Rust compiler is encouraged to assume that `black_box` can\n+/// use `x` in any possible valid way that Rust code is allowed to without introducing undefined\n+/// behavior in the calling code. This property makes `black_box` useful for writing code in which\n+/// certain optimizations are not desired, such as benchmarks.\n+///\n+/// Note however, that `black_box` is only (and can only be) provided on a \"best-effort\" basis. The\n+/// extent to which it can block optimisations may vary depending upon the platform and code-gen\n+/// backend used. Programs cannot rely on `black_box` for *correctness* in any way.\n #[inline]\n #[unstable(feature = \"test\", issue = \"27812\")]\n #[allow(unreachable_code)] // this makes #[cfg] a bit easier below."}]}