{"sha": "a96d7005c6d1e4b1977e8bf93e28a886ceb443eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NmQ3MDA1YzZkMWU0YjE5NzdlOGJmOTNlMjhhODg2Y2ViNDQzZWI=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril@gmail.com", "date": "2019-10-27T17:14:43Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-01T17:23:04Z"}, "message": "Clarifications suggested by varkor", "tree": {"sha": "92378761af25a6b2e9777e286b1d530cf55116d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92378761af25a6b2e9777e286b1d530cf55116d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a96d7005c6d1e4b1977e8bf93e28a886ceb443eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a96d7005c6d1e4b1977e8bf93e28a886ceb443eb", "html_url": "https://github.com/rust-lang/rust/commit/a96d7005c6d1e4b1977e8bf93e28a886ceb443eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a96d7005c6d1e4b1977e8bf93e28a886ceb443eb/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8956c1ed1d95915ac17612cd93df38243b875790", "url": "https://api.github.com/repos/rust-lang/rust/commits/8956c1ed1d95915ac17612cd93df38243b875790", "html_url": "https://github.com/rust-lang/rust/commit/8956c1ed1d95915ac17612cd93df38243b875790"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "8e06955c7cdc49b681885617c11ae22b86e92088", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a96d7005c6d1e4b1977e8bf93e28a886ceb443eb/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96d7005c6d1e4b1977e8bf93e28a886ceb443eb/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=a96d7005c6d1e4b1977e8bf93e28a886ceb443eb", "patch": "@@ -720,23 +720,25 @@ impl<'tcx> Constructor<'tcx> {\n     /// must have as many elements as this constructor's arity.\n     ///\n     /// Examples:\n-    /// self: Single\n-    /// ty: tuple of 3 elements\n-    /// pats: [10, 20, _]           => (10, 20, _)\n+    /// `self`: `Constructor::Single`\n+    /// `ty`: `(u32, u32, u32)`\n+    /// `pats`: `[10, 20, _]`\n+    /// returns `(10, 20, _)`\n     ///\n-    /// self: Option::Some\n-    /// ty: Option<bool>\n-    /// pats: [false]  => Some(false)\n+    /// `self`: `Constructor::Variant(Option::Some)`\n+    /// `ty`: `Option<bool>`\n+    /// `pats`: `[false]`\n+    /// returns `Some(false)`\n     fn apply<'a>(\n         &self,\n         cx: &MatchCheckCtxt<'a, 'tcx>,\n         ty: Ty<'tcx>,\n         pats: impl IntoIterator<Item = Pat<'tcx>>,\n     ) -> Pat<'tcx> {\n-        let mut pats = pats.into_iter();\n+        let mut subpatterns = pats.into_iter();\n         let pat = match ty.kind {\n             ty::Adt(..) | ty::Tuple(..) => {\n-                let pats = pats\n+                let subpatterns = subpatterns\n                     .enumerate()\n                     .map(|(i, p)| FieldPat { field: Field::new(i), pattern: p })\n                     .collect();\n@@ -747,20 +749,20 @@ impl<'tcx> Constructor<'tcx> {\n                             adt_def: adt,\n                             substs,\n                             variant_index: self.variant_index_for_adt(cx, adt),\n-                            subpatterns: pats,\n+                            subpatterns,\n                         }\n                     } else {\n-                        PatKind::Leaf { subpatterns: pats }\n+                        PatKind::Leaf { subpatterns }\n                     }\n                 } else {\n-                    PatKind::Leaf { subpatterns: pats }\n+                    PatKind::Leaf { subpatterns }\n                 }\n             }\n \n-            ty::Ref(..) => PatKind::Deref { subpattern: pats.nth(0).unwrap() },\n+            ty::Ref(..) => PatKind::Deref { subpattern: subpatterns.nth(0).unwrap() },\n \n             ty::Slice(_) | ty::Array(..) => {\n-                PatKind::Slice { prefix: pats.collect(), slice: None, suffix: vec![] }\n+                PatKind::Slice { prefix: subpatterns.collect(), slice: None, suffix: vec![] }\n             }\n \n             _ => match *self {\n@@ -779,8 +781,8 @@ impl<'tcx> Constructor<'tcx> {\n \n     /// Like `apply`, but where all the subpatterns are wildcards `_`.\n     fn apply_wildcards<'a>(&self, cx: &MatchCheckCtxt<'a, 'tcx>, ty: Ty<'tcx>) -> Pat<'tcx> {\n-        let pats = self.wildcard_subpatterns(cx, ty).rev();\n-        self.apply(cx, ty, pats)\n+        let subpatterns = self.wildcard_subpatterns(cx, ty).rev();\n+        self.apply(cx, ty, subpatterns)\n     }\n }\n "}]}