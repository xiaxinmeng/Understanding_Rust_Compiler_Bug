{"sha": "d0f59f6d6575e04d3e4d08e919ce01e29bc9e41e", "node_id": "C_kwDOAAsO6NoAKGQwZjU5ZjZkNjU3NWUwNGQzZTRkMDhlOTE5Y2UwMWUyOWJjOWU0MWU", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-23T23:26:40Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-07T04:00:34Z"}, "message": "Fix closures within inline const", "tree": {"sha": "3e703835f37e35642d0c4d954fb6e46ade5ae3f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e703835f37e35642d0c4d954fb6e46ade5ae3f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0f59f6d6575e04d3e4d08e919ce01e29bc9e41e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f59f6d6575e04d3e4d08e919ce01e29bc9e41e", "html_url": "https://github.com/rust-lang/rust/commit/d0f59f6d6575e04d3e4d08e919ce01e29bc9e41e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0f59f6d6575e04d3e4d08e919ce01e29bc9e41e/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4060ed7eff2dfb38ee8f9e3d2806f9d82c2cfc65", "url": "https://api.github.com/repos/rust-lang/rust/commits/4060ed7eff2dfb38ee8f9e3d2806f9d82c2cfc65", "html_url": "https://github.com/rust-lang/rust/commit/4060ed7eff2dfb38ee8f9e3d2806f9d82c2cfc65"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "5f5d308a3329bdf5c7f3c3fe2cbd1e0a445c4f8c", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0f59f6d6575e04d3e4d08e919ce01e29bc9e41e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f59f6d6575e04d3e4d08e919ce01e29bc9e41e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=d0f59f6d6575e04d3e4d08e919ce01e29bc9e41e", "patch": "@@ -148,10 +148,17 @@ impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Closure(cc, _, body_id, _, _) = expr.kind {\n-            let body = self.fcx.tcx.hir().body(body_id);\n-            self.visit_body(body);\n-            self.fcx.analyze_closure(expr.hir_id, expr.span, body_id, body, cc);\n+        match expr.kind {\n+            hir::ExprKind::Closure(cc, _, body_id, _, _) => {\n+                let body = self.fcx.tcx.hir().body(body_id);\n+                self.visit_body(body);\n+                self.fcx.analyze_closure(expr.hir_id, expr.span, body_id, body, cc);\n+            }\n+            hir::ExprKind::ConstBlock(anon_const) => {\n+                let body = self.fcx.tcx.hir().body(anon_const.body);\n+                self.visit_body(body);\n+            }\n+            _ => {}\n         }\n \n         intravisit::walk_expr(self, expr);"}]}