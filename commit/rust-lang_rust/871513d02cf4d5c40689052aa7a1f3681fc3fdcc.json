{"sha": "871513d02cf4d5c40689052aa7a1f3681fc3fdcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MTUxM2QwMmNmNGQ1YzQwNjg5MDUyYWE3YTFmMzY4MWZjM2ZkY2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-01T06:42:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-12T07:37:36Z"}, "message": "make miri memory TyCtxtAt a TyCtxt", "tree": {"sha": "2eaa012c05d0f83f3797d85558ec55e41d6b6984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eaa012c05d0f83f3797d85558ec55e41d6b6984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/871513d02cf4d5c40689052aa7a1f3681fc3fdcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/871513d02cf4d5c40689052aa7a1f3681fc3fdcc", "html_url": "https://github.com/rust-lang/rust/commit/871513d02cf4d5c40689052aa7a1f3681fc3fdcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/871513d02cf4d5c40689052aa7a1f3681fc3fdcc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5", "html_url": "https://github.com/rust-lang/rust/commit/e91bf6c881dc8fa50dc18fc2f518a6c22424ddb5"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "844f2ea07023b711f1e4e2cb72071790425db102", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/871513d02cf4d5c40689052aa7a1f3681fc3fdcc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871513d02cf4d5c40689052aa7a1f3681fc3fdcc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=871513d02cf4d5c40689052aa7a1f3681fc3fdcc", "patch": "@@ -301,15 +301,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             machine,\n             tcx,\n             param_env,\n-            memory: Memory::new(tcx, memory_extra),\n+            memory: Memory::new(*tcx, memory_extra),\n             vtables: FxHashMap::default(),\n         }\n     }\n \n     #[inline(always)]\n     pub fn set_span(&mut self, span: Span) {\n         self.tcx.span = span;\n-        self.memory.tcx.span = span;\n     }\n \n     #[inline(always)]"}, {"sha": "61dea4d43cea6a72a9152cde1b6efbf4bcb24e4f", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/871513d02cf4d5c40689052aa7a1f3681fc3fdcc/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871513d02cf4d5c40689052aa7a1f3681fc3fdcc/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=871513d02cf4d5c40689052aa7a1f3681fc3fdcc", "patch": "@@ -14,7 +14,7 @@ use std::ptr;\n \n use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_middle::ty::{self, query::TyCtxtAt, Instance, ParamEnv};\n+use rustc_middle::ty::{self, TyCtxt, Instance, ParamEnv};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n@@ -115,7 +115,7 @@ pub struct Memory<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n     pub extra: M::MemoryExtra,\n \n     /// Lets us implement `HasDataLayout`, which is awfully convenient.\n-    pub tcx: TyCtxtAt<'tcx>,\n+    pub tcx: TyCtxt<'tcx>,\n }\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for Memory<'mir, 'tcx, M> {\n@@ -126,7 +126,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for Memory<'mir, 'tcx, M>\n }\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n-    pub fn new(tcx: TyCtxtAt<'tcx>, extra: M::MemoryExtra) -> Self {\n+    pub fn new(tcx: TyCtxt<'tcx>, extra: M::MemoryExtra) -> Self {\n         Memory {\n             alloc_map: M::MemoryMap::default(),\n             extra_fn_ptr_map: FxHashMap::default(),\n@@ -425,7 +425,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     /// `M::tag_allocation`.\n     fn get_global_alloc(\n         memory_extra: &M::MemoryExtra,\n-        tcx: TyCtxtAt<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n         id: AllocId,\n         is_write: bool,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation<M::PointerTag, M::AllocExtra>>> {\n@@ -455,7 +455,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     throw_unsup!(ReadForeignStatic(def_id))\n                 }\n                 trace!(\"get_global_alloc: Need to compute {:?}\", def_id);\n-                let instance = Instance::mono(tcx.tcx, def_id);\n+                let instance = Instance::mono(tcx, def_id);\n                 let gid = GlobalId { instance, promoted: None };\n                 // Use the raw query here to break validation cycles. Later uses of the static\n                 // will call the full query anyway.\n@@ -664,14 +664,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     pub fn dump_allocs(&self, mut allocs: Vec<AllocId>) {\n         // Cannot be a closure because it is generic in `Tag`, `Extra`.\n         fn write_allocation_track_relocs<'tcx, Tag: Copy + fmt::Debug, Extra>(\n-            tcx: TyCtxtAt<'tcx>,\n+            tcx: TyCtxt<'tcx>,\n             allocs_to_print: &mut VecDeque<AllocId>,\n             alloc: &Allocation<Tag, Extra>,\n         ) {\n             for &(_, target_id) in alloc.relocations().values() {\n                 allocs_to_print.push_back(target_id);\n             }\n-            pretty::write_allocation(tcx.tcx, alloc, &mut std::io::stderr()).unwrap();\n+            pretty::write_allocation(tcx, alloc, &mut std::io::stderr()).unwrap();\n         }\n \n         allocs.sort();\n@@ -820,7 +820,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 return Ok(());\n             }\n         };\n-        let tcx = self.tcx.tcx;\n+        let tcx = self.tcx;\n         self.get_raw_mut(ptr.alloc_id)?.write_bytes(&tcx, ptr, src)\n     }\n \n@@ -846,7 +846,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 return Ok(());\n             }\n         };\n-        let tcx = self.tcx.tcx;\n+        let tcx = self.tcx;\n         let allocation = self.get_raw_mut(ptr.alloc_id)?;\n \n         for idx in 0..len {\n@@ -888,7 +888,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         let relocations =\n             self.get_raw(src.alloc_id)?.prepare_relocation_copy(self, src, size, dest, length);\n \n-        let tcx = self.tcx.tcx;\n+        let tcx = self.tcx;\n \n         // This checks relocation edges on the src.\n         let src_bytes ="}]}