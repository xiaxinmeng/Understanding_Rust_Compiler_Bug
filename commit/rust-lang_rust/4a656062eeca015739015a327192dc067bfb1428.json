{"sha": "4a656062eeca015739015a327192dc067bfb1428", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNjU2MDYyZWVjYTAxNTczOTAxNWEzMjcxOTJkYzA2N2JmYjE0Mjg=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-11-18T02:00:07Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-11-18T13:34:44Z"}, "message": "add Cloned iterator adaptor", "tree": {"sha": "e920a8a4ab4eafcee30f3f672c5328b54e9b3684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e920a8a4ab4eafcee30f3f672c5328b54e9b3684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a656062eeca015739015a327192dc067bfb1428", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a656062eeca015739015a327192dc067bfb1428", "html_url": "https://github.com/rust-lang/rust/commit/4a656062eeca015739015a327192dc067bfb1428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a656062eeca015739015a327192dc067bfb1428/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9702fb9c7b8d1b58e6b26b3c730c69c520dcd588", "url": "https://api.github.com/repos/rust-lang/rust/commits/9702fb9c7b8d1b58e6b26b3c730c69c520dcd588", "html_url": "https://github.com/rust-lang/rust/commit/9702fb9c7b8d1b58e6b26b3c730c69c520dcd588"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "3b62c8da1ebe111cc0cac40c128737de08fe2804", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4a656062eeca015739015a327192dc067bfb1428/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a656062eeca015739015a327192dc067bfb1428/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=4a656062eeca015739015a327192dc067bfb1428", "patch": "@@ -65,9 +65,10 @@ use cmp;\n use cmp::Ord;\n use mem;\n use num::{ToPrimitive, Int};\n-use ops::Add;\n+use ops::{Add, Deref};\n use option::{Option, Some, None};\n use uint;\n+\n #[deprecated = \"renamed to Extend\"] pub use self::Extend as Extendable;\n \n /// Conversion from an `Iterator`\n@@ -1021,6 +1022,44 @@ impl<T: Clone> MinMaxResult<T> {\n     }\n }\n \n+/// A trait for iterators that contain cloneable elements\n+pub trait CloneIteratorExt<A> {\n+    /// Creates an iterator that clones the elements it yields. Useful for converting an\n+    /// Iterator<&T> to an Iterator<T>.\n+    fn cloned(self) -> Cloned<Self>;\n+}\n+\n+\n+impl<A: Clone, D: Deref<A>, I: Iterator<D>> CloneIteratorExt<A> for I {\n+    fn cloned(self) -> Cloned<I> {\n+        Cloned { it: self }\n+    }\n+}\n+\n+/// An iterator that clones the elements of an underlying iterator\n+pub struct Cloned<I> {\n+    it: I,\n+}\n+\n+impl<A: Clone, D: Deref<A>, I: Iterator<D>> Iterator<A> for Cloned<I> {\n+    fn next(&mut self) -> Option<A> {\n+        self.it.next().cloned()\n+    }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        self.it.size_hint()\n+    }\n+}\n+\n+impl<A: Clone, D: Deref<A>, I: DoubleEndedIterator<D>>\n+        DoubleEndedIterator<A> for Cloned<I> {\n+    fn next_back(&mut self) -> Option<A> {\n+        self.it.next_back().cloned()\n+    }\n+}\n+\n+impl<A: Clone, D: Deref<A>, I: ExactSize<D>> ExactSize<A> for Cloned<I> {}\n+\n /// A trait for iterators that are cloneable.\n pub trait CloneableIterator {\n     /// Repeats an iterator endlessly"}, {"sha": "d046faa82d405d04c8c1a8c29fbbe4dd351d91fc", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a656062eeca015739015a327192dc067bfb1428/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a656062eeca015739015a327192dc067bfb1428/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=4a656062eeca015739015a327192dc067bfb1428", "patch": "@@ -440,6 +440,23 @@ fn test_rev() {\n             vec![16, 14, 12, 10, 8, 6]);\n }\n \n+#[test]\n+fn test_cloned() {\n+    let xs = [2u8, 4, 6, 8];\n+\n+    let mut it = xs.iter().cloned();\n+    assert_eq!(it.len(), 4);\n+    assert_eq!(it.next(), Some(2));\n+    assert_eq!(it.len(), 3);\n+    assert_eq!(it.next(), Some(4));\n+    assert_eq!(it.len(), 2);\n+    assert_eq!(it.next_back(), Some(8));\n+    assert_eq!(it.len(), 1);\n+    assert_eq!(it.next_back(), Some(6));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(it.next_back(), None);\n+}\n+\n #[test]\n fn test_double_ended_map() {\n     let xs = [1i, 2, 3, 4, 5, 6];"}]}