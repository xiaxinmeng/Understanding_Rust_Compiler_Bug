{"sha": "b65265b5e1c70d8c1685efc3a899ce3d89362ad7", "node_id": "C_kwDOAAsO6NoAKGI2NTI2NWI1ZTFjNzBkOGMxNjg1ZWZjM2E4OTljZTNkODkzNjJhZDc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-07T06:08:22Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-10T23:41:15Z"}, "message": "better error for binder on associated type bound", "tree": {"sha": "9845440efb6dbf2aa45d4eea497af03c3c3e959c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9845440efb6dbf2aa45d4eea497af03c3c3e959c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b65265b5e1c70d8c1685efc3a899ce3d89362ad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b65265b5e1c70d8c1685efc3a899ce3d89362ad7", "html_url": "https://github.com/rust-lang/rust/commit/b65265b5e1c70d8c1685efc3a899ce3d89362ad7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b65265b5e1c70d8c1685efc3a899ce3d89362ad7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f7fb6413d6d6c0c929b223e478e44c3db991b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7fb6413d6d6c0c929b223e478e44c3db991b03", "html_url": "https://github.com/rust-lang/rust/commit/1f7fb6413d6d6c0c929b223e478e44c3db991b03"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "42ec206fc65b3ef1907e8fe4895454914d38f567", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b65265b5e1c70d8c1685efc3a899ce3d89362ad7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65265b5e1c70d8c1685efc3a899ce3d89362ad7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=b65265b5e1c70d8c1685efc3a899ce3d89362ad7", "patch": "@@ -2483,7 +2483,7 @@ pub struct TraitRef {\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct PolyTraitRef {\n-    /// The `'a` in `<'a> Foo<&'a T>`.\n+    /// The `'a` in `for<'a> Foo<&'a T>`.\n     pub bound_generic_params: Vec<GenericParam>,\n \n     /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`."}, {"sha": "b9e3adaac03a42bfd43114da1605eac9c6c7934f", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b65265b5e1c70d8c1685efc3a899ce3d89362ad7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65265b5e1c70d8c1685efc3a899ce3d89362ad7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=b65265b5e1c70d8c1685efc3a899ce3d89362ad7", "patch": "@@ -518,10 +518,20 @@ impl<'a> Parser<'a> {\n         match arg {\n             Some(arg) => {\n                 if self.check(&token::Colon) | self.check(&token::Eq) {\n-                    let (ident, gen_args) = match self.get_ident_from_generic_arg(arg) {\n+                    let arg_span = arg.span();\n+                    let (binder, ident, gen_args) = match self.get_ident_from_generic_arg(&arg) {\n                         Ok(ident_gen_args) => ident_gen_args,\n-                        Err(arg) => return Ok(Some(AngleBracketedArg::Arg(arg))),\n+                        Err(()) => return Ok(Some(AngleBracketedArg::Arg(arg))),\n                     };\n+                    if binder.is_some() {\n+                        // FIXME(compiler-errors): this could be improved by suggesting lifting\n+                        // this up to the trait, at least before this becomes real syntax.\n+                        // e.g. `Trait<for<'a> Assoc = Ty>` -> `for<'a> Trait<Assoc = Ty>`\n+                        return Err(self.struct_span_err(\n+                            arg_span,\n+                            \"`for<...>` is not allowed on associated type bounds\",\n+                        ));\n+                    }\n                     let kind = if self.eat(&token::Colon) {\n                         // Parse associated type constraint bound.\n \n@@ -700,18 +710,32 @@ impl<'a> Parser<'a> {\n         Ok(Some(arg))\n     }\n \n+    /// Given a arg inside of generics, we try to destructure it as if it were the LHS in\n+    /// `LHS = ...`, i.e. an associated type binding.\n+    /// This returns (optionally, if they are present) any `for<'a, 'b>` binder args, the\n+    /// identifier, and any GAT arguments.\n     fn get_ident_from_generic_arg(\n         &self,\n-        gen_arg: GenericArg,\n-    ) -> Result<(Ident, Option<GenericArgs>), GenericArg> {\n-        if let GenericArg::Type(ty) = &gen_arg\n-            && let ast::TyKind::Path(qself, path) = &ty.kind\n-            && qself.is_none()\n-            && path.segments.len() == 1\n-        {\n-            let seg = &path.segments[0];\n-            return Ok((seg.ident, seg.args.as_deref().cloned()));\n+        gen_arg: &GenericArg,\n+    ) -> Result<(Option<Vec<ast::GenericParam>>, Ident, Option<GenericArgs>), ()> {\n+        if let GenericArg::Type(ty) = gen_arg {\n+            if let ast::TyKind::Path(qself, path) = &ty.kind\n+                && qself.is_none()\n+                && let [seg] = path.segments.as_slice()\n+            {\n+                return Ok((None, seg.ident, seg.args.as_deref().cloned()));\n+            } else if let ast::TyKind::TraitObject(bounds, ast::TraitObjectSyntax::None) = &ty.kind\n+                && let [ast::GenericBound::Trait(trait_ref, ast::TraitBoundModifier::None)] =\n+                    bounds.as_slice()\n+                && let [seg] = trait_ref.trait_ref.path.segments.as_slice()\n+            {\n+                return Ok((\n+                    Some(trait_ref.bound_generic_params.clone()),\n+                    seg.ident,\n+                    seg.args.as_deref().cloned(),\n+                ));\n+            }\n         }\n-        Err(gen_arg)\n+        Err(())\n     }\n }"}, {"sha": "0b4b24b9820b9c2e10fd1f615b896e3cff1722fc", "filename": "src/test/ui/associated-type-bounds/binder-on-bound.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b65265b5e1c70d8c1685efc3a899ce3d89362ad7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65265b5e1c70d8c1685efc3a899ce3d89362ad7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.rs?ref=b65265b5e1c70d8c1685efc3a899ce3d89362ad7", "patch": "@@ -0,0 +1,11 @@\n+#![feature(generic_associated_types)]\n+\n+trait Trait {\n+    type Bound<'a>;\n+}\n+\n+fn foo() where Trait<for<'a> Bound<'a> = &'a ()> {\n+    //~^ ERROR `for<...>` is not allowed on associated type bounds\n+}\n+\n+fn main() {}"}, {"sha": "3432672e03c4fb7b3bc56fa4cd0d92487358a606", "filename": "src/test/ui/associated-type-bounds/binder-on-bound.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b65265b5e1c70d8c1685efc3a899ce3d89362ad7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b65265b5e1c70d8c1685efc3a899ce3d89362ad7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbinder-on-bound.stderr?ref=b65265b5e1c70d8c1685efc3a899ce3d89362ad7", "patch": "@@ -0,0 +1,8 @@\n+error: `for<...>` is not allowed on associated type bounds\n+  --> $DIR/binder-on-bound.rs:7:22\n+   |\n+LL | fn foo() where Trait<for<'a> Bound<'a> = &'a ()> {\n+   |                      ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}