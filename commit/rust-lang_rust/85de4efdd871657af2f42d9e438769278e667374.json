{"sha": "85de4efdd871657af2f42d9e438769278e667374", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZGU0ZWZkZDg3MTY1N2FmMmY0MmQ5ZTQzODc2OTI3OGU2NjczNzQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T12:20:45Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T18:49:38Z"}, "message": "Rename `amt` variables to `shift`", "tree": {"sha": "c41346ddf7285fe20ae433e9357f696d3903554a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c41346ddf7285fe20ae433e9357f696d3903554a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85de4efdd871657af2f42d9e438769278e667374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85de4efdd871657af2f42d9e438769278e667374", "html_url": "https://github.com/rust-lang/rust/commit/85de4efdd871657af2f42d9e438769278e667374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85de4efdd871657af2f42d9e438769278e667374/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c8741f32eabbed4d11a36f6ec5bbf109cdfa69b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8741f32eabbed4d11a36f6ec5bbf109cdfa69b", "html_url": "https://github.com/rust-lang/rust/commit/5c8741f32eabbed4d11a36f6ec5bbf109cdfa69b"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "e44b1dc886b5b345c264f8618b6331997c608bed", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=85de4efdd871657af2f42d9e438769278e667374", "patch": "@@ -1910,8 +1910,8 @@ pub fn print_miri_value<W: Write>(value: Value, ty: Ty, f: &mut W) -> fmt::Resul\n                  let ty = tcx.lift_to_global(&ty).unwrap();\n                  tcx.layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size.bits()\n             });\n-            let amt = 128 - bit_width;\n-            write!(f, \"{:?}{}\", ((bits as i128) << amt) >> amt, i)\n+            let shift = 128 - bit_width;\n+            write!(f, \"{:?}{}\", ((bits as i128) << shift) >> shift, i)\n         },\n         (Value::Scalar(Scalar::Bits { bits, .. }), &TyChar) =>\n             write!(f, \"{:?}\", ::std::char::from_u32(bits as u32).unwrap()),"}, {"sha": "3347d47a4e81ec3d320fe9bdfb4d11413aaf85f6", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=85de4efdd871657af2f42d9e438769278e667374", "patch": "@@ -1827,8 +1827,8 @@ impl<'tcx> Const<'tcx> {\n         let size = tcx.layout_of(ty).unwrap_or_else(|e| {\n             panic!(\"could not compute layout for {:?}: {:?}\", ty, e)\n         }).size;\n-        let amt = 128 - size.bits();\n-        let truncated = (bits << amt) >> amt;\n+        let shift = 128 - size.bits();\n+        let truncated = (bits << shift) >> shift;\n         assert_eq!(truncated, bits, \"from_bits called with untruncated value\");\n         Self::from_scalar(tcx, Scalar::Bits { bits, defined: size.bits() as u8 }, ty.value)\n     }"}, {"sha": "9b7443f97ef1ffcda9b5d5477603575b65dfedad", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=85de4efdd871657af2f42d9e438769278e667374", "patch": "@@ -68,14 +68,14 @@ impl<'tcx> Discr<'tcx> {\n         };\n \n         let bit_size = int.size().bits();\n-        let amt = 128 - bit_size;\n+        let shift = 128 - bit_size;\n         if signed {\n             let sext = |u| {\n                 let i = u as i128;\n-                (i << amt) >> amt\n+                (i << shift) >> shift\n             };\n             let min = sext(1_u128 << (bit_size - 1));\n-            let max = i128::max_value() >> amt;\n+            let max = i128::max_value() >> shift;\n             let val = sext(self.val);\n             assert!(n < (i128::max_value() as u128));\n             let n = n as i128;\n@@ -87,13 +87,13 @@ impl<'tcx> Discr<'tcx> {\n             };\n             // zero the upper bits\n             let val = val as u128;\n-            let val = (val << amt) >> amt;\n+            let val = (val << shift) >> shift;\n             (Self {\n                 val: val as u128,\n                 ty: self.ty,\n             }, oflo)\n         } else {\n-            let max = u128::max_value() >> amt;\n+            let max = u128::max_value() >> shift;\n             let val = self.val;\n             let oflo = val > max - n;\n             let val = if oflo {"}, {"sha": "8ff1738394e1b12e03737440e47024096f3a8b50", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=85de4efdd871657af2f42d9e438769278e667374", "patch": "@@ -158,9 +158,9 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         let trunc = |n| {\n             let param_ty = self.param_env.and(self.tcx.lift_to_global(&ty).unwrap());\n             let bit_width = self.tcx.layout_of(param_ty).unwrap().size.bits();\n-            trace!(\"trunc {} with size {} and amt {}\", n, bit_width, 128 - bit_width);\n-            let amt = 128 - bit_width;\n-            let result = (n << amt) >> amt;\n+            trace!(\"trunc {} with size {} and shift {}\", n, bit_width, 128 - bit_width);\n+            let shift = 128 - bit_width;\n+            let result = (n << shift) >> shift;\n             trace!(\"trunc result: {}\", result);\n             ConstValue::Scalar(Scalar::Bits {\n                 bits: result,"}, {"sha": "9f6e376d3062afa417efc1088a607619133f2ee0", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=85de4efdd871657af2f42d9e438769278e667374", "patch": "@@ -930,17 +930,17 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     let i = raw_discr.to_bits(discr.size)? as i128;\n                     // going from layout tag type to typeck discriminant type\n                     // requires first sign extending with the layout discriminant\n-                    let amt = 128 - discr.size.bits();\n-                    let sexted = (i << amt) >> amt;\n+                    let shift = 128 - discr.size.bits();\n+                    let sexted = (i << shift) >> shift;\n                     // and then zeroing with the typeck discriminant type\n                     let discr_ty = ty\n                         .ty_adt_def().expect(\"tagged layout corresponds to adt\")\n                         .repr\n                         .discr_type();\n                     let discr_ty = layout::Integer::from_attr(self.tcx.tcx, discr_ty);\n-                    let amt = 128 - discr_ty.size().bits();\n+                    let shift = 128 - discr_ty.size().bits();\n                     let truncatee = sexted as u128;\n-                    (truncatee << amt) >> amt\n+                    (truncatee << shift) >> shift\n                 } else {\n                     raw_discr.to_bits(discr.size)?\n                 }\n@@ -1005,8 +1005,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 // their computation, but the in-memory tag is the smallest possible\n                 // representation\n                 let size = tag.value.size(self.tcx.tcx).bits();\n-                let amt = 128 - size;\n-                let discr_val = (discr_val << amt) >> amt;\n+                let shift = 128 - size;\n+                let discr_val = (discr_val << shift) >> shift;\n \n                 let (discr_dest, tag) = self.place_field(dest, mir::Field::new(0), layout)?;\n                 self.write_scalar(discr_dest, Scalar::Bits {"}, {"sha": "b5b4ac6df6b5e00caef78f555e1f8ec56d294556", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85de4efdd871657af2f42d9e438769278e667374/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=85de4efdd871657af2f42d9e438769278e667374", "patch": "@@ -43,17 +43,17 @@ pub fn sign_extend<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, value: u128, ty: Ty<'t\n     let size = layout.size.bits();\n     assert!(layout.abi.is_signed());\n     // sign extend\n-    let amt = 128 - size;\n+    let shift = 128 - size;\n     // shift the unsigned value to the left\n     // and back to the right as signed (essentially fills with FF on the left)\n-    Ok((((value << amt) as i128) >> amt) as u128)\n+    Ok((((value << shift) as i128) >> shift) as u128)\n }\n \n pub fn truncate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, value: u128, ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n     let param_env = ParamEnv::empty();\n     let layout = tcx.layout_of(param_env.and(ty)).map_err(|layout| EvalErrorKind::Layout(layout))?;\n     let size = layout.size.bits();\n-    let amt = 128 - size;\n+    let shift = 128 - size;\n     // truncate (shift left to drop out leftover values, shift right to fill with zeroes)\n-    Ok((value << amt) >> amt)\n+    Ok((value << shift) >> shift)\n }"}]}