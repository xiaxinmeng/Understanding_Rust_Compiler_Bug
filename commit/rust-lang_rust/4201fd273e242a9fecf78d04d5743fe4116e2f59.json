{"sha": "4201fd273e242a9fecf78d04d5743fe4116e2f59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMDFmZDI3M2UyNDJhOWZlY2Y3OGQwNGQ1NzQzZmU0MTE2ZTJmNTk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-10T11:15:51Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-11T15:24:01Z"}, "message": "Remove associated opaque types\n\nThey're unused now.", "tree": {"sha": "6190df50849b7df2c2402b8d8e3abfb06d179f0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6190df50849b7df2c2402b8d8e3abfb06d179f0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4201fd273e242a9fecf78d04d5743fe4116e2f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4201fd273e242a9fecf78d04d5743fe4116e2f59", "html_url": "https://github.com/rust-lang/rust/commit/4201fd273e242a9fecf78d04d5743fe4116e2f59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4201fd273e242a9fecf78d04d5743fe4116e2f59/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e49e67c446538aa2000ed768308054f61c308e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e49e67c446538aa2000ed768308054f61c308e7", "html_url": "https://github.com/rust-lang/rust/commit/4e49e67c446538aa2000ed768308054f61c308e7"}], "stats": {"total": 416, "additions": 116, "deletions": 300}, "files": [{"sha": "af1860ca6bfea962a2f7a96b651aed60f8f5fcf2", "filename": "src/librustc_hir/def.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_hir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_hir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -54,15 +54,11 @@ pub enum DefKind {\n     /// Refers to the variant itself, `DefKind::Ctor` refers to its constructor if it exists.\n     Variant,\n     Trait,\n-    /// `type Foo = impl Bar;`\n-    OpaqueTy,\n     /// `type Foo = Bar;`\n     TyAlias,\n     ForeignTy,\n     TraitAlias,\n     AssocTy,\n-    /// `type Foo = impl Bar;`\n-    AssocOpaqueTy,\n     TyParam,\n \n     // Value namespace\n@@ -83,6 +79,7 @@ pub enum DefKind {\n     Use,\n     ForeignMod,\n     AnonConst,\n+    OpaqueTy,\n     Field,\n     LifetimeParam,\n     GlobalAsm,\n@@ -115,7 +112,6 @@ impl DefKind {\n             DefKind::TyAlias => \"type alias\",\n             DefKind::TraitAlias => \"trait alias\",\n             DefKind::AssocTy => \"associated type\",\n-            DefKind::AssocOpaqueTy => \"associated opaque type\",\n             DefKind::Union => \"union\",\n             DefKind::Trait => \"trait\",\n             DefKind::ForeignTy => \"foreign type\",\n@@ -143,7 +139,6 @@ impl DefKind {\n         match *self {\n             DefKind::AssocTy\n             | DefKind::AssocConst\n-            | DefKind::AssocOpaqueTy\n             | DefKind::AssocFn\n             | DefKind::Enum\n             | DefKind::OpaqueTy\n@@ -168,7 +163,6 @@ impl DefKind {\n             | DefKind::ForeignTy\n             | DefKind::TraitAlias\n             | DefKind::AssocTy\n-            | DefKind::AssocOpaqueTy\n             | DefKind::TyParam => ns == Namespace::TypeNS,\n \n             DefKind::Fn"}, {"sha": "122b8f2ac1612a1d1fdbfefe8a869702860f9c25", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -1919,14 +1919,12 @@ pub enum ImplItemKind<'hir> {\n     Fn(FnSig<'hir>, BodyId),\n     /// An associated type.\n     TyAlias(&'hir Ty<'hir>),\n-    /// An associated `type = impl Trait`.\n-    OpaqueTy(GenericBounds<'hir>),\n }\n \n impl ImplItemKind<'_> {\n     pub fn namespace(&self) -> Namespace {\n         match self {\n-            ImplItemKind::OpaqueTy(..) | ImplItemKind::TyAlias(..) => Namespace::TypeNS,\n+            ImplItemKind::TyAlias(..) => Namespace::TypeNS,\n             ImplItemKind::Const(..) | ImplItemKind::Fn(..) => Namespace::ValueNS,\n         }\n     }\n@@ -2016,8 +2014,6 @@ pub struct OpaqueTy<'hir> {\n /// From whence the opaque type came.\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum OpaqueTyOrigin {\n-    /// `type Foo = impl Trait;`\n-    TypeAlias,\n     /// `-> impl Trait`\n     FnReturn,\n     /// `async fn`\n@@ -2614,7 +2610,6 @@ pub enum AssocItemKind {\n     Const,\n     Fn { has_self: bool },\n     Type,\n-    OpaqueTy,\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]"}, {"sha": "8d7bba7dbd5787fee09f3aecae0fb2f899302ee4", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -1007,10 +1007,6 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n             visitor.visit_id(impl_item.hir_id);\n             visitor.visit_ty(ty);\n         }\n-        ImplItemKind::OpaqueTy(bounds) => {\n-            visitor.visit_id(impl_item.hir_id);\n-            walk_list!(visitor, visit_param_bound, bounds);\n-        }\n     }\n }\n "}, {"sha": "8b2a346b1fc382b349470664bf1c3b9f4f455dc3", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -1003,12 +1003,6 @@ impl<'a> State<'a> {\n             hir::ImplItemKind::TyAlias(ref ty) => {\n                 self.print_associated_type(ii.ident, &ii.generics, None, Some(ty));\n             }\n-            hir::ImplItemKind::OpaqueTy(bounds) => {\n-                self.word_space(\"type\");\n-                self.print_ident(ii.ident);\n-                self.print_bounds(\"= impl\", bounds);\n-                self.s.word(\";\");\n-            }\n         }\n         self.ann.post(self, AnnNode::SubItem(ii.hir_id))\n     }"}, {"sha": "2ee95174dffe67b089bca3422a34c0eacfa0b4ba", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -336,7 +336,6 @@ impl DirtyCleanVisitor<'tcx> {\n                 ImplItemKind::Fn(..) => (\"Node::ImplItem\", LABELS_FN_IN_IMPL),\n                 ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_IN_IMPL),\n                 ImplItemKind::TyAlias(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n-                ImplItemKind::OpaqueTy(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n             },\n             _ => self.tcx.sess.span_fatal(\n                 attr.span,"}, {"sha": "12f7a9c0ca50228bc316da2cd03c8e860887a2a1", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -224,9 +224,7 @@ fn trait_item_scope_tag(item: &hir::TraitItem<'_>) -> &'static str {\n fn impl_item_scope_tag(item: &hir::ImplItem<'_>) -> &'static str {\n     match item.kind {\n         hir::ImplItemKind::Fn(..) => \"method body\",\n-        hir::ImplItemKind::Const(..)\n-        | hir::ImplItemKind::OpaqueTy(..)\n-        | hir::ImplItemKind::TyAlias(..) => \"associated item\",\n+        hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(..) => \"associated item\",\n     }\n }\n "}, {"sha": "44944a9fb265a2050e2270161e40489d77231b0b", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -579,7 +579,6 @@ impl EntryKind {\n             EntryKind::ConstParam => DefKind::ConstParam,\n             EntryKind::OpaqueTy => DefKind::OpaqueTy,\n             EntryKind::AssocType(_) => DefKind::AssocTy,\n-            EntryKind::AssocOpaqueTy(_) => DefKind::AssocOpaqueTy,\n             EntryKind::Mod(_) => DefKind::Mod,\n             EntryKind::Variant(_) => DefKind::Variant,\n             EntryKind::Trait(_) => DefKind::Trait,\n@@ -1145,7 +1144,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 (ty::AssocKind::Fn, data.container, data.has_self)\n             }\n             EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),\n-            EntryKind::AssocOpaqueTy(container) => (ty::AssocKind::OpaqueTy, container, false),\n             _ => bug!(\"cannot get associated-item of `{:?}`\", def_key),\n         };\n "}, {"sha": "1dc22c10c8e7a3eca4530c86f6b2fc111ee0c717", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -874,7 +874,6 @@ impl EncodeContext<'tcx> {\n                 }))\n             }\n             ty::AssocKind::Type => EntryKind::AssocType(container),\n-            ty::AssocKind::OpaqueTy => span_bug!(ast_item.span, \"opaque type in trait\"),\n         });\n         record!(self.tables.visibility[def_id] <- trait_item.vis);\n         record!(self.tables.span[def_id] <- ast_item.span);\n@@ -892,7 +891,6 @@ impl EncodeContext<'tcx> {\n                     self.encode_item_type(def_id);\n                 }\n             }\n-            ty::AssocKind::OpaqueTy => unreachable!(),\n         }\n         if trait_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -957,7 +955,6 @@ impl EncodeContext<'tcx> {\n                     has_self: impl_item.fn_has_self_parameter,\n                 }))\n             }\n-            ty::AssocKind::OpaqueTy => EntryKind::AssocOpaqueTy(container),\n             ty::AssocKind::Type => EntryKind::AssocType(container)\n         });\n         record!(self.tables.visibility[def_id] <- impl_item.vis);\n@@ -989,7 +986,7 @@ impl EncodeContext<'tcx> {\n                 let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n                 needs_inline || is_const_fn || always_encode_mir\n             }\n-            hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(..) => false,\n+            hir::ImplItemKind::TyAlias(..) => false,\n         };\n         if mir {\n             self.encode_optimized_mir(def_id.expect_local());\n@@ -1786,7 +1783,7 @@ impl<'tcx, 'v> ParItemLikeVisitor<'v> for PrefetchVisitor<'tcx> {\n                     self.prefetch_mir(def_id)\n                 }\n             }\n-            hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(..) => (),\n+            hir::ImplItemKind::TyAlias(..) => (),\n         }\n     }\n }"}, {"sha": "626a436b4006037a89656c27b7937b829dd4beec", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -308,7 +308,6 @@ enum EntryKind {\n     Impl(Lazy<ImplData>),\n     AssocFn(Lazy<AssocFnData>),\n     AssocType(AssocContainer),\n-    AssocOpaqueTy(AssocContainer),\n     AssocConst(AssocContainer, mir::ConstQualifs, Lazy<RenderedConst>),\n     TraitAlias,\n }"}, {"sha": "d1cfc4867a2fe0f5c57007177e17cbc8b21ccb7f", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -228,7 +228,6 @@ impl<'hir> Map<'hir> {\n                 ImplItemKind::Const(..) => DefKind::AssocConst,\n                 ImplItemKind::Fn(..) => DefKind::AssocFn,\n                 ImplItemKind::TyAlias(..) => DefKind::AssocTy,\n-                ImplItemKind::OpaqueTy(..) => DefKind::AssocOpaqueTy,\n             },\n             Node::Variant(_) => DefKind::Variant,\n             Node::Ctor(variant_data) => {\n@@ -1023,9 +1022,6 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n             ImplItemKind::TyAlias(_) => {\n                 format!(\"assoc type {} in {}{}\", ii.ident, path_str(), id_str)\n             }\n-            ImplItemKind::OpaqueTy(_) => {\n-                format!(\"assoc opaque type {} in {}{}\", ii.ident, path_str(), id_str)\n-            }\n         },\n         Some(Node::TraitItem(ti)) => {\n             let kind = match ti.kind {"}, {"sha": "f4961617b81c6e8365a4ee6ec6be635b19c5ba7b", "filename": "src/librustc_middle/traits/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -100,24 +100,11 @@ impl<'tcx> Node {\n         trait_item_kind: ty::AssocKind,\n         trait_def_id: DefId,\n     ) -> Option<ty::AssocItem> {\n-        use crate::ty::AssocKind::*;\n-\n         tcx.associated_items(self.def_id())\n             .filter_by_name_unhygienic(trait_item_name.name)\n             .find(move |impl_item| {\n-                match (trait_item_kind, impl_item.kind) {\n-                | (Const, Const)\n-                | (Fn, Fn)\n-                | (Type, Type)\n-                | (Type, OpaqueTy)  // assoc. types can be made opaque in impls\n-                => tcx.hygienic_eq(impl_item.ident, trait_item_name, trait_def_id),\n-\n-                | (Const, _)\n-                | (Fn, _)\n-                | (Type, _)\n-                | (OpaqueTy, _)\n-                => false,\n-            }\n+                trait_item_kind == impl_item.kind\n+                    && tcx.hygienic_eq(impl_item.ident, trait_item_name, trait_def_id)\n             })\n             .copied()\n     }"}, {"sha": "be3bf748225b9885097f4c6e07379e49a9782079", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -814,7 +814,7 @@ fn foo(&self) -> Self::T { String::new() }\n                 // FIXME: account for `#![feature(specialization)]`\n                 for item in &items[..] {\n                     match item.kind {\n-                        hir::AssocItemKind::Type | hir::AssocItemKind::OpaqueTy => {\n+                        hir::AssocItemKind::Type => {\n                             // FIXME: account for returning some type in a trait fn impl that has\n                             // an assoc type as a return type (#72076).\n                             if let hir::Defaultness::Default { has_value: true } = item.defaultness\n@@ -838,7 +838,7 @@ fn foo(&self) -> Self::T { String::new() }\n             })) => {\n                 for item in &items[..] {\n                     match item.kind {\n-                        hir::AssocItemKind::Type | hir::AssocItemKind::OpaqueTy => {\n+                        hir::AssocItemKind::Type => {\n                             if self.type_of(self.hir().local_def_id(item.id.hir_id)) == found {\n                                 db.span_label(item.span, \"expected this associated type\");\n                                 return true;"}, {"sha": "93ef73171993c0522fd161cda065e54c821fdf7d", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -198,14 +198,13 @@ pub struct AssocItem {\n pub enum AssocKind {\n     Const,\n     Fn,\n-    OpaqueTy,\n     Type,\n }\n \n impl AssocKind {\n     pub fn namespace(&self) -> Namespace {\n         match *self {\n-            ty::AssocKind::OpaqueTy | ty::AssocKind::Type => Namespace::TypeNS,\n+            ty::AssocKind::Type => Namespace::TypeNS,\n             ty::AssocKind::Const | ty::AssocKind::Fn => Namespace::ValueNS,\n         }\n     }\n@@ -215,22 +214,11 @@ impl AssocKind {\n             AssocKind::Const => DefKind::AssocConst,\n             AssocKind::Fn => DefKind::AssocFn,\n             AssocKind::Type => DefKind::AssocTy,\n-            AssocKind::OpaqueTy => DefKind::AssocOpaqueTy,\n         }\n     }\n }\n \n impl AssocItem {\n-    /// Tests whether the associated item admits a non-trivial implementation\n-    /// for !\n-    pub fn relevant_for_never(&self) -> bool {\n-        match self.kind {\n-            AssocKind::OpaqueTy | AssocKind::Const | AssocKind::Type => true,\n-            // FIXME(canndrew): Be more thorough here, check if any argument is uninhabited.\n-            AssocKind::Fn => !self.fn_has_self_parameter,\n-        }\n-    }\n-\n     pub fn signature(&self, tcx: TyCtxt<'_>) -> String {\n         match self.kind {\n             ty::AssocKind::Fn => {\n@@ -241,8 +229,6 @@ impl AssocItem {\n                 tcx.fn_sig(self.def_id).skip_binder().to_string()\n             }\n             ty::AssocKind::Type => format!(\"type {};\", self.ident),\n-            // FIXME(type_alias_impl_trait): we should print bounds here too.\n-            ty::AssocKind::OpaqueTy => format!(\"type {};\", self.ident),\n             ty::AssocKind::Const => {\n                 format!(\"const {}: {:?};\", self.ident, tcx.type_of(self.def_id))\n             }\n@@ -2581,10 +2567,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())\n     }\n \n-    pub fn trait_relevant_for_never(self, did: DefId) -> bool {\n-        self.associated_items(did).in_definition_order().any(|item| item.relevant_for_never())\n-    }\n-\n     pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {\n         def_id\n             .as_local()"}, {"sha": "80681c143750fc7e8fe091158cfc49a891aa7c35", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -37,7 +37,7 @@ fn target_from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>)\n                 Target::Method(MethodKind::Inherent)\n             }\n         }\n-        hir::ImplItemKind::TyAlias(..) | hir::ImplItemKind::OpaqueTy(..) => Target::AssocTy,\n+        hir::ImplItemKind::TyAlias(..) => Target::AssocTy,\n     }\n }\n "}, {"sha": "419bbda78271abf9b922dd2d002b6e62c7cd121a", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -668,7 +668,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n                 }\n                 self.visit_nested_body(body_id)\n             }\n-            hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(..) => {}\n+            hir::ImplItemKind::TyAlias(..) => {}\n         }\n     }\n "}, {"sha": "c9a4428c007aae7a68dd9feadad207b17938038f", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -180,7 +180,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(_) => false,\n+                    hir::ImplItemKind::TyAlias(_) => false,\n                 }\n             }\n             Some(_) => false,\n@@ -289,7 +289,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                         self.visit_nested_body(body)\n                     }\n                 }\n-                hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(_) => {}\n+                hir::ImplItemKind::TyAlias(_) => {}\n             },\n             Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(.., body, _, _), .. }) => {\n                 self.visit_nested_body(body);"}, {"sha": "977862621224200571f97391edf48af7dcb2a9d7", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -615,7 +615,6 @@ impl EmbargoVisitor<'tcx> {\n             // public, or are not namespaced at all.\n             DefKind::AssocConst\n             | DefKind::AssocTy\n-            | DefKind::AssocOpaqueTy\n             | DefKind::ConstParam\n             | DefKind::Ctor(_, _)\n             | DefKind::Enum\n@@ -1333,11 +1332,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             _ => None,\n         };\n         let def = def.filter(|(kind, _)| match kind {\n-            DefKind::AssocFn\n-            | DefKind::AssocConst\n-            | DefKind::AssocTy\n-            | DefKind::AssocOpaqueTy\n-            | DefKind::Static => true,\n+            DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static => true,\n             _ => false,\n         });\n         if let Some((kind, def_id)) = def {\n@@ -1602,9 +1597,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                             hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {\n                                 self.access_levels.is_reachable(impl_item_ref.id.hir_id)\n                             }\n-                            hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(_) => {\n-                                false\n-                            }\n+                            hir::ImplItemKind::TyAlias(_) => false,\n                         }\n                     });\n \n@@ -1952,9 +1945,6 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n         let (check_ty, is_assoc_ty) = match assoc_item_kind {\n             AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),\n             AssocItemKind::Type => (defaultness.has_value(), true),\n-            // `ty()` for opaque types is the underlying type,\n-            // it's not a part of interface, so we skip it.\n-            AssocItemKind::OpaqueTy => (false, true),\n         };\n         check.in_assoc_ty = is_assoc_ty;\n         check.generics().predicates();"}, {"sha": "e633bd1843e85d292411a45c65dbb0a5220d12f0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -916,8 +916,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 | DefKind::ForeignTy\n                 | DefKind::OpaqueTy\n                 | DefKind::TraitAlias\n-                | DefKind::AssocTy\n-                | DefKind::AssocOpaqueTy,\n+                | DefKind::AssocTy,\n                 _,\n             )\n             | Res::PrimTy(..)"}, {"sha": "aa3e04121435f6902a058efbabddf8896215f5ad", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -799,43 +799,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     this.visit_ty(ty);\n                 });\n             }\n-            OpaqueTy(bounds) => {\n-                let generics = &impl_item.generics;\n-                let mut index = self.next_early_index();\n-                let mut next_early_index = index;\n-                debug!(\"visit_ty: index = {}\", index);\n-                let lifetimes = generics\n-                    .params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n-                        }\n-                        GenericParamKind::Type { .. } => {\n-                            next_early_index += 1;\n-                            None\n-                        }\n-                        GenericParamKind::Const { .. } => {\n-                            next_early_index += 1;\n-                            None\n-                        }\n-                    })\n-                    .collect();\n-\n-                let scope = Scope::Binder {\n-                    lifetimes,\n-                    next_early_index,\n-                    s: self.scope,\n-                    track_lifetime_uses: true,\n-                    opaque_type_parent: true,\n-                };\n-                self.with(scope, |_old_scope, this| {\n-                    this.visit_generics(generics);\n-                    for bound in bounds {\n-                        this.visit_param_bound(bound);\n-                    }\n-                });\n-            }\n             Const(_, _) => {\n                 // Only methods and types support generics.\n                 assert!(impl_item.generics.params.is_empty());"}, {"sha": "a4cef14e156f210e6759708dae1e55218b35ac6c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -1102,7 +1102,6 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     impl_item.span,\n                 );\n             }\n-            hir::ImplItemKind::OpaqueTy(..) => {}\n             hir::ImplItemKind::TyAlias(ref ty) => {\n                 // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the"}, {"sha": "45c3e3e639f95f73fe7e718dcb736183eff094ce", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -698,7 +698,6 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 | HirDefKind::TyAlias\n                 | HirDefKind::ForeignTy\n                 | HirDefKind::TraitAlias\n-                | HirDefKind::AssocOpaqueTy\n                 | HirDefKind::AssocTy\n                 | HirDefKind::Trait\n                 | HirDefKind::OpaqueTy"}, {"sha": "af2fa783c93bd5a74212428f3c2f35a3b0d01176", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -11,7 +11,7 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::{self, InferCtxt, InferOk};\n use rustc_middle::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n-use rustc_middle::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::config::nightly_options;\n use rustc_span::Span;\n \n@@ -1059,21 +1059,10 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                                     ),\n                                     origin,\n                                 ),\n-                                _ => (def_scope_default(), hir::OpaqueTyOrigin::TypeAlias),\n-                            },\n-                            Some(Node::ImplItem(item)) => match item.kind {\n-                                hir::ImplItemKind::OpaqueTy(_) => (\n-                                    may_define_opaque_type(\n-                                        tcx,\n-                                        self.parent_def_id.expect_local(),\n-                                        opaque_hir_id,\n-                                    ),\n-                                    hir::OpaqueTyOrigin::TypeAlias,\n-                                ),\n-                                _ => (def_scope_default(), hir::OpaqueTyOrigin::TypeAlias),\n+                                _ => (def_scope_default(), hir::OpaqueTyOrigin::Misc),\n                             },\n                             _ => bug!(\n-                                \"expected (impl) item, found {}\",\n+                                \"expected item, found {}\",\n                                 tcx.hir().node_to_string(opaque_hir_id),\n                             ),\n                         };"}, {"sha": "9492c3c340995091fb75041c1833ab4eae55d3fc", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -25,7 +25,7 @@ use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::{FnOnceTraitLangItem, GeneratorTraitLangItem};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n-use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::symbol::{sym, Ident};\n@@ -1477,12 +1477,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);\n     let substs =\n         translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);\n-    let ty = if let ty::AssocKind::OpaqueTy = assoc_ty.item.kind {\n-        let item_substs = InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n-        tcx.mk_opaque(assoc_ty.item.def_id, item_substs)\n-    } else {\n-        tcx.type_of(assoc_ty.item.def_id)\n-    };\n+    let ty = tcx.type_of(assoc_ty.item.def_id);\n     if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {\n         tcx.sess\n             .delay_span_bug(DUMMY_SP, \"impl item and trait item have different parameter counts\");\n@@ -1515,7 +1510,7 @@ fn assoc_ty_def(\n     // cycle error if the specialization graph is currently being built.\n     let impl_node = specialization_graph::Node::Impl(impl_def_id);\n     for item in impl_node.items(tcx) {\n-        if matches!(item.kind, ty::AssocKind::Type | ty::AssocKind::OpaqueTy)\n+        if matches!(item.kind, ty::AssocKind::Type)\n             && tcx.hygienic_eq(item.ident, assoc_ty_name, trait_def_id)\n         {\n             return Ok(specialization_graph::LeafDef {"}, {"sha": "99094246a637861154157420e102c85d54658f71", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -85,7 +85,6 @@ fn associated_item_from_trait_item_ref(\n         hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n         hir::AssocItemKind::Fn { has_self } => (ty::AssocKind::Fn, has_self),\n         hir::AssocItemKind::Type => (ty::AssocKind::Type, false),\n-        hir::AssocItemKind::OpaqueTy => bug!(\"only impls can have opaque types\"),\n     };\n \n     ty::AssocItem {\n@@ -110,7 +109,6 @@ fn associated_item_from_impl_item_ref(\n         hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n         hir::AssocItemKind::Fn { has_self } => (ty::AssocKind::Fn, has_self),\n         hir::AssocItemKind::Type => (ty::AssocKind::Type, false),\n-        hir::AssocItemKind::OpaqueTy => (ty::AssocKind::OpaqueTy, false),\n     };\n \n     ty::AssocItem {"}, {"sha": "5f8fcaadfdb0b2fc66081a7e26f67fa05259c6a2", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -1165,6 +1165,6 @@ fn assoc_item_kind_str(impl_item: &ty::AssocItem) -> &'static str {\n     match impl_item.kind {\n         ty::AssocKind::Const => \"const\",\n         ty::AssocKind::Fn => \"method\",\n-        ty::AssocKind::Type | ty::AssocKind::OpaqueTy => \"type\",\n+        ty::AssocKind::Type => \"type\",\n     }\n }"}, {"sha": "a2e6c8793cbddab06539bf75a896cfb21c6854f5", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -1556,7 +1556,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         match self.mode {\n             Mode::MethodCall => item.fn_has_self_parameter,\n             Mode::Path => match item.kind {\n-                ty::AssocKind::OpaqueTy | ty::AssocKind::Type => false,\n+                ty::AssocKind::Type => false,\n                 ty::AssocKind::Fn | ty::AssocKind::Const => true,\n             },\n         }"}, {"sha": "67bdd04d3715c8fc17ae2a2c2011034f71e5058d", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -158,9 +158,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let path = self.tcx.def_path_str(trait_ref.def_id);\n \n                             let ty = match item.kind {\n-                                ty::AssocKind::Const\n-                                | ty::AssocKind::Type\n-                                | ty::AssocKind::OpaqueTy => rcvr_ty,\n+                                ty::AssocKind::Const | ty::AssocKind::Type => rcvr_ty,\n                                 ty::AssocKind::Fn => self\n                                     .tcx\n                                     .fn_sig(item.def_id)"}, {"sha": "8970a912743cd398cf035b2ca1dc4037b40d4285", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -1943,7 +1943,6 @@ fn check_specialization_validity<'tcx>(\n     let kind = match impl_item.kind {\n         hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n         hir::ImplItemKind::Fn(..) => ty::AssocKind::Fn,\n-        hir::ImplItemKind::OpaqueTy(..) => ty::AssocKind::OpaqueTy,\n         hir::ImplItemKind::TyAlias(_) => ty::AssocKind::Type,\n     };\n \n@@ -2114,7 +2113,7 @@ fn check_impl_items_against_trait<'tcx>(\n                         err.emit()\n                     }\n                 }\n-                hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(_) => {\n+                hir::ImplItemKind::TyAlias(_) => {\n                     let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n                     if ty_trait_item.kind == ty::AssocKind::Type {\n                         compare_ty_impl(\n@@ -2367,8 +2366,6 @@ fn suggestion_signature(assoc: &ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n             )\n         }\n         ty::AssocKind::Type => format!(\"type {} = Type;\", assoc.ident),\n-        // FIXME(type_alias_impl_trait): we should print bounds here too.\n-        ty::AssocKind::OpaqueTy => format!(\"type {} = Type;\", assoc.ident),\n         ty::AssocKind::Const => {\n             let ty = tcx.type_of(assoc.def_id);\n             let val = expr::ty_kind_suggestion(ty).unwrap_or(\"value\");"}, {"sha": "c0be1d42d134c5e02c45687e00b4eb4cd2a80875", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 82, "deletions": 85, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -316,9 +316,6 @@ fn check_associated_item(\n                     fcx.register_wf_obligation(ty.into(), span, code.clone());\n                 }\n             }\n-            ty::AssocKind::OpaqueTy => {\n-                // Do nothing: opaque types check themselves.\n-            }\n         }\n \n         implied_bounds\n@@ -900,102 +897,102 @@ fn check_opaque_types<'fcx, 'tcx>(\n                 if !def_id.is_local() {\n                     return ty;\n                 }\n-                    let opaque_hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n+                let opaque_hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n                 if let hir::ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn: Some(_), .. }) =\n                     tcx.hir().expect_item(opaque_hir_id).kind\n                 {\n                     // Don't check return position impl trait.\n                     return ty;\n                 }\n-                    if may_define_opaque_type(tcx, fn_def_id, opaque_hir_id) {\n-                        trace!(\"check_opaque_types: may define, generics={:#?}\", generics);\n-                        let mut seen_params: FxHashMap<_, Vec<_>> = FxHashMap::default();\n-                        for (i, arg) in substs.iter().enumerate() {\n-                            let arg_is_param = match arg.unpack() {\n-                                GenericArgKind::Type(ty) => matches!(ty.kind, ty::Param(_)),\n-\n-                                GenericArgKind::Lifetime(region) => {\n-                                    if let ty::ReStatic = region {\n-                                        tcx.sess\n-                                            .struct_span_err(\n-                                                span,\n-                                                \"non-defining opaque type use in defining scope\",\n-                                            )\n-                                            .span_label(\n-                                                tcx.def_span(generics.param_at(i, tcx).def_id),\n-                                                \"cannot use static lifetime; use a bound lifetime \\\n+                if may_define_opaque_type(tcx, fn_def_id, opaque_hir_id) {\n+                    trace!(\"check_opaque_types: may define, generics={:#?}\", generics);\n+                    let mut seen_params: FxHashMap<_, Vec<_>> = FxHashMap::default();\n+                    for (i, arg) in substs.iter().enumerate() {\n+                        let arg_is_param = match arg.unpack() {\n+                            GenericArgKind::Type(ty) => matches!(ty.kind, ty::Param(_)),\n+\n+                            GenericArgKind::Lifetime(region) => {\n+                                if let ty::ReStatic = region {\n+                                    tcx.sess\n+                                        .struct_span_err(\n+                                            span,\n+                                            \"non-defining opaque type use in defining scope\",\n+                                        )\n+                                        .span_label(\n+                                            tcx.def_span(generics.param_at(i, tcx).def_id),\n+                                            \"cannot use static lifetime; use a bound lifetime \\\n                                                  instead or remove the lifetime parameter from the \\\n                                                  opaque type\",\n-                                            )\n-                                            .emit();\n-                                        continue;\n-                                    }\n-\n-                                    true\n+                                        )\n+                                        .emit();\n+                                    continue;\n                                 }\n \n-                            GenericArgKind::Const(ct) => matches!(ct.val, ty::ConstKind::Param(_)),\n-                            };\n-\n-                            if arg_is_param {\n-                                seen_params.entry(arg).or_default().push(i);\n-                            } else {\n-                                // Prevent `fn foo() -> Foo<u32>` from being defining.\n-                                let opaque_param = generics.param_at(i, tcx);\n-                                tcx.sess\n-                                    .struct_span_err(\n-                                        span,\n-                                        \"non-defining opaque type use in defining scope\",\n-                                    )\n-                                    .span_note(\n-                                        tcx.def_span(opaque_param.def_id),\n-                                        &format!(\n-                                            \"used non-generic {} `{}` for generic parameter\",\n-                                            opaque_param.kind.descr(),\n-                                            arg,\n-                                        ),\n-                                    )\n-                                    .emit();\n-                            }\n-                        } // for (arg, param)\n-\n-                        for (_, indices) in seen_params {\n-                            if indices.len() > 1 {\n-                                let descr = generics.param_at(indices[0], tcx).kind.descr();\n-                                let spans: Vec<_> = indices\n-                                    .into_iter()\n-                                    .map(|i| tcx.def_span(generics.param_at(i, tcx).def_id))\n-                                    .collect();\n-                                tcx.sess\n-                                    .struct_span_err(\n-                                        span,\n-                                        \"non-defining opaque type use in defining scope\",\n-                                    )\n-                                    .span_note(spans, &format!(\"{} used multiple times\", descr))\n-                                    .emit();\n+                                true\n                             }\n+\n+                            GenericArgKind::Const(ct) => matches!(ct.val, ty::ConstKind::Param(_)),\n+                        };\n+\n+                        if arg_is_param {\n+                            seen_params.entry(arg).or_default().push(i);\n+                        } else {\n+                            // Prevent `fn foo() -> Foo<u32>` from being defining.\n+                            let opaque_param = generics.param_at(i, tcx);\n+                            tcx.sess\n+                                .struct_span_err(\n+                                    span,\n+                                    \"non-defining opaque type use in defining scope\",\n+                                )\n+                                .span_note(\n+                                    tcx.def_span(opaque_param.def_id),\n+                                    &format!(\n+                                        \"used non-generic {} `{}` for generic parameter\",\n+                                        opaque_param.kind.descr(),\n+                                        arg,\n+                                    ),\n+                                )\n+                                .emit();\n                         }\n-                    } // if may_define_opaque_type\n-\n-                    // Now register the bounds on the parameters of the opaque type\n-                    // so the parameters given by the function need to fulfill them.\n-                    //\n-                    //     type Foo<T: Bar> = impl Baz + 'static;\n-                    //     fn foo<U>() -> Foo<U> { .. *}\n-                    //\n-                    // becomes\n-                    //\n-                    //     type Foo<T: Bar> = impl Baz + 'static;\n-                    //     fn foo<U: Bar>() -> Foo<U> { .. *}\n-                    let predicates = tcx.predicates_of(def_id);\n-                    trace!(\"check_opaque_types: may define, predicates={:#?}\", predicates,);\n-                    for &(pred, _) in predicates.predicates {\n-                        let substituted_pred = pred.subst(fcx.tcx, substs);\n-                        // Avoid duplication of predicates that contain no parameters, for example.\n-                        if !predicates.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n-                            substituted_predicates.push(substituted_pred);\n+                    } // for (arg, param)\n+\n+                    for (_, indices) in seen_params {\n+                        if indices.len() > 1 {\n+                            let descr = generics.param_at(indices[0], tcx).kind.descr();\n+                            let spans: Vec<_> = indices\n+                                .into_iter()\n+                                .map(|i| tcx.def_span(generics.param_at(i, tcx).def_id))\n+                                .collect();\n+                            tcx.sess\n+                                .struct_span_err(\n+                                    span,\n+                                    \"non-defining opaque type use in defining scope\",\n+                                )\n+                                .span_note(spans, &format!(\"{} used multiple times\", descr))\n+                                .emit();\n                         }\n                     }\n+                } // if may_define_opaque_type\n+\n+                // Now register the bounds on the parameters of the opaque type\n+                // so the parameters given by the function need to fulfill them.\n+                //\n+                //     type Foo<T: Bar> = impl Baz + 'static;\n+                //     fn foo<U>() -> Foo<U> { .. *}\n+                //\n+                // becomes\n+                //\n+                //     type Foo<T: Bar> = impl Baz + 'static;\n+                //     fn foo<U: Bar>() -> Foo<U> { .. *}\n+                let predicates = tcx.predicates_of(def_id);\n+                trace!(\"check_opaque_types: may define, predicates={:#?}\", predicates,);\n+                for &(pred, _) in predicates.predicates {\n+                    let substituted_pred = pred.subst(fcx.tcx, substs);\n+                    // Avoid duplication of predicates that contain no parameters, for example.\n+                    if !predicates.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n+                        substituted_predicates.push(substituted_pred);\n+                    }\n+                }\n             } // if let Opaque\n             ty\n         },"}, {"sha": "191244e41c80cb250c33ec102b4877dd0d00782e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -742,7 +742,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n         hir::ImplItemKind::Fn(..) => {\n             tcx.ensure().fn_sig(def_id);\n         }\n-        hir::ImplItemKind::TyAlias(_) | hir::ImplItemKind::OpaqueTy(_) => {\n+        hir::ImplItemKind::TyAlias(_) => {\n             // Account for `type T = _;`\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_impl_item(impl_item);\n@@ -1203,10 +1203,10 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 impl_trait_fn.or_else(|| {\n                     let parent_id = tcx.hir().get_parent_item(hir_id);\n                     assert!(parent_id != hir_id && parent_id != CRATE_HIR_ID);\n-                        debug!(\"generics_of: parent of opaque ty {:?} is {:?}\", def_id, parent_id);\n+                    debug!(\"generics_of: parent of opaque ty {:?} is {:?}\", def_id, parent_id);\n                     // Opaque types are always nested within another item, and\n                     // inherit the generics of the item.\n-                            Some(tcx.hir().local_def_id(parent_id).to_def_id())\n+                    Some(tcx.hir().local_def_id(parent_id).to_def_id())\n                 })\n             }\n             _ => None,\n@@ -1704,31 +1704,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n     let ast_generics = match node {\n         Node::TraitItem(item) => &item.generics,\n \n-        Node::ImplItem(item) => match item.kind {\n-            ImplItemKind::OpaqueTy(ref bounds) => {\n-                ty::print::with_no_queries(|| {\n-                    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-                    let opaque_ty = tcx.mk_opaque(def_id, substs);\n-                    debug!(\n-                        \"explicit_predicates_of({:?}): created opaque type {:?}\",\n-                        def_id, opaque_ty\n-                    );\n-\n-                    // Collect the bounds, i.e., the `A + B + 'c` in `impl A + B + 'c`.\n-                    let bounds = AstConv::compute_bounds(\n-                        &icx,\n-                        opaque_ty,\n-                        bounds,\n-                        SizedByDefault::Yes,\n-                        tcx.def_span(def_id),\n-                    );\n-\n-                    predicates.extend(bounds.predicates(tcx, opaque_ty));\n-                    &item.generics\n-                })\n-            }\n-            _ => &item.generics,\n-        },\n+        Node::ImplItem(item) => &item.generics,\n \n         Node::Item(item) => {\n             match item.kind {"}, {"sha": "f9bc7389b070da6bbfedcbc1999197231f70c371", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -64,13 +64,6 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     icx.to_ty(ty)\n                 }\n             }\n-            ImplItemKind::OpaqueTy(_) => {\n-                if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id).to_def_id()).is_none() {\n-                    report_assoc_ty_on_inherent_impl(tcx, item.span);\n-                }\n-\n-                find_opaque_ty_constraints(tcx, def_id.expect_local())\n-            }\n             ImplItemKind::TyAlias(ref ty) => {\n                 if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id).to_def_id()).is_none() {\n                     report_assoc_ty_on_inherent_impl(tcx, item.span);"}, {"sha": "37d383db68ab6ae917ca7efb6d2c086031c1513b", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -140,13 +140,6 @@ fn enforce_impl_params_are_constrained(\n                         Vec::new()\n                     }\n                 }\n-                ty::AssocKind::OpaqueTy => {\n-                    // We don't know which lifetimes appear in the actual\n-                    // opaque type, so use all of the lifetimes that appear\n-                    // in the type's predicates.\n-                    let predicates = tcx.predicates_of(def_id).instantiate_identity(tcx);\n-                    cgp::parameters_for(&predicates, true)\n-                }\n                 ty::AssocKind::Fn | ty::AssocKind::Const => Vec::new(),\n             }\n         })"}, {"sha": "92bf6b564cf8ac37f3c4470548ed9be89a8f9325", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -1138,10 +1138,6 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                 let item_type = type_.def_id().and_then(|did| inline::build_ty(cx, did));\n                 TypedefItem(Typedef { type_, generics: Generics::default(), item_type }, true)\n             }\n-            hir::ImplItemKind::OpaqueTy(ref bounds) => OpaqueTyItem(\n-                OpaqueTy { bounds: bounds.clean(cx), generics: Generics::default() },\n-                true,\n-            ),\n         };\n         let local_did = cx.tcx.hir().local_def_id(self.hir_id);\n         Item {\n@@ -1308,7 +1304,6 @@ impl Clean<Item> for ty::AssocItem {\n                     )\n                 }\n             }\n-            ty::AssocKind::OpaqueTy => unimplemented!(),\n         };\n \n         let visibility = match self.container {"}, {"sha": "318d0b69d57b7924ae7dd9adb8f138689bf838b2", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -379,7 +379,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n             TyKind::Path(ref path) => {\n                 self.collect_anonymous_lifetimes(path, ty);\n             },\n-            TyKind::Def(item, _) => {\n+            TyKind::OpaqueDef(item, _) => {\n                 let map = self.cx.tcx.hir();\n                 if let ItemKind::OpaqueTy(ref exist_ty) = map.expect_item(item.id).kind {\n                     for bound in exist_ty.bounds {"}, {"sha": "03ab274d9ca9c9cc741445741b58b07f8da75436", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ManualAsyncFn {\n \n fn future_trait_ref<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &'tcx Ty<'tcx>) -> Option<&'tcx TraitRef<'tcx>> {\n     if_chain! {\n-        if let TyKind::Def(item_id, _) = ty.kind;\n+        if let TyKind::OpaqueDef(item_id, _) = ty.kind;\n         let item = cx.tcx.hir().item(item_id.id);\n         if let ItemKind::OpaqueTy(opaque) = &item.kind;\n         if opaque.bounds.len() == 1;"}, {"sha": "0096543c1fbca32e10f4497a2c98ddf76b33f031", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4201fd273e242a9fecf78d04d5743fe4116e2f59/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=4201fd273e242a9fecf78d04d5743fe4116e2f59", "patch": "@@ -710,7 +710,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     segment.ident.name.hash(&mut self.s);\n                 },\n             },\n-            TyKind::Def(_, arg_list) => {\n+            TyKind::OpaqueDef(_, arg_list) => {\n                 for arg in *arg_list {\n                     match arg {\n                         GenericArg::Lifetime(ref l) => self.hash_lifetime(l),"}]}