{"sha": "f16e7242d2433378a0530d31427fad4ddd36c69f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNmU3MjQyZDI0MzMzNzhhMDUzMGQzMTQyN2ZhZDRkZGQzNmM2OWY=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-01T03:11:26Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-01T03:15:11Z"}, "message": "Initialize the alloca used to retrieve boxed block results to null.\n\nThis allows blocks to be used in conditional constructs where the block may\nnot ever execute: the drop glue will notice that it was never used and ignore\nit.\n\nAlso, beef up the comments.", "tree": {"sha": "688abbbfa6505f59cd81134fe48aa4e9e30d172b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/688abbbfa6505f59cd81134fe48aa4e9e30d172b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f16e7242d2433378a0530d31427fad4ddd36c69f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f16e7242d2433378a0530d31427fad4ddd36c69f", "html_url": "https://github.com/rust-lang/rust/commit/f16e7242d2433378a0530d31427fad4ddd36c69f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f16e7242d2433378a0530d31427fad4ddd36c69f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "524e80358254575bb699756c405050da6c920e28", "url": "https://api.github.com/repos/rust-lang/rust/commits/524e80358254575bb699756c405050da6c920e28", "html_url": "https://github.com/rust-lang/rust/commit/524e80358254575bb699756c405050da6c920e28"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "c04e97489a87450d18716523c9fdba1dab32cbfe", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f16e7242d2433378a0530d31427fad4ddd36c69f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16e7242d2433378a0530d31427fad4ddd36c69f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f16e7242d2433378a0530d31427fad4ddd36c69f", "patch": "@@ -5384,21 +5384,29 @@ fn trans_block(@block_ctxt cx, &ast.block b) -> result {\n             if (is_terminated(bcx)) {\n                 ret r;\n             } else {\n-                // The value resulting from the block gets copied into an\n-                // alloca created in an enclosing scope and it's refcount\n-                // bumped so that it can escape this block. This means that\n-                // it will definitely live until the end of the enclosing\n-                // scope, even if nobody uses it, which may be something of\n-                // a surprise.\n-\n                 auto r_ty = ty.expr_ty(e);\n \n                 if (ty.type_is_boxed(r_ty)) {\n-\n-                    // Create an alloca up in the llallocas block to hold the\n-                    // expression result.\n+                    // The value resulting from the block gets copied into an\n+                    // alloca created in an outer scope and it's refcount\n+                    // bumped so that it can escape this block. This means\n+                    // that it will definitely live until the end of the\n+                    // enclosing scope, even if nobody uses it, which may be\n+                    // something of a surprise.\n+\n+                    // It's possible we never hit this block, so the alloca\n+                    // must be initialized to null, then when the potential\n+                    // value finally goes out of scope the drop glue will see\n+                    // that it was never used and ignore it.\n+\n+                    // NB: Here we're building and initalizing the alloca in\n+                    // the alloca context, not this block's context.\n                     auto res_alloca = alloc_ty(bcx, r_ty);\n-                    bcx = res_alloca.bcx;\n+                    auto alloca_ty = type_of(bcx.fcx.ccx, r_ty);\n+                    auto builder = new_builder(bcx.fcx.llallocas);\n+                    builder.Store(C_null(alloca_ty), res_alloca.val);\n+\n+                    // Now we're working in our own block context again\n                     auto res_copy = copy_ty(bcx, INIT,\n                                             res_alloca.val, r.val, r_ty);\n                     bcx = res_copy.bcx;"}]}