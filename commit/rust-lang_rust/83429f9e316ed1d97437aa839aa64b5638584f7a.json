{"sha": "83429f9e316ed1d97437aa839aa64b5638584f7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNDI5ZjllMzE2ZWQxZDk3NDM3YWE4MzlhYTY0YjU2Mzg1ODRmN2E=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-18T08:37:45Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-18T08:37:45Z"}, "message": "Rollup merge of #33666 - xen0n:no-more-nest-levels, r=nikomatsakis\n\nsyntax_ext: format: nest_level's are no more\n\nJust noticed this while working on #33642 and here's a quick fix, shouldn't touch anything else. It's some historic code indeed...", "tree": {"sha": "65baa90ce6b317cca692403f07968e6ac810ebcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65baa90ce6b317cca692403f07968e6ac810ebcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83429f9e316ed1d97437aa839aa64b5638584f7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83429f9e316ed1d97437aa839aa64b5638584f7a", "html_url": "https://github.com/rust-lang/rust/commit/83429f9e316ed1d97437aa839aa64b5638584f7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83429f9e316ed1d97437aa839aa64b5638584f7a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a759d7ab6bc072a5e1c206356baf9c8ad633e36", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a759d7ab6bc072a5e1c206356baf9c8ad633e36", "html_url": "https://github.com/rust-lang/rust/commit/7a759d7ab6bc072a5e1c206356baf9c8ad633e36"}, {"sha": "2ea6c70a1ad43ae8af0e108ddcee4fc06ea9c77c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea6c70a1ad43ae8af0e108ddcee4fc06ea9c77c", "html_url": "https://github.com/rust-lang/rust/commit/2ea6c70a1ad43ae8af0e108ddcee4fc06ea9c77c"}], "stats": {"total": 26, "additions": 5, "deletions": 21}, "files": [{"sha": "abfa65580646dd51df6d8b8c49ce0e4c464cff72", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/83429f9e316ed1d97437aa839aa64b5638584f7a/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83429f9e316ed1d97437aa839aa64b5638584f7a/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=83429f9e316ed1d97437aa839aa64b5638584f7a", "patch": "@@ -67,8 +67,7 @@ struct Context<'a, 'b:'a> {\n \n     name_positions: HashMap<String, usize>,\n \n-    /// Updated as arguments are consumed or methods are entered\n-    nest_level: usize,\n+    /// Updated as arguments are consumed\n     next_arg: usize,\n }\n \n@@ -164,9 +163,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 let pos = match arg.position {\n                     parse::ArgumentNext => {\n                         let i = self.next_arg;\n-                        if self.check_positional_ok() {\n-                            self.next_arg += 1;\n-                        }\n+                        self.next_arg += 1;\n                         Exact(i)\n                     }\n                     parse::ArgumentIs(i) => Exact(i),\n@@ -189,25 +186,13 @@ impl<'a, 'b> Context<'a, 'b> {\n                 self.verify_arg_type(Named(s.to_string()), Unsigned);\n             }\n             parse::CountIsNextParam => {\n-                if self.check_positional_ok() {\n-                    let next_arg = self.next_arg;\n-                    self.verify_arg_type(Exact(next_arg), Unsigned);\n-                    self.next_arg += 1;\n-                }\n+                let next_arg = self.next_arg;\n+                self.verify_arg_type(Exact(next_arg), Unsigned);\n+                self.next_arg += 1;\n             }\n         }\n     }\n \n-    fn check_positional_ok(&mut self) -> bool {\n-        if self.nest_level != 0 {\n-            self.ecx.span_err(self.fmtsp, \"cannot use implicit positional \\\n-                                           arguments nested inside methods\");\n-            false\n-        } else {\n-            true\n-        }\n-    }\n-\n     fn describe_num_args(&self) -> String {\n         match self.args.len() {\n             0 => \"no arguments given\".to_string(),\n@@ -655,7 +640,6 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         name_positions: HashMap::new(),\n         name_types: HashMap::new(),\n         name_ordering: name_ordering,\n-        nest_level: 0,\n         next_arg: 0,\n         literal: String::new(),\n         pieces: Vec::new(),"}]}