{"sha": "e6b99a6521535d79a53b2111f236f82fae0b123e", "node_id": "C_kwDOAAsO6NoAKGU2Yjk5YTY1MjE1MzVkNzlhNTNiMjExMWYyMzZmODJmYWUwYjEyM2U", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-25T21:28:02Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-25T21:28:02Z"}, "message": "Add struct for the return type of `place_root_mono_items`.\n\nAs per review request.", "tree": {"sha": "ad67dafff39406dc132e9f14578dde35cd8fb084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad67dafff39406dc132e9f14578dde35cd8fb084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6b99a6521535d79a53b2111f236f82fae0b123e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b99a6521535d79a53b2111f236f82fae0b123e", "html_url": "https://github.com/rust-lang/rust/commit/e6b99a6521535d79a53b2111f236f82fae0b123e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6b99a6521535d79a53b2111f236f82fae0b123e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed216e2f22896e753f481f40f876e1197c0de43d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed216e2f22896e753f481f40f876e1197c0de43d", "html_url": "https://github.com/rust-lang/rust/commit/ed216e2f22896e753f481f40f876e1197c0de43d"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "603b3ddc106e931ea2864506243a43b35fd9e819", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e6b99a6521535d79a53b2111f236f82fae0b123e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b99a6521535d79a53b2111f236f82fae0b123e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=e6b99a6521535d79a53b2111f236f82fae0b123e", "patch": "@@ -15,7 +15,7 @@ use rustc_span::symbol::Symbol;\n \n use super::PartitioningCx;\n use crate::collector::InliningMap;\n-use crate::partitioning::{MonoItemPlacement, Partition};\n+use crate::partitioning::{MonoItemPlacement, Partition, PlacedRootMonoItems};\n \n pub struct DefaultPartitioning;\n \n@@ -24,7 +24,7 @@ impl<'tcx> Partition<'tcx> for DefaultPartitioning {\n         &mut self,\n         cx: &PartitioningCx<'_, 'tcx>,\n         mono_items: &mut I,\n-    ) -> (Vec<CodegenUnit<'tcx>>, FxHashSet<MonoItem<'tcx>>, FxHashSet<MonoItem<'tcx>>)\n+    ) -> PlacedRootMonoItems<'tcx>\n     where\n         I: Iterator<Item = MonoItem<'tcx>>,\n     {\n@@ -89,7 +89,8 @@ impl<'tcx> Partition<'tcx> for DefaultPartitioning {\n             codegen_units.insert(codegen_unit_name, CodegenUnit::new(codegen_unit_name));\n         }\n \n-        (codegen_units.into_values().collect(), roots, internalization_candidates)\n+        let codegen_units = codegen_units.into_values().collect();\n+        PlacedRootMonoItems { codegen_units, roots, internalization_candidates }\n     }\n \n     fn merge_codegen_units("}, {"sha": "d0b23ca9ea44494dcc9dbe891f998bda48a31dc4", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e6b99a6521535d79a53b2111f236f82fae0b123e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b99a6521535d79a53b2111f236f82fae0b123e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=e6b99a6521535d79a53b2111f236f82fae0b123e", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> Partition<'tcx> for Partitioner {\n         &mut self,\n         cx: &PartitioningCx<'_, 'tcx>,\n         mono_items: &mut I,\n-    ) -> (Vec<CodegenUnit<'tcx>>, FxHashSet<MonoItem<'tcx>>, FxHashSet<MonoItem<'tcx>>)\n+    ) -> PlacedRootMonoItems<'tcx>\n     where\n         I: Iterator<Item = MonoItem<'tcx>>,\n     {\n@@ -188,12 +188,18 @@ struct PartitioningCx<'a, 'tcx> {\n     inlining_map: &'a InliningMap<'tcx>,\n }\n \n+pub struct PlacedRootMonoItems<'tcx> {\n+    codegen_units: Vec<CodegenUnit<'tcx>>,\n+    roots: FxHashSet<MonoItem<'tcx>>,\n+    internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n+}\n+\n trait Partition<'tcx> {\n     fn place_root_mono_items<I>(\n         &mut self,\n         cx: &PartitioningCx<'_, 'tcx>,\n         mono_items: &mut I,\n-    ) -> (Vec<CodegenUnit<'tcx>>, FxHashSet<MonoItem<'tcx>>, FxHashSet<MonoItem<'tcx>>)\n+    ) -> PlacedRootMonoItems<'tcx>\n     where\n         I: Iterator<Item = MonoItem<'tcx>>;\n \n@@ -247,7 +253,7 @@ where\n     // In the first step, we place all regular monomorphizations into their\n     // respective 'home' codegen unit. Regular monomorphizations are all\n     // functions and statics defined in the local crate.\n-    let (mut codegen_units, roots, internalization_candidates) = {\n+    let PlacedRootMonoItems { mut codegen_units, roots, internalization_candidates } = {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_place_roots\");\n         partitioner.place_root_mono_items(cx, mono_items)\n     };"}]}