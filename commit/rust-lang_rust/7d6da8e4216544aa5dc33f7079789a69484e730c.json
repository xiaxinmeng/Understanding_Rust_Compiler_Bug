{"sha": "7d6da8e4216544aa5dc33f7079789a69484e730c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNmRhOGU0MjE2NTQ0YWE1ZGMzM2Y3MDc5Nzg5YTY5NDg0ZTczMGM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-14T01:23:13Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-15T18:27:57Z"}, "message": "Add some tests for non-trivial ADTs\n\nThese tests test building and matching some non-trivial ADT configurations such as C-like enums and\npacked structs.", "tree": {"sha": "5fdca76d4a9e09ca8d5c574dbfc137be76b301ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fdca76d4a9e09ca8d5c574dbfc137be76b301ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d6da8e4216544aa5dc33f7079789a69484e730c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6da8e4216544aa5dc33f7079789a69484e730c", "html_url": "https://github.com/rust-lang/rust/commit/7d6da8e4216544aa5dc33f7079789a69484e730c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d6da8e4216544aa5dc33f7079789a69484e730c/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52ffeda8c833ac97f7c57b239acc30c683fb5391", "url": "https://api.github.com/repos/rust-lang/rust/commits/52ffeda8c833ac97f7c57b239acc30c683fb5391", "html_url": "https://github.com/rust-lang/rust/commit/52ffeda8c833ac97f7c57b239acc30c683fb5391"}], "stats": {"total": 101, "additions": 98, "deletions": 3}, "files": [{"sha": "4526c40af84cf8d1fadb5847c0a26218a664ec4c", "filename": "src/test/run-pass/mir_adt_construction.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7d6da8e4216544aa5dc33f7079789a69484e730c/src%2Ftest%2Frun-pass%2Fmir_adt_construction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6da8e4216544aa5dc33f7079789a69484e730c/src%2Ftest%2Frun-pass%2Fmir_adt_construction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_adt_construction.rs?ref=7d6da8e4216544aa5dc33f7079789a69484e730c", "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+#[repr(C, u32)]\n+enum CEnum {\n+    Hello = 30,\n+    World = 60\n+}\n+\n+#[rustc_mir]\n+fn test1(c: CEnum) -> i32 {\n+  let c2 = CEnum::Hello;\n+  match (c, c2) {\n+    (CEnum::Hello, CEnum::Hello) => 42,\n+    (CEnum::World, CEnum::Hello) => 0,\n+    _ => 1\n+  }\n+}\n+\n+#[repr(packed)]\n+#[derive(PartialEq, Debug)]\n+struct Pakd {\n+    a: u64,\n+    b: u32,\n+    c: u16,\n+    d: u8,\n+    e: ()\n+}\n+\n+impl Drop for Pakd {\n+    fn drop(&mut self) {}\n+}\n+\n+#[rustc_mir]\n+fn test2() -> Pakd {\n+    Pakd { a: 42, b: 42, c: 42, d: 42, e: () }\n+}\n+\n+#[derive(PartialEq, Debug)]\n+struct TupleLike(u64, u32);\n+\n+#[rustc_mir]\n+fn test3() -> TupleLike {\n+    TupleLike(42, 42)\n+}\n+\n+#[rustc_mir]\n+fn test4(x: fn(u64, u32) -> TupleLike) -> (TupleLike, TupleLike) {\n+    let y = TupleLike;\n+    (x(42, 84), y(42, 84))\n+}\n+\n+#[rustc_mir]\n+fn test5(x: fn(u32) -> Option<u32>) -> (Option<u32>, Option<u32>) {\n+    let y = Some;\n+    (x(42), y(42))\n+}\n+\n+fn main() {\n+  assert_eq!(test1(CEnum::Hello), 42);\n+  assert_eq!(test1(CEnum::World), 0);\n+  assert_eq!(test2(), Pakd { a: 42, b: 42, c: 42, d: 42, e: () });\n+  assert_eq!(test3(), TupleLike(42, 42));\n+  let t4 = test4(TupleLike);\n+  assert_eq!(t4.0, t4.1);\n+  let t5 = test5(Some);\n+  assert_eq!(t5.0, t5.1);\n+}"}, {"sha": "ad24e39d4f93fb05e43ebfacdbd4288c76b50b75", "filename": "src/test/run-pass/mir_build_match_comparisons.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7d6da8e4216544aa5dc33f7079789a69484e730c/src%2Ftest%2Frun-pass%2Fmir_build_match_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6da8e4216544aa5dc33f7079789a69484e730c/src%2Ftest%2Frun-pass%2Fmir_build_match_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_build_match_comparisons.rs?ref=7d6da8e4216544aa5dc33f7079789a69484e730c", "patch": "@@ -11,7 +11,7 @@\n #![feature(rustc_attrs)]\n \n #[rustc_mir]\n-pub fn test1(x: i8) -> i32 {\n+fn test1(x: i8) -> i32 {\n   match x {\n     1...10 => 0,\n     _ => 1,\n@@ -22,21 +22,36 @@ const U: Option<i8> = Some(10);\n const S: &'static str = \"hello\";\n \n #[rustc_mir]\n-pub fn test2(x: i8) -> i32 {\n+fn test2(x: i8) -> i32 {\n   match Some(x) {\n     U => 0,\n     _ => 1,\n   }\n }\n \n #[rustc_mir]\n-pub fn test3(x: &'static str) -> i32 {\n+fn test3(x: &'static str) -> i32 {\n   match x {\n     S => 0,\n     _ => 1,\n   }\n }\n \n+enum Opt<T> {\n+    Some { v: T },\n+    None\n+}\n+\n+#[rustc_mir]\n+fn test4(x: u64) -> i32 {\n+  let opt = Opt::Some{ v: x };\n+  match opt {\n+    Opt::Some { v: 10 } => 0,\n+    _ => 1,\n+  }\n+}\n+\n+\n fn main() {\n   assert_eq!(test1(0), 1);\n   assert_eq!(test1(1), 0);\n@@ -52,4 +67,7 @@ fn main() {\n   assert_eq!(test3(\"hello\"), 0);\n   assert_eq!(test3(\"\"), 1);\n   assert_eq!(test3(\"world\"), 1);\n+  assert_eq!(test4(10), 0);\n+  assert_eq!(test4(0), 1);\n+  assert_eq!(test4(20), 1);\n }"}]}