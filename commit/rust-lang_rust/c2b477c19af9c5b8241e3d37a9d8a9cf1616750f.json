{"sha": "c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYjQ3N2MxOWFmOWM1YjgyNDFlM2QzN2E5ZDhhOWNmMTYxNjc1MGY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-04T21:43:51Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-04T21:43:51Z"}, "message": "Improve diagnostic labels and add note.\n\nThis commit improves diagnostic labels to mention which field a borrow\noverlaps with and adds a note explaining that the fields overlap.", "tree": {"sha": "7ac4b3611497af0bec3cc85bc90682f7be424d14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac4b3611497af0bec3cc85bc90682f7be424d14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlwv08gACgkQAXYLT59T\n8VQFgA/+OLsrnvvAaigaQVYCnykAV4cquCsT3T0uQsMS5zj7p8Bom+OEoyGH0MPi\nzGTWIwLL9U0tSpkQj1xJM0px6btVBYt29jTy6uGu/RVR0uTZF2URhyh+RScL+YIH\nAAtX+tUKN2yO9V5kH5UxSAZLfAW4EFB/51QYfFoXN4KRH8pWb/ykcRi13BFKr65u\nKPv1Sf33aMccUE6AZI19BXbwQJwzixIuumO70Tiu/WLotC4BFk2sYHutePMQ3dl+\nn+6jM9AyrqjRxCSsyV36wwmdSMxEjSHUsUWgKtGH8T1ma8Eu2XJx8THgk3/6kL4A\nAt7ua4rwNY5qdAtm8AxOuvkz5W1MS3wkbTBHgQto0FfBo0ho59e+ALNsvYxzhNx9\n35BSMZwElKMVrpdzieVLfpVSfeiL1GCGHJgKLzC+0Khxsj3WQ5M8hFfC4zzV8gzI\nmG0RG8Z0N+DRvNYN9W4zPKH0xTb3aRJ/CEI0Z/Zj6/5yV+zRB9gvvoeBBpCmvdrT\nSjcWbjChBAR7MHdKX6jfwnK0B6PfkE0J3znylKfHbLKo62ULQvCZw6KJ9YcXDfpU\nSFDAC6JJ6uRIB/EWJThFou4CQxgWAKKgI2sQieV4KhlmO844G72sKR9qpxl2YF7h\nsO1h2kbsmAHc57PW+idB88q5HZtb/V88n1NquzBKiP5akiAJ+I0=\n=qhWy\n-----END PGP SIGNATURE-----", "payload": "tree 7ac4b3611497af0bec3cc85bc90682f7be424d14\nparent 388dffe347f86f2c95ffc1fa2f5fa7898b7f8d66\nauthor David Wood <david@davidtw.co> 1546638231 +0100\ncommitter David Wood <david@davidtw.co> 1546638231 +0100\n\nImprove diagnostic labels and add note.\n\nThis commit improves diagnostic labels to mention which field a borrow\noverlaps with and adds a note explaining that the fields overlap.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "html_url": "https://github.com/rust-lang/rust/commit/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388dffe347f86f2c95ffc1fa2f5fa7898b7f8d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/388dffe347f86f2c95ffc1fa2f5fa7898b7f8d66", "html_url": "https://github.com/rust-lang/rust/commit/388dffe347f86f2c95ffc1fa2f5fa7898b7f8d66"}], "stats": {"total": 129, "additions": 86, "deletions": 43}, "files": [{"sha": "cafb29ed99a416b886d7289db2f70200b3c636cc", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -557,12 +557,8 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 if new_loan.loan_path.has_fork(&old_loan.loan_path) && common.is_some() {\n                     let nl = self.bccx.loan_path_to_string(&common.unwrap());\n                     let ol = nl.clone();\n-                    let new_loan_msg = format!(\" (via `{}`)\",\n-                                               self.bccx.loan_path_to_string(\n-                                                   &new_loan.loan_path));\n-                    let old_loan_msg = format!(\" (via `{}`)\",\n-                                               self.bccx.loan_path_to_string(\n-                                                   &old_loan.loan_path));\n+                    let new_loan_msg = self.bccx.loan_path_to_string(&new_loan.loan_path);\n+                    let old_loan_msg = self.bccx.loan_path_to_string(&old_loan.loan_path);\n                     (nl, ol, new_loan_msg, old_loan_msg)\n                 } else {\n                     (self.bccx.loan_path_to_string(&new_loan.loan_path),"}, {"sha": "f6a80d7fae37c130618ba0eae4accc1cde17bd32", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -329,12 +329,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             \"closure\"\n         };\n \n-        let (desc_place, msg_place, msg_borrow) = self.describe_place_for_conflicting_borrow(\n-            place, &issued_borrow.borrowed_place,\n-        );\n-        let via = |msg: String| if msg.is_empty() { msg } else { format!(\" (via `{}`)\", msg) };\n-        let msg_place = via(msg_place);\n-        let msg_borrow = via(msg_borrow);\n+        let (desc_place, msg_place, msg_borrow, union_type_name) =\n+            self.describe_place_for_conflicting_borrow(place, &issued_borrow.borrowed_place);\n \n         let explanation = self.explain_why_borrow_contains_point(context, issued_borrow, None);\n         let second_borrow_desc = if explanation.is_explained() {\n@@ -516,6 +512,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             );\n         }\n \n+        if union_type_name != \"\" {\n+            err.note(&format!(\n+                \"`{}` is a field of the union `{}`, so it overlaps the field `{}`\",\n+                msg_place, union_type_name, msg_borrow,\n+            ));\n+        }\n+\n         explanation\n             .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, first_borrow_desc);\n \n@@ -549,7 +552,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         first_borrowed_place: &Place<'tcx>,\n         second_borrowed_place: &Place<'tcx>,\n-    ) -> (String, String, String) {\n+    ) -> (String, String, String, String) {\n         // Define a small closure that we can use to check if the type of a place\n         // is a union.\n         let is_union = |place: &Place<'tcx>| -> bool {\n@@ -600,7 +603,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                 .unwrap_or_else(|| \"_\".to_owned());\n                             let desc_second = self.describe_place(second_borrowed_place)\n                                 .unwrap_or_else(|| \"_\".to_owned());\n-                            return Some((desc_base, desc_first, desc_second));\n+\n+                            // Also compute the name of the union type, eg. `Foo` so we\n+                            // can add a helpful note with it.\n+                            let ty = base.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx);\n+\n+                            return Some((desc_base, desc_first, desc_second, ty.to_string()));\n                         },\n                         _ => current = base,\n                     }\n@@ -612,7 +620,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 // only return the description of the first place.\n                 let desc_place = self.describe_place(first_borrowed_place)\n                     .unwrap_or_else(|| \"_\".to_owned());\n-                (desc_place, \"\".to_string(), \"\".to_string())\n+                (desc_place, \"\".to_string(), \"\".to_string(), \"\".to_string())\n             })\n     }\n "}, {"sha": "7ad73aaa3f9a958a7ff81a51d86d1d4ca5cf0d01", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -138,13 +138,15 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         old_load_end_span: Option<Span>,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n+        let via = |msg: &str|\n+            if msg.is_empty() { msg.to_string() } else { format!(\" (via `{}`)\", msg) };\n         let mut err = struct_span_err!(\n             self,\n             new_loan_span,\n             E0499,\n             \"cannot borrow `{}`{} as mutable more than once at a time{OGN}\",\n             desc,\n-            opt_via,\n+            via(opt_via),\n             OGN = o\n         );\n         if old_loan_span == new_loan_span {\n@@ -164,11 +166,11 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         } else {\n             err.span_label(\n                 old_loan_span,\n-                format!(\"first mutable borrow occurs here{}\", old_opt_via),\n+                format!(\"first mutable borrow occurs here{}\", via(old_opt_via)),\n             );\n             err.span_label(\n                 new_loan_span,\n-                format!(\"second mutable borrow occurs here{}\", opt_via),\n+                format!(\"second mutable borrow occurs here{}\", via(opt_via)),\n             );\n             if let Some(old_load_end_span) = old_load_end_span {\n                 err.span_label(old_load_end_span, \"first borrow ends here\");\n@@ -292,27 +294,46 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         old_load_end_span: Option<Span>,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n+        let via = |msg: &str|\n+            if msg.is_empty() { msg.to_string() } else { format!(\" (via `{}`)\", msg) };\n         let mut err = struct_span_err!(\n             self,\n             span,\n             E0502,\n-            \"cannot borrow `{}`{} as {} because {} is also borrowed as {}{}{OGN}\",\n+            \"cannot borrow `{}`{} as {} because {} is also borrowed \\\n+             as {}{}{OGN}\",\n             desc_new,\n-            msg_new,\n+            via(msg_new),\n             kind_new,\n             noun_old,\n             kind_old,\n-            msg_old,\n+            via(msg_old),\n             OGN = o\n         );\n-        err.span_label(span, format!(\"{} borrow occurs here{}\", kind_new, msg_new));\n-        err.span_label(\n-            old_span,\n-            format!(\"{} borrow occurs here{}\", kind_old, msg_old),\n-        );\n+\n+        if msg_new == \"\" {\n+            // If `msg_new` is empty, then this isn't a borrow of a union field.\n+            err.span_label(span, format!(\"{} borrow occurs here\", kind_new));\n+            err.span_label(old_span, format!(\"{} borrow occurs here\", kind_old));\n+        } else {\n+            // If `msg_new` isn't empty, then this a borrow of a union field.\n+            err.span_label(\n+                span,\n+                format!(\n+                    \"{} borrow of `{}` -- which overlaps with `{}` -- occurs here\",\n+                    kind_new, msg_new, msg_old,\n+                )\n+            );\n+            err.span_label(\n+                old_span,\n+                format!(\"{} borrow occurs here{}\", kind_old, via(msg_old)),\n+            );\n+        }\n+\n         if let Some(old_load_end_span) = old_load_end_span {\n             err.span_label(old_load_end_span, format!(\"{} borrow ends here\", kind_old));\n         }\n+\n         self.cancel_if_wrong_origin(err, o)\n     }\n "}, {"sha": "e116cb70c1c311499e9a4699a2facf3fb967e9dd", "filename": "src/test/ui/borrowck/borrowck-borrow-from-owned-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -138,7 +138,7 @@ error[E0502]: cannot borrow `foo` (via `foo.bar2`) as immutable because `foo` is\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- mutable borrow occurs here (via `foo.bar1`)\n LL |     let _foo1 = &foo.bar2; //~ ERROR cannot borrow\n-   |                  ^^^^^^^^ immutable borrow occurs here (via `foo.bar2`)\n+   |                  ^^^^^^^^ immutable borrow of `foo.bar2` -- which overlaps with `foo.bar1` -- occurs here\n LL |     *bar1;\n LL | }\n    | - mutable borrow ends here"}, {"sha": "236064da3e8b6ed409eb3dd2543acf4919c19e2b", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -61,7 +61,7 @@ error[E0502]: cannot borrow `a` (via `a.y`) as immutable because `a` is also bor\n LL |     let _x = &mut a.x;\n    |                   --- mutable borrow occurs here (via `a.x`)\n LL |     let _y = &a.y; //[ast]~ ERROR cannot borrow\n-   |               ^^^ immutable borrow occurs here (via `a.y`)\n+   |               ^^^ immutable borrow of `a.y` -- which overlaps with `a.x` -- occurs here\n ...\n LL | }\n    | - mutable borrow ends here\n@@ -72,7 +72,7 @@ error[E0502]: cannot borrow `a` (via `a.y`) as mutable because `a` is also borro\n LL |     let _x = &a.x;\n    |               --- immutable borrow occurs here (via `a.x`)\n LL |     let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n-   |                   ^^^ mutable borrow occurs here (via `a.y`)\n+   |                   ^^^ mutable borrow of `a.y` -- which overlaps with `a.x` -- occurs here\n ...\n LL | }\n    | - immutable borrow ends here"}, {"sha": "e72048d0ea4bc66ed949be508f99c1d31640ce6e", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -83,14 +83,14 @@ fn borrow_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n     let _y = &a.y; //[ast]~ ERROR cannot borrow\n-    //[ast]~^ immutable borrow occurs here (via `a.y`)\n+    //[ast]~^ immutable borrow of `a.y` -- which overlaps with `a.x` -- occurs here\n     use_mut(_x);\n }\n fn mut_borrow_after_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n     let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n-    //[ast]~^ mutable borrow occurs here (via `a.y`)\n+    //[ast]~^ mutable borrow of `a.y` -- which overlaps with `a.x` -- occurs here\n     use_imm(_x);\n }\n fn copy_after_move_nested() {"}, {"sha": "5cba30b43b8a0b5774bb74bcb8456e501e76f36b", "filename": "src/test/ui/borrowck/borrowck-union-borrow.nll.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.nll.stderr?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -24,9 +24,11 @@ error[E0502]: cannot borrow `u` (via `u.b`) as mutable because it is also borrow\n LL |             let ra = &u.a;\n    |                      ---- immutable borrow occurs here (via `u.a`)\n LL |             let rmb = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n-   |                       ^^^^^^^^ mutable borrow occurs here (via `u.b`)\n+   |                       ^^^^^^^^ mutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(ra);\n    |                  -- immutable borrow later used here\n+   |\n+   = note: `u.b` is a field of the union `U`, so it overlaps the field `u.a`\n \n error[E0506]: cannot assign to `u.b` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:51:13\n@@ -84,9 +86,11 @@ error[E0502]: cannot borrow `u` (via `u.b`) as immutable because it is also borr\n LL |             let rma = &mut u.a;\n    |                       -------- mutable borrow occurs here (via `u.a`)\n LL |             let rb = &u.b; //~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n-   |                      ^^^^ immutable borrow occurs here (via `u.b`)\n+   |                      ^^^^ immutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(rma);\n    |                  --- mutable borrow later used here\n+   |\n+   = note: `u.b` is a field of the union `U`, so it overlaps the field `u.a`\n \n error[E0503]: cannot use `u.b` because it was mutably borrowed\n   --> $DIR/borrowck-union-borrow.rs:83:21\n@@ -108,6 +112,8 @@ LL |             let rmb2 = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as\n    |                        ^^^^^^^^ second mutable borrow occurs here (via `u.b`)\n LL |             drop(rma);\n    |                  --- first borrow later used here\n+   |\n+   = note: `u.b` is a field of the union `U`, so it overlaps the field `u.a`\n \n error[E0506]: cannot assign to `u.b` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:94:13"}, {"sha": "ef6a331eda04c0eabf6a1dd98137ad69ddfdb9f8", "filename": "src/test/ui/borrowck/borrowck-union-borrow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -23,7 +23,7 @@ error[E0502]: cannot borrow `u` (via `u.b`) as mutable because `u` is also borro\n LL |             let ra = &u.a;\n    |                       --- immutable borrow occurs here (via `u.a`)\n LL |             let rmb = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n-   |                            ^^^ mutable borrow occurs here (via `u.b`)\n+   |                            ^^^ mutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(ra);\n LL |         }\n    |         - immutable borrow ends here\n@@ -80,7 +80,7 @@ error[E0502]: cannot borrow `u` (via `u.b`) as immutable because `u` is also bor\n LL |             let rma = &mut u.a;\n    |                            --- mutable borrow occurs here (via `u.a`)\n LL |             let rb = &u.b; //~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n-   |                       ^^^ immutable borrow occurs here (via `u.b`)\n+   |                       ^^^ immutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(rma);\n LL |         }\n    |         - mutable borrow ends here"}, {"sha": "823f2c747d686b3a8c819d2b348e0e86a8cc13a0", "filename": "src/test/ui/issues/issue-17263.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `foo` (via `foo.b`) as immutable because `foo` is al\n   --> $DIR/issue-17263.rs:21:32\n    |\n LL |     let (c, d) = (&mut foo.a, &foo.b);\n-   |                        -----   ^^^^^ immutable borrow occurs here (via `foo.b`)\n+   |                        -----   ^^^^^ immutable borrow of `foo.b` -- which overlaps with `foo.a` -- occurs here\n    |                        |\n    |                        mutable borrow occurs here (via `foo.a`)\n ..."}, {"sha": "3b15a8dbd9ef86f92635d4240dfd556a232ece48", "filename": "src/test/ui/issues/issue-45157.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -5,10 +5,12 @@ LL |         let mref = &mut u.s.a;\n    |                    ---------- mutable borrow occurs here (via `u.s.a`)\n ...\n LL |         let nref = &u.z.c;\n-   |                    ^^^^^^ immutable borrow occurs here (via `u.z.c`)\n+   |                    ^^^^^^ immutable borrow of `u.z.c` -- which overlaps with `u.s.a` -- occurs here\n LL |         //~^ ERROR cannot borrow `u` (via `u.z.c`) as immutable because it is also borrowed as mutable (via `u.s.a`) [E0502]\n LL |         println!(\"{} {}\", mref, nref)\n    |                           ---- mutable borrow later used here\n+   |\n+   = note: `u.z.c` is a field of the union `U`, so it overlaps the field `u.s.a`\n \n error: aborting due to previous error\n "}, {"sha": "5d5c86c34875c2af9b6cc0ef966f01907de55acd", "filename": "src/test/ui/nll/issue-57100.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fnll%2Fissue-57100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Fnll%2Fissue-57100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57100.stderr?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -5,10 +5,12 @@ LL |         let mref = &mut r.r2_union.f3_union.s1_leaf.l1_u8;\n    |                    -------------------------------------- mutable borrow occurs here (via `r.r2_union.f3_union.s1_leaf.l1_u8`)\n ...\n LL |         let nref = &r.r2_union.f3_union.s2_leaf.l1_u8;\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here (via `r.r2_union.f3_union.s2_leaf.l1_u8`)\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ immutable borrow of `r.r2_union.f3_union.s2_leaf.l1_u8` -- which overlaps with `r.r2_union.f3_union.s1_leaf.l1_u8` -- occurs here\n ...\n LL |         println!(\"{} {}\", mref, nref)\n    |                           ---- mutable borrow later used here\n+   |\n+   = note: `r.r2_union.f3_union.s2_leaf.l1_u8` is a field of the union `Second`, so it overlaps the field `r.r2_union.f3_union.s1_leaf.l1_u8`\n \n error[E0502]: cannot borrow `r.r2_union` (via `r.r2_union.f1_leaf.l1_u8`) as immutable because it is also borrowed as mutable (via `r.r2_union.f2_leaf.l1_u8`)\n   --> $DIR/issue-57100.rs:62:20\n@@ -17,10 +19,12 @@ LL |         let mref = &mut r.r2_union.f2_leaf.l1_u8;\n    |                    ----------------------------- mutable borrow occurs here (via `r.r2_union.f2_leaf.l1_u8`)\n ...\n LL |         let nref = &r.r2_union.f1_leaf.l1_u8;\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here (via `r.r2_union.f1_leaf.l1_u8`)\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ immutable borrow of `r.r2_union.f1_leaf.l1_u8` -- which overlaps with `r.r2_union.f2_leaf.l1_u8` -- occurs here\n ...\n LL |         println!(\"{} {}\", mref, nref)\n    |                           ---- mutable borrow later used here\n+   |\n+   = note: `r.r2_union.f1_leaf.l1_u8` is a field of the union `First`, so it overlaps the field `r.r2_union.f2_leaf.l1_u8`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "848c3d9bdb017caf607aea607654a35ab57199be", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.nll.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -4,9 +4,11 @@ error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borr\n LL |     let a = &mut u.x.0;\n    |             ---------- mutable borrow occurs here (via `u.x.0`)\n LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n-   |             ^^^^ immutable borrow occurs here (via `u.y`)\n+   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x.0` -- occurs here\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n+   |\n+   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0`\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/union-borrow-move-parent-sibling.rs:22:13\n@@ -24,9 +26,11 @@ error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borr\n LL |     let a = &mut (u.x.0).0;\n    |             -------------- mutable borrow occurs here (via `u.x.0.0`)\n LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n-   |             ^^^^ immutable borrow occurs here (via `u.y`)\n+   |             ^^^^ immutable borrow of `u.y` -- which overlaps with `u.x.0.0` -- occurs here\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n+   |\n+   = note: `u.y` is a field of the union `U`, so it overlaps the field `u.x.0.0`\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/union-borrow-move-parent-sibling.rs:35:13\n@@ -44,9 +48,11 @@ error[E0502]: cannot borrow `u` (via `u.x`) as immutable because it is also borr\n LL |     let a = &mut *u.y;\n    |             --------- mutable borrow occurs here (via `*u.y`)\n LL |     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n-   |             ^^^^ immutable borrow occurs here (via `u.x`)\n+   |             ^^^^ immutable borrow of `u.x` -- which overlaps with `*u.y` -- occurs here\n LL |     use_borrow(a);\n    |                - mutable borrow later used here\n+   |\n+   = note: `u.x` is a field of the union `U`, so it overlaps the field `*u.y`\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/union-borrow-move-parent-sibling.rs:48:13"}, {"sha": "9058707e505168bfc0f6c8db7c837c6ce694975b", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2b477c19af9c5b8241e3d37a9d8a9cf1616750f/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr?ref=c2b477c19af9c5b8241e3d37a9d8a9cf1616750f", "patch": "@@ -46,7 +46,7 @@ error[E0502]: cannot borrow `u` (via `u.x`) as immutable because `u` is also bor\n LL |     let a = &mut *u.y;\n    |                  ---- mutable borrow occurs here (via `*u.y`)\n LL |     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n-   |              ^^^ immutable borrow occurs here (via `u.x`)\n+   |              ^^^ immutable borrow of `u.x` -- which overlaps with `*u.y` -- occurs here\n LL |     use_borrow(a);\n LL | }\n    | - mutable borrow ends here"}]}