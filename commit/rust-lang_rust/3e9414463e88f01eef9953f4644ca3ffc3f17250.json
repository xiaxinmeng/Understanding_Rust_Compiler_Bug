{"sha": "3e9414463e88f01eef9953f4644ca3ffc3f17250", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOTQxNDQ2M2U4OGYwMWVlZjk5NTNmNDY0NGNhM2ZmYzNmMTcyNTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-19T16:22:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-19T16:22:01Z"}, "message": "auto merge of #18746 : nikomatsakis/rust/issue-17322-unsized_ty, r=ncr\n\nPass the unadjusted type into the unsize_info function, which seems to be what it expects. Fixes #17322.\r\n\r\nr? @nick29581 \r\n\r\nFull disclosure: still running make check locally ;)", "tree": {"sha": "d9278fc29825822a867c51c4ab85b48203e77ae8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9278fc29825822a867c51c4ab85b48203e77ae8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e9414463e88f01eef9953f4644ca3ffc3f17250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9414463e88f01eef9953f4644ca3ffc3f17250", "html_url": "https://github.com/rust-lang/rust/commit/3e9414463e88f01eef9953f4644ca3ffc3f17250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e9414463e88f01eef9953f4644ca3ffc3f17250/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7df1e6382e239619a8447719c3c19787d7b60d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7df1e6382e239619a8447719c3c19787d7b60d", "html_url": "https://github.com/rust-lang/rust/commit/cf7df1e6382e239619a8447719c3c19787d7b60d"}, {"sha": "ee9a7b60fab1198a43cf3bb991a93434f9a19e2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee9a7b60fab1198a43cf3bb991a93434f9a19e2c", "html_url": "https://github.com/rust-lang/rust/commit/ee9a7b60fab1198a43cf3bb991a93434f9a19e2c"}], "stats": {"total": 121, "additions": 100, "deletions": 21}, "files": [{"sha": "6d9f6ece1c1b0df054038d9f40eaa164acb6eab3", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3e9414463e88f01eef9953f4644ca3ffc3f17250/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9414463e88f01eef9953f4644ca3ffc3f17250/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3e9414463e88f01eef9953f4644ca3ffc3f17250", "patch": "@@ -3396,14 +3396,6 @@ pub fn deref<'tcx>(ty: Ty<'tcx>, explicit: bool) -> Option<mt<'tcx>> {\n     }\n }\n \n-pub fn deref_or_dont<'tcx>(ty: Ty<'tcx>) -> Ty<'tcx> {\n-    match ty.sty {\n-        ty_uniq(ty) => ty,\n-        ty_rptr(_, mt) | ty_ptr(mt) => mt.ty,\n-        _ => ty\n-    }\n-}\n-\n pub fn close_type<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n     match ty.sty {\n         ty_open(ty) => mk_rptr(cx, ReStatic, mt {ty: ty, mutbl:ast::MutImmutable}),\n@@ -5989,3 +5981,59 @@ impl DebruijnIndex {\n         DebruijnIndex { depth: self.depth + amount }\n     }\n }\n+\n+impl<'tcx> Repr<'tcx> for AutoAdjustment<'tcx> {\n+    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n+        match *self {\n+            AdjustAddEnv(ref trait_store) => {\n+                format!(\"AdjustAddEnv({})\", trait_store)\n+            }\n+            AdjustDerefRef(ref data) => {\n+                data.repr(tcx)\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx> Repr<'tcx> for UnsizeKind<'tcx> {\n+    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n+        match *self {\n+            UnsizeLength(n) => format!(\"UnsizeLength({})\", n),\n+            UnsizeStruct(ref k, n) => format!(\"UnsizeStruct({},{})\", k.repr(tcx), n),\n+            UnsizeVtable(ref a, ref b) => format!(\"UnsizeVtable({},{})\", a.repr(tcx), b.repr(tcx)),\n+        }\n+    }\n+}\n+\n+impl<'tcx> Repr<'tcx> for AutoDerefRef<'tcx> {\n+    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n+        format!(\"AutoDerefRef({}, {})\", self.autoderefs, self.autoref.repr(tcx))\n+    }\n+}\n+\n+impl<'tcx> Repr<'tcx> for AutoRef<'tcx> {\n+    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n+        match *self {\n+            AutoPtr(a, b, ref c) => {\n+                format!(\"AutoPtr({},{},{})\", a.repr(tcx), b, c.repr(tcx))\n+            }\n+            AutoUnsize(ref a) => {\n+                format!(\"AutoUnsize({})\", a.repr(tcx))\n+            }\n+            AutoUnsizeUniq(ref a) => {\n+                format!(\"AutoUnsizeUniq({})\", a.repr(tcx))\n+            }\n+            AutoUnsafe(ref a, ref b) => {\n+                format!(\"AutoUnsafe({},{})\", a, b.repr(tcx))\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx> Repr<'tcx> for TyTrait<'tcx> {\n+    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n+        format!(\"TyTrait({},{})\",\n+                self.principal.repr(tcx),\n+                self.bounds.repr(tcx))\n+    }\n+}"}, {"sha": "adbcc073609f2301610ea510a1db6ac82771f734", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e9414463e88f01eef9953f4644ca3ffc3f17250/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9414463e88f01eef9953f4644ca3ffc3f17250/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3e9414463e88f01eef9953f4644ca3ffc3f17250", "patch": "@@ -1707,7 +1707,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             node_id: ast::NodeId,\n                             span: Span,\n                             adj: ty::AutoAdjustment<'tcx>) {\n-        debug!(\"write_adjustment(node_id={}, adj={})\", node_id, adj);\n+        debug!(\"write_adjustment(node_id={}, adj={})\", node_id, adj.repr(self.tcx()));\n \n         if adj.is_identity() {\n             return;"}, {"sha": "44c37793b4b649392fd4803037c5eeb6f2a3fb20", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3e9414463e88f01eef9953f4644ca3ffc3f17250/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9414463e88f01eef9953f4644ca3ffc3f17250/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=3e9414463e88f01eef9953f4644ca3ffc3f17250", "patch": "@@ -194,8 +194,10 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         }\n         Some(adj) => { adj }\n     };\n-    debug!(\"unadjusted datum for expr {}: {}\",\n-           expr.id, datum.to_string(bcx.ccx()));\n+    debug!(\"unadjusted datum for expr {}: {}, adjustment={}\",\n+           expr.repr(bcx.tcx()),\n+           datum.to_string(bcx.ccx()),\n+           adjustment.repr(bcx.tcx()));\n     match adjustment {\n         AdjustAddEnv(..) => {\n             datum = unpack_datum!(bcx, add_env(bcx, expr, datum));\n@@ -265,9 +267,10 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             &AutoPtr(_, _, ref a) | &AutoUnsafe(_, ref a) => {\n                 debug!(\"  AutoPtr\");\n                 match a {\n-                    &Some(box ref a) => datum = unpack_datum!(bcx,\n-                                                              apply_autoref(a, bcx, expr, datum)),\n-                    _ => {}\n+                    &Some(box ref a) => {\n+                        datum = unpack_datum!(bcx, apply_autoref(a, bcx, expr, datum));\n+                    }\n+                    &None => {}\n                 }\n                 unpack_datum!(bcx, ref_ptr(bcx, expr, datum))\n             }\n@@ -293,6 +296,10 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                            expr: &ast::Expr,\n                            datum: Datum<'tcx, Expr>)\n                            -> DatumBlock<'blk, 'tcx, Expr> {\n+        debug!(\"ref_ptr(expr={}, datum={})\",\n+               expr.repr(bcx.tcx()),\n+               datum.to_string(bcx.ccx()));\n+\n         if !ty::type_is_sized(bcx.tcx(), datum.ty) {\n             debug!(\"Taking address of unsized type {}\",\n                    bcx.ty_to_string(datum.ty));\n@@ -307,34 +314,36 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     // Retrieve the information we are losing (making dynamic) in an unsizing\n     // adjustment.\n     // When making a dtor, we need to do different things depending on the\n-    // ownership of the object.. mk_ty is a function for turning unsized_type\n+    // ownership of the object.. mk_ty is a function for turning `unadjusted_ty`\n     // into a type to be destructed. If we want to end up with a Box pointer,\n     // then mk_ty should make a Box pointer (T -> Box<T>), if we want a\n     // borrowed reference then it should be T -> &T.\n     fn unsized_info<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                 kind: &ty::UnsizeKind<'tcx>,\n                                 id: ast::NodeId,\n-                                unsized_ty: Ty<'tcx>,\n+                                unadjusted_ty: Ty<'tcx>,\n                                 mk_ty: |Ty<'tcx>| -> Ty<'tcx>) -> ValueRef {\n+        debug!(\"unsized_info(kind={}, id={}, unadjusted_ty={})\",\n+               kind, id, unadjusted_ty.repr(bcx.tcx()));\n         match kind {\n             &ty::UnsizeLength(len) => C_uint(bcx.ccx(), len),\n-            &ty::UnsizeStruct(box ref k, tp_index) => match unsized_ty.sty {\n+            &ty::UnsizeStruct(box ref k, tp_index) => match unadjusted_ty.sty {\n                 ty::ty_struct(_, ref substs) => {\n                     let ty_substs = substs.types.get_slice(subst::TypeSpace);\n                     // The dtor for a field treats it like a value, so mk_ty\n                     // should just be the identity function.\n                     unsized_info(bcx, k, id, ty_substs[tp_index], |t| t)\n                 }\n                 _ => bcx.sess().bug(format!(\"UnsizeStruct with bad sty: {}\",\n-                                          bcx.ty_to_string(unsized_ty)).as_slice())\n+                                          bcx.ty_to_string(unadjusted_ty)).as_slice())\n             },\n             &ty::UnsizeVtable(ty::TyTrait { ref principal, .. }, _) => {\n-                let substs = principal.substs.with_self_ty(unsized_ty).erase_regions();\n+                let substs = principal.substs.with_self_ty(unadjusted_ty).erase_regions();\n                 let trait_ref =\n                     Rc::new(ty::TraitRef { def_id: principal.def_id,\n                                            substs: substs });\n                 let trait_ref = trait_ref.subst(bcx.tcx(), bcx.fcx.param_substs);\n-                let box_ty = mk_ty(unsized_ty);\n+                let box_ty = mk_ty(unadjusted_ty);\n                 PointerCast(bcx,\n                             meth::get_vtable(bcx, box_ty, trait_ref),\n                             Type::vtable_ptr(bcx.ccx()))\n@@ -350,7 +359,9 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let tcx = bcx.tcx();\n         let datum_ty = datum.ty;\n         let unsized_ty = ty::unsize_ty(tcx, datum_ty, k, expr.span);\n+        debug!(\"unsized_ty={}\", unsized_ty.repr(bcx.tcx()));\n         let dest_ty = ty::mk_open(tcx, unsized_ty);\n+        debug!(\"dest_ty={}\", unsized_ty.repr(bcx.tcx()));\n         // Closures for extracting and manipulating the data and payload parts of\n         // the fat pointer.\n         let base = match k {\n@@ -366,7 +377,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let info = |bcx, _val| unsized_info(bcx,\n                                             k,\n                                             expr.id,\n-                                            ty::deref_or_dont(datum_ty),\n+                                            datum_ty,\n                                             |t| ty::mk_rptr(tcx,\n                                                             ty::ReStatic,\n                                                             ty::mt{"}, {"sha": "c5784154a2ece2819e0d27c56d696872939a4f58", "filename": "src/test/run-pass/issue-17322.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e9414463e88f01eef9953f4644ca3ffc3f17250/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9414463e88f01eef9953f4644ca3ffc3f17250/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17322.rs?ref=3e9414463e88f01eef9953f4644ca3ffc3f17250", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::io;\n+\n+fn f(wr: &mut Writer) {\n+    wr.write_str(\"hello\").ok().expect(\"failed\");\n+}\n+\n+fn main() {\n+    let mut wr = box io::stdout() as Box<Writer + 'static>;\n+    f(&mut wr);\n+}"}]}