{"sha": "feb18c364cfb70ad9bce1799e2e224fc38111051", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYjE4YzM2NGNmYjcwYWQ5YmNlMTc5OWUyZTIyNGZjMzgxMTEwNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-12T11:06:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-12T11:06:29Z"}, "message": "Auto merge of #4082 - Manishearth:macro-check-split, r=oli-obk\n\nMake most macro checks also check for desugarings\n\nWe should audit the macro checks one by one and re-add `in_macro`. I suspect it's applicable to most of them.\n\nfixes https://github.com/rust-lang/rust-clippy/issues/4081", "tree": {"sha": "0a9ca7d5dc6b772e74488383a3c620edad9a55e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a9ca7d5dc6b772e74488383a3c620edad9a55e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feb18c364cfb70ad9bce1799e2e224fc38111051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feb18c364cfb70ad9bce1799e2e224fc38111051", "html_url": "https://github.com/rust-lang/rust/commit/feb18c364cfb70ad9bce1799e2e224fc38111051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feb18c364cfb70ad9bce1799e2e224fc38111051/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3710ec59962295336ab4aed100267b584dd7df7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3710ec59962295336ab4aed100267b584dd7df7d", "html_url": "https://github.com/rust-lang/rust/commit/3710ec59962295336ab4aed100267b584dd7df7d"}, {"sha": "abf6481f877d2f5f29ab21cb7039be86dcd1bb10", "url": "https://api.github.com/repos/rust-lang/rust/commits/abf6481f877d2f5f29ab21cb7039be86dcd1bb10", "html_url": "https://github.com/rust-lang/rust/commit/abf6481f877d2f5f29ab21cb7039be86dcd1bb10"}], "stats": {"total": 251, "additions": 133, "deletions": 118}, "files": [{"sha": "0f0c0dbc15d058ee3fb81ae3ddbdb48898ea16ea", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -5,7 +5,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax_pos::Span;\n \n use crate::consts::{constant, Constant};\n-use crate::utils::{in_macro, is_direct_expn_of, span_help_and_lint};\n+use crate::utils::{in_macro_or_desugar, is_direct_expn_of, span_help_and_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `assert!(true)` and `assert!(false)` calls.\n@@ -34,16 +34,16 @@ declare_lint_pass!(AssertionsOnConstants => [ASSERTIONS_ON_CONSTANTS]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         let mut is_debug_assert = false;\n-        let debug_assert_not_in_macro = |span: Span| {\n+        let debug_assert_not_in_macro_or_desugar = |span: Span| {\n             is_debug_assert = true;\n             // Check that `debug_assert!` itself is not inside a macro\n-            !in_macro(span)\n+            !in_macro_or_desugar(span)\n         };\n         if_chain! {\n             if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\");\n-            if !in_macro(assert_span)\n+            if !in_macro_or_desugar(assert_span)\n                 || is_direct_expn_of(assert_span, \"debug_assert\")\n-                    .map_or(false, debug_assert_not_in_macro);\n+                    .map_or(false, debug_assert_not_in_macro_or_desugar);\n             if let ExprKind::Unary(_, ref lit) = e.node;\n             if let Some(bool_const) = constant(cx, cx.tables, lit);\n             then {"}, {"sha": "9a9279a409ae30237972dec90808856243745b88", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -2,7 +2,7 @@\n \n use crate::reexport::*;\n use crate::utils::{\n-    in_macro, is_present_in_source, last_line_of_span, paths, snippet_opt, span_lint, span_lint_and_sugg,\n+    in_macro_or_desugar, is_present_in_source, last_line_of_span, paths, snippet_opt, span_lint, span_lint_and_sugg,\n     span_lint_and_then, without_block_comments,\n };\n use if_chain::if_chain;\n@@ -408,7 +408,7 @@ fn is_relevant_expr(cx: &LateContext<'_, '_>, tables: &ty::TypeckTables<'_>, exp\n }\n \n fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attribute]) {\n-    if in_macro(span) {\n+    if in_macro_or_desugar(span) {\n         return;\n     }\n "}, {"sha": "786cba9fc7d82640d0d9bfab60faaa1446cbde03", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n         if let ExprKind::Closure(_, _, eid, _, _) = expr.node {\n             let body = self.cx.tcx.hir().body(eid);\n             let ex = &body.value;\n-            if matches!(ex.node, ExprKind::Block(_, _)) && !in_macro(body.value.span) {\n+            if matches!(ex.node, ExprKind::Block(_, _)) && !in_macro_or_desugar(body.value.span) {\n                 self.found_block = Some(ex);\n                 return;\n             }\n@@ -79,7 +79,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                         if let Some(ex) = &block.expr {\n                             // don't dig into the expression here, just suggest that they remove\n                             // the block\n-                            if in_macro(expr.span) || differing_macro_contexts(expr.span, ex.span) {\n+                            if in_macro_or_desugar(expr.span) || differing_macro_contexts(expr.span, ex.span) {\n                                 return;\n                             }\n                             span_help_and_lint(\n@@ -96,7 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                         }\n                     } else {\n                         let span = block.expr.as_ref().map_or_else(|| block.stmts[0].span, |e| e.span);\n-                        if in_macro(span) || differing_macro_contexts(expr.span, span) {\n+                        if in_macro_or_desugar(span) || differing_macro_contexts(expr.span, span) {\n                             return;\n                         }\n                         // move block higher"}, {"sha": "5c19e232bc9848d2b5d4fbabe46beab29924845f", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::{\n-    get_trait_def_id, implements_trait, in_macro, match_type, paths, snippet_opt, span_lint_and_then, SpanlessEq,\n+    get_trait_def_id, implements_trait, in_macro, in_macro_or_desugar, match_type, paths, snippet_opt,\n+    span_lint_and_then, SpanlessEq,\n };\n use rustc::hir::intravisit::*;\n use rustc::hir::*;\n@@ -93,7 +94,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n \n     fn run(&mut self, e: &'v Expr) -> Result<Bool, String> {\n         // prevent folding of `cfg!` macros and the like\n-        if !in_macro(e.span) {\n+        if !in_macro_or_desugar(e.span) {\n             match &e.node {\n                 ExprKind::Unary(UnNot, inner) => return Ok(Bool::Not(box self.run(inner)?)),\n                 ExprKind::Binary(binop, lhs, rhs) => match &binop.node {"}, {"sha": "9374e04bc11ea0892eb009e164ee50d70a0705c4", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -9,7 +9,7 @@ use rustc::{declare_tool_lint, impl_lint_pass};\n use syntax::ast::Attribute;\n use syntax::source_map::Span;\n \n-use crate::utils::{in_macro, is_allowed, match_type, paths, span_help_and_lint, LimitStack};\n+use crate::utils::{in_macro_or_desugar, is_allowed, match_type, paths, span_help_and_lint, LimitStack};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for methods with high cognitive complexity.\n@@ -42,7 +42,7 @@ impl_lint_pass!(CognitiveComplexity => [COGNITIVE_COMPLEXITY]);\n \n impl CognitiveComplexity {\n     fn check<'a, 'tcx: 'a>(&mut self, cx: &'a LateContext<'a, 'tcx>, body: &'tcx Body, span: Span) {\n-        if in_macro(span) {\n+        if in_macro_or_desugar(span) {\n             return;\n         }\n "}, {"sha": "00d7bf3b5a9eecdb429f8788b80ff12920ae739e", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -18,7 +18,9 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast;\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{in_macro, snippet_block, snippet_block_with_applicability, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::{\n+    in_macro_or_desugar, snippet_block, snippet_block_with_applicability, span_lint_and_sugg, span_lint_and_then,\n+};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -75,7 +77,7 @@ declare_lint_pass!(CollapsibleIf => [COLLAPSIBLE_IF]);\n \n impl EarlyLintPass for CollapsibleIf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        if !in_macro(expr.span) {\n+        if !in_macro_or_desugar(expr.span) {\n             check_if(cx, expr)\n         }\n     }\n@@ -110,7 +112,7 @@ fn check_collapsible_maybe_if_let(cx: &EarlyContext<'_>, else_: &ast::Expr) {\n         if let ast::ExprKind::Block(ref block, _) = else_.node;\n         if !block_starts_with_comment(cx, block);\n         if let Some(else_) = expr_block(block);\n-        if !in_macro(else_.span);\n+        if !in_macro_or_desugar(else_.span);\n         then {\n             match else_.node {\n                 ast::ExprKind::If(..) | ast::ExprKind::IfLet(..) => {"}, {"sha": "a69771b8b80967d0ecf3046a5220bbe470259045", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro, snippet, span_lint_and_then};\n+use crate::utils::{in_macro_or_desugar, snippet, span_lint_and_then};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n@@ -81,7 +81,7 @@ impl StaticConst {\n \n impl EarlyLintPass for StaticConst {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if !in_macro(item.span) {\n+        if !in_macro_or_desugar(item.span) {\n             // Match only constants...\n             if let ItemKind::Const(ref var_type, _) = item.node {\n                 self.visit_type(var_type, cx);"}, {"sha": "d85cf97a6bdde3380b8e746ab3f3cce852a15ae1", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_parent_expr, higher, in_macro, snippet, span_lint_and_then, span_note_and_lint};\n+use crate::utils::{get_parent_expr, higher, in_macro_or_desugar, snippet, span_lint_and_then, span_note_and_lint};\n use crate::utils::{SpanlessEq, SpanlessHash};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -107,7 +107,7 @@ declare_lint_pass!(CopyAndPaste => [IFS_SAME_COND, IF_SAME_THEN_ELSE, MATCH_SAME\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if !in_macro(expr.span) {\n+        if !in_macro_or_desugar(expr.span) {\n             // skip ifs directly in else, it will be checked in the parent if\n             if let Some(expr) = get_parent_expr(cx, expr) {\n                 if let Some((_, _, Some(ref else_expr))) = higher::if_block(&expr) {"}, {"sha": "f39ea6a3cc5a36d8e48a0a3dcd7b17ff5533ca26", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro, span_lint};\n+use crate::utils::{in_macro_or_desugar, span_lint};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n@@ -26,7 +26,7 @@ declare_lint_pass!(DoubleParens => [DOUBLE_PARENS]);\n \n impl EarlyLintPass for DoubleParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_macro(expr.span) {\n+        if in_macro_or_desugar(expr.span) {\n             return;\n         }\n "}, {"sha": "4479349aaf4a0530b474417b1ed40a119033b058", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,6 +1,6 @@\n //! lint on enum variants that are prefixed or suffixed by the same characters\n \n-use crate::utils::{camel_case, in_macro, is_present_in_source};\n+use crate::utils::{camel_case, in_macro_or_desugar, is_present_in_source};\n use crate::utils::{span_help_and_lint, span_lint};\n use rustc::lint::{EarlyContext, EarlyLintPass, Lint, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n@@ -244,7 +244,7 @@ impl EarlyLintPass for EnumVariantNames {\n         let item_name = item.ident.as_str();\n         let item_name_chars = item_name.chars().count();\n         let item_camel = to_camel_case(&item_name);\n-        if !in_macro(item.span) && is_present_in_source(cx, item.span) {\n+        if !in_macro_or_desugar(item.span) && is_present_in_source(cx, item.span) {\n             if let Some(&(ref mod_name, ref mod_camel)) = self.modules.last() {\n                 // constants don't have surrounding modules\n                 if !mod_camel.is_empty() {"}, {"sha": "08c0b36855e2200e8ed1f1c72210dda8c3c9047f", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    implements_trait, in_macro, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq,\n+    implements_trait, in_macro_or_desugar, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq,\n };\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -52,7 +52,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n     #[allow(clippy::similar_names, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Binary(op, ref left, ref right) = e.node {\n-            if in_macro(e.span) {\n+            if in_macro_or_desugar(e.span) {\n                 return;\n             }\n             if is_valid_operator(op) && SpanlessEq::new(cx).ignore_fn().eq_expr(left, right) {"}, {"sha": "3ac2f90ce01b4cd77f06bbffa95a35525c769d68", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -4,7 +4,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::source_map::Span;\n \n use crate::consts::{constant_simple, Constant};\n-use crate::utils::{in_macro, span_lint};\n+use crate::utils::{in_macro_or_desugar, span_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for erasing operations, e.g., `x * 0`.\n@@ -31,7 +31,7 @@ declare_lint_pass!(ErasingOp => [ERASING_OP]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ErasingOp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro(e.span) {\n+        if in_macro_or_desugar(e.span) {\n             return;\n         }\n         if let ExprKind::Binary(ref cmp, ref left, ref right) = e.node {"}, {"sha": "ace059f84288780cfe200bd9055dffed80528ee2", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,6 +1,7 @@\n use crate::utils::paths;\n use crate::utils::{\n-    in_macro, is_expn_of, last_path_segment, match_type, resolve_node, snippet, span_lint_and_then, walk_ptrs_ty,\n+    in_macro_or_desugar, is_expn_of, last_path_segment, match_type, resolve_node, snippet, span_lint_and_then,\n+    walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc::hir::*;\n@@ -38,7 +39,7 @@ declare_lint_pass!(UselessFormat => [USELESS_FORMAT]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessFormat {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some(span) = is_expn_of(expr.span, \"format\") {\n-            if in_macro(span) {\n+            if in_macro_or_desugar(span) {\n                 return;\n             }\n             match expr.node {"}, {"sha": "5916a0659500cf48c0fee38697e7ff1c6f3f662c", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{differing_macro_contexts, in_macro, snippet_opt, span_note_and_lint};\n+use crate::utils::{differing_macro_contexts, in_macro_or_desugar, snippet_opt, span_note_and_lint};\n use if_chain::if_chain;\n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -108,7 +108,7 @@ impl EarlyLintPass for Formatting {\n /// Implementation of the `SUSPICIOUS_ASSIGNMENT_FORMATTING` lint.\n fn check_assign(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     if let ast::ExprKind::Assign(ref lhs, ref rhs) = expr.node {\n-        if !differing_macro_contexts(lhs.span, rhs.span) && !in_macro(lhs.span) {\n+        if !differing_macro_contexts(lhs.span, rhs.span) && !in_macro_or_desugar(lhs.span) {\n             let eq_span = lhs.span.between(rhs.span);\n             if let ast::ExprKind::Unary(op, ref sub_rhs) = rhs.node {\n                 if let Some(eq_snippet) = snippet_opt(cx, eq_span) {\n@@ -140,7 +140,7 @@ fn check_else(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n         if let Some((then, &Some(ref else_))) = unsugar_if(expr);\n         if is_block(else_) || unsugar_if(else_).is_some();\n         if !differing_macro_contexts(then.span, else_.span);\n-        if !in_macro(then.span) && !in_external_macro(cx.sess, expr.span);\n+        if !in_macro_or_desugar(then.span) && !in_external_macro(cx.sess, expr.span);\n \n         // workaround for rust-lang/rust#43081\n         if expr.span.lo().0 != 0 && expr.span.hi().0 != 0;\n@@ -206,7 +206,7 @@ fn check_array(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n \n fn check_missing_else(cx: &EarlyContext<'_>, first: &ast::Expr, second: &ast::Expr) {\n     if !differing_macro_contexts(first.span, second.span)\n-        && !in_macro(first.span)\n+        && !in_macro_or_desugar(first.span)\n         && unsugar_if(first).is_some()\n         && (is_block(second) || unsugar_if(second).is_some())\n     {"}, {"sha": "61d287fbea62d913c2e5b864a0347edce2c9ef5b", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{in_macro, match_trait_method, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_then};\n+use crate::utils::{\n+    in_macro_or_desugar, match_trait_method, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_then,\n+};\n use crate::utils::{paths, resolve_node};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -31,7 +33,7 @@ impl_lint_pass!(IdentityConversion => [IDENTITY_CONVERSION]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro(e.span) {\n+        if in_macro_or_desugar(e.span) {\n             return;\n         }\n "}, {"sha": "b3ab46781adcda3fe34bfa7353eb2f7664de5211", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -5,7 +5,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::source_map::Span;\n \n use crate::consts::{constant_simple, Constant};\n-use crate::utils::{clip, in_macro, snippet, span_lint, unsext};\n+use crate::utils::{clip, in_macro_or_desugar, snippet, span_lint, unsext};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for identity operations, e.g., `x + 0`.\n@@ -28,7 +28,7 @@ declare_lint_pass!(IdentityOp => [IDENTITY_OP]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro(e.span) {\n+        if in_macro_or_desugar(e.span) {\n             return;\n         }\n         if let ExprKind::Binary(ref cmp, ref left, ref right) = e.node {"}, {"sha": "dc5a3a6b2f7327c9de39e3d4a865a9da81b3fe98", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro, is_expn_of, snippet_opt, span_lint_and_then};\n+use crate::utils::{in_macro_or_desugar, is_expn_of, snippet_opt, span_lint_and_then};\n use rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl, HirId, MatchSource};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -118,7 +118,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitReturn {\n \n         // checking return type through MIR, HIR is not able to determine inferred closure return types\n         // make sure it's not a macro\n-        if !mir.return_ty().is_unit() && !in_macro(span) {\n+        if !mir.return_ty().is_unit() && !in_macro_or_desugar(span) {\n             Self::expr_match(cx, &body.value);\n         }\n     }"}, {"sha": "226809a2e28b3f6b151a247e84c408f537a8f345", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,6 +1,6 @@\n //! lint when items are used after statements\n \n-use crate::utils::{in_macro, span_lint};\n+use crate::utils::{in_macro_or_desugar, span_lint};\n use matches::matches;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -38,7 +38,7 @@ declare_lint_pass!(ItemsAfterStatements => [ITEMS_AFTER_STATEMENTS]);\n \n impl EarlyLintPass for ItemsAfterStatements {\n     fn check_block(&mut self, cx: &EarlyContext<'_>, item: &Block) {\n-        if in_macro(item.span) {\n+        if in_macro_or_desugar(item.span) {\n             return;\n         }\n \n@@ -52,7 +52,7 @@ impl EarlyLintPass for ItemsAfterStatements {\n         // lint on all further items\n         for stmt in stmts {\n             if let StmtKind::Item(ref it) = *stmt {\n-                if in_macro(it.span) {\n+                if in_macro_or_desugar(it.span) {\n                     return;\n                 }\n                 if let ItemKind::MacroDef(..) = it.node {"}, {"sha": "f464ebd03ddf06f223765e2e42063908c2920550", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{get_item_name, in_macro, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::{\n+    get_item_name, in_macro_or_desugar, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty,\n+};\n use rustc::hir::def_id::DefId;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -73,7 +75,7 @@ declare_lint_pass!(LenZero => [LEN_ZERO, LEN_WITHOUT_IS_EMPTY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if in_macro(item.span) {\n+        if in_macro_or_desugar(item.span) {\n             return;\n         }\n \n@@ -85,7 +87,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if in_macro(expr.span) {\n+        if in_macro_or_desugar(expr.span) {\n             return;\n         }\n "}, {"sha": "f47d2e45d6fadab4d6c2bea378a40fdcd5880bef", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -11,7 +11,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n // use rustc::middle::region::CodeExtent;\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n-use crate::utils::{in_macro, sext, sugg};\n+use crate::utils::{in_macro_or_desugar, sext, sugg};\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::middle::mem_categorization::Categorization;\n@@ -464,7 +464,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n     #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // we don't want to check expanded macros\n-        if in_macro(expr.span) {\n+        if in_macro_or_desugar(expr.span) {\n             return;\n         }\n \n@@ -1057,7 +1057,7 @@ fn check_for_loop_range<'a, 'tcx>(\n     body: &'tcx Expr,\n     expr: &'tcx Expr,\n ) {\n-    if in_macro(expr.span) {\n+    if in_macro_or_desugar(expr.span) {\n         return;\n     }\n "}, {"sha": "df10336d6d9729735e048198b6427803e9911482", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,6 +1,7 @@\n use crate::utils::paths;\n use crate::utils::{\n-    in_macro, is_copy, match_trait_method, match_type, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n+    in_macro_or_desugar, is_copy, match_trait_method, match_type, remove_blocks, snippet_with_applicability,\n+    span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc::hir;\n@@ -43,7 +44,7 @@ declare_lint_pass!(MapClone => [MAP_CLONE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapClone {\n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {\n-        if in_macro(e.span) {\n+        if in_macro_or_desugar(e.span) {\n             return;\n         }\n "}, {"sha": "2e97f44b317f721c4b0a3f5b56795589c3275dcb", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::paths;\n-use crate::utils::{in_macro, iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n+use crate::utils::{in_macro_or_desugar, iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -240,7 +240,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapUnit {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, stmt: &hir::Stmt) {\n-        if in_macro(stmt.span) {\n+        if in_macro_or_desugar(stmt.span) {\n             return;\n         }\n "}, {"sha": "cb33ad4d974b8cd7a76602442744a95f66a4a23f", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -2,8 +2,8 @@ use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    expr_block, in_macro, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg, remove_blocks, snippet,\n-    snippet_with_applicability, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty,\n+    expr_block, in_macro_or_desugar, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg, remove_blocks,\n+    snippet, snippet_with_applicability, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc::hir::def::CtorKind;\n@@ -589,7 +589,7 @@ fn check_match_ref_pats(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr:\n         }));\n \n         span_lint_and_then(cx, MATCH_REF_PATS, expr.span, title, |db| {\n-            if !in_macro(expr.span) {\n+            if !in_macro_or_desugar(expr.span) {\n                 multispan_sugg(db, msg.to_owned(), suggs);\n             }\n         });"}, {"sha": "b7479122ea9cebe06fef64af68853ad3721f7d7a", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -12,8 +12,8 @@ use syntax::source_map::{ExpnFormat, Span};\n use crate::consts::{constant, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    get_item_name, get_parent_expr, implements_trait, in_constant, in_macro, is_integer_literal, iter_input_pats,\n-    last_path_segment, match_qpath, match_trait_method, paths, snippet, span_lint, span_lint_and_then,\n+    get_item_name, get_parent_expr, implements_trait, in_constant, in_macro_or_desugar, is_integer_literal,\n+    iter_input_pats, last_path_segment, match_qpath, match_trait_method, paths, snippet, span_lint, span_lint_and_then,\n     span_lint_hir_and_then, walk_ptrs_ty, SpanlessEq,\n };\n \n@@ -602,7 +602,7 @@ fn in_attributes_expansion(expr: &Expr) -> bool {\n /// Tests whether `res` is a variable defined outside a macro.\n fn non_macro_local(cx: &LateContext<'_, '_>, res: def::Res) -> bool {\n     match res {\n-        def::Res::Local(id) | def::Res::Upvar(id, ..) => !in_macro(cx.tcx.hir().span_by_hir_id(id)),\n+        def::Res::Local(id) | def::Res::Upvar(id, ..) => !in_macro_or_desugar(cx.tcx.hir().span_by_hir_id(id)),\n         _ => false,\n     }\n }"}, {"sha": "0cce9ddbc7b67cdf8bca8aeafccbdb5458e2e76c", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -5,7 +5,7 @@\n // [`missing_doc`]: https://github.com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.rs#L246\n //\n \n-use crate::utils::{in_macro, span_lint};\n+use crate::utils::{in_macro_or_desugar, span_lint};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n@@ -85,7 +85,7 @@ impl MissingDoc {\n             return;\n         }\n \n-        if in_macro(sp) {\n+        if in_macro_or_desugar(sp) {\n             return;\n         }\n "}, {"sha": "43237d82053cc6284de82205c23475156248e84d", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{higher, in_macro, span_lint, span_lint_and_sugg};\n+use crate::utils::{higher, in_macro_or_desugar, span_lint, span_lint_and_sugg};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n@@ -131,7 +131,7 @@ declare_lint_pass!(BoolComparison => [BOOL_COMPARISON]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro(e.span) {\n+        if in_macro_or_desugar(e.span) {\n             return;\n         }\n "}, {"sha": "294a17d80bbb3fa4a1f2a5ef960dd32381a3c1ae", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -2,7 +2,7 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{in_macro, snippet_opt, span_lint_and_then};\n+use crate::utils::{in_macro_or_desugar, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir::{BindingAnnotation, Expr, ExprKind, HirId, Item, MutImmutable, Pat, PatKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -38,7 +38,7 @@ impl_lint_pass!(NeedlessBorrow => [NEEDLESS_BORROW]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if in_macro(e.span) || self.derived_item.is_some() {\n+        if in_macro_or_desugar(e.span) || self.derived_item.is_some() {\n             return;\n         }\n         if let ExprKind::AddrOf(MutImmutable, ref inner) = e.node {\n@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         }\n     }\n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n-        if in_macro(pat.span) || self.derived_item.is_some() {\n+        if in_macro_or_desugar(pat.span) || self.derived_item.is_some() {\n             return;\n         }\n         if_chain! {"}, {"sha": "b6104f6cc9a52fd01af7248e517d276914b30ae7", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -2,7 +2,7 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{in_macro, snippet, span_lint_and_then};\n+use crate::utils::{in_macro_or_desugar, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -55,7 +55,7 @@ declare_lint_pass!(NeedlessBorrowedRef => [NEEDLESS_BORROWED_REFERENCE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n-        if in_macro(pat.span) {\n+        if in_macro_or_desugar(pat.span) {\n             // OK, simple enough, lints doesn't check in macro.\n             return;\n         }"}, {"sha": "8835158155b6510422e0de9877e8ab85d05e7c63", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -39,7 +39,7 @@ use std::borrow::Cow;\n use syntax::ast;\n use syntax::source_map::{original_sp, DUMMY_SP};\n \n-use crate::utils::{in_macro, snippet, snippet_block, span_help_and_lint, trim_multiline};\n+use crate::utils::{in_macro_or_desugar, snippet, snippet_block, span_help_and_lint, trim_multiline};\n \n declare_clippy_lint! {\n     /// **What it does:** The lint checks for `if`-statements appearing in loops\n@@ -110,7 +110,7 @@ declare_lint_pass!(NeedlessContinue => [NEEDLESS_CONTINUE]);\n \n impl EarlyLintPass for NeedlessContinue {\n     fn check_expr(&mut self, ctx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        if !in_macro(expr.span) {\n+        if !in_macro_or_desugar(expr.span) {\n             check_and_warn(ctx, expr);\n         }\n     }"}, {"sha": "ce8f1a0ec5520d1a9f59a69ead43cf75e1bbf602", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::ptr::get_spans;\n use crate::utils::{\n-    get_trait_def_id, implements_trait, in_macro, is_copy, is_self, match_type, multispan_sugg, paths, snippet,\n-    snippet_opt, span_lint_and_then,\n+    get_trait_def_id, implements_trait, in_macro_or_desugar, is_copy, is_self, match_type, multispan_sugg, paths,\n+    snippet, snippet_opt, span_lint_and_then,\n };\n use if_chain::if_chain;\n use matches::matches;\n@@ -73,7 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if in_macro(span) {\n+        if in_macro_or_desugar(span) {\n             return;\n         }\n "}, {"sha": "8c5ddaf4140f7b3fd76e0cf3027637be0ef14824", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{has_drop, in_macro, snippet_opt, span_lint, span_lint_and_sugg};\n+use crate::utils::{has_drop, in_macro_or_desugar, snippet_opt, span_lint, span_lint_and_sugg};\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -43,7 +43,7 @@ declare_clippy_lint! {\n }\n \n fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n-    if in_macro(expr.span) {\n+    if in_macro_or_desugar(expr.span) {\n         return false;\n     }\n     match expr.node {\n@@ -103,7 +103,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoEffect {\n             } else if let Some(reduced) = reduce_expression(cx, expr) {\n                 let mut snippet = String::new();\n                 for e in reduced {\n-                    if in_macro(e.span) {\n+                    if in_macro_or_desugar(e.span) {\n                         return;\n                     }\n                     if let Some(snip) = snippet_opt(cx, e.span) {\n@@ -128,7 +128,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoEffect {\n }\n \n fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec<&'a Expr>> {\n-    if in_macro(expr.span) {\n+    if in_macro_or_desugar(expr.span) {\n         return None;\n     }\n     match expr.node {"}, {"sha": "2d56b4ee8b4e1ab6ac4a85da2a03f4823401a687", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -14,7 +14,7 @@ use rustc_errors::Applicability;\n use rustc_typeck::hir_ty_to_ty;\n use syntax_pos::{Span, DUMMY_SP};\n \n-use crate::utils::{in_constant, in_macro, is_copy, span_lint_and_then};\n+use crate::utils::{in_constant, in_macro_or_desugar, is_copy, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for declaration of `const` items which is interior\n@@ -118,7 +118,7 @@ fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, source: S\n \n     let (lint, msg, span) = source.lint();\n     span_lint_and_then(cx, lint, span, msg, |db| {\n-        if in_macro(span) {\n+        if in_macro_or_desugar(span) {\n             return; // Don't give suggestions into macros.\n         }\n         match source {"}, {"sha": "c52b59653706bcf9a1d12524775ad791ca0e32f5", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{in_macro_or_desugar, snippet_with_applicability, span_lint_and_sugg};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n@@ -32,7 +32,7 @@ declare_lint_pass!(Precedence => [PRECEDENCE]);\n \n impl EarlyLintPass for Precedence {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_macro(expr.span) {\n+        if in_macro_or_desugar(expr.span) {\n             return;\n         }\n "}, {"sha": "8c86c27befdfaabd27f535badadfc5bc6a4856f5", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    has_drop, in_macro, is_copy, match_type, paths, snippet_opt, span_lint_hir, span_lint_hir_and_then,\n+    has_drop, in_macro_or_desugar, is_copy, match_type, paths, snippet_opt, span_lint_hir, span_lint_hir_and_then,\n     walk_ptrs_ty_depth,\n };\n use if_chain::if_chain;\n@@ -83,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n         for (bb, bbdata) in mir.basic_blocks().iter_enumerated() {\n             let terminator = bbdata.terminator();\n \n-            if in_macro(terminator.source_info.span) {\n+            if in_macro_or_desugar(terminator.source_info.span) {\n                 continue;\n             }\n "}, {"sha": "8d1873b8a18de499b147a9db5a15739bbc29d678", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -7,7 +7,7 @@ use syntax::source_map::Span;\n use syntax::visit::FnKind;\n use syntax_pos::BytePos;\n \n-use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n+use crate::utils::{in_macro_or_desugar, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for return statements at the end of a block.\n@@ -130,7 +130,7 @@ impl Return {\n     }\n \n     fn emit_return_lint(&mut self, cx: &EarlyContext<'_>, ret_span: Span, inner_span: Span) {\n-        if in_external_macro(cx.sess(), inner_span) || in_macro(inner_span) {\n+        if in_external_macro(cx.sess(), inner_span) || in_macro_or_desugar(inner_span) {\n             return;\n         }\n         span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n@@ -185,7 +185,7 @@ impl EarlyLintPass for Return {\n         if_chain! {\n             if let ast::FunctionRetTy::Ty(ref ty) = decl.output;\n             if let ast::TyKind::Tup(ref vals) = ty.node;\n-            if vals.is_empty() && !in_macro(ty.span) && get_def(span) == get_def(ty.span);\n+            if vals.is_empty() && !in_macro_or_desugar(ty.span) && get_def(span) == get_def(ty.span);\n             then {\n                 let (rspan, appl) = if let Ok(fn_source) =\n                         cx.sess().source_map()\n@@ -217,7 +217,7 @@ impl EarlyLintPass for Return {\n         if_chain! {\n             if let Some(ref stmt) = block.stmts.last();\n             if let ast::StmtKind::Expr(ref expr) = stmt.node;\n-            if is_unit_expr(expr) && !in_macro(expr.span);\n+            if is_unit_expr(expr) && !in_macro_or_desugar(expr.span);\n             then {\n                 let sp = expr.span;\n                 span_lint_and_then(cx, UNUSED_UNIT, sp, \"unneeded unit expression\", |db| {\n@@ -235,7 +235,7 @@ impl EarlyLintPass for Return {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         match e.node {\n             ast::ExprKind::Ret(Some(ref expr)) | ast::ExprKind::Break(_, Some(ref expr)) => {\n-                if is_unit_expr(expr) && !in_macro(expr.span) {\n+                if is_unit_expr(expr) && !in_macro_or_desugar(expr.span) {\n                     span_lint_and_then(cx, UNUSED_UNIT, expr.span, \"unneeded `()`\", |db| {\n                         db.span_suggestion(\n                             expr.span,"}, {"sha": "0adeec93e69c27abc75b790a1a171d7e6c31b38e", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -142,7 +142,7 @@ declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        use crate::utils::{in_macro, snippet, snippet_with_applicability};\n+        use crate::utils::{in_macro_or_desugar, snippet, snippet_with_applicability};\n         use syntax::ast::{LitKind, StrStyle};\n \n         if let ExprKind::MethodCall(ref path, _, ref args) = e.node {\n@@ -173,7 +173,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n                             );\n                         } else if callsite == expanded\n                             && lit_content.as_str().chars().all(|c| c.is_ascii())\n-                            && !in_macro(args[0].span)\n+                            && !in_macro_or_desugar(args[0].span)\n                         {\n                             span_lint_and_sugg(\n                                 cx,"}, {"sha": "8205851d77572f75cd0829105b461f3b90ddb4a3", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,6 +1,6 @@\n use std::cmp;\n \n-use crate::utils::{in_macro, is_copy, is_self_ty, snippet, span_lint_and_sugg};\n+use crate::utils::{in_macro_or_desugar, is_copy, is_self_ty, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n use matches::matches;\n use rustc::hir;\n@@ -141,7 +141,7 @@ impl_lint_pass!(TriviallyCopyPassByRef => [TRIVIALLY_COPY_PASS_BY_REF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if in_macro(item.span) {\n+        if in_macro_or_desugar(item.span) {\n             return;\n         }\n         if let ItemKind::Trait(_, _, _, _, ref trait_items) = item.node {\n@@ -158,7 +158,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if in_macro(span) {\n+        if in_macro_or_desugar(span) {\n             return;\n         }\n "}, {"sha": "4aa3b75dec2e748571da7f9c3eee7146038329e4", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -22,7 +22,7 @@ use syntax::source_map::Span;\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro, int_bits, last_path_segment,\n+    clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro_or_desugar, int_bits, last_path_segment,\n     match_path, multispan_sugg, same_tys, sext, snippet, snippet_opt, snippet_with_applicability, span_help_and_lint,\n     span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n@@ -232,7 +232,7 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath, path: &[&str])\n /// local bindings should only be checked for the `BORROWED_BOX` lint.\n #[allow(clippy::too_many_lines)]\n fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n-    if in_macro(hir_ty.span) {\n+    if in_macro_or_desugar(hir_ty.span) {\n         return;\n     }\n     match hir_ty.node {\n@@ -460,7 +460,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnitValue {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         if let StmtKind::Local(ref local) = stmt.node {\n             if is_unit(cx.tables.pat_ty(&local.pat)) {\n-                if in_external_macro(cx.sess(), stmt.span) || in_macro(local.pat.span) {\n+                if in_external_macro(cx.sess(), stmt.span) || in_macro_or_desugar(local.pat.span) {\n                     return;\n                 }\n                 if higher::is_from_for_desugar(local) {\n@@ -522,7 +522,7 @@ declare_lint_pass!(UnitCmp => [UNIT_CMP]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if in_macro(expr.span) {\n+        if in_macro_or_desugar(expr.span) {\n             return;\n         }\n         if let ExprKind::Binary(ref cmp, ref left, _) = expr.node {\n@@ -571,7 +571,7 @@ declare_lint_pass!(UnitArg => [UNIT_ARG]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if in_macro(expr.span) {\n+        if in_macro_or_desugar(expr.span) {\n             return;\n         }\n \n@@ -1110,7 +1110,7 @@ fn fp_ty_mantissa_nbits(typ: Ty<'_>) -> u32 {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if in_macro(expr.span) {\n+        if in_macro_or_desugar(expr.span) {\n             return;\n         }\n         if let ExprKind::Cast(ref ex, _) = expr.node {\n@@ -1367,7 +1367,7 @@ impl<'a, 'tcx> TypeComplexity {\n     }\n \n     fn check_type(&self, cx: &LateContext<'_, '_>, ty: &hir::Ty) {\n-        if in_macro(ty.span) {\n+        if in_macro_or_desugar(ty.span) {\n             return;\n         }\n         let score = {\n@@ -1471,7 +1471,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n         if let ExprKind::Cast(ref e, _) = expr.node {\n             if let ExprKind::Lit(ref l) = e.node {\n                 if let LitKind::Char(_) = l.node {\n-                    if ty::Uint(UintTy::U8) == cx.tables.expr_ty(expr).sty && !in_macro(expr.span) {\n+                    if ty::Uint(UintTy::U8) == cx.tables.expr_ty(expr).sty && !in_macro_or_desugar(expr.span) {\n                         let msg = \"casting character literal to u8. `char`s \\\n                                    are 4 bytes wide in rust, so casting to u8 \\\n                                    truncates them\";\n@@ -1632,7 +1632,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AbsurdExtremeComparisons {\n \n         if let ExprKind::Binary(ref cmp, ref lhs, ref rhs) = expr.node {\n             if let Some((culprit, result)) = detect_absurd_comparison(cx, cmp.node, lhs, rhs) {\n-                if !in_macro(expr.span) {\n+                if !in_macro_or_desugar(expr.span) {\n                     let msg = \"this comparison involving the minimum or maximum element for this \\\n                                type contains a case that is always true or always false\";\n "}, {"sha": "4b41a02de974b276b9c110144fd2b621f813d091", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro, span_lint};\n+use crate::utils::{in_macro_or_desugar, span_lint};\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -44,7 +44,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n         span: Span,\n         fn_id: hir::HirId,\n     ) {\n-        if in_macro(span) {\n+        if in_macro_or_desugar(span) {\n             return;\n         }\n "}, {"sha": "0ec7256d4b3a6ee21784e5a66b1cac8515c39e5e", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -2,7 +2,9 @@ use if_chain::if_chain;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{higher::if_block, in_macro, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};\n+use crate::utils::{\n+    higher::if_block, in_macro_or_desugar, match_type, paths, span_lint_and_then, usage::is_potentially_mutated,\n+};\n use rustc::hir::intravisit::*;\n use rustc::hir::*;\n use syntax::source_map::Span;\n@@ -189,7 +191,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Unwrap {\n         span: Span,\n         fn_id: HirId,\n     ) {\n-        if in_macro(span) {\n+        if in_macro_or_desugar(span) {\n             return;\n         }\n "}, {"sha": "bfc1233f9eba5ec3c1958f0911a7219362780264", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -89,6 +89,11 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: HirId) -> bool {\n     }\n }\n \n+/// Returns `true` if this `expn_info` was expanded by any macro or desugaring\n+pub fn in_macro_or_desugar(span: Span) -> bool {\n+    span.ctxt().outer().expn_info().is_some()\n+}\n+\n /// Returns `true` if this `expn_info` was expanded by any macro.\n pub fn in_macro(span: Span) -> bool {\n     if let Some(info) = span.ctxt().outer().expn_info() {\n@@ -101,7 +106,6 @@ pub fn in_macro(span: Span) -> bool {\n         false\n     }\n }\n-\n // If the snippet is empty, it's an attribute that was inserted during macro\n // expansion and we want to ignore those, because they could come from external\n // sources that the user has no control over.\n@@ -339,7 +343,7 @@ pub fn method_calls<'a>(expr: &'a Expr, max_depth: usize) -> (Vec<Symbol>, Vec<&\n     let mut current = expr;\n     for _ in 0..max_depth {\n         if let ExprKind::MethodCall(path, _, args) = &current.node {\n-            if args.iter().any(|e| in_macro(e.span)) {\n+            if args.iter().any(|e| in_macro_or_desugar(e.span)) {\n                 break;\n             }\n             method_names.push(path.ident.name);\n@@ -366,7 +370,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr, methods: &[&str]) -> Option<Vec<&'a\n         // method chains are stored last -> first\n         if let ExprKind::MethodCall(ref path, _, ref args) = current.node {\n             if path.ident.name == *method_name {\n-                if args.iter().any(|e| in_macro(e.span)) {\n+                if args.iter().any(|e| in_macro_or_desugar(e.span)) {\n                     return None;\n                 }\n                 matched.push(&**args); // build up `matched` backwards\n@@ -461,7 +465,7 @@ pub fn snippet_with_applicability<'a, 'b, T: LintContext<'b>>(\n     default: &'a str,\n     applicability: &mut Applicability,\n ) -> Cow<'a, str> {\n-    if *applicability != Applicability::Unspecified && in_macro(span) {\n+    if *applicability != Applicability::Unspecified && in_macro_or_desugar(span) {\n         *applicability = Applicability::MaybeIncorrect;\n     }\n     snippet_opt(cx, span).map_or_else(\n@@ -531,7 +535,7 @@ pub fn expr_block<'a, 'b, T: LintContext<'b>>(\n ) -> Cow<'a, str> {\n     let code = snippet_block(cx, expr.span, default);\n     let string = option.unwrap_or_default();\n-    if in_macro(expr.span) {\n+    if in_macro_or_desugar(expr.span) {\n         Cow::Owned(format!(\"{{ {} }}\", snippet_with_macro_callsite(cx, expr.span, default)))\n     } else if let ExprKind::Block(_, _) = expr.node {\n         Cow::Owned(format!(\"{}{}\", code, string))"}, {"sha": "4d87373ec6a9cd58fd5a87294e5a5e78a93133d2", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -1,7 +1,7 @@\n //! Contains utility functions to generate suggestions.\n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::utils::{higher, in_macro, snippet, snippet_opt, snippet_with_macro_callsite};\n+use crate::utils::{higher, in_macro_or_desugar, snippet, snippet_opt, snippet_with_macro_callsite};\n use matches::matches;\n use rustc::hir;\n use rustc::lint::{EarlyContext, LateContext, LintContext};\n@@ -69,7 +69,7 @@ impl<'a> Sugg<'a> {\n         default: &'a str,\n         applicability: &mut Applicability,\n     ) -> Self {\n-        if *applicability != Applicability::Unspecified && in_macro(expr.span) {\n+        if *applicability != Applicability::Unspecified && in_macro_or_desugar(expr.span) {\n             *applicability = Applicability::MaybeIncorrect;\n         }\n         Self::hir_opt(cx, expr).unwrap_or_else(|| {"}, {"sha": "a80ee9f5435505cdf31efc62d1adc52f1306aa06", "filename": "doc/adding_lints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -381,7 +381,7 @@ Here are some pointers to things you are likely going to need for every lint:\n   is already in here (`implements_trait`, `match_path`, `snippet`, etc)\n * [Clippy diagnostics][diagnostics]\n * [The `if_chain` macro][if_chain]\n-* [`in_macro`][in_macro] and [`in_external_macro`][in_external_macro]\n+* [`in_macro_or_desugar`][in_macro_or_desugar] and [`in_external_macro`][in_external_macro]\n * [`Span`][span]\n * [`Applicability`][applicability]\n * [The rustc guide][rustc_guide] explains a lot of internal compiler concepts\n@@ -421,7 +421,7 @@ don't hesitate to ask on Discord, IRC or in the issue/PR.\n [if_chain]: https://docs.rs/if_chain/0.1.2/if_chain/\n [ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/sty/index.html\n [ast]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/index.html\n-[in_macro]: https://github.com/rust-lang/rust-clippy/blob/d0717d1f9531a03d154aaeb0cad94c243915a146/clippy_lints/src/utils/mod.rs#L94\n+[in_macro_or_desugar]: https://github.com/rust-lang/rust-clippy/blob/d0717d1f9531a03d154aaeb0cad94c243915a146/clippy_lints/src/utils/mod.rs#L94\n [in_external_macro]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/fn.in_external_macro.html\n [play]: https://play.rust-lang.org\n [author_example]: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f093b986e80ad62f3b67a1f24f5e66e2"}, {"sha": "5a02ff5d193de27d073f7a7bfd428240f48c5e27", "filename": "tests/ui/used_underscore_binding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feb18c364cfb70ad9bce1799e2e224fc38111051/tests%2Fui%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb18c364cfb70ad9bce1799e2e224fc38111051/tests%2Fui%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.rs?ref=feb18c364cfb70ad9bce1799e2e224fc38111051", "patch": "@@ -25,7 +25,7 @@ fn prefix_underscore(_foo: u32) -> u32 {\n }\n \n /// Tests that we lint if we use a `_`-variable defined outside within a macro expansion\n-fn in_macro(_foo: u32) {\n+fn in_macro_or_desugar(_foo: u32) {\n     println!(\"{}\", _foo);\n     assert_eq!(_foo, _foo);\n \n@@ -90,7 +90,7 @@ fn main() {\n     let foo = 0u32;\n     // tests of unused_underscore lint\n     let _ = prefix_underscore(foo);\n-    in_macro(foo);\n+    in_macro_or_desugar(foo);\n     in_struct_field();\n     // possible false positives\n     let _ = non_prefix_underscore(foo);"}]}