{"sha": "97e5449a70f0a933d4c3c75527211010d511cac5", "node_id": "C_kwDOAAsO6NoAKDk3ZTU0NDlhNzBmMGE5MzNkNGMzYzc1NTI3MjExMDEwZDUxMWNhYzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-02T17:16:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-02T17:16:43Z"}, "message": "Auto merge of #8902 - PrestonFrom:add_suggestion_for_move_and_clone_when_not_ref, r=flip1995\n\nWhen setting suggestion for significant_drop_in_scrutinee, add suggestion for MoveAndClone for non-ref\n\nWhen trying to set the current suggestion, if the type of the expression\nis not a reference and it is not trivially pure clone copy, we should still\ntrigger and emit a lint message. Since this fix may require cloning an\nexpensive-to-clone type, do not attempt to offer a suggested fix.\n\nThis change means that matches generated from TryDesugar and AwaitDesugar\nwould normally trigger a lint, but they are out of scope for this lint,\nso we will explicitly ignore matches with sources of TryDesugar or\nAwaitDesugar.\n\nchangelog: Update for ``[`significant_drop_in_scrutinee`]`` to correctly\nemit lint messages for cases where the type is not a reference *and*\nnot trivially pure clone copy.\nchangelog: [`significant_drop_in_scrutinee`]: No longer lint on Try `?`\nand `await` desugared expressions.", "tree": {"sha": "65cb5cde09368bf38d9499d3e91130508bc00e48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65cb5cde09368bf38d9499d3e91130508bc00e48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97e5449a70f0a933d4c3c75527211010d511cac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97e5449a70f0a933d4c3c75527211010d511cac5", "html_url": "https://github.com/rust-lang/rust/commit/97e5449a70f0a933d4c3c75527211010d511cac5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97e5449a70f0a933d4c3c75527211010d511cac5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e32b66c871cc9b20e283733b6626e9d85b4447a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e32b66c871cc9b20e283733b6626e9d85b4447a1", "html_url": "https://github.com/rust-lang/rust/commit/e32b66c871cc9b20e283733b6626e9d85b4447a1"}, {"sha": "bc5a8e9537d30858fede92347e3842d4d4f8a803", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5a8e9537d30858fede92347e3842d4d4f8a803", "html_url": "https://github.com/rust-lang/rust/commit/bc5a8e9537d30858fede92347e3842d4d4f8a803"}], "stats": {"total": 230, "additions": 146, "deletions": 84}, "files": [{"sha": "2f7819cb47048cb5d51c99150937d87f5cadcd64", "filename": "clippy_lints/src/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 69, "deletions": 59, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/97e5449a70f0a933d4c3c75527211010d511cac5/clippy_lints%2Fsrc%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e5449a70f0a933d4c3c75527211010d511cac5/clippy_lints%2Fsrc%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsignificant_drop_in_scrutinee.rs?ref=97e5449a70f0a933d4c3c75527211010d511cac5", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::get_attr;\n use clippy_utils::source::{indent_of, snippet};\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::{Expr, ExprKind, MatchSource};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{Ty, TypeAndMut};\n@@ -91,15 +91,11 @@ declare_lint_pass!(SignificantDropInScrutinee => [SIGNIFICANT_DROP_IN_SCRUTINEE]\n \n impl<'tcx> LateLintPass<'tcx> for SignificantDropInScrutinee {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if let Some(suggestions) = has_significant_drop_in_scrutinee(cx, expr) {\n+        if let Some((suggestions, message)) = has_significant_drop_in_scrutinee(cx, expr) {\n             for found in suggestions {\n-                span_lint_and_then(\n-                    cx,\n-                    SIGNIFICANT_DROP_IN_SCRUTINEE,\n-                    found.found_span,\n-                    \"temporary with significant drop in match scrutinee\",\n-                    |diag| set_diagnostic(diag, cx, expr, found),\n-                );\n+                span_lint_and_then(cx, SIGNIFICANT_DROP_IN_SCRUTINEE, found.found_span, message, |diag| {\n+                    set_diagnostic(diag, cx, expr, found);\n+                });\n             }\n         }\n     }\n@@ -153,10 +149,25 @@ fn set_diagnostic<'tcx>(diag: &mut Diagnostic, cx: &LateContext<'tcx>, expr: &'t\n fn has_significant_drop_in_scrutinee<'tcx, 'a>(\n     cx: &'a LateContext<'tcx>,\n     expr: &'tcx Expr<'tcx>,\n-) -> Option<Vec<FoundSigDrop>> {\n-    let mut helper = SigDropHelper::new(cx);\n+) -> Option<(Vec<FoundSigDrop>, &'static str)> {\n     match expr.kind {\n-        ExprKind::Match(match_expr, _, _) => helper.find_sig_drop(match_expr),\n+        ExprKind::Match(match_expr, _, source) => {\n+            match source {\n+                MatchSource::Normal | MatchSource::ForLoopDesugar => {\n+                    let mut helper = SigDropHelper::new(cx);\n+                    helper.find_sig_drop(match_expr).map(|drops| {\n+                        let message = if source == MatchSource::Normal {\n+                            \"temporary with significant drop in match scrutinee\"\n+                        } else {\n+                            \"temporary with significant drop in for loop\"\n+                        };\n+                        (drops, message)\n+                    })\n+                },\n+                // MatchSource of TryDesugar or AwaitDesugar is out of scope for this lint\n+                MatchSource::TryDesugar | MatchSource::AwaitDesugar => None,\n+            }\n+        },\n         _ => None,\n     }\n }\n@@ -213,6 +224,19 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n         self.sig_drop_spans.take()\n     }\n \n+    fn replace_current_sig_drop(\n+        &mut self,\n+        found_span: Span,\n+        is_unit_return_val: bool,\n+        lint_suggestion: LintSuggestion,\n+    ) {\n+        self.current_sig_drop.replace(FoundSigDrop {\n+            found_span,\n+            is_unit_return_val,\n+            lint_suggestion,\n+        });\n+    }\n+\n     /// This will try to set the current suggestion (so it can be moved into the suggestions vec\n     /// later). If `allow_move_and_clone` is false, the suggestion *won't* be set -- this gives us\n     /// an opportunity to look for another type in the chain that will be trivially copyable.\n@@ -229,25 +253,15 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n             // but let's avoid any chance of an ICE\n             if let Some(TypeAndMut { ty, .. }) = ty.builtin_deref(true) {\n                 if ty.is_trivially_pure_clone_copy() {\n-                    self.current_sig_drop.replace(FoundSigDrop {\n-                        found_span: expr.span,\n-                        is_unit_return_val: false,\n-                        lint_suggestion: LintSuggestion::MoveAndDerefToCopy,\n-                    });\n+                    self.replace_current_sig_drop(expr.span, false, LintSuggestion::MoveAndDerefToCopy);\n                 } else if allow_move_and_clone {\n-                    self.current_sig_drop.replace(FoundSigDrop {\n-                        found_span: expr.span,\n-                        is_unit_return_val: false,\n-                        lint_suggestion: LintSuggestion::MoveAndClone,\n-                    });\n+                    self.replace_current_sig_drop(expr.span, false, LintSuggestion::MoveAndClone);\n                 }\n             }\n         } else if ty.is_trivially_pure_clone_copy() {\n-            self.current_sig_drop.replace(FoundSigDrop {\n-                found_span: expr.span,\n-                is_unit_return_val: false,\n-                lint_suggestion: LintSuggestion::MoveOnly,\n-            });\n+            self.replace_current_sig_drop(expr.span, false, LintSuggestion::MoveOnly);\n+        } else if allow_move_and_clone {\n+            self.replace_current_sig_drop(expr.span, false, LintSuggestion::MoveAndClone);\n         }\n     }\n \n@@ -279,11 +293,7 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n         // If either side had a significant drop, suggest moving the entire scrutinee to avoid\n         // unnecessary copies and to simplify cases where both sides have significant drops.\n         if self.has_significant_drop {\n-            self.current_sig_drop.replace(FoundSigDrop {\n-                found_span: span,\n-                is_unit_return_val,\n-                lint_suggestion: LintSuggestion::MoveOnly,\n-            });\n+            self.replace_current_sig_drop(span, is_unit_return_val, LintSuggestion::MoveOnly);\n         }\n \n         self.special_handling_for_binary_op = false;\n@@ -363,34 +373,34 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n                 }\n             }\n             ExprKind::Box(..) |\n-                ExprKind::Array(..) |\n-                ExprKind::Call(..) |\n-                ExprKind::Unary(..) |\n-                ExprKind::If(..) |\n-                ExprKind::Match(..) |\n-                ExprKind::Field(..) |\n-                ExprKind::Index(..) |\n-                ExprKind::Ret(..) |\n-                ExprKind::Repeat(..) |\n-                ExprKind::Yield(..) |\n-                ExprKind::MethodCall(..) => walk_expr(self, ex),\n+            ExprKind::Array(..) |\n+            ExprKind::Call(..) |\n+            ExprKind::Unary(..) |\n+            ExprKind::If(..) |\n+            ExprKind::Match(..) |\n+            ExprKind::Field(..) |\n+            ExprKind::Index(..) |\n+            ExprKind::Ret(..) |\n+            ExprKind::Repeat(..) |\n+            ExprKind::Yield(..) |\n+            ExprKind::MethodCall(..) => walk_expr(self, ex),\n             ExprKind::AddrOf(_, _, _) |\n-                ExprKind::Block(_, _) |\n-                ExprKind::Break(_, _) |\n-                ExprKind::Cast(_, _) |\n-                // Don't want to check the closure itself, only invocation, which is covered by MethodCall\n-                ExprKind::Closure(_, _, _, _, _) |\n-                ExprKind::ConstBlock(_) |\n-                ExprKind::Continue(_) |\n-                ExprKind::DropTemps(_) |\n-                ExprKind::Err |\n-                ExprKind::InlineAsm(_) |\n-                ExprKind::Let(_) |\n-                ExprKind::Lit(_) |\n-                ExprKind::Loop(_, _, _, _) |\n-                ExprKind::Path(_) |\n-                ExprKind::Struct(_, _, _) |\n-                ExprKind::Type(_, _) => {\n+            ExprKind::Block(_, _) |\n+            ExprKind::Break(_, _) |\n+            ExprKind::Cast(_, _) |\n+            // Don't want to check the closure itself, only invocation, which is covered by MethodCall\n+            ExprKind::Closure(_, _, _, _, _) |\n+            ExprKind::ConstBlock(_) |\n+            ExprKind::Continue(_) |\n+            ExprKind::DropTemps(_) |\n+            ExprKind::Err |\n+            ExprKind::InlineAsm(_) |\n+            ExprKind::Let(_) |\n+            ExprKind::Lit(_) |\n+            ExprKind::Loop(_, _, _, _) |\n+            ExprKind::Path(_) |\n+            ExprKind::Struct(_, _, _) |\n+            ExprKind::Type(_, _) => {\n                 return;\n             }\n         }"}, {"sha": "f653c1cedbb982e11e3cfbc013d258620f8f0972", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97e5449a70f0a933d4c3c75527211010d511cac5/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e5449a70f0a933d4c3c75527211010d511cac5/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=97e5449a70f0a933d4c3c75527211010d511cac5", "patch": "@@ -2083,7 +2083,8 @@ static TEST_ITEM_NAMES_CACHE: SyncOnceCell<Mutex<FxHashMap<LocalDefId, Vec<Symbo\n fn with_test_item_names<'tcx>(tcx: TyCtxt<'tcx>, module: LocalDefId, f: impl Fn(&[Symbol]) -> bool) -> bool {\n     let cache = TEST_ITEM_NAMES_CACHE.get_or_init(|| Mutex::new(FxHashMap::default()));\n     let mut map: MutexGuard<'_, FxHashMap<LocalDefId, Vec<Symbol>>> = cache.lock().unwrap();\n-    match map.entry(module) {\n+    let value = map.entry(module);\n+    match value {\n         Entry::Occupied(entry) => f(entry.get()),\n         Entry::Vacant(entry) => {\n             let mut names = Vec::new();"}, {"sha": "4347610f393f38678303b3f9684708369fc559ab", "filename": "tests/ui/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/97e5449a70f0a933d4c3c75527211010d511cac5/tests%2Fui%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e5449a70f0a933d4c3c75527211010d511cac5/tests%2Fui%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_in_scrutinee.rs?ref=97e5449a70f0a933d4c3c75527211010d511cac5", "patch": "@@ -7,8 +7,10 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n \n+use std::num::ParseIntError;\n use std::ops::Deref;\n use std::sync::atomic::{AtomicU64, Ordering};\n+use std::sync::RwLock;\n use std::sync::{Mutex, MutexGuard};\n \n struct State {}\n@@ -552,4 +554,41 @@ fn should_not_cause_stack_overflow() {\n     }\n }\n \n+fn should_not_produce_lint_for_try_desugar() -> Result<u64, ParseIntError> {\n+    // TryDesugar (i.e. using `?` for a Result type) will turn into a match but is out of scope\n+    // for this lint\n+    let rwlock = RwLock::new(\"1\".to_string());\n+    let result = rwlock.read().unwrap().parse::<u64>()?;\n+    println!(\"{}\", result);\n+    rwlock.write().unwrap().push('2');\n+    Ok(result)\n+}\n+\n+struct ResultReturner {\n+    s: String,\n+}\n+\n+impl ResultReturner {\n+    fn to_number(&self) -> Result<i64, ParseIntError> {\n+        self.s.parse::<i64>()\n+    }\n+}\n+\n+fn should_trigger_lint_for_non_ref_move_and_clone_suggestion() {\n+    let rwlock = RwLock::<ResultReturner>::new(ResultReturner { s: \"1\".to_string() });\n+    match rwlock.read().unwrap().to_number() {\n+        Ok(n) => println!(\"Converted to number: {}\", n),\n+        Err(e) => println!(\"Could not convert {} to number\", e),\n+    };\n+}\n+\n+fn should_trigger_lint_for_read_write_lock_for_loop() {\n+    // For-in loops desugar to match expressions and are prone to the type of deadlock this lint is\n+    // designed to look for.\n+    let rwlock = RwLock::<Vec<String>>::new(vec![\"1\".to_string()]);\n+    for s in rwlock.read().unwrap().iter() {\n+        println!(\"{}\", s);\n+    }\n+}\n+\n fn main() {}"}, {"sha": "303f3c1df033cfcd1100747da442bccd82ef5ab3", "filename": "tests/ui/significant_drop_in_scrutinee.stderr", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/97e5449a70f0a933d4c3c75527211010d511cac5/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97e5449a70f0a933d4c3c75527211010d511cac5/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_in_scrutinee.stderr?ref=97e5449a70f0a933d4c3c75527211010d511cac5", "patch": "@@ -1,5 +1,5 @@\n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:57:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:59:11\n    |\n LL |     match mutex.lock().unwrap().foo() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -12,7 +12,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:130:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:132:11\n    |\n LL |     match s.lock_m().get_the_value() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -24,7 +24,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:151:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:153:11\n    |\n LL |     match s.lock_m_m().get_the_value() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:199:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:201:11\n    |\n LL |     match counter.temp_increment().len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -48,7 +48,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:222:16\n+  --> $DIR/significant_drop_in_scrutinee.rs:224:16\n    |\n LL |         match (mutex1.lock().unwrap().s.len(), true) {\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL ~         match (value, true) {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:231:22\n+  --> $DIR/significant_drop_in_scrutinee.rs:233:22\n    |\n LL |         match (true, mutex1.lock().unwrap().s.len(), true) {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL ~         match (true, value, true) {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:241:16\n+  --> $DIR/significant_drop_in_scrutinee.rs:243:16\n    |\n LL |         match (mutex1.lock().unwrap().s.len(), true, mutex2.lock().unwrap().s.len()) {\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -84,7 +84,7 @@ LL ~         match (value, true, mutex2.lock().unwrap().s.len()) {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:241:54\n+  --> $DIR/significant_drop_in_scrutinee.rs:243:54\n    |\n LL |         match (mutex1.lock().unwrap().s.len(), true, mutex2.lock().unwrap().s.len()) {\n    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -96,19 +96,19 @@ LL ~         match (mutex1.lock().unwrap().s.len(), true, value) {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:252:15\n+  --> $DIR/significant_drop_in_scrutinee.rs:254:15\n    |\n LL |         match mutex3.lock().unwrap().s.as_str() {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:262:22\n+  --> $DIR/significant_drop_in_scrutinee.rs:264:22\n    |\n LL |         match (true, mutex3.lock().unwrap().s.as_str()) {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:281:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:283:11\n    |\n LL |     match mutex.lock().unwrap().s.len() > 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:288:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:290:11\n    |\n LL |     match 1 < mutex.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -132,7 +132,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:306:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:308:11\n    |\n LL |     match mutex1.lock().unwrap().s.len() < mutex2.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -144,7 +144,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:317:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:319:11\n    |\n LL |     match mutex1.lock().unwrap().s.len() >= mutex2.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -156,7 +156,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:352:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:354:11\n    |\n LL |     match get_mutex_guard().s.len() > 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -168,7 +168,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:369:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:371:11\n    |\n LL |       match match i {\n    |  ___________^\n@@ -191,7 +191,7 @@ LL +     .len()\n  ...\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:395:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:397:11\n    |\n LL |       match if i > 1 {\n    |  ___________^\n@@ -214,7 +214,7 @@ LL +     .s\n  ...\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:449:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:451:11\n    |\n LL |     match s.lock().deref().deref() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -226,13 +226,13 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:477:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:479:11\n    |\n LL |     match s.lock().deref().deref() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:496:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:498:11\n    |\n LL |     match mutex.lock().unwrap().i = i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -244,7 +244,7 @@ LL ~     match () {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:502:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:504:11\n    |\n LL |     match i = mutex.lock().unwrap().i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -256,7 +256,7 @@ LL ~     match () {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:508:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:510:11\n    |\n LL |     match mutex.lock().unwrap().i += 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -268,7 +268,7 @@ LL ~     match () {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:514:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:516:11\n    |\n LL |     match i += mutex.lock().unwrap().i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -279,5 +279,17 @@ LL ~     i += mutex.lock().unwrap().i;\n LL ~     match () {\n    |\n \n-error: aborting due to 23 previous errors\n+error: temporary with significant drop in match scrutinee\n+  --> $DIR/significant_drop_in_scrutinee.rs:579:11\n+   |\n+LL |     match rwlock.read().unwrap().to_number() {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: temporary with significant drop in for loop\n+  --> $DIR/significant_drop_in_scrutinee.rs:589:14\n+   |\n+LL |     for s in rwlock.read().unwrap().iter() {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 25 previous errors\n "}]}