{"sha": "181e91567c9f347e055b33b1d7e9894f769aafe3", "node_id": "C_kwDOAAsO6NoAKDE4MWU5MTU2N2M5ZjM0N2UwNTViMzNiMWQ3ZTk4OTRmNzY5YWFmZTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-05T12:32:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-05T12:32:28Z"}, "message": "Auto merge of #92580 - matthiaskrgr:rollup-nzyn65y, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #92182 (Label more build steps)\n - #92188 (rustdoc: Clean up NestedAttributesExt trait/implementation)\n - #92322 (Add another implementation example to Debug trait)\n - #92448 (Set font size proportional to user's font size)\n - #92517 (Explicitly pass `PATH` to the Windows exe resolver)\n - #92545 (Extract init_env_logger to crate)\n - #92579 (update Miri)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bf1b9bc743d4e9c0be2ccf6d2ef4beb70cc24c8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf1b9bc743d4e9c0be2ccf6d2ef4beb70cc24c8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/181e91567c9f347e055b33b1d7e9894f769aafe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/181e91567c9f347e055b33b1d7e9894f769aafe3", "html_url": "https://github.com/rust-lang/rust/commit/181e91567c9f347e055b33b1d7e9894f769aafe3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/181e91567c9f347e055b33b1d7e9894f769aafe3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936ce3dab7fd042101767c439362310f8355e859", "url": "https://api.github.com/repos/rust-lang/rust/commits/936ce3dab7fd042101767c439362310f8355e859", "html_url": "https://github.com/rust-lang/rust/commit/936ce3dab7fd042101767c439362310f8355e859"}, {"sha": "a0673468ae2a1953cfe7799e1755abfb2abd8339", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0673468ae2a1953cfe7799e1755abfb2abd8339", "html_url": "https://github.com/rust-lang/rust/commit/a0673468ae2a1953cfe7799e1755abfb2abd8339"}], "stats": {"total": 490, "additions": 299, "deletions": 191}, "files": [{"sha": "f3553c37903a40f3269545bd7c395d4f98cfaa3e", "filename": "Cargo.lock", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -368,7 +368,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"directories\",\n  \"rustc-workspace-hack\",\n- \"rustc_version 0.3.3\",\n+ \"rustc_version\",\n  \"serde\",\n  \"serde_json\",\n  \"vergen\",\n@@ -2276,7 +2276,7 @@ dependencies = [\n  \"measureme 9.1.2\",\n  \"rand 0.8.4\",\n  \"rustc-workspace-hack\",\n- \"rustc_version 0.4.0\",\n+ \"rustc_version\",\n  \"shell-escape\",\n  \"smallvec\",\n ]\n@@ -3808,7 +3808,6 @@ dependencies = [\n name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n- \"atty\",\n  \"libc\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n@@ -3822,6 +3821,7 @@ dependencies = [\n  \"rustc_hir_pretty\",\n  \"rustc_interface\",\n  \"rustc_lint\",\n+ \"rustc_log\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n  \"rustc_parse\",\n@@ -3833,8 +3833,6 @@ dependencies = [\n  \"rustc_target\",\n  \"rustc_typeck\",\n  \"tracing\",\n- \"tracing-subscriber\",\n- \"tracing-tree\",\n  \"winapi\",\n ]\n \n@@ -4077,6 +4075,17 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"rustc_log\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"atty\",\n+ \"rustc_span\",\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+ \"tracing-tree\",\n+]\n+\n [[package]]\n name = \"rustc_macros\"\n version = \"0.1.0\"\n@@ -4577,15 +4586,6 @@ dependencies = [\n  \"tracing\",\n ]\n \n-[[package]]\n-name = \"rustc_version\"\n-version = \"0.3.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f0dfe2087c51c460008730de8b57e6a320782fbfb312e1f4d520e6c6fae155ee\"\n-dependencies = [\n- \"semver 0.11.0\",\n-]\n-\n [[package]]\n name = \"rustc_version\"\n version = \"0.4.0\""}, {"sha": "872f946bf7d91cf9b8261c65154314302aa3eb70", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -8,10 +8,8 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n libc = \"0.2\"\n-atty = \"0.2\"\n tracing = { version = \"0.1.28\" }\n-tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n-tracing-tree = \"0.2.0\"\n+rustc_log = { path = \"../rustc_log\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_target = { path = \"../rustc_target\" }\n@@ -40,4 +38,4 @@ winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"]\n \n [features]\n llvm = ['rustc_interface/llvm']\n-max_level_info = ['tracing/max_level_info']\n+max_level_info = ['rustc_log/max_level_info']"}, {"sha": "3d58b27f83922fb43bd59be1551f2340878d4494", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 7, "deletions": 50, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -24,6 +24,7 @@ use rustc_feature::find_gated_cfg;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n+use rustc_log::stdout_isatty;\n use rustc_metadata::locator;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n@@ -514,14 +515,6 @@ impl Compilation {\n #[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n-fn stdout_isatty() -> bool {\n-    atty::is(atty::Stream::Stdout)\n-}\n-\n-fn stderr_isatty() -> bool {\n-    atty::is(atty::Stream::Stderr)\n-}\n-\n fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     let upper_cased_code = code.to_ascii_uppercase();\n     let normalised = if upper_cased_code.starts_with('E') {\n@@ -1254,54 +1247,18 @@ pub fn install_ice_hook() {\n /// This allows tools to enable rust logging without having to magically match rustc's\n /// tracing crate version.\n pub fn init_rustc_env_logger() {\n-    init_env_logger(\"RUSTC_LOG\")\n+    if let Err(error) = rustc_log::init_rustc_env_logger() {\n+        early_error(ErrorOutputType::default(), &error.to_string());\n+    }\n }\n \n /// This allows tools to enable rust logging without having to magically match rustc's\n /// tracing crate version. In contrast to `init_rustc_env_logger` it allows you to choose an env var\n /// other than `RUSTC_LOG`.\n pub fn init_env_logger(env: &str) {\n-    use tracing_subscriber::{\n-        filter::{self, EnvFilter, LevelFilter},\n-        layer::SubscriberExt,\n-    };\n-\n-    let filter = match std::env::var(env) {\n-        Ok(env) => EnvFilter::new(env),\n-        _ => EnvFilter::default().add_directive(filter::Directive::from(LevelFilter::WARN)),\n-    };\n-\n-    let color_logs = match std::env::var(String::from(env) + \"_COLOR\") {\n-        Ok(value) => match value.as_ref() {\n-            \"always\" => true,\n-            \"never\" => false,\n-            \"auto\" => stderr_isatty(),\n-            _ => early_error(\n-                ErrorOutputType::default(),\n-                &format!(\n-                    \"invalid log color value '{}': expected one of always, never, or auto\",\n-                    value\n-                ),\n-            ),\n-        },\n-        Err(std::env::VarError::NotPresent) => stderr_isatty(),\n-        Err(std::env::VarError::NotUnicode(_value)) => early_error(\n-            ErrorOutputType::default(),\n-            \"non-Unicode log color value: expected one of always, never, or auto\",\n-        ),\n-    };\n-\n-    let layer = tracing_tree::HierarchicalLayer::default()\n-        .with_writer(io::stderr)\n-        .with_indent_lines(true)\n-        .with_ansi(color_logs)\n-        .with_targets(true)\n-        .with_indent_amount(2);\n-    #[cfg(parallel_compiler)]\n-    let layer = layer.with_thread_ids(true).with_thread_names(true);\n-\n-    let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n-    tracing::subscriber::set_global_default(subscriber).unwrap();\n+    if let Err(error) = rustc_log::init_env_logger(env) {\n+        early_error(ErrorOutputType::default(), &error.to_string());\n+    }\n }\n \n #[cfg(all(unix, any(target_env = \"gnu\", target_os = \"macos\")))]"}, {"sha": "1b2cde605556dcd4ee0141333c06cab68fca5a7d", "filename": "compiler/rustc_log/Cargo.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/compiler%2Frustc_log%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/compiler%2Frustc_log%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2FCargo.toml?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -0,0 +1,16 @@\n+[package]\n+name = \"rustc_log\"\n+version = \"0.0.0\"\n+edition = \"2021\"\n+\n+[dependencies]\n+atty = \"0.2\"\n+tracing = \"0.1.28\"\n+tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n+tracing-tree = \"0.2.0\"\n+\n+[dev-dependencies]\n+rustc_span = { path = \"../rustc_span\" }\n+\n+[features]\n+max_level_info = ['tracing/max_level_info']"}, {"sha": "f5e7435d36e36f462a16f81d5c0de5c550592959", "filename": "compiler/rustc_log/src/lib.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -0,0 +1,115 @@\n+//! This crate allows tools to enable rust logging without having to magically\n+//! match rustc's tracing crate version.\n+//!\n+//! For example if someone is working on rustc_ast and wants to write some\n+//! minimal code against it to run in a debugger, with access to the `debug!`\n+//! logs emitted by rustc_ast, that can be done by writing:\n+//!\n+//! ```toml\n+//! [dependencies]\n+//! rustc_ast = { path = \"../rust/compiler/rustc_ast\" }\n+//! rustc_log = { path = \"../rust/compiler/rustc_log\" }\n+//! rustc_span = { path = \"../rust/compiler/rustc_span\" }\n+//! ```\n+//!\n+//! ```\n+//! fn main() {\n+//!     rustc_log::init_rustc_env_logger().unwrap();\n+//!\n+//!     let edition = rustc_span::edition::Edition::Edition2021;\n+//!     rustc_span::create_session_globals_then(edition, || {\n+//!         /* ... */\n+//!     });\n+//! }\n+//! ```\n+//!\n+//! Now `RUSTC_LOG=debug cargo run` will run your minimal main.rs and show\n+//! rustc's debug logging. In a workflow like this, one might also add\n+//! `std::env::set_var(\"RUSTC_LOG\", \"debug\")` to the top of main so that `cargo\n+//! run` by itself is sufficient to get logs.\n+//!\n+//! The reason rustc_log is a tiny separate crate, as opposed to exposing the\n+//! same things in rustc_driver only, is to enable the above workflow. If you\n+//! had to depend on rustc_driver in order to turn on rustc's debug logs, that's\n+//! an enormously bigger dependency tree; every change you make to rustc_ast (or\n+//! whichever piece of the compiler you are interested in) would involve\n+//! rebuilding all the rest of rustc up to rustc_driver in order to run your\n+//! main.rs. Whereas by depending only on rustc_log and the few crates you are\n+//! debugging, you can make changes inside those crates and quickly run main.rs\n+//! to read the debug logs.\n+\n+use std::env::{self, VarError};\n+use std::fmt::{self, Display};\n+use std::io;\n+use tracing_subscriber::filter::{Directive, EnvFilter, LevelFilter};\n+use tracing_subscriber::layer::SubscriberExt;\n+\n+pub fn init_rustc_env_logger() -> Result<(), Error> {\n+    init_env_logger(\"RUSTC_LOG\")\n+}\n+\n+/// In contrast to `init_rustc_env_logger` this allows you to choose an env var\n+/// other than `RUSTC_LOG`.\n+pub fn init_env_logger(env: &str) -> Result<(), Error> {\n+    let filter = match env::var(env) {\n+        Ok(env) => EnvFilter::new(env),\n+        _ => EnvFilter::default().add_directive(Directive::from(LevelFilter::WARN)),\n+    };\n+\n+    let color_logs = match env::var(String::from(env) + \"_COLOR\") {\n+        Ok(value) => match value.as_ref() {\n+            \"always\" => true,\n+            \"never\" => false,\n+            \"auto\" => stderr_isatty(),\n+            _ => return Err(Error::InvalidColorValue(value)),\n+        },\n+        Err(VarError::NotPresent) => stderr_isatty(),\n+        Err(VarError::NotUnicode(_value)) => return Err(Error::NonUnicodeColorValue),\n+    };\n+\n+    let layer = tracing_tree::HierarchicalLayer::default()\n+        .with_writer(io::stderr)\n+        .with_indent_lines(true)\n+        .with_ansi(color_logs)\n+        .with_targets(true)\n+        .with_indent_amount(2);\n+    #[cfg(parallel_compiler)]\n+    let layer = layer.with_thread_ids(true).with_thread_names(true);\n+\n+    let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n+    tracing::subscriber::set_global_default(subscriber).unwrap();\n+\n+    Ok(())\n+}\n+\n+pub fn stdout_isatty() -> bool {\n+    atty::is(atty::Stream::Stdout)\n+}\n+\n+pub fn stderr_isatty() -> bool {\n+    atty::is(atty::Stream::Stderr)\n+}\n+\n+#[derive(Debug)]\n+pub enum Error {\n+    InvalidColorValue(String),\n+    NonUnicodeColorValue,\n+}\n+\n+impl std::error::Error for Error {}\n+\n+impl Display for Error {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Error::InvalidColorValue(value) => write!(\n+                formatter,\n+                \"invalid log color value '{}': expected one of always, never, or auto\",\n+                value,\n+            ),\n+            Error::NonUnicodeColorValue => write!(\n+                formatter,\n+                \"non-Unicode log color value: expected one of always, never, or auto\",\n+            ),\n+        }\n+    }\n+}"}, {"sha": "8a2a64f8dc97f44e361abfde4d2e00a0c7a2ac44", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -570,11 +570,30 @@ impl Display for Arguments<'_> {\n /// There are a number of helper methods on the [`Formatter`] struct to help you with manual\n /// implementations, such as [`debug_struct`].\n ///\n+/// [`debug_struct`]: Formatter::debug_struct\n+///\n+/// Types that do not wish to use the standard suite of debug representations\n+/// provided by the `Formatter` trait (`debug_struct`, `debug_tuple`,\n+/// `debut_list`, `debug_set`, `debug_map`) can do something totally custom by\n+/// manually writing an arbitrary representation to the `Formatter`.\n+///\n+/// ```\n+/// # use std::fmt;\n+/// # struct Point {\n+/// #     x: i32,\n+/// #     y: i32,\n+/// # }\n+/// #\n+/// impl fmt::Debug for Point {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+///         write!(f, \"Point [{} {}]\", self.x, self.y)\n+///     }\n+/// }\n+/// ```\n+///\n /// `Debug` implementations using either `derive` or the debug builder API\n /// on [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\n ///\n-/// [`debug_struct`]: Formatter::debug_struct\n-///\n /// Pretty-printing with `#?`:\n ///\n /// ```"}, {"sha": "5ad570427978e5244b0d8d9f4af8c9ae3488d77b", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -268,7 +268,7 @@ impl Command {\n         } else {\n             None\n         };\n-        let program = resolve_exe(&self.program, child_paths)?;\n+        let program = resolve_exe(&self.program, || env::var_os(\"PATH\"), child_paths)?;\n         let mut cmd_str =\n             make_command_line(program.as_os_str(), &self.args, self.force_quotes_enabled)?;\n         cmd_str.push(0); // add null terminator\n@@ -362,7 +362,11 @@ impl fmt::Debug for Command {\n // Therefore this functions first assumes `.exe` was intended.\n // It falls back to the plain file name if a full path is given and the extension is omitted\n // or if only a file name is given and it already contains an extension.\n-fn resolve_exe<'a>(exe_path: &'a OsStr, child_paths: Option<&OsStr>) -> io::Result<PathBuf> {\n+fn resolve_exe<'a>(\n+    exe_path: &'a OsStr,\n+    parent_paths: impl FnOnce() -> Option<OsString>,\n+    child_paths: Option<&OsStr>,\n+) -> io::Result<PathBuf> {\n     // Early return if there is no filename.\n     if exe_path.is_empty() || path::has_trailing_slash(exe_path) {\n         return Err(io::Error::new_const(\n@@ -406,7 +410,7 @@ fn resolve_exe<'a>(exe_path: &'a OsStr, child_paths: Option<&OsStr>) -> io::Resu\n         let has_extension = exe_path.bytes().contains(&b'.');\n \n         // Search the directories given by `search_paths`.\n-        let result = search_paths(child_paths, |mut path| {\n+        let result = search_paths(parent_paths, child_paths, |mut path| {\n             path.push(&exe_path);\n             if !has_extension {\n                 path.set_extension(EXE_EXTENSION);\n@@ -423,15 +427,20 @@ fn resolve_exe<'a>(exe_path: &'a OsStr, child_paths: Option<&OsStr>) -> io::Resu\n \n // Calls `f` for every path that should be used to find an executable.\n // Returns once `f` returns the path to an executable or all paths have been searched.\n-fn search_paths<F>(child_paths: Option<&OsStr>, mut f: F) -> Option<PathBuf>\n+fn search_paths<Paths, Exists>(\n+    parent_paths: Paths,\n+    child_paths: Option<&OsStr>,\n+    mut exists: Exists,\n+) -> Option<PathBuf>\n where\n-    F: FnMut(PathBuf) -> Option<PathBuf>,\n+    Paths: FnOnce() -> Option<OsString>,\n+    Exists: FnMut(PathBuf) -> Option<PathBuf>,\n {\n     // 1. Child paths\n     // This is for consistency with Rust's historic behaviour.\n     if let Some(paths) = child_paths {\n         for path in env::split_paths(paths).filter(|p| !p.as_os_str().is_empty()) {\n-            if let Some(path) = f(path) {\n+            if let Some(path) = exists(path) {\n                 return Some(path);\n             }\n         }\n@@ -440,7 +449,7 @@ where\n     // 2. Application path\n     if let Ok(mut app_path) = env::current_exe() {\n         app_path.pop();\n-        if let Some(path) = f(app_path) {\n+        if let Some(path) = exists(app_path) {\n             return Some(path);\n         }\n     }\n@@ -450,25 +459,25 @@ where\n     unsafe {\n         if let Ok(Some(path)) = super::fill_utf16_buf(\n             |buf, size| c::GetSystemDirectoryW(buf, size),\n-            |buf| f(PathBuf::from(OsString::from_wide(buf))),\n+            |buf| exists(PathBuf::from(OsString::from_wide(buf))),\n         ) {\n             return Some(path);\n         }\n         #[cfg(not(target_vendor = \"uwp\"))]\n         {\n             if let Ok(Some(path)) = super::fill_utf16_buf(\n                 |buf, size| c::GetWindowsDirectoryW(buf, size),\n-                |buf| f(PathBuf::from(OsString::from_wide(buf))),\n+                |buf| exists(PathBuf::from(OsString::from_wide(buf))),\n             ) {\n                 return Some(path);\n             }\n         }\n     }\n \n     // 5. Parent paths\n-    if let Some(parent_paths) = env::var_os(\"PATH\") {\n+    if let Some(parent_paths) = parent_paths() {\n         for path in env::split_paths(&parent_paths).filter(|p| !p.as_os_str().is_empty()) {\n-            if let Some(path) = f(path) {\n+            if let Some(path) = exists(path) {\n                 return Some(path);\n             }\n         }"}, {"sha": "f1221767af30e56d43581d5d48183b27d057e7d3", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -136,51 +136,46 @@ fn windows_exe_resolver() {\n     use super::resolve_exe;\n     use crate::io;\n \n+    let env_paths = || env::var_os(\"PATH\");\n+\n     // Test a full path, with and without the `exe` extension.\n     let mut current_exe = env::current_exe().unwrap();\n-    assert!(resolve_exe(current_exe.as_ref(), None).is_ok());\n+    assert!(resolve_exe(current_exe.as_ref(), env_paths, None).is_ok());\n     current_exe.set_extension(\"\");\n-    assert!(resolve_exe(current_exe.as_ref(), None).is_ok());\n+    assert!(resolve_exe(current_exe.as_ref(), env_paths, None).is_ok());\n \n     // Test lone file names.\n-    assert!(resolve_exe(OsStr::new(\"cmd\"), None).is_ok());\n-    assert!(resolve_exe(OsStr::new(\"cmd.exe\"), None).is_ok());\n-    assert!(resolve_exe(OsStr::new(\"cmd.EXE\"), None).is_ok());\n-    assert!(resolve_exe(OsStr::new(\"fc\"), None).is_ok());\n+    assert!(resolve_exe(OsStr::new(\"cmd\"), env_paths, None).is_ok());\n+    assert!(resolve_exe(OsStr::new(\"cmd.exe\"), env_paths, None).is_ok());\n+    assert!(resolve_exe(OsStr::new(\"cmd.EXE\"), env_paths, None).is_ok());\n+    assert!(resolve_exe(OsStr::new(\"fc\"), env_paths, None).is_ok());\n \n     // Invalid file names should return InvalidInput.\n-    assert_eq!(resolve_exe(OsStr::new(\"\"), None).unwrap_err().kind(), io::ErrorKind::InvalidInput);\n     assert_eq!(\n-        resolve_exe(OsStr::new(\"\\0\"), None).unwrap_err().kind(),\n+        resolve_exe(OsStr::new(\"\"), env_paths, None).unwrap_err().kind(),\n+        io::ErrorKind::InvalidInput\n+    );\n+    assert_eq!(\n+        resolve_exe(OsStr::new(\"\\0\"), env_paths, None).unwrap_err().kind(),\n         io::ErrorKind::InvalidInput\n     );\n     // Trailing slash, therefore there's no file name component.\n     assert_eq!(\n-        resolve_exe(OsStr::new(r\"C:\\Path\\to\\\"), None).unwrap_err().kind(),\n+        resolve_exe(OsStr::new(r\"C:\\Path\\to\\\"), env_paths, None).unwrap_err().kind(),\n         io::ErrorKind::InvalidInput\n     );\n \n-    /* FIXME: fix and re-enable these tests before making changes to the resolver.\n-\n     /*\n     Some of the following tests may need to be changed if you are deliberately\n     changing the behaviour of `resolve_exe`.\n     */\n \n-    let paths = env::var_os(\"PATH\").unwrap();\n-    env::set_var(\"PATH\", \"\");\n-\n-    assert_eq!(resolve_exe(OsStr::new(\"rustc\"), None).unwrap_err().kind(), io::ErrorKind::NotFound);\n-\n-    let child_paths = Some(paths.as_os_str());\n-    assert!(resolve_exe(OsStr::new(\"rustc\"), child_paths).is_ok());\n+    let empty_paths = || None;\n \n     // The resolver looks in system directories even when `PATH` is empty.\n-    assert!(resolve_exe(OsStr::new(\"cmd.exe\"), None).is_ok());\n+    assert!(resolve_exe(OsStr::new(\"cmd.exe\"), empty_paths, None).is_ok());\n \n     // The application's directory is also searched.\n     let current_exe = env::current_exe().unwrap();\n-    assert!(resolve_exe(current_exe.file_name().unwrap().as_ref(), None).is_ok());\n-\n-    */\n+    assert!(resolve_exe(current_exe.file_name().unwrap().as_ref(), empty_paths, None).is_ok());\n }"}, {"sha": "5235a6b8180533ea4269aa35ef423fdeb65637eb", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -974,6 +974,7 @@ def bootstrap_binary(self):\n \n     def build_bootstrap(self):\n         \"\"\"Build bootstrap\"\"\"\n+        print(\"Building rustbuild\")\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n         if self.clean and os.path.exists(build_dir):\n             shutil.rmtree(build_dir)\n@@ -1133,7 +1134,7 @@ def update_submodules(self):\n             recorded_submodules[data[3]] = data[2]\n         for module in filtered_submodules:\n             self.update_submodule(module[0], module[1], recorded_submodules)\n-        print(\"Submodules updated in %.2f seconds\" % (time() - start_time))\n+        print(\"  Submodules updated in %.2f seconds\" % (time() - start_time))\n \n     def set_dist_environment(self, url):\n         \"\"\"Set download URL for normal environment\"\"\""}, {"sha": "9180c5f03af6810974234c15d830d8d9881fe148", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -401,26 +401,19 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                     \"\\n\n Arguments:\n     This subcommand accepts a number of paths to directories to the crates\n-    and/or artifacts to compile. For example:\n-\n-        ./x.py build library/core\n-        ./x.py build library/core library/proc_macro\n-        ./x.py build library/std --stage 1\n-\n-    If no arguments are passed then the complete artifacts for that stage are\n-    also compiled.\n+    and/or artifacts to compile. For example, for a quick build of a usable\n+    compiler:\n \n-        ./x.py build\n-        ./x.py build --stage 1\n+        ./x.py build --stage 1 library/std\n \n-    For a quick build of a usable compiler, you can pass:\n+    This will build a compiler and standard library from the local source code.\n+    Once this is done, build/$ARCH/stage1 contains a usable compiler.\n \n-        ./x.py build --stage 1 library/test\n+    If no arguments are passed then the default artifacts for that stage are\n+    compiled. For example:\n \n-    This will first build everything once (like `--stage 0` without further\n-    arguments would), and then use the compiler built in stage 0 to build\n-    library/test and its dependencies.\n-    Once this is done, build/$ARCH/stage1 contains a usable compiler.\",\n+        ./x.py build --stage 0\n+        ./x.py build \",\n                 );\n             }\n             \"check\" | \"c\" => {\n@@ -430,14 +423,9 @@ Arguments:\n     This subcommand accepts a number of paths to directories to the crates\n     and/or artifacts to compile. For example:\n \n-        ./x.py check library/core\n-        ./x.py check library/core library/proc_macro\n+        ./x.py check library/std\n \n-    If no arguments are passed then the complete artifacts are compiled: std, test, and rustc. Note\n-    also that since we use `cargo check`, by default this will automatically enable incremental\n-    compilation, so there's no need to pass it separately, though it won't hurt. We also completely\n-    ignore the stage passed, as there's no way to compile in non-stage 0 without actually building\n-    the compiler.\",\n+    If no arguments are passed then many artifacts are checked.\",\n                 );\n             }\n             \"clippy\" => {"}, {"sha": "f0f61bb94c8e82395d4b94be403c86324b84983c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -889,20 +889,25 @@ impl AttributesExt for [ast::Attribute] {\n }\n \n crate trait NestedAttributesExt {\n-    /// Returns `true` if the attribute list contains a specific `Word`\n-    fn has_word(self, word: Symbol) -> bool;\n+    /// Returns `true` if the attribute list contains a specific `word`\n+    fn has_word(self, word: Symbol) -> bool\n+    where\n+        Self: std::marker::Sized,\n+    {\n+        <Self as NestedAttributesExt>::get_word_attr(self, word).is_some()\n+    }\n+\n+    /// Returns `Some(attr)` if the attribute list contains 'attr'\n+    /// corresponding to a specific `word`\n     fn get_word_attr(self, word: Symbol) -> Option<ast::NestedMetaItem>;\n }\n \n-impl<I: Iterator<Item = ast::NestedMetaItem> + IntoIterator<Item = ast::NestedMetaItem>>\n-    NestedAttributesExt for I\n+impl<I> NestedAttributesExt for I\n+where\n+    I: IntoIterator<Item = ast::NestedMetaItem>,\n {\n-    fn has_word(self, word: Symbol) -> bool {\n-        self.into_iter().any(|attr| attr.is_word() && attr.has_name(word))\n-    }\n-\n-    fn get_word_attr(mut self, word: Symbol) -> Option<ast::NestedMetaItem> {\n-        self.find(|attr| attr.is_word() && attr.has_name(word))\n+    fn get_word_attr(self, word: Symbol) -> Option<ast::NestedMetaItem> {\n+        self.into_iter().find(|attr| attr.is_word() && attr.has_name(word))\n     }\n }\n "}, {"sha": "d82c65398b83584f8340d37226f8782a535d9635", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 58, "deletions": 53, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/181e91567c9f347e055b33b1d7e9894f769aafe3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/181e91567c9f347e055b33b1d7e9894f769aafe3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -108,7 +108,7 @@ html {\n /* General structure and fonts */\n \n body {\n-\tfont: 16px/1.4 \"Source Serif 4\", NanumBarunGothic, serif;\n+\tfont: 1rem/1.4 \"Source Serif 4\", NanumBarunGothic, serif;\n \tmargin: 0;\n \tposition: relative;\n \n@@ -118,13 +118,13 @@ body {\n }\n \n h1 {\n-\tfont-size: 1.5em;\n+\tfont-size: 1.5rem;\n }\n h2 {\n-\tfont-size: 1.4em;\n+\tfont-size: 1.4rem;\n }\n h3 {\n-\tfont-size: 1.3em;\n+\tfont-size: 1.3rem;\n }\n h1, h2, h3, h4, h5, h6 {\n \tfont-weight: 500;\n@@ -160,10 +160,10 @@ h2,\n \tborder-bottom: 1px solid;\n }\n h3.code-header {\n-\tfont-size: 1.1em;\n+\tfont-size: 1.1rem;\n }\n h4.code-header {\n-\tfont-size: 1em;\n+\tfont-size: 1rem;\n }\n h3.code-header, h4.code-header {\n \tfont-weight: 600;\n@@ -206,7 +206,7 @@ div.impl-items > div:not(.docblock):not(.item-info),\n }\n \n .content ul.crate a.crate {\n-\tfont-size: 16px/1.6;\n+\tfont-size: 1rem/1.6;\n }\n \n ol, ul {\n@@ -317,7 +317,7 @@ li {\n \n nav.sub {\n \tposition: relative;\n-\tfont-size: 16px;\n+\tfont-size: 1rem;\n \ttext-transform: uppercase;\n }\n \n@@ -423,7 +423,7 @@ nav.sub {\n \n .sidebar .location {\n \tborder: 1px solid;\n-\tfont-size: 17px;\n+\tfont-size: 1.0625rem;\n \tmargin: 30px 10px 20px 10px;\n \ttext-align: center;\n \tword-wrap: break-word;\n@@ -432,7 +432,7 @@ nav.sub {\n }\n \n .sidebar .version {\n-\tfont-size: 15px;\n+\tfont-size: 0.9375rem;\n \ttext-align: center;\n \tborder-bottom: 1px solid;\n \toverflow-wrap: break-word;\n@@ -470,7 +470,7 @@ nav.sub {\n \toverflow: hidden;\n \tline-height: 15px;\n \tpadding: 7px 5px;\n-\tfont-size: 14px;\n+\tfont-size: 0.875rem;\n \tfont-weight: 300;\n \ttransition: border 500ms ease-out;\n }\n@@ -479,7 +479,7 @@ nav.sub {\n \tborder-top: 1px solid;\n \tborder-bottom: 1px solid;\n \ttext-align: center;\n-\tfont-size: 17px;\n+\tfont-size: 1.0625rem;\n \tmargin-bottom: 5px;\n \tfont-weight: inherit;\n \tpadding: 0;\n@@ -579,18 +579,18 @@ nav.sub {\n \twhite-space: pre-wrap;\n }\n \n-.top-doc .docblock h2 { font-size: 1.3em; }\n-.top-doc .docblock h3 { font-size: 1.15em; }\n+.top-doc .docblock h2 { font-size: 1.3rem; }\n+.top-doc .docblock h3 { font-size: 1.15rem; }\n .top-doc .docblock h4,\n .top-doc .docblock h5 {\n-\tfont-size: 1.1em;\n+\tfont-size: 1.1rem;\n }\n .top-doc .docblock h6 {\n-\tfont-size: 1em;\n+\tfont-size: 1rem;\n }\n \n-.docblock h5 { font-size: 1em; }\n-.docblock h6 { font-size: 0.95em; }\n+.docblock h5 { font-size: 1rem; }\n+.docblock h6 { font-size: 0.95rem; }\n \n .docblock {\n \tmargin-left: 24px;\n@@ -605,7 +605,7 @@ nav.sub {\n .content .out-of-band {\n \tflex-grow: 0;\n \ttext-align: right;\n-\tfont-size: 23px;\n+\tfont-size: 1.4375rem;\n \tmargin: 0px;\n \tpadding: 0 0 0 12px;\n \tfont-weight: normal;\n@@ -646,7 +646,7 @@ nav.sub {\n .content td { vertical-align: top; }\n .content td:first-child { padding-right: 20px; }\n .content td p:first-child { margin-top: 0; }\n-.content td h1, .content td h2 { margin-left: 0; font-size: 1.1em; }\n+.content td h1, .content td h2 { margin-left: 0; font-size: 1.1rem; }\n .content tr:first-child td { border-top: 0; }\n \n .docblock table {\n@@ -687,15 +687,15 @@ nav.sub {\n .content .multi-column li { width: 100%; display: inline-block; }\n \n .content > .methods > .method {\n-\tfont-size: 1em;\n+\tfont-size: 1rem;\n \tposition: relative;\n }\n /* Shift \"where ...\" part of method or fn definition down a line */\n .content .method .where,\n .content .fn .where,\n .content .where.fmt-newline {\n \tdisplay: block;\n-\tfont-size: 0.8em;\n+\tfont-size: 0.8rem;\n }\n \n .content .methods > div:not(.notable-traits):not(.method) {\n@@ -718,7 +718,7 @@ nav.sub {\n }\n \n .content .item-info code {\n-\tfont-size: 90%;\n+\tfont-size: 0.81rem;\n }\n \n .content .item-info {\n@@ -732,7 +732,7 @@ nav.sub {\n \n .content .item-info::before {\n \tcontent: '\u2b11';\n-\tfont-size: 25px;\n+\tfont-size: 1.5625rem;\n \tposition: absolute;\n \ttop: -6px;\n \tleft: -19px;\n@@ -835,7 +835,7 @@ h2.small-section-header > .anchor {\n \tposition: absolute;\n \ttop: 0;\n \tright: 0;\n-\tfont-size: 17px;\n+\tfont-size: 1.0625rem;\n \tfont-weight: normal;\n }\n \n@@ -905,7 +905,7 @@ h2.small-section-header > .anchor {\n \tborder-radius: 1px;\n \tmargin-top: 5px;\n \tpadding: 10px 16px;\n-\tfont-size: 17px;\n+\tfont-size: 1.0625rem;\n \ttransition: border-color 300ms ease;\n \ttransition: border-radius 300ms ease-in-out;\n \ttransition: box-shadow 300ms ease-in-out;\n@@ -1000,7 +1000,7 @@ body.blur > :not(#help) {\n #help span.top, #help span.bottom {\n \ttext-align: center;\n \tdisplay: block;\n-\tfont-size: 18px;\n+\tfont-size: 1.125rem;\n \n }\n #help span.top {\n@@ -1030,15 +1030,15 @@ body.blur > :not(#help) {\n .stab {\n \tpadding: 3px;\n \tmargin-bottom: 5px;\n-\tfont-size: 90%;\n+\tfont-size: 0.9rem;\n \tfont-weight: normal;\n }\n .stab p {\n \tdisplay: inline;\n }\n \n .stab .emoji {\n-\tfont-size: 1.2em;\n+\tfont-size: 1.2rem;\n }\n \n /* Black one-pixel outline around emoji shapes */\n@@ -1054,7 +1054,7 @@ body.blur > :not(#help) {\n .import-item .stab {\n \tborder-radius: 3px;\n \tdisplay: inline-block;\n-\tfont-size: 80%;\n+\tfont-size: 0.8rem;\n \tline-height: 1.2;\n \tmargin-bottom: 0;\n \tmargin-left: .3em;\n@@ -1080,7 +1080,7 @@ body.blur > :not(#help) {\n \n .impl-items .srclink, .impl .srclink, .methods .srclink {\n \t/* Override header settings otherwise it's too bold */\n-\tfont-size: 17px;\n+\tfont-size: 1.0625rem;\n \tfont-weight: normal;\n }\n \n@@ -1089,7 +1089,7 @@ body.blur > :not(#help) {\n }\n \n .has-srclink {\n-\tfont-size: 16px;\n+\tfont-size: 1rem;\n \tmargin-bottom: 12px;\n \t/* Push the src link out to the right edge consistently */\n \tjustify-content: space-between;\n@@ -1120,7 +1120,7 @@ a.test-arrow {\n \tposition: absolute;\n \tpadding: 5px 10px 5px 10px;\n \tborder-radius: 5px;\n-\tfont-size: 130%;\n+\tfont-size: 1.3rem;\n \ttop: 5px;\n \tright: 5px;\n \tz-index: 1;\n@@ -1155,19 +1155,19 @@ a.test-arrow:hover{\n \n .out-of-band > span.since {\n \tposition: initial;\n-\tfont-size: 20px;\n+\tfont-size: 1.25rem;\n \tmargin-right: 5px;\n }\n \n h3.variant {\n \tfont-weight: 600;\n-\tfont-size: 1.1em;\n+\tfont-size: 1.1rem;\n \tmargin-bottom: 10px;\n \tborder-bottom: none;\n }\n \n .sub-variant h4 {\n-\tfont-size: 1em;\n+\tfont-size: 1rem;\n \tfont-weight: 400;\n \tborder-bottom: none;\n \tmargin-top: 0;\n@@ -1227,7 +1227,7 @@ h3.variant {\n \tpadding: 5px 3px 3px 3px;\n \tborder-radius: 6px;\n \tmargin-left: 5px;\n-\tfont-size: 16px;\n+\tfont-size: 1rem;\n }\n \n .tooltip.ignore::after {\n@@ -1260,7 +1260,7 @@ h3.variant {\n \n .tooltip.compile_fail, .tooltip.should_panic, .tooltip.ignore {\n \tfont-weight: bold;\n-\tfont-size: 20px;\n+\tfont-size: 1.25rem;\n }\n \n .notable-traits-tooltip {\n@@ -1279,7 +1279,7 @@ h3.variant {\n \tborder-radius: 6px;\n \tmargin-left: 5px;\n \tz-index: 10;\n-\tfont-size: 16px;\n+\tfont-size: 1rem;\n \tcursor: default;\n \tposition: absolute;\n \tborder: 1px solid;\n@@ -1299,14 +1299,14 @@ h3.variant {\n .notable-traits .notable {\n \tmargin: 0;\n \tmargin-bottom: 13px;\n-\tfont-size: 19px;\n+\tfont-size: 1.1875rem;\n \tfont-weight: 600;\n }\n \n .notable-traits .docblock code.content{\n \tmargin: 0;\n \tpadding: 0;\n-\tfont-size: 20px;\n+\tfont-size: 1.25rem;\n }\n \n /* Example code has the \"Run\" button that needs to be positioned relative to the pre */\n@@ -1344,7 +1344,7 @@ pre.rust {\n \tfloat: left;\n \twidth: 33.3%;\n \ttext-align: center;\n-\tfont-size: 18px;\n+\tfont-size: 1.125rem;\n \tcursor: pointer;\n \tborder: 0;\n \tborder-top: 2px solid;\n@@ -1357,7 +1357,7 @@ pre.rust {\n \n #titles > button > div.count {\n \tdisplay: inline-block;\n-\tfont-size: 16px;\n+\tfont-size: 1rem;\n }\n \n .notable-traits {\n@@ -1384,7 +1384,7 @@ pre.rust {\n \tleft: 0;\n \tcursor: pointer;\n \tfont-weight: bold;\n-\tfont-size: 1.2em;\n+\tfont-size: 1.2rem;\n \tborder-bottom: 1px solid;\n \tdisplay: flex;\n \theight: 40px;\n@@ -1398,7 +1398,7 @@ pre.rust {\n \toverflow: auto;\n }\n #source-sidebar > .title {\n-\tfont-size: 1.5em;\n+\tfont-size: 1.5rem;\n \ttext-align: center;\n \tborder-bottom: 1px solid;\n \tmargin-bottom: 6px;\n@@ -1426,6 +1426,9 @@ pre.rust {\n \n #theme-picker, #settings-menu, #help-button, #copy-path {\n \tpadding: 4px;\n+\t/* Rare exception to specifying font sizes in rem. Since these are acting\n+\t   as icons, it's okay to specify their sizes in pixels. */\n+\tfont-size: 16px;\n \twidth: 27px;\n \theight: 29px;\n \tborder: 1px solid;\n@@ -1437,7 +1440,9 @@ pre.rust {\n \tright: 30px;\n \tfont-family: \"Fira Sans\", Arial, sans-serif;\n \ttext-align: center;\n-\tfont-size: 17px;\n+\t/* Rare exception to specifying font sizes in rem. Since this is acting\n+\t   as an icon, it's okay to specify their sizes in pixels. */\n+\tfont-size: 16px;\n \tpadding-top: 2px;\n }\n \n@@ -1499,7 +1504,7 @@ kbd {\n \tborder: 0;\n \tborder-collapse: collapse;\n \tborder-spacing: 0;\n-\tfont-size: 16px;\n+\tfont-size: 1rem;\n }\n \n .table-display tr td:first-child {\n@@ -1511,11 +1516,11 @@ kbd {\n }\n .table-display .out-of-band {\n \tposition: relative;\n-\tfont-size: 19px;\n+\tfont-size: 1.1875rem;\n \tdisplay: block;\n }\n #implementors-list > .impl-items .table-display .out-of-band {\n-\tfont-size: 17px;\n+\tfont-size: 1.0625rem;\n }\n \n .table-display td:hover .anchor {\n@@ -1557,7 +1562,7 @@ div.name.expand + .children {\n div.name::before {\n \tcontent: \"\\25B6\";\n \tpadding-left: 4px;\n-\tfont-size: 0.7em;\n+\tfont-size: 0.7rem;\n \tposition: absolute;\n \tleft: -16px;\n \ttop: 4px;\n@@ -1624,7 +1629,7 @@ details.rustdoc-toggle.top-doc > summary::before,\n details.rustdoc-toggle.non-exhaustive > summary,\n details.rustdoc-toggle.non-exhaustive > summary::before {\n \tfont-family: 'Fira Sans';\n-\tfont-size: 16px;\n+\tfont-size: 1rem;\n }\n \n details.non-exhaustive {\n@@ -1768,7 +1773,7 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\tmin-height: 39px;\n \t\tbackground: inherit;\n \t\ttext-align: left;\n-\t\tfont-size: 24px;\n+\t\tfont-size: 1.5rem;\n \t}\n \n \t.sidebar .location:empty {\n@@ -1909,7 +1914,7 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t}\n \n \t.show-it > .block.items > ul > li > a {\n-\t\tfont-size: 21px;\n+\t\tfont-size: 1.3125rem;\n \t}\n \n \t/* Because of ios, we need to actually have a full height sidebar title so the"}, {"sha": "824816c973a3fd0596ae3a9a38c6fb6299b913b8", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=181e91567c9f347e055b33b1d7e9894f769aafe3", "patch": "@@ -1 +1 @@\n-Subproject commit d307e6c1970d1edb63d6a08d332e0acdb72c5cc5\n+Subproject commit 824816c973a3fd0596ae3a9a38c6fb6299b913b8"}]}