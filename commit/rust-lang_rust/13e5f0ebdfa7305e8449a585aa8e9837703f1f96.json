{"sha": "13e5f0ebdfa7305e8449a585aa8e9837703f1f96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZTVmMGViZGZhNzMwNWU4NDQ5YTU4NWFhOGU5ODM3NzAzZjFmOTY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-20T01:03:02Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-25T17:17:33Z"}, "message": "Remove some essentially dead code in method handling.", "tree": {"sha": "9ca741b5c286f3eb8d0e8f6aa072d7ed5be63086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca741b5c286f3eb8d0e8f6aa072d7ed5be63086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e5f0ebdfa7305e8449a585aa8e9837703f1f96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e5f0ebdfa7305e8449a585aa8e9837703f1f96", "html_url": "https://github.com/rust-lang/rust/commit/13e5f0ebdfa7305e8449a585aa8e9837703f1f96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e5f0ebdfa7305e8449a585aa8e9837703f1f96/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e26808141592354a4c9ab28a7e2190e9acf8942", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e26808141592354a4c9ab28a7e2190e9acf8942", "html_url": "https://github.com/rust-lang/rust/commit/5e26808141592354a4c9ab28a7e2190e9acf8942"}], "stats": {"total": 39, "additions": 8, "deletions": 31}, "files": [{"sha": "526e4859415b64fbd738255458800525ad6ab41a", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e5f0ebdfa7305e8449a585aa8e9837703f1f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e5f0ebdfa7305e8449a585aa8e9837703f1f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=13e5f0ebdfa7305e8449a585aa8e9837703f1f96", "patch": "@@ -2110,7 +2110,7 @@ pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n       }\n       ast::item_impl(ref generics, _, _, ref ms) => {\n         meth::trans_impl(ccx, /*bad*/copy *path, item.ident, *ms,\n-                         generics, None, item.id);\n+                         generics, item.id);\n       }\n       ast::item_mod(ref m) => {\n         trans_mod(ccx, m);"}, {"sha": "92a588700bb7649f501d5510a96607d54c6206a2", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/13e5f0ebdfa7305e8449a585aa8e9837703f1f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e5f0ebdfa7305e8449a585aa8e9837703f1f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=13e5f0ebdfa7305e8449a585aa8e9837703f1f96", "patch": "@@ -49,13 +49,12 @@ pub fn trans_impl(ccx: @mut CrateContext,\n                   name: ast::ident,\n                   methods: &[@ast::method],\n                   generics: &ast::Generics,\n-                  self_ty: Option<ty::t>,\n                   id: ast::node_id) {\n     let _icx = push_ctxt(\"impl::trans_impl\");\n     let tcx = ccx.tcx;\n \n-    debug!(\"trans_impl(path=%s, name=%s, self_ty=%s, id=%?)\",\n-           path.repr(tcx), name.repr(tcx), self_ty.repr(tcx), id);\n+    debug!(\"trans_impl(path=%s, name=%s, id=%?)\",\n+           path.repr(tcx), name.repr(tcx), id);\n \n     if !generics.ty_params.is_empty() { return; }\n     let sub_path = vec::append_one(path, path_name(name));\n@@ -65,24 +64,10 @@ pub fn trans_impl(ccx: @mut CrateContext,\n             let path = vec::append_one(/*bad*/copy sub_path,\n                                        path_name(method.ident));\n \n-            let param_substs_opt;\n-            match self_ty {\n-                None => param_substs_opt = None,\n-                Some(self_ty) => {\n-                    param_substs_opt = Some(@param_substs {\n-                        tys: ~[],\n-                        vtables: None,\n-                        type_param_defs: @~[],\n-                        self_ty: Some(self_ty)\n-                    });\n-                }\n-            }\n-\n             trans_method(ccx,\n                          path,\n                          *method,\n-                         param_substs_opt,\n-                         self_ty,\n+                         None,\n                          llfn,\n                          ast_util::local_def(id));\n         }\n@@ -98,17 +83,13 @@ Translates a (possibly monomorphized) method body.\n - `method`: the AST node for the method\n - `param_substs`: if this is a generic method, the current values for\n   type parameters and so forth, else none\n-- `base_self_ty`: optionally, the explicit self type for this method. This\n-  will be none if this is not a default method and must always be present\n-  if this is a default method.\n - `llfn`: the LLVM ValueRef for the method\n - `impl_id`: the node ID of the impl this method is inside\n */\n pub fn trans_method(ccx: @mut CrateContext,\n                     path: path,\n                     method: &ast::method,\n                     param_substs: Option<@param_substs>,\n-                    base_self_ty: Option<ty::t>,\n                     llfn: ValueRef,\n                     impl_id: ast::def_id) {\n     // figure out how self is being passed\n@@ -119,18 +100,14 @@ pub fn trans_method(ccx: @mut CrateContext,\n       _ => {\n         // determine the (monomorphized) type that `self` maps to for\n         // this method\n-        let self_ty = match base_self_ty {\n-            None => ty::node_id_to_type(ccx.tcx, method.self_id),\n-            Some(provided_self_ty) => provided_self_ty,\n-        };\n+        let self_ty = ty::node_id_to_type(ccx.tcx, method.self_id);\n         let self_ty = match param_substs {\n             None => self_ty,\n             Some(@param_substs {tys: ref tys, _}) => {\n                 ty::subst_tps(ccx.tcx, *tys, None, self_ty)\n             }\n         };\n-        debug!(\"calling trans_fn with base_self_ty %s, self_ty %s\",\n-               base_self_ty.repr(ccx.tcx),\n+        debug!(\"calling trans_fn with self_ty %s\",\n                self_ty.repr(ccx.tcx));\n         match method.explicit_self.node {\n           ast::sty_value => {"}, {"sha": "1ffe26e3affed09e9d2359122b54fe450a231093", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13e5f0ebdfa7305e8449a585aa8e9837703f1f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e5f0ebdfa7305e8449a585aa8e9837703f1f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=13e5f0ebdfa7305e8449a585aa8e9837703f1f96", "patch": "@@ -233,14 +233,14 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n             Some(override_impl_did) => impl_did = override_impl_did\n         }\n \n-        meth::trans_method(ccx, pt, mth, psubsts, None, d, impl_did);\n+        meth::trans_method(ccx, pt, mth, psubsts, d, impl_did);\n         d\n       }\n       ast_map::node_trait_method(@ast::provided(mth), _, pt) => {\n         let d = mk_lldecl();\n         set_inline_hint_if_appr(/*bad*/copy mth.attrs, d);\n         debug!(\"monomorphic_fn impl_did_opt is %?\", impl_did_opt);\n-        meth::trans_method(ccx, /*bad*/copy *pt, mth, psubsts, None, d,\n+        meth::trans_method(ccx, /*bad*/copy *pt, mth, psubsts, d,\n                            impl_did_opt.get());\n         d\n       }"}]}