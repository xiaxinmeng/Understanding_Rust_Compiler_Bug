{"sha": "98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YmQ4ZmQ4OGMzNzUwY2ZjMzNiNmFlNTZhMGZmMTA3ODk0MGJkYzY=", "commit": {"author": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2019-04-26T20:52:56Z"}, "committer": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2019-09-03T20:48:18Z"}, "message": "Added ability to crosscompile doctests", "tree": {"sha": "55fa3fdb81bec0119bf1a593d07a1eb28c5d1f7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55fa3fdb81bec0119bf1a593d07a1eb28c5d1f7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6", "html_url": "https://github.com/rust-lang/rust/commit/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6/comments", "author": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9de4ef89e0e53099a084001b26ec3207c5f8391", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9de4ef89e0e53099a084001b26ec3207c5f8391", "html_url": "https://github.com/rust-lang/rust/commit/b9de4ef89e0e53099a084001b26ec3207c5f8391"}], "stats": {"total": 142, "additions": 109, "deletions": 33}, "files": [{"sha": "6d1258fe3a39057e508bbaa06a76d1632f862de2", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6", "patch": "@@ -77,6 +77,10 @@ pub struct Options {\n     /// Optional path to persist the doctest executables to, defaults to a\n     /// temporary directory if not set.\n     pub persist_doctests: Option<PathBuf>,\n+    /// Runtool to run doctests with\n+    pub runtool: Option<String>,\n+    /// Arguments to pass to the runtool\n+    pub runtool_args: Vec<String>,\n \n     // Options that affect the documentation process\n \n@@ -140,6 +144,8 @@ impl fmt::Debug for Options {\n             .field(\"show_coverage\", &self.show_coverage)\n             .field(\"crate_version\", &self.crate_version)\n             .field(\"render_options\", &self.render_options)\n+            .field(\"runtool\", &self.runtool)\n+            .field(\"runtool_args\", &self.runtool_args)\n             .finish()\n     }\n }\n@@ -466,6 +472,8 @@ impl Options {\n         let codegen_options_strs = matches.opt_strs(\"C\");\n         let lib_strs = matches.opt_strs(\"L\");\n         let extern_strs = matches.opt_strs(\"extern\");\n+        let runtool = matches.opt_str(\"runtool\");\n+        let runtool_args = matches.opt_strs(\"runtool-arg\");\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -496,6 +504,8 @@ impl Options {\n             show_coverage,\n             crate_version,\n             persist_doctests,\n+            runtool,\n+            runtool_args,\n             render_options: RenderOptions {\n                 output,\n                 external_html,"}, {"sha": "45f2efd411faea5313d43059d9f24679ebbc95a6", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6", "patch": "@@ -272,7 +272,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             ))\n         });\n \n-        let tooltip = if ignore {\n+        let tooltip = if ignore != Ignore::None {\n             Some((\"This example is not tested\".to_owned(), \"ignore\"))\n         } else if compile_fail {\n             Some((\"This example deliberately fails to compile\".to_owned(), \"compile_fail\"))\n@@ -286,7 +286,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             s.push_str(&highlight::render_with_highlighting(\n                 &text,\n                 Some(&format!(\"rust-example-rendered{}\",\n-                                if ignore { \" ignore\" }\n+                                if ignore != Ignore::None { \" ignore\" }\n                                 else if compile_fail { \" compile_fail\" }\n                                 else if explicit_edition { \" edition \" }\n                                 else { \"\" })),\n@@ -297,7 +297,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             s.push_str(&highlight::render_with_highlighting(\n                 &text,\n                 Some(&format!(\"rust-example-rendered{}\",\n-                                if ignore { \" ignore\" }\n+                                if ignore != Ignore::None { \" ignore\" }\n                                 else if compile_fail { \" compile_fail\" }\n                                 else if explicit_edition { \" edition \" }\n                                 else { \"\" })),\n@@ -607,7 +607,7 @@ pub struct LangString {\n     original: String,\n     pub should_panic: bool,\n     pub no_run: bool,\n-    pub ignore: bool,\n+    pub ignore: Ignore,\n     pub rust: bool,\n     pub test_harness: bool,\n     pub compile_fail: bool,\n@@ -616,13 +616,20 @@ pub struct LangString {\n     pub edition: Option<Edition>\n }\n \n+#[derive(Eq, PartialEq, Clone, Debug)]\n+pub enum Ignore {\n+    All,\n+    None,\n+    Some(Vec<String>),\n+}\n+\n impl LangString {\n     fn all_false() -> LangString {\n         LangString {\n             original: String::new(),\n             should_panic: false,\n             no_run: false,\n-            ignore: false,\n+            ignore: Ignore::None,\n             rust: true,  // NB This used to be `notrust = false`\n             test_harness: false,\n             compile_fail: false,\n@@ -637,6 +644,7 @@ impl LangString {\n         let mut seen_rust_tags = false;\n         let mut seen_other_tags = false;\n         let mut data = LangString::all_false();\n+        let mut ignores = vec![];\n \n         data.original = string.to_owned();\n         let tokens = string.split(|c: char|\n@@ -651,7 +659,11 @@ impl LangString {\n                     seen_rust_tags = seen_other_tags == false;\n                 }\n                 \"no_run\" => { data.no_run = true; seen_rust_tags = !seen_other_tags; }\n-                \"ignore\" => { data.ignore = true; seen_rust_tags = !seen_other_tags; }\n+                \"ignore\" => { data.ignore = Ignore::All; seen_rust_tags = !seen_other_tags; }\n+                x if x.starts_with(\"ignore-\") => {\n+                    ignores.push(x.trim_start_matches(\"ignore-\").to_owned());\n+                    seen_rust_tags = !seen_other_tags;\n+                }\n                 \"allow_fail\" => { data.allow_fail = true; seen_rust_tags = !seen_other_tags; }\n                 \"rust\" => { data.rust = true; seen_rust_tags = true; }\n                 \"test_harness\" => {\n@@ -680,6 +692,16 @@ impl LangString {\n             }\n         }\n \n+        match data.ignore {\n+            Ignore::All => {},\n+            Ignore::None => {\n+                if !ignores.is_empty() {\n+                    data.ignore = Ignore::Some(ignores);\n+                }\n+            },\n+            _ => unreachable!(),\n+        }\n+\n         data.rust &= !seen_other_tags || seen_rust_tags;\n \n         data"}, {"sha": "5d6811a29a3eb7f94d8f7c7d7865e109957831b1", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6", "patch": "@@ -1,4 +1,4 @@\n-use super::{ErrorCodes, LangString, Markdown, MarkdownHtml, IdMap};\n+use super::{ErrorCodes, LangString, Markdown, MarkdownHtml, IdMap, Ignore};\n use super::plain_summary_line;\n use std::cell::RefCell;\n use syntax::edition::{Edition, DEFAULT_EDITION};\n@@ -26,10 +26,10 @@ fn test_unique_id() {\n #[test]\n fn test_lang_string_parse() {\n     fn t(s: &str,\n-        should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool,\n+        should_panic: bool, no_run: bool, ignore: Ignore, rust: bool, test_harness: bool,\n         compile_fail: bool, allow_fail: bool, error_codes: Vec<String>,\n-         edition: Option<Edition>) {\n-        assert_eq!(LangString::parse(s, ErrorCodes::Yes), LangString {\n+        edition: Option<Edition>) {\n+        assert_eq!(LangString::parse(s, ErrorCodes::Yes, true), LangString {\n             should_panic,\n             no_run,\n             ignore,\n@@ -42,6 +42,7 @@ fn test_lang_string_parse() {\n             edition,\n         })\n     }\n+    let ignore_foo = Ignore::Some(vec!(\"foo\".to_string()));\n \n     fn v() -> Vec<String> {\n         Vec::new()\n@@ -50,23 +51,24 @@ fn test_lang_string_parse() {\n     // ignore-tidy-linelength\n     // marker                | should_panic | no_run | ignore | rust | test_harness\n     //                       | compile_fail | allow_fail | error_codes | edition\n-    t(\"\",                      false,         false,   false,   true,  false, false, false, v(), None);\n-    t(\"rust\",                  false,         false,   false,   true,  false, false, false, v(), None);\n-    t(\"sh\",                    false,         false,   false,   false, false, false, false, v(), None);\n-    t(\"ignore\",                false,         false,   true,    true,  false, false, false, v(), None);\n-    t(\"should_panic\",          true,          false,   false,   true,  false, false, false, v(), None);\n-    t(\"no_run\",                false,         true,    false,   true,  false, false, false, v(), None);\n-    t(\"test_harness\",          false,         false,   false,   true,  true,  false, false, v(), None);\n-    t(\"compile_fail\",          false,         true,    false,   true,  false, true,  false, v(), None);\n-    t(\"allow_fail\",            false,         false,   false,   true,  false, false, true,  v(), None);\n-    t(\"{.no_run .example}\",    false,         true,    false,   true,  false, false, false, v(), None);\n-    t(\"{.sh .should_panic}\",   true,          false,   false,   false, false, false, false, v(), None);\n-    t(\"{.example .rust}\",      false,         false,   false,   true,  false, false, false, v(), None);\n-    t(\"{.test_harness .rust}\", false,         false,   false,   true,  true,  false, false, v(), None);\n-    t(\"text, no_run\",          false,         true,    false,   false, false, false, false, v(), None);\n-    t(\"text,no_run\",           false,         true,    false,   false, false, false, false, v(), None);\n-    t(\"edition2015\",           false,         false,   false,   true,  false, false, false, v(), Some(Edition::Edition2015));\n-    t(\"edition2018\",           false,         false,   false,   true,  false, false, false, v(), Some(Edition::Edition2018));\n+    t(\"\",                      false,         false,   Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"rust\",                  false,         false,   Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"sh\",                    false,         false,   Ignore::None,   false, false, false, false, v(), None);\n+    t(\"ignore\",                false,         false,   Ignore::All,    true,  false, false, false, v(), None);\n+    t(\"ignore-foo\",            false,         false,   ignore_foo,     true,  false, false, false, v(), None);\n+    t(\"should_panic\",          true,          false,   Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"no_run\",                false,         true,    Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"test_harness\",          false,         false,   Ignore::None,   true,  true,  false, false, v(), None);\n+    t(\"compile_fail\",          false,         true,    Ignore::None,   true,  false, true,  false, v(), None);\n+    t(\"allow_fail\",            false,         false,   Ignore::None,   true,  false, false, true,  v(), None);\n+    t(\"{.no_run .example}\",    false,         true,    Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"{.sh .should_panic}\",   true,          false,   Ignore::None,   false, false, false, false, v(), None);\n+    t(\"{.example .rust}\",      false,         false,   Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"{.test_harness .rust}\", false,         false,   Ignore::None,   true,  true,  false, false, v(), None);\n+    t(\"text, no_run\",          false,         true,    Ignore::None,   false, false, false, false, v(), None);\n+    t(\"text,no_run\",           false,         true,    Ignore::None,   false, false, false, false, v(), None);\n+    t(\"edition2015\",           false,         false,   Ignore::None,   true,  false, false, false, v(), Some(Edition::Edition2015));\n+    t(\"edition2018\",           false,         false,   Ignore::None,   true,  false, false, false, v(), Some(Edition::Edition2018));\n }\n \n #[test]"}, {"sha": "c5ac2440f6791d2d40f386d6080b8bf0b70d8f9d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6", "patch": "@@ -355,6 +355,18 @@ fn opts() -> Vec<RustcOptGroup> {\n                       \"show-coverage\",\n                       \"calculate percentage of public items with documentation\")\n         }),\n+        unstable(\"runtool\", |o| {\n+            o.optopt(\"\",\n+                     \"runtool\",\n+                     \"\",\n+                     \"The tool to run tests with when building for a different target than host\")\n+        }),\n+        unstable(\"runtool-arg\", |o| {\n+            o.optmulti(\"\",\n+                       \"runtool-arg\",\n+                       \"\",\n+                       \"One (of possibly many) arguments to pass to the runtool\")\n+        }),\n     ]\n }\n "}, {"sha": "2c9e530b9e6b16e65025ad49d29b6774ef574196", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=98bd8fd88c3750cfc33b6ae56a0ff1078940bdc6", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::sync::Lrc;\n use rustc_interface::interface;\n+use rustc_target::spec::TargetTriple;\n use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::session::{self, config, DiagnosticOutput};\n@@ -22,7 +23,7 @@ use testing;\n \n use crate::clean::Attributes;\n use crate::config::Options;\n-use crate::html::markdown::{self, ErrorCodes, LangString};\n+use crate::html::markdown::{self, ErrorCodes, LangString, Ignore};\n \n #[derive(Clone, Default)]\n pub struct TestOptions {\n@@ -44,7 +45,7 @@ pub fn run(options: Options) -> i32 {\n         vec![config::CrateType::Dylib]\n     };\n \n-    let sessopts = config::Options {\n+    let mut sessopts = config::Options {\n         maybe_sysroot: options.maybe_sysroot.clone(),\n         search_paths: options.libs.clone(),\n         crate_types,\n@@ -59,7 +60,7 @@ pub fn run(options: Options) -> i32 {\n         edition: options.edition,\n         ..config::Options::default()\n     };\n-\n+    options.target.as_ref().map(|t| { sessopts.target_triple = t.clone() });\n     let config = interface::Config {\n         opts: sessopts,\n         crate_cfg: config::parse_cfgspecs(options.cfgs.clone()),\n@@ -181,6 +182,9 @@ fn run_test(\n     should_panic: bool,\n     no_run: bool,\n     as_test_harness: bool,\n+    runtool: Option<String>,\n+    runtool_args: Vec<String>,\n+    target: Option<TargetTriple>,\n     compile_fail: bool,\n     mut error_codes: Vec<String>,\n     opts: &TestOptions,\n@@ -315,7 +319,15 @@ fn run_test(\n     }\n \n     // Run the code!\n-    let mut cmd = Command::new(output_file);\n+    let mut cmd;\n+\n+    if let Some(tool) = runtool {\n+        cmd = Command::new(tool);\n+        cmd.arg(output_file);\n+        cmd.args(runtool_args);\n+    }else{\n+        cmd = Command::new(output_file);\n+    }\n \n     match cmd.output() {\n         Err(e) => return Err(TestFailure::ExecutionError(e)),\n@@ -661,12 +673,27 @@ impl Tester for Collector {\n         let opts = self.opts.clone();\n         let edition = config.edition.unwrap_or(self.options.edition.clone());\n         let options = self.options.clone();\n+        let maybe_sysroot = self.maybe_sysroot.clone();\n+        let linker = self.linker.clone();\n+        let edition = config.edition.unwrap_or(self.edition);\n+        let persist_doctests = self.persist_doctests.clone();\n+        let runtool = self.runtool.clone();\n+        let runtool_args = self.runtool_args.clone();\n+        let target = self.target.clone();\n+        let target_str = target.as_ref().map(|t| t.to_string());\n \n         debug!(\"creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n-                name: testing::DynTestName(name),\n-                ignore: config.ignore,\n+                name: testing::DynTestName(name.clone()),\n+                ignore: match config.ignore {\n+                    Ignore::All => true,\n+                    Ignore::None => false,\n+                    Ignore::Some(ref ignores) => {\n+                        target_str.map_or(false,\n+                                          |s| ignores.iter().any(|t| s.contains(t)))\n+                    },\n+                },\n                 // compiler failures are test failures\n                 should_panic: testing::ShouldPanic::No,\n                 allow_fail: config.allow_fail,\n@@ -681,6 +708,9 @@ impl Tester for Collector {\n                     config.should_panic,\n                     config.no_run,\n                     config.test_harness,\n+                    runtool,\n+                    runtool_args,\n+                    target,\n                     config.compile_fail,\n                     config.error_codes,\n                     &opts,"}]}