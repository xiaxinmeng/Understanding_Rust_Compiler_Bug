{"sha": "30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZWI0NThiNGZhOGFkY2VjZDhjYmY3MzFiZDFjZmE5YTdhOGI4OGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-05T21:50:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-05T21:50:47Z"}, "message": "Merge #4332\n\n4332: Refactor TextEdit r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1ee318a9568c8bf1d0b314ef996581bb4e518b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ee318a9568c8bf1d0b314ef996581bb4e518b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesd+3CRBK7hj4Ov3rIwAAdHIIABLDZ6nYb5SRmfe9iVmwBQsf\njAHnUV7vN+ac07EcYDjw4Me8WNtRZZvDoT+UPmrNEtOQ63gmIH5VM4jBfdeLBT6g\nkcv9sPZ5WPhwl82XfKiHGuHWfqdtqBaB29T4TXIR5BdRGcHQGm2ch1+Bvce39jCG\nqDyQ5B3KbZ6c3kbwVfAFBUka/AJRGYak8dAR4duH5+sSZ4rT1NRGo/BoDCdegVy+\nAw8tT4m/bUlis8oGESJFQhRM91qyjtTZJo2albV8b9wpqu2XvAQXzsAtlYZVLKdU\n3HNmKI8ukGAoy70eH8yTmFs7LgZoAkH0gxBD8BnrG5TcvTG40oAFcNOaWmY6Igs=\n=P1L9\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ee318a9568c8bf1d0b314ef996581bb4e518b9e\nparent 78c82eff95cae43b389dbd6e590d7f09bac8f3f1\nparent ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588715447 +0000\ncommitter GitHub <noreply@github.com> 1588715447 +0000\n\nMerge #4332\n\n4332: Refactor TextEdit r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "html_url": "https://github.com/rust-lang/rust/commit/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78c82eff95cae43b389dbd6e590d7f09bac8f3f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/78c82eff95cae43b389dbd6e590d7f09bac8f3f1", "html_url": "https://github.com/rust-lang/rust/commit/78c82eff95cae43b389dbd6e590d7f09bac8f3f1"}, {"sha": "ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b", "html_url": "https://github.com/rust-lang/rust/commit/ca9e0f5fe9ad29ab0c5a0771a0d0eaec97e4104b"}], "stats": {"total": 498, "additions": 271, "deletions": 227}, "files": [{"sha": "83dd270c6cec7f2d0e6113820054aeef01a24a8e", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -4,14 +4,13 @@ use ra_db::FileRange;\n use ra_fmt::{leading_indent, reindent};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n-    algo::{self, find_covering_element, find_node_at_offset},\n+    algo::{self, find_covering_element, find_node_at_offset, SyntaxRewriter},\n     AstNode, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, TextSize,\n     TokenAtOffset,\n };\n use ra_text_edit::TextEditBuilder;\n \n use crate::{AssistAction, AssistFile, AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n-use algo::SyntaxRewriter;\n \n #[derive(Clone, Debug)]\n pub(crate) struct Assist(pub(crate) Vec<AssistInfo>);\n@@ -42,8 +41,6 @@ impl AssistInfo {\n     }\n }\n \n-pub(crate) type AssistHandler = fn(AssistCtx) -> Option<Assist>;\n-\n /// `AssistCtx` allows to apply an assist or check if it could be applied.\n ///\n /// Assists use a somewhat over-engineered approach, given the current needs. The"}, {"sha": "f627f31dcd5290d1f87c7c28284e434517c8a087", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -30,6 +30,10 @@ fn check(assist_id: &str, before: &str, after: &str) {\n             )\n         });\n \n-    let actual = assist.action.edit.apply(&before);\n+    let actual = {\n+        let mut actual = before.clone();\n+        assist.action.edit.apply(&mut actual);\n+        actual\n+    };\n     assert_eq_text!(after, &actual);\n }"}, {"sha": "0f94f5ee89dde3fd7e227b01701633eb6d03fe66", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -23,7 +23,7 @@ use ra_ide_db::RootDatabase;\n use ra_syntax::{TextRange, TextSize};\n use ra_text_edit::TextEdit;\n \n-pub(crate) use crate::assist_ctx::{Assist, AssistCtx, AssistHandler};\n+pub(crate) use crate::assist_ctx::{Assist, AssistCtx};\n \n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n@@ -109,7 +109,9 @@ pub fn resolved_assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssi\n }\n \n mod handlers {\n-    use crate::AssistHandler;\n+    use crate::{Assist, AssistCtx};\n+\n+    pub(crate) type Handler = fn(AssistCtx) -> Option<Assist>;\n \n     mod add_custom_impl;\n     mod add_derive;\n@@ -145,12 +147,13 @@ mod handlers {\n     mod reorder_fields;\n     mod unwrap_block;\n \n-    pub(crate) fn all() -> &'static [AssistHandler] {\n+    pub(crate) fn all() -> &'static [Handler] {\n         &[\n             // These are alphabetic for the foolish consistency\n             add_custom_impl::add_custom_impl,\n             add_derive::add_derive,\n             add_explicit_type::add_explicit_type,\n+            add_from_impl_for_enum::add_from_impl_for_enum,\n             add_function::add_function,\n             add_impl::add_impl,\n             add_new::add_new,\n@@ -176,17 +179,18 @@ mod handlers {\n             raw_string::remove_hash,\n             remove_dbg::remove_dbg,\n             remove_mut::remove_mut,\n+            reorder_fields::reorder_fields,\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             replace_unwrap_with_match::replace_unwrap_with_match,\n             split_import::split_import,\n-            add_from_impl_for_enum::add_from_impl_for_enum,\n             unwrap_block::unwrap_block,\n             // These are manually sorted for better priorities\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,\n-            reorder_fields::reorder_fields,\n+            // Are you sure you want to add new assist here, and not to the\n+            // sorted list above?\n         ]\n     }\n }\n@@ -195,12 +199,12 @@ mod handlers {\n mod helpers {\n     use std::sync::Arc;\n \n+    use hir::Semantics;\n     use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n     use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n     use test_utils::{add_cursor, assert_eq_text, extract_range_or_offset, RangeOrOffset};\n \n-    use crate::{AssistCtx, AssistFile, AssistHandler};\n-    use hir::Semantics;\n+    use crate::{handlers::Handler, AssistCtx, AssistFile};\n \n     pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n         let (mut db, file_id) = RootDatabase::with_single_file(text);\n@@ -210,22 +214,18 @@ mod helpers {\n         (db, file_id)\n     }\n \n-    pub(crate) fn check_assist(\n-        assist: AssistHandler,\n-        ra_fixture_before: &str,\n-        ra_fixture_after: &str,\n-    ) {\n+    pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_after: &str) {\n         check(assist, ra_fixture_before, ExpectedResult::After(ra_fixture_after));\n     }\n \n     // FIXME: instead of having a separate function here, maybe use\n     // `extract_ranges` and mark the target as `<target> </target>` in the\n     // fixuture?\n-    pub(crate) fn check_assist_target(assist: AssistHandler, ra_fixture: &str, target: &str) {\n+    pub(crate) fn check_assist_target(assist: Handler, ra_fixture: &str, target: &str) {\n         check(assist, ra_fixture, ExpectedResult::Target(target));\n     }\n \n-    pub(crate) fn check_assist_not_applicable(assist: AssistHandler, ra_fixture: &str) {\n+    pub(crate) fn check_assist_not_applicable(assist: Handler, ra_fixture: &str) {\n         check(assist, ra_fixture, ExpectedResult::NotApplicable);\n     }\n \n@@ -235,7 +235,7 @@ mod helpers {\n         Target(&'a str),\n     }\n \n-    fn check(assist: AssistHandler, before: &str, expected: ExpectedResult) {\n+    fn check(assist: Handler, before: &str, expected: ExpectedResult) {\n         let (text_without_caret, file_with_caret_id, range_or_offset, db) =\n             if before.contains(\"//-\") {\n                 let (mut db, position) = RootDatabase::with_position(before);\n@@ -261,13 +261,13 @@ mod helpers {\n             (Some(assist), ExpectedResult::After(after)) => {\n                 let action = assist.0[0].action.clone().unwrap();\n \n-                let assisted_file_text = if let AssistFile::TargetFile(file_id) = action.file {\n+                let mut actual = if let AssistFile::TargetFile(file_id) = action.file {\n                     db.file_text(file_id).as_ref().to_owned()\n                 } else {\n                     text_without_caret\n                 };\n+                action.edit.apply(&mut actual);\n \n-                let mut actual = action.edit.apply(&assisted_file_text);\n                 match action.cursor_position {\n                     None => {\n                         if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {"}, {"sha": "b6b9627deab555269a6f89a3ab5f487ae910e11d", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n-use ra_text_edit::AtomTextEdit;\n+use ra_text_edit::Indel;\n \n use crate::{call_info::ActiveParameter, completion::CompletionConfig, FilePosition};\n \n@@ -76,7 +76,7 @@ impl<'a> CompletionContext<'a> {\n         // actual completion.\n         let file_with_fake_ident = {\n             let parse = db.parse(position.file_id);\n-            let edit = AtomTextEdit::insert(position.offset, \"intellijRulezz\".to_string());\n+            let edit = Indel::insert(position.offset, \"intellijRulezz\".to_string());\n             parse.reparse(&edit).tree()\n         };\n         let fake_ident_token ="}, {"sha": "383b23ac44e91ab63ea783836d296808c11c7b10", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -62,8 +62,8 @@ impl fmt::Debug for CompletionItem {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut s = f.debug_struct(\"CompletionItem\");\n         s.field(\"label\", &self.label()).field(\"source_range\", &self.source_range());\n-        if self.text_edit().as_atoms().len() == 1 {\n-            let atom = &self.text_edit().as_atoms()[0];\n+        if self.text_edit().as_indels().len() == 1 {\n+            let atom = &self.text_edit().as_indels()[0];\n             s.field(\"delete\", &atom.delete);\n             s.field(\"insert\", &atom.insert);\n         } else {"}, {"sha": "87a0b80f13e6ce7479fa609596e26d361e00a906", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -241,7 +241,11 @@ mod tests {\n             diagnostics.pop().unwrap_or_else(|| panic!(\"no diagnostics for:\\n{}\\n\", before));\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_file_edits.pop().unwrap().edit;\n-        let actual = edit.apply(&before);\n+        let actual = {\n+            let mut actual = before.to_string();\n+            edit.apply(&mut actual);\n+            actual\n+        };\n         assert_eq_text!(after, &actual);\n     }\n \n@@ -256,7 +260,11 @@ mod tests {\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n-        let actual = edit.apply(&target_file_contents);\n+        let actual = {\n+            let mut actual = target_file_contents.to_string();\n+            edit.apply(&mut actual);\n+            actual\n+        };\n \n         // Strip indent and empty lines from `after`, to match the behaviour of\n         // `parse_fixture` called from `analysis_and_position`.\n@@ -288,7 +296,11 @@ mod tests {\n         let diagnostic = analysis.diagnostics(file_id).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_file_edits.pop().unwrap().edit;\n-        let actual = edit.apply(&before);\n+        let actual = {\n+            let mut actual = before.to_string();\n+            edit.apply(&mut actual);\n+            actual\n+        };\n         assert_eq_text!(after, &actual);\n     }\n \n@@ -662,10 +674,10 @@ mod tests {\n                                     1,\n                                 ),\n                                 edit: TextEdit {\n-                                    atoms: [\n-                                        AtomTextEdit {\n-                                            delete: 3..9,\n+                                    indels: [\n+                                        Indel {\n                                             insert: \"{a:42, b: ()}\",\n+                                            delete: 3..9,\n                                         },\n                                     ],\n                                 },"}, {"sha": "d3af780c450f59e943b64efcf4819db0c4c4f7e1", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -569,7 +569,11 @@ fn foo() {\n         let (sel, before) = extract_range(before);\n         let parse = SourceFile::parse(&before);\n         let result = join_lines(&parse.tree(), sel);\n-        let actual = result.apply(&before);\n+        let actual = {\n+            let mut actual = before.to_string();\n+            result.apply(&mut actual);\n+            actual\n+        };\n         assert_eq_text!(after, &actual);\n     }\n "}, {"sha": "0398d53bc92e64865c0d3a727af6761d2b790211", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -537,10 +537,10 @@ mod tests {\n                                 2,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 4..7,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 4..7,\n                                     },\n                                 ],\n                             },\n@@ -589,10 +589,10 @@ mod tests {\n                                 1,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 4..7,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 4..7,\n                                     },\n                                 ],\n                             },\n@@ -672,10 +672,10 @@ mod tests {\n                                 2,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 8..11,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 8..11,\n                                     },\n                                 ],\n                             },\n@@ -685,10 +685,10 @@ mod tests {\n                                 1,\n                             ),\n                             edit: TextEdit {\n-                                atoms: [\n-                                    AtomTextEdit {\n-                                        delete: 27..30,\n+                                indels: [\n+                                    Indel {\n                                         insert: \"foo2\",\n+                                        delete: 27..30,\n                                     },\n                                 ],\n                             },\n@@ -720,13 +720,13 @@ mod tests {\n         if let Some(change) = source_change {\n             for edit in change.info.source_file_edits {\n                 file_id = Some(edit.file_id);\n-                for atom in edit.edit.as_atoms() {\n-                    text_edit_builder.replace(atom.delete, atom.insert.clone());\n+                for indel in edit.edit.as_indels() {\n+                    text_edit_builder.replace(indel.delete, indel.insert.clone());\n                 }\n             }\n         }\n-        let result =\n-            text_edit_builder.finish().apply(&*analysis.file_text(file_id.unwrap()).unwrap());\n+        let mut result = analysis.file_text(file_id.unwrap()).unwrap().to_string();\n+        text_edit_builder.finish().apply(&mut result);\n         assert_eq_text!(expected, &*result);\n     }\n }"}, {"sha": "8bf52d0fa8277e4a4478e089e507aebc9711ca13", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -401,16 +401,22 @@ fn render_replace(\n     ignored_comments: &Vec<Comment>,\n     template: &SsrTemplate,\n ) -> String {\n-    let mut builder = TextEditBuilder::default();\n-    for element in template.template.descendants() {\n-        if let Some(var) = template.placeholders.get(&element) {\n-            builder.replace(element.text_range(), binding[var].to_string())\n+    let edit = {\n+        let mut builder = TextEditBuilder::default();\n+        for element in template.template.descendants() {\n+            if let Some(var) = template.placeholders.get(&element) {\n+                builder.replace(element.text_range(), binding[var].to_string())\n+            }\n         }\n-    }\n-    for comment in ignored_comments {\n-        builder.insert(template.template.text_range().end(), comment.syntax().to_string())\n-    }\n-    builder.finish().apply(&template.template.text().to_string())\n+        for comment in ignored_comments {\n+            builder.insert(template.template.text_range().end(), comment.syntax().to_string())\n+        }\n+        builder.finish()\n+    };\n+\n+    let mut text = template.template.text().to_string();\n+    edit.apply(&mut text);\n+    text\n }\n \n #[cfg(test)]\n@@ -505,15 +511,19 @@ mod tests {\n         );\n \n         let edit = replace(&matches, &query.template);\n-        assert_eq!(edit.apply(input), \"fn main() { bar(1+2); }\");\n+        let mut after = input.to_string();\n+        edit.apply(&mut after);\n+        assert_eq!(after, \"fn main() { bar(1+2); }\");\n     }\n \n     fn assert_ssr_transform(query: &str, input: &str, result: &str) {\n         let query: SsrQuery = query.parse().unwrap();\n         let code = SourceFile::parse(input).tree();\n         let matches = find(&query.pattern, code.syntax());\n         let edit = replace(&matches, &query.template);\n-        assert_eq!(edit.apply(input), result);\n+        let mut after = input.to_string();\n+        edit.apply(&mut after);\n+        assert_eq!(after, result);\n     }\n \n     #[test]"}, {"sha": "48c8fd1f4662d38e8d4ebd6fc7e68cf99fcfe219", "filename": "crates/ra_ide/src/test_utils.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -13,7 +13,11 @@ pub fn check_action<F: Fn(&SourceFile, TextSize) -> Option<TextEdit>>(\n     let (before_cursor_pos, before) = extract_offset(before);\n     let file = SourceFile::parse(&before).ok().unwrap();\n     let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n-    let actual = result.apply(&before);\n+    let actual = {\n+        let mut actual = before.to_string();\n+        result.apply(&mut actual);\n+        actual\n+    };\n     let actual_cursor_pos =\n         result.apply_to_offset(before_cursor_pos).expect(\"cursor position is affected by the edit\");\n     let actual = add_cursor(&actual, actual_cursor_pos);"}, {"sha": "a03da46938070b8fbd854cadb8be071a549a7a09", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -142,10 +142,13 @@ mod tests {\n     fn do_type_char(char_typed: char, before: &str) -> Option<(String, SingleFileChange)> {\n         let (offset, before) = extract_offset(before);\n         let edit = TextEdit::insert(offset, char_typed.to_string());\n-        let before = edit.apply(&before);\n+        let mut before = before.to_string();\n+        edit.apply(&mut before);\n         let parse = SourceFile::parse(&before);\n-        on_char_typed_inner(&parse.tree(), offset, char_typed)\n-            .map(|it| (it.edit.apply(&before), it))\n+        on_char_typed_inner(&parse.tree(), offset, char_typed).map(|it| {\n+            it.edit.apply(&mut before);\n+            (before.to_string(), it)\n+        })\n     }\n \n     fn type_char(char_typed: char, before: &str, after: &str) {"}, {"sha": "78a40cc94c44a8dd8dbf29b9f3d9d1ef061e867d", "filename": "crates/ra_ide/src/typing/on_enter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -96,7 +96,8 @@ mod tests {\n         let result = analysis.on_enter(FilePosition { offset, file_id }).unwrap()?;\n \n         assert_eq!(result.source_file_edits.len(), 1);\n-        let actual = result.source_file_edits[0].edit.apply(&before);\n+        let mut actual = before.to_string();\n+        result.source_file_edits[0].edit.apply(&mut actual);\n         let actual = add_cursor(&actual, result.cursor_position.unwrap().offset);\n         Some(actual)\n     }"}, {"sha": "7fa6fc448e0e88c441c1493a5c4d152ffad6feb0", "filename": "crates/ra_ide_db/src/line_index_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -10,7 +10,7 @@\n use std::convert::TryInto;\n \n use ra_syntax::{TextRange, TextSize};\n-use ra_text_edit::{AtomTextEdit, TextEdit};\n+use ra_text_edit::{Indel, TextEdit};\n \n use crate::line_index::{LineCol, LineIndex, Utf16Char};\n \n@@ -182,14 +182,14 @@ struct TranslatedEdit<'a> {\n }\n \n struct Edits<'a> {\n-    edits: &'a [AtomTextEdit],\n+    edits: &'a [Indel],\n     current: Option<TranslatedEdit<'a>>,\n     acc_diff: i64,\n }\n \n impl<'a> Edits<'a> {\n     fn from_text_edit(text_edit: &'a TextEdit) -> Edits<'a> {\n-        let mut x = Edits { edits: text_edit.as_atoms(), current: None, acc_diff: 0 };\n+        let mut x = Edits { edits: text_edit.as_indels(), current: None, acc_diff: 0 };\n         x.advance_edit();\n         x\n     }"}, {"sha": "39f9b12ab20b916e1760129ce5940f5e6665537b", "filename": "crates/ra_syntax/src/fuzz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -5,7 +5,7 @@ use std::{\n     str::{self, FromStr},\n };\n \n-use ra_text_edit::AtomTextEdit;\n+use ra_text_edit::Indel;\n \n use crate::{validation, AstNode, SourceFile, TextRange};\n \n@@ -22,7 +22,7 @@ pub fn check_parser(text: &str) {\n #[derive(Debug, Clone)]\n pub struct CheckReparse {\n     text: String,\n-    edit: AtomTextEdit,\n+    edit: Indel,\n     edited_text: String,\n }\n \n@@ -43,7 +43,7 @@ impl CheckReparse {\n             TextRange::at(delete_start.try_into().unwrap(), delete_len.try_into().unwrap());\n         let edited_text =\n             format!(\"{}{}{}\", &text[..delete_start], &insert, &text[delete_start + delete_len..]);\n-        let edit = AtomTextEdit { delete, insert };\n+        let edit = Indel { delete, insert };\n         Some(CheckReparse { text, edit, edited_text })\n     }\n "}, {"sha": "61e686da5e6dc6108a14aa3b3d5054d85dc3af54", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -39,7 +39,7 @@ pub mod fuzz;\n \n use std::{marker::PhantomData, sync::Arc};\n \n-use ra_text_edit::AtomTextEdit;\n+use ra_text_edit::Indel;\n use stdx::format_to;\n \n use crate::syntax_node::GreenNode;\n@@ -126,13 +126,13 @@ impl Parse<SourceFile> {\n         buf\n     }\n \n-    pub fn reparse(&self, edit: &AtomTextEdit) -> Parse<SourceFile> {\n-        self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n+    pub fn reparse(&self, indel: &Indel) -> Parse<SourceFile> {\n+        self.incremental_reparse(indel).unwrap_or_else(|| self.full_reparse(indel))\n     }\n \n-    fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<Parse<SourceFile>> {\n+    fn incremental_reparse(&self, indel: &Indel) -> Option<Parse<SourceFile>> {\n         // FIXME: validation errors are not handled here\n-        parsing::incremental_reparse(self.tree().syntax(), edit, self.errors.to_vec()).map(\n+        parsing::incremental_reparse(self.tree().syntax(), indel, self.errors.to_vec()).map(\n             |(green_node, errors, _reparsed_range)| Parse {\n                 green: green_node,\n                 errors: Arc::new(errors),\n@@ -141,8 +141,9 @@ impl Parse<SourceFile> {\n         )\n     }\n \n-    fn full_reparse(&self, edit: &AtomTextEdit) -> Parse<SourceFile> {\n-        let text = edit.apply(self.tree().syntax().text().to_string());\n+    fn full_reparse(&self, indel: &Indel) -> Parse<SourceFile> {\n+        let mut text = self.tree().syntax().text().to_string();\n+        indel.apply(&mut text);\n         SourceFile::parse(&text)\n     }\n }"}, {"sha": "edbc190f855367d2c2c6fd8592bdac0e943e652e", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -7,7 +7,7 @@\n //!     and try to parse only this block.\n \n use ra_parser::Reparser;\n-use ra_text_edit::AtomTextEdit;\n+use ra_text_edit::Indel;\n \n use crate::{\n     algo,\n@@ -24,7 +24,7 @@ use crate::{\n \n pub(crate) fn incremental_reparse(\n     node: &SyntaxNode,\n-    edit: &AtomTextEdit,\n+    edit: &Indel,\n     errors: Vec<SyntaxError>,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     if let Some((green, new_errors, old_range)) = reparse_token(node, &edit) {\n@@ -39,7 +39,7 @@ pub(crate) fn incremental_reparse(\n \n fn reparse_token<'node>(\n     root: &'node SyntaxNode,\n-    edit: &AtomTextEdit,\n+    edit: &Indel,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let prev_token = algo::find_covering_element(root, edit.delete).as_token()?.clone();\n     let prev_token_kind = prev_token.kind();\n@@ -88,7 +88,7 @@ fn reparse_token<'node>(\n \n fn reparse_block<'node>(\n     root: &'node SyntaxNode,\n-    edit: &AtomTextEdit,\n+    edit: &Indel,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let (node, reparser) = find_reparsable_node(root, edit.delete)?;\n     let text = get_text_after_edit(node.clone().into(), edit);\n@@ -108,15 +108,15 @@ fn reparse_block<'node>(\n     Some((node.replace_with(green), new_parser_errors, node.text_range()))\n }\n \n-fn get_text_after_edit(element: SyntaxElement, edit: &AtomTextEdit) -> String {\n-    let edit =\n-        AtomTextEdit::replace(edit.delete - element.text_range().start(), edit.insert.clone());\n+fn get_text_after_edit(element: SyntaxElement, edit: &Indel) -> String {\n+    let edit = Indel::replace(edit.delete - element.text_range().start(), edit.insert.clone());\n \n-    let text = match element {\n+    let mut text = match element {\n         NodeOrToken::Token(token) => token.text().to_string(),\n         NodeOrToken::Node(node) => node.text().to_string(),\n     };\n-    edit.apply(text)\n+    edit.apply(&mut text);\n+    text\n }\n \n fn is_contextual_kw(text: &str) -> bool {\n@@ -167,7 +167,7 @@ fn merge_errors(\n     old_errors: Vec<SyntaxError>,\n     new_errors: Vec<SyntaxError>,\n     range_before_reparse: TextRange,\n-    edit: &AtomTextEdit,\n+    edit: &Indel,\n ) -> Vec<SyntaxError> {\n     let mut res = Vec::new();\n \n@@ -198,8 +198,12 @@ mod tests {\n \n     fn do_check(before: &str, replace_with: &str, reparsed_len: u32) {\n         let (range, before) = extract_range(before);\n-        let edit = AtomTextEdit::replace(range, replace_with.to_owned());\n-        let after = edit.apply(before.clone());\n+        let edit = Indel::replace(range, replace_with.to_owned());\n+        let after = {\n+            let mut after = before.clone();\n+            edit.apply(&mut after);\n+            after\n+        };\n \n         let fully_reparsed = SourceFile::parse(&after);\n         let incrementally_reparsed: Parse<SourceFile> = {"}, {"sha": "7138bbc65516f6dbd9c067359c678137cdc8c73c", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 127, "deletions": 19, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -1,36 +1,144 @@\n-//! FIXME: write short doc here\n-\n-mod text_edit;\n+//! Representation of a `TextEdit`.\n+//!\n+//! `rust-analyzer` never mutates text itself and only sends diffs to clients,\n+//! so `TextEdit` is the ultimate representation of the work done by\n+//! rust-analyzer.\n \n use text_size::{TextRange, TextSize};\n \n-pub use crate::text_edit::{TextEdit, TextEditBuilder};\n-\n-/// Must not overlap with other `AtomTextEdit`s\n+/// `InsertDelete` -- a single \"atomic\" change to text\n+///\n+/// Must not overlap with other `InDel`s\n #[derive(Debug, Clone)]\n-pub struct AtomTextEdit {\n+pub struct Indel {\n+    pub insert: String,\n     /// Refers to offsets in the original text\n     pub delete: TextRange,\n-    pub insert: String,\n }\n \n-impl AtomTextEdit {\n-    pub fn replace(range: TextRange, replace_with: String) -> AtomTextEdit {\n-        AtomTextEdit { delete: range, insert: replace_with }\n-    }\n+#[derive(Debug, Clone)]\n+pub struct TextEdit {\n+    indels: Vec<Indel>,\n+}\n \n-    pub fn delete(range: TextRange) -> AtomTextEdit {\n-        AtomTextEdit::replace(range, String::new())\n-    }\n+#[derive(Debug, Default)]\n+pub struct TextEditBuilder {\n+    indels: Vec<Indel>,\n+}\n \n-    pub fn insert(offset: TextSize, text: String) -> AtomTextEdit {\n-        AtomTextEdit::replace(TextRange::empty(offset), text)\n+impl Indel {\n+    pub fn insert(offset: TextSize, text: String) -> Indel {\n+        Indel::replace(TextRange::empty(offset), text)\n+    }\n+    pub fn delete(range: TextRange) -> Indel {\n+        Indel::replace(range, String::new())\n+    }\n+    pub fn replace(range: TextRange, replace_with: String) -> Indel {\n+        Indel { delete: range, insert: replace_with }\n     }\n \n-    pub fn apply(&self, mut text: String) -> String {\n+    pub fn apply(&self, text: &mut String) {\n         let start: usize = self.delete.start().into();\n         let end: usize = self.delete.end().into();\n         text.replace_range(start..end, &self.insert);\n-        text\n+    }\n+}\n+\n+impl TextEdit {\n+    pub fn insert(offset: TextSize, text: String) -> TextEdit {\n+        let mut builder = TextEditBuilder::default();\n+        builder.insert(offset, text);\n+        builder.finish()\n+    }\n+\n+    pub fn delete(range: TextRange) -> TextEdit {\n+        let mut builder = TextEditBuilder::default();\n+        builder.delete(range);\n+        builder.finish()\n+    }\n+\n+    pub fn replace(range: TextRange, replace_with: String) -> TextEdit {\n+        let mut builder = TextEditBuilder::default();\n+        builder.replace(range, replace_with);\n+        builder.finish()\n+    }\n+\n+    pub(crate) fn from_indels(mut indels: Vec<Indel>) -> TextEdit {\n+        indels.sort_by_key(|a| (a.delete.start(), a.delete.end()));\n+        for (a1, a2) in indels.iter().zip(indels.iter().skip(1)) {\n+            assert!(a1.delete.end() <= a2.delete.start())\n+        }\n+        TextEdit { indels }\n+    }\n+\n+    pub fn as_indels(&self) -> &[Indel] {\n+        &self.indels\n+    }\n+\n+    pub fn apply(&self, text: &mut String) {\n+        match self.indels.len() {\n+            0 => return,\n+            1 => {\n+                self.indels[0].apply(text);\n+                return;\n+            }\n+            _ => (),\n+        }\n+\n+        let mut total_len = TextSize::of(&*text);\n+        for indel in self.indels.iter() {\n+            total_len += TextSize::of(&indel.insert);\n+            total_len -= indel.delete.end() - indel.delete.start();\n+        }\n+        let mut buf = String::with_capacity(total_len.into());\n+        let mut prev = 0;\n+        for indel in self.indels.iter() {\n+            let start: usize = indel.delete.start().into();\n+            let end: usize = indel.delete.end().into();\n+            if start > prev {\n+                buf.push_str(&text[prev..start]);\n+            }\n+            buf.push_str(&indel.insert);\n+            prev = end;\n+        }\n+        buf.push_str(&text[prev..text.len()]);\n+        assert_eq!(TextSize::of(&buf), total_len);\n+\n+        // FIXME: figure out a way to mutate the text in-place or reuse the\n+        // memory in some other way\n+        *text = buf\n+    }\n+\n+    pub fn apply_to_offset(&self, offset: TextSize) -> Option<TextSize> {\n+        let mut res = offset;\n+        for indel in self.indels.iter() {\n+            if indel.delete.start() >= offset {\n+                break;\n+            }\n+            if offset < indel.delete.end() {\n+                return None;\n+            }\n+            res += TextSize::of(&indel.insert);\n+            res -= indel.delete.len();\n+        }\n+        Some(res)\n+    }\n+}\n+\n+impl TextEditBuilder {\n+    pub fn replace(&mut self, range: TextRange, replace_with: String) {\n+        self.indels.push(Indel::replace(range, replace_with))\n+    }\n+    pub fn delete(&mut self, range: TextRange) {\n+        self.indels.push(Indel::delete(range))\n+    }\n+    pub fn insert(&mut self, offset: TextSize, text: String) {\n+        self.indels.push(Indel::insert(offset, text))\n+    }\n+    pub fn finish(self) -> TextEdit {\n+        TextEdit::from_indels(self.indels)\n+    }\n+    pub fn invalidates_offset(&self, offset: TextSize) -> bool {\n+        self.indels.iter().any(|indel| indel.delete.contains_inclusive(offset))\n     }\n }"}, {"sha": "eabab4b4d117e215f2e35403a52065f3413b83d9", "filename": "crates/ra_text_edit/src/text_edit.rs", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/78c82eff95cae43b389dbd6e590d7f09bac8f3f1/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c82eff95cae43b389dbd6e590d7f09bac8f3f1/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs?ref=78c82eff95cae43b389dbd6e590d7f09bac8f3f1", "patch": "@@ -1,102 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use crate::AtomTextEdit;\n-\n-use text_size::{TextRange, TextSize};\n-\n-#[derive(Debug, Clone)]\n-pub struct TextEdit {\n-    atoms: Vec<AtomTextEdit>,\n-}\n-\n-#[derive(Debug, Default)]\n-pub struct TextEditBuilder {\n-    atoms: Vec<AtomTextEdit>,\n-}\n-\n-impl TextEditBuilder {\n-    pub fn replace(&mut self, range: TextRange, replace_with: String) {\n-        self.atoms.push(AtomTextEdit::replace(range, replace_with))\n-    }\n-    pub fn delete(&mut self, range: TextRange) {\n-        self.atoms.push(AtomTextEdit::delete(range))\n-    }\n-    pub fn insert(&mut self, offset: TextSize, text: String) {\n-        self.atoms.push(AtomTextEdit::insert(offset, text))\n-    }\n-    pub fn finish(self) -> TextEdit {\n-        TextEdit::from_atoms(self.atoms)\n-    }\n-    pub fn invalidates_offset(&self, offset: TextSize) -> bool {\n-        self.atoms.iter().any(|atom| atom.delete.contains_inclusive(offset))\n-    }\n-}\n-\n-impl TextEdit {\n-    pub fn insert(offset: TextSize, text: String) -> TextEdit {\n-        let mut builder = TextEditBuilder::default();\n-        builder.insert(offset, text);\n-        builder.finish()\n-    }\n-\n-    pub fn delete(range: TextRange) -> TextEdit {\n-        let mut builder = TextEditBuilder::default();\n-        builder.delete(range);\n-        builder.finish()\n-    }\n-\n-    pub fn replace(range: TextRange, replace_with: String) -> TextEdit {\n-        let mut builder = TextEditBuilder::default();\n-        builder.replace(range, replace_with);\n-        builder.finish()\n-    }\n-\n-    pub(crate) fn from_atoms(mut atoms: Vec<AtomTextEdit>) -> TextEdit {\n-        atoms.sort_by_key(|a| (a.delete.start(), a.delete.end()));\n-        for (a1, a2) in atoms.iter().zip(atoms.iter().skip(1)) {\n-            assert!(a1.delete.end() <= a2.delete.start())\n-        }\n-        TextEdit { atoms }\n-    }\n-\n-    pub fn as_atoms(&self) -> &[AtomTextEdit] {\n-        &self.atoms\n-    }\n-\n-    pub fn apply(&self, text: &str) -> String {\n-        let mut total_len = TextSize::of(text);\n-        for atom in self.atoms.iter() {\n-            total_len += TextSize::of(&atom.insert);\n-            total_len -= atom.delete.end() - atom.delete.start();\n-        }\n-        let mut buf = String::with_capacity(total_len.into());\n-        let mut prev = 0;\n-        for atom in self.atoms.iter() {\n-            let start: usize = atom.delete.start().into();\n-            let end: usize = atom.delete.end().into();\n-            if start > prev {\n-                buf.push_str(&text[prev..start]);\n-            }\n-            buf.push_str(&atom.insert);\n-            prev = end;\n-        }\n-        buf.push_str(&text[prev..text.len()]);\n-        assert_eq!(TextSize::of(&buf), total_len);\n-        buf\n-    }\n-\n-    pub fn apply_to_offset(&self, offset: TextSize) -> Option<TextSize> {\n-        let mut res = offset;\n-        for atom in self.atoms.iter() {\n-            if atom.delete.start() >= offset {\n-                break;\n-            }\n-            if offset < atom.delete.end() {\n-                return None;\n-            }\n-            res += TextSize::of(&atom.insert);\n-            res -= atom.delete.len();\n-        }\n-        Some(res)\n-    }\n-}"}, {"sha": "f64c90b5b17ad2bbbccdbdd92f5e44f4dbacc35d", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -15,7 +15,7 @@ use ra_ide::{\n     ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n-use ra_text_edit::{AtomTextEdit, TextEdit};\n+use ra_text_edit::{Indel, TextEdit};\n use ra_vfs::LineEndings;\n \n use crate::{\n@@ -124,23 +124,22 @@ impl ConvWith<(&LineIndex, LineEndings)> for CompletionItem {\n         let mut text_edit = None;\n         // LSP does not allow arbitrary edits in completion, so we have to do a\n         // non-trivial mapping here.\n-        for atom_edit in self.text_edit().as_atoms() {\n-            if atom_edit.delete.contains_range(self.source_range()) {\n-                text_edit = Some(if atom_edit.delete == self.source_range() {\n-                    atom_edit.conv_with((ctx.0, ctx.1))\n+        for indel in self.text_edit().as_indels() {\n+            if indel.delete.contains_range(self.source_range()) {\n+                text_edit = Some(if indel.delete == self.source_range() {\n+                    indel.conv_with((ctx.0, ctx.1))\n                 } else {\n-                    assert!(self.source_range().end() == atom_edit.delete.end());\n-                    let range1 =\n-                        TextRange::new(atom_edit.delete.start(), self.source_range().start());\n+                    assert!(self.source_range().end() == indel.delete.end());\n+                    let range1 = TextRange::new(indel.delete.start(), self.source_range().start());\n                     let range2 = self.source_range();\n-                    let edit1 = AtomTextEdit::replace(range1, String::new());\n-                    let edit2 = AtomTextEdit::replace(range2, atom_edit.insert.clone());\n+                    let edit1 = Indel::replace(range1, String::new());\n+                    let edit2 = Indel::replace(range2, indel.insert.clone());\n                     additional_text_edits.push(edit1.conv_with((ctx.0, ctx.1)));\n                     edit2.conv_with((ctx.0, ctx.1))\n                 })\n             } else {\n-                assert!(self.source_range().intersect(atom_edit.delete).is_none());\n-                additional_text_edits.push(atom_edit.conv_with((ctx.0, ctx.1)));\n+                assert!(self.source_range().intersect(indel.delete).is_none());\n+                additional_text_edits.push(indel.conv_with((ctx.0, ctx.1)));\n             }\n         }\n         let text_edit = text_edit.unwrap();\n@@ -257,11 +256,11 @@ impl ConvWith<(&LineIndex, LineEndings)> for TextEdit {\n     type Output = Vec<lsp_types::TextEdit>;\n \n     fn conv_with(self, ctx: (&LineIndex, LineEndings)) -> Vec<lsp_types::TextEdit> {\n-        self.as_atoms().iter().map_conv_with(ctx).collect()\n+        self.as_indels().iter().map_conv_with(ctx).collect()\n     }\n }\n \n-impl ConvWith<(&LineIndex, LineEndings)> for &AtomTextEdit {\n+impl ConvWith<(&LineIndex, LineEndings)> for &Indel {\n     type Output = lsp_types::TextEdit;\n \n     fn conv_with(\n@@ -522,7 +521,7 @@ impl TryConvWith<&WorldSnapshot> for SourceFileEdit {\n         let line_index = world.analysis().file_line_index(self.file_id)?;\n         let line_endings = world.file_line_endings(self.file_id);\n         let edits =\n-            self.edit.as_atoms().iter().map_conv_with((&line_index, line_endings)).collect();\n+            self.edit.as_indels().iter().map_conv_with((&line_index, line_endings)).collect();\n         Ok(TextDocumentEdit { text_document, edits })\n     }\n }"}, {"sha": "3213c4dfa3c3833a7c80bbcb8ac456cd9e41bf20", "filename": "xtask/tests/tidy-tests/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fmain.rs?ref=30eb458b4fa8adcecd8cbf731bd1cfa9a7a8b88b", "patch": "@@ -115,7 +115,6 @@ impl TidyDocs {\n             \"ra_prof\",\n             \"ra_project_model\",\n             \"ra_syntax\",\n-            \"ra_text_edit\",\n             \"ra_tt\",\n             \"ra_hir_ty\",\n         ];"}]}