{"sha": "7e80bc3c8d8ab353ae498b10ad91049db5d3dbca", "node_id": "C_kwDOAAsO6NoAKDdlODBiYzNjOGQ4YWIzNTNhZTQ5OGIxMGFkOTEwNDlkYjVkM2RiY2E", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-16T18:04:48Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-16T22:24:23Z"}, "message": "Move ty::print methods to Drop-based scope guards", "tree": {"sha": "3b8a28f7ed46422f655129e3f561939e95bacab8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b8a28f7ed46422f655129e3f561939e95bacab8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e80bc3c8d8ab353ae498b10ad91049db5d3dbca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e80bc3c8d8ab353ae498b10ad91049db5d3dbca", "html_url": "https://github.com/rust-lang/rust/commit/7e80bc3c8d8ab353ae498b10ad91049db5d3dbca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e80bc3c8d8ab353ae498b10ad91049db5d3dbca/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06bc64df9213e928bf37c565f9c2f6b09391a384", "url": "https://api.github.com/repos/rust-lang/rust/commits/06bc64df9213e928bf37c565f9c2f6b09391a384", "html_url": "https://github.com/rust-lang/rust/commit/06bc64df9213e928bf37c565f9c2f6b09391a384"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "42717ad0ae0e1e1f0d86e038ee45ad18db2fec02", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7e80bc3c8d8ab353ae498b10ad91049db5d3dbca/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e80bc3c8d8ab353ae498b10ad91049db5d3dbca/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=7e80bc3c8d8ab353ae498b10ad91049db5d3dbca", "patch": "@@ -779,29 +779,35 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         assert_inhabited | assert_zero_valid | assert_uninit_valid, <T> () {\n             let layout = fx.layout_of(T);\n             if layout.abi.is_uninhabited() {\n-                with_no_trimmed_paths(|| crate::base::codegen_panic(\n-                    fx,\n-                    &format!(\"attempted to instantiate uninhabited type `{}`\", T),\n-                    span,\n-                ));\n+                with_no_trimmed_paths!({\n+                    crate::base::codegen_panic(\n+                        fx,\n+                        &format!(\"attempted to instantiate uninhabited type `{}`\", T),\n+                        span,\n+                    )\n+                });\n                 return;\n             }\n \n             if intrinsic == sym::assert_zero_valid && !layout.might_permit_raw_init(fx, /*zero:*/ true) {\n-                with_no_trimmed_paths(|| crate::base::codegen_panic(\n-                    fx,\n-                    &format!(\"attempted to zero-initialize type `{}`, which is invalid\", T),\n-                    span,\n-                ));\n+                with_no_trimmed_paths!({\n+                    crate::base::codegen_panic(\n+                        fx,\n+                        &format!(\"attempted to zero-initialize type `{}`, which is invalid\", T),\n+                        span,\n+                    );\n+                });\n                 return;\n             }\n \n             if intrinsic == sym::assert_uninit_valid && !layout.might_permit_raw_init(fx, /*zero:*/ false) {\n-                with_no_trimmed_paths(|| crate::base::codegen_panic(\n-                    fx,\n-                    &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", T),\n-                    span,\n-                ));\n+                with_no_trimmed_paths!({\n+                    crate::base::codegen_panic(\n+                        fx,\n+                        &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", T),\n+                        span,\n+                    )\n+                });\n                 return;\n             }\n         };"}]}