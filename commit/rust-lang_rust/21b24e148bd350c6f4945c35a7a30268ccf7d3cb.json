{"sha": "21b24e148bd350c6f4945c35a7a30268ccf7d3cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYjI0ZTE0OGJkMzUwYzZmNDk0NWMzNWE3YTMwMjY4Y2NmN2QzY2I=", "commit": {"author": {"name": "Harry Marr", "email": "harry.marr@gmail.com", "date": "2013-09-29T15:59:00Z"}, "committer": {"name": "Harry Marr", "email": "harry.marr@gmail.com", "date": "2013-09-29T15:59:00Z"}, "message": "Add get_opt to std::vec", "tree": {"sha": "8827da4f4882129e40d3d0ad57352bc98dd18fca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8827da4f4882129e40d3d0ad57352bc98dd18fca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b24e148bd350c6f4945c35a7a30268ccf7d3cb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b24e148bd350c6f4945c35a7a30268ccf7d3cb", "html_url": "https://github.com/rust-lang/rust/commit/21b24e148bd350c6f4945c35a7a30268ccf7d3cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b24e148bd350c6f4945c35a7a30268ccf7d3cb/comments", "author": {"login": "hmarr", "id": 110275, "node_id": "MDQ6VXNlcjExMDI3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/110275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmarr", "html_url": "https://github.com/hmarr", "followers_url": "https://api.github.com/users/hmarr/followers", "following_url": "https://api.github.com/users/hmarr/following{/other_user}", "gists_url": "https://api.github.com/users/hmarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmarr/subscriptions", "organizations_url": "https://api.github.com/users/hmarr/orgs", "repos_url": "https://api.github.com/users/hmarr/repos", "events_url": "https://api.github.com/users/hmarr/events{/privacy}", "received_events_url": "https://api.github.com/users/hmarr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hmarr", "id": 110275, "node_id": "MDQ6VXNlcjExMDI3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/110275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmarr", "html_url": "https://github.com/hmarr", "followers_url": "https://api.github.com/users/hmarr/followers", "following_url": "https://api.github.com/users/hmarr/following{/other_user}", "gists_url": "https://api.github.com/users/hmarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmarr/subscriptions", "organizations_url": "https://api.github.com/users/hmarr/orgs", "repos_url": "https://api.github.com/users/hmarr/repos", "events_url": "https://api.github.com/users/hmarr/events{/privacy}", "received_events_url": "https://api.github.com/users/hmarr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9883a6250b61eb4bb715684f9b25304f4f0d437e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9883a6250b61eb4bb715684f9b25304f4f0d437e", "html_url": "https://github.com/rust-lang/rust/commit/9883a6250b61eb4bb715684f9b25304f4f0d437e"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "58dcc7d58b092573b3d7d43e0a957a7f360e1f6b", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/21b24e148bd350c6f4945c35a7a30268ccf7d3cb/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b24e148bd350c6f4945c35a7a30268ccf7d3cb/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=21b24e148bd350c6f4945c35a7a30268ccf7d3cb", "patch": "@@ -840,6 +840,7 @@ pub trait ImmutableVector<'self, T> {\n     fn window_iter(self, size: uint) -> WindowIter<'self, T>;\n     fn chunk_iter(self, size: uint) -> ChunkIter<'self, T>;\n \n+    fn get_opt(&self, index: uint) -> Option<&'self T>;\n     fn head(&self) -> &'self T;\n     fn head_opt(&self) -> Option<&'self T>;\n     fn tail(&self) -> &'self [T];\n@@ -1019,6 +1020,13 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n         ChunkIter { v: self, size: size }\n     }\n \n+    /// Returns the element of a vector at the given index, or `None` if the\n+    /// index is out of bounds\n+    #[inline]\n+    fn get_opt(&self, index: uint) -> Option<&'self T> {\n+        if index < self.len() { Some(&self[index]) } else { None }\n+    }\n+\n     /// Returns the first element of a vector, failing if the vector is empty.\n     #[inline]\n     fn head(&self) -> &'self T {\n@@ -2574,6 +2582,16 @@ mod tests {\n         assert_eq!(v2.len(), 2);\n     }\n \n+    #[test]\n+    fn test_get_opt() {\n+        let mut a = ~[11];\n+        assert_eq!(a.get_opt(1), None);\n+        a = ~[11, 12];\n+        assert_eq!(a.get_opt(1).unwrap(), &12);\n+        a = ~[11, 12, 13];\n+        assert_eq!(a.get_opt(1).unwrap(), &12);\n+    }\n+\n     #[test]\n     fn test_head() {\n         let mut a = ~[11];"}]}