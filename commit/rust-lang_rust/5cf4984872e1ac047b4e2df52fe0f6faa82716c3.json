{"sha": "5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "node_id": "C_kwDOAAsO6NoAKDVjZjQ5ODQ4NzJlMWFjMDQ3YjRlMmRmNTJmZTBmNmZhYTgyNzE2YzM", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-10-07T09:21:30Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-10-07T09:21:30Z"}, "message": "Merge commit 'b7f3f7f6082679da2da9a0b3faf1b5adef3afd3b' into clippyup", "tree": {"sha": "87ee6ee64b5a7825e82f81da5018246ac9f04602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ee6ee64b5a7825e82f81da5018246ac9f04602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "html_url": "https://github.com/rust-lang/rust/commit/5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87bb18e7c2069c1e2aaa5b0735f1453b707f58f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/87bb18e7c2069c1e2aaa5b0735f1453b707f58f9", "html_url": "https://github.com/rust-lang/rust/commit/87bb18e7c2069c1e2aaa5b0735f1453b707f58f9"}], "stats": {"total": 7199, "additions": 4259, "deletions": 2940}, "files": [{"sha": "7fdb300c9774194d48605468f63eb8018fe12dbe", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -2695,6 +2695,7 @@ Released 2018-09-13\n [`enum_glob_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#enum_glob_use\n [`enum_variant_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names\n [`eq_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#eq_op\n+[`equatable_if_let`]: https://rust-lang.github.io/rust-clippy/master/index.html#equatable_if_let\n [`erasing_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n [`eval_order_dependence`]: https://rust-lang.github.io/rust-clippy/master/index.html#eval_order_dependence\n [`excessive_precision`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\n@@ -2898,6 +2899,7 @@ Released 2018-09-13\n [`no_effect`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n [`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n+[`non_send_fields_in_send_ty`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty\n [`nonminimal_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n [`nonsensical_open_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonsensical_open_options\n [`nonstandard_macro_braces`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces"}, {"sha": "5538f62c8e786c0f2f16092fa5a754ace47c5988", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 522, "changes": 523, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -3,14 +3,7 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n-use itertools::Itertools;\n-use regex::Regex;\n-use std::collections::HashMap;\n-use std::ffi::OsStr;\n-use std::fs;\n-use std::lazy::SyncLazy;\n-use std::path::{Path, PathBuf};\n-use walkdir::WalkDir;\n+use std::path::PathBuf;\n \n pub mod bless;\n pub mod fmt;\n@@ -19,323 +12,6 @@ pub mod serve;\n pub mod setup;\n pub mod update_lints;\n \n-static DEC_CLIPPY_LINT_RE: SyncLazy<Regex> = SyncLazy::new(|| {\n-    Regex::new(\n-        r#\"(?x)\n-    declare_clippy_lint!\\s*[\\{(]\n-    (?:\\s+///.*)*\n-    \\s+pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n-    (?P<cat>[a-z_]+)\\s*,\\s*\n-    \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n-\"#,\n-    )\n-    .unwrap()\n-});\n-\n-static DEC_DEPRECATED_LINT_RE: SyncLazy<Regex> = SyncLazy::new(|| {\n-    Regex::new(\n-        r#\"(?x)\n-    declare_deprecated_lint!\\s*[{(]\\s*\n-    (?:\\s+///.*)*\n-    \\s+pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n-    \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n-\"#,\n-    )\n-    .unwrap()\n-});\n-static NL_ESCAPE_RE: SyncLazy<Regex> = SyncLazy::new(|| Regex::new(r#\"\\\\\\n\\s*\"#).unwrap());\n-\n-pub static DOCS_LINK: &str = \"https://rust-lang.github.io/rust-clippy/master/index.html\";\n-\n-/// Lint data parsed from the Clippy source code.\n-#[derive(Clone, PartialEq, Debug)]\n-pub struct Lint {\n-    pub name: String,\n-    pub group: String,\n-    pub desc: String,\n-    pub deprecation: Option<String>,\n-    pub module: String,\n-}\n-\n-impl Lint {\n-    #[must_use]\n-    pub fn new(name: &str, group: &str, desc: &str, deprecation: Option<&str>, module: &str) -> Self {\n-        Self {\n-            name: name.to_lowercase(),\n-            group: group.to_string(),\n-            desc: NL_ESCAPE_RE.replace(&desc.replace(\"\\\\\\\"\", \"\\\"\"), \"\").to_string(),\n-            deprecation: deprecation.map(ToString::to_string),\n-            module: module.to_string(),\n-        }\n-    }\n-\n-    /// Returns all non-deprecated lints and non-internal lints\n-    #[must_use]\n-    pub fn usable_lints(lints: &[Self]) -> Vec<Self> {\n-        lints\n-            .iter()\n-            .filter(|l| l.deprecation.is_none() && !l.group.starts_with(\"internal\"))\n-            .cloned()\n-            .collect()\n-    }\n-\n-    /// Returns all internal lints (not `internal_warn` lints)\n-    #[must_use]\n-    pub fn internal_lints(lints: &[Self]) -> Vec<Self> {\n-        lints.iter().filter(|l| l.group == \"internal\").cloned().collect()\n-    }\n-\n-    /// Returns all deprecated lints\n-    #[must_use]\n-    pub fn deprecated_lints(lints: &[Self]) -> Vec<Self> {\n-        lints.iter().filter(|l| l.deprecation.is_some()).cloned().collect()\n-    }\n-\n-    /// Returns the lints in a `HashMap`, grouped by the different lint groups\n-    #[must_use]\n-    pub fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n-        lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n-    }\n-}\n-\n-/// Generates the Vec items for `register_lint_group` calls in `clippy_lints/src/lib.rs`.\n-#[must_use]\n-pub fn gen_lint_group_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    lints\n-        .map(|l| format!(\"        LintId::of({}::{}),\", l.module, l.name.to_uppercase()))\n-        .sorted()\n-        .collect::<Vec<String>>()\n-}\n-\n-/// Generates the `pub mod module_name` list in `clippy_lints/src/lib.rs`.\n-#[must_use]\n-pub fn gen_modules_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    lints\n-        .map(|l| &l.module)\n-        .unique()\n-        .map(|module| format!(\"mod {};\", module))\n-        .sorted()\n-        .collect::<Vec<String>>()\n-}\n-\n-/// Generates the list of lint links at the bottom of the README\n-#[must_use]\n-pub fn gen_changelog_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    lints\n-        .sorted_by_key(|l| &l.name)\n-        .map(|l| format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n-        .collect()\n-}\n-\n-/// Generates the `register_removed` code in `./clippy_lints/src/lib.rs`.\n-#[must_use]\n-pub fn gen_deprecated<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n-    lints\n-        .flat_map(|l| {\n-            l.deprecation\n-                .clone()\n-                .map(|depr_text| {\n-                    vec![\n-                        \"    store.register_removed(\".to_string(),\n-                        format!(\"        \\\"clippy::{}\\\",\", l.name),\n-                        format!(\"        \\\"{}\\\",\", depr_text),\n-                        \"    );\".to_string(),\n-                    ]\n-                })\n-                .expect(\"only deprecated lints should be passed\")\n-        })\n-        .collect::<Vec<String>>()\n-}\n-\n-#[must_use]\n-pub fn gen_register_lint_list<'a>(\n-    internal_lints: impl Iterator<Item = &'a Lint>,\n-    usable_lints: impl Iterator<Item = &'a Lint>,\n-) -> Vec<String> {\n-    let header = \"    store.register_lints(&[\".to_string();\n-    let footer = \"    ]);\".to_string();\n-    let internal_lints = internal_lints\n-        .sorted_by_key(|l| format!(\"        {}::{},\", l.module, l.name.to_uppercase()))\n-        .map(|l| {\n-            format!(\n-                \"        #[cfg(feature = \\\"internal-lints\\\")]\\n        {}::{},\",\n-                l.module,\n-                l.name.to_uppercase()\n-            )\n-        });\n-    let other_lints = usable_lints\n-        .sorted_by_key(|l| format!(\"        {}::{},\", l.module, l.name.to_uppercase()))\n-        .map(|l| format!(\"        {}::{},\", l.module, l.name.to_uppercase()))\n-        .sorted();\n-    let mut lint_list = vec![header];\n-    lint_list.extend(internal_lints);\n-    lint_list.extend(other_lints);\n-    lint_list.push(footer);\n-    lint_list\n-}\n-\n-/// Gathers all files in `src/clippy_lints` and gathers all lints inside\n-pub fn gather_all() -> impl Iterator<Item = Lint> {\n-    lint_files().flat_map(|f| gather_from_file(&f))\n-}\n-\n-fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item = Lint> {\n-    let content = fs::read_to_string(dir_entry.path()).unwrap();\n-    let path = dir_entry.path();\n-    let filename = path.file_stem().unwrap();\n-    let path_buf = path.with_file_name(filename);\n-    let mut rel_path = path_buf\n-        .strip_prefix(clippy_project_root().join(\"clippy_lints/src\"))\n-        .expect(\"only files in `clippy_lints/src` should be looked at\");\n-    // If the lints are stored in mod.rs, we get the module name from\n-    // the containing directory:\n-    if filename == \"mod\" {\n-        rel_path = rel_path.parent().unwrap();\n-    }\n-\n-    let module = rel_path\n-        .components()\n-        .map(|c| c.as_os_str().to_str().unwrap())\n-        .collect::<Vec<_>>()\n-        .join(\"::\");\n-\n-    parse_contents(&content, &module)\n-}\n-\n-fn parse_contents(content: &str, module: &str) -> impl Iterator<Item = Lint> {\n-    let lints = DEC_CLIPPY_LINT_RE\n-        .captures_iter(content)\n-        .map(|m| Lint::new(&m[\"name\"], &m[\"cat\"], &m[\"desc\"], None, module));\n-    let deprecated = DEC_DEPRECATED_LINT_RE\n-        .captures_iter(content)\n-        .map(|m| Lint::new(&m[\"name\"], \"Deprecated\", &m[\"desc\"], Some(&m[\"desc\"]), module));\n-    // Removing the `.collect::<Vec<Lint>>().into_iter()` causes some lifetime issues due to the map\n-    lints.chain(deprecated).collect::<Vec<Lint>>().into_iter()\n-}\n-\n-/// Collects all .rs files in the `clippy_lints/src` directory\n-fn lint_files() -> impl Iterator<Item = walkdir::DirEntry> {\n-    // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n-    // Otherwise we would not collect all the lints, for example in `clippy_lints/src/methods/`.\n-    let path = clippy_project_root().join(\"clippy_lints/src\");\n-    WalkDir::new(path)\n-        .into_iter()\n-        .filter_map(Result::ok)\n-        .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n-}\n-\n-/// Whether a file has had its text changed or not\n-#[derive(PartialEq, Debug)]\n-pub struct FileChange {\n-    pub changed: bool,\n-    pub new_lines: String,\n-}\n-\n-/// Replaces a region in a file delimited by two lines matching regexes.\n-///\n-/// `path` is the relative path to the file on which you want to perform the replacement.\n-///\n-/// See `replace_region_in_text` for documentation of the other options.\n-///\n-/// # Panics\n-///\n-/// Panics if the path could not read or then written\n-pub fn replace_region_in_file<F>(\n-    path: &Path,\n-    start: &str,\n-    end: &str,\n-    replace_start: bool,\n-    write_back: bool,\n-    replacements: F,\n-) -> FileChange\n-where\n-    F: FnOnce() -> Vec<String>,\n-{\n-    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {}\", path.display(), e));\n-    let file_change = replace_region_in_text(&contents, start, end, replace_start, replacements);\n-\n-    if write_back {\n-        if let Err(e) = fs::write(path, file_change.new_lines.as_bytes()) {\n-            panic!(\"Cannot write to {}: {}\", path.display(), e);\n-        }\n-    }\n-    file_change\n-}\n-\n-/// Replaces a region in a text delimited by two lines matching regexes.\n-///\n-/// * `text` is the input text on which you want to perform the replacement\n-/// * `start` is a `&str` that describes the delimiter line before the region you want to replace.\n-///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n-/// * `end` is a `&str` that describes the delimiter line until where the replacement should happen.\n-///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n-/// * If `replace_start` is true, the `start` delimiter line is replaced as well. The `end`\n-///   delimiter line is never replaced.\n-/// * `replacements` is a closure that has to return a `Vec<String>` which contains the new text.\n-///\n-/// If you want to perform the replacement on files instead of already parsed text,\n-/// use `replace_region_in_file`.\n-///\n-/// # Example\n-///\n-/// ```\n-/// let the_text = \"replace_start\\nsome text\\nthat will be replaced\\nreplace_end\";\n-/// let result =\n-///     clippy_dev::replace_region_in_text(the_text, \"replace_start\", \"replace_end\", false, || {\n-///         vec![\"a different\".to_string(), \"text\".to_string()]\n-///     })\n-///     .new_lines;\n-/// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n-/// ```\n-///\n-/// # Panics\n-///\n-/// Panics if start or end is not valid regex\n-pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange\n-where\n-    F: FnOnce() -> Vec<String>,\n-{\n-    let replace_it = replacements();\n-    let mut in_old_region = false;\n-    let mut found = false;\n-    let mut new_lines = vec![];\n-    let start = Regex::new(start).unwrap();\n-    let end = Regex::new(end).unwrap();\n-\n-    for line in text.lines() {\n-        if in_old_region {\n-            if end.is_match(line) {\n-                in_old_region = false;\n-                new_lines.extend(replace_it.clone());\n-                new_lines.push(line.to_string());\n-            }\n-        } else if start.is_match(line) {\n-            if !replace_start {\n-                new_lines.push(line.to_string());\n-            }\n-            in_old_region = true;\n-            found = true;\n-        } else {\n-            new_lines.push(line.to_string());\n-        }\n-    }\n-\n-    if !found {\n-        // This happens if the provided regex in `clippy_dev/src/main.rs` does not match in the\n-        // given text or file. Most likely this is an error on the programmer's side and the Regex\n-        // is incorrect.\n-        eprintln!(\"error: regex \\n{:?}\\ndoesn't match. You may have to update it.\", start);\n-        std::process::exit(1);\n-    }\n-\n-    let mut new_lines = new_lines.join(\"\\n\");\n-    if text.ends_with('\\n') {\n-        new_lines.push('\\n');\n-    }\n-    let changed = new_lines != text;\n-    FileChange { changed, new_lines }\n-}\n-\n /// Returns the path to the Clippy project directory\n ///\n /// # Panics\n@@ -360,200 +36,3 @@ pub fn clippy_project_root() -> PathBuf {\n     }\n     panic!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n }\n-\n-#[test]\n-fn test_parse_contents() {\n-    let result: Vec<Lint> = parse_contents(\n-        r#\"\n-declare_clippy_lint! {\n-    pub PTR_ARG,\n-    style,\n-    \"really long \\\n-     text\"\n-}\n-\n-declare_clippy_lint!{\n-    pub DOC_MARKDOWN,\n-    pedantic,\n-    \"single line\"\n-}\n-\n-/// some doc comment\n-declare_deprecated_lint! {\n-    pub SHOULD_ASSERT_EQ,\n-    \"`assert!()` will be more flexible with RFC 2011\"\n-}\n-    \"#,\n-        \"module_name\",\n-    )\n-    .collect();\n-\n-    let expected = vec![\n-        Lint::new(\"ptr_arg\", \"style\", \"really long text\", None, \"module_name\"),\n-        Lint::new(\"doc_markdown\", \"pedantic\", \"single line\", None, \"module_name\"),\n-        Lint::new(\n-            \"should_assert_eq\",\n-            \"Deprecated\",\n-            \"`assert!()` will be more flexible with RFC 2011\",\n-            Some(\"`assert!()` will be more flexible with RFC 2011\"),\n-            \"module_name\",\n-        ),\n-    ];\n-    assert_eq!(expected, result);\n-}\n-\n-#[test]\n-fn test_replace_region() {\n-    let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n-    let expected = FileChange {\n-        changed: true,\n-        new_lines: \"\\nabc\\nhello world\\ndef\\nghi\".to_string(),\n-    };\n-    let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, false, || {\n-        vec![\"hello world\".to_string()]\n-    });\n-    assert_eq!(expected, result);\n-}\n-\n-#[test]\n-fn test_replace_region_with_start() {\n-    let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n-    let expected = FileChange {\n-        changed: true,\n-        new_lines: \"\\nhello world\\ndef\\nghi\".to_string(),\n-    };\n-    let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, true, || {\n-        vec![\"hello world\".to_string()]\n-    });\n-    assert_eq!(expected, result);\n-}\n-\n-#[test]\n-fn test_replace_region_no_changes() {\n-    let text = \"123\\n456\\n789\";\n-    let expected = FileChange {\n-        changed: false,\n-        new_lines: \"123\\n456\\n789\".to_string(),\n-    };\n-    let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, Vec::new);\n-    assert_eq!(expected, result);\n-}\n-\n-#[test]\n-fn test_usable_lints() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"Deprecated\", \"abc\", Some(\"Reason\"), \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"Not Deprecated\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"internal\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"internal_style\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = vec![Lint::new(\n-        \"should_assert_eq2\",\n-        \"Not Deprecated\",\n-        \"abc\",\n-        None,\n-        \"module_name\",\n-    )];\n-    assert_eq!(expected, Lint::usable_lints(&lints));\n-}\n-\n-#[test]\n-fn test_by_lint_group() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n-    ];\n-    let mut expected: HashMap<String, Vec<Lint>> = HashMap::new();\n-    expected.insert(\n-        \"group1\".to_string(),\n-        vec![\n-            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-            Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n-        ],\n-    );\n-    expected.insert(\n-        \"group2\".to_string(),\n-        vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")],\n-    );\n-    assert_eq!(expected, Lint::by_lint_group(lints.into_iter()));\n-}\n-\n-#[test]\n-fn test_gen_changelog_lint_list() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = vec![\n-        format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK.to_string()),\n-        format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string()),\n-    ];\n-    assert_eq!(expected, gen_changelog_lint_list(lints.iter()));\n-}\n-\n-#[test]\n-fn test_gen_deprecated() {\n-    let lints = vec![\n-        Lint::new(\n-            \"should_assert_eq\",\n-            \"group1\",\n-            \"abc\",\n-            Some(\"has been superseded by should_assert_eq2\"),\n-            \"module_name\",\n-        ),\n-        Lint::new(\n-            \"another_deprecated\",\n-            \"group2\",\n-            \"abc\",\n-            Some(\"will be removed\"),\n-            \"module_name\",\n-        ),\n-    ];\n-    let expected: Vec<String> = vec![\n-        \"    store.register_removed(\",\n-        \"        \\\"clippy::should_assert_eq\\\",\",\n-        \"        \\\"has been superseded by should_assert_eq2\\\",\",\n-        \"    );\",\n-        \"    store.register_removed(\",\n-        \"        \\\"clippy::another_deprecated\\\",\",\n-        \"        \\\"will be removed\\\",\",\n-        \"    );\",\n-    ]\n-    .into_iter()\n-    .map(String::from)\n-    .collect();\n-    assert_eq!(expected, gen_deprecated(lints.iter()));\n-}\n-\n-#[test]\n-#[should_panic]\n-fn test_gen_deprecated_fail() {\n-    let lints = vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")];\n-    let _deprecated_lints = gen_deprecated(lints.iter());\n-}\n-\n-#[test]\n-fn test_gen_modules_list() {\n-    let lints = vec![\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"incorrect_stuff\", \"group3\", \"abc\", None, \"another_module\"),\n-    ];\n-    let expected = vec![\"mod another_module;\".to_string(), \"mod module_name;\".to_string()];\n-    assert_eq!(expected, gen_modules_list(lints.iter()));\n-}\n-\n-#[test]\n-fn test_gen_lint_group_list() {\n-    let lints = vec![\n-        Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = vec![\n-        \"        LintId::of(module_name::ABC),\".to_string(),\n-        \"        LintId::of(module_name::INTERNAL),\".to_string(),\n-        \"        LintId::of(module_name::SHOULD_ASSERT_EQ),\".to_string(),\n-    ];\n-    assert_eq!(expected, gen_lint_group_list(lints.iter()));\n-}"}, {"sha": "10d859988f6f2d55d52ac3cf035397be337aba0d", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 613, "deletions": 60, "changes": 673, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,15 +1,61 @@\n-use crate::{\n-    gather_all, gen_changelog_lint_list, gen_deprecated, gen_lint_group_list, gen_modules_list, gen_register_lint_list,\n-    replace_region_in_file, Lint, DOCS_LINK,\n-};\n+use itertools::Itertools;\n+use regex::Regex;\n+use std::collections::HashMap;\n+use std::ffi::OsStr;\n+use std::fs;\n+use std::lazy::SyncLazy;\n use std::path::Path;\n+use walkdir::WalkDir;\n+\n+use crate::clippy_project_root;\n+\n+const GENERATED_FILE_COMMENT: &str = \"// This file was generated by `cargo dev update_lints`.\\n\\\n+     // Use that command to update this file and do not edit by hand.\\n\\\n+     // Manual edits will be overwritten.\\n\\n\";\n+\n+static DEC_CLIPPY_LINT_RE: SyncLazy<Regex> = SyncLazy::new(|| {\n+    Regex::new(\n+        r#\"(?x)\n+    declare_clippy_lint!\\s*[\\{(]\n+    (?:\\s+///.*)*\n+    \\s+pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n+    (?P<cat>[a-z_]+)\\s*,\\s*\n+    \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n+\"#,\n+    )\n+    .unwrap()\n+});\n+\n+static DEC_DEPRECATED_LINT_RE: SyncLazy<Regex> = SyncLazy::new(|| {\n+    Regex::new(\n+        r#\"(?x)\n+    declare_deprecated_lint!\\s*[{(]\\s*\n+    (?:\\s+///.*)*\n+    \\s+pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n+    \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n+\"#,\n+    )\n+    .unwrap()\n+});\n+static NL_ESCAPE_RE: SyncLazy<Regex> = SyncLazy::new(|| Regex::new(r#\"\\\\\\n\\s*\"#).unwrap());\n+\n+static DOCS_LINK: &str = \"https://rust-lang.github.io/rust-clippy/master/index.html\";\n \n #[derive(Clone, Copy, PartialEq)]\n pub enum UpdateMode {\n     Check,\n     Change,\n }\n \n+/// Runs the `update_lints` command.\n+///\n+/// This updates various generated values from the lint source code.\n+///\n+/// `update_mode` indicates if the files should be updated or if updates should be checked for.\n+///\n+/// # Panics\n+///\n+/// Panics if a file path could not read from or then written to\n #[allow(clippy::too_many_lines)]\n pub fn run(update_mode: UpdateMode) {\n     let lint_list: Vec<Lint> = gather_all().collect();\n@@ -52,26 +98,7 @@ pub fn run(update_mode: UpdateMode) {\n     )\n     .changed;\n \n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin deprecated lints\",\n-        \"end deprecated lints\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_deprecated(deprecated_lints.iter()),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin register lints\",\n-        \"end register lints\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_register_lint_list(internal_lints.iter(), usable_lints.iter()),\n-    )\n-    .changed;\n-\n+    // This has to be in lib.rs, otherwise rustfmt doesn't work\n     file_change |= replace_region_in_file(\n         Path::new(\"clippy_lints/src/lib.rs\"),\n         \"begin lints modules\",\n@@ -82,46 +109,37 @@ pub fn run(update_mode: UpdateMode) {\n     )\n     .changed;\n \n-    // Generate lists of lints in the clippy::all lint group\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        r#\"store.register_group\\(true, \"clippy::all\"\"#,\n-        r#\"\\]\\);\"#,\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            // clippy::all should only include the following lint groups:\n-            let all_group_lints = usable_lints.iter().filter(|l| {\n-                matches!(\n-                    &*l.group,\n-                    \"correctness\" | \"suspicious\" | \"style\" | \"complexity\" | \"perf\"\n-                )\n-            });\n-\n-            gen_lint_group_list(all_group_lints)\n-        },\n-    )\n-    .changed;\n+    if file_change && update_mode == UpdateMode::Check {\n+        exit_with_failure();\n+    }\n \n-    // Generate the list of lints for all other lint groups\n-    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n-        file_change |= replace_region_in_file(\n-            Path::new(\"clippy_lints/src/lib.rs\"),\n-            &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),\n-            r#\"\\]\\);\"#,\n-            false,\n-            update_mode == UpdateMode::Change,\n-            || gen_lint_group_list(lints.iter()),\n+    process_file(\n+        \"clippy_lints/src/lib.register_lints.rs\",\n+        update_mode,\n+        &gen_register_lint_list(internal_lints.iter(), usable_lints.iter()),\n+    );\n+    process_file(\n+        \"clippy_lints/src/lib.deprecated.rs\",\n+        update_mode,\n+        &gen_deprecated(deprecated_lints.iter()),\n+    );\n+\n+    let all_group_lints = usable_lints.iter().filter(|l| {\n+        matches!(\n+            &*l.group,\n+            \"correctness\" | \"suspicious\" | \"style\" | \"complexity\" | \"perf\"\n         )\n-        .changed;\n-    }\n+    });\n+    let content = gen_lint_group_list(\"all\", all_group_lints);\n+    process_file(\"clippy_lints/src/lib.register_all.rs\", update_mode, &content);\n \n-    if update_mode == UpdateMode::Check && file_change {\n-        println!(\n-            \"Not all lints defined properly. \\\n-             Please run `cargo dev update_lints` to make sure all lints are defined properly.\"\n+    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n+        let content = gen_lint_group_list(&lint_group, lints.iter());\n+        process_file(\n+            &format!(\"clippy_lints/src/lib.register_{}.rs\", lint_group),\n+            update_mode,\n+            &content,\n         );\n-        std::process::exit(1);\n     }\n }\n \n@@ -150,3 +168,538 @@ pub fn print_lints() {\n fn round_to_fifty(count: usize) -> usize {\n     count / 50 * 50\n }\n+\n+fn process_file(path: impl AsRef<Path>, update_mode: UpdateMode, content: &str) {\n+    if update_mode == UpdateMode::Check {\n+        let old_content =\n+            fs::read_to_string(&path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {}\", path.as_ref().display(), e));\n+        if content != old_content {\n+            exit_with_failure();\n+        }\n+    } else {\n+        fs::write(&path, content.as_bytes())\n+            .unwrap_or_else(|e| panic!(\"Cannot write to {}: {}\", path.as_ref().display(), e));\n+    }\n+}\n+\n+fn exit_with_failure() {\n+    println!(\n+        \"Not all lints defined properly. \\\n+                 Please run `cargo dev update_lints` to make sure all lints are defined properly.\"\n+    );\n+    std::process::exit(1);\n+}\n+\n+/// Lint data parsed from the Clippy source code.\n+#[derive(Clone, PartialEq, Debug)]\n+struct Lint {\n+    name: String,\n+    group: String,\n+    desc: String,\n+    deprecation: Option<String>,\n+    module: String,\n+}\n+\n+impl Lint {\n+    #[must_use]\n+    fn new(name: &str, group: &str, desc: &str, deprecation: Option<&str>, module: &str) -> Self {\n+        Self {\n+            name: name.to_lowercase(),\n+            group: group.to_string(),\n+            desc: NL_ESCAPE_RE.replace(&desc.replace(\"\\\\\\\"\", \"\\\"\"), \"\").to_string(),\n+            deprecation: deprecation.map(ToString::to_string),\n+            module: module.to_string(),\n+        }\n+    }\n+\n+    /// Returns all non-deprecated lints and non-internal lints\n+    #[must_use]\n+    fn usable_lints(lints: &[Self]) -> Vec<Self> {\n+        lints\n+            .iter()\n+            .filter(|l| l.deprecation.is_none() && !l.group.starts_with(\"internal\"))\n+            .cloned()\n+            .collect()\n+    }\n+\n+    /// Returns all internal lints (not `internal_warn` lints)\n+    #[must_use]\n+    fn internal_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.group == \"internal\").cloned().collect()\n+    }\n+\n+    /// Returns all deprecated lints\n+    #[must_use]\n+    fn deprecated_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.deprecation.is_some()).cloned().collect()\n+    }\n+\n+    /// Returns the lints in a `HashMap`, grouped by the different lint groups\n+    #[must_use]\n+    fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n+        lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n+    }\n+}\n+\n+/// Generates the code for registering a group\n+fn gen_lint_group_list<'a>(group_name: &str, lints: impl Iterator<Item = &'a Lint>) -> String {\n+    let mut details: Vec<_> = lints.map(|l| (&l.module, l.name.to_uppercase())).collect();\n+    details.sort_unstable();\n+\n+    let mut output = GENERATED_FILE_COMMENT.to_string();\n+\n+    output.push_str(&format!(\n+        \"store.register_group(true, \\\"clippy::{0}\\\", Some(\\\"clippy_{0}\\\"), vec![\\n\",\n+        group_name\n+    ));\n+    for (module, name) in details {\n+        output.push_str(&format!(\"    LintId::of({}::{}),\\n\", module, name));\n+    }\n+    output.push_str(\"])\\n\");\n+\n+    output\n+}\n+\n+/// Generates the module declarations for `lints`\n+#[must_use]\n+fn gen_modules_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n+    lints\n+        .map(|l| &l.module)\n+        .unique()\n+        .map(|module| format!(\"mod {};\", module))\n+        .sorted()\n+        .collect::<Vec<String>>()\n+}\n+\n+/// Generates the list of lint links at the bottom of the CHANGELOG\n+#[must_use]\n+fn gen_changelog_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n+    lints\n+        .sorted_by_key(|l| &l.name)\n+        .map(|l| format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n+        .collect()\n+}\n+\n+/// Generates the `register_removed` code\n+#[must_use]\n+fn gen_deprecated<'a>(lints: impl Iterator<Item = &'a Lint>) -> String {\n+    let mut output = GENERATED_FILE_COMMENT.to_string();\n+    output.push_str(\"{\\n\");\n+    for Lint { name, deprecation, .. } in lints {\n+        output.push_str(&format!(\n+            concat!(\n+                \"    store.register_removed(\\n\",\n+                \"        \\\"clippy::{}\\\",\\n\",\n+                \"        \\\"{}\\\",\\n\",\n+                \"    );\\n\"\n+            ),\n+            name,\n+            deprecation.as_ref().expect(\"`lints` are deprecated\")\n+        ));\n+    }\n+    output.push_str(\"}\\n\");\n+\n+    output\n+}\n+\n+/// Generates the code for registering lints\n+#[must_use]\n+fn gen_register_lint_list<'a>(\n+    internal_lints: impl Iterator<Item = &'a Lint>,\n+    usable_lints: impl Iterator<Item = &'a Lint>,\n+) -> String {\n+    let mut details: Vec<_> = internal_lints\n+        .map(|l| (false, &l.module, l.name.to_uppercase()))\n+        .chain(usable_lints.map(|l| (true, &l.module, l.name.to_uppercase())))\n+        .collect();\n+    details.sort_unstable();\n+\n+    let mut output = GENERATED_FILE_COMMENT.to_string();\n+    output.push_str(\"store.register_lints(&[\\n\");\n+\n+    for (is_public, module_name, lint_name) in details {\n+        if !is_public {\n+            output.push_str(\"    #[cfg(feature = \\\"internal-lints\\\")]\\n\");\n+        }\n+        output.push_str(&format!(\"    {}::{},\\n\", module_name, lint_name));\n+    }\n+    output.push_str(\"])\\n\");\n+\n+    output\n+}\n+\n+/// Gathers all files in `src/clippy_lints` and gathers all lints inside\n+fn gather_all() -> impl Iterator<Item = Lint> {\n+    lint_files().flat_map(|f| gather_from_file(&f))\n+}\n+\n+fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item = Lint> {\n+    let content = fs::read_to_string(dir_entry.path()).unwrap();\n+    let path = dir_entry.path();\n+    let filename = path.file_stem().unwrap();\n+    let path_buf = path.with_file_name(filename);\n+    let mut rel_path = path_buf\n+        .strip_prefix(clippy_project_root().join(\"clippy_lints/src\"))\n+        .expect(\"only files in `clippy_lints/src` should be looked at\");\n+    // If the lints are stored in mod.rs, we get the module name from\n+    // the containing directory:\n+    if filename == \"mod\" {\n+        rel_path = rel_path.parent().unwrap();\n+    }\n+\n+    let module = rel_path\n+        .components()\n+        .map(|c| c.as_os_str().to_str().unwrap())\n+        .collect::<Vec<_>>()\n+        .join(\"::\");\n+\n+    parse_contents(&content, &module)\n+}\n+\n+fn parse_contents(content: &str, module: &str) -> impl Iterator<Item = Lint> {\n+    let lints = DEC_CLIPPY_LINT_RE\n+        .captures_iter(content)\n+        .map(|m| Lint::new(&m[\"name\"], &m[\"cat\"], &m[\"desc\"], None, module));\n+    let deprecated = DEC_DEPRECATED_LINT_RE\n+        .captures_iter(content)\n+        .map(|m| Lint::new(&m[\"name\"], \"Deprecated\", &m[\"desc\"], Some(&m[\"desc\"]), module));\n+    // Removing the `.collect::<Vec<Lint>>().into_iter()` causes some lifetime issues due to the map\n+    lints.chain(deprecated).collect::<Vec<Lint>>().into_iter()\n+}\n+\n+/// Collects all .rs files in the `clippy_lints/src` directory\n+fn lint_files() -> impl Iterator<Item = walkdir::DirEntry> {\n+    // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n+    // Otherwise we would not collect all the lints, for example in `clippy_lints/src/methods/`.\n+    let path = clippy_project_root().join(\"clippy_lints/src\");\n+    WalkDir::new(path)\n+        .into_iter()\n+        .filter_map(Result::ok)\n+        .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n+}\n+\n+/// Whether a file has had its text changed or not\n+#[derive(PartialEq, Debug)]\n+struct FileChange {\n+    changed: bool,\n+    new_lines: String,\n+}\n+\n+/// Replaces a region in a file delimited by two lines matching regexes.\n+///\n+/// `path` is the relative path to the file on which you want to perform the replacement.\n+///\n+/// See `replace_region_in_text` for documentation of the other options.\n+///\n+/// # Panics\n+///\n+/// Panics if the path could not read or then written\n+fn replace_region_in_file<F>(\n+    path: &Path,\n+    start: &str,\n+    end: &str,\n+    replace_start: bool,\n+    write_back: bool,\n+    replacements: F,\n+) -> FileChange\n+where\n+    F: FnOnce() -> Vec<String>,\n+{\n+    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {}\", path.display(), e));\n+    let file_change = replace_region_in_text(&contents, start, end, replace_start, replacements);\n+\n+    if write_back {\n+        if let Err(e) = fs::write(path, file_change.new_lines.as_bytes()) {\n+            panic!(\"Cannot write to {}: {}\", path.display(), e);\n+        }\n+    }\n+    file_change\n+}\n+\n+/// Replaces a region in a text delimited by two lines matching regexes.\n+///\n+/// * `text` is the input text on which you want to perform the replacement\n+/// * `start` is a `&str` that describes the delimiter line before the region you want to replace.\n+///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n+/// * `end` is a `&str` that describes the delimiter line until where the replacement should happen.\n+///   As the `&str` will be converted to a `Regex`, this can contain regex syntax, too.\n+/// * If `replace_start` is true, the `start` delimiter line is replaced as well. The `end`\n+///   delimiter line is never replaced.\n+/// * `replacements` is a closure that has to return a `Vec<String>` which contains the new text.\n+///\n+/// If you want to perform the replacement on files instead of already parsed text,\n+/// use `replace_region_in_file`.\n+///\n+/// # Example\n+///\n+/// ```ignore\n+/// let the_text = \"replace_start\\nsome text\\nthat will be replaced\\nreplace_end\";\n+/// let result =\n+///     replace_region_in_text(the_text, \"replace_start\", \"replace_end\", false, || {\n+///         vec![\"a different\".to_string(), \"text\".to_string()]\n+///     })\n+///     .new_lines;\n+/// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n+/// ```\n+///\n+/// # Panics\n+///\n+/// Panics if start or end is not valid regex\n+fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange\n+where\n+    F: FnOnce() -> Vec<String>,\n+{\n+    let replace_it = replacements();\n+    let mut in_old_region = false;\n+    let mut found = false;\n+    let mut new_lines = vec![];\n+    let start = Regex::new(start).unwrap();\n+    let end = Regex::new(end).unwrap();\n+\n+    for line in text.lines() {\n+        if in_old_region {\n+            if end.is_match(line) {\n+                in_old_region = false;\n+                new_lines.extend(replace_it.clone());\n+                new_lines.push(line.to_string());\n+            }\n+        } else if start.is_match(line) {\n+            if !replace_start {\n+                new_lines.push(line.to_string());\n+            }\n+            in_old_region = true;\n+            found = true;\n+        } else {\n+            new_lines.push(line.to_string());\n+        }\n+    }\n+\n+    if !found {\n+        // This happens if the provided regex in `clippy_dev/src/main.rs` does not match in the\n+        // given text or file. Most likely this is an error on the programmer's side and the Regex\n+        // is incorrect.\n+        eprintln!(\"error: regex \\n{:?}\\ndoesn't match. You may have to update it.\", start);\n+        std::process::exit(1);\n+    }\n+\n+    let mut new_lines = new_lines.join(\"\\n\");\n+    if text.ends_with('\\n') {\n+        new_lines.push('\\n');\n+    }\n+    let changed = new_lines != text;\n+    FileChange { changed, new_lines }\n+}\n+\n+#[test]\n+fn test_parse_contents() {\n+    let result: Vec<Lint> = parse_contents(\n+        r#\"\n+declare_clippy_lint! {\n+    pub PTR_ARG,\n+    style,\n+    \"really long \\\n+     text\"\n+}\n+\n+declare_clippy_lint!{\n+    pub DOC_MARKDOWN,\n+    pedantic,\n+    \"single line\"\n+}\n+\n+/// some doc comment\n+declare_deprecated_lint! {\n+    pub SHOULD_ASSERT_EQ,\n+    \"`assert!()` will be more flexible with RFC 2011\"\n+}\n+    \"#,\n+        \"module_name\",\n+    )\n+    .collect();\n+\n+    let expected = vec![\n+        Lint::new(\"ptr_arg\", \"style\", \"really long text\", None, \"module_name\"),\n+        Lint::new(\"doc_markdown\", \"pedantic\", \"single line\", None, \"module_name\"),\n+        Lint::new(\n+            \"should_assert_eq\",\n+            \"Deprecated\",\n+            \"`assert!()` will be more flexible with RFC 2011\",\n+            Some(\"`assert!()` will be more flexible with RFC 2011\"),\n+            \"module_name\",\n+        ),\n+    ];\n+    assert_eq!(expected, result);\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_replace_region() {\n+        let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n+        let expected = FileChange {\n+            changed: true,\n+            new_lines: \"\\nabc\\nhello world\\ndef\\nghi\".to_string(),\n+        };\n+        let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, false, || {\n+            vec![\"hello world\".to_string()]\n+        });\n+        assert_eq!(expected, result);\n+    }\n+\n+    #[test]\n+    fn test_replace_region_with_start() {\n+        let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n+        let expected = FileChange {\n+            changed: true,\n+            new_lines: \"\\nhello world\\ndef\\nghi\".to_string(),\n+        };\n+        let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, true, || {\n+            vec![\"hello world\".to_string()]\n+        });\n+        assert_eq!(expected, result);\n+    }\n+\n+    #[test]\n+    fn test_replace_region_no_changes() {\n+        let text = \"123\\n456\\n789\";\n+        let expected = FileChange {\n+            changed: false,\n+            new_lines: \"123\\n456\\n789\".to_string(),\n+        };\n+        let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, Vec::new);\n+        assert_eq!(expected, result);\n+    }\n+\n+    #[test]\n+    fn test_usable_lints() {\n+        let lints = vec![\n+            Lint::new(\"should_assert_eq\", \"Deprecated\", \"abc\", Some(\"Reason\"), \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"Not Deprecated\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"internal\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"internal_style\", \"abc\", None, \"module_name\"),\n+        ];\n+        let expected = vec![Lint::new(\n+            \"should_assert_eq2\",\n+            \"Not Deprecated\",\n+            \"abc\",\n+            None,\n+            \"module_name\",\n+        )];\n+        assert_eq!(expected, Lint::usable_lints(&lints));\n+    }\n+\n+    #[test]\n+    fn test_by_lint_group() {\n+        let lints = vec![\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n+        ];\n+        let mut expected: HashMap<String, Vec<Lint>> = HashMap::new();\n+        expected.insert(\n+            \"group1\".to_string(),\n+            vec![\n+                Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+                Lint::new(\"incorrect_match\", \"group1\", \"abc\", None, \"module_name\"),\n+            ],\n+        );\n+        expected.insert(\n+            \"group2\".to_string(),\n+            vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")],\n+        );\n+        assert_eq!(expected, Lint::by_lint_group(lints.into_iter()));\n+    }\n+\n+    #[test]\n+    fn test_gen_changelog_lint_list() {\n+        let lints = vec![\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n+        ];\n+        let expected = vec![\n+            format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK.to_string()),\n+            format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string()),\n+        ];\n+        assert_eq!(expected, gen_changelog_lint_list(lints.iter()));\n+    }\n+\n+    #[test]\n+    fn test_gen_deprecated() {\n+        let lints = vec![\n+            Lint::new(\n+                \"should_assert_eq\",\n+                \"group1\",\n+                \"abc\",\n+                Some(\"has been superseded by should_assert_eq2\"),\n+                \"module_name\",\n+            ),\n+            Lint::new(\n+                \"another_deprecated\",\n+                \"group2\",\n+                \"abc\",\n+                Some(\"will be removed\"),\n+                \"module_name\",\n+            ),\n+        ];\n+\n+        let expected = GENERATED_FILE_COMMENT.to_string()\n+            + &[\n+                \"{\",\n+                \"    store.register_removed(\",\n+                \"        \\\"clippy::should_assert_eq\\\",\",\n+                \"        \\\"has been superseded by should_assert_eq2\\\",\",\n+                \"    );\",\n+                \"    store.register_removed(\",\n+                \"        \\\"clippy::another_deprecated\\\",\",\n+                \"        \\\"will be removed\\\",\",\n+                \"    );\",\n+                \"}\",\n+            ]\n+            .join(\"\\n\")\n+            + \"\\n\";\n+\n+        assert_eq!(expected, gen_deprecated(lints.iter()));\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_gen_deprecated_fail() {\n+        let lints = vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")];\n+        let _deprecated_lints = gen_deprecated(lints.iter());\n+    }\n+\n+    #[test]\n+    fn test_gen_modules_list() {\n+        let lints = vec![\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"incorrect_stuff\", \"group3\", \"abc\", None, \"another_module\"),\n+        ];\n+        let expected = vec![\"mod another_module;\".to_string(), \"mod module_name;\".to_string()];\n+        assert_eq!(expected, gen_modules_list(lints.iter()));\n+    }\n+\n+    #[test]\n+    fn test_gen_lint_group_list() {\n+        let lints = vec![\n+            Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+            Lint::new(\"internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n+        ];\n+        let expected = GENERATED_FILE_COMMENT.to_string()\n+            + &[\n+                \"store.register_group(true, \\\"clippy::group1\\\", Some(\\\"clippy_group1\\\"), vec![\",\n+                \"    LintId::of(module_name::ABC),\",\n+                \"    LintId::of(module_name::INTERNAL),\",\n+                \"    LintId::of(module_name::SHOULD_ASSERT_EQ),\",\n+                \"])\",\n+            ]\n+            .join(\"\\n\")\n+            + \"\\n\";\n+\n+        let result = gen_lint_group_list(\"group1\", lints.iter());\n+\n+        assert_eq!(expected, result);\n+    }\n+}"}, {"sha": "6f8b645dd70d1f7981633f304b2139dbfc4ac15b", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -563,7 +563,7 @@ fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute) {\n             skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym::skip;\n         // Only lint outer attributes, because custom inner attributes are unstable\n         // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n-        if let AttrStyle::Outer = attr.style;\n+        if attr.style == AttrStyle::Outer;\n         then {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "28615b9217cd342df10851a1a308409f6c36a693", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -16,7 +16,7 @@ declare_clippy_lint! {\n     /// The Mutex types found in std::sync and parking_lot\n     /// are not designed to operate in an async context across await points.\n     ///\n-    /// There are two potential solutions. One is to use an asynx-aware Mutex\n+    /// There are two potential solutions. One is to use an async-aware Mutex\n     /// type. Many asynchronous foundation crates provide such a Mutex type. The\n     /// other solution is to ensure the mutex is unlocked before calling await,\n     /// either by introducing a scope or an explicit call to Drop::drop."}, {"sha": "334e1646cd4fc964b256c55d920e4dd1323b590f", "filename": "clippy_lints/src/casts/cast_precision_loss.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -12,7 +12,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, ca\n     }\n \n     let from_nbits = utils::int_ty_to_nbits(cast_from, cx.tcx);\n-    let to_nbits = if let ty::Float(FloatTy::F32) = cast_to.kind() {\n+    let to_nbits = if cast_to.kind() == &ty::Float(FloatTy::F32) {\n         32\n     } else {\n         64"}, {"sha": "fdef0abe9708e34eb7d0f800d4bbc1b10d4b54fe", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -83,6 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n             if !attrs.iter().any(|attr| attr.doc_str().is_some());\n             if let child_attrs = cx.tcx.hir().attrs(impl_item_hir);\n             if !child_attrs.iter().any(|attr| attr.doc_str().is_some());\n+            if adt_def.is_struct();\n             then {\n                 if let TyKind::Path(QPath::Resolved(_, p)) = self_ty.kind {\n                     if let Some(PathSegment { args: Some(a), .. }) = p.segments.last() {"}, {"sha": "24ac5917dcb0521350e0072234bee02982e58f7a", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -393,7 +393,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n \n         if_chain! {\n             if let Some(header) = kind.header();\n-            if let Unsafety::Unsafe = header.unsafety;\n+            if header.unsafety == Unsafety::Unsafe;\n             then {\n                 self.has_unsafe = true;\n             }\n@@ -408,7 +408,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n         }\n \n         if let ExprKind::Block(block, _) = expr.kind {\n-            if let BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) = block.rules {\n+            if block.rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) {\n                 self.has_unsafe = true;\n             }\n         }"}, {"sha": "9840affbf6fd81b978a00e2e17a0d1a0a564690c", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -236,7 +236,17 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n             hir::ItemKind::Impl(ref impl_) => {\n                 self.in_trait_impl = impl_.of_trait.is_some();\n             },\n-            _ => {},\n+            hir::ItemKind::Trait(_, unsafety, ..) => {\n+                if !headers.safety && unsafety == hir::Unsafety::Unsafe {\n+                    span_lint(\n+                        cx,\n+                        MISSING_SAFETY_DOC,\n+                        item.span,\n+                        \"docs for unsafe trait missing `# Safety` section\",\n+                    );\n+                }\n+            },\n+            _ => (),\n         }\n     }\n \n@@ -396,6 +406,15 @@ struct DocHeaders {\n }\n \n fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &'a [Attribute]) -> DocHeaders {\n+    use pulldown_cmark::{BrokenLink, CowStr, Options};\n+    /// We don't want the parser to choke on intra doc links. Since we don't\n+    /// actually care about rendering them, just pretend that all broken links are\n+    /// point to a fake address.\n+    #[allow(clippy::unnecessary_wraps)] // we're following a type signature\n+    fn fake_broken_link_callback<'a>(_: BrokenLink<'_>) -> Option<(CowStr<'a>, CowStr<'a>)> {\n+        Some((\"fake\".into(), \"fake\".into()))\n+    }\n+\n     let mut doc = String::new();\n     let mut spans = vec![];\n \n@@ -430,7 +449,10 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n         };\n     }\n \n-    let parser = pulldown_cmark::Parser::new(&doc).into_offset_iter();\n+    let mut cb = fake_broken_link_callback;\n+\n+    let parser =\n+        pulldown_cmark::Parser::new_with_broken_link_callback(&doc, Options::empty(), Some(&mut cb)).into_offset_iter();\n     // Iterate over all `Events` and combine consecutive events into one\n     let events = parser.coalesce(|previous, current| {\n         use pulldown_cmark::Event::Text;"}, {"sha": "0c6ba91c9430b9db1024c62276d96dab17b4a3d9", "filename": "clippy_lints/src/equatable_if_let.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,100 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::implements_trait;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, Pat, PatKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::Ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for pattern matchings that can be expressed using equality.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// * It reads better and has less cognitive load because equality won't cause binding.\n+    /// * It is a [Yoda condition](https://en.wikipedia.org/wiki/Yoda_conditions). Yoda conditions are widely\n+    /// criticized for increasing the cognitive load of reading the code.\n+    /// * Equality is a simple bool expression and can be merged with `&&` and `||` and\n+    /// reuse if blocks\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// if let Some(2) = x {\n+    ///     do_thing();\n+    /// }\n+    /// ```\n+    /// Should be written\n+    /// ```rust,ignore\n+    /// if x == Some(2) {\n+    ///     do_thing();\n+    /// }\n+    /// ```\n+    pub EQUATABLE_IF_LET,\n+    nursery,\n+    \"using pattern matching instead of equality\"\n+}\n+\n+declare_lint_pass!(PatternEquality => [EQUATABLE_IF_LET]);\n+\n+/// detects if pattern matches just one thing\n+fn unary_pattern(pat: &Pat<'_>) -> bool {\n+    fn array_rec(pats: &[Pat<'_>]) -> bool {\n+        pats.iter().all(unary_pattern)\n+    }\n+    match &pat.kind {\n+        PatKind::Slice(_, _, _) | PatKind::Range(_, _, _) | PatKind::Binding(..) | PatKind::Wild | PatKind::Or(_) => {\n+            false\n+        },\n+        PatKind::Struct(_, a, etc) => !etc && a.iter().all(|x| unary_pattern(x.pat)),\n+        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => !etc.is_some() && array_rec(a),\n+        PatKind::Ref(x, _) | PatKind::Box(x) => unary_pattern(x),\n+        PatKind::Path(_) | PatKind::Lit(_) => true,\n+    }\n+}\n+\n+fn is_structural_partial_eq(cx: &LateContext<'tcx>, ty: Ty<'tcx>, other: Ty<'tcx>) -> bool {\n+    if let Some(def_id) = cx.tcx.lang_items().eq_trait() {\n+        implements_trait(cx, ty, def_id, &[other.into()])\n+    } else {\n+        false\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for PatternEquality {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if_chain! {\n+            if let ExprKind::Let(pat, exp, _) = expr.kind;\n+            if unary_pattern(pat);\n+            let exp_ty = cx.typeck_results().expr_ty(exp);\n+            let pat_ty = cx.typeck_results().pat_ty(pat);\n+            if is_structural_partial_eq(cx, exp_ty, pat_ty);\n+            then {\n+\n+                let mut applicability = Applicability::MachineApplicable;\n+                let pat_str = match pat.kind {\n+                    PatKind::Struct(..) => format!(\n+                        \"({})\",\n+                        snippet_with_applicability(cx, pat.span, \"..\", &mut applicability),\n+                    ),\n+                    _ => snippet_with_applicability(cx, pat.span, \"..\", &mut applicability).to_string(),\n+                };\n+                span_lint_and_sugg(\n+                    cx,\n+                    EQUATABLE_IF_LET,\n+                    expr.span,\n+                    \"this pattern matching can be expressed using equality\",\n+                    \"try\",\n+                    format!(\n+                        \"{} == {}\",\n+                        snippet_with_applicability(cx, exp.span, \"..\", &mut applicability),\n+                        pat_str,\n+                    ),\n+                    applicability,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "d0944c37cf5f76b42948e55fe2e18070fc6681c4", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for ErasingOp {\n }\n \n fn check(cx: &LateContext<'_>, e: &Expr<'_>, span: Span) {\n-    if let Some(Constant::Int(0)) = constant_simple(cx, cx.typeck_results(), e) {\n+    if constant_simple(cx, cx.typeck_results(), e) == Some(Constant::Int(0)) {\n         span_lint(\n             cx,\n             ERASING_OP,"}, {"sha": "75b1c882c233628ca4e4fd89f769dc1fc25b6e81", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n                 for trait_item in items {\n                     if trait_item.id.hir_id() == hir_id {\n                         // be sure we have `self` parameter in this function\n-                        if let AssocItemKind::Fn { has_self: true } = trait_item.kind {\n+                        if trait_item.kind == (AssocItemKind::Fn { has_self: true }) {\n                             trait_self_ty = Some(\n                                 TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id())\n                                     .self_ty()"}, {"sha": "765a6c7585a20a6ee3b5f4d09bd6f5b0319396ab", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -116,7 +116,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n                     if let Some(mut snippet) = snippet_opt(cx, callee.span) {\n                         if_chain! {\n                             if let ty::Closure(_, substs) = callee_ty.peel_refs().kind();\n-                            if let ClosureKind::FnMut = substs.as_closure().kind();\n+                            if substs.as_closure().kind() == ClosureKind::FnMut;\n                             if get_enclosing_loop_or_closure(cx.tcx, expr).is_some()\n                                 || UsedAfterExprVisitor::is_found(cx, callee);\n "}, {"sha": "1b56dd4b081775c685de8a295d1ce6c715f02ed3", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n                 match typ.kind() {\n                     ty::FnDef(..) | ty::FnPtr(_) => {\n                         let sig = typ.fn_sig(self.cx.tcx);\n-                        if let ty::Never = self.cx.tcx.erase_late_bound_regions(sig).output().kind() {\n+                        if self.cx.tcx.erase_late_bound_regions(sig).output().kind() == &ty::Never {\n                             self.report_diverging_sub_expr(e);\n                         }\n                     },"}, {"sha": "8df7f91ce59f50fe6f7a7ca3bfe7b1762978572e", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -112,7 +112,7 @@ fn is_display_arg(expr: &Expr<'_>) -> bool {\n         if let ExprKind::Call(_, [_, fmt]) = expr.kind;\n         if let ExprKind::Path(QPath::Resolved(_, path)) = fmt.kind;\n         if let [.., t, _] = path.segments;\n-        if t.ident.name.as_str() == \"Display\";\n+        if t.ident.name == sym::Display;\n         then { true } else { false }\n     }\n }"}, {"sha": "73bdd67ff5d25a864b88c23055d7e8cec1b63c18", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::source::snippet;\n-use if_chain::if_chain;\n use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -62,16 +61,9 @@ impl<'tcx> LateLintPass<'tcx> for IdentityOp {\n \n fn is_allowed(cx: &LateContext<'_>, cmp: BinOp, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n     // `1 << 0` is a common pattern in bit manipulation code\n-    if_chain! {\n-        if let BinOpKind::Shl = cmp.node;\n-        if let Some(Constant::Int(0)) = constant_simple(cx, cx.typeck_results(), right);\n-        if let Some(Constant::Int(1)) = constant_simple(cx, cx.typeck_results(), left);\n-        then {\n-            return true;\n-        }\n-    }\n-\n-    false\n+    cmp.node == BinOpKind::Shl\n+        && constant_simple(cx, cx.typeck_results(), right) == Some(Constant::Int(0))\n+        && constant_simple(cx, cx.typeck_results(), left) == Some(Constant::Int(1))\n }\n \n #[allow(clippy::cast_possible_wrap)]"}, {"sha": "10bca59e6d06ab5da76ebe19bbba10020f50f9a8", "filename": "clippy_lints/src/if_then_panic.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fif_then_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fif_then_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_panic.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::higher::PanicExpn;\n-use clippy_utils::is_expn_of;\n use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{is_expn_of, sugg};\n use rustc_errors::Applicability;\n use rustc_hir::{Block, Expr, ExprKind, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -74,12 +74,14 @@ impl LateLintPass<'_> for IfThenPanic {\n                 };\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = snippet_with_applicability(cx, span, \"..\", &mut applicability);\n-\n-                let cond_sugg =\n-                if let ExprKind::DropTemps(Expr{kind: ExprKind::Unary(UnOp::Not, not_expr), ..}) = cond.kind {\n-                    snippet_with_applicability(cx, not_expr.span, \"..\", &mut applicability).to_string()\n+                let cond_sugg = if let ExprKind::DropTemps(e, ..) = cond.kind {\n+                    if let Expr{kind: ExprKind::Unary(UnOp::Not, not_expr), ..} = e {\n+                         sugg::Sugg::hir_with_applicability(cx, not_expr, \"..\", &mut applicability).maybe_par().to_string()\n+                    } else {\n+                       format!(\"!{}\", sugg::Sugg::hir_with_applicability(cx, e, \"..\", &mut applicability).maybe_par().to_string())\n+                    }\n                 } else {\n-                    format!(\"!{}\", snippet_with_applicability(cx, cond.span, \"..\", &mut applicability))\n+                   format!(\"!{}\", sugg::Sugg::hir_with_applicability(cx, cond, \"..\", &mut applicability).maybe_par().to_string())\n                 };\n \n                 span_lint_and_sugg("}, {"sha": "81eb51e6f7cee304c034b367544f32eaa0268846", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -167,12 +167,20 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                             continue;\n                         }\n                         let generics_suggestion_span = generics.span.substitute_dummy({\n-                            let pos = snippet_opt(cx, item.span.until(body.params[0].pat.span))\n-                                .and_then(|snip| {\n-                                    let i = snip.find(\"fn\")?;\n-                                    Some(item.span.lo() + BytePos((i + (&snip[i..]).find('(')?) as u32))\n-                                })\n-                                .expect(\"failed to create span for type parameters\");\n+                            let pos = snippet_opt(\n+                                cx,\n+                                Span::new(\n+                                    item.span.lo(),\n+                                    body.params[0].pat.span.lo(),\n+                                    item.span.ctxt(),\n+                                    item.span.parent(),\n+                                ),\n+                            )\n+                            .and_then(|snip| {\n+                                let i = snip.find(\"fn\")?;\n+                                Some(item.span.lo() + BytePos((i + (&snip[i..]).find('(')?) as u32))\n+                            })\n+                            .expect(\"failed to create span for type parameters\");\n                             Span::new(pos, pos, item.span.ctxt(), item.span.parent())\n                         });\n "}, {"sha": "c962e814fa5c2eb33af2e3d110857afe409f3bea", "filename": "clippy_lints/src/integer_division.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finteger_division.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for IntegerDivision {\n fn is_integer_division<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) -> bool {\n     if_chain! {\n         if let hir::ExprKind::Binary(binop, left, right) = &expr.kind;\n-        if let hir::BinOpKind::Div = &binop.node;\n+        if binop.node == hir::BinOpKind::Div;\n         then {\n             let (left_ty, right_ty) = (cx.typeck_results().expr_ty(left), cx.typeck_results().expr_ty(right));\n             return left_ty.is_integral() && right_ty.is_integral();"}, {"sha": "392166237be50eb8fd785afd57902d58c0874c24", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 98, "deletions": 63, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,13 +1,14 @@\n //! lint when there is a large size difference between variants on an enum\n \n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::source::snippet_opt;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n-use rustc_hir::{Item, ItemKind, VariantData};\n+use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -58,6 +59,17 @@ impl LargeEnumVariant {\n     }\n }\n \n+struct FieldInfo {\n+    ind: usize,\n+    size: u64,\n+}\n+\n+struct VariantInfo {\n+    ind: usize,\n+    size: u64,\n+    fields_size: Vec<FieldInfo>,\n+}\n+\n impl_lint_pass!(LargeEnumVariant => [LARGE_ENUM_VARIANT]);\n \n impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n@@ -68,72 +80,95 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n         if let ItemKind::Enum(ref def, _) = item.kind {\n             let ty = cx.tcx.type_of(item.def_id);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n-\n-            let mut largest_variant: Option<(_, _)> = None;\n-            let mut second_variant: Option<(_, _)> = None;\n-\n-            for (i, variant) in adt.variants.iter().enumerate() {\n-                let size: u64 = variant\n-                    .fields\n-                    .iter()\n-                    .filter_map(|f| {\n-                        let ty = cx.tcx.type_of(f.did);\n-                        // don't count generics by filtering out everything\n-                        // that does not have a layout\n-                        cx.layout_of(ty).ok().map(|l| l.size.bytes())\n-                    })\n-                    .sum();\n-\n-                let grouped = (size, (i, variant));\n-\n-                if grouped.0 >= largest_variant.map_or(0, |x| x.0) {\n-                    second_variant = largest_variant;\n-                    largest_variant = Some(grouped);\n-                }\n+            if adt.variants.len() <= 1 {\n+                return;\n             }\n+            let mut variants_size: Vec<VariantInfo> = adt\n+                .variants\n+                .iter()\n+                .enumerate()\n+                .map(|(i, variant)| {\n+                    let mut fields_size = Vec::new();\n+                    let size: u64 = variant\n+                        .fields\n+                        .iter()\n+                        .enumerate()\n+                        .filter_map(|(i, f)| {\n+                            let ty = cx.tcx.type_of(f.did);\n+                            // don't count generics by filtering out everything\n+                            // that does not have a layout\n+                            cx.layout_of(ty).ok().map(|l| {\n+                                let size = l.size.bytes();\n+                                fields_size.push(FieldInfo { ind: i, size });\n+                                size\n+                            })\n+                        })\n+                        .sum();\n+                    VariantInfo {\n+                        ind: i,\n+                        size,\n+                        fields_size,\n+                    }\n+                })\n+                .collect();\n \n-            if let (Some(largest), Some(second)) = (largest_variant, second_variant) {\n-                let difference = largest.0 - second.0;\n+            variants_size.sort_by(|a, b| (b.size.cmp(&a.size)));\n \n-                if difference > self.maximum_size_difference_allowed {\n-                    let (i, variant) = largest.1;\n+            let mut difference = variants_size[0].size - variants_size[1].size;\n+            if difference > self.maximum_size_difference_allowed {\n+                let help_text = \"consider boxing the large fields to reduce the total size of the enum\";\n+                span_lint_and_then(\n+                    cx,\n+                    LARGE_ENUM_VARIANT,\n+                    def.variants[variants_size[0].ind].span,\n+                    \"large size difference between variants\",\n+                    |diag| {\n+                        diag.span_label(\n+                            def.variants[variants_size[0].ind].span,\n+                            &format!(\"this variant is {} bytes\", variants_size[0].size),\n+                        );\n+                        diag.span_note(\n+                            def.variants[variants_size[1].ind].span,\n+                            &format!(\"and the second-largest variant is {} bytes:\", variants_size[1].size),\n+                        );\n \n-                    let help_text = \"consider boxing the large fields to reduce the total size of the enum\";\n-                    span_lint_and_then(\n-                        cx,\n-                        LARGE_ENUM_VARIANT,\n-                        def.variants[i].span,\n-                        \"large size difference between variants\",\n-                        |diag| {\n-                            diag.span_label(\n-                                def.variants[(largest.1).0].span,\n-                                &format!(\"this variant is {} bytes\", largest.0),\n-                            );\n-                            diag.span_note(\n-                                def.variants[(second.1).0].span,\n-                                &format!(\"and the second-largest variant is {} bytes:\", second.0),\n-                            );\n-                            if variant.fields.len() == 1 {\n-                                let span = match def.variants[i].data {\n-                                    VariantData::Struct(fields, ..) | VariantData::Tuple(fields, ..) => {\n-                                        fields[0].ty.span\n-                                    },\n-                                    VariantData::Unit(..) => unreachable!(),\n-                                };\n-                                if let Some(snip) = snippet_opt(cx, span) {\n-                                    diag.span_suggestion(\n-                                        span,\n-                                        help_text,\n-                                        format!(\"Box<{}>\", snip),\n-                                        Applicability::MaybeIncorrect,\n-                                    );\n-                                    return;\n+                        let fields = def.variants[variants_size[0].ind].data.fields();\n+                        variants_size[0].fields_size.sort_by(|a, b| (a.size.cmp(&b.size)));\n+                        let mut applicability = Applicability::MaybeIncorrect;\n+                        let sugg: Vec<(Span, String)> = variants_size[0]\n+                            .fields_size\n+                            .iter()\n+                            .rev()\n+                            .map_while(|val| {\n+                                if difference > self.maximum_size_difference_allowed {\n+                                    difference = difference.saturating_sub(val.size);\n+                                    Some((\n+                                        fields[val.ind].ty.span,\n+                                        format!(\n+                                            \"Box<{}>\",\n+                                            snippet_with_applicability(\n+                                                cx,\n+                                                fields[val.ind].ty.span,\n+                                                \"..\",\n+                                                &mut applicability\n+                                            )\n+                                            .into_owned()\n+                                        ),\n+                                    ))\n+                                } else {\n+                                    None\n                                 }\n-                            }\n-                            diag.span_help(def.variants[i].span, help_text);\n-                        },\n-                    );\n-                }\n+                            })\n+                            .collect();\n+\n+                        if !sugg.is_empty() {\n+                            diag.multipart_suggestion(help_text, sugg, Applicability::MaybeIncorrect);\n+                            return;\n+                        }\n+\n+                        diag.span_help(def.variants[variants_size[0].ind].span, help_text);\n+                    },\n+                );\n             }\n         }\n     }"}, {"sha": "f336fb9d42f88be86071b100ee85a83e0f6c44f7", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -455,14 +455,10 @@ fn is_empty_array(expr: &Expr<'_>) -> bool {\n fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_>, item: &ty::AssocItem) -> bool {\n-        if let ty::AssocKind::Fn = item.kind {\n-            if item.ident.name.as_str() == \"is_empty\" {\n-                let sig = cx.tcx.fn_sig(item.def_id);\n-                let ty = sig.skip_binder();\n-                ty.inputs().len() == 1\n-            } else {\n-                false\n-            }\n+        if item.kind == ty::AssocKind::Fn && item.ident.name.as_str() == \"is_empty\" {\n+            let sig = cx.tcx.fn_sig(item.def_id);\n+            let ty = sig.skip_binder();\n+            ty.inputs().len() == 1\n         } else {\n             false\n         }"}, {"sha": "80bde1b11384bcdac112af06f27f88b63526dadb", "filename": "clippy_lints/src/lib.deprecated.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.deprecated.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,70 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+{\n+    store.register_removed(\n+        \"clippy::should_assert_eq\",\n+        \"`assert!()` will be more flexible with RFC 2011\",\n+    );\n+    store.register_removed(\n+        \"clippy::extend_from_slice\",\n+        \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\",\n+    );\n+    store.register_removed(\n+        \"clippy::range_step_by_zero\",\n+        \"`iterator.step_by(0)` panics nowadays\",\n+    );\n+    store.register_removed(\n+        \"clippy::unstable_as_slice\",\n+        \"`Vec::as_slice` has been stabilized in 1.7\",\n+    );\n+    store.register_removed(\n+        \"clippy::unstable_as_mut_slice\",\n+        \"`Vec::as_mut_slice` has been stabilized in 1.7\",\n+    );\n+    store.register_removed(\n+        \"clippy::misaligned_transmute\",\n+        \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\",\n+    );\n+    store.register_removed(\n+        \"clippy::assign_ops\",\n+        \"using compound assignment operators (e.g., `+=`) is harmless\",\n+    );\n+    store.register_removed(\n+        \"clippy::if_let_redundant_pattern_matching\",\n+        \"this lint has been changed to redundant_pattern_matching\",\n+    );\n+    store.register_removed(\n+        \"clippy::unsafe_vector_initialization\",\n+        \"the replacement suggested by this lint had substantially different behavior\",\n+    );\n+    store.register_removed(\n+        \"clippy::unused_collect\",\n+        \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\",\n+    );\n+    store.register_removed(\n+        \"clippy::replace_consts\",\n+        \"associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\",\n+    );\n+    store.register_removed(\n+        \"clippy::regex_macro\",\n+        \"the regex! macro has been removed from the regex crate in 2018\",\n+    );\n+    store.register_removed(\n+        \"clippy::find_map\",\n+        \"this lint has been replaced by `manual_find_map`, a more specific lint\",\n+    );\n+    store.register_removed(\n+        \"clippy::filter_map\",\n+        \"this lint has been replaced by `manual_filter_map`, a more specific lint\",\n+    );\n+    store.register_removed(\n+        \"clippy::pub_enum_variant_names\",\n+        \"set the `avoid-breaking-exported-api` config option to `false` to enable the `enum_variant_names` lint for public items\",\n+    );\n+    store.register_removed(\n+        \"clippy::wrong_pub_self_convention\",\n+        \"set the `avoid-breaking-exported-api` config option to `false` to enable the `wrong_self_convention` lint for public items\",\n+    );\n+}"}, {"sha": "3e6e0244754fbc36de70b56eaba31e16ea363cc8", "filename": "clippy_lints/src/lib.register_all.rs", "status": "added", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,304 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n+    LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n+    LintId::of(approx_const::APPROX_CONSTANT),\n+    LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n+    LintId::of(assign_ops::ASSIGN_OP_PATTERN),\n+    LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n+    LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n+    LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n+    LintId::of(attrs::DEPRECATED_CFG_ATTR),\n+    LintId::of(attrs::DEPRECATED_SEMVER),\n+    LintId::of(attrs::MISMATCHED_TARGET_OS),\n+    LintId::of(attrs::USELESS_ATTRIBUTE),\n+    LintId::of(bit_mask::BAD_BIT_MASK),\n+    LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n+    LintId::of(blacklisted_name::BLACKLISTED_NAME),\n+    LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n+    LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n+    LintId::of(booleans::LOGIC_BUG),\n+    LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(casts::CAST_REF_TO_MUT),\n+    LintId::of(casts::CHAR_LIT_AS_U8),\n+    LintId::of(casts::FN_TO_NUMERIC_CAST),\n+    LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n+    LintId::of(casts::UNNECESSARY_CAST),\n+    LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n+    LintId::of(collapsible_if::COLLAPSIBLE_IF),\n+    LintId::of(collapsible_match::COLLAPSIBLE_MATCH),\n+    LintId::of(comparison_chain::COMPARISON_CHAIN),\n+    LintId::of(copies::IFS_SAME_COND),\n+    LintId::of(copies::IF_SAME_THEN_ELSE),\n+    LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n+    LintId::of(derivable_impls::DERIVABLE_IMPLS),\n+    LintId::of(derive::DERIVE_HASH_XOR_EQ),\n+    LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n+    LintId::of(doc::MISSING_SAFETY_DOC),\n+    LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n+    LintId::of(double_comparison::DOUBLE_COMPARISONS),\n+    LintId::of(double_parens::DOUBLE_PARENS),\n+    LintId::of(drop_forget_ref::DROP_COPY),\n+    LintId::of(drop_forget_ref::DROP_REF),\n+    LintId::of(drop_forget_ref::FORGET_COPY),\n+    LintId::of(drop_forget_ref::FORGET_REF),\n+    LintId::of(duration_subsec::DURATION_SUBSEC),\n+    LintId::of(entry::MAP_ENTRY),\n+    LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n+    LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n+    LintId::of(enum_variants::MODULE_INCEPTION),\n+    LintId::of(eq_op::EQ_OP),\n+    LintId::of(eq_op::OP_REF),\n+    LintId::of(erasing_op::ERASING_OP),\n+    LintId::of(escape::BOXED_LOCAL),\n+    LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n+    LintId::of(eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n+    LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n+    LintId::of(explicit_write::EXPLICIT_WRITE),\n+    LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n+    LintId::of(float_literal::EXCESSIVE_PRECISION),\n+    LintId::of(format::USELESS_FORMAT),\n+    LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n+    LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n+    LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n+    LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+    LintId::of(from_over_into::FROM_OVER_INTO),\n+    LintId::of(from_str_radix_10::FROM_STR_RADIX_10),\n+    LintId::of(functions::DOUBLE_MUST_USE),\n+    LintId::of(functions::MUST_USE_UNIT),\n+    LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n+    LintId::of(functions::RESULT_UNIT_ERR),\n+    LintId::of(functions::TOO_MANY_ARGUMENTS),\n+    LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n+    LintId::of(identity_op::IDENTITY_OP),\n+    LintId::of(if_let_mutex::IF_LET_MUTEX),\n+    LintId::of(if_then_panic::IF_THEN_PANIC),\n+    LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n+    LintId::of(infinite_iter::INFINITE_ITER),\n+    LintId::of(inherent_to_string::INHERENT_TO_STRING),\n+    LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n+    LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n+    LintId::of(int_plus_one::INT_PLUS_ONE),\n+    LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n+    LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n+    LintId::of(len_zero::COMPARISON_TO_EMPTY),\n+    LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n+    LintId::of(len_zero::LEN_ZERO),\n+    LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n+    LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n+    LintId::of(lifetimes::NEEDLESS_LIFETIMES),\n+    LintId::of(literal_representation::INCONSISTENT_DIGIT_GROUPING),\n+    LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n+    LintId::of(literal_representation::UNUSUAL_BYTE_GROUPINGS),\n+    LintId::of(loops::EMPTY_LOOP),\n+    LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n+    LintId::of(loops::FOR_KV_MAP),\n+    LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n+    LintId::of(loops::ITER_NEXT_LOOP),\n+    LintId::of(loops::MANUAL_FLATTEN),\n+    LintId::of(loops::MANUAL_MEMCPY),\n+    LintId::of(loops::MUT_RANGE_BOUND),\n+    LintId::of(loops::NEEDLESS_COLLECT),\n+    LintId::of(loops::NEEDLESS_RANGE_LOOP),\n+    LintId::of(loops::NEVER_LOOP),\n+    LintId::of(loops::SAME_ITEM_PUSH),\n+    LintId::of(loops::SINGLE_ELEMENT_LOOP),\n+    LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n+    LintId::of(loops::WHILE_LET_LOOP),\n+    LintId::of(loops::WHILE_LET_ON_ITERATOR),\n+    LintId::of(main_recursion::MAIN_RECURSION),\n+    LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n+    LintId::of(manual_map::MANUAL_MAP),\n+    LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n+    LintId::of(manual_strip::MANUAL_STRIP),\n+    LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n+    LintId::of(map_clone::MAP_CLONE),\n+    LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n+    LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n+    LintId::of(match_result_ok::MATCH_RESULT_OK),\n+    LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n+    LintId::of(matches::MATCH_AS_REF),\n+    LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n+    LintId::of(matches::MATCH_OVERLAPPING_ARM),\n+    LintId::of(matches::MATCH_REF_PATS),\n+    LintId::of(matches::MATCH_SINGLE_BINDING),\n+    LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n+    LintId::of(matches::SINGLE_MATCH),\n+    LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n+    LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n+    LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n+    LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n+    LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n+    LintId::of(methods::BIND_INSTEAD_OF_MAP),\n+    LintId::of(methods::BYTES_NTH),\n+    LintId::of(methods::CHARS_LAST_CMP),\n+    LintId::of(methods::CHARS_NEXT_CMP),\n+    LintId::of(methods::CLONE_DOUBLE_REF),\n+    LintId::of(methods::CLONE_ON_COPY),\n+    LintId::of(methods::EXPECT_FUN_CALL),\n+    LintId::of(methods::EXTEND_WITH_DRAIN),\n+    LintId::of(methods::FILTER_MAP_IDENTITY),\n+    LintId::of(methods::FILTER_NEXT),\n+    LintId::of(methods::FLAT_MAP_IDENTITY),\n+    LintId::of(methods::INSPECT_FOR_EACH),\n+    LintId::of(methods::INTO_ITER_ON_REF),\n+    LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n+    LintId::of(methods::ITER_CLONED_COLLECT),\n+    LintId::of(methods::ITER_COUNT),\n+    LintId::of(methods::ITER_NEXT_SLICE),\n+    LintId::of(methods::ITER_NTH),\n+    LintId::of(methods::ITER_NTH_ZERO),\n+    LintId::of(methods::ITER_SKIP_NEXT),\n+    LintId::of(methods::MANUAL_FILTER_MAP),\n+    LintId::of(methods::MANUAL_FIND_MAP),\n+    LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n+    LintId::of(methods::MANUAL_SPLIT_ONCE),\n+    LintId::of(methods::MANUAL_STR_REPEAT),\n+    LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n+    LintId::of(methods::MAP_IDENTITY),\n+    LintId::of(methods::NEW_RET_NO_SELF),\n+    LintId::of(methods::OK_EXPECT),\n+    LintId::of(methods::OPTION_AS_REF_DEREF),\n+    LintId::of(methods::OPTION_FILTER_MAP),\n+    LintId::of(methods::OPTION_MAP_OR_NONE),\n+    LintId::of(methods::OR_FUN_CALL),\n+    LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n+    LintId::of(methods::SEARCH_IS_SOME),\n+    LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),\n+    LintId::of(methods::SINGLE_CHAR_ADD_STR),\n+    LintId::of(methods::SINGLE_CHAR_PATTERN),\n+    LintId::of(methods::SKIP_WHILE_NEXT),\n+    LintId::of(methods::STRING_EXTEND_CHARS),\n+    LintId::of(methods::SUSPICIOUS_MAP),\n+    LintId::of(methods::SUSPICIOUS_SPLITN),\n+    LintId::of(methods::UNINIT_ASSUMED_INIT),\n+    LintId::of(methods::UNNECESSARY_FILTER_MAP),\n+    LintId::of(methods::UNNECESSARY_FOLD),\n+    LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n+    LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n+    LintId::of(methods::USELESS_ASREF),\n+    LintId::of(methods::WRONG_SELF_CONVENTION),\n+    LintId::of(methods::ZST_OFFSET),\n+    LintId::of(minmax::MIN_MAX),\n+    LintId::of(misc::CMP_NAN),\n+    LintId::of(misc::CMP_OWNED),\n+    LintId::of(misc::MODULO_ONE),\n+    LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n+    LintId::of(misc::TOPLEVEL_REF_ARG),\n+    LintId::of(misc::ZERO_PTR),\n+    LintId::of(misc_early::BUILTIN_TYPE_SHADOW),\n+    LintId::of(misc_early::DOUBLE_NEG),\n+    LintId::of(misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n+    LintId::of(misc_early::MIXED_CASE_HEX_LITERALS),\n+    LintId::of(misc_early::REDUNDANT_PATTERN),\n+    LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n+    LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n+    LintId::of(mut_key::MUTABLE_KEY_TYPE),\n+    LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n+    LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n+    LintId::of(mutex_atomic::MUTEX_ATOMIC),\n+    LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n+    LintId::of(needless_bool::BOOL_COMPARISON),\n+    LintId::of(needless_bool::NEEDLESS_BOOL),\n+    LintId::of(needless_borrow::NEEDLESS_BORROW),\n+    LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n+    LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n+    LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n+    LintId::of(needless_update::NEEDLESS_UPDATE),\n+    LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n+    LintId::of(neg_multiply::NEG_MULTIPLY),\n+    LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n+    LintId::of(no_effect::NO_EFFECT),\n+    LintId::of(no_effect::UNNECESSARY_OPERATION),\n+    LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n+    LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n+    LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n+    LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n+    LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n+    LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n+    LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n+    LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n+    LintId::of(precedence::PRECEDENCE),\n+    LintId::of(ptr::CMP_NULL),\n+    LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n+    LintId::of(ptr::MUT_FROM_REF),\n+    LintId::of(ptr::PTR_ARG),\n+    LintId::of(ptr_eq::PTR_EQ),\n+    LintId::of(ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n+    LintId::of(question_mark::QUESTION_MARK),\n+    LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n+    LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n+    LintId::of(ranges::REVERSED_EMPTY_RANGES),\n+    LintId::of(redundant_clone::REDUNDANT_CLONE),\n+    LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n+    LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),\n+    LintId::of(redundant_slicing::REDUNDANT_SLICING),\n+    LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n+    LintId::of(reference::DEREF_ADDROF),\n+    LintId::of(reference::REF_IN_DEREF),\n+    LintId::of(regex::INVALID_REGEX),\n+    LintId::of(repeat_once::REPEAT_ONCE),\n+    LintId::of(returns::LET_AND_RETURN),\n+    LintId::of(returns::NEEDLESS_RETURN),\n+    LintId::of(self_assignment::SELF_ASSIGNMENT),\n+    LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n+    LintId::of(serde_api::SERDE_API_MISUSE),\n+    LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n+    LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n+    LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n+    LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n+    LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n+    LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n+    LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n+    LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n+    LintId::of(swap::ALMOST_SWAPPED),\n+    LintId::of(swap::MANUAL_SWAP),\n+    LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n+    LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n+    LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n+    LintId::of(to_string_in_display::TO_STRING_IN_DISPLAY),\n+    LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n+    LintId::of(transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n+    LintId::of(transmute::TRANSMUTE_BYTES_TO_STR),\n+    LintId::of(transmute::TRANSMUTE_FLOAT_TO_INT),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n+    LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n+    LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n+    LintId::of(transmute::WRONG_TRANSMUTE),\n+    LintId::of(transmuting_null::TRANSMUTING_NULL),\n+    LintId::of(try_err::TRY_ERR),\n+    LintId::of(types::BORROWED_BOX),\n+    LintId::of(types::BOX_COLLECTION),\n+    LintId::of(types::REDUNDANT_ALLOCATION),\n+    LintId::of(types::TYPE_COMPLEXITY),\n+    LintId::of(types::VEC_BOX),\n+    LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n+    LintId::of(unicode::INVISIBLE_CHARACTERS),\n+    LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n+    LintId::of(unit_types::UNIT_ARG),\n+    LintId::of(unit_types::UNIT_CMP),\n+    LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),\n+    LintId::of(unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n+    LintId::of(unnecessary_sort_by::UNNECESSARY_SORT_BY),\n+    LintId::of(unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n+    LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n+    LintId::of(unused_unit::UNUSED_UNIT),\n+    LintId::of(unwrap::PANICKING_UNWRAP),\n+    LintId::of(unwrap::UNNECESSARY_UNWRAP),\n+    LintId::of(upper_case_acronyms::UPPER_CASE_ACRONYMS),\n+    LintId::of(useless_conversion::USELESS_CONVERSION),\n+    LintId::of(vec::USELESS_VEC),\n+    LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n+    LintId::of(vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n+    LintId::of(write::PRINTLN_EMPTY_STRING),\n+    LintId::of(write::PRINT_LITERAL),\n+    LintId::of(write::PRINT_WITH_NEWLINE),\n+    LintId::of(write::WRITELN_EMPTY_STRING),\n+    LintId::of(write::WRITE_LITERAL),\n+    LintId::of(write::WRITE_WITH_NEWLINE),\n+    LintId::of(zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n+])"}, {"sha": "1809f2cc7d46278cac14ff0488d59e415ef4521c", "filename": "clippy_lints/src/lib.register_cargo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_cargo.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,11 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::cargo\", Some(\"clippy_cargo\"), vec![\n+    LintId::of(cargo_common_metadata::CARGO_COMMON_METADATA),\n+    LintId::of(feature_name::NEGATIVE_FEATURE_NAMES),\n+    LintId::of(feature_name::REDUNDANT_FEATURE_NAMES),\n+    LintId::of(multiple_crate_versions::MULTIPLE_CRATE_VERSIONS),\n+    LintId::of(wildcard_dependencies::WILDCARD_DEPENDENCIES),\n+])"}, {"sha": "64b82fc0faac8593504e6de0b0653504c5eb442d", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,94 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n+    LintId::of(attrs::DEPRECATED_CFG_ATTR),\n+    LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(casts::CHAR_LIT_AS_U8),\n+    LintId::of(casts::UNNECESSARY_CAST),\n+    LintId::of(derivable_impls::DERIVABLE_IMPLS),\n+    LintId::of(double_comparison::DOUBLE_COMPARISONS),\n+    LintId::of(double_parens::DOUBLE_PARENS),\n+    LintId::of(duration_subsec::DURATION_SUBSEC),\n+    LintId::of(eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n+    LintId::of(explicit_write::EXPLICIT_WRITE),\n+    LintId::of(format::USELESS_FORMAT),\n+    LintId::of(functions::TOO_MANY_ARGUMENTS),\n+    LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n+    LintId::of(identity_op::IDENTITY_OP),\n+    LintId::of(int_plus_one::INT_PLUS_ONE),\n+    LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n+    LintId::of(lifetimes::NEEDLESS_LIFETIMES),\n+    LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n+    LintId::of(loops::MANUAL_FLATTEN),\n+    LintId::of(loops::SINGLE_ELEMENT_LOOP),\n+    LintId::of(loops::WHILE_LET_LOOP),\n+    LintId::of(manual_strip::MANUAL_STRIP),\n+    LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n+    LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n+    LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n+    LintId::of(matches::MATCH_AS_REF),\n+    LintId::of(matches::MATCH_SINGLE_BINDING),\n+    LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n+    LintId::of(methods::BIND_INSTEAD_OF_MAP),\n+    LintId::of(methods::CLONE_ON_COPY),\n+    LintId::of(methods::FILTER_MAP_IDENTITY),\n+    LintId::of(methods::FILTER_NEXT),\n+    LintId::of(methods::FLAT_MAP_IDENTITY),\n+    LintId::of(methods::INSPECT_FOR_EACH),\n+    LintId::of(methods::ITER_COUNT),\n+    LintId::of(methods::MANUAL_FILTER_MAP),\n+    LintId::of(methods::MANUAL_FIND_MAP),\n+    LintId::of(methods::MANUAL_SPLIT_ONCE),\n+    LintId::of(methods::MAP_IDENTITY),\n+    LintId::of(methods::OPTION_AS_REF_DEREF),\n+    LintId::of(methods::OPTION_FILTER_MAP),\n+    LintId::of(methods::SEARCH_IS_SOME),\n+    LintId::of(methods::SKIP_WHILE_NEXT),\n+    LintId::of(methods::UNNECESSARY_FILTER_MAP),\n+    LintId::of(methods::USELESS_ASREF),\n+    LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n+    LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n+    LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n+    LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n+    LintId::of(needless_bool::BOOL_COMPARISON),\n+    LintId::of(needless_bool::NEEDLESS_BOOL),\n+    LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n+    LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n+    LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n+    LintId::of(needless_update::NEEDLESS_UPDATE),\n+    LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n+    LintId::of(no_effect::NO_EFFECT),\n+    LintId::of(no_effect::UNNECESSARY_OPERATION),\n+    LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n+    LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n+    LintId::of(precedence::PRECEDENCE),\n+    LintId::of(ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n+    LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n+    LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n+    LintId::of(redundant_slicing::REDUNDANT_SLICING),\n+    LintId::of(reference::DEREF_ADDROF),\n+    LintId::of(reference::REF_IN_DEREF),\n+    LintId::of(repeat_once::REPEAT_ONCE),\n+    LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n+    LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n+    LintId::of(swap::MANUAL_SWAP),\n+    LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n+    LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n+    LintId::of(transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n+    LintId::of(transmute::TRANSMUTE_BYTES_TO_STR),\n+    LintId::of(transmute::TRANSMUTE_FLOAT_TO_INT),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n+    LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n+    LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n+    LintId::of(types::BORROWED_BOX),\n+    LintId::of(types::TYPE_COMPLEXITY),\n+    LintId::of(types::VEC_BOX),\n+    LintId::of(unit_types::UNIT_ARG),\n+    LintId::of(unnecessary_sort_by::UNNECESSARY_SORT_BY),\n+    LintId::of(unwrap::UNNECESSARY_UNWRAP),\n+    LintId::of(useless_conversion::USELESS_CONVERSION),\n+    LintId::of(zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n+])"}, {"sha": "e0ef7b3b8af9f06f71953b8f6018a57750f54a49", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,73 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n+    LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n+    LintId::of(approx_const::APPROX_CONSTANT),\n+    LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n+    LintId::of(attrs::DEPRECATED_SEMVER),\n+    LintId::of(attrs::MISMATCHED_TARGET_OS),\n+    LintId::of(attrs::USELESS_ATTRIBUTE),\n+    LintId::of(bit_mask::BAD_BIT_MASK),\n+    LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n+    LintId::of(booleans::LOGIC_BUG),\n+    LintId::of(casts::CAST_REF_TO_MUT),\n+    LintId::of(copies::IFS_SAME_COND),\n+    LintId::of(copies::IF_SAME_THEN_ELSE),\n+    LintId::of(derive::DERIVE_HASH_XOR_EQ),\n+    LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n+    LintId::of(drop_forget_ref::DROP_COPY),\n+    LintId::of(drop_forget_ref::DROP_REF),\n+    LintId::of(drop_forget_ref::FORGET_COPY),\n+    LintId::of(drop_forget_ref::FORGET_REF),\n+    LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n+    LintId::of(eq_op::EQ_OP),\n+    LintId::of(erasing_op::ERASING_OP),\n+    LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n+    LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n+    LintId::of(if_let_mutex::IF_LET_MUTEX),\n+    LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n+    LintId::of(infinite_iter::INFINITE_ITER),\n+    LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n+    LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n+    LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n+    LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n+    LintId::of(loops::ITER_NEXT_LOOP),\n+    LintId::of(loops::NEVER_LOOP),\n+    LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n+    LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n+    LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n+    LintId::of(methods::CLONE_DOUBLE_REF),\n+    LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n+    LintId::of(methods::SUSPICIOUS_SPLITN),\n+    LintId::of(methods::UNINIT_ASSUMED_INIT),\n+    LintId::of(methods::ZST_OFFSET),\n+    LintId::of(minmax::MIN_MAX),\n+    LintId::of(misc::CMP_NAN),\n+    LintId::of(misc::MODULO_ONE),\n+    LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n+    LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n+    LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n+    LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n+    LintId::of(ptr::MUT_FROM_REF),\n+    LintId::of(ranges::REVERSED_EMPTY_RANGES),\n+    LintId::of(regex::INVALID_REGEX),\n+    LintId::of(self_assignment::SELF_ASSIGNMENT),\n+    LintId::of(serde_api::SERDE_API_MISUSE),\n+    LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n+    LintId::of(swap::ALMOST_SWAPPED),\n+    LintId::of(to_string_in_display::TO_STRING_IN_DISPLAY),\n+    LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n+    LintId::of(transmute::WRONG_TRANSMUTE),\n+    LintId::of(transmuting_null::TRANSMUTING_NULL),\n+    LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n+    LintId::of(unicode::INVISIBLE_CHARACTERS),\n+    LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n+    LintId::of(unit_types::UNIT_CMP),\n+    LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),\n+    LintId::of(unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n+    LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n+    LintId::of(unwrap::PANICKING_UNWRAP),\n+    LintId::of(vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n+])"}, {"sha": "c8c1e0262abaea8d62c774e6cad0b8764ab1c5b5", "filename": "clippy_lints/src/lib.register_internal.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_internal.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,18 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n+    LintId::of(utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n+    LintId::of(utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n+    LintId::of(utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n+    LintId::of(utils::internal_lints::DEFAULT_LINT),\n+    LintId::of(utils::internal_lints::IF_CHAIN_STYLE),\n+    LintId::of(utils::internal_lints::INTERNING_DEFINED_SYMBOL),\n+    LintId::of(utils::internal_lints::INVALID_PATHS),\n+    LintId::of(utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n+    LintId::of(utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),\n+    LintId::of(utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n+    LintId::of(utils::internal_lints::PRODUCE_ICE),\n+    LintId::of(utils::internal_lints::UNNECESSARY_SYMBOL_STR),\n+])"}, {"sha": "2ba2b3da55cd1725c25822865525a7199aac83f7", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "added", "additions": 510, "deletions": 0, "changes": 510, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,510 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_lints(&[\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::DEFAULT_LINT,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::IF_CHAIN_STYLE,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::INTERNING_DEFINED_SYMBOL,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::INVALID_PATHS,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::PRODUCE_ICE,\n+    #[cfg(feature = \"internal-lints\")]\n+    utils::internal_lints::UNNECESSARY_SYMBOL_STR,\n+    absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS,\n+    approx_const::APPROX_CONSTANT,\n+    arithmetic::FLOAT_ARITHMETIC,\n+    arithmetic::INTEGER_ARITHMETIC,\n+    as_conversions::AS_CONVERSIONS,\n+    asm_syntax::INLINE_ASM_X86_ATT_SYNTAX,\n+    asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX,\n+    assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n+    assign_ops::ASSIGN_OP_PATTERN,\n+    assign_ops::MISREFACTORED_ASSIGN_OP,\n+    async_yields_async::ASYNC_YIELDS_ASYNC,\n+    attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n+    attrs::DEPRECATED_CFG_ATTR,\n+    attrs::DEPRECATED_SEMVER,\n+    attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n+    attrs::INLINE_ALWAYS,\n+    attrs::MISMATCHED_TARGET_OS,\n+    attrs::USELESS_ATTRIBUTE,\n+    await_holding_invalid::AWAIT_HOLDING_LOCK,\n+    await_holding_invalid::AWAIT_HOLDING_REFCELL_REF,\n+    bit_mask::BAD_BIT_MASK,\n+    bit_mask::INEFFECTIVE_BIT_MASK,\n+    bit_mask::VERBOSE_BIT_MASK,\n+    blacklisted_name::BLACKLISTED_NAME,\n+    blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS,\n+    bool_assert_comparison::BOOL_ASSERT_COMPARISON,\n+    booleans::LOGIC_BUG,\n+    booleans::NONMINIMAL_BOOL,\n+    bytecount::NAIVE_BYTECOUNT,\n+    cargo_common_metadata::CARGO_COMMON_METADATA,\n+    case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+    casts::CAST_LOSSLESS,\n+    casts::CAST_POSSIBLE_TRUNCATION,\n+    casts::CAST_POSSIBLE_WRAP,\n+    casts::CAST_PRECISION_LOSS,\n+    casts::CAST_PTR_ALIGNMENT,\n+    casts::CAST_REF_TO_MUT,\n+    casts::CAST_SIGN_LOSS,\n+    casts::CHAR_LIT_AS_U8,\n+    casts::FN_TO_NUMERIC_CAST,\n+    casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+    casts::PTR_AS_PTR,\n+    casts::UNNECESSARY_CAST,\n+    checked_conversions::CHECKED_CONVERSIONS,\n+    cognitive_complexity::COGNITIVE_COMPLEXITY,\n+    collapsible_if::COLLAPSIBLE_ELSE_IF,\n+    collapsible_if::COLLAPSIBLE_IF,\n+    collapsible_match::COLLAPSIBLE_MATCH,\n+    comparison_chain::COMPARISON_CHAIN,\n+    copies::BRANCHES_SHARING_CODE,\n+    copies::IFS_SAME_COND,\n+    copies::IF_SAME_THEN_ELSE,\n+    copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n+    copy_iterator::COPY_ITERATOR,\n+    create_dir::CREATE_DIR,\n+    dbg_macro::DBG_MACRO,\n+    default::DEFAULT_TRAIT_ACCESS,\n+    default::FIELD_REASSIGN_WITH_DEFAULT,\n+    default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK,\n+    dereference::EXPLICIT_DEREF_METHODS,\n+    derivable_impls::DERIVABLE_IMPLS,\n+    derive::DERIVE_HASH_XOR_EQ,\n+    derive::DERIVE_ORD_XOR_PARTIAL_ORD,\n+    derive::EXPL_IMPL_CLONE_ON_COPY,\n+    derive::UNSAFE_DERIVE_DESERIALIZE,\n+    disallowed_method::DISALLOWED_METHOD,\n+    disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS,\n+    disallowed_type::DISALLOWED_TYPE,\n+    doc::DOC_MARKDOWN,\n+    doc::MISSING_ERRORS_DOC,\n+    doc::MISSING_PANICS_DOC,\n+    doc::MISSING_SAFETY_DOC,\n+    doc::NEEDLESS_DOCTEST_MAIN,\n+    double_comparison::DOUBLE_COMPARISONS,\n+    double_parens::DOUBLE_PARENS,\n+    drop_forget_ref::DROP_COPY,\n+    drop_forget_ref::DROP_REF,\n+    drop_forget_ref::FORGET_COPY,\n+    drop_forget_ref::FORGET_REF,\n+    duration_subsec::DURATION_SUBSEC,\n+    else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n+    empty_enum::EMPTY_ENUM,\n+    entry::MAP_ENTRY,\n+    enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n+    enum_variants::ENUM_VARIANT_NAMES,\n+    enum_variants::MODULE_INCEPTION,\n+    enum_variants::MODULE_NAME_REPETITIONS,\n+    eq_op::EQ_OP,\n+    eq_op::OP_REF,\n+    equatable_if_let::EQUATABLE_IF_LET,\n+    erasing_op::ERASING_OP,\n+    escape::BOXED_LOCAL,\n+    eta_reduction::REDUNDANT_CLOSURE,\n+    eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n+    eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n+    eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n+    excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n+    excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n+    exhaustive_items::EXHAUSTIVE_ENUMS,\n+    exhaustive_items::EXHAUSTIVE_STRUCTS,\n+    exit::EXIT,\n+    explicit_write::EXPLICIT_WRITE,\n+    fallible_impl_from::FALLIBLE_IMPL_FROM,\n+    feature_name::NEGATIVE_FEATURE_NAMES,\n+    feature_name::REDUNDANT_FEATURE_NAMES,\n+    float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS,\n+    float_literal::EXCESSIVE_PRECISION,\n+    float_literal::LOSSY_FLOAT_LITERAL,\n+    floating_point_arithmetic::IMPRECISE_FLOPS,\n+    floating_point_arithmetic::SUBOPTIMAL_FLOPS,\n+    format::USELESS_FORMAT,\n+    formatting::POSSIBLE_MISSING_COMMA,\n+    formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n+    formatting::SUSPICIOUS_ELSE_FORMATTING,\n+    formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n+    from_over_into::FROM_OVER_INTO,\n+    from_str_radix_10::FROM_STR_RADIX_10,\n+    functions::DOUBLE_MUST_USE,\n+    functions::MUST_USE_CANDIDATE,\n+    functions::MUST_USE_UNIT,\n+    functions::NOT_UNSAFE_PTR_ARG_DEREF,\n+    functions::RESULT_UNIT_ERR,\n+    functions::TOO_MANY_ARGUMENTS,\n+    functions::TOO_MANY_LINES,\n+    future_not_send::FUTURE_NOT_SEND,\n+    get_last_with_len::GET_LAST_WITH_LEN,\n+    identity_op::IDENTITY_OP,\n+    if_let_mutex::IF_LET_MUTEX,\n+    if_not_else::IF_NOT_ELSE,\n+    if_then_panic::IF_THEN_PANIC,\n+    if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n+    implicit_hasher::IMPLICIT_HASHER,\n+    implicit_return::IMPLICIT_RETURN,\n+    implicit_saturating_sub::IMPLICIT_SATURATING_SUB,\n+    inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR,\n+    indexing_slicing::INDEXING_SLICING,\n+    indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n+    infinite_iter::INFINITE_ITER,\n+    infinite_iter::MAYBE_INFINITE_ITER,\n+    inherent_impl::MULTIPLE_INHERENT_IMPL,\n+    inherent_to_string::INHERENT_TO_STRING,\n+    inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n+    inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n+    int_plus_one::INT_PLUS_ONE,\n+    integer_division::INTEGER_DIVISION,\n+    invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS,\n+    items_after_statements::ITEMS_AFTER_STATEMENTS,\n+    iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n+    large_const_arrays::LARGE_CONST_ARRAYS,\n+    large_enum_variant::LARGE_ENUM_VARIANT,\n+    large_stack_arrays::LARGE_STACK_ARRAYS,\n+    len_zero::COMPARISON_TO_EMPTY,\n+    len_zero::LEN_WITHOUT_IS_EMPTY,\n+    len_zero::LEN_ZERO,\n+    let_if_seq::USELESS_LET_IF_SEQ,\n+    let_underscore::LET_UNDERSCORE_DROP,\n+    let_underscore::LET_UNDERSCORE_LOCK,\n+    let_underscore::LET_UNDERSCORE_MUST_USE,\n+    lifetimes::EXTRA_UNUSED_LIFETIMES,\n+    lifetimes::NEEDLESS_LIFETIMES,\n+    literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n+    literal_representation::INCONSISTENT_DIGIT_GROUPING,\n+    literal_representation::LARGE_DIGIT_GROUPS,\n+    literal_representation::MISTYPED_LITERAL_SUFFIXES,\n+    literal_representation::UNREADABLE_LITERAL,\n+    literal_representation::UNUSUAL_BYTE_GROUPINGS,\n+    loops::EMPTY_LOOP,\n+    loops::EXPLICIT_COUNTER_LOOP,\n+    loops::EXPLICIT_INTO_ITER_LOOP,\n+    loops::EXPLICIT_ITER_LOOP,\n+    loops::FOR_KV_MAP,\n+    loops::FOR_LOOPS_OVER_FALLIBLES,\n+    loops::ITER_NEXT_LOOP,\n+    loops::MANUAL_FLATTEN,\n+    loops::MANUAL_MEMCPY,\n+    loops::MUT_RANGE_BOUND,\n+    loops::NEEDLESS_COLLECT,\n+    loops::NEEDLESS_RANGE_LOOP,\n+    loops::NEVER_LOOP,\n+    loops::SAME_ITEM_PUSH,\n+    loops::SINGLE_ELEMENT_LOOP,\n+    loops::WHILE_IMMUTABLE_CONDITION,\n+    loops::WHILE_LET_LOOP,\n+    loops::WHILE_LET_ON_ITERATOR,\n+    macro_use::MACRO_USE_IMPORTS,\n+    main_recursion::MAIN_RECURSION,\n+    manual_async_fn::MANUAL_ASYNC_FN,\n+    manual_map::MANUAL_MAP,\n+    manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n+    manual_ok_or::MANUAL_OK_OR,\n+    manual_strip::MANUAL_STRIP,\n+    manual_unwrap_or::MANUAL_UNWRAP_OR,\n+    map_clone::MAP_CLONE,\n+    map_err_ignore::MAP_ERR_IGNORE,\n+    map_unit_fn::OPTION_MAP_UNIT_FN,\n+    map_unit_fn::RESULT_MAP_UNIT_FN,\n+    match_on_vec_items::MATCH_ON_VEC_ITEMS,\n+    match_result_ok::MATCH_RESULT_OK,\n+    matches::INFALLIBLE_DESTRUCTURING_MATCH,\n+    matches::MATCH_AS_REF,\n+    matches::MATCH_BOOL,\n+    matches::MATCH_LIKE_MATCHES_MACRO,\n+    matches::MATCH_OVERLAPPING_ARM,\n+    matches::MATCH_REF_PATS,\n+    matches::MATCH_SAME_ARMS,\n+    matches::MATCH_SINGLE_BINDING,\n+    matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n+    matches::MATCH_WILD_ERR_ARM,\n+    matches::REDUNDANT_PATTERN_MATCHING,\n+    matches::REST_PAT_IN_FULLY_BOUND_STRUCTS,\n+    matches::SINGLE_MATCH,\n+    matches::SINGLE_MATCH_ELSE,\n+    matches::WILDCARD_ENUM_MATCH_ARM,\n+    matches::WILDCARD_IN_OR_PATTERNS,\n+    mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n+    mem_forget::MEM_FORGET,\n+    mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n+    mem_replace::MEM_REPLACE_WITH_DEFAULT,\n+    mem_replace::MEM_REPLACE_WITH_UNINIT,\n+    methods::BIND_INSTEAD_OF_MAP,\n+    methods::BYTES_NTH,\n+    methods::CHARS_LAST_CMP,\n+    methods::CHARS_NEXT_CMP,\n+    methods::CLONED_INSTEAD_OF_COPIED,\n+    methods::CLONE_DOUBLE_REF,\n+    methods::CLONE_ON_COPY,\n+    methods::CLONE_ON_REF_PTR,\n+    methods::EXPECT_FUN_CALL,\n+    methods::EXPECT_USED,\n+    methods::EXTEND_WITH_DRAIN,\n+    methods::FILETYPE_IS_FILE,\n+    methods::FILTER_MAP_IDENTITY,\n+    methods::FILTER_MAP_NEXT,\n+    methods::FILTER_NEXT,\n+    methods::FLAT_MAP_IDENTITY,\n+    methods::FLAT_MAP_OPTION,\n+    methods::FROM_ITER_INSTEAD_OF_COLLECT,\n+    methods::GET_UNWRAP,\n+    methods::IMPLICIT_CLONE,\n+    methods::INEFFICIENT_TO_STRING,\n+    methods::INSPECT_FOR_EACH,\n+    methods::INTO_ITER_ON_REF,\n+    methods::ITERATOR_STEP_BY_ZERO,\n+    methods::ITER_CLONED_COLLECT,\n+    methods::ITER_COUNT,\n+    methods::ITER_NEXT_SLICE,\n+    methods::ITER_NTH,\n+    methods::ITER_NTH_ZERO,\n+    methods::ITER_SKIP_NEXT,\n+    methods::MANUAL_FILTER_MAP,\n+    methods::MANUAL_FIND_MAP,\n+    methods::MANUAL_SATURATING_ARITHMETIC,\n+    methods::MANUAL_SPLIT_ONCE,\n+    methods::MANUAL_STR_REPEAT,\n+    methods::MAP_COLLECT_RESULT_UNIT,\n+    methods::MAP_FLATTEN,\n+    methods::MAP_IDENTITY,\n+    methods::MAP_UNWRAP_OR,\n+    methods::NEW_RET_NO_SELF,\n+    methods::OK_EXPECT,\n+    methods::OPTION_AS_REF_DEREF,\n+    methods::OPTION_FILTER_MAP,\n+    methods::OPTION_MAP_OR_NONE,\n+    methods::OR_FUN_CALL,\n+    methods::RESULT_MAP_OR_INTO_OPTION,\n+    methods::SEARCH_IS_SOME,\n+    methods::SHOULD_IMPLEMENT_TRAIT,\n+    methods::SINGLE_CHAR_ADD_STR,\n+    methods::SINGLE_CHAR_PATTERN,\n+    methods::SKIP_WHILE_NEXT,\n+    methods::STRING_EXTEND_CHARS,\n+    methods::SUSPICIOUS_MAP,\n+    methods::SUSPICIOUS_SPLITN,\n+    methods::UNINIT_ASSUMED_INIT,\n+    methods::UNNECESSARY_FILTER_MAP,\n+    methods::UNNECESSARY_FOLD,\n+    methods::UNNECESSARY_LAZY_EVALUATIONS,\n+    methods::UNWRAP_OR_ELSE_DEFAULT,\n+    methods::UNWRAP_USED,\n+    methods::USELESS_ASREF,\n+    methods::WRONG_SELF_CONVENTION,\n+    methods::ZST_OFFSET,\n+    minmax::MIN_MAX,\n+    misc::CMP_NAN,\n+    misc::CMP_OWNED,\n+    misc::FLOAT_CMP,\n+    misc::FLOAT_CMP_CONST,\n+    misc::MODULO_ONE,\n+    misc::SHORT_CIRCUIT_STATEMENT,\n+    misc::TOPLEVEL_REF_ARG,\n+    misc::USED_UNDERSCORE_BINDING,\n+    misc::ZERO_PTR,\n+    misc_early::BUILTIN_TYPE_SHADOW,\n+    misc_early::DOUBLE_NEG,\n+    misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n+    misc_early::MIXED_CASE_HEX_LITERALS,\n+    misc_early::REDUNDANT_PATTERN,\n+    misc_early::UNNEEDED_FIELD_PATTERN,\n+    misc_early::UNNEEDED_WILDCARD_PATTERN,\n+    misc_early::UNSEPARATED_LITERAL_SUFFIX,\n+    misc_early::ZERO_PREFIXED_LITERAL,\n+    missing_const_for_fn::MISSING_CONST_FOR_FN,\n+    missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n+    missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES,\n+    missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n+    module_style::MOD_MODULE_FILES,\n+    module_style::SELF_NAMED_MODULE_FILES,\n+    modulo_arithmetic::MODULO_ARITHMETIC,\n+    multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n+    mut_key::MUTABLE_KEY_TYPE,\n+    mut_mut::MUT_MUT,\n+    mut_mutex_lock::MUT_MUTEX_LOCK,\n+    mut_reference::UNNECESSARY_MUT_PASSED,\n+    mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n+    mutex_atomic::MUTEX_ATOMIC,\n+    mutex_atomic::MUTEX_INTEGER,\n+    needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE,\n+    needless_bitwise_bool::NEEDLESS_BITWISE_BOOL,\n+    needless_bool::BOOL_COMPARISON,\n+    needless_bool::NEEDLESS_BOOL,\n+    needless_borrow::NEEDLESS_BORROW,\n+    needless_borrow::REF_BINDING_TO_REFERENCE,\n+    needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n+    needless_continue::NEEDLESS_CONTINUE,\n+    needless_for_each::NEEDLESS_FOR_EACH,\n+    needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF,\n+    needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n+    needless_question_mark::NEEDLESS_QUESTION_MARK,\n+    needless_update::NEEDLESS_UPDATE,\n+    neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n+    neg_multiply::NEG_MULTIPLY,\n+    new_without_default::NEW_WITHOUT_DEFAULT,\n+    no_effect::NO_EFFECT,\n+    no_effect::UNNECESSARY_OPERATION,\n+    non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n+    non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST,\n+    non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n+    non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n+    non_expressive_names::SIMILAR_NAMES,\n+    non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS,\n+    non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY,\n+    nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES,\n+    open_options::NONSENSICAL_OPEN_OPTIONS,\n+    option_env_unwrap::OPTION_ENV_UNWRAP,\n+    option_if_let_else::OPTION_IF_LET_ELSE,\n+    overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n+    panic_in_result_fn::PANIC_IN_RESULT_FN,\n+    panic_unimplemented::PANIC,\n+    panic_unimplemented::TODO,\n+    panic_unimplemented::UNIMPLEMENTED,\n+    panic_unimplemented::UNREACHABLE,\n+    partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n+    pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE,\n+    pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF,\n+    path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE,\n+    pattern_type_mismatch::PATTERN_TYPE_MISMATCH,\n+    precedence::PRECEDENCE,\n+    ptr::CMP_NULL,\n+    ptr::INVALID_NULL_PTR_USAGE,\n+    ptr::MUT_FROM_REF,\n+    ptr::PTR_ARG,\n+    ptr_eq::PTR_EQ,\n+    ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n+    question_mark::QUESTION_MARK,\n+    ranges::MANUAL_RANGE_CONTAINS,\n+    ranges::RANGE_MINUS_ONE,\n+    ranges::RANGE_PLUS_ONE,\n+    ranges::RANGE_ZIP_WITH_LEN,\n+    ranges::REVERSED_EMPTY_RANGES,\n+    redundant_clone::REDUNDANT_CLONE,\n+    redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n+    redundant_else::REDUNDANT_ELSE,\n+    redundant_field_names::REDUNDANT_FIELD_NAMES,\n+    redundant_pub_crate::REDUNDANT_PUB_CRATE,\n+    redundant_slicing::REDUNDANT_SLICING,\n+    redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n+    ref_option_ref::REF_OPTION_REF,\n+    reference::DEREF_ADDROF,\n+    reference::REF_IN_DEREF,\n+    regex::INVALID_REGEX,\n+    regex::TRIVIAL_REGEX,\n+    repeat_once::REPEAT_ONCE,\n+    returns::LET_AND_RETURN,\n+    returns::NEEDLESS_RETURN,\n+    same_name_method::SAME_NAME_METHOD,\n+    self_assignment::SELF_ASSIGNMENT,\n+    self_named_constructors::SELF_NAMED_CONSTRUCTORS,\n+    semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED,\n+    serde_api::SERDE_API_MISUSE,\n+    shadow::SHADOW_REUSE,\n+    shadow::SHADOW_SAME,\n+    shadow::SHADOW_UNRELATED,\n+    single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n+    size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n+    slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n+    stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n+    strings::STRING_ADD,\n+    strings::STRING_ADD_ASSIGN,\n+    strings::STRING_FROM_UTF8_AS_BYTES,\n+    strings::STRING_LIT_AS_BYTES,\n+    strings::STRING_TO_STRING,\n+    strings::STR_TO_STRING,\n+    strlen_on_c_strings::STRLEN_ON_C_STRINGS,\n+    suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS,\n+    suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n+    suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n+    swap::ALMOST_SWAPPED,\n+    swap::MANUAL_SWAP,\n+    tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n+    temporary_assignment::TEMPORARY_ASSIGNMENT,\n+    to_digit_is_some::TO_DIGIT_IS_SOME,\n+    to_string_in_display::TO_STRING_IN_DISPLAY,\n+    trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS,\n+    trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n+    transmute::CROSSPOINTER_TRANSMUTE,\n+    transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n+    transmute::TRANSMUTE_BYTES_TO_STR,\n+    transmute::TRANSMUTE_FLOAT_TO_INT,\n+    transmute::TRANSMUTE_INT_TO_BOOL,\n+    transmute::TRANSMUTE_INT_TO_CHAR,\n+    transmute::TRANSMUTE_INT_TO_FLOAT,\n+    transmute::TRANSMUTE_PTR_TO_PTR,\n+    transmute::TRANSMUTE_PTR_TO_REF,\n+    transmute::UNSOUND_COLLECTION_TRANSMUTE,\n+    transmute::USELESS_TRANSMUTE,\n+    transmute::WRONG_TRANSMUTE,\n+    transmuting_null::TRANSMUTING_NULL,\n+    try_err::TRY_ERR,\n+    types::BORROWED_BOX,\n+    types::BOX_COLLECTION,\n+    types::LINKEDLIST,\n+    types::OPTION_OPTION,\n+    types::RC_BUFFER,\n+    types::RC_MUTEX,\n+    types::REDUNDANT_ALLOCATION,\n+    types::TYPE_COMPLEXITY,\n+    types::VEC_BOX,\n+    undropped_manually_drops::UNDROPPED_MANUALLY_DROPS,\n+    unicode::INVISIBLE_CHARACTERS,\n+    unicode::NON_ASCII_LITERAL,\n+    unicode::UNICODE_NOT_NFC,\n+    unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n+    unit_types::LET_UNIT_VALUE,\n+    unit_types::UNIT_ARG,\n+    unit_types::UNIT_CMP,\n+    unnamed_address::FN_ADDRESS_COMPARISONS,\n+    unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n+    unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS,\n+    unnecessary_sort_by::UNNECESSARY_SORT_BY,\n+    unnecessary_wraps::UNNECESSARY_WRAPS,\n+    unnested_or_patterns::UNNESTED_OR_PATTERNS,\n+    unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n+    unused_async::UNUSED_ASYNC,\n+    unused_io_amount::UNUSED_IO_AMOUNT,\n+    unused_self::UNUSED_SELF,\n+    unused_unit::UNUSED_UNIT,\n+    unwrap::PANICKING_UNWRAP,\n+    unwrap::UNNECESSARY_UNWRAP,\n+    unwrap_in_result::UNWRAP_IN_RESULT,\n+    upper_case_acronyms::UPPER_CASE_ACRONYMS,\n+    use_self::USE_SELF,\n+    useless_conversion::USELESS_CONVERSION,\n+    vec::USELESS_VEC,\n+    vec_init_then_push::VEC_INIT_THEN_PUSH,\n+    vec_resize_to_zero::VEC_RESIZE_TO_ZERO,\n+    verbose_file_reads::VERBOSE_FILE_READS,\n+    wildcard_dependencies::WILDCARD_DEPENDENCIES,\n+    wildcard_imports::ENUM_GLOB_USE,\n+    wildcard_imports::WILDCARD_IMPORTS,\n+    write::PRINTLN_EMPTY_STRING,\n+    write::PRINT_LITERAL,\n+    write::PRINT_STDERR,\n+    write::PRINT_STDOUT,\n+    write::PRINT_WITH_NEWLINE,\n+    write::USE_DEBUG,\n+    write::WRITELN_EMPTY_STRING,\n+    write::WRITE_LITERAL,\n+    write::WRITE_WITH_NEWLINE,\n+    zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n+    zero_sized_map_values::ZERO_SIZED_MAP_VALUES,\n+])"}, {"sha": "96e0b421094d622f4495a3a9be49085127a5841a", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,30 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n+    LintId::of(attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n+    LintId::of(cognitive_complexity::COGNITIVE_COMPLEXITY),\n+    LintId::of(copies::BRANCHES_SHARING_CODE),\n+    LintId::of(disallowed_method::DISALLOWED_METHOD),\n+    LintId::of(disallowed_type::DISALLOWED_TYPE),\n+    LintId::of(equatable_if_let::EQUATABLE_IF_LET),\n+    LintId::of(fallible_impl_from::FALLIBLE_IMPL_FROM),\n+    LintId::of(floating_point_arithmetic::IMPRECISE_FLOPS),\n+    LintId::of(floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n+    LintId::of(future_not_send::FUTURE_NOT_SEND),\n+    LintId::of(let_if_seq::USELESS_LET_IF_SEQ),\n+    LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n+    LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n+    LintId::of(mutex_atomic::MUTEX_INTEGER),\n+    LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n+    LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n+    LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n+    LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n+    LintId::of(redundant_pub_crate::REDUNDANT_PUB_CRATE),\n+    LintId::of(regex::TRIVIAL_REGEX),\n+    LintId::of(strings::STRING_LIT_AS_BYTES),\n+    LintId::of(suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n+    LintId::of(transmute::USELESS_TRANSMUTE),\n+    LintId::of(use_self::USE_SELF),\n+])"}, {"sha": "6533b94e82bd5ce10c539392ca6a3c627480dbd1", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,100 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n+    LintId::of(attrs::INLINE_ALWAYS),\n+    LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n+    LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n+    LintId::of(bit_mask::VERBOSE_BIT_MASK),\n+    LintId::of(bytecount::NAIVE_BYTECOUNT),\n+    LintId::of(case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n+    LintId::of(casts::CAST_LOSSLESS),\n+    LintId::of(casts::CAST_POSSIBLE_TRUNCATION),\n+    LintId::of(casts::CAST_POSSIBLE_WRAP),\n+    LintId::of(casts::CAST_PRECISION_LOSS),\n+    LintId::of(casts::CAST_PTR_ALIGNMENT),\n+    LintId::of(casts::CAST_SIGN_LOSS),\n+    LintId::of(casts::PTR_AS_PTR),\n+    LintId::of(checked_conversions::CHECKED_CONVERSIONS),\n+    LintId::of(copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n+    LintId::of(copy_iterator::COPY_ITERATOR),\n+    LintId::of(default::DEFAULT_TRAIT_ACCESS),\n+    LintId::of(dereference::EXPLICIT_DEREF_METHODS),\n+    LintId::of(derive::EXPL_IMPL_CLONE_ON_COPY),\n+    LintId::of(derive::UNSAFE_DERIVE_DESERIALIZE),\n+    LintId::of(doc::DOC_MARKDOWN),\n+    LintId::of(doc::MISSING_ERRORS_DOC),\n+    LintId::of(doc::MISSING_PANICS_DOC),\n+    LintId::of(empty_enum::EMPTY_ENUM),\n+    LintId::of(enum_variants::MODULE_NAME_REPETITIONS),\n+    LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n+    LintId::of(excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n+    LintId::of(excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n+    LintId::of(functions::MUST_USE_CANDIDATE),\n+    LintId::of(functions::TOO_MANY_LINES),\n+    LintId::of(if_not_else::IF_NOT_ELSE),\n+    LintId::of(implicit_hasher::IMPLICIT_HASHER),\n+    LintId::of(implicit_saturating_sub::IMPLICIT_SATURATING_SUB),\n+    LintId::of(inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR),\n+    LintId::of(infinite_iter::MAYBE_INFINITE_ITER),\n+    LintId::of(invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS),\n+    LintId::of(items_after_statements::ITEMS_AFTER_STATEMENTS),\n+    LintId::of(iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR),\n+    LintId::of(large_stack_arrays::LARGE_STACK_ARRAYS),\n+    LintId::of(let_underscore::LET_UNDERSCORE_DROP),\n+    LintId::of(literal_representation::LARGE_DIGIT_GROUPS),\n+    LintId::of(literal_representation::UNREADABLE_LITERAL),\n+    LintId::of(loops::EXPLICIT_INTO_ITER_LOOP),\n+    LintId::of(loops::EXPLICIT_ITER_LOOP),\n+    LintId::of(macro_use::MACRO_USE_IMPORTS),\n+    LintId::of(manual_ok_or::MANUAL_OK_OR),\n+    LintId::of(match_on_vec_items::MATCH_ON_VEC_ITEMS),\n+    LintId::of(matches::MATCH_BOOL),\n+    LintId::of(matches::MATCH_SAME_ARMS),\n+    LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n+    LintId::of(matches::MATCH_WILD_ERR_ARM),\n+    LintId::of(matches::SINGLE_MATCH_ELSE),\n+    LintId::of(methods::CLONED_INSTEAD_OF_COPIED),\n+    LintId::of(methods::FILTER_MAP_NEXT),\n+    LintId::of(methods::FLAT_MAP_OPTION),\n+    LintId::of(methods::FROM_ITER_INSTEAD_OF_COLLECT),\n+    LintId::of(methods::IMPLICIT_CLONE),\n+    LintId::of(methods::INEFFICIENT_TO_STRING),\n+    LintId::of(methods::MAP_FLATTEN),\n+    LintId::of(methods::MAP_UNWRAP_OR),\n+    LintId::of(misc::FLOAT_CMP),\n+    LintId::of(misc::USED_UNDERSCORE_BINDING),\n+    LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n+    LintId::of(mut_mut::MUT_MUT),\n+    LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n+    LintId::of(needless_borrow::REF_BINDING_TO_REFERENCE),\n+    LintId::of(needless_continue::NEEDLESS_CONTINUE),\n+    LintId::of(needless_for_each::NEEDLESS_FOR_EACH),\n+    LintId::of(needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n+    LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n+    LintId::of(non_expressive_names::SIMILAR_NAMES),\n+    LintId::of(pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE),\n+    LintId::of(pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n+    LintId::of(ranges::RANGE_MINUS_ONE),\n+    LintId::of(ranges::RANGE_PLUS_ONE),\n+    LintId::of(redundant_else::REDUNDANT_ELSE),\n+    LintId::of(ref_option_ref::REF_OPTION_REF),\n+    LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n+    LintId::of(strings::STRING_ADD_ASSIGN),\n+    LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n+    LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n+    LintId::of(transmute::TRANSMUTE_PTR_TO_PTR),\n+    LintId::of(types::LINKEDLIST),\n+    LintId::of(types::OPTION_OPTION),\n+    LintId::of(unicode::NON_ASCII_LITERAL),\n+    LintId::of(unicode::UNICODE_NOT_NFC),\n+    LintId::of(unit_types::LET_UNIT_VALUE),\n+    LintId::of(unnecessary_wraps::UNNECESSARY_WRAPS),\n+    LintId::of(unnested_or_patterns::UNNESTED_OR_PATTERNS),\n+    LintId::of(unused_async::UNUSED_ASYNC),\n+    LintId::of(unused_self::UNUSED_SELF),\n+    LintId::of(wildcard_imports::ENUM_GLOB_USE),\n+    LintId::of(wildcard_imports::WILDCARD_IMPORTS),\n+    LintId::of(zero_sized_map_values::ZERO_SIZED_MAP_VALUES),\n+])"}, {"sha": "5432345760bc3242126b9f0978e8d90d44d62e70", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,27 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n+    LintId::of(entry::MAP_ENTRY),\n+    LintId::of(escape::BOXED_LOCAL),\n+    LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n+    LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n+    LintId::of(loops::MANUAL_MEMCPY),\n+    LintId::of(loops::NEEDLESS_COLLECT),\n+    LintId::of(methods::EXPECT_FUN_CALL),\n+    LintId::of(methods::EXTEND_WITH_DRAIN),\n+    LintId::of(methods::ITER_NTH),\n+    LintId::of(methods::MANUAL_STR_REPEAT),\n+    LintId::of(methods::OR_FUN_CALL),\n+    LintId::of(methods::SINGLE_CHAR_PATTERN),\n+    LintId::of(misc::CMP_OWNED),\n+    LintId::of(mutex_atomic::MUTEX_ATOMIC),\n+    LintId::of(redundant_clone::REDUNDANT_CLONE),\n+    LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n+    LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n+    LintId::of(types::BOX_COLLECTION),\n+    LintId::of(types::REDUNDANT_ALLOCATION),\n+    LintId::of(vec::USELESS_VEC),\n+    LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n+])"}, {"sha": "4463dea5fcb8436a12f82721865750869fc16cf1", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,65 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n+    LintId::of(arithmetic::FLOAT_ARITHMETIC),\n+    LintId::of(arithmetic::INTEGER_ARITHMETIC),\n+    LintId::of(as_conversions::AS_CONVERSIONS),\n+    LintId::of(asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n+    LintId::of(asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n+    LintId::of(create_dir::CREATE_DIR),\n+    LintId::of(dbg_macro::DBG_MACRO),\n+    LintId::of(default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK),\n+    LintId::of(disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS),\n+    LintId::of(else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n+    LintId::of(exhaustive_items::EXHAUSTIVE_ENUMS),\n+    LintId::of(exhaustive_items::EXHAUSTIVE_STRUCTS),\n+    LintId::of(exit::EXIT),\n+    LintId::of(float_literal::LOSSY_FLOAT_LITERAL),\n+    LintId::of(if_then_some_else_none::IF_THEN_SOME_ELSE_NONE),\n+    LintId::of(implicit_return::IMPLICIT_RETURN),\n+    LintId::of(indexing_slicing::INDEXING_SLICING),\n+    LintId::of(inherent_impl::MULTIPLE_INHERENT_IMPL),\n+    LintId::of(integer_division::INTEGER_DIVISION),\n+    LintId::of(let_underscore::LET_UNDERSCORE_MUST_USE),\n+    LintId::of(literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n+    LintId::of(map_err_ignore::MAP_ERR_IGNORE),\n+    LintId::of(matches::REST_PAT_IN_FULLY_BOUND_STRUCTS),\n+    LintId::of(matches::WILDCARD_ENUM_MATCH_ARM),\n+    LintId::of(mem_forget::MEM_FORGET),\n+    LintId::of(methods::CLONE_ON_REF_PTR),\n+    LintId::of(methods::EXPECT_USED),\n+    LintId::of(methods::FILETYPE_IS_FILE),\n+    LintId::of(methods::GET_UNWRAP),\n+    LintId::of(methods::UNWRAP_USED),\n+    LintId::of(misc::FLOAT_CMP_CONST),\n+    LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n+    LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n+    LintId::of(missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES),\n+    LintId::of(missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n+    LintId::of(module_style::MOD_MODULE_FILES),\n+    LintId::of(module_style::SELF_NAMED_MODULE_FILES),\n+    LintId::of(modulo_arithmetic::MODULO_ARITHMETIC),\n+    LintId::of(panic_in_result_fn::PANIC_IN_RESULT_FN),\n+    LintId::of(panic_unimplemented::PANIC),\n+    LintId::of(panic_unimplemented::TODO),\n+    LintId::of(panic_unimplemented::UNIMPLEMENTED),\n+    LintId::of(panic_unimplemented::UNREACHABLE),\n+    LintId::of(pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n+    LintId::of(same_name_method::SAME_NAME_METHOD),\n+    LintId::of(shadow::SHADOW_REUSE),\n+    LintId::of(shadow::SHADOW_SAME),\n+    LintId::of(shadow::SHADOW_UNRELATED),\n+    LintId::of(strings::STRING_ADD),\n+    LintId::of(strings::STRING_TO_STRING),\n+    LintId::of(strings::STR_TO_STRING),\n+    LintId::of(types::RC_BUFFER),\n+    LintId::of(types::RC_MUTEX),\n+    LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n+    LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n+    LintId::of(verbose_file_reads::VERBOSE_FILE_READS),\n+    LintId::of(write::PRINT_STDERR),\n+    LintId::of(write::PRINT_STDOUT),\n+    LintId::of(write::USE_DEBUG),\n+])"}, {"sha": "a39c111c5742340d1a0d59723da29d722c8271c6", "filename": "clippy_lints/src/lib.register_style.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,114 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n+    LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n+    LintId::of(assign_ops::ASSIGN_OP_PATTERN),\n+    LintId::of(blacklisted_name::BLACKLISTED_NAME),\n+    LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n+    LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n+    LintId::of(casts::FN_TO_NUMERIC_CAST),\n+    LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n+    LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n+    LintId::of(collapsible_if::COLLAPSIBLE_IF),\n+    LintId::of(collapsible_match::COLLAPSIBLE_MATCH),\n+    LintId::of(comparison_chain::COMPARISON_CHAIN),\n+    LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n+    LintId::of(doc::MISSING_SAFETY_DOC),\n+    LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n+    LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n+    LintId::of(enum_variants::MODULE_INCEPTION),\n+    LintId::of(eq_op::OP_REF),\n+    LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n+    LintId::of(float_literal::EXCESSIVE_PRECISION),\n+    LintId::of(from_over_into::FROM_OVER_INTO),\n+    LintId::of(from_str_radix_10::FROM_STR_RADIX_10),\n+    LintId::of(functions::DOUBLE_MUST_USE),\n+    LintId::of(functions::MUST_USE_UNIT),\n+    LintId::of(functions::RESULT_UNIT_ERR),\n+    LintId::of(if_then_panic::IF_THEN_PANIC),\n+    LintId::of(inherent_to_string::INHERENT_TO_STRING),\n+    LintId::of(len_zero::COMPARISON_TO_EMPTY),\n+    LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n+    LintId::of(len_zero::LEN_ZERO),\n+    LintId::of(literal_representation::INCONSISTENT_DIGIT_GROUPING),\n+    LintId::of(literal_representation::UNUSUAL_BYTE_GROUPINGS),\n+    LintId::of(loops::FOR_KV_MAP),\n+    LintId::of(loops::NEEDLESS_RANGE_LOOP),\n+    LintId::of(loops::SAME_ITEM_PUSH),\n+    LintId::of(loops::WHILE_LET_ON_ITERATOR),\n+    LintId::of(main_recursion::MAIN_RECURSION),\n+    LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n+    LintId::of(manual_map::MANUAL_MAP),\n+    LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n+    LintId::of(map_clone::MAP_CLONE),\n+    LintId::of(match_result_ok::MATCH_RESULT_OK),\n+    LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n+    LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n+    LintId::of(matches::MATCH_OVERLAPPING_ARM),\n+    LintId::of(matches::MATCH_REF_PATS),\n+    LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n+    LintId::of(matches::SINGLE_MATCH),\n+    LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n+    LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n+    LintId::of(methods::BYTES_NTH),\n+    LintId::of(methods::CHARS_LAST_CMP),\n+    LintId::of(methods::CHARS_NEXT_CMP),\n+    LintId::of(methods::INTO_ITER_ON_REF),\n+    LintId::of(methods::ITER_CLONED_COLLECT),\n+    LintId::of(methods::ITER_NEXT_SLICE),\n+    LintId::of(methods::ITER_NTH_ZERO),\n+    LintId::of(methods::ITER_SKIP_NEXT),\n+    LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n+    LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n+    LintId::of(methods::NEW_RET_NO_SELF),\n+    LintId::of(methods::OK_EXPECT),\n+    LintId::of(methods::OPTION_MAP_OR_NONE),\n+    LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n+    LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),\n+    LintId::of(methods::SINGLE_CHAR_ADD_STR),\n+    LintId::of(methods::STRING_EXTEND_CHARS),\n+    LintId::of(methods::UNNECESSARY_FOLD),\n+    LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n+    LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n+    LintId::of(methods::WRONG_SELF_CONVENTION),\n+    LintId::of(misc::TOPLEVEL_REF_ARG),\n+    LintId::of(misc::ZERO_PTR),\n+    LintId::of(misc_early::BUILTIN_TYPE_SHADOW),\n+    LintId::of(misc_early::DOUBLE_NEG),\n+    LintId::of(misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n+    LintId::of(misc_early::MIXED_CASE_HEX_LITERALS),\n+    LintId::of(misc_early::REDUNDANT_PATTERN),\n+    LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n+    LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n+    LintId::of(needless_borrow::NEEDLESS_BORROW),\n+    LintId::of(neg_multiply::NEG_MULTIPLY),\n+    LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n+    LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n+    LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n+    LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n+    LintId::of(ptr::CMP_NULL),\n+    LintId::of(ptr::PTR_ARG),\n+    LintId::of(ptr_eq::PTR_EQ),\n+    LintId::of(question_mark::QUESTION_MARK),\n+    LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n+    LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),\n+    LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n+    LintId::of(returns::LET_AND_RETURN),\n+    LintId::of(returns::NEEDLESS_RETURN),\n+    LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n+    LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n+    LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n+    LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n+    LintId::of(try_err::TRY_ERR),\n+    LintId::of(unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n+    LintId::of(unused_unit::UNUSED_UNIT),\n+    LintId::of(upper_case_acronyms::UPPER_CASE_ACRONYMS),\n+    LintId::of(write::PRINTLN_EMPTY_STRING),\n+    LintId::of(write::PRINT_LITERAL),\n+    LintId::of(write::PRINT_WITH_NEWLINE),\n+    LintId::of(write::WRITELN_EMPTY_STRING),\n+    LintId::of(write::WRITE_LITERAL),\n+    LintId::of(write::WRITE_WITH_NEWLINE),\n+])"}, {"sha": "8859787fbc830c97e7b34a0ee21e053d586bcdcf", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,20 @@\n+// This file was generated by `cargo dev update_lints`.\n+// Use that command to update this file and do not edit by hand.\n+// Manual edits will be overwritten.\n+\n+store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec![\n+    LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n+    LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n+    LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n+    LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n+    LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n+    LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n+    LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+    LintId::of(loops::EMPTY_LOOP),\n+    LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n+    LintId::of(loops::MUT_RANGE_BOUND),\n+    LintId::of(methods::SUSPICIOUS_MAP),\n+    LintId::of(mut_key::MUTABLE_KEY_TYPE),\n+    LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n+    LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n+])"}, {"sha": "9fc6a9e0ccca073e30899604d6bf4c0747e2dd87", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 19, "deletions": 1392, "changes": 1411, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -203,6 +203,7 @@ mod entry;\n mod enum_clike;\n mod enum_variants;\n mod eq_op;\n+mod equatable_if_let;\n mod erasing_op;\n mod escape;\n mod eta_reduction;\n@@ -303,6 +304,7 @@ mod no_effect;\n mod non_copy_const;\n mod non_expressive_names;\n mod non_octal_unix_permissions;\n+mod non_send_fields_in_send_ty;\n mod nonstandard_macro_braces;\n mod open_options;\n mod option_env_unwrap;\n@@ -438,1401 +440,23 @@ pub fn read_conf(sess: &Session) -> Conf {\n pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf: &Conf) {\n     register_removed_non_tool_lints(store);\n \n-    // begin deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n-    store.register_removed(\n-        \"clippy::should_assert_eq\",\n-        \"`assert!()` will be more flexible with RFC 2011\",\n-    );\n-    store.register_removed(\n-        \"clippy::extend_from_slice\",\n-        \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\",\n-    );\n-    store.register_removed(\n-        \"clippy::range_step_by_zero\",\n-        \"`iterator.step_by(0)` panics nowadays\",\n-    );\n-    store.register_removed(\n-        \"clippy::unstable_as_slice\",\n-        \"`Vec::as_slice` has been stabilized in 1.7\",\n-    );\n-    store.register_removed(\n-        \"clippy::unstable_as_mut_slice\",\n-        \"`Vec::as_mut_slice` has been stabilized in 1.7\",\n-    );\n-    store.register_removed(\n-        \"clippy::misaligned_transmute\",\n-        \"this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\",\n-    );\n-    store.register_removed(\n-        \"clippy::assign_ops\",\n-        \"using compound assignment operators (e.g., `+=`) is harmless\",\n-    );\n-    store.register_removed(\n-        \"clippy::if_let_redundant_pattern_matching\",\n-        \"this lint has been changed to redundant_pattern_matching\",\n-    );\n-    store.register_removed(\n-        \"clippy::unsafe_vector_initialization\",\n-        \"the replacement suggested by this lint had substantially different behavior\",\n-    );\n-    store.register_removed(\n-        \"clippy::unused_collect\",\n-        \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\",\n-    );\n-    store.register_removed(\n-        \"clippy::replace_consts\",\n-        \"associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\",\n-    );\n-    store.register_removed(\n-        \"clippy::regex_macro\",\n-        \"the regex! macro has been removed from the regex crate in 2018\",\n-    );\n-    store.register_removed(\n-        \"clippy::find_map\",\n-        \"this lint has been replaced by `manual_find_map`, a more specific lint\",\n-    );\n-    store.register_removed(\n-        \"clippy::filter_map\",\n-        \"this lint has been replaced by `manual_filter_map`, a more specific lint\",\n-    );\n-    store.register_removed(\n-        \"clippy::pub_enum_variant_names\",\n-        \"set the `avoid-breaking-exported-api` config option to `false` to enable the `enum_variant_names` lint for public items\",\n-    );\n-    store.register_removed(\n-        \"clippy::wrong_pub_self_convention\",\n-        \"set the `avoid-breaking-exported-api` config option to `false` to enable the `wrong_self_convention` lint for public items\",\n-    );\n-    // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n+    include!(\"lib.deprecated.rs\");\n \n-    // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n-    store.register_lints(&[\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::DEFAULT_LINT,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::IF_CHAIN_STYLE,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::INTERNING_DEFINED_SYMBOL,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::INVALID_PATHS,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::PRODUCE_ICE,\n-        #[cfg(feature = \"internal-lints\")]\n-        utils::internal_lints::UNNECESSARY_SYMBOL_STR,\n-        absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS,\n-        approx_const::APPROX_CONSTANT,\n-        arithmetic::FLOAT_ARITHMETIC,\n-        arithmetic::INTEGER_ARITHMETIC,\n-        as_conversions::AS_CONVERSIONS,\n-        asm_syntax::INLINE_ASM_X86_ATT_SYNTAX,\n-        asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX,\n-        assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n-        assign_ops::ASSIGN_OP_PATTERN,\n-        assign_ops::MISREFACTORED_ASSIGN_OP,\n-        async_yields_async::ASYNC_YIELDS_ASYNC,\n-        attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n-        attrs::DEPRECATED_CFG_ATTR,\n-        attrs::DEPRECATED_SEMVER,\n-        attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n-        attrs::INLINE_ALWAYS,\n-        attrs::MISMATCHED_TARGET_OS,\n-        attrs::USELESS_ATTRIBUTE,\n-        await_holding_invalid::AWAIT_HOLDING_LOCK,\n-        await_holding_invalid::AWAIT_HOLDING_REFCELL_REF,\n-        bit_mask::BAD_BIT_MASK,\n-        bit_mask::INEFFECTIVE_BIT_MASK,\n-        bit_mask::VERBOSE_BIT_MASK,\n-        blacklisted_name::BLACKLISTED_NAME,\n-        blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS,\n-        bool_assert_comparison::BOOL_ASSERT_COMPARISON,\n-        booleans::LOGIC_BUG,\n-        booleans::NONMINIMAL_BOOL,\n-        bytecount::NAIVE_BYTECOUNT,\n-        cargo_common_metadata::CARGO_COMMON_METADATA,\n-        case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n-        casts::CAST_LOSSLESS,\n-        casts::CAST_POSSIBLE_TRUNCATION,\n-        casts::CAST_POSSIBLE_WRAP,\n-        casts::CAST_PRECISION_LOSS,\n-        casts::CAST_PTR_ALIGNMENT,\n-        casts::CAST_REF_TO_MUT,\n-        casts::CAST_SIGN_LOSS,\n-        casts::CHAR_LIT_AS_U8,\n-        casts::FN_TO_NUMERIC_CAST,\n-        casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n-        casts::PTR_AS_PTR,\n-        casts::UNNECESSARY_CAST,\n-        checked_conversions::CHECKED_CONVERSIONS,\n-        cognitive_complexity::COGNITIVE_COMPLEXITY,\n-        collapsible_if::COLLAPSIBLE_ELSE_IF,\n-        collapsible_if::COLLAPSIBLE_IF,\n-        collapsible_match::COLLAPSIBLE_MATCH,\n-        comparison_chain::COMPARISON_CHAIN,\n-        copies::BRANCHES_SHARING_CODE,\n-        copies::IFS_SAME_COND,\n-        copies::IF_SAME_THEN_ELSE,\n-        copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n-        copy_iterator::COPY_ITERATOR,\n-        create_dir::CREATE_DIR,\n-        dbg_macro::DBG_MACRO,\n-        default::DEFAULT_TRAIT_ACCESS,\n-        default::FIELD_REASSIGN_WITH_DEFAULT,\n-        default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK,\n-        dereference::EXPLICIT_DEREF_METHODS,\n-        derivable_impls::DERIVABLE_IMPLS,\n-        derive::DERIVE_HASH_XOR_EQ,\n-        derive::DERIVE_ORD_XOR_PARTIAL_ORD,\n-        derive::EXPL_IMPL_CLONE_ON_COPY,\n-        derive::UNSAFE_DERIVE_DESERIALIZE,\n-        disallowed_method::DISALLOWED_METHOD,\n-        disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS,\n-        disallowed_type::DISALLOWED_TYPE,\n-        doc::DOC_MARKDOWN,\n-        doc::MISSING_ERRORS_DOC,\n-        doc::MISSING_PANICS_DOC,\n-        doc::MISSING_SAFETY_DOC,\n-        doc::NEEDLESS_DOCTEST_MAIN,\n-        double_comparison::DOUBLE_COMPARISONS,\n-        double_parens::DOUBLE_PARENS,\n-        drop_forget_ref::DROP_COPY,\n-        drop_forget_ref::DROP_REF,\n-        drop_forget_ref::FORGET_COPY,\n-        drop_forget_ref::FORGET_REF,\n-        duration_subsec::DURATION_SUBSEC,\n-        else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n-        empty_enum::EMPTY_ENUM,\n-        entry::MAP_ENTRY,\n-        enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n-        enum_variants::ENUM_VARIANT_NAMES,\n-        enum_variants::MODULE_INCEPTION,\n-        enum_variants::MODULE_NAME_REPETITIONS,\n-        eq_op::EQ_OP,\n-        eq_op::OP_REF,\n-        erasing_op::ERASING_OP,\n-        escape::BOXED_LOCAL,\n-        eta_reduction::REDUNDANT_CLOSURE,\n-        eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n-        eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n-        eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n-        excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n-        excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n-        exhaustive_items::EXHAUSTIVE_ENUMS,\n-        exhaustive_items::EXHAUSTIVE_STRUCTS,\n-        exit::EXIT,\n-        explicit_write::EXPLICIT_WRITE,\n-        fallible_impl_from::FALLIBLE_IMPL_FROM,\n-        feature_name::NEGATIVE_FEATURE_NAMES,\n-        feature_name::REDUNDANT_FEATURE_NAMES,\n-        float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS,\n-        float_literal::EXCESSIVE_PRECISION,\n-        float_literal::LOSSY_FLOAT_LITERAL,\n-        floating_point_arithmetic::IMPRECISE_FLOPS,\n-        floating_point_arithmetic::SUBOPTIMAL_FLOPS,\n-        format::USELESS_FORMAT,\n-        formatting::POSSIBLE_MISSING_COMMA,\n-        formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n-        formatting::SUSPICIOUS_ELSE_FORMATTING,\n-        formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n-        from_over_into::FROM_OVER_INTO,\n-        from_str_radix_10::FROM_STR_RADIX_10,\n-        functions::DOUBLE_MUST_USE,\n-        functions::MUST_USE_CANDIDATE,\n-        functions::MUST_USE_UNIT,\n-        functions::NOT_UNSAFE_PTR_ARG_DEREF,\n-        functions::RESULT_UNIT_ERR,\n-        functions::TOO_MANY_ARGUMENTS,\n-        functions::TOO_MANY_LINES,\n-        future_not_send::FUTURE_NOT_SEND,\n-        get_last_with_len::GET_LAST_WITH_LEN,\n-        identity_op::IDENTITY_OP,\n-        if_let_mutex::IF_LET_MUTEX,\n-        if_not_else::IF_NOT_ELSE,\n-        if_then_panic::IF_THEN_PANIC,\n-        if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n-        implicit_hasher::IMPLICIT_HASHER,\n-        implicit_return::IMPLICIT_RETURN,\n-        implicit_saturating_sub::IMPLICIT_SATURATING_SUB,\n-        inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR,\n-        indexing_slicing::INDEXING_SLICING,\n-        indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n-        infinite_iter::INFINITE_ITER,\n-        infinite_iter::MAYBE_INFINITE_ITER,\n-        inherent_impl::MULTIPLE_INHERENT_IMPL,\n-        inherent_to_string::INHERENT_TO_STRING,\n-        inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n-        inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n-        int_plus_one::INT_PLUS_ONE,\n-        integer_division::INTEGER_DIVISION,\n-        invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS,\n-        items_after_statements::ITEMS_AFTER_STATEMENTS,\n-        iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n-        large_const_arrays::LARGE_CONST_ARRAYS,\n-        large_enum_variant::LARGE_ENUM_VARIANT,\n-        large_stack_arrays::LARGE_STACK_ARRAYS,\n-        len_zero::COMPARISON_TO_EMPTY,\n-        len_zero::LEN_WITHOUT_IS_EMPTY,\n-        len_zero::LEN_ZERO,\n-        let_if_seq::USELESS_LET_IF_SEQ,\n-        let_underscore::LET_UNDERSCORE_DROP,\n-        let_underscore::LET_UNDERSCORE_LOCK,\n-        let_underscore::LET_UNDERSCORE_MUST_USE,\n-        lifetimes::EXTRA_UNUSED_LIFETIMES,\n-        lifetimes::NEEDLESS_LIFETIMES,\n-        literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n-        literal_representation::INCONSISTENT_DIGIT_GROUPING,\n-        literal_representation::LARGE_DIGIT_GROUPS,\n-        literal_representation::MISTYPED_LITERAL_SUFFIXES,\n-        literal_representation::UNREADABLE_LITERAL,\n-        literal_representation::UNUSUAL_BYTE_GROUPINGS,\n-        loops::EMPTY_LOOP,\n-        loops::EXPLICIT_COUNTER_LOOP,\n-        loops::EXPLICIT_INTO_ITER_LOOP,\n-        loops::EXPLICIT_ITER_LOOP,\n-        loops::FOR_KV_MAP,\n-        loops::FOR_LOOPS_OVER_FALLIBLES,\n-        loops::ITER_NEXT_LOOP,\n-        loops::MANUAL_FLATTEN,\n-        loops::MANUAL_MEMCPY,\n-        loops::MUT_RANGE_BOUND,\n-        loops::NEEDLESS_COLLECT,\n-        loops::NEEDLESS_RANGE_LOOP,\n-        loops::NEVER_LOOP,\n-        loops::SAME_ITEM_PUSH,\n-        loops::SINGLE_ELEMENT_LOOP,\n-        loops::WHILE_IMMUTABLE_CONDITION,\n-        loops::WHILE_LET_LOOP,\n-        loops::WHILE_LET_ON_ITERATOR,\n-        macro_use::MACRO_USE_IMPORTS,\n-        main_recursion::MAIN_RECURSION,\n-        manual_async_fn::MANUAL_ASYNC_FN,\n-        manual_map::MANUAL_MAP,\n-        manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n-        manual_ok_or::MANUAL_OK_OR,\n-        manual_strip::MANUAL_STRIP,\n-        manual_unwrap_or::MANUAL_UNWRAP_OR,\n-        map_clone::MAP_CLONE,\n-        map_err_ignore::MAP_ERR_IGNORE,\n-        map_unit_fn::OPTION_MAP_UNIT_FN,\n-        map_unit_fn::RESULT_MAP_UNIT_FN,\n-        match_on_vec_items::MATCH_ON_VEC_ITEMS,\n-        match_result_ok::MATCH_RESULT_OK,\n-        matches::INFALLIBLE_DESTRUCTURING_MATCH,\n-        matches::MATCH_AS_REF,\n-        matches::MATCH_BOOL,\n-        matches::MATCH_LIKE_MATCHES_MACRO,\n-        matches::MATCH_OVERLAPPING_ARM,\n-        matches::MATCH_REF_PATS,\n-        matches::MATCH_SAME_ARMS,\n-        matches::MATCH_SINGLE_BINDING,\n-        matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n-        matches::MATCH_WILD_ERR_ARM,\n-        matches::REDUNDANT_PATTERN_MATCHING,\n-        matches::REST_PAT_IN_FULLY_BOUND_STRUCTS,\n-        matches::SINGLE_MATCH,\n-        matches::SINGLE_MATCH_ELSE,\n-        matches::WILDCARD_ENUM_MATCH_ARM,\n-        matches::WILDCARD_IN_OR_PATTERNS,\n-        mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n-        mem_forget::MEM_FORGET,\n-        mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n-        mem_replace::MEM_REPLACE_WITH_DEFAULT,\n-        mem_replace::MEM_REPLACE_WITH_UNINIT,\n-        methods::BIND_INSTEAD_OF_MAP,\n-        methods::BYTES_NTH,\n-        methods::CHARS_LAST_CMP,\n-        methods::CHARS_NEXT_CMP,\n-        methods::CLONED_INSTEAD_OF_COPIED,\n-        methods::CLONE_DOUBLE_REF,\n-        methods::CLONE_ON_COPY,\n-        methods::CLONE_ON_REF_PTR,\n-        methods::EXPECT_FUN_CALL,\n-        methods::EXPECT_USED,\n-        methods::EXTEND_WITH_DRAIN,\n-        methods::FILETYPE_IS_FILE,\n-        methods::FILTER_MAP_IDENTITY,\n-        methods::FILTER_MAP_NEXT,\n-        methods::FILTER_NEXT,\n-        methods::FLAT_MAP_IDENTITY,\n-        methods::FLAT_MAP_OPTION,\n-        methods::FROM_ITER_INSTEAD_OF_COLLECT,\n-        methods::GET_UNWRAP,\n-        methods::IMPLICIT_CLONE,\n-        methods::INEFFICIENT_TO_STRING,\n-        methods::INSPECT_FOR_EACH,\n-        methods::INTO_ITER_ON_REF,\n-        methods::ITERATOR_STEP_BY_ZERO,\n-        methods::ITER_CLONED_COLLECT,\n-        methods::ITER_COUNT,\n-        methods::ITER_NEXT_SLICE,\n-        methods::ITER_NTH,\n-        methods::ITER_NTH_ZERO,\n-        methods::ITER_SKIP_NEXT,\n-        methods::MANUAL_FILTER_MAP,\n-        methods::MANUAL_FIND_MAP,\n-        methods::MANUAL_SATURATING_ARITHMETIC,\n-        methods::MANUAL_SPLIT_ONCE,\n-        methods::MANUAL_STR_REPEAT,\n-        methods::MAP_COLLECT_RESULT_UNIT,\n-        methods::MAP_FLATTEN,\n-        methods::MAP_IDENTITY,\n-        methods::MAP_UNWRAP_OR,\n-        methods::NEW_RET_NO_SELF,\n-        methods::OK_EXPECT,\n-        methods::OPTION_AS_REF_DEREF,\n-        methods::OPTION_FILTER_MAP,\n-        methods::OPTION_MAP_OR_NONE,\n-        methods::OR_FUN_CALL,\n-        methods::RESULT_MAP_OR_INTO_OPTION,\n-        methods::SEARCH_IS_SOME,\n-        methods::SHOULD_IMPLEMENT_TRAIT,\n-        methods::SINGLE_CHAR_ADD_STR,\n-        methods::SINGLE_CHAR_PATTERN,\n-        methods::SKIP_WHILE_NEXT,\n-        methods::STRING_EXTEND_CHARS,\n-        methods::SUSPICIOUS_MAP,\n-        methods::SUSPICIOUS_SPLITN,\n-        methods::UNINIT_ASSUMED_INIT,\n-        methods::UNNECESSARY_FILTER_MAP,\n-        methods::UNNECESSARY_FOLD,\n-        methods::UNNECESSARY_LAZY_EVALUATIONS,\n-        methods::UNWRAP_OR_ELSE_DEFAULT,\n-        methods::UNWRAP_USED,\n-        methods::USELESS_ASREF,\n-        methods::WRONG_SELF_CONVENTION,\n-        methods::ZST_OFFSET,\n-        minmax::MIN_MAX,\n-        misc::CMP_NAN,\n-        misc::CMP_OWNED,\n-        misc::FLOAT_CMP,\n-        misc::FLOAT_CMP_CONST,\n-        misc::MODULO_ONE,\n-        misc::SHORT_CIRCUIT_STATEMENT,\n-        misc::TOPLEVEL_REF_ARG,\n-        misc::USED_UNDERSCORE_BINDING,\n-        misc::ZERO_PTR,\n-        misc_early::BUILTIN_TYPE_SHADOW,\n-        misc_early::DOUBLE_NEG,\n-        misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n-        misc_early::MIXED_CASE_HEX_LITERALS,\n-        misc_early::REDUNDANT_PATTERN,\n-        misc_early::UNNEEDED_FIELD_PATTERN,\n-        misc_early::UNNEEDED_WILDCARD_PATTERN,\n-        misc_early::UNSEPARATED_LITERAL_SUFFIX,\n-        misc_early::ZERO_PREFIXED_LITERAL,\n-        missing_const_for_fn::MISSING_CONST_FOR_FN,\n-        missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n-        missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES,\n-        missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n-        module_style::MOD_MODULE_FILES,\n-        module_style::SELF_NAMED_MODULE_FILES,\n-        modulo_arithmetic::MODULO_ARITHMETIC,\n-        multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n-        mut_key::MUTABLE_KEY_TYPE,\n-        mut_mut::MUT_MUT,\n-        mut_mutex_lock::MUT_MUTEX_LOCK,\n-        mut_reference::UNNECESSARY_MUT_PASSED,\n-        mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n-        mutex_atomic::MUTEX_ATOMIC,\n-        mutex_atomic::MUTEX_INTEGER,\n-        needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE,\n-        needless_bitwise_bool::NEEDLESS_BITWISE_BOOL,\n-        needless_bool::BOOL_COMPARISON,\n-        needless_bool::NEEDLESS_BOOL,\n-        needless_borrow::NEEDLESS_BORROW,\n-        needless_borrow::REF_BINDING_TO_REFERENCE,\n-        needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n-        needless_continue::NEEDLESS_CONTINUE,\n-        needless_for_each::NEEDLESS_FOR_EACH,\n-        needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF,\n-        needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n-        needless_question_mark::NEEDLESS_QUESTION_MARK,\n-        needless_update::NEEDLESS_UPDATE,\n-        neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n-        neg_multiply::NEG_MULTIPLY,\n-        new_without_default::NEW_WITHOUT_DEFAULT,\n-        no_effect::NO_EFFECT,\n-        no_effect::UNNECESSARY_OPERATION,\n-        non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n-        non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST,\n-        non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n-        non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n-        non_expressive_names::SIMILAR_NAMES,\n-        non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS,\n-        nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES,\n-        open_options::NONSENSICAL_OPEN_OPTIONS,\n-        option_env_unwrap::OPTION_ENV_UNWRAP,\n-        option_if_let_else::OPTION_IF_LET_ELSE,\n-        overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n-        panic_in_result_fn::PANIC_IN_RESULT_FN,\n-        panic_unimplemented::PANIC,\n-        panic_unimplemented::TODO,\n-        panic_unimplemented::UNIMPLEMENTED,\n-        panic_unimplemented::UNREACHABLE,\n-        partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n-        pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE,\n-        pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF,\n-        path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE,\n-        pattern_type_mismatch::PATTERN_TYPE_MISMATCH,\n-        precedence::PRECEDENCE,\n-        ptr::CMP_NULL,\n-        ptr::INVALID_NULL_PTR_USAGE,\n-        ptr::MUT_FROM_REF,\n-        ptr::PTR_ARG,\n-        ptr_eq::PTR_EQ,\n-        ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n-        question_mark::QUESTION_MARK,\n-        ranges::MANUAL_RANGE_CONTAINS,\n-        ranges::RANGE_MINUS_ONE,\n-        ranges::RANGE_PLUS_ONE,\n-        ranges::RANGE_ZIP_WITH_LEN,\n-        ranges::REVERSED_EMPTY_RANGES,\n-        redundant_clone::REDUNDANT_CLONE,\n-        redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n-        redundant_else::REDUNDANT_ELSE,\n-        redundant_field_names::REDUNDANT_FIELD_NAMES,\n-        redundant_pub_crate::REDUNDANT_PUB_CRATE,\n-        redundant_slicing::REDUNDANT_SLICING,\n-        redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n-        ref_option_ref::REF_OPTION_REF,\n-        reference::DEREF_ADDROF,\n-        reference::REF_IN_DEREF,\n-        regex::INVALID_REGEX,\n-        regex::TRIVIAL_REGEX,\n-        repeat_once::REPEAT_ONCE,\n-        returns::LET_AND_RETURN,\n-        returns::NEEDLESS_RETURN,\n-        same_name_method::SAME_NAME_METHOD,\n-        self_assignment::SELF_ASSIGNMENT,\n-        self_named_constructors::SELF_NAMED_CONSTRUCTORS,\n-        semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED,\n-        serde_api::SERDE_API_MISUSE,\n-        shadow::SHADOW_REUSE,\n-        shadow::SHADOW_SAME,\n-        shadow::SHADOW_UNRELATED,\n-        single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n-        size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n-        slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n-        stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n-        strings::STRING_ADD,\n-        strings::STRING_ADD_ASSIGN,\n-        strings::STRING_FROM_UTF8_AS_BYTES,\n-        strings::STRING_LIT_AS_BYTES,\n-        strings::STRING_TO_STRING,\n-        strings::STR_TO_STRING,\n-        strlen_on_c_strings::STRLEN_ON_C_STRINGS,\n-        suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS,\n-        suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n-        suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n-        swap::ALMOST_SWAPPED,\n-        swap::MANUAL_SWAP,\n-        tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n-        temporary_assignment::TEMPORARY_ASSIGNMENT,\n-        to_digit_is_some::TO_DIGIT_IS_SOME,\n-        to_string_in_display::TO_STRING_IN_DISPLAY,\n-        trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS,\n-        trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n-        transmute::CROSSPOINTER_TRANSMUTE,\n-        transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n-        transmute::TRANSMUTE_BYTES_TO_STR,\n-        transmute::TRANSMUTE_FLOAT_TO_INT,\n-        transmute::TRANSMUTE_INT_TO_BOOL,\n-        transmute::TRANSMUTE_INT_TO_CHAR,\n-        transmute::TRANSMUTE_INT_TO_FLOAT,\n-        transmute::TRANSMUTE_PTR_TO_PTR,\n-        transmute::TRANSMUTE_PTR_TO_REF,\n-        transmute::UNSOUND_COLLECTION_TRANSMUTE,\n-        transmute::USELESS_TRANSMUTE,\n-        transmute::WRONG_TRANSMUTE,\n-        transmuting_null::TRANSMUTING_NULL,\n-        try_err::TRY_ERR,\n-        types::BORROWED_BOX,\n-        types::BOX_COLLECTION,\n-        types::LINKEDLIST,\n-        types::OPTION_OPTION,\n-        types::RC_BUFFER,\n-        types::RC_MUTEX,\n-        types::REDUNDANT_ALLOCATION,\n-        types::TYPE_COMPLEXITY,\n-        types::VEC_BOX,\n-        undropped_manually_drops::UNDROPPED_MANUALLY_DROPS,\n-        unicode::INVISIBLE_CHARACTERS,\n-        unicode::NON_ASCII_LITERAL,\n-        unicode::UNICODE_NOT_NFC,\n-        unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n-        unit_types::LET_UNIT_VALUE,\n-        unit_types::UNIT_ARG,\n-        unit_types::UNIT_CMP,\n-        unnamed_address::FN_ADDRESS_COMPARISONS,\n-        unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n-        unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS,\n-        unnecessary_sort_by::UNNECESSARY_SORT_BY,\n-        unnecessary_wraps::UNNECESSARY_WRAPS,\n-        unnested_or_patterns::UNNESTED_OR_PATTERNS,\n-        unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n-        unused_async::UNUSED_ASYNC,\n-        unused_io_amount::UNUSED_IO_AMOUNT,\n-        unused_self::UNUSED_SELF,\n-        unused_unit::UNUSED_UNIT,\n-        unwrap::PANICKING_UNWRAP,\n-        unwrap::UNNECESSARY_UNWRAP,\n-        unwrap_in_result::UNWRAP_IN_RESULT,\n-        upper_case_acronyms::UPPER_CASE_ACRONYMS,\n-        use_self::USE_SELF,\n-        useless_conversion::USELESS_CONVERSION,\n-        vec::USELESS_VEC,\n-        vec_init_then_push::VEC_INIT_THEN_PUSH,\n-        vec_resize_to_zero::VEC_RESIZE_TO_ZERO,\n-        verbose_file_reads::VERBOSE_FILE_READS,\n-        wildcard_dependencies::WILDCARD_DEPENDENCIES,\n-        wildcard_imports::ENUM_GLOB_USE,\n-        wildcard_imports::WILDCARD_IMPORTS,\n-        write::PRINTLN_EMPTY_STRING,\n-        write::PRINT_LITERAL,\n-        write::PRINT_STDERR,\n-        write::PRINT_STDOUT,\n-        write::PRINT_WITH_NEWLINE,\n-        write::USE_DEBUG,\n-        write::WRITELN_EMPTY_STRING,\n-        write::WRITE_LITERAL,\n-        write::WRITE_WITH_NEWLINE,\n-        zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n-        zero_sized_map_values::ZERO_SIZED_MAP_VALUES,\n-    ]);\n-    // end register lints, do not remove this comment, it\u2019s used in `update_lints`\n-\n-    store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n-        LintId::of(arithmetic::FLOAT_ARITHMETIC),\n-        LintId::of(arithmetic::INTEGER_ARITHMETIC),\n-        LintId::of(as_conversions::AS_CONVERSIONS),\n-        LintId::of(asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n-        LintId::of(asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n-        LintId::of(create_dir::CREATE_DIR),\n-        LintId::of(dbg_macro::DBG_MACRO),\n-        LintId::of(default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK),\n-        LintId::of(disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS),\n-        LintId::of(else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n-        LintId::of(exhaustive_items::EXHAUSTIVE_ENUMS),\n-        LintId::of(exhaustive_items::EXHAUSTIVE_STRUCTS),\n-        LintId::of(exit::EXIT),\n-        LintId::of(float_literal::LOSSY_FLOAT_LITERAL),\n-        LintId::of(if_then_some_else_none::IF_THEN_SOME_ELSE_NONE),\n-        LintId::of(implicit_return::IMPLICIT_RETURN),\n-        LintId::of(indexing_slicing::INDEXING_SLICING),\n-        LintId::of(inherent_impl::MULTIPLE_INHERENT_IMPL),\n-        LintId::of(integer_division::INTEGER_DIVISION),\n-        LintId::of(let_underscore::LET_UNDERSCORE_MUST_USE),\n-        LintId::of(literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n-        LintId::of(map_err_ignore::MAP_ERR_IGNORE),\n-        LintId::of(matches::REST_PAT_IN_FULLY_BOUND_STRUCTS),\n-        LintId::of(matches::WILDCARD_ENUM_MATCH_ARM),\n-        LintId::of(mem_forget::MEM_FORGET),\n-        LintId::of(methods::CLONE_ON_REF_PTR),\n-        LintId::of(methods::EXPECT_USED),\n-        LintId::of(methods::FILETYPE_IS_FILE),\n-        LintId::of(methods::GET_UNWRAP),\n-        LintId::of(methods::UNWRAP_USED),\n-        LintId::of(misc::FLOAT_CMP_CONST),\n-        LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n-        LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n-        LintId::of(missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES),\n-        LintId::of(missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n-        LintId::of(module_style::MOD_MODULE_FILES),\n-        LintId::of(module_style::SELF_NAMED_MODULE_FILES),\n-        LintId::of(modulo_arithmetic::MODULO_ARITHMETIC),\n-        LintId::of(panic_in_result_fn::PANIC_IN_RESULT_FN),\n-        LintId::of(panic_unimplemented::PANIC),\n-        LintId::of(panic_unimplemented::TODO),\n-        LintId::of(panic_unimplemented::UNIMPLEMENTED),\n-        LintId::of(panic_unimplemented::UNREACHABLE),\n-        LintId::of(pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n-        LintId::of(same_name_method::SAME_NAME_METHOD),\n-        LintId::of(shadow::SHADOW_REUSE),\n-        LintId::of(shadow::SHADOW_SAME),\n-        LintId::of(strings::STRING_ADD),\n-        LintId::of(strings::STRING_TO_STRING),\n-        LintId::of(strings::STR_TO_STRING),\n-        LintId::of(types::RC_BUFFER),\n-        LintId::of(types::RC_MUTEX),\n-        LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n-        LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n-        LintId::of(verbose_file_reads::VERBOSE_FILE_READS),\n-        LintId::of(write::PRINT_STDERR),\n-        LintId::of(write::PRINT_STDOUT),\n-        LintId::of(write::USE_DEBUG),\n-    ]);\n-\n-    store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n-        LintId::of(attrs::INLINE_ALWAYS),\n-        LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n-        LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n-        LintId::of(bit_mask::VERBOSE_BIT_MASK),\n-        LintId::of(bytecount::NAIVE_BYTECOUNT),\n-        LintId::of(case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n-        LintId::of(casts::CAST_LOSSLESS),\n-        LintId::of(casts::CAST_POSSIBLE_TRUNCATION),\n-        LintId::of(casts::CAST_POSSIBLE_WRAP),\n-        LintId::of(casts::CAST_PRECISION_LOSS),\n-        LintId::of(casts::CAST_PTR_ALIGNMENT),\n-        LintId::of(casts::CAST_SIGN_LOSS),\n-        LintId::of(casts::PTR_AS_PTR),\n-        LintId::of(checked_conversions::CHECKED_CONVERSIONS),\n-        LintId::of(copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n-        LintId::of(copy_iterator::COPY_ITERATOR),\n-        LintId::of(default::DEFAULT_TRAIT_ACCESS),\n-        LintId::of(dereference::EXPLICIT_DEREF_METHODS),\n-        LintId::of(derive::EXPL_IMPL_CLONE_ON_COPY),\n-        LintId::of(derive::UNSAFE_DERIVE_DESERIALIZE),\n-        LintId::of(doc::DOC_MARKDOWN),\n-        LintId::of(doc::MISSING_ERRORS_DOC),\n-        LintId::of(doc::MISSING_PANICS_DOC),\n-        LintId::of(empty_enum::EMPTY_ENUM),\n-        LintId::of(enum_variants::MODULE_NAME_REPETITIONS),\n-        LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n-        LintId::of(excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n-        LintId::of(excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n-        LintId::of(functions::MUST_USE_CANDIDATE),\n-        LintId::of(functions::TOO_MANY_LINES),\n-        LintId::of(if_not_else::IF_NOT_ELSE),\n-        LintId::of(implicit_hasher::IMPLICIT_HASHER),\n-        LintId::of(implicit_saturating_sub::IMPLICIT_SATURATING_SUB),\n-        LintId::of(inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR),\n-        LintId::of(infinite_iter::MAYBE_INFINITE_ITER),\n-        LintId::of(invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS),\n-        LintId::of(items_after_statements::ITEMS_AFTER_STATEMENTS),\n-        LintId::of(iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR),\n-        LintId::of(large_stack_arrays::LARGE_STACK_ARRAYS),\n-        LintId::of(let_underscore::LET_UNDERSCORE_DROP),\n-        LintId::of(literal_representation::LARGE_DIGIT_GROUPS),\n-        LintId::of(literal_representation::UNREADABLE_LITERAL),\n-        LintId::of(loops::EXPLICIT_INTO_ITER_LOOP),\n-        LintId::of(loops::EXPLICIT_ITER_LOOP),\n-        LintId::of(macro_use::MACRO_USE_IMPORTS),\n-        LintId::of(manual_ok_or::MANUAL_OK_OR),\n-        LintId::of(match_on_vec_items::MATCH_ON_VEC_ITEMS),\n-        LintId::of(matches::MATCH_BOOL),\n-        LintId::of(matches::MATCH_SAME_ARMS),\n-        LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n-        LintId::of(matches::MATCH_WILD_ERR_ARM),\n-        LintId::of(matches::SINGLE_MATCH_ELSE),\n-        LintId::of(methods::CLONED_INSTEAD_OF_COPIED),\n-        LintId::of(methods::FILTER_MAP_NEXT),\n-        LintId::of(methods::FLAT_MAP_OPTION),\n-        LintId::of(methods::FROM_ITER_INSTEAD_OF_COLLECT),\n-        LintId::of(methods::IMPLICIT_CLONE),\n-        LintId::of(methods::INEFFICIENT_TO_STRING),\n-        LintId::of(methods::MAP_FLATTEN),\n-        LintId::of(methods::MAP_UNWRAP_OR),\n-        LintId::of(misc::FLOAT_CMP),\n-        LintId::of(misc::USED_UNDERSCORE_BINDING),\n-        LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n-        LintId::of(mut_mut::MUT_MUT),\n-        LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n-        LintId::of(needless_borrow::REF_BINDING_TO_REFERENCE),\n-        LintId::of(needless_continue::NEEDLESS_CONTINUE),\n-        LintId::of(needless_for_each::NEEDLESS_FOR_EACH),\n-        LintId::of(needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n-        LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n-        LintId::of(non_expressive_names::SIMILAR_NAMES),\n-        LintId::of(pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE),\n-        LintId::of(pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n-        LintId::of(ranges::RANGE_MINUS_ONE),\n-        LintId::of(ranges::RANGE_PLUS_ONE),\n-        LintId::of(redundant_else::REDUNDANT_ELSE),\n-        LintId::of(ref_option_ref::REF_OPTION_REF),\n-        LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n-        LintId::of(shadow::SHADOW_UNRELATED),\n-        LintId::of(strings::STRING_ADD_ASSIGN),\n-        LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n-        LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n-        LintId::of(transmute::TRANSMUTE_PTR_TO_PTR),\n-        LintId::of(types::LINKEDLIST),\n-        LintId::of(types::OPTION_OPTION),\n-        LintId::of(unicode::NON_ASCII_LITERAL),\n-        LintId::of(unicode::UNICODE_NOT_NFC),\n-        LintId::of(unit_types::LET_UNIT_VALUE),\n-        LintId::of(unnecessary_wraps::UNNECESSARY_WRAPS),\n-        LintId::of(unnested_or_patterns::UNNESTED_OR_PATTERNS),\n-        LintId::of(unused_async::UNUSED_ASYNC),\n-        LintId::of(unused_self::UNUSED_SELF),\n-        LintId::of(wildcard_imports::ENUM_GLOB_USE),\n-        LintId::of(wildcard_imports::WILDCARD_IMPORTS),\n-        LintId::of(zero_sized_map_values::ZERO_SIZED_MAP_VALUES),\n-    ]);\n+    include!(\"lib.register_lints.rs\");\n+    include!(\"lib.register_restriction.rs\");\n+    include!(\"lib.register_pedantic.rs\");\n \n     #[cfg(feature = \"internal-lints\")]\n-    store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n-        LintId::of(utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n-        LintId::of(utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n-        LintId::of(utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n-        LintId::of(utils::internal_lints::DEFAULT_LINT),\n-        LintId::of(utils::internal_lints::IF_CHAIN_STYLE),\n-        LintId::of(utils::internal_lints::INTERNING_DEFINED_SYMBOL),\n-        LintId::of(utils::internal_lints::INVALID_PATHS),\n-        LintId::of(utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n-        LintId::of(utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),\n-        LintId::of(utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n-        LintId::of(utils::internal_lints::PRODUCE_ICE),\n-        LintId::of(utils::internal_lints::UNNECESSARY_SYMBOL_STR),\n-    ]);\n-\n-    store.register_group(true, \"clippy::all\", Some(\"clippy\"), vec![\n-        LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n-        LintId::of(approx_const::APPROX_CONSTANT),\n-        LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n-        LintId::of(assign_ops::ASSIGN_OP_PATTERN),\n-        LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n-        LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n-        LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n-        LintId::of(attrs::DEPRECATED_CFG_ATTR),\n-        LintId::of(attrs::DEPRECATED_SEMVER),\n-        LintId::of(attrs::MISMATCHED_TARGET_OS),\n-        LintId::of(attrs::USELESS_ATTRIBUTE),\n-        LintId::of(bit_mask::BAD_BIT_MASK),\n-        LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n-        LintId::of(blacklisted_name::BLACKLISTED_NAME),\n-        LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n-        LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n-        LintId::of(booleans::LOGIC_BUG),\n-        LintId::of(booleans::NONMINIMAL_BOOL),\n-        LintId::of(casts::CAST_REF_TO_MUT),\n-        LintId::of(casts::CHAR_LIT_AS_U8),\n-        LintId::of(casts::FN_TO_NUMERIC_CAST),\n-        LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-        LintId::of(casts::UNNECESSARY_CAST),\n-        LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n-        LintId::of(collapsible_if::COLLAPSIBLE_IF),\n-        LintId::of(collapsible_match::COLLAPSIBLE_MATCH),\n-        LintId::of(comparison_chain::COMPARISON_CHAIN),\n-        LintId::of(copies::IFS_SAME_COND),\n-        LintId::of(copies::IF_SAME_THEN_ELSE),\n-        LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n-        LintId::of(derivable_impls::DERIVABLE_IMPLS),\n-        LintId::of(derive::DERIVE_HASH_XOR_EQ),\n-        LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n-        LintId::of(doc::MISSING_SAFETY_DOC),\n-        LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n-        LintId::of(double_comparison::DOUBLE_COMPARISONS),\n-        LintId::of(double_parens::DOUBLE_PARENS),\n-        LintId::of(drop_forget_ref::DROP_COPY),\n-        LintId::of(drop_forget_ref::DROP_REF),\n-        LintId::of(drop_forget_ref::FORGET_COPY),\n-        LintId::of(drop_forget_ref::FORGET_REF),\n-        LintId::of(duration_subsec::DURATION_SUBSEC),\n-        LintId::of(entry::MAP_ENTRY),\n-        LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n-        LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n-        LintId::of(enum_variants::MODULE_INCEPTION),\n-        LintId::of(eq_op::EQ_OP),\n-        LintId::of(eq_op::OP_REF),\n-        LintId::of(erasing_op::ERASING_OP),\n-        LintId::of(escape::BOXED_LOCAL),\n-        LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n-        LintId::of(eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n-        LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n-        LintId::of(explicit_write::EXPLICIT_WRITE),\n-        LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n-        LintId::of(float_literal::EXCESSIVE_PRECISION),\n-        LintId::of(format::USELESS_FORMAT),\n-        LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n-        LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n-        LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n-        LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n-        LintId::of(from_over_into::FROM_OVER_INTO),\n-        LintId::of(from_str_radix_10::FROM_STR_RADIX_10),\n-        LintId::of(functions::DOUBLE_MUST_USE),\n-        LintId::of(functions::MUST_USE_UNIT),\n-        LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n-        LintId::of(functions::RESULT_UNIT_ERR),\n-        LintId::of(functions::TOO_MANY_ARGUMENTS),\n-        LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n-        LintId::of(identity_op::IDENTITY_OP),\n-        LintId::of(if_let_mutex::IF_LET_MUTEX),\n-        LintId::of(if_then_panic::IF_THEN_PANIC),\n-        LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n-        LintId::of(infinite_iter::INFINITE_ITER),\n-        LintId::of(inherent_to_string::INHERENT_TO_STRING),\n-        LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n-        LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n-        LintId::of(int_plus_one::INT_PLUS_ONE),\n-        LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n-        LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n-        LintId::of(len_zero::COMPARISON_TO_EMPTY),\n-        LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n-        LintId::of(len_zero::LEN_ZERO),\n-        LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n-        LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n-        LintId::of(lifetimes::NEEDLESS_LIFETIMES),\n-        LintId::of(literal_representation::INCONSISTENT_DIGIT_GROUPING),\n-        LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n-        LintId::of(literal_representation::UNUSUAL_BYTE_GROUPINGS),\n-        LintId::of(loops::EMPTY_LOOP),\n-        LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n-        LintId::of(loops::FOR_KV_MAP),\n-        LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n-        LintId::of(loops::ITER_NEXT_LOOP),\n-        LintId::of(loops::MANUAL_FLATTEN),\n-        LintId::of(loops::MANUAL_MEMCPY),\n-        LintId::of(loops::MUT_RANGE_BOUND),\n-        LintId::of(loops::NEEDLESS_COLLECT),\n-        LintId::of(loops::NEEDLESS_RANGE_LOOP),\n-        LintId::of(loops::NEVER_LOOP),\n-        LintId::of(loops::SAME_ITEM_PUSH),\n-        LintId::of(loops::SINGLE_ELEMENT_LOOP),\n-        LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n-        LintId::of(loops::WHILE_LET_LOOP),\n-        LintId::of(loops::WHILE_LET_ON_ITERATOR),\n-        LintId::of(main_recursion::MAIN_RECURSION),\n-        LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n-        LintId::of(manual_map::MANUAL_MAP),\n-        LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n-        LintId::of(manual_strip::MANUAL_STRIP),\n-        LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n-        LintId::of(map_clone::MAP_CLONE),\n-        LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n-        LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n-        LintId::of(match_result_ok::MATCH_RESULT_OK),\n-        LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n-        LintId::of(matches::MATCH_AS_REF),\n-        LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n-        LintId::of(matches::MATCH_OVERLAPPING_ARM),\n-        LintId::of(matches::MATCH_REF_PATS),\n-        LintId::of(matches::MATCH_SINGLE_BINDING),\n-        LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n-        LintId::of(matches::SINGLE_MATCH),\n-        LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n-        LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n-        LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n-        LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n-        LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n-        LintId::of(methods::BIND_INSTEAD_OF_MAP),\n-        LintId::of(methods::BYTES_NTH),\n-        LintId::of(methods::CHARS_LAST_CMP),\n-        LintId::of(methods::CHARS_NEXT_CMP),\n-        LintId::of(methods::CLONE_DOUBLE_REF),\n-        LintId::of(methods::CLONE_ON_COPY),\n-        LintId::of(methods::EXPECT_FUN_CALL),\n-        LintId::of(methods::EXTEND_WITH_DRAIN),\n-        LintId::of(methods::FILTER_MAP_IDENTITY),\n-        LintId::of(methods::FILTER_NEXT),\n-        LintId::of(methods::FLAT_MAP_IDENTITY),\n-        LintId::of(methods::INSPECT_FOR_EACH),\n-        LintId::of(methods::INTO_ITER_ON_REF),\n-        LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n-        LintId::of(methods::ITER_CLONED_COLLECT),\n-        LintId::of(methods::ITER_COUNT),\n-        LintId::of(methods::ITER_NEXT_SLICE),\n-        LintId::of(methods::ITER_NTH),\n-        LintId::of(methods::ITER_NTH_ZERO),\n-        LintId::of(methods::ITER_SKIP_NEXT),\n-        LintId::of(methods::MANUAL_FILTER_MAP),\n-        LintId::of(methods::MANUAL_FIND_MAP),\n-        LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n-        LintId::of(methods::MANUAL_SPLIT_ONCE),\n-        LintId::of(methods::MANUAL_STR_REPEAT),\n-        LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n-        LintId::of(methods::MAP_IDENTITY),\n-        LintId::of(methods::NEW_RET_NO_SELF),\n-        LintId::of(methods::OK_EXPECT),\n-        LintId::of(methods::OPTION_AS_REF_DEREF),\n-        LintId::of(methods::OPTION_FILTER_MAP),\n-        LintId::of(methods::OPTION_MAP_OR_NONE),\n-        LintId::of(methods::OR_FUN_CALL),\n-        LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n-        LintId::of(methods::SEARCH_IS_SOME),\n-        LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),\n-        LintId::of(methods::SINGLE_CHAR_ADD_STR),\n-        LintId::of(methods::SINGLE_CHAR_PATTERN),\n-        LintId::of(methods::SKIP_WHILE_NEXT),\n-        LintId::of(methods::STRING_EXTEND_CHARS),\n-        LintId::of(methods::SUSPICIOUS_MAP),\n-        LintId::of(methods::SUSPICIOUS_SPLITN),\n-        LintId::of(methods::UNINIT_ASSUMED_INIT),\n-        LintId::of(methods::UNNECESSARY_FILTER_MAP),\n-        LintId::of(methods::UNNECESSARY_FOLD),\n-        LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n-        LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n-        LintId::of(methods::USELESS_ASREF),\n-        LintId::of(methods::WRONG_SELF_CONVENTION),\n-        LintId::of(methods::ZST_OFFSET),\n-        LintId::of(minmax::MIN_MAX),\n-        LintId::of(misc::CMP_NAN),\n-        LintId::of(misc::CMP_OWNED),\n-        LintId::of(misc::MODULO_ONE),\n-        LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n-        LintId::of(misc::TOPLEVEL_REF_ARG),\n-        LintId::of(misc::ZERO_PTR),\n-        LintId::of(misc_early::BUILTIN_TYPE_SHADOW),\n-        LintId::of(misc_early::DOUBLE_NEG),\n-        LintId::of(misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n-        LintId::of(misc_early::MIXED_CASE_HEX_LITERALS),\n-        LintId::of(misc_early::REDUNDANT_PATTERN),\n-        LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n-        LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n-        LintId::of(mut_key::MUTABLE_KEY_TYPE),\n-        LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n-        LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n-        LintId::of(mutex_atomic::MUTEX_ATOMIC),\n-        LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n-        LintId::of(needless_bool::BOOL_COMPARISON),\n-        LintId::of(needless_bool::NEEDLESS_BOOL),\n-        LintId::of(needless_borrow::NEEDLESS_BORROW),\n-        LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n-        LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n-        LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n-        LintId::of(needless_update::NEEDLESS_UPDATE),\n-        LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n-        LintId::of(neg_multiply::NEG_MULTIPLY),\n-        LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n-        LintId::of(no_effect::NO_EFFECT),\n-        LintId::of(no_effect::UNNECESSARY_OPERATION),\n-        LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n-        LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n-        LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n-        LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n-        LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n-        LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n-        LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n-        LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n-        LintId::of(precedence::PRECEDENCE),\n-        LintId::of(ptr::CMP_NULL),\n-        LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n-        LintId::of(ptr::MUT_FROM_REF),\n-        LintId::of(ptr::PTR_ARG),\n-        LintId::of(ptr_eq::PTR_EQ),\n-        LintId::of(ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n-        LintId::of(question_mark::QUESTION_MARK),\n-        LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n-        LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n-        LintId::of(ranges::REVERSED_EMPTY_RANGES),\n-        LintId::of(redundant_clone::REDUNDANT_CLONE),\n-        LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n-        LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),\n-        LintId::of(redundant_slicing::REDUNDANT_SLICING),\n-        LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n-        LintId::of(reference::DEREF_ADDROF),\n-        LintId::of(reference::REF_IN_DEREF),\n-        LintId::of(regex::INVALID_REGEX),\n-        LintId::of(repeat_once::REPEAT_ONCE),\n-        LintId::of(returns::LET_AND_RETURN),\n-        LintId::of(returns::NEEDLESS_RETURN),\n-        LintId::of(self_assignment::SELF_ASSIGNMENT),\n-        LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n-        LintId::of(serde_api::SERDE_API_MISUSE),\n-        LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n-        LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n-        LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-        LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n-        LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n-        LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n-        LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n-        LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n-        LintId::of(swap::ALMOST_SWAPPED),\n-        LintId::of(swap::MANUAL_SWAP),\n-        LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n-        LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n-        LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n-        LintId::of(to_string_in_display::TO_STRING_IN_DISPLAY),\n-        LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n-        LintId::of(transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n-        LintId::of(transmute::TRANSMUTE_BYTES_TO_STR),\n-        LintId::of(transmute::TRANSMUTE_FLOAT_TO_INT),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n-        LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n-        LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n-        LintId::of(transmute::WRONG_TRANSMUTE),\n-        LintId::of(transmuting_null::TRANSMUTING_NULL),\n-        LintId::of(try_err::TRY_ERR),\n-        LintId::of(types::BORROWED_BOX),\n-        LintId::of(types::BOX_COLLECTION),\n-        LintId::of(types::REDUNDANT_ALLOCATION),\n-        LintId::of(types::TYPE_COMPLEXITY),\n-        LintId::of(types::VEC_BOX),\n-        LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n-        LintId::of(unicode::INVISIBLE_CHARACTERS),\n-        LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n-        LintId::of(unit_types::UNIT_ARG),\n-        LintId::of(unit_types::UNIT_CMP),\n-        LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),\n-        LintId::of(unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n-        LintId::of(unnecessary_sort_by::UNNECESSARY_SORT_BY),\n-        LintId::of(unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n-        LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n-        LintId::of(unused_unit::UNUSED_UNIT),\n-        LintId::of(unwrap::PANICKING_UNWRAP),\n-        LintId::of(unwrap::UNNECESSARY_UNWRAP),\n-        LintId::of(upper_case_acronyms::UPPER_CASE_ACRONYMS),\n-        LintId::of(useless_conversion::USELESS_CONVERSION),\n-        LintId::of(vec::USELESS_VEC),\n-        LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n-        LintId::of(vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n-        LintId::of(write::PRINTLN_EMPTY_STRING),\n-        LintId::of(write::PRINT_LITERAL),\n-        LintId::of(write::PRINT_WITH_NEWLINE),\n-        LintId::of(write::WRITELN_EMPTY_STRING),\n-        LintId::of(write::WRITE_LITERAL),\n-        LintId::of(write::WRITE_WITH_NEWLINE),\n-        LintId::of(zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n-    ]);\n-\n-    store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n-        LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n-        LintId::of(assign_ops::ASSIGN_OP_PATTERN),\n-        LintId::of(blacklisted_name::BLACKLISTED_NAME),\n-        LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n-        LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n-        LintId::of(casts::FN_TO_NUMERIC_CAST),\n-        LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-        LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n-        LintId::of(collapsible_if::COLLAPSIBLE_IF),\n-        LintId::of(collapsible_match::COLLAPSIBLE_MATCH),\n-        LintId::of(comparison_chain::COMPARISON_CHAIN),\n-        LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n-        LintId::of(doc::MISSING_SAFETY_DOC),\n-        LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n-        LintId::of(enum_variants::ENUM_VARIANT_NAMES),\n-        LintId::of(enum_variants::MODULE_INCEPTION),\n-        LintId::of(eq_op::OP_REF),\n-        LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n-        LintId::of(float_literal::EXCESSIVE_PRECISION),\n-        LintId::of(from_over_into::FROM_OVER_INTO),\n-        LintId::of(from_str_radix_10::FROM_STR_RADIX_10),\n-        LintId::of(functions::DOUBLE_MUST_USE),\n-        LintId::of(functions::MUST_USE_UNIT),\n-        LintId::of(functions::RESULT_UNIT_ERR),\n-        LintId::of(if_then_panic::IF_THEN_PANIC),\n-        LintId::of(inherent_to_string::INHERENT_TO_STRING),\n-        LintId::of(len_zero::COMPARISON_TO_EMPTY),\n-        LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n-        LintId::of(len_zero::LEN_ZERO),\n-        LintId::of(literal_representation::INCONSISTENT_DIGIT_GROUPING),\n-        LintId::of(literal_representation::UNUSUAL_BYTE_GROUPINGS),\n-        LintId::of(loops::FOR_KV_MAP),\n-        LintId::of(loops::NEEDLESS_RANGE_LOOP),\n-        LintId::of(loops::SAME_ITEM_PUSH),\n-        LintId::of(loops::WHILE_LET_ON_ITERATOR),\n-        LintId::of(main_recursion::MAIN_RECURSION),\n-        LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n-        LintId::of(manual_map::MANUAL_MAP),\n-        LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n-        LintId::of(map_clone::MAP_CLONE),\n-        LintId::of(match_result_ok::MATCH_RESULT_OK),\n-        LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n-        LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n-        LintId::of(matches::MATCH_OVERLAPPING_ARM),\n-        LintId::of(matches::MATCH_REF_PATS),\n-        LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n-        LintId::of(matches::SINGLE_MATCH),\n-        LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n-        LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n-        LintId::of(methods::BYTES_NTH),\n-        LintId::of(methods::CHARS_LAST_CMP),\n-        LintId::of(methods::CHARS_NEXT_CMP),\n-        LintId::of(methods::INTO_ITER_ON_REF),\n-        LintId::of(methods::ITER_CLONED_COLLECT),\n-        LintId::of(methods::ITER_NEXT_SLICE),\n-        LintId::of(methods::ITER_NTH_ZERO),\n-        LintId::of(methods::ITER_SKIP_NEXT),\n-        LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n-        LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n-        LintId::of(methods::NEW_RET_NO_SELF),\n-        LintId::of(methods::OK_EXPECT),\n-        LintId::of(methods::OPTION_MAP_OR_NONE),\n-        LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n-        LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),\n-        LintId::of(methods::SINGLE_CHAR_ADD_STR),\n-        LintId::of(methods::STRING_EXTEND_CHARS),\n-        LintId::of(methods::UNNECESSARY_FOLD),\n-        LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n-        LintId::of(methods::UNWRAP_OR_ELSE_DEFAULT),\n-        LintId::of(methods::WRONG_SELF_CONVENTION),\n-        LintId::of(misc::TOPLEVEL_REF_ARG),\n-        LintId::of(misc::ZERO_PTR),\n-        LintId::of(misc_early::BUILTIN_TYPE_SHADOW),\n-        LintId::of(misc_early::DOUBLE_NEG),\n-        LintId::of(misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n-        LintId::of(misc_early::MIXED_CASE_HEX_LITERALS),\n-        LintId::of(misc_early::REDUNDANT_PATTERN),\n-        LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n-        LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n-        LintId::of(needless_borrow::NEEDLESS_BORROW),\n-        LintId::of(neg_multiply::NEG_MULTIPLY),\n-        LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n-        LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n-        LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n-        LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n-        LintId::of(ptr::CMP_NULL),\n-        LintId::of(ptr::PTR_ARG),\n-        LintId::of(ptr_eq::PTR_EQ),\n-        LintId::of(question_mark::QUESTION_MARK),\n-        LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n-        LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),\n-        LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n-        LintId::of(returns::LET_AND_RETURN),\n-        LintId::of(returns::NEEDLESS_RETURN),\n-        LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n-        LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n-        LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n-        LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n-        LintId::of(try_err::TRY_ERR),\n-        LintId::of(unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n-        LintId::of(unused_unit::UNUSED_UNIT),\n-        LintId::of(upper_case_acronyms::UPPER_CASE_ACRONYMS),\n-        LintId::of(write::PRINTLN_EMPTY_STRING),\n-        LintId::of(write::PRINT_LITERAL),\n-        LintId::of(write::PRINT_WITH_NEWLINE),\n-        LintId::of(write::WRITELN_EMPTY_STRING),\n-        LintId::of(write::WRITE_LITERAL),\n-        LintId::of(write::WRITE_WITH_NEWLINE),\n-    ]);\n-\n-    store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n-        LintId::of(attrs::DEPRECATED_CFG_ATTR),\n-        LintId::of(booleans::NONMINIMAL_BOOL),\n-        LintId::of(casts::CHAR_LIT_AS_U8),\n-        LintId::of(casts::UNNECESSARY_CAST),\n-        LintId::of(derivable_impls::DERIVABLE_IMPLS),\n-        LintId::of(double_comparison::DOUBLE_COMPARISONS),\n-        LintId::of(double_parens::DOUBLE_PARENS),\n-        LintId::of(duration_subsec::DURATION_SUBSEC),\n-        LintId::of(eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n-        LintId::of(explicit_write::EXPLICIT_WRITE),\n-        LintId::of(format::USELESS_FORMAT),\n-        LintId::of(functions::TOO_MANY_ARGUMENTS),\n-        LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n-        LintId::of(identity_op::IDENTITY_OP),\n-        LintId::of(int_plus_one::INT_PLUS_ONE),\n-        LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n-        LintId::of(lifetimes::NEEDLESS_LIFETIMES),\n-        LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n-        LintId::of(loops::MANUAL_FLATTEN),\n-        LintId::of(loops::SINGLE_ELEMENT_LOOP),\n-        LintId::of(loops::WHILE_LET_LOOP),\n-        LintId::of(manual_strip::MANUAL_STRIP),\n-        LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n-        LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n-        LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n-        LintId::of(matches::MATCH_AS_REF),\n-        LintId::of(matches::MATCH_SINGLE_BINDING),\n-        LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n-        LintId::of(methods::BIND_INSTEAD_OF_MAP),\n-        LintId::of(methods::CLONE_ON_COPY),\n-        LintId::of(methods::FILTER_MAP_IDENTITY),\n-        LintId::of(methods::FILTER_NEXT),\n-        LintId::of(methods::FLAT_MAP_IDENTITY),\n-        LintId::of(methods::INSPECT_FOR_EACH),\n-        LintId::of(methods::ITER_COUNT),\n-        LintId::of(methods::MANUAL_FILTER_MAP),\n-        LintId::of(methods::MANUAL_FIND_MAP),\n-        LintId::of(methods::MANUAL_SPLIT_ONCE),\n-        LintId::of(methods::MAP_IDENTITY),\n-        LintId::of(methods::OPTION_AS_REF_DEREF),\n-        LintId::of(methods::OPTION_FILTER_MAP),\n-        LintId::of(methods::SEARCH_IS_SOME),\n-        LintId::of(methods::SKIP_WHILE_NEXT),\n-        LintId::of(methods::UNNECESSARY_FILTER_MAP),\n-        LintId::of(methods::USELESS_ASREF),\n-        LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n-        LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n-        LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n-        LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n-        LintId::of(needless_bool::BOOL_COMPARISON),\n-        LintId::of(needless_bool::NEEDLESS_BOOL),\n-        LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n-        LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n-        LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n-        LintId::of(needless_update::NEEDLESS_UPDATE),\n-        LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n-        LintId::of(no_effect::NO_EFFECT),\n-        LintId::of(no_effect::UNNECESSARY_OPERATION),\n-        LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n-        LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n-        LintId::of(precedence::PRECEDENCE),\n-        LintId::of(ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n-        LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n-        LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n-        LintId::of(redundant_slicing::REDUNDANT_SLICING),\n-        LintId::of(reference::DEREF_ADDROF),\n-        LintId::of(reference::REF_IN_DEREF),\n-        LintId::of(repeat_once::REPEAT_ONCE),\n-        LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n-        LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n-        LintId::of(swap::MANUAL_SWAP),\n-        LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n-        LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n-        LintId::of(transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n-        LintId::of(transmute::TRANSMUTE_BYTES_TO_STR),\n-        LintId::of(transmute::TRANSMUTE_FLOAT_TO_INT),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_BOOL),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_CHAR),\n-        LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n-        LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n-        LintId::of(types::BORROWED_BOX),\n-        LintId::of(types::TYPE_COMPLEXITY),\n-        LintId::of(types::VEC_BOX),\n-        LintId::of(unit_types::UNIT_ARG),\n-        LintId::of(unnecessary_sort_by::UNNECESSARY_SORT_BY),\n-        LintId::of(unwrap::UNNECESSARY_UNWRAP),\n-        LintId::of(useless_conversion::USELESS_CONVERSION),\n-        LintId::of(zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n-    ]);\n-\n-    store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n-        LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n-        LintId::of(approx_const::APPROX_CONSTANT),\n-        LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n-        LintId::of(attrs::DEPRECATED_SEMVER),\n-        LintId::of(attrs::MISMATCHED_TARGET_OS),\n-        LintId::of(attrs::USELESS_ATTRIBUTE),\n-        LintId::of(bit_mask::BAD_BIT_MASK),\n-        LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n-        LintId::of(booleans::LOGIC_BUG),\n-        LintId::of(casts::CAST_REF_TO_MUT),\n-        LintId::of(copies::IFS_SAME_COND),\n-        LintId::of(copies::IF_SAME_THEN_ELSE),\n-        LintId::of(derive::DERIVE_HASH_XOR_EQ),\n-        LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n-        LintId::of(drop_forget_ref::DROP_COPY),\n-        LintId::of(drop_forget_ref::DROP_REF),\n-        LintId::of(drop_forget_ref::FORGET_COPY),\n-        LintId::of(drop_forget_ref::FORGET_REF),\n-        LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n-        LintId::of(eq_op::EQ_OP),\n-        LintId::of(erasing_op::ERASING_OP),\n-        LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n-        LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n-        LintId::of(if_let_mutex::IF_LET_MUTEX),\n-        LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n-        LintId::of(infinite_iter::INFINITE_ITER),\n-        LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n-        LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n-        LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n-        LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n-        LintId::of(loops::ITER_NEXT_LOOP),\n-        LintId::of(loops::NEVER_LOOP),\n-        LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n-        LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n-        LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n-        LintId::of(methods::CLONE_DOUBLE_REF),\n-        LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n-        LintId::of(methods::SUSPICIOUS_SPLITN),\n-        LintId::of(methods::UNINIT_ASSUMED_INIT),\n-        LintId::of(methods::ZST_OFFSET),\n-        LintId::of(minmax::MIN_MAX),\n-        LintId::of(misc::CMP_NAN),\n-        LintId::of(misc::MODULO_ONE),\n-        LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n-        LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n-        LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n-        LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n-        LintId::of(ptr::MUT_FROM_REF),\n-        LintId::of(ranges::REVERSED_EMPTY_RANGES),\n-        LintId::of(regex::INVALID_REGEX),\n-        LintId::of(self_assignment::SELF_ASSIGNMENT),\n-        LintId::of(serde_api::SERDE_API_MISUSE),\n-        LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n-        LintId::of(swap::ALMOST_SWAPPED),\n-        LintId::of(to_string_in_display::TO_STRING_IN_DISPLAY),\n-        LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n-        LintId::of(transmute::WRONG_TRANSMUTE),\n-        LintId::of(transmuting_null::TRANSMUTING_NULL),\n-        LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n-        LintId::of(unicode::INVISIBLE_CHARACTERS),\n-        LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n-        LintId::of(unit_types::UNIT_CMP),\n-        LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),\n-        LintId::of(unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n-        LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n-        LintId::of(unwrap::PANICKING_UNWRAP),\n-        LintId::of(vec_resize_to_zero::VEC_RESIZE_TO_ZERO),\n-    ]);\n-\n-    store.register_group(true, \"clippy::suspicious\", None, vec![\n-        LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n-        LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n-        LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n-        LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n-        LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n-        LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n-        LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n-        LintId::of(loops::EMPTY_LOOP),\n-        LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n-        LintId::of(loops::MUT_RANGE_BOUND),\n-        LintId::of(methods::SUSPICIOUS_MAP),\n-        LintId::of(mut_key::MUTABLE_KEY_TYPE),\n-        LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n-        LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n-    ]);\n-\n-    store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n-        LintId::of(entry::MAP_ENTRY),\n-        LintId::of(escape::BOXED_LOCAL),\n-        LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n-        LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n-        LintId::of(loops::MANUAL_MEMCPY),\n-        LintId::of(loops::NEEDLESS_COLLECT),\n-        LintId::of(methods::EXPECT_FUN_CALL),\n-        LintId::of(methods::EXTEND_WITH_DRAIN),\n-        LintId::of(methods::ITER_NTH),\n-        LintId::of(methods::MANUAL_STR_REPEAT),\n-        LintId::of(methods::OR_FUN_CALL),\n-        LintId::of(methods::SINGLE_CHAR_PATTERN),\n-        LintId::of(misc::CMP_OWNED),\n-        LintId::of(mutex_atomic::MUTEX_ATOMIC),\n-        LintId::of(redundant_clone::REDUNDANT_CLONE),\n-        LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-        LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n-        LintId::of(types::BOX_COLLECTION),\n-        LintId::of(types::REDUNDANT_ALLOCATION),\n-        LintId::of(vec::USELESS_VEC),\n-        LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n-    ]);\n-\n-    store.register_group(true, \"clippy::cargo\", Some(\"clippy_cargo\"), vec![\n-        LintId::of(cargo_common_metadata::CARGO_COMMON_METADATA),\n-        LintId::of(feature_name::NEGATIVE_FEATURE_NAMES),\n-        LintId::of(feature_name::REDUNDANT_FEATURE_NAMES),\n-        LintId::of(multiple_crate_versions::MULTIPLE_CRATE_VERSIONS),\n-        LintId::of(wildcard_dependencies::WILDCARD_DEPENDENCIES),\n-    ]);\n+    include!(\"lib.register_internal.rs\");\n \n-    store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n-        LintId::of(attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n-        LintId::of(cognitive_complexity::COGNITIVE_COMPLEXITY),\n-        LintId::of(copies::BRANCHES_SHARING_CODE),\n-        LintId::of(disallowed_method::DISALLOWED_METHOD),\n-        LintId::of(disallowed_type::DISALLOWED_TYPE),\n-        LintId::of(fallible_impl_from::FALLIBLE_IMPL_FROM),\n-        LintId::of(floating_point_arithmetic::IMPRECISE_FLOPS),\n-        LintId::of(floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n-        LintId::of(future_not_send::FUTURE_NOT_SEND),\n-        LintId::of(let_if_seq::USELESS_LET_IF_SEQ),\n-        LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n-        LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n-        LintId::of(mutex_atomic::MUTEX_INTEGER),\n-        LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n-        LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n-        LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n-        LintId::of(redundant_pub_crate::REDUNDANT_PUB_CRATE),\n-        LintId::of(regex::TRIVIAL_REGEX),\n-        LintId::of(strings::STRING_LIT_AS_BYTES),\n-        LintId::of(suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n-        LintId::of(transmute::USELESS_TRANSMUTE),\n-        LintId::of(use_self::USE_SELF),\n-    ]);\n+    include!(\"lib.register_all.rs\");\n+    include!(\"lib.register_style.rs\");\n+    include!(\"lib.register_complexity.rs\");\n+    include!(\"lib.register_correctness.rs\");\n+    include!(\"lib.register_suspicious.rs\");\n+    include!(\"lib.register_perf.rs\");\n+    include!(\"lib.register_cargo.rs\");\n+    include!(\"lib.register_nursery.rs\");\n \n     #[cfg(feature = \"metadata-collector-lint\")]\n     {\n@@ -1931,7 +555,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(same_name_method::SameNameMethod));\n     store.register_late_pass(|| Box::new(map_clone::MapClone));\n     store.register_late_pass(|| Box::new(map_err_ignore::MapErrIgnore));\n-    store.register_late_pass(|| Box::new(shadow::Shadow));\n+    store.register_late_pass(|| Box::new(shadow::Shadow::default()));\n     store.register_late_pass(|| Box::new(unit_types::UnitTypes));\n     store.register_late_pass(|| Box::new(loops::Loops));\n     store.register_late_pass(|| Box::new(main_recursion::MainRecursion::default()));\n@@ -2092,6 +716,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(option_if_let_else::OptionIfLetElse));\n     store.register_late_pass(|| Box::new(future_not_send::FutureNotSend));\n     store.register_late_pass(|| Box::new(if_let_mutex::IfLetMutex));\n+    store.register_late_pass(|| Box::new(equatable_if_let::PatternEquality));\n     store.register_late_pass(|| Box::new(mut_mutex_lock::MutMutexLock));\n     store.register_late_pass(|| Box::new(match_on_vec_items::MatchOnVecItems));\n     store.register_late_pass(|| Box::new(manual_async_fn::ManualAsyncFn));\n@@ -2142,6 +767,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(feature_name::FeatureName));\n     store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n     store.register_late_pass(move || Box::new(if_then_panic::IfThenPanic));\n+    let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n+    store.register_late_pass(move || Box::new(non_send_fields_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic_for_send)));\n }\n \n #[rustfmt::skip]"}, {"sha": "aedf0844937d1a2327cbf3a96307cbe4c931a01b", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -92,7 +92,7 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n-        if let ty::BorrowKind::MutBorrow = bk {\n+        if bk == ty::BorrowKind::MutBorrow {\n             if let PlaceBase::Local(id) = cmt.place.base {\n                 if Some(id) == self.hir_id_low && !BreakAfterExprVisitor::is_found(self.cx, diag_expr_id) {\n                     self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id));"}, {"sha": "172d9fc39a29fb8975254f0e266a7fdf59ae663a", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -95,7 +95,7 @@ pub(super) fn check<'tcx>(\n                     let mut take_expr = end;\n \n                     if let ExprKind::Binary(ref op, left, right) = end.kind {\n-                        if let BinOpKind::Add = op.node {\n+                        if op.node == BinOpKind::Add {\n                             let start_equal_left = SpanlessEq::new(cx).eq_expr(start, left);\n                             let start_equal_right = SpanlessEq::new(cx).eq_expr(start, right);\n "}, {"sha": "c0fde5e51663e63a4609c8fafb6b3f04a1742f8a", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n             NeverLoopResult::AlwaysBreak => {\n                 span_lint_and_then(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\", |diag| {\n                     if_chain! {\n-                        if let LoopSource::ForLoop = source;\n+                        if source == LoopSource::ForLoop;\n                         if let Some((_, Node::Expr(parent_match))) = cx.tcx.hir().parent_iter(expr.hir_id).nth(1);\n                         if let Some(ForLoop { arg: iterator, pat, span: for_span, .. }) = ForLoop::hir(parent_match);\n                         then {"}, {"sha": "b632af455f85545cae35806400df06686c9c9ba9", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n     ) {\n         if_chain! {\n             if let Some(header) = kind.header();\n-            if let IsAsync::NotAsync = header.asyncness;\n+            if header.asyncness == IsAsync::NotAsync;\n             // Check that this function returns `impl Future`\n             if let FnRetTy::Return(ret_ty) = decl.output;\n             if let Some((trait_ref, output_lifetimes)) = future_trait_ref(cx, ret_ty);\n@@ -178,7 +178,7 @@ fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>)\n         if args.len() == 1;\n         if let Expr{kind: ExprKind::Closure(_, _, body_id, ..), ..} = args[0];\n         let closure_body = cx.tcx.hir().body(body_id);\n-        if let Some(GeneratorKind::Async(AsyncGeneratorKind::Block)) = closure_body.generator_kind;\n+        if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {\n             return Some(closure_body);\n         }"}, {"sha": "40de9ffcd4e253d2c26ef7cc997e0969ec200bc7", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -205,14 +205,13 @@ fn suggestion_msg(function_type: &str, map_type: &str) -> String {\n fn lint_map_unit_fn(cx: &LateContext<'_>, stmt: &hir::Stmt<'_>, expr: &hir::Expr<'_>, map_args: &[hir::Expr<'_>]) {\n     let var_arg = &map_args[0];\n \n-    let (map_type, variant, lint) =\n-        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(var_arg), sym::Option) {\n-            (\"Option\", \"Some\", OPTION_MAP_UNIT_FN)\n-        } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(var_arg), sym::Result) {\n-            (\"Result\", \"Ok\", RESULT_MAP_UNIT_FN)\n-        } else {\n-            return;\n-        };\n+    let (map_type, variant, lint) = if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(var_arg), sym::Option) {\n+        (\"Option\", \"Some\", OPTION_MAP_UNIT_FN)\n+    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(var_arg), sym::Result) {\n+        (\"Result\", \"Ok\", RESULT_MAP_UNIT_FN)\n+    } else {\n+        return;\n+    };\n     let fn_arg = &map_args[1];\n \n     if is_unit_function(cx, fn_arg) {"}, {"sha": "56d4163a6b3435cf9d6d88052c6eb1bbecd3e5ad", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1025,8 +1025,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n     let adt_def = match ty.kind() {\n         ty::Adt(adt_def, _)\n             if adt_def.is_enum()\n-                && !(is_type_diagnostic_item(cx, ty, sym::Option)\n-                    || is_type_diagnostic_item(cx, ty, sym::Result)) =>\n+                && !(is_type_diagnostic_item(cx, ty, sym::Option) || is_type_diagnostic_item(cx, ty, sym::Result)) =>\n         {\n             adt_def\n         },"}, {"sha": "b26d11c0d6b0d8620a77e985e0dc023e16c2bffc", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1284,8 +1284,9 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// It looks suspicious. Maybe `map` was confused with `filter`.\n-    /// If the `map` call is intentional, this should be rewritten. Or, if you intend to\n-    /// drive the iterator to completion, you can just use `for_each` instead.\n+    /// If the `map` call is intentional, this should be rewritten\n+    /// using `inspect`. Or, if you intend to drive the iterator to\n+    /// completion, you can just use `for_each` instead.\n     ///\n     /// ### Example\n     /// ```rust"}, {"sha": "b5bbbb09092af4f12d27c6fc60cc363444796019", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -178,15 +178,15 @@ pub(super) fn check<'tcx>(\n             hir::ExprKind::Index(..) | hir::ExprKind::MethodCall(..) => {\n                 check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n             },\n-            hir::ExprKind::Block(block, _) => {\n-                if let BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) = block.rules {\n-                    if let Some(block_expr) = block.expr {\n-                        if let hir::ExprKind::MethodCall(..) = block_expr.kind {\n-                            check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n-                        }\n+            hir::ExprKind::Block(block, _)\n+                if block.rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) =>\n+            {\n+                if let Some(block_expr) = block.expr {\n+                    if let hir::ExprKind::MethodCall(..) = block_expr.kind {\n+                        check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n                     }\n                 }\n-            },\n+            }\n             _ => (),\n         }\n     }"}, {"sha": "18ded291915e104c48374d83c6d8802123129c61", "filename": "clippy_lints/src/methods/suspicious_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -28,7 +28,7 @@ pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, count_recv: &hi\n                 expr.span,\n                 \"this call to `map()` won't have an effect on the call to `count()`\",\n                 None,\n-                \"make sure you did not confuse `map` with `filter` or `for_each`\",\n+                \"make sure you did not confuse `map` with `filter`, `for_each` or `inspect`\",\n             );\n         }\n     }"}, {"sha": "59bdfb923ed49f2229c00b478677f78fb05b2717", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -35,8 +35,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n             let in_ty = cx.typeck_results().node_type(body.params[0].hir_id);\n             match cx.typeck_results().expr_ty(&body.value).kind() {\n                 ty::Adt(adt, subst)\n-                    if cx.tcx.is_diagnostic_item(sym::Option, adt.did)\n-                        && TyS::same_type(in_ty, subst.type_at(0)) =>\n+                    if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && TyS::same_type(in_ty, subst.type_at(0)) =>\n                 {\n                     \"filter\"\n                 },"}, {"sha": "f45e68233a1777f5c0052e7b0a0758b024a1c306", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> LateLintPass<'tcx> for ModuloArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         match &expr.kind {\n             ExprKind::Binary(op, lhs, rhs) | ExprKind::AssignOp(op, lhs, rhs) => {\n-                if let BinOpKind::Rem = op.node {\n+                if op.node == BinOpKind::Rem {\n                     let lhs_operand = analyze_operand(lhs, cx, expr);\n                     let rhs_operand = analyze_operand(rhs, cx, expr);\n                     if_chain! {"}, {"sha": "91944653500bbde663f4e14c9226279eca4fcacc", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -248,7 +248,7 @@ fn check_comparison<'a, 'tcx>(\n         if l_ty.is_bool() && r_ty.is_bool() {\n             let mut applicability = Applicability::MachineApplicable;\n \n-            if let BinOpKind::Eq = op.node {\n+            if op.node == BinOpKind::Eq {\n                 let expression_info = one_side_is_unary_not(left_side, right_side);\n                 if expression_info.one_side_is_unary_not {\n                     span_lint_and_sugg("}, {"sha": "1b15d29439f780cdee65e26b1dcf002c12aea846", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for NegMultiply {\n fn check_mul(cx: &LateContext<'_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_>) {\n     if_chain! {\n         if let ExprKind::Lit(ref l) = lit.kind;\n-        if let Constant::Int(1) = consts::lit_to_constant(&l.node, cx.typeck_results().expr_ty_opt(lit));\n+        if consts::lit_to_constant(&l.node, cx.typeck_results().expr_ty_opt(lit)) == Constant::Int(1);\n         if cx.typeck_results().expr_ty(exp).is_integral();\n         then {\n             span_lint(cx, NEG_MULTIPLY, span, \"negation by multiplying with `-1`\");"}, {"sha": "0ac27f1cba2262ce1a8c1423678ac787b67d966e", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -69,7 +69,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n         }) = item.kind\n         {\n             for assoc_item in items {\n-                if let hir::AssocItemKind::Fn { has_self: false } = assoc_item.kind {\n+                if assoc_item.kind == (hir::AssocItemKind::Fn { has_self: false }) {\n                     let impl_item = cx.tcx.hir().impl_item(assoc_item.id);\n                     if in_external_macro(cx.sess(), impl_item.span) {\n                         return;"}, {"sha": "374b7bd59649e87db0f8ffbbdb22f1ae0b015309", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,238 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::is_lint_allowed;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::{implements_trait, is_copy};\n+use rustc_ast::ImplPolarity;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{FieldDef, Item, ItemKind, Node};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Warns about fields in struct implementing `Send` that are neither `Send` nor `Copy`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Sending the struct to another thread will transfer the ownership to\n+    /// the new thread by dropping in the current thread during the transfer.\n+    /// This causes soundness issues for non-`Send` fields, as they are also\n+    /// dropped and might not be set up to handle this.\n+    ///\n+    /// See:\n+    /// * [*The Rustonomicon* about *Send and Sync*](https://doc.rust-lang.org/nomicon/send-and-sync.html)\n+    /// * [The documentation of `Send`](https://doc.rust-lang.org/std/marker/trait.Send.html)\n+    ///\n+    /// ### Known Problems\n+    /// Data structures that contain raw pointers may cause false positives.\n+    /// They are sometimes safe to be sent across threads but do not implement\n+    /// the `Send` trait. This lint has a heuristic to filter out basic cases\n+    /// such as `Vec<*const T>`, but it's not perfect. Feel free to create an\n+    /// issue if you have a suggestion on how this heuristic can be improved.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// struct ExampleStruct<T> {\n+    ///     rc_is_not_send: Rc<String>,\n+    ///     unbounded_generic_field: T,\n+    /// }\n+    ///\n+    /// // This impl is unsound because it allows sending `!Send` types through `ExampleStruct`\n+    /// unsafe impl<T> Send for ExampleStruct<T> {}\n+    /// ```\n+    /// Use thread-safe types like [`std::sync::Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html)\n+    /// or specify correct bounds on generic type parameters (`T: Send`).\n+    pub NON_SEND_FIELDS_IN_SEND_TY,\n+    nursery,\n+    \"there is field that does not implement `Send` in a `Send` struct\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct NonSendFieldInSendTy {\n+    enable_raw_pointer_heuristic: bool,\n+}\n+\n+impl NonSendFieldInSendTy {\n+    pub fn new(enable_raw_pointer_heuristic: bool) -> Self {\n+        Self {\n+            enable_raw_pointer_heuristic,\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(NonSendFieldInSendTy => [NON_SEND_FIELDS_IN_SEND_TY]);\n+\n+impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let ty_allowed_in_send = if self.enable_raw_pointer_heuristic {\n+            ty_allowed_with_raw_pointer_heuristic\n+        } else {\n+            ty_allowed_without_raw_pointer_heuristic\n+        };\n+\n+        // Checks if we are in `Send` impl item.\n+        // We start from `Send` impl instead of `check_field_def()` because\n+        // single `AdtDef` may have multiple `Send` impls due to generic\n+        // parameters, and the lint is much easier to implement in this way.\n+        if_chain! {\n+            if let Some(send_trait) = cx.tcx.get_diagnostic_item(sym::Send);\n+            if let ItemKind::Impl(hir_impl) = &item.kind;\n+            if let Some(trait_ref) = &hir_impl.of_trait;\n+            if let Some(trait_id) = trait_ref.trait_def_id();\n+            if send_trait == trait_id;\n+            if hir_impl.polarity == ImplPolarity::Positive;\n+            if let Some(ty_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n+            if let self_ty = ty_trait_ref.self_ty();\n+            if let ty::Adt(adt_def, impl_trait_substs) = self_ty.kind();\n+            then {\n+                let mut non_send_fields = Vec::new();\n+\n+                let hir_map = cx.tcx.hir();\n+                for variant in &adt_def.variants {\n+                    for field in &variant.fields {\n+                        if_chain! {\n+                            if let Some(field_hir_id) = field\n+                                .did\n+                                .as_local()\n+                                .map(|local_def_id| hir_map.local_def_id_to_hir_id(local_def_id));\n+                            if !is_lint_allowed(cx, NON_SEND_FIELDS_IN_SEND_TY, field_hir_id);\n+                            if let field_ty = field.ty(cx.tcx, impl_trait_substs);\n+                            if !ty_allowed_in_send(cx, field_ty, send_trait);\n+                            if let Node::Field(field_def) = hir_map.get(field_hir_id);\n+                            then {\n+                                non_send_fields.push(NonSendField {\n+                                    def: field_def,\n+                                    ty: field_ty,\n+                                    generic_params: collect_generic_params(cx, field_ty),\n+                                })\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                if !non_send_fields.is_empty() {\n+                    span_lint_and_then(\n+                        cx,\n+                        NON_SEND_FIELDS_IN_SEND_TY,\n+                        item.span,\n+                        &format!(\n+                            \"this implementation is unsound, as some fields in `{}` are `!Send`\",\n+                            snippet(cx, hir_impl.self_ty.span, \"Unknown\")\n+                        ),\n+                        |diag| {\n+                            for field in non_send_fields {\n+                                diag.span_note(\n+                                    field.def.span,\n+                                    &format!(\"the type of field `{}` is `!Send`\", field.def.ident.name),\n+                                );\n+\n+                                match field.generic_params.len() {\n+                                    0 => diag.help(\"use a thread-safe type that implements `Send`\"),\n+                                    1 if is_ty_param(field.ty) => diag.help(&format!(\"add `{}: Send` bound in `Send` impl\", field.ty)),\n+                                    _ => diag.help(&format!(\n+                                        \"add bounds on type parameter{} `{}` that satisfy `{}: Send`\",\n+                                        if field.generic_params.len() > 1 { \"s\" } else { \"\" },\n+                                        field.generic_params_string(),\n+                                        snippet(cx, field.def.ty.span, \"Unknown\"),\n+                                    )),\n+                                };\n+                            }\n+                        },\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+struct NonSendField<'tcx> {\n+    def: &'tcx FieldDef<'tcx>,\n+    ty: Ty<'tcx>,\n+    generic_params: Vec<Ty<'tcx>>,\n+}\n+\n+impl<'tcx> NonSendField<'tcx> {\n+    fn generic_params_string(&self) -> String {\n+        self.generic_params\n+            .iter()\n+            .map(ToString::to_string)\n+            .collect::<Vec<_>>()\n+            .join(\", \")\n+    }\n+}\n+\n+/// Given a type, collect all of its generic parameters.\n+/// Example: `MyStruct<P, Box<Q, R>>` => `vec![P, Q, R]`\n+fn collect_generic_params<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n+    ty.walk(cx.tcx)\n+        .filter_map(|inner| match inner.unpack() {\n+            GenericArgKind::Type(inner_ty) => Some(inner_ty),\n+            _ => None,\n+        })\n+        .filter(|&inner_ty| is_ty_param(inner_ty))\n+        .collect()\n+}\n+\n+/// Be more strict when the heuristic is disabled\n+fn ty_allowed_without_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n+    if implements_trait(cx, ty, send_trait, &[]) {\n+        return true;\n+    }\n+\n+    if is_copy(cx, ty) && !contains_raw_pointer(cx, ty) {\n+        return true;\n+    }\n+\n+    false\n+}\n+\n+/// Heuristic to allow cases like `Vec<*const u8>`\n+fn ty_allowed_with_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n+    if implements_trait(cx, ty, send_trait, &[]) || is_copy(cx, ty) {\n+        return true;\n+    }\n+\n+    // The type is known to be `!Send` and `!Copy`\n+    match ty.kind() {\n+        ty::Tuple(_) => ty\n+            .tuple_fields()\n+            .all(|ty| ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait)),\n+        ty::Array(ty, _) | ty::Slice(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n+        ty::Adt(_, substs) => {\n+            if contains_raw_pointer(cx, ty) {\n+                // descends only if ADT contains any raw pointers\n+                substs.iter().all(|generic_arg| match generic_arg.unpack() {\n+                    GenericArgKind::Type(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n+                    // Lifetimes and const generics are not solid part of ADT and ignored\n+                    GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => true,\n+                })\n+            } else {\n+                false\n+            }\n+        },\n+        // Raw pointers are `!Send` but allowed by the heuristic\n+        ty::RawPtr(_) => true,\n+        _ => false,\n+    }\n+}\n+\n+/// Checks if the type contains any raw pointers in substs (including nested ones).\n+fn contains_raw_pointer<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> bool {\n+    for ty_node in target_ty.walk(cx.tcx) {\n+        if_chain! {\n+            if let GenericArgKind::Type(inner_ty) = ty_node.unpack();\n+            if let ty::RawPtr(_) = inner_ty.kind();\n+            then {\n+                return true;\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n+/// Returns `true` if the type is a type parameter such as `T`.\n+fn is_ty_param(target_ty: Ty<'_>) -> bool {\n+    matches!(target_ty.kind(), ty::Param(_))\n+}"}, {"sha": "0f9e5ada3a8a4e1186a5f5471e9c270272ac440f", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -26,6 +26,9 @@ declare_clippy_lint! {\n \n declare_lint_pass!(OverflowCheckConditional => [OVERFLOW_CHECK_CONDITIONAL]);\n \n+const OVERFLOW_MSG: &str = \"you are trying to use classic C overflow conditions that will fail in Rust\";\n+const UNDERFLOW_MSG: &str = \"you are trying to use classic C underflow conditions that will fail in Rust\";\n+\n impl<'tcx> LateLintPass<'tcx> for OverflowCheckConditional {\n     // a + b < a, a > a + b, a < a - b, a - b > a\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n@@ -40,17 +43,11 @@ impl<'tcx> LateLintPass<'tcx> for OverflowCheckConditional {\n             if cx.typeck_results().expr_ty(ident1).is_integral();\n             if cx.typeck_results().expr_ty(ident2).is_integral();\n             then {\n-                if let BinOpKind::Lt = op.node {\n-                    if let BinOpKind::Add = op2.node {\n-                        span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"you are trying to use classic C overflow conditions that will fail in Rust\");\n-                    }\n+                if op.node == BinOpKind::Lt && op2.node == BinOpKind::Add {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, OVERFLOW_MSG);\n                 }\n-                if let BinOpKind::Gt = op.node {\n-                    if let BinOpKind::Sub = op2.node {\n-                        span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"you are trying to use classic C underflow conditions that will fail in Rust\");\n-                    }\n+                if op.node == BinOpKind::Gt && op2.node == BinOpKind::Sub {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, UNDERFLOW_MSG);\n                 }\n             }\n         }\n@@ -65,17 +62,11 @@ impl<'tcx> LateLintPass<'tcx> for OverflowCheckConditional {\n             if cx.typeck_results().expr_ty(ident1).is_integral();\n             if cx.typeck_results().expr_ty(ident2).is_integral();\n             then {\n-                if let BinOpKind::Gt = op.node {\n-                    if let BinOpKind::Add = op2.node {\n-                        span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"you are trying to use classic C overflow conditions that will fail in Rust\");\n-                    }\n+                if op.node == BinOpKind::Gt && op2.node == BinOpKind::Add {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, OVERFLOW_MSG);\n                 }\n-                if let BinOpKind::Lt = op.node {\n-                    if let BinOpKind::Sub = op2.node {\n-                        span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n-                            \"you are trying to use classic C underflow conditions that will fail in Rust\");\n-                    }\n+                if op.node == BinOpKind::Lt && op2.node == BinOpKind::Sub {\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, UNDERFLOW_MSG);\n                 }\n             }\n         }"}, {"sha": "919d4e11e5a060637fb35ab2012a802f80f47aa6", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -41,25 +41,23 @@ impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let VisibilityKind::Crate { .. } = item.vis.node {\n-            if !cx.access_levels.is_exported(item.def_id) {\n-                if let Some(false) = self.is_exported.last() {\n-                    let span = item.span.with_hi(item.ident.span.hi());\n-                    let descr = cx.tcx.def_kind(item.def_id).descr(item.def_id.to_def_id());\n-                    span_lint_and_then(\n-                        cx,\n-                        REDUNDANT_PUB_CRATE,\n-                        span,\n-                        &format!(\"pub(crate) {} inside private module\", descr),\n-                        |diag| {\n-                            diag.span_suggestion(\n-                                item.vis.span,\n-                                \"consider using\",\n-                                \"pub\".to_string(),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        },\n-                    );\n-                }\n+            if !cx.access_levels.is_exported(item.def_id) && self.is_exported.last() == Some(&false) {\n+                let span = item.span.with_hi(item.ident.span.hi());\n+                let descr = cx.tcx.def_kind(item.def_id).descr(item.def_id.to_def_id());\n+                span_lint_and_then(\n+                    cx,\n+                    REDUNDANT_PUB_CRATE,\n+                    span,\n+                    &format!(\"pub(crate) {} inside private module\", descr),\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            item.vis.span,\n+                            \"consider using\",\n+                            \"pub\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    },\n+                );\n             }\n         }\n "}, {"sha": "cf94c0e97d930f166ec5a2b35da04c789dbc10e7", "filename": "clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n         if_chain! {\n             if let ExprKind::MethodCall(path, _, [receiver, count], _) = &expr.kind;\n             if path.ident.name == sym!(repeat);\n-            if let Some(Constant::Int(1)) = constant_context(cx, cx.typeck_results()).expr(count);\n+            if constant_context(cx, cx.typeck_results()).expr(count) == Some(Constant::Int(1));\n             if !in_macro(receiver.span);\n             then {\n                 let ty = cx.typeck_results().expr_ty(receiver).peel_refs();"}, {"sha": "2ca7c18800ee2e362e299393058239cf35324ce3", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 127, "deletions": 300, "changes": 427, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,17 +1,14 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::diagnostics::span_lint_and_note;\n use clippy_utils::source::snippet;\n-use clippy_utils::{contains_name, higher, iter_input_pats};\n-use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{\n-    Block, Body, Expr, ExprKind, FnDecl, Guard, HirId, Local, MutTy, Pat, PatKind, Path, QPath, StmtKind, Ty, TyKind,\n-    UnOp,\n-};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n+use clippy_utils::visitors::is_local_used;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def::Res;\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::hir_id::ItemLocalId;\n+use rustc_hir::{Block, Body, BodyOwnerKind, Expr, ExprKind, HirId, Node, Pat, PatKind, QPath, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{Span, Symbol};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -23,10 +20,6 @@ declare_clippy_lint! {\n     /// code. Still, some may opt to avoid it in their code base, they can set this\n     /// lint to `Warn`.\n     ///\n-    /// ### Known problems\n-    /// This lint, as the other shadowing related lints,\n-    /// currently only catches very simple patterns.\n-    ///\n     /// ### Example\n     /// ```rust\n     /// # let x = 1;\n@@ -52,10 +45,6 @@ declare_clippy_lint! {\n     /// because a value may be bound to different things depending on position in\n     /// the code.\n     ///\n-    /// ### Known problems\n-    /// This lint, as the other shadowing related lints,\n-    /// currently only catches very simple patterns.\n-    ///\n     /// ### Example\n     /// ```rust\n     /// let x = 2;\n@@ -83,12 +72,6 @@ declare_clippy_lint! {\n     /// any place in the code. This can be alleviated by either giving more specific\n     /// names to bindings or introducing more scopes to contain the bindings.\n     ///\n-    /// ### Known problems\n-    /// This lint, as the other shadowing related lints,\n-    /// currently only catches very simple patterns. Note that\n-    /// `allow`/`warn`/`deny`/`forbid` attributes only work on the function level\n-    /// for this lint.\n-    ///\n     /// ### Example\n     /// ```rust\n     /// # let y = 1;\n@@ -102,307 +85,151 @@ declare_clippy_lint! {\n     /// let w = z; // use different variable name\n     /// ```\n     pub SHADOW_UNRELATED,\n-    pedantic,\n+    restriction,\n     \"rebinding a name without even using the original value\"\n }\n \n-declare_lint_pass!(Shadow => [SHADOW_SAME, SHADOW_REUSE, SHADOW_UNRELATED]);\n+#[derive(Default)]\n+pub(crate) struct Shadow {\n+    bindings: Vec<FxHashMap<Symbol, Vec<ItemLocalId>>>,\n+}\n+\n+impl_lint_pass!(Shadow => [SHADOW_SAME, SHADOW_REUSE, SHADOW_UNRELATED]);\n \n impl<'tcx> LateLintPass<'tcx> for Shadow {\n-    fn check_fn(\n-        &mut self,\n-        cx: &LateContext<'tcx>,\n-        _: FnKind<'tcx>,\n-        decl: &'tcx FnDecl<'_>,\n-        body: &'tcx Body<'_>,\n-        _: Span,\n-        _: HirId,\n-    ) {\n-        if in_external_macro(cx.sess(), body.value.span) {\n+    fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {\n+        let (id, ident) = match pat.kind {\n+            PatKind::Binding(_, hir_id, ident, _) => (hir_id, ident),\n+            _ => return,\n+        };\n+        if ident.span.from_expansion() || ident.span.is_dummy() {\n             return;\n         }\n-        check_fn(cx, decl, body);\n-    }\n-}\n+        let HirId { owner, local_id } = id;\n \n-fn check_fn<'tcx>(cx: &LateContext<'tcx>, decl: &'tcx FnDecl<'_>, body: &'tcx Body<'_>) {\n-    let mut bindings = Vec::with_capacity(decl.inputs.len());\n-    for arg in iter_input_pats(decl, body) {\n-        if let PatKind::Binding(.., ident, _) = arg.pat.kind {\n-            bindings.push((ident.name, ident.span));\n+        // get (or insert) the list of items for this owner and symbol\n+        let data = self.bindings.last_mut().unwrap();\n+        let items_with_name = data.entry(ident.name).or_default();\n+\n+        // check other bindings with the same name, most recently seen first\n+        for &prev in items_with_name.iter().rev() {\n+            if prev == local_id {\n+                // repeated binding in an `Or` pattern\n+                return;\n+            }\n+\n+            if is_shadow(cx, owner, prev, local_id) {\n+                let prev_hir_id = HirId { owner, local_id: prev };\n+                lint_shadow(cx, pat, prev_hir_id, ident.span);\n+                // only lint against the \"nearest\" shadowed binding\n+                break;\n+            }\n         }\n+        // store the binding\n+        items_with_name.push(local_id);\n     }\n-    check_expr(cx, &body.value, &mut bindings);\n-}\n \n-fn check_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'_>, bindings: &mut Vec<(Symbol, Span)>) {\n-    let len = bindings.len();\n-    for stmt in block.stmts {\n-        match stmt.kind {\n-            StmtKind::Local(local) => check_local(cx, local, bindings),\n-            StmtKind::Expr(e) | StmtKind::Semi(e) => check_expr(cx, e, bindings),\n-            StmtKind::Item(..) => {},\n+    fn check_body(&mut self, cx: &LateContext<'_>, body: &Body<'_>) {\n+        let hir = cx.tcx.hir();\n+        if !matches!(hir.body_owner_kind(hir.body_owner(body.id())), BodyOwnerKind::Closure) {\n+            self.bindings.push(FxHashMap::default());\n         }\n     }\n-    if let Some(o) = block.expr {\n-        check_expr(cx, o, bindings);\n-    }\n-    bindings.truncate(len);\n-}\n \n-fn check_local<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>, bindings: &mut Vec<(Symbol, Span)>) {\n-    if in_external_macro(cx.sess(), local.span) {\n-        return;\n-    }\n-    if higher::is_from_for_desugar(local) {\n-        return;\n-    }\n-    let Local {\n-        pat,\n-        ref ty,\n-        ref init,\n-        span,\n-        ..\n-    } = *local;\n-    if let Some(t) = *ty {\n-        check_ty(cx, t, bindings);\n-    }\n-    if let Some(o) = *init {\n-        check_expr(cx, o, bindings);\n-        check_pat(cx, pat, Some(o), span, bindings);\n-    } else {\n-        check_pat(cx, pat, None, span, bindings);\n+    fn check_body_post(&mut self, cx: &LateContext<'_>, body: &Body<'_>) {\n+        let hir = cx.tcx.hir();\n+        if !matches!(hir.body_owner_kind(hir.body_owner(body.id())), BodyOwnerKind::Closure) {\n+            self.bindings.pop();\n+        }\n     }\n }\n \n-fn is_binding(cx: &LateContext<'_>, pat_id: HirId) -> bool {\n-    let var_ty = cx.typeck_results().node_type_opt(pat_id);\n-    var_ty.map_or(false, |var_ty| !matches!(var_ty.kind(), ty::Adt(..)))\n+fn is_shadow(cx: &LateContext<'_>, owner: LocalDefId, first: ItemLocalId, second: ItemLocalId) -> bool {\n+    let scope_tree = cx.tcx.region_scope_tree(owner.to_def_id());\n+    let first_scope = scope_tree.var_scope(first);\n+    let second_scope = scope_tree.var_scope(second);\n+    scope_tree.is_subscope_of(second_scope, first_scope)\n }\n \n-fn check_pat<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    pat: &'tcx Pat<'_>,\n-    init: Option<&'tcx Expr<'_>>,\n-    span: Span,\n-    bindings: &mut Vec<(Symbol, Span)>,\n-) {\n-    // TODO: match more stuff / destructuring\n-    match pat.kind {\n-        PatKind::Binding(.., ident, ref inner) => {\n-            let name = ident.name;\n-            if is_binding(cx, pat.hir_id) {\n-                let mut new_binding = true;\n-                for tup in bindings.iter_mut() {\n-                    if tup.0 == name {\n-                        lint_shadow(cx, name, span, pat.span, init, tup.1);\n-                        tup.1 = ident.span;\n-                        new_binding = false;\n-                        break;\n-                    }\n-                }\n-                if new_binding {\n-                    bindings.push((name, ident.span));\n-                }\n-            }\n-            if let Some(p) = *inner {\n-                check_pat(cx, p, init, span, bindings);\n-            }\n-        },\n-        PatKind::Struct(_, pfields, _) => {\n-            if let Some(init_struct) = init {\n-                if let ExprKind::Struct(_, efields, _) = init_struct.kind {\n-                    for field in pfields {\n-                        let name = field.ident.name;\n-                        let efield = efields\n-                            .iter()\n-                            .find_map(|f| if f.ident.name == name { Some(&*f.expr) } else { None });\n-                        check_pat(cx, field.pat, efield, span, bindings);\n-                    }\n-                } else {\n-                    for field in pfields {\n-                        check_pat(cx, field.pat, init, span, bindings);\n-                    }\n-                }\n-            } else {\n-                for field in pfields {\n-                    check_pat(cx, field.pat, None, span, bindings);\n-                }\n-            }\n+fn lint_shadow(cx: &LateContext<'_>, pat: &Pat<'_>, shadowed: HirId, span: Span) {\n+    let (lint, msg) = match find_init(cx, pat.hir_id) {\n+        Some(expr) if is_self_shadow(cx, pat, expr, shadowed) => {\n+            let msg = format!(\n+                \"`{}` is shadowed by itself in `{}`\",\n+                snippet(cx, pat.span, \"_\"),\n+                snippet(cx, expr.span, \"..\")\n+            );\n+            (SHADOW_SAME, msg)\n         },\n-        PatKind::Tuple(inner, _) => {\n-            if let Some(init_tup) = init {\n-                if let ExprKind::Tup(tup) = init_tup.kind {\n-                    for (i, p) in inner.iter().enumerate() {\n-                        check_pat(cx, p, Some(&tup[i]), p.span, bindings);\n-                    }\n-                } else {\n-                    for p in inner {\n-                        check_pat(cx, p, init, span, bindings);\n-                    }\n-                }\n-            } else {\n-                for p in inner {\n-                    check_pat(cx, p, None, span, bindings);\n-                }\n-            }\n+        Some(expr) if is_local_used(cx, expr, shadowed) => {\n+            let msg = format!(\n+                \"`{}` is shadowed by `{}` which reuses the original value\",\n+                snippet(cx, pat.span, \"_\"),\n+                snippet(cx, expr.span, \"..\")\n+            );\n+            (SHADOW_REUSE, msg)\n         },\n-        PatKind::Box(inner) => {\n-            if let Some(initp) = init {\n-                if let ExprKind::Box(inner_init) = initp.kind {\n-                    check_pat(cx, inner, Some(inner_init), span, bindings);\n-                } else {\n-                    check_pat(cx, inner, init, span, bindings);\n-                }\n-            } else {\n-                check_pat(cx, inner, init, span, bindings);\n-            }\n+        _ => {\n+            let msg = format!(\"`{}` shadows a previous, unrelated binding\", snippet(cx, pat.span, \"_\"));\n+            (SHADOW_UNRELATED, msg)\n         },\n-        PatKind::Ref(inner, _) => check_pat(cx, inner, init, span, bindings),\n-        // PatVec(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n-        _ => (),\n-    }\n+    };\n+    span_lint_and_note(\n+        cx,\n+        lint,\n+        span,\n+        &msg,\n+        Some(cx.tcx.hir().span(shadowed)),\n+        \"previous binding is here\",\n+    );\n }\n \n-fn lint_shadow<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    name: Symbol,\n-    span: Span,\n-    pattern_span: Span,\n-    init: Option<&'tcx Expr<'_>>,\n-    prev_span: Span,\n-) {\n-    if let Some(expr) = init {\n-        if is_self_shadow(name, expr) {\n-            span_lint_and_then(\n-                cx,\n-                SHADOW_SAME,\n-                span,\n-                &format!(\n-                    \"`{}` is shadowed by itself in `{}`\",\n-                    snippet(cx, pattern_span, \"_\"),\n-                    snippet(cx, expr.span, \"..\")\n-                ),\n-                |diag| {\n-                    diag.span_note(prev_span, \"previous binding is here\");\n-                },\n-            );\n-        } else if contains_name(name, expr) {\n-            span_lint_and_then(\n-                cx,\n-                SHADOW_REUSE,\n-                pattern_span,\n-                &format!(\n-                    \"`{}` is shadowed by `{}` which reuses the original value\",\n-                    snippet(cx, pattern_span, \"_\"),\n-                    snippet(cx, expr.span, \"..\")\n-                ),\n-                |diag| {\n-                    diag.span_note(expr.span, \"initialization happens here\");\n-                    diag.span_note(prev_span, \"previous binding is here\");\n-                },\n-            );\n-        } else {\n-            span_lint_and_then(\n-                cx,\n-                SHADOW_UNRELATED,\n-                pattern_span,\n-                &format!(\"`{}` is being shadowed\", snippet(cx, pattern_span, \"_\")),\n-                |diag| {\n-                    diag.span_note(expr.span, \"initialization happens here\");\n-                    diag.span_note(prev_span, \"previous binding is here\");\n+/// Returns true if the expression is a simple transformation of a local binding such as `&x`\n+fn is_self_shadow(cx: &LateContext<'_>, pat: &Pat<'_>, mut expr: &Expr<'_>, hir_id: HirId) -> bool {\n+    let hir = cx.tcx.hir();\n+    let is_direct_binding = hir\n+        .parent_iter(pat.hir_id)\n+        .map_while(|(_id, node)| match node {\n+            Node::Pat(pat) => Some(pat),\n+            _ => None,\n+        })\n+        .all(|pat| matches!(pat.kind, PatKind::Ref(..) | PatKind::Or(_)));\n+    if !is_direct_binding {\n+        return false;\n+    }\n+    loop {\n+        expr = match expr.kind {\n+            ExprKind::Box(e)\n+            | ExprKind::AddrOf(_, _, e)\n+            | ExprKind::Block(\n+                &Block {\n+                    stmts: [],\n+                    expr: Some(e),\n+                    ..\n                 },\n-            );\n+                _,\n+            )\n+            | ExprKind::Unary(UnOp::Deref, e) => e,\n+            ExprKind::Path(QPath::Resolved(None, path)) => break path.res == Res::Local(hir_id),\n+            _ => break false,\n         }\n-    } else {\n-        span_lint_and_then(\n-            cx,\n-            SHADOW_UNRELATED,\n-            span,\n-            &format!(\"`{}` shadows a previous declaration\", snippet(cx, pattern_span, \"_\")),\n-            |diag| {\n-                diag.span_note(prev_span, \"previous binding is here\");\n-            },\n-        );\n     }\n }\n \n-fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut Vec<(Symbol, Span)>) {\n-    if in_external_macro(cx.sess(), expr.span) {\n-        return;\n-    }\n-    match expr.kind {\n-        ExprKind::Unary(_, e) | ExprKind::Field(e, _) | ExprKind::AddrOf(_, _, e) | ExprKind::Box(e) => {\n-            check_expr(cx, e, bindings);\n-        },\n-        ExprKind::Block(block, _) | ExprKind::Loop(block, ..) => check_block(cx, block, bindings),\n-        // ExprKind::Call\n-        // ExprKind::MethodCall\n-        ExprKind::Array(v) | ExprKind::Tup(v) => {\n-            for e in v {\n-                check_expr(cx, e, bindings);\n-            }\n-        },\n-        ExprKind::If(cond, then, ref otherwise) => {\n-            check_expr(cx, cond, bindings);\n-            check_expr(cx, then, bindings);\n-            if let Some(o) = *otherwise {\n-                check_expr(cx, o, bindings);\n-            }\n-        },\n-        ExprKind::Match(init, arms, _) => {\n-            check_expr(cx, init, bindings);\n-            let len = bindings.len();\n-            for arm in arms {\n-                check_pat(cx, arm.pat, Some(init), arm.pat.span, bindings);\n-                // This is ugly, but needed to get the right type\n-                if let Some(ref guard) = arm.guard {\n-                    match guard {\n-                        Guard::If(if_expr) => check_expr(cx, if_expr, bindings),\n-                        Guard::IfLet(guard_pat, guard_expr) => {\n-                            check_pat(cx, guard_pat, Some(*guard_expr), guard_pat.span, bindings);\n-                            check_expr(cx, guard_expr, bindings);\n-                        },\n-                    }\n-                }\n-                check_expr(cx, arm.body, bindings);\n-                bindings.truncate(len);\n-            }\n-        },\n-        _ => (),\n-    }\n-}\n-\n-fn check_ty<'tcx>(cx: &LateContext<'tcx>, ty: &'tcx Ty<'_>, bindings: &mut Vec<(Symbol, Span)>) {\n-    match ty.kind {\n-        TyKind::Slice(sty) => check_ty(cx, sty, bindings),\n-        TyKind::Array(fty, ref anon_const) => {\n-            check_ty(cx, fty, bindings);\n-            check_expr(cx, &cx.tcx.hir().body(anon_const.body).value, bindings);\n-        },\n-        TyKind::Ptr(MutTy { ty: mty, .. }) | TyKind::Rptr(_, MutTy { ty: mty, .. }) => check_ty(cx, mty, bindings),\n-        TyKind::Tup(tup) => {\n-            for t in tup {\n-                check_ty(cx, t, bindings);\n-            }\n-        },\n-        TyKind::Typeof(ref anon_const) => check_expr(cx, &cx.tcx.hir().body(anon_const.body).value, bindings),\n-        _ => (),\n-    }\n-}\n-\n-fn is_self_shadow(name: Symbol, expr: &Expr<'_>) -> bool {\n-    match expr.kind {\n-        ExprKind::Box(inner) | ExprKind::AddrOf(_, _, inner) => is_self_shadow(name, inner),\n-        ExprKind::Block(block, _) => {\n-            block.stmts.is_empty() && block.expr.as_ref().map_or(false, |e| is_self_shadow(name, e))\n-        },\n-        ExprKind::Unary(op, inner) => (UnOp::Deref == op) && is_self_shadow(name, inner),\n-        ExprKind::Path(QPath::Resolved(_, path)) => path_eq_name(name, path),\n-        _ => false,\n+/// Finds the \"init\" expression for a pattern: `let <pat> = <init>;` or\n+/// `match <init> { .., <pat> => .., .. }`\n+fn find_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<&'tcx Expr<'tcx>> {\n+    for (_, node) in cx.tcx.hir().parent_iter(hir_id) {\n+        let init = match node {\n+            Node::Arm(_) | Node::Pat(_) => continue,\n+            Node::Expr(expr) => match expr.kind {\n+                ExprKind::Match(e, _, _) => Some(e),\n+                _ => None,\n+            },\n+            Node::Local(local) => local.init,\n+            _ => None,\n+        };\n+        return init;\n     }\n-}\n-\n-fn path_eq_name(name: Symbol, path: &Path<'_>) -> bool {\n-    !path.is_global() && path.segments.len() == 1 && path.segments[0].ident.name == name\n+    None\n }"}, {"sha": "ef80663d1da41ecdce20d5b885be1482f14b437f", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -49,8 +49,8 @@ impl<'tcx> LateLintPass<'tcx> for TransmutingNull {\n                 let mut const_eval_context = constant_context(cx, cx.typeck_results());\n                 if_chain! {\n                     if let ExprKind::Path(ref _qpath) = arg.kind;\n-                    let x = const_eval_context.expr(arg);\n-                    if let Some(Constant::RawPtr(0)) = x;\n+                    if let Some(Constant::RawPtr(x)) = const_eval_context.expr(arg);\n+                    if x == 0;\n                     then {\n                         span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n                     }"}, {"sha": "903e62995c61702be4775eb152c9674a5e25486b", "filename": "clippy_lints/src/types/option_option.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -7,9 +7,7 @@ use rustc_span::symbol::sym;\n use super::OPTION_OPTION;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n-    if cx.tcx.is_diagnostic_item(sym::Option, def_id)\n-        && is_ty_param_diagnostic_item(cx, qpath, sym::Option).is_some()\n-    {\n+    if cx.tcx.is_diagnostic_item(sym::Option, def_id) && is_ty_param_diagnostic_item(cx, qpath, sym::Option).is_some() {\n         span_lint(\n             cx,\n             OPTION_OPTION,"}, {"sha": "6cbada4c1505b5374758d951ca2df152eec9a4d7", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -284,6 +284,10 @@ define_Conf! {\n     ///\n     /// The list of unicode scripts allowed to be used in the scope.\n     (allowed_scripts: Vec<String> = vec![\"Latin\".to_string()]),\n+    /// Lint: NON_SEND_FIELDS_IN_SEND_TY.\n+    ///\n+    /// Whether to apply the raw pointer heuristic to determine if a type is `Send`.\n+    (enable_raw_pointer_heuristic_for_send: bool = true),\n }\n \n /// Search for the configuration file."}, {"sha": "9f9edbf258ac277831739b1fe2f0fb549ade8b22", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::{\n     paths, SpanlessEq,\n };\n use if_chain::if_chain;\n-use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, ModKind, NodeId};\n+use rustc_ast::ast::{Crate, ItemKind, LitKind, ModKind, NodeId};\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n@@ -18,8 +18,8 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    BinOpKind, Block, Crate, Expr, ExprKind, HirId, Item, Local, MutTy, Mutability, Node, Path, Stmt, StmtKind, Ty,\n-    TyKind, UnOp,\n+    BinOpKind, Block, Expr, ExprKind, HirId, Item, Local, MutTy, Mutability, Node, Path, Stmt, StmtKind, Ty, TyKind,\n+    UnOp,\n };\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -317,7 +317,7 @@ declare_clippy_lint! {\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n-    fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &AstCrate) {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &Crate) {\n         if let Some(utils) = krate.items.iter().find(|item| item.ident.name.as_str() == \"utils\") {\n             if let ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) = utils.kind {\n                 if let Some(paths) = items.iter().find(|item| item.ident.name.as_str() == \"paths\") {\n@@ -412,7 +412,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n         }\n     }\n \n-    fn check_crate_post(&mut self, cx: &LateContext<'tcx>, _: &'tcx Crate<'_>) {\n+    fn check_crate_post(&mut self, cx: &LateContext<'tcx>) {\n         if is_lint_allowed(cx, LINT_WITHOUT_LINT_PASS, CRATE_HIR_ID) {\n             return;\n         }\n@@ -907,7 +907,7 @@ pub struct InterningDefinedSymbol {\n impl_lint_pass!(InterningDefinedSymbol => [INTERNING_DEFINED_SYMBOL, UNNECESSARY_SYMBOL_STR]);\n \n impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n-    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n         if !self.symbol_map.is_empty() {\n             return;\n         }"}, {"sha": "e0746ce4d8121b115f1da360d5b2e9756aaa3c06", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -32,7 +32,7 @@ impl<'tcx> LateLintPass<'tcx> for ZeroDiv {\n         // check for instances of 0.0/0.0\n         if_chain! {\n             if let ExprKind::Binary(ref op, left, right) = expr.kind;\n-            if let BinOpKind::Div = op.node;\n+            if op.node == BinOpKind::Div;\n             // TODO - constant_simple does not fold many operations involving floats.\n             // That's probably fine for this lint - it's pretty unlikely that someone would\n             // do something like 0.0/(2.0 - 2.0), but it would be nice to warn on that case too."}, {"sha": "c47aa9170e547c597711785aae6df8d83dc74844", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -509,7 +509,6 @@ pub fn path_to_local_id(expr: &Expr<'_>, id: HirId) -> bool {\n }\n \n /// Gets the definition associated to a path.\n-#[allow(clippy::shadow_unrelated)] // false positive #6563\n pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n     macro_rules! try_res {\n         ($e:expr) => {\n@@ -683,7 +682,17 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n             _ => false,\n         },\n         ExprKind::Tup(items) | ExprKind::Array(items) => items.iter().all(|x| is_default_equivalent(cx, x)),\n-        ExprKind::Repeat(x, _) => is_default_equivalent(cx, x),\n+        ExprKind::Repeat(x, y) => if_chain! {\n+            if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(y.body).value.kind;\n+            if let LitKind::Int(v, _) = const_lit.node;\n+            if v <= 32 && is_default_equivalent(cx, x);\n+            then {\n+                true\n+            }\n+            else {\n+                false\n+            }\n+        },\n         ExprKind::Call(repl_func, _) => if_chain! {\n             if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n             if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n@@ -1498,7 +1507,7 @@ pub fn is_try<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'tcx>) -> Option<&'tc\n \n     if let ExprKind::Match(_, arms, ref source) = expr.kind {\n         // desugared from a `?` operator\n-        if let MatchSource::TryDesugar = *source {\n+        if *source == MatchSource::TryDesugar {\n             return Some(expr);\n         }\n "}, {"sha": "68dd1b29845a570cc4f6b30af834414fc34d70c5", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -74,7 +74,7 @@ impl<'a> NumericLiteral<'a> {\n         };\n \n         // Grab part of the literal after prefix, if present.\n-        let (prefix, mut sans_prefix) = if let Radix::Decimal = radix {\n+        let (prefix, mut sans_prefix) = if radix == Radix::Decimal {\n             (None, lit)\n         } else {\n             let (p, s) = lit.split_at(2);\n@@ -157,8 +157,10 @@ impl<'a> NumericLiteral<'a> {\n         }\n \n         if let Some((separator, exponent)) = self.exponent {\n-            output.push_str(separator);\n-            Self::group_digits(&mut output, exponent, group_size, true, false);\n+            if exponent != \"0\" {\n+                output.push_str(separator);\n+                Self::group_digits(&mut output, exponent, group_size, true, false);\n+            }\n         }\n \n         if let Some(suffix) = self.suffix {\n@@ -177,6 +179,13 @@ impl<'a> NumericLiteral<'a> {\n \n         let mut digits = input.chars().filter(|&c| c != '_');\n \n+        // The exponent may have a sign, output it early, otherwise it will be\n+        // treated as a digit\n+        if digits.clone().next() == Some('-') {\n+            let _ = digits.next();\n+            output.push('-');\n+        }\n+\n         let first_group_size;\n \n         if partial_group_first {"}, {"sha": "e43c5756021452e30e5f0fdb5706858a5c7237c8", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -129,11 +129,17 @@ pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"core\", \"ops\", \"RangeBounds\"];\n pub const RC_PTR_EQ: [&str; 4] = [\"alloc\", \"rc\", \"Rc\", \"ptr_eq\"];\n pub const REFCELL_REF: [&str; 3] = [\"core\", \"cell\", \"Ref\"];\n pub const REFCELL_REFMUT: [&str; 3] = [\"core\", \"cell\", \"RefMut\"];\n+#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n+#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BYTES_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"bytes\", \"RegexBuilder\", \"new\"];\n+#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n+#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n+#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_NEW: [&str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n+#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n /// Preferably use the diagnostic item `sym::Result` where possible\n pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];"}, {"sha": "5b0efb1fd7132811c449eb408729f4ea08f40870", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -311,7 +311,7 @@ impl<'a> Sugg<'a> {\n /// Return `true` if `sugg` is enclosed in parenthesis.\n fn has_enclosing_paren(sugg: impl AsRef<str>) -> bool {\n     let mut chars = sugg.as_ref().chars();\n-    if let Some('(') = chars.next() {\n+    if chars.next() == Some('(') {\n         let mut depth = 1;\n         for c in &mut chars {\n             if c == '(' {"}, {"sha": "6ebe1a0028a315fff24a116237b52c245cf0ac5f", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -224,15 +224,15 @@ fn is_normalizable_helper<'tcx>(\n     result\n }\n \n-/// Returns true iff the given type is a non aggregate primitive (a bool or char, any integer or\n-/// floating-point number type). For checking aggregation of primitive types (e.g. tuples and slices\n-/// of primitive type) see `is_recursively_primitive_type`\n+/// Returns `true` if the given type is a non aggregate primitive (a `bool` or `char`, any\n+/// integer or floating-point number type). For checking aggregation of primitive types (e.g.\n+/// tuples and slices of primitive type) see `is_recursively_primitive_type`\n pub fn is_non_aggregate_primitive_type(ty: Ty<'_>) -> bool {\n     matches!(ty.kind(), ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_))\n }\n \n-/// Returns true iff the given type is a primitive (a bool or char, any integer or floating-point\n-/// number type, a str, or an array, slice, or tuple of those types).\n+/// Returns `true` if the given type is a primitive (a `bool` or `char`, any integer or\n+/// floating-point number type, a `str`, or an array, slice, or tuple of those types).\n pub fn is_recursively_primitive_type(ty: Ty<'_>) -> bool {\n     match ty.kind() {\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => true,"}, {"sha": "34206b5ae2b21a14291aa6c3c7c2af0f9b579d11", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind) {\n-        if let ty::BorrowKind::MutBorrow = bk {\n+        if bk == ty::BorrowKind::MutBorrow {\n             self.update(cmt);\n         }\n     }"}, {"sha": "f98819303e6827c80e373954d725f0483de628d2", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-09-28\"\n+channel = \"nightly-2021-10-07\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "e8b1640c8693e5907cf93e491a713658b17e6a63", "filename": "tests/compile-test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -92,7 +92,9 @@ fn extern_flags() -> String {\n         .collect();\n     assert!(\n         not_found.is_empty(),\n-        \"dependencies not found in depinfo: {:?}\",\n+        \"dependencies not found in depinfo: {:?}\\n\\\n+        help: Make sure the `-Z binary-dep-depinfo` rust flag is enabled\\n\\\n+        help: Try adding to dev-dependencies in Cargo.toml\",\n         not_found\n     );\n     crates"}, {"sha": "a942709d14acc27da4706e23760346122169525f", "filename": "tests/ui-toml/strict_non_send_fields_in_send_ty/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Fclippy.toml?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1 @@\n+enable-raw-pointer-heuristic-for-send = false"}, {"sha": "90c2439dc34f4556322f383bc0e672c6069618dc", "filename": "tests/ui-toml/strict_non_send_fields_in_send_ty/test.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,43 @@\n+#![warn(clippy::non_send_fields_in_send_ty)]\n+#![feature(extern_types)]\n+\n+use std::rc::Rc;\n+\n+// Basic tests should not be affected\n+pub struct NoGeneric {\n+    rc_is_not_send: Rc<String>,\n+}\n+\n+unsafe impl Send for NoGeneric {}\n+\n+pub struct MultiField<T> {\n+    field1: T,\n+    field2: T,\n+    field3: T,\n+}\n+\n+unsafe impl<T> Send for MultiField<T> {}\n+\n+pub enum MyOption<T> {\n+    MySome(T),\n+    MyNone,\n+}\n+\n+unsafe impl<T> Send for MyOption<T> {}\n+\n+// All fields are disallowed when raw pointer heuristic is off\n+extern \"C\" {\n+    type NonSend;\n+}\n+\n+pub struct HeuristicTest {\n+    field1: Vec<*const NonSend>,\n+    field2: [*const NonSend; 3],\n+    field3: (*const NonSend, *const NonSend, *const NonSend),\n+    field4: (*const NonSend, Rc<u8>),\n+    field5: Vec<Vec<*const NonSend>>,\n+}\n+\n+unsafe impl Send for HeuristicTest {}\n+\n+fn main() {}"}, {"sha": "b07f9dd3df30e02b4ae6f95ac8d802905fe9855c", "filename": "tests/ui-toml/strict_non_send_fields_in_send_ty/test.stderr", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,91 @@\n+error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n+  --> $DIR/test.rs:11:1\n+   |\n+LL | unsafe impl Send for NoGeneric {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n+note: the type of field `rc_is_not_send` is `!Send`\n+  --> $DIR/test.rs:8:5\n+   |\n+LL |     rc_is_not_send: Rc<String>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: this implementation is unsound, as some fields in `MultiField<T>` are `!Send`\n+  --> $DIR/test.rs:19:1\n+   |\n+LL | unsafe impl<T> Send for MultiField<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field1` is `!Send`\n+  --> $DIR/test.rs:14:5\n+   |\n+LL |     field1: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the type of field `field2` is `!Send`\n+  --> $DIR/test.rs:15:5\n+   |\n+LL |     field2: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the type of field `field3` is `!Send`\n+  --> $DIR/test.rs:16:5\n+   |\n+LL |     field3: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `MyOption<T>` are `!Send`\n+  --> $DIR/test.rs:26:1\n+   |\n+LL | unsafe impl<T> Send for MyOption<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `0` is `!Send`\n+  --> $DIR/test.rs:22:12\n+   |\n+LL |     MySome(T),\n+   |            ^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `HeuristicTest` are `!Send`\n+  --> $DIR/test.rs:41:1\n+   |\n+LL | unsafe impl Send for HeuristicTest {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field1` is `!Send`\n+  --> $DIR/test.rs:34:5\n+   |\n+LL |     field1: Vec<*const NonSend>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the type of field `field2` is `!Send`\n+  --> $DIR/test.rs:35:5\n+   |\n+LL |     field2: [*const NonSend; 3],\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the type of field `field3` is `!Send`\n+  --> $DIR/test.rs:36:5\n+   |\n+LL |     field3: (*const NonSend, *const NonSend, *const NonSend),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the type of field `field4` is `!Send`\n+  --> $DIR/test.rs:37:5\n+   |\n+LL |     field4: (*const NonSend, Rc<u8>),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the type of field `field5` is `!Send`\n+  --> $DIR/test.rs:38:5\n+   |\n+LL |     field5: Vec<Vec<*const NonSend>>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "97bab1308aa52b12d94e269117263ef330ab1d0d", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `enable-raw-pointer-heuristic-for-send`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "ccdbd34f7ec7bb587980db53285bded7fe1ddb32", "filename": "tests/ui/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n #[warn(clippy::approx_constant)]\n-#[allow(unused, clippy::shadow_unrelated, clippy::similar_names)]\n+#[allow(clippy::similar_names)]\n fn main() {\n     let my_e = 2.7182;\n     let almost_e = 2.718;"}, {"sha": "12f550d9c9a805ad8023cb11ea8223529c53ff92", "filename": "tests/ui/branches_sharing_code/shared_at_bottom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::equatable_if_let)]\n #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n \n // This tests the branches_sharing_code lint at the end of blocks"}, {"sha": "bb6c4c0703d5168579216e7b37fd571e94570d52", "filename": "tests/ui/collapsible_else_if.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_else_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_else_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_else_if.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "6d4f688db8c0a7a80114ea1e2842f914fc94881c", "filename": "tests/ui/collapsible_else_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_else_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_else_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_else_if.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "5b0e4a473c4ad708d167625ed559ec49c1cb6b35", "filename": "tests/ui/collapsible_if.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "cd231a5d7abb0852161d0dab921956d654ae73b4", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(clippy::assertions_on_constants)]\n+#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "603ae7dc9eb117308cdfa37116187803750c4927", "filename": "tests/ui/collapsible_match.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,10 @@\n #![warn(clippy::collapsible_match)]\n-#![allow(clippy::needless_return, clippy::no_effect, clippy::single_match)]\n+#![allow(\n+    clippy::needless_return,\n+    clippy::no_effect,\n+    clippy::single_match,\n+    clippy::equatable_if_let\n+)]\n \n fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {\n     // match without block"}, {"sha": "5f18b693502953a09d94d5cdcc10eb09a0bef905", "filename": "tests/ui/collapsible_match.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcollapsible_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n error: this `match` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:7:20\n+  --> $DIR/collapsible_match.rs:12:20\n    |\n LL |           Ok(val) => match val {\n    |  ____________________^\n@@ -10,15 +10,15 @@ LL | |         },\n    |\n    = note: `-D clippy::collapsible-match` implied by `-D warnings`\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:7:12\n+  --> $DIR/collapsible_match.rs:12:12\n    |\n LL |         Ok(val) => match val {\n    |            ^^^ replace this binding\n LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n error: this `match` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:16:20\n+  --> $DIR/collapsible_match.rs:21:20\n    |\n LL |           Ok(val) => match val {\n    |  ____________________^\n@@ -28,31 +28,31 @@ LL | |         },\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:16:12\n+  --> $DIR/collapsible_match.rs:21:12\n    |\n LL |         Ok(val) => match val {\n    |            ^^^ replace this binding\n LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n error: this `if let` can be collapsed into the outer `if let`\n-  --> $DIR/collapsible_match.rs:25:9\n+  --> $DIR/collapsible_match.rs:30:9\n    |\n LL | /         if let Some(n) = val {\n LL | |             take(n);\n LL | |         }\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:24:15\n+  --> $DIR/collapsible_match.rs:29:15\n    |\n LL |     if let Ok(val) = res_opt {\n    |               ^^^ replace this binding\n LL |         if let Some(n) = val {\n    |                ^^^^^^^ with this pattern\n \n error: this `if let` can be collapsed into the outer `if let`\n-  --> $DIR/collapsible_match.rs:32:9\n+  --> $DIR/collapsible_match.rs:37:9\n    |\n LL | /         if let Some(n) = val {\n LL | |             take(n);\n@@ -62,15 +62,15 @@ LL | |         }\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:31:15\n+  --> $DIR/collapsible_match.rs:36:15\n    |\n LL |     if let Ok(val) = res_opt {\n    |               ^^^ replace this binding\n LL |         if let Some(n) = val {\n    |                ^^^^^^^ with this pattern\n \n error: this `match` can be collapsed into the outer `if let`\n-  --> $DIR/collapsible_match.rs:43:9\n+  --> $DIR/collapsible_match.rs:48:9\n    |\n LL | /         match val {\n LL | |             Some(n) => foo(n),\n@@ -79,7 +79,7 @@ LL | |         }\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:42:15\n+  --> $DIR/collapsible_match.rs:47:15\n    |\n LL |     if let Ok(val) = res_opt {\n    |               ^^^ replace this binding\n@@ -88,23 +88,23 @@ LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n error: this `if let` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:52:13\n+  --> $DIR/collapsible_match.rs:57:13\n    |\n LL | /             if let Some(n) = val {\n LL | |                 take(n);\n LL | |             }\n    | |_____________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:51:12\n+  --> $DIR/collapsible_match.rs:56:12\n    |\n LL |         Ok(val) => {\n    |            ^^^ replace this binding\n LL |             if let Some(n) = val {\n    |                    ^^^^^^^ with this pattern\n \n error: this `match` can be collapsed into the outer `if let`\n-  --> $DIR/collapsible_match.rs:61:9\n+  --> $DIR/collapsible_match.rs:66:9\n    |\n LL | /         match val {\n LL | |             Some(n) => foo(n),\n@@ -113,7 +113,7 @@ LL | |         }\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:60:15\n+  --> $DIR/collapsible_match.rs:65:15\n    |\n LL |     if let Ok(val) = res_opt {\n    |               ^^^ replace this binding\n@@ -122,7 +122,7 @@ LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n error: this `if let` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:72:13\n+  --> $DIR/collapsible_match.rs:77:13\n    |\n LL | /             if let Some(n) = val {\n LL | |                 take(n);\n@@ -132,15 +132,15 @@ LL | |             }\n    | |_____________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:71:12\n+  --> $DIR/collapsible_match.rs:76:12\n    |\n LL |         Ok(val) => {\n    |            ^^^ replace this binding\n LL |             if let Some(n) = val {\n    |                    ^^^^^^^ with this pattern\n \n error: this `match` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:83:20\n+  --> $DIR/collapsible_match.rs:88:20\n    |\n LL |           Ok(val) => match val {\n    |  ____________________^\n@@ -150,15 +150,15 @@ LL | |         },\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:83:12\n+  --> $DIR/collapsible_match.rs:88:12\n    |\n LL |         Ok(val) => match val {\n    |            ^^^ replace this binding\n LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n error: this `match` can be collapsed into the outer `match`\n-  --> $DIR/collapsible_match.rs:92:22\n+  --> $DIR/collapsible_match.rs:97:22\n    |\n LL |           Some(val) => match val {\n    |  ______________________^\n@@ -168,7 +168,7 @@ LL | |         },\n    | |_________^\n    |\n help: the outer pattern can be modified to include the inner pattern\n-  --> $DIR/collapsible_match.rs:92:14\n+  --> $DIR/collapsible_match.rs:97:14\n    |\n LL |         Some(val) => match val {\n    |              ^^^ replace this binding"}, {"sha": "02c49aa0d7c1f4a0e9e8d2dd22c49cedbd9b2c88", "filename": "tests/ui/crashes/ice-3462.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcrashes%2Fice-3462.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fcrashes%2Fice-3462.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3462.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::all)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::blacklisted_name, clippy::equatable_if_let)]\n #![allow(unused)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/3462"}, {"sha": "156c88e2e45b7d902e8dc3fa3f28f083210c2758", "filename": "tests/ui/def_id_nocore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -3,6 +3,7 @@\n \n #![feature(no_core, lang_items, start)]\n #![no_core]\n+#![allow(clippy::missing_safety_doc)]\n \n #[link(name = \"c\")]\n extern \"C\" {}"}, {"sha": "40d355e9a2e3e871bbe730bb01b6e4e440652bf3", "filename": "tests/ui/def_id_nocore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fdef_id_nocore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fdef_id_nocore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/def_id_nocore.rs:27:19\n+  --> $DIR/def_id_nocore.rs:28:19\n    |\n LL |     pub fn as_ref(self) -> &'static str {\n    |                   ^^^^"}, {"sha": "a6412004726d33302d4e65a26d2fef3221fafb67", "filename": "tests/ui/derivable_impls.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -207,4 +207,37 @@ impl Default for Color2 {\n     }\n }\n \n+pub struct RepeatDefault1 {\n+    a: [i8; 32],\n+}\n+\n+impl Default for RepeatDefault1 {\n+    fn default() -> Self {\n+        RepeatDefault1 { a: [0; 32] }\n+    }\n+}\n+\n+pub struct RepeatDefault2 {\n+    a: [i8; 33],\n+}\n+\n+impl Default for RepeatDefault2 {\n+    fn default() -> Self {\n+        RepeatDefault2 { a: [0; 33] }\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7753\n+\n+pub enum IntOrString {\n+    Int(i32),\n+    String(String),\n+}\n+\n+impl Default for IntOrString {\n+    fn default() -> Self {\n+        IntOrString::Int(0)\n+    }\n+}\n+\n fn main() {}"}, {"sha": "49fb471a21962ce11c69a8b84bccf96a33af3b72", "filename": "tests/ui/derivable_impls.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fderivable_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fderivable_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -73,5 +73,17 @@ LL | | }\n    |\n    = help: try annotating `WithoutSelfParan` with `#[derive(Default)]`\n \n-error: aborting due to 6 previous errors\n+error: this `impl` can be derived\n+  --> $DIR/derivable_impls.rs:214:1\n+   |\n+LL | / impl Default for RepeatDefault1 {\n+LL | |     fn default() -> Self {\n+LL | |         RepeatDefault1 { a: [0; 32] }\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = help: try annotating `RepeatDefault1` with `#[derive(Default)]`\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "342208e52b8e945ea68881260f7186a35d9cfb4a", "filename": "tests/ui/doc/doc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fdoc.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -203,6 +203,11 @@ fn issue_2343() {}\n /// __|_ _|__||_|\n fn pulldown_cmark_crash() {}\n \n+/// This should not lint\n+/// (regression test for #7758)\n+/// [plain text][path::to::item]\n+fn intra_doc_link() {}\n+\n // issue #7033 - generic_const_exprs ICE\n struct S<T, const N: usize>\n where [(); N.checked_next_power_of_two().unwrap()]: {"}, {"sha": "8f823f1672ba2d30e868414cdf87104a39caa175", "filename": "tests/ui/doc_unsafe.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fdoc_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fdoc_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -34,16 +34,25 @@ mod private_mod {\n \n pub use private_mod::republished;\n \n-pub trait UnsafeTrait {\n+pub trait SafeTraitUnsafeMethods {\n     unsafe fn woefully_underdocumented(self);\n \n     /// # Safety\n     unsafe fn at_least_somewhat_documented(self);\n }\n \n+pub unsafe trait UnsafeTrait {\n+    fn method();\n+}\n+\n+/// # Safety\n+pub unsafe trait DocumentedUnsafeTrait {\n+    fn method2();\n+}\n+\n pub struct Struct;\n \n-impl UnsafeTrait for Struct {\n+impl SafeTraitUnsafeMethods for Struct {\n     unsafe fn woefully_underdocumented(self) {\n         // all is well\n     }\n@@ -53,6 +62,14 @@ impl UnsafeTrait for Struct {\n     }\n }\n \n+unsafe impl UnsafeTrait for Struct {\n+    fn method() {}\n+}\n+\n+unsafe impl DocumentedUnsafeTrait for Struct {\n+    fn method2() {}\n+}\n+\n impl Struct {\n     pub unsafe fn more_undocumented_unsafe() -> Self {\n         unimplemented!();"}, {"sha": "34ca37a6efdc0197c9b115dd6ccb81980f41557a", "filename": "tests/ui/doc_unsafe.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fdoc_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fdoc_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -22,16 +22,24 @@ error: unsafe function's docs miss `# Safety` section\n LL |     unsafe fn woefully_underdocumented(self);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: docs for unsafe trait missing `# Safety` section\n+  --> $DIR/doc_unsafe.rs:44:1\n+   |\n+LL | / pub unsafe trait UnsafeTrait {\n+LL | |     fn method();\n+LL | | }\n+   | |_^\n+\n error: unsafe function's docs miss `# Safety` section\n-  --> $DIR/doc_unsafe.rs:57:5\n+  --> $DIR/doc_unsafe.rs:74:5\n    |\n LL | /     pub unsafe fn more_undocumented_unsafe() -> Self {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: unsafe function's docs miss `# Safety` section\n-  --> $DIR/doc_unsafe.rs:73:9\n+  --> $DIR/doc_unsafe.rs:90:9\n    |\n LL | /         pub unsafe fn whee() {\n LL | |             unimplemented!()\n@@ -43,5 +51,5 @@ LL |   very_unsafe!();\n    |\n    = note: this error originates in the macro `very_unsafe` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "ba72cc237b4a58e1b0c51f5470f88273e6f87292", "filename": "tests/ui/equatable_if_let.fixed", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fequatable_if_let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fequatable_if_let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+#![allow(unused_variables, dead_code)]\n+#![warn(clippy::equatable_if_let)]\n+\n+use std::cmp::Ordering;\n+\n+#[derive(PartialEq)]\n+enum Enum {\n+    TupleVariant(i32, u64),\n+    RecordVariant { a: i64, b: u32 },\n+    UnitVariant,\n+    Recursive(Struct),\n+}\n+\n+#[derive(PartialEq)]\n+struct Struct {\n+    a: i32,\n+    b: bool,\n+}\n+\n+enum NotPartialEq {\n+    A,\n+    B,\n+}\n+\n+enum NotStructuralEq {\n+    A,\n+    B,\n+}\n+\n+impl PartialEq for NotStructuralEq {\n+    fn eq(&self, _: &NotStructuralEq) -> bool {\n+        false\n+    }\n+}\n+\n+fn main() {\n+    let a = 2;\n+    let b = 3;\n+    let c = Some(2);\n+    let d = Struct { a: 2, b: false };\n+    let e = Enum::UnitVariant;\n+    let f = NotPartialEq::A;\n+    let g = NotStructuralEq::A;\n+\n+    // true\n+\n+    if a == 2 {}\n+    if a.cmp(&b) == Ordering::Greater {}\n+    if c == Some(2) {}\n+    if d == (Struct { a: 2, b: false }) {}\n+    if e == Enum::TupleVariant(32, 64) {}\n+    if e == (Enum::RecordVariant { a: 64, b: 32 }) {}\n+    if e == Enum::UnitVariant {}\n+    if (e, &d) == (Enum::UnitVariant, &Struct { a: 2, b: false }) {}\n+\n+    // false\n+\n+    if let 2 | 3 = a {}\n+    if let x @ 2 = a {}\n+    if let Some(3 | 4) = c {}\n+    if let Struct { a, b: false } = d {}\n+    if let Struct { a: 2, b: x } = d {}\n+    if let NotPartialEq::A = f {}\n+    if g == NotStructuralEq::A {}\n+    if let Some(NotPartialEq::A) = Some(f) {}\n+    if Some(g) == Some(NotStructuralEq::A) {}\n+}"}, {"sha": "12526ca193db6b6fd6b1ca3244070a7faa5c9a20", "filename": "tests/ui/equatable_if_let.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+#![allow(unused_variables, dead_code)]\n+#![warn(clippy::equatable_if_let)]\n+\n+use std::cmp::Ordering;\n+\n+#[derive(PartialEq)]\n+enum Enum {\n+    TupleVariant(i32, u64),\n+    RecordVariant { a: i64, b: u32 },\n+    UnitVariant,\n+    Recursive(Struct),\n+}\n+\n+#[derive(PartialEq)]\n+struct Struct {\n+    a: i32,\n+    b: bool,\n+}\n+\n+enum NotPartialEq {\n+    A,\n+    B,\n+}\n+\n+enum NotStructuralEq {\n+    A,\n+    B,\n+}\n+\n+impl PartialEq for NotStructuralEq {\n+    fn eq(&self, _: &NotStructuralEq) -> bool {\n+        false\n+    }\n+}\n+\n+fn main() {\n+    let a = 2;\n+    let b = 3;\n+    let c = Some(2);\n+    let d = Struct { a: 2, b: false };\n+    let e = Enum::UnitVariant;\n+    let f = NotPartialEq::A;\n+    let g = NotStructuralEq::A;\n+\n+    // true\n+\n+    if let 2 = a {}\n+    if let Ordering::Greater = a.cmp(&b) {}\n+    if let Some(2) = c {}\n+    if let Struct { a: 2, b: false } = d {}\n+    if let Enum::TupleVariant(32, 64) = e {}\n+    if let Enum::RecordVariant { a: 64, b: 32 } = e {}\n+    if let Enum::UnitVariant = e {}\n+    if let (Enum::UnitVariant, &Struct { a: 2, b: false }) = (e, &d) {}\n+\n+    // false\n+\n+    if let 2 | 3 = a {}\n+    if let x @ 2 = a {}\n+    if let Some(3 | 4) = c {}\n+    if let Struct { a, b: false } = d {}\n+    if let Struct { a: 2, b: x } = d {}\n+    if let NotPartialEq::A = f {}\n+    if let NotStructuralEq::A = g {}\n+    if let Some(NotPartialEq::A) = Some(f) {}\n+    if let Some(NotStructuralEq::A) = Some(g) {}\n+}"}, {"sha": "79ef919384df28abc1032e096565ade0147f3d79", "filename": "tests/ui/equatable_if_let.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fequatable_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fequatable_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,64 @@\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:49:8\n+   |\n+LL |     if let 2 = a {}\n+   |        ^^^^^^^^^ help: try: `a == 2`\n+   |\n+   = note: `-D clippy::equatable-if-let` implied by `-D warnings`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:50:8\n+   |\n+LL |     if let Ordering::Greater = a.cmp(&b) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.cmp(&b) == Ordering::Greater`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:51:8\n+   |\n+LL |     if let Some(2) = c {}\n+   |        ^^^^^^^^^^^^^^^ help: try: `c == Some(2)`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:52:8\n+   |\n+LL |     if let Struct { a: 2, b: false } = d {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `d == (Struct { a: 2, b: false })`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:53:8\n+   |\n+LL |     if let Enum::TupleVariant(32, 64) = e {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::TupleVariant(32, 64)`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:54:8\n+   |\n+LL |     if let Enum::RecordVariant { a: 64, b: 32 } = e {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == (Enum::RecordVariant { a: 64, b: 32 })`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:55:8\n+   |\n+LL |     if let Enum::UnitVariant = e {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::UnitVariant`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:56:8\n+   |\n+LL |     if let (Enum::UnitVariant, &Struct { a: 2, b: false }) = (e, &d) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(e, &d) == (Enum::UnitVariant, &Struct { a: 2, b: false })`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:66:8\n+   |\n+LL |     if let NotStructuralEq::A = g {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `g == NotStructuralEq::A`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:68:8\n+   |\n+LL |     if let Some(NotStructuralEq::A) = Some(g) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(g) == Some(NotStructuralEq::A)`\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "b74bda182be9bbe10a41c497a2c7ba9e356948fc", "filename": "tests/ui/excessive_precision.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fexcessive_precision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fexcessive_precision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -60,4 +60,10 @@ fn main() {\n \n     // issue #2840\n     let num = 0.000_000_000_01e-10f64;\n+\n+    // issue #7744\n+    let _ = 2.225_073_858_507_201e-308_f64;\n+\n+    // issue #7745\n+    let _ = 0_f64;\n }"}, {"sha": "6e84a71f24cb6a504d5f514143c94dea4fa4aac9", "filename": "tests/ui/excessive_precision.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -60,4 +60,10 @@ fn main() {\n \n     // issue #2840\n     let num = 0.000_000_000_01e-10f64;\n+\n+    // issue #7744\n+    let _ = 2.225_073_858_507_201_1e-308_f64;\n+\n+    // issue #7745\n+    let _ = 1.000_000_000_000_001e-324_f64;\n }"}, {"sha": "42d9d4de193c40c5edcba90e479d3e8ffa96e04f", "filename": "tests/ui/excessive_precision.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fexcessive_precision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fexcessive_precision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -78,5 +78,17 @@ error: float has excessive precision\n LL |     let bad_bige32: f32 = 1.123_456_788_888E-10;\n    |                           ^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8E-10`\n \n-error: aborting due to 13 previous errors\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:65:13\n+   |\n+LL |     let _ = 2.225_073_858_507_201_1e-308_f64;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `2.225_073_858_507_201e-308_f64`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:68:13\n+   |\n+LL |     let _ = 1.000_000_000_000_001e-324_f64;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0_f64`\n+\n+error: aborting due to 15 previous errors\n "}, {"sha": "f373e905d05cad19c78608b6dd8008db6d4224e2", "filename": "tests/ui/for_loop_fixable.fixed", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -23,12 +23,7 @@ impl Unrelated {\n     clippy::iter_next_loop,\n     clippy::for_kv_map\n )]\n-#[allow(\n-    clippy::linkedlist,\n-    clippy::shadow_unrelated,\n-    clippy::unnecessary_mut_passed,\n-    clippy::similar_names\n-)]\n+#[allow(clippy::linkedlist, clippy::unnecessary_mut_passed, clippy::similar_names)]\n #[allow(unused_variables)]\n fn main() {\n     let mut vec = vec![1, 2, 3, 4];"}, {"sha": "3814583bb6ef42d51f9732372d1fb11d2ded5ebb", "filename": "tests/ui/for_loop_fixable.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -23,12 +23,7 @@ impl Unrelated {\n     clippy::iter_next_loop,\n     clippy::for_kv_map\n )]\n-#[allow(\n-    clippy::linkedlist,\n-    clippy::shadow_unrelated,\n-    clippy::unnecessary_mut_passed,\n-    clippy::similar_names\n-)]\n+#[allow(clippy::linkedlist, clippy::unnecessary_mut_passed, clippy::similar_names)]\n #[allow(unused_variables)]\n fn main() {\n     let mut vec = vec![1, 2, 3, 4];"}, {"sha": "009dbe1a0bfaf49f2a967696b471e5e4b541475e", "filename": "tests/ui/for_loop_fixable.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Ffor_loop_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Ffor_loop_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,93 +1,93 @@\n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:43:15\n+  --> $DIR/for_loop_fixable.rs:38:15\n    |\n LL |     for _v in vec.iter() {}\n    |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n    |\n    = note: `-D clippy::explicit-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:45:15\n+  --> $DIR/for_loop_fixable.rs:40:15\n    |\n LL |     for _v in vec.iter_mut() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:48:15\n+  --> $DIR/for_loop_fixable.rs:43:15\n    |\n LL |     for _v in out_vec.into_iter() {}\n    |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n    |\n    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:53:15\n+  --> $DIR/for_loop_fixable.rs:48:15\n    |\n LL |     for _v in [1, 2, 3].iter() {}\n    |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:57:15\n+  --> $DIR/for_loop_fixable.rs:52:15\n    |\n LL |     for _v in [0; 32].iter() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:62:15\n+  --> $DIR/for_loop_fixable.rs:57:15\n    |\n LL |     for _v in ll.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:65:15\n+  --> $DIR/for_loop_fixable.rs:60:15\n    |\n LL |     for _v in vd.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:68:15\n+  --> $DIR/for_loop_fixable.rs:63:15\n    |\n LL |     for _v in bh.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:71:15\n+  --> $DIR/for_loop_fixable.rs:66:15\n    |\n LL |     for _v in hm.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:74:15\n+  --> $DIR/for_loop_fixable.rs:69:15\n    |\n LL |     for _v in bt.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:77:15\n+  --> $DIR/for_loop_fixable.rs:72:15\n    |\n LL |     for _v in hs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:80:15\n+  --> $DIR/for_loop_fixable.rs:75:15\n    |\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:255:18\n+  --> $DIR/for_loop_fixable.rs:250:18\n    |\n LL |         for i in iterator.into_iter() {\n    |                  ^^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `iterator`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:275:18\n+  --> $DIR/for_loop_fixable.rs:270:18\n    |\n LL |         for _ in t.into_iter() {}\n    |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `&t`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:277:18\n+  --> $DIR/for_loop_fixable.rs:272:18\n    |\n LL |         for _ in r.into_iter() {}\n    |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `r`"}, {"sha": "efcaffce24ea4d3fc3689d943bde12d444a7644c", "filename": "tests/ui/for_loop_unfixable.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -7,14 +7,7 @@\n     clippy::iter_next_loop,\n     clippy::for_kv_map\n )]\n-#[allow(\n-    clippy::linkedlist,\n-    clippy::shadow_unrelated,\n-    clippy::unnecessary_mut_passed,\n-    clippy::similar_names,\n-    unused,\n-    dead_code\n-)]\n+#[allow(clippy::linkedlist, clippy::unnecessary_mut_passed, clippy::similar_names)]\n fn main() {\n     let vec = vec![1, 2, 3, 4];\n "}, {"sha": "f769b4bdc941180c2a5587924192016138f2458a", "filename": "tests/ui/for_loop_unfixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Ffor_loop_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Ffor_loop_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop_unfixable.rs:21:15\n+  --> $DIR/for_loop_unfixable.rs:14:15\n    |\n LL |     for _v in vec.iter().next() {}\n    |               ^^^^^^^^^^^^^^^^^"}, {"sha": "69189d9e0c00d911637b320ba9e48b83e3716124", "filename": "tests/ui/if_same_then_else2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fif_same_then_else2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fif_same_then_else2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -2,6 +2,7 @@\n #![allow(\n     clippy::blacklisted_name,\n     clippy::collapsible_else_if,\n+    clippy::equatable_if_let,\n     clippy::collapsible_if,\n     clippy::ifs_same_cond,\n     clippy::needless_return,"}, {"sha": "cac788f859d1e0817dcf231b4fe0ead07896054f", "filename": "tests/ui/if_same_then_else2.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fif_same_then_else2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fif_same_then_else2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:13:13\n+  --> $DIR/if_same_then_else2.rs:14:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -13,7 +13,7 @@ LL | |     } else {\n    |\n    = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:22:12\n+  --> $DIR/if_same_then_else2.rs:23:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -26,7 +26,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:34:13\n+  --> $DIR/if_same_then_else2.rs:35:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -35,7 +35,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:36:12\n+  --> $DIR/if_same_then_else2.rs:37:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -45,7 +45,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:41:13\n+  --> $DIR/if_same_then_else2.rs:42:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -54,7 +54,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:43:12\n+  --> $DIR/if_same_then_else2.rs:44:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -64,7 +64,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:91:21\n+  --> $DIR/if_same_then_else2.rs:92:21\n    |\n LL |       let _ = if true {\n    |  _____________________^\n@@ -73,7 +73,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:93:12\n+  --> $DIR/if_same_then_else2.rs:94:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -83,7 +83,7 @@ LL | |     };\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:98:13\n+  --> $DIR/if_same_then_else2.rs:99:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -92,7 +92,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:100:12\n+  --> $DIR/if_same_then_else2.rs:101:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -102,7 +102,7 @@ LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:122:20\n+  --> $DIR/if_same_then_else2.rs:123:20\n    |\n LL |       } else if true {\n    |  ____________________^\n@@ -112,7 +112,7 @@ LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else2.rs:125:12\n+  --> $DIR/if_same_then_else2.rs:126:12\n    |\n LL |       } else {\n    |  ____________^"}, {"sha": "0998f8ffa9de4ecf8fe15e4c8e74ed6bdbb3176c", "filename": "tests/ui/if_then_panic.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fif_then_panic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fif_then_panic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_panic.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -31,4 +31,10 @@ fn main() {\n     } else {\n         println!(\"qwq\");\n     }\n+    let b = vec![1, 2, 3];\n+    assert!(!b.is_empty(), \"panic1\");\n+    assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n+    assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n+    assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n+    assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n }"}, {"sha": "10433c8d54f2dd1a4fe3211f8e7a60c7c5d33625", "filename": "tests/ui/if_then_panic.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fif_then_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fif_then_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_panic.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -35,4 +35,20 @@ fn main() {\n     } else {\n         println!(\"qwq\");\n     }\n+    let b = vec![1, 2, 3];\n+    if b.is_empty() {\n+        panic!(\"panic1\");\n+    }\n+    if b.is_empty() && a.is_empty() {\n+        panic!(\"panic2\");\n+    }\n+    if a.is_empty() && !b.is_empty() {\n+        panic!(\"panic3\");\n+    }\n+    if b.is_empty() || a.is_empty() {\n+        panic!(\"panic4\");\n+    }\n+    if a.is_empty() || !b.is_empty() {\n+        panic!(\"panic5\");\n+    }\n }"}, {"sha": "5bb62f8756606ec42f899d2fec87c4a966d9b48f", "filename": "tests/ui/if_then_panic.stderr", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fif_then_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fif_then_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_panic.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -16,5 +16,45 @@ LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n-error: aborting due to 2 previous errors\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:39:5\n+   |\n+LL | /     if b.is_empty() {\n+LL | |         panic!(\"panic1\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:42:5\n+   |\n+LL | /     if b.is_empty() && a.is_empty() {\n+LL | |         panic!(\"panic2\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:45:5\n+   |\n+LL | /     if a.is_empty() && !b.is_empty() {\n+LL | |         panic!(\"panic3\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:48:5\n+   |\n+LL | /     if b.is_empty() || a.is_empty() {\n+LL | |         panic!(\"panic4\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:51:5\n+   |\n+LL | /     if a.is_empty() || !b.is_empty() {\n+LL | |         panic!(\"panic5\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "aa69b0974101c822a06a790c742bed645e46813b", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,3 +1,4 @@\n+// edition:2018\n // aux-build:implicit_hasher_macros.rs\n #![deny(clippy::implicit_hasher)]\n #![allow(unused)]\n@@ -96,4 +97,7 @@ __implicit_hasher_test_macro!(impl<K, V> for HashMap<K, V> where V: test_macro::\n // #4260\n implicit_hasher_fn!();\n \n+// #7712\n+pub async fn election_vote(_data: HashMap<i32, i32>) {}\n+\n fn main() {}"}, {"sha": "dad5ab71f157f13a0ff5a23c857223ef83d7cf98", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,11 +1,11 @@\n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:16:35\n+  --> $DIR/implicit_hasher.rs:17:35\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n    |                                   ^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/implicit_hasher.rs:2:9\n+  --> $DIR/implicit_hasher.rs:3:9\n    |\n LL | #![deny(clippy::implicit_hasher)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:25:36\n+  --> $DIR/implicit_hasher.rs:26:36\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n    |                                    ^^^^^^^^^^^^^\n@@ -34,7 +34,7 @@ LL |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Defa\n    |           ~~~~~~~~~~~~~~~~~~     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:30:19\n+  --> $DIR/implicit_hasher.rs:31:19\n    |\n LL | impl Foo<i16> for HashMap<String, String> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -49,7 +49,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:47:32\n+  --> $DIR/implicit_hasher.rs:48:32\n    |\n LL | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n    |                                ^^^^^^^^^^\n@@ -64,7 +64,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:52:19\n+  --> $DIR/implicit_hasher.rs:53:19\n    |\n LL | impl Foo<i16> for HashSet<String> {\n    |                   ^^^^^^^^^^^^^^^\n@@ -79,7 +79,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:69:23\n+  --> $DIR/implicit_hasher.rs:70:23\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                       ^^^^^^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _s\n    |           +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:69:53\n+  --> $DIR/implicit_hasher.rs:70:53\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                     ^^^^^^^^^^^^\n@@ -101,7 +101,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set:\n    |           +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:73:43\n+  --> $DIR/implicit_hasher.rs:74:43\n    |\n LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n    |                                           ^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10,\n    |                  ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:81:33\n+  --> $DIR/implicit_hasher.rs:82:33\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                 ^^^^^^^^^^^^^^^^^\n@@ -135,7 +135,7 @@ LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i\n    |                     +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:81:63\n+  --> $DIR/implicit_hasher.rs:82:63\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                               ^^^^^^^^^^^^\n@@ -149,5 +149,16 @@ help: consider adding a type parameter\n LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {}\n    |                     +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n \n-error: aborting due to 10 previous errors\n+error: parameter of type `HashMap` should be generalized over different hashers\n+  --> $DIR/implicit_hasher.rs:101:35\n+   |\n+LL | pub async fn election_vote(_data: HashMap<i32, i32>) {}\n+   |                                   ^^^^^^^^^^^^^^^^^\n+   |\n+help: consider adding a type parameter\n+   |\n+LL | pub async fn election_vote<S: ::std::hash::BuildHasher>(_data: HashMap<i32, i32, S>) {}\n+   |                           +++++++++++++++++++++++++++++        ~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "67f24b4548aacacf20ffaea675236c314ff003de", "filename": "tests/ui/integer_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Finteger_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Finteger_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,12 +1,5 @@\n #![warn(clippy::integer_arithmetic, clippy::float_arithmetic)]\n-#![allow(\n-    unused,\n-    clippy::shadow_reuse,\n-    clippy::shadow_unrelated,\n-    clippy::no_effect,\n-    clippy::unnecessary_operation,\n-    clippy::op_ref\n-)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::op_ref)]\n \n #[rustfmt::skip]\n fn main() {"}, {"sha": "9a795b1f291547c9f8e3a06990a7901761d3ce7d", "filename": "tests/ui/integer_arithmetic.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Finteger_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Finteger_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,166 +1,166 @@\n error: this operation will panic at runtime\n-  --> $DIR/integer_arithmetic.rs:37:5\n+  --> $DIR/integer_arithmetic.rs:30:5\n    |\n LL |     i /= 0;\n    |     ^^^^^^ attempt to divide `_` by zero\n    |\n    = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n-  --> $DIR/integer_arithmetic.rs:42:5\n+  --> $DIR/integer_arithmetic.rs:35:5\n    |\n LL |     i %= 0;\n    |     ^^^^^^ attempt to calculate the remainder of `_` with a divisor of zero\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:16:5\n+  --> $DIR/integer_arithmetic.rs:9:5\n    |\n LL |     1 + i;\n    |     ^^^^^\n    |\n    = note: `-D clippy::integer-arithmetic` implied by `-D warnings`\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:17:5\n+  --> $DIR/integer_arithmetic.rs:10:5\n    |\n LL |     i * 2;\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:18:5\n+  --> $DIR/integer_arithmetic.rs:11:5\n    |\n LL | /     1 %\n LL | |     i / 2; // no error, this is part of the expression in the preceding line\n    | |_____^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:20:5\n+  --> $DIR/integer_arithmetic.rs:13:5\n    |\n LL |     i - 2 + 2 - i;\n    |     ^^^^^^^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:21:5\n+  --> $DIR/integer_arithmetic.rs:14:5\n    |\n LL |     -i;\n    |     ^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:22:5\n+  --> $DIR/integer_arithmetic.rs:15:5\n    |\n LL |     i >> 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:23:5\n+  --> $DIR/integer_arithmetic.rs:16:5\n    |\n LL |     i << 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:33:5\n+  --> $DIR/integer_arithmetic.rs:26:5\n    |\n LL |     i += 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:34:5\n+  --> $DIR/integer_arithmetic.rs:27:5\n    |\n LL |     i -= 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:35:5\n+  --> $DIR/integer_arithmetic.rs:28:5\n    |\n LL |     i *= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:38:11\n+  --> $DIR/integer_arithmetic.rs:31:11\n    |\n LL |     i /= -1;\n    |           ^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:39:5\n+  --> $DIR/integer_arithmetic.rs:32:5\n    |\n LL |     i /= var1;\n    |     ^^^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:40:5\n+  --> $DIR/integer_arithmetic.rs:33:5\n    |\n LL |     i /= var2;\n    |     ^^^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:43:11\n+  --> $DIR/integer_arithmetic.rs:36:11\n    |\n LL |     i %= -1;\n    |           ^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:44:5\n+  --> $DIR/integer_arithmetic.rs:37:5\n    |\n LL |     i %= var1;\n    |     ^^^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:45:5\n+  --> $DIR/integer_arithmetic.rs:38:5\n    |\n LL |     i %= var2;\n    |     ^^^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:46:5\n+  --> $DIR/integer_arithmetic.rs:39:5\n    |\n LL |     i <<= 3;\n    |     ^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:47:5\n+  --> $DIR/integer_arithmetic.rs:40:5\n    |\n LL |     i >>= 2;\n    |     ^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:89:5\n+  --> $DIR/integer_arithmetic.rs:82:5\n    |\n LL |     3 + &1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:90:5\n+  --> $DIR/integer_arithmetic.rs:83:5\n    |\n LL |     &3 + 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:91:5\n+  --> $DIR/integer_arithmetic.rs:84:5\n    |\n LL |     &3 + &1;\n    |     ^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:96:5\n+  --> $DIR/integer_arithmetic.rs:89:5\n    |\n LL |     a + x\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:100:5\n+  --> $DIR/integer_arithmetic.rs:93:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:104:5\n+  --> $DIR/integer_arithmetic.rs:97:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:108:5\n+  --> $DIR/integer_arithmetic.rs:101:5\n    |\n LL |     (&x + &y)\n    |     ^^^^^^^^^"}, {"sha": "b45cc849eaec42b5796e35d196f55aee7d312e46", "filename": "tests/ui/large_enum_variant.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -35,6 +35,7 @@ enum LargeEnum2 {\n     VariantOk(i32, u32),\n     ContainingLargeEnum(LargeEnum),\n }\n+\n enum LargeEnum3 {\n     ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]),\n     VoidVariant,\n@@ -56,6 +57,23 @@ enum LargeEnumOk {\n     LargeB([i32; 8001]),\n }\n \n+enum LargeEnum6 {\n+    A,\n+    B([u8; 255]),\n+    C([u8; 200]),\n+}\n+\n+enum LargeEnum7 {\n+    A,\n+    B([u8; 1255]),\n+    C([u8; 200]),\n+}\n+\n+enum LargeEnum8 {\n+    VariantOk(i32, u32),\n+    ContainingMoreThanOneField([i32; 8000], [i32; 2], [i32; 9500], [i32; 30]),\n+}\n+\n fn main() {\n     large_enum_variant!();\n }"}, {"sha": "899f97ce2e1e91ba4f3ce50e9cfb39ce2cd8c0b2", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 55, "deletions": 8, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -32,30 +32,45 @@ LL |     ContainingLargeEnum(Box<LargeEnum>),\n    |                         ~~~~~~~~~~~~~~\n \n error: large size difference between variants\n-  --> $DIR/large_enum_variant.rs:46:5\n+  --> $DIR/large_enum_variant.rs:40:5\n+   |\n+LL |     ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this variant is 70004 bytes\n+   |\n+note: and the second-largest variant is 8 bytes:\n+  --> $DIR/large_enum_variant.rs:42:5\n+   |\n+LL |     StructLikeLittle { x: i32, y: i32 },\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |\n+LL |     ContainingMoreThanOneField(i32, Box<[i32; 8000]>, Box<[i32; 9500]>),\n+   |                                     ~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~\n+\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:47:5\n    |\n LL |     StructLikeLarge { x: [i32; 8000], y: i32 },\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this variant is 32004 bytes\n    |\n note: and the second-largest variant is 8 bytes:\n-  --> $DIR/large_enum_variant.rs:45:5\n+  --> $DIR/large_enum_variant.rs:46:5\n    |\n LL |     VariantOk(i32, u32),\n    |     ^^^^^^^^^^^^^^^^^^^\n help: consider boxing the large fields to reduce the total size of the enum\n-  --> $DIR/large_enum_variant.rs:46:5\n    |\n-LL |     StructLikeLarge { x: [i32; 8000], y: i32 },\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     StructLikeLarge { x: Box<[i32; 8000]>, y: i32 },\n+   |                          ~~~~~~~~~~~~~~~~\n \n error: large size difference between variants\n-  --> $DIR/large_enum_variant.rs:51:5\n+  --> $DIR/large_enum_variant.rs:52:5\n    |\n LL |     StructLikeLarge2 { x: [i32; 8000] },\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this variant is 32000 bytes\n    |\n note: and the second-largest variant is 8 bytes:\n-  --> $DIR/large_enum_variant.rs:50:5\n+  --> $DIR/large_enum_variant.rs:51:5\n    |\n LL |     VariantOk(i32, u32),\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -64,5 +79,37 @@ help: consider boxing the large fields to reduce the total size of the enum\n LL |     StructLikeLarge2 { x: Box<[i32; 8000]> },\n    |                           ~~~~~~~~~~~~~~~~\n \n-error: aborting due to 4 previous errors\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:68:5\n+   |\n+LL |     B([u8; 1255]),\n+   |     ^^^^^^^^^^^^^ this variant is 1255 bytes\n+   |\n+note: and the second-largest variant is 200 bytes:\n+  --> $DIR/large_enum_variant.rs:69:5\n+   |\n+LL |     C([u8; 200]),\n+   |     ^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |\n+LL |     B(Box<[u8; 1255]>),\n+   |       ~~~~~~~~~~~~~~~\n+\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:74:5\n+   |\n+LL |     ContainingMoreThanOneField([i32; 8000], [i32; 2], [i32; 9500], [i32; 30]),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this variant is 70128 bytes\n+   |\n+note: and the second-largest variant is 8 bytes:\n+  --> $DIR/large_enum_variant.rs:73:5\n+   |\n+LL |     VariantOk(i32, u32),\n+   |     ^^^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |\n+LL |     ContainingMoreThanOneField(Box<[i32; 8000]>, [i32; 2], Box<[i32; 9500]>, [i32; 30]),\n+   |                                ~~~~~~~~~~~~~~~~            ~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "0860dcf8e0ddb610a1ec41cb65f0fd23b94752d7", "filename": "tests/ui/map_clone.fixed", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n-#![warn(clippy::all, clippy::pedantic)]\n-#![allow(clippy::iter_cloned_collect)]\n-#![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n-#![allow(clippy::let_underscore_drop)]\n-#![allow(clippy::missing_docs_in_private_items)]\n-#![allow(clippy::redundant_closure_for_method_calls)]\n-#![allow(clippy::many_single_char_names)]\n+#![warn(clippy::map_clone)]\n+#![allow(\n+    clippy::clone_on_copy,\n+    clippy::iter_cloned_collect,\n+    clippy::many_single_char_names,\n+    clippy::redundant_clone\n+)]\n \n fn main() {\n     let _: Vec<i8> = vec![5_i8; 6].iter().copied().collect();"}, {"sha": "b6987336834b84dec65af32aba776a0facbd0150", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,11 +1,11 @@\n // run-rustfix\n-#![warn(clippy::all, clippy::pedantic)]\n-#![allow(clippy::iter_cloned_collect)]\n-#![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n-#![allow(clippy::let_underscore_drop)]\n-#![allow(clippy::missing_docs_in_private_items)]\n-#![allow(clippy::redundant_closure_for_method_calls)]\n-#![allow(clippy::many_single_char_names)]\n+#![warn(clippy::map_clone)]\n+#![allow(\n+    clippy::clone_on_copy,\n+    clippy::iter_cloned_collect,\n+    clippy::many_single_char_names,\n+    clippy::redundant_clone\n+)]\n \n fn main() {\n     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();"}, {"sha": "c611f76bf96055704ebb37927cf3ec16ae2765d4", "filename": "tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::match_like_matches_macro)]\n-#![allow(unreachable_patterns, dead_code)]\n+#![allow(unreachable_patterns, dead_code, clippy::equatable_if_let)]\n \n fn main() {\n     let x = Some(5);"}, {"sha": "2deeb84e74138151920ca91279cef789ebad2e79", "filename": "tests/ui/match_expr_like_matches_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::match_like_matches_macro)]\n-#![allow(unreachable_patterns, dead_code)]\n+#![allow(unreachable_patterns, dead_code, clippy::equatable_if_let)]\n \n fn main() {\n     let x = Some(5);"}, {"sha": "846d665d1d864d86dd9396dc23a379271252cb8e", "filename": "tests/ui/match_overlapping_arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -2,7 +2,7 @@\n #![feature(half_open_range_patterns)]\n #![warn(clippy::match_overlapping_arm)]\n #![allow(clippy::redundant_pattern_matching)]\n-#![allow(clippy::if_same_then_else)]\n+#![allow(clippy::if_same_then_else, clippy::equatable_if_let)]\n \n /// Tests for match_overlapping_arm\n "}, {"sha": "6cbb4d32b0d71287c8e35a8e648d9436cbb0aef5", "filename": "tests/ui/match_ref_pats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmatch_ref_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmatch_ref_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::match_ref_pats)]\n+#![allow(clippy::equatable_if_let)]\n \n fn ref_pats() {\n     {"}, {"sha": "072aff445e97f2b330a4fdc56e58bff33fa5a1b1", "filename": "tests/ui/match_ref_pats.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmatch_ref_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmatch_ref_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:6:9\n+  --> $DIR/match_ref_pats.rs:7:9\n    |\n LL | /         match v {\n LL | |             &Some(v) => println!(\"{:?}\", v),\n@@ -16,7 +16,7 @@ LL ~             None => println!(\"none\"),\n    |\n \n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:17:5\n+  --> $DIR/match_ref_pats.rs:18:5\n    |\n LL | /     match tup {\n LL | |         &(v, 1) => println!(\"{}\", v),\n@@ -31,7 +31,7 @@ LL ~         (v, 1) => println!(\"{}\", v),\n    |\n \n error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/match_ref_pats.rs:23:5\n+  --> $DIR/match_ref_pats.rs:24:5\n    |\n LL | /     match &w {\n LL | |         &Some(v) => println!(\"{:?}\", v),\n@@ -47,15 +47,15 @@ LL ~         None => println!(\"none\"),\n    |\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/match_ref_pats.rs:35:12\n+  --> $DIR/match_ref_pats.rs:36:12\n    |\n LL |     if let &None = a {\n    |     -------^^^^^---- help: try this: `if a.is_none()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:35:5\n+  --> $DIR/match_ref_pats.rs:36:5\n    |\n LL | /     if let &None = a {\n LL | |         println!(\"none\");\n@@ -68,13 +68,13 @@ LL |     if let None = *a {\n    |            ~~~~   ~~\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/match_ref_pats.rs:40:12\n+  --> $DIR/match_ref_pats.rs:41:12\n    |\n LL |     if let &None = &b {\n    |     -------^^^^^----- help: try this: `if b.is_none()`\n \n error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/match_ref_pats.rs:40:5\n+  --> $DIR/match_ref_pats.rs:41:5\n    |\n LL | /     if let &None = &b {\n LL | |         println!(\"none\");\n@@ -87,7 +87,7 @@ LL |     if let None = b {\n    |            ~~~~   ~\n \n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:67:9\n+  --> $DIR/match_ref_pats.rs:68:9\n    |\n LL | /         match foo_variant!(0) {\n LL | |             &Foo::A => println!(\"A\"),"}, {"sha": "b1861f07cd189f4454f5238364825d8f072fccae", "filename": "tests/ui/modulo_arithmetic_float.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_float.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,12 +1,5 @@\n #![warn(clippy::modulo_arithmetic)]\n-#![allow(\n-    unused,\n-    clippy::shadow_reuse,\n-    clippy::shadow_unrelated,\n-    clippy::no_effect,\n-    clippy::unnecessary_operation,\n-    clippy::modulo_one\n-)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::modulo_one)]\n \n fn main() {\n     // Lint when both sides are const and of the opposite sign"}, {"sha": "97844aaaa7598d2587fae9e02cfdbf2dc56ed471", "filename": "tests/ui/modulo_arithmetic_float.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_float.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n error: you are using modulo operator on constants with different signs: `-1.600 % 2.100`\n-  --> $DIR/modulo_arithmetic_float.rs:13:5\n+  --> $DIR/modulo_arithmetic_float.rs:6:5\n    |\n LL |     -1.6 % 2.1;\n    |     ^^^^^^^^^^\n@@ -8,71 +8,71 @@ LL |     -1.6 % 2.1;\n    = note: double check for expected result especially when interoperating with different languages\n \n error: you are using modulo operator on constants with different signs: `1.600 % -2.100`\n-  --> $DIR/modulo_arithmetic_float.rs:14:5\n+  --> $DIR/modulo_arithmetic_float.rs:7:5\n    |\n LL |     1.6 % -2.1;\n    |     ^^^^^^^^^^\n    |\n    = note: double check for expected result especially when interoperating with different languages\n \n error: you are using modulo operator on constants with different signs: `-1.200 % 3.400`\n-  --> $DIR/modulo_arithmetic_float.rs:15:5\n+  --> $DIR/modulo_arithmetic_float.rs:8:5\n    |\n LL |     (1.1 - 2.3) % (1.1 + 2.3);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: double check for expected result especially when interoperating with different languages\n \n error: you are using modulo operator on constants with different signs: `3.400 % -1.200`\n-  --> $DIR/modulo_arithmetic_float.rs:16:5\n+  --> $DIR/modulo_arithmetic_float.rs:9:5\n    |\n LL |     (1.1 + 2.3) % (1.1 - 2.3);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: double check for expected result especially when interoperating with different languages\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_float.rs:21:5\n+  --> $DIR/modulo_arithmetic_float.rs:14:5\n    |\n LL |     a_f32 % b_f32;\n    |     ^^^^^^^^^^^^^\n    |\n    = note: double check for expected result especially when interoperating with different languages\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_float.rs:22:5\n+  --> $DIR/modulo_arithmetic_float.rs:15:5\n    |\n LL |     b_f32 % a_f32;\n    |     ^^^^^^^^^^^^^\n    |\n    = note: double check for expected result especially when interoperating with different languages\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_float.rs:23:5\n+  --> $DIR/modulo_arithmetic_float.rs:16:5\n    |\n LL |     b_f32 %= a_f32;\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: double check for expected result especially when interoperating with different languages\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_float.rs:27:5\n+  --> $DIR/modulo_arithmetic_float.rs:20:5\n    |\n LL |     a_f64 % b_f64;\n    |     ^^^^^^^^^^^^^\n    |\n    = note: double check for expected result especially when interoperating with different languages\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_float.rs:28:5\n+  --> $DIR/modulo_arithmetic_float.rs:21:5\n    |\n LL |     b_f64 % a_f64;\n    |     ^^^^^^^^^^^^^\n    |\n    = note: double check for expected result especially when interoperating with different languages\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_float.rs:29:5\n+  --> $DIR/modulo_arithmetic_float.rs:22:5\n    |\n LL |     b_f64 %= a_f64;\n    |     ^^^^^^^^^^^^^^"}, {"sha": "fc1acc39ebc776828508b1d2a6a69cfcb5573616", "filename": "tests/ui/modulo_arithmetic_integral.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,12 +1,5 @@\n #![warn(clippy::modulo_arithmetic)]\n-#![allow(\n-    unused,\n-    clippy::shadow_reuse,\n-    clippy::shadow_unrelated,\n-    clippy::no_effect,\n-    clippy::unnecessary_operation,\n-    clippy::modulo_one\n-)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::modulo_one)]\n \n fn main() {\n     // Lint on signed integral numbers"}, {"sha": "f71adf5b0d014f3f640e51bdc3d7e87595a34c5a", "filename": "tests/ui/modulo_arithmetic_integral.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_integral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_integral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:15:5\n+  --> $DIR/modulo_arithmetic_integral.rs:8:5\n    |\n LL |     a % b;\n    |     ^^^^^\n@@ -9,7 +9,7 @@ LL |     a % b;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:16:5\n+  --> $DIR/modulo_arithmetic_integral.rs:9:5\n    |\n LL |     b % a;\n    |     ^^^^^\n@@ -18,7 +18,7 @@ LL |     b % a;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:17:5\n+  --> $DIR/modulo_arithmetic_integral.rs:10:5\n    |\n LL |     b %= a;\n    |     ^^^^^^\n@@ -27,7 +27,7 @@ LL |     b %= a;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:21:5\n+  --> $DIR/modulo_arithmetic_integral.rs:14:5\n    |\n LL |     a_i8 % b_i8;\n    |     ^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL |     a_i8 % b_i8;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:22:5\n+  --> $DIR/modulo_arithmetic_integral.rs:15:5\n    |\n LL |     b_i8 %= a_i8;\n    |     ^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL |     b_i8 %= a_i8;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:26:5\n+  --> $DIR/modulo_arithmetic_integral.rs:19:5\n    |\n LL |     a_i16 % b_i16;\n    |     ^^^^^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     a_i16 % b_i16;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:27:5\n+  --> $DIR/modulo_arithmetic_integral.rs:20:5\n    |\n LL |     b_i16 %= a_i16;\n    |     ^^^^^^^^^^^^^^\n@@ -63,7 +63,7 @@ LL |     b_i16 %= a_i16;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:31:5\n+  --> $DIR/modulo_arithmetic_integral.rs:24:5\n    |\n LL |     a_i32 % b_i32;\n    |     ^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL |     a_i32 % b_i32;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:32:5\n+  --> $DIR/modulo_arithmetic_integral.rs:25:5\n    |\n LL |     b_i32 %= a_i32;\n    |     ^^^^^^^^^^^^^^\n@@ -81,7 +81,7 @@ LL |     b_i32 %= a_i32;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:36:5\n+  --> $DIR/modulo_arithmetic_integral.rs:29:5\n    |\n LL |     a_i64 % b_i64;\n    |     ^^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     a_i64 % b_i64;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:37:5\n+  --> $DIR/modulo_arithmetic_integral.rs:30:5\n    |\n LL |     b_i64 %= a_i64;\n    |     ^^^^^^^^^^^^^^\n@@ -99,7 +99,7 @@ LL |     b_i64 %= a_i64;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:41:5\n+  --> $DIR/modulo_arithmetic_integral.rs:34:5\n    |\n LL |     a_i128 % b_i128;\n    |     ^^^^^^^^^^^^^^^\n@@ -108,7 +108,7 @@ LL |     a_i128 % b_i128;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:42:5\n+  --> $DIR/modulo_arithmetic_integral.rs:35:5\n    |\n LL |     b_i128 %= a_i128;\n    |     ^^^^^^^^^^^^^^^^\n@@ -117,7 +117,7 @@ LL |     b_i128 %= a_i128;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:46:5\n+  --> $DIR/modulo_arithmetic_integral.rs:39:5\n    |\n LL |     a_isize % b_isize;\n    |     ^^^^^^^^^^^^^^^^^\n@@ -126,7 +126,7 @@ LL |     a_isize % b_isize;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:47:5\n+  --> $DIR/modulo_arithmetic_integral.rs:40:5\n    |\n LL |     b_isize %= a_isize;\n    |     ^^^^^^^^^^^^^^^^^^\n@@ -135,7 +135,7 @@ LL |     b_isize %= a_isize;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:51:5\n+  --> $DIR/modulo_arithmetic_integral.rs:44:5\n    |\n LL |     a % b;\n    |     ^^^^^\n@@ -144,7 +144,7 @@ LL |     a % b;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on types that might have different signs\n-  --> $DIR/modulo_arithmetic_integral.rs:52:5\n+  --> $DIR/modulo_arithmetic_integral.rs:45:5\n    |\n LL |     b %= a;\n    |     ^^^^^^"}, {"sha": "047a29fa1e327201d12847ff71452f51cea4ec9d", "filename": "tests/ui/modulo_arithmetic_integral_const.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_integral_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_integral_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral_const.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,12 +1,5 @@\n #![warn(clippy::modulo_arithmetic)]\n-#![allow(\n-    unused,\n-    clippy::shadow_reuse,\n-    clippy::shadow_unrelated,\n-    clippy::no_effect,\n-    clippy::unnecessary_operation,\n-    clippy::modulo_one\n-)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::modulo_one)]\n \n fn main() {\n     // Lint when both sides are const and of the opposite sign"}, {"sha": "64335f35f0f82d997a2b4e1e14f52fa9af68df28", "filename": "tests/ui/modulo_arithmetic_integral_const.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:13:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:6:5\n    |\n LL |     -1 % 2;\n    |     ^^^^^^\n@@ -9,7 +9,7 @@ LL |     -1 % 2;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:14:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:7:5\n    |\n LL |     1 % -2;\n    |     ^^^^^^\n@@ -18,7 +18,7 @@ LL |     1 % -2;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 3`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:15:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:8:5\n    |\n LL |     (1 - 2) % (1 + 2);\n    |     ^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |     (1 - 2) % (1 + 2);\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `3 % -1`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:16:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:9:5\n    |\n LL |     (1 + 2) % (1 - 2);\n    |     ^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL |     (1 + 2) % (1 - 2);\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-35 % 300000`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:17:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:10:5\n    |\n LL |     35 * (7 - 4 * 2) % (-500 * -600);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL |     35 * (7 - 4 * 2) % (-500 * -600);\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:19:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:12:5\n    |\n LL |     -1i8 % 2i8;\n    |     ^^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     -1i8 % 2i8;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:20:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:13:5\n    |\n LL |     1i8 % -2i8;\n    |     ^^^^^^^^^^\n@@ -63,7 +63,7 @@ LL |     1i8 % -2i8;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:21:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:14:5\n    |\n LL |     -1i16 % 2i16;\n    |     ^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL |     -1i16 % 2i16;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:22:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:15:5\n    |\n LL |     1i16 % -2i16;\n    |     ^^^^^^^^^^^^\n@@ -81,7 +81,7 @@ LL |     1i16 % -2i16;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:23:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:16:5\n    |\n LL |     -1i32 % 2i32;\n    |     ^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     -1i32 % 2i32;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:24:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:17:5\n    |\n LL |     1i32 % -2i32;\n    |     ^^^^^^^^^^^^\n@@ -99,7 +99,7 @@ LL |     1i32 % -2i32;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:25:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:18:5\n    |\n LL |     -1i64 % 2i64;\n    |     ^^^^^^^^^^^^\n@@ -108,7 +108,7 @@ LL |     -1i64 % 2i64;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:26:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:19:5\n    |\n LL |     1i64 % -2i64;\n    |     ^^^^^^^^^^^^\n@@ -117,7 +117,7 @@ LL |     1i64 % -2i64;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:27:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:20:5\n    |\n LL |     -1i128 % 2i128;\n    |     ^^^^^^^^^^^^^^\n@@ -126,7 +126,7 @@ LL |     -1i128 % 2i128;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:28:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:21:5\n    |\n LL |     1i128 % -2i128;\n    |     ^^^^^^^^^^^^^^\n@@ -135,7 +135,7 @@ LL |     1i128 % -2i128;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `-1 % 2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:29:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:22:5\n    |\n LL |     -1isize % 2isize;\n    |     ^^^^^^^^^^^^^^^^\n@@ -144,7 +144,7 @@ LL |     -1isize % 2isize;\n    = note: or consider using `rem_euclid` or similar function\n \n error: you are using modulo operator on constants with different signs: `1 % -2`\n-  --> $DIR/modulo_arithmetic_integral_const.rs:30:5\n+  --> $DIR/modulo_arithmetic_integral_const.rs:23:5\n    |\n LL |     1isize % -2isize;\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "a2e3988daff1bdc41d38db637a331abf9721c987", "filename": "tests/ui/needless_bool/fixable.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_bool%2Ffixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_bool%2Ffixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -6,6 +6,7 @@\n     dead_code,\n     clippy::no_effect,\n     clippy::if_same_then_else,\n+    clippy::equatable_if_let,\n     clippy::needless_return,\n     clippy::self_named_constructors\n )]"}, {"sha": "75805e85789194dbde588fb70e85d7f487d4d16b", "filename": "tests/ui/needless_bool/fixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_bool%2Ffixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_bool%2Ffixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -6,6 +6,7 @@\n     dead_code,\n     clippy::no_effect,\n     clippy::if_same_then_else,\n+    clippy::equatable_if_let,\n     clippy::needless_return,\n     clippy::self_named_constructors\n )]"}, {"sha": "1fa12add16739df015d536a9a49c242450473809", "filename": "tests/ui/needless_bool/fixable.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_bool%2Ffixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_bool%2Ffixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,5 +1,5 @@\n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:40:5\n+  --> $DIR/fixable.rs:41:5\n    |\n LL | /     if x {\n LL | |         true\n@@ -11,7 +11,7 @@ LL | |     };\n    = note: `-D clippy::needless-bool` implied by `-D warnings`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:45:5\n+  --> $DIR/fixable.rs:46:5\n    |\n LL | /     if x {\n LL | |         false\n@@ -21,7 +21,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:50:5\n+  --> $DIR/fixable.rs:51:5\n    |\n LL | /     if x && y {\n LL | |         false\n@@ -31,7 +31,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `!(x && y)`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:70:5\n+  --> $DIR/fixable.rs:71:5\n    |\n LL | /     if x {\n LL | |         return true;\n@@ -41,7 +41,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:78:5\n+  --> $DIR/fixable.rs:79:5\n    |\n LL | /     if x {\n LL | |         return false;\n@@ -51,7 +51,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:86:5\n+  --> $DIR/fixable.rs:87:5\n    |\n LL | /     if x && y {\n LL | |         return true;\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x && y`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:94:5\n+  --> $DIR/fixable.rs:95:5\n    |\n LL | /     if x && y {\n LL | |         return false;\n@@ -71,33 +71,33 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !(x && y)`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:102:8\n+  --> $DIR/fixable.rs:103:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n    |\n    = note: `-D clippy::bool-comparison` implied by `-D warnings`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:106:8\n+  --> $DIR/fixable.rs:107:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:116:8\n+  --> $DIR/fixable.rs:117:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:117:8\n+  --> $DIR/fixable.rs:118:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:126:12\n+  --> $DIR/fixable.rs:127:12\n    |\n LL |       } else if returns_bool() {\n    |  ____________^"}, {"sha": "9c999e12b4cbc4c6d5a3afed29e97cffa3638623", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -3,7 +3,12 @@\n \n #![feature(let_else)]\n #![allow(unused)]\n-#![allow(clippy::if_same_then_else, clippy::single_match, clippy::needless_bool)]\n+#![allow(\n+    clippy::if_same_then_else,\n+    clippy::single_match,\n+    clippy::needless_bool,\n+    clippy::equatable_if_let\n+)]\n #![warn(clippy::needless_return)]\n \n macro_rules! the_answer {"}, {"sha": "da7dcf4f0a9ea377596a830996947f6d5afa60fb", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -3,7 +3,12 @@\n \n #![feature(let_else)]\n #![allow(unused)]\n-#![allow(clippy::if_same_then_else, clippy::single_match, clippy::needless_bool)]\n+#![allow(\n+    clippy::if_same_then_else,\n+    clippy::single_match,\n+    clippy::needless_bool,\n+    clippy::equatable_if_let\n+)]\n #![warn(clippy::needless_return)]\n \n macro_rules! the_answer {"}, {"sha": "2e802cff1e686917ddef5a3c5e1ba7421c617ec4", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,193 +1,193 @@\n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:20:5\n+  --> $DIR/needless_return.rs:25:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:24:5\n+  --> $DIR/needless_return.rs:29:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:29:9\n+  --> $DIR/needless_return.rs:34:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:31:9\n+  --> $DIR/needless_return.rs:36:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:37:17\n+  --> $DIR/needless_return.rs:42:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:39:13\n+  --> $DIR/needless_return.rs:44:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:46:9\n+  --> $DIR/needless_return.rs:51:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:48:16\n+  --> $DIR/needless_return.rs:53:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:56:5\n+  --> $DIR/needless_return.rs:61:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:61:9\n+  --> $DIR/needless_return.rs:66:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:63:9\n+  --> $DIR/needless_return.rs:68:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:70:14\n+  --> $DIR/needless_return.rs:75:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:85:9\n+  --> $DIR/needless_return.rs:90:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:87:9\n+  --> $DIR/needless_return.rs:92:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:108:32\n+  --> $DIR/needless_return.rs:113:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:113:13\n+  --> $DIR/needless_return.rs:118:13\n    |\n LL |             return;\n    |             ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:115:20\n+  --> $DIR/needless_return.rs:120:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:121:32\n+  --> $DIR/needless_return.rs:126:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^ help: remove `return`: `Foo`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:130:5\n+  --> $DIR/needless_return.rs:135:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:134:5\n+  --> $DIR/needless_return.rs:139:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:139:9\n+  --> $DIR/needless_return.rs:144:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:141:9\n+  --> $DIR/needless_return.rs:146:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:147:17\n+  --> $DIR/needless_return.rs:152:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:149:13\n+  --> $DIR/needless_return.rs:154:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:156:9\n+  --> $DIR/needless_return.rs:161:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:158:16\n+  --> $DIR/needless_return.rs:163:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:166:5\n+  --> $DIR/needless_return.rs:171:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:171:9\n+  --> $DIR/needless_return.rs:176:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:173:9\n+  --> $DIR/needless_return.rs:178:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:180:14\n+  --> $DIR/needless_return.rs:185:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:195:9\n+  --> $DIR/needless_return.rs:200:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:197:9\n+  --> $DIR/needless_return.rs:202:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`"}, {"sha": "eca7f5e5655913785f3e98cf94d3a179549e74ba", "filename": "tests/ui/non_send_fields_in_send_ty.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,127 @@\n+#![warn(clippy::non_send_fields_in_send_ty)]\n+#![feature(extern_types)]\n+\n+use std::cell::UnsafeCell;\n+use std::ptr::NonNull;\n+use std::rc::Rc;\n+use std::sync::{Arc, Mutex, MutexGuard};\n+\n+// disrustor / RUSTSEC-2020-0150\n+pub struct RingBuffer<T> {\n+    data: Vec<UnsafeCell<T>>,\n+    capacity: usize,\n+    mask: usize,\n+}\n+\n+unsafe impl<T> Send for RingBuffer<T> {}\n+\n+// noise_search / RUSTSEC-2020-0141\n+pub struct MvccRwLock<T> {\n+    raw: *const T,\n+    lock: Mutex<Box<T>>,\n+}\n+\n+unsafe impl<T> Send for MvccRwLock<T> {}\n+\n+// async-coap / RUSTSEC-2020-0124\n+pub struct ArcGuard<RC, T> {\n+    inner: T,\n+    head: Arc<RC>,\n+}\n+\n+unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n+\n+// rusb / RUSTSEC-2020-0098\n+extern \"C\" {\n+    type libusb_device_handle;\n+}\n+\n+pub trait UsbContext {\n+    // some user trait that does not guarantee `Send`\n+}\n+\n+pub struct DeviceHandle<T: UsbContext> {\n+    context: T,\n+    handle: NonNull<libusb_device_handle>,\n+}\n+\n+unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n+\n+// Other basic tests\n+pub struct NoGeneric {\n+    rc_is_not_send: Rc<String>,\n+}\n+\n+unsafe impl Send for NoGeneric {}\n+\n+pub struct MultiField<T> {\n+    field1: T,\n+    field2: T,\n+    field3: T,\n+}\n+\n+unsafe impl<T> Send for MultiField<T> {}\n+\n+pub enum MyOption<T> {\n+    MySome(T),\n+    MyNone,\n+}\n+\n+unsafe impl<T> Send for MyOption<T> {}\n+\n+// Multiple type parameters\n+pub struct MultiParam<A, B> {\n+    vec: Vec<(A, B)>,\n+}\n+\n+unsafe impl<A, B> Send for MultiParam<A, B> {}\n+\n+// Tests for raw pointer heuristic\n+extern \"C\" {\n+    type NonSend;\n+}\n+\n+pub struct HeuristicTest {\n+    // raw pointers are allowed\n+    field1: Vec<*const NonSend>,\n+    field2: [*const NonSend; 3],\n+    field3: (*const NonSend, *const NonSend, *const NonSend),\n+    // not allowed when it contains concrete `!Send` field\n+    field4: (*const NonSend, Rc<u8>),\n+    // nested raw pointer is also allowed\n+    field5: Vec<Vec<*const NonSend>>,\n+}\n+\n+unsafe impl Send for HeuristicTest {}\n+\n+// Test attributes\n+#[allow(clippy::non_send_fields_in_send_ty)]\n+pub struct AttrTest1<T>(T);\n+\n+pub struct AttrTest2<T> {\n+    #[allow(clippy::non_send_fields_in_send_ty)]\n+    field: T,\n+}\n+\n+pub enum AttrTest3<T> {\n+    #[allow(clippy::non_send_fields_in_send_ty)]\n+    Enum1(T),\n+    Enum2(T),\n+}\n+\n+unsafe impl<T> Send for AttrTest1<T> {}\n+unsafe impl<T> Send for AttrTest2<T> {}\n+unsafe impl<T> Send for AttrTest3<T> {}\n+\n+// Multiple non-overlapping `Send` for a single type\n+pub struct Complex<A, B> {\n+    field1: A,\n+    field2: B,\n+}\n+\n+unsafe impl<P> Send for Complex<P, u32> {}\n+\n+// `MutexGuard` is non-Send\n+unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n+\n+fn main() {}"}, {"sha": "8b8a1d16d9bb96172bd747f011814853230725b9", "filename": "tests/ui/non_send_fields_in_send_ty.stderr", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -0,0 +1,171 @@\n+error: this implementation is unsound, as some fields in `RingBuffer<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:16:1\n+   |\n+LL | unsafe impl<T> Send for RingBuffer<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n+note: the type of field `data` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:11:5\n+   |\n+LL |     data: Vec<UnsafeCell<T>>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: add bounds on type parameter `T` that satisfy `Vec<UnsafeCell<T>>: Send`\n+\n+error: this implementation is unsound, as some fields in `MvccRwLock<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:24:1\n+   |\n+LL | unsafe impl<T> Send for MvccRwLock<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `lock` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:21:5\n+   |\n+LL |     lock: Mutex<Box<T>>,\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   = help: add bounds on type parameter `T` that satisfy `Mutex<Box<T>>: Send`\n+\n+error: this implementation is unsound, as some fields in `ArcGuard<RC, T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:32:1\n+   |\n+LL | unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `head` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:29:5\n+   |\n+LL |     head: Arc<RC>,\n+   |     ^^^^^^^^^^^^^\n+   = help: add bounds on type parameter `RC` that satisfy `Arc<RC>: Send`\n+\n+error: this implementation is unsound, as some fields in `DeviceHandle<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:48:1\n+   |\n+LL | unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `context` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:44:5\n+   |\n+LL |     context: T,\n+   |     ^^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:55:1\n+   |\n+LL | unsafe impl Send for NoGeneric {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `rc_is_not_send` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:52:5\n+   |\n+LL |     rc_is_not_send: Rc<String>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: this implementation is unsound, as some fields in `MultiField<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:63:1\n+   |\n+LL | unsafe impl<T> Send for MultiField<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field1` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:58:5\n+   |\n+LL |     field1: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the type of field `field2` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:59:5\n+   |\n+LL |     field2: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the type of field `field3` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:60:5\n+   |\n+LL |     field3: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `MyOption<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:70:1\n+   |\n+LL | unsafe impl<T> Send for MyOption<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `0` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:66:12\n+   |\n+LL |     MySome(T),\n+   |            ^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `MultiParam<A, B>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:77:1\n+   |\n+LL | unsafe impl<A, B> Send for MultiParam<A, B> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `vec` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:74:5\n+   |\n+LL |     vec: Vec<(A, B)>,\n+   |     ^^^^^^^^^^^^^^^^\n+   = help: add bounds on type parameters `A, B` that satisfy `Vec<(A, B)>: Send`\n+\n+error: this implementation is unsound, as some fields in `HeuristicTest` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:95:1\n+   |\n+LL | unsafe impl Send for HeuristicTest {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field4` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:90:5\n+   |\n+LL |     field4: (*const NonSend, Rc<u8>),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: this implementation is unsound, as some fields in `AttrTest3<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:114:1\n+   |\n+LL | unsafe impl<T> Send for AttrTest3<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `0` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:109:11\n+   |\n+LL |     Enum2(T),\n+   |           ^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `Complex<P, u32>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:122:1\n+   |\n+LL | unsafe impl<P> Send for Complex<P, u32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field1` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:118:5\n+   |\n+LL |     field1: A,\n+   |     ^^^^^^^^^\n+   = help: add `P: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `Complex<Q, MutexGuard<'static, bool>>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:125:1\n+   |\n+LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field2` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:119:5\n+   |\n+LL |     field2: B,\n+   |     ^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "a3ebe5d0703846bd09a131d94a0008700eba1b9c", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -2,7 +2,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(clippy::redundant_closure)]\n-#![allow(clippy::ref_option_ref)]\n+#![allow(clippy::ref_option_ref, clippy::equatable_if_let)]\n \n fn bad1(string: Option<&str>) -> (bool, &str) {\n     string.map_or((false, \"hello\"), |x| (true, x))"}, {"sha": "b11df3db60f57edfa56913f4af239b343259ecfa", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -2,7 +2,7 @@\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(clippy::redundant_closure)]\n-#![allow(clippy::ref_option_ref)]\n+#![allow(clippy::ref_option_ref, clippy::equatable_if_let)]\n \n fn bad1(string: Option<&str>) -> (bool, &str) {\n     if let Some(x) = string {"}, {"sha": "ce3229f17591e472251795bd1cd24646ead95a5b", "filename": "tests/ui/redundant_pattern_matching_drop_order.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_drop_order.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_drop_order.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_drop_order.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -2,7 +2,7 @@\n \n // Issue #5746\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::if_same_then_else)]\n+#![allow(clippy::if_same_then_else, clippy::equatable_if_let)]\n use std::task::Poll::{Pending, Ready};\n \n fn main() {"}, {"sha": "29b8543cf473a92241c7db8a2586922f966452a6", "filename": "tests/ui/redundant_pattern_matching_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_drop_order.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -2,7 +2,7 @@\n \n // Issue #5746\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::if_same_then_else)]\n+#![allow(clippy::if_same_then_else, clippy::equatable_if_let)]\n use std::task::Poll::{Pending, Ready};\n \n fn main() {"}, {"sha": "813e268a60c3debe1b49c4a4b4e81bad6f5b4f7d", "filename": "tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -6,6 +6,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::equatable_if_let,\n     clippy::if_same_then_else\n )]\n "}, {"sha": "82a98468943dfcffc67a064be39a1a3dd4ba6f6f", "filename": "tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -6,6 +6,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::equatable_if_let,\n     clippy::if_same_then_else\n )]\n "}, {"sha": "3a58e5ad7bee96ff94202e42dc5cf99ec17928fb", "filename": "tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,49 +1,49 @@\n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:13:12\n+  --> $DIR/redundant_pattern_matching_option.rs:14:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:15:12\n+  --> $DIR/redundant_pattern_matching_option.rs:16:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:17:12\n+  --> $DIR/redundant_pattern_matching_option.rs:18:12\n    |\n LL |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:23:15\n+  --> $DIR/redundant_pattern_matching_option.rs:24:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:25:15\n+  --> $DIR/redundant_pattern_matching_option.rs:26:15\n    |\n LL |     while let None = Some(42) {}\n    |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:27:15\n+  --> $DIR/redundant_pattern_matching_option.rs:28:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:30:15\n+  --> $DIR/redundant_pattern_matching_option.rs:31:15\n    |\n LL |     while let Some(_) = v.pop() {\n    |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:38:5\n+  --> $DIR/redundant_pattern_matching_option.rs:39:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -52,7 +52,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:43:5\n+  --> $DIR/redundant_pattern_matching_option.rs:44:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:48:13\n+  --> $DIR/redundant_pattern_matching_option.rs:49:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -71,49 +71,49 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:54:20\n+  --> $DIR/redundant_pattern_matching_option.rs:55:20\n    |\n LL |     let _ = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:58:20\n+  --> $DIR/redundant_pattern_matching_option.rs:59:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:60:19\n+  --> $DIR/redundant_pattern_matching_option.rs:61:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:79:12\n+  --> $DIR/redundant_pattern_matching_option.rs:80:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:81:12\n+  --> $DIR/redundant_pattern_matching_option.rs:82:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:83:15\n+  --> $DIR/redundant_pattern_matching_option.rs:84:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:85:15\n+  --> $DIR/redundant_pattern_matching_option.rs:86:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:87:5\n+  --> $DIR/redundant_pattern_matching_option.rs:88:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -122,7 +122,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:92:5\n+  --> $DIR/redundant_pattern_matching_option.rs:93:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,"}, {"sha": "3645f2c4bfdd2602ce3875322b49dc8924b9635f", "filename": "tests/ui/redundant_pattern_matching_poll.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_poll.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_poll.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -6,6 +6,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::equatable_if_let,\n     clippy::if_same_then_else\n )]\n "}, {"sha": "866c71b7cfa8034aa6fd1409fad780d8910d4e50", "filename": "tests/ui/redundant_pattern_matching_poll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -6,6 +6,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::equatable_if_let,\n     clippy::if_same_then_else\n )]\n "}, {"sha": "1b480f3157f7072dd9be64e1059a22c4f80d1e5f", "filename": "tests/ui/redundant_pattern_matching_poll.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_poll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fredundant_pattern_matching_poll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_poll.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,43 +1,43 @@\n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:15:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:16:12\n    |\n LL |     if let Pending = Pending::<()> {}\n    |     -------^^^^^^^---------------- help: try this: `if Pending::<()>.is_pending()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:17:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:18:12\n    |\n LL |     if let Ready(_) = Ready(42) {}\n    |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:19:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:20:12\n    |\n LL |     if let Ready(_) = Ready(42) {\n    |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:25:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:26:15\n    |\n LL |     while let Ready(_) = Ready(42) {}\n    |     ----------^^^^^^^^------------ help: try this: `while Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:27:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:28:15\n    |\n LL |     while let Pending = Ready(42) {}\n    |     ----------^^^^^^^------------ help: try this: `while Ready(42).is_pending()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:29:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:30:15\n    |\n LL |     while let Pending = Pending::<()> {}\n    |     ----------^^^^^^^---------------- help: try this: `while Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:35:5\n+  --> $DIR/redundant_pattern_matching_poll.rs:36:5\n    |\n LL | /     match Ready(42) {\n LL | |         Ready(_) => true,\n@@ -46,7 +46,7 @@ LL | |     };\n    | |_____^ help: try this: `Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:40:5\n+  --> $DIR/redundant_pattern_matching_poll.rs:41:5\n    |\n LL | /     match Pending::<()> {\n LL | |         Ready(_) => false,\n@@ -55,7 +55,7 @@ LL | |     };\n    | |_____^ help: try this: `Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:45:13\n+  --> $DIR/redundant_pattern_matching_poll.rs:46:13\n    |\n LL |       let _ = match Pending::<()> {\n    |  _____________^\n@@ -65,49 +65,49 @@ LL | |     };\n    | |_____^ help: try this: `Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:51:20\n+  --> $DIR/redundant_pattern_matching_poll.rs:52:20\n    |\n LL |     let _ = if let Ready(_) = poll { true } else { false };\n    |             -------^^^^^^^^------- help: try this: `if poll.is_ready()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:55:20\n+  --> $DIR/redundant_pattern_matching_poll.rs:56:20\n    |\n LL |     let _ = if let Ready(_) = gen_poll() {\n    |             -------^^^^^^^^------------- help: try this: `if gen_poll().is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:57:19\n+  --> $DIR/redundant_pattern_matching_poll.rs:58:19\n    |\n LL |     } else if let Pending = gen_poll() {\n    |            -------^^^^^^^------------- help: try this: `if gen_poll().is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:73:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:74:12\n    |\n LL |     if let Ready(_) = Ready(42) {}\n    |     -------^^^^^^^^------------ help: try this: `if Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:75:12\n+  --> $DIR/redundant_pattern_matching_poll.rs:76:12\n    |\n LL |     if let Pending = Pending::<()> {}\n    |     -------^^^^^^^---------------- help: try this: `if Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:77:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:78:15\n    |\n LL |     while let Ready(_) = Ready(42) {}\n    |     ----------^^^^^^^^------------ help: try this: `while Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:79:15\n+  --> $DIR/redundant_pattern_matching_poll.rs:80:15\n    |\n LL |     while let Pending = Pending::<()> {}\n    |     ----------^^^^^^^---------------- help: try this: `while Pending::<()>.is_pending()`\n \n error: redundant pattern matching, consider using `is_ready()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:81:5\n+  --> $DIR/redundant_pattern_matching_poll.rs:82:5\n    |\n LL | /     match Ready(42) {\n LL | |         Ready(_) => true,\n@@ -116,7 +116,7 @@ LL | |     };\n    | |_____^ help: try this: `Ready(42).is_ready()`\n \n error: redundant pattern matching, consider using `is_pending()`\n-  --> $DIR/redundant_pattern_matching_poll.rs:86:5\n+  --> $DIR/redundant_pattern_matching_poll.rs:87:5\n    |\n LL | /     match Pending::<()> {\n LL | |         Ready(_) => false,"}, {"sha": "02e838456d0b574559f34404e79f22ffa158100e", "filename": "tests/ui/shadow.rs", "status": "modified", "additions": 68, "deletions": 45, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,54 +1,77 @@\n-#![warn(\n-    clippy::all,\n-    clippy::pedantic,\n-    clippy::shadow_same,\n-    clippy::shadow_reuse,\n-    clippy::shadow_unrelated\n-)]\n-#![allow(\n-    unused_parens,\n-    unused_variables,\n-    clippy::manual_unwrap_or,\n-    clippy::missing_docs_in_private_items,\n-    clippy::single_match\n-)]\n-\n-fn id<T>(x: T) -> T {\n-    x\n+#![warn(clippy::shadow_same, clippy::shadow_reuse, clippy::shadow_unrelated)]\n+\n+fn shadow_same() {\n+    let x = 1;\n+    let x = x;\n+    let mut x = &x;\n+    let x = &mut x;\n+    let x = *x;\n }\n \n-#[must_use]\n-fn first(x: (isize, isize)) -> isize {\n-    x.0\n+fn shadow_reuse() -> Option<()> {\n+    let x = ([[0]], ());\n+    let x = x.0;\n+    let x = x[0];\n+    let [x] = x;\n+    let x = Some(x);\n+    let x = foo(x);\n+    let x = || x;\n+    let x = Some(1).map(|_| x)?;\n+    None\n }\n \n-fn main() {\n-    let mut x = 1;\n-    let x = &mut x;\n-    let x = { x };\n-    let x = (&*x);\n-    let x = { *x + 1 };\n-    let x = id(x);\n-    let x = (1, x);\n-    let x = first(x);\n-    let y = 1;\n-    let x = y;\n-\n-    let x;\n-    x = 42;\n-\n-    let o = Some(1_u8);\n-\n-    if let Some(p) = o {\n-        assert_eq!(1, p);\n+fn shadow_unrelated() {\n+    let x = 1;\n+    let x = 2;\n+}\n+\n+fn syntax() {\n+    fn f(x: u32) {\n+        let x = 1;\n+    }\n+    let x = 1;\n+    match Some(1) {\n+        Some(1) => {},\n+        Some(x) => {\n+            let x = 1;\n+        },\n+        _ => {},\n     }\n-    match o {\n-        Some(p) => p, // no error, because the p above is in its own scope\n-        None => 0,\n+    if let Some(x) = Some(1) {}\n+    while let Some(x) = Some(1) {}\n+    let _ = |[x]: [u32; 1]| {\n+        let x = 1;\n     };\n+}\n \n-    match (x, o) {\n-        (1, Some(a)) | (a, Some(1)) => (), // no error though `a` appears twice\n-        _ => (),\n+fn negative() {\n+    match Some(1) {\n+        Some(x) if x == 1 => {},\n+        Some(x) => {},\n+        None => {},\n     }\n+    match [None, Some(1)] {\n+        [Some(x), None] | [None, Some(x)] => {},\n+        _ => {},\n+    }\n+    if let Some(x) = Some(1) {\n+        let y = 1;\n+    } else {\n+        let x = 1;\n+        let y = 1;\n+    }\n+    let x = 1;\n+    #[allow(clippy::shadow_unrelated)]\n+    let x = 1;\n+}\n+\n+fn foo<T>(_: T) {}\n+\n+fn question_mark() -> Option<()> {\n+    let val = 1;\n+    // `?` expands with a `val` binding\n+    None?;\n+    None\n }\n+\n+fn main() {}"}, {"sha": "8b60e072c9342c9c763dc6b8de1740cef3f99dac", "filename": "tests/ui/shadow.stderr", "status": "modified", "additions": 165, "deletions": 70, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,138 +1,233 @@\n-error: `x` is shadowed by itself in `&mut x`\n-  --> $DIR/shadow.rs:27:5\n+error: `x` is shadowed by itself in `x`\n+  --> $DIR/shadow.rs:5:9\n    |\n-LL |     let x = &mut x;\n-   |     ^^^^^^^^^^^^^^^\n+LL |     let x = x;\n+   |         ^\n    |\n    = note: `-D clippy::shadow-same` implied by `-D warnings`\n note: previous binding is here\n-  --> $DIR/shadow.rs:26:13\n+  --> $DIR/shadow.rs:4:9\n    |\n-LL |     let mut x = 1;\n-   |             ^\n+LL |     let x = 1;\n+   |         ^\n \n-error: `x` is shadowed by itself in `{ x }`\n-  --> $DIR/shadow.rs:28:5\n+error: `mut x` is shadowed by itself in `&x`\n+  --> $DIR/shadow.rs:6:13\n    |\n-LL |     let x = { x };\n-   |     ^^^^^^^^^^^^^^\n+LL |     let mut x = &x;\n+   |             ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:27:9\n+  --> $DIR/shadow.rs:5:9\n+   |\n+LL |     let x = x;\n+   |         ^\n+\n+error: `x` is shadowed by itself in `&mut x`\n+  --> $DIR/shadow.rs:7:9\n    |\n LL |     let x = &mut x;\n    |         ^\n+   |\n+note: previous binding is here\n+  --> $DIR/shadow.rs:6:9\n+   |\n+LL |     let mut x = &x;\n+   |         ^^^^^\n \n-error: `x` is shadowed by itself in `(&*x)`\n-  --> $DIR/shadow.rs:29:5\n+error: `x` is shadowed by itself in `*x`\n+  --> $DIR/shadow.rs:8:9\n    |\n-LL |     let x = (&*x);\n-   |     ^^^^^^^^^^^^^^\n+LL |     let x = *x;\n+   |         ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:28:9\n+  --> $DIR/shadow.rs:7:9\n    |\n-LL |     let x = { x };\n+LL |     let x = &mut x;\n    |         ^\n \n-error: `x` is shadowed by `{ *x + 1 }` which reuses the original value\n-  --> $DIR/shadow.rs:30:9\n+error: `x` is shadowed by `x.0` which reuses the original value\n+  --> $DIR/shadow.rs:13:9\n    |\n-LL |     let x = { *x + 1 };\n+LL |     let x = x.0;\n    |         ^\n    |\n    = note: `-D clippy::shadow-reuse` implied by `-D warnings`\n-note: initialization happens here\n-  --> $DIR/shadow.rs:30:13\n-   |\n-LL |     let x = { *x + 1 };\n-   |             ^^^^^^^^^^\n note: previous binding is here\n-  --> $DIR/shadow.rs:29:9\n+  --> $DIR/shadow.rs:12:9\n    |\n-LL |     let x = (&*x);\n+LL |     let x = ([[0]], ());\n    |         ^\n \n-error: `x` is shadowed by `id(x)` which reuses the original value\n-  --> $DIR/shadow.rs:31:9\n+error: `x` is shadowed by `x[0]` which reuses the original value\n+  --> $DIR/shadow.rs:14:9\n    |\n-LL |     let x = id(x);\n+LL |     let x = x[0];\n    |         ^\n    |\n-note: initialization happens here\n-  --> $DIR/shadow.rs:31:13\n+note: previous binding is here\n+  --> $DIR/shadow.rs:13:9\n+   |\n+LL |     let x = x.0;\n+   |         ^\n+\n+error: `x` is shadowed by `x` which reuses the original value\n+  --> $DIR/shadow.rs:15:10\n+   |\n+LL |     let [x] = x;\n+   |          ^\n    |\n-LL |     let x = id(x);\n-   |             ^^^^^\n note: previous binding is here\n-  --> $DIR/shadow.rs:30:9\n+  --> $DIR/shadow.rs:14:9\n    |\n-LL |     let x = { *x + 1 };\n+LL |     let x = x[0];\n    |         ^\n \n-error: `x` is shadowed by `(1, x)` which reuses the original value\n-  --> $DIR/shadow.rs:32:9\n+error: `x` is shadowed by `Some(x)` which reuses the original value\n+  --> $DIR/shadow.rs:16:9\n    |\n-LL |     let x = (1, x);\n+LL |     let x = Some(x);\n    |         ^\n    |\n-note: initialization happens here\n-  --> $DIR/shadow.rs:32:13\n+note: previous binding is here\n+  --> $DIR/shadow.rs:15:10\n+   |\n+LL |     let [x] = x;\n+   |          ^\n+\n+error: `x` is shadowed by `foo(x)` which reuses the original value\n+  --> $DIR/shadow.rs:17:9\n+   |\n+LL |     let x = foo(x);\n+   |         ^\n    |\n-LL |     let x = (1, x);\n-   |             ^^^^^^\n note: previous binding is here\n-  --> $DIR/shadow.rs:31:9\n+  --> $DIR/shadow.rs:16:9\n    |\n-LL |     let x = id(x);\n+LL |     let x = Some(x);\n    |         ^\n \n-error: `x` is shadowed by `first(x)` which reuses the original value\n-  --> $DIR/shadow.rs:33:9\n+error: `x` is shadowed by `|| x` which reuses the original value\n+  --> $DIR/shadow.rs:18:9\n    |\n-LL |     let x = first(x);\n+LL |     let x = || x;\n    |         ^\n    |\n-note: initialization happens here\n-  --> $DIR/shadow.rs:33:13\n+note: previous binding is here\n+  --> $DIR/shadow.rs:17:9\n+   |\n+LL |     let x = foo(x);\n+   |         ^\n+\n+error: `x` is shadowed by `Some(1).map(|_| x)?` which reuses the original value\n+  --> $DIR/shadow.rs:19:9\n+   |\n+LL |     let x = Some(1).map(|_| x)?;\n+   |         ^\n    |\n-LL |     let x = first(x);\n-   |             ^^^^^^^^\n note: previous binding is here\n-  --> $DIR/shadow.rs:32:9\n+  --> $DIR/shadow.rs:18:9\n    |\n-LL |     let x = (1, x);\n+LL |     let x = || x;\n    |         ^\n \n-error: `x` is being shadowed\n-  --> $DIR/shadow.rs:35:9\n+error: `x` shadows a previous, unrelated binding\n+  --> $DIR/shadow.rs:25:9\n    |\n-LL |     let x = y;\n+LL |     let x = 2;\n    |         ^\n    |\n    = note: `-D clippy::shadow-unrelated` implied by `-D warnings`\n-note: initialization happens here\n-  --> $DIR/shadow.rs:35:13\n+note: previous binding is here\n+  --> $DIR/shadow.rs:24:9\n    |\n-LL |     let x = y;\n+LL |     let x = 1;\n+   |         ^\n+\n+error: `x` shadows a previous, unrelated binding\n+  --> $DIR/shadow.rs:30:13\n+   |\n+LL |         let x = 1;\n    |             ^\n+   |\n+note: previous binding is here\n+  --> $DIR/shadow.rs:29:10\n+   |\n+LL |     fn f(x: u32) {\n+   |          ^\n+\n+error: `x` shadows a previous, unrelated binding\n+  --> $DIR/shadow.rs:35:14\n+   |\n+LL |         Some(x) => {\n+   |              ^\n+   |\n+note: previous binding is here\n+  --> $DIR/shadow.rs:32:9\n+   |\n+LL |     let x = 1;\n+   |         ^\n+\n+error: `x` shadows a previous, unrelated binding\n+  --> $DIR/shadow.rs:36:17\n+   |\n+LL |             let x = 1;\n+   |                 ^\n+   |\n+note: previous binding is here\n+  --> $DIR/shadow.rs:35:14\n+   |\n+LL |         Some(x) => {\n+   |              ^\n+\n+error: `x` shadows a previous, unrelated binding\n+  --> $DIR/shadow.rs:40:17\n+   |\n+LL |     if let Some(x) = Some(1) {}\n+   |                 ^\n+   |\n+note: previous binding is here\n+  --> $DIR/shadow.rs:32:9\n+   |\n+LL |     let x = 1;\n+   |         ^\n+\n+error: `x` shadows a previous, unrelated binding\n+  --> $DIR/shadow.rs:41:20\n+   |\n+LL |     while let Some(x) = Some(1) {}\n+   |                    ^\n+   |\n note: previous binding is here\n-  --> $DIR/shadow.rs:33:9\n+  --> $DIR/shadow.rs:32:9\n    |\n-LL |     let x = first(x);\n+LL |     let x = 1;\n    |         ^\n \n-error: `x` shadows a previous declaration\n-  --> $DIR/shadow.rs:37:5\n+error: `x` shadows a previous, unrelated binding\n+  --> $DIR/shadow.rs:42:15\n    |\n-LL |     let x;\n-   |     ^^^^^^\n+LL |     let _ = |[x]: [u32; 1]| {\n+   |               ^\n    |\n note: previous binding is here\n-  --> $DIR/shadow.rs:35:9\n+  --> $DIR/shadow.rs:32:9\n    |\n-LL |     let x = y;\n+LL |     let x = 1;\n    |         ^\n \n-error: aborting due to 9 previous errors\n+error: `x` shadows a previous, unrelated binding\n+  --> $DIR/shadow.rs:43:13\n+   |\n+LL |         let x = 1;\n+   |             ^\n+   |\n+note: previous binding is here\n+  --> $DIR/shadow.rs:42:15\n+   |\n+LL |     let _ = |[x]: [u32; 1]| {\n+   |               ^\n+\n+error: aborting due to 19 previous errors\n "}, {"sha": "3ffcd1a903174d0caee3c1b6c20ea2ec2e6215d0", "filename": "tests/ui/suspicious_map.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fsuspicious_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fsuspicious_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_map.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -5,15 +5,15 @@ LL |     let _ = (0..3).map(|x| x + 2).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::suspicious-map` implied by `-D warnings`\n-   = help: make sure you did not confuse `map` with `filter` or `for_each`\n+   = help: make sure you did not confuse `map` with `filter`, `for_each` or `inspect`\n \n error: this call to `map()` won't have an effect on the call to `count()`\n   --> $DIR/suspicious_map.rs:7:13\n    |\n LL |     let _ = (0..3).map(f).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: make sure you did not confuse `map` with `filter` or `for_each`\n+   = help: make sure you did not confuse `map` with `filter`, `for_each` or `inspect`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1e74ad2de655aa53c624c6c98bcf1be915f269dc", "filename": "tests/ui/while_let_on_iterator.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.fixed?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::while_let_on_iterator)]\n-#![allow(clippy::never_loop, unreachable_code, unused_mut, dead_code)]\n+#![allow(\n+    clippy::never_loop,\n+    unreachable_code,\n+    unused_mut,\n+    dead_code,\n+    clippy::equatable_if_let\n+)]\n \n fn base() {\n     let mut iter = 1..20;"}, {"sha": "69cb636cee8260bb31ce151a97f2ea9a11118955", "filename": "tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::while_let_on_iterator)]\n-#![allow(clippy::never_loop, unreachable_code, unused_mut, dead_code)]\n+#![allow(\n+    clippy::never_loop,\n+    unreachable_code,\n+    unused_mut,\n+    dead_code,\n+    clippy::equatable_if_let\n+)]\n \n fn base() {\n     let mut iter = 1..20;"}, {"sha": "1a11ba26eef0ffdc7c5c4d9bf75432ca9ad7aff4", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -1,129 +1,129 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:8:5\n+  --> $DIR/while_let_on_iterator.rs:14:5\n    |\n LL |     while let Option::Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n    |\n    = note: `-D clippy::while-let-on-iterator` implied by `-D warnings`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:13:5\n+  --> $DIR/while_let_on_iterator.rs:19:5\n    |\n LL |     while let Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:18:5\n+  --> $DIR/while_let_on_iterator.rs:24:5\n    |\n LL |     while let Some(_) = iter.next() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:94:9\n+  --> $DIR/while_let_on_iterator.rs:100:9\n    |\n LL |         while let Some([..]) = it.next() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [..] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:101:9\n+  --> $DIR/while_let_on_iterator.rs:107:9\n    |\n LL |         while let Some([_x]) = it.next() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [_x] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:114:9\n+  --> $DIR/while_let_on_iterator.rs:120:9\n    |\n LL |         while let Some(x @ [_]) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x @ [_] in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:134:9\n+  --> $DIR/while_let_on_iterator.rs:140:9\n    |\n LL |         while let Some(_) = y.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in y`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:191:9\n+  --> $DIR/while_let_on_iterator.rs:197:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:202:5\n+  --> $DIR/while_let_on_iterator.rs:208:5\n    |\n LL |     while let Some(n) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for n in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:204:9\n+  --> $DIR/while_let_on_iterator.rs:210:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:213:9\n+  --> $DIR/while_let_on_iterator.rs:219:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:222:9\n+  --> $DIR/while_let_on_iterator.rs:228:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:239:9\n+  --> $DIR/while_let_on_iterator.rs:245:9\n    |\n LL |         while let Some(m) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for m in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:254:13\n+  --> $DIR/while_let_on_iterator.rs:260:13\n    |\n LL |             while let Some(i) = self.0.next() {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for i in self.0.by_ref()`\n \n error: manual `!RangeInclusive::contains` implementation\n-  --> $DIR/while_let_on_iterator.rs:255:20\n+  --> $DIR/while_let_on_iterator.rs:261:20\n    |\n LL |                 if i < 3 || i > 7 {\n    |                    ^^^^^^^^^^^^^^ help: use: `!(3..=7).contains(&i)`\n    |\n    = note: `-D clippy::manual-range-contains` implied by `-D warnings`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:286:13\n+  --> $DIR/while_let_on_iterator.rs:292:13\n    |\n LL |             while let Some(i) = self.0.0.0.next() {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for i in self.0.0.0.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:315:5\n+  --> $DIR/while_let_on_iterator.rs:321:5\n    |\n LL |     while let Some(n) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for n in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:327:9\n+  --> $DIR/while_let_on_iterator.rs:333:9\n    |\n LL |         while let Some(x) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:341:5\n+  --> $DIR/while_let_on_iterator.rs:347:5\n    |\n LL |     while let Some(x) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:352:5\n+  --> $DIR/while_let_on_iterator.rs:358:5\n    |\n LL |     while let Some(x) = it.0.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in it.0.by_ref()`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:371:5\n+  --> $DIR/while_let_on_iterator.rs:377:5\n    |\n LL |     while let Some(..) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in it`"}, {"sha": "5dd2ba3d5f53b92cdcbd2a967d264e64a5428fa0", "filename": "util/etc/pre-commit.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/util%2Fetc%2Fpre-commit.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5cf4984872e1ac047b4e2df52fe0f6faa82716c3/util%2Fetc%2Fpre-commit.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fetc%2Fpre-commit.sh?ref=5cf4984872e1ac047b4e2df52fe0f6faa82716c3", "patch": "@@ -6,6 +6,7 @@ set -e\n # Update lints\n cargo dev update_lints\n git add clippy_lints/src/lib.rs\n+git add clippy_lints/src/lib.*.rs\n \n # Formatting:\n #     Git will not automatically add the formatted code to the staged changes once"}]}