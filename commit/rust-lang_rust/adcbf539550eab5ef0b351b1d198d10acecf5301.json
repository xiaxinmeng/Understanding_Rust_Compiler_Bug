{"sha": "adcbf539550eab5ef0b351b1d198d10acecf5301", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkY2JmNTM5NTUwZWFiNWVmMGIzNTFiMWQxOThkMTBhY2VjZjUzMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-02T03:11:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-02T03:11:47Z"}, "message": "auto merge of #13886 : japaric/rust/fix-an-typos, r=alexcrichton\n\nFound the first one in the rust reference docs. I was going to submit a PR with one fix, but figured I could look for more... This is the result.", "tree": {"sha": "c314b008c911ee4c0db6e9625422cd8e0d68ad34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c314b008c911ee4c0db6e9625422cd8e0d68ad34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adcbf539550eab5ef0b351b1d198d10acecf5301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adcbf539550eab5ef0b351b1d198d10acecf5301", "html_url": "https://github.com/rust-lang/rust/commit/adcbf539550eab5ef0b351b1d198d10acecf5301", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adcbf539550eab5ef0b351b1d198d10acecf5301/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f836d5a53e20fde65aa3469fa1826228e7c273a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f836d5a53e20fde65aa3469fa1826228e7c273a", "html_url": "https://github.com/rust-lang/rust/commit/9f836d5a53e20fde65aa3469fa1826228e7c273a"}, {"sha": "e4bf643b9975c4c18da87046a4f99e5a5c058a30", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4bf643b9975c4c18da87046a4f99e5a5c058a30", "html_url": "https://github.com/rust-lang/rust/commit/e4bf643b9975c4c18da87046a4f99e5a5c058a30"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "ee437b658e1a3071f25bf333e97715cd373c05fa", "filename": "RELEASES.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/RELEASES.txt", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/RELEASES.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.txt?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -63,7 +63,7 @@ Version 0.10 (April 2014)\n       documentation index page.\n     * std: `std::condition` has been removed. All I/O errors are now propagated\n       through the `Result` type. In order to assist with error handling, a\n-      `try!` macro for unwrapping errors with an early return and an lint for\n+      `try!` macro for unwrapping errors with an early return and a lint for\n       unused results has been added. See #12039 for more information.\n     * std: The `vec` module has been renamed to `slice`.\n     * std: A new vector type, `Vec<T>`, has been added in preparation for DST."}, {"sha": "c734eccddc04e1a450267f69c2adda5efdf9356b", "filename": "src/doc/guide-lifetimes.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Fdoc%2Fguide-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Fdoc%2Fguide-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-lifetimes.md?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -263,7 +263,7 @@ process is called *rooting*.\n The previous example demonstrated *rooting*, the process by which the\n compiler ensures that managed boxes remain live for the duration of a\n borrow. Unfortunately, rooting does not work for borrows of owned\n-boxes, because it is not possible to have two references to a owned\n+boxes, because it is not possible to have two references to an owned\n box.\n \n For owned boxes, therefore, the compiler will only allow a borrow *if\n@@ -462,7 +462,7 @@ of a `f64` as if it were a struct with two fields would be a memory\n safety violation.\n \n So, in fact, for every `ref` binding, the compiler will impose the\n-same rules as the ones we saw for borrowing the interior of a owned\n+same rules as the ones we saw for borrowing the interior of an owned\n box: it must be able to guarantee that the `enum` will not be\n overwritten for the duration of the borrow.  In fact, the compiler\n would accept the example we gave earlier. The example is safe because"}, {"sha": "300c5bae96482b7e2442552459c129f52a841531", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -56,7 +56,7 @@ standard library types, e.g. `Cell` and `RefCell`, that provide inner\n mutability by replacing compile time guarantees with dynamic checks at\n runtime.\n \n-An `&mut` reference has a stronger requirement: when a object has an\n+An `&mut` reference has a stronger requirement: when an object has an\n `&mut T` pointing into it, then that `&mut` reference must be the only\n such usable path to that object in the whole program. That is, an\n `&mut` cannot alias with any other references."}, {"sha": "12d2911f5291d2eee3bc6f92dde4bb2931ec4a00", "filename": "src/doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -161,7 +161,7 @@ Comments in Rust code follow the general C++ style of line and block-comment for\n with no nesting of block-comment delimiters.\n \n Line comments beginning with exactly _three_ slashes (`///`), and block\n-comments beginning with a exactly one repeated asterisk in the block-open\n+comments beginning with exactly one repeated asterisk in the block-open\n sequence (`/**`), are interpreted as a special syntax for `doc`\n [attributes](#attributes).  That is, they are equivalent to writing\n `#[doc=\"...\"]` around the body of the comment (this includes the comment\n@@ -365,7 +365,7 @@ of integer literal suffix:\n     give the literal the corresponding machine type.\n \n The type of an _unsuffixed_ integer literal is determined by type inference.\n-If a integer type can be _uniquely_ determined from the surrounding program\n+If an integer type can be _uniquely_ determined from the surrounding program\n context, the unsuffixed integer literal has that type.  If the program context\n underconstrains the type, the unsuffixed integer literal's type is `int`; if\n the program context overconstrains the type, it is considered a static type\n@@ -2184,7 +2184,7 @@ Supported traits for `deriving` are:\n * `Hash`, to iterate over the bytes in a data type.\n * `Rand`, to create a random instance of a data type.\n * `Default`, to create an empty instance of a data type.\n-* `Zero`, to create an zero instance of a numeric data type.\n+* `Zero`, to create a zero instance of a numeric data type.\n * `FromPrimitive`, to create an instance from a numeric primitive.\n * `Show`, to format a value using the `{}` formatter.\n "}, {"sha": "abb713f5e726aeb68a8d28d67a0f3562de4bf9bf", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -2980,7 +2980,7 @@ fn main() {\n }\n ~~~\n \n-In general, `use` creates an local alias:\n+In general, `use` creates a local alias:\n An alternate path and a possibly different name to access the same item,\n without touching the original, and with both being interchangeable.\n "}, {"sha": "8986b004898081678150b972ffbf2bd727b96e95", "filename": "src/etc/zsh/_rust", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Fetc%2Fzsh%2F_rust", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Fetc%2Fzsh%2F_rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fzsh%2F_rust?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -68,7 +68,7 @@ _rustc_opts_lint=(\n     'unsafe-block[usage of an `unsafe` block]'\n     'unstable[detects use of #\\[unstable\\] items (incl. items with no stability attribute)]'\n     'unused-imports[imports that are never used]'\n-    'unused-must-use[unused result of an type flagged as #\\[must_use\\]]'\n+    'unused-must-use[unused result of a type flagged as #\\[must_use\\]]'\n     \"unused-mut[detect mut variables which don't need to be mutable]\"\n     'unused-result[unused result of an expression in a statement]'\n     'unused-unsafe[unnecessary use of an `unsafe` block]'"}, {"sha": "8d021a9a33ebba779c5a4881eaab36f0b614189c", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -1392,7 +1392,7 @@ fn add_upstream_rust_crates(args: &mut Vec<~str>, sess: &Session,\n             // If you opted in to dynamic linking and we decided to emit a\n             // static output, you should probably be notified of such an event!\n             sess.warn(\"dynamic linking was preferred, but dependencies \\\n-                       could not all be found in an dylib format.\");\n+                       could not all be found in a dylib format.\");\n             sess.warn(\"linking statically instead, using rlibs\");\n             add_static_crates(args, sess, tmpdir, deps)\n         }"}, {"sha": "7b62f9f030a76a51c9581b77676731b426e2e1f2", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -3643,7 +3643,7 @@ pub fn check_enum_variants(ccx: &CrateCtxt,\n                     let declty = ty::mk_int_var(ccx.tcx, fcx.infcx().next_int_var_id());\n                     check_const_with_ty(&fcx, e.span, e, declty);\n                     // check_expr (from check_const pass) doesn't guarantee\n-                    // that the expression is in an form that eval_const_expr can\n+                    // that the expression is in a form that eval_const_expr can\n                     // handle, so we may still get an internal compiler error\n \n                     match const_eval::eval_const_expr_partial(ccx.tcx, e) {"}, {"sha": "0250cc0a5edd840104eb9a5ee767062ef341943a", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -419,7 +419,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n                 }\n             }\n             ty::AutoObject(ty::RegionTraitStore(trait_region, _), _, _, _) => {\n-                // Determine if we are casting `expr` to an trait\n+                // Determine if we are casting `expr` to a trait\n                 // instance.  If so, we have to be sure that the type of\n                 // the source obeys the trait's region bound.\n                 //\n@@ -524,7 +524,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n         }\n \n         ast::ExprCast(source, _) => {\n-            // Determine if we are casting `source` to an trait\n+            // Determine if we are casting `source` to a trait\n             // instance.  If so, we have to be sure that the type of\n             // the source obeys the trait's region bound.\n             //"}, {"sha": "25ee03a44c2c3dbeb0d04aac48d6fd0d2bbc3481", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -813,13 +813,13 @@ impl<E: ::Encoder<S>, S> Encodable<E, S> for Json {\n }\n \n impl Json {\n-    /// Encodes a json value into a io::writer.  Uses a single line.\n+    /// Encodes a json value into an io::writer.  Uses a single line.\n     pub fn to_writer(&self, wr: &mut io::Writer) -> EncodeResult {\n         let mut encoder = Encoder::new(wr);\n         self.encode(&mut encoder)\n     }\n \n-    /// Encodes a json value into a io::writer.\n+    /// Encodes a json value into an io::writer.\n     /// Pretty-prints in a more readable format.\n     pub fn to_pretty_writer(&self, wr: &mut io::Writer) -> EncodeResult {\n         let mut encoder = PrettyEncoder::new(wr);"}, {"sha": "d948738ac564a413ae14d1e392ef1821e8589b35", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -1037,7 +1037,7 @@ pub trait Writer {\n         self.write([n])\n     }\n \n-    /// Write a i8 (1 byte).\n+    /// Write an i8 (1 byte).\n     fn write_i8(&mut self, n: i8) -> IoResult<()> {\n         self.write([n as u8])\n     }"}, {"sha": "ca7680413a02c1e720222bbed7ef3d9b260e5a39", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -131,7 +131,7 @@ pub unsafe fn position<T>(buf: *T, f: |&T| -> bool) -> uint {\n     }\n }\n \n-/// Create an null pointer.\n+/// Create a null pointer.\n ///\n /// # Example\n ///"}, {"sha": "e0a0a7357fcdcd5f2e5b0cff82b6ab7b345bd37c", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcbf539550eab5ef0b351b1d198d10acecf5301/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=adcbf539550eab5ef0b351b1d198d10acecf5301", "patch": "@@ -11,7 +11,7 @@\n #![feature(managed_boxes)]\n \n // Exercises a bug in the shape code that was exposed\n-// on x86_64: when there is a enum embedded in an\n+// on x86_64: when there is an enum embedded in an\n // interior record which is then itself interior to\n // something else, shape calculations were off.\n "}]}