{"sha": "ffd73df7559be73398679d7f09447379dd0c2098", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZDczZGY3NTU5YmU3MzM5ODY3OWQ3ZjA5NDQ3Mzc5ZGQwYzIwOTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-21T10:22:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-01-28T09:48:33Z"}, "message": "avoid mem::uninitialized in BTreeMap", "tree": {"sha": "f7b259022a2343e4d15c0b8f154ae787ec28e023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7b259022a2343e4d15c0b8f154ae787ec28e023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffd73df7559be73398679d7f09447379dd0c2098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd73df7559be73398679d7f09447379dd0c2098", "html_url": "https://github.com/rust-lang/rust/commit/ffd73df7559be73398679d7f09447379dd0c2098", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffd73df7559be73398679d7f09447379dd0c2098/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a88414e007d9740c1c3d483ff778f7f2d3f32749", "url": "https://api.github.com/repos/rust-lang/rust/commits/a88414e007d9740c1c3d483ff778f7f2d3f32749", "html_url": "https://github.com/rust-lang/rust/commit/a88414e007d9740c1c3d483ff778f7f2d3f32749"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "cc46bae01cb99280905c2e39f94b6bc6158b42d4", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ffd73df7559be73398679d7f09447379dd0c2098/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd73df7559be73398679d7f09447379dd0c2098/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=ffd73df7559be73398679d7f09447379dd0c2098", "patch": "@@ -145,7 +145,7 @@ struct InternalNode<K, V> {\n \n     /// The pointers to the children of this node. `len + 1` of these are considered\n     /// initialized and valid.\n-    edges: [BoxedNode<K, V>; 2 * B],\n+    edges: [MaybeUninit<BoxedNode<K, V>>; 2 * B],\n }\n \n impl<K, V> InternalNode<K, V> {\n@@ -159,7 +159,10 @@ impl<K, V> InternalNode<K, V> {\n     unsafe fn new() -> Self {\n         InternalNode {\n             data: LeafNode::new(),\n-            edges: mem::uninitialized()\n+            // Creating a `[MaybeUninit; N]` array by first creating a\n+            // `MaybeUninit<[MaybeUninit; N]>`; the `into_inner` is safe because the inner\n+            // array does not require initialization.\n+            edges: MaybeUninit::uninitialized().into_inner(),\n         }\n     }\n }\n@@ -261,7 +264,7 @@ impl<K, V> Root<K, V> {\n             -> NodeRef<marker::Mut, K, V, marker::Internal> {\n         debug_assert!(!self.is_shared_root());\n         let mut new_node = Box::new(unsafe { InternalNode::new() });\n-        new_node.edges[0] = unsafe { BoxedNode::from_ptr(self.node.as_ptr()) };\n+        new_node.edges[0].set(unsafe { BoxedNode::from_ptr(self.node.as_ptr()) });\n \n         self.node = BoxedNode::from_internal(new_node);\n         self.height += 1;\n@@ -718,7 +721,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n         unsafe {\n             ptr::write(self.keys_mut().get_unchecked_mut(idx), key);\n             ptr::write(self.vals_mut().get_unchecked_mut(idx), val);\n-            ptr::write(self.as_internal_mut().edges.get_unchecked_mut(idx + 1), edge.node);\n+            self.as_internal_mut().edges.get_unchecked_mut(idx + 1).set(edge.node);\n \n             (*self.as_leaf_mut()).len += 1;\n \n@@ -749,7 +752,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n             slice_insert(self.vals_mut(), 0, val);\n             slice_insert(\n                 slice::from_raw_parts_mut(\n-                    self.as_internal_mut().edges.as_mut_ptr(),\n+                    MaybeUninit::first_mut_ptr(&mut self.as_internal_mut().edges),\n                     self.len()+1\n                 ),\n                 0,\n@@ -778,7 +781,9 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n             let edge = match self.reborrow_mut().force() {\n                 ForceResult::Leaf(_) => None,\n                 ForceResult::Internal(internal) => {\n-                    let edge = ptr::read(internal.as_internal().edges.get_unchecked(idx + 1));\n+                    let edge = ptr::read(\n+                        internal.as_internal().edges.get_unchecked(idx + 1).as_ptr()\n+                    );\n                     let mut new_root = Root { node: edge, height: internal.height - 1 };\n                     (*new_root.as_mut().as_leaf_mut()).parent = ptr::null();\n                     Some(new_root)\n@@ -806,7 +811,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n                 ForceResult::Internal(mut internal) => {\n                     let edge = slice_remove(\n                         slice::from_raw_parts_mut(\n-                            internal.as_internal_mut().edges.as_mut_ptr(),\n+                            MaybeUninit::first_mut_ptr(&mut internal.as_internal_mut().edges),\n                             old_len+1\n                         ),\n                         0\n@@ -1085,7 +1090,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n \n             slice_insert(\n                 slice::from_raw_parts_mut(\n-                    self.node.as_internal_mut().edges.as_mut_ptr(),\n+                    MaybeUninit::first_mut_ptr(&mut self.node.as_internal_mut().edges),\n                     self.node.len()\n                 ),\n                 self.idx + 1,\n@@ -1140,7 +1145,9 @@ impl<BorrowType, K, V>\n     pub fn descend(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n         NodeRef {\n             height: self.node.height - 1,\n-            node: unsafe { self.node.as_internal().edges.get_unchecked(self.idx).as_ptr() },\n+            node: unsafe {\n+                self.node.as_internal().edges.get_unchecked(self.idx).get_ref().as_ptr()\n+            },\n             root: self.node.root,\n             _marker: PhantomData\n         }"}, {"sha": "cf9d89ee05adf940622becc266b53870eeb562ac", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffd73df7559be73398679d7f09447379dd0c2098/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd73df7559be73398679d7f09447379dd0c2098/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=ffd73df7559be73398679d7f09447379dd0c2098", "patch": "@@ -63,6 +63,7 @@\n #![no_std]\n #![needs_allocator]\n \n+#![warn(deprecated_in_future)]\n #![deny(intra_doc_link_resolution_failure)]\n #![deny(missing_debug_implementations)]\n "}, {"sha": "4d7da3692fd84a2c32f34f2bf89cd21d0e43bd51", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffd73df7559be73398679d7f09447379dd0c2098/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd73df7559be73398679d7f09447379dd0c2098/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=ffd73df7559be73398679d7f09447379dd0c2098", "patch": "@@ -58,8 +58,8 @@\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n-\n #![no_core]\n+\n #![warn(deprecated_in_future)]\n #![deny(missing_docs)]\n #![deny(intra_doc_link_resolution_failure)]"}]}