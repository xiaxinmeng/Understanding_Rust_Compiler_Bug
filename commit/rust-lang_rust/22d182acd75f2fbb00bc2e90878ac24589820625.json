{"sha": "22d182acd75f2fbb00bc2e90878ac24589820625", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZDE4MmFjZDc1ZjJmYmIwMGJjMmU5MDg3OGFjMjQ1ODk4MjA2MjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T00:01:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T05:12:35Z"}, "message": "rustdoc: Remove attribute parsing from extract module", "tree": {"sha": "034bf7232c1a4043b8aa73d53aba41ecce66e04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/034bf7232c1a4043b8aa73d53aba41ecce66e04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d182acd75f2fbb00bc2e90878ac24589820625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d182acd75f2fbb00bc2e90878ac24589820625", "html_url": "https://github.com/rust-lang/rust/commit/22d182acd75f2fbb00bc2e90878ac24589820625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d182acd75f2fbb00bc2e90878ac24589820625/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04294e437bdd000d8a4bd4c9d47dfa4a2e6da624", "url": "https://api.github.com/repos/rust-lang/rust/commits/04294e437bdd000d8a4bd4c9d47dfa4a2e6da624", "html_url": "https://github.com/rust-lang/rust/commit/04294e437bdd000d8a4bd4c9d47dfa4a2e6da624"}], "stats": {"total": 60, "additions": 28, "deletions": 32}, "files": [{"sha": "8eab5030ba4eeebac4653a9ec3b71f3e731557a6", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/22d182acd75f2fbb00bc2e90878ac24589820625/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d182acd75f2fbb00bc2e90878ac24589820625/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=22d182acd75f2fbb00bc2e90878ac24589820625", "patch": "@@ -15,7 +15,7 @@ fn parse_fn(\n                 _fndoc = some(~{\n                     id: id,\n                     name: name,\n-                    brief: value,\n+                    brief: some(value),\n                     desc: none,\n                     return: none,\n                     args: []\n@@ -34,7 +34,7 @@ fn parse_fn(\n           ~{\n               id: id,\n               name: name,\n-              brief: \"_undocumented_\",\n+              brief: none,\n               desc: none,\n               return: none,\n               args: []\n@@ -102,15 +102,10 @@ fn parse_fn_(\n         }\n     }\n \n-    let _brief = alt brief {\n-        some(_b) { _b }\n-        none. { \"_undocumented_\" }\n-    };\n-\n     ~{\n         id: id,\n         name: name,\n-        brief: _brief,\n+        brief: brief,\n         desc: desc,\n         return: some({\n             desc: return,\n@@ -144,7 +139,7 @@ mod tests {\n         let source = \"\";\n         let attrs = parse_attributes(source);\n         let doc = parse_fn(\"f\", 0, attrs);\n-        assert doc.brief == \"_undocumented_\";\n+        assert doc.brief == none;\n         assert doc.desc == none;\n         assert doc.return == none;\n         assert vec::len(doc.args) == 0u;\n@@ -155,15 +150,15 @@ mod tests {\n         let source = \"#[doc = \\\"basic\\\"]\";\n         let attrs = parse_attributes(source);\n         let doc = parse_fn(\"f\", 0, attrs);\n-        assert doc.brief == \"basic\";\n+        assert doc.brief == some(\"basic\");\n     }\n \n     #[test]\n     fn parse_fn_should_parse_the_brief_description() {\n         let source = \"#[doc(brief = \\\"short\\\")]\";\n         let attrs = parse_attributes(source);\n         let doc = parse_fn(\"f\", 0, attrs);\n-        assert doc.brief == \"short\";\n+        assert doc.brief == some(\"short\");\n     }\n \n     #[test]\n@@ -190,12 +185,4 @@ mod tests {\n         assert doc.args[0] == (\"a\", \"arg a\");\n         assert doc.args[1] == (\"b\", \"arg b\");\n     }\n-\n-    #[test]\n-    fn parse_fn_should_set_brief_desc_to_undocumented_if_not_exists() {\n-        let source = \"#[doc(desc = \\\"long desc\\\")]\";\n-        let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", 0, attrs);\n-        assert doc.brief == \"_undocumented_\";\n-    }\n }\n\\ No newline at end of file"}, {"sha": "8dd165cf959cb41dc5848c522877e1bead82442e", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d182acd75f2fbb00bc2e90878ac24589820625/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d182acd75f2fbb00bc2e90878ac24589820625/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=22d182acd75f2fbb00bc2e90878ac24589820625", "patch": "@@ -13,7 +13,7 @@ type moddoc = ~{\n type fndoc = ~{\n     id: ast_id,\n     name: str,\n-    brief: str,\n+    brief: option<str>,\n     desc: option<str>,\n     return: option<retdoc>,\n     args: [(str, str)]"}, {"sha": "024dd7809c58411279e8a777e45b2f62836a532f", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/22d182acd75f2fbb00bc2e90878ac24589820625/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d182acd75f2fbb00bc2e90878ac24589820625/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=22d182acd75f2fbb00bc2e90878ac24589820625", "patch": "@@ -17,21 +17,20 @@ fn top_moddoc_from_crate(\n     crate: @ast::crate,\n     default_name: str\n ) -> doc::moddoc {\n-    moddoc_from_mod(crate.node.module, default_name, crate.node.attrs)\n+    moddoc_from_mod(crate.node.module, default_name)\n }\n \n fn moddoc_from_mod(\n     module: ast::_mod,\n-    name: ast::ident,\n-    _attrs: [ast::attribute]\n+    name: ast::ident\n ) -> doc::moddoc {\n     ~{\n         name: name,\n         mods: doc::modlist(\n             vec::filter_map(module.items) {|item|\n                 alt item.node {\n                   ast::item_mod(m) {\n-                    some(moddoc_from_mod(m, item.ident, item.attrs))\n+                    some(moddoc_from_mod(m, item.ident))\n                   }\n                   _ {\n                     none\n@@ -41,9 +40,9 @@ fn moddoc_from_mod(\n         fns: doc::fnlist(\n             vec::filter_map(module.items) {|item|\n                 alt item.node {\n-                  ast::item_fn(decl, typarams, _) {\n+                  ast::item_fn(decl, _, _) {\n                     some(fndoc_from_fn(\n-                        decl, typarams, item.ident, item.id, item.attrs))\n+                        decl, item.ident, item.id))\n                   }\n                   _ {\n                     none\n@@ -55,12 +54,17 @@ fn moddoc_from_mod(\n \n fn fndoc_from_fn(\n     _decl: ast::fn_decl,\n-    _typarams: [ast::ty_param],\n     name: ast::ident,\n-    id: ast::node_id,\n-    attrs: [ast::attribute]\n+    id: ast::node_id\n ) -> doc::fndoc {\n-    attr_parser::parse_fn(name, id, attrs)\n+    ~{\n+        id: id,\n+        name: name,\n+        brief: none,\n+        desc: none,\n+        return: none,\n+        args: []\n+    }\n }\n \n #[cfg(test)]\n@@ -114,7 +118,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn extract_should_use_default_crate_name_if_no_link_name_exists() {\n+    fn extract_should_use_default_crate_name() {\n         let source = \"\";\n         let ast = parse::from_str(source);\n         let doc = extract(ast, \"burp\");"}, {"sha": "d83463e471ea2f8f3b11156e0d6b7c0b8d5f1ea1", "filename": "src/rustdoc/gen.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22d182acd75f2fbb00bc2e90878ac24589820625/src%2Frustdoc%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d182acd75f2fbb00bc2e90878ac24589820625/src%2Frustdoc%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fgen.rs?ref=22d182acd75f2fbb00bc2e90878ac24589820625", "patch": "@@ -55,7 +55,12 @@ fn write_fn(\n     doc: doc::fndoc\n ) {\n     ctxt.w.write_line(\"## Function `\" + doc.name + \"`\");\n-    ctxt.w.write_line(doc.brief);\n+    alt doc.brief {\n+      some(brief) {\n+        ctxt.w.write_line(brief);\n+      }\n+      none. { }\n+    }\n     alt doc.desc {\n         some(_d) {\n             ctxt.w.write_line(\"\");"}]}