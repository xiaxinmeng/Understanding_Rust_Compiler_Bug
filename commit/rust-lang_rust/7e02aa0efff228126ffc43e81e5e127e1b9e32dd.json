{"sha": "7e02aa0efff228126ffc43e81e5e127e1b9e32dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMDJhYTBlZmZmMjI4MTI2ZmZjNDNlODFlNWUxMjdlMWI5ZTMyZGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-18T21:35:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-19T10:16:24Z"}, "message": "migrate ra_fmt to new rowan", "tree": {"sha": "c4e5577212a20dae8703de50500523932413f289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4e5577212a20dae8703de50500523932413f289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e02aa0efff228126ffc43e81e5e127e1b9e32dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e02aa0efff228126ffc43e81e5e127e1b9e32dd", "html_url": "https://github.com/rust-lang/rust/commit/7e02aa0efff228126ffc43e81e5e127e1b9e32dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e02aa0efff228126ffc43e81e5e127e1b9e32dd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08fd402ef2ef1151a9b09cf11c5869b79f1959bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/08fd402ef2ef1151a9b09cf11c5869b79f1959bb", "html_url": "https://github.com/rust-lang/rust/commit/08fd402ef2ef1151a9b09cf11c5869b79f1959bb"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "d6e89572939084cac3f598600adfe4c72852a0ff", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e02aa0efff228126ffc43e81e5e127e1b9e32dd/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e02aa0efff228126ffc43e81e5e127e1b9e32dd/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=7e02aa0efff228126ffc43e81e5e127e1b9e32dd", "patch": "@@ -3,7 +3,7 @@\n use itertools::Itertools;\n use ra_syntax::{\n     ast::{self, AstNode, AstToken},\n-    SyntaxKind,\n+    SmolStr, SyntaxKind,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, T,\n };\n@@ -15,12 +15,12 @@ pub fn reindent(text: &str, indent: &str) -> String {\n }\n \n /// If the node is on the beginning of the line, calculate indent.\n-pub fn leading_indent(node: &SyntaxNode) -> Option<&str> {\n+pub fn leading_indent(node: &SyntaxNode) -> Option<SmolStr> {\n     for token in prev_tokens(node.first_token()?) {\n-        if let Some(ws) = ast::Whitespace::cast(token) {\n+        if let Some(ws) = ast::Whitespace::cast(token.clone()) {\n             let ws_text = ws.text();\n             if let Some(pos) = ws_text.rfind('\\n') {\n-                return Some(&ws_text[pos + 1..]);\n+                return Some(ws_text[pos + 1..].into());\n             }\n         }\n         if token.text().contains('\\n') {\n@@ -31,17 +31,17 @@ pub fn leading_indent(node: &SyntaxNode) -> Option<&str> {\n }\n \n fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n-    successors(token.prev_token(), |&token| token.prev_token())\n+    successors(token.prev_token(), |token| token.prev_token())\n }\n \n-pub fn extract_trivial_expression(block: &ast::Block) -> Option<&ast::Expr> {\n+pub fn extract_trivial_expression(block: &ast::Block) -> Option<ast::Expr> {\n     let expr = block.expr()?;\n     if expr.syntax().text().contains('\\n') {\n         return None;\n     }\n     let non_trivial_children = block.syntax().children().filter(|it| match it.kind() {\n         WHITESPACE | T!['{'] | T!['}'] => false,\n-        _ => it != &expr.syntax(),\n+        _ => it != expr.syntax(),\n     });\n     if non_trivial_children.count() > 0 {\n         return None;"}]}