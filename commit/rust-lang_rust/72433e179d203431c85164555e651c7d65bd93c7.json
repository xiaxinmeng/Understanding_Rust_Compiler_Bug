{"sha": "72433e179d203431c85164555e651c7d65bd93c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNDMzZTE3OWQyMDM0MzFjODUxNjQ1NTVlNjUxYzdkNjViZDkzYzc=", "commit": {"author": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2018-05-17T06:09:58Z"}, "committer": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2018-05-31T20:27:08Z"}, "message": "Add implementations for Any + Send + Sync\n\nImplement `is`, `downcast_ref`, `downcast_mut` and `Debug` for\n`Any + Send + Sync`.", "tree": {"sha": "7a1e173d06a90fe5300997d3b20da851e8ffba49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a1e173d06a90fe5300997d3b20da851e8ffba49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72433e179d203431c85164555e651c7d65bd93c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72433e179d203431c85164555e651c7d65bd93c7", "html_url": "https://github.com/rust-lang/rust/commit/72433e179d203431c85164555e651c7d65bd93c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72433e179d203431c85164555e651c7d65bd93c7/comments", "author": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5342d40c1f49ef82ebff4c30fdad9f3b6fd339c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5342d40c1f49ef82ebff4c30fdad9f3b6fd339c1", "html_url": "https://github.com/rust-lang/rust/commit/5342d40c1f49ef82ebff4c30fdad9f3b6fd339c1"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "d608fed443dc9a103e25ee7cd8ef0d72425cf5be", "filename": "src/libcore/any.rs", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/72433e179d203431c85164555e651c7d65bd93c7/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72433e179d203431c85164555e651c7d65bd93c7/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=72433e179d203431c85164555e651c7d65bd93c7", "patch": "@@ -136,6 +136,13 @@ impl fmt::Debug for Any + Send {\n     }\n }\n \n+#[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n+impl fmt::Debug for Any + Send + Sync {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Any\")\n+    }\n+}\n+\n impl Any {\n     /// Returns `true` if the boxed type is the same as `T`.\n     ///\n@@ -325,6 +332,89 @@ impl Any+Send {\n     }\n }\n \n+impl Any+Send+Sync {\n+    /// Forwards to the method defined on the type `Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn is_string(s: &(Any + Send + Sync)) {\n+    ///     if s.is::<String>() {\n+    ///         println!(\"It's a string!\");\n+    ///     } else {\n+    ///         println!(\"Not a string...\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     is_string(&0);\n+    ///     is_string(&\"cookie monster\".to_string());\n+    /// }\n+    /// ```\n+    #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n+    #[inline]\n+    pub fn is<T: Any>(&self) -> bool {\n+        Any::is::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn print_if_string(s: &(Any + Send)) {\n+    ///     if let Some(string) = s.downcast_ref::<String>() {\n+    ///         println!(\"It's a string({}): '{}'\", string.len(), string);\n+    ///     } else {\n+    ///         println!(\"Not a string...\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     print_if_string(&0);\n+    ///     print_if_string(&\"cookie monster\".to_string());\n+    /// }\n+    /// ```\n+    #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n+    #[inline]\n+    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n+        Any::downcast_ref::<T>(self)\n+    }\n+\n+    /// Forwards to the method defined on the type `Any`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn modify_if_u32(s: &mut (Any+ Send)) {\n+    ///     if let Some(num) = s.downcast_mut::<u32>() {\n+    ///         *num = 42;\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let mut x = 10u32;\n+    ///     let mut s = \"starlord\".to_string();\n+    ///\n+    ///     modify_if_u32(&mut x);\n+    ///     modify_if_u32(&mut s);\n+    ///\n+    ///     assert_eq!(x, 42);\n+    ///     assert_eq!(&s, \"starlord\");\n+    /// }\n+    /// ```\n+    #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n+    #[inline]\n+    pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n+        Any::downcast_mut::<T>(self)\n+    }\n+}\n \n ///////////////////////////////////////////////////////////////////////////////\n // TypeID and its methods"}]}