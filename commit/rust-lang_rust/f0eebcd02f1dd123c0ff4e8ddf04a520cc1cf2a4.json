{"sha": "f0eebcd02f1dd123c0ff4e8ddf04a520cc1cf2a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZWViY2QwMmYxZGQxMjNjMGZmNGU4ZGRmMDRhNTIwY2MxY2YyYTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-03T19:54:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:19Z"}, "message": "integrate pick constraints into lexical solver more completely", "tree": {"sha": "85aad46b166cea93b9aa023a9674922ea8c11576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85aad46b166cea93b9aa023a9674922ea8c11576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0eebcd02f1dd123c0ff4e8ddf04a520cc1cf2a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0eebcd02f1dd123c0ff4e8ddf04a520cc1cf2a4", "html_url": "https://github.com/rust-lang/rust/commit/f0eebcd02f1dd123c0ff4e8ddf04a520cc1cf2a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0eebcd02f1dd123c0ff4e8ddf04a520cc1cf2a4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02609b85e36fd9c049e1975171f65b47e3ccdd1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/02609b85e36fd9c049e1975171f65b47e3ccdd1b", "html_url": "https://github.com/rust-lang/rust/commit/02609b85e36fd9c049e1975171f65b47e3ccdd1b"}], "stats": {"total": 76, "additions": 56, "deletions": 20}, "files": [{"sha": "68371a0d6cbe84a40498bde1ff19df616c9077ec", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 56, "deletions": 17, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f0eebcd02f1dd123c0ff4e8ddf04a520cc1cf2a4/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eebcd02f1dd123c0ff4e8ddf04a520cc1cf2a4/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=f0eebcd02f1dd123c0ff4e8ddf04a520cc1cf2a4", "patch": "@@ -118,8 +118,12 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n \n         let graph = self.construct_graph();\n         self.expand_givens(&graph);\n-        self.enforce_pick_constraints(&graph, &mut var_data);\n-        self.expansion(&mut var_data);\n+        loop {\n+            self.expansion(&mut var_data);\n+            if !self.enforce_pick_constraints(&graph, &mut var_data) {\n+                break;\n+            }\n+        }\n         self.collect_errors(&mut var_data, errors);\n         self.collect_var_errors(&var_data, &graph, errors);\n         var_data\n@@ -204,43 +208,75 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         &self,\n         graph: &RegionGraph<'tcx>,\n         var_values: &mut LexicalRegionResolutions<'tcx>,\n-    ) {\n+    ) -> bool {\n+        let mut any_changed = false;\n         for pick_constraint in &self.data.pick_constraints {\n-            let _ = self.enforce_pick_constraint(graph, pick_constraint, var_values);\n+            if self.enforce_pick_constraint(graph, pick_constraint, var_values) {\n+                any_changed = true;\n+            }\n         }\n+        any_changed\n     }\n \n+    /// Enforce a constraint like\n+    ///\n+    /// ```\n+    /// pick 'r from ['o...]\n+    /// ```\n+    ///\n+    /// We look to see if there is a unique option `'o` from the list of options\n+    /// that:\n+    ///\n+    /// (a) is greater than the current value of `'r` (which is a lower bound)\n+    ///\n+    /// and\n+    ///\n+    /// (b) is compatible with the upper bounds of `'r` that we can\n+    /// find by traversing the graph.\n     fn enforce_pick_constraint(\n         &self,\n         graph: &RegionGraph<'tcx>,\n         pick_constraint: &PickConstraint<'tcx>,\n         var_values: &mut LexicalRegionResolutions<'tcx>,\n-    ) -> Result<(), ()> {\n+    ) -> bool {\n         debug!(\"enforce_pick_constraint(pick_constraint={:#?})\", pick_constraint);\n \n         // the constraint is some inference variable (`vid`) which\n         // must be equal to one of the options\n         let pick_vid = match pick_constraint.pick_region {\n             ty::ReVar(vid) => *vid,\n-            _ => return Err(()),\n+            _ => return false,\n+        };\n+\n+        // The current value of `vid` is a lower bound LB -- i.e., we\n+        // know that `LB <= vid` must be true.\n+        let pick_lower_bound = match var_values.value(pick_vid) {\n+            VarValue::ErrorValue => return false,\n+            VarValue::Value(r) => r,\n         };\n \n-        // find all the \"bounds\" -- that is, each region `b` such that\n+        // find all the \"upper bounds\" -- that is, each region `b` such that\n         // `r0 <= b` must hold.\n-        let (pick_bounds, _) = self.collect_concrete_regions(graph, pick_vid, OUTGOING, None);\n+        let (pick_upper_bounds, _) = self.collect_concrete_regions(graph, pick_vid, OUTGOING, None);\n \n         // get an iterator over the *available options* -- that is,\n-        // each constraint regions `o` where `o <= b` for all the\n-        // bounds `b`.\n-        debug!(\"enforce_pick_constraint: bounds={:#?}\", pick_bounds);\n+        // each constraint regions `o` where `lb <= o` and `o <= ub` for all the\n+        // upper bounds `ub`.\n+        debug!(\"enforce_pick_constraint: upper_bounds={:#?}\", pick_upper_bounds);\n         let mut options = pick_constraint.option_regions.iter().filter(|option| {\n-            pick_bounds.iter().all(|bound| self.sub_concrete_regions(option, bound.region))\n+            self.sub_concrete_regions(pick_lower_bound, option)\n+                && pick_upper_bounds\n+                    .iter()\n+                    .all(|upper_bound| self.sub_concrete_regions(option, upper_bound.region))\n         });\n \n         // if there >1 option, we only make a choice if there is a\n         // single *least* choice -- i.e., some available region that\n         // is `<=` all the others.\n-        let mut least_choice = options.next().ok_or(())?;\n+        let mut least_choice = match options.next() {\n+            Some(r) => r,\n+            None => return false,\n+        };\n         debug!(\"enforce_pick_constraint: least_choice={:?}\", least_choice);\n         for option in options {\n             debug!(\"enforce_pick_constraint: option={:?}\", option);\n@@ -250,15 +286,18 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     least_choice = option;\n                 } else {\n                     debug!(\"enforce_pick_constraint: no least choice\");\n-                    return Err(());\n+                    return false;\n                 }\n             }\n         }\n \n         debug!(\"enforce_pick_constraint: final least choice = {:?}\", least_choice);\n-        *var_values.value_mut(pick_vid) = VarValue::Value(least_choice);\n-\n-        Ok(())\n+        if least_choice != pick_lower_bound {\n+            *var_values.value_mut(pick_vid) = VarValue::Value(least_choice);\n+            true\n+        } else {\n+            false\n+        }\n     }\n \n     fn expansion(&self, var_values: &mut LexicalRegionResolutions<'tcx>) {"}, {"sha": "60275ac3ab0d2d9ba9ba6fc1e9813b017eaf9de2", "filename": "src/test/ui/impl-trait/multiple-lifetimes/inverse-bounds.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0eebcd02f1dd123c0ff4e8ddf04a520cc1cf2a4/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eebcd02f1dd123c0ff4e8ddf04a520cc1cf2a4/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs?ref=f0eebcd02f1dd123c0ff4e8ddf04a520cc1cf2a4", "patch": "@@ -13,9 +13,6 @@ impl<T> Trait<'_, '_> for T {}\n struct Invert<'a>(fn(&'a u8));\n \n fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Invert<'a>, b: Invert<'b>) -> impl Trait<'d, 'e>\n-//~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-// FIXME -- we ought to be able to pick `'d` here, but our handling of in constraints\n-// is not smart enough\n where\n     'c: 'a,\n     'c: 'b,"}]}