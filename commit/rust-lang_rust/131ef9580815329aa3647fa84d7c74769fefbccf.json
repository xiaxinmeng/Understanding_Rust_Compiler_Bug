{"sha": "131ef9580815329aa3647fa84d7c74769fefbccf", "node_id": "C_kwDOAAsO6NoAKDEzMWVmOTU4MDgxNTMyOWFhMzY0N2ZhODRkN2M3NDc2OWZlZmJjY2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-06T07:35:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-06T07:35:26Z"}, "message": "Rollup merge of #103851 - viandoxdev:103816_bootstrap_fix_json_doc, r=jyn514\n\nFix json flag in bootstrap doc\n\nFix the `--json` flag not working with x.py (Closes #103816)\n\nWhile this works I'm not sure about the `should_run` of `JsonStd`, had to change it because https://github.com/rust-lang/rust/blob/ab5a2bc7316012ee9b2a4a4f3821673f2677f3d5/src/bootstrap/builder.rs#L334 would match with JsonStd and remove the paths that Std matched. So I did [this](https://github.com/viandoxdev/rust/blob/ffd4078264c4892b5098d6191e0adfe3564d62ca/src/bootstrap/doc.rs#L526-L534) but that looks more like a hack/workaround than anything. I'm guessing there's something to do with the default condition thing but idk how it works", "tree": {"sha": "64f956acb4a1ed7ad9a41be773a62426a0b1fd7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64f956acb4a1ed7ad9a41be773a62426a0b1fd7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/131ef9580815329aa3647fa84d7c74769fefbccf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZ2O+CRBK7hj4Ov3rIwAAL2kIAKBxRUgsYiFoMiAx5fa3fYbV\n7Vc1eb3BEvsLhnjIkXR8yhf/xw+Ts2auMlAUFskH/MZvun/874j18b6QP92r7koh\n8B37OyvnRUh2yBpeePDs2JuOmY8XaqnsiPj7z6ltiRBv4owMQh1+J2X9rLnL2NS6\nV0/PRksECmdSGlQCHTYkSh4X10VDYT7yQCSrQTspuCr5cwHOlWdPd4fuZ7+nXg9c\nnJE4faleYyB44dYRKmDyPlYUdatGDIAoFP1irgh+b21CJAVtgdxAmzKwqdCm4Giy\nhCq3BNQAqwc/vdmNcFYohfHe1RVSlVPvNGDmautoHyzF2jlg+5quGzmmORPdlgY=\n=k2VC\n-----END PGP SIGNATURE-----\n", "payload": "tree 64f956acb4a1ed7ad9a41be773a62426a0b1fd7d\nparent 58f5d57b5d622c87af4aaba45ab434ebcd867b20\nparent 900af414a3dfabab74357f5038371a08b1cb0db1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667720126 +0100\ncommitter GitHub <noreply@github.com> 1667720126 +0100\n\nRollup merge of #103851 - viandoxdev:103816_bootstrap_fix_json_doc, r=jyn514\n\nFix json flag in bootstrap doc\n\nFix the `--json` flag not working with x.py (Closes #103816)\n\nWhile this works I'm not sure about the `should_run` of `JsonStd`, had to change it because https://github.com/rust-lang/rust/blob/ab5a2bc7316012ee9b2a4a4f3821673f2677f3d5/src/bootstrap/builder.rs#L334 would match with JsonStd and remove the paths that Std matched. So I did [this](https://github.com/viandoxdev/rust/blob/ffd4078264c4892b5098d6191e0adfe3564d62ca/src/bootstrap/doc.rs#L526-L534) but that looks more like a hack/workaround than anything. I'm guessing there's something to do with the default condition thing but idk how it works\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/131ef9580815329aa3647fa84d7c74769fefbccf", "html_url": "https://github.com/rust-lang/rust/commit/131ef9580815329aa3647fa84d7c74769fefbccf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/131ef9580815329aa3647fa84d7c74769fefbccf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58f5d57b5d622c87af4aaba45ab434ebcd867b20", "url": "https://api.github.com/repos/rust-lang/rust/commits/58f5d57b5d622c87af4aaba45ab434ebcd867b20", "html_url": "https://github.com/rust-lang/rust/commit/58f5d57b5d622c87af4aaba45ab434ebcd867b20"}, {"sha": "900af414a3dfabab74357f5038371a08b1cb0db1", "url": "https://api.github.com/repos/rust-lang/rust/commits/900af414a3dfabab74357f5038371a08b1cb0db1", "html_url": "https://github.com/rust-lang/rust/commit/900af414a3dfabab74357f5038371a08b1cb0db1"}], "stats": {"total": 97, "additions": 44, "deletions": 53}, "files": [{"sha": "110a3ee4918da2d1ee6a1f359533f91ade9b4244", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/131ef9580815329aa3647fa84d7c74769fefbccf/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131ef9580815329aa3647fa84d7c74769fefbccf/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=131ef9580815329aa3647fa84d7c74769fefbccf", "patch": "@@ -19,6 +19,7 @@ use crate::cache::{Interned, INTERNER};\n use crate::channel;\n use crate::compile;\n use crate::config::TargetSelection;\n+use crate::doc::DocumentationFormat;\n use crate::tarball::{GeneratedTarball, OverlayKind, Tarball};\n use crate::tool::{self, Tool};\n use crate::util::{exe, is_dylib, output, t, timeit};\n@@ -97,7 +98,11 @@ impl Step for JsonDocs {\n     /// Builds the `rust-docs-json` installer component.\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let host = self.host;\n-        builder.ensure(crate::doc::JsonStd { stage: builder.top_stage, target: host });\n+        builder.ensure(crate::doc::Std {\n+            stage: builder.top_stage,\n+            target: host,\n+            format: DocumentationFormat::JSON,\n+        });\n \n         let dest = \"share/doc/rust/json\";\n "}, {"sha": "280e232ca2dd02e7a67a4c5d84b584af0b7bd38a", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 32, "deletions": 51, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/131ef9580815329aa3647fa84d7c74769fefbccf/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131ef9580815329aa3647fa84d7c74769fefbccf/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=131ef9580815329aa3647fa84d7c74769fefbccf", "patch": "@@ -420,6 +420,7 @@ impl Step for SharedAssets {\n pub struct Std {\n     pub stage: u32,\n     pub target: TargetSelection,\n+    pub format: DocumentationFormat,\n }\n \n impl Step for Std {\n@@ -432,7 +433,15 @@ impl Step for Std {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Std { stage: run.builder.top_stage, target: run.target });\n+        run.builder.ensure(Std {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n+            format: if run.builder.config.cmd.json() {\n+                DocumentationFormat::JSON\n+            } else {\n+                DocumentationFormat::HTML\n+            },\n+        });\n     }\n \n     /// Compile all standard library documentation.\n@@ -442,19 +451,26 @@ impl Step for Std {\n     fn run(self, builder: &Builder<'_>) {\n         let stage = self.stage;\n         let target = self.target;\n-        let out = builder.doc_out(target);\n+        let out = match self.format {\n+            DocumentationFormat::HTML => builder.doc_out(target),\n+            DocumentationFormat::JSON => builder.json_doc_out(target),\n+        };\n+\n         t!(fs::create_dir_all(&out));\n \n         builder.ensure(SharedAssets { target: self.target });\n \n         let index_page = builder.src.join(\"src/doc/index.md\").into_os_string();\n-        let mut extra_args = vec![\n-            OsStr::new(\"--markdown-css\"),\n-            OsStr::new(\"rust.css\"),\n-            OsStr::new(\"--markdown-no-toc\"),\n-            OsStr::new(\"--index-page\"),\n-            &index_page,\n-        ];\n+        let mut extra_args = match self.format {\n+            DocumentationFormat::HTML => vec![\n+                OsStr::new(\"--markdown-css\"),\n+                OsStr::new(\"rust.css\"),\n+                OsStr::new(\"--markdown-no-toc\"),\n+                OsStr::new(\"--index-page\"),\n+                &index_page,\n+            ],\n+            DocumentationFormat::JSON => vec![OsStr::new(\"--output-format\"), OsStr::new(\"json\")],\n+        };\n \n         if !builder.config.docs_minification {\n             extra_args.push(OsStr::new(\"--disable-minification\"));\n@@ -478,15 +494,12 @@ impl Step for Std {\n             })\n             .collect::<Vec<_>>();\n \n-        doc_std(\n-            builder,\n-            DocumentationFormat::HTML,\n-            stage,\n-            target,\n-            &out,\n-            &extra_args,\n-            &requested_crates,\n-        );\n+        doc_std(builder, self.format, stage, target, &out, &extra_args, &requested_crates);\n+\n+        // Don't open if the format is json\n+        if let DocumentationFormat::JSON = self.format {\n+            return;\n+        }\n \n         // Look for library/std, library/core etc in the `x.py doc` arguments and\n         // open the corresponding rendered docs.\n@@ -499,38 +512,6 @@ impl Step for Std {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct JsonStd {\n-    pub stage: u32,\n-    pub target: TargetSelection,\n-}\n-\n-impl Step for JsonStd {\n-    type Output = ();\n-    const DEFAULT: bool = false;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        let default = run.builder.config.docs && run.builder.config.cmd.json();\n-        run.all_krates(\"test\").path(\"library\").default_condition(default)\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Std { stage: run.builder.top_stage, target: run.target });\n-    }\n-\n-    /// Build JSON documentation for the standard library crates.\n-    ///\n-    /// This is largely just a wrapper around `cargo doc`.\n-    fn run(self, builder: &Builder<'_>) {\n-        let stage = self.stage;\n-        let target = self.target;\n-        let out = builder.json_doc_out(target);\n-        t!(fs::create_dir_all(&out));\n-        let extra_args = [OsStr::new(\"--output-format\"), OsStr::new(\"json\")];\n-        doc_std(builder, DocumentationFormat::JSON, stage, target, &out, &extra_args, &[])\n-    }\n-}\n-\n /// Name of the crates that are visible to consumers of the standard library.\n /// Documentation for internal crates is handled by the rustc step, so internal crates will show\n /// up there.\n@@ -543,7 +524,7 @@ impl Step for JsonStd {\n const STD_PUBLIC_CRATES: [&str; 5] = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-enum DocumentationFormat {\n+pub enum DocumentationFormat {\n     HTML,\n     JSON,\n }"}, {"sha": "931d9a67944df704163193c9eb214f0bbdae1f55", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/131ef9580815329aa3647fa84d7c74769fefbccf/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131ef9580815329aa3647fa84d7c74769fefbccf/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=131ef9580815329aa3647fa84d7c74769fefbccf", "patch": "@@ -16,6 +16,7 @@ use crate::cache::Interned;\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::dist;\n+use crate::doc::DocumentationFormat;\n use crate::flags::Subcommand;\n use crate::native;\n use crate::tool::{self, SourceType, Tool};\n@@ -822,7 +823,11 @@ impl Step for RustdocJSStd {\n                     command.arg(\"--test-file\").arg(path);\n                 }\n             }\n-            builder.ensure(crate::doc::Std { target: self.target, stage: builder.top_stage });\n+            builder.ensure(crate::doc::Std {\n+                target: self.target,\n+                stage: builder.top_stage,\n+                format: DocumentationFormat::HTML,\n+            });\n             builder.run(&mut command);\n         } else {\n             builder.info(\"No nodejs found, skipping \\\"src/test/rustdoc-js-std\\\" tests\");"}]}