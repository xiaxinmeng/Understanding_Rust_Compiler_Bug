{"sha": "5088fb3d3b20fa20a72425e1d214343c9ed7251a", "node_id": "C_kwDOAAsO6NoAKDUwODhmYjNkM2IyMGZhMjBhNzI0MjVlMWQyMTQzNDNjOWVkNzI1MWE", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-04-24T16:02:16Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-05-03T21:47:46Z"}, "message": "Cast arguments in SIMD function", "tree": {"sha": "9b47ce749e9b6a50ad34821ddc924495df62757f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b47ce749e9b6a50ad34821ddc924495df62757f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5088fb3d3b20fa20a72425e1d214343c9ed7251a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5088fb3d3b20fa20a72425e1d214343c9ed7251a", "html_url": "https://github.com/rust-lang/rust/commit/5088fb3d3b20fa20a72425e1d214343c9ed7251a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5088fb3d3b20fa20a72425e1d214343c9ed7251a/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "852735da05d741317014bc54cb5933820e19cc72", "url": "https://api.github.com/repos/rust-lang/rust/commits/852735da05d741317014bc54cb5933820e19cc72", "html_url": "https://github.com/rust-lang/rust/commit/852735da05d741317014bc54cb5933820e19cc72"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "e5753e318c7f25b7bf9da6bfe94f9b6189151c46", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5088fb3d3b20fa20a72425e1d214343c9ed7251a/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5088fb3d3b20fa20a72425e1d214343c9ed7251a/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=5088fb3d3b20fa20a72425e1d214343c9ed7251a", "patch": "@@ -539,6 +539,14 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         let vec_ty = bx.cx.type_vector(elem_ty, in_len as u64);\n \n         let func = bx.context.get_target_builtin_function(builtin_name);\n+        let param1_type = func.get_parameter(0).get_type();\n+        let lhs =\n+            if lhs.get_type() != param1_type {\n+                bx.context.new_bitcast(None, lhs, param1_type)\n+            }\n+            else {\n+                lhs\n+            };\n         let result = bx.context.new_call(None, func, &[lhs, rhs]);\n         // TODO(antoyo): perhaps use __builtin_convertvector for vector casting.\n         return Ok(bx.context.new_bitcast(None, result, vec_ty));"}]}