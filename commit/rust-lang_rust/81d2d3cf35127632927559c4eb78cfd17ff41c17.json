{"sha": "81d2d3cf35127632927559c4eb78cfd17ff41c17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZDJkM2NmMzUxMjc2MzI5Mjc1NTljNGViNzhjZmQxN2ZmNDFjMTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T07:39:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T07:39:06Z"}, "message": "Rollup merge of #73588 - Amanieu:thumb-fp, r=nagisa\n\nFix handling of reserved registers for ARM inline asm\n\n`r6` is now disallowed as an operand since LLVM sometimes uses it as a base pointer.\n\nThe check against using the frame pointer as an operand now takes the platform into account and will block either `r7` or `r11` as appropriate.\n\nFixes #73450\n\ncc @cbiffle", "tree": {"sha": "544c6f17dc79c71dca6cfa4f3696ba3df48eb342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/544c6f17dc79c71dca6cfa4f3696ba3df48eb342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81d2d3cf35127632927559c4eb78cfd17ff41c17", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9aYaCRBK7hj4Ov3rIwAAdHIIAHwO6gBpkWP/bzqkZdkzvPW5\nlEDVrlFCKF0bR526bGoW0q4GUyPAhl0CWkuYjnrvMOqWDz1p0o3fuPJ/kIMUhmKI\nDB2E9HQccTQXZowIjEyWbekS2PlehjwjnQHvE3BnF+WzMwBr1XozCzqL24UMAtxD\nD1yZWBHX+zL46o8q7IHJ7DLCgvqSmzjqQyPQnFAVaOLiWhP6lDwyioQ+YFKLzffN\n7kvtpFUrlzhbGkdIkheBZeunJoz4dVi+6QVI7/QHBiulWp/cuxR7HbXAll0/Uzm9\njXqsBZxKhuX96PQt2G6j4guZNMR5dVefKmmTW2H1kkzSOyM5bMHgjfxO78iFSKo=\n=1CNY\n-----END PGP SIGNATURE-----\n", "payload": "tree 544c6f17dc79c71dca6cfa4f3696ba3df48eb342\nparent 25671fa0fc70a172e4d441916549b162023e8919\nparent a98868dc9f1d8654b615015144c9ff7310ba6e19\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593157146 -0700\ncommitter GitHub <noreply@github.com> 1593157146 -0700\n\nRollup merge of #73588 - Amanieu:thumb-fp, r=nagisa\n\nFix handling of reserved registers for ARM inline asm\n\n`r6` is now disallowed as an operand since LLVM sometimes uses it as a base pointer.\n\nThe check against using the frame pointer as an operand now takes the platform into account and will block either `r7` or `r11` as appropriate.\n\nFixes #73450\n\ncc @cbiffle\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81d2d3cf35127632927559c4eb78cfd17ff41c17", "html_url": "https://github.com/rust-lang/rust/commit/81d2d3cf35127632927559c4eb78cfd17ff41c17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81d2d3cf35127632927559c4eb78cfd17ff41c17/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25671fa0fc70a172e4d441916549b162023e8919", "url": "https://api.github.com/repos/rust-lang/rust/commits/25671fa0fc70a172e4d441916549b162023e8919", "html_url": "https://github.com/rust-lang/rust/commit/25671fa0fc70a172e4d441916549b162023e8919"}, {"sha": "a98868dc9f1d8654b615015144c9ff7310ba6e19", "url": "https://api.github.com/repos/rust-lang/rust/commits/a98868dc9f1d8654b615015144c9ff7310ba6e19", "html_url": "https://github.com/rust-lang/rust/commit/a98868dc9f1d8654b615015144c9ff7310ba6e19"}], "stats": {"total": 93, "additions": 73, "deletions": 20}, "files": [{"sha": "c4c985dd134ba375dc23c4fc7438fc48373f6293", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=81d2d3cf35127632927559c4eb78cfd17ff41c17", "patch": "@@ -474,7 +474,7 @@ Here is the list of currently supported register classes:\n | AArch64 | `reg` | `x[0-28]`, `x30` | `r` |\n | AArch64 | `vreg` | `v[0-31]` | `w` |\n | AArch64 | `vreg_low16` | `v[0-15]` | `x` |\n-| ARM | `reg` | `r[0-r10]`, `r12`, `r14` | `r` |\n+| ARM | `reg` | `r[0-5]` `r7`\\*, `r[8-10]`, `r11`\\*, `r12`, `r14` | `r` |\n | ARM (Thumb) | `reg_thumb` | `r[0-r7]` | `l` |\n | ARM (ARM) | `reg_thumb` | `r[0-r10]`, `r12`, `r14` | `l` |\n | ARM | `sreg` | `s[0-31]` | `t` |\n@@ -497,6 +497,8 @@ Here is the list of currently supported register classes:\n > Note #2: On x86-64 the high byte registers (e.g. `ah`) are only available when used as an explicit register. Specifying the `reg_byte` register class for an operand will always allocate a low byte register.\n >\n > Note #3: NVPTX doesn't have a fixed register set, so named registers are not supported.\n+>\n+> Note #4: On ARM the frame pointer is either `r7` or `r11` depending on the platform.\n \n Additional register classes may be added in the future based on demand (e.g. MMX, x87, etc).\n \n@@ -591,7 +593,9 @@ Some registers cannot be used for input or output operands:\n | Architecture | Unsupported register | Reason |\n | ------------ | -------------------- | ------ |\n | All | `sp` | The stack pointer must be restored to its original value at the end of an asm code block. |\n-| All | `bp` (x86), `r11` (ARM), `x29` (AArch64), `x8` (RISC-V), `fr` (Hexagon) | The frame pointer cannot be used as an input or output. |\n+| All | `bp` (x86), `x29` (AArch64), `x8` (RISC-V), `fr` (Hexagon) | The frame pointer cannot be used as an input or output. |\n+| ARM | `r7` or `r11` | On ARM the frame pointer can be either `r7` or `r11` depending on the target. The frame pointer cannot be used as an input or output. |\n+| ARM | `r6` | `r6` is used internally by LLVM as a base pointer and therefore cannot be used as an input or output. |\n | x86 | `k0` | This is a constant zero register which can't be modified. |\n | x86 | `ip` | This is the program counter, not a real register. |\n | x86 | `mm[0-7]` | MMX registers are not currently supported (but may be in the future). |"}, {"sha": "d2c4478ccfeb6279e8d63ebd53332fdadcdb6e20", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=81d2d3cf35127632927559c4eb78cfd17ff41c17", "patch": "@@ -1001,6 +1001,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             asm::InlineAsmReg::parse(\n                                 sess.asm_arch?,\n                                 |feature| sess.target_features.contains(&Symbol::intern(feature)),\n+                                &sess.target.target,\n                                 s,\n                             )\n                             .map_err(|e| {"}, {"sha": "80278bb9f53d8196b71d3c0ea64fe185844cdd4f", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=81d2d3cf35127632927559c4eb78cfd17ff41c17", "patch": "@@ -156,6 +156,10 @@ const ARM_WHITELIST: &[(&str, Option<Symbol>)] = &[\n     (\"vfp2\", Some(sym::arm_target_feature)),\n     (\"vfp3\", Some(sym::arm_target_feature)),\n     (\"vfp4\", Some(sym::arm_target_feature)),\n+    // This is needed for inline assembly, but shouldn't be stabilized as-is\n+    // since it should be enabled per-function using #[instruction_set], not\n+    // #[target_feature].\n+    (\"thumb-mode\", Some(sym::arm_target_feature)),\n ];\n \n const AARCH64_WHITELIST: &[(&str, Option<Symbol>)] = &["}, {"sha": "85a136b94aa7998bad3523bdac5468ab718d7389", "filename": "src/librustc_target/asm/arm.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_target%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_target%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Farm.rs?ref=81d2d3cf35127632927559c4eb78cfd17ff41c17", "patch": "@@ -1,4 +1,5 @@\n use super::{InlineAsmArch, InlineAsmType};\n+use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n use std::fmt;\n \n@@ -58,6 +59,37 @@ impl ArmInlineAsmRegClass {\n     }\n }\n \n+// This uses the same logic as useR7AsFramePointer in LLVM\n+fn frame_pointer_is_r7(mut has_feature: impl FnMut(&str) -> bool, target: &Target) -> bool {\n+    target.options.is_like_osx || (!target.options.is_like_windows && has_feature(\"thumb-mode\"))\n+}\n+\n+fn frame_pointer_r11(\n+    _arch: InlineAsmArch,\n+    has_feature: impl FnMut(&str) -> bool,\n+    target: &Target,\n+    _allocating: bool,\n+) -> Result<(), &'static str> {\n+    if !frame_pointer_is_r7(has_feature, target) {\n+        Err(\"the frame pointer (r11) cannot be used as an operand for inline asm\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+fn frame_pointer_r7(\n+    _arch: InlineAsmArch,\n+    has_feature: impl FnMut(&str) -> bool,\n+    target: &Target,\n+    _allocating: bool,\n+) -> Result<(), &'static str> {\n+    if frame_pointer_is_r7(has_feature, target) {\n+        Err(\"the frame pointer (r7) cannot be used as an operand for inline asm\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n def_regs! {\n     Arm ArmInlineAsmReg ArmInlineAsmRegClass {\n         r0: reg, reg_thumb = [\"r0\", \"a1\"],\n@@ -66,11 +98,11 @@ def_regs! {\n         r3: reg, reg_thumb = [\"r3\", \"a4\"],\n         r4: reg, reg_thumb = [\"r4\", \"v1\"],\n         r5: reg, reg_thumb = [\"r5\", \"v2\"],\n-        r6: reg, reg_thumb = [\"r6\", \"v3\"],\n-        r7: reg, reg_thumb = [\"r7\", \"v4\"],\n+        r7: reg, reg_thumb = [\"r7\", \"v4\"] % frame_pointer_r7,\n         r8: reg = [\"r8\", \"v5\"],\n         r9: reg = [\"r9\", \"v6\", \"rfp\"],\n         r10: reg = [\"r10\", \"sl\"],\n+        r11: reg = [\"r11\", \"fp\"] % frame_pointer_r11,\n         r12: reg = [\"r12\", \"ip\"],\n         r14: reg = [\"r14\", \"lr\"],\n         s0: sreg, sreg_low16 = [\"s0\"],\n@@ -153,8 +185,8 @@ def_regs! {\n         q13: qreg = [\"q13\"],\n         q14: qreg = [\"q14\"],\n         q15: qreg = [\"q15\"],\n-        #error = [\"r11\", \"fp\"] =>\n-            \"the frame pointer cannot be used as an operand for inline asm\",\n+        #error = [\"r6\", \"v3\"] =>\n+            \"r6 is used internally by LLVM and cannot be used as an operand for inline asm\",\n         #error = [\"r13\", \"sp\"] =>\n             \"the stack pointer cannot be used as an operand for inline asm\",\n         #error = [\"r15\", \"pc\"] =>"}, {"sha": "ccec17817d37df6b0de2920cbe2a7d95fb862fef", "filename": "src/librustc_target/asm/mod.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_target%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_target%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fmod.rs?ref=81d2d3cf35127632927559c4eb78cfd17ff41c17", "patch": "@@ -1,4 +1,5 @@\n use crate::abi::Size;\n+use crate::spec::Target;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_macros::HashStable_Generic;\n use rustc_span::Symbol;\n@@ -83,12 +84,13 @@ macro_rules! def_regs {\n             pub fn parse(\n                 _arch: super::InlineAsmArch,\n                 mut _has_feature: impl FnMut(&str) -> bool,\n+                _target: &crate::spec::Target,\n                 name: &str,\n             ) -> Result<Self, &'static str> {\n                 match name {\n                     $(\n                         $($alias)|* | $reg_name => {\n-                            $($filter(_arch, &mut _has_feature, false)?;)?\n+                            $($filter(_arch, &mut _has_feature, _target, false)?;)?\n                             Ok(Self::$reg)\n                         }\n                     )*\n@@ -103,6 +105,7 @@ macro_rules! def_regs {\n         pub(super) fn fill_reg_map(\n             _arch: super::InlineAsmArch,\n             mut _has_feature: impl FnMut(&str) -> bool,\n+            _target: &crate::spec::Target,\n             _map: &mut rustc_data_structures::fx::FxHashMap<\n                 super::InlineAsmRegClass,\n                 rustc_data_structures::fx::FxHashSet<super::InlineAsmReg>,\n@@ -111,7 +114,7 @@ macro_rules! def_regs {\n             #[allow(unused_imports)]\n             use super::{InlineAsmReg, InlineAsmRegClass};\n             $(\n-                if $($filter(_arch, &mut _has_feature, true).is_ok() &&)? true {\n+                if $($filter(_arch, &mut _has_feature, _target, true).is_ok() &&)? true {\n                     if let Some(set) = _map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$class)) {\n                         set.insert(InlineAsmReg::$arch($arch_reg::$reg));\n                     }\n@@ -234,27 +237,30 @@ impl InlineAsmReg {\n     pub fn parse(\n         arch: InlineAsmArch,\n         has_feature: impl FnMut(&str) -> bool,\n+        target: &Target,\n         name: Symbol,\n     ) -> Result<Self, &'static str> {\n         // FIXME: use direct symbol comparison for register names\n         // Use `Symbol::as_str` instead of `Symbol::with` here because `has_feature` may access `Symbol`.\n         let name = name.as_str();\n         Ok(match arch {\n             InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n-                Self::X86(X86InlineAsmReg::parse(arch, has_feature, &name)?)\n+                Self::X86(X86InlineAsmReg::parse(arch, has_feature, target, &name)?)\n+            }\n+            InlineAsmArch::Arm => {\n+                Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n-            InlineAsmArch::Arm => Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, &name)?),\n             InlineAsmArch::AArch64 => {\n-                Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, &name)?)\n+                Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n             InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n-                Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, &name)?)\n+                Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n             InlineAsmArch::Nvptx64 => {\n-                Self::Nvptx(NvptxInlineAsmReg::parse(arch, has_feature, &name)?)\n+                Self::Nvptx(NvptxInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n             InlineAsmArch::Hexagon => {\n-                Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, &name)?)\n+                Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n         })\n     }\n@@ -536,36 +542,37 @@ impl fmt::Display for InlineAsmType {\n pub fn allocatable_registers(\n     arch: InlineAsmArch,\n     has_feature: impl FnMut(&str) -> bool,\n+    target: &crate::spec::Target,\n ) -> FxHashMap<InlineAsmRegClass, FxHashSet<InlineAsmReg>> {\n     match arch {\n         InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n             let mut map = x86::regclass_map();\n-            x86::fill_reg_map(arch, has_feature, &mut map);\n+            x86::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n         InlineAsmArch::Arm => {\n             let mut map = arm::regclass_map();\n-            arm::fill_reg_map(arch, has_feature, &mut map);\n+            arm::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n         InlineAsmArch::AArch64 => {\n             let mut map = aarch64::regclass_map();\n-            aarch64::fill_reg_map(arch, has_feature, &mut map);\n+            aarch64::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n         InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n             let mut map = riscv::regclass_map();\n-            riscv::fill_reg_map(arch, has_feature, &mut map);\n+            riscv::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n         InlineAsmArch::Nvptx64 => {\n             let mut map = nvptx::regclass_map();\n-            nvptx::fill_reg_map(arch, has_feature, &mut map);\n+            nvptx::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n         InlineAsmArch::Hexagon => {\n             let mut map = hexagon::regclass_map();\n-            hexagon::fill_reg_map(arch, has_feature, &mut map);\n+            hexagon::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n     }"}, {"sha": "ced7483b00571580ea8879be8d511013bbfda31e", "filename": "src/librustc_target/asm/riscv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_target%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_target%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Friscv.rs?ref=81d2d3cf35127632927559c4eb78cfd17ff41c17", "patch": "@@ -1,4 +1,5 @@\n use super::{InlineAsmArch, InlineAsmType};\n+use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n use std::fmt;\n \n@@ -50,6 +51,7 @@ impl RiscVInlineAsmRegClass {\n fn not_e(\n     _arch: InlineAsmArch,\n     mut has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n     _allocating: bool,\n ) -> Result<(), &'static str> {\n     if has_feature(\"e\") {"}, {"sha": "0f62c19e1a3cde0ec0fcef2ff01bf788cfb34004", "filename": "src/librustc_target/asm/x86.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_target%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d2d3cf35127632927559c4eb78cfd17ff41c17/src%2Flibrustc_target%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fx86.rs?ref=81d2d3cf35127632927559c4eb78cfd17ff41c17", "patch": "@@ -1,4 +1,5 @@\n use super::{InlineAsmArch, InlineAsmType};\n+use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n use std::fmt;\n \n@@ -131,6 +132,7 @@ impl X86InlineAsmRegClass {\n fn x86_64_only(\n     arch: InlineAsmArch,\n     _has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n     _allocating: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n@@ -143,6 +145,7 @@ fn x86_64_only(\n fn high_byte(\n     arch: InlineAsmArch,\n     _has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n     allocating: bool,\n ) -> Result<(), &'static str> {\n     match arch {"}]}