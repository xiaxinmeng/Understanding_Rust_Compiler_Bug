{"sha": "976fdb18c98864f13448a7d48402c5df7b51d711", "node_id": "C_kwDOAAsO6NoAKDk3NmZkYjE4Yzk4ODY0ZjEzNDQ4YTdkNDg0MDJjNWRmN2I1MWQ3MTE", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-02-23T17:27:36Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-03-04T11:14:29Z"}, "message": "Enable conditional compilation checking on the Rust codebase", "tree": {"sha": "830d9b080e9613d23fca840966b4591546dd709d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/830d9b080e9613d23fca840966b4591546dd709d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976fdb18c98864f13448a7d48402c5df7b51d711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976fdb18c98864f13448a7d48402c5df7b51d711", "html_url": "https://github.com/rust-lang/rust/commit/976fdb18c98864f13448a7d48402c5df7b51d711", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976fdb18c98864f13448a7d48402c5df7b51d711/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a93c7abc690fa9250182c9b637dfe4241d6c6d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/a93c7abc690fa9250182c9b637dfe4241d6c6d33", "html_url": "https://github.com/rust-lang/rust/commit/a93c7abc690fa9250182c9b637dfe4241d6c6d33"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "00aebc21f581ad747908c07e01836320b5db7a06", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/976fdb18c98864f13448a7d48402c5df7b51d711/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976fdb18c98864f13448a7d48402c5df7b51d711/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=976fdb18c98864f13448a7d48402c5df7b51d711", "patch": "@@ -26,6 +26,7 @@ use crate::run;\n use crate::test;\n use crate::tool::{self, SourceType};\n use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir};\n+use crate::EXTRA_CHECK_CFGS;\n use crate::{Build, CLang, DocTests, GitRepo, Mode};\n \n pub use crate::Compiler;\n@@ -1095,6 +1096,33 @@ impl<'a> Builder<'a> {\n             rustflags.arg(\"-Zunstable-options\");\n         }\n \n+        // #[cfg(not(bootstrap)]\n+        if stage != 0 {\n+            // Enable cfg checking of cargo features\n+            // FIXME: De-comment this when cargo beta get support for it\n+            // cargo.arg(\"-Zcheck-cfg-features\");\n+\n+            // Enable cfg checking of rustc well-known names\n+            rustflags.arg(\"-Zunstable-options\").arg(\"--check-cfg=names()\");\n+\n+            // Add extra cfg not defined in rustc\n+            for (restricted_mode, name, values) in EXTRA_CHECK_CFGS {\n+                if *restricted_mode == None || *restricted_mode == Some(mode) {\n+                    // Creating a string of the values by concatenating each value:\n+                    // ',\"tvos\",\"watchos\"' or '' (nothing) when there are no values\n+                    let values = match values {\n+                        Some(values) => values\n+                            .iter()\n+                            .map(|val| [\",\", \"\\\"\", val, \"\\\"\"])\n+                            .flatten()\n+                            .collect::<String>(),\n+                        None => String::new(),\n+                    };\n+                    rustflags.arg(&format!(\"--check-cfg=values({name}{values})\"));\n+                }\n+            }\n+        }\n+\n         // FIXME: It might be better to use the same value for both `RUSTFLAGS` and `RUSTDOCFLAGS`,\n         // but this breaks CI. At the very least, stage0 `rustdoc` needs `--cfg bootstrap`. See\n         // #71458."}, {"sha": "82faffb535177eca62f3c8e0e060a7d87e2160df", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/976fdb18c98864f13448a7d48402c5df7b51d711/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976fdb18c98864f13448a7d48402c5df7b51d711/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=976fdb18c98864f13448a7d48402c5df7b51d711", "patch": "@@ -186,6 +186,34 @@ const LLVM_TOOLS: &[&str] = &[\n \n pub const VERSION: usize = 2;\n \n+/// Extra --check-cfg to add when building\n+/// (Mode restriction, config name, config values (if any))\n+const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)] = &[\n+    (None, \"bootstrap\", None),\n+    (Some(Mode::Rustc), \"parallel_compiler\", None),\n+    (Some(Mode::ToolRustc), \"parallel_compiler\", None),\n+    (Some(Mode::Std), \"miri\", None),\n+    (Some(Mode::Std), \"stdarch_intel_sde\", None),\n+    (Some(Mode::Std), \"no_fp_fmt_parse\", None),\n+    (Some(Mode::Std), \"no_global_oom_handling\", None),\n+    (Some(Mode::Std), \"freebsd12\", None),\n+    (Some(Mode::Std), \"backtrace_in_libstd\", None),\n+    // FIXME: Used by rustfmt is their test but is invalid (neither cargo nor bootstrap ever set\n+    // this config) should probably by removed or use a allow attribute.\n+    (Some(Mode::ToolRustc), \"release\", None),\n+    // FIXME: Used by stdarch in their test, should use a allow attribute instead.\n+    (Some(Mode::Std), \"dont_compile_me\", None),\n+    // FIXME: Used by serde_json, but we should not be triggering on external dependencies.\n+    (Some(Mode::Rustc), \"no_btreemap_remove_entry\", None),\n+    (Some(Mode::ToolRustc), \"no_btreemap_remove_entry\", None),\n+    // FIXME: Used by crossbeam-utils, but we should not be triggering on external dependencies.\n+    (Some(Mode::Rustc), \"crossbeam_loom\", None),\n+    (Some(Mode::ToolRustc), \"crossbeam_loom\", None),\n+    // FIXME: Used by proc-macro2, but we should not be triggering on external dependencies.\n+    (Some(Mode::Rustc), \"span_locations\", None),\n+    (Some(Mode::ToolRustc), \"span_locations\", None),\n+];\n+\n /// A structure representing a Rust compiler.\n ///\n /// Each compiler has a `stage` that it is associated with and a `host` that"}]}