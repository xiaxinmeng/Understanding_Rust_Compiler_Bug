{"sha": "dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYzRjNTIwMWY4OGVmYmMzMDIwYjA0YmE5NmE1ZWUyYzNiNmNmY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-24T19:22:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-24T19:22:13Z"}, "message": "Auto merge of #60777 - pietroalbini:azure-pipelines, r=alexcrichton\n\nAdd Azure Pipelines configuration\n\nHuge thanks to \uff20johnterickson and \uff20willsmythe for writing the initial config! :heart:\nI applied some changes to the initial config and disabled most of the builders since we're not going to run all of them during the initial step for the evaluation.\n\n[More details about our plans for the Azure Pipelines evaluation.](https://internals.rust-lang.org/t/update-on-the-ci-investigation/10056)\n\nr? \uff20alexcrichton \uff20kennytm\ncc \uff20rust-lang/infra \uff20ethomson \uff20rylev", "tree": {"sha": "37d6545208e7ef8c6c5c783321c7384fffd8eff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d6545208e7ef8c6c5c783321c7384fffd8eff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "html_url": "https://github.com/rust-lang/rust/commit/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc45382c125d940822368e866588568d78551946", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc45382c125d940822368e866588568d78551946", "html_url": "https://github.com/rust-lang/rust/commit/fc45382c125d940822368e866588568d78551946"}, {"sha": "2244ca3973fa4a43ef53a16826086e43eae86539", "url": "https://api.github.com/repos/rust-lang/rust/commits/2244ca3973fa4a43ef53a16826086e43eae86539", "html_url": "https://github.com/rust-lang/rust/commit/2244ca3973fa4a43ef53a16826086e43eae86539"}], "stats": {"total": 839, "additions": 817, "deletions": 22}, "files": [{"sha": "7bb38a4e8eb9e34f567b7ef514795c56d598f0ae", "filename": ".azure-pipelines/auto.yml", "status": "added", "additions": 350, "deletions": 0, "changes": 350, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fauto.yml?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -0,0 +1,350 @@\n+#\n+# Azure Pipelines \"auto\" branch build for Rust on Linux, macOS, and Windows.\n+#\n+\n+pr: none\n+trigger:\n+  - auto\n+\n+variables:\n+- group: prod-credentials\n+\n+jobs:\n+- job: Linux\n+  pool:\n+    vmImage: ubuntu-16.04\n+  steps:\n+  - template: steps/run.yml\n+  strategy:\n+    matrix:\n+      x86_64-gnu-llvm-6.0:\n+        IMAGE: x86_64-gnu-llvm-6.0\n+        RUST_BACKTRACE: 1\n+\n+      dist-x86_64-linux:\n+        IMAGE: dist-x86_64-linux\n+        DEPLOY: 1\n+\n+      # \"alternate\" deployments, these are \"nightlies\" but have LLVM assertions\n+      # turned on, they're deployed to a different location primarily for\n+      # additional testing.\n+      dist-x86_64-linux-alt:\n+        IMAGE: dist-x86_64-linux\n+        DEPLOY_ALT: 1\n+\n+      # Linux builders, remaining docker images\n+      arm-android:\n+        IMAGE: arm-android\n+\n+      armhf-gnu:\n+        IMAGE: armhf-gnu\n+\n+      dist-various-1:\n+        IMAGE: dist-various-1\n+        DEPLOY: 1\n+\n+      dist-various-2:\n+        IMAGE: dist-various-2\n+        DEPLOY: 1\n+\n+      dist-aarch64-linux:\n+        IMAGE: dist-aarch64-linux\n+        DEPLOY: 1\n+\n+      dist-android:\n+        IMAGE: dist-android\n+        DEPLOY: 1\n+\n+      dist-arm-linux:\n+        IMAGE: dist-arm-linux\n+        DEPLOY: 1\n+\n+      dist-armhf-linux:\n+        IMAGE: dist-armhf-linux\n+        DEPLOY: 1\n+\n+      dist-armv7-linux:\n+        IMAGE: dist-armv7-linux\n+        DEPLOY: 1\n+\n+      dist-i586-gnu-i586-i686-musl:\n+        IMAGE: dist-i586-gnu-i586-i686-musl\n+        DEPLOY: 1\n+\n+      dist-i686-freebsd:\n+        IMAGE: dist-i686-freebsd\n+        DEPLOY: 1\n+\n+      dist-i686-linux:\n+        IMAGE: dist-i686-linux\n+        DEPLOY: 1\n+\n+      dist-mips-linux:\n+        IMAGE: dist-mips-linux\n+        DEPLOY: 1\n+\n+      dist-mips64-linux:\n+        IMAGE: dist-mips64-linux\n+        DEPLOY: 1\n+\n+      dist-mips64el-linux:\n+        IMAGE: dist-mips64el-linux\n+        DEPLOY: 1\n+\n+      dist-mipsel-linux:\n+        IMAGE: dist-mipsel-linux\n+        DEPLOY: 1\n+\n+      dist-powerpc-linux:\n+        IMAGE: dist-powerpc-linux\n+        DEPLOY: 1\n+\n+      dist-powerpc64-linux:\n+        IMAGE: dist-powerpc64-linux\n+        DEPLOY: 1\n+\n+      dist-powerpc64le-linux:\n+        IMAGE: dist-powerpc64le-linux\n+        DEPLOY: 1\n+\n+      dist-s390x-linux:\n+        IMAGE: dist-s390x-linux\n+        DEPLOY: 1\n+\n+      dist-x86_64-freebsd:\n+        IMAGE: dist-x86_64-freebsd\n+        DEPLOY: 1\n+\n+      dist-x86_64-musl:\n+        IMAGE: dist-x86_64-musl\n+        DEPLOY: 1\n+\n+      dist-x86_64-netbsd:\n+        IMAGE: dist-x86_64-netbsd\n+        DEPLOY: 1\n+\n+      asmjs:\n+        IMAGE: asmjs\n+      i686-gnu:\n+        IMAGE: i686-gnu\n+      i686-gnu-nopt:\n+        IMAGE: i686-gnu-nopt\n+      test-various:\n+        IMAGE: test-various\n+      x86_64-gnu:\n+        IMAGE: x86_64-gnu\n+      x86_64-gnu-full-bootstrap:\n+        IMAGE: x86_64-gnu-full-bootstrap\n+      x86_64-gnu-aux:\n+        IMAGE: x86_64-gnu-aux\n+      x86_64-gnu-tools:\n+        IMAGE: x86_64-gnu-tools\n+      # FIXME if: branch = auto OR (type = pull_request AND commit_message =~ /(?i:^update.*\\b(rls|rustfmt|clippy|miri|cargo)\\b)/)\n+      x86_64-gnu-debug:\n+        IMAGE: x86_64-gnu-debug\n+      x86_64-gnu-nopt:\n+        IMAGE: x86_64-gnu-nopt\n+      x86_64-gnu-distcheck:\n+        IMAGE: x86_64-gnu-distcheck\n+      mingw-check:\n+        IMAGE: mingw-check\n+\n+- job: macOS\n+  pool:\n+    vmImage: macos-10.13\n+  steps:\n+  - checkout: self\n+    fetchDepth: 2\n+  - template: steps/run.yml\n+  strategy:\n+    matrix:\n+      # OSX builders running tests, these run the full test suite.\n+      # NO_DEBUG_ASSERTIONS=1 to make them go faster, but also do have some\n+      # runners that run `//ignore-debug` tests.\n+      #\n+      # Note that the compiler is compiled to target 10.8 here because the Xcode\n+      # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n+      x86_64-apple:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+\n+      dist-x86_64-apple:\n+        RUST_CHECK_TARGET: dist\n+        RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --enable-lldb --set rust.jemalloc\n+        DEPLOY: 1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+\n+      dist-x86_64-apple-alt:\n+        RUST_CHECK_TARGET: dist\n+        RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --enable-lldb --set rust.jemalloc\n+        DEPLOY_ALT: 1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+\n+      i686-apple:\n+        RUST_CHECK_TARGET: check\n+        RUST_CONFIGURE_ARGS: --build=i686-apple-darwin --set rust.jemalloc\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+\n+      dist-i686-apple:\n+        RUST_CHECK_TARGET: dist\n+        RUST_CONFIGURE_ARGS: --build=i686-apple-darwin --enable-full-tools --enable-profiler --enable-lldb --set rust.jemalloc\n+        DEPLOY: 1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+\n+\n+\n+- job: Windows\n+  pool:\n+    vmImage: 'vs2017-win2016'\n+  steps:\n+  - template: steps/run.yml\n+  strategy:\n+    matrix:\n+      # 32/64 bit MSVC tests\n+      x86_64-msvc-1:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        SCRIPT: make ci-subset-1\n+        # FIXME(#59637)\n+        NO_DEBUG_ASSERTIONS: 1\n+        NO_LLVM_ASSERTIONS: 1\n+      x86_64-msvc-2:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+        SCRIPT: make ci-subset-2\n+      i686-msvc-1:\n+        MSYS_BITS: 32\n+        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n+        SCRIPT: make ci-subset-1\n+      i686-msvc-2:\n+        MSYS_BITS: 32\n+        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n+        SCRIPT: make ci-subset-2\n+      # MSVC aux tests\n+      x86_64-msvc-aux:\n+        MSYS_BITS: 64\n+        RUST_CHECK_TARGET: check-aux EXCLUDE_CARGO=1\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n+      x86_64-msvc-cargo:\n+        MSYS_BITS: 64\n+        SCRIPT: python x.py test src/tools/cargotest src/tools/cargo\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n+        VCVARS_BAT: vcvars64.bat\n+      # MSVC tools tests\n+      x86_64-msvc-tools:\n+        MSYS_BITS: 64\n+        SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri\n+\n+      # 32/64-bit MinGW builds.\n+      #\n+      # We are using MinGW with posix threads since LLVM does not compile with\n+      # the win32 threads version due to missing support for C++'s std::thread.\n+      #\n+      # Instead of relying on the MinGW version installed on appveryor we download\n+      # and install one ourselves so we won't be surprised by changes to appveyor's\n+      # build image.\n+      #\n+      # Finally, note that the downloads below are all in the `rust-lang-ci` S3\n+      # bucket, but they cleraly didn't originate there! The downloads originally\n+      # came from the mingw-w64 SourceForge download site. Unfortunately\n+      # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.\n+      i686-mingw-1:\n+        MSYS_BITS: 32\n+        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n+        SCRIPT: make ci-subset-1\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n+        MINGW_DIR: mingw32\n+        # FIXME(#59637)\n+        NO_DEBUG_ASSERTIONS: 1\n+        NO_LLVM_ASSERTIONS: 1\n+      i686-mingw-2:\n+        MSYS_BITS: 32\n+        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n+        SCRIPT: make ci-subset-2\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n+        MINGW_DIR: mingw32\n+      x86_64-mingw-1:\n+        MSYS_BITS: 64\n+        SCRIPT: make ci-subset-1\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n+        MINGW_DIR: mingw64\n+        # FIXME(#59637)\n+        NO_DEBUG_ASSERTIONS: 1\n+        NO_LLVM_ASSERTIONS: 1\n+      x86_64-mingw-2:\n+        MSYS_BITS: 64\n+        SCRIPT: make ci-subset-2\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n+        MINGW_DIR: mingw64\n+\n+      # 32/64 bit MSVC and GNU deployment\n+      dist-x86_64-msvc:\n+        RUST_CONFIGURE_ARGS: >\n+          --build=x86_64-pc-windows-msvc\n+          --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc\n+          --enable-full-tools\n+          --enable-profiler\n+        SCRIPT: python x.py dist\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+        DEPLOY: 1\n+      dist-i686-msvc:\n+        RUST_CONFIGURE_ARGS: >\n+          --build=i686-pc-windows-msvc\n+          --target=i586-pc-windows-msvc\n+          --enable-full-tools\n+          --enable-profiler\n+        SCRIPT: python x.py dist\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+        DEPLOY: 1\n+      dist-i686-mingw:\n+        MSYS_BITS: 32\n+        RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools\n+        SCRIPT: python x.py dist\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n+        MINGW_DIR: mingw32\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+        DEPLOY: 1\n+      dist-x86_64-mingw:\n+        MSYS_BITS: 64\n+        SCRIPT: python x.py dist\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools\n+        MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n+        MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n+        MINGW_DIR: mingw64\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+        DEPLOY: 1\n+\n+      # \"alternate\" deployment, see .travis.yml for more info\n+      dist-x86_64-msvc-alt:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n+        SCRIPT: python x.py dist\n+        DEPLOY_ALT: 1"}, {"sha": "3f3025ad65b66fa443700f1282ea54097c70e5f1", "filename": ".azure-pipelines/master.yml", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fmaster.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fmaster.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fmaster.yml?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -0,0 +1,24 @@\n+#\n+# Azure Pipelines job to publish toolstate. Only triggers on pushes to master.\n+#\n+\n+pr: none\n+trigger:\n+  - master\n+\n+pool:\n+  vmImage: ubuntu-16.04\n+\n+steps:\n+- checkout: self\n+  fetchDepth: 2\n+\n+- script: |\n+    export MESSAGE_FILE=$(mktemp -t msg.XXXXXX)\n+    . src/ci/docker/x86_64-gnu-tools/repo.sh\n+    # FIXME(pietro): committing is disabled until we switch to Azure Pipelines\n+    # as the source of truth, or until we setup a separate test repo.\n+    #commit_toolstate_change \"$MESSAGE_FILE\" \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"$MESSAGE_FILE\" \"$TOOLSTATE_REPO_ACCESS_TOKEN\"\n+  displayName: Publish toolstate\n+  env:\n+    TOOLSTATE_REPO_ACCESS_TOKEN: $(TOOLSTATE_REPO_ACCESS_TOKEN_SECRET)"}, {"sha": "84c9454fee57f7c2a23037c5a89f37130be3ea56", "filename": ".azure-pipelines/pr.yml", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fpr.yml?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -0,0 +1,22 @@\n+#\n+# Azure Pipelines pull request build for Rust\n+#\n+\n+trigger: none\n+pr:\n+- master # FIXME: really just want any branch, but want an explicit \"pr\" property set so it's clear\n+\n+jobs:\n+- job: Linux\n+  pool:\n+    vmImage: ubuntu-16.04\n+  steps:\n+    - template: steps/run.yml\n+  strategy:\n+    matrix:\n+      x86_64-gnu-llvm-6.0:\n+        RUST_BACKTRACE: 1\n+\n+#      x86_64-gnu-tools: {}\n+#      # if: branch = auto OR (type = pull_request AND commit_message =~ /(?i:^update.*\\b(rls|rustfmt|clippy|miri|cargo)\\b)/)\n+#      mingw-check: {}"}, {"sha": "26a223282cd87a8666ee5f4ccb8472675242d135", "filename": ".azure-pipelines/steps/install-clang.yml", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fsteps%2Finstall-clang.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fsteps%2Finstall-clang.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-clang.yml?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -0,0 +1,40 @@\n+steps:\n+\n+- bash: |\n+    set -e\n+    curl -f http://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-apple-darwin.tar.xz | tar xJf -\n+\n+    export CC=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang\n+    echo \"##vso[task.setvariable variable=CC]$CC\"\n+\n+    export CXX=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++\n+    echo \"##vso[task.setvariable variable=CXX]$CXX\"\n+\n+    # Configure `AR` specifically so rustbuild doesn't try to infer it as\n+    # `clang-ar` by accident.\n+    echo \"##vso[task.setvariable variable=AR]ar\"\n+  displayName: Install clang (OSX)\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))\n+\n+# If we're compiling for MSVC then we, like most other distribution builders,\n+# switch to clang as the compiler. This'll allow us eventually to enable LTO\n+# amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n+# clang has an output mode compatible with MinGW that we need. If it does we\n+# should switch to clang for MinGW as well!\n+#\n+# Note that the LLVM installer is an NSIS installer\n+#\n+# Original downloaded here came from\n+# http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n+- script: |\n+    powershell -Command \"iwr -outf %TEMP%\\LLVM-7.0.0-win64.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-7.0.0-win64.exe\"\n+    set CLANG_DIR=%CD%\\citools\\clang-rust\n+    %TEMP%\\LLVM-7.0.0-win64.exe /S /NCRC /D=%CLANG_DIR%\n+    set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=%CLANG_DIR%\\bin\\clang-cl.exe\n+    echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['MINGW_URL'],''))\n+  displayName: Install clang (Windows)\n+\n+# Note that we don't install clang on Linux since its compiler story is just so\n+# different. Each container has its own toolchain configured appropriately\n+# already."}, {"sha": "39f58002a7358d18b90aea4ba504d726b524ac07", "filename": ".azure-pipelines/steps/install-sccache.yml", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fsteps%2Finstall-sccache.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fsteps%2Finstall-sccache.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-sccache.yml?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -0,0 +1,21 @@\n+steps:\n+\n+- bash: |\n+    set -e\n+    curl -fo /usr/local/bin/sccache https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-02-sccache-x86_64-apple-darwin\n+    chmod +x /usr/local/bin/sccache\n+  displayName: Install sccache (OSX)\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))\n+\n+- script: |\n+    md sccache\n+    powershell -Command \"iwr -outf sccache\\sccache.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n+    echo ##vso[task.prependpath]%CD%\\sccache\n+  displayName: Install sccache (Windows)\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n+\n+# Note that we don't install sccache on Linux since it's installed elsewhere\n+# through all the containers.\n+#\n+# FIXME: we should probably install sccache outside the containers and then\n+# mount it inside the containers so we can centralize all installation here."}, {"sha": "037c8daa2a80af06a0b11aea5b6a5c4c2601f5e9", "filename": ".azure-pipelines/steps/install-windows-build-deps.yml", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -0,0 +1,91 @@\n+steps:\n+# We've had issues with the default drive in use running out of space during a\n+# build, and it looks like the `C:` drive has more space than the default `D:`\n+# drive. We should probably confirm this with the azure pipelines team at some\n+# point, but this seems to fix our \"disk space full\" problems.\n+- script: |\n+    mkdir c:\\MORE_SPACE\n+    mklink /J build c:\\MORE_SPACE\n+  displayName: \"Ensure build happens on C:/ instead of D:/\"\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n+\n+# Download and install MSYS2, needed primarily for the test suite (run-make) but\n+# also used by the MinGW toolchain for assembling things.\n+#\n+# FIXME: we should probe the default azure image and see if we can use the MSYS2\n+# toolchain there. (if there's even one there). For now though this gets the job\n+# done.\n+- script: |\n+    set MSYS_PATH=%CD%\\citools\\msys64\n+    choco install msys2 --params=\"/InstallDir:%MSYS_PATH% /NoPath\" -y\n+    set PATH=%MSYS_PATH%\\usr\\bin;%PATH%\n+    pacman -S --noconfirm --needed base-devel ca-certificates make diffutils tar\n+    IF \"%MINGW_URL%\"==\"\" (\n+      IF \"%MSYS_BITS%\"==\"32\" pacman -S --noconfirm --needed mingw-w64-i686-toolchain mingw-w64-i686-cmake mingw-w64-i686-gcc mingw-w64-i686-python2\n+      IF \"%MSYS_BITS%\"==\"64\" pacman -S --noconfirm --needed mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc mingw-w64-x86_64-python2\n+    )\n+    where rev\n+    rev --help\n+    where make\n+\n+    echo ##vso[task.setvariable variable=MSYS_PATH]%MSYS_PATH%\n+    echo ##vso[task.prependpath]%MSYS_PATH%\\usr\\bin\n+  displayName: Install msys2\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n+\n+# If we need to download a custom MinGW, do so here and set the path\n+# appropriately.\n+#\n+# Here we also do a pretty heinous thing which is to mangle the MinGW\n+# installation we just downloaded. Currently, as of this writing, we're using\n+# MinGW-w64 builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it\n+# appears to be the first version which contains a fix for #40546, builds\n+# randomly failing during LLVM due to ar.exe/ranlib.exe failures.\n+#\n+# Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n+# to contain a regression in gdb (#40184). As a result if we were to use the\n+# gdb provided (7.11.1) then we would fail all debuginfo tests.\n+#\n+# In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n+# avoid disabling gdb tests we download an *old* version of gdb, specifically\n+# that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n+# with the 6.2.0 gdb to get tests passing.\n+#\n+# Note that we don't literally overwrite the gdb.exe binary because it appears\n+# to just use gdborig.exe, so that's the binary we deal with instead.\n+- script: |\n+    powershell -Command \"iwr -outf %MINGW_ARCHIVE% %MINGW_URL%/%MINGW_ARCHIVE%\"\n+    7z x -y %MINGW_ARCHIVE% > nul\n+    powershell -Command \"iwr -outf 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\"\n+    mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\\bin\\gdborig.exe\n+    echo ##vso[task.prependpath]%CD%\\%MINGW_DIR%\\bin\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['MINGW_URL'],''))\n+  displayName: Download custom MinGW\n+\n+# Otherwise pull in the MinGW installed on appveyor\n+- script: |\n+    echo ##vso[task.prependpath]%MSYS_PATH%\\mingw%MSYS_BITS%\\bin\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['MINGW_URL'],''))\n+  displayName: Add MinGW to path\n+\n+# Make sure we use the native python interpreter instead of some msys equivalent\n+# one way or another. The msys interpreters seem to have weird path conversions\n+# baked in which break LLVM's build system one way or another, so let's use the\n+# native version which keeps everything as native as possible.\n+- script: |\n+    copy C:\\Python27amd64\\python.exe C:\\Python27amd64\\python2.7.exe\n+    echo ##vso[task.prependpath]C:\\Python27amd64\n+  displayName: Prefer the \"native\" Python as LLVM has trouble building with MSYS sometimes\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n+\n+# Note that this is originally from the github releases patch of Ninja\n+- script: |\n+    md ninja\n+    powershell -Command \"iwr -outf 2017-03-15-ninja-win.zip https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-15-ninja-win.zip\"\n+    7z x -oninja 2017-03-15-ninja-win.zip\n+    del 2017-03-15-ninja-win.zip\n+    set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja\n+    echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n+    echo ##vso[task.prependpath]%CD%\\ninja\n+  displayName: Download and install ninja\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))"}, {"sha": "47a4c183085127f2288d567d5c000cde8ecbfa15", "filename": ".azure-pipelines/steps/run.yml", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Frun.yml?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -0,0 +1,137 @@\n+# FIXME(linux): need to configure core dumps, enable them, and then dump\n+# backtraces on failure from all core dumps:\n+#\n+# - bash: sudo apt install gdb\n+# - bash: sudo sh -c 'echo \"/checkout/obj/cores/core.%p.%E\" > /proc/sys/kernel/core_pattern'\n+#\n+# Check travis config for `gdb --batch` command to print all crash logs\n+\n+steps:\n+\n+- checkout: self\n+  fetchDepth: 2\n+\n+- bash: printenv | sort\n+  displayName: Show environment variables\n+\n+- bash: |\n+    set -e\n+    df -h\n+    du . | sort -nr | head -n100\n+  displayName: Show disk usage\n+  # FIXME: this hasn't been tested, but maybe it works on Windows? Should test!\n+  condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))\n+\n+- template: install-sccache.yml\n+- template: install-clang.yml\n+\n+# Install some dependencies needed to build LLDB/Clang, currently only needed\n+# during the `dist` target\n+- bash: |\n+    set -e\n+    brew update\n+    brew install xz\n+    brew install swig\n+  displayName: Install build dependencies (OSX)\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'), eq(variables['RUST_CHECK_TARGET'],'dist'))\n+\n+# Switch to XCode 9.3 on OSX since it seems to be the last version that supports\n+# i686-apple-darwin. We'll eventually want to upgrade this and it will probably\n+# force us to drop i686-apple-darwin, but let's keep the wheels turning for now.\n+- bash: |\n+    set -e\n+    sudo xcode-select --switch /Applications/Xcode_9.3.app\n+  displayName: Switch to Xcode 9.3 (OSX)\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))\n+\n+- template: install-windows-build-deps.yml\n+\n+# Looks like docker containers have IPv6 disabled by default, so let's turn it\n+# on since libstd tests require it\n+- bash: |\n+    set -e\n+    echo '{\"ipv6\":true,\"fixed-cidr-v6\":\"fd9a:8454:6789:13f7::/64\"}' | sudo tee /etc/docker/daemon.json\n+    sudo service docker restart\n+  displayName: Enable IPv6\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))\n+\n+# Check out all our submodules, but more quickly than using git by using one of\n+# our custom scripts\n+- bash: |\n+    set -e\n+    mkdir -p $HOME/rustsrc\n+    $BUILD_SOURCESDIRECTORY/src/ci/init_repo.sh . $HOME/rustsrc\n+  condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))\n+  displayName: Check out submodules (Unix)\n+- script: |\n+    if not exist D:\\cache\\rustsrc\\NUL mkdir D:\\cache\\rustsrc\n+    sh src/ci/init_repo.sh . /d/cache/rustsrc\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n+  displayName: Check out submodules (Windows)\n+\n+# Ensure the `aws` CLI is installed so we can deploy later on, cache docker\n+# images, etc.\n+- bash: |\n+    set -e\n+    sudo apt-get install -y python3-setuptools\n+    pip3 install awscli --upgrade --user\n+    echo \"##vso[task.prependpath]$HOME/.local/bin\"\n+  displayName: Install awscli (Linux)\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))\n+- script: pip install awscli\n+  displayName: Install awscli (non-Linux)\n+  condition: and(succeeded(), ne(variables['Agent.OS'], 'Linux'))\n+\n+# Configure our CI_JOB_NAME variable which log analyzers can use for the main\n+# step to see what's going on.\n+- bash: echo \"##vso[task.setvariable variable=CI_JOB_NAME]$SYSTEM_JOBNAME\"\n+  displayName: Configure Job Name\n+\n+# As a quick smoke check on the otherwise very fast mingw-check linux builder\n+# check our own internal scripts.\n+- bash: |\n+    set -e\n+    git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git\n+    cd rust-toolstate\n+    python2.7 \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"\" \"\"\n+    cd ..\n+    rm -rf rust-toolstate\n+  condition: and(succeeded(), eq(variables['IMAGE'], 'mingw-check'))\n+  displayName: Verify the publish_toolstate script works\n+\n+- bash: |\n+    set -e\n+    if [ \"$IMAGE\" = \"\" ]; then\n+      src/ci/run.sh\n+    else\n+      src/ci/docker/run.sh $IMAGE\n+    fi\n+  #timeoutInMinutes: 180\n+  timeoutInMinutes: 600\n+  env:\n+    CI: true\n+    SRC: .\n+    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)\n+  displayName: Run build\n+\n+# If we're a deploy builder, use the `aws` command to publish everything to our\n+# bucket.\n+- bash: |\n+    set -e\n+    if [ \"$AGENT_OS\" = \"Linux\" ]; then\n+        rm -rf obj/build/dist/doc\n+        upload_dir=obj/build/dist\n+    else\n+        rm -rf build/dist/doc\n+        upload_dir=build/dist\n+    fi\n+    ls -la $upload_dir\n+    deploy_dir=rustc-builds\n+    if [ \"$DEPLOY_ALT\" == \"1\" ]; then\n+        deploy_dir=rustc-builds-alt\n+    fi\n+    aws s3 cp --no-progress --recursive --acl public-read ./$upload_dir s3://$DEPLOY_BUCKET/$deploy_dir/$BUILD_SOURCEVERSION\n+  env:\n+    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)\n+  condition: and(succeeded(), or(eq(variables.DEPLOY, '1'), eq(variables.DEPLOY_ALT, '1')))\n+  displayName: Upload artifacts"}, {"sha": "f37bb7d26ed6d286df47fe9950128cf62062bc4f", "filename": ".azure-pipelines/try.yml", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Ftry.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/.azure-pipelines%2Ftry.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Ftry.yml?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -0,0 +1,78 @@\n+#\n+# Azure Pipelines \"auto\" branch build for Rust on Linux, macOS, and Windows.\n+#\n+\n+pr: none\n+trigger:\n+- try\n+\n+variables:\n+- group: prod-credentials\n+\n+jobs:\n+- job: Linux\n+  timeoutInMinutes: 600\n+  pool:\n+    vmImage: ubuntu-16.04\n+  steps:\n+  - template: steps/run.yml\n+  strategy:\n+    matrix:\n+      dist-x86_64-linux:\n+        IMAGE: dist-x86_64-linux\n+        DEPLOY: 1\n+\n+      dist-x86_64-linux-alt:\n+        IMAGE: dist-x86_64-linux\n+        DEPLOY_ALT: 1\n+\n+- job: macOS\n+  timeoutInMinutes: 600\n+  pool:\n+    vmImage: macos-10.13\n+  steps:\n+  - template: steps/run.yml\n+  strategy:\n+    matrix:\n+      dist-x86_64-apple:\n+        RUST_CHECK_TARGET: dist\n+        RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --enable-lldb --set rust.jemalloc\n+        DEPLOY: 1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+\n+      dist-x86_64-apple-alt:\n+        RUST_CHECK_TARGET: dist\n+        RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --enable-lldb --set rust.jemalloc\n+        DEPLOY_ALT: 1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+        MACOSX_DEPLOYMENT_TARGET: 10.7\n+        NO_LLVM_ASSERTIONS: 1\n+        NO_DEBUG_ASSERTIONS: 1\n+\n+- job: Windows\n+  timeoutInMinutes: 600\n+  pool:\n+    vmImage: 'vs2017-win2016'\n+  steps:\n+  - template: steps/run.yml\n+  strategy:\n+    matrix:\n+      dist-x86_64-msvc:\n+        RUST_CONFIGURE_ARGS: >\n+          --build=x86_64-pc-windows-msvc\n+          --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc\n+          --enable-full-tools\n+          --enable-profiler\n+        SCRIPT: python x.py dist\n+        DIST_REQUIRE_ALL_TOOLS: 1\n+        DEPLOY: 1\n+\n+      dist-x86_64-msvc-alt:\n+        MSYS_BITS: 64\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n+        SCRIPT: python x.py dist\n+        DEPLOY_ALT: 1"}, {"sha": "c35da8927ce93520f4f94520660c5c0f9f470eee", "filename": "appveyor.yml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -20,11 +20,11 @@ environment:\n   - CI_JOB_NAME: i686-msvc-1\n     MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n-    SCRIPT: make appveyor-subset-1\n+    SCRIPT: make ci-subset-1\n   - CI_JOB_NAME: i686-msvc-2\n     MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n-    SCRIPT: make appveyor-subset-2\n+    SCRIPT: make ci-subset-2\n \n   # MSVC aux tests\n   - CI_JOB_NAME: x86_64-msvc-aux\n@@ -58,7 +58,7 @@ environment:\n   - CI_JOB_NAME: i686-mingw-1\n     MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n-    SCRIPT: make appveyor-subset-1\n+    SCRIPT: make ci-subset-1\n     MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n@@ -68,7 +68,7 @@ environment:\n   - CI_JOB_NAME: i686-mingw-2\n     MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n-    SCRIPT: make appveyor-subset-2\n+    SCRIPT: make ci-subset-2\n     MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32"}, {"sha": "ea05b30eceff9f1c0e3525a45367028fa5e1c3ad", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -80,9 +80,9 @@ TESTS_IN_2 := \\\n \tsrc/test/run-pass-fulldeps \\\n \tsrc/tools/linkchecker\n \n-appveyor-subset-1:\n+ci-subset-1:\n \t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2:%=--exclude %)\n-appveyor-subset-2:\n+ci-subset-2:\n \t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2)\n \n "}, {"sha": "f22f0559265b11ef6d0f5bbb526b722e5359c91d", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -326,6 +326,8 @@ pub enum CiEnv {\n     Travis,\n     /// The AppVeyor environment, for Windows builds.\n     AppVeyor,\n+    /// The Azure Pipelines environment, for Linux (including Docker), Windows, and macOS builds.\n+    AzurePipelines,\n }\n \n impl CiEnv {\n@@ -335,6 +337,8 @@ impl CiEnv {\n             CiEnv::Travis\n         } else if env::var(\"APPVEYOR\").ok().map_or(false, |e| &*e == \"True\") {\n             CiEnv::AppVeyor\n+        } else if env::var(\"TF_BUILD\").ok().map_or(false, |e| &*e == \"True\") {\n+            CiEnv::AzurePipelines\n         } else {\n             CiEnv::None\n         }"}, {"sha": "bf449c83f12f1fe04559184626d007803d0a35bf", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -32,9 +32,10 @@ COPY dist-various-2/build-cloudabi-toolchain.sh /tmp/\n RUN /tmp/build-cloudabi-toolchain.sh x86_64-unknown-cloudabi\n COPY dist-various-2/build-fuchsia-toolchain.sh /tmp/\n RUN /tmp/build-fuchsia-toolchain.sh\n-COPY dist-various-2/build-solaris-toolchain.sh /tmp/\n-RUN /tmp/build-solaris-toolchain.sh x86_64  amd64   solaris-i386\n-RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n+# FIXME(#61022) - reenable solaris\n+# COPY dist-various-2/build-solaris-toolchain.sh /tmp/\n+# RUN /tmp/build-solaris-toolchain.sh x86_64  amd64   solaris-i386\n+# RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n COPY dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh /tmp/\n # We pass the commit id of the port of LLVM's libunwind to the build script.\n # Any update to the commit id here, should cause the container image to be re-built from this point on.\n@@ -73,10 +74,11 @@ ENV CARGO_TARGET_AARCH64_FUCHSIA_RUSTFLAGS \\\n \n ENV TARGETS=x86_64-fuchsia\n ENV TARGETS=$TARGETS,aarch64-fuchsia\n-ENV TARGETS=$TARGETS,sparcv9-sun-solaris\n ENV TARGETS=$TARGETS,wasm32-unknown-unknown\n ENV TARGETS=$TARGETS,wasm32-wasi\n-ENV TARGETS=$TARGETS,x86_64-sun-solaris\n+# FIXME(#61022) - reenable solaris\n+# ENV TARGETS=$TARGETS,sparcv9-sun-solaris\n+# ENV TARGETS=$TARGETS,x86_64-sun-solaris\n ENV TARGETS=$TARGETS,x86_64-unknown-linux-gnux32\n ENV TARGETS=$TARGETS,x86_64-unknown-cloudabi\n ENV TARGETS=$TARGETS,x86_64-fortanix-unknown-sgx"}, {"sha": "c9642dbf60c66b52745527813a1a98c4cb217e0d", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -40,9 +40,12 @@ if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n       docker --version >> $hash_key\n       cksum=$(sha512sum $hash_key | \\\n         awk '{print $1}')\n+\n       s3url=\"s3://$SCCACHE_BUCKET/docker/$cksum\"\n-      url=\"https://s3-us-west-1.amazonaws.com/$SCCACHE_BUCKET/docker/$cksum\"\n-      echo \"Attempting to download $s3url\"\n+      url=\"https://$SCCACHE_BUCKET.s3.amazonaws.com/docker/$cksum\"\n+      upload=\"aws s3 cp - $s3url\"\n+\n+      echo \"Attempting to download $url\"\n       rm -f /tmp/rustci_docker_cache\n       set +e\n       retry curl -y 30 -Y 10 --connect-timeout 30 -f -L -C - -o /tmp/rustci_docker_cache \"$url\"\n@@ -65,17 +68,17 @@ if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n       -f \"$dockerfile\" \\\n       \"$context\"\n \n-    if [ \"$s3url\" != \"\" ]; then\n+    if [ \"$upload\" != \"\" ]; then\n       digest=$(docker inspect rust-ci --format '{{.Id}}')\n       echo \"Built container $digest\"\n       if ! grep -q \"$digest\" <(echo \"$loaded_images\"); then\n-        echo \"Uploading finished image to $s3url\"\n+        echo \"Uploading finished image to $url\"\n         set +e\n         docker history -q rust-ci | \\\n           grep -v missing | \\\n           xargs docker save | \\\n           gzip | \\\n-          aws s3 cp - $s3url\n+          $upload\n         set -e\n       else\n         echo \"Looks like docker image is the same as before, not uploading\"\n@@ -87,8 +90,8 @@ if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n       echo \"$digest\" >>\"$info\"\n     fi\n elif [ -f \"$docker_dir/disabled/$image/Dockerfile\" ]; then\n-    if [ -n \"$TRAVIS_OS_NAME\" ]; then\n-        echo Cannot run disabled images on travis!\n+    if isCI; then\n+        echo Cannot run disabled images on CI!\n         exit 1\n     fi\n     # retry messes with the pipe from tar to docker. Not needed on non-travis\n@@ -140,8 +143,11 @@ exec docker \\\n   --env DEPLOY \\\n   --env DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n+  --env CI \\\n   --env TRAVIS \\\n   --env TRAVIS_BRANCH \\\n+  --env TF_BUILD \\\n+  --env BUILD_SOURCEBRANCHNAME \\\n   --env TOOLSTATE_REPO_ACCESS_TOKEN \\\n   --env CI_JOB_NAME=\"${CI_JOB_NAME-$IMAGE}\" \\\n   --volume \"$HOME/.cargo:/cargo\" \\"}, {"sha": "8ead6e0e4bd6b7c8ff73e137d0a9c2a6faab1db5", "filename": "src/ci/run.sh", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -23,7 +23,9 @@ fi\n ci_dir=`cd $(dirname $0) && pwd`\n source \"$ci_dir/shared.sh\"\n \n-if [ \"$TRAVIS\" != \"true\" ] || [ \"$TRAVIS_BRANCH\" == \"auto\" ]; then\n+branch_name=$(getCIBranch)\n+\n+if [ ! isCI ] || [ \"$branch_name\" = \"auto\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.print-step-timings --enable-verbose-tests\"\n fi\n \n@@ -44,7 +46,7 @@ fi\n # FIXME: need a scheme for changing this `nightly` value to `beta` and `stable`\n #        either automatically or manually.\n export RUST_RELEASE_CHANNEL=nightly\n-if [ \"$DEPLOY$DEPLOY_ALT\" != \"\" ]; then\n+if [ \"$DEPLOY$DEPLOY_ALT\" = \"1\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.remap-debuginfo\"\n@@ -110,7 +112,7 @@ travis_time_finish\n # Display the CPU and memory information. This helps us know why the CI timing\n # is fluctuating.\n travis_fold start log-system-info\n-if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n+if isOSX; then\n     system_profiler SPHardwareDataType || true\n     sysctl hw || true\n     ncpus=$(sysctl -n hw.ncpu)\n@@ -139,3 +141,5 @@ else\n   do_make all\n   do_make \"$RUST_CHECK_TARGET\"\n fi\n+\n+sccache --show-stats || true"}, {"sha": "1e667fca5875afd8b57213211c3cdb63bd1207af", "filename": "src/ci/shared.sh", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -24,6 +24,22 @@ function retry {\n   done\n }\n \n+function isCI {\n+  [ \"$CI\" = \"true\" ] || [ \"$TRAVIS\" = \"true\" ] || [ \"$TF_BUILD\" = \"True\" ]\n+}\n+\n+function isOSX {\n+  [ \"$TRAVIS_OS_NAME\" = \"osx\" ] || [ \"$AGENT_OS\" = \"Darwin\" ]\n+}\n+\n+function getCIBranch {\n+  if [ \"$TRAVIS\" = \"true\" ]; then\n+    echo \"$TRAVIS_BRANCH\"\n+  else\n+    echo \"$BUILD_SOURCEBRANCHNAME\"\n+  fi;\n+}\n+\n if ! declare -F travis_fold; then\n   if [ \"${TRAVIS-false}\" = 'true' ]; then\n     # This is a trimmed down copy of"}, {"sha": "14035eedbb44b4d15af533dbc03c0e2bcde1fab6", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=dec4c5201f88efbc3020b04ba96a5ee2c3b6cfcd", "patch": "@@ -61,7 +61,7 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"webrender\",\n         repo: \"https://github.com/servo/webrender\",\n-        sha: \"57250b2b8fa63934f80e5376a29f7dcb3f759ad6\",\n+        sha: \"cdadd068f4c7218bd983d856981d561e605270ab\",\n         lock: None,\n         packages: &[],\n     },"}]}