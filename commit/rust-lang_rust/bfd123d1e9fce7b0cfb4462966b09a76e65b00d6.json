{"sha": "bfd123d1e9fce7b0cfb4462966b09a76e65b00d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZDEyM2QxZTlmY2U3YjBjZmI0NDYyOTY2YjA5YTc2ZTY1YjAwZDY=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2016-08-27T09:12:25Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2016-09-11T23:00:50Z"}, "message": "Use question_mark feature in libcore.", "tree": {"sha": "e20bb220add1fa465d30b2db1301f50124445d1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e20bb220add1fa465d30b2db1301f50124445d1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfd123d1e9fce7b0cfb4462966b09a76e65b00d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd123d1e9fce7b0cfb4462966b09a76e65b00d6", "html_url": "https://github.com/rust-lang/rust/commit/bfd123d1e9fce7b0cfb4462966b09a76e65b00d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfd123d1e9fce7b0cfb4462966b09a76e65b00d6/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d88ab57b3e308456c79694e281dbd4f08603f13", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d88ab57b3e308456c79694e281dbd4f08603f13", "html_url": "https://github.com/rust-lang/rust/commit/6d88ab57b3e308456c79694e281dbd4f08603f13"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "1ca550c67463c3606c8db65c78577235ca283feb", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfd123d1e9fce7b0cfb4462966b09a76e65b00d6/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd123d1e9fce7b0cfb4462966b09a76e65b00d6/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=bfd123d1e9fce7b0cfb4462966b09a76e65b00d6", "patch": "@@ -474,9 +474,9 @@ macro_rules! define_bignum {\n                 let sz = if self.size < 1 {1} else {self.size};\n                 let digitlen = mem::size_of::<$ty>() * 2;\n \n-                try!(write!(f, \"{:#x}\", self.base[sz-1]));\n+                write!(f, \"{:#x}\", self.base[sz-1])?;\n                 for &v in self.base[..sz-1].iter().rev() {\n-                    try!(write!(f, \"_{:01$x}\", v, digitlen));\n+                    write!(f, \"_{:01$x}\", v, digitlen)?;\n                 }\n                 ::result::Result::Ok(())\n             }"}]}