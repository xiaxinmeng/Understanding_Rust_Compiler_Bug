{"sha": "c1b187d41b2cb16a409259f1530bc8fcc705364f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYjE4N2Q0MWIyY2IxNmE0MDkyNTlmMTUzMGJjOGZjYzcwNTM2NGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-24T04:06:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-24T04:06:03Z"}, "message": "auto merge of #9454 : alexcrichton/rust/snapshot, r=thestinger", "tree": {"sha": "e9cde0daddc608969087b57792480db7d9359fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9cde0daddc608969087b57792480db7d9359fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b187d41b2cb16a409259f1530bc8fcc705364f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b187d41b2cb16a409259f1530bc8fcc705364f", "html_url": "https://github.com/rust-lang/rust/commit/c1b187d41b2cb16a409259f1530bc8fcc705364f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b187d41b2cb16a409259f1530bc8fcc705364f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d062de8aa48083439237cb338b38c25306bf6c94", "url": "https://api.github.com/repos/rust-lang/rust/commits/d062de8aa48083439237cb338b38c25306bf6c94", "html_url": "https://github.com/rust-lang/rust/commit/d062de8aa48083439237cb338b38c25306bf6c94"}, {"sha": "51cfcc83824b0c2e5569e40f5266c0493603d691", "url": "https://api.github.com/repos/rust-lang/rust/commits/51cfcc83824b0c2e5569e40f5266c0493603d691", "html_url": "https://github.com/rust-lang/rust/commit/51cfcc83824b0c2e5569e40f5266c0493603d691"}], "stats": {"total": 104, "additions": 13, "deletions": 91}, "files": [{"sha": "67cbdaae4fa5706e2ecffac969178ec710664646", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=c1b187d41b2cb16a409259f1530bc8fcc705364f", "patch": "@@ -23,7 +23,7 @@ use container::MutableSet;\n #[link_args = \"-undefined dynamic_lookup\"]\n extern {}\n \n-#[cfg(not(stage0), not(windows))]\n+#[cfg(not(windows))]\n extern {\n     #[weak_linkage]\n     #[link_name = \"_rust_crate_map_toplevel\"]\n@@ -48,12 +48,12 @@ struct CrateMap {\n     children: [*CrateMap, ..1]\n }\n \n-#[cfg(not(stage0), not(windows))]\n+#[cfg(not(windows))]\n pub fn get_crate_map() -> *CrateMap {\n     &'static CRATE_MAP as *CrateMap\n }\n \n-#[cfg(not(stage0), windows)]\n+#[cfg(windows)]\n #[fixed_stack_segment]\n #[inline(never)]\n pub fn get_crate_map() -> *CrateMap {"}, {"sha": "3dbf7a918b7a84a06abb0e626964a30ebf59b30c", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=c1b187d41b2cb16a409259f1530bc8fcc705364f", "patch": "@@ -12,7 +12,7 @@ use libc::{uintptr_t, exit, STDERR_FILENO};\n use option::{Some, None, Option};\n use rt::util::dumb_println;\n use rt::crate_map::{ModEntry, iter_crate_map};\n-#[cfg(not(stage0))] use rt::crate_map::get_crate_map;\n+use rt::crate_map::get_crate_map;\n use str::StrSlice;\n use str::raw::from_c_str;\n use u32;\n@@ -211,22 +211,6 @@ impl Logger for StdErrLogger {\n }\n /// Configure logging by traversing the crate map and setting the\n /// per-module global logging flags based on the logging spec\n-#[fixed_stack_segment] #[inline(never)]\n-#[cfg(stage0)]\n-pub fn init(crate_map: *u8) {\n-    use os;\n-\n-    let log_spec = os::getenv(\"RUST_LOG\");\n-    match log_spec {\n-        Some(spec) => {\n-            update_log_settings(crate_map, spec);\n-        }\n-        None => {\n-            update_log_settings(crate_map, ~\"\");\n-        }\n-    }\n-}\n-#[cfg(not(stage0))]\n pub fn init() {\n     use os;\n "}, {"sha": "2ece2800cf267ad21f2f0608fde79082f491ec6d", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=c1b187d41b2cb16a409259f1530bc8fcc705364f", "patch": "@@ -176,16 +176,6 @@ pub mod borrowck;\n /// # Return value\n ///\n /// The return value is used as the process return code. 0 on success, 101 on error.\n-#[cfg(stage0)]\n-pub fn start(argc: int, argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n-\n-    init(argc, argv, crate_map);\n-    let exit_code = run(main);\n-    cleanup();\n-\n-    return exit_code;\n-}\n-#[cfg(not(stage0))]\n pub fn start(argc: int, argv: **u8, main: ~fn()) -> int {\n \n     init(argc, argv);\n@@ -200,15 +190,6 @@ pub fn start(argc: int, argv: **u8, main: ~fn()) -> int {\n ///\n /// This is appropriate for running code that must execute on the main thread,\n /// such as the platform event loop and GUI.\n-#[cfg(stage0)]\n-pub fn start_on_main_thread(argc: int, argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n-    init(argc, argv, crate_map);\n-    let exit_code = run_on_main_thread(main);\n-    cleanup();\n-\n-    return exit_code;\n-}\n-#[cfg(not(stage0))]\n pub fn start_on_main_thread(argc: int, argv: **u8, main: ~fn()) -> int {\n     init(argc, argv);\n     let exit_code = run_on_main_thread(main);\n@@ -222,17 +203,6 @@ pub fn start_on_main_thread(argc: int, argv: **u8, main: ~fn()) -> int {\n /// Initializes global state, including frobbing\n /// the crate's logging flags, registering GC\n /// metadata, and storing the process arguments.\n-#[cfg(stage0)]\n-pub fn init(argc: int, argv: **u8, crate_map: *u8) {\n-    // XXX: Derefing these pointers is not safe.\n-    // Need to propagate the unsafety to `start`.\n-    unsafe {\n-        args::init(argc, argv);\n-        env::init();\n-        logging::init(crate_map);\n-    }\n-}\n-#[cfg(not(stage0))]\n pub fn init(argc: int, argv: **u8) {\n     // XXX: Derefing these pointers is not safe.\n     // Need to propagate the unsafety to `start`."}, {"sha": "b2a0062d7272e334b5f47092ae8eefc80b6e97e0", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=c1b187d41b2cb16a409259f1530bc8fcc705364f", "patch": "@@ -93,21 +93,6 @@ pub unsafe fn check_not_borrowed(a: *u8,\n     borrowck::check_not_borrowed(a, file, line)\n }\n \n-#[cfg(stage0)]\n-#[lang=\"start\"]\n-pub fn start(main: *u8, argc: int, argv: **c_char,\n-             crate_map: *u8) -> int {\n-    use rt;\n-\n-    unsafe {\n-        return do rt::start(argc, argv as **u8, crate_map) {\n-            let main: extern \"Rust\" fn() = transmute(main);\n-            main();\n-        };\n-    }\n-}\n-\n-#[cfg(not(stage0))]\n #[lang=\"start\"]\n pub fn start(main: *u8, argc: int, argv: **c_char) -> int {\n     use rt;"}, {"sha": "3d3f314b994430c1c4cd5a7cf037f43445a36ddb", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=c1b187d41b2cb16a409259f1530bc8fcc705364f", "patch": "@@ -1,3 +1,11 @@\n+S 2013-09-23 348d844\n+  freebsd-x86_64 8b99ec197e441f013c5ba0788f8bcfa689bfc75e\n+  linux-i386 9a237fcbe4d29986a360b1dc8984da3b946463e6\n+  linux-x86_64 47906010eb676cbf9e0caa0773d9ef2dce89e9f8\n+  macos-i386 7085e4dd6bc63864f2ad8a3a21dab945ffd99d8d\n+  macos-x86_64 efefdca6b4a40ebeb977037ebbf46c1353f09ee5\n+  winnt-i386 7988b58a9530a4ac0688ec978e9124c5db56717c\n+\n S 2013-09-17 cbd1eef\n   freebsd-x86_64 9166867a8859076343cb3e57da918b5c0eea720b\n   linux-i386 38347b579312ff30c36d257a1161660eb0ae8422"}, {"sha": "ca75af901295ce0a2c49906d27dc4506af3c5648", "filename": "src/test/run-pass/attr-start.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Ftest%2Frun-pass%2Fattr-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Ftest%2Frun-pass%2Fattr-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-start.rs?ref=c1b187d41b2cb16a409259f1530bc8fcc705364f", "patch": "@@ -11,12 +11,6 @@\n //xfail-fast\n \n #[start]\n-#[cfg(stage0)]\n-fn start(_argc: int, _argv: **u8, _crate_map: *u8) -> int {\n-    return 0;\n-}\n-#[start]\n-#[cfg(not(stage0))]\n fn start(_argc: int, _argv: **u8) -> int {\n     return 0;\n }"}, {"sha": "6e3d9629da043b88befd8963236c86181a63171b", "filename": "src/test/run-pass/core-rt-smoke.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs?ref=c1b187d41b2cb16a409259f1530bc8fcc705364f", "patch": "@@ -13,14 +13,6 @@\n // A simple test of starting the runtime manually\n \n #[start]\n-#[cfg(stage0)]\n-fn start(argc: int, argv: **u8, crate_map: *u8) -> int {\n-    do std::rt::start(argc, argv, crate_map) {\n-        info!(\"creating my own runtime is joy\");\n-    }\n-}\n-#[start]\n-#[cfg(not(stage0))]\n fn start(argc: int, argv: **u8) -> int {\n     do std::rt::start(argc, argv) {\n         info!(\"creating my own runtime is joy\");"}, {"sha": "deab9c715238574c3d1136341c0a1bf8726bff6f", "filename": "src/test/run-pass/generic-tag-corruption.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs?ref=c1b187d41b2cb16a409259f1530bc8fcc705364f", "patch": "@@ -11,7 +11,7 @@\n \n \n \n-// This causes memory corruption in stage0.\n+// This used to cause memory corruption in stage 0.\n enum thing<K> { some(K), }\n \n pub fn main() { let _x = some(~\"hi\"); }"}, {"sha": "47a723ce6e14dc35511ea2aaa50ebaa9fbab7df3", "filename": "src/test/run-pass/rt-start-main-thread.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b187d41b2cb16a409259f1530bc8fcc705364f/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs?ref=c1b187d41b2cb16a409259f1530bc8fcc705364f", "patch": "@@ -11,17 +11,6 @@\n // xfail-fast\n \n #[start]\n-#[cfg(stage0)]\n-fn start(argc: int, argv: **u8, crate_map: *u8) -> int {\n-    do std::rt::start_on_main_thread(argc, argv, crate_map) {\n-        info!(\"running on main thread\");\n-        do spawn {\n-            info!(\"running on another thread\");\n-        }\n-    }\n-}\n-#[start]\n-#[cfg(not(stage0))]\n fn start(argc: int, argv: **u8) -> int {\n     do std::rt::start_on_main_thread(argc, argv) {\n         info!(\"running on main thread\");"}]}