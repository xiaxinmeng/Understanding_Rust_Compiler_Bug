{"sha": "a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzM2Y2YWM5YTBiMTI0ZjMzNzNjZDBmZDIwNjNiZmFkZjQyNDJlNWQ=", "commit": {"author": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-12-20T08:18:34Z"}, "committer": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-12-20T11:53:22Z"}, "message": "Fix ICE on suggesting calling function", "tree": {"sha": "18230c22ef7541f711493851f77af1b36789653c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18230c22ef7541f711493851f77af1b36789653c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d", "html_url": "https://github.com/rust-lang/rust/commit/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f74583445702e2e27ec4415376f2c540a83d7ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/f74583445702e2e27ec4415376f2c540a83d7ded", "html_url": "https://github.com/rust-lang/rust/commit/f74583445702e2e27ec4415376f2c540a83d7ded"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "6467e04407939400018df59daecc245cba23084b", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => (false, false, false),\n         };\n \n-        // Type check the descriminant and get its type.\n+        // Type check the discriminant and get its type.\n         let scrutinee_ty = if force_scrutinee_bool {\n             // Here we want to ensure:\n             //"}, {"sha": "6305bafcd94d6d11f6a282f40fefb2ad32e8182b", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d", "patch": "@@ -504,7 +504,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return false;\n             }\n             // We're emitting a suggestion, so we can just ignore regions\n-            let fn_sig = self.tcx.fn_sig(def_id).skip_binder();\n+            // FIXME: Instead of exiting early when encountering bound vars in\n+            // the function signature, consider keeping the binder here and\n+            // propagating it downwards.\n+            let fn_sig = if let Some(fn_sig) = self.tcx.fn_sig(def_id).no_bound_vars() {\n+                fn_sig\n+            } else {\n+                return false;\n+            };\n \n             let other_ty = if let FnDef(def_id, _) = *other_ty.kind() {\n                 if !self.tcx.has_typeck_results(def_id) {"}, {"sha": "d786e3358598446d63d07ccaf7b0584937a1bea5", "filename": "src/test/compile-fail/issue-77910-1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d/src%2Ftest%2Fcompile-fail%2Fissue-77910-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d/src%2Ftest%2Fcompile-fail%2Fissue-77910-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-77910-1.rs?ref=a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d", "patch": "@@ -0,0 +1,11 @@\n+fn foo(s: &i32) -> &i32 {\n+    let xs;\n+    xs\n+}\n+fn main() {\n+    let y;\n+    // we shouldn't ice with the bound var here.\n+    assert_eq!(foo, y);\n+    //~^ ERROR binary operation `==` cannot be applied to type\n+    //~| ERROR `for<'r> fn(&'r i32) -> &'r i32 {foo}` doesn't implement `Debug`\n+}"}, {"sha": "2bb48d3657617df7f6fee9e21aed428d8f69f541", "filename": "src/test/compile-fail/issue-77910-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d/src%2Ftest%2Fcompile-fail%2Fissue-77910-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d/src%2Ftest%2Fcompile-fail%2Fissue-77910-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-77910-2.rs?ref=a33f6ac9a0b124f3373cd0fd2063bfadf4242e5d", "patch": "@@ -0,0 +1,9 @@\n+fn foo(s: &i32) -> &i32 {\n+    let xs;\n+    xs\n+}\n+fn main() {\n+    let y;\n+    if foo == y {}\n+    //~^ ERROR binary operation `==` cannot be applied to type\n+}"}]}