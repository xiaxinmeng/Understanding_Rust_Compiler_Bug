{"sha": "e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NzYwNDcwYjQzYTQ4ZTEyNDRkNmJmNzJkNWExNmQ2YmJhZTRiMjc=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-29T00:31:05Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-29T00:33:15Z"}, "message": "Make a bunch of tests stop using the deprecated vector syntax.", "tree": {"sha": "e58c5b308c1381479f49c58694e904cdada5cee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e58c5b308c1381479f49c58694e904cdada5cee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "html_url": "https://github.com/rust-lang/rust/commit/e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9e8b7de826634780464921bc1f8f2b44c94d13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e8b7de826634780464921bc1f8f2b44c94d13c", "html_url": "https://github.com/rust-lang/rust/commit/c9e8b7de826634780464921bc1f8f2b44c94d13c"}], "stats": {"total": 126, "additions": 63, "deletions": 63}, "files": [{"sha": "44211aad3f386615bcc54207331b1d196ada69e0", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -1,8 +1,8 @@\n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"10000000\"]\n+        [\"\", \"10000000\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"100000\"]\n+        [\"\", \"100000\"]/~\n     } else {\n         args\n     };"}, {"sha": "34d756bb1e4c6ee80cb4dd7f47687849505bd976", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -22,9 +22,9 @@ fn collect_dvec(num: uint) -> [mut uint]/~ {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"50000000\"]\n+        [\"\", \"50000000\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"100000\"]\n+        [\"\", \"100000\"]/~\n     } else {\n         args\n     };"}, {"sha": "0c768d05a0e34aead9918a8704a5ce0ec940c662", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -373,9 +373,9 @@ fn validate(edges: [(node_id, node_id)]/~,\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"15\", \"48\"]\n+        [\"\", \"15\", \"48\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"10\", \"16\"]\n+        [\"\", \"10\", \"16\"]/~\n     } else {\n         args\n     };"}, {"sha": "b23bd25436bc5ceff7b72df44b51fdd1fa900e0e", "filename": "src/test/bench/msgsend-ring-new.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fmsgsend-ring-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fmsgsend-ring-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-new.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -23,9 +23,9 @@ fn thread_ring(i: uint,\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"100\", \"10000\"]\n+        [\"\", \"100\", \"10000\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"100\", \"1000\"]\n+        [\"\", \"100\", \"1000\"]/~\n     } else {\n         args\n     };        "}, {"sha": "754061a59559a1fdbb0629563a0acbb7a3d223ae", "filename": "src/test/bench/msgsend-ring.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -23,9 +23,9 @@ fn thread_ring(i: uint,\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"100\", \"10000\"]\n+        [\"\", \"100\", \"10000\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"100\", \"1000\"]\n+        [\"\", \"100\", \"1000\"]/~\n     } else {\n         args\n     };        "}, {"sha": "eef7b0d7257b273804e7e25faa2c329034b13fd1", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -60,9 +60,9 @@ fn run(args: [str]/~) {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"1000000\", \"10000\"]\n+        [\"\", \"1000000\", \"10000\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"10000\", \"4\"]\n+        [\"\", \"10000\", \"4\"]/~\n     } else {\n         args\n     };        "}, {"sha": "7d74e453523da483233d4ac5a53346d9de48d76d", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -14,9 +14,9 @@ fn ack(m: int, n: int) -> int {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"12\"]\n+        [\"\", \"12\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"8\"]\n+        [\"\", \"8\"]/~\n     } else {\n         args\n     };"}, {"sha": "bcda26ce183747ffb1e707b425fb66ab3c3a78f8", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -24,9 +24,9 @@ fn bottom_up_tree(arena: &a.arena::arena, item: int, depth: int) -> &a.tree {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"17\"]\n+        [\"\", \"17\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"8\"]\n+        [\"\", \"8\"]/~\n     } else {\n         args\n     };"}, {"sha": "b4bdc8d7ba920f7de49aeea74cf1fb3314c7dee7", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -60,9 +60,9 @@ fn fannkuch(n: int) -> int {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"10\"]\n+        [\"\", \"10\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"8\"]\n+        [\"\", \"8\"]/~\n     } else {\n         args\n     };"}, {"sha": "bd903b373b4aa3e9e7e8ac9917f02ea5d98cc4aa", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -77,9 +77,9 @@ fn acid(ch: char, prob: u32) -> aminoacids { ret {ch: ch, prob: prob}; }\n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         // alioth tests k-nucleotide with this data at 25,000,000\n-        [\"\", \"5000000\"]\n+        [\"\", \"5000000\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"1000\"]\n+        [\"\", \"1000\"]/~\n     } else {\n         args\n     };"}, {"sha": "79d5f6cc08a78d9eed1d38aafc509b65c1ac4c6d", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -10,9 +10,9 @@ fn fib(n: int) -> int {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"40\"]\n+        [\"\", \"40\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"30\"]\n+        [\"\", \"30\"]/~\n     } else {\n         args\n     };"}, {"sha": "fc9c999a53382a838fb63d41be4a7c9978b8c3c4", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -187,7 +187,7 @@ fn main(args: [str]/~) {\n \n    // finish...\n    for sizes.eachi { |ii, _sz|\n-      comm::send(to_child[ii], []);\n+      comm::send(to_child[ii], []/~);\n    }\n \n    // now fetch and print result messages"}, {"sha": "2d06ae1324c7e2caa5268b0cc3d951162dd13922", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -142,7 +142,7 @@ fn writer(path: str, writech: comm::chan<comm::chan<line>>, size: uint)\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"4000\", \"10\"]\n+        [\"\", \"4000\", \"10\"]/~\n     } else {\n         args\n     };"}, {"sha": "6e5e67178611d875a608c2721705c987bf374c27", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -15,9 +15,9 @@ native mod libc {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"4000000\"]\n+        [\"\", \"4000000\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"100000\"]\n+        [\"\", \"100000\"]/~\n     } else {\n         args\n     };"}, {"sha": "6357889763997d2129a0311bcd67eeed55f02656", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -80,9 +80,9 @@ fn stress(num_tasks: int) {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"20\"]\n+        [\"\", \"20\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"8\"]\n+        [\"\", \"8\"]/~\n     } else {\n         args\n     };"}, {"sha": "4678ce41ca89694b4850ea9ab7b96f14987c1fb7", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -42,9 +42,9 @@ fn eval_AtA_times_u(u: [const float]/~, AtAu: [mut float]/~) {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"2000\"]\n+        [\"\", \"2000\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"1000\"]\n+        [\"\", \"1000\"]/~\n     } else {\n         args\n     };"}, {"sha": "7e16160f7654a137ab352a6d7d50dcd1290cf28c", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -39,9 +39,9 @@ fn roundtrip(id: int, p: comm::port<int>, ch: comm::chan<int>) {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"2000000\"]\n+        [\"\", \"2000000\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"1000\"]\n+        [\"\", \"1000\"]/~\n     } else {\n         args\n     };"}, {"sha": "ac25e8642783dbc018a126bdeb49c37f608a6bda", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -19,9 +19,9 @@ fn check_sequential(min: uint, max: uint, map: smallintmap<uint>) {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"100000\", \"100\"]\n+        [\"\", \"100000\", \"100\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"10000\", \"50\"]\n+        [\"\", \"10000\", \"50\"]/~\n     } else {\n         args\n     };\n@@ -49,4 +49,4 @@ fn main(args: [str]/~) {\n     io::stdout().write_str(#fmt(\"        : %f op/sec\\n\", maxf/checkf));\n     io::stdout().write_str(#fmt(\"get()   : %? seconds\\n\", appendf));\n     io::stdout().write_str(#fmt(\"        : %f op/sec\\n\", maxf/appendf));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "be33193f4f0197c7b1edf4e31de456fde02672a3", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -47,9 +47,9 @@ fn calc(children: uint, parent_ch: comm::chan<msg>) {\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"100000\"]\n+        [\"\", \"100000\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"100\"]\n+        [\"\", \"100\"]/~\n     } else {\n         args\n     };"}, {"sha": "05260e1fd3ef32605027699d2f6919bca3f77dd6", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -10,9 +10,9 @@ fn g() { }\n \n fn main(args: [str]/~) {\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        [\"\", \"400\"]\n+        [\"\", \"400\"]/~\n     } else if args.len() <= 1u {\n-        [\"\", \"10\"]\n+        [\"\", \"10\"]/~\n     } else {\n         args\n     };"}, {"sha": "abd91751460144194c74d4ffcbf1c5601e203265", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -18,8 +18,8 @@ fn main() {\n     let map = map::hashmap(hash, eq);\n     let mut arr = []/~;\n     for uint::range(0u, 10u) {|i|\n-        arr += [@\"key stuff\"];\n-        map.insert(arr, arr + [@\"value stuff\"]);\n+        arr += [@\"key stuff\"]/~;\n+        map.insert(arr, arr + [@\"value stuff\"]/~);\n     }\n-    map.insert([@\"boom\"], []);\n+    map.insert([@\"boom\"]/~, []/~);\n }"}, {"sha": "42f724f1861c113ebfe3895cdb1f0731cb9a3bf3", "filename": "src/test/run-pass/argv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fargv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fargv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargv.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -1,5 +1,5 @@\n fn main(args: [str]/~) {\n-    let vs: [str] = [\"hi\", \"there\", \"this\", \"is\", \"a\", \"vec\"];\n+    let vs: [str]/~ = [\"hi\", \"there\", \"this\", \"is\", \"a\", \"vec\"]/~;\n     let vvs: [[str]/~]/~ = [args, vs]/~;\n     for vvs.each {|vs| for vs.each {|s| log(debug, s); } }\n }"}, {"sha": "24d80c2315021a67608164d066ec25dd8f5243d5", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -5,5 +5,5 @@ fn g(act: fn([int]/~) -> int) -> int { ret act([1, 2, 3]/~); }\n fn main() {\n     assert (g(f) == 1);\n     let f1: fn([str]/~) -> str = f;\n-    assert (f1([\"x\", \"y\", \"z\"]) == \"x\");\n+    assert (f1([\"x\", \"y\", \"z\"]/~) == \"x\");\n }"}, {"sha": "9bdfb8af1d954f5bdadf80467e019549e21037e4", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -5,11 +5,11 @@ import cci_class_6::kitties::*;\n \n fn main() {\n   let nyan : cat<char> = cat::<char>(52u, 99, ['p']/~);\n-  let kitty = cat(1000u, 2, [\"tabby\"]);\n+  let kitty = cat(1000u, 2, [\"tabby\"]/~);\n   assert(nyan.how_hungry == 99);\n   assert(kitty.how_hungry == 2);\n   nyan.speak([1u,2u,3u]/~);\n   assert(nyan.meow_count() == 55u);\n-  kitty.speak([\"meow\", \"mew\", \"purr\", \"chirp\"]);\n+  kitty.speak([\"meow\", \"mew\", \"purr\", \"chirp\"]/~);\n   assert(kitty.meow_count() == 1004u);\n }"}, {"sha": "9cd9224be939722c36a5aa802f07bff9ef3f19d0", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -18,11 +18,11 @@ class cat<U> {\n \n fn main() {\n   let nyan : cat<int> = cat::<int>(52u, 99, [9]/~);\n-  let kitty = cat(1000u, 2, [\"tabby\"]);\n+  let kitty = cat(1000u, 2, [\"tabby\"]/~);\n   assert(nyan.how_hungry == 99);\n   assert(kitty.how_hungry == 2);\n   nyan.speak([1,2,3]/~);\n   assert(nyan.meow_count() == 55u);\n-  kitty.speak([\"meow\", \"mew\", \"purr\", \"chirp\"]);\n+  kitty.speak([\"meow\", \"mew\", \"purr\", \"chirp\"]/~);\n   assert(kitty.meow_count() == 1004u);\n }"}, {"sha": "bc74be14d8bafb25efe2964425cd87e1c8bae1d2", "filename": "src/test/run-pass/command-line-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main(args: [str]) { log(debug, args[0]); }\n+fn main(args: [str]/~) { log(debug, args[0]); }"}, {"sha": "b0abb2ed6dbfe916021a72f2f624587070dbd73c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -94,5 +94,5 @@ mod map_reduce {\n }\n \n fn main() {\n-    map_reduce::map_reduce([\"../src/test/run-pass/hashmap-memory.rs\"]);\n+    map_reduce::map_reduce([\"../src/test/run-pass/hashmap-memory.rs\"]/~);\n }"}, {"sha": "f52498c11821dad7ec23d305209fe194a6470467", "filename": "src/test/run-pass/iface-generic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fiface-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fiface-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-generic.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -30,8 +30,8 @@ fn bar<U: to_str, T: map<U>>(x: T) -> [str]/~ {\n }\n \n fn main() {\n-    assert foo([1]) == [\"hi\"];\n-    assert bar::<int, [int]>([4, 5]) == [\"4\", \"5\"];\n-    assert bar::<str, [str]>([\"x\", \"y\"]) == [\"x\", \"y\"];\n-    assert bar::<(), [()]>([()]) == [\"()\"];\n+    assert foo([1]) == [\"hi\"]/~;\n+    assert bar::<int, [int]>([4, 5]) == [\"4\", \"5\"]/~;\n+    assert bar::<str, [str]>([\"x\", \"y\"]/~) == [\"x\", \"y\"]/~;\n+    assert bar::<(), [()]>([()]) == [\"()\"]/~;\n }"}, {"sha": "81c4f4bbedbc029abce6c439cf30ded77c561e97", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -10,7 +10,7 @@ import std::map::str_hash;\n import dvec;\n \n fn main() {\n-  let v = [mut @\"hi\"];\n+  let v = [mut @\"hi\"]/~;\n   let m: req::header_map = str_hash();\n   m.insert(\"METHOD\", @dvec::from_vec(v));\n   request::<int>(m);"}, {"sha": "5c086717748038c95fecead27e53db9f37ddd044", "filename": "src/test/run-pass/log-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Flog-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Flog-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-str.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     assert \"~[1, 2, 3]\" == sys::log_str([1, 2, 3]/~);\n-    assert #fmt[\"%?/%6?\", [1, 2, 3], \"hi\"] == \"~[1, 2, 3]/ ~\\\"hi\\\"\";\n+    assert #fmt[\"%?/%6?\", [1, 2, 3]/~, \"hi\"] == \"~[1, 2, 3]/ ~\\\"hi\\\"\";\n }"}, {"sha": "671311018b559be4c8ba81108151999add5271d8", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -22,6 +22,6 @@ fn transform(x: option<int>) -> option<str> {\n fn main() {\n     assert transform(some(10)) == some(\"11\");\n     assert transform(none) == none;\n-    assert [\"hi\"].bind {|x| [x, x + \"!\"]}.bind {|x| [x, x + \"?\"]} ==\n-        [\"hi\", \"hi?\", \"hi!\", \"hi!?\"];\n+    assert [\"hi\"]/~.bind {|x| [x, x + \"!\"]/~}.bind {|x| [x, x + \"?\"]/~} ==\n+        [\"hi\", \"hi?\", \"hi!\", \"hi!?\"]/~;\n }"}, {"sha": "bcb344f5acd8b6eb414be71c2980523212869cdc", "filename": "src/test/run-pass/operator-overloading-leaks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Foperator-overloading-leaks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Foperator-overloading-leaks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading-leaks.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -2,11 +2,11 @@\n \n impl methods<T: copy> for [T]/~ {\n     fn -(x: [T]/&) -> [T]/~ {\n-        [x[0], x[0], x[0]]\n+        [x[0], x[0], x[0]]/~\n     }\n \n     fn foo(x: [T]/&) -> [T]/~ {\n-        [x[0], x[0], x[0]]\n+        [x[0], x[0], x[0]]/~\n     }\n }\n "}, {"sha": "ff2b80303262cf9ed8b98af0420a91a9a2527ac4", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -47,7 +47,7 @@ fn main() {\n \n     assert find_pos(1, [0, 1, 2, 3]/~) == some(1u);\n     assert find_pos(1, [0, 4, 2, 3]/~) == none;\n-    assert find_pos(\"hi\", [\"foo\", \"bar\", \"baz\", \"hi\"]) == some(3u);\n+    assert find_pos(\"hi\", [\"foo\", \"bar\", \"baz\", \"hi\"]/~) == some(3u);\n \n     bail_deep([[false, false]/~, [true, true]/~, [false, true]/~]/~);\n     bail_deep([[true]/~]/~);"}, {"sha": "d041040772be4b122d133ecfc13de0bed9fa3bf7", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -23,7 +23,7 @@ type ty = spanned<ty_>;\n fn main() {\n     let sp: span = {lo: 57451u, hi: 57542u, expanded_from: os_none};\n     let t: @ty = @{ data: 3u, span: sp };\n-    let p_: path_ = { global: true, idents: [\"hi\"], types: [t] };\n+    let p_: path_ = { global: true, idents: [\"hi\"]/~, types: [t] };\n     let p: path = { data: p_, span: sp };\n     let x = { sp: sp, path: p };\n     log(error, x.path);"}, {"sha": "b0a7bd30d81fcc6ddf7cd7c068dfa7bf3615b5cf", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7760470b43a48e1244d6bf72d5a16d6bbae4b27/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=e7760470b43a48e1244d6bf72d5a16d6bbae4b27", "patch": "@@ -1,4 +1,4 @@\n-fn swap<T>(v: [mut T], i: int, j: int) { v[i] <-> v[j]; }\n+fn swap<T>(v: [mut T]/~, i: int, j: int) { v[i] <-> v[j]; }\n \n fn main() {\n     let a: [mut int]/~ = [mut 0, 1, 2, 3, 4, 5, 6]/~;"}]}