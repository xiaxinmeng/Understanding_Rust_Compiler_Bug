{"sha": "acfe7c41412808094fd85ba3b9f5ceeabfeea932", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZmU3YzQxNDEyODA4MDk0ZmQ4NWJhM2I5ZjVjZWVhYmZlZWE5MzI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-10T15:23:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-10T15:23:13Z"}, "message": "Rollup merge of #85200 - FabianWolff:issue-84647, r=nikomatsakis\n\nIgnore derived Clone and Debug implementations during dead code analysis\n\nThis pull request fixes #84647. Derived implementations of `Clone` and `Debug` always trivially read all fields, so \"field is never read\" dead code warnings are never triggered. Arguably, though, a user most likely will only be interested in whether _their_ code ever reads those fields, which is the behavior I have implemented here.\n\nNote that implementations of `Clone` and `Debug` are only ignored if they are `#[derive(...)]`d; a custom `impl Clone/Debug for ...` will still be analyzed normally (i.e. if a custom `Clone` implementation uses all fields of the struct, this will continue to suppress dead code warnings about unused fields); this seemed like the least intrusive change to me (although it would be easy to change \u2014 just drop the `&& [impl_]item.span.in_derive_expansion()` in the if conditions).\n\nThe only thing that I am slightly unsure about is that in #84647, `@matklad` said\n> Doesn't seem easy to fix though :(\n\nHowever, it _was_ pretty straightforward to fix, so did I perhaps overlook something obvious? `@matklad,` could you weigh in on this?", "tree": {"sha": "96a1db43372408e95bcd5c6c5f250a43382a17cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96a1db43372408e95bcd5c6c5f250a43382a17cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acfe7c41412808094fd85ba3b9f5ceeabfeea932", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhO3hhCRBK7hj4Ov3rIwAA3pQIABpGehaUt9e6h/f5pgOFsJG9\njmeut42EQR8yu8W8cnyWwXNse1ZkT0kwkuhxqD97jFtZFCSkJJmFYHqTG88UhYtz\nKOPpHS8OxD8VtgjrlveiDUqMCPtX4o9jH3XySaakny3dhhF3e0u+EDmt8UgRjNVu\n5eGN4Qj5mq3+GrXM81svS44X3aQgePJg02QHIRvpGwSZfR/wdJCNSir0ifaTkLXr\n1TGQtEISF6d/KGgOUxW9NQoOghCGnGfrC6Vm5rWQDq3Araq4jsuT8yDF+/ajcW+Y\nxhYoKHNLyvl8xbTb4EmWB28anZB6tu4HP5KArGMAGp9+kwSF7ZgJKHsV9f1iMjs=\n=azYq\n-----END PGP SIGNATURE-----\n", "payload": "tree 96a1db43372408e95bcd5c6c5f250a43382a17cb\nparent 497ee321af3b8496eaccd7af7b437f18bab81abf\nparent 79adda930f9b607ecb4819ed7abcf1cd285e938a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1631287393 -0700\ncommitter GitHub <noreply@github.com> 1631287393 -0700\n\nRollup merge of #85200 - FabianWolff:issue-84647, r=nikomatsakis\n\nIgnore derived Clone and Debug implementations during dead code analysis\n\nThis pull request fixes #84647. Derived implementations of `Clone` and `Debug` always trivially read all fields, so \"field is never read\" dead code warnings are never triggered. Arguably, though, a user most likely will only be interested in whether _their_ code ever reads those fields, which is the behavior I have implemented here.\n\nNote that implementations of `Clone` and `Debug` are only ignored if they are `#[derive(...)]`d; a custom `impl Clone/Debug for ...` will still be analyzed normally (i.e. if a custom `Clone` implementation uses all fields of the struct, this will continue to suppress dead code warnings about unused fields); this seemed like the least intrusive change to me (although it would be easy to change \u2014 just drop the `&& [impl_]item.span.in_derive_expansion()` in the if conditions).\n\nThe only thing that I am slightly unsure about is that in #84647, `@matklad` said\n> Doesn't seem easy to fix though :(\n\nHowever, it _was_ pretty straightforward to fix, so did I perhaps overlook something obvious? `@matklad,` could you weigh in on this?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acfe7c41412808094fd85ba3b9f5ceeabfeea932", "html_url": "https://github.com/rust-lang/rust/commit/acfe7c41412808094fd85ba3b9f5ceeabfeea932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acfe7c41412808094fd85ba3b9f5ceeabfeea932/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497ee321af3b8496eaccd7af7b437f18bab81abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/497ee321af3b8496eaccd7af7b437f18bab81abf", "html_url": "https://github.com/rust-lang/rust/commit/497ee321af3b8496eaccd7af7b437f18bab81abf"}, {"sha": "79adda930f9b607ecb4819ed7abcf1cd285e938a", "url": "https://api.github.com/repos/rust-lang/rust/commits/79adda930f9b607ecb4819ed7abcf1cd285e938a", "html_url": "https://github.com/rust-lang/rust/commit/79adda930f9b607ecb4819ed7abcf1cd285e938a"}], "stats": {"total": 332, "additions": 225, "deletions": 107}, "files": [{"sha": "61e27d2e4cd41053db35dc55d60c8effeabdc63b", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -16,7 +16,6 @@ macro_rules! declare_features {\n                     since: $ver,\n                     issue: to_nonzero($issue),\n                     edition: None,\n-                    description: concat!($($doc,)*),\n                 }\n             ),+\n         ];"}, {"sha": "366ed715434eda4e2598b6ea7558588881b43e72", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -37,7 +37,6 @@ macro_rules! declare_features {\n                     since: $ver,\n                     issue: to_nonzero($issue),\n                     edition: $edition,\n-                    description: concat!($($doc,)*),\n                 }\n             ),+];\n "}, {"sha": "f74ea0e0c4d271c979df7f85c251922e1eb59f12", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -453,6 +453,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     // Enumerates \"identity-like\" conversion methods to suggest on type mismatch.\n     rustc_attr!(rustc_conversion_suggestion, Normal, template!(Word), INTERNAL_UNSTABLE),\n+    // Prevents field reads in the marked trait or method to be considered\n+    // during dead code analysis.\n+    rustc_attr!(rustc_trivial_field_reads, Normal, template!(Word), INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Const related:"}, {"sha": "b25aab21e491afa1a54ac74cf7ad3fb7bff7bcc5", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -51,7 +51,6 @@ pub struct Feature {\n     pub since: &'static str,\n     issue: Option<NonZeroU32>,\n     pub edition: Option<Edition>,\n-    description: &'static str,\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "7b9b68268eacd8df4f5d51e684b5796f11a59e96", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -16,7 +16,6 @@ macro_rules! declare_features {\n                     since: $ver,\n                     issue: to_nonzero($issue),\n                     edition: None,\n-                    description: concat!($($doc,)*),\n                 }\n             ),+\n         ];\n@@ -34,7 +33,6 @@ macro_rules! declare_features {\n                     since: $ver,\n                     issue: to_nonzero($issue),\n                     edition: None,\n-                    description: concat!($($doc,)*),\n                 }\n             ),+\n         ];"}, {"sha": "082948eba416d62c08714c36ac92d1b9be971e53", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -62,13 +62,6 @@ fn hash_body(\n     stable_hasher.finish()\n }\n \n-/// Represents an entry and its parent `HirId`.\n-#[derive(Copy, Clone, Debug)]\n-pub struct Entry<'hir> {\n-    parent: HirId,\n-    node: Node<'hir>,\n-}\n-\n impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     pub(super) fn root(\n         sess: &'a Session,"}, {"sha": "1c7e022673d95f68b2c9e94fa6bfba389f890809", "filename": "compiler/rustc_middle/src/ich/hcx.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -28,7 +28,6 @@ fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n /// things (e.g., each `DefId`/`DefPath` is only hashed once).\n #[derive(Clone)]\n pub struct StableHashingContext<'a> {\n-    sess: &'a Session,\n     definitions: &'a Definitions,\n     cstore: &'a dyn CrateStore,\n     pub(super) body_resolver: BodyResolver<'a>,\n@@ -78,7 +77,6 @@ impl<'a> StableHashingContext<'a> {\n             !always_ignore_spans && !sess.opts.debugging_opts.incremental_ignore_spans;\n \n         StableHashingContext {\n-            sess,\n             body_resolver: BodyResolver(krate),\n             definitions,\n             cstore,"}, {"sha": "0ff3fc60995bf0a011082412a42f79d874b4cf73", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -900,10 +900,7 @@ fn traverse_candidate<'pat, 'tcx: 'pat, C, T, I>(\n struct Binding<'tcx> {\n     span: Span,\n     source: Place<'tcx>,\n-    name: Symbol,\n     var_id: HirId,\n-    var_ty: Ty<'tcx>,\n-    mutability: Mutability,\n     binding_mode: BindingMode,\n }\n "}, {"sha": "4ce26cc8dff46a10f4ecde92cba0feb3833425ac", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -176,17 +176,22 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Ok(())\n             }\n \n-            PatKind::Binding { name, mutability, mode, var, ty, ref subpattern, is_primary: _ } => {\n+            PatKind::Binding {\n+                name: _,\n+                mutability: _,\n+                mode,\n+                var,\n+                ty: _,\n+                ref subpattern,\n+                is_primary: _,\n+            } => {\n                 if let Ok(place_resolved) =\n                     match_pair.place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n                 {\n                     candidate.bindings.push(Binding {\n-                        name,\n-                        mutability,\n                         span: match_pair.pattern.span,\n                         source: place_resolved.into_place(self.tcx, self.typeck_results),\n                         var_id: var,\n-                        var_ty: ty,\n                         binding_mode: mode,\n                     });\n                 }"}, {"sha": "b74208edafea6172643d9c02f41a5a8cfb7679d2", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -118,9 +118,6 @@ struct Scope {\n     /// the region span of this scope within source code.\n     region_scope: region::Scope,\n \n-    /// the span of that region_scope\n-    region_scope_span: Span,\n-\n     /// set of places to drop when exiting this scope. This starts\n     /// out empty but grows as variables are declared during the\n     /// building process. This is a stack, so we always drop from the\n@@ -420,7 +417,6 @@ impl<'tcx> Scopes<'tcx> {\n         self.scopes.push(Scope {\n             source_scope: vis_scope,\n             region_scope: region_scope.0,\n-            region_scope_span: region_scope.1.span,\n             drops: vec![],\n             moved_locals: vec![],\n             cached_unwind_block: None,"}, {"sha": "b9e3c058ad7ec355e98206308bc31bb0e368cc5b", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         }\n \n         if let Err(e) = result {\n-            bug!(\"Error processing: {:?}: {:?}\", self.mir_body.source.def_id(), e)\n+            bug!(\"Error processing: {:?}: {:?}\", self.mir_body.source.def_id(), e.message)\n         };\n \n         // Depending on current `debug_options()`, `alert_on_unused_expressions()` could panic, so"}, {"sha": "0a3093757166afee7641ddea25449c5322b27b17", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -239,7 +239,69 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n     }\n \n+    /// Automatically generated items marked with `rustc_trivial_field_reads`\n+    /// will be ignored for the purposes of dead code analysis (see PR #85200\n+    /// for discussion).\n+    fn should_ignore_item(&self, def_id: DefId) -> bool {\n+        if !self.tcx.has_attr(def_id, sym::automatically_derived)\n+            && !self\n+                .tcx\n+                .impl_of_method(def_id)\n+                .map_or(false, |impl_id| self.tcx.has_attr(impl_id, sym::automatically_derived))\n+        {\n+            return false;\n+        }\n+\n+        let has_attr = |def_id| self.tcx.has_attr(def_id, sym::rustc_trivial_field_reads);\n+\n+        if has_attr(def_id) {\n+            return true;\n+        }\n+\n+        if let Some(impl_of) = self.tcx.impl_of_method(def_id) {\n+            if has_attr(impl_of) {\n+                return true;\n+            }\n+\n+            if let Some(trait_of) = self.tcx.trait_id_of_impl(impl_of) {\n+                if has_attr(trait_of) {\n+                    return true;\n+                }\n+\n+                if let Some(method_ident) = self.tcx.opt_item_name(def_id) {\n+                    if let Some(trait_method) = self\n+                        .tcx\n+                        .associated_items(trait_of)\n+                        .find_by_name_and_kind(self.tcx, method_ident, ty::AssocKind::Fn, trait_of)\n+                    {\n+                        if has_attr(trait_method.def_id) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        } else if let Some(trait_of) = self.tcx.trait_of_item(def_id) {\n+            if has_attr(trait_of) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n     fn visit_node(&mut self, node: Node<'tcx>) {\n+        if let Some(item_def_id) = match node {\n+            Node::Item(hir::Item { def_id, .. })\n+            | Node::ForeignItem(hir::ForeignItem { def_id, .. })\n+            | Node::TraitItem(hir::TraitItem { def_id, .. })\n+            | Node::ImplItem(hir::ImplItem { def_id, .. }) => Some(def_id.to_def_id()),\n+            _ => None,\n+        } {\n+            if self.should_ignore_item(item_def_id) {\n+                return;\n+            }\n+        }\n+\n         let had_repr_c = self.repr_has_repr_c;\n         let had_inherited_pub_visibility = self.inherited_pub_visibility;\n         let had_pub_visibility = self.pub_visibility;"}, {"sha": "c816d06045681ddebc9d40cf9417ade9768973da", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1134,6 +1134,7 @@ symbols! {\n         rustc_synthetic,\n         rustc_test_marker,\n         rustc_then_this_would_need,\n+        rustc_trivial_field_reads,\n         rustc_unsafe_specialization_marker,\n         rustc_variance,\n         rustdoc,"}, {"sha": "b02333b028850fd7a831adeb811e3bd6c7b37e61", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -105,6 +105,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"clone\"]\n #[rustc_diagnostic_item = \"Clone\"]\n+#[cfg_attr(not(bootstrap), rustc_trivial_field_reads)]\n pub trait Clone: Sized {\n     /// Returns a copy of the value.\n     ///"}, {"sha": "166a8e3f28a4190e9adfeda75b90ec29153b8429", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -582,6 +582,7 @@ impl Display for Arguments<'_> {\n )]\n #[doc(alias = \"{:?}\")]\n #[rustc_diagnostic_item = \"debug_trait\"]\n+#[cfg_attr(not(bootstrap), rustc_trivial_field_reads)]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n     ///"}, {"sha": "9567479c8137b5d4f0a7e8e0f07d7ee8edc0da12", "filename": "library/core/tests/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -653,6 +653,7 @@ mod debug_list {\n fn test_formatting_parameters_are_forwarded() {\n     use std::collections::{BTreeMap, BTreeSet};\n     #[derive(Debug)]\n+    #[allow(dead_code)]\n     struct Foo {\n         bar: u32,\n         baz: u32,"}, {"sha": "d290c3c466035d5e2da432db494d263af24218b9", "filename": "library/std/src/io/buffered/tests.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -468,9 +468,6 @@ struct ProgrammableSink {\n     // Writes append to this slice\n     pub buffer: Vec<u8>,\n \n-    // Flush sets this flag\n-    pub flushed: bool,\n-\n     // If true, writes will always be an error\n     pub always_write_error: bool,\n \n@@ -520,7 +517,6 @@ impl Write for ProgrammableSink {\n         if self.always_flush_error {\n             Err(io::Error::new(io::ErrorKind::Other, \"test - always_flush_error\"))\n         } else {\n-            self.flushed = true;\n             Ok(())\n         }\n     }"}, {"sha": "694473f52c1a79970e86b1888b737e305db37041", "filename": "library/test/src/term/terminfo/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -16,6 +16,7 @@ use parser::compiled::{msys_terminfo, parse};\n use searcher::get_dbpath_for_term;\n \n /// A parsed terminfo database entry.\n+#[allow(unused)]\n #[derive(Debug)]\n pub(crate) struct TermInfo {\n     /// Names for the terminal"}, {"sha": "78e4e4ec116da2693e430ea058ebe7826a0dae81", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -557,7 +557,6 @@ fn build_macro(\n     name: Symbol,\n     import_def_id: Option<DefId>,\n ) -> clean::ItemKind {\n-    let imported_from = cx.tcx.crate_name(def_id.krate);\n     match CStore::from_tcx(cx.tcx).load_macro_untracked(def_id, cx.sess()) {\n         LoadedMacro::MacroDef(item_def, _) => {\n             if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n@@ -569,7 +568,6 @@ fn build_macro(\n                         def_id,\n                         cx.tcx.visibility(import_def_id.unwrap_or(def_id)),\n                     ),\n-                    imported_from: Some(imported_from),\n                 })\n             } else {\n                 unreachable!()"}, {"sha": "7ece2acac7a406ca6e7a2000b3f6931cd57fab18", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1859,7 +1859,6 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                 }\n                 ItemKind::Macro(ref macro_def) => MacroItem(Macro {\n                     source: display_macro_source(cx, name, &macro_def, def_id, &item.vis),\n-                    imported_from: None,\n                 }),\n                 ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref item_ids) => {\n                     let items = item_ids"}, {"sha": "5f09e6ced96d45f6558f7383d8904c902ef689c7", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -2202,7 +2202,6 @@ crate struct ImportSource {\n #[derive(Clone, Debug)]\n crate struct Macro {\n     crate source: String,\n-    crate imported_from: Option<Symbol>,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "f71660c4b2ab26c96aaa519dbbab0efd7d8e9349", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -224,7 +224,6 @@ struct AllTypes {\n     opaque_tys: FxHashSet<ItemEntry>,\n     statics: FxHashSet<ItemEntry>,\n     constants: FxHashSet<ItemEntry>,\n-    keywords: FxHashSet<ItemEntry>,\n     attributes: FxHashSet<ItemEntry>,\n     derives: FxHashSet<ItemEntry>,\n     trait_aliases: FxHashSet<ItemEntry>,\n@@ -245,7 +244,6 @@ impl AllTypes {\n             opaque_tys: new_set(100),\n             statics: new_set(100),\n             constants: new_set(100),\n-            keywords: new_set(100),\n             attributes: new_set(100),\n             derives: new_set(100),\n             trait_aliases: new_set(100),"}, {"sha": "4d8022ecba73c5d3744a31d1ffd3f8ed298e1ec3", "filename": "src/test/ui/array-slice-vec/slice_binary_search.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice_binary_search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice_binary_search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice_binary_search.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -2,6 +2,7 @@\n \n // Test binary_search_by_key lifetime. Issue #34683\n \n+#[allow(dead_code)]\n #[derive(Debug)]\n struct Assignment {\n     topic: String,"}, {"sha": "23ef975cbbca1a8b985f3c2bc77dc27dbd76f9dc", "filename": "src/test/ui/borrowck/borrowck-unused-mut-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unused-mut-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unused-mut-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unused-mut-locals.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![allow(dead_code)]\n #![deny(unused_mut)]\n \n #[derive(Debug)]"}, {"sha": "3399bc0018e54526e78acde295f432ab094dcdec", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -3,6 +3,7 @@\n // check-pass\n #![allow(unreachable_code)]\n #![warn(unused)]\n+#![allow(dead_code)]\n \n #[derive(Debug)]\n struct Point {"}, {"sha": "74109772724a4ddd7f55f4161d2671378f7c7c0d", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,5 +1,5 @@\n warning: value captured by `a` is never read\n-  --> $DIR/liveness.rs:23:9\n+  --> $DIR/liveness.rs:24:9\n    |\n LL |         a = 1;\n    |         ^\n@@ -13,7 +13,7 @@ LL | #![warn(unused)]\n    = help: did you mean to capture by reference instead?\n \n warning: unused variable: `a`\n-  --> $DIR/liveness.rs:32:9\n+  --> $DIR/liveness.rs:33:9\n    |\n LL |         a += 1;\n    |         ^\n@@ -27,39 +27,39 @@ LL | #![warn(unused)]\n    = help: did you mean to capture by reference instead?\n \n warning: value assigned to `a` is never read\n-  --> $DIR/liveness.rs:52:9\n+  --> $DIR/liveness.rs:53:9\n    |\n LL |         a += 1;\n    |         ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: value assigned to `a` is never read\n-  --> $DIR/liveness.rs:76:13\n+  --> $DIR/liveness.rs:77:13\n    |\n LL |             a = Some(\"d1\");\n    |             ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: value assigned to `b` is never read\n-  --> $DIR/liveness.rs:84:13\n+  --> $DIR/liveness.rs:85:13\n    |\n LL |             b = Some(\"e1\");\n    |             ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: value assigned to `b` is never read\n-  --> $DIR/liveness.rs:86:13\n+  --> $DIR/liveness.rs:87:13\n    |\n LL |             b = Some(\"e2\");\n    |             ^\n    |\n    = help: maybe it is overwritten before being read?\n \n warning: unused variable: `b`\n-  --> $DIR/liveness.rs:84:13\n+  --> $DIR/liveness.rs:85:13\n    |\n LL |             b = Some(\"e1\");\n    |             ^"}, {"sha": "465c9476ba65b1636532ab50c9b3650543242747", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -2,6 +2,7 @@\n \n // check-pass\n #![warn(unused)]\n+#![allow(dead_code)]\n \n #[derive(Debug)]\n struct MyStruct {"}, {"sha": "11a440554f759b4a60a9ea096cba8eda9746fdfd", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,5 +1,5 @@\n warning: value assigned to `a` is never read\n-  --> $DIR/liveness_unintentional_copy.rs:19:9\n+  --> $DIR/liveness_unintentional_copy.rs:20:9\n    |\n LL |         a = s;\n    |         ^\n@@ -13,7 +13,7 @@ LL | #![warn(unused)]\n    = help: maybe it is overwritten before being read?\n \n warning: unused variable: `a`\n-  --> $DIR/liveness_unintentional_copy.rs:19:9\n+  --> $DIR/liveness_unintentional_copy.rs:20:9\n    |\n LL |         a = s;\n    |         ^\n@@ -27,7 +27,7 @@ LL | #![warn(unused)]\n    = help: did you mean to capture by reference instead?\n \n warning: unused variable: `a`\n-  --> $DIR/liveness_unintentional_copy.rs:35:9\n+  --> $DIR/liveness_unintentional_copy.rs:36:9\n    |\n LL |         a += x;\n    |         ^"}, {"sha": "ed222b3148f410c45433e7aa671e1f526707d1d8", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/struct-pattern-matching-with-methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fstruct-pattern-matching-with-methods.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,6 +1,7 @@\n // edition:2021\n //check-pass\n #![warn(unused)]\n+#![allow(dead_code)]\n #![feature(rustc_attrs)]\n \n #[derive(Debug, Clone, Copy)]"}, {"sha": "3f7ddf93f0697c821feeccdb47c6a0eccc4da1eb", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -3,6 +3,8 @@\n \n // Test that we can use raw ptrs when using `capture_disjoint_fields`.\n \n+#![allow(dead_code)]\n+\n #[derive(Debug)]\n struct S {\n     s: String,"}, {"sha": "9d62281178c48c689b5900ebd0c105255b1420a8", "filename": "src/test/ui/const-generics/broken-mir-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+\n+#![allow(dead_code)]\n+\n use std::fmt::Debug;\n \n #[derive(Debug)]"}, {"sha": "80e9132093944ab0ce4d8700e81dec38f0ba4abf", "filename": "src/test/ui/derives/clone-debug-dead-code.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -0,0 +1,45 @@\n+// Checks that derived implementations of Clone and Debug do not\n+// contribute to dead code analysis (issue #84647).\n+\n+#![forbid(dead_code)]\n+\n+struct A { f: () }\n+//~^ ERROR: field is never read: `f`\n+\n+#[derive(Clone)]\n+struct B { f: () }\n+//~^ ERROR: field is never read: `f`\n+\n+#[derive(Debug)]\n+struct C { f: () }\n+//~^ ERROR: field is never read: `f`\n+\n+#[derive(Debug,Clone)]\n+struct D { f: () }\n+//~^ ERROR: field is never read: `f`\n+\n+struct E { f: () }\n+//~^ ERROR: field is never read: `f`\n+// Custom impl, still doesn't read f\n+impl Clone for E {\n+    fn clone(&self) -> Self {\n+        Self { f: () }\n+    }\n+}\n+\n+struct F { f: () }\n+// Custom impl that actually reads f\n+impl Clone for F {\n+    fn clone(&self) -> Self {\n+        Self { f: self.f }\n+    }\n+}\n+\n+fn main() {\n+    let _ = A { f: () };\n+    let _ = B { f: () };\n+    let _ = C { f: () };\n+    let _ = D { f: () };\n+    let _ = E { f: () };\n+    let _ = F { f: () };\n+}"}, {"sha": "226007f3647b15299c34bf22f17b395ad572d6be", "filename": "src/test/ui/derives/clone-debug-dead-code.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -0,0 +1,38 @@\n+error: field is never read: `f`\n+  --> $DIR/clone-debug-dead-code.rs:6:12\n+   |\n+LL | struct A { f: () }\n+   |            ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/clone-debug-dead-code.rs:4:11\n+   |\n+LL | #![forbid(dead_code)]\n+   |           ^^^^^^^^^\n+\n+error: field is never read: `f`\n+  --> $DIR/clone-debug-dead-code.rs:10:12\n+   |\n+LL | struct B { f: () }\n+   |            ^^^^^\n+\n+error: field is never read: `f`\n+  --> $DIR/clone-debug-dead-code.rs:14:12\n+   |\n+LL | struct C { f: () }\n+   |            ^^^^^\n+\n+error: field is never read: `f`\n+  --> $DIR/clone-debug-dead-code.rs:18:12\n+   |\n+LL | struct D { f: () }\n+   |            ^^^^^\n+\n+error: field is never read: `f`\n+  --> $DIR/clone-debug-dead-code.rs:21:12\n+   |\n+LL | struct E { f: () }\n+   |            ^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "4374d1594e4655272a53e3ffd9c7961fd430d574", "filename": "src/test/ui/deriving/deriving-clone-generic-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-generic-struct.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(dead_code)]\n+\n #[derive(Clone)]\n struct S<T> {\n     foo: (),"}, {"sha": "b93cbe5f8b6fd2b15a0a96f9f6467cf315f32af0", "filename": "src/test/ui/deriving/deriving-clone-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-struct.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(dead_code)]\n+\n #[derive(Clone)]\n struct S {\n     _int: isize,"}, {"sha": "7ad3f03471324e6b179a29a5629c6b44d49e61c8", "filename": "src/test/ui/deriving/deriving-clone-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-clone-tuple-struct.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(dead_code)]\n+\n #[derive(Clone)]\n struct S((), ());\n "}, {"sha": "07f91d059735623a416b00b41898211089c05bbb", "filename": "src/test/ui/deriving/deriving-in-fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderiving%2Fderiving-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fderiving%2Fderiving-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-in-fn.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+\n+#![allow(dead_code)]\n+\n pub fn main() {\n     #[derive(Debug)]\n     struct Foo {"}, {"sha": "3970a4155e95c2ec53f4c110a0f347520bc48aed", "filename": "src/test/ui/issues/issue-19358.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fissues%2Fissue-19358.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fissues%2Fissue-19358.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19358.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+\n+#![allow(dead_code)]\n+\n trait Trait { fn dummy(&self) { } }\n \n #[derive(Debug)]"}, {"sha": "1809e822c54213d4dbdc222bbac07f17d90fbf4b", "filename": "src/test/ui/issues/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fissues%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fissues%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3794.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![feature(box_syntax)]\n+#![allow(dead_code)]\n \n trait T {\n     fn print(&self);"}, {"sha": "a8d8bd1d5fd008ed1785479ba47ca2f7ce8be75c", "filename": "src/test/ui/monomorphize-abi-alignment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fmonomorphize-abi-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fmonomorphize-abi-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmonomorphize-abi-alignment.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![allow(non_upper_case_globals)]\n+#![allow(dead_code)]\n /*!\n  * On x86_64-linux-gnu and possibly other platforms, structs get 8-byte \"preferred\" alignment,\n  * but their \"ABI\" alignment (i.e., what actually matters for data layout) is the largest alignment"}, {"sha": "7d3987f65608715ce3147fdbf44295120869b968", "filename": "src/test/ui/moves/move-1-unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fmoves%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fmoves%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-1-unique.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(unused_mut)]\n+#![allow(dead_code)]\n #![feature(box_syntax)]\n \n #[derive(Clone)]"}, {"sha": "d23a852433f4f9b478312061d6a78d16a9eacc5c", "filename": "src/test/ui/moves/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fmoves%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fmoves%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-3-unique.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(unused_mut)]\n+#![allow(dead_code)]\n #![feature(box_syntax)]\n \n #[derive(Clone)]"}, {"sha": "f48bae55f5f1e820063df9c290b47ef4ce53b5c6", "filename": "src/test/ui/overloaded/overloaded-autoderef-order.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded%2Foverloaded-autoderef-order.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n \n+#![allow(dead_code)]\n+\n use std::rc::Rc;\n use std::ops::Deref;\n "}, {"sha": "0aaaa7d47c3c1eef0bcf8066e2e08218136a495b", "filename": "src/test/ui/self/ufcs-explicit-self.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fself%2Fufcs-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fself%2Fufcs-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fufcs-explicit-self.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![feature(box_syntax)]\n+#![allow(dead_code)]\n \n #[derive(Copy, Clone)]\n struct Foo {"}, {"sha": "ca35a615d214774124cf33a6dd71f41dfe9186ad", "filename": "src/test/ui/structs-enums/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(non_camel_case_types)]\n+#![allow(dead_code)]\n \n trait noisy {\n   fn speak(&mut self) -> isize;"}, {"sha": "732aa146ce446ee2e99161d5fa61290c624e75e5", "filename": "src/test/ui/structs-enums/class-implement-traits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-implement-traits.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(non_camel_case_types)]\n+#![allow(dead_code)]\n \n trait noisy {\n     fn speak(&mut self);"}, {"sha": "68ff73a0805921446b7c3b5ce9788857246218d4", "filename": "src/test/ui/structs-enums/functional-struct-upd.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fstructs-enums%2Ffunctional-struct-upd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fstructs-enums%2Ffunctional-struct-upd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Ffunctional-struct-upd.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+\n+#![allow(dead_code)]\n+\n #[derive(Debug)]\n struct Foo {\n     x: isize,"}, {"sha": "ce599582378176d32670515d0c20643e644137ad", "filename": "src/test/ui/structs-enums/tag-align-shape.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fstructs-enums%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftest%2Fui%2Fstructs-enums%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Ftag-align-shape.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(non_camel_case_types)]\n+#![allow(dead_code)]\n \n #[derive(Debug)]\n enum a_tag {"}, {"sha": "41e6ad12d058923a9af3d1a1b616bd7d650ced23", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -29,36 +29,21 @@ declare_clippy_lint! {\n     \"#[macro_use] is no longer needed\"\n }\n \n-const BRACKETS: &[char] = &['<', '>'];\n-\n #[derive(Clone, Debug, PartialEq, Eq)]\n struct PathAndSpan {\n     path: String,\n     span: Span,\n }\n \n-/// `MacroRefData` includes the name of the macro\n-/// and the path from `SourceMap::span_to_filename`.\n+/// `MacroRefData` includes the name of the macro.\n #[derive(Debug, Clone)]\n pub struct MacroRefData {\n     name: String,\n-    path: String,\n }\n \n impl MacroRefData {\n-    pub fn new(name: String, callee: Span, cx: &LateContext<'_>) -> Self {\n-        let sm = cx.sess().source_map();\n-        let mut path = sm.filename_for_diagnostics(&sm.span_to_filename(callee)).to_string();\n-\n-        // std lib paths are <::std::module::file type>\n-        // so remove brackets, space and type.\n-        if path.contains('<') {\n-            path = path.replace(BRACKETS, \"\");\n-        }\n-        if path.contains(' ') {\n-            path = path.split(' ').next().unwrap().to_string();\n-        }\n-        Self { name, path }\n+    pub fn new(name: String) -> Self {\n+        Self { name }\n     }\n }\n \n@@ -78,15 +63,15 @@ impl MacroUseImports {\n     fn push_unique_macro(&mut self, cx: &LateContext<'_>, span: Span) {\n         let call_site = span.source_callsite();\n         let name = snippet(cx, cx.sess().source_map().span_until_char(call_site, '!'), \"_\");\n-        if let Some(callee) = span.source_callee() {\n+        if let Some(_callee) = span.source_callee() {\n             if !self.collected.contains(&call_site) {\n                 let name = if name.contains(\"::\") {\n                     name.split(\"::\").last().unwrap().to_string()\n                 } else {\n                     name.to_string()\n                 };\n \n-                self.mac_refs.push(MacroRefData::new(name, callee.def_site, cx));\n+                self.mac_refs.push(MacroRefData::new(name));\n                 self.collected.insert(call_site);\n             }\n         }\n@@ -95,10 +80,10 @@ impl MacroUseImports {\n     fn push_unique_macro_pat_ty(&mut self, cx: &LateContext<'_>, span: Span) {\n         let call_site = span.source_callsite();\n         let name = snippet(cx, cx.sess().source_map().span_until_char(call_site, '!'), \"_\");\n-        if let Some(callee) = span.source_callee() {\n+        if let Some(_callee) = span.source_callee() {\n             if !self.collected.contains(&call_site) {\n                 self.mac_refs\n-                    .push(MacroRefData::new(name.to_string(), callee.def_site, cx));\n+                    .push(MacroRefData::new(name.to_string()));\n                 self.collected.insert(call_site);\n             }\n         }"}, {"sha": "89be7bf844f3a83f637aa27ed823df524e6ea2fc", "filename": "src/tools/clippy/clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -3,8 +3,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::{LitKind, StrStyle};\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{BorrowKind, Expr, ExprKind, HirId};\n+use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{BytePos, Span};\n@@ -53,10 +52,7 @@ declare_clippy_lint! {\n }\n \n #[derive(Clone, Default)]\n-pub struct Regex {\n-    spans: FxHashSet<Span>,\n-    last: Option<HirId>,\n-}\n+pub struct Regex {}\n \n impl_lint_pass!(Regex => [INVALID_REGEX, TRIVIAL_REGEX]);\n "}, {"sha": "f1f9c123dc842880683a14584d5c63f7bb7aa9c1", "filename": "src/tools/clippy/tests/ui/default_trait_access.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_imports)]\n+#![allow(unused_imports,dead_code)]\n #![deny(clippy::default_trait_access)]\n \n use std::default;"}, {"sha": "7f3dfc7f01366e0d39b23d59350a2428fe6b0e7c", "filename": "src/tools/clippy/tests/ui/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_imports)]\n+#![allow(unused_imports,dead_code)]\n #![deny(clippy::default_trait_access)]\n \n use std::default;"}, {"sha": "779a1149f413e5fa262104989096379340e91f8c", "filename": "src/tools/rustfmt/src/macros.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -762,7 +762,6 @@ impl MacroArgKind {\n #[derive(Debug, Clone)]\n struct ParsedMacroArg {\n     kind: MacroArgKind,\n-    span: Span,\n }\n \n impl ParsedMacroArg {\n@@ -780,14 +779,10 @@ impl ParsedMacroArg {\n struct MacroArgParser {\n     /// Either a name of the next metavariable, a separator, or junk.\n     buf: String,\n-    /// The start position on the current buffer.\n-    lo: BytePos,\n     /// The first token of the current buffer.\n     start_tok: Token,\n     /// `true` if we are parsing a metavariable or a repeat.\n     is_meta_var: bool,\n-    /// The position of the last token.\n-    hi: BytePos,\n     /// The last token parsed.\n     last_tok: Token,\n     /// Holds the parsed arguments.\n@@ -807,8 +802,6 @@ fn last_tok(tt: &TokenTree) -> Token {\n impl MacroArgParser {\n     fn new() -> MacroArgParser {\n         MacroArgParser {\n-            lo: BytePos(0),\n-            hi: BytePos(0),\n             buf: String::new(),\n             is_meta_var: false,\n             last_tok: Token {\n@@ -824,7 +817,6 @@ impl MacroArgParser {\n     }\n \n     fn set_last_tok(&mut self, tok: &TokenTree) {\n-        self.hi = tok.span().hi();\n         self.last_tok = last_tok(tok);\n     }\n \n@@ -836,7 +828,6 @@ impl MacroArgParser {\n         };\n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Separator(self.buf.clone(), prefix),\n-            span: mk_sp(self.lo, self.hi),\n         });\n         self.buf.clear();\n     }\n@@ -849,7 +840,6 @@ impl MacroArgParser {\n         };\n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Other(self.buf.clone(), prefix),\n-            span: mk_sp(self.lo, self.hi),\n         });\n         self.buf.clear();\n     }\n@@ -858,11 +848,10 @@ impl MacroArgParser {\n         match iter.next() {\n             Some(TokenTree::Token(Token {\n                 kind: TokenKind::Ident(name, _),\n-                span,\n+                ..\n             })) => {\n                 self.result.push(ParsedMacroArg {\n                     kind: MacroArgKind::MetaVariable(name, self.buf.clone()),\n-                    span: mk_sp(self.lo, span.hi()),\n                 });\n \n                 self.buf.clear();\n@@ -873,10 +862,9 @@ impl MacroArgParser {\n         }\n     }\n \n-    fn add_delimited(&mut self, inner: Vec<ParsedMacroArg>, delim: DelimToken, span: Span) {\n+    fn add_delimited(&mut self, inner: Vec<ParsedMacroArg>, delim: DelimToken) {\n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Delimited(delim, inner),\n-            span,\n         });\n     }\n \n@@ -886,19 +874,15 @@ impl MacroArgParser {\n         inner: Vec<ParsedMacroArg>,\n         delim: DelimToken,\n         iter: &mut Cursor,\n-        span: Span,\n     ) -> Option<()> {\n         let mut buffer = String::new();\n         let mut first = true;\n-        let mut lo = span.lo();\n-        let mut hi = span.hi();\n \n         // Parse '*', '+' or '?.\n         for tok in iter {\n             self.set_last_tok(&tok);\n             if first {\n                 first = false;\n-                lo = tok.span().lo();\n             }\n \n             match tok {\n@@ -918,7 +902,6 @@ impl MacroArgParser {\n                 }\n                 TokenTree::Token(ref t) => {\n                     buffer.push_str(&pprust::token_to_string(&t));\n-                    hi = t.span.hi();\n                 }\n                 _ => return None,\n             }\n@@ -930,20 +913,17 @@ impl MacroArgParser {\n         } else {\n             Some(Box::new(ParsedMacroArg {\n                 kind: MacroArgKind::Other(buffer, \"\".to_owned()),\n-                span: mk_sp(lo, hi),\n             }))\n         };\n \n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Repeat(delim, inner, another, self.last_tok.clone()),\n-            span: mk_sp(self.lo, self.hi),\n         });\n         Some(())\n     }\n \n     fn update_buffer(&mut self, t: &Token) {\n         if self.buf.is_empty() {\n-            self.lo = t.span.lo();\n             self.start_tok = t.clone();\n         } else {\n             let needs_space = match next_space(&self.last_tok.kind) {\n@@ -999,7 +979,6 @@ impl MacroArgParser {\n \n                     // Start keeping the name of this metavariable in the buffer.\n                     self.is_meta_var = true;\n-                    self.lo = span.lo();\n                     self.start_tok = Token {\n                         kind: TokenKind::Dollar,\n                         span,\n@@ -1012,7 +991,7 @@ impl MacroArgParser {\n                     self.add_meta_variable(&mut iter)?;\n                 }\n                 TokenTree::Token(ref t) => self.update_buffer(t),\n-                TokenTree::Delimited(delimited_span, delimited, ref tts) => {\n+                TokenTree::Delimited(_delimited_span, delimited, ref tts) => {\n                     if !self.buf.is_empty() {\n                         if next_space(&self.last_tok.kind) == SpaceState::Always {\n                             self.add_separator();\n@@ -1022,16 +1001,14 @@ impl MacroArgParser {\n                     }\n \n                     // Parse the stuff inside delimiters.\n-                    let mut parser = MacroArgParser::new();\n-                    parser.lo = delimited_span.open.lo();\n+                    let parser = MacroArgParser::new();\n                     let delimited_arg = parser.parse(tts.clone())?;\n \n-                    let span = delimited_span.entire();\n                     if self.is_meta_var {\n-                        self.add_repeat(delimited_arg, delimited, &mut iter, span)?;\n+                        self.add_repeat(delimited_arg, delimited, &mut iter)?;\n                         self.is_meta_var = false;\n                     } else {\n-                        self.add_delimited(delimited_arg, delimited, span);\n+                        self.add_delimited(delimited_arg, delimited);\n                     }\n                 }\n             }"}, {"sha": "ded34d9032f91f188c11c9437b41691cdcce75b5", "filename": "src/tools/rustfmt/src/modules.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfe7c41412808094fd85ba3b9f5ceeabfeea932/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs?ref=acfe7c41412808094fd85ba3b9f5ceeabfeea932", "patch": "@@ -27,7 +27,6 @@ type FileModMap<'ast> = BTreeMap<FileName, Module<'ast>>;\n pub(crate) struct Module<'a> {\n     ast_mod_kind: Option<Cow<'a, ast::ModKind>>,\n     pub(crate) items: Cow<'a, Vec<rustc_ast::ptr::P<ast::Item>>>,\n-    attrs: Cow<'a, Vec<ast::Attribute>>,\n     inner_attr: Vec<ast::Attribute>,\n     pub(crate) span: Span,\n }\n@@ -46,7 +45,6 @@ impl<'a> Module<'a> {\n             .collect();\n         Module {\n             items: mod_items,\n-            attrs: mod_attrs,\n             inner_attr,\n             span: mod_span,\n             ast_mod_kind,"}]}