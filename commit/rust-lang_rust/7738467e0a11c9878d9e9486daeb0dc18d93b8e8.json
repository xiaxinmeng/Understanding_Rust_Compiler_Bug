{"sha": "7738467e0a11c9878d9e9486daeb0dc18d93b8e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Mzg0NjdlMGExMWM5ODc4ZDllOTQ4NmRhZWIwZGMxOGQ5M2I4ZTg=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2020-12-08T19:25:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-08T19:25:21Z"}, "message": "Format code", "tree": {"sha": "120deed19fa7f4e4789331f41ae6609ac8136ae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/120deed19fa7f4e4789331f41ae6609ac8136ae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7738467e0a11c9878d9e9486daeb0dc18d93b8e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7738467e0a11c9878d9e9486daeb0dc18d93b8e8", "html_url": "https://github.com/rust-lang/rust/commit/7738467e0a11c9878d9e9486daeb0dc18d93b8e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7738467e0a11c9878d9e9486daeb0dc18d93b8e8/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2950a135036a608ccdcff3f5da77561927d6952", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2950a135036a608ccdcff3f5da77561927d6952", "html_url": "https://github.com/rust-lang/rust/commit/f2950a135036a608ccdcff3f5da77561927d6952"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "b1c9241670b92e89eec8829b38723a8d82970e35", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7738467e0a11c9878d9e9486daeb0dc18d93b8e8/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738467e0a11c9878d9e9486daeb0dc18d93b8e8/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=7738467e0a11c9878d9e9486daeb0dc18d93b8e8", "patch": "@@ -5,5 +5,5 @@ pub use hir_expand::diagnostics::{\n };\n pub use hir_ty::diagnostics::{\n     IncorrectCase, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr,\n-    NoSuchField, RemoveThisSemicolon\n+    NoSuchField, RemoveThisSemicolon,\n };"}, {"sha": "98b3cade215901d014b081d38bb304db75a2a54a", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7738467e0a11c9878d9e9486daeb0dc18d93b8e8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738467e0a11c9878d9e9486daeb0dc18d93b8e8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=7738467e0a11c9878d9e9486daeb0dc18d93b8e8", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::{AdtId, DefWithBodyId, expr::Statement, path::path, resolver::HasResolver};\n+use hir_def::{expr::Statement, path::path, resolver::HasResolver, AdtId, DefWithBodyId};\n use hir_expand::diagnostics::DiagnosticSink;\n use rustc_hash::FxHashSet;\n use syntax::{ast, AstPtr};\n@@ -11,7 +11,8 @@ use crate::{\n     db::HirDatabase,\n     diagnostics::{\n         match_check::{is_useful, MatchCheckCtx, Matrix, PatStack, Usefulness},\n-        MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields, RemoveThisSemicolon\n+        MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields,\n+        RemoveThisSemicolon,\n     },\n     utils::variant_data,\n     ApplicationTy, InferenceResult, Ty, TypeCtor,\n@@ -324,7 +325,12 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n     }\n \n-    fn validate_missing_tail_expr(&mut self, body_id: ExprId, possible_tail_id: ExprId, db: &dyn HirDatabase) {\n+    fn validate_missing_tail_expr(\n+        &mut self,\n+        body_id: ExprId,\n+        possible_tail_id: ExprId,\n+        db: &dyn HirDatabase,\n+    ) {\n         let mismatch = match self.infer.type_mismatch_for_expr(body_id) {\n             Some(m) => m,\n             None => return,\n@@ -335,7 +341,10 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 let (_, source_map) = db.body_with_source_map(self.owner.into());\n \n                 if let Ok(source_ptr) = source_map.expr_syntax(possible_tail_id) {\n-                    self.sink.push(RemoveThisSemicolon { file: source_ptr.file_id, expr: source_ptr.value });\n+                    self.sink.push(RemoveThisSemicolon {\n+                        file: source_ptr.file_id,\n+                        expr: source_ptr.value,\n+                    });\n                 }\n             }\n         }"}, {"sha": "c235b5bf443046c1231b507734212f4d69c99fa1", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7738467e0a11c9878d9e9486daeb0dc18d93b8e8/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738467e0a11c9878d9e9486daeb0dc18d93b8e8/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=7738467e0a11c9878d9e9486daeb0dc18d93b8e8", "patch": "@@ -13,7 +13,11 @@ use ide_db::{\n     source_change::{FileSystemEdit, SourceFileEdit},\n     RootDatabase,\n };\n-use syntax::{AstNode, Direction, T, algo, ast::{self, edit::IndentLevel, make}};\n+use syntax::{\n+    algo,\n+    ast::{self, edit::IndentLevel, make},\n+    AstNode, Direction, T,\n+};\n use text_edit::TextEdit;\n \n use crate::{diagnostics::Fix, references::rename::rename_with_semantics, FilePosition};\n@@ -102,15 +106,18 @@ impl DiagnosticWithFix for RemoveThisSemicolon {\n     fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n         let root = sema.db.parse_or_expand(self.file)?;\n \n-        let semicolon = self.expr.to_node(&root)\n+        let semicolon = self\n+            .expr\n+            .to_node(&root)\n             .syntax()\n             .siblings_with_tokens(Direction::Next)\n             .filter_map(|it| it.into_token())\n             .find(|it| it.kind() == T![;])?\n             .text_range();\n \n         let edit = TextEdit::delete(semicolon);\n-        let source_change = SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into();\n+        let source_change =\n+            SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into();\n \n         Some(Fix::new(\"Remove this semicolon\", source_change, semicolon))\n     }"}]}