{"sha": "740286657a97770eca193062fd5e127c08c0808c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MDI4NjY1N2E5Nzc3MGVjYTE5MzA2MmZkNWUxMjdjMDhjMDgwOGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-01T07:04:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-01T07:04:17Z"}, "message": "Auto merge of #45674 - kennytm:rollup, r=kennytm\n\nRollup of 14 pull requests\n\n- Successful merges: #45450, #45579, #45602, #45619, #45624, #45644, #45646, #45648, #45649, #45650, #45652, #45660, #45664, #45671\n- Failed merges:", "tree": {"sha": "889864eeb724100b60d489f6435e7b22af7b9cc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/889864eeb724100b60d489f6435e7b22af7b9cc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/740286657a97770eca193062fd5e127c08c0808c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/740286657a97770eca193062fd5e127c08c0808c", "html_url": "https://github.com/rust-lang/rust/commit/740286657a97770eca193062fd5e127c08c0808c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/740286657a97770eca193062fd5e127c08c0808c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31bbe57c79112e91d2d8783032231c7e1d22855b", "url": "https://api.github.com/repos/rust-lang/rust/commits/31bbe57c79112e91d2d8783032231c7e1d22855b", "html_url": "https://github.com/rust-lang/rust/commit/31bbe57c79112e91d2d8783032231c7e1d22855b"}, {"sha": "028455082e3e478ca01780862b324838a60c85fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/028455082e3e478ca01780862b324838a60c85fc", "html_url": "https://github.com/rust-lang/rust/commit/028455082e3e478ca01780862b324838a60c85fc"}], "stats": {"total": 282, "additions": 221, "deletions": 61}, "files": [{"sha": "707aceebb1eda99ed8eeacf5cfe345903a7b0d4f", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -294,7 +294,7 @@ def default_build_triple():\n             raise ValueError('unknown byteorder: {}'.format(sys.byteorder))\n         # only the n64 ABI is supported, indicate it\n         ostype += 'abi64'\n-    elif cputype == 'sparcv9':\n+    elif cputype == 'sparcv9' or cputype == 'sparc64':\n         pass\n     else:\n         err = \"unknown cpu type: {}\".format(cputype)"}, {"sha": "19409ef779ecc940b61ddd068170fc4acbc7ec5e", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -451,6 +451,7 @@ impl Step for Openssl {\n             \"x86_64-apple-darwin\" => \"darwin64-x86_64-cc\",\n             \"x86_64-linux-android\" => \"linux-x86_64\",\n             \"x86_64-unknown-freebsd\" => \"BSD-x86_64\",\n+            \"x86_64-unknown-dragonfly\" => \"BSD-x86_64\",\n             \"x86_64-unknown-linux-gnu\" => \"linux-x86_64\",\n             \"x86_64-unknown-linux-musl\" => \"linux-x86_64\",\n             \"x86_64-unknown-netbsd\" => \"BSD-x86_64\","}, {"sha": "68f9959e53da6c70bed7119cd09342859d431266", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -1 +1 @@\n-Subproject commit 7e33065ce49759958c0d1c04fcadef961032a943\n+Subproject commit 68f9959e53da6c70bed7119cd09342859d431266"}, {"sha": "e23e2acefb7328ca5a00e2023781b099c486cf91", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -1054,7 +1054,9 @@ pub enum Expr_ {\n     /// A function call\n     ///\n     /// The first field resolves to the function itself (usually an `ExprPath`),\n-    /// and the second field is the list of arguments\n+    /// and the second field is the list of arguments.\n+    /// This also represents calling the constructor of\n+    /// tuple-like ADTs such as tuple structs and enum variants.\n     ExprCall(P<Expr>, HirVec<Expr>),\n     /// A method call (`x.foo::<'static, Bar, Baz>(a, b, c, d)`)\n     ///"}, {"sha": "d24344e4e2166c9960ccbd3115700f186a1113d9", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -371,17 +371,18 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for Span {\n         // If this is not an empty or invalid span, we want to hash the last\n         // position that belongs to it, as opposed to hashing the first\n         // position past it.\n-        let span_hi = if self.hi() > self.lo() {\n+        let span = self.data();\n+        let span_hi = if span.hi > span.lo {\n             // We might end up in the middle of a multibyte character here,\n             // but that's OK, since we are not trying to decode anything at\n             // this position.\n-            self.hi() - ::syntax_pos::BytePos(1)\n+            span.hi - ::syntax_pos::BytePos(1)\n         } else {\n-            self.hi()\n+            span.hi\n         };\n \n         {\n-            let loc1 = hcx.codemap().byte_pos_to_line_and_col(self.lo());\n+            let loc1 = hcx.codemap().byte_pos_to_line_and_col(span.lo);\n             let loc1 = loc1.as_ref()\n                            .map(|&(ref fm, line, col)| (&fm.name[..], line, col.to_usize()))\n                            .unwrap_or((\"???\", 0, 0));\n@@ -414,7 +415,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for Span {\n             }\n         }\n \n-        if self.ctxt() == SyntaxContext::empty() {\n+        if span.ctxt == SyntaxContext::empty() {\n             0u8.hash_stable(hcx, hasher);\n         } else {\n             1u8.hash_stable(hcx, hasher);"}, {"sha": "259794e9d0ee4e30bdd1888f02a42f51abb401cd", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -51,7 +51,7 @@ struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     tables: &'a ty::TypeckTables<'tcx>,\n     live_symbols: Box<FxHashSet<ast::NodeId>>,\n     struct_has_extern_repr: bool,\n-    ignore_non_const_paths: bool,\n+    in_pat: bool,\n     inherited_pub_visibility: bool,\n     ignore_variant_stack: Vec<DefId>,\n }\n@@ -75,10 +75,10 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n \n     fn handle_definition(&mut self, def: Def) {\n         match def {\n-            Def::Const(_) | Def::AssociatedConst(..) => {\n+            Def::Const(_) | Def::AssociatedConst(..) | Def::TyAlias(_) => {\n                 self.check_def_id(def.def_id());\n             }\n-            _ if self.ignore_non_const_paths => (),\n+            _ if self.in_pat => (),\n             Def::PrimTy(..) | Def::SelfTy(..) |\n             Def::Local(..) | Def::Upvar(..) => {}\n             Def::Variant(variant_id) | Def::VariantCtor(variant_id, ..) => {\n@@ -289,9 +289,9 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n             _ => ()\n         }\n \n-        self.ignore_non_const_paths = true;\n+        self.in_pat = true;\n         intravisit::walk_pat(self, pat);\n-        self.ignore_non_const_paths = false;\n+        self.in_pat = false;\n     }\n \n     fn visit_path(&mut self, path: &'tcx hir::Path, _: ast::NodeId) {\n@@ -429,7 +429,7 @@ fn find_live<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tables: &ty::TypeckTables::empty(None),\n         live_symbols: box FxHashSet(),\n         struct_has_extern_repr: false,\n-        ignore_non_const_paths: false,\n+        in_pat: false,\n         inherited_pub_visibility: false,\n         ignore_variant_stack: vec![],\n     };"}, {"sha": "3b27890013a227f28a1c9dd7db6b5b62b6d6ac57", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -3606,12 +3606,12 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn report_conflict(&mut self,\n+    fn report_conflict<'b>(&mut self,\n                        parent: Module,\n                        ident: Ident,\n                        ns: Namespace,\n-                       new_binding: &NameBinding,\n-                       old_binding: &NameBinding) {\n+                       new_binding: &NameBinding<'b>,\n+                       old_binding: &NameBinding<'b>) {\n         // Error on the second of two conflicting names\n         if old_binding.span.lo() > new_binding.span.lo() {\n             return self.report_conflict(parent, ident, ns, old_binding, new_binding);\n@@ -3683,6 +3683,26 @@ impl<'a> Resolver<'a> {\n                                                       old_noun, old_kind, name));\n         }\n \n+        // See https://github.com/rust-lang/rust/issues/32354\n+        if old_binding.is_import() || new_binding.is_import() {\n+            let binding = if new_binding.is_import() {\n+                new_binding\n+            } else {\n+                old_binding\n+            };\n+\n+            let cm = self.session.codemap();\n+            let rename_msg = \"You can use `as` to change the binding name of the import\";\n+\n+            if let Ok(snippet) = cm.span_to_snippet(binding.span) {\n+                err.span_suggestion(binding.span,\n+                                    rename_msg,\n+                                    format!(\"{} as Other{}\", snippet, name));\n+            } else {\n+                err.span_label(binding.span, rename_msg);\n+            }\n+        }\n+\n         err.emit();\n         self.name_already_seen.insert(name, span);\n     }"}, {"sha": "51f89110eb4aecfb118d9ff60ab7b914c7f44b08", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -747,7 +747,7 @@ impl<'a> Linker for EmLinker<'a> {\n fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n     let mut symbols = Vec::new();\n \n-    let export_threshold = symbol_export::threshold(tcx);\n+    let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);\n     for &(ref name, _, level) in tcx.exported_symbols(LOCAL_CRATE).iter() {\n         if level.is_below_threshold(export_threshold) {\n             symbols.push(name.clone());"}, {"sha": "398a692f8df5e1529218f508b1cf30f937da530a", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -545,7 +545,8 @@ a {\n .content .search-results td:first-child { padding-right: 0; }\n .content .search-results td:first-child a { padding-right: 10px; }\n \n-tr.result span.primitive::after { content: ' (primitive type)'; font-style: italic; color: black;\n+tr.result span.primitive::after {\n+\tcontent: ' (primitive type)'; font-style: italic; color: black;\n }\n \n body.blur > :not(#help) {\n@@ -761,6 +762,15 @@ span.since {\n \tmargin-top: 5px;\n }\n \n+.docblock > .section-header:first-child {\n+\tmargin-left: 15px;\n+\tmargin-top: 0;\n+}\n+\n+.docblock > .section-header:first-child:hover > a:before {\n+\tleft: -10px;\n+}\n+\n .enum > .collapsed, .struct > .collapsed {\n \tmargin-bottom: 25px;\n }"}, {"sha": "dec281212a514d2a08e82ab32689cd5184cc282e", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -736,10 +736,10 @@ pub trait Read {\n \n     /// Transforms this `Read` instance to an [`Iterator`] over its bytes.\n     ///\n-    /// The returned type implements [`Iterator`] where the `Item` is [`Result`]`<`[`u8`]`,\n-    /// R::Err>`. The yielded item is [`Ok`] if a byte was successfully read and\n-    /// [`Err`] otherwise for I/O errors. EOF is mapped to returning [`None`] from\n-    /// this iterator.\n+    /// The returned type implements [`Iterator`] where the `Item` is\n+    /// [`Result`]`<`[`u8`]`, `[`io::Error`]>`.\n+    /// The yielded item is [`Ok`] if a byte was successfully read and [`Err`]\n+    /// otherwise. EOF is mapped to returning [`None`] from this iterator.\n     ///\n     /// # Examples\n     ///\n@@ -748,6 +748,7 @@ pub trait Read {\n     /// [file]: ../fs/struct.File.html\n     /// [`Iterator`]: ../../std/iter/trait.Iterator.html\n     /// [`Result`]: ../../std/result/enum.Result.html\n+    /// [`io::Error``]: ../../std/io/struct.Error.html\n     /// [`u8`]: ../../std/primitive.u8.html\n     /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n     /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n@@ -1410,6 +1411,8 @@ pub trait BufRead: Read {\n     ///\n     /// If successful, this function will return the total number of bytes read.\n     ///\n+    /// An empty buffer returned indicates that the stream has reached EOF.\n+    ///\n     /// # Errors\n     ///\n     /// This function will ignore all instances of [`ErrorKind::Interrupted`] and\n@@ -1470,6 +1473,8 @@ pub trait BufRead: Read {\n     ///\n     /// If successful, this function will return the total number of bytes read.\n     ///\n+    /// An empty buffer returned indicates that the stream has reached EOF.\n+    ///\n     /// # Errors\n     ///\n     /// This function has the same error semantics as [`read_until`] and will"}, {"sha": "c221f7c8cfe2429d224e61fceee7a543149f28c6", "filename": "src/libstd/sys/unix/ext/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -10,8 +10,14 @@\n \n //! Experimental extensions to `std` for Unix platforms.\n //!\n-//! For now, this module is limited to extracting file descriptors,\n-//! but its functionality will grow over time.\n+//! Provides access to platform-level information on Unix platforms, and\n+//! exposes Unix-specific functions that would otherwise be inappropriate as\n+//! part of the core `std` library.\n+//!\n+//! It exposes more ways to deal with platform-specific strings (`OsStr`,\n+//! `OsString`), allows to set permissions more granularly, extract low-level\n+//! file descriptors from files and sockets, and has platform-specific helpers\n+//! for spawning processes.\n //!\n //! # Examples\n //!"}, {"sha": "e2d40742c71360741ae65c4d73ad58f7ff4ca9e3", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -49,7 +49,9 @@ mod imp {\n                   target_arch = \"powerpc64\",\n                   target_arch = \"s390x\")))]\n     fn getrandom(buf: &mut [u8]) -> libc::c_long {\n-        #[cfg(target_arch = \"x86_64\")]\n+        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"32\"))]\n+        const NR_GETRANDOM: libc::c_long = 0x40000000 + 318;\n+        #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n         const NR_GETRANDOM: libc::c_long = 318;\n         #[cfg(target_arch = \"x86\")]\n         const NR_GETRANDOM: libc::c_long = 355;"}, {"sha": "be0af8052eb13d5776d6b402cf7657e5a9f7c2d6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -901,7 +901,9 @@ pub enum ExprKind {\n     /// A function call\n     ///\n     /// The first field resolves to the function itself,\n-    /// and the second field is the list of arguments\n+    /// and the second field is the list of arguments.\n+    /// This also represents calling the constructor of\n+    /// tuple-like ADTs such as tuple structs and enum variants.\n     Call(P<Expr>, Vec<P<Expr>>),\n     /// A method call (`x.foo::<'static, Bar, Baz>(a, b, c, d)`)\n     ///"}, {"sha": "053746b579dcb31508741c0711cee871698f3081", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -105,11 +105,10 @@ impl<'a> Parser<'a> {\n                         let span = self.span;\n                         self.diagnostic()\n                             .struct_span_err(span, reason)\n-                            .note(\"inner attributes and doc comments, like `#![no_std]` or \\\n-                                   `//! My crate`, annotate the item enclosing them, and are \\\n-                                   usually found at the beginning of source files. Outer \\\n-                                   attributes and doc comments, like `#[test]` and\n-                                   `/// My function`, annotate the item following them.\")\n+                            .note(\"inner attributes, like `#![no_std]`, annotate the item \\\n+                                   enclosing them, and are usually found at the beginning of \\\n+                                   source files. Outer attributes, like `#[test]`, annotate the \\\n+                                   item following them.\")\n                             .emit()\n                     }\n                     ast::AttrStyle::Inner"}, {"sha": "44e73d876e85a9f1ee3a84d7c4ebac2b7df138c2", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 52, "deletions": 25, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -75,6 +75,21 @@ pub struct SpanData {\n     pub ctxt: SyntaxContext,\n }\n \n+impl SpanData {\n+    #[inline]\n+    pub fn with_lo(&self, lo: BytePos) -> Span {\n+        Span::new(lo, self.hi, self.ctxt)\n+    }\n+    #[inline]\n+    pub fn with_hi(&self, hi: BytePos) -> Span {\n+        Span::new(self.lo, hi, self.ctxt)\n+    }\n+    #[inline]\n+    pub fn with_ctxt(&self, ctxt: SyntaxContext) -> Span {\n+        Span::new(self.lo, self.hi, ctxt)\n+    }\n+}\n+\n // The interner in thread-local, so `Span` shouldn't move between threads.\n impl !Send for Span {}\n impl !Sync for Span {}\n@@ -109,38 +124,37 @@ impl Span {\n     }\n     #[inline]\n     pub fn with_lo(self, lo: BytePos) -> Span {\n-        let base = self.data();\n-        Span::new(lo, base.hi, base.ctxt)\n+        self.data().with_lo(lo)\n     }\n     #[inline]\n     pub fn hi(self) -> BytePos {\n         self.data().hi\n     }\n     #[inline]\n     pub fn with_hi(self, hi: BytePos) -> Span {\n-        let base = self.data();\n-        Span::new(base.lo, hi, base.ctxt)\n+        self.data().with_hi(hi)\n     }\n     #[inline]\n     pub fn ctxt(self) -> SyntaxContext {\n         self.data().ctxt\n     }\n     #[inline]\n     pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {\n-        let base = self.data();\n-        Span::new(base.lo, base.hi, ctxt)\n+        self.data().with_ctxt(ctxt)\n     }\n \n     /// Returns a new span representing just the end-point of this span\n     pub fn end_point(self) -> Span {\n-        let lo = cmp::max(self.hi().0 - 1, self.lo().0);\n-        self.with_lo(BytePos(lo))\n+        let span = self.data();\n+        let lo = cmp::max(span.hi.0 - 1, span.lo.0);\n+        span.with_lo(BytePos(lo))\n     }\n \n     /// Returns a new span representing the next character after the end-point of this span\n     pub fn next_point(self) -> Span {\n-        let lo = cmp::max(self.hi().0, self.lo().0 + 1);\n-        Span::new(BytePos(lo), BytePos(lo), self.ctxt())\n+        let span = self.data();\n+        let lo = cmp::max(span.hi.0, span.lo.0 + 1);\n+        Span::new(BytePos(lo), BytePos(lo), span.ctxt)\n     }\n \n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n@@ -150,21 +164,27 @@ impl Span {\n \n     /// Return true if `self` fully encloses `other`.\n     pub fn contains(self, other: Span) -> bool {\n-        self.lo() <= other.lo() && other.hi() <= self.hi()\n+        let span = self.data();\n+        let other = other.data();\n+        span.lo <= other.lo && other.hi <= span.hi\n     }\n \n     /// Return true if the spans are equal with regards to the source text.\n     ///\n     /// Use this instead of `==` when either span could be generated code,\n     /// and you only care that they point to the same bytes of source text.\n     pub fn source_equal(&self, other: &Span) -> bool {\n-        self.lo() == other.lo() && self.hi() == other.hi()\n+        let span = self.data();\n+        let other = other.data();\n+        span.lo == other.lo && span.hi == other.hi\n     }\n \n     /// Returns `Some(span)`, where the start is trimmed by the end of `other`\n     pub fn trim_start(self, other: Span) -> Option<Span> {\n-        if self.hi() > other.hi() {\n-            Some(self.with_lo(cmp::max(self.lo(), other.hi())))\n+        let span = self.data();\n+        let other = other.data();\n+        if span.hi > other.hi {\n+            Some(span.with_lo(cmp::max(span.lo, other.hi)))\n         } else {\n             None\n         }\n@@ -268,29 +288,35 @@ impl Span {\n \n     /// Return a `Span` that would enclose both `self` and `end`.\n     pub fn to(self, end: Span) -> Span {\n+        let span = self.data();\n+        let end = end.data();\n         Span::new(\n-            cmp::min(self.lo(), end.lo()),\n-            cmp::max(self.hi(), end.hi()),\n+            cmp::min(span.lo, end.lo),\n+            cmp::max(span.hi, end.hi),\n             // FIXME(jseyfried): self.ctxt should always equal end.ctxt here (c.f. issue #23480)\n-            if self.ctxt() == SyntaxContext::empty() { end.ctxt() } else { self.ctxt() },\n+            if span.ctxt == SyntaxContext::empty() { end.ctxt } else { span.ctxt },\n         )\n     }\n \n     /// Return a `Span` between the end of `self` to the beginning of `end`.\n     pub fn between(self, end: Span) -> Span {\n+        let span = self.data();\n+        let end = end.data();\n         Span::new(\n-            self.hi(),\n-            end.lo(),\n-            if end.ctxt() == SyntaxContext::empty() { end.ctxt() } else { self.ctxt() },\n+            span.hi,\n+            end.lo,\n+            if end.ctxt == SyntaxContext::empty() { end.ctxt } else { span.ctxt },\n         )\n     }\n \n     /// Return a `Span` between the beginning of `self` to the beginning of `end`.\n     pub fn until(self, end: Span) -> Span {\n+        let span = self.data();\n+        let end = end.data();\n         Span::new(\n-            self.lo(),\n-            end.lo(),\n-            if end.ctxt() == SyntaxContext::empty() { end.ctxt() } else { self.ctxt() },\n+            span.lo,\n+            end.lo,\n+            if end.ctxt == SyntaxContext::empty() { end.ctxt } else { span.ctxt },\n         )\n     }\n }\n@@ -316,13 +342,14 @@ impl Default for Span {\n \n impl serialize::UseSpecializedEncodable for Span {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        let span = self.data();\n         s.emit_struct(\"Span\", 2, |s| {\n             s.emit_struct_field(\"lo\", 0, |s| {\n-                self.lo().encode(s)\n+                span.lo.encode(s)\n             })?;\n \n             s.emit_struct_field(\"hi\", 1, |s| {\n-                self.hi().encode(s)\n+                span.hi.encode(s)\n             })\n         })\n     }"}, {"sha": "f1ada814bdb804648c8e3d40a279d844ef4673b1", "filename": "src/test/run-make/symbol-visibility/Makefile", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Ftest%2Frun-make%2Fsymbol-visibility%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Ftest%2Frun-make%2Fsymbol-visibility%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbol-visibility%2FMakefile?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -9,24 +9,25 @@ all:\n else\n \n NM=nm -D\n-DYLIB_EXT=so\n CDYLIB_NAME=liba_cdylib.so\n RDYLIB_NAME=liba_rust_dylib.so\n EXE_NAME=an_executable\n+COMBINED_CDYLIB_NAME=libcombined_rlib_dylib.so\n \n ifeq ($(UNAME),Darwin)\n NM=nm -gU\n-DYLIB_EXT=dylib\n CDYLIB_NAME=liba_cdylib.dylib\n RDYLIB_NAME=liba_rust_dylib.dylib\n EXE_NAME=an_executable\n+COMBINED_CDYLIB_NAME=libcombined_rlib_dylib.dylib\n endif\n \n all:\n \t$(RUSTC) an_rlib.rs\n \t$(RUSTC) a_cdylib.rs\n \t$(RUSTC) a_rust_dylib.rs\n \t$(RUSTC) an_executable.rs\n+\t$(RUSTC) a_cdylib.rs --crate-name combined_rlib_dylib --crate-type=rlib,cdylib\n \n \t# Check that a cdylib exports its public #[no_mangle] functions\n \t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c public_c_function_from_cdylib)\" -eq \"1\" ]\n@@ -47,4 +48,13 @@ all:\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_c_function_from_rlib)\" -eq \"0\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_rust_function_from_exe)\" -eq \"0\" ]\n \n+\n+\t# Check the combined case, where we generate a cdylib and an rlib in the same\n+\t# compilation session:\n+\t# Check that a cdylib exports its public #[no_mangle] functions\n+\t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -c public_c_function_from_cdylib)\" -eq \"1\" ]\n+\t# Check that a cdylib exports the public #[no_mangle] functions of dependencies\n+\t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n+\t# Check that a cdylib DOES NOT export any public Rust functions\n+\t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -c _ZN.*h.*E)\" -eq \"0\" ]\n endif"}, {"sha": "a37d671e5c17139dd33db7e00195b909eeb8afd4", "filename": "src/test/run-pass/dead-code-alias-in-pat.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Ftest%2Frun-pass%2Fdead-code-alias-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Ftest%2Frun-pass%2Fdead-code-alias-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdead-code-alias-in-pat.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(dead_code)]\n+\n+fn main() {\n+    struct Foo<T> { x: T }\n+    type Bar = Foo<u32>;\n+    let spam = |Bar { x }| x != 0;\n+    println!(\"{}\", spam(Foo { x: 10 }));\n+}"}, {"sha": "1a660e4c6784e22cc05f138990eca8966544e3fe", "filename": "src/test/ui/issue-45296.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Ftest%2Fui%2Fissue-45296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Ftest%2Fui%2Fissue-45296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45296.stderr?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -4,8 +4,7 @@ error: an inner attribute is not permitted in this context\n 14 |     #![allow(unused_variables)]\n    |       ^\n    |\n-   = note: inner attributes and doc comments, like `#![no_std]` or `//! My crate`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes and doc comments, like `#[test]` and\n-                                              `/// My function`, annotate the item following them.\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: aborting due to previous error\n "}, {"sha": "51aba27498f881beb907f95cb2fc28738f6bd0ec", "filename": "src/test/ui/suggestions/issue-32354-suggest-import-rename.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod extension1 {\n+    pub trait ConstructorExtension {}\n+}\n+\n+pub mod extension2 {\n+    pub trait ConstructorExtension {}\n+}\n+\n+use extension1::ConstructorExtension;\n+use extension2::ConstructorExtension;\n+\n+fn main() {}"}, {"sha": "07985191284740d201fe47d6cc5d494de766cdc7", "filename": "src/test/ui/suggestions/issue-32354-suggest-import-rename.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.stderr?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -0,0 +1,16 @@\n+error[E0252]: the name `ConstructorExtension` is defined multiple times\n+  --> $DIR/issue-32354-suggest-import-rename.rs:20:5\n+   |\n+19 | use extension1::ConstructorExtension;\n+   |     -------------------------------- previous import of the trait `ConstructorExtension` here\n+20 | use extension2::ConstructorExtension;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ConstructorExtension` reimported here\n+   |\n+   = note: `ConstructorExtension` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+20 | use extension2::ConstructorExtension as OtherConstructorExtension;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9736c0399308149033fd99fe7c4d4f538e3d3bc6", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/740286657a97770eca193062fd5e127c08c0808c/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740286657a97770eca193062fd5e127c08c0808c/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=740286657a97770eca193062fd5e127c08c0808c", "patch": "@@ -351,6 +351,26 @@ fn map_lib_features(base_src_path: &Path,\n                 }\n             }\n             becoming_feature = None;\n+            if line.contains(\"rustc_const_unstable(\") {\n+                // const fn features are handled specially\n+                let feature_name = match find_attr_val(line, \"feature\") {\n+                    Some(name) => name,\n+                    None => err!(\"malformed stability attribute\"),\n+                };\n+                let feature = Feature {\n+                    level: Status::Unstable,\n+                    since: \"None\".to_owned(),\n+                    has_gate_test: false,\n+                    // Whether there is a common tracking issue\n+                    // for these feature gates remains an open question\n+                    // https://github.com/rust-lang/rust/issues/24111#issuecomment-340283184\n+                    // But we take 24111 otherwise they will be shown as\n+                    // \"internal to the compiler\" which they are not.\n+                    tracking_issue: Some(24111),\n+                };\n+                mf(Ok((feature_name, feature)), file, i + 1);\n+                continue;\n+            }\n             let level = if line.contains(\"[unstable(\") {\n                 Status::Unstable\n             } else if line.contains(\"[stable(\") {"}]}