{"sha": "45b48b9b6d70065a16cc119fe934ed342c664c78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YjQ4YjliNmQ3MDA2NWExNmNjMTE5ZmU5MzRlZDM0MmM2NjRjNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-26T17:42:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-26T17:42:59Z"}, "message": "Auto merge of #52735 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #52558 (Add tests for ICEs which no longer repro)\n - #52610 (Clarify what a task is)\n - #52617 (Don't match on region kinds when reporting NLL errors)\n - #52635 (Fix #[linkage] propagation though generic functions)\n - #52647 (Suggest to take and ignore args while closure args count mismatching)\n - #52649 (Point spans to inner elements of format strings)\n - #52654 (Format linker args in a way that works for gcc and ld)\n - #52667 (update the stdsimd submodule)\n - #52674 (Impl Executor for Box<E: Executor>)\n - #52690 (ARM: expose `rclass` and `dsp` target features)\n - #52692 (Improve readability in a few sorts)\n - #52695 (Hide some lints which are not quite right the way they are reported to the user)\n - #52718 (State default capacity for BufReader/BufWriter)\n - #52721 (std::ops::Try impl for std::task::Poll)\n - #52723 (rustc: Register crates under their real names)\n - #52734 (sparc ABI issue - structure returning from function is returned in 64bit registers (with tests))\n\nFailed merges:\n\n - #52678 ([NLL] Use better spans in some errors)\n\nr? @ghost", "tree": {"sha": "ece7180c111f2aa9e0b7fe31a4fe18773d93c693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ece7180c111f2aa9e0b7fe31a4fe18773d93c693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45b48b9b6d70065a16cc119fe934ed342c664c78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45b48b9b6d70065a16cc119fe934ed342c664c78", "html_url": "https://github.com/rust-lang/rust/commit/45b48b9b6d70065a16cc119fe934ed342c664c78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45b48b9b6d70065a16cc119fe934ed342c664c78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfbf8375d7b1a4f4fb8a5feb54ae132847d916ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbf8375d7b1a4f4fb8a5feb54ae132847d916ad", "html_url": "https://github.com/rust-lang/rust/commit/bfbf8375d7b1a4f4fb8a5feb54ae132847d916ad"}, {"sha": "995d7194c1522faf3f6a560ee800156a82c53a24", "url": "https://api.github.com/repos/rust-lang/rust/commits/995d7194c1522faf3f6a560ee800156a82c53a24", "html_url": "https://github.com/rust-lang/rust/commit/995d7194c1522faf3f6a560ee800156a82c53a24"}], "stats": {"total": 1791, "additions": 1355, "deletions": 436}, "files": [{"sha": "2cf9b13a67a2750754b0f98070a52aec2e979d34", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -67,7 +67,7 @@ use core::marker::{Unpin, Unsize};\n use core::mem::{self, PinMut};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n-use core::task::{Context, Poll};\n+use core::task::{Context, Poll, Executor, SpawnErrorKind, SpawnObjError};\n \n use raw_vec::RawVec;\n use str::from_boxed_utf8_unchecked;\n@@ -972,6 +972,19 @@ unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for PinBox<F>\n     }\n }\n \n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<E> Executor for Box<E>\n+    where E: Executor + ?Sized\n+{\n+    fn spawn_obj(&mut self, task: FutureObj<'static, ()>) -> Result<(), SpawnObjError> {\n+        (**self).spawn_obj(task)\n+    }\n+\n+    fn status(&self) -> Result<(), SpawnErrorKind> {\n+        (**self).status()\n+    }\n+}\n+\n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n impl<'a, F: Future<Output = ()> + Send + 'a> From<PinBox<F>> for FutureObj<'a, ()> {\n     fn from(boxed: PinBox<F>) -> Self {"}, {"sha": "affcbf464da221214da7c8712e5c7972bde24d23", "filename": "src/libcore/task/executor.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibcore%2Ftask%2Fexecutor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibcore%2Ftask%2Fexecutor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fexecutor.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -17,21 +17,27 @@ use future::{FutureObj, LocalFutureObj};\n \n /// A task executor.\n ///\n-/// A *task* is a `()`-producing async value that runs at the top level, and will\n-/// be `poll`ed until completion. It's also the unit at which wake-up\n-/// notifications occur. Executors, such as thread pools, allow tasks to be\n-/// spawned and are responsible for putting tasks onto ready queues when\n-/// they are woken up, and polling them when they are ready.\n+/// Futures are polled until completion by tasks, a kind of lightweight\n+/// \"thread\". A *task executor* is responsible for the creation of these tasks\n+/// and the coordination of their execution on real operating system threads. In\n+/// particular, whenever a task signals that it can make further progress via a\n+/// wake-up notification, it is the responsibility of the task executor to put\n+/// the task into a queue to continue executing it, i.e. polling the future in\n+/// it, later.\n pub trait Executor {\n-    /// Spawn the given task, polling it until completion.\n+    /// Spawns a new task with the given future. The future will be polled until\n+    /// completion.\n     ///\n     /// # Errors\n     ///\n     /// The executor may be unable to spawn tasks, either because it has\n     /// been shut down or is resource-constrained.\n-    fn spawn_obj(&mut self, task: FutureObj<'static, ()>) -> Result<(), SpawnObjError>;\n+    fn spawn_obj(\n+        &mut self,\n+        future: FutureObj<'static, ()>,\n+    ) -> Result<(), SpawnObjError>;\n \n-    /// Determine whether the executor is able to spawn new tasks.\n+    /// Determines whether the executor is able to spawn new tasks.\n     ///\n     /// # Returns\n     ///\n@@ -75,8 +81,8 @@ pub struct SpawnObjError {\n     /// The kind of error\n     pub kind: SpawnErrorKind,\n \n-    /// The task for which spawning was attempted\n-    pub task: FutureObj<'static, ()>,\n+    /// The future for which spawning inside a task was attempted\n+    pub future: FutureObj<'static, ()>,\n }\n \n /// The result of a failed spawn\n@@ -85,6 +91,6 @@ pub struct SpawnLocalObjError {\n     /// The kind of error\n     pub kind: SpawnErrorKind,\n \n-    /// The task for which spawning was attempted\n-    pub task: LocalFutureObj<'static, ()>,\n+    /// The future for which spawning inside a task was attempted\n+    pub future: LocalFutureObj<'static, ()>,\n }"}, {"sha": "fb027efc6dca0c1a269c0bd15f223aa5e3389252", "filename": "src/libcore/task/poll.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibcore%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibcore%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fpoll.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -12,6 +12,9 @@\n             reason = \"futures in libcore are unstable\",\n             issue = \"50547\")]\n \n+use ops::Try;\n+use result::Result;\n+\n /// Indicates whether a value is available or if the current task has been\n /// scheduled to receive a wakeup instead.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]\n@@ -39,6 +42,7 @@ impl<T> Poll<T> {\n     }\n \n     /// Returns whether this is `Poll::Ready`\n+    #[inline]\n     pub fn is_ready(&self) -> bool {\n         match *self {\n             Poll::Ready(_) => true,\n@@ -47,6 +51,7 @@ impl<T> Poll<T> {\n     }\n \n     /// Returns whether this is `Poll::Pending`\n+    #[inline]\n     pub fn is_pending(&self) -> bool {\n         !self.is_ready()\n     }\n@@ -81,3 +86,52 @@ impl<T> From<T> for Poll<T> {\n         Poll::Ready(t)\n     }\n }\n+\n+impl<T, E> Try for Poll<Result<T, E>> {\n+    type Ok = Poll<T>;\n+    type Error = E;\n+\n+    #[inline]\n+    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+        match self {\n+            Poll::Ready(Ok(x)) => Ok(Poll::Ready(x)),\n+            Poll::Ready(Err(e)) => Err(e),\n+            Poll::Pending => Ok(Poll::Pending),\n+        }\n+    }\n+\n+    #[inline]\n+    fn from_error(e: Self::Error) -> Self {\n+        Poll::Ready(Err(e))\n+    }\n+\n+    #[inline]\n+    fn from_ok(x: Self::Ok) -> Self {\n+        x.map(Ok)\n+    }\n+}\n+\n+impl<T, E> Try for Poll<Option<Result<T, E>>> {\n+    type Ok = Poll<Option<T>>;\n+    type Error = E;\n+\n+    #[inline]\n+    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+        match self {\n+            Poll::Ready(Some(Ok(x))) => Ok(Poll::Ready(Some(x))),\n+            Poll::Ready(Some(Err(e))) => Err(e),\n+            Poll::Ready(None) => Ok(Poll::Ready(None)),\n+            Poll::Pending => Ok(Poll::Pending),\n+        }\n+    }\n+\n+    #[inline]\n+    fn from_error(e: Self::Error) -> Self {\n+        Poll::Ready(Some(Err(e)))\n+    }\n+\n+    #[inline]\n+    fn from_ok(x: Self::Ok) -> Self {\n+        x.map(|x| x.map(Ok))\n+    }\n+}"}, {"sha": "30a3bbdc58e988b4c85326c774f318aa1428b39e", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -154,6 +154,8 @@ pub struct Parser<'a> {\n     style: Option<usize>,\n     /// How many newlines have been seen in the string so far, to adjust the error spans\n     seen_newlines: usize,\n+    /// Start and end byte offset of every successfuly parsed argument\n+    pub arg_places: Vec<(usize, usize)>,\n }\n \n impl<'a> Iterator for Parser<'a> {\n@@ -168,9 +170,13 @@ impl<'a> Iterator for Parser<'a> {\n                     if self.consume('{') {\n                         Some(String(self.string(pos + 1)))\n                     } else {\n-                        let ret = Some(NextArgument(self.argument()));\n-                        self.must_consume('}');\n-                        ret\n+                        let mut arg = self.argument();\n+                        if let Some(arg_pos) = self.must_consume('}').map(|end| {\n+                            (pos + raw + 1, end + raw + 2)\n+                        }) {\n+                            self.arg_places.push(arg_pos);\n+                        }\n+                        Some(NextArgument(arg))\n                     }\n                 }\n                 '}' => {\n@@ -211,6 +217,7 @@ impl<'a> Parser<'a> {\n             curarg: 0,\n             style,\n             seen_newlines: 0,\n+            arg_places: vec![],\n         }\n     }\n \n@@ -271,20 +278,22 @@ impl<'a> Parser<'a> {\n \n     /// Forces consumption of the specified character. If the character is not\n     /// found, an error is emitted.\n-    fn must_consume(&mut self, c: char) {\n+    fn must_consume(&mut self, c: char) -> Option<usize> {\n         self.ws();\n         let raw = self.style.unwrap_or(0);\n \n         let padding = raw + self.seen_newlines;\n         if let Some(&(pos, maybe)) = self.cur.peek() {\n             if c == maybe {\n                 self.cur.next();\n+                Some(pos)\n             } else {\n                 let pos = pos + padding + 1;\n                 self.err(format!(\"expected `{:?}`, found `{:?}`\", c, maybe),\n                          format!(\"expected `{}`\", c),\n                          pos,\n                          pos);\n+                None\n             }\n         } else {\n             let msg = format!(\"expected `{:?}` but string was terminated\", c);\n@@ -302,6 +311,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 self.err(msg, format!(\"expected `{:?}`\", c), pos, pos);\n             }\n+            None\n         }\n     }\n "}, {"sha": "8300f98fb1cd5bee246364c6d36850b73a8deadc", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -1050,6 +1050,30 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if let Some(found_span) = found_span {\n             err.span_label(found_span, format!(\"takes {}\", found_str));\n \n+            // Suggest to take and ignore the arguments with expected_args_length `_`s if\n+            // found arguments is empty (assume the user just wants to ignore args in this case).\n+            // For example, if `expected_args_length` is 2, suggest `|_, _|`.\n+            if found_args.is_empty() && is_closure {\n+                let mut underscores = \"_\".repeat(expected_args.len())\n+                                      .split(\"\")\n+                                      .filter(|s| !s.is_empty())\n+                                      .collect::<Vec<_>>()\n+                                      .join(\", \");\n+                err.span_suggestion_with_applicability(\n+                    found_span,\n+                    &format!(\n+                        \"consider changing the closure to take and ignore the expected argument{}\",\n+                        if expected_args.len() < 2 {\n+                            \"\"\n+                        } else {\n+                            \"s\"\n+                        }\n+                    ),\n+                    format!(\"|{}|\", underscores),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+\n             if let &[ArgKind::Tuple(_, ref fields)] = &found_args[..] {\n                 if fields.len() == expected_args.len() {\n                     let sugg = fields.iter()"}, {"sha": "f5bd31a67e5ce8b16569a65710846915a8a3e0f4", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -218,24 +218,26 @@ impl<'a> GccLinker<'a> {\n }\n \n impl<'a> Linker for GccLinker<'a> {\n-    fn link_dylib(&mut self, lib: &str) { self.hint_dynamic(); self.cmd.arg(\"-l\").arg(lib); }\n-    fn link_staticlib(&mut self, lib: &str) { self.hint_static(); self.cmd.arg(\"-l\").arg(lib); }\n+    fn link_dylib(&mut self, lib: &str) { self.hint_dynamic(); self.cmd.arg(format!(\"-l{}\",lib)); }\n+    fn link_staticlib(&mut self, lib: &str) {\n+        self.hint_static(); self.cmd.arg(format!(\"-l{}\",lib));\n+    }\n     fn link_rlib(&mut self, lib: &Path) { self.hint_static(); self.cmd.arg(lib); }\n     fn include_path(&mut self, path: &Path) { self.cmd.arg(\"-L\").arg(path); }\n     fn framework_path(&mut self, path: &Path) { self.cmd.arg(\"-F\").arg(path); }\n     fn output_filename(&mut self, path: &Path) { self.cmd.arg(\"-o\").arg(path); }\n     fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n     fn position_independent_executable(&mut self) { self.cmd.arg(\"-pie\"); }\n     fn no_position_independent_executable(&mut self) { self.cmd.arg(\"-no-pie\"); }\n-    fn full_relro(&mut self) { self.linker_arg(\"-z,relro,-z,now\"); }\n-    fn partial_relro(&mut self) { self.linker_arg(\"-z,relro\"); }\n-    fn no_relro(&mut self) { self.linker_arg(\"-z,norelro\"); }\n+    fn full_relro(&mut self) { self.linker_arg(\"-zrelro\"); self.linker_arg(\"-znow\"); }\n+    fn partial_relro(&mut self) { self.linker_arg(\"-zrelro\"); }\n+    fn no_relro(&mut self) { self.linker_arg(\"-znorelro\"); }\n     fn build_static_executable(&mut self) { self.cmd.arg(\"-static\"); }\n     fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n \n     fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n         self.hint_dynamic();\n-        self.cmd.arg(\"-l\").arg(lib);\n+        self.cmd.arg(format!(\"-l{}\",lib));\n     }\n \n     fn link_framework(&mut self, framework: &str) {\n@@ -253,23 +255,22 @@ impl<'a> Linker for GccLinker<'a> {\n         self.hint_static();\n         let target = &self.sess.target.target;\n         if !target.options.is_like_osx {\n-            self.linker_arg(\"--whole-archive\").cmd.arg(\"-l\").arg(lib);\n+            self.linker_arg(\"--whole-archive\").cmd.arg(format!(\"-l{}\",lib));\n             self.linker_arg(\"--no-whole-archive\");\n         } else {\n             // -force_load is the macOS equivalent of --whole-archive, but it\n             // involves passing the full path to the library to link.\n-            let mut v = OsString::from(\"-force_load,\");\n-            v.push(&archive::find_library(lib, search_path, &self.sess));\n-            self.linker_arg(&v);\n+            self.linker_arg(\"-force_load\");\n+            let lib = archive::find_library(lib, search_path, &self.sess);\n+            self.linker_arg(&lib);\n         }\n     }\n \n     fn link_whole_rlib(&mut self, lib: &Path) {\n         self.hint_static();\n         if self.sess.target.target.options.is_like_osx {\n-            let mut v = OsString::from(\"-force_load,\");\n-            v.push(lib);\n-            self.linker_arg(&v);\n+            self.linker_arg(\"-force_load\");\n+            self.linker_arg(&lib);\n         } else {\n             self.linker_arg(\"--whole-archive\").cmd.arg(lib);\n             self.linker_arg(\"--no-whole-archive\");\n@@ -294,8 +295,7 @@ impl<'a> Linker for GccLinker<'a> {\n         if self.sess.target.target.options.is_like_osx {\n             self.linker_arg(\"-dead_strip\");\n         } else if self.sess.target.target.options.is_like_solaris {\n-            self.linker_arg(\"-z\");\n-            self.linker_arg(\"ignore\");\n+            self.linker_arg(\"-zignore\");\n \n         // If we're building a dylib, we don't use --gc-sections because LLVM\n         // has already done the best it can do, and we also don't want to\n@@ -369,7 +369,8 @@ impl<'a> Linker for GccLinker<'a> {\n             // the right `-Wl,-install_name` with an `@rpath` in it.\n             if self.sess.opts.cg.rpath ||\n                self.sess.opts.debugging_opts.osx_rpath_install_name {\n-                let mut v = OsString::from(\"-install_name,@rpath/\");\n+                self.linker_arg(\"-install_name\");\n+                let mut v = OsString::from(\"@rpath/\");\n                 v.push(out_filename.file_name().unwrap());\n                 self.linker_arg(&v);\n             }\n@@ -448,7 +449,8 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn subsystem(&mut self, subsystem: &str) {\n-        self.linker_arg(&format!(\"--subsystem,{}\", subsystem));\n+        self.linker_arg(\"--subsystem\");\n+        self.linker_arg(&subsystem);\n     }\n \n     fn finalize(&mut self) -> Command {"}, {"sha": "f0b5f4b887971f1cffa7bc150ef450d24d7c2ab0", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 78, "deletions": 47, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -20,12 +20,14 @@ use monomorphize::MonoItem;\n use common::{CodegenCx, val_ty};\n use declare;\n use monomorphize::Instance;\n+use syntax_pos::Span;\n+use syntax_pos::symbol::LocalInternedString;\n use type_::Type;\n use type_of::LayoutLlvmExt;\n-use rustc::ty;\n+use rustc::ty::{self, Ty};\n use rustc::ty::layout::{Align, LayoutOf};\n \n-use rustc::hir::{self, CodegenFnAttrFlags};\n+use rustc::hir::{self, CodegenFnAttrs, CodegenFnAttrFlags};\n \n use std::ffi::{CStr, CString};\n \n@@ -119,6 +121,8 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n     let ty = instance.ty(cx.tcx);\n     let sym = cx.tcx.symbol_name(instance).as_str();\n \n+    debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n+\n     let g = if let Some(id) = cx.tcx.hir.as_local_node_id(def_id) {\n \n         let llty = cx.layout_of(ty).llvm_type(cx);\n@@ -144,50 +148,15 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n             hir_map::NodeForeignItem(&hir::ForeignItem {\n                 ref attrs, span, node: hir::ForeignItemKind::Static(..), ..\n             }) => {\n-                let g = if let Some(linkage) = cx.tcx.codegen_fn_attrs(def_id).linkage {\n-                    // If this is a static with a linkage specified, then we need to handle\n-                    // it a little specially. The typesystem prevents things like &T and\n-                    // extern \"C\" fn() from being non-null, so we can't just declare a\n-                    // static and call it a day. Some linkages (like weak) will make it such\n-                    // that the static actually has a null value.\n-                    let llty2 = match ty.sty {\n-                        ty::TyRawPtr(ref mt) => cx.layout_of(mt.ty).llvm_type(cx),\n-                        _ => {\n-                            cx.sess().span_fatal(span, \"must have type `*const T` or `*mut T`\");\n-                        }\n-                    };\n-                    unsafe {\n-                        // Declare a symbol `foo` with the desired linkage.\n-                        let g1 = declare::declare_global(cx, &sym, llty2);\n-                        llvm::LLVMRustSetLinkage(g1, base::linkage_to_llvm(linkage));\n-\n-                        // Declare an internal global `extern_with_linkage_foo` which\n-                        // is initialized with the address of `foo`.  If `foo` is\n-                        // discarded during linking (for example, if `foo` has weak\n-                        // linkage and there are no definitions), then\n-                        // `extern_with_linkage_foo` will instead be initialized to\n-                        // zero.\n-                        let mut real_name = \"_rust_extern_with_linkage_\".to_string();\n-                        real_name.push_str(&sym);\n-                        let g2 = declare::define_global(cx, &real_name, llty).unwrap_or_else(||{\n-                            cx.sess().span_fatal(span,\n-                                &format!(\"symbol `{}` is already defined\", &sym))\n-                        });\n-                        llvm::LLVMRustSetLinkage(g2, llvm::Linkage::InternalLinkage);\n-                        llvm::LLVMSetInitializer(g2, g1);\n-                        g2\n-                    }\n-                } else {\n-                    // Generate an external declaration.\n-                    declare::declare_global(cx, &sym, llty)\n-                };\n-\n-                (g, attrs)\n+                let fn_attrs = cx.tcx.codegen_fn_attrs(def_id);\n+                (check_and_apply_linkage(cx, &fn_attrs, ty, sym, Some(span)), attrs)\n             }\n \n             item => bug!(\"get_static: expected static, found {:?}\", item)\n         };\n \n+        debug!(\"get_static: sym={} attrs={:?}\", sym, attrs);\n+\n         for attr in attrs {\n             if attr.check_name(\"thread_local\") {\n                 llvm::set_thread_local_mode(g, cx.tls_model);\n@@ -197,19 +166,21 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n         g\n     } else {\n         // FIXME(nagisa): perhaps the map of externs could be offloaded to llvm somehow?\n-        // FIXME(nagisa): investigate whether it can be changed into define_global\n-        let g = declare::declare_global(cx, &sym, cx.layout_of(ty).llvm_type(cx));\n+        debug!(\"get_static: sym={} item_attr={:?}\", sym, cx.tcx.item_attrs(def_id));\n+\n+        let attrs = cx.tcx.codegen_fn_attrs(def_id);\n+        let g = check_and_apply_linkage(cx, &attrs, ty, sym, None);\n+\n         // Thread-local statics in some other crate need to *always* be linked\n         // against in a thread-local fashion, so we need to be sure to apply the\n         // thread-local attribute locally if it was present remotely. If we\n         // don't do this then linker errors can be generated where the linker\n         // complains that one object files has a thread local version of the\n         // symbol and another one doesn't.\n-        for attr in cx.tcx.get_attrs(def_id).iter() {\n-            if attr.check_name(\"thread_local\") {\n-                llvm::set_thread_local_mode(g, cx.tls_model);\n-            }\n+        if attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL) {\n+            llvm::set_thread_local_mode(g, cx.tls_model);\n         }\n+\n         if cx.use_dll_storage_attrs && !cx.tcx.is_foreign_item(def_id) {\n             // This item is external but not foreign, i.e. it originates from an external Rust\n             // crate. Since we don't know whether this crate will be linked dynamically or\n@@ -242,6 +213,66 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n     g\n }\n \n+fn check_and_apply_linkage<'tcx>(\n+    cx: &CodegenCx<'_, 'tcx>,\n+    attrs: &CodegenFnAttrs,\n+    ty: Ty<'tcx>,\n+    sym: LocalInternedString,\n+    span: Option<Span>\n+) -> ValueRef {\n+    let llty = cx.layout_of(ty).llvm_type(cx);\n+    if let Some(linkage) = attrs.linkage {\n+        debug!(\"get_static: sym={} linkage={:?}\", sym, linkage);\n+\n+        // If this is a static with a linkage specified, then we need to handle\n+        // it a little specially. The typesystem prevents things like &T and\n+        // extern \"C\" fn() from being non-null, so we can't just declare a\n+        // static and call it a day. Some linkages (like weak) will make it such\n+        // that the static actually has a null value.\n+        let llty2 = match ty.sty {\n+            ty::TyRawPtr(ref mt) => cx.layout_of(mt.ty).llvm_type(cx),\n+            _ => {\n+                if span.is_some() {\n+                    cx.sess().span_fatal(span.unwrap(), \"must have type `*const T` or `*mut T`\")\n+                } else {\n+                    bug!(\"must have type `*const T` or `*mut T`\")\n+                }\n+            }\n+        };\n+        unsafe {\n+            // Declare a symbol `foo` with the desired linkage.\n+            let g1 = declare::declare_global(cx, &sym, llty2);\n+            llvm::LLVMRustSetLinkage(g1, base::linkage_to_llvm(linkage));\n+\n+            // Declare an internal global `extern_with_linkage_foo` which\n+            // is initialized with the address of `foo`.  If `foo` is\n+            // discarded during linking (for example, if `foo` has weak\n+            // linkage and there are no definitions), then\n+            // `extern_with_linkage_foo` will instead be initialized to\n+            // zero.\n+            let mut real_name = \"_rust_extern_with_linkage_\".to_string();\n+            real_name.push_str(&sym);\n+            let g2 = declare::define_global(cx, &real_name, llty).unwrap_or_else(||{\n+                if span.is_some() {\n+                    cx.sess().span_fatal(\n+                        span.unwrap(),\n+                        &format!(\"symbol `{}` is already defined\", &sym)\n+                    )\n+                } else {\n+                    bug!(\"symbol `{}` is already defined\", &sym)\n+                }\n+            });\n+            llvm::LLVMRustSetLinkage(g2, llvm::Linkage::InternalLinkage);\n+            llvm::LLVMSetInitializer(g2, g1);\n+            g2\n+        }\n+    } else {\n+        // Generate an external declaration.\n+        // FIXME(nagisa): investigate whether it can be changed into define_global\n+        declare::declare_global(cx, &sym, llty)\n+    }\n+}\n+\n pub fn codegen_static<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n     def_id: DefId,"}, {"sha": "e941998098d00ceba7242969c8579151a0915945", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -85,6 +85,8 @@ unsafe fn configure_llvm(sess: &Session) {\n \n const ARM_WHITELIST: &[(&str, Option<&str>)] = &[\n     (\"mclass\", Some(\"arm_target_feature\")),\n+    (\"rclass\", Some(\"arm_target_feature\")),\n+    (\"dsp\", Some(\"arm_target_feature\")),\n     (\"neon\", Some(\"arm_target_feature\")),\n     (\"v7\", Some(\"arm_target_feature\")),\n     (\"vfp2\", Some(\"arm_target_feature\")),"}, {"sha": "000025c49a698a4a230eb93819d370b0254851ad", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -1229,10 +1229,7 @@ Available lint options:\n     fn sort_lint_groups(lints: Vec<(&'static str, Vec<lint::LintId>, bool)>)\n                         -> Vec<(&'static str, Vec<lint::LintId>)> {\n         let mut lints: Vec<_> = lints.into_iter().map(|(x, y, _)| (x, y)).collect();\n-        lints.sort_by(|&(x, _): &(&'static str, Vec<lint::LintId>),\n-                       &(y, _): &(&'static str, Vec<lint::LintId>)| {\n-            x.cmp(y)\n-        });\n+        lints.sort_by_key(|ref l| l.0);\n         lints\n     }\n "}, {"sha": "4aaf5eb47f61c8b4bc17bbe64d11f9c10cbdab32", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -202,14 +202,13 @@ fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &Vec<Rec\n \n pub fn write_counts(count_file: &mut File, counts: &mut HashMap<String,QueryMetric>) {\n     use rustc::util::common::duration_to_secs_str;\n-    use std::cmp::Ordering;\n+    use std::cmp::Reverse;\n \n     let mut data = vec![];\n     for (ref cons, ref qm) in counts.iter() {\n         data.push((cons.clone(), qm.count.clone(), qm.dur_total.clone(), qm.dur_self.clone()));\n     };\n-    data.sort_by(|&(_,_,_,self1),&(_,_,_,self2)|\n-                 if self1 > self2 { Ordering::Less } else { Ordering::Greater } );\n+    data.sort_by_key(|&k| Reverse(k.3));\n     for (cons, count, dur_total, dur_self) in data {\n         write!(count_file, \"{}, {}, {}, {}\\n\",\n                cons, count,"}, {"sha": "6bcf0d9eff6c5b4b8147904a3b5db1f89a525dad", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -22,7 +22,7 @@ use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n use std::collections::HashMap;\n-use std::cmp::min;\n+use std::cmp::{min, Reverse};\n use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter};\n use termcolor::{WriteColor, Color, Buffer};\n use unicode_width;\n@@ -265,9 +265,7 @@ impl EmitterWriter {\n         }\n \n         // Find overlapping multiline annotations, put them at different depths\n-        multiline_annotations.sort_by(|a, b| {\n-            (a.1.line_start, a.1.line_end).cmp(&(b.1.line_start, b.1.line_end))\n-        });\n+        multiline_annotations.sort_by_key(|&(_, ref ml)| (ml.line_start, ml.line_end));\n         for item in multiline_annotations.clone() {\n             let ann = item.1;\n             for item in multiline_annotations.iter_mut() {\n@@ -403,7 +401,7 @@ impl EmitterWriter {\n         // otherwise the lines would end up needing to go over a message.\n \n         let mut annotations = line.annotations.clone();\n-        annotations.sort_by(|a,b| b.start_col.cmp(&a.start_col));\n+        annotations.sort_by_key(|a| Reverse(a.start_col));\n \n         // First, figure out where each label will be positioned.\n         //"}, {"sha": "f434da3f88d6cd2d90cc1ff969ab1f9acc227a45", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -188,13 +188,12 @@ impl<'a> CrateLoader<'a> {\n     fn register_crate(&mut self,\n                       root: &Option<CratePaths>,\n                       ident: Symbol,\n-                      name: Symbol,\n                       span: Span,\n                       lib: Library,\n                       dep_kind: DepKind)\n                       -> (CrateNum, Lrc<cstore::CrateMetadata>) {\n-        info!(\"register crate `extern crate {} as {}`\", name, ident);\n         let crate_root = lib.metadata.get_root();\n+        info!(\"register crate `extern crate {} as {}`\", crate_root.name, ident);\n         self.verify_no_symbol_conflicts(span, &crate_root);\n \n         // Claim this crate number and cache it\n@@ -233,7 +232,7 @@ impl<'a> CrateLoader<'a> {\n             .collect();\n \n         let cmeta = cstore::CrateMetadata {\n-            name,\n+            name: crate_root.name,\n             extern_crate: Lock::new(None),\n             def_path_table: Lrc::new(def_path_table),\n             trait_impls,\n@@ -328,7 +327,7 @@ impl<'a> CrateLoader<'a> {\n                 (cnum, data)\n             }\n             LoadResult::Loaded(library) => {\n-                self.register_crate(root, ident, name, span, library, dep_kind)\n+                self.register_crate(root, ident, span, library, dep_kind)\n             }\n         }\n     }"}, {"sha": "e20e608a2cd5400b02112271b775a6ccba5f85ef", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 14, "deletions": 95, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -14,7 +14,7 @@ use rustc::mir::{BindingForm, BorrowKind, ClearCrossCrate, Field, Local};\n use rustc::mir::{LocalDecl, LocalKind, Location, Operand, Place};\n use rustc::mir::{ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::mir::VarBindingForm;\n-use rustc::ty::{self, RegionKind};\n+use rustc::ty;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n@@ -427,34 +427,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         self.access_place_error_reported\n             .insert((root_place.clone(), borrow_span));\n \n-        match (borrow.region, &self.describe_place(&borrow.borrowed_place)) {\n-            (RegionKind::ReScope(_), Some(name)) => {\n-                self.report_scoped_local_value_does_not_live_long_enough(\n-                    context,\n-                    name,\n-                    &scope_tree,\n-                    &borrow,\n-                    drop_span,\n-                    borrow_span,\n-                    proper_span,\n-                );\n-            }\n-            (RegionKind::ReScope(_), None) => {\n-                self.report_scoped_temporary_value_does_not_live_long_enough(\n-                    context,\n-                    &scope_tree,\n-                    &borrow,\n-                    drop_span,\n-                    borrow_span,\n-                    proper_span,\n-                );\n-            }\n-            (RegionKind::ReEarlyBound(_), Some(name))\n-            | (RegionKind::ReFree(_), Some(name))\n-            | (RegionKind::ReStatic, Some(name))\n-            | (RegionKind::ReEmpty, Some(name))\n-            | (RegionKind::ReVar(_), Some(name)) => {\n-                self.report_unscoped_local_value_does_not_live_long_enough(\n+        match &self.describe_place(&borrow.borrowed_place) {\n+            Some(name) => {\n+                self.report_local_value_does_not_live_long_enough(\n                     context,\n                     name,\n                     &scope_tree,\n@@ -465,12 +440,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     kind.map(|k| (k, place_span.0)),\n                 );\n             }\n-            (RegionKind::ReEarlyBound(_), None)\n-            | (RegionKind::ReFree(_), None)\n-            | (RegionKind::ReStatic, None)\n-            | (RegionKind::ReEmpty, None)\n-            | (RegionKind::ReVar(_), None) => {\n-                self.report_unscoped_temporary_value_does_not_live_long_enough(\n+            None => {\n+                self.report_temporary_value_does_not_live_long_enough(\n                     context,\n                     &scope_tree,\n                     &borrow,\n@@ -479,65 +450,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     proper_span,\n                 );\n             }\n-            (RegionKind::ReLateBound(_, _), _)\n-            | (RegionKind::ReSkolemized(_, _), _)\n-            | (RegionKind::ReClosureBound(_), _)\n-            | (RegionKind::ReCanonical(_), _)\n-            | (RegionKind::ReErased, _) => {\n-                span_bug!(\n-                    drop_span,\n-                    \"region {:?} does not make sense in this context\",\n-                    borrow.region\n-                );\n-            }\n         }\n     }\n \n-    fn report_scoped_local_value_does_not_live_long_enough(\n-        &mut self,\n-        context: Context,\n-        name: &String,\n-        _scope_tree: &Lrc<ScopeTree>,\n-        borrow: &BorrowData<'tcx>,\n-        drop_span: Span,\n-        borrow_span: Span,\n-        _proper_span: Span,\n-    ) {\n-        let tcx = self.tcx;\n-        let mut err =\n-            tcx.path_does_not_live_long_enough(borrow_span, &format!(\"`{}`\", name), Origin::Mir);\n-        err.span_label(borrow_span, \"borrowed value does not live long enough\");\n-        err.span_label(\n-            drop_span,\n-            format!(\"`{}` dropped here while still borrowed\", name),\n-        );\n-        self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n-        err.buffer(&mut self.errors_buffer);\n-    }\n-\n-    fn report_scoped_temporary_value_does_not_live_long_enough(\n-        &mut self,\n-        context: Context,\n-        _scope_tree: &Lrc<ScopeTree>,\n-        borrow: &BorrowData<'tcx>,\n-        drop_span: Span,\n-        _borrow_span: Span,\n-        proper_span: Span,\n-    ) {\n-        let tcx = self.tcx;\n-        let mut err =\n-            tcx.path_does_not_live_long_enough(proper_span, \"borrowed value\", Origin::Mir);\n-        err.span_label(proper_span, \"temporary value does not live long enough\");\n-        err.span_label(\n-            drop_span,\n-            \"temporary value dropped here while still borrowed\",\n-        );\n-        err.note(\"consider using a `let` binding to increase its lifetime\");\n-        self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n-        err.buffer(&mut self.errors_buffer);\n-    }\n-\n-    fn report_unscoped_local_value_does_not_live_long_enough(\n+    fn report_local_value_does_not_live_long_enough(\n         &mut self,\n         context: Context,\n         name: &String,\n@@ -549,7 +465,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         kind_place: Option<(WriteKind, &Place<'tcx>)>,\n     ) {\n         debug!(\n-            \"report_unscoped_local_value_does_not_live_long_enough(\\\n+            \"report_local_value_does_not_live_long_enough(\\\n              {:?}, {:?}, {:?}, {:?}, {:?}, {:?}\\\n              )\",\n             context, name, scope_tree, borrow, drop_span, borrow_span\n@@ -559,13 +475,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let mut err =\n             tcx.path_does_not_live_long_enough(borrow_span, &format!(\"`{}`\", name), Origin::Mir);\n         err.span_label(borrow_span, \"borrowed value does not live long enough\");\n-        err.span_label(drop_span, \"borrowed value only lives until here\");\n+        err.span_label(\n+            drop_span,\n+            format!(\"`{}` dropped here while still borrowed\", name),\n+        );\n \n         self.explain_why_borrow_contains_point(context, borrow, kind_place, &mut err);\n         err.buffer(&mut self.errors_buffer);\n     }\n \n-    fn report_unscoped_temporary_value_does_not_live_long_enough(\n+    fn report_temporary_value_does_not_live_long_enough(\n         &mut self,\n         context: Context,\n         scope_tree: &Lrc<ScopeTree>,\n@@ -575,7 +494,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         proper_span: Span,\n     ) {\n         debug!(\n-            \"report_unscoped_temporary_value_does_not_live_long_enough(\\\n+            \"report_temporary_value_does_not_live_long_enough(\\\n              {:?}, {:?}, {:?}, {:?}, {:?}\\\n              )\",\n             context, scope_tree, borrow, drop_span, proper_span"}, {"sha": "e148bc3d9460c2f81dca841a1f149c831a902f3c", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -29,9 +29,7 @@ pub fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mon\n         (mono_item, mono_item.symbol_name(tcx))\n     }).collect();\n \n-    (&mut symbols[..]).sort_by(|&(_, ref sym1), &(_, ref sym2)|{\n-        sym1.cmp(sym2)\n-    });\n+    (&mut symbols[..]).sort_by_key(|&sym| sym.1);\n \n     for pair in (&symbols[..]).windows(2) {\n         let sym1 = &pair[0].1;"}, {"sha": "c8d4ce88f27c14e5673e7ec2b1e6aa3e4020531f", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 93, "deletions": 11, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -144,18 +144,100 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         };\n         let r = match f(self) {\n             Ok(val) => Some(val),\n-            Err(err) => {\n-                match err.kind {\n+            Err(error) => {\n+                let (stacktrace, span) = self.ecx.generate_stacktrace(None);\n+                let diagnostic = ConstEvalErr { span, error, stacktrace };\n+                use rustc::mir::interpret::EvalErrorKind::*;\n+                match diagnostic.error.kind {\n                     // don't report these, they make no sense in a const prop context\n-                    EvalErrorKind::MachineError(_) => {},\n-                    _ => {\n-                        let (frames, span) = self.ecx.generate_stacktrace(None);\n-                        let err = ConstEvalErr {\n-                            span,\n-                            error: err,\n-                            stacktrace: frames,\n-                        };\n-                        err.report_as_lint(\n+                    | MachineError(_)\n+                    // at runtime these transformations might make sense\n+                    // FIXME: figure out the rules and start linting\n+                    | FunctionPointerTyMismatch(..)\n+                    // fine at runtime, might be a register address or sth\n+                    | ReadBytesAsPointer\n+                    // fine at runtime\n+                    | ReadForeignStatic\n+                    | Unimplemented(_)\n+                    // don't report const evaluator limits\n+                    | StackFrameLimitReached\n+                    | NoMirFor(..)\n+                    | InlineAsm\n+                    => {},\n+\n+                    | InvalidMemoryAccess\n+                    | DanglingPointerDeref\n+                    | DoubleFree\n+                    | InvalidFunctionPointer\n+                    | InvalidBool\n+                    | InvalidDiscriminant\n+                    | PointerOutOfBounds { .. }\n+                    | InvalidNullPointerUsage\n+                    | MemoryLockViolation { .. }\n+                    | MemoryAcquireConflict { .. }\n+                    | ValidationFailure(..)\n+                    | InvalidMemoryLockRelease { .. }\n+                    | DeallocatedLockedMemory { .. }\n+                    | InvalidPointerMath\n+                    | ReadUndefBytes\n+                    | DeadLocal\n+                    | InvalidBoolOp(_)\n+                    | DerefFunctionPointer\n+                    | ExecuteMemory\n+                    | Intrinsic(..)\n+                    | InvalidChar(..)\n+                    | AbiViolation(_)\n+                    | AlignmentCheckFailed{..}\n+                    | CalledClosureAsFunction\n+                    | VtableForArgumentlessMethod\n+                    | ModifiedConstantMemory\n+                    | AssumptionNotHeld\n+                    // FIXME: should probably be removed and turned into a bug! call\n+                    | TypeNotPrimitive(_)\n+                    | ReallocatedWrongMemoryKind(_, _)\n+                    | DeallocatedWrongMemoryKind(_, _)\n+                    | ReallocateNonBasePtr\n+                    | DeallocateNonBasePtr\n+                    | IncorrectAllocationInformation(..)\n+                    | UnterminatedCString(_)\n+                    | HeapAllocZeroBytes\n+                    | HeapAllocNonPowerOfTwoAlignment(_)\n+                    | Unreachable\n+                    | ReadFromReturnPointer\n+                    | GeneratorResumedAfterReturn\n+                    | GeneratorResumedAfterPanic\n+                    | ReferencedConstant(_)\n+                    | InfiniteLoop\n+                    => {\n+                        // FIXME: report UB here\n+                    },\n+\n+                    | OutOfTls\n+                    | TlsOutOfBounds\n+                    | PathNotFound(_)\n+                    => bug!(\"these should not be in rustc, but in miri's machine errors\"),\n+\n+                    | Layout(_)\n+                    | UnimplementedTraitSelection\n+                    | TypeckError\n+                    | TooGeneric\n+                    | CheckMatchError\n+                    // these are just noise\n+                    => {},\n+\n+                    // non deterministic\n+                    | ReadPointerAsBytes\n+                    // FIXME: implement\n+                    => {},\n+\n+                    | Panic\n+                    | BoundsCheck{..}\n+                    | Overflow(_)\n+                    | OverflowNeg\n+                    | DivisionByZero\n+                    | RemainderByZero\n+                    => {\n+                        diagnostic.report_as_lint(\n                             self.ecx.tcx,\n                             \"this expression will panic at runtime\",\n                             lint_root,"}, {"sha": "c2a56adc18f5ccf8d4d1efd4aa6fefa842602d38", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -156,7 +156,7 @@ impl<'tcx> MirPatch<'tcx> {\n         }\n \n         let mut new_statements = self.new_statements;\n-        new_statements.sort_by(|u,v| u.0.cmp(&v.0));\n+        new_statements.sort_by_key(|s| s.0);\n \n         let mut delta = 0;\n         let mut last_bb = START_BLOCK;"}, {"sha": "a58aebc2ff063f29cde42dbff574888f4f23bc37", "filename": "src/librustc_target/abi/call/sparc64.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -57,16 +57,7 @@ fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n     let size = ret.layout.size;\n     let bits = size.bits();\n     if bits <= 256 {\n-        let unit = if bits <= 8 {\n-            Reg::i8()\n-        } else if bits <= 16 {\n-            Reg::i16()\n-        } else if bits <= 32 {\n-            Reg::i32()\n-        } else {\n-            Reg::i64()\n-        };\n-\n+        let unit = Reg::i64();\n         ret.cast_to(Uniform {\n             unit,\n             total: size"}, {"sha": "60f8928255174a361515d3ac83917a133ca73a09", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -1746,7 +1746,7 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &dyn AstConv<'gcx, 'tcx>,\n         astconv.ast_region_to_region(r, None)\n     }).collect();\n \n-    trait_bounds.sort_by(|a,b| a.def_id().cmp(&b.def_id()));\n+    trait_bounds.sort_by_key(|t| t.def_id());\n \n     let implicitly_sized = if let SizedByDefault::Yes = sized_by_default {\n         !is_unsized(astconv, ast_bounds, span)"}, {"sha": "2babf508fdcc3b524fc0f12e9e6717cdb2b78ad8", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -61,7 +61,8 @@ pub struct BufReader<R> {\n }\n \n impl<R: Read> BufReader<R> {\n-    /// Creates a new `BufReader` with a default buffer capacity.\n+    /// Creates a new `BufReader` with a default buffer capacity. The default is currently 8 KB,\n+    /// but may change in the future.\n     ///\n     /// # Examples\n     ///\n@@ -454,7 +455,8 @@ pub struct BufWriter<W: Write> {\n pub struct IntoInnerError<W>(W, Error);\n \n impl<W: Write> BufWriter<W> {\n-    /// Creates a new `BufWriter` with a default buffer capacity.\n+    /// Creates a new `BufWriter` with a default buffer capacity. The default is currently 8 KB,\n+    /// but may change in the future.\n     ///\n     /// # Examples\n     ///"}, {"sha": "98de3d80b1e1f354ab2827b19b6a1f168637e2a5", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 148, "deletions": 71, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -14,18 +14,18 @@ use self::Position::*;\n use fmt_macros as parse;\n \n use syntax::ast;\n-use syntax::ext::base::*;\n use syntax::ext::base;\n+use syntax::ext::base::*;\n use syntax::ext::build::AstBuilder;\n use syntax::feature_gate;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n-use syntax_pos::{Span, DUMMY_SP};\n use syntax::tokenstream;\n+use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n \n-use std::collections::{HashMap, HashSet};\n use std::collections::hash_map::Entry;\n+use std::collections::{HashMap, HashSet};\n \n #[derive(PartialEq)]\n enum ArgumentType {\n@@ -111,8 +111,14 @@ struct Context<'a, 'b: 'a> {\n     /// still existed in this phase of processing.\n     /// Used only for `all_pieces_simple` tracking in `build_piece`.\n     curarg: usize,\n-    /// Keep track of invalid references to positional arguments\n-    invalid_refs: Vec<usize>,\n+    /// Current piece being evaluated, used for error reporting.\n+    curpiece: usize,\n+    /// Keep track of invalid references to positional arguments.\n+    invalid_refs: Vec<(usize, usize)>,\n+    /// Spans of all the formatting arguments, in order.\n+    arg_spans: Vec<Span>,\n+    /// Wether this formatting string is a literal or it comes from a macro.\n+    is_literal: bool,\n }\n \n /// Parses the arguments from the given list of tokens, returning None\n@@ -155,15 +161,20 @@ fn parse_args(ecx: &mut ExtCtxt,\n                     i\n                 }\n                 _ if named => {\n-                    ecx.span_err(p.span,\n-                                 \"expected ident, positional arguments \\\n-                                 cannot follow named arguments\");\n+                    ecx.span_err(\n+                        p.span,\n+                        \"expected ident, positional arguments cannot follow named arguments\",\n+                    );\n                     return None;\n                 }\n                 _ => {\n-                    ecx.span_err(p.span,\n-                                 &format!(\"expected ident for named argument, found `{}`\",\n-                                          p.this_token_to_string()));\n+                    ecx.span_err(\n+                        p.span,\n+                        &format!(\n+                            \"expected ident for named argument, found `{}`\",\n+                            p.this_token_to_string()\n+                        ),\n+                    );\n                     return None;\n                 }\n             };\n@@ -235,6 +246,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n                 let ty = Placeholder(arg.format.ty.to_string());\n                 self.verify_arg_type(pos, ty);\n+                self.curpiece += 1;\n             }\n         }\n     }\n@@ -266,29 +278,59 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// format string.\n     fn report_invalid_references(&self, numbered_position_args: bool) {\n         let mut e;\n-        let mut refs: Vec<String> = self.invalid_refs\n-                                        .iter()\n-                                        .map(|r| r.to_string())\n-                                        .collect();\n+        let sp = if self.is_literal {\n+            MultiSpan::from_spans(self.arg_spans.clone())\n+        } else {\n+            MultiSpan::from_span(self.fmtsp)\n+        };\n+        let mut refs: Vec<_> = self\n+            .invalid_refs\n+            .iter()\n+            .map(|(r, pos)| (r.to_string(), self.arg_spans.get(*pos)))\n+            .collect();\n \n         if self.names.is_empty() && !numbered_position_args {\n-            e = self.ecx.mut_span_err(self.fmtsp,\n-                &format!(\"{} positional argument{} in format string, but {}\",\n+            e = self.ecx.mut_span_err(\n+                sp,\n+                &format!(\n+                    \"{} positional argument{} in format string, but {}\",\n                          self.pieces.len(),\n                          if self.pieces.len() > 1 { \"s\" } else { \"\" },\n-                         self.describe_num_args()));\n+                    self.describe_num_args()\n+                ),\n+            );\n         } else {\n-            let arg_list = match refs.len() {\n-                1 => format!(\"argument {}\", refs.pop().unwrap()),\n-                _ => format!(\"arguments {head} and {tail}\",\n-                             tail=refs.pop().unwrap(),\n-                             head=refs.join(\", \"))\n+            let (arg_list, mut sp) = match refs.len() {\n+                1 => {\n+                    let (reg, pos) = refs.pop().unwrap();\n+                    (\n+                        format!(\"argument {}\", reg),\n+                        MultiSpan::from_span(*pos.unwrap_or(&self.fmtsp)),\n+                    )\n+                }\n+                _ => {\n+                    let pos =\n+                        MultiSpan::from_spans(refs.iter().map(|(_, p)| *p.unwrap()).collect());\n+                    let mut refs: Vec<String> = refs.iter().map(|(s, _)| s.to_owned()).collect();\n+                    let reg = refs.pop().unwrap();\n+                    (\n+                        format!(\n+                            \"arguments {head} and {tail}\",\n+                            tail = reg,\n+                            head = refs.join(\", \")\n+                        ),\n+                        pos,\n+                    )\n+                }\n             };\n+            if !self.is_literal {\n+                sp = MultiSpan::from_span(self.fmtsp);\n+            }\n \n-            e = self.ecx.mut_span_err(self.fmtsp,\n+            e = self.ecx.mut_span_err(sp,\n                 &format!(\"invalid reference to positional {} ({})\",\n-                        arg_list,\n-                        self.describe_num_args()));\n+                         arg_list,\n+                         self.describe_num_args()));\n             e.note(\"positional arguments are zero-based\");\n         };\n \n@@ -301,7 +343,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         match arg {\n             Exact(arg) => {\n                 if self.args.len() <= arg {\n-                    self.invalid_refs.push(arg);\n+                    self.invalid_refs.push((arg, self.curpiece));\n                     return;\n                 }\n                 match ty {\n@@ -337,7 +379,13 @@ impl<'a, 'b> Context<'a, 'b> {\n                     Some(e) => *e,\n                     None => {\n                         let msg = format!(\"there is no argument named `{}`\", name);\n-                        self.ecx.span_err(self.fmtsp, &msg[..]);\n+                        let sp = if self.is_literal {\n+                            *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp)\n+                        } else {\n+                            self.fmtsp\n+                        };\n+                        let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n+                        err.emit();\n                         return;\n                     }\n                 };\n@@ -505,33 +553,27 @@ impl<'a, 'b> Context<'a, 'b> {\n                 let prec = self.build_count(arg.format.precision);\n                 let width = self.build_count(arg.format.width);\n                 let path = self.ecx.path_global(sp, Context::rtpath(self.ecx, \"FormatSpec\"));\n-                let fmt =\n-                    self.ecx.expr_struct(sp,\n+                let fmt = self.ecx.expr_struct(\n+                    sp,\n                                          path,\n-                                         vec![self.ecx\n-                                                  .field_imm(sp, self.ecx.ident_of(\"fill\"), fill),\n-                                              self.ecx.field_imm(sp,\n-                                                                 self.ecx.ident_of(\"align\"),\n-                                                                 align),\n-                                              self.ecx.field_imm(sp,\n-                                                                 self.ecx.ident_of(\"flags\"),\n-                                                                 flags),\n-                                              self.ecx.field_imm(sp,\n-                                                                 self.ecx.ident_of(\"precision\"),\n-                                                                 prec),\n-                                              self.ecx.field_imm(sp,\n-                                                                 self.ecx.ident_of(\"width\"),\n-                                                                 width)]);\n+                    vec![\n+                        self.ecx.field_imm(sp, self.ecx.ident_of(\"fill\"), fill),\n+                        self.ecx.field_imm(sp, self.ecx.ident_of(\"align\"), align),\n+                        self.ecx.field_imm(sp, self.ecx.ident_of(\"flags\"), flags),\n+                        self.ecx.field_imm(sp, self.ecx.ident_of(\"precision\"), prec),\n+                        self.ecx.field_imm(sp, self.ecx.ident_of(\"width\"), width),\n+                    ],\n+                );\n \n                 let path = self.ecx.path_global(sp, Context::rtpath(self.ecx, \"Argument\"));\n-                Some(self.ecx.expr_struct(sp,\n+                Some(self.ecx.expr_struct(\n+                    sp,\n                                           path,\n-                                          vec![self.ecx.field_imm(sp,\n-                                                                  self.ecx.ident_of(\"position\"),\n-                                                                  pos),\n-                                               self.ecx.field_imm(sp,\n-                                                                  self.ecx.ident_of(\"format\"),\n-                                                                  fmt)]))\n+                    vec![\n+                        self.ecx.field_imm(sp, self.ecx.ident_of(\"position\"), pos),\n+                        self.ecx.field_imm(sp, self.ecx.ident_of(\"format\"), fmt),\n+                    ],\n+                ))\n             }\n         }\n     }\n@@ -544,9 +586,9 @@ impl<'a, 'b> Context<'a, 'b> {\n         let mut pats = Vec::new();\n         let mut heads = Vec::new();\n \n-        let names_pos: Vec<_> = (0..self.args.len()).map(|i| {\n-            self.ecx.ident_of(&format!(\"arg{}\", i)).gensym()\n-        }).collect();\n+        let names_pos: Vec<_> = (0..self.args.len())\n+            .map(|i| self.ecx.ident_of(&format!(\"arg{}\", i)).gensym())\n+            .collect();\n \n         // First, build up the static array which will become our precompiled\n         // format \"string\"\n@@ -690,10 +732,11 @@ pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt,\n     }\n }\n \n-pub fn expand_format_args_nl<'cx>(ecx: &'cx mut ExtCtxt,\n-                                  mut sp: Span,\n-                                  tts: &[tokenstream::TokenTree])\n-                                  -> Box<dyn base::MacResult + 'cx> {\n+pub fn expand_format_args_nl<'cx>(\n+    ecx: &'cx mut ExtCtxt,\n+    mut sp: Span,\n+    tts: &[tokenstream::TokenTree],\n+) -> Box<dyn base::MacResult + 'cx> {\n     //if !ecx.ecfg.enable_allow_internal_unstable() {\n \n     // For some reason, the only one that actually works for `println` is the first check\n@@ -744,7 +787,6 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n             let sugg_fmt = match args.len() {\n                 0 => \"{}\".to_string(),\n                 _ => format!(\"{}{{}}\", \"{} \".repeat(args.len())),\n-\n             };\n             err.span_suggestion(\n                 fmt_sp.shrink_to_lo(),\n@@ -753,7 +795,11 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n             );\n             err.emit();\n             return DummyResult::raw_expr(sp);\n-        },\n+        }\n+    };\n+    let is_literal = match ecx.codemap().span_to_snippet(fmt_sp) {\n+        Ok(ref s) if s.starts_with(\"\\\"\") || s.starts_with(\"r#\") => true,\n+        _ => false,\n     };\n \n     let mut cx = Context {\n@@ -763,6 +809,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         arg_unique_types,\n         names,\n         curarg: 0,\n+        curpiece: 0,\n         arg_index_map: Vec::new(),\n         count_args: Vec::new(),\n         count_positions: HashMap::new(),\n@@ -775,6 +822,8 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         macsp,\n         fmtsp: fmt.span,\n         invalid_refs: Vec::new(),\n+        arg_spans: Vec::new(),\n+        is_literal,\n     };\n \n     let fmt_str = &*fmt.node.0.as_str();\n@@ -783,12 +832,22 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         ast::StrStyle::Raw(raw) => Some(raw as usize),\n     };\n     let mut parser = parse::Parser::new(fmt_str, str_style);\n+    let mut unverified_pieces = vec![];\n     let mut pieces = vec![];\n \n-    while let Some(mut piece) = parser.next() {\n+    while let Some(piece) = parser.next() {\n         if !parser.errors.is_empty() {\n             break;\n         }\n+        unverified_pieces.push(piece);\n+    }\n+\n+    cx.arg_spans = parser.arg_places.iter()\n+        .map(|&(start, end)| fmt.span.from_inner_byte_pos(start, end))\n+        .collect();\n+\n+    // This needs to happen *after* the Parser has consumed all pieces to create all the spans\n+    for mut piece in unverified_pieces {\n         cx.verify_piece(&piece);\n         cx.resolve_name_inplace(&mut piece);\n         pieces.push(piece);\n@@ -856,24 +915,27 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n             errs.push((cx.args[i].span, msg));\n         }\n     }\n-    if errs.len() > 0 {\n-        let args_used = cx.arg_types.len() - errs.len();\n-        let args_unused = errs.len();\n+    let errs_len = errs.len();\n+    if errs_len > 0 {\n+        let args_used = cx.arg_types.len() - errs_len;\n+        let args_unused = errs_len;\n \n         let mut diag = {\n-            if errs.len() == 1 {\n+            if errs_len == 1 {\n                 let (sp, msg) = errs.into_iter().next().unwrap();\n                 cx.ecx.struct_span_err(sp, msg)\n             } else {\n                 let mut diag = cx.ecx.struct_span_err(\n                     errs.iter().map(|&(sp, _)| sp).collect::<Vec<Span>>(),\n-                    \"multiple unused formatting arguments\"\n+                    \"multiple unused formatting arguments\",\n                 );\n-                diag.span_label(cx.fmtsp, \"multiple missing formatting arguments\");\n+                diag.span_label(cx.fmtsp, \"multiple missing formatting specifiers\");\n                 diag\n             }\n         };\n \n+        // Used to ensure we only report translations for *one* kind of foreign format.\n+        let mut found_foreign = false;\n         // Decide if we want to look for foreign formatting directives.\n         if args_used < args_unused {\n             use super::format_foreign as foreign;\n@@ -882,13 +944,11 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n             // with `%d should be written as {}` over and over again.\n             let mut explained = HashSet::new();\n \n-            // Used to ensure we only report translations for *one* kind of foreign format.\n-            let mut found_foreign = false;\n-\n             macro_rules! check_foreign {\n                 ($kind:ident) => {{\n                     let mut show_doc_note = false;\n \n+                    let mut suggestions = vec![];\n                     for sub in foreign::$kind::iter_subs(fmt_str) {\n                         let trn = match sub.translate() {\n                             Some(trn) => trn,\n@@ -897,6 +957,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                             None => continue,\n                         };\n \n+                        let pos = sub.position();\n                         let sub = String::from(sub.as_str());\n                         if explained.contains(&sub) {\n                             continue;\n@@ -908,7 +969,14 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                             show_doc_note = true;\n                         }\n \n-                        diag.help(&format!(\"`{}` should be written as `{}`\", sub, trn));\n+                        if let Some((start, end)) = pos {\n+                            // account for `\"` and account for raw strings `r#`\n+                            let padding = str_style.map(|i| i + 2).unwrap_or(1);\n+                            let sp = fmt_sp.from_inner_byte_pos(start + padding, end + padding);\n+                            suggestions.push((sp, trn));\n+                        } else {\n+                            diag.help(&format!(\"`{}` should be written as `{}`\", sub, trn));\n+                        }\n                     }\n \n                     if show_doc_note {\n@@ -917,6 +985,12 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                             \" formatting not supported; see the documentation for `std::fmt`\",\n                         ));\n                     }\n+                    if suggestions.len() > 0 {\n+                        diag.multipart_suggestion(\n+                            \"format specifiers use curly braces\",\n+                            suggestions,\n+                        );\n+                    }\n                 }};\n             }\n \n@@ -925,6 +999,9 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                 check_foreign!(shell);\n             }\n         }\n+        if !found_foreign && errs_len == 1 {\n+            diag.span_label(cx.fmtsp, \"formatting specifier missing\");\n+        }\n \n         diag.emit();\n     }"}, {"sha": "23a37ca34853c6ad39586a3c2e26422038ca645e", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 74, "deletions": 28, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -14,7 +14,7 @@ pub mod printf {\n     /// Represents a single `printf`-style substitution.\n     #[derive(Clone, PartialEq, Debug)]\n     pub enum Substitution<'a> {\n-        /// A formatted output substitution.\n+        /// A formatted output substitution with its internal byte offset.\n         Format(Format<'a>),\n         /// A literal `%%` escape.\n         Escape,\n@@ -28,6 +28,23 @@ pub mod printf {\n             }\n         }\n \n+        pub fn position(&self) -> Option<(usize, usize)> {\n+            match *self {\n+                Substitution::Format(ref fmt) => Some(fmt.position),\n+                _ => None,\n+            }\n+        }\n+\n+        pub fn set_position(&mut self, start: usize, end: usize) {\n+            match self {\n+                Substitution::Format(ref mut fmt) => {\n+                    fmt.position = (start, end);\n+                }\n+                _ => {}\n+            }\n+        }\n+\n+\n         /// Translate this substitution into an equivalent Rust formatting directive.\n         ///\n         /// This ignores cases where the substitution does not have an exact equivalent, or where\n@@ -57,6 +74,8 @@ pub mod printf {\n         pub length: Option<&'a str>,\n         /// Type of parameter being converted.\n         pub type_: &'a str,\n+        /// Byte offset for the start and end of this formatting directive.\n+        pub position: (usize, usize),\n     }\n \n     impl<'a> Format<'a> {\n@@ -257,19 +276,28 @@ pub mod printf {\n     pub fn iter_subs(s: &str) -> Substitutions {\n         Substitutions {\n             s,\n+            pos: 0,\n         }\n     }\n \n     /// Iterator over substitutions in a string.\n     pub struct Substitutions<'a> {\n         s: &'a str,\n+        pos: usize,\n     }\n \n     impl<'a> Iterator for Substitutions<'a> {\n         type Item = Substitution<'a>;\n         fn next(&mut self) -> Option<Self::Item> {\n-            let (sub, tail) = parse_next_substitution(self.s)?;\n+            let (mut sub, tail) = parse_next_substitution(self.s)?;\n             self.s = tail;\n+            match sub {\n+                Substitution::Format(_) => if let Some((start, end)) = sub.position() {\n+                    sub.set_position(start + self.pos, end + self.pos);\n+                    self.pos += end;\n+                }\n+                Substitution::Escape => self.pos += 2,\n+            }\n             Some(sub)\n         }\n \n@@ -301,7 +329,7 @@ pub mod printf {\n                 _ => {/* fall-through */},\n             }\n \n-            Cur::new_at_start(&s[start..])\n+            Cur::new_at(&s[..], start)\n         };\n \n         // This is meant to be a translation of the following regex:\n@@ -355,6 +383,7 @@ pub mod printf {\n                     precision: None,\n                     length: None,\n                     type_: at.slice_between(next).unwrap(),\n+                    position: (start.at, next.at),\n                 }),\n                 next.slice_after()\n             ));\n@@ -541,6 +570,7 @@ pub mod printf {\n         drop(next);\n \n         end = at;\n+        let position = (start.at, end.at);\n \n         let f = Format {\n             span: start.slice_between(end).unwrap(),\n@@ -550,6 +580,7 @@ pub mod printf {\n             precision,\n             length,\n             type_,\n+            position,\n         };\n         Some((Substitution::Format(f), end.slice_after()))\n     }\n@@ -616,6 +647,7 @@ pub mod printf {\n                 ($in_:expr, {\n                     $param:expr, $flags:expr,\n                     $width:expr, $prec:expr, $len:expr, $type_:expr,\n+                    $pos:expr,\n                 }) => {\n                     assert_eq!(\n                         pns(concat!($in_, \"!\")),\n@@ -628,6 +660,7 @@ pub mod printf {\n                                 precision: $prec,\n                                 length: $len,\n                                 type_: $type_,\n+                                position: $pos,\n                             }),\n                             \"!\"\n                         ))\n@@ -636,53 +669,53 @@ pub mod printf {\n             }\n \n             assert_pns_eq_sub!(\"%!\",\n-                { None, \"\", None, None, None, \"!\", });\n+                { None, \"\", None, None, None, \"!\", (0, 2), });\n             assert_pns_eq_sub!(\"%c\",\n-                { None, \"\", None, None, None, \"c\", });\n+                { None, \"\", None, None, None, \"c\", (0, 2), });\n             assert_pns_eq_sub!(\"%s\",\n-                { None, \"\", None, None, None, \"s\", });\n+                { None, \"\", None, None, None, \"s\", (0, 2), });\n             assert_pns_eq_sub!(\"%06d\",\n-                { None, \"0\", Some(N::Num(6)), None, None, \"d\", });\n+                { None, \"0\", Some(N::Num(6)), None, None, \"d\", (0, 4), });\n             assert_pns_eq_sub!(\"%4.2f\",\n-                { None, \"\", Some(N::Num(4)), Some(N::Num(2)), None, \"f\", });\n+                { None, \"\", Some(N::Num(4)), Some(N::Num(2)), None, \"f\", (0, 5), });\n             assert_pns_eq_sub!(\"%#x\",\n-                { None, \"#\", None, None, None, \"x\", });\n+                { None, \"#\", None, None, None, \"x\", (0, 3), });\n             assert_pns_eq_sub!(\"%-10s\",\n-                { None, \"-\", Some(N::Num(10)), None, None, \"s\", });\n+                { None, \"-\", Some(N::Num(10)), None, None, \"s\", (0, 5), });\n             assert_pns_eq_sub!(\"%*s\",\n-                { None, \"\", Some(N::Next), None, None, \"s\", });\n+                { None, \"\", Some(N::Next), None, None, \"s\", (0, 3), });\n             assert_pns_eq_sub!(\"%-10.*s\",\n-                { None, \"-\", Some(N::Num(10)), Some(N::Next), None, \"s\", });\n+                { None, \"-\", Some(N::Num(10)), Some(N::Next), None, \"s\", (0, 7), });\n             assert_pns_eq_sub!(\"%-*.*s\",\n-                { None, \"-\", Some(N::Next), Some(N::Next), None, \"s\", });\n+                { None, \"-\", Some(N::Next), Some(N::Next), None, \"s\", (0, 6), });\n             assert_pns_eq_sub!(\"%.6i\",\n-                { None, \"\", None, Some(N::Num(6)), None, \"i\", });\n+                { None, \"\", None, Some(N::Num(6)), None, \"i\", (0, 4), });\n             assert_pns_eq_sub!(\"%+i\",\n-                { None, \"+\", None, None, None, \"i\", });\n+                { None, \"+\", None, None, None, \"i\", (0, 3), });\n             assert_pns_eq_sub!(\"%08X\",\n-                { None, \"0\", Some(N::Num(8)), None, None, \"X\", });\n+                { None, \"0\", Some(N::Num(8)), None, None, \"X\", (0, 4), });\n             assert_pns_eq_sub!(\"%lu\",\n-                { None, \"\", None, None, Some(\"l\"), \"u\", });\n+                { None, \"\", None, None, Some(\"l\"), \"u\", (0, 3), });\n             assert_pns_eq_sub!(\"%Iu\",\n-                { None, \"\", None, None, Some(\"I\"), \"u\", });\n+                { None, \"\", None, None, Some(\"I\"), \"u\", (0, 3), });\n             assert_pns_eq_sub!(\"%I32u\",\n-                { None, \"\", None, None, Some(\"I32\"), \"u\", });\n+                { None, \"\", None, None, Some(\"I32\"), \"u\", (0, 5), });\n             assert_pns_eq_sub!(\"%I64u\",\n-                { None, \"\", None, None, Some(\"I64\"), \"u\", });\n+                { None, \"\", None, None, Some(\"I64\"), \"u\", (0, 5), });\n             assert_pns_eq_sub!(\"%'d\",\n-                { None, \"'\", None, None, None, \"d\", });\n+                { None, \"'\", None, None, None, \"d\", (0, 3), });\n             assert_pns_eq_sub!(\"%10s\",\n-                { None, \"\", Some(N::Num(10)), None, None, \"s\", });\n+                { None, \"\", Some(N::Num(10)), None, None, \"s\", (0, 4), });\n             assert_pns_eq_sub!(\"%-10.10s\",\n-                { None, \"-\", Some(N::Num(10)), Some(N::Num(10)), None, \"s\", });\n+                { None, \"-\", Some(N::Num(10)), Some(N::Num(10)), None, \"s\", (0, 8), });\n             assert_pns_eq_sub!(\"%1$d\",\n-                { Some(1), \"\", None, None, None, \"d\", });\n+                { Some(1), \"\", None, None, None, \"d\", (0, 4), });\n             assert_pns_eq_sub!(\"%2$.*3$d\",\n-                { Some(2), \"\", None, Some(N::Arg(3)), None, \"d\", });\n+                { Some(2), \"\", None, Some(N::Arg(3)), None, \"d\", (0, 8), });\n             assert_pns_eq_sub!(\"%1$*2$.*3$d\",\n-                { Some(1), \"\", Some(N::Arg(2)), Some(N::Arg(3)), None, \"d\", });\n+                { Some(1), \"\", Some(N::Arg(2)), Some(N::Arg(3)), None, \"d\", (0, 11), });\n             assert_pns_eq_sub!(\"%-8ld\",\n-                { None, \"-\", Some(N::Num(8)), None, Some(\"l\"), \"d\", });\n+                { None, \"-\", Some(N::Num(8)), None, Some(\"l\"), \"d\", (0, 5), });\n         }\n \n         #[test]\n@@ -755,6 +788,12 @@ pub mod shell {\n             }\n         }\n \n+        pub fn position(&self) -> Option<(usize, usize)> {\n+            match *self {\n+                _ => None,\n+            }\n+        }\n+\n         pub fn translate(&self) -> Option<String> {\n             match *self {\n                 Substitution::Ordinal(n) => Some(format!(\"{{{}}}\", n)),\n@@ -918,7 +957,7 @@ mod strcursor {\n \n     pub struct StrCursor<'a> {\n         s: &'a str,\n-        at: usize,\n+        pub at: usize,\n     }\n \n     impl<'a> StrCursor<'a> {\n@@ -929,6 +968,13 @@ mod strcursor {\n             }\n         }\n \n+        pub fn new_at(s: &'a str, at: usize) -> StrCursor<'a> {\n+            StrCursor {\n+                s,\n+                at,\n+            }\n+        }\n+\n         pub fn at_next_cp(mut self) -> Option<StrCursor<'a>> {\n             match self.try_seek_right_cp() {\n                 true => Some(self),"}, {"sha": "05c2f61c384e2097a3a4c648344114fc4ac983be", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -1 +1 @@\n-Subproject commit b9de11ab43090c71ff7ab159a479394df1f968ab\n+Subproject commit 05c2f61c384e2097a3a4c648344114fc4ac983be"}, {"sha": "d3b7a5cd598825c441468d7c262a91c7f8c9764f", "filename": "src/test/codegen/sparc-struct-abi.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fcodegen%2Fsparc-struct-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fcodegen%2Fsparc-struct-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsparc-struct-abi.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// Checks that we correctly codegen extern \"C\" functions returning structs.\n+// See issue #52638.\n+\n+// compile-flags: -O --target=sparc64-unknown-linux-gnu --crate-type=rlib\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"freeze\"]\n+trait Freeze { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+#[repr(C)]\n+pub struct Bool {\n+    b: bool,\n+}\n+\n+// CHECK: define i64 @structbool()\n+// CHECK-NEXT: start:\n+// CHECK-NEXT: ret i64 72057594037927936\n+#[no_mangle]\n+pub extern \"C\" fn structbool() -> Bool {\n+    Bool { b: true }\n+}"}, {"sha": "4354209a72202415d45a6a51df9537c147cc0a9a", "filename": "src/test/run-make-fulldeps/extern-flag-rename-transitive/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2FMakefile?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs\n+\t$(RUSTC) bar.rs\n+\t$(RUSTC) baz.rs --extern a=$(TMPDIR)/libfoo.rlib\n+"}, {"sha": "a14f3ba05b066778a9d3cf15290e6abfb26da670", "filename": "src/test/run-make-fulldeps/extern-flag-rename-transitive/bar.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2Fbar.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+extern crate foo;"}, {"sha": "a96c9f61c666c790863264700eaa54368f281f58", "filename": "src/test/run-make-fulldeps/extern-flag-rename-transitive/baz.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2Fbaz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2Fbaz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2Fbaz.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+extern crate a;\n+extern crate bar;"}, {"sha": "b18ce024718f4fbaada99a385f62d4621c86da87", "filename": "src/test/run-make-fulldeps/extern-flag-rename-transitive/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-rename-transitive%2Ffoo.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]"}, {"sha": "06d454b2c890a8e35086f130139ab7ad608d8d00", "filename": "src/test/run-pass/issue-18804/auxiliary/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-pass%2Fissue-18804%2Fauxiliary%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-pass%2Fissue-18804%2Fauxiliary%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18804%2Fauxiliary%2Flib.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![feature(linkage)]\n+\n+pub fn foo<T>() -> *const() {\n+    extern {\n+        #[linkage = \"extern_weak\"]\n+        static FOO: *const();\n+    }\n+    unsafe { FOO }\n+}"}, {"sha": "b5aa052034936338c41860a799b54cee4c7dd5ee", "filename": "src/test/run-pass/issue-18804/main.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-pass%2Fissue-18804%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-pass%2Fissue-18804%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18804%2Fmain.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for issue #18804, #[linkage] does not propagate thorugh generic\n+// functions. Failure results in a linker error.\n+\n+// ignore-asmjs no weak symbol support\n+// ignore-emscripten no weak symbol support\n+\n+// aux-build:lib.rs\n+\n+extern crate lib;\n+\n+fn main() {\n+    lib::foo::<i32>();\n+}"}, {"sha": "cb4b227548aab8ad71f536ebed4443d2d71d85c8", "filename": "src/test/run-pass/issue-33264.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-pass%2Fissue-33264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-pass%2Fissue-33264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33264.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// only-x86_64\n+\n+#![allow(dead_code, non_upper_case_globals)]\n+#![feature(asm)]\n+\n+#[repr(C)]\n+pub struct D32x4(f32,f32,f32,f32);\n+\n+impl D32x4 {\n+    fn add(&self, vec: Self) -> Self {\n+        unsafe {\n+            let ret: Self;\n+            asm!(\"\n+                 movaps $1, %xmm1\n+                 movaps $2, %xmm2\n+                 addps %xmm1, %xmm2\n+                 movaps $xmm1, $0\n+                 \"\n+                 : \"=r\"(ret)\n+                 : \"1\"(self), \"2\"(vec)\n+                 : \"xmm1\", \"xmm2\"\n+                 );\n+            ret\n+        }\n+    }\n+}\n+\n+fn main() { }\n+"}, {"sha": "c9a214e0cedd0cb1f41f3fb71f99f94916ee09bf", "filename": "src/test/run-pass/issue-34784.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-pass%2Fissue-34784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-pass%2Fissue-34784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-34784.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const C: *const u8 = &0;\n+\n+fn foo(x: *const u8) {\n+    match x {\n+        C => {}\n+        _ => {}\n+    }\n+}\n+\n+const D: *const [u8; 4] = b\"abcd\";\n+\n+fn main() {\n+    match D {\n+        D => {}\n+        _ => {}\n+    }\n+}\n+"}, {"sha": "a53026f36ab70164d9e3ed7a8c125a89c45566c5", "filename": "src/test/run-pass/issue-44005.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-pass%2Fissue-44005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Frun-pass%2Fissue-44005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-44005.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo<'a> {\n+    type Bar;\n+    fn foo(&'a self) -> Self::Bar;\n+}\n+\n+impl<'a, 'b, T: 'a> Foo<'a> for &'b T {\n+    type Bar = &'a T;\n+    fn foo(&'a self) -> &'a T {\n+        self\n+    }\n+}\n+\n+pub fn uncallable<T, F>(x: T, f: F)\n+    where T: for<'a> Foo<'a>,\n+          F: for<'a> Fn(<T as Foo<'a>>::Bar)\n+{\n+    f(x.foo());\n+}\n+\n+pub fn catalyst(x: &i32) {\n+    broken(x, |_| {})\n+}\n+\n+pub fn broken<F: Fn(&i32)>(x: &i32, f: F) {\n+    uncallable(x, |y| f(y));\n+}\n+\n+fn main() { }\n+"}, {"sha": "b15f156b7c2013510162f1d3a1a1ed7281a14c99", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |     spawn(|| books.push(4));\n    |           ^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n LL |     //~^ ERROR E0373\n LL | }\n-   | - borrowed value only lives until here\n+   | - `books` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "8c643973af67b85f8b850a69bf3817a4a4c6e0b9", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |     Box::new(|| books.push(4))\n    |              ^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n LL |     //~^ ERROR E0373\n LL | }\n-   | - borrowed value only lives until here\n+   | - `books` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 19:8...\n   --> $DIR/borrowck-escaping-closure-error-2.rs:19:8"}, {"sha": "bea4fb76ed166f52ff3a34c564d6ddedb4a27d09", "filename": "src/test/ui/const-eval/const_prop_errors.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fconst-eval%2Fconst_prop_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fconst-eval%2Fconst_prop_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_prop_errors.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+pub trait Foo {\n+    fn foo(self) -> u32;\n+}\n+\n+impl<T> Foo for T {\n+    fn foo(self) -> u32 {\n+        fn bar<T>() { loop {} }\n+        bar::<T> as u32\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b59f628c746bb775a76f56f29ad6be7eb9b2ff90", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     dt = Dt(\"dt\", &c_shortest);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c_shortest` dropped here while still borrowed\n    | borrow later used here, when `dt` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "ad460fcf55e57d4cda386772cd6a795d88c1cfad", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     dt = Dt(\"dt\", &c_shortest);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c_shortest` dropped here while still borrowed\n    | borrow later used here, when `dt` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "864fb2f2ea6f43934fd2b97cc0523c3a65bd45b5", "filename": "src/test/ui/dropck/dropck-eyepatch.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     dt = Dt(\"dt\", &c_shortest);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c_shortest` dropped here while still borrowed\n    | borrow later used here, when `dt` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "31ba24b0004fb4e68dcf9ce41e408ca8b87c0fce", "filename": "src/test/ui/error-codes/E0597.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     //~^ `y` does not live long enough [E0597]\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `y` dropped here while still borrowed\n    | borrow later used here, when `x` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "e03d72a02f0aa6eb2c7ed842ee5cbc79cbca7175", "filename": "src/test/ui/generator/borrowing.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |         unsafe { (|| yield &a).resume() }\n    |                  ^^^^^^^^^^^^^ borrowed value does not live long enough\n LL |         //~^ ERROR: `a` does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `a` dropped here while still borrowed\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:24:9\n@@ -16,7 +16,7 @@ LL | |             //~^ ERROR: `a` does not live long enough\n LL | |         }\n    | |_________^ borrowed value does not live long enough\n LL |       };\n-   |       - borrowed value only lives until here\n+   |       - `a` dropped here while still borrowed\n LL |   }\n    |   - borrow later used here, when `_b` is dropped\n "}, {"sha": "ef7e64ffd97ae251494a68b10e5b8548955c115b", "filename": "src/test/ui/generator/dropck.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     let ref_ = Box::leak(Box::new(Some(cell.borrow_mut())));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `*cell` dropped here while still borrowed\n    | borrow later used here, when `gen` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -26,7 +26,7 @@ LL | |     };\n LL |   }\n    |   -\n    |   |\n-   |   borrowed value only lives until here\n+   |   `ref_` dropped here while still borrowed\n    |   borrow later used here, when `gen` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "56d853c2966c5de5b0e2f6cc89d9eecd64a37122", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |         a = &b;\n    |             ^^ borrowed value does not live long enough\n LL |         //~^ ERROR `b` does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `b` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "bbd75f30d6cb13ca69a05af3d2319dafc4133c03", "filename": "src/test/ui/ifmt-bad-arg.rs", "status": "renamed", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fifmt-bad-arg.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -64,4 +64,11 @@ fn main() {\n     format!(\"foo }\"); //~ ERROR: unmatched `}` found\n \n     format!(\"foo %s baz\", \"bar\"); //~ ERROR: argument never used\n+\n+    format!(r##\"\n+\n+        {foo}\n+\n+    \"##);\n+    //~^^^ ERROR: there is no argument named `foo`\n }", "previous_filename": "src/test/compile-fail/ifmt-bad-arg.rs"}, {"sha": "c8fd8bad19ba54402f1f3176ef4280ab4004288a", "filename": "src/test/ui/ifmt-bad-arg.stderr", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fifmt-bad-arg.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,208 @@\n+error: 1 positional argument in format string, but no arguments were given\n+  --> $DIR/ifmt-bad-arg.rs:16:14\n+   |\n+LL |     format!(\"{}\");\n+   |              ^^\n+\n+error: invalid reference to positional argument 1 (there is 1 argument)\n+  --> $DIR/ifmt-bad-arg.rs:19:14\n+   |\n+LL |     format!(\"{1}\", 1);\n+   |              ^^^\n+   |\n+   = note: positional arguments are zero-based\n+\n+error: argument never used\n+  --> $DIR/ifmt-bad-arg.rs:19:20\n+   |\n+LL |     format!(\"{1}\", 1);\n+   |             -----  ^\n+   |             |\n+   |             formatting specifier missing\n+\n+error: 2 positional arguments in format string, but no arguments were given\n+  --> $DIR/ifmt-bad-arg.rs:23:14\n+   |\n+LL |     format!(\"{} {}\");\n+   |              ^^ ^^\n+\n+error: invalid reference to positional argument 1 (there is 1 argument)\n+  --> $DIR/ifmt-bad-arg.rs:26:18\n+   |\n+LL |     format!(\"{0} {1}\", 1);\n+   |                  ^^^\n+   |\n+   = note: positional arguments are zero-based\n+\n+error: invalid reference to positional argument 2 (there are 2 arguments)\n+  --> $DIR/ifmt-bad-arg.rs:29:22\n+   |\n+LL |     format!(\"{0} {1} {2}\", 1, 2);\n+   |                      ^^^\n+   |\n+   = note: positional arguments are zero-based\n+\n+error: invalid reference to positional argument 2 (there are 2 arguments)\n+  --> $DIR/ifmt-bad-arg.rs:32:28\n+   |\n+LL |     format!(\"{} {value} {} {}\", 1, value=2);\n+   |                            ^^\n+   |\n+   = note: positional arguments are zero-based\n+\n+error: invalid reference to positional arguments 3, 4 and 5 (there are 3 arguments)\n+  --> $DIR/ifmt-bad-arg.rs:34:38\n+   |\n+LL |     format!(\"{name} {value} {} {} {} {} {} {}\", 0, name=1, value=2);\n+   |                                      ^^ ^^ ^^\n+   |\n+   = note: positional arguments are zero-based\n+\n+error: there is no argument named `foo`\n+  --> $DIR/ifmt-bad-arg.rs:37:17\n+   |\n+LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+   |                 ^^^^^\n+\n+error: there is no argument named `bar`\n+  --> $DIR/ifmt-bad-arg.rs:37:26\n+   |\n+LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+   |                          ^^^^^\n+\n+error: there is no argument named `foo`\n+  --> $DIR/ifmt-bad-arg.rs:41:14\n+   |\n+LL |     format!(\"{foo}\");                //~ ERROR: no argument named `foo`\n+   |              ^^^^^\n+\n+error: multiple unused formatting arguments\n+  --> $DIR/ifmt-bad-arg.rs:42:17\n+   |\n+LL |     format!(\"\", 1, 2);               //~ ERROR: multiple unused formatting arguments\n+   |             --  ^  ^\n+   |             |\n+   |             multiple missing formatting specifiers\n+\n+error: argument never used\n+  --> $DIR/ifmt-bad-arg.rs:43:22\n+   |\n+LL |     format!(\"{}\", 1, 2);             //~ ERROR: argument never used\n+   |             ----     ^\n+   |             |\n+   |             formatting specifier missing\n+\n+error: argument never used\n+  --> $DIR/ifmt-bad-arg.rs:44:20\n+   |\n+LL |     format!(\"{1}\", 1, 2);            //~ ERROR: argument never used\n+   |             -----  ^\n+   |             |\n+   |             formatting specifier missing\n+\n+error: named argument never used\n+  --> $DIR/ifmt-bad-arg.rs:45:26\n+   |\n+LL |     format!(\"{}\", 1, foo=2);         //~ ERROR: named argument never used\n+   |             ----         ^\n+   |             |\n+   |             formatting specifier missing\n+\n+error: argument never used\n+  --> $DIR/ifmt-bad-arg.rs:46:22\n+   |\n+LL |     format!(\"{foo}\", 1, foo=2);      //~ ERROR: argument never used\n+   |             -------  ^\n+   |             |\n+   |             formatting specifier missing\n+\n+error: named argument never used\n+  --> $DIR/ifmt-bad-arg.rs:47:21\n+   |\n+LL |     format!(\"\", foo=2);              //~ ERROR: named argument never used\n+   |             --      ^\n+   |             |\n+   |             formatting specifier missing\n+\n+error: multiple unused formatting arguments\n+  --> $DIR/ifmt-bad-arg.rs:48:32\n+   |\n+LL |     format!(\"{} {}\", 1, 2, foo=1, bar=2);  //~ ERROR: multiple unused formatting arguments\n+   |             -------            ^      ^\n+   |             |\n+   |             multiple missing formatting specifiers\n+\n+error: duplicate argument named `foo`\n+  --> $DIR/ifmt-bad-arg.rs:50:33\n+   |\n+LL |     format!(\"{foo}\", foo=1, foo=2);  //~ ERROR: duplicate argument\n+   |                                 ^\n+   |\n+note: previously here\n+  --> $DIR/ifmt-bad-arg.rs:50:26\n+   |\n+LL |     format!(\"{foo}\", foo=1, foo=2);  //~ ERROR: duplicate argument\n+   |                          ^\n+\n+error: expected ident, positional arguments cannot follow named arguments\n+  --> $DIR/ifmt-bad-arg.rs:51:24\n+   |\n+LL |     format!(\"\", foo=1, 2);           //~ ERROR: positional arguments cannot follow\n+   |                        ^\n+\n+error: there is no argument named `valueb`\n+  --> $DIR/ifmt-bad-arg.rs:55:23\n+   |\n+LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+   |                       ^^^^^^^^\n+\n+error: named argument never used\n+  --> $DIR/ifmt-bad-arg.rs:55:51\n+   |\n+LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+   |             -------------------                   ^\n+   |             |\n+   |             formatting specifier missing\n+\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/ifmt-bad-arg.rs:61:15\n+   |\n+LL |     format!(\"{\"); //~ ERROR: expected `'}'` but string was terminated\n+   |               ^ expected `'}'` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/ifmt-bad-arg.rs:63:18\n+   |\n+LL |     format!(\"foo } bar\"); //~ ERROR: unmatched `}` found\n+   |                  ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/ifmt-bad-arg.rs:64:18\n+   |\n+LL |     format!(\"foo }\"); //~ ERROR: unmatched `}` found\n+   |                  ^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: argument never used\n+  --> $DIR/ifmt-bad-arg.rs:66:27\n+   |\n+LL |     format!(\"foo %s baz\", \"bar\"); //~ ERROR: argument never used\n+   |                  --       ^^^^^\n+   |                  |\n+   |                  help: format specifiers use curly braces: `{}`\n+   |\n+   = note: printf formatting not supported; see the documentation for `std::fmt`\n+\n+error: there is no argument named `foo`\n+  --> $DIR/ifmt-bad-arg.rs:70:9\n+   |\n+LL |         {foo}\n+   |         ^^^^^\n+\n+error: aborting due to 27 previous errors\n+"}, {"sha": "6eb2765514054d15f2e0eddbd297ecb495f193c4", "filename": "src/test/ui/issue-12470.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-12470.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-12470.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12470.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |     let bb: &B = &*b;    //~ ERROR does not live long enough\n    |                  ^^^ borrowed value does not live long enough\n LL |     make_a(bb)\n LL | }\n-   | - borrowed value only lives until here\n+   | - `*b` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 36:16...\n   --> $DIR/issue-12470.rs:36:16"}, {"sha": "5c592f6f37523e4454bf6bf65bd78c5ac5691ae8", "filename": "src/test/ui/issue-13497-2.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-13497-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-13497-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13497-2.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,18 @@\n+error[E0597]: `rawLines` does not live long enough\n+  --> $DIR/issue-13497-2.rs:13:5\n+   |\n+LL |     rawLines //~ ERROR `rawLines` does not live long enough\n+   |     ^^^^^^^^ borrowed value does not live long enough\n+LL |         .iter().map(|l| l.trim()).collect()\n+LL | }\n+   | - `rawLines` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 11:24...\n+  --> $DIR/issue-13497-2.rs:11:24\n+   |\n+LL | fn read_lines_borrowed<'a>() -> Vec<&'a str> {\n+   |                        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "5cab7ca9e7a3fa6d7e6d405194923c3d9103327e", "filename": "src/test/ui/issue-17954.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-17954.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-17954.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.ast.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |     let a = &FOO;\n    |             ^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - borrowed value only lives until here\n+   | - `FOO` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "5cab7ca9e7a3fa6d7e6d405194923c3d9103327e", "filename": "src/test/ui/issue-17954.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-17954.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-17954.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.mir.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |     let a = &FOO;\n    |             ^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - borrowed value only lives until here\n+   | - `FOO` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "b5e550e5be1c9d963a3a7483d86dbc19523a19d3", "filename": "src/test/ui/issue-17954.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-17954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-17954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -29,5 +29,5 @@ fn main() {\n         println!(\"{}\", a);\n     });\n }\n-//[mir]~^ borrowed value only lives until here\n+//[mir]~^ `FOO` dropped here while still borrowed\n //[ast]~^^ temporary value only lives until here"}, {"sha": "860359b5937cc15634ab505f6483fc7a35649dcc", "filename": "src/test/ui/issue-18118.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-18118.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-18118.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18118.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -57,7 +57,7 @@ LL |         &p //~ ERROR `p` does not live long enough\n    |         ^^ borrowed value does not live long enough\n LL |         //~^ ERROR let bindings in constants are unstable\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `p` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "28e63b2d36b114bc6d6b7cd545d0e1da65a316b4", "filename": "src/test/ui/issue-30438-c.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-30438-c.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-30438-c.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30438-c.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |     &x\n    |     ^^ borrowed value does not live long enough\n LL |     //~^ ERROR: `x` does not live long enough\n LL | }\n-   | - borrowed value only lives until here\n+   | - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'y as defined on the function body at 17:10...\n   --> $DIR/issue-30438-c.rs:17:10"}, {"sha": "23df42d03c4e09be285b99835be00f51036fa313", "filename": "src/test/ui/issue-42060.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-42060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-42060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42060.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let thing = ();\n+    let other: typeof(thing) = thing; //~ ERROR attempt to use a non-constant value in a constant\n+    //~^ ERROR `typeof` is a reserved keyword but unimplemented [E0516]\n+}\n+\n+fn f(){\n+    let q = 1;\n+    <typeof(q)>::N //~ ERROR attempt to use a non-constant value in a constant\n+    //~^ ERROR `typeof` is a reserved keyword but unimplemented [E0516]\n+}\n+"}, {"sha": "69abac8ee7e3ae23bd150ac213b0de48db52946b", "filename": "src/test/ui/issue-42060.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-42060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-42060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42060.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,28 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-42060.rs:13:23\n+   |\n+LL |     let other: typeof(thing) = thing; //~ ERROR attempt to use a non-constant value in a constant\n+   |                       ^^^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-42060.rs:19:13\n+   |\n+LL |     <typeof(q)>::N //~ ERROR attempt to use a non-constant value in a constant\n+   |             ^ non-constant value\n+\n+error[E0516]: `typeof` is a reserved keyword but unimplemented\n+  --> $DIR/issue-42060.rs:13:16\n+   |\n+LL |     let other: typeof(thing) = thing; //~ ERROR attempt to use a non-constant value in a constant\n+   |                ^^^^^^^^^^^^^ reserved keyword\n+\n+error[E0516]: `typeof` is a reserved keyword but unimplemented\n+  --> $DIR/issue-42060.rs:19:6\n+   |\n+LL |     <typeof(q)>::N //~ ERROR attempt to use a non-constant value in a constant\n+   |      ^^^^^^^^^ reserved keyword\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0435, E0516.\n+For more information about an error, try `rustc --explain E0435`."}, {"sha": "ff53c9a5a54988fa50cbcfeb032c7f81c4fb7991", "filename": "src/test/ui/issue-43196.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-43196.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-43196.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-43196.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    |\n+}\n+//~^ ERROR expected `|`, found `}`\n+|\n+//~^ ERROR expected item, found `|`\n+"}, {"sha": "2418f517168a422d91bff0127ea56b6315850d21", "filename": "src/test/ui/issue-43196.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-43196.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-43196.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-43196.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,16 @@\n+error: expected `|`, found `}`\n+  --> $DIR/issue-43196.rs:13:1\n+   |\n+LL |     |\n+   |      - expected `|` here\n+LL | }\n+   | ^ unexpected token\n+\n+error: expected item, found `|`\n+  --> $DIR/issue-43196.rs:15:1\n+   |\n+LL | |\n+   | ^ expected item\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "40d7838a8032519573159508158cdca96ab6305f", "filename": "src/test/ui/issue-4335.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4335.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -11,7 +11,7 @@ LL |     id(Box::new(|| *v))\n    |                 ^^^^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - borrowed value only lives until here\n+   | - `v` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'r as defined on the function body at 15:6...\n   --> $DIR/issue-4335.rs:15:6"}, {"sha": "463abaede88f9315d3f886e1e5f8638bd7850ff5", "filename": "src/test/ui/issue-46036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-46036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-46036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46036.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |     let foo = Foo { x: &a }; //~ ERROR E0597\n    |                        ^^ borrowed value does not live long enough\n LL |     loop { }\n LL | }\n-   | - borrowed value only lives until here\n+   | - `a` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "7d12827dda5d2e958d9a4d2339749af16d4a21df", "filename": "src/test/ui/issue-46471-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471-1.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -20,7 +20,7 @@ LL | |         &mut z\n LL | |     };\n    | |     -\n    | |     |\n-   | |_____borrowed value only lives until here\n+   | |_____`z` dropped here while still borrowed\n    |       borrow later used here\n \n error: aborting due to 2 previous errors"}, {"sha": "560c341b4df051606a804be229d743b8d14957fe", "filename": "src/test/ui/issue-46471.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-46471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-46471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -16,7 +16,7 @@ LL |     &x\n    |     ^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - borrowed value only lives until here\n+   | - `x` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "ccbb852b1457484b78f384873994876c539a1f7b", "filename": "src/test/ui/issue-52126-assign-op-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -8,7 +8,7 @@ LL |         println!(\"accumulator before add_assign {:?}\", acc.map);\n    |                                                        ------- borrow later used here\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `line` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "33401424c9ada42cce9be51c6bc30d09e617e7fb", "filename": "src/test/ui/macros/format-foreign.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -11,6 +11,11 @@\n fn main() {\n     println!(\"%.*3$s %s!\\n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n     println!(\"%1$*2$.*3$f\", 123.456); //~ ERROR never used\n+    println!(r###\"%.*3$s\n+        %s!\\n\n+\"###, \"Hello,\", \"World\", 4);\n+    //~^ ERROR multiple unused formatting arguments\n+    // correctly account for raw strings in inline suggestions\n \n     // This should *not* produce hints, on the basis that there's equally as\n     // many \"correct\" format specifiers.  It's *probably* just an actual typo."}, {"sha": "5e76c0a322e51b941296762b1e793191c4112ba8", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -4,35 +4,58 @@ error: multiple unused formatting arguments\n LL |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n    |              --------------  ^^^^^^^^  ^^^^^^^  ^\n    |              |\n-   |              multiple missing formatting arguments\n+   |              multiple missing formatting specifiers\n    |\n-   = help: `%.*3$s` should be written as `{:.2$}`\n-   = help: `%s` should be written as `{}`\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n+help: format specifiers use curly braces\n+   |\n+LL |     println!(\"{:.2$} {}!/n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n+   |               ^^^^^^ ^^\n \n error: argument never used\n   --> $DIR/format-foreign.rs:13:29\n    |\n LL |     println!(\"%1$*2$.*3$f\", 123.456); //~ ERROR never used\n-   |                             ^^^^^^^\n+   |               -----------   ^^^^^^^\n+   |               |\n+   |               help: format specifiers use curly braces: `{0:1$.2$}`\n    |\n-   = help: `%1$*2$.*3$f` should be written as `{0:1$.2$}`\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n \n+error: multiple unused formatting arguments\n+  --> $DIR/format-foreign.rs:16:7\n+   |\n+LL |       println!(r###\"%.*3$s\n+   |  ______________-\n+LL | |         %s!/n\n+LL | | \"###, \"Hello,\", \"World\", 4);\n+   | |    -  ^^^^^^^^  ^^^^^^^  ^\n+   | |____|\n+   |      multiple missing formatting specifiers\n+   |\n+   = note: printf formatting not supported; see the documentation for `std::fmt`\n+help: format specifiers use curly braces\n+   |\n+LL |     println!(r###\"{:.2$}\n+LL |         {}!/n\n+   |\n+\n error: argument never used\n-  --> $DIR/format-foreign.rs:17:30\n+  --> $DIR/format-foreign.rs:22:30\n    |\n LL |     println!(\"{} %f\", \"one\", 2.0); //~ ERROR never used\n-   |                              ^^^\n+   |              -------         ^^^\n+   |              |\n+   |              formatting specifier missing\n \n error: named argument never used\n-  --> $DIR/format-foreign.rs:19:39\n+  --> $DIR/format-foreign.rs:24:39\n    |\n LL |     println!(\"Hi there, $NAME.\", NAME=\"Tim\"); //~ ERROR never used\n    |                                       ^^^^^\n    |\n    = help: `$NAME` should be written as `{NAME}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "81171a1ed01de5dfe035f8ab353e727ba8b2300a", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -4,13 +4,13 @@ error: multiple unused formatting arguments\n LL |     println!(\"Test\", 123, 456, 789);\n    |              ------  ^^^  ^^^  ^^^\n    |              |\n-   |              multiple missing formatting arguments\n+   |              multiple missing formatting specifiers\n \n error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:16:9\n    |\n LL |     println!(\"Test2\",\n-   |              ------- multiple missing formatting arguments\n+   |              ------- multiple missing formatting specifiers\n LL |         123,  //~ ERROR multiple unused formatting arguments\n    |         ^^^\n LL |         456,\n@@ -22,13 +22,15 @@ error: named argument never used\n   --> $DIR/format-unused-lables.rs:21:35\n    |\n LL |     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never used\n-   |                                   ^^^^^^\n+   |              ------------         ^^^^^^\n+   |              |\n+   |              formatting specifier missing\n \n error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:24:9\n    |\n LL |     println!(\"Some more $STUFF\",\n-   |              ------------------ multiple missing formatting arguments\n+   |              ------------------ multiple missing formatting specifiers\n LL |         \"woo!\",  //~ ERROR multiple unused formatting arguments\n    |         ^^^^^^\n LL |             STUFF="}, {"sha": "057cf6efa1dea415fa4e72d11c48419496b4a1eb", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,6 +5,10 @@ LL |     [1, 2, 3].sort_by(|| panic!());\n    |               ^^^^^^^ -- takes 0 arguments\n    |               |\n    |               expected closure that takes 2 arguments\n+help: consider changing the closure to take and ignore the expected arguments\n+   |\n+LL |     [1, 2, 3].sort_by(|_, _| panic!());\n+   |                       ^^^^^^\n \n error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n   --> $DIR/closure-arg-count.rs:17:15\n@@ -51,6 +55,10 @@ note: required by `f`\n    |\n LL | fn f<F: Fn<usize>>(_: F) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider changing the closure to take and ignore the expected argument\n+   |\n+LL |     f(|_| panic!());\n+   |       ^^^\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:26:53"}, {"sha": "28353a8bc2be7cd96173b85ba924110d998d6d35", "filename": "src/test/ui/nll/borrowed-local-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -10,7 +10,7 @@ LL | |         //~^ ERROR `v` does not live long enough [E0597]\n LL | |     });\n    | |_____-- borrow later used here\n    |       |\n-   |       borrowed value only lives until here\n+   |       `v` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "867e473af2c0ee2c3ab5fec18c6842455c328993", "filename": "src/test/ui/nll/borrowed-universal-error-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |     &v\n    |     ^^ borrowed value does not live long enough\n LL |     //~^ ERROR `v` does not live long enough [E0597]\n LL | }\n-   | - borrowed value only lives until here\n+   | - `v` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n   --> $DIR/borrowed-universal-error-2.rs:14:8"}, {"sha": "12a9adf6e0ba67b2dc6593acb4e2acf142027f23", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |             y: &y,\n    |                ^^ borrowed value does not live long enough\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n LL | \n LL |     deref(p);\n    |           - borrow later used here"}, {"sha": "a830768b36e1cd1bd1efefce51034e051c10aa93", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -30,7 +30,7 @@ LL |         closure(&mut p, &y);\n    |                         ^^ borrowed value does not live long enough\n LL |         //~^ ERROR `y` does not live long enough [E0597]\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n LL | \n LL |     deref(p);\n    |           - borrow later used here"}, {"sha": "bf12800e58d71ffbcc4679f56e7e9cf8fa6a23d8", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -57,7 +57,7 @@ LL | |         };\n    | |_________^ borrowed value does not live long enough\n ...\n LL |       }\n-   |       - borrowed value only lives until here\n+   |       - `y` dropped here while still borrowed\n LL | \n LL |       deref(p);\n    |             - borrow later used here"}, {"sha": "4b0dad3bda0229c93083e54301c77666ffe15a3d", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -34,7 +34,7 @@ LL |         let mut closure = || p = &y;\n    |                           ^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n LL | \n LL |     deref(p);\n    |           - borrow later used here"}, {"sha": "a3588ff07e6a50c6151f0ba355590eb7fc84d667", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -82,7 +82,7 @@ LL |     let cell = Cell::new(&a);\n    |                          ^^ borrowed value does not live long enough\n ...\n LL | }\n-   | - borrowed value only lives until here\n+   | - `a` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "532bc493e7dbcc0400d8699dc2793c1f2106a49a", "filename": "src/test/ui/nll/issue-31567.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |     let s_inner: &'a S = &*v.0; //~ ERROR `*v.0` does not live long enough\n    |                          ^^^^^ borrowed value does not live long enough\n LL |     &s_inner.0\n LL | }\n-   | - borrowed value only lives until here\n+   | - `*v.0` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:17...\n   --> $DIR/issue-31567.rs:21:17"}, {"sha": "e73df61a30371963f3a1dcdea36aab51a4198ca9", "filename": "src/test/ui/nll/issue-47470.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `local` does not live long enough\n LL |         &local //~ ERROR `local` does not live long enough\n    |         ^^^^^^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `local` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the impl at 23:6...\n   --> $DIR/issue-47470.rs:23:6"}, {"sha": "ae7193ef4fa793d44b6a515ff55774f76277ab51", "filename": "src/test/ui/region-borrow-params-issue-29793-small.nll.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |      - borrowed value only lives until here\n+   |      - `x` dropped here while still borrowed\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:19:17\n@@ -14,7 +14,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |      - borrowed value only lives until here\n+   |      - `y` dropped here while still borrowed\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:34:17\n@@ -23,7 +23,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |      - borrowed value only lives until here\n+   |      - `x` dropped here while still borrowed\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:34:17\n@@ -32,7 +32,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |      - borrowed value only lives until here\n+   |      - `y` dropped here while still borrowed\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:65:17\n@@ -41,7 +41,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:10...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:64:10\n@@ -56,7 +56,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:10...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:64:10\n@@ -71,7 +71,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:10...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:75:10\n@@ -86,7 +86,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:10...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:75:10\n@@ -101,7 +101,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:99:14\n@@ -116,7 +116,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:99:14\n@@ -131,7 +131,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:113:14\n@@ -146,7 +146,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:113:14\n@@ -161,7 +161,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:141:14\n@@ -176,7 +176,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:141:14\n@@ -191,7 +191,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:156:14\n@@ -206,7 +206,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:156:14\n@@ -221,7 +221,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:184:14\n@@ -236,7 +236,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:184:14\n@@ -251,7 +251,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `x` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:198:14\n@@ -266,7 +266,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n-   |         - borrowed value only lives until here\n+   |         - `y` dropped here while still borrowed\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:14...\n   --> $DIR/region-borrow-params-issue-29793-small.rs:198:14"}, {"sha": "13e34d85210a785d33d277ec3a68d38aa0df5887", "filename": "src/test/ui/regions-nested-fns-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fregions-nested-fns-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fregions-nested-fns-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-nested-fns-2.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL | |             if false { &y } else { z }\n LL | |         });\n    | |_________^ borrowed value does not live long enough\n LL |   }\n-   |   - borrowed value only lives until here\n+   |   - `y` dropped here while still borrowed\n    |\n    = note: borrowed value must be valid for the static lifetime...\n "}, {"sha": "22f2f13f1f7cf60db1c8d206de3c0626b22dcb2c", "filename": "src/test/ui/span/destructor-restrictions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `*a` does not live long enough\n LL |         *a.borrow() + 1\n    |          ^ borrowed value does not live long enough\n LL |     }; //~^ ERROR `*a` does not live long enough\n-   |     - borrowed value only lives until here\n+   |     - `*a` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "225ed0f9cc832c50b66076604ea79f2190e3a316", "filename": "src/test/ui/span/dropck-object-cycle.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     assert_eq!(object_invoke1(&*m), (4,5));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `*m` dropped here while still borrowed\n    | borrow later used here, when `m` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "6c0373ce1570a176a2001345ce741e4f128d2a59", "filename": "src/test/ui/span/dropck_arr_cycle_checked.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     b1.a[1].v.set(Some(&b3));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `b3` dropped here while still borrowed\n    | borrow later used here, when `b1` is dropped\n \n error[E0597]: `b2` does not live long enough\n@@ -19,7 +19,7 @@ LL |     b1.a[0].v.set(Some(&b2));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `b2` dropped here while still borrowed\n    | borrow later used here, when `b1` is dropped\n \n error[E0597]: `b1` does not live long enough\n@@ -31,7 +31,7 @@ LL |     b3.a[0].v.set(Some(&b1));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `b1` dropped here while still borrowed\n    | borrow later used here, when `b1` is dropped\n \n error: aborting due to 3 previous errors"}, {"sha": "2884b1818baa9cf23801cd1e28dbc4f393af7543", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     d1.p.set(Some(&d2));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d2` dropped here while still borrowed\n    | borrow later used here, when `d1` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -21,7 +21,7 @@ LL |     //~^ ERROR `d1` does not live long enough\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `d1` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "27a52360bb7010f6788f9d6551cffdbe9eb5bc07", "filename": "src/test/ui/span/dropck_misc_variants.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -6,7 +6,7 @@ LL |     _w = Wrap::<&[&str]>(NoisyDrop(&bomb));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `bomb` dropped here while still borrowed\n    | borrow later used here, when `_w` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -20,7 +20,7 @@ LL |         let u = NoisyDrop(&v);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `v` dropped here while still borrowed\n    | borrow later used here, when `_w` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "c0950e79296784067ecc8d666f505e5c85aa7da6", "filename": "src/test/ui/span/dropck_vec_cycle_checked.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     c1.v[1].v.set(Some(&c3));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c3` dropped here while still borrowed\n    | borrow later used here, when `c1` is dropped\n \n error[E0597]: `c2` does not live long enough\n@@ -19,7 +19,7 @@ LL |     c1.v[0].v.set(Some(&c2));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c2` dropped here while still borrowed\n    | borrow later used here, when `c1` is dropped\n \n error[E0597]: `c1` does not live long enough\n@@ -31,7 +31,7 @@ LL |     c3.v[0].v.set(Some(&c1));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c1` dropped here while still borrowed\n    | borrow later used here, when `c1` is dropped\n \n error: aborting due to 3 previous errors"}, {"sha": "e841e6c635bc31aedf064d36f11b50ac3500802c", "filename": "src/test/ui/span/issue-11925.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `x` does not live long enough\n LL |         let f = to_fn_once(move|| &x); //~ ERROR does not live long enough\n    |                                   ^-\n    |                                   ||\n-   |                                   |borrowed value only lives until here\n+   |                                   |`x` dropped here while still borrowed\n    |                                   borrowed value does not live long enough\n \n error: aborting due to previous error"}, {"sha": "fe0187f38637898f045a56766ae14cb0bfee185f", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -4,15 +4,15 @@ error[E0597]: `y` does not live long enough\n LL |     y.borrow().clone()\n    |     ^ borrowed value does not live long enough\n LL | }\n-   | - borrowed value only lives until here\n+   | - `y` dropped here while still borrowed\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:27:9\n    |\n LL |         y.borrow().clone()\n    |         ^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `y` dropped here while still borrowed\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b9834a3d4379e550b95321da5bcac9c68be8f405", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     _d = D_Child(&d1);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `_d` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "cd3d658aa8726eea3ba8f555cb0eee02e223efe4", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -6,7 +6,7 @@ LL |     _d = D_HasSelfMethod(&d1);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `_d` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -19,7 +19,7 @@ LL |     _d = D_HasMethodWithSelfArg(&d1);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `_d` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -32,7 +32,7 @@ LL |     _d = D_HasType(&d1);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `_d` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "54c6ac43f347c33d93de70cf2624529f449cb7b1", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -6,7 +6,7 @@ LL |     d2 = D(S(&d1, \"inner\"), \"d2\");\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `d1` dropped here while still borrowed\n    | borrow later used here, when `d2` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "a81b591d288eb234a93e9ab67851d73638385da6", "filename": "src/test/ui/span/issue-25199.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     let test = Test{test: &container};\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `container` dropped here while still borrowed\n    | borrow later used here, when `container` is dropped\n \n error: aborting due to previous error"}, {"sha": "b6c28828120880ea36de2937eeda12862e16edc4", "filename": "src/test/ui/span/issue-26656.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -6,7 +6,7 @@ LL |     zook.button = B::BigRedButton(&ticking);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `ticking` dropped here while still borrowed\n    | borrow later used here, when `zook` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "2cf408d097b837b382c43a8927a98d77bb9fca77", "filename": "src/test/ui/span/issue-29106.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29106.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -6,7 +6,7 @@ LL |         y = Arc::new(Foo(&x));\n LL |     }\n    |     -\n    |     |\n-   |     borrowed value only lives until here\n+   |     `x` dropped here while still borrowed\n    |     borrow later used here, when `y` is dropped\n \n error[E0597]: `x` does not live long enough\n@@ -17,7 +17,7 @@ LL |         y = Rc::new(Foo(&x));\n LL |     }\n    |     -\n    |     |\n-   |     borrowed value only lives until here\n+   |     `x` dropped here while still borrowed\n    |     borrow later used here, when `y` is dropped\n \n error: aborting due to 2 previous errors"}, {"sha": "0d13c9844b331377c98db5622e0c46a8b67ae716", "filename": "src/test/ui/span/issue-36537.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |         p = &a;\n    |         ^^^^^^ borrowed value does not live long enough\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `a` dropped here while still borrowed\n LL |     p.use_ref();\n    |     - borrow later used here\n "}, {"sha": "def4a308bc75efac4ab5f0088faf6dc3104f750f", "filename": "src/test/ui/span/issue-40157.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `foo` does not live long enough\n LL |     {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n    |                       ------------------------------^^^--------------------\n    |                       |                             |          |\n-   |                       |                             |          borrowed value only lives until here\n+   |                       |                             |          `foo` dropped here while still borrowed\n    |                       |                             borrowed value does not live long enough\n    |                       borrow later used here\n "}, {"sha": "27eb4a3afed6d90decde00d95696e01fcf0bac0d", "filename": "src/test/ui/span/issue28498-reject-ex1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     foo.data[0].1.set(Some(&foo.data[1]));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `foo.data` dropped here while still borrowed\n    | borrow later used here, when `foo` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "72acc54bffb321468473a4ffb1a2a0c488cf7898", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     foo1 = Foo(1, &first_dropped);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `first_dropped` dropped here while still borrowed\n    | borrow later used here, when `foo1` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "a39050a5199117d7ae8273ffabe77a99b2ce536b", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     foo1 = Foo(1, &first_dropped, Box::new(callback));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `first_dropped` dropped here while still borrowed\n    | borrow later used here, when `foo1` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "fcffea25702b92b23544da0303d61e8a1ca3fc55", "filename": "src/test/ui/span/issue28498-reject-trait-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     foo1 = Foo(1, &first_dropped);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `first_dropped` dropped here while still borrowed\n    | borrow later used here, when `foo1` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "e5139dca351a6295c42a69af281702a5e05b715b", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `b` does not live long enough\n LL |         p = &*b;\n    |               ^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `b` dropped here while still borrowed\n LL |     //~^^ ERROR `b` does not live long enough\n LL |     p.use_ref();\n    |     - borrow later used here"}, {"sha": "049618fe4744bbc618dc5329dd26dbd4b5581c12", "filename": "src/test/ui/span/range-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `b` does not live long enough\n LL |         &a..&b\n    |             ^^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `b` dropped here while still borrowed\n ...\n LL |     r.use_ref();\n    |     - borrow later used here\n@@ -15,7 +15,7 @@ error[E0597]: `a` does not live long enough\n LL |         &a..&b\n    |         ^^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `a` dropped here while still borrowed\n ...\n LL |     r.use_ref();\n    |     - borrow later used here"}, {"sha": "4881259ff23abb30bc4cbaf2da5031d9d9206460", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |         let c_ref = &c;\n    |                     ^^ borrowed value does not live long enough\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `c` dropped here while still borrowed\n LL |     f.use_mut();\n    |     - borrow later used here\n "}, {"sha": "f522521b400e405faec70ce4842488266a36b494", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -10,7 +10,7 @@ LL | |         repeater3(tmp1)\n LL | |     };\n    | |     -\n    | |     |\n-   | |_____borrowed value only lives until here\n+   | |_____`tmp0` dropped here while still borrowed\n    |       borrow later used here\n \n error: aborting due to previous error"}, {"sha": "08ca100c247dc16d2b083ea0f7e54ddfb1063f7c", "filename": "src/test/ui/span/regions-escape-loop-via-variable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -6,7 +6,7 @@ LL |         let x = 1 + *p;\n LL |         p = &x;\n    |             ^^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "33fca7fa703b0589fc5282e55f98c116d00eefe3", "filename": "src/test/ui/span/regions-escape-loop-via-vec.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -41,7 +41,7 @@ LL |         _y.push(&mut z);\n    |         borrow later used here\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `z` dropped here while still borrowed\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5fa25ae8506e6d092a38c20af46d22cbef6742c7", "filename": "src/test/ui/span/regions-infer-borrow-scope-within-loop.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -5,7 +5,7 @@ LL |         y = borrow(&*x);\n    |                    ^^^ borrowed value does not live long enough\n ...\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `*x` dropped here while still borrowed\n LL |     assert!(*y != 0);\n    |             -- borrow later used here\n "}, {"sha": "7f7217b8004a6338709027816597c38c07d48d31", "filename": "src/test/ui/span/send-is-not-static-ensures-scoping.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -8,7 +8,7 @@ LL | |             //~^ ERROR `y` does not live long enough\n LL | |         })\n    | |_________^ borrowed value does not live long enough\n LL |       };\n-   |       - borrowed value only lives until here\n+   |       - `y` dropped here while still borrowed\n LL | \n LL |       bad.join();\n    |       --- borrow later used here\n@@ -20,7 +20,7 @@ LL |         let y = &x;\n    |                 ^^ borrowed value does not live long enough\n ...\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n LL | \n LL |     bad.join();\n    |     --- borrow later used here"}, {"sha": "58dad753ac4a16041cec864287eb65cd278acf0c", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `x` does not live long enough\n LL |         Mutex::new(&x)\n    |                    ^^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n ...\n LL |     let _dangling = *lock.lock().unwrap();\n    |                      ---- borrow later used here\n@@ -15,7 +15,7 @@ error[E0597]: `x` does not live long enough\n LL |         RwLock::new(&x)\n    |                     ^^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n LL |     //~^^ ERROR `x` does not live long enough\n LL |     let _dangling = *lock.read().unwrap();\n    |                      ---- borrow later used here\n@@ -30,7 +30,7 @@ LL |         let _ = tx.send(&x);\n    |                         ^^ borrowed value does not live long enough\n LL |         (tx, rx)\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `x` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "878ae36386371e884198de18717031aa84d74094", "filename": "src/test/ui/span/send-is-not-static-std-sync.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -15,7 +15,7 @@ error[E0597]: `z` does not live long enough\n LL |         *lock.lock().unwrap() = &z;\n    |                                 ^^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `z` dropped here while still borrowed\n LL |     //~^^ ERROR `z` does not live long enough\n LL |     lock.use_ref(); // (Mutex is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n    |     ---- borrow later used here\n@@ -37,7 +37,7 @@ error[E0597]: `z` does not live long enough\n LL |         *lock.write().unwrap() = &z;\n    |                                  ^^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `z` dropped here while still borrowed\n LL |     //~^^ ERROR `z` does not live long enough\n LL |     lock.use_ref(); // (RwLock is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n    |     ---- borrow later used here\n@@ -59,7 +59,7 @@ error[E0597]: `z` does not live long enough\n LL |         tx.send(&z).unwrap();\n    |                 ^^ borrowed value does not live long enough\n LL |     }\n-   |     - borrowed value only lives until here\n+   |     - `z` dropped here while still borrowed\n ...\n LL | }\n    | - borrow later used here, when `tx` is dropped"}, {"sha": "ee51304800d3264dcff930fe25a774f7fa98dcd4", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     c1.v[0].v.set(Some(&c2));\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c2` dropped here while still borrowed\n    | borrow later used here, when `c1` is dropped\n \n error[E0597]: `c1` does not live long enough\n@@ -19,7 +19,7 @@ LL |     //~^ ERROR `c1` does not live long enough\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `c1` dropped here while still borrowed\n    | borrow later used here, when `c1` is dropped\n \n error: aborting due to 2 previous errors"}, {"sha": "73256b4fb17c9e6ec66d32c02cf59f1e5ba2d742", "filename": "src/test/ui/span/vec_refs_data_with_early_death.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -7,7 +7,7 @@ LL |     v.push(&y);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `y` dropped here while still borrowed\n    | borrow later used here, when `v` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined\n@@ -21,7 +21,7 @@ LL |     v.push(&x);\n LL | }\n    | -\n    | |\n-   | borrowed value only lives until here\n+   | `x` dropped here while still borrowed\n    | borrow later used here, when `v` is dropped\n    |\n    = note: values in a scope are dropped in the opposite order they are defined"}, {"sha": "cc32eaaa9799121650b389d6f458396411e32d95", "filename": "src/test/ui/span/wf-method-late-bound-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `pointer` does not live long enough\n LL |         f2.xmute(&pointer)\n    |                  ^^^^^^^^ borrowed value does not live long enough\n LL |     };\n-   |     - borrowed value only lives until here\n+   |     - `pointer` dropped here while still borrowed\n LL |     //~^^ ERROR `pointer` does not live long enough\n LL |     println!(\"{}\", dangling);\n    |                    -------- borrow later used here"}, {"sha": "0cb058c2b0b6e03f8ca50116dfb08d9a2f341990", "filename": "src/test/ui/try-poll.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Ftry-poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b48b9b6d70065a16cc119fe934ed342c664c78/src%2Ftest%2Fui%2Ftry-poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-poll.rs?ref=45b48b9b6d70065a16cc119fe934ed342c664c78", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![allow(dead_code, unused)]\n+#![feature(futures_api)]\n+\n+use std::task::Poll;\n+\n+struct K;\n+struct E;\n+\n+fn as_result() -> Result<(), E> {\n+    // From Result\n+    let K = Ok::<K, E>(K)?;\n+\n+    // From Poll<Result>\n+    let _: Poll<K> = Poll::Ready::<Result<K, E>>(Ok(K))?;\n+\n+    // From Poll<Option<Result>>\n+    let _: Poll<Option<K>> = Poll::Ready::<Option<Result<K, E>>>(None)?;\n+\n+    Ok(())\n+}\n+\n+fn as_poll_result() -> Poll<Result<(), E>> {\n+    // From Result\n+    let K = Ok::<K, E>(K)?;\n+\n+    // From Poll<Result>\n+    let _: Poll<K> = Poll::Ready::<Result<K, E>>(Ok(K))?;\n+\n+    // From Poll<Option<Result>>\n+    let _: Poll<Option<K>> = Poll::Ready::<Option<Result<K, E>>>(None)?;\n+\n+    Poll::Ready(Ok(()))\n+}\n+\n+fn as_poll_option_result() -> Poll<Option<Result<(), E>>> {\n+    // From Result\n+    let K = Ok::<K, E>(K)?;\n+\n+    // From Poll<Result>\n+    let _: Poll<K> = Poll::Ready::<Result<K, E>>(Ok(K))?;\n+\n+    // From Poll<Option<Result>>\n+    let _: Poll<Option<K>> = Poll::Ready::<Option<Result<K, E>>>(None)?;\n+\n+    Poll::Ready(Some(Ok(())))\n+}\n+\n+fn main() {\n+}"}]}