{"sha": "073a1ef834be5e2e1ae6733c6c299d2ae68050d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3M2ExZWY4MzRiZTVlMmUxYWU2NzMzYzZjMjk5ZDJhZTY4MDUwZDg=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-03-06T14:26:49Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-03-06T14:43:14Z"}, "message": "Support aliases and Self in struct literals\n\nFixes #3306.", "tree": {"sha": "516d9694de4f960d886c66b702014ec56bc2ebc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/516d9694de4f960d886c66b702014ec56bc2ebc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/073a1ef834be5e2e1ae6733c6c299d2ae68050d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/073a1ef834be5e2e1ae6733c6c299d2ae68050d8", "html_url": "https://github.com/rust-lang/rust/commit/073a1ef834be5e2e1ae6733c6c299d2ae68050d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/073a1ef834be5e2e1ae6733c6c299d2ae68050d8/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cc6879576b04850db3dd8aa1df0cf7c8f270503", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc6879576b04850db3dd8aa1df0cf7c8f270503", "html_url": "https://github.com/rust-lang/rust/commit/1cc6879576b04850db3dd8aa1df0cf7c8f270503"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "39f1442164b0aec22682e5f54b25438c4bef59a2", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/073a1ef834be5e2e1ae6733c6c299d2ae68050d8/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073a1ef834be5e2e1ae6733c6c299d2ae68050d8/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=073a1ef834be5e2e1ae6733c6c299d2ae68050d8", "patch": "@@ -425,7 +425,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n         // FIXME: this should resolve assoc items as well, see this example:\n         // https://play.rust-lang.org/?gist=087992e9e22495446c01c0d4e2d69521\n-        match resolver.resolve_path_in_type_ns_fully(self.db, path.mod_path()) {\n+        return match resolver.resolve_path_in_type_ns_fully(self.db, path.mod_path()) {\n             Some(TypeNs::AdtId(AdtId::StructId(strukt))) => {\n                 let substs = Ty::substs_from_path(&ctx, path, strukt.into());\n                 let ty = self.db.ty(strukt.into());\n@@ -438,7 +438,33 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = self.insert_type_vars(ty.subst(&substs));\n                 (ty, Some(var.into()))\n             }\n+            Some(TypeNs::SelfType(impl_id)) => {\n+                let generics = crate::utils::generics(self.db, impl_id.into());\n+                let substs = Substs::type_params_for_generics(&generics);\n+                let ty = self.db.impl_self_ty(impl_id).subst(&substs);\n+                let variant = ty_variant(&ty);\n+                (ty, variant)\n+            }\n+            Some(TypeNs::TypeAliasId(it)) => {\n+                let substs = Substs::build_for_def(self.db, it)\n+                    .fill(std::iter::repeat_with(|| self.table.new_type_var()))\n+                    .build();\n+                let ty = self.db.ty(it.into()).subst(&substs);\n+                let variant = ty_variant(&ty);\n+                (ty, variant)\n+            }\n             Some(_) | None => (Ty::Unknown, None),\n+        };\n+\n+        fn ty_variant(ty: &Ty) -> Option<VariantId> {\n+            ty.as_adt().and_then(|(adt_id, _)| match adt_id {\n+                AdtId::StructId(s) => Some(VariantId::StructId(s)),\n+                AdtId::UnionId(u) => Some(VariantId::UnionId(u)),\n+                AdtId::EnumId(_) => {\n+                    // Error E0071, expected struct, variant or union type, found enum `Foo`\n+                    None\n+                }\n+            })\n         }\n     }\n "}, {"sha": "c140bd513014ad5bae680e6c000fbf08e1bf79f3", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/073a1ef834be5e2e1ae6733c6c299d2ae68050d8/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073a1ef834be5e2e1ae6733c6c299d2ae68050d8/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=073a1ef834be5e2e1ae6733c6c299d2ae68050d8", "patch": "@@ -50,6 +50,47 @@ fn test() {\n     assert_eq!(\"Nat\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn self_in_struct_lit() {\n+    assert_snapshot!(infer(\n+        r#\"\n+//- /main.rs\n+struct S<T> { x: T }\n+\n+impl S<u32> {\n+    fn foo() {\n+        Self { x: 1 };\n+    }\n+}\n+\"#,\n+    ), @r###\"\n+    [63; 93) '{     ...     }': ()\n+    [73; 86) 'Self { x: 1 }': S<u32>\n+    [83; 84) '1': u32\n+    \"###);\n+}\n+\n+#[test]\n+fn type_alias_in_struct_lit() {\n+    assert_snapshot!(infer(\n+        r#\"\n+//- /main.rs\n+struct S<T> { x: T }\n+\n+type SS = S<u32>;\n+\n+fn foo() {\n+    SS { x: 1 };\n+}\n+\n+\"#,\n+    ), @r###\"\n+    [64; 84) '{     ...1 }; }': ()\n+    [70; 81) 'SS { x: 1 }': S<u32>\n+    [78; 79) '1': u32\n+    \"###);\n+}\n+\n #[test]\n fn infer_ranges() {\n     let (db, pos) = TestDB::with_position("}, {"sha": "a10e642dbac34190b0118167b1b98699d0b6c8d6", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/073a1ef834be5e2e1ae6733c6c299d2ae68050d8/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073a1ef834be5e2e1ae6733c6c299d2ae68050d8/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=073a1ef834be5e2e1ae6733c6c299d2ae68050d8", "patch": "@@ -472,6 +472,33 @@ mod tests {\n         check_apply_diagnostic_fix(before, after);\n     }\n \n+    #[test]\n+    fn test_fill_struct_fields_self() {\n+        let before = r\"\n+            struct TestStruct {\n+                one: i32,\n+            }\n+\n+            impl TestStruct {\n+                fn test_fn() {\n+                    let s = Self {};\n+                }\n+            }\n+        \";\n+        let after = r\"\n+            struct TestStruct {\n+                one: i32,\n+            }\n+\n+            impl TestStruct {\n+                fn test_fn() {\n+                    let s = Self { one: ()};\n+                }\n+            }\n+        \";\n+        check_apply_diagnostic_fix(before, after);\n+    }\n+\n     #[test]\n     fn test_fill_struct_fields_enum() {\n         let before = r\""}]}