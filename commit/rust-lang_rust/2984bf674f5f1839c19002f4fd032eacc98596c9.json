{"sha": "2984bf674f5f1839c19002f4fd032eacc98596c9", "node_id": "C_kwDOAAsO6NoAKDI5ODRiZjY3NGY1ZjE4MzljMTkwMDJmNGZkMDMyZWFjYzk4NTk2Yzk", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-24T20:29:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-25T20:55:22Z"}, "message": "Simplify implementation of `-Z gcc-ld`\n\n- The logic is now unified for all targets (wasm targets should also be supported now)\n- Additional \"symlink\" files like `ld64` are eliminated\n- lld-wrapper is used for propagating the correct lld flavor\n- Cleanup \"unwrap or exit\" logic in lld-wrapper", "tree": {"sha": "4482219c0cc9ac5d8ab5c4704328c0a5019cbf2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4482219c0cc9ac5d8ab5c4704328c0a5019cbf2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2984bf674f5f1839c19002f4fd032eacc98596c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2984bf674f5f1839c19002f4fd032eacc98596c9", "html_url": "https://github.com/rust-lang/rust/commit/2984bf674f5f1839c19002f4fd032eacc98596c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2984bf674f5f1839c19002f4fd032eacc98596c9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "html_url": "https://github.com/rust-lang/rust/commit/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4"}], "stats": {"total": 193, "additions": 71, "deletions": 122}, "files": [{"sha": "6c29692bd3bfe471b6ffa6455d2223fe4452528c", "filename": "compiler/rustc_codegen_ssa/src/back/command.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2984bf674f5f1839c19002f4fd032eacc98596c9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984bf674f5f1839c19002f4fd032eacc98596c9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs?ref=2984bf674f5f1839c19002f4fd032eacc98596c9", "patch": "@@ -105,12 +105,7 @@ impl Command {\n             }\n             Program::Lld(ref p, flavor) => {\n                 let mut c = process::Command::new(p);\n-                c.arg(\"-flavor\").arg(match flavor {\n-                    LldFlavor::Wasm => \"wasm\",\n-                    LldFlavor::Ld => \"gnu\",\n-                    LldFlavor::Link => \"link\",\n-                    LldFlavor::Ld64 => \"darwin\",\n-                });\n+                c.arg(\"-flavor\").arg(flavor.as_str());\n                 if let LldFlavor::Wasm = flavor {\n                     // LLVM expects host-specific formatting for @file\n                     // arguments, but we always generate posix formatted files"}, {"sha": "00f85852493b2e1a8e82c9ec9d6f1786c773da8d", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2984bf674f5f1839c19002f4fd032eacc98596c9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984bf674f5f1839c19002f4fd032eacc98596c9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=2984bf674f5f1839c19002f4fd032eacc98596c9", "patch": "@@ -2698,37 +2698,20 @@ fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n         if let LinkerFlavor::Gcc = flavor {\n             match ld_impl {\n                 LdImpl::Lld => {\n-                    if sess.target.lld_flavor == LldFlavor::Ld64 {\n-                        let tools_path = sess.get_tools_search_paths(false);\n-                        let ld64_exe = tools_path\n-                            .into_iter()\n-                            .map(|p| p.join(\"gcc-ld\"))\n-                            .map(|p| {\n-                                p.join(if sess.host.is_like_windows { \"ld64.exe\" } else { \"ld64\" })\n-                            })\n-                            .find(|p| p.exists())\n-                            .unwrap_or_else(|| sess.fatal(\"rust-lld (as ld64) not found\"));\n-                        cmd.cmd().arg({\n-                            let mut arg = OsString::from(\"-fuse-ld=\");\n-                            arg.push(ld64_exe);\n-                            arg\n-                        });\n-                    } else {\n-                        let tools_path = sess.get_tools_search_paths(false);\n-                        let lld_path = tools_path\n-                            .into_iter()\n-                            .map(|p| p.join(\"gcc-ld\"))\n-                            .find(|p| {\n-                                p.join(if sess.host.is_like_windows { \"ld.exe\" } else { \"ld\" })\n-                                    .exists()\n-                            })\n-                            .unwrap_or_else(|| sess.fatal(\"rust-lld (as ld) not found\"));\n-                        cmd.cmd().arg({\n-                            let mut arg = OsString::from(\"-B\");\n-                            arg.push(lld_path);\n-                            arg\n-                        });\n-                    }\n+                    let tools_path = sess.get_tools_search_paths(false);\n+                    let gcc_ld_dir = tools_path\n+                        .into_iter()\n+                        .map(|p| p.join(\"gcc-ld\"))\n+                        .find(|p| {\n+                            p.join(if sess.host.is_like_windows { \"ld.exe\" } else { \"ld\" }).exists()\n+                        })\n+                        .unwrap_or_else(|| sess.fatal(\"rust-lld (as ld) not found\"));\n+                    cmd.arg({\n+                        let mut arg = OsString::from(\"-B\");\n+                        arg.push(gcc_ld_dir);\n+                        arg\n+                    });\n+                    cmd.arg(format!(\"-Wl,-rustc-lld-flavor={}\", sess.target.lld_flavor.as_str()));\n                 }\n             }\n         } else {"}, {"sha": "6dd245b047cbe56fba534fb8840f77be0ea57aae", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2984bf674f5f1839c19002f4fd032eacc98596c9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984bf674f5f1839c19002f4fd032eacc98596c9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=2984bf674f5f1839c19002f4fd032eacc98596c9", "patch": "@@ -108,6 +108,15 @@ pub enum LldFlavor {\n }\n \n impl LldFlavor {\n+    pub fn as_str(&self) -> &'static str {\n+        match self {\n+            LldFlavor::Wasm => \"wasm\",\n+            LldFlavor::Ld64 => \"darwin\",\n+            LldFlavor::Ld => \"gnu\",\n+            LldFlavor::Link => \"link\",\n+        }\n+    }\n+\n     fn from_str(s: &str) -> Option<Self> {\n         Some(match s {\n             \"darwin\" => LldFlavor::Ld64,\n@@ -121,13 +130,7 @@ impl LldFlavor {\n \n impl ToJson for LldFlavor {\n     fn to_json(&self) -> Json {\n-        match *self {\n-            LldFlavor::Ld64 => \"darwin\",\n-            LldFlavor::Ld => \"gnu\",\n-            LldFlavor::Link => \"link\",\n-            LldFlavor::Wasm => \"wasm\",\n-        }\n-        .to_json()\n+        self.as_str().to_json()\n     }\n }\n "}, {"sha": "b35eba21e6bd6c8f2125db9d743c5050cdc55f17", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2984bf674f5f1839c19002f4fd032eacc98596c9/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984bf674f5f1839c19002f4fd032eacc98596c9/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=2984bf674f5f1839c19002f4fd032eacc98596c9", "patch": "@@ -1164,14 +1164,11 @@ impl Step for Assemble {\n             // for `-Z gcc-ld=lld`\n             let gcc_ld_dir = libdir_bin.join(\"gcc-ld\");\n             t!(fs::create_dir(&gcc_ld_dir));\n-            for flavor in [\"ld\", \"ld64\"] {\n-                let lld_wrapper_exe = builder.ensure(crate::tool::LldWrapper {\n-                    compiler: build_compiler,\n-                    target: target_compiler.host,\n-                    flavor_feature: flavor,\n-                });\n-                builder.copy(&lld_wrapper_exe, &gcc_ld_dir.join(exe(flavor, target_compiler.host)));\n-            }\n+            let lld_wrapper_exe = builder.ensure(crate::tool::LldWrapper {\n+                compiler: build_compiler,\n+                target: target_compiler.host,\n+            });\n+            builder.copy(&lld_wrapper_exe, &gcc_ld_dir.join(exe(\"ld\", target_compiler.host)));\n         }\n \n         if builder.config.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\")) {"}, {"sha": "cc10d67c551db2da45c32aedc8ca7ffd112f19ab", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2984bf674f5f1839c19002f4fd032eacc98596c9/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984bf674f5f1839c19002f4fd032eacc98596c9/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=2984bf674f5f1839c19002f4fd032eacc98596c9", "patch": "@@ -407,11 +407,8 @@ impl Step for Rustc {\n                 let gcc_lld_src_dir = src_dir.join(\"gcc-ld\");\n                 let gcc_lld_dst_dir = dst_dir.join(\"gcc-ld\");\n                 t!(fs::create_dir(&gcc_lld_dst_dir));\n-                for flavor in [\"ld\", \"ld64\"] {\n-                    let exe_name = exe(flavor, compiler.host);\n-                    builder\n-                        .copy(&gcc_lld_src_dir.join(&exe_name), &gcc_lld_dst_dir.join(&exe_name));\n-                }\n+                let exe_name = exe(\"ld\", compiler.host);\n+                builder.copy(&gcc_lld_src_dir.join(&exe_name), &gcc_lld_dst_dir.join(&exe_name));\n             }\n \n             // Man pages"}, {"sha": "2f4d07d77a51faf3a2400fe76be93c5fe14ff40a", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2984bf674f5f1839c19002f4fd032eacc98596c9/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984bf674f5f1839c19002f4fd032eacc98596c9/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=2984bf674f5f1839c19002f4fd032eacc98596c9", "patch": "@@ -656,7 +656,6 @@ impl Step for Cargo {\n pub struct LldWrapper {\n     pub compiler: Compiler,\n     pub target: TargetSelection,\n-    pub flavor_feature: &'static str,\n }\n \n impl Step for LldWrapper {\n@@ -676,7 +675,7 @@ impl Step for LldWrapper {\n                 path: \"src/tools/lld-wrapper\",\n                 is_optional_tool: false,\n                 source_type: SourceType::InTree,\n-                extra_features: vec![self.flavor_feature.to_owned()],\n+                extra_features: Vec::new(),\n             })\n             .expect(\"expected to build -- essential tool\");\n "}, {"sha": "bf5138b16d5bd8f5615e2caa829a378e7e634d12", "filename": "src/tools/lld-wrapper/Cargo.toml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2984bf674f5f1839c19002f4fd032eacc98596c9/src%2Ftools%2Flld-wrapper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2984bf674f5f1839c19002f4fd032eacc98596c9/src%2Ftools%2Flld-wrapper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2FCargo.toml?ref=2984bf674f5f1839c19002f4fd032eacc98596c9", "patch": "@@ -3,9 +3,3 @@ name = \"lld-wrapper\"\n version = \"0.1.0\"\n edition = \"2021\"\n license = \"MIT OR Apache-2.0\"\n-\n-[dependencies]\n-\n-[features]\n-ld = []\n-ld64 = []\n\\ No newline at end of file"}, {"sha": "90bd24a75e0649d82863c41536a532267e96bac0", "filename": "src/tools/lld-wrapper/src/main.rs", "status": "modified", "additions": 38, "deletions": 57, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/2984bf674f5f1839c19002f4fd032eacc98596c9/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984bf674f5f1839c19002f4fd032eacc98596c9/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs?ref=2984bf674f5f1839c19002f4fd032eacc98596c9", "patch": "@@ -1,5 +1,4 @@\n-//! Script to invoke the bundled rust-lld with the correct flavor. The flavor is selected by\n-//! feature.\n+//! Script to invoke the bundled rust-lld with the correct flavor.\n //!\n //! lld supports multiple command line interfaces. If `-flavor <flavor>` are passed as the first\n //! two arguments the `<flavor>` command line interface is used to process the remaining arguments.\n@@ -8,59 +7,33 @@\n //! In Rust with `-Z gcc-ld=lld` we have gcc or clang invoke rust-lld. Since there is no way to\n //! make gcc/clang pass `-flavor <flavor>` as the first two arguments in the linker invocation\n //! and since Windows does not support symbolic links for files this wrapper is used in place of a\n-//! symbolic link. It execs `../rust-lld -flavor ld` if the feature `ld` is enabled and\n-//! `../rust-lld -flavor ld64` if `ld64` is enabled. On Windows it spawns a `..\\rust-lld.exe`\n+//! symbolic link. It execs `../rust-lld -flavor <flavor>` by propagating the flavor argument\n+//! passed to the wrapper as the first two arguments. On Windows it spawns a `..\\rust-lld.exe`\n //! child process.\n \n-#[cfg(not(any(feature = \"ld\", feature = \"ld64\")))]\n-compile_error!(\"One of the features ld and ld64 must be enabled.\");\n-\n-#[cfg(all(feature = \"ld\", feature = \"ld64\"))]\n-compile_error!(\"Only one of the feature ld or ld64 can be enabled.\");\n-\n-#[cfg(feature = \"ld\")]\n-const FLAVOR: &str = \"ld\";\n-\n-#[cfg(feature = \"ld64\")]\n-const FLAVOR: &str = \"ld64\";\n-\n-use std::env;\n use std::fmt::Display;\n use std::path::{Path, PathBuf};\n-use std::process;\n+use std::{env, process};\n \n-trait ResultExt<T, E> {\n+trait UnwrapOrExitWith<T> {\n     fn unwrap_or_exit_with(self, context: &str) -> T;\n }\n \n-impl<T, E> ResultExt<T, E> for Result<T, E>\n-where\n-    E: Display,\n-{\n+impl<T> UnwrapOrExitWith<T> for Option<T> {\n     fn unwrap_or_exit_with(self, context: &str) -> T {\n-        match self {\n-            Ok(t) => t,\n-            Err(e) => {\n-                eprintln!(\"lld-wrapper: {}: {}\", context, e);\n-                process::exit(1);\n-            }\n-        }\n+        self.unwrap_or_else(|| {\n+            eprintln!(\"lld-wrapper: {}\", context);\n+            process::exit(1);\n+        })\n     }\n }\n \n-trait OptionExt<T> {\n-    fn unwrap_or_exit_with(self, context: &str) -> T;\n-}\n-\n-impl<T> OptionExt<T> for Option<T> {\n+impl<T, E: Display> UnwrapOrExitWith<T> for Result<T, E> {\n     fn unwrap_or_exit_with(self, context: &str) -> T {\n-        match self {\n-            Some(t) => t,\n-            None => {\n-                eprintln!(\"lld-wrapper: {}\", context);\n-                process::exit(1);\n-            }\n-        }\n+        self.unwrap_or_else(|err| {\n+            eprintln!(\"lld-wrapper: {}: {}\", context, err);\n+            process::exit(1);\n+        })\n     }\n }\n \n@@ -81,14 +54,28 @@ fn get_rust_lld_path(current_exe_path: &Path) -> PathBuf {\n }\n \n /// Returns the command for invoking rust-lld with the correct flavor.\n+/// LLD only accepts the flavor argument at the first two arguments, so move it there.\n ///\n /// Exits on error.\n fn get_rust_lld_command(current_exe_path: &Path) -> process::Command {\n     let rust_lld_path = get_rust_lld_path(current_exe_path);\n     let mut command = process::Command::new(rust_lld_path);\n+\n+    let mut flavor = None;\n+    let args = env::args_os()\n+        .skip(1)\n+        .filter(|arg| match arg.to_str().and_then(|s| s.strip_prefix(\"-rustc-lld-flavor=\")) {\n+            Some(suffix) => {\n+                flavor = Some(suffix.to_string());\n+                false\n+            }\n+            None => true,\n+        })\n+        .collect::<Vec<_>>();\n+\n     command.arg(\"-flavor\");\n-    command.arg(FLAVOR);\n-    command.args(env::args_os().skip(1));\n+    command.arg(flavor.unwrap_or_exit_with(\"-rustc-lld-flavor=<flavor> is not passed\"));\n+    command.args(args);\n     command\n }\n \n@@ -101,20 +88,14 @@ fn exec_lld(mut command: process::Command) {\n \n #[cfg(not(unix))]\n fn exec_lld(mut command: process::Command) {\n-    // Windows has no exec(), spawn a child process and wait for it\n+    // Windows has no exec(), spawn a child process and wait for it.\n     let exit_status = command.status().unwrap_or_exit_with(\"error running rust-lld child process\");\n-    if !exit_status.success() {\n-        match exit_status.code() {\n-            Some(code) => {\n-                // return the original lld exit code\n-                process::exit(code)\n-            }\n-            None => {\n-                eprintln!(\"lld-wrapper: rust-lld child process exited with error: {}\", exit_status,);\n-                process::exit(1);\n-            }\n-        }\n-    }\n+    let code = exit_status\n+        .code()\n+        .ok_or(exit_status)\n+        .unwrap_or_exit_with(\"rust-lld child process exited with error\");\n+    // Return the original lld exit code.\n+    process::exit(code);\n }\n \n fn main() {"}]}