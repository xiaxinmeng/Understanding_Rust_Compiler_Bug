{"sha": "8ff18acc8221a0157d94cd714b448b6a596fad40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZjE4YWNjODIyMWEwMTU3ZDk0Y2Q3MTRiNDQ4YjZhNTk2ZmFkNDA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-04T18:37:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-04T18:43:23Z"}, "message": "libsyntax: \"import\" -> \"use\"", "tree": {"sha": "eb5182bca0d5687c5fb0c2e2b70897787a01515c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb5182bca0d5687c5fb0c2e2b70897787a01515c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ff18acc8221a0157d94cd714b448b6a596fad40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff18acc8221a0157d94cd714b448b6a596fad40", "html_url": "https://github.com/rust-lang/rust/commit/8ff18acc8221a0157d94cd714b448b6a596fad40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ff18acc8221a0157d94cd714b448b6a596fad40/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f92cf26594d1ddc9a4ff318b48c3b61ac233813", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f92cf26594d1ddc9a4ff318b48c3b61ac233813", "html_url": "https://github.com/rust-lang/rust/commit/3f92cf26594d1ddc9a4ff318b48c3b61ac233813"}], "stats": {"total": 411, "additions": 203, "deletions": 208}, "files": [{"sha": "083f67947e9d0133b4c06bd2fe3088258bf8ecc1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,7 +1,7 @@\n // The Rust abstract syntax tree.\n \n-import codemap::{span, filename};\n-import std::serialization::{serializer,\n+use codemap::{span, filename};\n+use std::serialization::{serializer,\n                             deserializer,\n                             serialize_Option,\n                             deserialize_Option,\n@@ -17,7 +17,7 @@ import std::serialization::{serializer,\n                             deserialize_str,\n                             serialize_bool,\n                             deserialize_bool};\n-import parse::token;\n+use parse::token;\n \n /* Note #1972 -- spans are serialized but not deserialized */\n fn serialize_span<S>(_s: S, _v: span) {"}, {"sha": "5245494449a377470be115d2a3289463cdeb4c55", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,10 +1,10 @@\n-import std::map;\n-import std::map::hashmap;\n-import ast::*;\n-import print::pprust;\n-import ast_util::{path_to_ident, stmt_id};\n-import diagnostic::span_handler;\n-import parse::token::ident_interner;\n+use std::map;\n+use std::map::hashmap;\n+use ast::*;\n+use print::pprust;\n+use ast_util::{path_to_ident, stmt_id};\n+use diagnostic::span_handler;\n+use parse::token::ident_interner;\n \n enum path_elt {\n     path_mod(ident),"}, {"sha": "6f594cd6d70dc315f23c39fe3e7975bb94f78b7f", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,5 +1,5 @@\n-import codemap::span;\n-import ast::*;\n+use codemap::span;\n+use ast::*;\n \n pure fn spanned<T>(lo: uint, hi: uint, +t: T) -> spanned<T> {\n     respan(mk_sp(lo, hi), t)"}, {"sha": "9dc610e2fb66ee5fb36acb8c89f4fc55d011959c", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,11 +1,11 @@\n // Functions dealing with attributes and meta_items\n \n-import std::map;\n-import std::map::hashmap;\n-import either::Either;\n-import diagnostic::span_handler;\n-import ast_util::{spanned, dummy_spanned};\n-import parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n+use std::map;\n+use std::map::hashmap;\n+use either::Either;\n+use diagnostic::span_handler;\n+use ast_util::{spanned, dummy_spanned};\n+use parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n \n // Constructors\n export mk_name_value_item_str;"}, {"sha": "40e51adc293f735e9adcf7a2acddf33bb669ce2b", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,4 +1,4 @@\n-import dvec::DVec;\n+use dvec::DVec;\n \n export filename;\n export filemap;"}, {"sha": "1b7d6bf79d96b72acde1917efe9468e0a8c55d05", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,6 +1,6 @@\n-import std::term;\n-import io::WriterUtil;\n-import codemap::span;\n+use std::term;\n+use io::WriterUtil;\n+use codemap::span;\n \n export emitter, emit;\n export level, fatal, error, warning, note;"}, {"sha": "bed082e03d483a3ce5423712d7e9c329a37d45b4", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -69,10 +69,10 @@ into the tree.  This is intended to prevent us from inserting the same\n node twice.\n \n */\n-import base::*;\n-import codemap::span;\n-import std::map;\n-import std::map::hashmap;\n+use base::*;\n+use codemap::span;\n+use std::map;\n+use std::map::hashmap;\n \n export expand;\n "}, {"sha": "d4d5d2b3b225612d1acdd60b6bb830f1e7accbe3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,8 +1,8 @@\n-import std::map::hashmap;\n-import parse::parser;\n-import diagnostic::span_handler;\n-import codemap::{codemap, span, expn_info, expanded_from};\n-import std::map::str_hash;\n+use std::map::hashmap;\n+use parse::parser;\n+use diagnostic::span_handler;\n+use codemap::{codemap, span, expn_info, expanded_from};\n+use std::map::str_hash;\n \n // obsolete old-style #macro code:\n //"}, {"sha": "12fbb00e6c604d80b08d6d419f564284d61262cb", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,5 +1,5 @@\n-import codemap::span;\n-import base::ext_ctxt;\n+use codemap::span;\n+use base::ext_ctxt;\n \n fn mk_expr(cx: ext_ctxt, sp: codemap::span, expr: ast::expr_) ->\n     @ast::expr {"}, {"sha": "45e6bf43f4be610b8312c23c8977c19425d1b20f", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,4 +1,4 @@\n-import base::*;\n+use base::*;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {"}, {"sha": "8cecceb2e554e39830ebb247da53c30c4dac5228", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -4,8 +4,8 @@\n  * should all get sucked into either the compiler syntax extension plugin\n  * interface.\n  */\n-import base::*;\n-import build::mk_uniq_str;\n+use base::*;\n+use build::mk_uniq_str;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,"}, {"sha": "54c1f496a2f06d6793f123e4c110ba9b777827e3", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,14 +1,14 @@\n-import std::map::hashmap;\n+use std::map::hashmap;\n \n-import ast::{crate, expr_, expr_mac, mac_invoc, mac_invoc_tt,\n+use ast::{crate, expr_, expr_mac, mac_invoc, mac_invoc_tt,\n              tt_delim, tt_tok, item_mac};\n-import fold::*;\n-import ext::base::*;\n-import ext::qquote::{qq_helper};\n-import parse::{parser, parse_expr_from_source_str, new_parser_from_tt};\n+use fold::*;\n+use ext::base::*;\n+use ext::qquote::{qq_helper};\n+use parse::{parser, parse_expr_from_source_str, new_parser_from_tt};\n \n \n-import codemap::{span, expanded_from};\n+use codemap::{span, expanded_from};\n \n fn expand_expr(exts: hashmap<~str, syntax_extension>, cx: ext_ctxt,\n                e: expr_, s: span, fld: ast_fold,"}, {"sha": "04bb917836582f3d5e348032bc13a1832680eef2", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -5,10 +5,10 @@\n  * should all get sucked into either the standard library extfmt module or the\n  * compiler syntax extension plugin interface.\n  */\n-import extfmt::ct::*;\n-import base::*;\n-import codemap::span;\n-import ext::build::*;\n+use extfmt::ct::*;\n+use base::*;\n+use codemap::span;\n+use ext::build::*;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: ast::mac_arg,"}, {"sha": "86145df5da23bc37e8211dc00d2310359152b239", "filename": "src/libsyntax/ext/ident_to_str.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fident_to_str.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,6 +1,5 @@\n-import base::*;\n-import build::mk_uniq_str;\n-import option;\n+use base::*;\n+use build::mk_uniq_str;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {"}, {"sha": "e87ad446a421987887cecc906ff3681b8bfe9ce9", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,5 +1,5 @@\n-import base::*;\n-import io::WriterUtil;\n+use base::*;\n+use io::WriterUtil;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, tt: ~[ast::token_tree])\n     -> base::mac_result {"}, {"sha": "ad4984c55582ddc774a1cb6150e5cf8b1b35cf6a", "filename": "src/libsyntax/ext/pipes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -33,16 +33,16 @@ FIXME (#3072) - This is still incomplete.\n \n */\n \n-import codemap::span;\n-import ext::base::ext_ctxt;\n-import ast::tt_delim;\n-import parse::lexer::{new_tt_reader, reader};\n-import parse::parser::{parser, SOURCE_FILE};\n-import parse::common::parser_common;\n+use codemap::span;\n+use ext::base::ext_ctxt;\n+use ast::tt_delim;\n+use parse::lexer::{new_tt_reader, reader};\n+use parse::parser::{parser, SOURCE_FILE};\n+use parse::common::parser_common;\n \n-import pipes::parse_proto::proto_parser;\n+use pipes::parse_proto::proto_parser;\n \n-import pipes::proto::{visit, protocol};\n+use pipes::proto::{visit, protocol};\n \n fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident,\n                 tt: ~[ast::token_tree]) -> base::mac_result"}, {"sha": "138d7b755c39f2352934e7adc62356f5a7029efd", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -3,10 +3,10 @@\n // To start with, it will be use dummy spans, but it might someday do\n // something smarter.\n \n-import ast::{ident, node_id};\n-import ast_util::respan;\n-import codemap::span;\n-import ext::base::mk_ctxt;\n+use ast::{ident, node_id};\n+use ast_util::respan;\n+use codemap::span;\n+use ext::base::mk_ctxt;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {"}, {"sha": "5fcc00ef01217639444d64b8f063d3c851840b2c", "filename": "src/libsyntax/ext/pipes/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -19,10 +19,10 @@ that.\n \n */\n \n-import ext::base::ext_ctxt;\n+use ext::base::ext_ctxt;\n \n-import proto::{state, protocol, next_state};\n-import ast_builder::empty_span;\n+use proto::{state, protocol, next_state};\n+use ast_builder::empty_span;\n \n impl ext_ctxt: proto::visitor<(), (), ()>  {\n     fn visit_proto(_proto: protocol,"}, {"sha": "fa0ab0f4c0ba1ab76b816641d09cdb6979694424", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -27,9 +27,9 @@ updating the states using rule (2) until there are no changes.\n \n */\n \n-import std::bitv::{Bitv};\n+use std::bitv::{Bitv};\n \n-import ast_builder::empty_span;\n+use ast_builder::empty_span;\n \n fn analyze(proto: protocol, _cx: ext_ctxt) {\n     debug!(\"initializing colive analysis\");"}, {"sha": "5c15b616b4aef8d36acd31e64762086ac65f24bb", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,9 +1,9 @@\n // Parsing pipes protocols from token trees.\n \n-import parse::parser;\n-import parse::token;\n+use parse::parser;\n+use parse::token;\n \n-import pipec::*;\n+use pipec::*;\n \n trait proto_parser {\n     fn parse_proto(id: ~str) -> protocol;"}, {"sha": "07c766792b5592e2276a7f4e038373d7dba6ccaf", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,19 +1,18 @@\n // A protocol compiler for Rust.\n \n-import to_str::ToStr;\n+use to_str::ToStr;\n \n-import dvec::DVec;\n+use dvec::DVec;\n \n-import ast::ident;\n-import util::interner;\n-import print::pprust;\n-import pprust::{item_to_str, ty_to_str};\n-import ext::base::{mk_ctxt, ext_ctxt};\n-import parse;\n-import parse::*;\n-import proto::*;\n+use ast::ident;\n+use util::interner;\n+use print::pprust;\n+use pprust::{item_to_str, ty_to_str};\n+use ext::base::{mk_ctxt, ext_ctxt};\n+use parse::*;\n+use proto::*;\n \n-import ast_builder::{append_types, path, empty_span};\n+use ast_builder::{append_types, path, empty_span};\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {"}, {"sha": "4e09aa4c9565df73142d3062a6359f0fa217c588", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,7 +1,7 @@\n-import to_str::ToStr;\n-import dvec::DVec;\n+use to_str::ToStr;\n+use dvec::DVec;\n \n-import ast_builder::{path, append_types};\n+use ast_builder::{path, append_types};\n \n enum direction { send, recv }\n "}, {"sha": "7d03eb175515f975c1e3fe54ef8e69053db3f597", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,18 +1,18 @@\n-import ast::{crate, expr_, mac_invoc,\n+use ast::{crate, expr_, mac_invoc,\n                      mac_aq, mac_var};\n-import parse::parser;\n-import parse::parser::parse_from_source_str;\n-import dvec::DVec;\n-import parse::token::ident_interner;\n+use parse::parser;\n+use parse::parser::parse_from_source_str;\n+use dvec::DVec;\n+use parse::token::ident_interner;\n \n-import fold::*;\n-import visit::*;\n-import ext::base::*;\n-import ext::build::*;\n-import print::*;\n-import io::*;\n+use fold::*;\n+use visit::*;\n+use ext::base::*;\n+use ext::build::*;\n+use print::*;\n+use io::*;\n \n-import codemap::span;\n+use codemap::span;\n \n struct gather_item {\n     lo: uint;"}, {"sha": "e1cb1cf48063f9ec5354f622e62e82852a414a2b", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,12 +1,12 @@\n-import codemap::span;\n-import std::map::{hashmap, str_hash, uint_hash};\n-import dvec::DVec;\n+use codemap::span;\n+use std::map::{hashmap, str_hash, uint_hash};\n+use dvec::DVec;\n \n-import base::*;\n+use base::*;\n \n-import fold::*;\n-import ast_util::respan;\n-import ast::{ident, path, ty, blk_, expr, expr_path,\n+use fold::*;\n+use ast_util::respan;\n+use ast::{ident, path, ty, blk_, expr, expr_path,\n              expr_vec, expr_mac, mac_invoc, node_id, expr_index};\n \n export add_new_extension;"}, {"sha": "b6f740603fce8100a565a4f26ae9f78cd55b1dfa", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,8 +1,7 @@\n-import base::*;\n-import ast;\n-import codemap::span;\n-import print::pprust;\n-import build::{mk_base_vec_e,mk_uint,mk_u8,mk_uniq_str};\n+use base::*;\n+use codemap::span;\n+use print::pprust;\n+use build::{mk_base_vec_e,mk_uint,mk_u8,mk_uniq_str};\n \n export expand_line;\n export expand_col;"}, {"sha": "c2d4de1b423c41d966e0d82b430202b2042e9a4b", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,9 +1,9 @@\n-import codemap::span;\n-import ext::base::ext_ctxt;\n-import ast::tt_delim;\n-import parse::lexer::{new_tt_reader, reader};\n-import parse::parser::{parser, SOURCE_FILE};\n-import parse::common::parser_common;\n+use codemap::span;\n+use ext::base::ext_ctxt;\n+use ast::tt_delim;\n+use parse::lexer::{new_tt_reader, reader};\n+use parse::parser::{parser, SOURCE_FILE};\n+use parse::common::parser_common;\n \n fn expand_trace_macros(cx: ext_ctxt, sp: span,\n                        tt: ~[ast::token_tree]) -> base::mac_result"}, {"sha": "22f588f98c5c164fbdc25d46bfde7df0167af790", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,16 +1,16 @@\n // Earley-like parser for macros.\n-import parse::token;\n-import parse::token::{token, EOF, to_str, nonterminal};\n-import parse::lexer::*; //resolve bug?\n+use parse::token;\n+use parse::token::{token, EOF, to_str, nonterminal};\n+use parse::lexer::*; //resolve bug?\n //import parse::lexer::{reader, tt_reader, tt_reader_as_reader};\n-import parse::parser::{parser,SOURCE_FILE};\n+use parse::parser::{parser,SOURCE_FILE};\n //import parse::common::parser_common;\n-import parse::common::*; //resolve bug?\n-import parse::parse_sess;\n-import dvec::DVec;\n-import ast::{matcher, match_tok, match_seq, match_nonterminal, ident};\n-import ast_util::mk_sp;\n-import std::map::{hashmap, uint_hash};\n+use parse::common::*; //resolve bug?\n+use parse::parse_sess;\n+use dvec::DVec;\n+use ast::{matcher, match_tok, match_seq, match_nonterminal, ident};\n+use ast_util::mk_sp;\n+use std::map::{hashmap, uint_hash};\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n only by calling out to the main rust parser for named nonterminals (which it"}, {"sha": "30b5d479f05b459782e4a89d0b26307fd74c3c7d", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,14 +1,14 @@\n-import base::{ext_ctxt, mac_result, mr_expr, mr_def, expr_tt};\n-import codemap::span;\n-import ast::{ident, matcher_, matcher, match_tok,\n+use base::{ext_ctxt, mac_result, mr_expr, mr_def, expr_tt};\n+use codemap::span;\n+use ast::{ident, matcher_, matcher, match_tok,\n              match_nonterminal, match_seq, tt_delim};\n-import parse::lexer::{new_tt_reader, reader};\n-import parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n-import parse::parser::{parser, SOURCE_FILE};\n-import macro_parser::{parse, parse_or_else, success, failure, named_match,\n+use parse::lexer::{new_tt_reader, reader};\n+use parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n+use parse::parser::{parser, SOURCE_FILE};\n+use macro_parser::{parse, parse_or_else, success, failure, named_match,\n                       matched_seq, matched_nonterminal, error};\n-import std::map::hashmap;\n-import parse::token::special_idents;\n+use std::map::hashmap;\n+use parse::token::special_idents;\n \n fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                      arg: ~[ast::token_tree]) -> base::mac_result {"}, {"sha": "01e2328c85a466c347b6c63980939aa8f4293a96", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,10 +1,10 @@\n-import diagnostic::span_handler;\n-import ast::{token_tree, tt_delim, tt_tok, tt_seq, tt_nonterminal,ident};\n-import macro_parser::{named_match, matched_seq, matched_nonterminal};\n-import codemap::span;\n-import parse::token::{EOF, INTERPOLATED, IDENT, token, nt_ident,\n+use diagnostic::span_handler;\n+use ast::{token_tree, tt_delim, tt_tok, tt_seq, tt_nonterminal,ident};\n+use macro_parser::{named_match, matched_seq, matched_nonterminal};\n+use codemap::span;\n+use parse::token::{EOF, INTERPOLATED, IDENT, token, nt_ident,\n                       ident_interner};\n-import std::map::{hashmap, box_str_hash};\n+use std::map::{hashmap, box_str_hash};\n \n export tt_reader,  new_tt_reader, dup_tt_reader, tt_next_token;\n "}, {"sha": "9f5de7f7412a58cdd6c3eceafed290e3cbb3d417", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,5 +1,5 @@\n-import codemap::span;\n-import ast::*;\n+use codemap::span;\n+use ast::*;\n \n export ast_fold_precursor;\n export ast_fold;"}, {"sha": "7190337a5ed4ee550da0de4d35c757f00059291e", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -12,14 +12,14 @@ export parse_expr_from_source_str, parse_item_from_source_str;\n export parse_stmt_from_source_str;\n export parse_from_source_str;\n \n-import parser::parser;\n-import attr::parser_attr;\n-import common::parser_common;\n-import ast::node_id;\n-import util::interner;\n-import diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n-import lexer::{reader, string_reader};\n-import parse::token::{ident_interner, mk_ident_interner};\n+use parser::parser;\n+use attr::parser_attr;\n+use common::parser_common;\n+use ast::node_id;\n+use util::interner;\n+use diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n+use lexer::{reader, string_reader};\n+use parse::token::{ident_interner, mk_ident_interner};\n \n type parse_sess = @{\n     cm: codemap::codemap,"}, {"sha": "9be4909814b13c182386e01ad304ac57ce70edd2", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,6 +1,6 @@\n-import either::{Either, Left, Right};\n-import ast_util::spanned;\n-import common::*; //resolve bug?\n+use either::{Either, Left, Right};\n+use ast_util::spanned;\n+use common::*; //resolve bug?\n \n export attr_or_ext;\n export parser_attr;"}, {"sha": "4838c91f8566550993cc5674e78439c5156d1e1a", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -2,7 +2,7 @@\n   Predicates on exprs and stmts that the pretty-printer and parser use\n  */\n \n-import ast_util::operator_prec;\n+use ast_util::operator_prec;\n \n fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     match e.node {"}, {"sha": "2d0000749361d0a3b1c89282abed2615fd0c0171", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,6 +1,6 @@\n-import io::println;//XXXXXXXXxxx\n-import util::interner;\n-import lexer::{string_reader, bump, is_eof, nextch,\n+use io::println;//XXXXXXXXxxx\n+use util::interner;\n+use lexer::{string_reader, bump, is_eof, nextch,\n                is_whitespace, get_str_from, reader};\n \n export cmnt;"}, {"sha": "6fc05e1f5bda98ef4ea0adacd3de17691d55a146", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,7 +1,7 @@\n-import std::map::{hashmap};\n-import ast_util::spanned;\n-import parser::parser;\n-import lexer::reader;\n+use std::map::{hashmap};\n+use ast_util::spanned;\n+use parser::parser;\n+use lexer::reader;\n \n type seq_sep = {\n     sep: Option<token::token>,"}, {"sha": "526b5101d34ef1c0c0651d905a167543a727db03", "filename": "src/libsyntax/parse/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Feval.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,5 +1,5 @@\n-import parser::{parser, SOURCE_FILE};\n-import attr::parser_attr;\n+use parser::{parser, SOURCE_FILE};\n+use attr::parser_attr;\n \n export eval_crate_directives_to_mod;\n "}, {"sha": "e4c5d233867e67ea7ab8302196d4a7523282f155", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,6 +1,6 @@\n-import diagnostic::span_handler;\n-import codemap::span;\n-import ext::tt::transcribe::{tt_reader,  new_tt_reader, dup_tt_reader,\n+use diagnostic::span_handler;\n+use codemap::span;\n+use ext::tt::transcribe::{tt_reader,  new_tt_reader, dup_tt_reader,\n                              tt_next_token};\n \n export reader, string_reader, new_string_reader, is_whitespace;"}, {"sha": "60cee541965b8e97a48a43e63fb82e693f8e797b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,21 +1,21 @@\n-import print::pprust::expr_to_str;\n+use print::pprust::expr_to_str;\n \n-import result::Result;\n-import either::{Either, Left, Right};\n-import std::map::{hashmap, str_hash};\n-import token::{can_begin_expr, is_ident, is_ident_or_path, is_plain_ident,\n+use result::Result;\n+use either::{Either, Left, Right};\n+use std::map::{hashmap, str_hash};\n+use token::{can_begin_expr, is_ident, is_ident_or_path, is_plain_ident,\n                INTERPOLATED};\n-import codemap::{span,fss_none};\n-import util::interner::interner;\n-import ast_util::{spanned, respan, mk_sp, ident_to_path, operator_prec};\n-import lexer::reader;\n-import prec::{as_prec, token_to_binop};\n-import attr::parser_attr;\n-import common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed,\n+use codemap::{span,fss_none};\n+use util::interner::interner;\n+use ast_util::{spanned, respan, mk_sp, ident_to_path, operator_prec};\n+use lexer::reader;\n+use prec::{as_prec, token_to_binop};\n+use attr::parser_attr;\n+use common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed,\n                 seq_sep_none, token_to_str};\n-import dvec::DVec;\n-import vec::{push};\n-import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n+use dvec::DVec;\n+use vec::{push};\n+use ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              bind_by_ref, bind_by_implicit_ref, bind_by_value, bind_by_move,\n              bitand, bitor, bitxor, blk, blk_check_mode, bound_const,\n              bound_copy, bound_send, bound_trait, bound_owned, box, by_copy,\n@@ -69,7 +69,7 @@ export SOURCE_FILE;\n // defined in `parse` Fixing this will be easier when we have export\n // decls on individual items -- then parse can export this publicly, and\n // everything else crate-visibly.\n-import parse_from_source_str;\n+use parse::parse_from_source_str;\n export parse_from_source_str;\n \n export item_or_view_item, iovi_none, iovi_view_item, iovi_item;"}, {"sha": "668301db6201e3d61bf917ae33794d5eeb03560b", "filename": "src/libsyntax/parse/prec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fprec.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -2,9 +2,9 @@ export as_prec;\n export unop_prec;\n export token_to_binop;\n \n-import token::*;\n-import token::token;\n-import ast::*;\n+use token::*;\n+use token::token;\n+use ast::*;\n \n /// Unary operators have higher precedence than binary\n const unop_prec: uint = 100u;"}, {"sha": "5c71aaf2d297ae2bcbbd36b6a621f4e37b0d4cee", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,7 +1,7 @@\n-import util::interner;\n-import util::interner::interner;\n-import std::map::{hashmap, str_hash};\n-import std::serialization::{serializer,\n+use util::interner;\n+use util::interner::interner;\n+use std::map::{hashmap, str_hash};\n+use std::serialization::{serializer,\n                             deserializer,\n                             serialize_uint,\n                             deserialize_uint,"}, {"sha": "3c55b7aaf82cc2ddd533ea56c358105a2d9bcefc", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,5 +1,5 @@\n-import io::WriterUtil;\n-import dvec::DVec;\n+use io::WriterUtil;\n+use dvec::DVec;\n \n /*\n  * This pretty-printer is a direct reimplementation of Philip Karlton's"}, {"sha": "4e227bea5ccfe7fc5bd277f0fcbbf7cd3a88378f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,14 +1,12 @@\n-import parse::{comments, lexer, token};\n-import codemap::codemap;\n-import pp::{break_offset, word, printer,\n-            space, zerobreak, hardbreak, breaks, consistent,\n-            inconsistent, eof};\n-import diagnostic;\n-import ast::{required, provided};\n-import ast_util::{operator_prec};\n-import dvec::DVec;\n-import parse::classify::*;\n-import parse::token::ident_interner;\n+use parse::{comments, lexer, token};\n+use codemap::codemap;\n+use pp::{break_offset, word, printer, space, zerobreak, hardbreak, breaks};\n+use pp::{consistent, inconsistent, eof};\n+use ast::{required, provided};\n+use ast_util::{operator_prec};\n+use dvec::DVec;\n+use parse::classify::*;\n+use parse::token::ident_interner;\n \n // The ps is stored here to prevent recursive type.\n enum ann_node {"}, {"sha": "9a52d6088870a7f7cc7ef2406f4c0e04330c48f2", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,9 +1,9 @@\n // An \"interner\" is a data structure that associates values with uint tags and\n // allows bidirectional lookup; i.e. given a value, one can easily find the\n // type, and vice versa.\n-import std::map;\n-import std::map::{hashmap, hashfn, eqfn};\n-import dvec::DVec;\n+use std::map;\n+use std::map::{hashmap, hashfn, eqfn};\n+use dvec::DVec;\n \n type hash_interner<T: const> =\n     {map: hashmap<T, uint>,"}, {"sha": "410108bb8ce89f177daa6a21bb6f2844fdcf1ede", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff18acc8221a0157d94cd714b448b6a596fad40/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=8ff18acc8221a0157d94cd714b448b6a596fad40", "patch": "@@ -1,6 +1,6 @@\n \n-import ast::*;\n-import codemap::span;\n+use ast::*;\n+use codemap::span;\n \n // Context-passing AST walker. Each overridden visit method has full control\n // over what happens with its node, it can do its own traversal of the node's"}]}