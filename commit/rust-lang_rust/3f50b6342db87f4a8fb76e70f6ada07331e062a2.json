{"sha": "3f50b6342db87f4a8fb76e70f6ada07331e062a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNTBiNjM0MmRiODdmNGE4ZmI3NmU3MGY2YWRhMDczMzFlMDYyYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-05T15:13:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-05T15:13:32Z"}, "message": "Auto merge of #36200 - mattico:fix-llvm-linkage, r=arielb1\n\nFix incorrect LLVM Linkage enum\n\nFollowup of #33994 to actually work.\n\nThe `Linkage` enum in librustc_llvm got out of sync with the version in LLVM and it caused two variants of the `#[linkage=\"\"]` attribute to break.\n\nThis adds the functions `LLVMRustGetLinkage` and `LLVMRustSetLinkage` which convert between the Rust Linkage enum and the LLVM one, which should stop this from breaking every time LLVM changes it.\n\nPossible remaining concerns:\n\n1. There could be a codegen test to make sure that the attributes are applied correctly (I don't know how to do this).\n2. ~~The test does not exercise the `appending` linkage. I can't figure out how to make a global static raw pointer to an array. This might not even be possible? If not we should probably remove appending linkage as its unusable in rust.~~ Appending linkage is not 'emittable' anyway.\n3. The test only runs on Linux.\n\nFixes #33992\n\nr? @alexcrichton", "tree": {"sha": "953fd9d36fcf4b9b8fbe19d1be1b4de4285b88a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/953fd9d36fcf4b9b8fbe19d1be1b4de4285b88a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f50b6342db87f4a8fb76e70f6ada07331e062a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f50b6342db87f4a8fb76e70f6ada07331e062a2", "html_url": "https://github.com/rust-lang/rust/commit/3f50b6342db87f4a8fb76e70f6ada07331e062a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f50b6342db87f4a8fb76e70f6ada07331e062a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58dc448f8c29d0262f2cde76a9d21343921b23fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/58dc448f8c29d0262f2cde76a9d21343921b23fd", "html_url": "https://github.com/rust-lang/rust/commit/58dc448f8c29d0262f2cde76a9d21343921b23fd"}, {"sha": "b9a8c1a06300c4d042b5455d83cacd689bad6283", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9a8c1a06300c4d042b5455d83cacd689bad6283", "html_url": "https://github.com/rust-lang/rust/commit/b9a8c1a06300c4d042b5455d83cacd689bad6283"}], "stats": {"total": 246, "additions": 180, "deletions": 66}, "files": [{"sha": "50c68d5e75eef18602b86d622119474339ade5a8", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=3f50b6342db87f4a8fb76e70f6ada07331e062a2", "patch": "@@ -47,26 +47,21 @@ pub enum CallConv {\n     X86_VectorCall = 80\n }\n \n-/// LLVMLinkage\n-///\n-/// This enum omits the obsolete (and no-op) linkage types DLLImportLinkage,\n-/// DLLExportLinkage, GhostLinkage and LinkOnceODRAutoHideLinkage.\n-/// LinkerPrivateLinkage and LinkerPrivateWeakLinkage are not included either;\n-/// they've been removed in upstream LLVM commit r203866.\n+/// LLVMRustLinkage\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n #[repr(C)]\n pub enum Linkage {\n     ExternalLinkage = 0,\n     AvailableExternallyLinkage = 1,\n     LinkOnceAnyLinkage = 2,\n     LinkOnceODRLinkage = 3,\n-    WeakAnyLinkage = 5,\n-    WeakODRLinkage = 6,\n-    AppendingLinkage = 7,\n-    InternalLinkage = 8,\n-    PrivateLinkage = 9,\n-    ExternalWeakLinkage = 12,\n-    CommonLinkage = 14,\n+    WeakAnyLinkage = 4,\n+    WeakODRLinkage = 5,\n+    AppendingLinkage = 6,\n+    InternalLinkage = 7,\n+    PrivateLinkage = 8,\n+    ExternalWeakLinkage = 9,\n+    CommonLinkage = 10,\n }\n \n /// LLVMDiagnosticSeverity\n@@ -253,8 +248,7 @@ pub enum FileType {\n     ObjectFile,\n }\n \n-/// Enum pinned in LLVMContext, used in\n-/// LLVMSetMetadata so ABI-stable.\n+/// LLVMMetadataType\n #[derive(Copy, Clone)]\n #[repr(C)]\n pub enum MetadataType {\n@@ -821,8 +815,8 @@ extern {\n     /* Operations on global variables, functions, and aliases (globals) */\n     pub fn LLVMGetGlobalParent(Global: ValueRef) -> ModuleRef;\n     pub fn LLVMIsDeclaration(Global: ValueRef) -> Bool;\n-    pub fn LLVMGetLinkage(Global: ValueRef) -> c_uint;\n-    pub fn LLVMSetLinkage(Global: ValueRef, Link: Linkage);\n+    pub fn LLVMRustGetLinkage(Global: ValueRef) -> Linkage;\n+    pub fn LLVMRustSetLinkage(Global: ValueRef, RustLinkage: Linkage);\n     pub fn LLVMGetSection(Global: ValueRef) -> *const c_char;\n     pub fn LLVMSetSection(Global: ValueRef, Section: *const c_char);\n     pub fn LLVMGetVisibility(Global: ValueRef) -> c_uint;"}, {"sha": "ec8ab33c4ca54878091ba5e1544f1779ffa75232", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=3f50b6342db87f4a8fb76e70f6ada07331e062a2", "patch": "@@ -1198,17 +1198,17 @@ pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n     // ghost, dllimport, dllexport and linkonce_odr_autohide are not supported\n     // and don't have to be, LLVM treats them as no-ops.\n     match name {\n-        \"appending\" => Some(llvm::AppendingLinkage),\n-        \"available_externally\" => Some(llvm::AvailableExternallyLinkage),\n-        \"common\" => Some(llvm::CommonLinkage),\n-        \"extern_weak\" => Some(llvm::ExternalWeakLinkage),\n-        \"external\" => Some(llvm::ExternalLinkage),\n-        \"internal\" => Some(llvm::InternalLinkage),\n-        \"linkonce\" => Some(llvm::LinkOnceAnyLinkage),\n-        \"linkonce_odr\" => Some(llvm::LinkOnceODRLinkage),\n-        \"private\" => Some(llvm::PrivateLinkage),\n-        \"weak\" => Some(llvm::WeakAnyLinkage),\n-        \"weak_odr\" => Some(llvm::WeakODRLinkage),\n+        \"appending\" => Some(llvm::Linkage::AppendingLinkage),\n+        \"available_externally\" => Some(llvm::Linkage::AvailableExternallyLinkage),\n+        \"common\" => Some(llvm::Linkage::CommonLinkage),\n+        \"extern_weak\" => Some(llvm::Linkage::ExternalWeakLinkage),\n+        \"external\" => Some(llvm::Linkage::ExternalLinkage),\n+        \"internal\" => Some(llvm::Linkage::InternalLinkage),\n+        \"linkonce\" => Some(llvm::Linkage::LinkOnceAnyLinkage),\n+        \"linkonce_odr\" => Some(llvm::Linkage::LinkOnceODRLinkage),\n+        \"private\" => Some(llvm::Linkage::PrivateLinkage),\n+        \"weak\" => Some(llvm::Linkage::WeakAnyLinkage),\n+        \"weak_odr\" => Some(llvm::Linkage::WeakODRLinkage),\n         _ => None,\n     }\n }\n@@ -1401,10 +1401,10 @@ fn internalize_symbols<'a, 'tcx>(sess: &Session,\n         // are referenced via a declaration in some other codegen unit.\n         for ccx in ccxs.iter_need_trans() {\n             for val in iter_globals(ccx.llmod()).chain(iter_functions(ccx.llmod())) {\n-                let linkage = llvm::LLVMGetLinkage(val);\n+                let linkage = llvm::LLVMRustGetLinkage(val);\n                 // We only care about external declarations (not definitions)\n                 // and available_externally definitions.\n-                let is_available_externally = linkage == llvm::AvailableExternallyLinkage as c_uint;\n+                let is_available_externally = linkage == llvm::Linkage::AvailableExternallyLinkage;\n                 let is_decl = llvm::LLVMIsDeclaration(val) != 0;\n \n                 if is_decl || is_available_externally {\n@@ -1446,11 +1446,11 @@ fn internalize_symbols<'a, 'tcx>(sess: &Session,\n         // then give it internal linkage.\n         for ccx in ccxs.iter_need_trans() {\n             for val in iter_globals(ccx.llmod()).chain(iter_functions(ccx.llmod())) {\n-                let linkage = llvm::LLVMGetLinkage(val);\n+                let linkage = llvm::LLVMRustGetLinkage(val);\n \n-                let is_externally_visible = (linkage == llvm::ExternalLinkage as c_uint) ||\n-                                            (linkage == llvm::LinkOnceODRLinkage as c_uint) ||\n-                                            (linkage == llvm::WeakODRLinkage as c_uint);\n+                let is_externally_visible = (linkage == llvm::Linkage::ExternalLinkage) ||\n+                                            (linkage == llvm::Linkage::LinkOnceODRLinkage) ||\n+                                            (linkage == llvm::Linkage::WeakODRLinkage);\n                 let is_definition = llvm::LLVMIsDeclaration(val) == 0;\n \n                 // If this is a definition (as opposed to just a declaration)\n@@ -1465,7 +1465,7 @@ fn internalize_symbols<'a, 'tcx>(sess: &Session,\n                     let has_fixed_linkage = linkage_fixed_explicitly.contains(&name_cow);\n \n                     if !is_referenced_somewhere && !is_reachable && !has_fixed_linkage {\n-                        llvm::LLVMSetLinkage(val, llvm::InternalLinkage);\n+                        llvm::LLVMRustSetLinkage(val, llvm::Linkage::InternalLinkage);\n                         llvm::LLVMSetDLLStorageClass(val,\n                                                      llvm::DLLStorageClass::Default);\n                         llvm::UnsetComdat(val);\n@@ -1495,8 +1495,8 @@ fn create_imps(cx: &CrateContextList) {\n         for ccx in cx.iter_need_trans() {\n             let exported: Vec<_> = iter_globals(ccx.llmod())\n                                        .filter(|&val| {\n-                                           llvm::LLVMGetLinkage(val) ==\n-                                           llvm::ExternalLinkage as c_uint &&\n+                                           llvm::LLVMRustGetLinkage(val) ==\n+                                           llvm::Linkage::ExternalLinkage &&\n                                            llvm::LLVMIsDeclaration(val) == 0\n                                        })\n                                        .collect();\n@@ -1512,7 +1512,7 @@ fn create_imps(cx: &CrateContextList) {\n                                               imp_name.as_ptr() as *const _);\n                 let init = llvm::LLVMConstBitCast(val, i8p_ty.to_ref());\n                 llvm::LLVMSetInitializer(imp, init);\n-                llvm::LLVMSetLinkage(imp, llvm::ExternalLinkage);\n+                llvm::LLVMRustSetLinkage(imp, llvm::Linkage::ExternalLinkage);\n             }\n         }\n     }\n@@ -1937,17 +1937,17 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n                     output.push_str(&cgu_name[..]);\n \n                     let linkage_abbrev = match linkage {\n-                        llvm::ExternalLinkage => \"External\",\n-                        llvm::AvailableExternallyLinkage => \"Available\",\n-                        llvm::LinkOnceAnyLinkage => \"OnceAny\",\n-                        llvm::LinkOnceODRLinkage => \"OnceODR\",\n-                        llvm::WeakAnyLinkage => \"WeakAny\",\n-                        llvm::WeakODRLinkage => \"WeakODR\",\n-                        llvm::AppendingLinkage => \"Appending\",\n-                        llvm::InternalLinkage => \"Internal\",\n-                        llvm::PrivateLinkage => \"Private\",\n-                        llvm::ExternalWeakLinkage => \"ExternalWeak\",\n-                        llvm::CommonLinkage => \"Common\",\n+                        llvm::Linkage::ExternalLinkage => \"External\",\n+                        llvm::Linkage::AvailableExternallyLinkage => \"Available\",\n+                        llvm::Linkage::LinkOnceAnyLinkage => \"OnceAny\",\n+                        llvm::Linkage::LinkOnceODRLinkage => \"OnceODR\",\n+                        llvm::Linkage::WeakAnyLinkage => \"WeakAny\",\n+                        llvm::Linkage::WeakODRLinkage => \"WeakODR\",\n+                        llvm::Linkage::AppendingLinkage => \"Appending\",\n+                        llvm::Linkage::InternalLinkage => \"Internal\",\n+                        llvm::Linkage::PrivateLinkage => \"Private\",\n+                        llvm::Linkage::ExternalWeakLinkage => \"ExternalWeak\",\n+                        llvm::Linkage::CommonLinkage => \"Common\",\n                     };\n \n                     output.push_str(\"[\");"}, {"sha": "9785ee24557938877b4dfc03c23e865ab7aa1eb7", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=3f50b6342db87f4a8fb76e70f6ada07331e062a2", "patch": "@@ -472,7 +472,7 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             // FIXME(eddyb) Doubt all extern fn should allow unwinding.\n             attributes::unwind(llfn, true);\n             unsafe {\n-                llvm::LLVMSetLinkage(llfn, llvm::ExternalLinkage);\n+                llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::ExternalLinkage);\n             }\n         }\n "}, {"sha": "83882c27e8e7b6191ea2b77117a825fbfa9a771c", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=3f50b6342db87f4a8fb76e70f6ada07331e062a2", "patch": "@@ -110,10 +110,10 @@ pub fn trans_closure_body_via_mir<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n         unsafe {\n             if ccx.sess().target.target.options.allows_weak_linkage {\n-                llvm::LLVMSetLinkage(llfn, llvm::WeakODRLinkage);\n+                llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::WeakODRLinkage);\n                 llvm::SetUniqueComdat(ccx.llmod(), llfn);\n             } else {\n-                llvm::LLVMSetLinkage(llfn, llvm::InternalLinkage);\n+                llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::InternalLinkage);\n             }\n         }\n "}, {"sha": "bd98eee8869b17f957d67218f061d58928cefb6e", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=3f50b6342db87f4a8fb76e70f6ada07331e062a2", "patch": "@@ -817,7 +817,7 @@ pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> Va\n         });\n         llvm::LLVMSetInitializer(g, sc);\n         llvm::LLVMSetGlobalConstant(g, True);\n-        llvm::LLVMSetLinkage(g, llvm::InternalLinkage);\n+        llvm::LLVMRustSetLinkage(g, llvm::Linkage::InternalLinkage);\n \n         cx.const_cstr_cache().borrow_mut().insert(s, g);\n         g"}, {"sha": "15f7132e52d2f66b8e8dd18f39268dcfca58152d", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=3f50b6342db87f4a8fb76e70f6ada07331e062a2", "patch": "@@ -11,7 +11,7 @@\n \n use llvm;\n use llvm::{SetUnnamedAddr};\n-use llvm::{InternalLinkage, ValueRef, True};\n+use llvm::{ValueRef, True};\n use rustc_const_eval::ConstEvalErr;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map as hir_map;\n@@ -53,7 +53,7 @@ pub fn addr_of_mut(ccx: &CrateContext,\n         });\n         llvm::LLVMSetInitializer(gv, cv);\n         llvm::LLVMSetAlignment(gv, align);\n-        llvm::LLVMSetLinkage(gv, InternalLinkage);\n+        llvm::LLVMRustSetLinkage(gv, llvm::Linkage::InternalLinkage);\n         SetUnnamedAddr(gv, true);\n         gv\n     }\n@@ -142,7 +142,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n                     unsafe {\n                         // Declare a symbol `foo` with the desired linkage.\n                         let g1 = declare::declare_global(ccx, &sym, llty2);\n-                        llvm::LLVMSetLinkage(g1, linkage);\n+                        llvm::LLVMRustSetLinkage(g1, linkage);\n \n                         // Declare an internal global `extern_with_linkage_foo` which\n                         // is initialized with the address of `foo`.  If `foo` is\n@@ -156,7 +156,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n                             ccx.sess().span_fatal(span,\n                                 &format!(\"symbol `{}` is already defined\", &sym))\n                         });\n-                        llvm::LLVMSetLinkage(g2, llvm::InternalLinkage);\n+                        llvm::LLVMRustSetLinkage(g2, llvm::Linkage::InternalLinkage);\n                         llvm::LLVMSetInitializer(g2, g1);\n                         g2\n                     }"}, {"sha": "8f937d3fe25cbd4e6716b22e0c3a9c4baa28bb1b", "filename": "src/librustc_trans/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs?ref=3f50b6342db87f4a8fb76e70f6ada07331e062a2", "patch": "@@ -77,7 +77,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global(ccx: &CrateContext)\n             llvm::LLVMSetInitializer(section_var, C_bytes(ccx, section_contents));\n             llvm::LLVMSetGlobalConstant(section_var, llvm::True);\n             llvm::LLVMSetUnnamedAddr(section_var, llvm::True);\n-            llvm::LLVMSetLinkage(section_var, llvm::Linkage::LinkOnceODRLinkage);\n+            llvm::LLVMRustSetLinkage(section_var, llvm::Linkage::LinkOnceODRLinkage);\n             // This should make sure that the whole section is not larger than\n             // the string it contains. Otherwise we get a warning from GDB.\n             llvm::LLVMSetAlignment(section_var, 1);"}, {"sha": "0c1156a98743efba996874a151d63979a186ecf4", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=3f50b6342db87f4a8fb76e70f6ada07331e062a2", "patch": "@@ -164,7 +164,7 @@ pub fn define_internal_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                     name: &str,\n                                     fn_type: ty::Ty<'tcx>) -> ValueRef {\n     let llfn = define_fn(ccx, name, fn_type);\n-    unsafe { llvm::LLVMSetLinkage(llfn, llvm::InternalLinkage) };\n+    unsafe { llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::InternalLinkage) };\n     llfn\n }\n "}, {"sha": "e078d46274d3ede579e0fb937e4b4ea38668837e", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=3f50b6342db87f4a8fb76e70f6ada07331e062a2", "patch": "@@ -160,7 +160,7 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                 &format!(\"symbol `{}` is already defined\", symbol_name))\n         });\n \n-        unsafe { llvm::LLVMSetLinkage(g, linkage) };\n+        unsafe { llvm::LLVMRustSetLinkage(g, linkage) };\n \n         let instance = Instance::mono(ccx.shared(), def_id);\n         ccx.instances().borrow_mut().insert(instance, g);\n@@ -180,10 +180,10 @@ impl<'a, 'tcx> TransItem<'tcx> {\n \n         let attrs = ccx.tcx().get_attrs(instance.def);\n         let lldecl = declare::declare_fn(ccx, symbol_name, mono_ty);\n-        unsafe { llvm::LLVMSetLinkage(lldecl, linkage) };\n+        unsafe { llvm::LLVMRustSetLinkage(lldecl, linkage) };\n         base::set_link_section(ccx, lldecl, &attrs);\n-        if linkage == llvm::LinkOnceODRLinkage ||\n-            linkage == llvm::WeakODRLinkage {\n+        if linkage == llvm::Linkage::LinkOnceODRLinkage ||\n+            linkage == llvm::Linkage::WeakODRLinkage {\n             llvm::SetUniqueComdat(ccx.llmod(), lldecl);\n         }\n \n@@ -214,9 +214,9 @@ impl<'a, 'tcx> TransItem<'tcx> {\n \n         assert!(declare::get_defined_value(ccx, symbol_name).is_none());\n         let llfn = declare::declare_cfn(ccx, symbol_name, llfnty);\n-        unsafe { llvm::LLVMSetLinkage(llfn, linkage) };\n-        if linkage == llvm::LinkOnceODRLinkage ||\n-           linkage == llvm::WeakODRLinkage {\n+        unsafe { llvm::LLVMRustSetLinkage(llfn, linkage) };\n+        if linkage == llvm::Linkage::LinkOnceODRLinkage ||\n+           linkage == llvm::Linkage::WeakODRLinkage {\n             llvm::SetUniqueComdat(ccx.llmod(), llfn);\n         }\n         attributes::set_frame_pointer_elimination(ccx, llfn);"}, {"sha": "124eb1eba4f7b9f694e40c3d911bcb7a7fd2ad81", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=3f50b6342db87f4a8fb76e70f6ada07331e062a2", "patch": "@@ -1232,3 +1232,83 @@ extern \"C\" void LLVMRustUnsetComdat(LLVMValueRef V) {\n     GlobalObject *GV = unwrap<GlobalObject>(V);\n     GV->setComdat(nullptr);\n }\n+\n+enum class LLVMRustLinkage {\n+    ExternalLinkage = 0,\n+    AvailableExternallyLinkage = 1,\n+    LinkOnceAnyLinkage = 2,\n+    LinkOnceODRLinkage = 3,\n+    WeakAnyLinkage = 4,\n+    WeakODRLinkage = 5,\n+    AppendingLinkage = 6,\n+    InternalLinkage = 7,\n+    PrivateLinkage = 8,\n+    ExternalWeakLinkage = 9,\n+    CommonLinkage = 10,\n+};\n+\n+static LLVMRustLinkage to_rust(LLVMLinkage linkage) {\n+    switch (linkage) {\n+        case LLVMExternalLinkage:\n+            return LLVMRustLinkage::ExternalLinkage;\n+        case LLVMAvailableExternallyLinkage:\n+            return LLVMRustLinkage::AvailableExternallyLinkage;\n+        case LLVMLinkOnceAnyLinkage:\n+            return LLVMRustLinkage::LinkOnceAnyLinkage;\n+        case LLVMLinkOnceODRLinkage:\n+            return LLVMRustLinkage::LinkOnceODRLinkage;\n+        case LLVMWeakAnyLinkage:\n+            return LLVMRustLinkage::WeakAnyLinkage;\n+        case LLVMWeakODRLinkage:\n+            return LLVMRustLinkage::WeakODRLinkage;\n+        case LLVMAppendingLinkage:\n+            return LLVMRustLinkage::AppendingLinkage;\n+        case LLVMInternalLinkage:\n+            return LLVMRustLinkage::InternalLinkage;\n+        case LLVMPrivateLinkage:\n+            return LLVMRustLinkage::PrivateLinkage;\n+        case LLVMExternalWeakLinkage:\n+            return LLVMRustLinkage::ExternalWeakLinkage;\n+        case LLVMCommonLinkage:\n+            return LLVMRustLinkage::CommonLinkage;\n+        default:\n+            llvm_unreachable(\"Invalid LLVMRustLinkage value!\");\n+    }\n+}\n+\n+static LLVMLinkage from_rust(LLVMRustLinkage linkage) {\n+    switch (linkage) {\n+        case LLVMRustLinkage::ExternalLinkage:\n+            return LLVMExternalLinkage;\n+        case LLVMRustLinkage::AvailableExternallyLinkage:\n+            return LLVMAvailableExternallyLinkage;\n+        case LLVMRustLinkage::LinkOnceAnyLinkage:\n+            return LLVMLinkOnceAnyLinkage;\n+        case LLVMRustLinkage::LinkOnceODRLinkage:\n+            return LLVMLinkOnceODRLinkage;\n+        case LLVMRustLinkage::WeakAnyLinkage:\n+            return LLVMWeakAnyLinkage;\n+        case LLVMRustLinkage::WeakODRLinkage:\n+            return LLVMWeakODRLinkage;\n+        case LLVMRustLinkage::AppendingLinkage:\n+            return LLVMAppendingLinkage;\n+        case LLVMRustLinkage::InternalLinkage:\n+            return LLVMInternalLinkage;\n+        case LLVMRustLinkage::PrivateLinkage:\n+            return LLVMPrivateLinkage;\n+        case LLVMRustLinkage::ExternalWeakLinkage:\n+            return LLVMExternalWeakLinkage;\n+        case LLVMRustLinkage::CommonLinkage:\n+            return LLVMCommonLinkage;\n+        default:\n+            llvm_unreachable(\"Invalid LLVMRustLinkage value!\");\n+    } \n+}\n+\n+extern \"C\" LLVMRustLinkage LLVMRustGetLinkage(LLVMValueRef V) {\n+    return to_rust(LLVMGetLinkage(V));\n+}\n+\n+extern \"C\" void LLVMRustSetLinkage(LLVMValueRef V, LLVMRustLinkage RustLinkage) {\n+    LLVMSetLinkage(V, from_rust(RustLinkage));\n+}"}, {"sha": "5729469f69754d26fb4d8741911581648814ba98", "filename": "src/test/run-pass/issue-33992.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Ftest%2Frun-pass%2Fissue-33992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50b6342db87f4a8fb76e70f6ada07331e062a2/src%2Ftest%2Frun-pass%2Fissue-33992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33992.rs?ref=3f50b6342db87f4a8fb76e70f6ada07331e062a2", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-windows\n+// ignore-macos\n+\n+#![feature(linkage)]\n+\n+#[linkage = \"common\"]\n+pub static mut TEST1: u32 = 0u32;\n+\n+#[linkage = \"external\"]\n+pub static TEST2: bool = true;\n+\n+#[linkage = \"internal\"]\n+pub static TEST3: bool = true;\n+\n+#[linkage = \"linkonce\"]\n+pub static TEST4: bool = true;\n+\n+#[linkage = \"linkonce_odr\"]\n+pub static TEST5: bool = true;\n+\n+#[linkage = \"private\"]\n+pub static TEST6: bool = true;\n+\n+#[linkage = \"weak\"]\n+pub static TEST7: bool = true;\n+\n+#[linkage = \"weak_odr\"]\n+pub static TEST8: bool = true;\n+\n+fn main() {}\n\\ No newline at end of file"}]}