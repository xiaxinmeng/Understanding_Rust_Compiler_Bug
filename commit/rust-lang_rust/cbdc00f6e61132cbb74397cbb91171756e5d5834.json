{"sha": "cbdc00f6e61132cbb74397cbb91171756e5d5834", "node_id": "C_kwDOAAsO6NoAKGNiZGMwMGY2ZTYxMTMyY2JiNzQzOTdjYmI5MTE3MTc1NmU1ZDU4MzQ", "commit": {"author": {"name": "Krasimir Georgiev", "email": "krasimir@google.com", "date": "2022-12-11T09:14:50Z"}, "committer": {"name": "Krasimir Georgiev", "email": "krasimir@google.com", "date": "2022-12-11T09:14:50Z"}, "message": "llvm-wrapper: adapt for LLVM API changes\n\nThis is a follow-up of\nhttps://github.com/rust-lang/rust/commit/75aec4703dea7ef8e13924ccfa3a3d2e8c5c7cff.\nThere, I updated the wrapper to only include llvm/ADT/Optional.h for\nLLVM version below 16. But I missed updating some of the None references.\n\nFound by our experimental rust + llvm at HEAD bot:\nhttps://buildkite.com/llvm-project/rust-llvm-integrate-prototype/builds/15587#0185006b-e0af-49e5-8b06-280ed125ff0d/200-539", "tree": {"sha": "64573df1b948488ac5d0b0422b7126946f8d60f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64573df1b948488ac5d0b0422b7126946f8d60f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbdc00f6e61132cbb74397cbb91171756e5d5834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdc00f6e61132cbb74397cbb91171756e5d5834", "html_url": "https://github.com/rust-lang/rust/commit/cbdc00f6e61132cbb74397cbb91171756e5d5834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbdc00f6e61132cbb74397cbb91171756e5d5834/comments", "author": {"login": "krasimirgg", "id": 29306214, "node_id": "MDQ6VXNlcjI5MzA2MjE0", "avatar_url": "https://avatars.githubusercontent.com/u/29306214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krasimirgg", "html_url": "https://github.com/krasimirgg", "followers_url": "https://api.github.com/users/krasimirgg/followers", "following_url": "https://api.github.com/users/krasimirgg/following{/other_user}", "gists_url": "https://api.github.com/users/krasimirgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/krasimirgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krasimirgg/subscriptions", "organizations_url": "https://api.github.com/users/krasimirgg/orgs", "repos_url": "https://api.github.com/users/krasimirgg/repos", "events_url": "https://api.github.com/users/krasimirgg/events{/privacy}", "received_events_url": "https://api.github.com/users/krasimirgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krasimirgg", "id": 29306214, "node_id": "MDQ6VXNlcjI5MzA2MjE0", "avatar_url": "https://avatars.githubusercontent.com/u/29306214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krasimirgg", "html_url": "https://github.com/krasimirgg", "followers_url": "https://api.github.com/users/krasimirgg/followers", "following_url": "https://api.github.com/users/krasimirgg/following{/other_user}", "gists_url": "https://api.github.com/users/krasimirgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/krasimirgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krasimirgg/subscriptions", "organizations_url": "https://api.github.com/users/krasimirgg/orgs", "repos_url": "https://api.github.com/users/krasimirgg/repos", "events_url": "https://api.github.com/users/krasimirgg/events{/privacy}", "received_events_url": "https://api.github.com/users/krasimirgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1c91213ff80af5b87a197b784b40bcbc8cf3add", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c91213ff80af5b87a197b784b40bcbc8cf3add", "html_url": "https://github.com/rust-lang/rust/commit/e1c91213ff80af5b87a197b784b40bcbc8cf3add"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "2865ea8927336143490193bddbeaec125dda6789", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbdc00f6e61132cbb74397cbb91171756e5d5834/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cbdc00f6e61132cbb74397cbb91171756e5d5834/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=cbdc00f6e61132cbb74397cbb91171756e5d5834", "patch": "@@ -223,7 +223,11 @@ fromRust(LLVMRustCodeModel Model) {\n   case LLVMRustCodeModel::Large:\n     return CodeModel::Large;\n   case LLVMRustCodeModel::None:\n+#if LLVM_VERSION_LT(16, 0)\n     return None;\n+#else\n+    return std::nullopt;\n+#endif\n   default:\n     report_fatal_error(\"Bad CodeModel.\");\n   }"}, {"sha": "279b699185421982026fad27f12804d00a8e7d8d", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbdc00f6e61132cbb74397cbb91171756e5d5834/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cbdc00f6e61132cbb74397cbb91171756e5d5834/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=cbdc00f6e61132cbb74397cbb91171756e5d5834", "patch": "@@ -322,7 +322,13 @@ extern \"C\" LLVMAttributeRef LLVMRustCreateUWTableAttr(LLVMContextRef C, bool Asy\n }\n \n extern \"C\" LLVMAttributeRef LLVMRustCreateAllocSizeAttr(LLVMContextRef C, uint32_t ElementSizeArg) {\n-  return wrap(Attribute::getWithAllocSizeArgs(*unwrap(C), ElementSizeArg, None));\n+  return wrap(Attribute::getWithAllocSizeArgs(*unwrap(C), ElementSizeArg,\n+#if LLVM_VERSION_LT(16, 0)\n+                                              None\n+#else\n+                                              std::nullopt\n+#endif\n+                                              ));\n }\n \n #if LLVM_VERSION_GE(15, 0)\n@@ -717,7 +723,11 @@ static std::optional<DIFile::ChecksumKind> fromRust(LLVMRustChecksumKind Kind) {\n #endif\n   switch (Kind) {\n   case LLVMRustChecksumKind::None:\n+#if LLVM_VERSION_LT(16, 0)\n     return None;\n+#else\n+    return std::nullopt;\n+#endif\n   case LLVMRustChecksumKind::MD5:\n     return DIFile::ChecksumKind::CSK_MD5;\n   case LLVMRustChecksumKind::SHA1:"}]}