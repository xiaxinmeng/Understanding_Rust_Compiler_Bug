{"sha": "c93c660b0de0f5df4ae8699e983b7cd67738b2a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5M2M2NjBiMGRlMGY1ZGY0YWU4Njk5ZTk4M2I3Y2Q2NzczOGIyYTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-17T21:14:23Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-04T16:53:15Z"}, "message": "review comments and rebase fix", "tree": {"sha": "f456af52a45695f2fd1903024b0d74ad2d3e1c18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f456af52a45695f2fd1903024b0d74ad2d3e1c18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c93c660b0de0f5df4ae8699e983b7cd67738b2a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c93c660b0de0f5df4ae8699e983b7cd67738b2a9", "html_url": "https://github.com/rust-lang/rust/commit/c93c660b0de0f5df4ae8699e983b7cd67738b2a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c93c660b0de0f5df4ae8699e983b7cd67738b2a9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8d02f8f1806b564603982d8cf25795db744e0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d02f8f1806b564603982d8cf25795db744e0ff", "html_url": "https://github.com/rust-lang/rust/commit/d8d02f8f1806b564603982d8cf25795db744e0ff"}], "stats": {"total": 118, "additions": 70, "deletions": 48}, "files": [{"sha": "b2026266b5116560c6986d8ecce01bba7f2caffb", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 61, "deletions": 45, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c93c660b0de0f5df4ae8699e983b7cd67738b2a9/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93c660b0de0f5df4ae8699e983b7cd67738b2a9/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=c93c660b0de0f5df4ae8699e983b7cd67738b2a9", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n use rustc_middle::ty::TyKind::{Adt, Array, Char, FnDef, Never, Ref, Str, Tuple, Uint};\n-use rustc_middle::ty::{self, suggest_constraining_type_param, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, suggest_constraining_type_param, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n \n@@ -254,49 +254,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if !lhs_ty.references_error() {\n                     let source_map = self.tcx.sess.source_map();\n \n-                    let suggest_constraining_param =\n-                        |mut err: &mut DiagnosticBuilder<'_>,\n-                         missing_trait: &str,\n-                         p: ty::ParamTy,\n-                         set_output: bool| {\n-                            let hir = self.tcx.hir();\n-                            let msg =\n-                                &format!(\"`{}` might need a bound for `{}`\", lhs_ty, missing_trait);\n-                            if let Some(def_id) = hir\n-                                .find(hir.get_parent_item(expr.hir_id))\n-                                .and_then(|node| node.hir_id())\n-                                .and_then(|hir_id| hir.opt_local_def_id(hir_id))\n-                            {\n-                                let generics = self.tcx.generics_of(def_id);\n-                                let param_def_id = generics.type_param(&p, self.tcx).def_id;\n-                                if let Some(generics) = hir\n-                                    .as_local_hir_id(param_def_id)\n-                                    .and_then(|id| hir.find(hir.get_parent_item(id)))\n-                                    .as_ref()\n-                                    .and_then(|node| node.generics())\n-                                {\n-                                    let output = if set_output {\n-                                        format!(\"<Output = {}>\", rhs_ty)\n-                                    } else {\n-                                        String::new()\n-                                    };\n-                                    suggest_constraining_type_param(\n-                                        self.tcx,\n-                                        generics,\n-                                        &mut err,\n-                                        &format!(\"{}\", lhs_ty),\n-                                        &format!(\"{}{}\", missing_trait, output),\n-                                        None,\n-                                    );\n-                                } else {\n-                                    let span = self.tcx.def_span(param_def_id);\n-                                    err.span_label(span, msg);\n-                                }\n-                            } else {\n-                                err.note(&msg);\n-                            }\n-                        };\n-\n                     match is_assign {\n                         IsAssign::Yes => {\n                             let mut err = struct_span_err!(\n@@ -362,7 +319,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     // concatenation (e.g., \"Hello \" += \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n                                 } else if let ty::Param(p) = lhs_ty.kind {\n-                                    suggest_constraining_param(&mut err, missing_trait, p, false);\n+                                    suggest_constraining_param(\n+                                        self.tcx,\n+                                        &mut err,\n+                                        lhs_ty,\n+                                        rhs_ty,\n+                                        &expr,\n+                                        missing_trait,\n+                                        p,\n+                                        false,\n+                                    );\n                                 } else if !suggested_deref {\n                                     suggest_impl_missing(&mut err, lhs_ty, &missing_trait);\n                                 }\n@@ -514,7 +480,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     // we don't want the note in the else clause to be emitted\n                                 } else if let ty::Param(p) = lhs_ty.kind {\n                                     suggest_constraining_param(\n+                                        self.tcx,\n                                         &mut err,\n+                                        lhs_ty,\n+                                        rhs_ty,\n+                                        &expr,\n                                         missing_trait,\n                                         p,\n                                         use_output,\n@@ -965,3 +935,49 @@ fn suggest_impl_missing(err: &mut DiagnosticBuilder<'_>, ty: Ty<'_>, missing_tra\n         }\n     }\n }\n+\n+fn suggest_constraining_param(\n+    tcx: TyCtxt<'_>,\n+    mut err: &mut DiagnosticBuilder<'_>,\n+    lhs_ty: Ty<'_>,\n+    rhs_ty: Ty<'_>,\n+    expr: &hir::Expr<'_>,\n+    missing_trait: &str,\n+    p: ty::ParamTy,\n+    set_output: bool,\n+) {\n+    let hir = tcx.hir();\n+    let msg = &format!(\"`{}` might need a bound for `{}`\", lhs_ty, missing_trait);\n+    // Try to find the def-id and details for the parameter p. We have only the index,\n+    // so we have to find the enclosing function's def-id, then look through its declared\n+    // generic parameters to get the declaration.\n+    if let Some(def_id) = hir\n+        .find(hir.get_parent_item(expr.hir_id))\n+        .and_then(|node| node.hir_id())\n+        .and_then(|hir_id| hir.opt_local_def_id(hir_id))\n+    {\n+        let generics = tcx.generics_of(def_id);\n+        let param_def_id = generics.type_param(&p, tcx).def_id;\n+        if let Some(generics) = hir\n+            .as_local_hir_id(param_def_id)\n+            .and_then(|id| hir.find(hir.get_parent_item(id)))\n+            .as_ref()\n+            .and_then(|node| node.generics())\n+        {\n+            let output = if set_output { format!(\"<Output = {}>\", rhs_ty) } else { String::new() };\n+            suggest_constraining_type_param(\n+                tcx,\n+                generics,\n+                &mut err,\n+                &format!(\"{}\", lhs_ty),\n+                &format!(\"{}{}\", missing_trait, output),\n+                None,\n+            );\n+        } else {\n+            let span = tcx.def_span(param_def_id);\n+            err.span_label(span, msg);\n+        }\n+    } else {\n+        err.note(&msg);\n+    }\n+}"}, {"sha": "f53489a99f3b4edc32eae4d81086f84d86c0d63d", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c93c660b0de0f5df4ae8699e983b7cd67738b2a9/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93c660b0de0f5df4ae8699e983b7cd67738b2a9/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=c93c660b0de0f5df4ae8699e983b7cd67738b2a9", "patch": "@@ -5,12 +5,18 @@ LL | trait From<Src> {\n    |            --- required by this bound in `From`\n ...\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n-   |                                                 ^^^^^^^^^^- help: consider further restricting `Self`: `, Self: std::marker::Sized`\n-   |                                                 |\n-   |                                                 doesn't have a size known at compile-time\n+   |                                                 ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider further restricting `Self`\n+   |\n+LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self>, Self: std::marker::Sized  {\n+   |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait From<Src: ?Sized> {\n+   |               ^^^^^^^^\n \n error: aborting due to previous error\n "}]}