{"sha": "7c510c0661e82d5f49d829ec9f59e23ec4bb9b24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNTEwYzA2NjFlODJkNWY0OWQ4MjllYzlmNTllMjNlYzRiYjliMjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T15:48:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T15:48:13Z"}, "message": "Remove some code", "tree": {"sha": "eda0c418e0031bb886ace753c3c91f447403af81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eda0c418e0031bb886ace753c3c91f447403af81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c510c0661e82d5f49d829ec9f59e23ec4bb9b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c510c0661e82d5f49d829ec9f59e23ec4bb9b24", "html_url": "https://github.com/rust-lang/rust/commit/7c510c0661e82d5f49d829ec9f59e23ec4bb9b24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c510c0661e82d5f49d829ec9f59e23ec4bb9b24/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "716856364933d0bd9661a6b39b1e3cf50a024857", "url": "https://api.github.com/repos/rust-lang/rust/commits/716856364933d0bd9661a6b39b1e3cf50a024857", "html_url": "https://github.com/rust-lang/rust/commit/716856364933d0bd9661a6b39b1e3cf50a024857"}], "stats": {"total": 30, "additions": 0, "deletions": 30}, "files": [{"sha": "cbad8c76567a6df81a6a54c35cb872a6364e9c87", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7c510c0661e82d5f49d829ec9f59e23ec4bb9b24/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c510c0661e82d5f49d829ec9f59e23ec4bb9b24/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7c510c0661e82d5f49d829ec9f59e23ec4bb9b24", "patch": "@@ -167,36 +167,6 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         _rx: mpsc::Receiver<Box<Any + Send>>,\n     ) -> Box<Any> {\n-        use rustc_mir::monomorphize::item::MonoItem;\n-\n-        rustc_codegen_utils::check_for_rustc_errors_attr(tcx);\n-        rustc_codegen_utils::symbol_names_test::report_symbol_names(tcx);\n-        rustc_incremental::assert_dep_graph(tcx);\n-        rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n-        rustc_mir::monomorphize::assert_symbols_are_distinct(\n-            tcx,\n-            collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager)\n-                .0\n-                .iter(),\n-        );\n-        //::rustc::middle::dependency_format::calculate(tcx);\n-        let _ = tcx.link_args(LOCAL_CRATE);\n-        let _ = tcx.native_libraries(LOCAL_CRATE);\n-        for mono_item in\n-            collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager).0\n-        {\n-            match mono_item {\n-                MonoItem::Fn(inst) => {\n-                    let def_id = inst.def_id();\n-                    if def_id.is_local() {\n-                        let _ = inst.def.is_inline(tcx);\n-                        let _ = tcx.codegen_fn_attrs(def_id);\n-                    }\n-                }\n-                _ => {}\n-            }\n-        }\n-\n         if !tcx.sess.crate_types.get().contains(&CrateType::Executable)\n             && std::env::var(\"SHOULD_RUN\").is_ok()\n         {"}]}