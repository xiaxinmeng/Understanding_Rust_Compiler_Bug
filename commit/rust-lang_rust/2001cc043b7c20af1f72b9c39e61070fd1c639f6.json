{"sha": "2001cc043b7c20af1f72b9c39e61070fd1c639f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMDFjYzA0M2I3YzIwYWYxZjcyYjljMzllNjEwNzBmZDFjNjM5ZjY=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-07-18T01:50:53Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-03T04:20:15Z"}, "message": "Bump fd limit on macos when running rt tests\n\nOS X defaults the ulimit for open files to 256 for programs launched\nfrom the Terminal (GUI apps get a higher default). Unfortunately this is\ntoo low for the rt tests, which deliberately overcommit and create a lot\nof threads (which means a lot of schedulers, and each scheduler needs at\nleast 2 fds).\n\nBy calling sysctl() and setrlimit() we can bump the fd limit up to the\nmaximum allowed (on stock OS X it's 10240).\n\nFixes #7772.", "tree": {"sha": "5efb87ad9ec9641357dc6cc83fcfe3bcf9aaf2c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5efb87ad9ec9641357dc6cc83fcfe3bcf9aaf2c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2001cc043b7c20af1f72b9c39e61070fd1c639f6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2001cc043b7c20af1f72b9c39e61070fd1c639f6", "html_url": "https://github.com/rust-lang/rust/commit/2001cc043b7c20af1f72b9c39e61070fd1c639f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2001cc043b7c20af1f72b9c39e61070fd1c639f6/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70d2be0cec5b61dec30677654123044b50bb11f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/70d2be0cec5b61dec30677654123044b50bb11f7", "html_url": "https://github.com/rust-lang/rust/commit/70d2be0cec5b61dec30677654123044b50bb11f7"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "66ae085b1a0810bb4b172c666920303cf48941f6", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2001cc043b7c20af1f72b9c39e61070fd1c639f6/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2001cc043b7c20af1f72b9c39e61070fd1c639f6/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=2001cc043b7c20af1f72b9c39e61070fd1c639f6", "patch": "@@ -63,6 +63,81 @@ pub fn run_in_newsched_task_core(f: ~fn()) {\n     sched.bootstrap(task);\n }\n \n+#[cfg(target_os=\"macos\")]\n+#[allow(non_camel_case_types)]\n+mod darwin_fd_limit {\n+    /*!\n+     * darwin_fd_limit exists to work around an issue where launchctl on Mac OS X defaults the\n+     * rlimit maxfiles to 256/unlimited. The default soft limit of 256 ends up being far too low\n+     * for our multithreaded scheduler testing, depending on the number of cores available.\n+     *\n+     * This fixes issue #7772.\n+     */\n+\n+    use libc;\n+    type rlim_t = libc::uint64_t;\n+    struct rlimit {\n+        rlim_cur: rlim_t,\n+        rlim_max: rlim_t\n+    }\n+    #[nolink]\n+    extern {\n+        // name probably doesn't need to be mut, but the C function doesn't specify const\n+        fn sysctl(name: *mut libc::c_int, namelen: libc::c_uint,\n+                  oldp: *mut libc::c_void, oldlenp: *mut libc::size_t,\n+                  newp: *mut libc::c_void, newlen: libc::size_t) -> libc::c_int;\n+        fn getrlimit(resource: libc::c_int, rlp: *mut rlimit) -> libc::c_int;\n+        fn setrlimit(resource: libc::c_int, rlp: *rlimit) -> libc::c_int;\n+    }\n+    static CTL_KERN: libc::c_int = 1;\n+    static KERN_MAXFILESPERPROC: libc::c_int = 29;\n+    static RLIMIT_NOFILE: libc::c_int = 8;\n+\n+    pub unsafe fn raise_fd_limit() {\n+        // The strategy here is to fetch the current resource limits, read the kern.maxfilesperproc\n+        // sysctl value, and bump the soft resource limit for maxfiles up to the sysctl value.\n+        use ptr::{to_unsafe_ptr, to_mut_unsafe_ptr, mut_null};\n+        use sys::size_of_val;\n+        use os::last_os_error;\n+\n+        // Fetch the kern.maxfilesperproc value\n+        let mut mib: [libc::c_int, ..2] = [CTL_KERN, KERN_MAXFILESPERPROC];\n+        let mut maxfiles: libc::c_int = 0;\n+        let mut size: libc::size_t = size_of_val(&maxfiles) as libc::size_t;\n+        if sysctl(to_mut_unsafe_ptr(&mut mib[0]), 2,\n+                  to_mut_unsafe_ptr(&mut maxfiles) as *mut libc::c_void,\n+                  to_mut_unsafe_ptr(&mut size),\n+                  mut_null(), 0) != 0 {\n+            let err = last_os_error();\n+            error!(\"raise_fd_limit: error calling sysctl: %s\", err);\n+            return;\n+        }\n+\n+        // Fetch the current resource limits\n+        let mut rlim = rlimit{rlim_cur: 0, rlim_max: 0};\n+        if getrlimit(RLIMIT_NOFILE, to_mut_unsafe_ptr(&mut rlim)) != 0 {\n+            let err = last_os_error();\n+            error!(\"raise_fd_limit: error calling getrlimit: %s\", err);\n+            return;\n+        }\n+\n+        // Bump the soft limit to the smaller of kern.maxfilesperproc and the hard limit\n+        rlim.rlim_cur = ::cmp::min(maxfiles as rlim_t, rlim.rlim_max);\n+\n+        // Set our newly-increased resource limit\n+        if setrlimit(RLIMIT_NOFILE, to_unsafe_ptr(&rlim)) != 0 {\n+            let err = last_os_error();\n+            error!(\"raise_fd_limit: error calling setrlimit: %s\", err);\n+            return;\n+        }\n+    }\n+}\n+\n+#[cfg(not(target_os=\"macos\"))]\n+mod darwin_fd_limit {\n+    pub unsafe fn raise_fd_limit() {}\n+}\n+\n /// Create more than one scheduler and run a function in a task\n /// in one of the schedulers. The schedulers will stay alive\n /// until the function `f` returns.\n@@ -72,6 +147,9 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n     use rt::sched::Shutdown;\n     use rt::util;\n \n+    // Bump the fd limit on OS X. See darwin_fd_limit for an explanation.\n+    unsafe { darwin_fd_limit::raise_fd_limit() }\n+\n     let f = Cell::new(f);\n \n     do run_in_bare_thread {"}]}