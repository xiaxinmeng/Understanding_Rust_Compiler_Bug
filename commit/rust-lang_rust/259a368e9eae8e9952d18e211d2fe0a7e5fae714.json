{"sha": "259a368e9eae8e9952d18e211d2fe0a7e5fae714", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OWEzNjhlOWVhZThlOTk1MmQxOGUyMTFkMmZlMGE3ZTVmYWU3MTQ=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-18T11:57:22Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-21T13:25:32Z"}, "message": "fix name resolution for param defaults", "tree": {"sha": "31e6a0e03f7c14403205f2fabcd6c28258bdcdde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31e6a0e03f7c14403205f2fabcd6c28258bdcdde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/259a368e9eae8e9952d18e211d2fe0a7e5fae714", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/259a368e9eae8e9952d18e211d2fe0a7e5fae714", "html_url": "https://github.com/rust-lang/rust/commit/259a368e9eae8e9952d18e211d2fe0a7e5fae714", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/259a368e9eae8e9952d18e211d2fe0a7e5fae714/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7c338641466d54bf8d4b2eae5d6865483e1d3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c338641466d54bf8d4b2eae5d6865483e1d3f4", "html_url": "https://github.com/rust-lang/rust/commit/d7c338641466d54bf8d4b2eae5d6865483e1d3f4"}], "stats": {"total": 245, "additions": 141, "deletions": 104}, "files": [{"sha": "c5f12c0c691b3c948b1cde39e2fdab2fc1d4907e", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -472,17 +472,6 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n-            ResolutionError::ParamInAnonConstInTyDefault(name) => {\n-                let mut err = self.session.struct_span_err(\n-                    span,\n-                    \"constant values inside of type parameter defaults must not depend on generic parameters\",\n-                );\n-                err.span_label(\n-                    span,\n-                    format!(\"the anonymous constant must not depend on the parameter `{}`\", name),\n-                );\n-                err\n-            }\n             ResolutionError::ParamInNonTrivialAnonConst { name, is_type } => {\n                 let mut err = self.session.struct_span_err(\n                     span,"}, {"sha": "92f21191de4308a8c12082a128382675f9b16570", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -555,18 +555,23 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         // provide previous type parameters as they're built. We\n         // put all the parameters on the ban list and then remove\n         // them one by one as they are processed and become available.\n-        let mut default_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n-        let mut found_default = false;\n-        default_ban_rib.bindings.extend(generics.params.iter().filter_map(\n-            |param| match param.kind {\n-                GenericParamKind::Type { default: Some(_), .. }\n-                | GenericParamKind::Const { default: Some(_), .. } => {\n-                    found_default = true;\n-                    Some((Ident::with_dummy_span(param.ident.name), Res::Err))\n+        let mut forward_ty_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n+        let mut forward_const_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n+        for param in generics.params.iter() {\n+            match param.kind {\n+                GenericParamKind::Type { .. } => {\n+                    forward_ty_ban_rib\n+                        .bindings\n+                        .insert(Ident::with_dummy_span(param.ident.name), Res::Err);\n                 }\n-                _ => None,\n-            },\n-        ));\n+                GenericParamKind::Const { .. } => {\n+                    forward_const_ban_rib\n+                        .bindings\n+                        .insert(Ident::with_dummy_span(param.ident.name), Res::Err);\n+                }\n+                GenericParamKind::Lifetime => {}\n+            }\n+        }\n \n         // rust-lang/rust#61631: The type `Self` is essentially\n         // another type parameter. For ADTs, we consider it\n@@ -579,7 +584,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         // such as in the case of `trait Add<Rhs = Self>`.)\n         if self.diagnostic_metadata.current_self_item.is_some() {\n             // (`Some` if + only if we are in ADT's generics.)\n-            default_ban_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), Res::Err);\n+            forward_ty_ban_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), Res::Err);\n         }\n \n         for param in &generics.params {\n@@ -591,32 +596,38 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     }\n \n                     if let Some(ref ty) = default {\n-                        self.ribs[TypeNS].push(default_ban_rib);\n-                        self.with_rib(ValueNS, ForwardGenericParamBanRibKind, |this| {\n-                            // HACK: We use an empty `ForwardGenericParamBanRibKind` here which\n-                            // is only used to forbid the use of const parameters inside of\n-                            // type defaults.\n-                            //\n-                            // While the rib name doesn't really fit here, it does allow us to use the same\n-                            // code for both const and type parameters.\n-                            this.visit_ty(ty);\n-                        });\n-                        default_ban_rib = self.ribs[TypeNS].pop().unwrap();\n+                        self.ribs[TypeNS].push(forward_ty_ban_rib);\n+                        self.ribs[ValueNS].push(forward_const_ban_rib);\n+                        self.visit_ty(ty);\n+                        forward_const_ban_rib = self.ribs[ValueNS].pop().unwrap();\n+                        forward_ty_ban_rib = self.ribs[TypeNS].pop().unwrap();\n                     }\n \n                     // Allow all following defaults to refer to this type parameter.\n-                    default_ban_rib.bindings.remove(&Ident::with_dummy_span(param.ident.name));\n+                    forward_ty_ban_rib.bindings.remove(&Ident::with_dummy_span(param.ident.name));\n                 }\n-                GenericParamKind::Const { ref ty, kw_span: _, default: _ } => {\n-                    // FIXME(const_generics_defaults): handle `default` value here\n-                    for bound in &param.bounds {\n-                        self.visit_param_bound(bound);\n-                    }\n+                GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n+                    // Const parameters can't have param bounds.\n+                    assert!(param.bounds.is_empty());\n+\n                     self.ribs[TypeNS].push(Rib::new(ConstParamTyRibKind));\n                     self.ribs[ValueNS].push(Rib::new(ConstParamTyRibKind));\n                     self.visit_ty(ty);\n                     self.ribs[TypeNS].pop().unwrap();\n                     self.ribs[ValueNS].pop().unwrap();\n+\n+                    if let Some(ref expr) = default {\n+                        self.ribs[TypeNS].push(forward_ty_ban_rib);\n+                        self.ribs[ValueNS].push(forward_const_ban_rib);\n+                        self.visit_anon_const(expr);\n+                        forward_const_ban_rib = self.ribs[ValueNS].pop().unwrap();\n+                        forward_ty_ban_rib = self.ribs[TypeNS].pop().unwrap();\n+                    }\n+\n+                    // Allow all following defaults to refer to this const parameter.\n+                    forward_const_ban_rib\n+                        .bindings\n+                        .remove(&Ident::with_dummy_span(param.ident.name));\n                 }\n             }\n         }"}, {"sha": "1d1969f7e78abeba3a9ce9b6aed0237280510b3e", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 8, "deletions": 50, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -239,8 +239,6 @@ enum ResolutionError<'a> {\n     ForwardDeclaredTyParam, // FIXME(const_generics_defaults)\n     /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n     ParamInTyOfConstParam(Symbol),\n-    /// constant values inside of type parameter defaults must not depend on generic parameters.\n-    ParamInAnonConstInTyDefault(Symbol),\n     /// generic parameters must not be used inside const evaluations.\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n@@ -2672,26 +2670,18 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {\n-                let mut in_ty_param_default = false;\n                 for rib in ribs {\n-                    let has_generic_params = match rib.kind {\n+                    let has_generic_params: HasGenericParams = match rib.kind {\n                         NormalRibKind\n                         | ClosureOrAsyncRibKind\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n-                        | MacroDefinition(..) => {\n+                        | MacroDefinition(..)\n+                        | ForwardGenericParamBanRibKind => {\n                             // Nothing to do. Continue.\n                             continue;\n                         }\n \n-                        // We only forbid constant items if we are inside of type defaults,\n-                        // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n-                        ForwardGenericParamBanRibKind => {\n-                            // FIXME(const_generic_defaults): we may need to distinguish between\n-                            // being in type parameter defaults and const parameter defaults\n-                            in_ty_param_default = true;\n-                            continue;\n-                        }\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n@@ -2720,19 +2710,7 @@ impl<'a> Resolver<'a> {\n                                 }\n                             }\n \n-                            if in_ty_param_default {\n-                                if record_used {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInAnonConstInTyDefault(\n-                                            rib_ident.name,\n-                                        ),\n-                                    );\n-                                }\n-                                return Res::Err;\n-                            } else {\n-                                continue;\n-                            }\n+                            continue;\n                         }\n \n                         // This was an attempt to use a type parameter outside its scope.\n@@ -2770,23 +2748,15 @@ impl<'a> Resolver<'a> {\n                     ribs.next();\n                 }\n \n-                let mut in_ty_param_default = false;\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n                         NormalRibKind\n                         | ClosureOrAsyncRibKind\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n-                        | MacroDefinition(..) => continue,\n-\n-                        // We only forbid constant items if we are inside of type defaults,\n-                        // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n-                        ForwardGenericParamBanRibKind => {\n-                            // FIXME(const_generic_defaults): we may need to distinguish between\n-                            // being in type parameter defaults and const parameter defaults\n-                            in_ty_param_default = true;\n-                            continue;\n-                        }\n+                        | MacroDefinition(..)\n+                        | ForwardGenericParamBanRibKind => continue,\n+\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n@@ -2808,19 +2778,7 @@ impl<'a> Resolver<'a> {\n                                 return Res::Err;\n                             }\n \n-                            if in_ty_param_default {\n-                                if record_used {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInAnonConstInTyDefault(\n-                                            rib_ident.name,\n-                                        ),\n-                                    );\n-                                }\n-                                return Res::Err;\n-                            } else {\n-                                continue;\n-                            }\n+                            continue;\n                         }\n \n                         ItemRibKind(has_generic_params) => has_generic_params,"}, {"sha": "ba00e4b15ca155049b00055d050a76db8c560218", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_generics, const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+\n+struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n+//~^ ERROR the size for values of type `T` cannot be known at compilation time \n+\n+fn main() {}"}, {"sha": "06865fdd8fd3af0f42cca0593be58225cbf30874", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.stderr?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/complex-generic-default-expr.rs:6:62\n+   |\n+LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n+   |            -                                                 ^ doesn't have a size known at compile-time\n+   |            |\n+   |            this type parameter needs to be `std::marker::Sized`\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "2555450a9e7f8d2e96f0abfb1a0057abae88514e", "filename": "src/test/ui/const-generics/defaults/default-on-impl.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_generics, const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: usize>;\n+\n+impl<const N: usize = 1> Foo<N> {}\n+//~^ ERROR defaults for const parameters are only allowed\n+\n+fn main() {}"}, {"sha": "b30b18a7b3c71a77e1a51fb134a96bbd3a6aa6b4", "filename": "src/test/ui/const-generics/defaults/default-on-impl.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -0,0 +1,8 @@\n+error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/default-on-impl.rs:6:12\n+   |\n+LL | impl<const N: usize = 1> Foo<N> {}\n+   |            ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "12a92a10476d5b4b55461020e744367047643a31", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -10,4 +10,5 @@ trait Foo<const KIND: bool = true> {}\n \n fn foo<const SIZE: usize = 5>() {}\n \n-struct Range<const FROM: usize = 0, const LEN: usize = 0, const TO: usize = {FROM + LEN}>;\n+struct Range<const FROM: usize = 0, const LEN: usize = 0, const TO: usize = FROM>;\n+"}, {"sha": "c514bbe72e1d8e7912ba369b57124179e4d4625e", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.stdout", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -17,4 +17,5 @@ trait Foo<const KIND : bool = true> { }\n fn foo<const SIZE : usize = 5>() { }\n \n struct Range<const FROM : usize = 0, const LEN : usize = 0, const TO : usize =\n-             { FROM + LEN }>;\n+             FROM>;\n+"}, {"sha": "c0c83cda285da5e03a12fa639c54013a8c08083c", "filename": "src/test/ui/const-generics/defaults/type-default-const-param-name.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+#![feature(const_generics, const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+struct N;\n+\n+struct Foo<const N: usize = 1, T = N>(T);\n+\n+impl Foo {\n+    fn new() -> Self {\n+        Foo(N)\n+    }\n+}\n+\n+fn main() {\n+    let Foo::<1, N>(N) = Foo::new();\n+}"}, {"sha": "d8bfab6aa52c836fc1208e7c62684992247b3610", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.full.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -6,17 +6,26 @@ LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n-error: constant values inside of type parameter defaults must not depend on generic parameters\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:21\n+   |\n+LL | struct Bar<T = [u8; N], const N: usize>(T);\n+   |                     ^ defaulted generic parameters cannot be forward declared\n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:6:44\n    |\n LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n-   |                                            ^ the anonymous constant must not depend on the parameter `T`\n-\n-error: constant values inside of type parameter defaults must not depend on generic parameters\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:21\n+   |            -                               ^ doesn't have a size known at compile-time\n+   |            |\n+   |            this type parameter needs to be `std::marker::Sized`\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-LL | struct Bar<T = [u8; N], const N: usize>(T);\n-   |                     ^ the anonymous constant must not depend on the parameter `N`\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n \n error: aborting due to 3 previous errors\n \n+Some errors have detailed explanations: E0128, E0277.\n+For more information about an error, try `rustc --explain E0128`."}, {"sha": "44393a30266d682c3f39dc083503a967d4dd5f8b", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -15,11 +15,12 @@ LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    = note: type parameters may not be used in const expressions\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n-error: constant values inside of type parameter defaults must not depend on generic parameters\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:21\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n-   |                     ^ the anonymous constant must not depend on the parameter `N`\n+   |                     ^ defaulted generic parameters cannot be forward declared\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0128`."}, {"sha": "8a84afd065c1ec412e001491b74c2a3781a58458", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -4,12 +4,12 @@\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n-//[full]~^ ERROR constant values inside of type parameter defaults\n+//[full]~^ ERROR the size for values of type `T` cannot be known at compilation time\n //[min]~^^ ERROR generic parameters may not be used in const operations\n \n // FIXME(const_generics_defaults): We still don't know how to deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);\n-//~^ ERROR constant values inside of type parameter defaults\n+//~^ ERROR generic parameters with a default cannot use forward declared identifiers\n //~| ERROR generic parameters with a default\n \n fn main() {}"}, {"sha": "16ea71d48c8259dfbeff4f387b37189b3ed9700e", "filename": "src/test/ui/generics/generic-non-trailing-defaults.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -5,5 +5,6 @@ struct Vec<A = Heap, T>(A, T);\n \n struct Foo<A, B = Vec<C>, C>(A, B, C);\n //~^ ERROR generic parameters with a default must be trailing\n+//~| ERROR generic parameters with a default cannot use\n \n fn main() {}"}, {"sha": "713ba091b861c8f01fb9710cc125d345e51aa275", "filename": "src/test/ui/generics/generic-non-trailing-defaults.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/259a368e9eae8e9952d18e211d2fe0a7e5fae714/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr?ref=259a368e9eae8e9952d18e211d2fe0a7e5fae714", "patch": "@@ -10,5 +10,12 @@ error: generic parameters with a default must be trailing\n LL | struct Foo<A, B = Vec<C>, C>(A, B, C);\n    |               ^\n \n-error: aborting due to 2 previous errors\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n+  --> $DIR/generic-non-trailing-defaults.rs:6:23\n+   |\n+LL | struct Foo<A, B = Vec<C>, C>(A, B, C);\n+   |                       ^ defaulted generic parameters cannot be forward declared\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0128`."}]}