{"sha": "f482e55adf3fb76860d304c9b7f5c7f3f9a40717", "node_id": "C_kwDOAAsO6NoAKGY0ODJlNTVhZGYzZmI3Njg2MGQzMDRjOWI3ZjVjN2YzZjlhNDA3MTc", "commit": {"author": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-12-01T02:03:43Z"}, "committer": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-12-01T04:18:05Z"}, "message": "kmc-solid: Address compiler warnings\n\nAddresses the warn-by-default lints `unused_imports` and\n`unused_unsafe`.", "tree": {"sha": "6947d8908d66e8fcb708e0a5a9515b5654452cfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6947d8908d66e8fcb708e0a5a9515b5654452cfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f482e55adf3fb76860d304c9b7f5c7f3f9a40717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f482e55adf3fb76860d304c9b7f5c7f3f9a40717", "html_url": "https://github.com/rust-lang/rust/commit/f482e55adf3fb76860d304c9b7f5c7f3f9a40717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f482e55adf3fb76860d304c9b7f5c7f3f9a40717/comments", "author": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47f2f6d615a70b29a4ef76ebf480703655a0ea05", "url": "https://api.github.com/repos/rust-lang/rust/commits/47f2f6d615a70b29a4ef76ebf480703655a0ea05", "html_url": "https://github.com/rust-lang/rust/commit/47f2f6d615a70b29a4ef76ebf480703655a0ea05"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "7a47cc6696a34908a0bea6f832dbf14e8b68087d", "filename": "library/std/src/sys/itron/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f482e55adf3fb76860d304c9b7f5c7f3f9a40717/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f482e55adf3fb76860d304c9b7f5c7f3f9a40717/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs?ref=f482e55adf3fb76860d304c9b7f5c7f3f9a40717", "patch": "@@ -71,7 +71,7 @@ impl Condvar {\n             }\n         }\n \n-        unsafe { mutex.lock() };\n+        mutex.lock();\n     }\n \n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n@@ -109,7 +109,7 @@ impl Condvar {\n         // we woke up because of `notify_*`.\n         let success = self.waiters.with_locked(|waiters| unsafe { !waiters.remove(waiter) });\n \n-        unsafe { mutex.lock() };\n+        mutex.lock();\n         success\n     }\n }"}, {"sha": "1f6cc41947602be1a7f81d443972de6e26b78d69", "filename": "library/std/src/sys/itron/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f482e55adf3fb76860d304c9b7f5c7f3f9a40717/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f482e55adf3fb76860d304c9b7f5c7f3f9a40717/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fmutex.rs?ref=f482e55adf3fb76860d304c9b7f5c7f3f9a40717", "patch": "@@ -72,7 +72,7 @@ pub(super) struct MutexGuard<'a>(&'a Mutex);\n impl<'a> MutexGuard<'a> {\n     #[inline]\n     pub(super) fn lock(x: &'a Mutex) -> Self {\n-        unsafe { x.lock() };\n+        x.lock();\n         Self(x)\n     }\n }"}, {"sha": "6135921f0b5a89a6694d7d151130255981423c73", "filename": "library/std/src/sys/solid/os.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f482e55adf3fb76860d304c9b7f5c7f3f9a40717/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f482e55adf3fb76860d304c9b7f5c7f3f9a40717/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs?ref=f482e55adf3fb76860d304c9b7f5c7f3f9a40717", "patch": "@@ -1,7 +1,6 @@\n use super::unsupported;\n-use crate::convert::TryFrom;\n use crate::error::Error as StdError;\n-use crate::ffi::{CStr, CString, OsStr, OsString};\n+use crate::ffi::{CStr, OsStr, OsString};\n use crate::fmt;\n use crate::io;\n use crate::os::{"}]}