{"sha": "abe143abf19c676469ad1b6b9204a251ed5feada", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZTE0M2FiZjE5YzY3NjQ2OWFkMWI2YjkyMDRhMjUxZWQ1ZmVhZGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-30T20:17:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-30T20:17:59Z"}, "message": "remove caller span from Miri stack frame", "tree": {"sha": "e9ab029591c38fb97c78edcb3d38fe7ff0e63092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9ab029591c38fb97c78edcb3d38fe7ff0e63092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe143abf19c676469ad1b6b9204a251ed5feada", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe143abf19c676469ad1b6b9204a251ed5feada", "html_url": "https://github.com/rust-lang/rust/commit/abe143abf19c676469ad1b6b9204a251ed5feada", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe143abf19c676469ad1b6b9204a251ed5feada/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39e189d3bddf370d76e78aa3d912f393fc8b97b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/39e189d3bddf370d76e78aa3d912f393fc8b97b7", "html_url": "https://github.com/rust-lang/rust/commit/39e189d3bddf370d76e78aa3d912f393fc8b97b7"}], "stats": {"total": 14, "additions": 2, "deletions": 12}, "files": [{"sha": "af79198ef6415631ae80ec419fefccba5aaead7c", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe143abf19c676469ad1b6b9204a251ed5feada/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe143abf19c676469ad1b6b9204a251ed5feada/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=abe143abf19c676469ad1b6b9204a251ed5feada", "patch": "@@ -46,7 +46,6 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n     ecx.push_stack_frame(\n         cid.instance,\n-        body.span,\n         body,\n         Some(ret.into()),\n         StackPopCleanup::None { cleanup: false },"}, {"sha": "cf80e55ae4598a0229cde137192d46d2ce2b12e5", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abe143abf19c676469ad1b6b9204a251ed5feada/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe143abf19c676469ad1b6b9204a251ed5feada/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=abe143abf19c676469ad1b6b9204a251ed5feada", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::layout::{self, Align, HasDataLayout, LayoutOf, Size, TyAnd\n use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc_span::source_map::{self, Span, DUMMY_SP};\n+use rustc_span::source_map::{Span, DUMMY_SP};\n \n use super::{\n     Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, OpTy, Operand, Place, PlaceTy,\n@@ -57,9 +57,6 @@ pub struct Frame<'mir, 'tcx, Tag = (), Extra = ()> {\n     /// The def_id and substs of the current function.\n     pub instance: ty::Instance<'tcx>,\n \n-    /// The span of the call site.\n-    pub span: source_map::Span,\n-\n     /// Extra data for the machine.\n     pub extra: Extra,\n \n@@ -502,7 +499,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn push_stack_frame(\n         &mut self,\n         instance: ty::Instance<'tcx>,\n-        span: Span,\n         body: &'mir mir::Body<'tcx>,\n         return_place: Option<PlaceTy<'tcx, M::PointerTag>>,\n         return_to_block: StackPopCleanup,\n@@ -522,7 +518,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // empty local array, we fill it in below, after we are inside the stack frame and\n             // all methods actually know about the frame\n             locals: IndexVec::new(),\n-            span,\n             instance,\n             stmt: 0,\n             extra,\n@@ -541,7 +536,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // statics and constants don't have `Storage*` statements, no need to look for them\n                 Some(DefKind::Static) | Some(DefKind::Const) | Some(DefKind::AssocConst) => {}\n                 _ => {\n-                    trace!(\"push_stack_frame: {:?}: num_bbs: {}\", span, body.basic_blocks().len());\n                     for block in body.basic_blocks() {\n                         for stmt in block.statements.iter() {\n                             use rustc_middle::mir::StatementKind::{StorageDead, StorageLive};\n@@ -887,7 +881,6 @@ where\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'ctx>, hasher: &mut StableHasher) {\n         self.body.hash_stable(hcx, hasher);\n         self.instance.hash_stable(hcx, hasher);\n-        self.span.hash_stable(hcx, hasher);\n         self.return_to_block.hash_stable(hcx, hasher);\n         self.return_place.as_ref().map(|r| &**r).hash_stable(hcx, hasher);\n         self.locals.hash_stable(hcx, hasher);"}, {"sha": "bbc866e017723631cae3badfb1dccf33a4956464", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe143abf19c676469ad1b6b9204a251ed5feada/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe143abf19c676469ad1b6b9204a251ed5feada/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=abe143abf19c676469ad1b6b9204a251ed5feada", "patch": "@@ -17,10 +17,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     crate fn find_closest_untracked_caller_location(&self) -> Option<Span> {\n         let mut caller_span = None;\n         for next_caller in self.stack.iter().rev() {\n+            caller_span = next_caller.current_source_info().map(|si| si.span).or_else(|| caller_span);\n             if !next_caller.instance.def.requires_caller_location(*self.tcx) {\n                 return caller_span;\n             }\n-            caller_span = Some(next_caller.span);\n         }\n \n         caller_span"}, {"sha": "8eedd6061457e8dcb94dbef91eab1b2b34e4d906", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe143abf19c676469ad1b6b9204a251ed5feada/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe143abf19c676469ad1b6b9204a251ed5feada/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=abe143abf19c676469ad1b6b9204a251ed5feada", "patch": "@@ -259,7 +259,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 self.push_stack_frame(\n                     instance,\n-                    span,\n                     body,\n                     ret.map(|p| p.0),\n                     StackPopCleanup::Goto { ret: ret.map(|p| p.1), unwind },"}, {"sha": "c45942c493396d1f7b70f5956bab7b8f3f4724a6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe143abf19c676469ad1b6b9204a251ed5feada/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe143abf19c676469ad1b6b9204a251ed5feada/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=abe143abf19c676469ad1b6b9204a251ed5feada", "patch": "@@ -364,7 +364,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n         ecx.push_stack_frame(\n             Instance::new(def_id, substs),\n-            span,\n             dummy_body,\n             ret.map(Into::into),\n             StackPopCleanup::None { cleanup: false },"}]}