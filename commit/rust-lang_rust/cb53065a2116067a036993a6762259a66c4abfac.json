{"sha": "cb53065a2116067a036993a6762259a66c4abfac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTMwNjVhMjExNjA2N2EwMzY5OTNhNjc2MjI1OWE2NmM0YWJmYWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-03T01:56:13Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-03T01:56:13Z"}, "message": "Initial sketch of snapshot support code, based on code from marijn.", "tree": {"sha": "c23b9e81c56fc770a8a16637d4ff81e645b6e244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c23b9e81c56fc770a8a16637d4ff81e645b6e244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb53065a2116067a036993a6762259a66c4abfac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb53065a2116067a036993a6762259a66c4abfac", "html_url": "https://github.com/rust-lang/rust/commit/cb53065a2116067a036993a6762259a66c4abfac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb53065a2116067a036993a6762259a66c4abfac/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc58fc6a070b44bc6a7d2629d7d6eb1d074b9fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc58fc6a070b44bc6a7d2629d7d6eb1d074b9fb", "html_url": "https://github.com/rust-lang/rust/commit/2fc58fc6a070b44bc6a7d2629d7d6eb1d074b9fb"}], "stats": {"total": 212, "additions": 212, "deletions": 0}, "files": [{"sha": "d9547b2f8df4f72348be48a1c461388c0b4347f2", "filename": "src/etc/get-snapshot.py", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/cb53065a2116067a036993a6762259a66c4abfac/src%2Fetc%2Fget-snapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/cb53065a2116067a036993a6762259a66c4abfac/src%2Fetc%2Fget-snapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-snapshot.py?ref=cb53065a2116067a036993a6762259a66c4abfac", "patch": "@@ -0,0 +1,95 @@\n+#!/usr/bin/env python\n+\n+import os, tarfile, hashlib, re, shutil\n+from snapshot import *\n+\n+def snap_filename_hash_part(snap):\n+  match = re.match(r\".*([a-fA-F\\d]{40}).tar.bz2$\", snap)\n+  if not match:\n+    raise Exception(\"unable to find hash in filename: \" + snap)\n+  return match.group(1)\n+\n+def get_snapshot_and_check_hash(snap):\n+\n+  hsh = snap_filename_hash_part(snap)\n+\n+  h = hashlib.sha1()\n+  url = download_url_base + \"/\" + snap\n+  print \"downloading \" + url\n+  u = urllib2.urlopen(url)\n+  print \"checking hash on download\"\n+  data = u.read()\n+  h.update(data)\n+  if h.hexdigest() != hsh:\n+    raise Exception(\"hash check failed on \" + snap)\n+\n+  print \"hash ok\"\n+  with open(os.path.join(download_dir_base, snap), \"w+b\") as f:\n+    f.write(data)\n+  return True\n+\n+def unpack_snapshot(snap):\n+  dl_path = os.path.join(download_dir_base, snap)\n+  print \"opening snapshot \" + dl_path\n+  tar = tarfile.open(dl_path)\n+  kernel = get_kernel()\n+  for name in snapshot_files[kernel]:\n+    p = os.path.join(\"rust-stage0\", name)\n+    fp = os.path.join(\"stage0\", name)\n+    print \"extracting \" + fp\n+    tar.extract(p, download_unpack_base)\n+    tp = os.path.join(download_unpack_base, p)\n+    shutil.move(tp, fp)\n+  tar.close()\n+  shutil.rmtree(download_unpack_base)\n+\n+def determine_last_snapshot_for_platform():\n+  lines = open(snapshotfile).readlines();\n+\n+  platform = get_platform()\n+\n+  found = False\n+  hsh = None\n+  date = None\n+  rev = None\n+\n+  for ln in range(len(lines) - 1, -1, -1):\n+    parsed = parse_line(ln, lines[ln])\n+    if (not parsed): continue\n+\n+    if parsed[\"type\"] == \"file\":\n+      if parsed[\"platform\"] == platform:\n+        hsh = parsed[\"hash\"]\n+    elif parsed[\"type\"] == \"snapshot\":\n+      date = parsed[\"date\"]\n+      rev = parsed[\"rev\"]\n+      found = True\n+      break\n+    elif parsed[\"type\"] == \"transition\" and not foundSnapshot:\n+      raise Exception(\"working on a transition, not updating stage0\")\n+\n+  if not found:\n+    raise Exception(\"no snapshot entries in file\")\n+\n+  if not hsh:\n+    raise Exception(\"no snapshot file found for platform %s, rev %s\" %\n+                    (platform, rev))\n+\n+  return full_snapshot_name(date, rev, get_kernel(), get_cpu(), hsh)\n+\n+# Main\n+\n+snap = determine_last_snapshot_for_platform()\n+print \"determined most recent snapshot: \" + snap\n+dl = os.path.join(download_dir_base, snap)\n+if (os.path.exists(dl)):\n+  if (snap_filename_hash_part(snap) == hash_file(dl)):\n+    print \"found existing download with ok hash\"\n+  else:\n+    print \"bad hash on existing download, re-fetching\"\n+    get_snapshot_and_check_hash(snap)\n+else:\n+  print \"no cached download, fetching\"\n+  get_snapshot_and_check_hash(snap)\n+\n+unpack_snapshot(snap)"}, {"sha": "3d6c48e3c53728ed37a17be5995caaf7e59d62be", "filename": "src/etc/make-snapshot.py", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb53065a2116067a036993a6762259a66c4abfac/src%2Fetc%2Fmake-snapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/cb53065a2116067a036993a6762259a66c4abfac/src%2Fetc%2Fmake-snapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmake-snapshot.py?ref=cb53065a2116067a036993a6762259a66c4abfac", "patch": "@@ -0,0 +1,24 @@\n+#!/usr/bin/env python\n+\n+import shutil, tarfile\n+from snapshot import *\n+\n+kernel = get_kernel()\n+cpu = get_cpu()\n+rev = local_rev_short_sha()\n+date = local_rev_committer_date().split()[0]\n+\n+file0 = partial_snapshot_name(date, rev, kernel, cpu)\n+\n+tar = tarfile.open(file0, \"w:bz2\")\n+for name in snapshot_files[kernel]:\n+    tar.add(os.path.join(\"stage2\", name),\n+            os.path.join(\"rust-stage0\", name))\n+tar.close()\n+\n+h = hash_file(file0)\n+file1 = full_snapshot_name(date, rev, kernel, cpu, h)\n+\n+shutil.move(file0, file1)\n+\n+print file1"}, {"sha": "2aa241c57a6a5b894f2393e5b350c47919ef3856", "filename": "src/etc/snapshot.py", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/cb53065a2116067a036993a6762259a66c4abfac/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/cb53065a2116067a036993a6762259a66c4abfac/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=cb53065a2116067a036993a6762259a66c4abfac", "patch": "@@ -0,0 +1,89 @@\n+import re, os, sys, hashlib, tarfile, shutil, subprocess, urllib2, tempfile\n+\n+snapshotfile = \"snapshots.txt\"\n+download_url_base = \"http://dl.rust-lang.org/stage0-snapshots\"\n+download_dir_base = \"dl\"\n+download_unpack_base = os.path.join(download_dir_base, \"unpack\")\n+\n+snapshot_files = {\n+    \"linux\": [\"rustc\", \"glue.o\", \"libstd.so\" ],\n+    \"macos\": [\"rustc\", \"glue.o\", \"libstd.dylib\" ],\n+    \"winnt\": [\"rustc.exe\", \"glue.o\", \"std.dll\" ]\n+    }\n+\n+def parse_line(n, line):\n+  global snapshotfile\n+\n+  if re.match(r\"\\s*$\", line): return None\n+\n+  match = re.match(r\"\\s+([\\w_-]+) ([a-fA-F\\d]{40})\\s*$\", line)\n+  if match:\n+    return { \"type\": \"file\",\n+             \"platform\": match.group(1),\n+             \"hash\": match.group(2).lower() }\n+\n+  match = re.match(r\"([ST]) (\\d{4}-\\d{2}-\\d{2}) ([a-fA-F\\d]+)\\s*$\", line);\n+  if (not match):\n+    raise Exception(\"%s:%d:E syntax error\" % (snapshotfile, n))\n+  ttype = \"snapshot\"\n+  if (match.group(1) == \"T\"):\n+    ttype = \"transition\"\n+  return {\"type\": ttype,\n+          \"date\": match.group(2),\n+          \"rev\": match.group(3)}\n+\n+\n+def partial_snapshot_name(date, rev, kernel, cpu):\n+  return (\"rust-stage0-%s-%s-%s-%s.tar.bz2\"\n+          % (date, rev, kernel, cpu))\n+\n+def full_snapshot_name(date, rev, kernel, cpu, hsh):\n+  return (\"rust-stage0-%s-%s-%s-%s-%s.tar.bz2\"\n+          % (date, rev, kernel, cpu, hsh))\n+\n+\n+def get_kernel():\n+    if os.name == \"nt\":\n+        return \"winnt\"\n+    kernel = os.uname()[0].lower()\n+    if kernel == \"darwin\":\n+        kernel = \"macos\"\n+    return kernel\n+\n+\n+def get_cpu():\n+    # return os.uname()[-1].lower()\n+    return \"i386\"\n+\n+\n+def get_platform():\n+  return \"%s-%s\" % (get_kernel(), get_cpu())\n+\n+\n+def cmd_out(cmdline):\n+    p = subprocess.Popen(cmdline,\n+                         stdout=subprocess.PIPE)\n+    return p.communicate()[0].strip()\n+\n+\n+def local_rev_info(field):\n+    return cmd_out([\"git\", \"log\", \"-n\", \"1\",\n+                    \"--format=%%%s\" % field, \"HEAD\"])\n+\n+\n+def local_rev_full_sha():\n+    return local_rev_info(\"H\").split()[0]\n+\n+\n+def local_rev_short_sha():\n+    return local_rev_info(\"h\").split()[0]\n+\n+\n+def local_rev_committer_date():\n+    return local_rev_info(\"ci\")\n+\n+\n+def hash_file(x):\n+    h = hashlib.sha1()\n+    h.update(open(x).read())\n+    return h.hexdigest()"}, {"sha": "436015b056c054e1a37745b00f0e1342ecf9410b", "filename": "src/snapshots.txt", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb53065a2116067a036993a6762259a66c4abfac/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/cb53065a2116067a036993a6762259a66c4abfac/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=cb53065a2116067a036993a6762259a66c4abfac", "patch": "@@ -0,0 +1,4 @@\n+S 2011-04-29 7b95b5c\n+  linux-i386 f0e166816ce34adc9f7202bd3cfbd80623505f28\n+  macos-i386 abf2ee279da63676ca17c9dc9e54d04d8f752b00\n+  winnt-i386 7d27adcc5e0c111e3221751962a7df0bcb9a9288"}]}