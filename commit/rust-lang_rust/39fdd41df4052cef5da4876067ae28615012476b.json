{"sha": "39fdd41df4052cef5da4876067ae28615012476b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZmRkNDFkZjQwNTJjZWY1ZGE0ODc2MDY3YWUyODYxNTAxMjQ3NmI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-07-23T22:31:28Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-10T12:46:34Z"}, "message": "Return bool from is_unsafe_method_call and cleanup usages", "tree": {"sha": "c6b004f63d75ad1cdd53543d0f818bf0386631b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6b004f63d75ad1cdd53543d0f818bf0386631b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39fdd41df4052cef5da4876067ae28615012476b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39fdd41df4052cef5da4876067ae28615012476b", "html_url": "https://github.com/rust-lang/rust/commit/39fdd41df4052cef5da4876067ae28615012476b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39fdd41df4052cef5da4876067ae28615012476b/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6af0272f7bf129a3063cdd7096f685fc58438e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6af0272f7bf129a3063cdd7096f685fc58438e6", "html_url": "https://github.com/rust-lang/rust/commit/a6af0272f7bf129a3063cdd7096f685fc58438e6"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "9697c7082b5d0517f70c359f75195029cb98d173", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/39fdd41df4052cef5da4876067ae28615012476b/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39fdd41df4052cef5da4876067ae28615012476b/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=39fdd41df4052cef5da4876067ae28615012476b", "patch": "@@ -281,26 +281,26 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.assert_contains_node(node)\n     }\n \n-    pub fn is_unsafe_method_call(&self, method_call_expr: ast::MethodCallExpr) -> Option<()> {\n-        let expr = method_call_expr.expr()?;\n-        let field_expr =\n-            if let ast::Expr::FieldExpr(field_expr) = expr { field_expr } else { return None };\n-        let ty = self.type_of_expr(&field_expr.expr()?)?;\n-        if !ty.is_packed(self.db) {\n-            return None;\n-        }\n+    pub fn is_unsafe_method_call(&self, method_call_expr: ast::MethodCallExpr) -> bool {\n+        method_call_expr\n+            .expr()\n+            .and_then(|expr| {\n+                let field_expr = if let ast::Expr::FieldExpr(field_expr) = expr {\n+                    field_expr\n+                } else {\n+                    return None;\n+                };\n+                let ty = self.type_of_expr(&field_expr.expr()?)?;\n+                if !ty.is_packed(self.db) {\n+                    return None;\n+                }\n \n-        let func = self.resolve_method_call(&method_call_expr)?;\n-        if func.has_self_param(self.db) {\n-            let params = func.params(self.db);\n-            if matches!(params.into_iter().next(), Some(TypeRef::Reference(..))) {\n-                Some(())\n-            } else {\n-                None\n-            }\n-        } else {\n-            None\n-        }\n+                let func = self.resolve_method_call(&method_call_expr)?;\n+                let is_unsafe = func.has_self_param(self.db)\n+                    && matches!(func.params(self.db).first(), Some(TypeRef::Reference(..)));\n+                Some(is_unsafe)\n+            })\n+            .unwrap_or(false)\n     }\n \n     pub fn is_unsafe_ref_expr(&self, ref_expr: &ast::RefExpr) -> bool {"}, {"sha": "4527885e934785bb4af806333717dd1593fea3f8", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39fdd41df4052cef5da4876067ae28615012476b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39fdd41df4052cef5da4876067ae28615012476b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=39fdd41df4052cef5da4876067ae28615012476b", "patch": "@@ -730,8 +730,9 @@ fn highlight_name(\n                     let is_unsafe = name_ref\n                         .and_then(|name_ref| name_ref.syntax().parent())\n                         .and_then(ast::MethodCallExpr::cast)\n-                        .and_then(|method_call_expr| sema.is_unsafe_method_call(method_call_expr));\n-                    if is_unsafe.is_some() {\n+                        .map(|method_call_expr| sema.is_unsafe_method_call(method_call_expr))\n+                        .unwrap_or(false);\n+                    if is_unsafe {\n                         h |= HighlightModifier::Unsafe;\n                     }\n                 }\n@@ -809,9 +810,9 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n         METHOD_CALL_EXPR => {\n             let mut h = Highlight::new(HighlightTag::Function);\n             let is_unsafe = ast::MethodCallExpr::cast(parent)\n-                .and_then(|method_call_expr| sema.is_unsafe_method_call(method_call_expr));\n-\n-            if is_unsafe.is_some() {\n+                .map(|method_call_expr| sema.is_unsafe_method_call(method_call_expr))\n+                .unwrap_or(false);\n+            if is_unsafe {\n                 h |= HighlightModifier::Unsafe;\n             }\n "}]}