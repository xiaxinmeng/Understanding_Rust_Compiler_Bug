{"sha": "f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYjJkN2YzYTdiNGRmY2NlNDZmM2FkMTM5NzE3ZThhOWUzYzk1MTg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-11-26T17:01:19Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-11-26T17:01:19Z"}, "message": "improve error messages", "tree": {"sha": "b4eadda1a45e2df73f5b270d2383308c8a1253a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4eadda1a45e2df73f5b270d2383308c8a1253a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "html_url": "https://github.com/rust-lang/rust/commit/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/comments", "author": null, "committer": null, "parents": [{"sha": "47d53e8d789900e0b1e116fa0bbc8d7ba2506d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/47d53e8d789900e0b1e116fa0bbc8d7ba2506d72", "html_url": "https://github.com/rust-lang/rust/commit/47d53e8d789900e0b1e116fa0bbc8d7ba2506d72"}], "stats": {"total": 137, "additions": 72, "deletions": 65}, "files": [{"sha": "00c602d033f8fd4eef0bbcb4c0d92fac141eb148", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "patch": "@@ -479,6 +479,7 @@ define_dep_nodes!( <'tcx>\n     [] BorrowCheck(DefId),\n     [] MirBorrowCheck(DefId),\n     [] UnsafetyCheckResult(DefId),\n+    [] UnsafeDeriveOnReprPacked(DefId),\n \n     [] Reachability,\n     [] MirKeys,"}, {"sha": "fb3600182d8a6ce0901a1468db316f04eb79e8b7", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "patch": "@@ -169,6 +169,9 @@ define_maps! { <'tcx>\n     /// The result of unsafety-checking this def-id.\n     [] fn unsafety_check_result: UnsafetyCheckResult(DefId) -> mir::UnsafetyCheckResult,\n \n+    /// HACK: when evaluated, this reports a \"unsafe derive on repr(packed)\" error\n+    [] fn unsafe_derive_on_repr_packed: UnsafeDeriveOnReprPacked(DefId) -> (),\n+\n     /// The signature of functions and closures.\n     [] fn fn_sig: FnSignature(DefId) -> ty::PolyFnSig<'tcx>,\n "}, {"sha": "07b97c27a9963b5210742c60702bd7e24bd930a1", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "patch": "@@ -768,6 +768,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::BorrowCheck => { force!(borrowck, def_id!()); }\n         DepKind::MirBorrowCheck => { force!(mir_borrowck, def_id!()); }\n         DepKind::UnsafetyCheckResult => { force!(unsafety_check_result, def_id!()); }\n+        DepKind::UnsafeDeriveOnReprPacked => { force!(unsafe_derive_on_repr_packed, def_id!()); }\n         DepKind::Reachability => { force!(reachable_set, LOCAL_CRATE); }\n         DepKind::MirKeys => { force!(mir_keys, LOCAL_CRATE); }\n         DepKind::CrateVariances => { force!(crate_variances, LOCAL_CRATE); }"}, {"sha": "c8a23280079c1c12ce654c690d52afcaed78caf9", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "patch": "@@ -259,6 +259,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         unsafety_check_result,\n+        unsafe_derive_on_repr_packed,\n         ..*providers\n     };\n }\n@@ -341,6 +342,27 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     }\n }\n \n+fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n+    let lint_node_id = match tcx.hir.as_local_node_id(def_id) {\n+        Some(node_id) => node_id,\n+        None => bug!(\"checking unsafety for non-local def id {:?}\", def_id)\n+    };\n+\n+    // FIXME: when we make this a hard error, this should have its\n+    // own error code.\n+    let message = if !tcx.generics_of(def_id).types.is_empty() {\n+        format!(\"#[derive] can't be used on a #[repr(packed)] struct with \\\n+                 type parameters (error E0133)\")\n+    } else {\n+        format!(\"#[derive] can't be used on a non-Copy #[repr(packed)] struct \\\n+                 (error E0133)\")\n+    };\n+    tcx.lint_node(SAFE_PACKED_BORROWS,\n+                  lint_node_id,\n+                  tcx.def_span(def_id),\n+                  &message);\n+}\n+\n /// Return the NodeId for an enclosing scope that is also `unsafe`\n fn is_enclosed(tcx: TyCtxt,\n                used_unsafe: &FxHashSet<ast::NodeId>,\n@@ -402,7 +424,6 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n         unsafe_blocks\n     } = tcx.unsafety_check_result(def_id);\n \n-    let mut emitted_derive_error = false;\n     for &UnsafetyViolation {\n         source_info, description, kind\n     } in violations.iter() {\n@@ -423,29 +444,15 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                                         block (error E0133)\", description));\n             }\n             UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n-                if emitted_derive_error {\n-                    continue\n-                }\n-\n-                let message = if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n-                    emitted_derive_error = true;\n-                    // FIXME: when we make this a hard error, this should have its\n-                    // own error code.\n-                    if !tcx.generics_of(impl_def_id).types.is_empty() {\n-                        format!(\"#[derive] can't be used on a #[repr(packed)] struct with \\\n-                                 type parameters (error E0133)\")\n-                    } else {\n-                        format!(\"#[derive] can't be used on a non-Copy #[repr(packed)] struct \\\n-                                (error E0133)\")\n-                    }\n+                if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n+                    tcx.unsafe_derive_on_repr_packed(impl_def_id);\n                 } else {\n-                   format!(\"{} requires unsafe function or \\\n-                            block (error E0133)\", description)\n-                };\n-                tcx.lint_node(SAFE_PACKED_BORROWS,\n-                              lint_node_id,\n-                              source_info.span,\n-                              &message);\n+                    tcx.lint_node(SAFE_PACKED_BORROWS,\n+                                  lint_node_id,\n+                                  source_info.span,\n+                                  &format!(\"{} requires unsafe function or \\\n+                                            block (error E0133)\", description));\n+                }\n             }\n         }\n     }"}, {"sha": "55dc338020932af9c298efbb664fdccae6d0f5a6", "filename": "src/test/compile-fail/deriving-with-repr-packed-not-copy.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/47d53e8d789900e0b1e116fa0bbc8d7ba2506d72/src%2Ftest%2Fcompile-fail%2Fderiving-with-repr-packed-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d53e8d789900e0b1e116fa0bbc8d7ba2506d72/src%2Ftest%2Fcompile-fail%2Fderiving-with-repr-packed-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-with-repr-packed-not-copy.rs?ref=47d53e8d789900e0b1e116fa0bbc8d7ba2506d72", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![deny(safe_packed_borrows)]\n-\n-// check that derive on a packed struct with non-Copy fields\n-// correctly. This can't be made to work perfectly because\n-// we can't just use the field from the struct as it might\n-// not be aligned.\n-\n-#[derive(PartialEq)]\n-struct Y(usize);\n-\n-#[derive(PartialEq)]\n-#[repr(packed)]\n-struct X(Y);\n-//~^ ERROR #[derive] can't be used on a non-Copy #[repr(packed)]\n-//~| hard error\n-\n-fn main() {\n-}"}, {"sha": "0c52829799ea80be7829ca6485e6912272d0d50a", "filename": "src/test/ui/deriving-with-repr-packed.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-with-repr-packed.rs?ref=f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "patch": "@@ -10,18 +10,32 @@\n \n #![deny(safe_packed_borrows)]\n \n-// check that deriving a non-Copy packed struct is an error.\n+// check that derive on a packed struct with non-Copy fields\n+// correctly. This can't be made to work perfectly because\n+// we can't just use the field from the struct as it might\n+// not be aligned.\n+\n #[derive(Copy, Clone, PartialEq, Eq)]\n-#[repr(packed)]\n-pub struct Foo<T>(T, T, T);\n //~^ ERROR #[derive] can't be used\n //~| hard error\n //~^^^ ERROR #[derive] can't be used\n //~| hard error\n+#[repr(packed)]\n+pub struct Foo<T>(T, T, T);\n+\n #[derive(PartialEq, Eq)]\n+//~^ ERROR #[derive] can't be used\n+//~| hard error\n #[repr(packed)]\n pub struct Bar(u32, u32, u32);\n-//~^ ERROR #[derive] can't be used\n+\n+#[derive(PartialEq)]\n+struct Y(usize);\n+\n+#[derive(PartialEq)]\n+//~^ ERROR #[derive] can't be used on a non-Copy #[repr(packed)]\n //~| hard error\n+#[repr(packed)]\n+struct X(Y);\n \n fn main() {}"}, {"sha": "48208faa6b5e20c5f052c75fb6ec4012541314c9", "filename": "src/test/ui/deriving-with-repr-packed.stderr", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving-with-repr-packed.stderr?ref=f3b2d7f3a7b4dfcce46f3ad139717e8a9e3c9518", "patch": "@@ -1,8 +1,8 @@\n error: #[derive] can't be used on a #[repr(packed)] struct with type parameters (error E0133)\n-  --> $DIR/deriving-with-repr-packed.rs:16:19\n+  --> $DIR/deriving-with-repr-packed.rs:18:16\n    |\n-16 | pub struct Foo<T>(T, T, T);\n-   |                   ^^\n+18 | #[derive(Copy, Clone, PartialEq, Eq)]\n+   |                ^^^^^\n    |\n note: lint level defined here\n   --> $DIR/deriving-with-repr-packed.rs:11:9\n@@ -13,22 +13,31 @@ note: lint level defined here\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n \n error: #[derive] can't be used on a #[repr(packed)] struct with type parameters (error E0133)\n-  --> $DIR/deriving-with-repr-packed.rs:16:19\n+  --> $DIR/deriving-with-repr-packed.rs:18:23\n    |\n-16 | pub struct Foo<T>(T, T, T);\n-   |                   ^^\n+18 | #[derive(Copy, Clone, PartialEq, Eq)]\n+   |                       ^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n \n error: #[derive] can't be used on a non-Copy #[repr(packed)] struct (error E0133)\n-  --> $DIR/deriving-with-repr-packed.rs:23:16\n+  --> $DIR/deriving-with-repr-packed.rs:26:10\n    |\n-23 | pub struct Bar(u32, u32, u32);\n-   |                ^^^^\n+26 | #[derive(PartialEq, Eq)]\n+   |          ^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n \n-error: aborting due to 5 previous errors\n+error: #[derive] can't be used on a non-Copy #[repr(packed)] struct (error E0133)\n+  --> $DIR/deriving-with-repr-packed.rs:35:10\n+   |\n+35 | #[derive(PartialEq)]\n+   |          ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+\n+error: aborting due to 4 previous errors\n "}]}