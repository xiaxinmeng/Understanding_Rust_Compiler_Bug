{"sha": "b02e53de341997d9f3b43a72cb17cd37ae269c3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMmU1M2RlMzQxOTk3ZDlmM2I0M2E3MmNiMTdjZDM3YWUyNjljM2E=", "commit": {"author": {"name": "Philipp Krones", "email": "uwdkn@student.kit.edu", "date": "2018-07-24T09:23:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-24T09:23:01Z"}, "message": "Merge pull request #2951 from etaoins/allow-pass-by-ref-on-ref-return\n\nAllow pass by reference if we return a reference", "tree": {"sha": "3d64b970e0f7cdb124759b9482112d290c1129bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d64b970e0f7cdb124759b9482112d290c1129bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b02e53de341997d9f3b43a72cb17cd37ae269c3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbVu/1CRBK7hj4Ov3rIwAAdHIIAB9d2++0VV2Mqzanunvkd8IO\nhR+yqaKZYrlhJIWBocjSJ4LQ4YvvwuhhoUbxKYkCEaupVh+sz/N3lwEHRQjDu/KH\nTsigEH68UDEhi916fvu2G3RLGwtkAKDmgJ9lsupLPvNqrSalGfXpK/JGfHIrFcKP\nSBIuGam6o6yejKRmww8YuSJLHMXy4gd2kwT6aSySHk25/dYnmrqjGlSjSsUN10LH\nYl+8mDMR6VGDVlmsCjloAbLWuOPQtP5of921YIh35G2UjTuX7n4JyUicLX8LPh4t\nPMO6qPs8nPKeGYKYtmPOJil00QfgqzdI7cKgaUi/gMisVQaZRYJKCStQ4t/zCkI=\n=jr1H\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d64b970e0f7cdb124759b9482112d290c1129bc\nparent 3f9b837ec8e065e7f663c3156ba1184dafbab446\nparent 0afa5e1e215d977a88c50e6776e8abb5d7e82d22\nauthor Philipp Krones <uwdkn@student.kit.edu> 1532424181 +0200\ncommitter GitHub <noreply@github.com> 1532424181 +0200\n\nMerge pull request #2951 from etaoins/allow-pass-by-ref-on-ref-return\n\nAllow pass by reference if we return a reference"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b02e53de341997d9f3b43a72cb17cd37ae269c3a", "html_url": "https://github.com/rust-lang/rust/commit/b02e53de341997d9f3b43a72cb17cd37ae269c3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b02e53de341997d9f3b43a72cb17cd37ae269c3a/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f9b837ec8e065e7f663c3156ba1184dafbab446", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f9b837ec8e065e7f663c3156ba1184dafbab446", "html_url": "https://github.com/rust-lang/rust/commit/3f9b837ec8e065e7f663c3156ba1184dafbab446"}, {"sha": "0afa5e1e215d977a88c50e6776e8abb5d7e82d22", "url": "https://api.github.com/repos/rust-lang/rust/commits/0afa5e1e215d977a88c50e6776e8abb5d7e82d22", "html_url": "https://github.com/rust-lang/rust/commit/0afa5e1e215d977a88c50e6776e8abb5d7e82d22"}], "stats": {"total": 81, "additions": 54, "deletions": 27}, "files": [{"sha": "6a048b1921384b87af6f201cd32d1e132233b2a2", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b02e53de341997d9f3b43a72cb17cd37ae269c3a/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e53de341997d9f3b43a72cb17cd37ae269c3a/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=b02e53de341997d9f3b43a72cb17cd37ae269c3a", "patch": "@@ -31,6 +31,12 @@ use crate::utils::{in_macro, is_copy, is_self, span_lint_and_sugg, snippet};\n /// The configuration option `trivial_copy_size_limit` can be set to override\n /// this limit for a project.\n ///\n+/// This lint attempts to allow passing arguments by reference if a reference\n+/// to that argument is returned. This is implemented by comparing the lifetime\n+/// of the argument and return value for equality. However, this can cause\n+/// false positives in cases involving multiple lifetimes that are bounded by\n+/// each other.\n+///\n /// **Example:**\n /// ```rust\n /// fn foo(v: &u32) {\n@@ -115,14 +121,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n         let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n \n+        // Use lifetimes to determine if we're returning a reference to the\n+        // argument. In that case we can't switch to pass-by-value as the\n+        // argument will not live long enough.\n+        let output_lt = if let TypeVariants::TyRef(output_lt, _, _) = fn_sig.output().sty {\n+            Some(output_lt)\n+        } else {\n+            None\n+        };\n+\n         for ((input, &ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {\n             // All spans generated from a proc-macro invocation are the same...\n             if span == input.span {\n                 return;\n             }\n \n             if_chain! {\n-                if let TypeVariants::TyRef(_, ty, Mutability::MutImmutable) = ty.sty;\n+                if let TypeVariants::TyRef(input_lt, ty, Mutability::MutImmutable) = ty.sty;\n+                if Some(input_lt) != output_lt;\n                 if is_copy(cx, ty);\n                 if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());\n                 if size <= self.limit;"}, {"sha": "c6773add244305186f2b8657174633e260464ffe", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b02e53de341997d9f3b43a72cb17cd37ae269c3a/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e53de341997d9f3b43a72cb17cd37ae269c3a/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=b02e53de341997d9f3b43a72cb17cd37ae269c3a", "patch": "@@ -11,6 +11,15 @@ type Baz = u32;\n fn good(a: &mut u32, b: u32, c: &Bar) {\n }\n \n+fn good_return_implicit_lt_ref(foo: &Foo) -> &u32 {\n+    &foo.0\n+}\n+\n+#[allow(needless_lifetimes)]\n+fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {\n+    &foo.0\n+}\n+\n fn bad(x: &u32, y: &Foo, z: &Baz) {\n }\n \n@@ -46,6 +55,8 @@ fn main() {\n     let (mut foo, bar) = (Foo(0), Bar([0; 24]));\n     let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);\n     good(&mut a, b, &c);\n+    good_return_implicit_lt_ref(&y);\n+    good_return_explicit_lt_ref(&y);\n     bad(&x, &y, &z);\n     foo.good(&mut a, b, &c);\n     foo.good2();"}, {"sha": "db25cc5a02011b2a278ef7e580948c88a9dad3ab", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b02e53de341997d9f3b43a72cb17cd37ae269c3a/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b02e53de341997d9f3b43a72cb17cd37ae269c3a/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=b02e53de341997d9f3b43a72cb17cd37ae269c3a", "patch": "@@ -1,81 +1,81 @@\n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:14:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:23:11\n    |\n-14 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |           ^^^^ help: consider passing by value instead: `u32`\n    |\n    = note: `-D trivially-copy-pass-by-ref` implied by `-D warnings`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:14:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:23:20\n    |\n-14 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:14:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:23:29\n    |\n-14 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+23 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:24:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:33:12\n    |\n-24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:24:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:33:22\n    |\n-24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:24:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:33:31\n    |\n-24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:24:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:33:40\n    |\n-24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+33 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:27:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:36:16\n    |\n-27 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:27:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:36:25\n    |\n-27 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:27:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:36:34\n    |\n-27 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+36 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:41:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:16\n    |\n-41 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:41:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:25\n    |\n-41 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:41:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:50:34\n    |\n-41 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+50 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: aborting due to 13 previous errors"}]}