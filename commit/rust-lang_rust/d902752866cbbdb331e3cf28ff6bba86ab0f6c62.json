{"sha": "d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MDI3NTI4NjZjYmJkYjMzMWUzY2YyOGZmNmJiYTg2YWIwZjZjNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-27T12:51:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-27T12:51:21Z"}, "message": "Auto merge of #77118 - exrook:stability-generic-parameters-2, r=varkor\n\n Stability annotations on generic parameters (take 2.5)\n\nRebase of #72314 + more tests\n\nImplements rust-lang/wg-allocators#2.", "tree": {"sha": "94ffd454f33732663936012eda8cafa4a24b23e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94ffd454f33732663936012eda8cafa4a24b23e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "html_url": "https://github.com/rust-lang/rust/commit/d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8363295d555494bbaa119eba8b16a3057e6728c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8363295d555494bbaa119eba8b16a3057e6728c", "html_url": "https://github.com/rust-lang/rust/commit/b8363295d555494bbaa119eba8b16a3057e6728c"}, {"sha": "98eab09cf4ee1a35290a2061ee0e7a19703923a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/98eab09cf4ee1a35290a2061ee0e7a19703923a8", "html_url": "https://github.com/rust-lang/rust/commit/98eab09cf4ee1a35290a2061ee0e7a19703923a8"}], "stats": {"total": 1205, "additions": 1171, "deletions": 34}, "files": [{"sha": "757156e5a7d27c1275b1e2fa112f03f388a4bdd7", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "patch": "@@ -1822,13 +1822,17 @@ impl EncodeContext<'a, 'tcx> {\n                         EntryKind::TypeParam,\n                         default.is_some(),\n                     );\n+                    if default.is_some() {\n+                        self.encode_stability(def_id.to_def_id());\n+                    }\n                 }\n                 GenericParamKind::Const { .. } => {\n                     self.encode_info_for_generic_param(\n                         def_id.to_def_id(),\n                         EntryKind::ConstParam,\n                         true,\n                     );\n+                    // FIXME(const_generics:defaults)\n                 }\n             }\n         }"}, {"sha": "7e2415fd544d4c9a209776aeb4559fcbf9638bea", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "patch": "@@ -392,9 +392,27 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// If the item defined by `def_id` is unstable and the corresponding `#![feature]` does not\n     /// exist, emits an error.\n     ///\n-    /// Additionally, this function will also check if the item is deprecated. If so, and `id` is\n-    /// not `None`, a deprecated lint attached to `id` will be emitted.\n+    /// This function will also check if the item is deprecated.\n+    /// If so, and `id` is not `None`, a deprecated lint attached to `id` will be emitted.\n     pub fn check_stability(self, def_id: DefId, id: Option<HirId>, span: Span) {\n+        self.check_optional_stability(def_id, id, span, |span, def_id| {\n+            // The API could be uncallable for other reasons, for example when a private module\n+            // was referenced.\n+            self.sess.delay_span_bug(span, &format!(\"encountered unmarked API: {:?}\", def_id));\n+        })\n+    }\n+\n+    /// Like `check_stability`, except that we permit items to have custom behaviour for\n+    /// missing stability attributes (not necessarily just emit a `bug!`). This is necessary\n+    /// for default generic parameters, which only have stability attributes if they were\n+    /// added after the type on which they're defined.\n+    pub fn check_optional_stability(\n+        self,\n+        def_id: DefId,\n+        id: Option<HirId>,\n+        span: Span,\n+        unmarked: impl FnOnce(Span, DefId) -> (),\n+    ) {\n         let soft_handler = |lint, span, msg: &_| {\n             self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, |lint| {\n                 lint.build(msg).emit()\n@@ -405,11 +423,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             EvalResult::Deny { feature, reason, issue, is_soft } => {\n                 report_unstable(self.sess, feature, reason, issue, is_soft, span, soft_handler)\n             }\n-            EvalResult::Unmarked => {\n-                // The API could be uncallable for other reasons, for example when a private module\n-                // was referenced.\n-                self.sess.delay_span_bug(span, &format!(\"encountered unmarked API: {:?}\", def_id));\n-            }\n+            EvalResult::Unmarked => unmarked(span, def_id),\n         }\n     }\n "}, {"sha": "b807dff5fd25dfcee64692ab6e1d48337f36968a", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 122, "deletions": 26, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "patch": "@@ -37,6 +37,24 @@ enum AnnotationKind {\n     Container,\n }\n \n+/// Whether to inherit deprecation flags for nested items. In most cases, we do want to inherit\n+/// deprecation, because nested items rarely have individual deprecation attributes, and so\n+/// should be treated as deprecated if their parent is. However, default generic parameters\n+/// have separate deprecation attributes from their parents, so we do not wish to inherit\n+/// deprecation in this case. For example, inheriting deprecation for `T` in `Foo<T>`\n+/// would cause a duplicate warning arising from both `Foo` and `T` being deprecated.\n+#[derive(Clone)]\n+enum InheritDeprecation {\n+    Yes,\n+    No,\n+}\n+\n+impl InheritDeprecation {\n+    fn yes(&self) -> bool {\n+        matches!(self, InheritDeprecation::Yes)\n+    }\n+}\n+\n // A private tree-walker for producing an Index.\n struct Annotator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -56,14 +74,15 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         attrs: &[Attribute],\n         item_sp: Span,\n         kind: AnnotationKind,\n+        inherit_deprecation: InheritDeprecation,\n         visit_children: F,\n     ) where\n         F: FnOnce(&mut Self),\n     {\n         debug!(\"annotate(id = {:?}, attrs = {:?})\", hir_id, attrs);\n         let mut did_error = false;\n         if !self.tcx.features().staged_api {\n-            did_error = self.forbid_staged_api_attrs(hir_id, attrs);\n+            did_error = self.forbid_staged_api_attrs(hir_id, attrs, inherit_deprecation.clone());\n         }\n \n         let depr =\n@@ -80,9 +99,11 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             let depr_entry = DeprecationEntry::local(depr.clone(), hir_id);\n             self.index.depr_map.insert(hir_id, depr_entry);\n         } else if let Some(parent_depr) = self.parent_depr.clone() {\n-            is_deprecated = true;\n-            info!(\"tagging child {:?} as deprecated from parent\", hir_id);\n-            self.index.depr_map.insert(hir_id, parent_depr);\n+            if inherit_deprecation.yes() {\n+                is_deprecated = true;\n+                info!(\"tagging child {:?} as deprecated from parent\", hir_id);\n+                self.index.depr_map.insert(hir_id, parent_depr);\n+            }\n         }\n \n         if self.tcx.features().staged_api {\n@@ -186,7 +207,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         if stab.is_none() {\n             debug!(\"annotate: stab not found, parent = {:?}\", self.parent_stab);\n             if let Some(stab) = self.parent_stab {\n-                if stab.level.is_unstable() {\n+                if inherit_deprecation.yes() && stab.level.is_unstable() {\n                     self.index.stab_map.insert(hir_id, stab);\n                 }\n             }\n@@ -237,7 +258,12 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n     }\n \n     // returns true if an error occurred, used to suppress some spurious errors\n-    fn forbid_staged_api_attrs(&mut self, hir_id: HirId, attrs: &[Attribute]) -> bool {\n+    fn forbid_staged_api_attrs(\n+        &mut self,\n+        hir_id: HirId,\n+        attrs: &[Attribute],\n+        inherit_deprecation: InheritDeprecation,\n+    ) -> bool {\n         // Emit errors for non-staged-api crates.\n         let unstable_attrs = [\n             sym::unstable,\n@@ -265,7 +291,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         // Propagate unstability.  This can happen even for non-staged-api crates in case\n         // -Zforce-unstable-if-unmarked is set.\n         if let Some(stab) = self.parent_stab {\n-            if stab.level.is_unstable() {\n+            if inherit_deprecation.yes() && stab.level.is_unstable() {\n                 self.index.stab_map.insert(hir_id, stab);\n             }\n         }\n@@ -301,54 +327,119 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             }\n             hir::ItemKind::Struct(ref sd, _) => {\n                 if let Some(ctor_hir_id) = sd.ctor_hir_id() {\n-                    self.annotate(ctor_hir_id, &i.attrs, i.span, AnnotationKind::Required, |_| {})\n+                    self.annotate(\n+                        ctor_hir_id,\n+                        &i.attrs,\n+                        i.span,\n+                        AnnotationKind::Required,\n+                        InheritDeprecation::Yes,\n+                        |_| {},\n+                    )\n                 }\n             }\n             _ => {}\n         }\n \n-        self.annotate(i.hir_id, &i.attrs, i.span, kind, |v| intravisit::walk_item(v, i));\n+        self.annotate(i.hir_id, &i.attrs, i.span, kind, InheritDeprecation::Yes, |v| {\n+            intravisit::walk_item(v, i)\n+        });\n         self.in_trait_impl = orig_in_trait_impl;\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n-        self.annotate(ti.hir_id, &ti.attrs, ti.span, AnnotationKind::Required, |v| {\n-            intravisit::walk_trait_item(v, ti);\n-        });\n+        self.annotate(\n+            ti.hir_id,\n+            &ti.attrs,\n+            ti.span,\n+            AnnotationKind::Required,\n+            InheritDeprecation::Yes,\n+            |v| {\n+                intravisit::walk_trait_item(v, ti);\n+            },\n+        );\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n         let kind =\n             if self.in_trait_impl { AnnotationKind::Prohibited } else { AnnotationKind::Required };\n-        self.annotate(ii.hir_id, &ii.attrs, ii.span, kind, |v| {\n+        self.annotate(ii.hir_id, &ii.attrs, ii.span, kind, InheritDeprecation::Yes, |v| {\n             intravisit::walk_impl_item(v, ii);\n         });\n     }\n \n     fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n-        self.annotate(var.id, &var.attrs, var.span, AnnotationKind::Required, |v| {\n-            if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n-                v.annotate(ctor_hir_id, &var.attrs, var.span, AnnotationKind::Required, |_| {});\n-            }\n+        self.annotate(\n+            var.id,\n+            &var.attrs,\n+            var.span,\n+            AnnotationKind::Required,\n+            InheritDeprecation::Yes,\n+            |v| {\n+                if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n+                    v.annotate(\n+                        ctor_hir_id,\n+                        &var.attrs,\n+                        var.span,\n+                        AnnotationKind::Required,\n+                        InheritDeprecation::Yes,\n+                        |_| {},\n+                    );\n+                }\n \n-            intravisit::walk_variant(v, var, g, item_id)\n-        })\n+                intravisit::walk_variant(v, var, g, item_id)\n+            },\n+        )\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx StructField<'tcx>) {\n-        self.annotate(s.hir_id, &s.attrs, s.span, AnnotationKind::Required, |v| {\n-            intravisit::walk_struct_field(v, s);\n-        });\n+        self.annotate(\n+            s.hir_id,\n+            &s.attrs,\n+            s.span,\n+            AnnotationKind::Required,\n+            InheritDeprecation::Yes,\n+            |v| {\n+                intravisit::walk_struct_field(v, s);\n+            },\n+        );\n     }\n \n     fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem<'tcx>) {\n-        self.annotate(i.hir_id, &i.attrs, i.span, AnnotationKind::Required, |v| {\n-            intravisit::walk_foreign_item(v, i);\n-        });\n+        self.annotate(\n+            i.hir_id,\n+            &i.attrs,\n+            i.span,\n+            AnnotationKind::Required,\n+            InheritDeprecation::Yes,\n+            |v| {\n+                intravisit::walk_foreign_item(v, i);\n+            },\n+        );\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n-        self.annotate(md.hir_id, &md.attrs, md.span, AnnotationKind::Required, |_| {});\n+        self.annotate(\n+            md.hir_id,\n+            &md.attrs,\n+            md.span,\n+            AnnotationKind::Required,\n+            InheritDeprecation::Yes,\n+            |_| {},\n+        );\n+    }\n+\n+    fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {\n+        let kind = match &p.kind {\n+            // FIXME(const_generics:defaults)\n+            hir::GenericParamKind::Type { default, .. } if default.is_some() => {\n+                AnnotationKind::Container\n+            }\n+            _ => AnnotationKind::Prohibited,\n+        };\n+\n+        self.annotate(p.hir_id, &p.attrs, p.span, kind, InheritDeprecation::No, |v| {\n+            intravisit::walk_generic_param(v, p);\n+        });\n     }\n }\n \n@@ -422,6 +513,10 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n         self.check_missing_stability(md.hir_id, md.span);\n     }\n+\n+    // Note that we don't need to `check_missing_stability` for default generic parameters,\n+    // as we assume that any default generic parameters without attributes are automatically\n+    // stable (assuming they have not inherited instability from their parent).\n }\n \n fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n@@ -484,6 +579,7 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n             &krate.item.attrs,\n             krate.item.span,\n             AnnotationKind::Required,\n+            InheritDeprecation::Yes,\n             |v| intravisit::walk_crate(v, krate),\n         );\n     }"}, {"sha": "46b8b2e14c7363daef2709978e325d58066ae5d9", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "patch": "@@ -360,7 +360,21 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 (GenericParamDefKind::Lifetime, GenericArg::Lifetime(lt)) => {\n                     self.ast_region_to_region(&lt, Some(param)).into()\n                 }\n-                (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n+                (GenericParamDefKind::Type { has_default, .. }, GenericArg::Type(ty)) => {\n+                    if *has_default {\n+                        tcx.check_optional_stability(\n+                            param.def_id,\n+                            Some(arg.id()),\n+                            arg.span(),\n+                            |_, _| {\n+                                // Default generic parameters may not be marked\n+                                // with stability attributes, i.e. when the\n+                                // default parameter was defined at the same time\n+                                // as the rest of the type. As such, we ignore missing\n+                                // stability attributes.\n+                            },\n+                        )\n+                    }\n                     if let (hir::TyKind::Infer, false) = (&ty.kind, self.allow_ty_infer()) {\n                         inferred_params.push(ty.span);\n                         tcx.ty_error().into()"}, {"sha": "231ab966558f995ad4e7c5148ad04f123a1bce2c", "filename": "src/test/ui/stability-attribute/auxiliary/unstable_generic_param.rs", "status": "added", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Funstable_generic_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Funstable_generic_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Funstable_generic_param.rs?ref=d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "patch": "@@ -0,0 +1,229 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub trait Trait1<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = ()> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    fn foo() -> T;\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub trait Trait2<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    fn foo() -> T;\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub trait Trait3<T = ()> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    fn foo() -> T;\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct Struct1<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub field: T,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct Struct2<T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub field: T,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct Struct3<A = isize, #[unstable(feature = \"unstable_default\", issue = \"none\")] B = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub field1: A,\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub field2: B,\n+}\n+\n+#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct Struct4<A = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub field: A,\n+}\n+\n+#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct Struct5<#[unstable(feature = \"unstable_default\", issue = \"none\")] A = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub field: A,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct Struct6<#[unstable(feature = \"unstable_default6\", issue = \"none\")] T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub field: T,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const STRUCT1: Struct1 = Struct1 { field: 1 };\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const STRUCT2: Struct2 = Struct2 { field: 1 };\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const STRUCT3: Struct3 = Struct3 { field1: 1, field2: 2 };\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const STRUCT4: Struct4 = Struct4 { field: 1 };\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const STRUCT5: Struct5 = Struct5 { field: 1 };\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub enum Enum1<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    Some(#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] T),\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    None,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub enum Enum2<T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    Some(#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] T),\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    None,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub enum Enum3<T = isize, #[unstable(feature = \"unstable_default\", issue = \"none\")] E = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    Ok(#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] T),\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    Err(#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] E),\n+}\n+\n+#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub enum Enum4<T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    Some(#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] T),\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    None,\n+}\n+\n+#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub enum Enum5<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    Some(#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] T),\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    None,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub enum Enum6<#[unstable(feature = \"unstable_default6\", issue = \"none\")] T = usize> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    Some(#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] T),\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    None,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ENUM1: Enum1 = Enum1::Some(1);\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ENUM2: Enum2 = Enum2::Some(1);\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ENUM3: Enum3 = Enum3::Ok(1);\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ENUM3B: Enum3 = Enum3::Err(1);\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ENUM4: Enum4 = Enum4::Some(1);\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ENUM5: Enum5 = Enum5::Some(1);\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub type Alias1<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = usize> = Option<T>;\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub type Alias2<T = usize> = Option<T>;\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub type Alias3<T = isize, #[unstable(feature = \"unstable_default\", issue = \"none\")] E = usize> =\n+    Result<T, E>;\n+\n+#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub type Alias4<T = usize> = Option<T>;\n+\n+#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub type Alias5<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = usize> = Option<T>;\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub type Alias6<#[unstable(feature = \"unstable_default6\", issue = \"none\")] T = usize> = Option<T>;\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ALIAS1: Alias1 = Alias1::Some(1);\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ALIAS2: Alias2 = Alias2::Some(1);\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ALIAS3: Alias3 = Alias3::Ok(1);\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ALIAS3B: Alias3 = Alias3::Err(1);\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ALIAS4: Alias4 = Alias4::Some(1);\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub const ALIAS5: Alias5 = Alias5::Some(1);\n+\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub trait Alloc {}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct System {}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+impl Alloc for System {}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct Box1<T, #[unstable(feature = \"box_alloc_param\", issue = \"none\")] A: Alloc = System> {\n+    ptr: *mut T,\n+    alloc: A,\n+}\n+\n+impl<T> Box1<T, System> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub fn new(mut t: T) -> Self {\n+        unsafe { Self { ptr: &mut t, alloc: System {} } }\n+    }\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct Box2<T, A: Alloc = System> {\n+    ptr: *mut T,\n+    alloc: A,\n+}\n+\n+impl<T> Box2<T, System> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub fn new(mut t: T) -> Self {\n+        Self { ptr: &mut t, alloc: System {} }\n+    }\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct Box3<T> {\n+    ptr: *mut T,\n+}\n+\n+impl<T> Box3<T> {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub fn new(mut t: T) -> Self {\n+        Self { ptr: &mut t }\n+    }\n+}"}, {"sha": "3fd14e25d0ef2d9f88f084211f16d9c35676ea69", "filename": "src/test/ui/stability-attribute/generics-default-stability-where.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-where.rs?ref=d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "patch": "@@ -0,0 +1,12 @@\n+// ignore-tidy-linelength\n+// aux-build:unstable_generic_param.rs\n+\n+extern crate unstable_generic_param;\n+\n+use unstable_generic_param::*;\n+\n+impl<T> Trait3<usize> for T where T: Trait2<usize> { //~ ERROR use of unstable library feature 'unstable_default'\n+    fn foo() -> usize { T::foo() }\n+}\n+\n+fn main() {}"}, {"sha": "19fa09f311ba8f02a341299a2f44377391953dae", "filename": "src/test/ui/stability-attribute/generics-default-stability-where.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-where.stderr?ref=d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability-where.rs:8:45\n+   |\n+LL | impl<T> Trait3<usize> for T where T: Trait2<usize> {\n+   |                                             ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "d6f28e3e447e20f8a00899e0ded343a9a6c0d09b", "filename": "src/test/ui/stability-attribute/generics-default-stability.rs", "status": "added", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs?ref=d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "patch": "@@ -0,0 +1,264 @@\n+// ignore-tidy-linelength\n+// aux-build:unstable_generic_param.rs\n+#![feature(unstable_default6)]\n+\n+extern crate unstable_generic_param;\n+\n+use unstable_generic_param::*;\n+\n+struct R;\n+\n+impl Trait1 for S {\n+    fn foo() -> () { () } // ok\n+}\n+\n+struct S;\n+\n+impl Trait1<usize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n+    fn foo() -> usize { 0 }\n+}\n+\n+impl Trait1<isize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n+    fn foo() -> isize { 0 }\n+}\n+\n+impl Trait2<usize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n+    fn foo() -> usize { 0 }\n+}\n+\n+impl Trait3<usize> for S {\n+    fn foo() -> usize { 0 } // ok\n+}\n+\n+fn main() {\n+    let _ = S;\n+\n+    let _: Struct1<isize> = Struct1 { field: 1 }; //~ ERROR use of unstable library feature 'unstable_default'\n+\n+    let _ = STRUCT1; // ok\n+    let _: Struct1 = STRUCT1; // ok\n+    let _: Struct1<usize> = STRUCT1; //~ ERROR use of unstable library feature 'unstable_default'\n+    let _: Struct1<isize> = Struct1 { field: 0 }; //~ ERROR use of unstable library feature 'unstable_default'\n+\n+    // Instability is not enforced for generic type parameters used in public fields.\n+    // Note how the unstable type default `usize` leaks,\n+    // and can be used without the 'unstable_default' feature.\n+    let _ = STRUCT1.field;\n+    let _ = Struct1 { field: 1 };\n+    let _ = Struct1 { field: () };\n+    let _ = Struct1 { field: 1isize };\n+    let _: Struct1 = Struct1 { field: 1 };\n+    let _: usize = STRUCT1.field;\n+    let _ = STRUCT1.field + 1;\n+    let _ = STRUCT1.field + 1usize;\n+\n+    let _ = Struct2 { field: 1 }; // ok\n+    let _: Struct2 = Struct2 { field: 1 }; // ok\n+    let _: Struct2<usize> = Struct2 { field: 1 }; // ok\n+\n+    let _ = STRUCT2;\n+    let _: Struct2 = STRUCT2; // ok\n+    let _: Struct2<usize> = STRUCT2; // ok\n+    let _: Struct2<isize> = Struct2 { field: 0 }; // ok\n+    let _ = STRUCT2.field; // ok\n+    let _: usize = STRUCT2.field; // ok\n+    let _ = STRUCT2.field + 1; // ok\n+    let _ = STRUCT2.field + 1usize; // ok\n+\n+    let _ = STRUCT3;\n+    let _: Struct3 = STRUCT3; // ok\n+    let _: Struct3<isize, usize> = STRUCT3; //~ ERROR use of unstable library feature 'unstable_default'\n+    let _: Struct3<isize> = STRUCT3; // ok\n+    let _: Struct3<isize, isize> = Struct3 { field1: 0, field2: 0 }; //~ ERROR use of unstable library feature 'unstable_default'\n+    let _: Struct3<usize, usize> = Struct3 { field1: 0, field2: 0 }; //~ ERROR use of unstable library feature 'unstable_default'\n+    let _ = STRUCT3.field1; // ok\n+    let _: isize = STRUCT3.field1; // ok\n+    let _ = STRUCT3.field1 + 1; // ok\n+    // Note the aforementioned leak.\n+    let _: usize = STRUCT3.field2; // ok\n+    let _: Struct3<usize> = Struct3 { field1: 0, field2: 0 }; // ok\n+    let _ = STRUCT3.field2 + 1; // ok\n+    let _ = STRUCT3.field2 + 1usize; // ok\n+\n+    let _ = STRUCT4;\n+    let _: Struct4<isize> = Struct4 { field: 1 };\n+    //~^ use of deprecated struct `unstable_generic_param::Struct4`: test [deprecated]\n+    //~^^ use of deprecated struct `unstable_generic_param::Struct4`: test [deprecated]\n+    //~^^^ use of deprecated field `unstable_generic_param::Struct4::field`: test [deprecated]\n+    let _ = STRUCT4;\n+    let _: Struct4 = STRUCT4; //~ use of deprecated struct `unstable_generic_param::Struct4`: test [deprecated]\n+    let _: Struct4<usize> = STRUCT4; //~ use of deprecated struct `unstable_generic_param::Struct4`: test [deprecated]\n+    let _: Struct4<isize> = Struct4 { field: 0 };\n+    //~^ use of deprecated struct `unstable_generic_param::Struct4`: test [deprecated]\n+    //~^^ use of deprecated struct `unstable_generic_param::Struct4`: test [deprecated]\n+    //~^^^ use of deprecated field `unstable_generic_param::Struct4::field`: test [deprecated]\n+\n+    let _ = STRUCT5;\n+    let _: Struct5<isize> = Struct5 { field: 1 }; //~ ERROR use of unstable library feature 'unstable_default'\n+    //~^ use of deprecated struct `unstable_generic_param::Struct5`: test [deprecated]\n+    //~^^ use of deprecated struct `unstable_generic_param::Struct5`: test [deprecated]\n+    //~^^^ use of deprecated field `unstable_generic_param::Struct5::field`: test [deprecated]\n+    let _ = STRUCT5;\n+    let _: Struct5 = STRUCT5; //~ use of deprecated struct `unstable_generic_param::Struct5`: test [deprecated]\n+    let _: Struct5<usize> = STRUCT5; //~ ERROR use of unstable library feature 'unstable_default'\n+    //~^ use of deprecated struct `unstable_generic_param::Struct5`: test [deprecated]\n+    let _: Struct5<isize> = Struct5 { field: 0 }; //~ ERROR use of unstable library feature 'unstable_default'\n+    //~^ use of deprecated struct `unstable_generic_param::Struct5`: test [deprecated]\n+    //~^^ use of deprecated struct `unstable_generic_param::Struct5`: test [deprecated]\n+    //~^^^ use of deprecated field `unstable_generic_param::Struct5::field`: test [deprecated]\n+\n+    let _: Struct6<isize> = Struct6 { field: 1 }; // ok\n+    let _: Struct6<isize> = Struct6 { field: 0 }; // ok\n+\n+    let _: Alias1<isize> = Alias1::Some(1); //~ ERROR use of unstable library feature 'unstable_default'\n+\n+    let _ = ALIAS1; // ok\n+    let _: Alias1 = ALIAS1; // ok\n+    let _: Alias1<usize> = ALIAS1; //~ ERROR use of unstable library feature 'unstable_default'\n+    let _: Alias1<isize> = Alias1::Some(0); //~ ERROR use of unstable library feature 'unstable_default'\n+\n+    // Instability is not enforced for generic type parameters used in public fields.\n+    // Note how the unstable type default `usize` leaks,\n+    // and can be used without the 'unstable_default' feature.\n+    let _ = Alias1::Some(1);\n+    let _ = Alias1::Some(());\n+    let _ = Alias1::Some(1isize);\n+    let _: Alias1 = Alias1::Some(1);\n+    let _: usize = ALIAS1.unwrap();\n+    let _ = ALIAS1.unwrap() + 1;\n+    let _ = ALIAS1.unwrap() + 1usize;\n+\n+    let _ = Alias2::Some(1); // ok\n+    let _: Alias2 = Alias2::Some(1); // ok\n+    let _: Alias2<usize> = Alias2::Some(1); // ok\n+\n+    let _ = ALIAS2;\n+    let _: Alias2 = ALIAS2; // ok\n+    let _: Alias2<usize> = ALIAS2; // ok\n+    let _: Alias2<isize> = Alias2::Some(0); // ok\n+    let _ = ALIAS2.unwrap(); // ok\n+    let _: usize = ALIAS2.unwrap(); // ok\n+    let _ = ALIAS2.unwrap() + 1; // ok\n+    let _ = ALIAS2.unwrap() + 1usize; // ok\n+\n+    let _ = ALIAS3;\n+    let _: Alias3 = ALIAS3; // ok\n+    let _: Alias3<isize, usize> = ALIAS3; //~ ERROR use of unstable library feature 'unstable_default'\n+    let _: Alias3<isize> = ALIAS3; // ok\n+    let _: Alias3<isize, isize> = Alias3::Ok(0); //~ ERROR use of unstable library feature 'unstable_default'\n+    let _: Alias3<usize, usize> = Alias3::Ok(0); //~ ERROR use of unstable library feature 'unstable_default'\n+    let _ = ALIAS3.unwrap(); // ok\n+    let _: isize = ALIAS3.unwrap(); // ok\n+    let _ = ALIAS3.unwrap() + 1; // ok\n+    // Note the aforementioned leak.\n+    let _: usize = ALIAS3B.unwrap_err(); // ok\n+    let _: Alias3<usize> = Alias3::Err(0); // ok\n+    let _ = ALIAS3B.unwrap_err() + 1; // ok\n+    let _ = ALIAS3B.unwrap_err() + 1usize; // ok\n+\n+    let _ = ALIAS4;\n+    let _: Alias4<isize> = Alias4::Some(1);\n+    //~^ use of deprecated type alias `unstable_generic_param::Alias4`: test [deprecated]\n+    //~^^ use of deprecated type alias `unstable_generic_param::Alias4`: test [deprecated]\n+    let _ = ALIAS4;\n+    let _: Alias4 = ALIAS4; //~ use of deprecated type alias `unstable_generic_param::Alias4`: test [deprecated]\n+    let _: Alias4<usize> = ALIAS4; //~ use of deprecated type alias `unstable_generic_param::Alias4`: test [deprecated]\n+    let _: Alias4<isize> = Alias4::Some(0);\n+    //~^ use of deprecated type alias `unstable_generic_param::Alias4`: test [deprecated]\n+    //~^^ use of deprecated type alias `unstable_generic_param::Alias4`: test [deprecated]\n+\n+    let _ = ALIAS5;\n+    let _: Alias5<isize> = Alias5::Some(1); //~ ERROR use of unstable library feature 'unstable_default'\n+    //~^ use of deprecated type alias `unstable_generic_param::Alias5`: test [deprecated]\n+    //~^^ use of deprecated type alias `unstable_generic_param::Alias5`: test [deprecated]\n+    let _ = ALIAS5;\n+    let _: Alias5 = ALIAS5; //~ use of deprecated type alias `unstable_generic_param::Alias5`: test [deprecated]\n+    let _: Alias5<usize> = ALIAS5; //~ ERROR use of unstable library feature 'unstable_default'\n+    //~^ use of deprecated type alias `unstable_generic_param::Alias5`: test [deprecated]\n+    let _: Alias5<isize> = Alias5::Some(0); //~ ERROR use of unstable library feature 'unstable_default'\n+    //~^ use of deprecated type alias `unstable_generic_param::Alias5`: test [deprecated]\n+    //~^^ use of deprecated type alias `unstable_generic_param::Alias5`: test [deprecated]\n+\n+    let _: Alias6<isize> = Alias6::Some(1); // ok\n+    let _: Alias6<isize> = Alias6::Some(0); // ok\n+\n+    let _: Enum1<isize> = Enum1::Some(1); //~ ERROR use of unstable library feature 'unstable_default'\n+\n+    let _ = ENUM1; // ok\n+    let _: Enum1 = ENUM1; // ok\n+    let _: Enum1<usize> = ENUM1; //~ ERROR use of unstable library feature 'unstable_default'\n+    let _: Enum1<isize> = Enum1::Some(0); //~ ERROR use of unstable library feature 'unstable_default'\n+\n+    // Instability is not enforced for generic type parameters used in public fields.\n+    // Note how the unstable type default `usize` leaks,\n+    // and can be used without the 'unstable_default' feature.\n+    let _ = Enum1::Some(1);\n+    let _ = Enum1::Some(());\n+    let _ = Enum1::Some(1isize);\n+    let _: Enum1 = Enum1::Some(1);\n+    if let Enum1::Some(x) = ENUM1 {let _: usize = x;}\n+    if let Enum1::Some(x) = ENUM1 {let _ = x + 1;}\n+    if let Enum1::Some(x) = ENUM1 {let _ = x + 1usize;}\n+\n+    let _ = Enum2::Some(1); // ok\n+    let _: Enum2 = Enum2::Some(1); // ok\n+    let _: Enum2<usize> = Enum2::Some(1); // ok\n+\n+    let _ = ENUM2;\n+    let _: Enum2 = ENUM2; // ok\n+    let _: Enum2<usize> = ENUM2; // ok\n+    let _: Enum2<isize> = Enum2::Some(0); // ok\n+    if let Enum2::Some(x) = ENUM2 {let _ = x;} // ok\n+    if let Enum2::Some(x) = ENUM2 {let _: usize = x;} // ok\n+    if let Enum2::Some(x) = ENUM2 {let _ = x + 1;} // ok\n+    if let Enum2::Some(x) = ENUM2 {let _ = x + 1usize;} // ok\n+\n+    let _ = ENUM3;\n+    let _: Enum3 = ENUM3; // ok\n+    let _: Enum3<isize, usize> = ENUM3; //~ ERROR use of unstable library feature 'unstable_default'\n+    let _: Enum3<isize> = ENUM3; // ok\n+    let _: Enum3<isize, isize> = Enum3::Ok(0); //~ ERROR use of unstable library feature 'unstable_default'\n+    let _: Enum3<usize, usize> = Enum3::Ok(0); //~ ERROR use of unstable library feature 'unstable_default'\n+    if let Enum3::Ok(x) = ENUM3 {let _ = x;} // ok\n+    if let Enum3::Ok(x) = ENUM3 {let _: isize = x;} // ok\n+    if let Enum3::Ok(x) = ENUM3 {let _ = x + 1;} // ok\n+    // Note the aforementioned leak.\n+    if let Enum3::Err(x) = ENUM3B {let _: usize = x;} // ok\n+    let _: Enum3<usize> = Enum3::Err(0); // ok\n+    if let Enum3::Err(x) = ENUM3B {let _ = x + 1;} // ok\n+    if let Enum3::Err(x) = ENUM3B {let _ = x + 1usize;} // ok\n+\n+    let _ = ENUM4;\n+    let _: Enum4<isize> = Enum4::Some(1);\n+    //~^ use of deprecated variant `unstable_generic_param::Enum4::Some`: test [deprecated]\n+    //~^^ use of deprecated enum `unstable_generic_param::Enum4`: test [deprecated]\n+    let _ = ENUM4;\n+    let _: Enum4 = ENUM4; //~ use of deprecated enum `unstable_generic_param::Enum4`: test [deprecated]\n+    let _: Enum4<usize> = ENUM4; //~ use of deprecated enum `unstable_generic_param::Enum4`: test [deprecated]\n+    let _: Enum4<isize> = Enum4::Some(0);\n+    //~^ use of deprecated variant `unstable_generic_param::Enum4::Some`: test [deprecated]\n+    //~^^ use of deprecated enum `unstable_generic_param::Enum4`: test [deprecated]\n+\n+    let _ = ENUM5;\n+    let _: Enum5<isize> = Enum5::Some(1); //~ ERROR use of unstable library feature 'unstable_default'\n+    //~^ use of deprecated variant `unstable_generic_param::Enum5::Some`: test [deprecated]\n+    //~^^ use of deprecated enum `unstable_generic_param::Enum5`: test [deprecated]\n+    let _ = ENUM5;\n+    let _: Enum5 = ENUM5; //~ use of deprecated enum `unstable_generic_param::Enum5`: test [deprecated]\n+    let _: Enum5<usize> = ENUM5; //~ ERROR use of unstable library feature 'unstable_default'\n+    //~^ use of deprecated enum `unstable_generic_param::Enum5`: test [deprecated]\n+    let _: Enum5<isize> = Enum5::Some(0); //~ ERROR use of unstable library feature 'unstable_default'\n+    //~^ use of deprecated variant `unstable_generic_param::Enum5::Some`: test [deprecated]\n+    //~^^ use of deprecated enum `unstable_generic_param::Enum5`: test [deprecated]\n+\n+    let _: Enum6<isize> = Enum6::Some(1); // ok\n+    let _: Enum6<isize> = Enum6::Some(0); // ok\n+\n+    let _: Box1<isize, System> = Box1::new(1); //~ ERROR use of unstable library feature 'box_alloc_param'\n+    let _: Box1<isize> = Box1::new(1); // ok\n+\n+    let _: Box2<isize, System> = Box2::new(1); // ok\n+    let _: Box2<isize> = Box2::new(1); // ok\n+\n+    let _: Box3<isize> = Box3::new(1); // ok\n+}"}, {"sha": "a5df70bb8b3dd8665cf9a45cf14ba4ce292f6ab8", "filename": "src/test/ui/stability-attribute/generics-default-stability.stderr", "status": "added", "additions": 493, "deletions": 0, "changes": 493, "blob_url": "https://github.com/rust-lang/rust/blob/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d902752866cbbdb331e3cf28ff6bba86ab0f6c62/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr?ref=d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "patch": "@@ -0,0 +1,493 @@\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:17:13\n+   |\n+LL | impl Trait1<usize> for S {\n+   |             ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:21:13\n+   |\n+LL | impl Trait1<isize> for S {\n+   |             ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:25:13\n+   |\n+LL | impl Trait2<usize> for S {\n+   |             ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n+  --> $DIR/generics-default-stability.rs:84:29\n+   |\n+LL |     let _: Struct4<isize> = Struct4 { field: 1 };\n+   |                             ^^^^^^^\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n+  --> $DIR/generics-default-stability.rs:84:12\n+   |\n+LL |     let _: Struct4<isize> = Struct4 { field: 1 };\n+   |            ^^^^^^^^^^^^^^\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n+  --> $DIR/generics-default-stability.rs:89:12\n+   |\n+LL |     let _: Struct4 = STRUCT4;\n+   |            ^^^^^^^\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n+  --> $DIR/generics-default-stability.rs:90:12\n+   |\n+LL |     let _: Struct4<usize> = STRUCT4;\n+   |            ^^^^^^^^^^^^^^\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n+  --> $DIR/generics-default-stability.rs:91:29\n+   |\n+LL |     let _: Struct4<isize> = Struct4 { field: 0 };\n+   |                             ^^^^^^^\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n+  --> $DIR/generics-default-stability.rs:91:12\n+   |\n+LL |     let _: Struct4<isize> = Struct4 { field: 0 };\n+   |            ^^^^^^^^^^^^^^\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n+  --> $DIR/generics-default-stability.rs:97:29\n+   |\n+LL |     let _: Struct5<isize> = Struct5 { field: 1 };\n+   |                             ^^^^^^^\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n+  --> $DIR/generics-default-stability.rs:97:12\n+   |\n+LL |     let _: Struct5<isize> = Struct5 { field: 1 };\n+   |            ^^^^^^^^^^^^^^\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n+  --> $DIR/generics-default-stability.rs:102:12\n+   |\n+LL |     let _: Struct5 = STRUCT5;\n+   |            ^^^^^^^\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n+  --> $DIR/generics-default-stability.rs:103:12\n+   |\n+LL |     let _: Struct5<usize> = STRUCT5;\n+   |            ^^^^^^^^^^^^^^\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n+  --> $DIR/generics-default-stability.rs:105:29\n+   |\n+LL |     let _: Struct5<isize> = Struct5 { field: 0 };\n+   |                             ^^^^^^^\n+\n+warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n+  --> $DIR/generics-default-stability.rs:105:12\n+   |\n+LL |     let _: Struct5<isize> = Struct5 { field: 0 };\n+   |            ^^^^^^^^^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n+  --> $DIR/generics-default-stability.rs:160:28\n+   |\n+LL |     let _: Alias4<isize> = Alias4::Some(1);\n+   |                            ^^^^^^^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n+  --> $DIR/generics-default-stability.rs:160:12\n+   |\n+LL |     let _: Alias4<isize> = Alias4::Some(1);\n+   |            ^^^^^^^^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n+  --> $DIR/generics-default-stability.rs:164:12\n+   |\n+LL |     let _: Alias4 = ALIAS4;\n+   |            ^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n+  --> $DIR/generics-default-stability.rs:165:12\n+   |\n+LL |     let _: Alias4<usize> = ALIAS4;\n+   |            ^^^^^^^^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n+  --> $DIR/generics-default-stability.rs:166:28\n+   |\n+LL |     let _: Alias4<isize> = Alias4::Some(0);\n+   |                            ^^^^^^^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n+  --> $DIR/generics-default-stability.rs:166:12\n+   |\n+LL |     let _: Alias4<isize> = Alias4::Some(0);\n+   |            ^^^^^^^^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n+  --> $DIR/generics-default-stability.rs:171:28\n+   |\n+LL |     let _: Alias5<isize> = Alias5::Some(1);\n+   |                            ^^^^^^^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n+  --> $DIR/generics-default-stability.rs:171:12\n+   |\n+LL |     let _: Alias5<isize> = Alias5::Some(1);\n+   |            ^^^^^^^^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n+  --> $DIR/generics-default-stability.rs:175:12\n+   |\n+LL |     let _: Alias5 = ALIAS5;\n+   |            ^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n+  --> $DIR/generics-default-stability.rs:176:12\n+   |\n+LL |     let _: Alias5<usize> = ALIAS5;\n+   |            ^^^^^^^^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n+  --> $DIR/generics-default-stability.rs:178:28\n+   |\n+LL |     let _: Alias5<isize> = Alias5::Some(0);\n+   |                            ^^^^^^^^^^^^\n+\n+warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n+  --> $DIR/generics-default-stability.rs:178:12\n+   |\n+LL |     let _: Alias5<isize> = Alias5::Some(0);\n+   |            ^^^^^^^^^^^^^\n+\n+warning: use of deprecated variant `unstable_generic_param::Enum4::Some`: test\n+  --> $DIR/generics-default-stability.rs:232:27\n+   |\n+LL |     let _: Enum4<isize> = Enum4::Some(1);\n+   |                           ^^^^^^^^^^^\n+\n+warning: use of deprecated enum `unstable_generic_param::Enum4`: test\n+  --> $DIR/generics-default-stability.rs:232:12\n+   |\n+LL |     let _: Enum4<isize> = Enum4::Some(1);\n+   |            ^^^^^^^^^^^^\n+\n+warning: use of deprecated enum `unstable_generic_param::Enum4`: test\n+  --> $DIR/generics-default-stability.rs:236:12\n+   |\n+LL |     let _: Enum4 = ENUM4;\n+   |            ^^^^^\n+\n+warning: use of deprecated enum `unstable_generic_param::Enum4`: test\n+  --> $DIR/generics-default-stability.rs:237:12\n+   |\n+LL |     let _: Enum4<usize> = ENUM4;\n+   |            ^^^^^^^^^^^^\n+\n+warning: use of deprecated variant `unstable_generic_param::Enum4::Some`: test\n+  --> $DIR/generics-default-stability.rs:238:27\n+   |\n+LL |     let _: Enum4<isize> = Enum4::Some(0);\n+   |                           ^^^^^^^^^^^\n+\n+warning: use of deprecated enum `unstable_generic_param::Enum4`: test\n+  --> $DIR/generics-default-stability.rs:238:12\n+   |\n+LL |     let _: Enum4<isize> = Enum4::Some(0);\n+   |            ^^^^^^^^^^^^\n+\n+warning: use of deprecated variant `unstable_generic_param::Enum5::Some`: test\n+  --> $DIR/generics-default-stability.rs:243:27\n+   |\n+LL |     let _: Enum5<isize> = Enum5::Some(1);\n+   |                           ^^^^^^^^^^^\n+\n+warning: use of deprecated enum `unstable_generic_param::Enum5`: test\n+  --> $DIR/generics-default-stability.rs:243:12\n+   |\n+LL |     let _: Enum5<isize> = Enum5::Some(1);\n+   |            ^^^^^^^^^^^^\n+\n+warning: use of deprecated enum `unstable_generic_param::Enum5`: test\n+  --> $DIR/generics-default-stability.rs:247:12\n+   |\n+LL |     let _: Enum5 = ENUM5;\n+   |            ^^^^^\n+\n+warning: use of deprecated enum `unstable_generic_param::Enum5`: test\n+  --> $DIR/generics-default-stability.rs:248:12\n+   |\n+LL |     let _: Enum5<usize> = ENUM5;\n+   |            ^^^^^^^^^^^^\n+\n+warning: use of deprecated variant `unstable_generic_param::Enum5::Some`: test\n+  --> $DIR/generics-default-stability.rs:250:27\n+   |\n+LL |     let _: Enum5<isize> = Enum5::Some(0);\n+   |                           ^^^^^^^^^^^\n+\n+warning: use of deprecated enum `unstable_generic_param::Enum5`: test\n+  --> $DIR/generics-default-stability.rs:250:12\n+   |\n+LL |     let _: Enum5<isize> = Enum5::Some(0);\n+   |            ^^^^^^^^^^^^\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:36:20\n+   |\n+LL |     let _: Struct1<isize> = Struct1 { field: 1 };\n+   |                    ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:40:20\n+   |\n+LL |     let _: Struct1<usize> = STRUCT1;\n+   |                    ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:41:20\n+   |\n+LL |     let _: Struct1<isize> = Struct1 { field: 0 };\n+   |                    ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:70:27\n+   |\n+LL |     let _: Struct3<isize, usize> = STRUCT3;\n+   |                           ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:72:27\n+   |\n+LL |     let _: Struct3<isize, isize> = Struct3 { field1: 0, field2: 0 };\n+   |                           ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:73:27\n+   |\n+LL |     let _: Struct3<usize, usize> = Struct3 { field1: 0, field2: 0 };\n+   |                           ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:97:20\n+   |\n+LL |     let _: Struct5<isize> = Struct5 { field: 1 };\n+   |                    ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:103:20\n+   |\n+LL |     let _: Struct5<usize> = STRUCT5;\n+   |                    ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:105:20\n+   |\n+LL |     let _: Struct5<isize> = Struct5 { field: 0 };\n+   |                    ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:113:19\n+   |\n+LL |     let _: Alias1<isize> = Alias1::Some(1);\n+   |                   ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:117:19\n+   |\n+LL |     let _: Alias1<usize> = ALIAS1;\n+   |                   ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:118:19\n+   |\n+LL |     let _: Alias1<isize> = Alias1::Some(0);\n+   |                   ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:146:26\n+   |\n+LL |     let _: Alias3<isize, usize> = ALIAS3;\n+   |                          ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:148:26\n+   |\n+LL |     let _: Alias3<isize, isize> = Alias3::Ok(0);\n+   |                          ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:149:26\n+   |\n+LL |     let _: Alias3<usize, usize> = Alias3::Ok(0);\n+   |                          ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:171:19\n+   |\n+LL |     let _: Alias5<isize> = Alias5::Some(1);\n+   |                   ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:176:19\n+   |\n+LL |     let _: Alias5<usize> = ALIAS5;\n+   |                   ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:178:19\n+   |\n+LL |     let _: Alias5<isize> = Alias5::Some(0);\n+   |                   ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:185:18\n+   |\n+LL |     let _: Enum1<isize> = Enum1::Some(1);\n+   |                  ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:189:18\n+   |\n+LL |     let _: Enum1<usize> = ENUM1;\n+   |                  ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:190:18\n+   |\n+LL |     let _: Enum1<isize> = Enum1::Some(0);\n+   |                  ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:218:25\n+   |\n+LL |     let _: Enum3<isize, usize> = ENUM3;\n+   |                         ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:220:25\n+   |\n+LL |     let _: Enum3<isize, isize> = Enum3::Ok(0);\n+   |                         ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:221:25\n+   |\n+LL |     let _: Enum3<usize, usize> = Enum3::Ok(0);\n+   |                         ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:243:18\n+   |\n+LL |     let _: Enum5<isize> = Enum5::Some(1);\n+   |                  ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:248:18\n+   |\n+LL |     let _: Enum5<usize> = ENUM5;\n+   |                  ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability.rs:250:18\n+   |\n+LL |     let _: Enum5<isize> = Enum5::Some(0);\n+   |                  ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'box_alloc_param'\n+  --> $DIR/generics-default-stability.rs:257:24\n+   |\n+LL |     let _: Box1<isize, System> = Box1::new(1);\n+   |                        ^^^^^^\n+   |\n+   = help: add `#![feature(box_alloc_param)]` to the crate attributes to enable\n+\n+warning: use of deprecated field `unstable_generic_param::Struct4::field`: test\n+  --> $DIR/generics-default-stability.rs:84:39\n+   |\n+LL |     let _: Struct4<isize> = Struct4 { field: 1 };\n+   |                                       ^^^^^^^^\n+\n+warning: use of deprecated field `unstable_generic_param::Struct4::field`: test\n+  --> $DIR/generics-default-stability.rs:91:39\n+   |\n+LL |     let _: Struct4<isize> = Struct4 { field: 0 };\n+   |                                       ^^^^^^^^\n+\n+warning: use of deprecated field `unstable_generic_param::Struct5::field`: test\n+  --> $DIR/generics-default-stability.rs:97:39\n+   |\n+LL |     let _: Struct5<isize> = Struct5 { field: 1 };\n+   |                                       ^^^^^^^^\n+\n+warning: use of deprecated field `unstable_generic_param::Struct5::field`: test\n+  --> $DIR/generics-default-stability.rs:105:39\n+   |\n+LL |     let _: Struct5<isize> = Struct5 { field: 0 };\n+   |                                       ^^^^^^^^\n+\n+error: aborting due to 31 previous errors; 40 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}]}