{"sha": "2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZTMxZTM0YjFhMzQ1Y2VlYTIzMTk4YTdlOWUzMmU1NTdjZGJiNGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-17T11:36:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-17T11:36:15Z"}, "message": "Rename ImplDef -> Impl\n\nWe used to have `Def` suffix for all symbols, but we moved off from\nthat. `FunctionDef` isn't better than `Function`. Looks like we've\nforgot to change `Impl` though!", "tree": {"sha": "b8849bc4765766dc43e92a12f52ab287680528f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8849bc4765766dc43e92a12f52ab287680528f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "html_url": "https://github.com/rust-lang/rust/commit/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d641bccb0ffec543fa444ba523e8d4b63078fa53", "url": "https://api.github.com/repos/rust-lang/rust/commits/d641bccb0ffec543fa444ba523e8d4b63078fa53", "html_url": "https://github.com/rust-lang/rust/commit/d641bccb0ffec543fa444ba523e8d4b63078fa53"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "84e8c8047bdeea7379795af96d9b1873d974a3ae", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -402,9 +402,9 @@ impl Module {\n         def_map[self.id.local_id].scope.declarations().map(ModuleDef::from).collect()\n     }\n \n-    pub fn impl_defs(self, db: &dyn HirDatabase) -> Vec<ImplDef> {\n+    pub fn impl_defs(self, db: &dyn HirDatabase) -> Vec<Impl> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        def_map[self.id.local_id].scope.impls().map(ImplDef::from).collect()\n+        def_map[self.id.local_id].scope.impls().map(Impl::from).collect()\n     }\n \n     pub(crate) fn with_module_id(self, module_id: LocalModuleId) -> Module {\n@@ -1007,7 +1007,7 @@ pub enum AssocItem {\n }\n pub enum AssocItemContainer {\n     Trait(Trait),\n-    ImplDef(ImplDef),\n+    Impl(Impl),\n }\n pub trait AsAssocItem {\n     fn as_assoc_item(self, db: &dyn HirDatabase) -> Option<AssocItem>;\n@@ -1064,7 +1064,7 @@ impl AssocItem {\n         };\n         match container {\n             AssocContainerId::TraitId(id) => AssocItemContainer::Trait(id.into()),\n-            AssocContainerId::ImplId(id) => AssocItemContainer::ImplDef(id.into()),\n+            AssocContainerId::ImplId(id) => AssocItemContainer::Impl(id.into()),\n             AssocContainerId::ContainerId(_) => panic!(\"invalid AssocItem\"),\n         }\n     }\n@@ -1086,7 +1086,7 @@ pub enum GenericDef {\n     Adt(Adt),\n     Trait(Trait),\n     TypeAlias(TypeAlias),\n-    ImplDef(ImplDef),\n+    Impl(Impl),\n     // enum variants cannot have generics themselves, but their parent enums\n     // can, and this makes some code easier to write\n     EnumVariant(EnumVariant),\n@@ -1098,7 +1098,7 @@ impl_from!(\n     Adt(Struct, Enum, Union),\n     Trait,\n     TypeAlias,\n-    ImplDef,\n+    Impl,\n     EnumVariant,\n     Const\n     for GenericDef\n@@ -1268,18 +1268,18 @@ impl LifetimeParam {\n \n // FIXME: rename from `ImplDef` to `Impl`\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct ImplDef {\n+pub struct Impl {\n     pub(crate) id: ImplId,\n }\n \n-impl ImplDef {\n-    pub fn all_in_crate(db: &dyn HirDatabase, krate: Crate) -> Vec<ImplDef> {\n+impl Impl {\n+    pub fn all_in_crate(db: &dyn HirDatabase, krate: Crate) -> Vec<Impl> {\n         let inherent = db.inherent_impls_in_crate(krate.id);\n         let trait_ = db.trait_impls_in_crate(krate.id);\n \n         inherent.all_impls().chain(trait_.all_impls()).map(Self::from).collect()\n     }\n-    pub fn for_trait(db: &dyn HirDatabase, krate: Crate, trait_: Trait) -> Vec<ImplDef> {\n+    pub fn for_trait(db: &dyn HirDatabase, krate: Crate, trait_: Trait) -> Vec<Impl> {\n         let impls = db.trait_impls_in_crate(krate.id);\n         impls.for_trait(trait_.id).map(Self::from).collect()\n     }\n@@ -1904,7 +1904,7 @@ pub enum ScopeDef {\n     ModuleDef(ModuleDef),\n     MacroDef(MacroDef),\n     GenericParam(TypeParam),\n-    ImplSelfType(ImplDef),\n+    ImplSelfType(Impl),\n     AdtSelfType(Adt),\n     Local(Local),\n     Unknown,"}, {"sha": "8d0f84508d2ac5ce5fccaead0fb9d106d9f247f2", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -39,7 +39,7 @@ from_id![\n     (hir_def::StaticId, crate::Static),\n     (hir_def::ConstId, crate::Const),\n     (hir_def::FunctionId, crate::Function),\n-    (hir_def::ImplId, crate::ImplDef),\n+    (hir_def::ImplId, crate::Impl),\n     (hir_def::TypeParamId, crate::TypeParam),\n     (hir_def::LifetimeParamId, crate::LifetimeParam),\n     (hir_expand::MacroDefId, crate::MacroDef)\n@@ -146,7 +146,7 @@ impl From<GenericDef> for GenericDefId {\n             GenericDef::Adt(it) => GenericDefId::AdtId(it.into()),\n             GenericDef::Trait(it) => GenericDefId::TraitId(it.id),\n             GenericDef::TypeAlias(it) => GenericDefId::TypeAliasId(it.id),\n-            GenericDef::ImplDef(it) => GenericDefId::ImplId(it.id),\n+            GenericDef::Impl(it) => GenericDefId::ImplId(it.id),\n             GenericDef::EnumVariant(it) => {\n                 GenericDefId::EnumVariantId(EnumVariantId { parent: it.parent.id, local_id: it.id })\n             }\n@@ -162,7 +162,7 @@ impl From<GenericDefId> for GenericDef {\n             GenericDefId::AdtId(it) => GenericDef::Adt(it.into()),\n             GenericDefId::TraitId(it) => GenericDef::Trait(it.into()),\n             GenericDefId::TypeAliasId(it) => GenericDef::TypeAlias(it.into()),\n-            GenericDefId::ImplId(it) => GenericDef::ImplDef(it.into()),\n+            GenericDefId::ImplId(it) => GenericDef::Impl(it.into()),\n             GenericDefId::EnumVariantId(it) => {\n                 GenericDef::EnumVariant(EnumVariant { parent: it.parent.into(), id: it.local_id })\n             }"}, {"sha": "c5b81b2524be1607a2e77f3436a63038196c87af", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -10,8 +10,8 @@ use hir_expand::InFile;\n use syntax::ast;\n \n use crate::{\n-    db::HirDatabase, Const, Enum, EnumVariant, Field, FieldSource, Function, ImplDef,\n-    LifetimeParam, MacroDef, Module, Static, Struct, Trait, TypeAlias, TypeParam, Union,\n+    db::HirDatabase, Const, Enum, EnumVariant, Field, FieldSource, Function, Impl, LifetimeParam,\n+    MacroDef, Module, Static, Struct, Trait, TypeAlias, TypeParam, Union,\n };\n \n pub trait HasSource {\n@@ -118,7 +118,7 @@ impl HasSource for MacroDef {\n         }\n     }\n }\n-impl HasSource for ImplDef {\n+impl HasSource for Impl {\n     type Ast = ast::Impl;\n     fn source(self, db: &dyn HirDatabase) -> InFile<ast::Impl> {\n         self.id.lookup(db.upcast()).source(db.upcast())"}, {"sha": "3f4f8d8e4af80e6c338d6a2dc4bd566603a39f45", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -35,7 +35,7 @@ pub use crate::{\n     code_model::{\n         Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, Callable, CallableKind, Const,\n         Crate, CrateDependency, DefWithBody, Enum, EnumVariant, Field, FieldSource, Function,\n-        GenericDef, HasVisibility, ImplDef, LifetimeParam, Local, MacroDef, Module, ModuleDef,\n+        GenericDef, HasVisibility, Impl, LifetimeParam, Local, MacroDef, Module, ModuleDef,\n         ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef,\n     },\n     has_source::HasSource,"}, {"sha": "83ec91f587f8f4c0df058c9af462fe69658190f1", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -25,7 +25,7 @@ use crate::{\n     diagnostics::Diagnostic,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    AssocItem, Callable, Crate, Field, Function, HirFileId, ImplDef, InFile, LifetimeParam, Local,\n+    AssocItem, Callable, Crate, Field, Function, HirFileId, Impl, InFile, LifetimeParam, Local,\n     MacroDef, Module, ModuleDef, Name, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam,\n     VariantDef,\n };\n@@ -38,7 +38,7 @@ pub enum PathResolution {\n     Local(Local),\n     /// A generic parameter\n     TypeParam(TypeParam),\n-    SelfType(ImplDef),\n+    SelfType(Impl),\n     Macro(MacroDef),\n     AssocItem(AssocItem),\n }\n@@ -708,7 +708,7 @@ to_def_impls![\n     (crate::Enum, ast::Enum, enum_to_def),\n     (crate::Union, ast::Union, union_to_def),\n     (crate::Trait, ast::Trait, trait_to_def),\n-    (crate::ImplDef, ast::Impl, impl_to_def),\n+    (crate::Impl, ast::Impl, impl_to_def),\n     (crate::TypeAlias, ast::TypeAlias, type_alias_to_def),\n     (crate::Const, ast::Const, const_to_def),\n     (crate::Static, ast::Static, static_to_def),"}, {"sha": "54b33a98eacb99ee2c75ecc7b8b38ba3b7a7dc2e", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -245,7 +245,7 @@ impl ToNav for hir::Module {\n     }\n }\n \n-impl ToNav for hir::ImplDef {\n+impl ToNav for hir::Impl {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n         let derive_attr = self.is_builtin_derive(db);"}, {"sha": "79c081cac26343589c7e206407c6fe84299800d7", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -112,7 +112,7 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n                 .as_assoc_item(db)\n                 .and_then(|assoc| match assoc.container(db) {\n                     AssocItemContainer::Trait(t) => Some(t.into()),\n-                    AssocItemContainer::ImplDef(impld) => {\n+                    AssocItemContainer::Impl(impld) => {\n                         impld.target_ty(db).as_adt().map(|adt| adt.into())\n                     }\n                 })"}, {"sha": "6eac39639251db25b66b4c286694eca51ba2fbeb", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -1,4 +1,4 @@\n-use hir::{Crate, ImplDef, Semantics};\n+use hir::{Crate, Impl, Semantics};\n use ide_db::RootDatabase;\n use syntax::{algo::find_node_at_offset, ast, AstNode};\n \n@@ -49,7 +49,7 @@ fn impls_for_def(\n         ast::AdtDef::Union(def) => sema.to_def(def)?.ty(sema.db),\n     };\n \n-    let impls = ImplDef::all_in_crate(sema.db, krate);\n+    let impls = Impl::all_in_crate(sema.db, krate);\n \n     Some(\n         impls\n@@ -67,7 +67,7 @@ fn impls_for_trait(\n ) -> Option<Vec<NavigationTarget>> {\n     let tr = sema.to_def(node)?;\n \n-    let impls = ImplDef::for_trait(sema.db, krate, tr);\n+    let impls = Impl::for_trait(sema.db, krate, tr);\n \n     Some(impls.into_iter().map(|imp| imp.to_nav(sema.db)).collect())\n }"}, {"sha": "e82aad6d59df6566342414daf1c113d9376bd71d", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -295,7 +295,7 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n         Definition::ModuleDef(md) => match md {\n             ModuleDef::Function(f) => match f.as_assoc_item(db)?.container(db) {\n                 AssocItemContainer::Trait(t) => Some(t.name(db)),\n-                AssocItemContainer::ImplDef(i) => i.target_ty(db).as_adt().map(|adt| adt.name(db)),\n+                AssocItemContainer::Impl(i) => i.target_ty(db).as_adt().map(|adt| adt.name(db)),\n             },\n             ModuleDef::EnumVariant(e) => Some(e.parent_enum(db).name(db)),\n             _ => None,"}, {"sha": "96462a7b0aa81c0490dbced973fae2da099ec475", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -130,7 +130,7 @@ fn runnable_fn(\n                         hir::AssocItemContainer::Trait(trait_item) => {\n                             Some(trait_item.name(sema.db).to_string())\n                         }\n-                        hir::AssocItemContainer::ImplDef(impl_def) => impl_def\n+                        hir::AssocItemContainer::Impl(impl_def) => impl_def\n                             .target_ty(sema.db)\n                             .as_adt()\n                             .map(|adt| adt.name(sema.db).to_string()),"}, {"sha": "bd2afc887602df6f73820307487d627479618f66", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -6,7 +6,7 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    db::HirDatabase, Crate, Field, HasVisibility, ImplDef, LifetimeParam, Local, MacroDef, Module,\n+    db::HirDatabase, Crate, Field, HasVisibility, Impl, LifetimeParam, Local, MacroDef, Module,\n     ModuleDef, Name, PathResolution, Semantics, TypeParam, Visibility,\n };\n use syntax::{\n@@ -22,7 +22,7 @@ pub enum Definition {\n     Macro(MacroDef),\n     Field(Field),\n     ModuleDef(ModuleDef),\n-    SelfType(ImplDef),\n+    SelfType(Impl),\n     Local(Local),\n     TypeParam(TypeParam),\n     LifetimeParam(LifetimeParam),"}, {"sha": "525c8a41fed4110cc8bdbade1cc7817d1c4855ee", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae31e34b1a345ceea23198a7e9e32e557cdbb4d/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=2ae31e34b1a345ceea23198a7e9e32e557cdbb4d", "patch": "@@ -140,7 +140,7 @@ impl Definition {\n                 },\n                 hir::GenericDef::Trait(it) => it.source(db).value.syntax().text_range(),\n                 hir::GenericDef::TypeAlias(it) => it.source(db).value.syntax().text_range(),\n-                hir::GenericDef::ImplDef(it) => it.source(db).value.syntax().text_range(),\n+                hir::GenericDef::Impl(it) => it.source(db).value.syntax().text_range(),\n                 hir::GenericDef::EnumVariant(it) => it.source(db).value.syntax().text_range(),\n                 hir::GenericDef::Const(it) => it.source(db).value.syntax().text_range(),\n             };"}]}