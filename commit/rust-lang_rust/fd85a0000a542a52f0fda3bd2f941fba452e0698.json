{"sha": "fd85a0000a542a52f0fda3bd2f941fba452e0698", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkODVhMDAwMGE1NDJhNTJmMGZkYTNiZDJmOTQxZmJhNDUyZTA2OTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-11T22:46:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-12T01:18:53Z"}, "message": "manual: add section on do-expressions.", "tree": {"sha": "e2cd4dbf5822c2a5d3282876f9daf9852ab77055", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2cd4dbf5822c2a5d3282876f9daf9852ab77055"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd85a0000a542a52f0fda3bd2f941fba452e0698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd85a0000a542a52f0fda3bd2f941fba452e0698", "html_url": "https://github.com/rust-lang/rust/commit/fd85a0000a542a52f0fda3bd2f941fba452e0698", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd85a0000a542a52f0fda3bd2f941fba452e0698/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "693866d75e25425053c61dc16adcc12b977d86f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/693866d75e25425053c61dc16adcc12b977d86f0", "html_url": "https://github.com/rust-lang/rust/commit/693866d75e25425053c61dc16adcc12b977d86f0"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "1dfeaddc1a2b73214ad5195710e9243d4360ee02", "filename": "doc/rust.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fd85a0000a542a52f0fda3bd2f941fba452e0698/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd85a0000a542a52f0fda3bd2f941fba452e0698/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=fd85a0000a542a52f0fda3bd2f941fba452e0698", "patch": "@@ -2071,6 +2071,52 @@ the loop.\n A `loop` expression is only permitted in the body of a loop.\n \n \n+### Do expressions\n+\n+~~~~~~~~{.ebnf .gram}\n+do_expr : \"do\" expr [ '|' ident_list '|' ] ? '{' block '}' ;\n+~~~~~~~~\n+\n+A _do expression_ provides a more-familiar block-syntax for a [lambda expression](#lambda-expressions),\n+including a special translation of [return expressions](#return-expressions) inside the supplied block.\n+\n+The optional `ident_list` and `block` provided in a `do` expression are parsed as though they constitute a lambda expression;\n+if the `ident_list` is missing, an empty `ident_list` is implied.\n+\n+The lambda expression is then provided as a _trailing argument_\n+to the outermost [call](#call-expressions) or [method call](#method-call-expressions) expression\n+in the `expr` following `do`.\n+If the `expr` is a [path expression](#path-expressions), it is parsed as though it is a call expression.\n+If the `expr` is a [field expression](#field-expressions), it is parsed as though it is a method call expression.\n+\n+Additionally, any occurrence of a [return expression](#return-expressions)\n+inside the `block` of a `do` expression is rewritten\n+as a reference to an (anonymous) flag set in the caller's environment,\n+which is checked on return from the `expr` and, if set,\n+causes a corresponding return from the caller.\n+In this way, the meaning of `return` statements in language built-in control blocks is preserved,\n+if they are rewritten using lambda functions and `do` expressions as abstractions.\n+\n+Therefore the two calls to `f` in this example are equivalent.\n+Both cause an early return from the caller's frame:\n+\n+~~~~\n+# fn f(f: fn(int)) { }\n+# fn g(i: int) { }\n+\n+{\n+  let mut _early_ret = false;\n+  f(|j| { g(j); _early_ret = true; });\n+  if early_ret { return; }\n+}\n+\n+do f |j| {\n+    g(j);\n+    return;\n+}\n+~~~~\n+\n+\n ### For expressions\n \n ~~~~~~~~{.ebnf .gram}"}]}