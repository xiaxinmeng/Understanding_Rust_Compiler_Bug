{"sha": "f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZGJlN2YwNDI2YmNkNjM5ZDk3ZWYxNTEyYzgwZWY0YTdiMWIzZWM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-12T23:21:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-12T23:21:16Z"}, "message": "Merge pull request #2140 from topecongiro/issue-2021\n\nReturn 'None' when macro or string literal exceeds max width", "tree": {"sha": "bce94660b9b41c8b9420d2ec80724892d0cc223c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce94660b9b41c8b9420d2ec80724892d0cc223c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaCNdsCRBK7hj4Ov3rIwAAdHIIAIPJN2fLZsUnDi2sFZJrvidI\nnD+riS8SgFNT4YYpWIrUCr1G+GbxRTkDYgabTFqD1yVw9vcjhepNxuxKZhiBoZdx\nvkFCaNqvgy++5M1h0gHidHdt/rJUheul/0uTZdReFxKWUpwHYCyCmZYU0WkyifbX\nALGC3tSoDAl9r8sjcFnStNWbI2nmyPFYYNRVe9fbfE/zPL6xAHca2qwt56mQWhGk\n4QztMfrlocJjr/yxZhtiF5l9WWKkodguORUAoCptEQL4PPPEpvhEmNBD26ry09CK\nRmoN/sSigQpmMbmoPw9pwiSawtSJv4JhYJFYckJN1s41csWzgKNwdGcRFI8jv6Y=\n=ABhj\n-----END PGP SIGNATURE-----\n", "payload": "tree bce94660b9b41c8b9420d2ec80724892d0cc223c\nparent 896c3a2b7d3ef97bbdafe0f51123f455dea28894\nparent 70c69c6acd79de5377dd4782c8b55e952feb8af0\nauthor Nick Cameron <nrc@ncameron.org> 1510528876 +1300\ncommitter GitHub <noreply@github.com> 1510528876 +1300\n\nMerge pull request #2140 from topecongiro/issue-2021\n\nReturn 'None' when macro or string literal exceeds max width"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "html_url": "https://github.com/rust-lang/rust/commit/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "896c3a2b7d3ef97bbdafe0f51123f455dea28894", "url": "https://api.github.com/repos/rust-lang/rust/commits/896c3a2b7d3ef97bbdafe0f51123f455dea28894", "html_url": "https://github.com/rust-lang/rust/commit/896c3a2b7d3ef97bbdafe0f51123f455dea28894"}, {"sha": "70c69c6acd79de5377dd4782c8b55e952feb8af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c69c6acd79de5377dd4782c8b55e952feb8af0", "html_url": "https://github.com/rust-lang/rust/commit/70c69c6acd79de5377dd4782c8b55e952feb8af0"}], "stats": {"total": 78, "additions": 46, "deletions": 32}, "files": [{"sha": "4016cd1aa6050c26cd313728a832806c5bf3c214", "filename": "src/expr.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "patch": "@@ -35,7 +35,7 @@ use types::{can_be_overflowed_type, rewrite_path, PathContext};\n use utils::{colon_spaces, contains_skip, extra_offset, first_line_width, inner_attributes,\n             last_line_extendable, last_line_width, left_most_sub_expr, mk_sp, outer_attributes,\n             paren_overhead, ptr_vec_to_ref_vec, semicolon_for_stmt, stmt_expr,\n-            trimmed_last_line_width};\n+            trimmed_last_line_width, wrap_str};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n@@ -168,10 +168,13 @@ pub fn format_expr(\n         ast::ExprKind::TupField(..) |\n         ast::ExprKind::MethodCall(..) => rewrite_chain(expr, context, shape),\n         ast::ExprKind::Mac(ref mac) => {\n-            // Failure to rewrite a macro should not imply failure to\n-            // rewrite the expression.\n-            rewrite_macro(mac, None, context, shape, MacroPosition::Expression)\n-                .or_else(|| Some(context.snippet(expr.span)))\n+            rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n+                wrap_str(\n+                    context.snippet(expr.span),\n+                    context.config.max_width(),\n+                    shape,\n+                )\n+            })\n         }\n         ast::ExprKind::Ret(None) => Some(\"return\".to_owned()),\n         ast::ExprKind::Ret(Some(ref expr)) => {\n@@ -1594,13 +1597,11 @@ fn rewrite_match_arm(\n                 arm_comma(context.config, body, is_last),\n             ));\n         }\n-        (\n-            mk_sp(\n-                arm.attrs[arm.attrs.len() - 1].span.hi(),\n-                arm.pats[0].span.lo(),\n-            ),\n-            arm.attrs.rewrite(context, shape)?,\n-        )\n+        let missing_span = mk_sp(\n+            arm.attrs[arm.attrs.len() - 1].span.hi(),\n+            arm.pats[0].span.lo(),\n+        );\n+        (missing_span, arm.attrs.rewrite(context, shape)?)\n     } else {\n         (mk_sp(arm.span().lo(), arm.span().lo()), String::new())\n     };\n@@ -1724,14 +1725,10 @@ fn rewrite_match_body(\n     };\n \n     let forbid_same_line = has_guard && pats_str.contains('\\n') && !is_empty_block;\n-    let next_line_indent = if is_block {\n-        if is_empty_block {\n-            shape.indent.block_indent(context.config)\n-        } else {\n-            shape.indent\n-        }\n-    } else {\n+    let next_line_indent = if !is_block || is_empty_block {\n         shape.indent.block_indent(context.config)\n+    } else {\n+        shape.indent\n     };\n     let combine_next_line_body = |body_str: &str| {\n         if is_block {\n@@ -1926,7 +1923,7 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n             .all(|line| line.ends_with('\\\\'))\n         {\n             let new_indent = shape.visual_indent(1).indent;\n-            return Some(String::from(\n+            let indented_string_lit = String::from(\n                 string_lit\n                     .lines()\n                     .map(|line| {\n@@ -1939,16 +1936,17 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n                     .collect::<Vec<_>>()\n                     .join(\"\\n\")\n                     .trim_left(),\n-            ));\n+            );\n+            return wrap_str(indented_string_lit, context.config.max_width(), shape);\n         } else {\n-            return Some(string_lit);\n+            return wrap_str(string_lit, context.config.max_width(), shape);\n         }\n     }\n \n     if !context.config.force_format_strings()\n         && !string_requires_rewrite(context, span, &string_lit, shape)\n     {\n-        return Some(string_lit);\n+        return wrap_str(string_lit, context.config.max_width(), shape);\n     }\n \n     // Remove the quote characters."}, {"sha": "7f15b88f4e9b339d8cfaa1018a95ad24a1587318", "filename": "tests/source/match.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "patch": "@@ -425,3 +425,12 @@ fn issue_2099() {\n \n     match x {}\n }\n+\n+// #2021\n+impl<'tcx> Const<'tcx> {\n+    pub fn from_constval<'a>() -> Const<'tcx> {\n+        let val = match *cv {\n+            ConstVal::Variant(_) | ConstVal::Aggregate(..) | ConstVal::Unevaluated(..) => bug!(\"MIR must not use `{:?}` (aggregates are expanded to MIR rvalues)\", cv),\n+        };\n+    }\n+}"}, {"sha": "c7609d8e4621c6be120219cd5592bc017bb0c670", "filename": "tests/target/configs-fn_call_indent-block-trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Ftarget%2Fconfigs-fn_call_indent-block-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Ftarget%2Fconfigs-fn_call_indent-block-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_indent-block-trailing-comma.rs?ref=f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "patch": "@@ -3,9 +3,7 @@\n \n // rustfmt should not add trailing comma when rewriting macro. See #1528.\n fn a() {\n-    panic!(\n-        \"this is a long string that goes past the maximum line length causing rustfmt to insert a comma here:\"\n-    );\n+    panic!(\"this is a long string that goes past the maximum line length causing rustfmt to insert a comma here:\");\n     foo(\n         a,\n         oooptoptoptoptptooptoptoptoptptooptoptoptoptptoptoptoptoptpt(),"}, {"sha": "49f32c557b3b6cc1d6b30b29d14b92e97ad0b804", "filename": "tests/target/configs-force_format_strings-false.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Ftarget%2Fconfigs-force_format_strings-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Ftarget%2Fconfigs-force_format_strings-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-force_format_strings-false.rs?ref=f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "patch": "@@ -5,6 +5,5 @@\n // Force format strings\n \n fn main() {\n-    let lorem =\n-        \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit\";\n+    let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit\";\n }"}, {"sha": "ecca0d7d1fca583c1fd6bdfda680bc588800e88a", "filename": "tests/target/configs-format_strings-false.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Ftarget%2Fconfigs-format_strings-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Ftarget%2Fconfigs-format_strings-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-format_strings-false.rs?ref=f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "patch": "@@ -4,6 +4,5 @@\n // Force format strings\n \n fn main() {\n-    let lorem =\n-        \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit\";\n+    let lorem = \"ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit\";\n }"}, {"sha": "07a962142853e4801307c28535f17ad061f43091", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "patch": "@@ -19,8 +19,7 @@ fn main() {\n \tfn foo(a: i32, a: i32, a: i32, a: i32, a: i32, a: i32, a: i32, a: i32, a: i32, a: i32, a: i32) {\n \t}\n \n-\tlet str =\n-\t\t\"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAa\";\n+\tlet str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAa\";\n \n \tif let (\n \t\tsome_very_large,"}, {"sha": "257a26d15ba777cc6a111f63d6f3a5a5631a1ef0", "filename": "tests/target/match.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=f2dbe7f0426bcd639d97ef1512c80ef4a7b1b3ec", "patch": "@@ -463,3 +463,15 @@ fn issue_2099() {\n \n     match x {}\n }\n+\n+// #2021\n+impl<'tcx> Const<'tcx> {\n+    pub fn from_constval<'a>() -> Const<'tcx> {\n+        let val = match *cv {\n+            ConstVal::Variant(_) | ConstVal::Aggregate(..) | ConstVal::Unevaluated(..) => bug!(\n+                \"MIR must not use `{:?}` (aggregates are expanded to MIR rvalues)\",\n+                cv\n+            ),\n+        };\n+    }\n+}"}]}