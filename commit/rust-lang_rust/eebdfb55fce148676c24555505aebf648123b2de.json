{"sha": "eebdfb55fce148676c24555505aebf648123b2de", "node_id": "C_kwDOAAsO6NoAKGVlYmRmYjU1ZmNlMTQ4Njc2YzI0NTU1NTA1YWViZjY0ODEyM2IyZGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-19T08:15:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-19T08:15:40Z"}, "message": "Auto merge of #108228 - Dylan-DPC:rollup-i9t13qu, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #104659 (reflow the stack size story)\n - #106933 (Update documentation of select_nth_unstable and select_nth_unstable_by to state O(n^2) complexity)\n - #107783 (rustdoc: simplify DOM for `.item-table`)\n - #107951 (resolve: Fix doc links referring to other crates when documenting proc macro crates directly)\n - #108130 (\"Basic usage\" is redundant for there is just one example)\n - #108146 (rustdoc: hide `reference` methods in search index)\n - #108189 (Fix some more `non_lifetime_binders` stuff with higher-ranked trait bounds)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d27025321d8f730895fef01148f476c0a88604c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d27025321d8f730895fef01148f476c0a88604c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eebdfb55fce148676c24555505aebf648123b2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eebdfb55fce148676c24555505aebf648123b2de", "html_url": "https://github.com/rust-lang/rust/commit/eebdfb55fce148676c24555505aebf648123b2de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eebdfb55fce148676c24555505aebf648123b2de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73f40197ecabf77ed59028af61739404eb60dd2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/73f40197ecabf77ed59028af61739404eb60dd2e", "html_url": "https://github.com/rust-lang/rust/commit/73f40197ecabf77ed59028af61739404eb60dd2e"}, {"sha": "c5d5c576667ae592e4ab43390a733197a0b52c01", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d5c576667ae592e4ab43390a733197a0b52c01", "html_url": "https://github.com/rust-lang/rust/commit/c5d5c576667ae592e4ab43390a733197a0b52c01"}], "stats": {"total": 436, "additions": 275, "deletions": 161}, "files": [{"sha": "b736a416e4a108922e3103ca7aa84c26ae71b83e", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -418,10 +418,15 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n                 bug!(\"encountered a fresh type during canonicalization\")\n             }\n \n-            ty::Placeholder(placeholder) => self.canonicalize_ty_var(\n-                CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderTy(placeholder) },\n-                t,\n-            ),\n+            ty::Placeholder(mut placeholder) => {\n+                if !self.canonicalize_mode.preserve_universes() {\n+                    placeholder.universe = ty::UniverseIndex::ROOT;\n+                }\n+                self.canonicalize_ty_var(\n+                    CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderTy(placeholder) },\n+                    t,\n+                )\n+            }\n \n             ty::Bound(debruijn, _) => {\n                 if debruijn >= self.binder_index {"}, {"sha": "a101127104de812d83cff116dbfce975e9d9bd8a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -735,7 +735,10 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(print(data))\n                 }\n             }\n-            ty::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n+            ty::Placeholder(placeholder) => match placeholder.name {\n+                ty::BoundTyKind::Anon(_) => p!(write(\"Placeholder({:?})\", placeholder)),\n+                ty::BoundTyKind::Param(_, name) => p!(write(\"{}\", name)),\n+            },\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 // We use verbose printing in 'NO_QUERIES' mode, to\n                 // avoid needing to call `predicates_of`. This should"}, {"sha": "162f91e05f8c84d36ab5716307485acc63bf5964", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -4211,7 +4211,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 if let Some(res) = res\n                     && let Some(def_id) = res.opt_def_id()\n                     && !def_id.is_local()\n-                    && self.r.session.crate_types().contains(&CrateType::ProcMacro) {\n+                    && self.r.session.crate_types().contains(&CrateType::ProcMacro)\n+                    && matches!(self.r.session.opts.resolve_doc_links, ResolveDocLinks::ExportedMetadata) {\n                     // Encoding foreign def ids in proc macro crate metadata will ICE.\n                     return None;\n                 }\n@@ -4281,6 +4282,10 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                         .filter_map(|tr| {\n                             if !tr.def_id.is_local()\n                                 && self.r.session.crate_types().contains(&CrateType::ProcMacro)\n+                                && matches!(\n+                                    self.r.session.opts.resolve_doc_links,\n+                                    ResolveDocLinks::ExportedMetadata\n+                                )\n                             {\n                                 // Encoding foreign def ids in proc macro crate metadata will ICE.\n                                 return None;"}, {"sha": "4b15dd408b3708bdd324b32b70b815f433d830f1", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -2148,12 +2148,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }))\n             }\n \n-            ty::Alias(..) | ty::Param(_) => None,\n+            ty::Alias(..) | ty::Param(_) | ty::Placeholder(..) => None,\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n-            ty::Placeholder(..)\n-            | ty::Bound(..)\n-            | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            // We can make this an ICE if/once we actually instantiate the trait obligation.\n+            ty::Bound(..) => None,\n+\n+            ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble builtin bounds of unexpected type: {:?}\", self_ty);\n             }\n         }"}, {"sha": "208b220c24a94ce0b10a8120604d863a4d23ef13", "filename": "library/core/src/result.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -525,8 +525,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<i32, &str> = Ok(-3);\n     /// assert_eq!(x.is_ok(), true);\n@@ -572,8 +570,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<i32, &str> = Ok(-3);\n     /// assert_eq!(x.is_err(), false);\n@@ -627,8 +623,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.ok(), Some(2));\n@@ -658,8 +652,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.err(), None);\n@@ -693,8 +685,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.as_ref(), Ok(&2));\n@@ -716,8 +706,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn mutate(r: &mut Result<i32, i32>) {\n     ///     match r.as_mut() {\n@@ -812,8 +800,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let k = 21;\n     ///\n@@ -841,8 +827,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn stringify(x: u32) -> String { format!(\"error code: {x}\") }\n     ///\n@@ -968,8 +952,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(7);\n     /// assert_eq!(x.iter().next(), Some(&7));\n@@ -989,8 +971,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let mut x: Result<u32, &str> = Ok(7);\n     /// match x.iter_mut().next() {\n@@ -1031,8 +1011,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```should_panic\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n@@ -1160,8 +1138,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```should_panic\n     /// let x: Result<u32, &str> = Ok(10);\n     /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n@@ -1222,8 +1198,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// # #![feature(never_type)]\n     /// # #![feature(unwrap_infallible)]\n@@ -1259,8 +1233,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// # #![feature(never_type)]\n     /// # #![feature(unwrap_infallible)]\n@@ -1298,8 +1270,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// let y: Result<&str, &str> = Err(\"late error\");\n@@ -1383,8 +1353,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// let y: Result<u32, &str> = Err(\"late error\");\n@@ -1426,8 +1394,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\n     /// fn err(x: u32) -> Result<u32, u32> { Err(x) }\n@@ -1456,8 +1422,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let default = 2;\n     /// let x: Result<u32, &str> = Ok(9);\n@@ -1487,8 +1451,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn count(x: &str) -> usize { x.len() }\n     ///\n@@ -1752,8 +1714,6 @@ impl<T, E> Result<Result<T, E>, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// #![feature(result_flattening)]\n     /// let x: Result<Result<&'static str, u32>, u32> = Ok(Ok(\"hello\"));\n@@ -1842,8 +1802,6 @@ impl<T, E> IntoIterator for Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(5);\n     /// let v: Vec<u32> = x.into_iter().collect();"}, {"sha": "e83747845013d7df68938e38456a00bf61a9ac20", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -2730,8 +2730,10 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index`. Additionally, this reordering is\n     /// unstable (i.e. any number of equal elements may end up at position `index`), in-place\n-    /// (i.e. does not allocate), and *O*(*n*) worst-case. This function is also/ known as \"kth\n-    /// element\" in other libraries. It returns a triplet of the following from the reordered slice:\n+    /// (i.e. does not allocate), and *O*(*n*) on average. The worst-case performance is *O*(*n* log *n*).\n+    /// This function is also known as \"kth element\" in other libraries.\n+    ///\n+    /// It returns a triplet of the following from the reordered slice:\n     /// the subslice prior to `index`, the element at `index`, and the subslice after `index`;\n     /// accordingly, the values in those two subslices will respectively all be less-than-or-equal-to\n     /// and greater-than-or-equal-to the value of the element at `index`.\n@@ -2777,8 +2779,11 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index` using the comparator function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n-    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) on average.\n+    /// The worst-case performance is *O*(*n* log *n*). This function is also known as\n+    /// \"kth element\" in other libraries.\n+    ///\n+    /// It returns a triplet of the following from\n     /// the slice reordered according to the provided comparator function: the subslice prior to\n     /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n     /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to\n@@ -2829,8 +2834,11 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index` using the key extraction function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n-    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) on average.\n+    /// The worst-case performance is *O*(*n* log *n*).\n+    /// This function is also known as \"kth element\" in other libraries.\n+    ///\n+    /// It returns a triplet of the following from\n     /// the slice reordered according to the provided key extraction function: the subslice prior to\n     /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n     /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to"}, {"sha": "489af776798ad6251b2c8f93837a5c42cf3d36ea", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -124,8 +124,10 @@\n //!\n //! ## Stack size\n //!\n-//! The default stack size is platform-dependent and subject to change. Currently it is 2MB on all\n-//! Tier-1 platforms. There are two ways to manually specify the stack size for spawned threads:\n+//! The default stack size is platform-dependent and subject to change.\n+//! Currently, it is 2 MiB on all Tier-1 platforms.\n+//!\n+//! There are two ways to manually specify the stack size for spawned threads:\n //!\n //! * Build the thread with [`Builder`] and pass the desired stack size to [`Builder::stack_size`].\n //! * Set the `RUST_MIN_STACK` environment variable to an integer representing the desired stack"}, {"sha": "8dbfaf4bbc93d4b814b00c1dd04f7db3d549e462", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -287,6 +287,16 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                     } else {\n                         let last = self.cache.parent_stack.last().expect(\"parent_stack is empty 2\");\n                         let did = match &*last {\n+                            ParentStackItem::Impl {\n+                                // impl Trait for &T { fn method(self); }\n+                                //\n+                                // When generating a function index with the above shape, we want it\n+                                // associated with `T`, not with the primitive reference type. It should\n+                                // show up as `T::method`, rather than `reference::method`, in the search\n+                                // results page.\n+                                for_: clean::Type::BorrowedRef { type_, .. },\n+                                ..\n+                            } => type_.def_id(&self.cache),\n                             ParentStackItem::Impl { for_, .. } => for_.def_id(&self.cache),\n                             ParentStackItem::Type(item_id) => item_id.as_def_id(),\n                         };"}, {"sha": "2869a39613fa1360442f776846713b6235494960", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -39,10 +39,10 @@ use crate::html::{highlight, static_files};\n use askama::Template;\n use itertools::Itertools;\n \n-const ITEM_TABLE_OPEN: &str = \"<div class=\\\"item-table\\\">\";\n-const ITEM_TABLE_CLOSE: &str = \"</div>\";\n-const ITEM_TABLE_ROW_OPEN: &str = \"<div class=\\\"item-row\\\">\";\n-const ITEM_TABLE_ROW_CLOSE: &str = \"</div>\";\n+const ITEM_TABLE_OPEN: &str = \"<ul class=\\\"item-table\\\">\";\n+const ITEM_TABLE_CLOSE: &str = \"</ul>\";\n+const ITEM_TABLE_ROW_OPEN: &str = \"<li>\";\n+const ITEM_TABLE_ROW_CLOSE: &str = \"</li>\";\n \n // A component in a `use` path, like `string` in std::string::ToString\n struct PathComponent {\n@@ -338,14 +338,14 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                 match *src {\n                     Some(src) => write!(\n                         w,\n-                        \"<div class=\\\"item-left\\\"><code>{}extern crate {} as {};\",\n+                        \"<div class=\\\"item-name\\\"><code>{}extern crate {} as {};\",\n                         visibility_print_with_space(myitem.visibility(tcx), myitem.item_id, cx),\n                         anchor(myitem.item_id.expect_def_id(), src, cx),\n                         myitem.name.unwrap(),\n                     ),\n                     None => write!(\n                         w,\n-                        \"<div class=\\\"item-left\\\"><code>{}extern crate {};\",\n+                        \"<div class=\\\"item-name\\\"><code>{}extern crate {};\",\n                         visibility_print_with_space(myitem.visibility(tcx), myitem.item_id, cx),\n                         anchor(myitem.item_id.expect_def_id(), myitem.name.unwrap(), cx),\n                     ),\n@@ -384,11 +384,11 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                 let (stab_tags_before, stab_tags_after) = if stab_tags.is_empty() {\n                     (\"\", \"\")\n                 } else {\n-                    (\"<div class=\\\"item-right docblock-short\\\">\", \"</div>\")\n+                    (\"<div class=\\\"desc docblock-short\\\">\", \"</div>\")\n                 };\n                 write!(\n                     w,\n-                    \"<div class=\\\"item-left\\\"{id}>\\\n+                    \"<div class=\\\"item-name\\\"{id}>\\\n                          <code>{vis}{imp}</code>\\\n                      </div>\\\n                      {stab_tags_before}{stab_tags}{stab_tags_after}\",\n@@ -426,11 +426,11 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                 let (docs_before, docs_after) = if docs.is_empty() {\n                     (\"\", \"\")\n                 } else {\n-                    (\"<div class=\\\"item-right docblock-short\\\">\", \"</div>\")\n+                    (\"<div class=\\\"desc docblock-short\\\">\", \"</div>\")\n                 };\n                 write!(\n                     w,\n-                    \"<div class=\\\"item-left\\\">\\\n+                    \"<div class=\\\"item-name\\\">\\\n                         <a class=\\\"{class}\\\" href=\\\"{href}\\\" title=\\\"{title}\\\">{name}</a>\\\n                         {visibility_emoji}\\\n                         {unsafety_flag}\\"}, {"sha": "d18b56eb19c25d1d9c8d0a547193492d38a9a8bb", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -201,7 +201,7 @@ h1, h2, h3, h4, h5, h6,\n .mobile-topbar,\n .search-input,\n .search-results .result-name,\n-.item-left > a,\n+.item-name > a,\n .out-of-band,\n span.since,\n a.srclink,\n@@ -750,14 +750,16 @@ table,\n \n .item-table {\n \tdisplay: table;\n+\tpadding: 0;\n+\tmargin: 0;\n }\n-.item-row {\n+.item-table > li {\n \tdisplay: table-row;\n }\n-.item-left, .item-right {\n+.item-table > li > div {\n \tdisplay: table-cell;\n }\n-.item-left {\n+.item-table > li > .item-name {\n \tpadding-right: 1.25rem;\n }\n \n@@ -962,7 +964,7 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tpadding: 3px;\n \tmargin-bottom: 5px;\n }\n-.item-left .stab {\n+.item-name .stab {\n \tmargin-left: 0.3125em;\n }\n .stab {\n@@ -1695,7 +1697,7 @@ in storage.js\n \t}\n \n \t/* Display an alternating layout on tablets and phones */\n-\t.item-table, .item-row, .item-left, .item-right,\n+\t.item-table, .item-row, .item-table > li, .item-table > li > div,\n \t.search-results > a, .search-results > a > div {\n \t\tdisplay: block;\n \t}\n@@ -1704,7 +1706,7 @@ in storage.js\n \t.search-results > a {\n \t\tpadding: 5px 0px;\n \t}\n-\t.search-results > a > div.desc, .item-right {\n+\t.search-results > a > div.desc, .item-table > li > div.desc {\n \t\tpadding-left: 2em;\n \t}\n "}, {"sha": "636382a9169916f13e7d8a8191c5cf4b1e033764", "filename": "tests/rustdoc-gui/huge-collection-of-constants.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Fhuge-collection-of-constants.goml", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Fhuge-collection-of-constants.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fhuge-collection-of-constants.goml?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -3,7 +3,7 @@\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/huge_amount_of_consts/index.html\"\n \n compare-elements-position-near-false: (\n-    \"//*[@class='item-table']//div[last()-1]\",\n-    \"//*[@class='item-table']//div[last()-3]\",\n+    \"//ul[@class='item-table']/li[last()-1]\",\n+    \"//ul[@class='item-table']/li[last()-3]\",\n     {\"y\": 12},\n )"}, {"sha": "7a219bd54c3e65e4c90c76167620c6b2e23cd51b", "filename": "tests/rustdoc-gui/item-summary-table.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Fitem-summary-table.goml", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Fitem-summary-table.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fitem-summary-table.goml?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -1,6 +1,6 @@\n // This test ensures that <table> elements aren't display in items summary.\n goto: \"file://\" + |DOC_PATH| + \"/lib2/summary_table/index.html\"\n // We check that we picked the right item first.\n-assert-text: (\".item-table .item-left\", \"Foo\")\n+assert-text: (\".item-table .item-name\", \"Foo\")\n // Then we check that its summary is empty.\n-assert-false: \".item-table .item-right\"\n+assert-false: \".item-table .desc\""}, {"sha": "412e475dcc9b80f51511a7a45050bd680335895f", "filename": "tests/rustdoc-gui/label-next-to-symbol.goml", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Flabel-next-to-symbol.goml?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -9,58 +9,58 @@ assert: (\".stab.portability\")\n \n // make sure that deprecated and portability have the right colors\n assert-css: (\n-    \".item-table .item-left .stab.deprecated\",\n+    \".item-table .item-name .stab.deprecated\",\n     { \"background-color\": \"rgb(255, 245, 214)\" },\n )\n assert-css: (\n-    \".item-table .item-left .stab.portability\",\n+    \".item-table .item-name .stab.portability\",\n     { \"background-color\": \"rgb(255, 245, 214)\" },\n )\n \n // table like view\n-assert-css: (\".item-right.docblock-short\", { \"padding-left\": \"0px\" })\n+assert-css: (\".desc.docblock-short\", { \"padding-left\": \"0px\" })\n compare-elements-position-near: (\n-    \"//*[@class='item-left']//a[text()='replaced_function']\",\n-    \".item-left .stab.deprecated\",\n+    \"//*[@class='item-name']//a[text()='replaced_function']\",\n+    \".item-name .stab.deprecated\",\n     {\"y\": 2},\n )\n compare-elements-position: (\n-    \".item-left .stab.deprecated\",\n-    \".item-left .stab.portability\",\n+    \".item-name .stab.deprecated\",\n+    \".item-name .stab.portability\",\n     (\"y\"),\n )\n \n // Ensure no wrap\n compare-elements-position: (\n-    \"//*[@class='item-left']//a[text()='replaced_function']/..\",\n-    \"//*[@class='item-right docblock-short'][text()='a thing with a label']\",\n+    \"//*[@class='item-name']//a[text()='replaced_function']/..\",\n+    \"//*[@class='desc docblock-short'][text()='a thing with a label']\",\n     (\"y\"),\n )\n \n \n // Mobile view\n size: (600, 600)\n // staggered layout with 2em spacing\n-assert-css: (\".item-right.docblock-short\", { \"padding-left\": \"32px\" })\n+assert-css: (\".desc.docblock-short\", { \"padding-left\": \"32px\" })\n compare-elements-position-near: (\n-    \"//*[@class='item-left']//a[text()='replaced_function']\",\n-    \".item-left .stab.deprecated\",\n+    \"//*[@class='item-name']//a[text()='replaced_function']\",\n+    \".item-name .stab.deprecated\",\n     {\"y\": 2},\n )\n compare-elements-position: (\n-    \".item-left .stab.deprecated\",\n-    \".item-left .stab.portability\",\n+    \".item-name .stab.deprecated\",\n+    \".item-name .stab.portability\",\n     (\"y\"),\n )\n \n // Ensure wrap\n compare-elements-position-false: (\n-    \"//*[@class='item-left']//a[text()='replaced_function']/..\",\n-    \"//*[@class='item-right docblock-short'][text()='a thing with a label']\",\n+    \"//*[@class='item-name']//a[text()='replaced_function']/..\",\n+    \"//*[@class='desc docblock-short'][text()='a thing with a label']\",\n     (\"y\"),\n )\n compare-elements-position-false: (\n-    \".item-left .stab.deprecated\",\n-    \"//*[@class='item-right docblock-short'][text()='a thing with a label']\",\n+    \".item-name .stab.deprecated\",\n+    \"//*[@class='desc docblock-short'][text()='a thing with a label']\",\n     (\"y\"),\n )"}, {"sha": "23823f8b6c7918f1712700e188cf1bd420b622fb", "filename": "tests/rustdoc-gui/module-items-font.goml", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Fmodule-items-font.goml", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Fmodule-items-font.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fmodule-items-font.goml?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -1,7 +1,7 @@\n // This test checks that the correct font is used on module items (in index.html pages).\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert-css: (\n-    \".item-table .item-left > a\",\n+    \".item-table .item-name > a\",\n     {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n     ALL,\n )\n@@ -13,55 +13,55 @@ assert-css: (\n \n // modules\n assert-css: (\n-    \"#modules + .item-table .item-left a\",\n+    \"#modules + .item-table .item-name a\",\n     {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n )\n assert-css: (\n-    \"#modules + .item-table .item-right.docblock-short\",\n+    \"#modules + .item-table .desc.docblock-short\",\n     {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n )\n // structs\n assert-css: (\n-    \"#structs + .item-table .item-left a\",\n+    \"#structs + .item-table .item-name a\",\n     {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n )\n assert-css: (\n-    \"#structs + .item-table .item-right.docblock-short\",\n+    \"#structs + .item-table .desc.docblock-short\",\n     {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n )\n // enums\n assert-css: (\n-    \"#enums + .item-table .item-left a\",\n+    \"#enums + .item-table .item-name a\",\n     {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n )\n assert-css: (\n-    \"#enums + .item-table .item-right.docblock-short\",\n+    \"#enums + .item-table .desc.docblock-short\",\n     {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n )\n // traits\n assert-css: (\n-    \"#traits + .item-table .item-left a\",\n+    \"#traits + .item-table .item-name a\",\n     {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n )\n assert-css: (\n-    \"#traits + .item-table .item-right.docblock-short\",\n+    \"#traits + .item-table .desc.docblock-short\",\n     {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n )\n // functions\n assert-css: (\n-    \"#functions + .item-table .item-left a\",\n+    \"#functions + .item-table .item-name a\",\n     {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n )\n assert-css: (\n-    \"#functions + .item-table .item-right.docblock-short\",\n+    \"#functions + .item-table .desc.docblock-short\",\n     {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n )\n // keywords\n assert-css: (\n-    \"#keywords + .item-table .item-left a\",\n+    \"#keywords + .item-table .item-name a\",\n     {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n )\n assert-css: (\n-    \"#keywords + .item-table .item-right.docblock-short\",\n+    \"#keywords + .item-table .desc.docblock-short\",\n     {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n )"}, {"sha": "a6d51709019e49bc7c5cdf34b89d005a62b8e323", "filename": "tests/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsidebar.goml?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -70,8 +70,8 @@ assert-text: (\".sidebar-elems section ul > li:nth-child(8)\", \"Functions\")\n assert-text: (\".sidebar-elems section ul > li:nth-child(9)\", \"Type Definitions\")\n assert-text: (\".sidebar-elems section ul > li:nth-child(10)\", \"Unions\")\n assert-text: (\".sidebar-elems section ul > li:nth-child(11)\", \"Keywords\")\n-assert-text: (\"#structs + .item-table .item-left > a\", \"Foo\")\n-click: \"#structs + .item-table .item-left > a\"\n+assert-text: (\"#structs + .item-table .item-name > a\", \"Foo\")\n+click: \"#structs + .item-table .item-name > a\"\n \n // PAGE: struct.Foo.html\n assert-count: (\".sidebar .location\", 1)\n@@ -103,8 +103,8 @@ assert-text: (\".sidebar-elems > section ul.block > li:nth-child(2)\", \"Structs\")\n assert-text: (\".sidebar-elems > section ul.block > li:nth-child(3)\", \"Traits\")\n assert-text: (\".sidebar-elems > section ul.block > li:nth-child(4)\", \"Functions\")\n assert-text: (\".sidebar-elems > section ul.block > li:nth-child(5)\", \"Type Definitions\")\n-assert-text: (\"#functions + .item-table .item-left > a\", \"foobar\")\n-click: \"#functions + .item-table .item-left > a\"\n+assert-text: (\"#functions + .item-table .item-name > a\", \"foobar\")\n+click: \"#functions + .item-table .item-name > a\"\n \n // PAGE: fn.foobar.html\n // In items containing no items (like functions or constants) and in modules, we have no\n@@ -127,7 +127,7 @@ assert-text: (\".sidebar > .location\", \"Module sub_sub_module\")\n // We check that we don't have the crate list.\n assert-false: \".sidebar-elems .crate\"\n assert-text: (\".sidebar-elems > section ul > li:nth-child(1)\", \"Functions\")\n-assert-text: (\"#functions + .item-table .item-left > a\", \"foo\")\n+assert-text: (\"#functions + .item-table .item-name > a\", \"foo\")\n \n // Links to trait implementations in the sidebar should not wrap even if they are long.\n goto: \"file://\" + |DOC_PATH| + \"/lib2/struct.HasALongTraitWithParams.html\""}, {"sha": "9d2577178c08a3ace936fab335e0a0f10fac70e6", "filename": "tests/rustdoc-gui/unsafe-fn.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Funsafe-fn.goml", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-gui%2Funsafe-fn.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Funsafe-fn.goml?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -19,7 +19,7 @@ define-function: (\n         local-storage: {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}\n         // We reload the page so the local storage settings are being used.\n         reload:\n-        assert-css: (\".item-left sup\", {\"color\": |color|})\n+        assert-css: (\".item-name sup\", {\"color\": |color|})\n     },\n )\n "}, {"sha": "f90be6d1bfd3514859914b3b5ec9988a9aee4843", "filename": "tests/rustdoc-js-std/reference-shrink.js", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-js-std%2Freference-shrink.js", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-js-std%2Freference-shrink.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Freference-shrink.js?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -0,0 +1,8 @@\n+// exact-check\n+\n+const QUERY = 'reference::shrink';\n+\n+const EXPECTED = {\n+    // avoid including the method that's not going to be in the HTML\n+    'others': [],\n+};"}, {"sha": "8335fc902cc5b7c7b4e1fe40b8b0b9e23cd9e4fd", "filename": "tests/rustdoc-ui/intra-doc/proc-macro-doc.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-ui%2Fintra-doc%2Fproc-macro-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc-ui%2Fintra-doc%2Fproc-macro-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fproc-macro-doc.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+// force-host\n+// no-prefer-dynamic\n+// compile-flags: --crate-type proc-macro\n+\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+/// [`Unpin`]\n+#[proc_macro_derive(F)]\n+pub fn derive_(t: proc_macro::TokenStream) -> proc_macro::TokenStream {\n+    t\n+}\n+\n+/// [`Vec`]\n+#[proc_macro_attribute]\n+pub fn attr(t: proc_macro::TokenStream, _: proc_macro::TokenStream) -> proc_macro::TokenStream {\n+    t\n+}\n+\n+/// [`std::fs::File`]\n+#[proc_macro]\n+pub fn func(t: proc_macro::TokenStream) -> proc_macro::TokenStream {\n+    t\n+}"}, {"sha": "a10c84f2cacc1c93331b2e1152c1b855d1b4ee38", "filename": "tests/rustdoc/cfg_doc_reexport.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fcfg_doc_reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fcfg_doc_reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fcfg_doc_reexport.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -5,8 +5,8 @@\n #![no_core]\n \n // @has 'foo/index.html'\n-// @has - '//*[@class=\"item-left\"]/*[@class=\"stab portability\"]' 'foobar'\n-// @has - '//*[@class=\"item-left\"]/*[@class=\"stab portability\"]' 'bar'\n+// @has - '//*[@class=\"item-name\"]/*[@class=\"stab portability\"]' 'foobar'\n+// @has - '//*[@class=\"item-name\"]/*[@class=\"stab portability\"]' 'bar'\n \n #[doc(cfg(feature = \"foobar\"))]\n mod imp_priv {"}, {"sha": "51860441b359ead48b0e030d3a2abc22ac8e06b0", "filename": "tests/rustdoc/deprecated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdeprecated.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -1,14 +1,14 @@\n-// @has deprecated/index.html '//*[@class=\"item-left\"]/span[@class=\"stab deprecated\"]' \\\n+// @has deprecated/index.html '//*[@class=\"item-name\"]/span[@class=\"stab deprecated\"]' \\\n //      'Deprecated'\n-// @has - '//*[@class=\"item-right docblock-short\"]' 'Deprecated docs'\n+// @has - '//*[@class=\"desc docblock-short\"]' 'Deprecated docs'\n \n // @has deprecated/struct.S.html '//*[@class=\"stab deprecated\"]' \\\n //      'Deprecated since 1.0.0: text'\n /// Deprecated docs\n #[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct S;\n \n-// @matches deprecated/index.html '//*[@class=\"item-right docblock-short\"]' '^Docs'\n+// @matches deprecated/index.html '//*[@class=\"desc docblock-short\"]' '^Docs'\n /// Docs\n pub struct T;\n "}, {"sha": "c4702d4109e3ea3dbc7cd5e1c00b0177bdfe8168", "filename": "tests/rustdoc/doc-cfg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdoc-cfg.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -12,7 +12,7 @@ pub struct Portable;\n // @has doc_cfg/unix_only/index.html \\\n //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n //  'Available on Unix only.'\n-// @matches - '//*[@class=\"item-left\"]//*[@class=\"stab portability\"]' '\\AARM\\Z'\n+// @matches - '//*[@class=\"item-name\"]//*[@class=\"stab portability\"]' '\\AARM\\Z'\n // @count - '//*[@class=\"stab portability\"]' 2\n #[doc(cfg(unix))]\n pub mod unix_only {\n@@ -42,7 +42,7 @@ pub mod unix_only {\n // @has doc_cfg/wasi_only/index.html \\\n //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n //  'Available on WASI only.'\n-// @matches - '//*[@class=\"item-left\"]//*[@class=\"stab portability\"]' '\\AWebAssembly\\Z'\n+// @matches - '//*[@class=\"item-name\"]//*[@class=\"stab portability\"]' '\\AWebAssembly\\Z'\n // @count - '//*[@class=\"stab portability\"]' 2\n #[doc(cfg(target_os = \"wasi\"))]\n pub mod wasi_only {\n@@ -74,7 +74,7 @@ pub mod wasi_only {\n \n // the portability header is different on the module view versus the full view\n // @has doc_cfg/index.html\n-// @matches - '//*[@class=\"item-left\"]//*[@class=\"stab portability\"]' '\\Aavx\\Z'\n+// @matches - '//*[@class=\"item-name\"]//*[@class=\"stab portability\"]' '\\Aavx\\Z'\n \n // @has doc_cfg/fn.uses_target_feature.html\n // @has - '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\"}, {"sha": "12846c5c17ad6da2c4f60dc5382ed36080b9e692", "filename": "tests/rustdoc/duplicate-cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fduplicate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fduplicate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fduplicate-cfg.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -2,8 +2,8 @@\n #![feature(doc_cfg)]\n \n // @has 'foo/index.html'\n-// @matches '-' '//*[@class=\"item-left\"]//*[@class=\"stab portability\"]' '^sync$'\n-// @has '-' '//*[@class=\"item-left\"]//*[@class=\"stab portability\"]/@title' 'Available on crate feature `sync` only'\n+// @matches '-' '//*[@class=\"item-name\"]//*[@class=\"stab portability\"]' '^sync$'\n+// @has '-' '//*[@class=\"item-name\"]//*[@class=\"stab portability\"]/@title' 'Available on crate feature `sync` only'\n \n // @has 'foo/struct.Foo.html'\n // @has '-' '//*[@class=\"stab portability\"]' 'sync'"}, {"sha": "58fe8173e038103fc81cfab5b1b2538fcbf309a5", "filename": "tests/rustdoc/glob-shadowing-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fglob-shadowing-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fglob-shadowing-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fglob-shadowing-const.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -15,6 +15,6 @@ mod sub4 {\n pub use sub4::inner::*;\n \n // @has 'foo/index.html'\n-// @has - '//div[@class=\"item-right docblock-short\"]' '1'\n-// @!has - '//div[@class=\"item-right docblock-short\"]' '0'\n+// @has - '//div[@class=\"desc docblock-short\"]' '1'\n+// @!has - '//div[@class=\"desc docblock-short\"]' '0'\n fn main() { assert_eq!(X, 1); }"}, {"sha": "c117b9d6489465b27ca3afc9be20e145b631c674", "filename": "tests/rustdoc/glob-shadowing.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fglob-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fglob-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fglob-shadowing.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -1,17 +1,17 @@\n // @has 'glob_shadowing/index.html'\n-// @count - '//div[@class=\"item-left\"]' 6\n-// @!has - '//div[@class=\"item-right docblock-short\"]' 'sub1::describe'\n-// @has - '//div[@class=\"item-right docblock-short\"]' 'sub2::describe'\n+// @count - '//div[@class=\"item-name\"]' 6\n+// @!has - '//div[@class=\"desc docblock-short\"]' 'sub1::describe'\n+// @has - '//div[@class=\"desc docblock-short\"]' 'sub2::describe'\n \n-// @!has - '//div[@class=\"item-right docblock-short\"]' 'sub1::describe2'\n+// @!has - '//div[@class=\"desc docblock-short\"]' 'sub1::describe2'\n \n-// @!has - '//div[@class=\"item-right docblock-short\"]' 'sub1::prelude'\n-// @has - '//div[@class=\"item-right docblock-short\"]' 'mod::prelude'\n+// @!has - '//div[@class=\"desc docblock-short\"]' 'sub1::prelude'\n+// @has - '//div[@class=\"desc docblock-short\"]' 'mod::prelude'\n \n-// @has - '//div[@class=\"item-right docblock-short\"]' 'sub1::Foo (struct)'\n-// @has - '//div[@class=\"item-right docblock-short\"]' 'mod::Foo (function)'\n+// @has - '//div[@class=\"desc docblock-short\"]' 'sub1::Foo (struct)'\n+// @has - '//div[@class=\"desc docblock-short\"]' 'mod::Foo (function)'\n \n-// @has - '//div[@class=\"item-right docblock-short\"]' 'sub4::inner::X'\n+// @has - '//div[@class=\"desc docblock-short\"]' 'sub4::inner::X'\n \n // @has 'glob_shadowing/fn.describe.html'\n // @has - '//div[@class=\"docblock\"]' 'sub2::describe'"}, {"sha": "a41b9c5b1972656a6d3acd1a7c21c94ccd3ecc56", "filename": "tests/rustdoc/inline_cross/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Finline_cross%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Finline_cross%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fmacros.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -6,9 +6,9 @@\n \n extern crate macros;\n \n-// @has foo/index.html '//*[@class=\"item-left\"]/span[@class=\"stab deprecated\"]' \\\n+// @has foo/index.html '//*[@class=\"item-name\"]/span[@class=\"stab deprecated\"]' \\\n //         Deprecated\n-// @has - '//*[@class=\"item-left\"]/span[@class=\"stab unstable\"]' \\\n+// @has - '//*[@class=\"item-name\"]/span[@class=\"stab unstable\"]' \\\n //         Experimental\n \n // @has foo/macro.my_macro.html"}, {"sha": "27b0897689e0986b3debd3fad07017faf0146c90", "filename": "tests/rustdoc/internal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finternal.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -3,12 +3,12 @@\n // Check that the unstable marker is not added for \"rustc_private\".\n \n // @!matches internal/index.html \\\n-//      '//*[@class=\"item-right docblock-short\"]/span[@class=\"stab unstable\"]' \\\n+//      '//*[@class=\"desc docblock-short\"]/span[@class=\"stab unstable\"]' \\\n //      ''\n // @!matches internal/index.html \\\n-//      '//*[@class=\"item-right docblock-short\"]/span[@class=\"stab internal\"]' \\\n+//      '//*[@class=\"desc docblock-short\"]/span[@class=\"stab internal\"]' \\\n //      ''\n-// @matches - '//*[@class=\"item-right docblock-short\"]' 'Docs'\n+// @matches - '//*[@class=\"desc docblock-short\"]' 'Docs'\n \n // @!has internal/struct.S.html '//*[@class=\"stab unstable\"]' ''\n // @!has internal/struct.S.html '//*[@class=\"stab internal\"]' ''"}, {"sha": "985bf03a12159a9c4279e472e04e97ae579b7354", "filename": "tests/rustdoc/issue-32374.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-32374.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -2,11 +2,11 @@\n #![doc(issue_tracker_base_url = \"https://issue_url/\")]\n #![unstable(feature = \"test\", issue = \"32374\")]\n \n-// @matches issue_32374/index.html '//*[@class=\"item-left\"]/span[@class=\"stab deprecated\"]' \\\n+// @matches issue_32374/index.html '//*[@class=\"item-name\"]/span[@class=\"stab deprecated\"]' \\\n //      'Deprecated'\n-// @matches issue_32374/index.html '//*[@class=\"item-left\"]/span[@class=\"stab unstable\"]' \\\n+// @matches issue_32374/index.html '//*[@class=\"item-name\"]/span[@class=\"stab unstable\"]' \\\n //      'Experimental'\n-// @matches issue_32374/index.html '//*[@class=\"item-right docblock-short\"]/text()' 'Docs'\n+// @matches issue_32374/index.html '//*[@class=\"desc docblock-short\"]/text()' 'Docs'\n \n // @has issue_32374/struct.T.html '//*[@class=\"stab deprecated\"]/span' '\ud83d\udc4e'\n // @has issue_32374/struct.T.html '//*[@class=\"stab deprecated\"]/span' \\"}, {"sha": "1311b4721e2f728d717840d3786f35c1ce155bb5", "filename": "tests/rustdoc/issue-46377.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fissue-46377.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fissue-46377.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-46377.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -1,3 +1,3 @@\n-// @has 'issue_46377/index.html' '//*[@class=\"item-right docblock-short\"]' 'Check out this struct!'\n+// @has 'issue_46377/index.html' '//*[@class=\"desc docblock-short\"]' 'Check out this struct!'\n /// # Check out this struct!\n pub struct SomeStruct;"}, {"sha": "941cb3ce1ca5b1a57c6cf1c909d75117a98d5703", "filename": "tests/rustdoc/issue-55364.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fissue-55364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fissue-55364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-55364.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -29,8 +29,8 @@ pub mod subone {\n // @has - '//section[@id=\"main-content\"]/details/div[@class=\"docblock\"]//a[@href=\"../fn.foo.html\"]' 'foo'\n // @has - '//section[@id=\"main-content\"]/details/div[@class=\"docblock\"]//a[@href=\"../fn.bar.html\"]' 'bar'\n // Though there should be such links later\n-// @has - '//section[@id=\"main-content\"]/div[@class=\"item-table\"]//div[@class=\"item-left\"]/a[@class=\"fn\"][@href=\"fn.foo.html\"]' 'foo'\n-// @has - '//section[@id=\"main-content\"]/div[@class=\"item-table\"]//div[@class=\"item-left\"]/a[@class=\"fn\"][@href=\"fn.bar.html\"]' 'bar'\n+// @has - '//section[@id=\"main-content\"]/ul[@class=\"item-table\"]//div[@class=\"item-name\"]/a[@class=\"fn\"][@href=\"fn.foo.html\"]' 'foo'\n+// @has - '//section[@id=\"main-content\"]/ul[@class=\"item-table\"]//div[@class=\"item-name\"]/a[@class=\"fn\"][@href=\"fn.bar.html\"]' 'bar'\n /// See either [foo] or [bar].\n pub mod subtwo {\n \n@@ -68,8 +68,8 @@ pub mod subthree {\n // Next we go *deeper* - In order to ensure it's not just \"this or parent\"\n // we test `crate::` and a `super::super::...` chain\n // @has issue_55364/subfour/subfive/subsix/subseven/subeight/index.html\n-// @has - '//section[@id=\"main-content\"]/div[@class=\"item-table\"]//div[@class=\"item-right docblock-short\"]//a[@href=\"../../../../../subone/fn.foo.html\"]' 'other foo'\n-// @has - '//section[@id=\"main-content\"]/div[@class=\"item-table\"]//div[@class=\"item-right docblock-short\"]//a[@href=\"../../../../../subtwo/fn.bar.html\"]' 'other bar'\n+// @has - '//section[@id=\"main-content\"]/ul[@class=\"item-table\"]//div[@class=\"desc docblock-short\"]//a[@href=\"../../../../../subone/fn.foo.html\"]' 'other foo'\n+// @has - '//section[@id=\"main-content\"]/ul[@class=\"item-table\"]//div[@class=\"desc docblock-short\"]//a[@href=\"../../../../../subtwo/fn.bar.html\"]' 'other bar'\n pub mod subfour {\n     pub mod subfive {\n         pub mod subsix {"}, {"sha": "83f1f2f75bf021b811d8769f568b3316f051bf4a", "filename": "tests/rustdoc/issue-95873.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fissue-95873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fissue-95873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-95873.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -1,2 +1,2 @@\n-// @has issue_95873/index.html \"//*[@class='item-left']\" \"pub use ::std as x;\"\n+// @has issue_95873/index.html \"//*[@class='item-name']\" \"pub use ::std as x;\"\n pub use ::std as x;"}, {"sha": "5908d2150f2a5dc24c6da88dc71802ce1bb00656", "filename": "tests/rustdoc/reexport-check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Freexport-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Freexport-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexport-check.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -8,13 +8,13 @@ extern crate reexport_check;\n #[allow(deprecated, deprecated_in_future)]\n pub use std::i32;\n // @!has 'foo/index.html' '//code' 'pub use self::string::String;'\n-// @has 'foo/index.html' '//div[@class=\"item-left\"]' 'String'\n+// @has 'foo/index.html' '//div[@class=\"item-name\"]' 'String'\n pub use std::string::String;\n \n // i32 is deprecated, String is not\n // @count 'foo/index.html' '//span[@class=\"stab deprecated\"]' 1\n \n-// @has 'foo/index.html' '//div[@class=\"item-right docblock-short\"]' 'Docs in original'\n+// @has 'foo/index.html' '//div[@class=\"desc docblock-short\"]' 'Docs in original'\n // this is a no-op, but shows what happens if there's an attribute that isn't a doc-comment\n #[doc(inline)]\n pub use reexport_check::S;"}, {"sha": "7ecd80b8c723d0128f3a8434e0ae5256f40273eb", "filename": "tests/rustdoc/short-docblock-codeblock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fshort-docblock-codeblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fshort-docblock-codeblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fshort-docblock-codeblock.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-// @count foo/index.html '//*[@class=\"item-right docblock-short\"]' 0\n+// @count foo/index.html '//*[@class=\"desc docblock-short\"]' 0\n \n /// ```\n /// let x = 12;"}, {"sha": "791d3547c9fec06831f4fab8efebfa7fa5d260ed", "filename": "tests/rustdoc/short-docblock.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fshort-docblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Frustdoc%2Fshort-docblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fshort-docblock.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -1,24 +1,24 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/index.html '//*[@class=\"item-right docblock-short\"]' 'fooo'\n-// @!has foo/index.html '//*[@class=\"item-right docblock-short\"]/h1' 'fooo'\n+// @has foo/index.html '//*[@class=\"desc docblock-short\"]' 'fooo'\n+// @!has foo/index.html '//*[@class=\"desc docblock-short\"]/h1' 'fooo'\n // @has foo/fn.foo.html '//h2[@id=\"fooo\"]/a[@href=\"#fooo\"]' 'fooo'\n \n /// # fooo\n ///\n /// foo\n pub fn foo() {}\n \n-// @has foo/index.html '//*[@class=\"item-right docblock-short\"]' 'mooood'\n-// @!has foo/index.html '//*[@class=\"item-right docblock-short\"]/h2' 'mooood'\n+// @has foo/index.html '//*[@class=\"desc docblock-short\"]' 'mooood'\n+// @!has foo/index.html '//*[@class=\"desc docblock-short\"]/h2' 'mooood'\n // @has foo/foo/index.html '//h3[@id=\"mooood\"]/a[@href=\"#mooood\"]' 'mooood'\n \n /// ## mooood\n ///\n /// foo mod\n pub mod foo {}\n \n-// @has foo/index.html '//*[@class=\"item-right docblock-short\"]/a[@href=\\\n+// @has foo/index.html '//*[@class=\"desc docblock-short\"]/a[@href=\\\n //                      \"https://nougat.world\"]/code' 'nougat'\n \n /// [`nougat`](https://nougat.world)"}, {"sha": "dfc800c8e7e1213811489a12af5ddde1463b342e", "filename": "tests/ui/traits/non_lifetime_binders/bad-sized-cond.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.rs?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -0,0 +1,23 @@\n+#![feature(non_lifetime_binders)]\n+//~^ WARN is incomplete and may not be safe\n+\n+pub fn foo()\n+where\n+    for<V> V: Sized,\n+{\n+}\n+\n+pub fn bar()\n+where\n+    for<V> V: IntoIterator,\n+{\n+}\n+\n+fn main() {\n+    foo();\n+    //~^ ERROR the size for values of type `V` cannot be known at compilation time\n+\n+    bar();\n+    //~^ ERROR the size for values of type `V` cannot be known at compilation time\n+    //~| ERROR `V` is not an iterator\n+}"}, {"sha": "6480e490e8b307fffdd62f6e13c001782ad429f5", "filename": "tests/ui/traits/non_lifetime_binders/bad-sized-cond.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/eebdfb55fce148676c24555505aebf648123b2de/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eebdfb55fce148676c24555505aebf648123b2de/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.stderr?ref=eebdfb55fce148676c24555505aebf648123b2de", "patch": "@@ -0,0 +1,62 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-sized-cond.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: the size for values of type `V` cannot be known at compilation time\n+  --> $DIR/bad-sized-cond.rs:17:5\n+   |\n+LL |     foo();\n+   |     ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `V`\n+note: required by a bound in `foo`\n+  --> $DIR/bad-sized-cond.rs:6:15\n+   |\n+LL | pub fn foo()\n+   |        --- required by a bound in this\n+LL | where\n+LL |     for<V> V: Sized,\n+   |               ^^^^^ required by this bound in `foo`\n+\n+error[E0277]: the size for values of type `V` cannot be known at compilation time\n+  --> $DIR/bad-sized-cond.rs:20:5\n+   |\n+LL |     bar();\n+   |     ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `V`\n+   = note: required for `V` to implement `IntoIterator`\n+note: required by a bound in `bar`\n+  --> $DIR/bad-sized-cond.rs:12:15\n+   |\n+LL | pub fn bar()\n+   |        --- required by a bound in this\n+LL | where\n+LL |     for<V> V: IntoIterator,\n+   |               ^^^^^^^^^^^^ required by this bound in `bar`\n+\n+error[E0277]: `V` is not an iterator\n+  --> $DIR/bad-sized-cond.rs:20:5\n+   |\n+LL |     bar();\n+   |     ^^^ `V` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `V`\n+   = note: required for `V` to implement `IntoIterator`\n+note: required by a bound in `bar`\n+  --> $DIR/bad-sized-cond.rs:12:15\n+   |\n+LL | pub fn bar()\n+   |        --- required by a bound in this\n+LL | where\n+LL |     for<V> V: IntoIterator,\n+   |               ^^^^^^^^^^^^ required by this bound in `bar`\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}]}