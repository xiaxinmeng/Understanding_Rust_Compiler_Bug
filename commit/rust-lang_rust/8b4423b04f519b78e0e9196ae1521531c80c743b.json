{"sha": "8b4423b04f519b78e0e9196ae1521531c80c743b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNDQyM2IwNGY1MTliNzhlMGU5MTk2YWUxNTIxNTMxYzgwYzc0M2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-09T17:34:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-11T13:49:18Z"}, "message": "De-pub some private runtime components\n\nThis change was waiting for privacy to get sorted out, which should be true now\nthat #8215 has landed.\n\nCloses #4427", "tree": {"sha": "713d12f4142749e7699de5c61962ee359a30ca88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/713d12f4142749e7699de5c61962ee359a30ca88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b4423b04f519b78e0e9196ae1521531c80c743b", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4423b04f519b78e0e9196ae1521531c80c743b", "html_url": "https://github.com/rust-lang/rust/commit/8b4423b04f519b78e0e9196ae1521531c80c743b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b4423b04f519b78e0e9196ae1521531c80c743b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8015f9c27ec342dbf0b28c9c0c4769d8b3bcfc9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8015f9c27ec342dbf0b28c9c0c4769d8b3bcfc9f", "html_url": "https://github.com/rust-lang/rust/commit/8015f9c27ec342dbf0b28c9c0c4769d8b3bcfc9f"}], "stats": {"total": 213, "additions": 114, "deletions": 99}, "files": [{"sha": "9218f5c8ec1cd0fe56298414add2e6dd45d403eb", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -739,7 +739,7 @@ fn get_concurrency() -> uint {\n             }\n         }\n         None => {\n-            rt::util::default_sched_threads()\n+            rt::default_sched_threads()\n         }\n     }\n }"}, {"sha": "38925621f1200c573bce52a6630689335eb80c0f", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -123,10 +123,10 @@ pub unsafe fn annihilate() {\n \n     if debug_mem() {\n         // We do logging here w/o allocation.\n-        rterrln!(\"annihilator stats:\\n  \\\n-                     total boxes: {}\\n  \\\n-                    unique boxes: {}\\n  \\\n-                     bytes freed: {}\",\n-                 stats.n_total_boxes, stats.n_unique_boxes, stats.n_bytes_freed);\n+        debug2!(\"annihilator stats:\\n  \\\n+                       total boxes: {}\\n  \\\n+                      unique boxes: {}\\n  \\\n+                       bytes freed: {}\",\n+                stats.n_total_boxes, stats.n_unique_boxes, stats.n_bytes_freed);\n     }\n }"}, {"sha": "e7cba0895e45125aa4bd9b73f28e23f1fec4cf75", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -1185,7 +1185,7 @@ pub fn last_os_error() -> ~str {\n  */\n pub fn set_exit_status(code: int) {\n     use rt;\n-    rt::util::set_exit_status(code);\n+    rt::set_exit_status(code);\n }\n \n unsafe fn load_argc_and_argv(argc: c_int, argv: **c_char) -> ~[~str] {"}, {"sha": "3c2000c522c4d654561d4ea78f982973277b5a06", "filename": "src/libstd/rt/borrowck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fborrowck.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -15,10 +15,10 @@ use option::{Option, None, Some};\n use ptr::RawPtr;\n use rt::env;\n use rt::local::Local;\n+use rt::task;\n use rt::task::Task;\n use str::{OwnedStr, StrSlice};\n use str;\n-use sys;\n use uint;\n use unstable::raw;\n use vec::ImmutableVector;\n@@ -64,7 +64,7 @@ unsafe fn fail_borrowed(box: *mut raw::Box<()>, file: *c_char, line: size_t) {\n         None => { // not recording borrows\n             let msg = \"borrowed\";\n             do msg.with_c_str |msg_p| {\n-                sys::begin_unwind_(msg_p, file, line);\n+                task::begin_unwind(msg_p, file, line);\n             }\n         }\n         Some(borrow_list) => { // recording borrows\n@@ -80,7 +80,7 @@ unsafe fn fail_borrowed(box: *mut raw::Box<()>, file: *c_char, line: size_t) {\n                 }\n             }\n             do msg.with_c_str |msg_p| {\n-                sys::begin_unwind_(msg_p, file, line)\n+                task::begin_unwind(msg_p, file, line)\n             }\n         }\n     }\n@@ -179,7 +179,7 @@ pub unsafe fn unrecord_borrow(a: *u8, old_ref_count: uint,\n             if br.box != a || br.file != file || br.line != line {\n                 let err = format!(\"wrong borrow found, br={:?}\", br);\n                 do err.with_c_str |msg_p| {\n-                    sys::begin_unwind_(msg_p, file, line)\n+                    task::begin_unwind(msg_p, file, line)\n                 }\n             }\n             borrow_list"}, {"sha": "262da9f3b8e5e27d6a7e830ab016d311ff227402", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -86,6 +86,17 @@ impl Drop for LocalHeap {\n     }\n }\n \n+pub unsafe fn local_malloc(td: *libc::c_char, size: libc::uintptr_t) -> *libc::c_char {\n+    // XXX: Unsafe borrow for speed. Lame.\n+    let task: Option<*mut Task> = Local::try_unsafe_borrow();\n+    match task {\n+        Some(task) => {\n+            (*task).heap.alloc(td as *libc::c_void, size as uint) as *libc::c_char\n+        }\n+        None => rtabort!(\"local malloc outside of task\")\n+    }\n+}\n+\n // A little compatibility function\n pub unsafe fn local_free(ptr: *libc::c_char) {\n     // XXX: Unsafe borrow for speed. Lame."}, {"sha": "c9534413c53e40c4f93af85858da4a38d1b98193", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -178,5 +178,5 @@ pub fn maybe_tls_key() -> Option<tls::Key> {\n #[inline]\n #[cfg(test)]\n pub fn maybe_tls_key() -> Option<tls::Key> {\n-    unsafe { ::cast::transmute(::realstd::rt::local_ptr::maybe_tls_key()) }\n+    unsafe { ::cast::transmute(::realstd::rt::shouldnt_be_public::maybe_tls_key()) }\n }"}, {"sha": "c6ff3427c15f69590786b8fb7f5fe67105edcb08", "filename": "src/libstd/rt/macros.rs", "status": "renamed", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmacros.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Macros used by the runtime.\n+//!\n+//! These macros call functions which are only accessible in the `rt` module, so\n+//! they aren't defined anywhere outside of the `rt` module.\n+\n #[macro_escape];\n-#[doc(hidden)];\n \n macro_rules! rterrln (\n     ($($arg:tt)*) => ( {\n@@ -37,7 +41,7 @@ macro_rules! rtassert (\n )\n \n \n-macro_rules! rtabort(\n+macro_rules! rtabort (\n     ($($msg:tt)*) => ( {\n         ::rt::util::abort(format!($($msg)*));\n     } )", "previous_filename": "src/libstd/macros.rs"}, {"sha": "78f0bb0a07ca619741314e6545371dcaff3debd2", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -76,6 +76,16 @@ use vec::{OwnedVector, MutableVector, ImmutableVector};\n use self::thread::Thread;\n use self::work_queue::WorkQueue;\n \n+// the os module needs to reach into this helper, so allow general access\n+// through this reexport.\n+pub use self::util::set_exit_status;\n+\n+// this is somewhat useful when a program wants to spawn a \"reasonable\" number\n+// of workers based on the constraints of the system that it's running on.\n+// Perhaps this shouldn't be a `pub use` though and there should be another\n+// method...\n+pub use self::util::default_sched_threads;\n+\n // XXX: these probably shouldn't be public...\n #[doc(hidden)]\n pub mod shouldnt_be_public {\n@@ -86,8 +96,12 @@ pub mod shouldnt_be_public {\n     pub use super::select::SelectInner;\n     pub use super::rtio::EventLoop;\n     pub use super::select::{SelectInner, SelectPortInner};\n+    pub use super::local_ptr::maybe_tls_key;\n }\n \n+// Internal macros used by the runtime.\n+mod macros;\n+\n /// The global (exchange) heap.\n pub mod global_heap;\n \n@@ -158,17 +172,14 @@ pub mod comm;\n \n mod select;\n \n-// FIXME #5248 shouldn't be pub\n /// The runtime needs to be able to put a pointer into thread-local storage.\n-pub mod local_ptr;\n+mod local_ptr;\n \n-// FIXME #5248: The import in `sched` doesn't resolve unless this is pub!\n /// Bindings to pthread/windows thread-local storage.\n-pub mod thread_local_storage;\n+mod thread_local_storage;\n \n-// FIXME #5248 shouldn't be pub\n /// Just stuff\n-pub mod util;\n+mod util;\n \n // Global command line argument storage\n pub mod args;"}, {"sha": "d5278975d8dfee89295937378959b4fdb5702b12", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -17,7 +17,7 @@ use borrow;\n use cast::transmute;\n use cleanup;\n use local_data;\n-use libc::{c_void, uintptr_t};\n+use libc::{c_void, uintptr_t, c_char, size_t};\n use prelude::*;\n use option::{Option, Some, None};\n use rt::borrowck;\n@@ -465,6 +465,48 @@ impl Unwinder {\n     }\n }\n \n+/// This is the entry point of unwinding for things like lang items and such.\n+/// The arguments are normally generated by the compiler.\n+pub fn begin_unwind(msg: *c_char, file: *c_char, line: size_t) -> ! {\n+    use rt::in_green_task_context;\n+    use rt::task::Task;\n+    use rt::local::Local;\n+    use rt::logging::Logger;\n+    use str::Str;\n+    use c_str::CString;\n+\n+    unsafe {\n+        let msg = CString::new(msg, false);\n+        let file = CString::new(file, false);\n+        let msg = match msg.as_str() {\n+            Some(s) => s, None => rtabort!(\"message wasn't utf8?\")\n+        };\n+        let file = match file.as_str() {\n+            Some(s) => s, None => rtabort!(\"message wasn't utf8?\")\n+        };\n+\n+        if in_green_task_context() {\n+            // Be careful not to allocate in this block, if we're failing we may\n+            // have been failing due to a lack of memory in the first place...\n+            do Local::borrow |task: &mut Task| {\n+                let n = task.name.as_ref().map(|n| n.as_slice()).unwrap_or(\"<unnamed>\");\n+                format_args!(|args| { task.logger.log(args) },\n+                             \"task '{}' failed at '{}', {}:{}\",\n+                             n, msg, file, line);\n+            }\n+        } else {\n+            rterrln!(\"failed in non-task context at '{}', {}:{}\",\n+                     msg, file, line as int);\n+        }\n+\n+        let task: *mut Task = Local::unsafe_borrow();\n+        if (*task).unwinder.unwinding {\n+            rtabort!(\"unwinding again\");\n+        }\n+        (*task).unwinder.begin_unwind();\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use rt::test::*;"}, {"sha": "647d88c26f2f5440f3a63e91e4fede8e73f3313e", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -16,8 +16,6 @@ use option::{Some, None, Option};\n use os;\n use str::StrSlice;\n use unstable::atomics::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n-\n-#[cfg(target_os=\"macos\")]\n use unstable::running_on_valgrind;\n \n // Indicates whether we should perform expensive sanity checks, including rtassert!\n@@ -37,21 +35,17 @@ pub fn num_cpus() -> uint {\n     }\n }\n \n-/// Valgrind has a fixed-sized array (size around 2000) of segment descriptors wired into it; this\n-/// is a hard limit and requires rebuilding valgrind if you want to go beyond it. Normally this is\n-/// not a problem, but in some tests, we produce a lot of threads casually. Making lots of threads\n-/// alone might not be a problem _either_, except on OSX, the segments produced for new threads\n-/// _take a while_ to get reclaimed by the OS. Combined with the fact that libuv schedulers fork off\n-/// a separate thread for polling fsevents on OSX, we get a perfect storm of creating \"too many\n-/// mappings\" for valgrind to handle when running certain stress tests in the runtime.\n-#[cfg(target_os=\"macos\")]\n-pub fn limit_thread_creation_due_to_osx_and_valgrind() -> bool {\n-    running_on_valgrind()\n-}\n-\n-#[cfg(not(target_os=\"macos\"))]\n+/// Valgrind has a fixed-sized array (size around 2000) of segment descriptors\n+/// wired into it; this is a hard limit and requires rebuilding valgrind if you\n+/// want to go beyond it. Normally this is not a problem, but in some tests, we\n+/// produce a lot of threads casually.  Making lots of threads alone might not\n+/// be a problem _either_, except on OSX, the segments produced for new threads\n+/// _take a while_ to get reclaimed by the OS. Combined with the fact that libuv\n+/// schedulers fork off a separate thread for polling fsevents on OSX, we get a\n+/// perfect storm of creating \"too many mappings\" for valgrind to handle when\n+/// running certain stress tests in the runtime.\n pub fn limit_thread_creation_due_to_osx_and_valgrind() -> bool {\n-    false\n+    (cfg!(target_os=\"macos\")) && running_on_valgrind()\n }\n \n /// Get's the number of scheduler threads requested by the environment"}, {"sha": "5a3f40f280fffd06d4bca70e8be3e79147b87470", "filename": "src/libstd/std.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -88,9 +88,6 @@ pub mod linkhack {\n     }\n }\n \n-// Internal macros\n-mod macros;\n-\n /* The Prelude. */\n \n pub mod prelude;"}, {"sha": "10c3fed1d54db73d5e3ae417e544e41be4d3f43d", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -14,9 +14,10 @@\n \n use c_str::ToCStr;\n use cast;\n+use libc::size_t;\n use libc;\n-use libc::{c_char, size_t};\n use repr;\n+use rt::task;\n use str;\n use unstable::intrinsics;\n \n@@ -109,7 +110,7 @@ impl FailWithCause for ~str {\n     fn fail_with(cause: ~str, file: &'static str, line: uint) -> ! {\n         do cause.with_c_str |msg_buf| {\n             do file.with_c_str |file_buf| {\n-                begin_unwind_(msg_buf, file_buf, line as libc::size_t)\n+                task::begin_unwind(msg_buf, file_buf, line as libc::size_t)\n             }\n         }\n     }\n@@ -119,47 +120,12 @@ impl FailWithCause for &'static str {\n     fn fail_with(cause: &'static str, file: &'static str, line: uint) -> ! {\n         do cause.with_c_str |msg_buf| {\n             do file.with_c_str |file_buf| {\n-                begin_unwind_(msg_buf, file_buf, line as libc::size_t)\n+                task::begin_unwind(msg_buf, file_buf, line as libc::size_t)\n             }\n         }\n     }\n }\n \n-// FIXME #4427: Temporary until rt::rt_fail_ goes away\n-pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n-    use rt::in_green_task_context;\n-    use rt::task::Task;\n-    use rt::local::Local;\n-    use rt::logging::Logger;\n-    use str::Str;\n-\n-    unsafe {\n-        // XXX: Bad re-allocations. fail2! needs some refactoring\n-        let msg = str::raw::from_c_str(msg);\n-        let file = str::raw::from_c_str(file);\n-\n-        if in_green_task_context() {\n-            // Be careful not to allocate in this block, if we're failing we may\n-            // have been failing due to a lack of memory in the first place...\n-            do Local::borrow |task: &mut Task| {\n-                let n = task.name.as_ref().map(|n| n.as_slice()).unwrap_or(\"<unnamed>\");\n-                format_args!(|args| { task.logger.log(args) },\n-                             \"task '{}' failed at '{}', {}:{}\",\n-                             n, msg.as_slice(), file.as_slice(), line);\n-            }\n-        } else {\n-            rterrln!(\"failed in non-task context at '{}', {}:{}\",\n-                     msg, file, line as int);\n-        }\n-\n-        let task: *mut Task = Local::unsafe_borrow();\n-        if (*task).unwinder.unwinding {\n-            rtabort!(\"unwinding again\");\n-        }\n-        (*task).unwinder.begin_unwind();\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use cast;"}, {"sha": "611d2f1fdb67ba7dfcb4b33a118f915ee250e71c", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -448,7 +448,7 @@ impl RuntimeGlue {\n     }\n \n     fn with_task_handle_and_failing(blk: &fn(&KillHandle, bool)) {\n-        rtassert!(in_green_task_context());\n+        assert!(in_green_task_context());\n         unsafe {\n             // Can't use safe borrow, because the taskgroup destructor needs to\n             // access the scheduler again to send kill signals to other tasks.\n@@ -458,7 +458,7 @@ impl RuntimeGlue {\n     }\n \n     fn with_my_taskgroup<U>(blk: &fn(&Taskgroup) -> U) -> U {\n-        rtassert!(in_green_task_context());\n+        assert!(in_green_task_context());\n         unsafe {\n             // Can't use safe borrow, because creating new hashmaps for the\n             // tasksets requires an rng, which needs to borrow the sched.\n@@ -553,7 +553,7 @@ fn enlist_many(child: &KillHandle, child_arc: &TaskGroupArc,\n }\n \n pub fn spawn_raw(mut opts: TaskOpts, f: ~fn()) {\n-    rtassert!(in_green_task_context());\n+    assert!(in_green_task_context());\n \n     let child_data = Cell::new(gen_child_taskgroup(opts.linked, opts.supervised));\n     let indestructible = opts.indestructible;\n@@ -631,7 +631,7 @@ pub fn spawn_raw(mut opts: TaskOpts, f: ~fn()) {\n             let (thread_port, thread_chan) = oneshot();\n             let thread_port_cell = Cell::new(thread_port);\n             let join_task = do Task::build_child(None) {\n-                rtdebug!(\"running join task\");\n+                debug2!(\"running join task\");\n                 let thread_port = thread_port_cell.take();\n                 let thread: Thread = thread_port.recv();\n                 thread.join();\n@@ -648,11 +648,11 @@ pub fn spawn_raw(mut opts: TaskOpts, f: ~fn()) {\n                 let join_task = join_task_cell.take();\n \n                 let bootstrap_task = ~do Task::new_root(&mut new_sched.stack_pool, None) || {\n-                    rtdebug!(\"boostrapping a 1:1 scheduler\");\n+                    debug2!(\"boostrapping a 1:1 scheduler\");\n                 };\n                 new_sched.bootstrap(bootstrap_task);\n \n-                rtdebug!(\"enqueing join_task\");\n+                debug2!(\"enqueing join_task\");\n                 // Now tell the original scheduler to join with this thread\n                 // by scheduling a thread-joining task on the original scheduler\n                 orig_sched_handle.send_task_from_friend(join_task);\n@@ -684,7 +684,7 @@ pub fn spawn_raw(mut opts: TaskOpts, f: ~fn()) {\n     }\n \n     task.name = opts.name.take();\n-    rtdebug!(\"spawn calling run_task\");\n+    debug2!(\"spawn calling run_task\");\n     Scheduler::run_task(task);\n \n }"}, {"sha": "6f2928e99fed782444858eb864bf04e213dcbb56", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4423b04f519b78e0e9196ae1521531c80c743b/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=8b4423b04f519b78e0e9196ae1521531c80c743b", "patch": "@@ -12,16 +12,13 @@\n \n use c_str::ToCStr;\n use cast::transmute;\n-use libc::{c_char, c_void, size_t, uintptr_t};\n-use option::{Option, None, Some};\n-use sys;\n-use rt::task::Task;\n-use rt::local::Local;\n+use libc::{c_char, size_t, uintptr_t};\n+use rt::task;\n use rt::borrowck;\n \n #[lang=\"fail_\"]\n pub fn fail_(expr: *c_char, file: *c_char, line: size_t) -> ! {\n-    sys::begin_unwind_(expr, file, line);\n+    task::begin_unwind(expr, file, line);\n }\n \n #[lang=\"fail_bounds_check\"]\n@@ -36,14 +33,7 @@ pub fn fail_bounds_check(file: *c_char, line: size_t,\n \n #[lang=\"malloc\"]\n pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n-    // XXX: Unsafe borrow for speed. Lame.\n-    let task: Option<*mut Task> = Local::try_unsafe_borrow();\n-    match task {\n-        Some(task) => {\n-            (*task).heap.alloc(td as *c_void, size as uint) as *c_char\n-        }\n-        None => rtabort!(\"local malloc outside of task\")\n-    }\n+    ::rt::local_heap::local_malloc(td, size)\n }\n \n // NB: Calls to free CANNOT be allowed to fail, as throwing an exception from"}]}