{"sha": "c56f0414776ad7de87679d4e646828b043518787", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NmYwNDE0Nzc2YWQ3ZGU4NzY3OWQ0ZTY0NjgyOGIwNDM1MTg3ODc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-13T10:35:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-13T10:35:31Z"}, "message": "internal: simplify", "tree": {"sha": "4aaaa5430829501b0c3f1c0ca1afc5e35dfbc3d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aaaa5430829501b0c3f1c0ca1afc5e35dfbc3d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c56f0414776ad7de87679d4e646828b043518787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c56f0414776ad7de87679d4e646828b043518787", "html_url": "https://github.com/rust-lang/rust/commit/c56f0414776ad7de87679d4e646828b043518787", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c56f0414776ad7de87679d4e646828b043518787/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "940b3afd00704dcfd5e6f57015ce2741da2b191c", "url": "https://api.github.com/repos/rust-lang/rust/commits/940b3afd00704dcfd5e6f57015ce2741da2b191c", "html_url": "https://github.com/rust-lang/rust/commit/940b3afd00704dcfd5e6f57015ce2741da2b191c"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "81e2051abb58134638954dd0cb8909b404ce3d0e", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c56f0414776ad7de87679d4e646828b043518787/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56f0414776ad7de87679d4e646828b043518787/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=c56f0414776ad7de87679d4e646828b043518787", "patch": "@@ -17,7 +17,7 @@ pub(crate) fn pattern(p: &mut Parser) {\n     pattern_r(p, PAT_RECOVERY_SET);\n }\n \n-/// Parses a pattern list separated by pipes `|`\n+/// Parses a pattern list separated by pipes `|`.\n pub(super) fn pattern_top(p: &mut Parser) {\n     pattern_top_r(p, PAT_RECOVERY_SET)\n }\n@@ -27,14 +27,15 @@ pub(crate) fn pattern_single(p: &mut Parser) {\n }\n \n /// Parses a pattern list separated by pipes `|`\n-/// using the given `recovery_set`\n+/// using the given `recovery_set`.\n pub(super) fn pattern_top_r(p: &mut Parser, recovery_set: TokenSet) {\n     p.eat(T![|]);\n     pattern_r(p, recovery_set);\n }\n \n /// Parses a pattern list separated by pipes `|`, with no leading `|`,using the\n-/// given `recovery_set`\n+/// given `recovery_set`.\n+\n // test or_pattern\n // fn main() {\n //     match () {"}, {"sha": "ae07190f8632d6bccfc794660f1c6e6b9b483077", "filename": "crates/sourcegen/src/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c56f0414776ad7de87679d4e646828b043518787/crates%2Fsourcegen%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56f0414776ad7de87679d4e646828b043518787/crates%2Fsourcegen%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsourcegen%2Fsrc%2Flib.rs?ref=c56f0414776ad7de87679d4e646828b043518787", "patch": "@@ -71,25 +71,25 @@ impl CommentBlock {\n     pub fn extract_untagged(text: &str) -> Vec<CommentBlock> {\n         let mut res = Vec::new();\n \n-        let prefix = \"// \";\n         let lines = text.lines().map(str::trim_start);\n \n         let dummy_block = CommentBlock { id: String::new(), line: 0, contents: Vec::new() };\n         let mut block = dummy_block.clone();\n         for (line_num, line) in lines.enumerate() {\n-            if line == \"//\" {\n-                block.contents.push(String::new());\n-                continue;\n-            }\n-\n-            let is_comment = line.starts_with(prefix);\n-            if is_comment {\n-                block.contents.push(line[prefix.len()..].to_string());\n-            } else {\n-                if !block.contents.is_empty() {\n-                    res.push(mem::replace(&mut block, dummy_block.clone()));\n+            match line.strip_prefix(\"//\") {\n+                Some(mut contents) => {\n+                    if let Some(' ') = contents.chars().next() {\n+                        contents = &contents[1..];\n+                    }\n+                    block.contents.push(contents.to_string());\n+                }\n+                None => {\n+                    if !block.contents.is_empty() {\n+                        let block = mem::replace(&mut block, dummy_block.clone());\n+                        res.push(block);\n+                    }\n+                    block.line = line_num + 2;\n                 }\n-                block.line = line_num + 2;\n             }\n         }\n         if !block.contents.is_empty() {"}]}