{"sha": "dadfbb6a4b269e324b3c63cd0420d9e1b13370e0", "node_id": "C_kwDOAAsO6NoAKGRhZGZiYjZhNGIyNjllMzI0YjNjNjNjZDA0MjBkOWUxYjEzMzcwZTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-03T19:45:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-03T19:45:01Z"}, "message": "Rollup merge of #108647 - nikic:pgo-sh, r=jyn514\n\nRemove dead pgo.sh file\n\nThis has been replaced by stage-build.py.", "tree": {"sha": "e56da9eb92d039373b66ea54cb12e18cc6bebc3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e56da9eb92d039373b66ea54cb12e18cc6bebc3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dadfbb6a4b269e324b3c63cd0420d9e1b13370e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkAk49CRBK7hj4Ov3rIwAAA5EIAIYo2wfTcApaE4zuTOTsGkDp\nJ+pK47YhYTUaqRCX+N9dSrHC0h9ZmMw6dB8wnd7mPZBHiUGBgZdBvSBqLqQ6JlG7\nMW6g5p4Cb5iaOb7dj5Fafp6dG57TIn1aU3kf3mpbYShtkSAu8kl8ho+gnXVenPPm\nJ/eiLlpOrRnKwKPxeXra7EkyojnHmFhDO6gEKb1H8ihvTvXrBE1hccZj7l/oYER+\nPaGHu3ffCebZNAZ2mFedHit396drlUeLG0koNwfayhUc4K3QEbqUAc+Dszb38+4Q\nRMFVQgDnDB9T6ESrYiMcMfSWsFMgzrzON3k+hhHLrEaVf4MnHBTi0NREyZ3J39c=\n=B495\n-----END PGP SIGNATURE-----\n", "payload": "tree e56da9eb92d039373b66ea54cb12e18cc6bebc3f\nparent 7a0fc8e35eb3ba2b5eb48a4abfc4bf53b5fb0181\nparent e958198e224c279200c30c27c329af0be9015e6c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677872701 +0100\ncommitter GitHub <noreply@github.com> 1677872701 +0100\n\nRollup merge of #108647 - nikic:pgo-sh, r=jyn514\n\nRemove dead pgo.sh file\n\nThis has been replaced by stage-build.py.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dadfbb6a4b269e324b3c63cd0420d9e1b13370e0", "html_url": "https://github.com/rust-lang/rust/commit/dadfbb6a4b269e324b3c63cd0420d9e1b13370e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dadfbb6a4b269e324b3c63cd0420d9e1b13370e0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0fc8e35eb3ba2b5eb48a4abfc4bf53b5fb0181", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0fc8e35eb3ba2b5eb48a4abfc4bf53b5fb0181", "html_url": "https://github.com/rust-lang/rust/commit/7a0fc8e35eb3ba2b5eb48a4abfc4bf53b5fb0181"}, {"sha": "e958198e224c279200c30c27c329af0be9015e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e958198e224c279200c30c27c329af0be9015e6c", "html_url": "https://github.com/rust-lang/rust/commit/e958198e224c279200c30c27c329af0be9015e6c"}], "stats": {"total": 230, "additions": 0, "deletions": 230}, "files": [{"sha": "cbe32920a7458cab76659a2d1de8b92048757fa5", "filename": "src/ci/pgo.sh", "status": "removed", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/7a0fc8e35eb3ba2b5eb48a4abfc4bf53b5fb0181/src%2Fci%2Fpgo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7a0fc8e35eb3ba2b5eb48a4abfc4bf53b5fb0181/src%2Fci%2Fpgo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fpgo.sh?ref=7a0fc8e35eb3ba2b5eb48a4abfc4bf53b5fb0181", "patch": "@@ -1,230 +0,0 @@\n-#!/bin/bash\n-# ignore-tidy-linelength\n-\n-set -euxo pipefail\n-\n-ci_dir=`cd $(dirname $0) && pwd`\n-source \"$ci_dir/shared.sh\"\n-\n-# The root checkout, where the source is located\n-CHECKOUT=/checkout\n-\n-DOWNLOADED_LLVM=/rustroot\n-\n-# The main directory where the build occurs, which can be different between linux and windows\n-BUILD_ROOT=$CHECKOUT/obj\n-\n-if isWindows; then\n-    CHECKOUT=$(pwd)\n-    DOWNLOADED_LLVM=$CHECKOUT/citools/clang-rust\n-    BUILD_ROOT=$CHECKOUT\n-fi\n-\n-# The various build artifacts used in other commands: to launch rustc builds, build the perf\n-# collector, and run benchmarks to gather profiling data\n-BUILD_ARTIFACTS=$BUILD_ROOT/build/$PGO_HOST\n-RUSTC_STAGE_0=$BUILD_ARTIFACTS/stage0/bin/rustc\n-CARGO_STAGE_0=$BUILD_ARTIFACTS/stage0/bin/cargo\n-RUSTC_STAGE_2=$BUILD_ARTIFACTS/stage2/bin/rustc\n-\n-# Windows needs these to have the .exe extension\n-if isWindows; then\n-    RUSTC_STAGE_0=\"${RUSTC_STAGE_0}.exe\"\n-    CARGO_STAGE_0=\"${CARGO_STAGE_0}.exe\"\n-    RUSTC_STAGE_2=\"${RUSTC_STAGE_2}.exe\"\n-fi\n-\n-# Make sure we have a temporary PGO work folder\n-PGO_TMP=/tmp/tmp-pgo\n-mkdir -p $PGO_TMP\n-rm -rf $PGO_TMP/*\n-\n-RUSTC_PERF=$PGO_TMP/rustc-perf\n-\n-# Compile several crates to gather execution PGO profiles.\n-# Arg0 => profiles (Debug, Opt)\n-# Arg1 => scenarios (Full, IncrFull, All)\n-# Arg2 => crates (syn, cargo, ...)\n-gather_profiles () {\n-  cd $BUILD_ROOT\n-\n-  # Compile libcore, both in opt-level=0 and opt-level=3\n-  RUSTC_BOOTSTRAP=1 $RUSTC_STAGE_2 \\\n-      --edition=2021 --crate-type=lib $CHECKOUT/library/core/src/lib.rs \\\n-      --out-dir $PGO_TMP\n-  RUSTC_BOOTSTRAP=1 $RUSTC_STAGE_2 \\\n-      --edition=2021 --crate-type=lib -Copt-level=3 $CHECKOUT/library/core/src/lib.rs \\\n-      --out-dir $PGO_TMP\n-\n-  cd $RUSTC_PERF\n-\n-  # Run rustc-perf benchmarks\n-  # Benchmark using profile_local with eprintln, which essentially just means\n-  # don't actually benchmark -- just make sure we run rustc a bunch of times.\n-  RUST_LOG=collector=debug \\\n-  RUSTC=$RUSTC_STAGE_0 \\\n-  RUSTC_BOOTSTRAP=1 \\\n-  $CARGO_STAGE_0 run -p collector --bin collector -- \\\n-      profile_local \\\n-      eprintln \\\n-      $RUSTC_STAGE_2 \\\n-      --id Test \\\n-      --profiles $1 \\\n-      --cargo $CARGO_STAGE_0 \\\n-      --scenarios $2 \\\n-      --include $3\n-\n-  cd $BUILD_ROOT\n-}\n-\n-# This path has to be absolute\n-LLVM_PROFILE_DIRECTORY_ROOT=$PGO_TMP/llvm-pgo\n-\n-# We collect LLVM profiling information and rustc profiling information in\n-# separate phases. This increases build time -- though not by a huge amount --\n-# but prevents any problems from arising due to different profiling runtimes\n-# being simultaneously linked in.\n-# LLVM IR PGO does not respect LLVM_PROFILE_FILE, so we have to set the profiling file\n-# path through our custom environment variable. We include the PID in the directory path\n-# to avoid updates to profile files being lost because of race conditions.\n-LLVM_PROFILE_DIR=${LLVM_PROFILE_DIRECTORY_ROOT}/prof-%p python3 $CHECKOUT/x.py build \\\n-    --target=$PGO_HOST \\\n-    --host=$PGO_HOST \\\n-    --stage 2 library/std \\\n-    --llvm-profile-generate\n-\n-# Compile rustc-perf:\n-# - get the expected commit source code: on linux, the Dockerfile downloads a source archive before\n-# running this script. On Windows, we do that here.\n-if isLinux; then\n-    cp -r /tmp/rustc-perf $RUSTC_PERF\n-    chown -R $(whoami): $RUSTC_PERF\n-else\n-    # rustc-perf version from 2022-07-22\n-    PERF_COMMIT=3c253134664fdcba862c539d37f0de18557a9a4c\n-    retry curl -LS -o $PGO_TMP/perf.zip \\\n-        https://github.com/rust-lang/rustc-perf/archive/$PERF_COMMIT.zip && \\\n-        cd $PGO_TMP && unzip -q perf.zip && \\\n-        mv rustc-perf-$PERF_COMMIT $RUSTC_PERF && \\\n-        rm perf.zip\n-fi\n-\n-# - build rustc-perf's collector ahead of time, which is needed to make sure the rustc-fake binary\n-# used by the collector is present.\n-cd $RUSTC_PERF\n-\n-RUSTC=$RUSTC_STAGE_0 \\\n-RUSTC_BOOTSTRAP=1 \\\n-$CARGO_STAGE_0 build -p collector\n-\n-# Here we're profiling LLVM, so we only care about `Debug` and `Opt`, because we want to stress\n-# codegen. We also profile some of the most prolific crates.\n-gather_profiles \"Debug,Opt\" \"Full\" \\\n-    \"syn-1.0.89,cargo-0.60.0,serde-1.0.136,ripgrep-13.0.0,regex-1.5.5,clap-3.1.6,hyper-0.14.18\"\n-\n-LLVM_PROFILE_MERGED_FILE=$PGO_TMP/llvm-pgo.profdata\n-\n-# Merge the profile data we gathered for LLVM\n-# Note that this uses the profdata from the clang we used to build LLVM,\n-# which likely has a different version than our in-tree clang.\n-$DOWNLOADED_LLVM/bin/llvm-profdata merge -o ${LLVM_PROFILE_MERGED_FILE} ${LLVM_PROFILE_DIRECTORY_ROOT}\n-\n-echo \"LLVM PGO statistics\"\n-du -sh ${LLVM_PROFILE_MERGED_FILE}\n-du -sh ${LLVM_PROFILE_DIRECTORY_ROOT}\n-echo \"Profile file count\"\n-find ${LLVM_PROFILE_DIRECTORY_ROOT} -type f | wc -l\n-\n-# We don't need the individual .profraw files now that they have been merged into a final .profdata\n-rm -r $LLVM_PROFILE_DIRECTORY_ROOT\n-\n-# Rustbuild currently doesn't support rebuilding LLVM when PGO options\n-# change (or any other llvm-related options); so just clear out the relevant\n-# directories ourselves.\n-rm -r $BUILD_ARTIFACTS/llvm $BUILD_ARTIFACTS/lld\n-\n-# Okay, LLVM profiling is done, switch to rustc PGO.\n-\n-# The path has to be absolute\n-RUSTC_PROFILE_DIRECTORY_ROOT=$PGO_TMP/rustc-pgo\n-\n-python3 $CHECKOUT/x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n-    --stage 2 library/std \\\n-    --rust-profile-generate=${RUSTC_PROFILE_DIRECTORY_ROOT}\n-\n-# Here we're profiling the `rustc` frontend, so we also include `Check`.\n-# The benchmark set includes various stress tests that put the frontend under pressure.\n-if isLinux; then\n-    # The profile data is written into a single filepath that is being repeatedly merged when each\n-    # rustc invocation ends. Empirically, this can result in some profiling data being lost. That's\n-    # why we override the profile path to include the PID. This will produce many more profiling\n-    # files, but the resulting profile will produce a slightly faster rustc binary.\n-    LLVM_PROFILE_FILE=${RUSTC_PROFILE_DIRECTORY_ROOT}/default_%m_%p.profraw gather_profiles \\\n-        \"Check,Debug,Opt\" \"All\" \\\n-        \"externs,ctfe-stress-5,cargo-0.60.0,token-stream-stress,match-stress,tuple-stress,diesel-1.4.8,bitmaps-3.1.0\"\n-else\n-    # On windows, we don't do that yet (because it generates a lot of data, hitting disk space\n-    # limits on the builder), and use the default profraw merging behavior.\n-    gather_profiles \\\n-        \"Check,Debug,Opt\" \"All\" \\\n-        \"externs,ctfe-stress-5,cargo-0.60.0,token-stream-stress,match-stress,tuple-stress,diesel-1.4.8,bitmaps-3.1.0\"\n-fi\n-\n-RUSTC_PROFILE_MERGED_FILE=$PGO_TMP/rustc-pgo.profdata\n-\n-# Merge the profile data we gathered\n-$BUILD_ARTIFACTS/llvm/bin/llvm-profdata \\\n-    merge -o ${RUSTC_PROFILE_MERGED_FILE} ${RUSTC_PROFILE_DIRECTORY_ROOT}\n-\n-echo \"Rustc PGO statistics\"\n-du -sh ${RUSTC_PROFILE_MERGED_FILE}\n-du -sh ${RUSTC_PROFILE_DIRECTORY_ROOT}\n-echo \"Profile file count\"\n-find ${RUSTC_PROFILE_DIRECTORY_ROOT} -type f | wc -l\n-\n-# We don't need the individual .profraw files now that they have been merged into a final .profdata\n-rm -r $RUSTC_PROFILE_DIRECTORY_ROOT\n-\n-# Rustbuild currently doesn't support rebuilding LLVM when PGO options\n-# change (or any other llvm-related options); so just clear out the relevant\n-# directories ourselves.\n-rm -r $BUILD_ARTIFACTS/llvm $BUILD_ARTIFACTS/lld\n-\n-if isLinux; then\n-  # Gather BOLT profile (BOLT is currently only available on Linux)\n-  python3 ../x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n-      --stage 2 library/std \\\n-      --llvm-profile-use=${LLVM_PROFILE_MERGED_FILE} \\\n-      --llvm-bolt-profile-generate\n-\n-  BOLT_PROFILE_MERGED_FILE=/tmp/bolt.profdata\n-\n-  # Here we're profiling Bolt.\n-  gather_profiles \"Check,Debug,Opt\" \"Full\" \\\n-  \"syn-1.0.89,serde-1.0.136,ripgrep-13.0.0,regex-1.5.5,clap-3.1.6,hyper-0.14.18\"\n-\n-  merge-fdata /tmp/prof.fdata* > ${BOLT_PROFILE_MERGED_FILE}\n-\n-  echo \"BOLT statistics\"\n-  du -sh /tmp/prof.fdata*\n-  du -sh ${BOLT_PROFILE_MERGED_FILE}\n-  echo \"Profile file count\"\n-  find /tmp/prof.fdata* -type f | wc -l\n-\n-  rm -r $BUILD_ARTIFACTS/llvm $BUILD_ARTIFACTS/lld\n-\n-  # This produces the actual final set of artifacts, using both the LLVM and rustc\n-  # collected profiling data.\n-  $@ \\\n-      --rust-profile-use=${RUSTC_PROFILE_MERGED_FILE} \\\n-      --llvm-profile-use=${LLVM_PROFILE_MERGED_FILE} \\\n-      --llvm-bolt-profile-use=${BOLT_PROFILE_MERGED_FILE}\n-else\n-  $@ \\\n-      --rust-profile-use=${RUSTC_PROFILE_MERGED_FILE} \\\n-      --llvm-profile-use=${LLVM_PROFILE_MERGED_FILE}\n-fi\n-\n-echo \"Rustc binary size\"\n-ls -la ./build/$PGO_HOST/stage2/bin\n-ls -la ./build/$PGO_HOST/stage2/lib"}]}