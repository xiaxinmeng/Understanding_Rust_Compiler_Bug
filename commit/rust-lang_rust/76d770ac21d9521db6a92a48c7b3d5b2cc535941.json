{"sha": "76d770ac21d9521db6a92a48c7b3d5b2cc535941", "node_id": "C_kwDOAAsO6NoAKDc2ZDc3MGFjMjFkOTUyMWRiNmE5MmE0OGM3YjNkNWIyY2M1MzU5NDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-02T20:58:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-02T20:58:33Z"}, "message": "Auto merge of #95600 - Dylan-DPC:rollup-580y2ra, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #95587 (Remove need for associated_type_bounds in std.)\n - #95589 (Include a header in .rlink files)\n - #95593 (diagnostics: add test case for bogus T:Sized suggestion)\n - #95597 (Refer to u8 by absolute path in expansion of thread_local)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9795d3e6cc67d2ae9fdf407c923076f2960ab531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9795d3e6cc67d2ae9fdf407c923076f2960ab531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d770ac21d9521db6a92a48c7b3d5b2cc535941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d770ac21d9521db6a92a48c7b3d5b2cc535941", "html_url": "https://github.com/rust-lang/rust/commit/76d770ac21d9521db6a92a48c7b3d5b2cc535941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d770ac21d9521db6a92a48c7b3d5b2cc535941/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f96ef4bb56f5d905ed89ed569ef97f50731c977", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f96ef4bb56f5d905ed89ed569ef97f50731c977", "html_url": "https://github.com/rust-lang/rust/commit/8f96ef4bb56f5d905ed89ed569ef97f50731c977"}, {"sha": "0e528f062d51d90368728c163d66297173b07080", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e528f062d51d90368728c163d66297173b07080", "html_url": "https://github.com/rust-lang/rust/commit/0e528f062d51d90368728c163d66297173b07080"}], "stats": {"total": 124, "additions": 113, "deletions": 11}, "files": [{"sha": "a2d60472ed9ed86bba9a0ebc43ac1e8341acf3ed", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/76d770ac21d9521db6a92a48c7b3d5b2cc535941/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d770ac21d9521db6a92a48c7b3d5b2cc535941/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=76d770ac21d9521db6a92a48c7b3d5b2cc535941", "patch": "@@ -29,6 +29,7 @@ use rustc_hir::LangItem;\n use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n+use rustc_serialize::{opaque, Decodable, Decoder, Encoder};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n@@ -190,3 +191,53 @@ pub fn looks_like_rust_object_file(filename: &str) -> bool {\n     // Check if the \"inner\" extension\n     ext2 == Some(RUST_CGU_EXT)\n }\n+\n+const RLINK_VERSION: u32 = 1;\n+const RLINK_MAGIC: &[u8] = b\"rustlink\";\n+\n+const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n+\n+impl CodegenResults {\n+    pub fn serialize_rlink(codegen_results: &CodegenResults) -> Vec<u8> {\n+        let mut encoder = opaque::Encoder::new(vec![]);\n+        encoder.emit_raw_bytes(RLINK_MAGIC).unwrap();\n+        // `emit_raw_bytes` is used to make sure that the version representation does not depend on\n+        // Encoder's inner representation of `u32`.\n+        encoder.emit_raw_bytes(&RLINK_VERSION.to_be_bytes()).unwrap();\n+        encoder.emit_str(RUSTC_VERSION.unwrap()).unwrap();\n+\n+        let mut encoder = rustc_serialize::opaque::Encoder::new(encoder.into_inner());\n+        rustc_serialize::Encodable::encode(codegen_results, &mut encoder).unwrap();\n+        encoder.into_inner()\n+    }\n+\n+    pub fn deserialize_rlink(data: Vec<u8>) -> Result<Self, String> {\n+        // The Decodable machinery is not used here because it panics if the input data is invalid\n+        // and because its internal representation may change.\n+        if !data.starts_with(RLINK_MAGIC) {\n+            return Err(\"The input does not look like a .rlink file\".to_string());\n+        }\n+        let data = &data[RLINK_MAGIC.len()..];\n+        if data.len() < 4 {\n+            return Err(\"The input does not contain version number\".to_string());\n+        }\n+\n+        let mut version_array: [u8; 4] = Default::default();\n+        version_array.copy_from_slice(&data[..4]);\n+        if u32::from_be_bytes(version_array) != RLINK_VERSION {\n+            return Err(\".rlink file was produced with encoding version {version_array}, but the current version is {RLINK_VERSION}\".to_string());\n+        }\n+\n+        let mut decoder = opaque::Decoder::new(&data[4..], 0);\n+        let rustc_version = decoder.read_str();\n+        let current_version = RUSTC_VERSION.unwrap();\n+        if rustc_version != current_version {\n+            return Err(format!(\n+                \".rlink file was produced by rustc version {rustc_version}, but the current version is {current_version}.\"\n+            ));\n+        }\n+\n+        let codegen_results = CodegenResults::decode(&mut decoder);\n+        Ok(codegen_results)\n+    }\n+}"}, {"sha": "69f96d07f905dde6bb14a3c597426d2b0a255e53", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76d770ac21d9521db6a92a48c7b3d5b2cc535941/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d770ac21d9521db6a92a48c7b3d5b2cc535941/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=76d770ac21d9521db6a92a48c7b3d5b2cc535941", "patch": "@@ -588,8 +588,12 @@ pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Comp\n             let rlink_data = fs::read(file).unwrap_or_else(|err| {\n                 sess.fatal(&format!(\"failed to read rlink file: {}\", err));\n             });\n-            let mut decoder = rustc_serialize::opaque::Decoder::new(&rlink_data, 0);\n-            let codegen_results: CodegenResults = rustc_serialize::Decodable::decode(&mut decoder);\n+            let codegen_results = match CodegenResults::deserialize_rlink(rlink_data) {\n+                Ok(codegen) => codegen,\n+                Err(error) => {\n+                    sess.fatal(&format!(\"Could not deserialize .rlink file: {error}\"));\n+                }\n+            };\n             let result = compiler.codegen_backend().link(sess, codegen_results, &outputs);\n             abort_on_err(result, sess);\n         } else {"}, {"sha": "22ab62ac372f218b97cbcad9de86929075f645e6", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76d770ac21d9521db6a92a48c7b3d5b2cc535941/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d770ac21d9521db6a92a48c7b3d5b2cc535941/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=76d770ac21d9521db6a92a48c7b3d5b2cc535941", "patch": "@@ -3,6 +3,7 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n+use rustc_codegen_ssa::CodegenResults;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_hir::def_id::LOCAL_CRATE;\n@@ -360,10 +361,9 @@ impl Linker {\n         }\n \n         if sess.opts.debugging_opts.no_link {\n-            let mut encoder = rustc_serialize::opaque::Encoder::new(Vec::new());\n-            rustc_serialize::Encodable::encode(&codegen_results, &mut encoder).unwrap();\n+            let encoded = CodegenResults::serialize_rlink(&codegen_results);\n             let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n-            std::fs::write(&rlink_file, encoder.into_inner()).map_err(|err| {\n+            std::fs::write(&rlink_file, encoded).map_err(|err| {\n                 sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n             })?;\n             return Ok(());"}, {"sha": "e1c1800438354ba2e905b22d0af6ad41156ede7d", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76d770ac21d9521db6a92a48c7b3d5b2cc535941/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d770ac21d9521db6a92a48c7b3d5b2cc535941/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=76d770ac21d9521db6a92a48c7b3d5b2cc535941", "patch": "@@ -224,7 +224,6 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n-#![feature(associated_type_bounds)]\n #![feature(box_syntax)]\n #![feature(c_unwind)]\n #![feature(cfg_target_thread_local)]"}, {"sha": "3792a3820a534b07648eebc8ab2893fa574303e8", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76d770ac21d9521db6a92a48c7b3d5b2cc535941/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d770ac21d9521db6a92a48c7b3d5b2cc535941/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=76d770ac21d9521db6a92a48c7b3d5b2cc535941", "patch": "@@ -571,7 +571,8 @@ impl<T: CoerceUnsized<U>, U> CoerceUnsized<UserRef<U>> for UserRef<T> {}\n impl<T, I> Index<I> for UserRef<[T]>\n where\n     [T]: UserSafe,\n-    I: SliceIndex<[T], Output: UserSafe>,\n+    I: SliceIndex<[T]>,\n+    I::Output: UserSafe,\n {\n     type Output = UserRef<I::Output>;\n \n@@ -591,7 +592,8 @@ where\n impl<T, I> IndexMut<I> for UserRef<[T]>\n where\n     [T]: UserSafe,\n-    I: SliceIndex<[T], Output: UserSafe>,\n+    I: SliceIndex<[T]>,\n+    I::Output: UserSafe,\n {\n     #[inline]\n     fn index_mut(&mut self, index: I) -> &mut UserRef<I::Output> {"}, {"sha": "a41cb02a6070d8e7d92be16117149f46f0644c21", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76d770ac21d9521db6a92a48c7b3d5b2cc535941/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d770ac21d9521db6a92a48c7b3d5b2cc535941/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=76d770ac21d9521db6a92a48c7b3d5b2cc535941", "patch": "@@ -217,9 +217,9 @@ macro_rules! __thread_local_inner {\n                 // 1 == dtor registered, dtor not run\n                 // 2 == dtor registered and is running or has run\n                 #[thread_local]\n-                static mut STATE: u8 = 0;\n+                static mut STATE: $crate::primitive::u8 = 0;\n \n-                unsafe extern \"C\" fn destroy(ptr: *mut u8) {\n+                unsafe extern \"C\" fn destroy(ptr: *mut $crate::primitive::u8) {\n                     let ptr = ptr as *mut $t;\n \n                     unsafe {\n@@ -235,7 +235,7 @@ macro_rules! __thread_local_inner {\n                         //   so now.\n                         0 => {\n                             $crate::thread::__FastLocalKeyInner::<$t>::register_dtor(\n-                                $crate::ptr::addr_of_mut!(VAL) as *mut u8,\n+                                $crate::ptr::addr_of_mut!(VAL) as *mut $crate::primitive::u8,\n                                 destroy,\n                             );\n                             STATE = 1;"}, {"sha": "c759f42a2351e4e9a53d2a589ad56cee81fed244", "filename": "src/test/run-make-fulldeps/separate-link-fail/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76d770ac21d9521db6a92a48c7b3d5b2cc535941/src%2Ftest%2Frun-make-fulldeps%2Fseparate-link-fail%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/76d770ac21d9521db6a92a48c7b3d5b2cc535941/src%2Ftest%2Frun-make-fulldeps%2Fseparate-link-fail%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fseparate-link-fail%2FMakefile?ref=76d770ac21d9521db6a92a48c7b3d5b2cc535941", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\techo 'fn main(){}' > $(TMPDIR)/main.rs\n+\t# Make sure that this fails\n+\t! $(RUSTC) -Z link-only $(TMPDIR)/main.rs 2> $(TMPDIR)/stderr.txt\n+\t$(CGREP) \"The input does not look like a .rlink file\" < $(TMPDIR)/stderr.txt"}, {"sha": "efbdeec700811c5230a8144663cf2e1622702eea", "filename": "src/test/ui/consts/const-eval/size-of-t.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/76d770ac21d9521db6a92a48c7b3d5b2cc535941/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsize-of-t.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d770ac21d9521db6a92a48c7b3d5b2cc535941/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsize-of-t.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsize-of-t.rs?ref=76d770ac21d9521db6a92a48c7b3d5b2cc535941", "patch": "@@ -0,0 +1,13 @@\n+// https://github.com/rust-lang/rust/issues/69228\n+// Used to give bogus suggestion about T not being Sized.\n+\n+use std::mem::size_of;\n+\n+fn foo<T>() {\n+    let _arr: [u8; size_of::<T>()];\n+    //~^ ERROR generic parameters may not be used in const operations\n+    //~| NOTE cannot perform const operation\n+    //~| NOTE type parameters may not be used in const expressions\n+}\n+\n+fn main() {}"}, {"sha": "abe6410465e44f379deb41666b8ee60e4bf6032f", "filename": "src/test/ui/consts/const-eval/size-of-t.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76d770ac21d9521db6a92a48c7b3d5b2cc535941/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsize-of-t.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d770ac21d9521db6a92a48c7b3d5b2cc535941/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsize-of-t.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsize-of-t.stderr?ref=76d770ac21d9521db6a92a48c7b3d5b2cc535941", "patch": "@@ -0,0 +1,11 @@\n+error: generic parameters may not be used in const operations\n+  --> $DIR/size-of-t.rs:7:30\n+   |\n+LL |     let _arr: [u8; size_of::<T>()];\n+   |                              ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n+error: aborting due to previous error\n+"}, {"sha": "dcff9183ad95a23f52e1143dba78cffd54ef5f4c", "filename": "src/test/ui/thread-local/name-collision.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76d770ac21d9521db6a92a48c7b3d5b2cc535941/src%2Ftest%2Fui%2Fthread-local%2Fname-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d770ac21d9521db6a92a48c7b3d5b2cc535941/src%2Ftest%2Fui%2Fthread-local%2Fname-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local%2Fname-collision.rs?ref=76d770ac21d9521db6a92a48c7b3d5b2cc535941", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#[allow(non_camel_case_types)]\n+struct u8;\n+\n+std::thread_local! {\n+    pub static A: i32 = f();\n+    pub static B: i32 = const { 0 };\n+}\n+\n+fn f() -> i32 {\n+    0\n+}\n+\n+fn main() {}"}]}