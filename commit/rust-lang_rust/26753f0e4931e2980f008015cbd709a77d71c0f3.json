{"sha": "26753f0e4931e2980f008015cbd709a77d71c0f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NzUzZjBlNDkzMWUyOTgwZjAwODAxNWNiZDcwOWE3N2Q3MWMwZjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T15:07:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T15:28:51Z"}, "message": "remove unneded From(..) impl", "tree": {"sha": "592b8d2c83687540f62c65bb045c94e7b0e1f0e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/592b8d2c83687540f62c65bb045c94e7b0e1f0e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26753f0e4931e2980f008015cbd709a77d71c0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26753f0e4931e2980f008015cbd709a77d71c0f3", "html_url": "https://github.com/rust-lang/rust/commit/26753f0e4931e2980f008015cbd709a77d71c0f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26753f0e4931e2980f008015cbd709a77d71c0f3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dcaded439ae4bd4670bc6a2fbf739cd4fce60af", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dcaded439ae4bd4670bc6a2fbf739cd4fce60af", "html_url": "https://github.com/rust-lang/rust/commit/0dcaded439ae4bd4670bc6a2fbf739cd4fce60af"}], "stats": {"total": 58, "additions": 21, "deletions": 37}, "files": [{"sha": "b3843b35c2a9dd5187afd45e6f035cb1f5959cb4", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/26753f0e4931e2980f008015cbd709a77d71c0f3/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26753f0e4931e2980f008015cbd709a77d71c0f3/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=26753f0e4931e2980f008015cbd709a77d71c0f3", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n \n use crate::{\n     Name, AsName, Struct, Union, Enum, EnumVariant, Crate, AstDatabase,\n-    HirDatabase, HirFileId, StructField, FieldSource, Source, HasSource,\n+    HirDatabase, StructField, FieldSource, Source, HasSource,\n     type_ref::TypeRef, DefDatabase,\n };\n \n@@ -201,10 +201,7 @@ impl VariantDef {\n }\n \n impl StructField {\n-    pub(crate) fn source_impl(\n-        &self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> (HirFileId, FieldSource) {\n+    pub(crate) fn source_impl(&self, db: &(impl DefDatabase + AstDatabase)) -> Source<FieldSource> {\n         let var_data = self.parent.variant_data(db);\n         let fields = var_data.fields().unwrap();\n         let ss;\n@@ -229,12 +226,12 @@ impl StructField {\n             }\n             ast::StructKind::Unit => Vec::new(),\n         };\n-        let field = field_sources\n+        let ast = field_sources\n             .into_iter()\n             .zip(fields.iter())\n             .find(|(_syntax, (id, _))| *id == self.id)\n             .unwrap()\n             .0;\n-        (file_id, field)\n+        Source { file_id, ast }\n     }\n }"}, {"sha": "7d8abb39e96245b18e60f629586cb784dc8b2c96", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/26753f0e4931e2980f008015cbd709a77d71c0f3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26753f0e4931e2980f008015cbd709a77d71c0f3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=26753f0e4931e2980f008015cbd709a77d71c0f3", "patch": "@@ -11,12 +11,6 @@ pub struct Source<T> {\n     pub ast: T,\n }\n \n-impl<T> From<(HirFileId, T)> for Source<T> {\n-    fn from((file_id, ast): (HirFileId, T)) -> Self {\n-        Source { file_id, ast }\n-    }\n-}\n-\n pub trait HasSource {\n     type Ast;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<Self::Ast>;\n@@ -30,9 +24,9 @@ impl Module {\n         let def_map = db.crate_def_map(self.krate);\n         let decl_id = def_map[self.module_id].declaration;\n         let file_id = def_map[self.module_id].definition;\n-        let module_source = ModuleSource::new(db, file_id, decl_id);\n+        let ast = ModuleSource::new(db, file_id, decl_id);\n         let file_id = file_id.map(HirFileId::from).unwrap_or_else(|| decl_id.unwrap().file_id());\n-        (file_id, module_source).into()\n+        Source { file_id, ast }\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n@@ -44,32 +38,32 @@ impl Module {\n         let def_map = db.crate_def_map(self.krate);\n         let decl = def_map[self.module_id].declaration?;\n         let ast = decl.to_node(db);\n-        Some((decl.file_id(), ast).into())\n+        Some(Source { file_id: decl.file_id(), ast })\n     }\n }\n \n impl HasSource for StructField {\n     type Ast = FieldSource;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<FieldSource> {\n-        self.source_impl(db).into()\n+        self.source_impl(db)\n     }\n }\n impl HasSource for Struct {\n     type Ast = TreeArc<ast::StructDef>;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::StructDef>> {\n-        self.id.source(db).into()\n+        self.id.source(db)\n     }\n }\n impl HasSource for Union {\n     type Ast = TreeArc<ast::StructDef>;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::StructDef>> {\n-        self.id.source(db).into()\n+        self.id.source(db)\n     }\n }\n impl HasSource for Enum {\n     type Ast = TreeArc<ast::EnumDef>;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::EnumDef>> {\n-        self.id.source(db).into()\n+        self.id.source(db)\n     }\n }\n impl HasSource for EnumVariant {\n@@ -82,39 +76,39 @@ impl HasSource for Function {\n     type Ast = TreeArc<ast::FnDef>;\n \n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::FnDef>> {\n-        self.id.source(db).into()\n+        self.id.source(db)\n     }\n }\n impl HasSource for Const {\n     type Ast = TreeArc<ast::ConstDef>;\n \n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::ConstDef>> {\n-        self.id.source(db).into()\n+        self.id.source(db)\n     }\n }\n impl HasSource for Static {\n     type Ast = TreeArc<ast::StaticDef>;\n \n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::StaticDef>> {\n-        self.id.source(db).into()\n+        self.id.source(db)\n     }\n }\n impl HasSource for Trait {\n     type Ast = TreeArc<ast::TraitDef>;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::TraitDef>> {\n-        self.id.source(db).into()\n+        self.id.source(db)\n     }\n }\n impl HasSource for TypeAlias {\n     type Ast = TreeArc<ast::TypeAliasDef>;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::TypeAliasDef>> {\n-        self.id.source(db).into()\n+        self.id.source(db)\n     }\n }\n impl HasSource for MacroDef {\n     type Ast = TreeArc<ast::MacroCall>;\n \n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::MacroCall>> {\n-        (self.id.0.file_id(), self.id.0.to_node(db)).into()\n+        Source { file_id: self.id.0.file_id(), ast: self.id.0.to_node(db) }\n     }\n }"}, {"sha": "352f9ffd93ccac4840a8bffddc20a4c8cf09b007", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26753f0e4931e2980f008015cbd709a77d71c0f3/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26753f0e4931e2980f008015cbd709a77d71c0f3/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=26753f0e4931e2980f008015cbd709a77d71c0f3", "patch": "@@ -9,7 +9,7 @@ use ra_prof::profile;\n use mbe::MacroRules;\n \n use crate::{\n-    Module, DefDatabase, AstId, FileAstId, AstDatabase,\n+    Module, DefDatabase, AstId, FileAstId, AstDatabase, Source,\n };\n \n /// hir makes heavy use of ids: integer (u32) handlers to various things. You\n@@ -265,10 +265,10 @@ pub(crate) trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n         let loc = ItemLoc { module: ctx.module, ast_id: ast_id.with_file_id(ctx.file_id) };\n         Self::intern(ctx.db, loc)\n     }\n-    fn source(self, db: &(impl AstDatabase + DefDatabase)) -> (HirFileId, TreeArc<N>) {\n+    fn source(self, db: &(impl AstDatabase + DefDatabase)) -> Source<TreeArc<N>> {\n         let loc = self.lookup_intern(db);\n         let ast = loc.ast_id.to_node(db);\n-        (loc.ast_id.file_id(), ast)\n+        Source { file_id: loc.ast_id.file_id(), ast }\n     }\n     fn module(self, db: &impl DefDatabase) -> Module {\n         let loc = self.lookup_intern(db);"}, {"sha": "fb9daf1bf97faee3f43b0c6f401a891b8969d9ac", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/26753f0e4931e2980f008015cbd709a77d71c0f3/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26753f0e4931e2980f008015cbd709a77d71c0f3/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=26753f0e4931e2980f008015cbd709a77d71c0f3", "patch": "@@ -49,7 +49,7 @@ impl HasSource for ImplBlock {\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::ImplBlock>> {\n         let source_map = db.impls_in_module_with_source_map(self.module).1;\n         let src = self.module.definition_source(db);\n-        (src.file_id, source_map.get(&src.ast, self.impl_id)).into()\n+        Source { file_id: src.file_id, ast: source_map.get(&src.ast, self.impl_id) }\n     }\n }\n \n@@ -66,13 +66,6 @@ impl ImplBlock {\n         ImplBlock { module, impl_id }\n     }\n \n-    /// Returns the syntax of the impl block\n-    pub fn source(&self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::ImplBlock>> {\n-        let source_map = db.impls_in_module_with_source_map(self.module).1;\n-        let src = self.module.definition_source(db);\n-        (src.file_id, source_map.get(&src.ast, self.impl_id)).into()\n-    }\n-\n     pub fn id(&self) -> ImplId {\n         self.impl_id\n     }"}]}