{"sha": "d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MjBkNzE5YzRjNDRjM2M2ZDAyYjVmYWZiYTRmMmNmNWU4MzdkYmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-16T08:59:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-16T08:59:53Z"}, "message": "move syntax::ext to new crate syntax_expand", "tree": {"sha": "5f5586264bf0a019ea09a20f0526337913a00b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f5586264bf0a019ea09a20f0526337913a00b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "html_url": "https://github.com/rust-lang/rust/commit/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d160a4e4225eb5e310554316cba78efb2cbe6fa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d160a4e4225eb5e310554316cba78efb2cbe6fa2", "html_url": "https://github.com/rust-lang/rust/commit/d160a4e4225eb5e310554316cba78efb2cbe6fa2"}], "stats": {"total": 916, "additions": 493, "deletions": 423}, "files": [{"sha": "a5a7521abde13b065a5a80740f354254fdeba68c", "filename": "Cargo.lock", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -3112,6 +3112,7 @@ dependencies = [\n  \"serialize\",\n  \"smallvec\",\n  \"syntax\",\n+ \"syntax_expand\",\n  \"syntax_pos\",\n ]\n \n@@ -3427,6 +3428,7 @@ dependencies = [\n  \"rustc_target\",\n  \"serialize\",\n  \"syntax\",\n+ \"syntax_expand\",\n  \"syntax_pos\",\n  \"tempfile\",\n ]\n@@ -3559,6 +3561,7 @@ dependencies = [\n  \"serialize\",\n  \"smallvec\",\n  \"syntax\",\n+ \"syntax_expand\",\n  \"syntax_ext\",\n  \"syntax_pos\",\n  \"tempfile\",\n@@ -3630,6 +3633,7 @@ dependencies = [\n  \"smallvec\",\n  \"stable_deref_trait\",\n  \"syntax\",\n+ \"syntax_expand\",\n  \"syntax_pos\",\n ]\n \n@@ -3678,6 +3682,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_target\",\n  \"syntax\",\n+ \"syntax_expand\",\n  \"syntax_pos\",\n ]\n \n@@ -3695,6 +3700,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_metadata\",\n  \"syntax\",\n+ \"syntax_expand\",\n  \"syntax_pos\",\n ]\n \n@@ -3723,6 +3729,7 @@ dependencies = [\n  \"rustc_metadata\",\n  \"smallvec\",\n  \"syntax\",\n+ \"syntax_expand\",\n  \"syntax_pos\",\n ]\n \n@@ -4336,6 +4343,25 @@ dependencies = [\n  \"syntax_pos\",\n ]\n \n+[[package]]\n+name = \"syntax_expand\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"bitflags\",\n+ \"lazy_static 1.3.0\",\n+ \"log\",\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_index\",\n+ \"rustc_lexer\",\n+ \"rustc_target\",\n+ \"scoped-tls\",\n+ \"serialize\",\n+ \"smallvec\",\n+ \"syntax\",\n+ \"syntax_pos\",\n+]\n+\n [[package]]\n name = \"syntax_ext\"\n version = \"0.0.0\"\n@@ -4347,6 +4373,7 @@ dependencies = [\n  \"rustc_target\",\n  \"smallvec\",\n  \"syntax\",\n+ \"syntax_expand\",\n  \"syntax_pos\",\n ]\n "}, {"sha": "cf9f36ca37c90c46da392ff206de066dd34b0b22", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -29,6 +29,7 @@ rustc_index = { path = \"../librustc_index\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n backtrace = \"0.3.3\"\n parking_lot = \"0.9\""}, {"sha": "a071a539e01df16e1ac32fd61a864dfbcabccb2a", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -6,7 +6,7 @@ use crate::ty;\n use crate::util::nodemap::DefIdMap;\n \n use syntax::ast;\n-use syntax::ext::base::MacroKind;\n+use syntax_expand::base::MacroKind;\n use syntax::ast::NodeId;\n use syntax_pos::Span;\n use rustc_macros::HashStable;"}, {"sha": "d5287fd415b7f07023244376a3211df770b41f4a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -64,15 +64,15 @@ use syntax::ast;\n use syntax::ptr::P as AstP;\n use syntax::ast::*;\n use syntax::errors;\n-use syntax::ext::base::SpecialDerives;\n-use syntax::ext::hygiene::ExpnId;\n+use syntax_expand::base::SpecialDerives;\n use syntax::print::pprust;\n-use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::parse::token::{self, Nonterminal, Token};\n+use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::sess::ParseSess;\n use syntax::source_map::{respan, ExpnData, ExpnKind, DesugaringKind, Spanned};\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::visit::{self, Visitor};\n+use syntax_pos::hygiene::ExpnId;\n use syntax_pos::Span;\n \n const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;"}, {"sha": "73d2ac5c134d3f1fa3465c2f391aa4cb5a12af2b", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -18,7 +18,7 @@ use smallvec::SmallVec;\n use syntax::attr;\n use syntax::ast::*;\n use syntax::visit::{self, Visitor};\n-use syntax::ext::base::SpecialDerives;\n+use syntax_expand::base::SpecialDerives;\n use syntax::source_map::{respan, DesugaringKind, Spanned};\n use syntax::symbol::{kw, sym};\n use syntax_pos::Span;"}, {"sha": "fbef95fec7dc3c221541525a3eccd44f303a0f67", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -2,7 +2,7 @@ use crate::hir::map::definitions::*;\n use crate::hir::def_id::DefIndex;\n \n use syntax::ast::*;\n-use syntax::ext::hygiene::ExpnId;\n+use syntax_expand::hygiene::ExpnId;\n use syntax::visit;\n use syntax::symbol::{kw, sym};\n use syntax::parse::token::{self, Token};"}, {"sha": "cc099fcc40f6df8a760ae696f059dadcaade05ee", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -17,7 +17,7 @@ use std::borrow::Borrow;\n use std::fmt::Write;\n use std::hash::Hash;\n use syntax::ast;\n-use syntax::ext::hygiene::ExpnId;\n+use syntax_expand::hygiene::ExpnId;\n use syntax::symbol::{Symbol, sym, InternedString};\n use syntax_pos::{Span, DUMMY_SP};\n "}, {"sha": "f839087ec027108677776a5b816cf1fdb1afe160", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::svh::Svh;\n use rustc_index::vec::IndexVec;\n use syntax::ast::{self, Name, NodeId};\n use syntax::source_map::Spanned;\n-use syntax::ext::base::MacroKind;\n+use syntax_expand::base::MacroKind;\n use syntax_pos::{Span, DUMMY_SP};\n \n pub mod blocks;"}, {"sha": "14d0673ecc03fe51f3677cc1ecaa98973bb85332", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -13,7 +13,7 @@ use std::cell::RefCell;\n \n use syntax::ast;\n use syntax::source_map::SourceMap;\n-use syntax::ext::hygiene::SyntaxContext;\n+use syntax_expand::hygiene::SyntaxContext;\n use syntax::symbol::Symbol;\n use syntax::tokenstream::DelimSpan;\n use syntax_pos::{Span, DUMMY_SP};"}, {"sha": "defc3fb25bc52bb890276adcdac6d755e963b7fc", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -59,7 +59,7 @@ impl_stable_hash_for!(enum ::syntax::ast::AsmDialect {\n     Intel\n });\n \n-impl_stable_hash_for!(enum ::syntax::ext::base::MacroKind {\n+impl_stable_hash_for!(enum ::syntax_expand::base::MacroKind {\n     Bang,\n     Attr,\n     Derive,"}, {"sha": "7443cca822a99b40a4037cf9631805b0c71e4d91", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -39,7 +39,7 @@ use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnKind, DesugaringKind};\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::edition::Edition;\n-use syntax::ext::base::MacroKind;\n+use syntax_expand::base::MacroKind;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::Span;\n "}, {"sha": "b65bf2230b39d953681f3ec4d501b857081a1c4c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -24,7 +24,7 @@ use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::ast::{self, NodeId};\n use syntax::edition::Edition;\n-use syntax::ext::allocator::AllocatorKind;\n+use syntax_expand::allocator::AllocatorKind;\n use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n use syntax::source_map;"}, {"sha": "ab9fb1df6828f72622be009d8a1835ad249b2ccd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -45,7 +45,7 @@ use std::{mem, ptr};\n use std::ops::Range;\n use syntax::ast::{self, Name, Ident, NodeId};\n use syntax::attr;\n-use syntax::ext::hygiene::ExpnId;\n+use syntax_expand::hygiene::ExpnId;\n use syntax::symbol::{kw, sym, Symbol, InternedString};\n use syntax_pos::Span;\n "}, {"sha": "8c60c030eacdb3a1e864e4995ef925cfaccb8a86", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -3,7 +3,7 @@ use std::ffi::CString;\n use crate::attributes;\n use libc::c_uint;\n use rustc::ty::TyCtxt;\n-use syntax::ext::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use syntax_expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n \n use crate::ModuleLlvm;\n use crate::llvm::{self, False, True};"}, {"sha": "9b55bef0c514db7ae73520cdaa1b21fe247c5c6d", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -39,6 +39,7 @@ extern crate rustc_driver as _;\n \n #[macro_use] extern crate log;\n extern crate syntax;\n+extern crate syntax_expand;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n \n@@ -48,7 +49,7 @@ use rustc_codegen_ssa::back::lto::{SerializedModule, LtoModuleCodegen, ThinModul\n use rustc_codegen_ssa::CompiledModule;\n use errors::{FatalError, Handler};\n use rustc::dep_graph::WorkProduct;\n-use syntax::ext::allocator::AllocatorKind;\n+use syntax_expand::allocator::AllocatorKind;\n use syntax_pos::symbol::InternedString;\n pub use llvm_util::target_features;\n use std::any::Any;"}, {"sha": "6992f93d9994950e425ac467e5c28d3066bf938e", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -21,6 +21,7 @@ tempfile = \"3.1\"\n \n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc = { path = \"../librustc\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }"}, {"sha": "d866a10f06935b55117f0a7b95469297add79afb", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::query::Providers;\n use rustc::ty::subst::SubstsRef;\n use rustc::util::nodemap::{FxHashMap, DefIdMap};\n use rustc_index::vec::IndexVec;\n-use syntax::ext::allocator::ALLOCATOR_METHODS;\n+use syntax_expand::allocator::ALLOCATOR_METHODS;\n \n pub type ExportedSymbols = FxHashMap<\n     CrateNum,"}, {"sha": "856c280cac0fbdc3f95cf4111069513267504d36", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -27,7 +27,7 @@ use rustc_errors::{Handler, Level, FatalError, DiagnosticId, SourceMapperDyn};\n use rustc_errors::emitter::{Emitter};\n use rustc_target::spec::MergeFunctions;\n use syntax::attr;\n-use syntax::ext::hygiene::ExpnId;\n+use syntax_expand::hygiene::ExpnId;\n use syntax_pos::symbol::{Symbol, sym};\n use jobserver::{Client, Acquired};\n "}, {"sha": "7cae3e9ade5903f3987434b3e6a2e59615568e3e", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -9,7 +9,7 @@ use rustc::ty::TyCtxt;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use std::sync::Arc;\n use std::sync::mpsc;\n-use syntax::ext::allocator::AllocatorKind;\n+use syntax_expand::allocator::AllocatorKind;\n use syntax_pos::symbol::InternedString;\n \n pub trait BackendTypes {"}, {"sha": "7a0d931ca732ae159a0e721857934fd1df0c80d9", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -15,6 +15,7 @@ rayon = { version = \"0.3.0\", package = \"rustc-rayon\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n+syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc = { path = \"../librustc\" }"}, {"sha": "89de5714695defea27ec132cf48446c9fc5d7259", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -35,7 +35,7 @@ use rustc_traits;\n use rustc_typeck as typeck;\n use syntax::{self, ast, visit};\n use syntax::early_buffered_lints::BufferedEarlyLint;\n-use syntax::ext::base::{NamedSyntaxExtension, ExtCtxt};\n+use syntax_expand::base::{NamedSyntaxExtension, ExtCtxt};\n use syntax::mut_visit::MutVisitor;\n use syntax::parse::{self, PResult};\n use syntax::util::node_count::NodeCounter;\n@@ -397,12 +397,12 @@ fn configure_and_expand_inner<'a>(\n \n         // Create the config for macro expansion\n         let features = sess.features_untracked();\n-        let cfg = syntax::ext::expand::ExpansionConfig {\n+        let cfg = syntax_expand::expand::ExpansionConfig {\n             features: Some(&features),\n             recursion_limit: *sess.recursion_limit.get(),\n             trace_mac: sess.opts.debugging_opts.trace_macros,\n             should_test: sess.opts.test,\n-            ..syntax::ext::expand::ExpansionConfig::default(crate_name.to_string())\n+            ..syntax_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n \n         let mut ecx = ExtCtxt::new(&sess.parse_sess, cfg, &mut resolver);\n@@ -559,7 +559,7 @@ pub fn lower_to_hir(\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n     if !sess.opts.debugging_opts.keep_hygiene_data {\n-        syntax::ext::hygiene::clear_syntax_context_map();\n+        syntax_expand::hygiene::clear_syntax_context_map();\n     }\n \n     Ok(hir_forest)"}, {"sha": "18192e35f8a209fc240618799811199174936ef9", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -22,4 +22,5 @@ rustc_index = { path = \"../librustc_index\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n stable_deref_trait = \"1.0.0\"\n syntax = { path = \"../libsyntax\" }\n+syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "6a2da5d49887d3f8da42968f946ed73a3559f5af", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -26,7 +26,7 @@ use std::{cmp, fs};\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::ext::allocator::{global_allocator_spans, AllocatorKind};\n+use syntax_expand::allocator::{global_allocator_spans, AllocatorKind};\n use syntax::symbol::{Symbol, sym};\n use syntax::{span_err, span_fatal};\n use syntax_pos::{Span, DUMMY_SP};"}, {"sha": "9a0b98ffb73a9af45bf2a1231256ef0b6042630a", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -11,7 +11,7 @@ use rustc_index::vec::IndexVec;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::sync::{Lrc, RwLock, Lock, MetadataRef, AtomicCell};\n use syntax::ast;\n-use syntax::ext::base::SyntaxExtension;\n+use syntax_expand::base::SyntaxExtension;\n use syntax_pos;\n use proc_macro::bridge::client::ProcMacro;\n "}, {"sha": "37f3726124a2327e6d2861fbe67b542a2a01bf7c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -32,11 +32,11 @@ use syntax::attr;\n use syntax::ast::{self, Ident};\n use syntax::source_map::{self, respan, Spanned};\n use syntax::symbol::{Symbol, sym};\n-use syntax::ext::base::{MacroKind, SyntaxExtensionKind, SyntaxExtension};\n+use syntax_expand::base::{MacroKind, SyntaxExtensionKind, SyntaxExtension};\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, symbol::{InternedString}};\n use log::debug;\n use proc_macro::bridge::client::ProcMacro;\n-use syntax::ext::proc_macro::{AttrProcMacro, ProcMacroDerive, BangProcMacro};\n+use syntax_expand::proc_macro::{AttrProcMacro, ProcMacroDerive, BangProcMacro};\n \n crate struct DecodeContext<'a, 'tcx> {\n     opaque: opaque::Decoder<'a>,"}, {"sha": "ac20284233a97b9155541ecb56b8562e82543cb0", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -31,7 +31,7 @@ use rustc_data_structures::sync::Lrc;\n use std::u32;\n use syntax::ast;\n use syntax::attr;\n-use syntax::ext::proc_macro::is_proc_macro_attr;\n+use syntax_expand::proc_macro::is_proc_macro_attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym, Ident, Symbol};\n use syntax_pos::{self, FileName, SourceFile, Span};"}, {"sha": "118deb560d62f1dff29252f4782fa640b6399716", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -13,6 +13,7 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "74de31263d3944104009f40cf886fc3b67de4ef1", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -14,7 +14,7 @@ use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::*;\n use syntax::attr;\n-use syntax::ext::proc_macro::is_proc_macro_attr;\n+use syntax_expand::proc_macro::is_proc_macro_attr;\n use syntax::feature_gate::is_builtin_attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym};"}, {"sha": "e8bf4e7ea8ff67d94da7c47a02e7cc598c4d6759", "filename": "src/librustc_plugin/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_plugin%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_plugin%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2FCargo.toml?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -14,4 +14,5 @@ doctest = false\n rustc = { path = \"../librustc\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "38738e20630c912f895859479b7d84e098ed0920", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -21,7 +21,7 @@\n //! extern crate syntax_pos;\n //!\n //! use rustc_driver::plugin::Registry;\n-//! use syntax::ext::base::{ExtCtxt, MacResult};\n+//! use syntax_expand::base::{ExtCtxt, MacResult};\n //! use syntax_pos::Span;\n //! use syntax::tokenstream::TokenTree;\n //!"}, {"sha": "b826dd911983862a78479a66045b95980fa2249d", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -4,8 +4,8 @@ use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n \n-use syntax::ext::base::{SyntaxExtension, SyntaxExtensionKind, NamedSyntaxExtension};\n-use syntax::ext::base::MacroExpanderFn;\n+use syntax_expand::base::{SyntaxExtension, SyntaxExtensionKind, NamedSyntaxExtension};\n+use syntax_expand::base::MacroExpanderFn;\n use syntax::symbol::Symbol;\n use syntax::ast;\n use syntax::feature_gate::AttributeType;"}, {"sha": "06bf30859898a2af2fa1a4348ee06ed7b747b44b", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -14,6 +14,7 @@ doctest = false\n bitflags = \"1.0\"\n log = \"0.4\"\n syntax = { path = \"../libsyntax\" }\n+syntax_expand = { path = \"../libsyntax_expand\" }\n rustc = { path = \"../librustc\" }\n arena = { path = \"../libarena\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }"}, {"sha": "eadae52c250a54fd9a998d26a63271609d3fb282", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -32,9 +32,9 @@ use syntax::attr;\n \n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind};\n-use syntax::ext::base::{MacroKind, SyntaxExtension};\n-use syntax::ext::expand::AstFragment;\n-use syntax::ext::hygiene::ExpnId;\n+use syntax_expand::base::{MacroKind, SyntaxExtension};\n+use syntax_expand::expand::AstFragment;\n+use syntax_expand::hygiene::ExpnId;\n use syntax::feature_gate::is_builtin_attr;\n use syntax::parse::token::{self, Token};\n use syntax::print::pprust;"}, {"sha": "5647d5b2794afb024aa14e3498c32f41f8092296", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -10,7 +10,7 @@ use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc::util::nodemap::FxHashSet;\n use syntax::ast::{self, Ident, Path};\n-use syntax::ext::base::MacroKind;\n+use syntax_expand::base::MacroKind;\n use syntax::feature_gate::BUILTIN_ATTRIBUTES;\n use syntax::source_map::SourceMap;\n use syntax::struct_span_err;"}, {"sha": "412734eabe05b162d612fc31b4b903c985b3cb03", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -13,7 +13,7 @@ use rustc::hir::PrimTy;\n use rustc::session::config::nightly_options;\n use rustc::util::nodemap::FxHashSet;\n use syntax::ast::{self, Expr, ExprKind, Ident, NodeId, Path, Ty, TyKind};\n-use syntax::ext::base::MacroKind;\n+use syntax_expand::base::MacroKind;\n use syntax::symbol::kw;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::Span;"}, {"sha": "17d8f0f211a9288a061ad8f02056eac9869aaf2b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -35,18 +35,16 @@ use rustc::span_bug;\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n \n-use syntax::ext::hygiene::{ExpnId, Transparency, SyntaxContext};\n+use syntax_expand::hygiene::{ExpnId, Transparency, SyntaxContext};\n+use syntax_expand::base::{SyntaxExtension, MacroKind, SpecialDerives};\n+use syntax::{struct_span_err, unwrap_or};\n+use syntax::attr;\n use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n-use syntax::ext::base::{SyntaxExtension, MacroKind, SpecialDerives};\n+use syntax::ast::{ItemKind, Path, CRATE_NODE_ID, Crate};\n use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n-\n-use syntax::visit::{self, Visitor};\n-use syntax::attr;\n-use syntax::ast::{CRATE_NODE_ID, Crate};\n-use syntax::ast::{ItemKind, Path};\n-use syntax::{struct_span_err, unwrap_or};\n use syntax::source_map::Spanned;\n+use syntax::visit::{self, Visitor};\n \n use syntax_pos::{Span, DUMMY_SP};\n use errors::{Applicability, DiagnosticBuilder};"}, {"sha": "c91a0b2ed985f7bf831d5545ce2b891b56cc7187", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -14,11 +14,11 @@ use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, NodeId, Ident};\n use syntax::attr::StabilityLevel;\n use syntax::edition::Edition;\n-use syntax::ext::base::{self, InvocationRes, Indeterminate, SpecialDerives};\n-use syntax::ext::base::{MacroKind, SyntaxExtension};\n-use syntax::ext::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n-use syntax::ext::hygiene::{self, ExpnId, ExpnData, ExpnKind};\n-use syntax::ext::compile_declarative_macro;\n+use syntax_expand::base::{self, InvocationRes, Indeterminate, SpecialDerives};\n+use syntax_expand::base::{MacroKind, SyntaxExtension};\n+use syntax_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n+use syntax_expand::hygiene::{self, ExpnId, ExpnData, ExpnKind};\n+use syntax_expand::compile_declarative_macro;\n use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n use syntax::feature_gate::GateIssue;\n use syntax::print::pprust;"}, {"sha": "424bf31a785056e3a3f0c5a3c5d383b24e61d9a0", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -28,7 +28,7 @@ use rustc::util::nodemap::FxHashSet;\n use rustc::{bug, span_bug};\n \n use syntax::ast::{Ident, Name, NodeId, CRATE_NODE_ID};\n-use syntax::ext::hygiene::ExpnId;\n+use syntax_expand::hygiene::ExpnId;\n use syntax::symbol::kw;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::{struct_span_err, unwrap_or};"}, {"sha": "63350b2a5d25cd1cb0cc53d72d590a8f41104d72", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -3,7 +3,7 @@\n use std::iter::once;\n \n use syntax::ast;\n-use syntax::ext::base::MacroKind;\n+use syntax_expand::base::MacroKind;\n use syntax::symbol::sym;\n use syntax_pos::Span;\n "}, {"sha": "ba00631dc6ca208cc3dea4e6f334d9f3a7436305", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -28,7 +28,7 @@ use rustc::ty::layout::VariantIdx;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use syntax::ast::{self, AttrStyle, Ident};\n use syntax::attr;\n-use syntax::ext::base::MacroKind;\n+use syntax_expand::base::MacroKind;\n use syntax::source_map::DUMMY_SP;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::symbol::InternedString;"}, {"sha": "0dc094ae329fb414eb26d12fa1c0145f27677aea", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -4,7 +4,7 @@ pub use self::StructType::*;\n \n use syntax::ast;\n use syntax::ast::Name;\n-use syntax::ext::base::MacroKind;\n+use syntax_expand::base::MacroKind;\n use syntax_pos::{self, Span};\n \n use rustc::hir;"}, {"sha": "e015739b03c40b358c10b0822bfd9d4106d9e161", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,7 +1,7 @@\n //! Item types.\n \n use std::fmt;\n-use syntax::ext::base::MacroKind;\n+use syntax_expand::base::MacroKind;\n use crate::clean;\n \n /// Item type. Corresponds to `clean::ItemEnum` variants."}, {"sha": "72a72e892814a97e88507a11d7d7a3b8620b0ba6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -45,11 +45,11 @@ use errors;\n use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n use syntax::edition::Edition;\n-use syntax::ext::base::MacroKind;\n+use syntax::feature_gate::UnstableFeatures;\n use syntax::print::pprust;\n use syntax::source_map::FileName;\n-use syntax::feature_gate::UnstableFeatures;\n use syntax::symbol::{Symbol, sym};\n+use syntax_expand::base::MacroKind;\n use rustc::hir::def_id::DefId;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;"}, {"sha": "8cd32a3d1b508cc3e55e9ccbab6a53319fed9da2", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -34,6 +34,7 @@ extern crate rustc_typeck;\n extern crate rustc_lexer;\n extern crate serialize;\n extern crate syntax;\n+extern crate syntax_expand;\n extern crate syntax_pos;\n extern crate test as testing;\n #[macro_use] extern crate log;"}, {"sha": "4270b162bafa4837aab4fef529914252a93ac5d2", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -7,7 +7,7 @@ use rustc::ty;\n use rustc_resolve::ParentScope;\n use syntax;\n use syntax::ast::{self, Ident};\n-use syntax::ext::base::SyntaxExtensionKind;\n+use syntax_expand::base::SyntaxExtensionKind;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::symbol::Symbol;\n use syntax_pos::DUMMY_SP;"}, {"sha": "70c30687dabca6b45abb87f7751ba3bac87b215b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -8,7 +8,7 @@ use rustc::middle::privacy::AccessLevel;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::ty::TyCtxt;\n use syntax::ast;\n-use syntax::ext::base::MacroKind;\n+use syntax_expand::base::MacroKind;\n use syntax::source_map::Spanned;\n use syntax::symbol::sym;\n use syntax_pos::{self, Span};"}, {"sha": "402c2cad72f99d5f37db2b25d5176da35eee46ae", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -298,14 +298,14 @@ impl Attribute {\n         Ok(result)\n     }\n \n-    crate fn parse_derive_paths<'a>(&self, sess: &'a ParseSess) -> PResult<'a, Vec<Path>> {\n+    pub fn parse_derive_paths<'a>(&self, sess: &'a ParseSess) -> PResult<'a, Vec<Path>> {\n         if self.tokens.is_empty() {\n             return Ok(Vec::new());\n         }\n         self.parse(sess, |p| p.parse_derive_paths())\n     }\n \n-    crate fn parse_meta<'a>(&self, sess: &'a ParseSess) -> PResult<'a, MetaItem> {\n+    pub fn parse_meta<'a>(&self, sess: &'a ParseSess) -> PResult<'a, MetaItem> {\n         Ok(MetaItem {\n             path: self.path.clone(),\n             kind: self.parse(sess, |parser| parser.parse_meta_item_kind())?,"}, {"sha": "54dc95291d67f5d07ae31ac7374c88add4a02f5a", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -56,6 +56,7 @@ pub fn features(mut krate: ast::Crate, sess: &ParseSess, edition: Edition,\n     (krate, features)\n }\n \n+#[macro_export]\n macro_rules! configure {\n     ($this:ident, $node:ident) => {\n         match $this.configure($node) {"}, {"sha": "172511f0f099b0bd0d713c94249cb3f1edbba47c", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -56,7 +56,7 @@ macro_rules! gate_feature {\n     };\n }\n \n-crate fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features: &Features) {\n+pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features: &Features) {\n     PostExpansionVisitor { parse_sess, features }.visit_attribute(attr)\n }\n "}, {"sha": "ba970618c0e139d35ff7dfe5d1a3c79de18a6bac", "filename": "src/libsyntax/feature_gate/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -58,8 +58,7 @@ pub use builtin_attrs::{\n     deprecated_attributes, is_builtin_attr,  is_builtin_attr_name,\n };\n pub use check::{\n-    check_crate, get_features, feature_err, emit_feature_err,\n+    check_crate, check_attribute, get_features, feature_err, emit_feature_err,\n     Stability, GateIssue, UnstableFeatures,\n     EXPLAIN_STMT_ATTR_SYNTAX, EXPLAIN_UNSIZED_TUPLE_COERCION,\n };\n-crate use check::check_attribute;"}, {"sha": "a68b7fdf931a460d5bf50a2c576132b6e2bfbe51", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -13,17 +13,12 @@\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(nll)]\n-#![feature(proc_macro_diagnostic)]\n-#![feature(proc_macro_internals)]\n-#![feature(proc_macro_span)]\n #![feature(try_trait)]\n #![feature(slice_patterns)]\n #![feature(unicode_internals)]\n \n #![recursion_limit=\"256\"]\n \n-extern crate proc_macro;\n-\n pub use errors;\n use rustc_data_structures::sync::Lock;\n use rustc_index::bit_set::GrowableBitSet;\n@@ -34,26 +29,7 @@ use syntax_pos::edition::Edition;\n #[cfg(test)]\n mod tests;\n \n-const MACRO_ARGUMENTS: Option<&'static str> = Some(\"macro arguments\");\n-\n-// A variant of 'try!' that panics on an Err. This is used as a crutch on the\n-// way towards a non-panic!-prone parser. It should be used for fatal parsing\n-// errors; eventually we plan to convert all code using panictry to just use\n-// normal try.\n-#[macro_export]\n-macro_rules! panictry {\n-    ($e:expr) => ({\n-        use std::result::Result::{Ok, Err};\n-        use errors::FatalError;\n-        match $e {\n-            Ok(e) => e,\n-            Err(mut e) => {\n-                e.emit();\n-                FatalError.raise()\n-            }\n-        }\n-    })\n-}\n+pub const MACRO_ARGUMENTS: Option<&'static str> = Some(\"macro arguments\");\n \n // A variant of 'panictry!' that works on a Vec<Diagnostic> instead of a single DiagnosticBuilder.\n macro_rules! panictry_buffer {\n@@ -157,19 +133,4 @@ pub mod print {\n     mod helpers;\n }\n \n-pub mod ext {\n-    mod placeholders;\n-    mod proc_macro_server;\n-\n-    pub use syntax_pos::hygiene;\n-    pub use mbe::macro_rules::compile_declarative_macro;\n-    pub mod allocator;\n-    pub mod base;\n-    pub mod build;\n-    pub mod expand;\n-    pub mod proc_macro;\n-\n-    crate mod mbe;\n-}\n-\n pub mod early_buffered_lints;"}, {"sha": "14e1696610a4d0bd8e004a32d80327eb2fe72143", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -212,7 +212,7 @@ impl Lit {\n     /// Attempts to recover an AST literal from semantic literal.\n     /// This function is used when the original token doesn't exist (e.g. the literal is created\n     /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).\n-    crate fn from_lit_kind(kind: LitKind, span: Span) -> Lit {\n+    pub fn from_lit_kind(kind: LitKind, span: Span) -> Lit {\n         Lit { token: kind.to_lit_token(), kind, span }\n     }\n "}, {"sha": "64ec943294aed5eda97951b80649bd8479d85b39", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -5,7 +5,7 @@ mod item;\n mod module;\n mod ty;\n mod path;\n-crate use path::PathStyle;\n+pub use path::PathStyle;\n mod stmt;\n mod generics;\n mod diagnostics;\n@@ -130,7 +130,7 @@ pub struct Parser<'a> {\n     /// Name of the root module this parser originated from. If `None`, then the\n     /// name is not known. This does not change while the parser is descending\n     /// into modules, and sub-parsers have new values for this name.\n-    crate root_module_name: Option<String>,\n+    pub root_module_name: Option<String>,\n     expected_tokens: Vec<TokenType>,\n     token_cursor: TokenCursor,\n     desugar_doc_comments: bool,\n@@ -148,7 +148,7 @@ pub struct Parser<'a> {\n     /// error.\n     pub(super) unclosed_delims: Vec<UnmatchedBrace>,\n     last_unexpected_token_span: Option<Span>,\n-    crate last_type_ascription: Option<(Span, bool /* likely path typo */)>,\n+    pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,\n     /// If present, this `Parser` is not parsing Rust code but rather a macro call.\n     subparser_name: Option<&'static str>,\n }\n@@ -330,7 +330,7 @@ enum TokenExpectType {\n }\n \n impl<'a> Parser<'a> {\n-    crate fn new(\n+    pub fn new(\n         sess: &'a ParseSess,\n         tokens: TokenStream,\n         directory: Option<Directory<'a>>,\n@@ -1003,7 +1003,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    crate fn process_potential_macro_variable(&mut self) {\n+    pub fn process_potential_macro_variable(&mut self) {\n         self.token = match self.token.kind {\n             token::Dollar if self.token.span.from_expansion() &&\n                              self.look_ahead(1, |t| t.is_ident()) => {\n@@ -1037,7 +1037,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a single token tree from the input.\n-    crate fn parse_token_tree(&mut self) -> TokenTree {\n+    pub fn parse_token_tree(&mut self) -> TokenTree {\n         match self.token.kind {\n             token::OpenDelim(..) => {\n                 let frame = mem::replace(&mut self.token_cursor.frame,\n@@ -1099,7 +1099,7 @@ impl<'a> Parser<'a> {\n     /// If the following element can't be a tuple (i.e., it's a function definition), then\n     /// it's not a tuple struct field), and the contents within the parentheses isn't valid,\n     /// so emit a proper diagnostic.\n-    crate fn parse_visibility(&mut self, can_take_tuple: bool) -> PResult<'a, Visibility> {\n+    pub fn parse_visibility(&mut self, can_take_tuple: bool) -> PResult<'a, Visibility> {\n         maybe_whole!(self, NtVis, |x| x);\n \n         self.expected_tokens.push(TokenType::Keyword(kw::Crate));"}, {"sha": "32a41bb0e271ade1e756b8e55a0e65d20ae8ed16", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -170,7 +170,7 @@ impl RecoverQPath for Expr {\n }\n \n impl<'a> Parser<'a> {\n-    crate fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> {\n+    pub fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> {\n         self.span_fatal(self.token.span, m)\n     }\n \n@@ -190,11 +190,11 @@ impl<'a> Parser<'a> {\n         self.sess.span_diagnostic.span_err(sp, m)\n     }\n \n-    crate fn struct_span_err<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_err(sp, m)\n     }\n \n-    crate fn span_bug<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> ! {\n+    pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> ! {\n         self.sess.span_diagnostic.span_bug(sp, m)\n     }\n "}, {"sha": "273f5a5ffa36125f33a28e820813dfec72887b90", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1233,7 +1233,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Matches `'-' lit | lit` (cf. `ast_validation::AstValidator::check_expr_within_pat`).\n-    crate fn parse_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> {\n+    pub fn parse_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> {\n         maybe_whole_expr!(self);\n \n         let minus_lo = self.token.span;"}, {"sha": "0acfd1450d819d11ed208867fa76d4d319c4741a", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -674,7 +674,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an impl item.\n-    crate fn parse_impl_item(&mut self, at_end: &mut bool) -> PResult<'a, ImplItem> {\n+    pub fn parse_impl_item(&mut self, at_end: &mut bool) -> PResult<'a, ImplItem> {\n         maybe_whole!(self, NtImplItem, |x| x);\n         let attrs = self.parse_outer_attributes()?;\n         let mut unclosed_delims = vec![];\n@@ -850,7 +850,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the items in a trait declaration.\n-    crate fn parse_trait_item(&mut self, at_end: &mut bool) -> PResult<'a, TraitItem> {\n+    pub fn parse_trait_item(&mut self, at_end: &mut bool) -> PResult<'a, TraitItem> {\n         maybe_whole!(self, NtTraitItem, |x| x);\n         let attrs = self.parse_outer_attributes()?;\n         let mut unclosed_delims = vec![];\n@@ -1116,7 +1116,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a foreign item.\n-    crate fn parse_foreign_item(&mut self, extern_sp: Span) -> PResult<'a, ForeignItem> {\n+    pub fn parse_foreign_item(&mut self, extern_sp: Span) -> PResult<'a, ForeignItem> {\n         maybe_whole!(self, NtForeignItem, |ni| ni);\n \n         let attrs = self.parse_outer_attributes()?;"}, {"sha": "af795e51792ff26f4ffc6fd41ee837c3e2210d94", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -34,7 +34,7 @@ impl<'a> Parser<'a> {\n     /// Corresponds to `pat<no_top_alt>` in RFC 2535 and does not admit or-patterns\n     /// at the top level. Used when parsing the parameters of lambda expressions,\n     /// functions, function pointers, and `pat` macro fragments.\n-    crate fn parse_pat(&mut self, expected: Expected) -> PResult<'a, P<Pat>> {\n+    pub fn parse_pat(&mut self, expected: Expected) -> PResult<'a, P<Pat>> {\n         self.parse_pat_with_range_pat(true, expected)\n     }\n "}, {"sha": "639d61a2b5cd4a90b27eb5092af4521b2b92c1cf", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -13,7 +13,7 @@ use errors::{Applicability, pluralise};\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]\n-crate enum PathStyle {\n+pub enum PathStyle {\n     /// In some contexts, notably in expressions, paths with generic arguments are ambiguous\n     /// with something else. For example, in expressions `segment < ....` can be interpreted\n     /// as a comparison and `segment ( ....` can be interpreted as a function call.\n@@ -88,7 +88,7 @@ impl<'a> Parser<'a> {\n     /// `a::b::C::<D>` (with disambiguator)\n     /// `Fn(Args)` (without disambiguator)\n     /// `Fn::(Args)` (with disambiguator)\n-    crate fn parse_path(&mut self, style: PathStyle) -> PResult<'a, Path> {\n+    pub fn parse_path(&mut self, style: PathStyle) -> PResult<'a, Path> {\n         maybe_whole!(self, NtPath, |path| {\n             if style == PathStyle::Mod &&\n                path.segments.iter().any(|segment| segment.args.is_some()) {"}, {"sha": "4b1fdb2eef3a539a83799854ab53801e00263a62", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -19,7 +19,7 @@ use errors::Applicability;\n impl<'a> Parser<'a> {\n     /// Parses a statement. This stops just before trailing semicolons on everything but items.\n     /// e.g., a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.\n-    crate fn parse_stmt(&mut self) -> PResult<'a, Option<Stmt>> {\n+    pub fn parse_stmt(&mut self) -> PResult<'a, Option<Stmt>> {\n         Ok(self.parse_stmt_(true))\n     }\n \n@@ -299,7 +299,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a block. No inner attributes are allowed.\n-    crate fn parse_block(&mut self) -> PResult<'a, P<Block>> {\n+    pub fn parse_block(&mut self) -> PResult<'a, P<Block>> {\n         maybe_whole!(self, NtBlock, |x| x);\n \n         let lo = self.token.span;\n@@ -421,7 +421,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a statement, including the trailing semicolon.\n-    crate fn parse_full_stmt(&mut self, macro_legacy_warnings: bool) -> PResult<'a, Option<Stmt>> {\n+    pub fn parse_full_stmt(&mut self, macro_legacy_warnings: bool) -> PResult<'a, Option<Stmt>> {\n         // Skip looking for a trailing semicolon when we have an interpolated statement.\n         maybe_whole!(self, NtStmt, |x| Some(x));\n "}, {"sha": "86c94b680b2c9da4a0b61fb2fcadc3d2ecee9976", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -433,13 +433,13 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    crate fn check_lifetime(&mut self) -> bool {\n+    pub fn check_lifetime(&mut self) -> bool {\n         self.expected_tokens.push(TokenType::Lifetime);\n         self.token.is_lifetime()\n     }\n \n     /// Parses a single lifetime `'a` or panics.\n-    crate fn expect_lifetime(&mut self) -> Lifetime {\n+    pub fn expect_lifetime(&mut self) -> Lifetime {\n         if let Some(ident) = self.token.lifetime() {\n             let span = self.token.span;\n             self.bump();"}, {"sha": "e527989fb0ba061e305c41ccccf5d42ae56ce5a7", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -285,7 +285,7 @@ impl TokenKind {\n }\n \n impl Token {\n-    crate fn new(kind: TokenKind, span: Span) -> Self {\n+    pub fn new(kind: TokenKind, span: Span) -> Self {\n         Token { kind, span }\n     }\n \n@@ -295,12 +295,12 @@ impl Token {\n     }\n \n     /// Recovers a `Token` from an `ast::Ident`. This creates a raw identifier if necessary.\n-    crate fn from_ast_ident(ident: ast::Ident) -> Self {\n+    pub fn from_ast_ident(ident: ast::Ident) -> Self {\n         Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)\n     }\n \n     /// Return this token by value and leave a dummy token in its place.\n-    crate fn take(&mut self) -> Self {\n+    pub fn take(&mut self) -> Self {\n         mem::replace(self, Token::dummy())\n     }\n \n@@ -321,7 +321,7 @@ impl Token {\n     }\n \n     /// Returns `true` if the token can appear at the start of an expression.\n-    crate fn can_begin_expr(&self) -> bool {\n+    pub fn can_begin_expr(&self) -> bool {\n         match self.kind {\n             Ident(name, is_raw)              =>\n                 ident_can_begin_expr(name, self.span, is_raw), // value name or keyword\n@@ -353,7 +353,7 @@ impl Token {\n     }\n \n     /// Returns `true` if the token can appear at the start of a type.\n-    crate fn can_begin_type(&self) -> bool {\n+    pub fn can_begin_type(&self) -> bool {\n         match self.kind {\n             Ident(name, is_raw)        =>\n                 ident_can_begin_type(name, self.span, is_raw), // type name or keyword\n@@ -396,7 +396,7 @@ impl Token {\n     }\n \n     /// Returns `true` if the token is any literal\n-    crate fn is_lit(&self) -> bool {\n+    pub fn is_lit(&self) -> bool {\n         match self.kind {\n             Literal(..) => true,\n             _           => false,\n@@ -412,7 +412,7 @@ impl Token {\n \n     /// Returns `true` if the token is any literal, a minus (which can prefix a literal,\n     /// for example a '-42', or one of the boolean idents).\n-    crate fn can_begin_literal_or_bool(&self) -> bool {\n+    pub fn can_begin_literal_or_bool(&self) -> bool {\n         match self.kind {\n             Literal(..) | BinOp(Minus) => true,\n             Ident(name, false) if name.is_bool_lit() => true,"}, {"sha": "db6832d64232258e56362d014426752c883693db", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -156,7 +156,7 @@ use IsJoint::*;\n impl TokenStream {\n     /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`\n     /// separating the two arguments with a comma for diagnostic suggestions.\n-    pub(crate) fn add_comma(&self) -> Option<(TokenStream, Span)> {\n+    pub fn add_comma(&self) -> Option<(TokenStream, Span)> {\n         // Used to suggest if a user writes `foo!(a b);`\n         let mut suggestion = None;\n         let mut iter = self.0.iter().enumerate().peekable();"}, {"sha": "f063753f59943f3042b976e65306f1ad71ff0208", "filename": "src/libsyntax_expand/Cargo.toml", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2FCargo.toml?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -0,0 +1,26 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"syntax_expand\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+build = false\n+\n+[lib]\n+name = \"syntax_expand\"\n+path = \"lib.rs\"\n+doctest = false\n+\n+[dependencies]\n+bitflags = \"1.0\"\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n+log = \"0.4\"\n+scoped-tls = \"1.0\"\n+lazy_static = \"1.0.0\"\n+syntax_pos = { path = \"../libsyntax_pos\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_index = { path = \"../librustc_index\" }\n+rustc_lexer = { path = \"../librustc_lexer\" }\n+rustc_target = { path = \"../librustc_target\" }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+syntax = { path = \"../libsyntax\" }"}, {"sha": "3526be17721a884681f7bbe1aed18fc08bb5d3fd", "filename": "src/libsyntax_expand/allocator.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fallocator.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,5 +1,5 @@\n-use crate::{ast, attr, visit};\n-use crate::symbol::{sym, Symbol};\n+use syntax::{ast, attr, visit};\n+use syntax::symbol::{sym, Symbol};\n use syntax_pos::Span;\n \n #[derive(Clone, Copy)]", "previous_filename": "src/libsyntax/ext/allocator.rs"}, {"sha": "593e06f29b93cedb788895c07ea7a0a3fc6a8312", "filename": "src/libsyntax_expand/base.rs", "status": "renamed", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,18 +1,19 @@\n-use crate::ast::{self, NodeId, Attribute, Name, PatKind};\n-use crate::attr::{self, HasAttrs, Stability, Deprecation};\n-use crate::source_map::SourceMap;\n-use crate::edition::Edition;\n-use crate::ext::expand::{self, AstFragment, Invocation};\n-use crate::ext::hygiene::ExpnId;\n-use crate::mut_visit::{self, MutVisitor};\n-use crate::parse::{self, parser, DirectoryOwnership};\n-use crate::parse::token;\n-use crate::ptr::P;\n-use crate::sess::ParseSess;\n-use crate::symbol::{kw, sym, Ident, Symbol};\n-use crate::{ThinVec, MACRO_ARGUMENTS};\n-use crate::tokenstream::{self, TokenStream};\n-use crate::visit::Visitor;\n+use crate::expand::{self, AstFragment, Invocation};\n+use crate::hygiene::ExpnId;\n+\n+use syntax::ast::{self, NodeId, Attribute, Name, PatKind};\n+use syntax::attr::{self, HasAttrs, Stability, Deprecation};\n+use syntax::source_map::SourceMap;\n+use syntax::edition::Edition;\n+use syntax::mut_visit::{self, MutVisitor};\n+use syntax::parse::{self, parser, DirectoryOwnership};\n+use syntax::parse::token;\n+use syntax::ptr::P;\n+use syntax::sess::ParseSess;\n+use syntax::symbol::{kw, sym, Ident, Symbol};\n+use syntax::{ThinVec, MACRO_ARGUMENTS};\n+use syntax::tokenstream::{self, TokenStream};\n+use syntax::visit::Visitor;\n \n use errors::{DiagnosticBuilder, DiagnosticId};\n use smallvec::{smallvec, SmallVec};", "previous_filename": "src/libsyntax/ext/base.rs"}, {"sha": "105ffe3ee8a9f0ce1eccc30597ed27a2125f5b8b", "filename": "src/libsyntax_expand/build.rs", "status": "renamed", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbuild.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,10 +1,11 @@\n-use crate::ast::{self, Ident, Expr, BlockCheckMode, UnOp, PatKind};\n-use crate::attr;\n-use crate::source_map::{respan, Spanned};\n-use crate::ext::base::ExtCtxt;\n-use crate::ptr::P;\n-use crate::symbol::{kw, sym, Symbol};\n-use crate::ThinVec;\n+use crate::base::ExtCtxt;\n+\n+use syntax::ast::{self, Ident, Expr, BlockCheckMode, UnOp, PatKind};\n+use syntax::attr;\n+use syntax::source_map::{respan, Spanned};\n+use syntax::ptr::P;\n+use syntax::symbol::{kw, sym, Symbol};\n+use syntax::ThinVec;\n \n use syntax_pos::{Pos, Span};\n ", "previous_filename": "src/libsyntax/ext/build.rs"}, {"sha": "47b4bca314a2d0ceedc797ed78703096992672fe", "filename": "src/libsyntax_expand/expand.rs", "status": "renamed", "additions": 118, "deletions": 110, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,24 +1,26 @@\n-use crate::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n-use crate::ast::{MacStmtStyle, StmtKind, ItemKind};\n-use crate::attr::{self, HasAttrs};\n-use crate::source_map::respan;\n-use crate::config::StripUnconfigured;\n-use crate::ext::base::*;\n-use crate::ext::proc_macro::{collect_derives, MarkAttrs};\n-use crate::ext::hygiene::{ExpnId, SyntaxContext, ExpnData, ExpnKind};\n-use crate::ext::mbe::macro_rules::annotate_err_with_kind;\n-use crate::ext::placeholders::{placeholder, PlaceholderExpander};\n-use crate::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n-use crate::mut_visit::*;\n-use crate::parse::{DirectoryOwnership, PResult};\n-use crate::parse::token;\n-use crate::parse::parser::Parser;\n-use crate::print::pprust;\n-use crate::ptr::P;\n-use crate::symbol::{sym, Symbol};\n-use crate::tokenstream::{TokenStream, TokenTree};\n-use crate::visit::Visitor;\n-use crate::util::map_in_place::MapInPlace;\n+use crate::base::*;\n+use crate::proc_macro::{collect_derives, MarkAttrs};\n+use crate::hygiene::{ExpnId, SyntaxContext, ExpnData, ExpnKind};\n+use crate::mbe::macro_rules::annotate_err_with_kind;\n+use crate::placeholders::{placeholder, PlaceholderExpander};\n+\n+use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n+use syntax::ast::{MacStmtStyle, StmtKind, ItemKind};\n+use syntax::attr::{self, HasAttrs};\n+use syntax::source_map::respan;\n+use syntax::configure;\n+use syntax::config::StripUnconfigured;\n+use syntax::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n+use syntax::mut_visit::*;\n+use syntax::parse::{DirectoryOwnership, PResult};\n+use syntax::parse::token;\n+use syntax::parse::parser::Parser;\n+use syntax::print::pprust;\n+use syntax::ptr::P;\n+use syntax::symbol::{sym, Symbol};\n+use syntax::tokenstream::{TokenStream, TokenTree};\n+use syntax::visit::Visitor;\n+use syntax::util::map_in_place::MapInPlace;\n \n use errors::{Applicability, FatalError};\n use smallvec::{smallvec, SmallVec};\n@@ -116,8 +118,8 @@ macro_rules! ast_fragments {\n             }\n         }\n \n-        impl<'a> MacResult for crate::ext::mbe::macro_rules::ParserAnyMacro<'a> {\n-            $(fn $make_ast(self: Box<crate::ext::mbe::macro_rules::ParserAnyMacro<'a>>)\n+        impl<'a> MacResult for crate::mbe::macro_rules::ParserAnyMacro<'a> {\n+            $(fn $make_ast(self: Box<crate::mbe::macro_rules::ParserAnyMacro<'a>>)\n                            -> Option<$AstTy> {\n                 Some(self.make(AstFragmentKind::$Kind).$make_ast())\n             })*\n@@ -752,9 +754,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         span: Span,\n     ) -> AstFragment {\n         let mut parser = self.cx.new_parser_from_tts(toks);\n-        match parser.parse_ast_fragment(kind, false) {\n+        match parse_ast_fragment(&mut parser, kind, false) {\n             Ok(fragment) => {\n-                parser.ensure_complete_parse(path, kind.name(), span);\n+                ensure_complete_parse(&mut parser, path, kind.name(), span);\n                 fragment\n             }\n             Err(mut err) => {\n@@ -768,100 +770,106 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     }\n }\n \n-impl<'a> Parser<'a> {\n-    pub fn parse_ast_fragment(&mut self, kind: AstFragmentKind, macro_legacy_warnings: bool)\n-                              -> PResult<'a, AstFragment> {\n-        Ok(match kind {\n-            AstFragmentKind::Items => {\n-                let mut items = SmallVec::new();\n-                while let Some(item) = self.parse_item()? {\n-                    items.push(item);\n-                }\n-                AstFragment::Items(items)\n+pub fn parse_ast_fragment<'a>(\n+    this: &mut Parser<'a>,\n+    kind: AstFragmentKind,\n+    macro_legacy_warnings: bool,\n+) -> PResult<'a, AstFragment> {\n+    Ok(match kind {\n+        AstFragmentKind::Items => {\n+            let mut items = SmallVec::new();\n+            while let Some(item) = this.parse_item()? {\n+                items.push(item);\n             }\n-            AstFragmentKind::TraitItems => {\n-                let mut items = SmallVec::new();\n-                while self.token != token::Eof {\n-                    items.push(self.parse_trait_item(&mut false)?);\n-                }\n-                AstFragment::TraitItems(items)\n+            AstFragment::Items(items)\n+        }\n+        AstFragmentKind::TraitItems => {\n+            let mut items = SmallVec::new();\n+            while this.token != token::Eof {\n+                items.push(this.parse_trait_item(&mut false)?);\n             }\n-            AstFragmentKind::ImplItems => {\n-                let mut items = SmallVec::new();\n-                while self.token != token::Eof {\n-                    items.push(self.parse_impl_item(&mut false)?);\n-                }\n-                AstFragment::ImplItems(items)\n+            AstFragment::TraitItems(items)\n+        }\n+        AstFragmentKind::ImplItems => {\n+            let mut items = SmallVec::new();\n+            while this.token != token::Eof {\n+                items.push(this.parse_impl_item(&mut false)?);\n             }\n-            AstFragmentKind::ForeignItems => {\n-                let mut items = SmallVec::new();\n-                while self.token != token::Eof {\n-                    items.push(self.parse_foreign_item(DUMMY_SP)?);\n-                }\n-                AstFragment::ForeignItems(items)\n+            AstFragment::ImplItems(items)\n+        }\n+        AstFragmentKind::ForeignItems => {\n+            let mut items = SmallVec::new();\n+            while this.token != token::Eof {\n+                items.push(this.parse_foreign_item(DUMMY_SP)?);\n             }\n-            AstFragmentKind::Stmts => {\n-                let mut stmts = SmallVec::new();\n-                while self.token != token::Eof &&\n-                      // won't make progress on a `}`\n-                      self.token != token::CloseDelim(token::Brace) {\n-                    if let Some(stmt) = self.parse_full_stmt(macro_legacy_warnings)? {\n-                        stmts.push(stmt);\n-                    }\n+            AstFragment::ForeignItems(items)\n+        }\n+        AstFragmentKind::Stmts => {\n+            let mut stmts = SmallVec::new();\n+            while this.token != token::Eof &&\n+                    // won't make progress on a `}`\n+                    this.token != token::CloseDelim(token::Brace) {\n+                if let Some(stmt) = this.parse_full_stmt(macro_legacy_warnings)? {\n+                    stmts.push(stmt);\n                 }\n-                AstFragment::Stmts(stmts)\n             }\n-            AstFragmentKind::Expr => AstFragment::Expr(self.parse_expr()?),\n-            AstFragmentKind::OptExpr => {\n-                if self.token != token::Eof {\n-                    AstFragment::OptExpr(Some(self.parse_expr()?))\n-                } else {\n-                    AstFragment::OptExpr(None)\n-                }\n-            },\n-            AstFragmentKind::Ty => AstFragment::Ty(self.parse_ty()?),\n-            AstFragmentKind::Pat => AstFragment::Pat(self.parse_pat(None)?),\n-            AstFragmentKind::Arms\n-            | AstFragmentKind::Fields\n-            | AstFragmentKind::FieldPats\n-            | AstFragmentKind::GenericParams\n-            | AstFragmentKind::Params\n-            | AstFragmentKind::StructFields\n-            | AstFragmentKind::Variants\n-                => panic!(\"unexpected AST fragment kind\"),\n-        })\n-    }\n+            AstFragment::Stmts(stmts)\n+        }\n+        AstFragmentKind::Expr => AstFragment::Expr(this.parse_expr()?),\n+        AstFragmentKind::OptExpr => {\n+            if this.token != token::Eof {\n+                AstFragment::OptExpr(Some(this.parse_expr()?))\n+            } else {\n+                AstFragment::OptExpr(None)\n+            }\n+        },\n+        AstFragmentKind::Ty => AstFragment::Ty(this.parse_ty()?),\n+        AstFragmentKind::Pat => AstFragment::Pat(this.parse_pat(None)?),\n+        AstFragmentKind::Arms\n+        | AstFragmentKind::Fields\n+        | AstFragmentKind::FieldPats\n+        | AstFragmentKind::GenericParams\n+        | AstFragmentKind::Params\n+        | AstFragmentKind::StructFields\n+        | AstFragmentKind::Variants\n+            => panic!(\"unexpected AST fragment kind\"),\n+    })\n+}\n \n-    pub fn ensure_complete_parse(&mut self, macro_path: &Path, kind_name: &str, span: Span) {\n-        if self.token != token::Eof {\n-            let msg = format!(\"macro expansion ignores token `{}` and any following\",\n-                              self.this_token_to_string());\n-            // Avoid emitting backtrace info twice.\n-            let def_site_span = self.token.span.with_ctxt(SyntaxContext::root());\n-            let mut err = self.struct_span_err(def_site_span, &msg);\n-            err.span_label(span, \"caused by the macro expansion here\");\n-            let msg = format!(\n-                \"the usage of `{}!` is likely invalid in {} context\",\n-                pprust::path_to_string(&macro_path),\n-                kind_name,\n-            );\n-            err.note(&msg);\n-            let semi_span = self.sess.source_map().next_point(span);\n-\n-            let semi_full_span = semi_span.to(self.sess.source_map().next_point(semi_span));\n-            match self.sess.source_map().span_to_snippet(semi_full_span) {\n-                Ok(ref snippet) if &snippet[..] != \";\" && kind_name == \"expression\" => {\n-                    err.span_suggestion(\n-                        semi_span,\n-                        \"you might be missing a semicolon here\",\n-                        \";\".to_owned(),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-                _ => {}\n+pub fn ensure_complete_parse<'a>(\n+    this: &mut Parser<'a>,\n+    macro_path: &Path,\n+    kind_name: &str,\n+    span: Span,\n+) {\n+    if this.token != token::Eof {\n+        let msg = format!(\"macro expansion ignores token `{}` and any following\",\n+                            this.this_token_to_string());\n+        // Avoid emitting backtrace info twice.\n+        let def_site_span = this.token.span.with_ctxt(SyntaxContext::root());\n+        let mut err = this.struct_span_err(def_site_span, &msg);\n+        err.span_label(span, \"caused by the macro expansion here\");\n+        let msg = format!(\n+            \"the usage of `{}!` is likely invalid in {} context\",\n+            pprust::path_to_string(macro_path),\n+            kind_name,\n+        );\n+        err.note(&msg);\n+        let semi_span = this.sess.source_map().next_point(span);\n+\n+        let semi_full_span = semi_span.to(this.sess.source_map().next_point(semi_span));\n+        match this.sess.source_map().span_to_snippet(semi_full_span) {\n+            Ok(ref snippet) if &snippet[..] != \";\" && kind_name == \"expression\" => {\n+                err.span_suggestion(\n+                    semi_span,\n+                    \"you might be missing a semicolon here\",\n+                    \";\".to_owned(),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n-            err.emit();\n+            _ => {}\n         }\n+        err.emit();\n     }\n }\n ", "previous_filename": "src/libsyntax/ext/expand.rs"}, {"sha": "88e69d7939732e9bc42d09de700dcb7c40ca3f73", "filename": "src/libsyntax_expand/lib.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Flib.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -0,0 +1,38 @@\n+#![feature(crate_visibility_modifier)]\n+#![feature(proc_macro_diagnostic)]\n+#![feature(proc_macro_internals)]\n+#![feature(proc_macro_span)]\n+\n+extern crate proc_macro as pm;\n+\n+// A variant of 'try!' that panics on an Err. This is used as a crutch on the\n+// way towards a non-panic!-prone parser. It should be used for fatal parsing\n+// errors; eventually we plan to convert all code using panictry to just use\n+// normal try.\n+#[macro_export]\n+macro_rules! panictry {\n+    ($e:expr) => ({\n+        use std::result::Result::{Ok, Err};\n+        use errors::FatalError;\n+        match $e {\n+            Ok(e) => e,\n+            Err(mut e) => {\n+                e.emit();\n+                FatalError.raise()\n+            }\n+        }\n+    })\n+}\n+\n+mod placeholders;\n+mod proc_macro_server;\n+\n+pub use syntax_pos::hygiene;\n+pub use mbe::macro_rules::compile_declarative_macro;\n+pub mod allocator;\n+pub mod base;\n+pub mod build;\n+pub mod expand;\n+pub mod proc_macro;\n+\n+crate mod mbe;"}, {"sha": "453fe94f1de194a23159e64269ba8f44a60bf126", "filename": "src/libsyntax_expand/mbe.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -9,9 +9,9 @@ crate mod macro_parser;\n crate mod macro_rules;\n crate mod quoted;\n \n-use crate::ast;\n-use crate::parse::token::{self, Token, TokenKind};\n-use crate::tokenstream::{DelimSpan};\n+use syntax::ast;\n+use syntax::parse::token::{self, Token, TokenKind};\n+use syntax::tokenstream::{DelimSpan};\n \n use syntax_pos::{BytePos, Span};\n ", "previous_filename": "src/libsyntax/ext/mbe.rs"}, {"sha": "50abda8d45e979fbd68914e04e4b0552a56f3560", "filename": "src/libsyntax_expand/mbe/macro_check.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -104,13 +104,13 @@\n //! Kleene operators under which a meta-variable is repeating is the concatenation of the stacks\n //! stored when entering a macro definition starting from the state in which the meta-variable is\n //! bound.\n-use crate::ast::NodeId;\n-use crate::early_buffered_lints::BufferedEarlyLintId;\n-use crate::ext::mbe::{KleeneToken, TokenTree};\n-use crate::parse::token::TokenKind;\n-use crate::parse::token::{DelimToken, Token};\n-use crate::sess::ParseSess;\n-use crate::symbol::{kw, sym};\n+use crate::mbe::{KleeneToken, TokenTree};\n+\n+use syntax::ast::NodeId;\n+use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax::parse::token::{DelimToken, Token, TokenKind};\n+use syntax::sess::ParseSess;\n+use syntax::symbol::{kw, sym};\n \n use rustc_data_structures::fx::FxHashMap;\n use smallvec::SmallVec;", "previous_filename": "src/libsyntax/ext/mbe/macro_check.rs"}, {"sha": "2edb492551290ff9e6556fe8a4b802a61439eded", "filename": "src/libsyntax_expand/mbe/macro_parser.rs", "status": "renamed", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -74,15 +74,16 @@ crate use NamedMatch::*;\n crate use ParseResult::*;\n use TokenTreeOrTokenTreeSlice::*;\n \n-use crate::ast::{Ident, Name};\n-use crate::ext::mbe::{self, TokenTree};\n-use crate::parse::{Directory, PResult};\n-use crate::parse::parser::{Parser, PathStyle};\n-use crate::parse::token::{self, DocComment, Nonterminal, Token};\n-use crate::print::pprust;\n-use crate::sess::ParseSess;\n-use crate::symbol::{kw, sym, Symbol};\n-use crate::tokenstream::{DelimSpan, TokenStream};\n+use crate::mbe::{self, TokenTree};\n+\n+use syntax::ast::{Ident, Name};\n+use syntax::parse::{Directory, PResult};\n+use syntax::parse::parser::{Parser, PathStyle};\n+use syntax::parse::token::{self, DocComment, Nonterminal, Token};\n+use syntax::print::pprust;\n+use syntax::sess::ParseSess;\n+use syntax::symbol::{kw, sym, Symbol};\n+use syntax::tokenstream::{DelimSpan, TokenStream};\n \n use errors::FatalError;\n use smallvec::{smallvec, SmallVec};\n@@ -651,7 +652,7 @@ pub(super) fn parse(\n         directory,\n         recurse_into_modules,\n         true,\n-        crate::MACRO_ARGUMENTS,\n+        syntax::MACRO_ARGUMENTS,\n     );\n \n     // A queue of possible matcher positions. We initialize it with the matcher position in which", "previous_filename": "src/libsyntax/ext/mbe/macro_parser.rs"}, {"sha": "9a4130b2d8d0289660bfe2d3250726db40809961", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "renamed", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,24 +1,25 @@\n-use crate::ast;\n-use crate::attr::{self, TransparencyError};\n-use crate::edition::Edition;\n-use crate::ext::base::{DummyResult, ExtCtxt, MacResult, TTMacroExpander};\n-use crate::ext::base::{SyntaxExtension, SyntaxExtensionKind};\n-use crate::ext::expand::{AstFragment, AstFragmentKind};\n-use crate::ext::mbe;\n-use crate::ext::mbe::macro_check;\n-use crate::ext::mbe::macro_parser::parse;\n-use crate::ext::mbe::macro_parser::{Error, Failure, Success};\n-use crate::ext::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n-use crate::ext::mbe::transcribe::transcribe;\n-use crate::feature_gate::Features;\n-use crate::parse::parser::Parser;\n-use crate::parse::token::TokenKind::*;\n-use crate::parse::token::{self, NtTT, Token};\n-use crate::parse::Directory;\n-use crate::print::pprust;\n-use crate::sess::ParseSess;\n-use crate::symbol::{kw, sym, Symbol};\n-use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n+use crate::base::{DummyResult, ExtCtxt, MacResult, TTMacroExpander};\n+use crate::base::{SyntaxExtension, SyntaxExtensionKind};\n+use crate::expand::{AstFragment, AstFragmentKind, ensure_complete_parse, parse_ast_fragment};\n+use crate::mbe;\n+use crate::mbe::macro_check;\n+use crate::mbe::macro_parser::parse;\n+use crate::mbe::macro_parser::{Error, Failure, Success};\n+use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n+use crate::mbe::transcribe::transcribe;\n+\n+use syntax::ast;\n+use syntax::attr::{self, TransparencyError};\n+use syntax::edition::Edition;\n+use syntax::feature_gate::Features;\n+use syntax::parse::parser::Parser;\n+use syntax::parse::token::TokenKind::*;\n+use syntax::parse::token::{self, NtTT, Token};\n+use syntax::parse::Directory;\n+use syntax::print::pprust;\n+use syntax::sess::ParseSess;\n+use syntax::symbol::{kw, sym, Symbol};\n+use syntax::tokenstream::{DelimSpan, TokenStream};\n \n use errors::{DiagnosticBuilder, FatalError};\n use log::debug;\n@@ -66,7 +67,7 @@ crate fn annotate_err_with_kind(\n impl<'a> ParserAnyMacro<'a> {\n     crate fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n         let ParserAnyMacro { site_span, macro_ident, ref mut parser, arm_span } = *self;\n-        let fragment = panictry!(parser.parse_ast_fragment(kind, true).map_err(|mut e| {\n+        let fragment = panictry!(parse_ast_fragment(parser, kind, true).map_err(|mut e| {\n             if parser.token == token::Eof && e.message().ends_with(\", found `<eof>`\") {\n                 if !e.span.is_dummy() {\n                     // early end of macro arm (#52866)\n@@ -128,7 +129,7 @@ impl<'a> ParserAnyMacro<'a> {\n \n         // Make sure we don't have any tokens left to parse so we don't silently drop anything.\n         let path = ast::Path::from_ident(macro_ident.with_span_pos(site_span));\n-        parser.ensure_complete_parse(&path, kind.name(), site_span);\n+        ensure_complete_parse(parser, &path, kind.name(), site_span);\n         fragment\n     }\n }\n@@ -189,7 +190,7 @@ fn generic_extension<'cx>(\n             _ => cx.span_bug(sp, \"malformed macro lhs\"),\n         };\n \n-        match TokenTree::parse(cx, lhs_tt, arg.clone()) {\n+        match parse_tt(cx, lhs_tt, arg.clone()) {\n             Success(named_matches) => {\n                 let rhs = match rhses[i] {\n                     // ignore delimiters\n@@ -265,7 +266,7 @@ fn generic_extension<'cx>(\n                 mbe::TokenTree::Delimited(_, ref delim) => &delim.tts[..],\n                 _ => continue,\n             };\n-            match TokenTree::parse(cx, lhs_tt, arg.clone()) {\n+            match parse_tt(cx, lhs_tt, arg.clone()) {\n                 Success(_) => {\n                     if comma_span.is_dummy() {\n                         err.note(\"you might be missing a comma\");\n@@ -1158,7 +1159,7 @@ fn is_legal_fragment_specifier(\n \n fn quoted_tt_to_string(tt: &mbe::TokenTree) -> String {\n     match *tt {\n-        mbe::TokenTree::Token(ref token) => crate::print::pprust::token_to_string(&token),\n+        mbe::TokenTree::Token(ref token) => pprust::token_to_string(&token),\n         mbe::TokenTree::MetaVar(_, name) => format!(\"${}\", name),\n         mbe::TokenTree::MetaVarDecl(_, name, kind) => format!(\"${}:{}\", name, kind),\n         _ => panic!(\n@@ -1168,17 +1169,14 @@ fn quoted_tt_to_string(tt: &mbe::TokenTree) -> String {\n     }\n }\n \n-impl TokenTree {\n-    /// Use this token tree as a matcher to parse given tts.\n-    fn parse(cx: &ExtCtxt<'_>, mtch: &[mbe::TokenTree], tts: TokenStream)\n-             -> NamedParseResult {\n-        // `None` is because we're not interpolating\n-        let directory = Directory {\n-            path: Cow::from(cx.current_expansion.module.directory.as_path()),\n-            ownership: cx.current_expansion.directory_ownership,\n-        };\n-        parse(cx.parse_sess(), tts, mtch, Some(directory), true)\n-    }\n+/// Use this token tree as a matcher to parse given tts.\n+fn parse_tt(cx: &ExtCtxt<'_>, mtch: &[mbe::TokenTree], tts: TokenStream) -> NamedParseResult {\n+    // `None` is because we're not interpolating\n+    let directory = Directory {\n+        path: Cow::from(cx.current_expansion.module.directory.as_path()),\n+        ownership: cx.current_expansion.directory_ownership,\n+    };\n+    parse(cx.parse_sess(), tts, mtch, Some(directory), true)\n }\n \n /// Generates an appropriate parsing failure message. For EOF, this is \"unexpected end...\". For", "previous_filename": "src/libsyntax/ext/mbe/macro_rules.rs"}, {"sha": "cedd59233adf5da0988350f3e67d9338e1b72697", "filename": "src/libsyntax_expand/mbe/quoted.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fquoted.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,11 +1,12 @@\n-use crate::ast;\n-use crate::ext::mbe::macro_parser;\n-use crate::ext::mbe::{TokenTree, KleeneOp, KleeneToken, SequenceRepetition, Delimited};\n-use crate::parse::token::{self, Token};\n-use crate::print::pprust;\n-use crate::sess::ParseSess;\n-use crate::symbol::kw;\n-use crate::tokenstream;\n+use crate::mbe::macro_parser;\n+use crate::mbe::{TokenTree, KleeneOp, KleeneToken, SequenceRepetition, Delimited};\n+\n+use syntax::ast;\n+use syntax::parse::token::{self, Token};\n+use syntax::print::pprust;\n+use syntax::sess::ParseSess;\n+use syntax::symbol::kw;\n+use syntax::tokenstream;\n \n use syntax_pos::Span;\n ", "previous_filename": "src/libsyntax/ext/mbe/quoted.rs"}, {"sha": "94523bbf91b5ad03212330364f8c8a95c3102135", "filename": "src/libsyntax_expand/mbe/transcribe.rs", "status": "renamed", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,10 +1,11 @@\n-use crate::ast::{Ident, Mac};\n-use crate::ext::base::ExtCtxt;\n-use crate::ext::mbe;\n-use crate::ext::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n-use crate::mut_visit::{self, MutVisitor};\n-use crate::parse::token::{self, NtTT, Token};\n-use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n+use crate::base::ExtCtxt;\n+use crate::mbe;\n+use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n+\n+use syntax::ast::{Ident, Mac};\n+use syntax::mut_visit::{self, MutVisitor};\n+use syntax::parse::token::{self, NtTT, Token};\n+use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};\n ", "previous_filename": "src/libsyntax/ext/mbe/transcribe.rs"}, {"sha": "f2c89e14b53b9fc7f78b4b81bf0e9715b9ccb308", "filename": "src/libsyntax_expand/placeholders.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,11 +1,12 @@\n-use crate::ast::{self, NodeId};\n-use crate::source_map::{DUMMY_SP, dummy_spanned};\n-use crate::ext::base::ExtCtxt;\n-use crate::ext::expand::{AstFragment, AstFragmentKind};\n-use crate::tokenstream::TokenStream;\n-use crate::mut_visit::*;\n-use crate::ptr::P;\n-use crate::ThinVec;\n+use crate::base::ExtCtxt;\n+use crate::expand::{AstFragment, AstFragmentKind};\n+\n+use syntax::ast::{self, NodeId};\n+use syntax::source_map::{DUMMY_SP, dummy_spanned};\n+use syntax::tokenstream::TokenStream;\n+use syntax::mut_visit::*;\n+use syntax::ptr::P;\n+use syntax::ThinVec;\n \n use smallvec::{smallvec, SmallVec};\n ", "previous_filename": "src/libsyntax/ext/placeholders.rs"}, {"sha": "07b618c99a5569d578fa28d81dd851fa2fb054ef", "filename": "src/libsyntax_expand/proc_macro.rs", "status": "renamed", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,22 +1,22 @@\n-use crate::ast::{self, ItemKind, Attribute, Mac};\n-use crate::attr::{mark_used, mark_known};\n-use crate::errors::{Applicability, FatalError};\n-use crate::ext::base::{self, *};\n-use crate::ext::proc_macro_server;\n-use crate::parse::{self, token};\n-use crate::symbol::sym;\n-use crate::tokenstream::{self, TokenStream};\n-use crate::visit::Visitor;\n+use crate::base::{self, *};\n+use crate::proc_macro_server;\n+\n+use syntax::ast::{self, ItemKind, Attribute, Mac};\n+use syntax::attr::{mark_used, mark_known};\n+use syntax::errors::{Applicability, FatalError};\n+use syntax::parse::{self, token};\n+use syntax::symbol::sym;\n+use syntax::tokenstream::{self, TokenStream};\n+use syntax::visit::Visitor;\n \n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{Span, DUMMY_SP};\n \n-const EXEC_STRATEGY: proc_macro::bridge::server::SameThread =\n-    proc_macro::bridge::server::SameThread;\n+const EXEC_STRATEGY: pm::bridge::server::SameThread = pm::bridge::server::SameThread;\n \n pub struct BangProcMacro {\n-    pub client: proc_macro::bridge::client::Client<\n-        fn(proc_macro::TokenStream) -> proc_macro::TokenStream,\n+    pub client: pm::bridge::client::Client<\n+        fn(pm::TokenStream) -> pm::TokenStream,\n     >,\n }\n \n@@ -44,9 +44,7 @@ impl base::ProcMacro for BangProcMacro {\n }\n \n pub struct AttrProcMacro {\n-    pub client: proc_macro::bridge::client::Client<\n-        fn(proc_macro::TokenStream, proc_macro::TokenStream) -> proc_macro::TokenStream,\n-    >,\n+    pub client: pm::bridge::client::Client<fn(pm::TokenStream, pm::TokenStream) -> pm::TokenStream>,\n }\n \n impl base::AttrProcMacro for AttrProcMacro {\n@@ -74,9 +72,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n }\n \n pub struct ProcMacroDerive {\n-    pub client: proc_macro::bridge::client::Client<\n-        fn(proc_macro::TokenStream) -> proc_macro::TokenStream,\n-    >,\n+    pub client: pm::bridge::client::Client<fn(pm::TokenStream) -> pm::TokenStream>,\n }\n \n impl MultiItemModifier for ProcMacroDerive {", "previous_filename": "src/libsyntax/ext/proc_macro.rs"}, {"sha": "4ce99cfe73b5c2f0e74bb21c725921ab6a70e8d1", "filename": "src/libsyntax_expand/proc_macro_server.rs", "status": "renamed", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro_server.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,18 +1,19 @@\n-use crate::ast;\n-use crate::ext::base::ExtCtxt;\n-use crate::parse::{self, token};\n-use crate::parse::lexer::comments;\n-use crate::print::pprust;\n-use crate::sess::ParseSess;\n-use crate::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n+use crate::base::ExtCtxt;\n+\n+use syntax::ast;\n+use syntax::parse::{self, token};\n+use syntax::parse::lexer::comments;\n+use syntax::print::pprust;\n+use syntax::sess::ParseSess;\n+use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n \n use errors::Diagnostic;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n use syntax_pos::symbol::{kw, sym, Symbol};\n \n-use proc_macro::{Delimiter, Level, LineColumn, Spacing};\n-use proc_macro::bridge::{server, TokenTree};\n+use pm::{Delimiter, Level, LineColumn, Spacing};\n+use pm::bridge::{server, TokenTree};\n use std::{ascii, panic};\n use std::ops::Bound;\n \n@@ -51,7 +52,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n {\n     fn from_internal(((tree, is_joint), sess, stack): (TreeAndJoint, &ParseSess, &mut Vec<Self>))\n                     -> Self {\n-        use crate::parse::token::*;\n+        use syntax::parse::token::*;\n \n         let joint = is_joint == Joint;\n         let Token { kind, span } = match tree {\n@@ -192,7 +193,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n \n impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n     fn to_internal(self) -> TokenStream {\n-        use crate::parse::token::*;\n+        use syntax::parse::token::*;\n \n         let (ch, joint, span) = match self {\n             TokenTree::Punct(Punct { ch, joint, span }) => (ch, joint, span),", "previous_filename": "src/libsyntax/ext/proc_macro_server.rs"}, {"sha": "440873f3c2b2d7702ecde2e2f4d855fc0f357dc3", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -17,4 +17,5 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n+syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "8c9a34713ea604f5d2146520c1b50530eae7fbc6", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::thin_vec::ThinVec;\n use errors::DiagnosticBuilder;\n \n use syntax::ast;\n-use syntax::ext::base::{self, *};\n+use syntax_expand::base::{self, *};\n use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};"}, {"sha": "f4d1f7fb09cdf1d1cef8430668c3f10c16cce528", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,7 +1,7 @@\n use errors::{Applicability, DiagnosticBuilder};\n \n use syntax::ast::{self, *};\n-use syntax::ext::base::*;\n+use syntax_expand::base::*;\n use syntax::parse::token::{self, TokenKind};\n use syntax::parse::parser::Parser;\n use syntax::print::pprust;"}, {"sha": "9e693f29c5a3c80b9183364847a0e2c7e85ba90c", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -5,7 +5,7 @@\n use errors::DiagnosticBuilder;\n \n use syntax::ast;\n-use syntax::ext::base::{self, *};\n+use syntax_expand::base::{self, *};\n use syntax::attr;\n use syntax::tokenstream::TokenStream;\n use syntax::parse::token;"}, {"sha": "2d981526a39837374c4a9b917574f64ee3b93a0c", "filename": "src/libsyntax_ext/cmdline_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcmdline_attrs.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -2,9 +2,9 @@\n \n use syntax::ast::{self, AttrItem, AttrStyle};\n use syntax::attr::mk_attr;\n-use syntax::panictry;\n use syntax::parse::{self, token};\n use syntax::sess::ParseSess;\n+use syntax_expand::panictry;\n use syntax_pos::FileName;\n \n pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {"}, {"sha": "cd7f78e9e342d0b329debf93d4f445ed3695b447", "filename": "src/libsyntax_ext/compile_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcompile_error.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,6 +1,6 @@\n // The compiler code necessary to support the compile_error! extension.\n \n-use syntax::ext::base::{self, *};\n+use syntax_expand::base::{self, *};\n use syntax_pos::Span;\n use syntax::tokenstream::TokenStream;\n "}, {"sha": "47bade698a80a0ef207e1ede42d8d93a5be09e58", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,5 +1,5 @@\n use syntax::ast;\n-use syntax::ext::base::{self, DummyResult};\n+use syntax_expand::base::{self, DummyResult};\n use syntax::symbol::Symbol;\n use syntax::tokenstream::TokenStream;\n "}, {"sha": "a132a4136ea01b090b83743c637ad12f82d1945f", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::thin_vec::ThinVec;\n \n use syntax::ast;\n-use syntax::ext::base::{self, *};\n+use syntax_expand::base::{self, *};\n use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n use syntax_pos::Span;"}, {"sha": "6a9b70920242f05150085c3e57d9354b0dfb6ac8", "filename": "src/libsyntax_ext/deriving/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -3,7 +3,7 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::MetaItem;\n-use syntax::ext::base::{Annotatable, ExtCtxt};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax_pos::Span;\n \n pub fn expand_deriving_copy(cx: &mut ExtCtxt<'_>,"}, {"sha": "eb7d480aa9831c5cc33a197385da92371dd27877", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -3,7 +3,7 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, GenericArg, Generics, ItemKind, MetaItem, VariantData};\n-use syntax::ext::base::{Annotatable, ExtCtxt, SpecialDerives};\n+use syntax_expand::base::{Annotatable, ExtCtxt, SpecialDerives};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax_pos::Span;"}, {"sha": "92721dab8782a46b2dd7db4fdbdd82a9ae534966", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -3,7 +3,7 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Ident, Expr, MetaItem, GenericArg};\n-use syntax::ext::base::{Annotatable, ExtCtxt, SpecialDerives};\n+use syntax_expand::base::{Annotatable, ExtCtxt, SpecialDerives};\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n use syntax_pos::Span;"}, {"sha": "3eeed95aff75d3839ae47b19c8509c3e8f6f37bd", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -3,7 +3,7 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, MetaItem};\n-use syntax::ext::base::{Annotatable, ExtCtxt};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::sym;\n use syntax_pos::Span;"}, {"sha": "1615d991792810a45bab862b4b8cc6a6bf3b2988", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -3,7 +3,7 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{BinOpKind, Expr, MetaItem};\n-use syntax::ext::base::{Annotatable, ExtCtxt, SpecialDerives};\n+use syntax_expand::base::{Annotatable, ExtCtxt, SpecialDerives};\n use syntax::ptr::P;\n use syntax::symbol::sym;\n use syntax_pos::Span;"}, {"sha": "af8aacc6eb9bd9a1971a6b106e3ee0390133296d", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -5,7 +5,7 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, BinOpKind, Expr, MetaItem};\n-use syntax::ext::base::{Annotatable, ExtCtxt};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n use syntax_pos::Span;"}, {"sha": "35298211e4d31ce456941654415d49a63a225085", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::thin_vec::ThinVec;\n \n use syntax::ast::{self, Ident};\n use syntax::ast::{Expr, MetaItem};\n-use syntax::ext::base::{Annotatable, ExtCtxt};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, Span};"}, {"sha": "3a0379a0eb02bf35ae8fb4a5e09ff9cb62e59952", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -6,7 +6,7 @@ use crate::deriving::generic::ty::*;\n \n use syntax::ast;\n use syntax::ast::{Expr, MetaItem, Mutability};\n-use syntax::ext::base::{Annotatable, ExtCtxt};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;"}, {"sha": "6176791c31b18b7e59ac829b61c00140e092262b", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -3,7 +3,7 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{Expr, MetaItem};\n-use syntax::ext::base::{Annotatable, DummyResult, ExtCtxt};\n+use syntax_expand::base::{Annotatable, DummyResult, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym};\n use syntax::span_err;"}, {"sha": "2105946b666b231ce2928c1b5b3525507d11155e", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -90,7 +90,7 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{Expr, ExprKind, MetaItem, Mutability};\n-use syntax::ext::base::{Annotatable, ExtCtxt};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;"}, {"sha": "1886a5154b7b6bfc9c1f6384f5ddb9e24dcdfdea", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -186,12 +186,12 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n-use syntax::ext::base::{Annotatable, ExtCtxt, SpecialDerives};\n use syntax::source_map::respan;\n use syntax::util::map_in_place::MapInPlace;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::symbol::{Symbol, kw, sym};\n+use syntax_expand::base::{Annotatable, ExtCtxt, SpecialDerives};\n use syntax_pos::{Span};\n \n use ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};"}, {"sha": "607746597a592abcb79ba1a0d9bad64f6d0c1123", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -5,7 +5,7 @@ pub use PtrTy::*;\n pub use Ty::*;\n \n use syntax::ast::{self, Expr, GenericParamKind, Generics, Ident, SelfKind, GenericArg};\n-use syntax::ext::base::ExtCtxt;\n+use syntax_expand::base::ExtCtxt;\n use syntax::source_map::{respan, DUMMY_SP};\n use syntax::ptr::P;\n use syntax_pos::Span;"}, {"sha": "fe9ef78bb1b004adca41c03329c153f18671f07b", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -3,7 +3,7 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{Expr, MetaItem, Mutability};\n-use syntax::ext::base::{Annotatable, ExtCtxt};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::sym;\n use syntax_pos::Span;"}, {"sha": "f0471a857dc93cacecfcd7a96928ad6580277609", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,7 +1,7 @@\n //! The compiler code necessary to implement the `#[derive]` extensions.\n \n use syntax::ast::{self, MetaItem};\n-use syntax::ext::base::{Annotatable, ExtCtxt, MultiItemModifier};\n+use syntax_expand::base::{Annotatable, ExtCtxt, MultiItemModifier};\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::Span;"}, {"sha": "58fe56bd2353a19419acffcb210b940b8400094c", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -4,7 +4,7 @@\n //\n \n use syntax::ast::{self, Ident, GenericArg};\n-use syntax::ext::base::{self, *};\n+use syntax_expand::base::{self, *};\n use syntax::symbol::{kw, sym, Symbol};\n use syntax_pos::Span;\n use syntax::tokenstream::TokenStream;"}, {"sha": "45d9f79c28fc32d2aa704e101a7f75f78dc47a42", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -8,7 +8,7 @@ use errors::Applicability;\n use errors::pluralise;\n \n use syntax::ast;\n-use syntax::ext::base::{self, *};\n+use syntax_expand::base::{self, *};\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, sym};"}, {"sha": "75dda9535b333c509e3808c7c8eed18e3482f745", "filename": "src/libsyntax_ext/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_allocator.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -2,8 +2,8 @@ use crate::util::check_builtin_macro_attribute;\n \n use syntax::ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafety};\n use syntax::ast::{self, Param, Attribute, Expr, FnHeader, Generics, Ident};\n-use syntax::ext::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n-use syntax::ext::base::{Annotatable, ExtCtxt};\n+use syntax_expand::allocator::{AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n+use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax_pos::Span;"}, {"sha": "879ae1e42153da497bd250c099ca2b8b1bfc642d", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -12,7 +12,7 @@ use errors::DiagnosticBuilder;\n \n use syntax::ast;\n use syntax::source_map::respan;\n-use syntax::ext::base::{self, *};\n+use syntax_expand::base::{self, *};\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax_pos::Span;"}, {"sha": "5516f276422e9144bd335b69b0c53a36ebb920f5", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -15,9 +15,9 @@ use crate::deriving::*;\n \n use syntax::ast::Ident;\n use syntax::edition::Edition;\n-use syntax::ext::base::{SyntaxExtension, SyntaxExtensionKind, MacroExpanderFn};\n-use syntax::ext::proc_macro::BangProcMacro;\n use syntax::symbol::sym;\n+use syntax_expand::base::{Resolver, SyntaxExtension, SyntaxExtensionKind, MacroExpanderFn};\n+use syntax_expand::proc_macro::BangProcMacro;\n \n mod error_codes;\n \n@@ -45,7 +45,7 @@ pub mod proc_macro_harness;\n pub mod standard_library_imports;\n pub mod test_harness;\n \n-pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, edition: Edition) {\n+pub fn register_builtin_macros(resolver: &mut dyn Resolver, edition: Edition) {\n     let mut register = |name, kind| resolver.register_builtin_macro(\n         Ident::with_dummy_span(name), SyntaxExtension {\n             is_builtin: true, ..SyntaxExtension::default(kind, edition)"}, {"sha": "2202375e5e780436d1697aea50284086dc6dcebb", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,4 +1,4 @@\n-use syntax::ext::base;\n+use syntax_expand::base;\n use syntax::print;\n use syntax::tokenstream::TokenStream;\n use syntax_pos;"}, {"sha": "1ca9422eb9dcc364f47d5cd605be55b5ca8787a1", "filename": "src/libsyntax_ext/plugin_macro_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -4,7 +4,7 @@\n use syntax::ast::*;\n use syntax::attr;\n use syntax::edition::Edition;\n-use syntax::ext::base::{Resolver, NamedSyntaxExtension};\n+use syntax_expand::base::{Resolver, NamedSyntaxExtension};\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::source_map::respan;"}, {"sha": "96d0c3fcab1c5cfd0ce6d89113fbd05f2938b43e", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -3,14 +3,14 @@ use std::mem;\n use smallvec::smallvec;\n use syntax::ast::{self, Ident};\n use syntax::attr;\n-use syntax::ext::base::ExtCtxt;\n-use syntax::ext::expand::{AstFragment, ExpansionConfig};\n-use syntax::ext::proc_macro::is_proc_macro_attr;\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n+use syntax_expand::base::{ExtCtxt, Resolver};\n+use syntax_expand::expand::{AstFragment, ExpansionConfig};\n+use syntax_expand::proc_macro::is_proc_macro_attr;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax_pos::hygiene::AstPass;\n \n@@ -46,7 +46,7 @@ struct CollectProcMacros<'a> {\n }\n \n pub fn inject(sess: &ParseSess,\n-              resolver: &mut dyn (::syntax::ext::base::Resolver),\n+              resolver: &mut dyn Resolver,\n               mut krate: ast::Crate,\n               is_proc_macro_crate: bool,\n               has_proc_macro_decls: bool,"}, {"sha": "438e199ebdb8f6574cf67d76918601a3ad4a2174", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,5 +1,6 @@\n-use syntax::{ast, panictry};\n-use syntax::ext::base::{self, *};\n+use syntax_expand::panictry;\n+use syntax_expand::base::{self, *};\n+use syntax::ast;\n use syntax::parse::{self, token, DirectoryOwnership};\n use syntax::print::pprust;\n use syntax::ptr::P;"}, {"sha": "fd27a218906989e0fba5ef20eadab939696a803b", "filename": "src/libsyntax_ext/standard_library_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fstandard_library_imports.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,11 +1,11 @@\n use syntax::{ast, attr};\n use syntax::edition::Edition;\n-use syntax::ext::expand::ExpansionConfig;\n-use syntax::ext::hygiene::AstPass;\n-use syntax::ext::base::{ExtCtxt, Resolver};\n use syntax::ptr::P;\n use syntax::sess::ParseSess;\n use syntax::symbol::{Ident, Symbol, kw, sym};\n+use syntax_expand::expand::ExpansionConfig;\n+use syntax_expand::hygiene::AstPass;\n+use syntax_expand::base::{ExtCtxt, Resolver};\n use syntax_pos::DUMMY_SP;\n \n pub fn inject("}, {"sha": "b0da413d63a049f73f833f749f9357b7c516585f", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -5,7 +5,7 @@ use crate::util::check_builtin_macro_attribute;\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::ext::base::*;\n+use syntax_expand::base::*;\n use syntax::print::pprust;\n use syntax::source_map::respan;\n use syntax::symbol::{Symbol, sym};"}, {"sha": "33d41a7f53e5e25fbb5f152b691887246c012fc8", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -6,8 +6,8 @@ use rustc_target::spec::PanicStrategy;\n use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::entry::{self, EntryPointType};\n-use syntax::ext::base::{ExtCtxt, Resolver};\n-use syntax::ext::expand::{AstFragment, ExpansionConfig};\n+use syntax_expand::base::{ExtCtxt, Resolver};\n+use syntax_expand::expand::{AstFragment, ExpansionConfig};\n use syntax::feature_gate::Features;\n use syntax::mut_visit::{*, ExpectOne};\n use syntax::ptr::P;"}, {"sha": "dbf96d3b561a95ee6493a2d4b7eb468c95e90ef3", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,4 +1,4 @@\n-use syntax::ext::base::{self, ExtCtxt};\n+use syntax_expand::base::{self, ExtCtxt};\n use syntax::symbol::kw;\n use syntax_pos::Span;\n use syntax::tokenstream::{TokenTree, TokenStream};"}, {"sha": "d84fe19b3eab2610dc58e6d30e93c21c147dace9", "filename": "src/libsyntax_ext/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d420d719c4c44c3c6d02b5fafba4f2cf5e837dba/src%2Flibsyntax_ext%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Futil.rs?ref=d420d719c4c44c3c6d02b5fafba4f2cf5e837dba", "patch": "@@ -1,7 +1,7 @@\n use syntax_pos::Symbol;\n use syntax::ast::MetaItem;\n use syntax::attr::{check_builtin_attribute, AttributeTemplate};\n-use syntax::ext::base::ExtCtxt;\n+use syntax_expand::base::ExtCtxt;\n \n pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, name: Symbol) {\n     // All the built-in macro attributes are \"words\" at the moment."}]}