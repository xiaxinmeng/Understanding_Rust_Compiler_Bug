{"sha": "df58fcffbcc2dea6eb31934424ce74b3636c5b68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNThmY2ZmYmNjMmRlYTZlYjMxOTM0NDI0Y2U3NGIzNjM2YzViNjg=", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-14T02:40:03Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-21T08:55:16Z"}, "message": "Fix codegen with explicit allocation byte access", "tree": {"sha": "ce86d76e2a8d386980740bd6015aa976a036c452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce86d76e2a8d386980740bd6015aa976a036c452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df58fcffbcc2dea6eb31934424ce74b3636c5b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df58fcffbcc2dea6eb31934424ce74b3636c5b68", "html_url": "https://github.com/rust-lang/rust/commit/df58fcffbcc2dea6eb31934424ce74b3636c5b68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df58fcffbcc2dea6eb31934424ce74b3636c5b68/comments", "author": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b941e368fac6612eacf3423eac0149ef5ca3bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b941e368fac6612eacf3423eac0149ef5ca3bb3", "html_url": "https://github.com/rust-lang/rust/commit/7b941e368fac6612eacf3423eac0149ef5ca3bb3"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "26eb870cfc0d422ab8e5c99511f42ddc29c97a9c", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/df58fcffbcc2dea6eb31934424ce74b3636c5b68/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df58fcffbcc2dea6eb31934424ce74b3636c5b68/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=df58fcffbcc2dea6eb31934424ce74b3636c5b68", "patch": "@@ -35,11 +35,21 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll\n         assert_eq!(offset as usize as u64, offset);\n         let offset = offset as usize;\n         if offset > next_offset {\n-            llvals.push(cx.const_bytes(&alloc.bytes[next_offset..offset]));\n+            // This `inspect` is okay since we have check that it is not within a relocation, it is\n+            // within the bounds of the allocation, and it doesn't affect interpreter execution (we\n+            // inspect the result after interpreter execution). Any undef byte is replaced with\n+            // some arbitrary byte value.\n+            //\n+            // FIXME: relay undef bytes to codegen as undef const bytes\n+            let bytes = alloc.inspect_with_undef_and_ptr_outside_interpreter(next_offset..offset);\n+            llvals.push(cx.const_bytes(bytes));\n         }\n         let ptr_offset = read_target_uint(\n             dl.endian,\n-            &alloc.bytes[offset..(offset + pointer_size)],\n+            // This `inspect` is okay since it is within the bounds of the allocation, it doesn't\n+            // affect interpreter execution (we inspect the result after interpreter execution),\n+            // and we properly interpret the relocation as a relocation pointer offset.\n+            alloc.inspect_with_undef_and_ptr_outside_interpreter(offset..(offset + pointer_size)),\n         ).expect(\"const_alloc_to_llvm: could not read relocation pointer\") as u64;\n         llvals.push(cx.scalar_to_backend(\n             Pointer::new(alloc_id, Size::from_bytes(ptr_offset)).into(),\n@@ -51,8 +61,16 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll\n         ));\n         next_offset = offset + pointer_size;\n     }\n-    if alloc.bytes.len() >= next_offset {\n-        llvals.push(cx.const_bytes(&alloc.bytes[next_offset ..]));\n+    if alloc.len() >= next_offset {\n+        let range = next_offset..alloc.len();\n+        // This `inspect` is okay since we have check that it is after all relocations, it is\n+        // within the bounds of the allocation, and it doesn't affect interpreter execution (we\n+        // inspect the result after interpreter execution). Any undef byte is replaced with some\n+        // arbitrary byte value.\n+        //\n+        // FIXME: relay undef bytes to codegen as undef const bytes\n+        let bytes = alloc.inspect_with_undef_and_ptr_outside_interpreter(range);\n+        llvals.push(cx.const_bytes(bytes));\n     }\n \n     cx.const_struct(&llvals, true)\n@@ -437,7 +455,23 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                 //\n                 // We could remove this hack whenever we decide to drop macOS 10.10 support.\n                 if self.tcx.sess.target.target.options.is_like_osx {\n-                    let sect_name = if alloc.bytes.iter().all(|b| *b == 0) {\n+                    assert_eq!(alloc.relocations.len(), 0);\n+\n+                    let is_zeroed = {\n+                        // Treats undefined bytes as if they were defined with the byte value that\n+                        // happens to be currently assigned in mir. This is valid since reading\n+                        // undef bytes may yield arbitrary values.\n+                        //\n+                        // FIXME: ignore undef bytes even with representation `!= 0`.\n+                        //\n+                        // The `inspect` method is okay here because we checked relocations, and\n+                        // because we are doing this access to inspect the final interpreter state\n+                        // (not as part of the interpreter execution).\n+                        alloc.inspect_with_undef_and_ptr_outside_interpreter(0..alloc.len())\n+                            .iter()\n+                            .all(|b| *b == 0)\n+                    };\n+                    let sect_name = if is_zeroed {\n                         CStr::from_bytes_with_nul_unchecked(b\"__DATA,__thread_bss\\0\")\n                     } else {\n                         CStr::from_bytes_with_nul_unchecked(b\"__DATA,__thread_data\\0\")\n@@ -456,10 +490,17 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                         section.as_str().as_ptr() as *const _,\n                         section.as_str().len() as c_uint,\n                     );\n+                    assert!(alloc.relocations.is_empty());\n+\n+                    // The `inspect` method is okay here because we checked relocations, and\n+                    // because we are doing this access to inspect the final interpreter state (not\n+                    // as part of the interpreter execution).\n+                    let bytes = alloc.inspect_with_undef_and_ptr_outside_interpreter(\n+                        0..alloc.len());\n                     let alloc = llvm::LLVMMDStringInContext(\n                         self.llcx,\n-                        alloc.bytes.as_ptr() as *const _,\n-                        alloc.bytes.len() as c_uint,\n+                        bytes.as_ptr() as *const _,\n+                        bytes.len() as c_uint,\n                     );\n                     let data = [section, alloc];\n                     let meta = llvm::LLVMMDNodeInContext(self.llcx, data.as_ptr(), 2);"}]}