{"sha": "15a242a432c9c40a60def102209a5d40900b7b9d", "node_id": "C_kwDOAAsO6NoAKDE1YTI0MmE0MzJjOWM0MGE2MGRlZjEwMjIwOWE1ZDQwOTAwYjdiOWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-03T11:16:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-03T11:16:22Z"}, "message": "Auto merge of #90791 - drmorr0:drmorr-memcmp-cint-cfg, r=petrochenkov\n\nmake memcmp return a value of c_int_width instead of i32\n\nThis is an attempt to fix #32610 and #78022, namely, that `memcmp` always returns an `i32` regardless of the platform.  I'm running into some issues and was hoping I could get some help.\n\nHere's what I've been attempting so far:\n\n1. Build the stage0 compiler with all the changes _expect_ for the changes in `library/core/src/slice/cmp.rs` and `compiler/rustc_codegen_llvm/src/context.rs`; this is because `target_c_int_width` isn't passed through and recognized as a valid config option yet.  I'm building with `./x.py build --stage 0 library/core library/proc_macro compiler/rustc`\n2. Next I add in the `#[cfg(c_int_width = ...)]` params to `cmp.rs` and `context.rs` and build the stage 1 compiler by running `./x.py build --keep-stage 0 --stage 1 library/core library/proc_macro compiler/rustc`.  This step now runs successfully.\n3. Lastly, I try to build the test program for AVR mentioned in #78022 with `RUSTFLAGS=\"--emit llvm-ir\" cargo build --release`, and look at the resulting llvm IR, which still shows:\n\n```\n...\n%11 = call addrspace(1) i32 `@memcmp(i8*` nonnull %5, i8* nonnull %10, i16 5) #7, !dbg !1191                                                                                                                                                                                                                                %.not = icmp eq i32 %11, 0, !dbg !1191\n...\n; Function Attrs: nounwind optsize                                                                                                                                                                                                                                                                                          declare i32 `@memcmp(i8*,` i8*, i16) local_unnamed_addr addrspace(1) #4\n```\n\nAny ideas what I'm missing here?  Alternately, if this is totally the wrong approach I'm open to other suggestions.\n\ncc `@Rahix`", "tree": {"sha": "83534ff3fa6a51662677cbd03028184d5caa3dce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83534ff3fa6a51662677cbd03028184d5caa3dce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a242a432c9c40a60def102209a5d40900b7b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a242a432c9c40a60def102209a5d40900b7b9d", "html_url": "https://github.com/rust-lang/rust/commit/15a242a432c9c40a60def102209a5d40900b7b9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a242a432c9c40a60def102209a5d40900b7b9d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec7b753ea91d8a5640388ea74fd231f91394ee9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7b753ea91d8a5640388ea74fd231f91394ee9d", "html_url": "https://github.com/rust-lang/rust/commit/ec7b753ea91d8a5640388ea74fd231f91394ee9d"}, {"sha": "aa670166243e264985f95a21490f92c91addf48c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa670166243e264985f95a21490f92c91addf48c", "html_url": "https://github.com/rust-lang/rust/commit/aa670166243e264985f95a21490f92c91addf48c"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "19127c7612d8f5ad36d2600bd9daf91b48f393c9", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a242a432c9c40a60def102209a5d40900b7b9d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a242a432c9c40a60def102209a5d40900b7b9d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=15a242a432c9c40a60def102209a5d40900b7b9d", "patch": "@@ -91,6 +91,10 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         self.const_uint(self.type_i1(), val as u64)\n     }\n \n+    fn const_i16(&self, i: i16) -> RValue<'gcc> {\n+        self.const_int(self.type_i16(), i as i64)\n+    }\n+\n     fn const_i32(&self, i: i32) -> RValue<'gcc> {\n         self.const_int(self.type_i32(), i as i64)\n     }"}, {"sha": "a85b2e6141b55af0cb1453e152bfec88c44a5166", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a242a432c9c40a60def102209a5d40900b7b9d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a242a432c9c40a60def102209a5d40900b7b9d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=15a242a432c9c40a60def102209a5d40900b7b9d", "patch": "@@ -147,6 +147,10 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         self.const_uint(self.type_i1(), val as u64)\n     }\n \n+    fn const_i16(&self, i: i16) -> &'ll Value {\n+        self.const_int(self.type_i16(), i as i64)\n+    }\n+\n     fn const_i32(&self, i: i32) -> &'ll Value {\n         self.const_int(self.type_i32(), i as i64)\n     }"}, {"sha": "712431ca9ae951b048fee3fc5490139665f1c752", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15a242a432c9c40a60def102209a5d40900b7b9d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a242a432c9c40a60def102209a5d40900b7b9d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=15a242a432c9c40a60def102209a5d40900b7b9d", "patch": "@@ -859,7 +859,10 @@ impl<'ll> CodegenCx<'ll, '_> {\n \n         // This isn't an \"LLVM intrinsic\", but LLVM's optimization passes\n         // recognize it like one and we assume it exists in `core::slice::cmp`\n-        ifn!(\"memcmp\", fn(i8p, i8p, t_isize) -> t_i32);\n+        match self.sess().target.arch.as_str() {\n+            \"avr\" | \"msp430\" => ifn!(\"memcmp\", fn(i8p, i8p, t_isize) -> t_i16),\n+            _ => ifn!(\"memcmp\", fn(i8p, i8p, t_isize) -> t_i32),\n+        }\n \n         // variadic intrinsics\n         ifn!(\"llvm.va_start\", fn(i8p) -> void);"}, {"sha": "fe149b4c8c2ff677ee3fd3f6491080e5131fbbe4", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15a242a432c9c40a60def102209a5d40900b7b9d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a242a432c9c40a60def102209a5d40900b7b9d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=15a242a432c9c40a60def102209a5d40900b7b9d", "patch": "@@ -329,7 +329,10 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                     let b_ptr = self.bitcast(b, i8p_ty);\n                     let n = self.const_usize(layout.size().bytes());\n                     let cmp = self.call_intrinsic(\"memcmp\", &[a_ptr, b_ptr, n]);\n-                    self.icmp(IntPredicate::IntEQ, cmp, self.const_i32(0))\n+                    match self.cx.sess().target.arch.as_str() {\n+                        \"avr\" | \"msp430\" => self.icmp(IntPredicate::IntEQ, cmp, self.const_i16(0)),\n+                        _ => self.icmp(IntPredicate::IntEQ, cmp, self.const_i32(0)),\n+                    }\n                 }\n             }\n "}, {"sha": "c3519a24d5325069d537f585b088617dd55b1a21", "filename": "compiler/rustc_codegen_ssa/src/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15a242a432c9c40a60def102209a5d40900b7b9d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a242a432c9c40a60def102209a5d40900b7b9d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs?ref=15a242a432c9c40a60def102209a5d40900b7b9d", "patch": "@@ -13,6 +13,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_uint(&self, t: Self::Type, i: u64) -> Self::Value;\n     fn const_uint_big(&self, t: Self::Type, u: u128) -> Self::Value;\n     fn const_bool(&self, val: bool) -> Self::Value;\n+    fn const_i16(&self, i: i16) -> Self::Value;\n     fn const_i32(&self, i: i32) -> Self::Value;\n     fn const_u32(&self, i: u32) -> Self::Value;\n     fn const_u64(&self, i: u64) -> Self::Value;"}, {"sha": "e61ea9ce87f5591a23a662bbec6e119ccd5741a4", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15a242a432c9c40a60def102209a5d40900b7b9d/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a242a432c9c40a60def102209a5d40900b7b9d/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=15a242a432c9c40a60def102209a5d40900b7b9d", "patch": "@@ -57,6 +57,9 @@ type_alias! { \"c_schar.md\", c_schar = i8, NonZero_c_schar = NonZeroI8; }\n type_alias! { \"c_uchar.md\", c_uchar = u8, NonZero_c_uchar = NonZeroU8; }\n type_alias! { \"c_short.md\", c_short = i16, NonZero_c_short = NonZeroI16; }\n type_alias! { \"c_ushort.md\", c_ushort = u16, NonZero_c_ushort = NonZeroU16; }\n+#[cfg(any(target_arch = \"avr\", target_arch = \"msp430\"))]\n+type_alias! { \"c_int.md\", c_int = i16, NonZero_c_int = NonZeroI16; }\n+#[cfg(not(any(target_arch = \"avr\", target_arch = \"msp430\")))]\n type_alias! { \"c_int.md\", c_int = i32, NonZero_c_int = NonZeroI32; }\n type_alias! { \"c_uint.md\", c_uint = u32, NonZero_c_uint = NonZeroU32; }\n type_alias! { \"c_long.md\", c_long = i32, NonZero_c_long = NonZeroI32;"}, {"sha": "5e1b218e507bd1c23d3a59c1eb95db4ab518af3d", "filename": "library/core/src/slice/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a242a432c9c40a60def102209a5d40900b7b9d/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a242a432c9c40a60def102209a5d40900b7b9d/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs?ref=15a242a432c9c40a60def102209a5d40900b7b9d", "patch": "@@ -1,6 +1,7 @@\n //! Comparison traits for `[T]`.\n \n use crate::cmp::{self, Ordering};\n+use crate::ffi;\n use crate::mem;\n \n use super::from_raw_parts;\n@@ -13,8 +14,7 @@ extern \"C\" {\n     ///\n     /// Returns 0 for equal, < 0 for less than and > 0 for greater\n     /// than.\n-    // FIXME(#32610): Return type should be c_int\n-    fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32;\n+    fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> ffi::c_int;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}