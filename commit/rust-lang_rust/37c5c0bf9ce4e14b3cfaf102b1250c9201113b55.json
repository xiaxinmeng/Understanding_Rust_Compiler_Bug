{"sha": "37c5c0bf9ce4e14b3cfaf102b1250c9201113b55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YzVjMGJmOWNlNGUxNGIzY2ZhZjEwMmIxMjUwYzkyMDExMTNiNTU=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-07-09T19:20:26Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-07-09T19:20:26Z"}, "message": "Change wording", "tree": {"sha": "dbb709b67c558b808ba5724d6b0ce334194fb430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbb709b67c558b808ba5724d6b0ce334194fb430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37c5c0bf9ce4e14b3cfaf102b1250c9201113b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37c5c0bf9ce4e14b3cfaf102b1250c9201113b55", "html_url": "https://github.com/rust-lang/rust/commit/37c5c0bf9ce4e14b3cfaf102b1250c9201113b55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37c5c0bf9ce4e14b3cfaf102b1250c9201113b55/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1", "html_url": "https://github.com/rust-lang/rust/commit/f5f97b37a7c9492e8b5e6252cce63c4ec7b3abf1"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "cf61258577619e90dcf643ecc44c7e13dfa75cac", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/37c5c0bf9ce4e14b3cfaf102b1250c9201113b55/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c5c0bf9ce4e14b3cfaf102b1250c9201113b55/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=37c5c0bf9ce4e14b3cfaf102b1250c9201113b55", "patch": "@@ -114,15 +114,16 @@ impl<'tcx> Lower<PolyDomainGoal<'tcx>> for ty::Predicate<'tcx> {\n     }\n }\n \n-/// Used for lowered where clauses (see rustc guide).\n+/// Used for implied bounds related rules (see rustc guide).\n trait IntoFromEnvGoal {\n-    // Transforms an existing goal into a FromEnv goal.\n+    /// Transforms an existing goal into a `FromEnv` goal.\n     fn into_from_env_goal(self) -> Self;\n }\n \n+/// Used for well-formedness related rules (see rustc guide).\n trait IntoWellFormedGoal {\n-    // Transforms an existing goal into a WellFormed goal.\n-    fn into_wellformed_goal(self) -> Self;\n+    /// Transforms an existing goal into a `WellFormed` goal.\n+    fn into_well_formed_goal(self) -> Self;\n }\n \n impl<'tcx> IntoFromEnvGoal for DomainGoal<'tcx> {\n@@ -139,7 +140,7 @@ impl<'tcx> IntoFromEnvGoal for DomainGoal<'tcx> {\n }\n \n impl<'tcx> IntoWellFormedGoal for DomainGoal<'tcx> {\n-    fn into_wellformed_goal(self) -> DomainGoal<'tcx> {\n+    fn into_well_formed_goal(self) -> DomainGoal<'tcx> {\n         use self::WhereClause::*;\n \n         match self {\n@@ -284,34 +285,35 @@ fn program_clauses_for_trait<'a, 'tcx>(\n \n     // Rule WellFormed-TraitRef\n     //\n-    // For each where clause WC:\n+    // Here `WC` denotes the set of all where clauses:\n+    // ```\n     // forall<Self, P1..Pn> {\n     //   WellFormed(Self: Trait<P1..Pn>) :- Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n     // }\n+    // ```\n \n-    //Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n-    let mut extend_where_clauses = vec![ty::Binder::dummy(trait_pred.lower())];\n-    extend_where_clauses.extend(\n-        where_clauses\n-            .into_iter()\n-            .map(|wc| wc.lower().map_bound(|wc| wc.into_wellformed_goal())),\n-    );\n+    // `Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)`\n+    let wf_conditions = iter::once(ty::Binder::dummy(trait_pred.lower()))\n+        .chain(\n+            where_clauses\n+                .into_iter()\n+                .map(|wc| wc.lower())\n+                .map(|wc| wc.map_bound(|goal| goal.into_well_formed_goal()))\n+        );\n \n-    // WellFormed(Self: Trait<P1..Pn>) :- Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n-    let clause = ProgramClause {\n+    // `WellFormed(Self: Trait<P1..Pn>) :- Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)`\n+    let wf_clause = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Trait(trait_pred)),\n         hypotheses: tcx.mk_goals(\n-            extend_where_clauses\n-                .into_iter()\n-                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+            wf_conditions.map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n         ),\n     };\n-    let wellformed_clauses = iter::once(Clause::ForAll(ty::Binder::dummy(clause)));\n+    let wf_clause = iter::once(Clause::ForAll(ty::Binder::dummy(wf_clause)));\n \n     tcx.mk_clauses(\n         clauses\n             .chain(implied_bound_clauses)\n-            .chain(wellformed_clauses),\n+            .chain(wf_clause)\n     )\n }\n "}]}