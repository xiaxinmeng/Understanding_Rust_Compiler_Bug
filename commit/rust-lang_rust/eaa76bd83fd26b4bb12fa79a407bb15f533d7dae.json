{"sha": "eaa76bd83fd26b4bb12fa79a407bb15f533d7dae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYTc2YmQ4M2ZkMjZiNGJiMTJmYTc5YTQwN2JiMTVmNTMzZDdkYWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-10T01:38:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-10T01:38:57Z"}, "message": "rustc: Decouple new_fn_ctxt() from AST function arguments, so that it can be used to generate glue", "tree": {"sha": "72af431a79c0bc33a01dd49916480fe76b342eea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72af431a79c0bc33a01dd49916480fe76b342eea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaa76bd83fd26b4bb12fa79a407bb15f533d7dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa76bd83fd26b4bb12fa79a407bb15f533d7dae", "html_url": "https://github.com/rust-lang/rust/commit/eaa76bd83fd26b4bb12fa79a407bb15f533d7dae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaa76bd83fd26b4bb12fa79a407bb15f533d7dae/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e1046a5087f01a49e63a91f85ff22cc011848c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1046a5087f01a49e63a91f85ff22cc011848c4", "html_url": "https://github.com/rust-lang/rust/commit/4e1046a5087f01a49e63a91f85ff22cc011848c4"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "33b8bc5ffe73a2a06a78458fa20e9a11f77d8b82", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eaa76bd83fd26b4bb12fa79a407bb15f533d7dae/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa76bd83fd26b4bb12fa79a407bb15f533d7dae/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=eaa76bd83fd26b4bb12fa79a407bb15f533d7dae", "patch": "@@ -1814,22 +1814,13 @@ impure fn trans_block(@block_ctxt cx, &ast.block b) -> result {\n \n fn new_fn_ctxt(@crate_ctxt cx,\n                str name,\n-               vec[ast.arg] args,\n                ValueRef llfndecl) -> @fn_ctxt {\n \n     let ValueRef lltaskptr = llvm.LLVMGetParam(llfndecl, 0u);\n-    let uint arg_n = 1u;\n \n     let hashmap[ast.def_id, ValueRef] lllocals = new_def_hash[ValueRef]();\n     let hashmap[ast.def_id, ValueRef] llargs = new_def_hash[ValueRef]();\n \n-    for (ast.arg arg in args) {\n-        auto llarg = llvm.LLVMGetParam(llfndecl, arg_n);\n-        check (llarg as int != 0);\n-        llargs.insert(arg.id, llarg);\n-        arg_n += 1u;\n-    }\n-\n     ret @rec(llfn=llfndecl,\n              lltaskptr=lltaskptr,\n              llargs=llargs,\n@@ -1838,6 +1829,17 @@ fn new_fn_ctxt(@crate_ctxt cx,\n }\n \n \n+fn create_llargs_for_fn_args(@fn_ctxt cx, vec[ast.arg] args) {\n+    let uint arg_n = 1u;\n+    for (ast.arg arg in args) {\n+        auto llarg = llvm.LLVMGetParam(cx.llfn, arg_n);\n+        check (llarg as int != 0);\n+        cx.llargs.insert(arg.id, llarg);\n+        arg_n += 1u;\n+    }\n+}\n+\n+\n // Recommended LLVM style, strange though this is, is to copy from args to\n // allocas immediately upon entry; this permits us to GEP into structures we\n // were passed and whatnot. Apparently mem2reg will mop up.\n@@ -1881,7 +1883,9 @@ impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n     auto llfndecl = cx.item_ids.get(fid);\n     cx.item_names.insert(cx.path, llfndecl);\n \n-    auto fcx = new_fn_ctxt(cx, cx.path, f.inputs, llfndecl);\n+    auto fcx = new_fn_ctxt(cx, cx.path, llfndecl);\n+    create_llargs_for_fn_args(fcx, f.inputs);\n+\n     auto bcx = new_top_block_ctxt(fcx);\n \n     copy_args_to_allocas(bcx, f.inputs, arg_tys_of_fn(ann));\n@@ -1920,7 +1924,9 @@ fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n     let ValueRef llfndecl = cx.item_ids.get(variant.id);\n     cx.item_names.insert(cx.path, llfndecl);\n \n-    auto fcx = new_fn_ctxt(cx, cx.path, fn_args, llfndecl);\n+    auto fcx = new_fn_ctxt(cx, cx.path, llfndecl);\n+    create_llargs_for_fn_args(fcx, fn_args);\n+\n     auto bcx = new_top_block_ctxt(fcx);\n \n     auto arg_tys = arg_tys_of_fn(variant.ann);"}]}