{"sha": "c6d95657ee1996acb67468e465ac26722b3bf328", "node_id": "C_kwDOAAsO6NoAKGM2ZDk1NjU3ZWUxOTk2YWNiNjc0NjhlNDY1YWMyNjcyMmIzYmYzMjg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-28T16:30:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-28T16:30:07Z"}, "message": "Merge #10305\n\n10305: Move `GenericParams`'s handling of `impl Trait` into `fn_data_query` r=flodiebold a=SkiFire13\n\nFixes #10286\n\nCo-authored-by: Giacomo Stevanato <giaco.stevanato@gmail.com>", "tree": {"sha": "fa29c717b8dbd4f571f8dbd8261a85a0a7130188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa29c717b8dbd4f571f8dbd8261a85a0a7130188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6d95657ee1996acb67468e465ac26722b3bf328", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhU0MPCRBK7hj4Ov3rIwAAEbIIAAsMEV/FycuWSIXYa13nQ9Zw\nkuyCMTfgPyd8jFefMupzj7XlSo0fzZ1H8J/G4lsaw0HS2LmDQlF1HsATxp6XTFPM\nml08elfSbix+zIeXlbsU84bbAgFoAHlnNxkouOj+sWpB4Bz+iNxk2LIY68e+ibtb\nR1tFgqWMm4KViQ7C7PsC2OXREEamXKMqeklAjDKBtzQvlFsTxJx92JCQLmndqn1e\nWLdW+zp/Qn7/G+jZaBvu2ta0eGob6urqUAqxTQFBnQfJ0zdnbZOm4algPNd53PMD\n4dF1PvxNLY3HdlaSjE+IyXOKxwn/XwwFKqL320SilP0foG9GA/MpmJ91yMV3FXY=\n=0SAT\n-----END PGP SIGNATURE-----\n", "payload": "tree fa29c717b8dbd4f571f8dbd8261a85a0a7130188\nparent dd21ad6a5e8ffa166c97447212d3da0f86555aee\nparent 49ba313679a1f7046fe183fd270e8f31ca3dc217\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632846607 +0000\ncommitter GitHub <noreply@github.com> 1632846607 +0000\n\nMerge #10305\n\n10305: Move `GenericParams`'s handling of `impl Trait` into `fn_data_query` r=flodiebold a=SkiFire13\n\nFixes #10286\n\nCo-authored-by: Giacomo Stevanato <giaco.stevanato@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6d95657ee1996acb67468e465ac26722b3bf328", "html_url": "https://github.com/rust-lang/rust/commit/c6d95657ee1996acb67468e465ac26722b3bf328", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6d95657ee1996acb67468e465ac26722b3bf328/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd21ad6a5e8ffa166c97447212d3da0f86555aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd21ad6a5e8ffa166c97447212d3da0f86555aee", "html_url": "https://github.com/rust-lang/rust/commit/dd21ad6a5e8ffa166c97447212d3da0f86555aee"}, {"sha": "49ba313679a1f7046fe183fd270e8f31ca3dc217", "url": "https://api.github.com/repos/rust-lang/rust/commits/49ba313679a1f7046fe183fd270e8f31ca3dc217", "html_url": "https://github.com/rust-lang/rust/commit/49ba313679a1f7046fe183fd270e8f31ca3dc217"}], "stats": {"total": 101, "additions": 73, "deletions": 28}, "files": [{"sha": "8c5313fa458c9c478b16150e9b60378b9b45a128", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=c6d95657ee1996acb67468e465ac26722b3bf328", "patch": "@@ -7,22 +7,24 @@ use base_db::FileId;\n use either::Either;\n use hir_expand::{\n     name::{AsName, Name},\n-    HirFileId, InFile,\n+    ExpandResult, HirFileId, InFile,\n };\n use la_arena::{Arena, ArenaMap};\n+use once_cell::unsync::Lazy;\n+use std::ops::DerefMut;\n use syntax::ast::{self, HasGenericParams, HasName, HasTypeBounds};\n \n use crate::{\n-    body::LowerCtx,\n+    body::{Expander, LowerCtx},\n     child_by_source::ChildBySource,\n     db::DefDatabase,\n     dyn_map::DynMap,\n     intern::Interned,\n     keys,\n     src::{HasChildSource, HasSource},\n     type_ref::{LifetimeRef, TypeBound, TypeRef},\n-    AdtId, ConstParamId, GenericDefId, LifetimeParamId, LocalConstParamId, LocalLifetimeParamId,\n-    LocalTypeParamId, Lookup, TypeParamId,\n+    AdtId, ConstParamId, GenericDefId, HasModule, LifetimeParamId, LocalConstParamId,\n+    LocalLifetimeParamId, LocalTypeParamId, Lookup, TypeParamId,\n };\n \n /// Data about a generic type parameter (to a function, struct, impl, ...).\n@@ -99,10 +101,23 @@ impl GenericParams {\n \n         match def {\n             GenericDefId::FunctionId(id) => {\n-                let id = id.lookup(db).id;\n-                let tree = id.item_tree(db);\n-                let item = &tree[id.value];\n-                item.generic_params.clone()\n+                let loc = id.lookup(db);\n+                let tree = loc.id.item_tree(db);\n+                let item = &tree[loc.id.value];\n+\n+                let mut generic_params = GenericParams::clone(&item.explicit_generic_params);\n+\n+                let module = loc.container.module(db);\n+                let func_data = db.function_data(id);\n+\n+                // Don't create an `Expander` nor call `loc.source(db)` if not needed since this\n+                // causes a reparse after the `ItemTree` has been created.\n+                let mut expander = Lazy::new(|| Expander::new(db, loc.source(db).file_id, module));\n+                for param in &func_data.params {\n+                    generic_params.fill_implicit_impl_trait_args(db, &mut expander, param);\n+                }\n+\n+                Interned::new(generic_params)\n             }\n             GenericDefId::AdtId(AdtId::StructId(id)) => {\n                 let id = id.lookup(db).id;\n@@ -259,7 +274,12 @@ impl GenericParams {\n         self.where_predicates.push(predicate);\n     }\n \n-    pub(crate) fn fill_implicit_impl_trait_args(&mut self, type_ref: &TypeRef) {\n+    pub(crate) fn fill_implicit_impl_trait_args(\n+        &mut self,\n+        db: &dyn DefDatabase,\n+        expander: &mut impl DerefMut<Target = Expander>,\n+        type_ref: &TypeRef,\n+    ) {\n         type_ref.walk(&mut |type_ref| {\n             if let TypeRef::ImplTrait(bounds) = type_ref {\n                 let param = TypeParamData {\n@@ -275,6 +295,18 @@ impl GenericParams {\n                     });\n                 }\n             }\n+            if let TypeRef::Macro(mc) = type_ref {\n+                let macro_call = mc.to_node(db.upcast());\n+                match expander.enter_expand::<ast::Type>(db, macro_call) {\n+                    Ok(ExpandResult { value: Some((mark, expanded)), .. }) => {\n+                        let ctx = LowerCtx::new(db, mc.file_id);\n+                        let type_ref = TypeRef::from_ast(&ctx, expanded);\n+                        self.fill_implicit_impl_trait_args(db, expander, &type_ref);\n+                        expander.exit(db, mark);\n+                    }\n+                    _ => {}\n+                }\n+            }\n         });\n     }\n "}, {"sha": "3900e7e97cc8d45cfd864b859ebd5f76f700239d", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=c6d95657ee1996acb67468e465ac26722b3bf328", "patch": "@@ -605,7 +605,7 @@ pub struct ExternBlock {\n pub struct Function {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n-    pub generic_params: Interned<GenericParams>,\n+    pub explicit_generic_params: Interned<GenericParams>,\n     pub abi: Option<Interned<str>>,\n     pub params: IdRange<Param>,\n     pub ret_type: Interned<TypeRef>,"}, {"sha": "9c278f5ac6b9203e4761bdf9fe263a036c639380", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c6d95657ee1996acb67468e465ac26722b3bf328", "patch": "@@ -401,15 +401,16 @@ impl<'a> Ctx<'a> {\n         let mut res = Function {\n             name,\n             visibility,\n-            generic_params: Interned::new(GenericParams::default()),\n+            explicit_generic_params: Interned::new(GenericParams::default()),\n             abi,\n             params,\n             ret_type: Interned::new(ret_type),\n             async_ret_type: async_ret_type.map(Interned::new),\n             ast_id,\n             flags,\n         };\n-        res.generic_params = self.lower_generic_params(GenericsOwner::Function(&res), func);\n+        res.explicit_generic_params =\n+            self.lower_generic_params(GenericsOwner::Function(&res), func);\n \n         Some(id(self.data().functions.alloc(res)))\n     }\n@@ -664,16 +665,8 @@ impl<'a> Ctx<'a> {\n     ) -> Interned<GenericParams> {\n         let mut generics = GenericParams::default();\n         match owner {\n-            GenericsOwner::Function(func) => {\n-                generics.fill(&self.body_ctx, node);\n-                // lower `impl Trait` in arguments\n-                for id in func.params.clone() {\n-                    if let Param::Normal(ty) = &self.data().params[id] {\n-                        generics.fill_implicit_impl_trait_args(ty);\n-                    }\n-                }\n-            }\n-            GenericsOwner::Struct\n+            GenericsOwner::Function(_)\n+            | GenericsOwner::Struct\n             | GenericsOwner::Enum\n             | GenericsOwner::Union\n             | GenericsOwner::TypeAlias => {"}, {"sha": "49dc1eef18b6ced74d990f6aa2aa71dd9e3ac096", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=c6d95657ee1996acb67468e465ac26722b3bf328", "patch": "@@ -234,7 +234,7 @@ impl<'a> Printer<'a> {\n                 let Function {\n                     name,\n                     visibility,\n-                    generic_params,\n+                    explicit_generic_params,\n                     abi,\n                     params,\n                     ret_type,\n@@ -250,7 +250,7 @@ impl<'a> Printer<'a> {\n                     w!(self, \"extern \\\"{}\\\" \", abi);\n                 }\n                 w!(self, \"fn {}\", name);\n-                self.print_generic_params(generic_params);\n+                self.print_generic_params(explicit_generic_params);\n                 w!(self, \"(\");\n                 if !params.is_empty() {\n                     self.indented(|this| {\n@@ -271,7 +271,7 @@ impl<'a> Printer<'a> {\n                 }\n                 w!(self, \") -> \");\n                 self.print_type_ref(ret_type);\n-                self.print_where_clause(generic_params);\n+                self.print_where_clause(explicit_generic_params);\n                 wln!(self, \";\");\n             }\n             ModItem::Struct(it) => {"}, {"sha": "7671ccefd1714b3e4790e344836d381b2d0ad395", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=c6d95657ee1996acb67468e465ac26722b3bf328", "patch": "@@ -340,12 +340,11 @@ trait Tr<'a, T: 'a>: Super where Self: for<'a> Tr<'a, T> {}\n                 T: 'b\n             {\n                 // flags = 0x2\n-                pub(self) fn f<G, _anon_1>(\n+                pub(self) fn f<G>(\n                     _: impl Copy,\n                 ) -> impl Copy\n                 where\n-                    G: 'a,\n-                    _anon_1: Copy;\n+                    G: 'a;\n             }\n \n             pub(self) enum Enum<'a, T, const U: u8> {"}, {"sha": "2f38d584a120f1dfb7bfa6ea82732e126fed6516", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d95657ee1996acb67468e465ac26722b3bf328/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=c6d95657ee1996acb67468e465ac26722b3bf328", "patch": "@@ -1177,3 +1177,24 @@ fn multiexp_inner() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn macro_expands_to_impl_trait() {\n+    check_no_mismatches(\n+        r#\"\n+trait Foo {}\n+\n+macro_rules! ty {\n+    () => {\n+        impl Foo\n+    }\n+}\n+\n+fn foo(_: ty!()) {}\n+\n+fn bar() {\n+    foo(());\n+}\n+    \"#,\n+    )\n+}"}]}