{"sha": "242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MjYwNmM3OTMzOWUyZDJlM2NmMTVjYzhmMDJiZDZlYmMwYjhjNDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-12T08:56:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-14T16:29:12Z"}, "message": "Clean up various warnings throughout the codebase", "tree": {"sha": "4ed810d1b7b61d547b852cb449fe50408efdd213", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ed810d1b7b61d547b852cb449fe50408efdd213"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44", "html_url": "https://github.com/rust-lang/rust/commit/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23fbe936bfa28fc2c16ec5e321cbe293ef044c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/23fbe936bfa28fc2c16ec5e321cbe293ef044c0a", "html_url": "https://github.com/rust-lang/rust/commit/23fbe936bfa28fc2c16ec5e321cbe293ef044c0a"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "6d3f5d50b4b7f8f55de4f0bf3559e2906d163e85", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44", "patch": "@@ -1428,7 +1428,7 @@ pub fn with_scope(bcx: block,\n \n pub fn with_scope_result(bcx: block,\n                          opt_node_info: Option<NodeInfo>,\n-                         name: &str,\n+                         _name: &str,\n                          f: &fn(block) -> Result) -> Result {\n     let _icx = push_ctxt(\"with_scope_result\");\n "}, {"sha": "42f6a4dad6b74b3779831eb265b259721e86b04e", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44", "patch": "@@ -197,7 +197,7 @@ fn get_impl_resolutions(bcx: block,\n                         impl_id: ast::def_id)\n                          -> typeck::vtable_res {\n     if impl_id.crate == ast::local_crate {\n-        *bcx.ccx().maps.vtable_map.get(&impl_id.node)\n+        bcx.ccx().maps.vtable_map.get_copy(&impl_id.node)\n     } else {\n         // XXX: This is a temporary hack to work around not properly\n         // exporting information about resolutions for impls.\n@@ -670,15 +670,13 @@ pub fn trans_call_inner(in_cx: block,\n             None => { assert!(ty::type_is_immediate(bcx.tcx(), ret_ty)) }\n             Some(expr::Ignore) => {\n                 // drop the value if it is not being saved.\n-                unsafe {\n-                    if ty::type_needs_drop(bcx.tcx(), ret_ty) {\n-                        if ty::type_is_immediate(bcx.tcx(), ret_ty) {\n-                            let llscratchptr = alloc_ty(bcx, ret_ty, \"__ret\");\n-                            Store(bcx, llresult, llscratchptr);\n-                            bcx = glue::drop_ty(bcx, llscratchptr, ret_ty);\n-                        } else {\n-                            bcx = glue::drop_ty(bcx, llretslot, ret_ty);\n-                        }\n+                if ty::type_needs_drop(bcx.tcx(), ret_ty) {\n+                    if ty::type_is_immediate(bcx.tcx(), ret_ty) {\n+                        let llscratchptr = alloc_ty(bcx, ret_ty, \"__ret\");\n+                        Store(bcx, llresult, llscratchptr);\n+                        bcx = glue::drop_ty(bcx, llscratchptr, ret_ty);\n+                    } else {\n+                        bcx = glue::drop_ty(bcx, llretslot, ret_ty);\n                     }\n                 }\n             }"}, {"sha": "e03a6e7c167cc4289eadeaf80856e96ead9c6ed3", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44", "patch": "@@ -254,7 +254,7 @@ pub fn trans_break_cont(bcx: block,\n     // Locate closest loop block, outputting cleanup as we go.\n     let mut unwind = bcx;\n     let mut cur_scope = unwind.scope;\n-    let mut target = unwind;\n+    let mut target;\n     loop {\n         cur_scope = match cur_scope {\n             Some(@scope_info {"}, {"sha": "8e23f5431bcee63cc27218784981d6085dba4f40", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44", "patch": "@@ -3621,25 +3621,29 @@ pub fn trait_method_def_ids(cx: ctxt, id: ast::def_id) -> @~[def_id] {\n }\n \n pub fn impl_trait_ref(cx: ctxt, id: ast::def_id) -> Option<@TraitRef> {\n-    *do cx.impl_trait_cache.find_or_insert_with(id) |_| {\n-        if id.crate == ast::local_crate {\n-            debug!(\"(impl_trait_ref) searching for trait impl %?\", id);\n-            match cx.items.find(&id.node) {\n-                Some(&ast_map::node_item(@ast::item {\n-                                         node: ast::item_impl(_, ref opt_trait, _, _),\n-                                         _},\n-                                         _)) => {\n-                    match opt_trait {\n-                        &Some(ref t) => Some(ty::node_id_to_trait_ref(cx, t.ref_id)),\n-                        &None => None\n-                    }\n+    match cx.impl_trait_cache.find(&id) {\n+        Some(&ret) => { return ret; }\n+        None => {}\n+    }\n+    let ret = if id.crate == ast::local_crate {\n+        debug!(\"(impl_trait_ref) searching for trait impl %?\", id);\n+        match cx.items.find(&id.node) {\n+            Some(&ast_map::node_item(@ast::item {\n+                                     node: ast::item_impl(_, ref opt_trait, _, _),\n+                                     _},\n+                                     _)) => {\n+                match opt_trait {\n+                    &Some(ref t) => Some(ty::node_id_to_trait_ref(cx, t.ref_id)),\n+                    &None => None\n                 }\n-                _ => None\n             }\n-        } else {\n-            csearch::get_impl_trait(cx, id)\n+            _ => None\n         }\n-    }\n+    } else {\n+        csearch::get_impl_trait(cx, id)\n+    };\n+    cx.impl_trait_cache.insert(id, ret);\n+    return ret;\n }\n \n pub fn ty_to_def_id(ty: t) -> Option<ast::def_id> {"}, {"sha": "b8b8ab3145d54fb2a1eac141f034a8989016fd56", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44", "patch": "@@ -303,7 +303,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n     let tcx = ccx.tcx;\n     let main_t = ty::node_id_to_type(tcx, main_id);\n     match ty::get(main_t).sty {\n-        ty::ty_bare_fn(ref fn_ty) => {\n+        ty::ty_bare_fn(*) => {\n             match tcx.items.find(&main_id) {\n                 Some(&ast_map::node_item(it,_)) => {\n                     match it.node {"}, {"sha": "5866b8a5af55d51f563a29c461b4c9133cbfa15e", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=242606c79339e2d2e3cf15cc8f02bd6ebc0b8c44", "patch": "@@ -144,7 +144,8 @@ pub struct protocol_ {\n impl protocol_ {\n     /// Get a state.\n     pub fn get_state(&self, name: &str) -> state {\n-        *self.states.iter().find_(|i| name == i.name).get()\n+        let mut i = self.states.iter();\n+        *i.find_(|i| name == i.name).get()\n     }\n \n     pub fn get_state_by_id(&self, id: uint) -> state { self.states[id] }"}]}