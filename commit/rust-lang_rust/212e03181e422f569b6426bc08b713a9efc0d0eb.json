{"sha": "212e03181e422f569b6426bc08b713a9efc0d0eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMmUwMzE4MWU0MjJmNTY5YjY0MjZiYzA4YjcxM2E5ZWZjMGQwZWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-17T20:33:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-21T03:07:19Z"}, "message": "std: Remove old_io/old_path from the prelude\n\nThis commit removes the reexports of `old_io` traits as well as `old_path` types\nand traits from the prelude. This functionality is now all deprecated and needs\nto be removed to make way for other functionality like `Seek` in the `std::io`\nmodule (currently reexported as `NewSeek` in the io prelude).\n\nCloses #23377\nCloses #23378", "tree": {"sha": "4ab0963cf9b9a231d092636782703117c8c3fc6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ab0963cf9b9a231d092636782703117c8c3fc6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/212e03181e422f569b6426bc08b713a9efc0d0eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/212e03181e422f569b6426bc08b713a9efc0d0eb", "html_url": "https://github.com/rust-lang/rust/commit/212e03181e422f569b6426bc08b713a9efc0d0eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/212e03181e422f569b6426bc08b713a9efc0d0eb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68d69415637186755482d2584e6ba82b67bc1d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/68d69415637186755482d2584e6ba82b67bc1d89", "html_url": "https://github.com/rust-lang/rust/commit/68d69415637186755482d2584e6ba82b67bc1d89"}], "stats": {"total": 669, "additions": 372, "deletions": 297}, "files": [{"sha": "ceed88b6236fd5f9a0f5c2bb588f1b49570bb126", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -10,9 +10,10 @@\n \n #![allow(deprecated)] // for old path, for dynamic_lib\n \n-use std::process::{ExitStatus, Command, Child, Output, Stdio};\n-use std::io::prelude::*;\n use std::dynamic_lib::DynamicLibrary;\n+use std::io::prelude::*;\n+use std::old_path::Path;\n+use std::process::{ExitStatus, Command, Child, Output, Stdio};\n \n fn add_target_env(cmd: &mut Command, lib_path: &str, aux_path: Option<&str>) {\n     // Need to be sure to put both the lib_path and the aux path in the dylib"}, {"sha": "3af7485b237efc9c14782f39b511890739c9e67a", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -262,6 +262,7 @@\n //!\n //! ```\n //! # #![allow(unused_must_use)]\n+//! use std::io::Write;\n //! let mut w = Vec::new();\n //! write!(&mut w, \"Hello {}!\", \"world\");\n //! ```\n@@ -288,15 +289,15 @@\n //!\n //! ```\n //! use std::fmt;\n-//! use std::old_io;\n+//! use std::io::{self, Write};\n //!\n //! fmt::format(format_args!(\"this returns {}\", \"String\"));\n //!\n-//! let mut some_writer = old_io::stdout();\n+//! let mut some_writer = io::stdout();\n //! write!(&mut some_writer, \"{}\", format_args!(\"print with a {}\", \"macro\"));\n //!\n //! fn my_fmt_fn(args: fmt::Arguments) {\n-//!     write!(&mut old_io::stdout(), \"{}\", args);\n+//!     write!(&mut io::stdout(), \"{}\", args);\n //! }\n //! my_fmt_fn(format_args!(\"or a {} too\", \"function\"));\n //! ```"}, {"sha": "c647b037944aec0c401ac1fe14c618024f2effec", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -176,6 +176,7 @@ macro_rules! try {\n ///\n /// ```\n /// # #![allow(unused_must_use)]\n+/// use std::io::Write;\n ///\n /// let mut w = Vec::new();\n /// write!(&mut w, \"test\");"}, {"sha": "4bf7f85284cfe94148cef8507d7d80c415921bb0", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -29,8 +29,6 @@ pub use marker::{Copy, Send, Sized, Sync};\n pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n // Reexported functions\n-#[allow(deprecated)]\n-pub use iter::range;\n pub use mem::drop;\n \n // Reexported types and traits"}, {"sha": "1acc80d345fdcbcbabd61e3dc09a854cabb51447", "filename": "src/libcore/result.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -110,7 +110,8 @@\n //! something like this:\n //!\n //! ```{.ignore}\n-//! use std::old_io::{File, Open, Write};\n+//! use std::old_io::*;\n+//! use std::old_path::Path;\n //!\n //! let mut file = File::open_mode(&Path::new(\"valuable_data.txt\"), Open, Write);\n //! // If `write_line` errors, then we'll never know, because the return\n@@ -128,7 +129,8 @@\n //! a marginally useful message indicating why:\n //!\n //! ```{.no_run}\n-//! use std::old_io::{File, Open, Write};\n+//! use std::old_io::*;\n+//! use std::old_path::Path;\n //!\n //! let mut file = File::open_mode(&Path::new(\"valuable_data.txt\"), Open, Write);\n //! file.write_line(\"important message\").ok().expect(\"failed to write message\");\n@@ -138,7 +140,8 @@\n //! You might also simply assert success:\n //!\n //! ```{.no_run}\n-//! # use std::old_io::{File, Open, Write};\n+//! # use std::old_io::*;\n+//! # use std::old_path::Path;\n //!\n //! # let mut file = File::open_mode(&Path::new(\"valuable_data.txt\"), Open, Write);\n //! assert!(file.write_line(\"important message\").is_ok());\n@@ -148,7 +151,8 @@\n //! Or propagate the error up the call stack with `try!`:\n //!\n //! ```\n-//! # use std::old_io::{File, Open, Write, IoError};\n+//! # use std::old_io::*;\n+//! # use std::old_path::Path;\n //! fn write_message() -> Result<(), IoError> {\n //!     let mut file = File::open_mode(&Path::new(\"valuable_data.txt\"), Open, Write);\n //!     try!(file.write_line(\"important message\"));\n@@ -167,7 +171,8 @@\n //! It replaces this:\n //!\n //! ```\n-//! use std::old_io::{File, Open, Write, IoError};\n+//! use std::old_io::*;\n+//! use std::old_path::Path;\n //!\n //! struct Info {\n //!     name: String,\n@@ -191,7 +196,8 @@\n //! With this:\n //!\n //! ```\n-//! use std::old_io::{File, Open, Write, IoError};\n+//! use std::old_io::*;\n+//! use std::old_path::Path;\n //!\n //! struct Info {\n //!     name: String,\n@@ -446,7 +452,7 @@ impl<T, E> Result<T, E> {\n     /// ignoring I/O and parse errors:\n     ///\n     /// ```\n-    /// use std::old_io::IoResult;\n+    /// use std::old_io::*;\n     ///\n     /// let mut buffer: &[u8] = b\"1\\n2\\n3\\n4\\n\";\n     /// let mut buffer = &mut buffer;"}, {"sha": "cac78363dd53b8e83144b68bad4a38e2925d62a2", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -35,7 +35,7 @@ fn test_bool_from_str() {\n fn check_contains_all_substrings(s: &str) {\n     assert!(s.contains(\"\"));\n     for i in 0..s.len() {\n-        for j in range(i+1, s.len() + 1) {\n+        for j in i+1..s.len() + 1 {\n             assert!(s.contains(&s[i..j]));\n         }\n     }"}, {"sha": "c29cbb352a321ce44bc2a5b911474fbf4787eff1", "filename": "src/librustc_back/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibrustc_back%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibrustc_back%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ffs.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::io;\n-#[allow(deprecated)] use std::old_path;\n+#[allow(deprecated)] use std::old_path::{self, GenericPath};\n #[allow(deprecated)] use std::old_io;\n use std::path::{Path, PathBuf};\n \n@@ -72,6 +72,7 @@ mod test {\n     use std::old_io::fs::{File, symlink, mkdir, mkdir_recursive};\n     use super::old_realpath as realpath;\n     use std::old_io::TempDir;\n+    use std::old_path::{Path, GenericPath};\n \n     #[test]\n     fn realpath_works() {"}, {"sha": "d747ed3f119c2df095e443daefd785696bc11d0f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -64,6 +64,8 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::sync::mpsc::channel;\n \n+#[allow(deprecated)] use std::old_path::Path;\n+\n use externalfiles::ExternalHtml;\n use serialize::Decodable;\n use serialize::json::{self, Json};"}, {"sha": "fac8f2e2a9cc2cef926786095fa4466075c2b85d", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -16,6 +16,7 @@ use std::dynamic_lib as dl;\n use serialize::json;\n use std::mem;\n use std::string::String;\n+use std::old_path::{Path, GenericPath};\n \n pub type PluginJson = Option<(String, json::Json)>;\n pub type PluginResult = (clean::Crate, PluginJson);"}, {"sha": "096c72e6af2db0fb660c0002aa43c288d5dfe524", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -2622,6 +2622,7 @@ mod tests {\n     use std::{i64, u64, f32, f64};\n     use std::collections::BTreeMap;\n     use std::string;\n+    use std::old_io::Writer;\n \n     #[derive(RustcDecodable, Eq, PartialEq, Debug)]\n     struct OptionData {"}, {"sha": "71f9e01706dab1eb2d93f2207d86fd1546c234dd", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -15,7 +15,7 @@ Core encoding and decoding interfaces.\n */\n \n #[allow(deprecated)]\n-use std::old_path;\n+use std::old_path::{self, GenericPath};\n use std::path;\n use std::rc::Rc;\n use std::cell::{Cell, RefCell};"}, {"sha": "085bf01612d30519172fe94f26775d63fff2a881", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -18,11 +18,12 @@\n \n use prelude::v1::*;\n \n+use env;\n use ffi::CString;\n use mem;\n-use env;\n-use str;\n+use old_path::{Path, GenericPath};\n use os;\n+use str;\n \n pub struct DynamicLibrary {\n     handle: *mut u8\n@@ -133,15 +134,15 @@ mod test {\n     use super::*;\n     use prelude::v1::*;\n     use libc;\n+    use old_path::Path;\n     use mem;\n \n     #[test]\n     #[cfg_attr(any(windows, target_os = \"android\"), ignore)] // FIXME #8818, #10379\n     fn test_loading_cosine() {\n         // The math library does not need to be loaded since it is already\n         // statically linked in\n-        let none: Option<&Path> = None; // appease the typechecker\n-        let libm = match DynamicLibrary::open(none) {\n+        let libm = match DynamicLibrary::open(None) {\n             Err(error) => panic!(\"Could not load self as module: {}\", error),\n             Ok(libm) => libm\n         };"}, {"sha": "24882c7f7abfd099c8703909c04c6ed3563247ac", "filename": "src/libstd/env.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -729,10 +729,11 @@ mod arch {\n mod tests {\n     use prelude::v1::*;\n     use super::*;\n+\n     use iter::repeat;\n     use rand::{self, Rng};\n     use ffi::{OsString, OsStr};\n-    use path::PathBuf;\n+    use path::{Path, PathBuf};\n \n     fn make_rand_name() -> OsString {\n         let mut rng = rand::thread_rng();"}, {"sha": "bb63bcb86bc8c8dd012861fa2f3616a7a86214ac", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -801,6 +801,7 @@ mod tests {\n     use prelude::v1::*;\n     use io::prelude::*;\n \n+    use env;\n     use fs::{self, File, OpenOptions};\n     use io::{ErrorKind, SeekFrom};\n     use path::PathBuf;\n@@ -848,8 +849,7 @@ mod tests {\n     }\n \n     pub fn tmpdir() -> TempDir {\n-        let s = os::tmpdir();\n-        let p = Path2::new(s.as_str().unwrap());\n+        let p = env::temp_dir();\n         let ret = p.join(&format!(\"rust-{}\", rand::random::<u32>()));\n         check!(fs::create_dir(&ret));\n         TempDir(ret)\n@@ -1082,7 +1082,7 @@ mod tests {\n         let dir = &tmpdir.join(\"di_readdir\");\n         check!(fs::create_dir(dir));\n         let prefix = \"foo\";\n-        for n in range(0, 3) {\n+        for n in 0..3 {\n             let f = dir.join(&format!(\"{}.txt\", n));\n             let mut w = check!(File::create(&f));\n             let msg_str = format!(\"{}{}\", prefix, n.to_string());"}, {"sha": "a2ceacbe1f897ba62c6d4ba46b3daf2ecd4884d9", "filename": "src/libstd/io/prelude.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fio%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fio%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprelude.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -23,8 +23,5 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-pub use super::{Read, Write, BufRead};\n+pub use super::{Read, Write, BufRead, Seek};\n pub use fs::PathExt;\n-\n-// FIXME: pub use as `Seek` when the name isn't in the actual prelude any more\n-pub use super::Seek as NewSeek;"}, {"sha": "562094a87f4e5db0a8a1ccefa2a67e5217d8b490", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -1650,7 +1650,7 @@ mod tests {\n                 #![test]\n                 assert_eq!((0 as $T).next_power_of_two(), 1);\n                 let mut next_power = 1;\n-                for i in range::<$T>(1, 40) {\n+                for i in 1 as $T..40 {\n                      assert_eq!(i.next_power_of_two(), next_power);\n                      if i == next_power { next_power *= 2 }\n                 }\n@@ -1673,7 +1673,7 @@ mod tests {\n                 assert_eq!(($T::MAX - 1).checked_next_power_of_two(), None);\n                 assert_eq!($T::MAX.checked_next_power_of_two(), None);\n                 let mut next_power = 1;\n-                for i in range::<$T>(1, 40) {\n+                for i in 1 as $T..40 {\n                      assert_eq!(i.checked_next_power_of_two(), Some(next_power));\n                      if i == next_power { next_power *= 2 }\n                 }"}, {"sha": "3e5f732e345453d3f7c9eb396137433d56ad1486", "filename": "src/libstd/old_io/buffered.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fbuffered.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -33,7 +33,8 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```\n-/// use std::old_io::{BufferedReader, File};\n+/// use std::old_io::*;\n+/// use std::old_path::Path;\n ///\n /// let file = File::open(&Path::new(\"message.txt\"));\n /// let mut reader = BufferedReader::new(file);\n@@ -136,7 +137,8 @@ impl<R: Reader> Reader for BufferedReader<R> {\n /// # Examples\n ///\n /// ```\n-/// use std::old_io::{BufferedWriter, File};\n+/// use std::old_io::*;\n+/// use std::old_path::Path;\n ///\n /// let file = File::create(&Path::new(\"message.txt\")).unwrap();\n /// let mut writer = BufferedWriter::new(file);\n@@ -323,7 +325,8 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n ///\n /// ```\n /// # #![allow(unused_must_use)]\n-/// use std::old_io::{BufferedStream, File};\n+/// use std::old_io::*;\n+/// use std::old_path::Path;\n ///\n /// let file = File::open(&Path::new(\"message.txt\"));\n /// let mut stream = BufferedStream::new(file);\n@@ -422,7 +425,7 @@ impl<S: Stream> Writer for BufferedStream<S> {\n #[cfg(test)]\n mod test {\n     extern crate test;\n-    use old_io;\n+    use old_io::{self, Reader, Writer, Buffer, BufferPrelude};\n     use prelude::v1::*;\n     use super::*;\n     use super::super::{IoResult, EndOfFile};"}, {"sha": "7e62a21f105cd8d43ab16c8c98458db6c9f9f440", "filename": "src/libstd/old_io/comm_adapters.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -24,7 +24,7 @@ use vec::Vec;\n ///\n /// ```\n /// use std::sync::mpsc::channel;\n-/// use std::old_io::ChanReader;\n+/// use std::old_io::*;\n ///\n /// let (tx, rx) = channel();\n /// # drop(tx);\n@@ -116,7 +116,7 @@ impl Reader for ChanReader {\n /// ```\n /// # #![allow(unused_must_use)]\n /// use std::sync::mpsc::channel;\n-/// use std::old_io::ChanWriter;\n+/// use std::old_io::*;\n ///\n /// let (tx, rx) = channel();\n /// # drop(rx);\n@@ -160,7 +160,7 @@ mod test {\n \n     use sync::mpsc::channel;\n     use super::*;\n-    use old_io;\n+    use old_io::{self, Reader, Writer, Buffer};\n     use thread;\n \n     #[test]"}, {"sha": "2990c1c265d54fcb14b2efd5fd3d73d5587fb2e8", "filename": "src/libstd/old_io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fextensions.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -179,7 +179,7 @@ pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n #[cfg(test)]\n mod test {\n     use prelude::v1::*;\n-    use old_io;\n+    use old_io::{self, Reader, Writer};\n     use old_io::{MemReader, BytesReader};\n \n     struct InitialZeroByteReader {"}, {"sha": "008db49dadfa0d3b8d3e7fadfa80891fe9a7606f", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -32,7 +32,8 @@\n //! ```rust\n //! # #![allow(unused_must_use)]\n //! use std::old_io::fs::PathExtensions;\n-//! use std::old_io::{File, fs};\n+//! use std::old_io::*;\n+//! use std::old_path::Path;\n //!\n //! let path = Path::new(\"foo.txt\");\n //!\n@@ -104,7 +105,8 @@ impl File {\n     /// # Examples\n     ///\n     /// ```rust,should_fail\n-    /// use std::old_io::{File, Open, ReadWrite};\n+    /// use std::old_io::*;\n+    /// use std::old_path::Path;\n     ///\n     /// let p = Path::new(\"/some/file/path.txt\");\n     ///\n@@ -175,7 +177,8 @@ impl File {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::old_io::File;\n+    /// use std::old_io::*;\n+    /// use std::old_path::Path;\n     ///\n     /// let contents = File::open(&Path::new(\"foo.txt\")).read_to_end();\n     /// ```\n@@ -195,7 +198,8 @@ impl File {\n     ///\n     /// ```\n     /// # #![allow(unused_must_use)]\n-    /// use std::old_io::File;\n+    /// use std::old_io::*;\n+    /// use std::old_path::Path;\n     ///\n     /// let mut f = File::create(&Path::new(\"foo.txt\"));\n     /// f.write(b\"This is a sample file\");\n@@ -286,7 +290,8 @@ impl File {\n ///\n /// ```\n /// # #![allow(unused_must_use)]\n-/// use std::old_io::fs;\n+/// use std::old_io::*;\n+/// use std::old_path::Path;\n ///\n /// let p = Path::new(\"/some/file/path.txt\");\n /// fs::unlink(&p);\n@@ -316,7 +321,8 @@ pub fn unlink(path: &Path) -> IoResult<()> {\n /// # Examples\n ///\n /// ```\n-/// use std::old_io::fs;\n+/// use std::old_io::*;\n+/// use std::old_path::Path;\n ///\n /// let p = Path::new(\"/some/file/path.txt\");\n /// match fs::stat(&p) {\n@@ -359,7 +365,8 @@ pub fn lstat(path: &Path) -> IoResult<FileStat> {\n ///\n /// ```\n /// # #![allow(unused_must_use)]\n-/// use std::old_io::fs;\n+/// use std::old_io::*;\n+/// use std::old_path::Path;\n ///\n /// fs::rename(&Path::new(\"foo\"), &Path::new(\"bar\"));\n /// ```\n@@ -387,7 +394,8 @@ pub fn rename(from: &Path, to: &Path) -> IoResult<()> {\n ///\n /// ```\n /// # #![allow(unused_must_use)]\n-/// use std::old_io::fs;\n+/// use std::old_io::*;\n+/// use std::old_path::Path;\n ///\n /// fs::copy(&Path::new(\"foo.txt\"), &Path::new(\"bar.txt\"));\n /// ```\n@@ -438,7 +446,8 @@ pub fn copy(from: &Path, to: &Path) -> IoResult<()> {\n /// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io;\n-/// use std::old_io::fs;\n+/// use std::old_io::*;\n+/// use std::old_path::Path;\n ///\n /// fs::chmod(&Path::new(\"file.txt\"), old_io::USER_FILE);\n /// fs::chmod(&Path::new(\"file.txt\"), old_io::USER_READ | old_io::USER_WRITE);\n@@ -509,7 +518,8 @@ pub fn readlink(path: &Path) -> IoResult<Path> {\n /// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io;\n-/// use std::old_io::fs;\n+/// use std::old_io::*;\n+/// use std::old_path::Path;\n ///\n /// let p = Path::new(\"/some/dir\");\n /// fs::mkdir(&p, old_io::USER_RWX);\n@@ -532,7 +542,8 @@ pub fn mkdir(path: &Path, mode: FilePermission) -> IoResult<()> {\n ///\n /// ```\n /// # #![allow(unused_must_use)]\n-/// use std::old_io::fs;\n+/// use std::old_io::*;\n+/// use std::old_path::Path;\n ///\n /// let p = Path::new(\"/some/dir\");\n /// fs::rmdir(&p);\n@@ -556,8 +567,9 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n ///\n /// ```\n /// use std::old_io::fs::PathExtensions;\n-/// use std::old_io::fs;\n /// use std::old_io;\n+/// use std::old_io::*;\n+/// use std::old_path::Path;\n ///\n /// // one possible implementation of fs::walk_dir only visiting files\n /// fn visit_dirs<F>(dir: &Path, cb: &mut F) -> old_io::IoResult<()> where\n@@ -881,7 +893,8 @@ fn access_string(access: FileAccess) -> &'static str {\n mod test {\n     use prelude::v1::*;\n     use old_io::{SeekSet, SeekCur, SeekEnd, Read, Open, ReadWrite, FileType};\n-    use old_io;\n+    use old_io::{self, Reader, Writer, Seek};\n+    use old_path::{Path, GenericPath};\n     use str;\n     use old_io::fs::*;\n "}, {"sha": "1acc6abc8506f435f3cf47487670edaba65c132b", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -55,7 +55,7 @@ impl Writer for Vec<u8> {\n ///\n /// ```\n /// # #![allow(unused_must_use)]\n-/// use std::old_io::MemWriter;\n+/// use std::old_io::*;\n ///\n /// let mut w = MemWriter::new();\n /// w.write(&[0, 1, 2]);\n@@ -115,7 +115,7 @@ impl Writer for MemWriter {\n ///\n /// ```\n /// # #![allow(unused_must_use)]\n-/// use std::old_io::MemReader;\n+/// use std::old_io::*;\n ///\n /// let mut r = MemReader::new(vec!(0, 1, 2));\n ///\n@@ -245,7 +245,7 @@ impl<'a> Buffer for &'a [u8] {\n ///\n /// ```\n /// # #![allow(unused_must_use)]\n-/// use std::old_io::BufWriter;\n+/// use std::old_io::*;\n ///\n /// let mut buf = [0; 4];\n /// {\n@@ -317,7 +317,7 @@ impl<'a> Seek for BufWriter<'a> {\n ///\n /// ```\n /// # #![allow(unused_must_use)]\n-/// use std::old_io::BufReader;\n+/// use std::old_io::*;\n ///\n /// let buf = [0, 1, 2, 3];\n /// let mut r = BufReader::new(&buf);\n@@ -394,8 +394,8 @@ impl<'a> Buffer for BufReader<'a> {\n #[cfg(test)]\n mod test {\n     extern crate \"test\" as test_crate;\n-    use old_io::{SeekSet, SeekCur, SeekEnd, Reader, Writer, Seek};\n-    use prelude::v1::{Ok, Err, range,  Vec, Buffer,  AsSlice};\n+    use old_io::{SeekSet, SeekCur, SeekEnd, Reader, Writer, Seek, Buffer};\n+    use prelude::v1::{Ok, Err, Vec,  AsSlice};\n     use prelude::v1::IteratorExt;\n     use old_io;\n     use iter::repeat;"}, {"sha": "6dfb54fd66cc4107d167ab893ea4cbd6f57802c8", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -49,6 +49,7 @@\n //!\n //!     ```rust\n //!     use std::old_io as io;\n+//!     use std::old_io::*;\n //!\n //!     let mut stdin = io::stdin();\n //!     for line in stdin.lock().lines() {\n@@ -59,7 +60,8 @@\n //! * Read a complete file\n //!\n //!     ```rust\n-//!     use std::old_io::File;\n+//!     use std::old_io::*;\n+//!     use std::old_path::Path;\n //!\n //!     let contents = File::open(&Path::new(\"message.txt\")).read_to_end();\n //!     ```\n@@ -68,7 +70,8 @@\n //!\n //!     ```rust\n //!     # #![allow(unused_must_use)]\n-//!     use std::old_io::File;\n+//!     use std::old_io::*;\n+//!     use std::old_path::Path;\n //!\n //!     let mut file = File::create(&Path::new(\"message.txt\"));\n //!     file.write_all(b\"hello, file!\\n\");\n@@ -79,8 +82,8 @@\n //! * Iterate over the lines of a file\n //!\n //!     ```rust,no_run\n-//!     use std::old_io::BufferedReader;\n-//!     use std::old_io::File;\n+//!     use std::old_io::*;\n+//!     use std::old_path::Path;\n //!\n //!     let path = Path::new(\"message.txt\");\n //!     let mut file = BufferedReader::new(File::open(&path));\n@@ -92,8 +95,8 @@\n //! * Pull the lines of a file into a vector of strings\n //!\n //!     ```rust,no_run\n-//!     use std::old_io::BufferedReader;\n-//!     use std::old_io::File;\n+//!     use std::old_io::*;\n+//!     use std::old_path::Path;\n //!\n //!     let path = Path::new(\"message.txt\");\n //!     let mut file = BufferedReader::new(File::open(&path));\n@@ -104,7 +107,7 @@\n //!\n //!     ```rust\n //!     # #![allow(unused_must_use)]\n-//!     use std::old_io::TcpStream;\n+//!     use std::old_io::*;\n //!\n //!     # // connection doesn't fail if a server is running on 8080\n //!     # // locally, we still want to be type checking this code, so lets\n@@ -122,8 +125,7 @@\n //!     # fn main() { }\n //!     # fn foo() {\n //!     # #![allow(dead_code)]\n-//!     use std::old_io::{TcpListener, TcpStream};\n-//!     use std::old_io::{Acceptor, Listener};\n+//!     use std::old_io::*;\n //!     use std::thread;\n //!\n //!     let listener = TcpListener::bind(\"127.0.0.1:80\");\n@@ -185,7 +187,8 @@\n //!\n //! ```rust\n //! # #![allow(unused_must_use)]\n-//! use std::old_io::File;\n+//! use std::old_io::*;\n+//! use std::old_path::Path;\n //!\n //! match File::create(&Path::new(\"diary.txt\")).write_all(b\"Met a girl.\\n\") {\n //!     Ok(()) => (), // succeeded\n@@ -218,7 +221,8 @@\n //! If you wanted to read several `u32`s from a file and return their product:\n //!\n //! ```rust\n-//! use std::old_io::{File, IoResult};\n+//! use std::old_io::*;\n+//! use std::old_path::Path;\n //!\n //! fn file_product(p: &Path) -> IoResult<u32> {\n //!     let mut f = File::open(p);\n@@ -945,7 +949,7 @@ unsafe fn slice_vec_capacity<'a, T>(v: &'a mut Vec<T>, start: uint, end: uint) -\n ///\n /// ```\n /// use std::old_io as io;\n-/// use std::old_io::ByRefReader;\n+/// use std::old_io::*;\n /// use std::old_io::util::LimitReader;\n ///\n /// fn process_input<R: Reader>(r: R) {}\n@@ -1279,7 +1283,7 @@ impl<'a> Writer for &'a mut (Writer+'a) {\n ///\n /// ```\n /// use std::old_io::util::TeeReader;\n-/// use std::old_io::{stdin, ByRefWriter};\n+/// use std::old_io::*;\n ///\n /// fn process_input<R: Reader>(r: R) {}\n ///\n@@ -1403,7 +1407,7 @@ pub trait Buffer: Reader {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::old_io::BufReader;\n+    /// use std::old_io::*;\n     ///\n     /// let mut reader = BufReader::new(b\"hello\\nworld\");\n     /// assert_eq!(\"hello\\n\", &*reader.read_line().unwrap());\n@@ -1717,6 +1721,7 @@ pub enum FileType {\n /// ```no_run\n ///\n /// use std::old_io::fs::PathExtensions;\n+/// use std::old_path::Path;\n ///\n /// let info = match Path::new(\"foo.txt\").stat() {\n ///     Ok(stat) => stat,\n@@ -1845,7 +1850,8 @@ impl fmt::Display for FilePermission {\n mod tests {\n     use self::BadReaderBehavior::*;\n     use super::{IoResult, Reader, MemReader, NoProgress, InvalidInput, Writer};\n-    use prelude::v1::{Ok, Vec, Buffer};\n+    use super::Buffer;\n+    use prelude::v1::{Ok, Vec};\n     use usize;\n \n     #[derive(Clone, PartialEq, Debug)]"}, {"sha": "77efedbc327d4cd06b81195d7de646740f5c53d5", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -31,6 +31,7 @@ use prelude::v1::*;\n use ffi::CString;\n use old_path::BytesContainer;\n use old_io::{Listener, Acceptor, IoResult, TimedOut, standard_error};\n+use old_io::{Reader, Writer};\n use sys::pipe::UnixAcceptor as UnixAcceptorImp;\n use sys::pipe::UnixListener as UnixListenerImp;\n use sys::pipe::UnixStream as UnixStreamImp;\n@@ -55,6 +56,8 @@ impl UnixStream {\n     /// ```\n     /// # #![allow(unused_must_use)]\n     /// use std::old_io::net::pipe::UnixStream;\n+    /// use std::old_io::*;\n+    /// use std::old_path::Path;\n     ///\n     /// let server = Path::new(\"path/to/my/socket\");\n     /// let mut stream = UnixStream::connect(&server);\n@@ -180,7 +183,8 @@ impl UnixListener {\n     /// ```\n     /// # fn foo() {\n     /// use std::old_io::net::pipe::UnixListener;\n-    /// use std::old_io::{Listener, Acceptor};\n+    /// use std::old_io::*;\n+    /// use std::old_path::Path;\n     ///\n     /// let server = Path::new(\"/path/to/my/socket\");\n     /// let stream = UnixListener::bind(&server);\n@@ -285,6 +289,7 @@ mod tests {\n     use old_io::{EndOfFile, TimedOut, ShortWrite, IoError, ConnectionReset};\n     use old_io::{NotConnected, BrokenPipe, FileNotFound, InvalidInput, OtherIoError};\n     use old_io::{PermissionDenied, Acceptor, Listener};\n+    use old_io::{Reader, Writer};\n     use old_io::test::*;\n     use super::*;\n     use sync::mpsc::channel;"}, {"sha": "dbf3c4a4b1ecbf8d153615b18d06c86eef25281d", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -41,7 +41,7 @@ use sys_common;\n /// # Examples\n ///\n /// ```no_run\n-/// use std::old_io::TcpStream;\n+/// use std::old_io::*;\n ///\n /// {\n ///     let mut stream = TcpStream::connect(\"127.0.0.1:34254\");\n@@ -134,8 +134,7 @@ impl TcpStream {\n     ///\n     /// ```no_run\n     /// # #![allow(unused_must_use)]\n-    /// use std::old_io::timer;\n-    /// use std::old_io::TcpStream;\n+    /// use std::old_io::*;\n     /// use std::time::Duration;\n     /// use std::thread;\n     ///\n@@ -280,8 +279,7 @@ impl sys_common::AsInner<TcpStreamImp> for TcpStream {\n ///\n /// ```\n /// # fn foo() {\n-/// use std::old_io::{TcpListener, TcpStream};\n-/// use std::old_io::{Acceptor, Listener};\n+/// use std::old_io::*;\n /// use std::thread;\n ///\n /// let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n@@ -376,8 +374,7 @@ impl TcpAcceptor {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// use std::old_io::TcpListener;\n-    /// use std::old_io::{Listener, Acceptor, TimedOut};\n+    /// use std::old_io::*;\n     ///\n     /// let mut a = TcpListener::bind(\"127.0.0.1:8482\").listen().unwrap();\n     ///\n@@ -420,7 +417,7 @@ impl TcpAcceptor {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::old_io::{TcpListener, Listener, Acceptor, EndOfFile};\n+    /// use std::old_io::*;\n     /// use std::thread;\n     ///\n     /// let mut a = TcpListener::bind(\"127.0.0.1:8482\").listen().unwrap();\n@@ -496,6 +493,7 @@ mod test {\n     use old_io::{ConnectionReset, NotConnected, PermissionDenied, OtherIoError};\n     use old_io::{InvalidInput};\n     use old_io::{Acceptor, Listener};\n+    use old_io::{Reader, Writer};\n \n     // FIXME #11530 this fails on android because tests are run as root\n     #[cfg_attr(any(windows, target_os = \"android\"), ignore)]"}, {"sha": "b2b28453c890514637237e5e77b5e27abe108eb5", "filename": "src/libstd/old_io/pipe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fpipe.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -17,7 +17,7 @@\n \n use prelude::v1::*;\n \n-use old_io::IoResult;\n+use old_io::{IoResult, Reader, Writer};\n use libc;\n use sync::Arc;\n \n@@ -49,7 +49,7 @@ impl PipeStream {\n     /// # #![allow(unused_must_use)]\n     /// extern crate libc;\n     ///\n-    /// use std::old_io::pipe::PipeStream;\n+    /// use std::old_io::*;\n     ///\n     /// fn main() {\n     ///     let mut pipe = PipeStream::open(libc::STDERR_FILENO);\n@@ -114,6 +114,7 @@ impl Writer for PipeStream {\n mod test {\n     use prelude::v1::*;\n \n+    use old_io::{Writer, Reader};\n     use sync::mpsc::channel;\n     use thread;\n "}, {"sha": "54fd20f45e298bd7ae44bf2f49c51075219a19c2", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -24,8 +24,9 @@ use collections::HashMap;\n use ffi::CString;\n use fmt;\n use old_io::pipe::{PipeStream, PipePair};\n-use old_io::{IoResult, IoError};\n+use old_io::{IoResult, IoError, Reader, Writer};\n use old_io;\n+use old_path::{Path, GenericPath};\n use libc;\n use os;\n use old_path::BytesContainer;\n@@ -60,7 +61,7 @@ use thread;\n /// # Examples\n ///\n /// ```should_fail\n-/// use std::old_io::Command;\n+/// use std::old_io::*;\n ///\n /// let mut child = match Command::new(\"/bin/cat\").arg(\"file.txt\").spawn() {\n ///     Ok(child) => child,\n@@ -163,7 +164,7 @@ pub type EnvMap = HashMap<EnvKey, CString>;\n /// to be changed (for example, by adding arguments) prior to spawning:\n ///\n /// ```\n-/// use std::old_io::Command;\n+/// use std::old_io::*;\n ///\n /// let mut process = match Command::new(\"sh\").arg(\"-c\").arg(\"echo hello\").spawn() {\n ///   Ok(p) => p,\n@@ -759,9 +760,11 @@ impl Drop for Process {\n #[cfg(test)]\n mod tests {\n     use old_io::{Truncate, Write, TimedOut, timer, process, FileNotFound};\n-    use prelude::v1::{Ok, Err, range, drop, Some, None, Vec};\n-    use prelude::v1::{Path, String, Reader, Writer, Clone};\n-    use prelude::v1::{Str, AsSlice, ToString, GenericPath};\n+    use old_io::{Reader, Writer};\n+    use prelude::v1::{Ok, Err, drop, Some, None, Vec};\n+    use prelude::v1::{String, Clone};\n+    use prelude::v1::{Str, AsSlice, ToString};\n+    use old_path::{GenericPath, Path};\n     use old_io::fs::PathExtensions;\n     use old_io::timer::*;\n     use rt::running_on_valgrind;"}, {"sha": "9dcb487cdb0df0ff78ac9c4948beffb2ad863249", "filename": "src/libstd/old_io/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fresult.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -80,7 +80,7 @@ impl<T, A: Acceptor<T>> Acceptor<T> for IoResult<A> {\n mod test {\n     use prelude::v1::*;\n     use super::super::mem::*;\n-    use old_io;\n+    use old_io::{self, Reader, Writer};\n \n     #[test]\n     fn test_option_writer() {"}, {"sha": "a1c8630e0ec319efb0bfcb3537cbb9e6b8303d30", "filename": "src/libstd/old_io/stdio.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fstdio.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -20,6 +20,7 @@\n //! ```rust\n //! # #![allow(unused_must_use)]\n //! use std::old_io;\n+//! use std::old_io::*;\n //!\n //! let mut out = old_io::stdout();\n //! out.write_all(b\"Hello, world!\");\n@@ -140,6 +141,7 @@ impl StdinReader {\n     ///\n     /// ```\n     /// use std::old_io;\n+    /// use std::old_io::*;\n     ///\n     /// let mut stdin = old_io::stdin();\n     /// for line in stdin.lock().lines() {"}, {"sha": "90b3d1004c0b35d95d9b0454e7c3fc89f403855e", "filename": "src/libstd/old_io/tempfile.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftempfile.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -29,7 +29,8 @@ use string::String;\n /// # Examples\n ///\n /// ```no_run\n-/// use std::old_io::TempDir;\n+/// use std::old_io::*;\n+/// use std::old_path::{Path, GenericPath};\n ///\n /// {\n ///     // create a temporary directory"}, {"sha": "db409ecde452612be8b1fedf2a55c22fc6dbfb63", "filename": "src/libstd/old_io/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftest.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -14,7 +14,8 @@ use prelude::v1::*;\n \n use env;\n use libc;\n-use std::old_io::net::ip::*;\n+use old_io::net::ip::*;\n+use old_path::{Path, GenericPath};\n use sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n \n /// Get a port number, starting at 9600, for use in tests"}, {"sha": "1f782b6f221802308f20d06f18086835396a9a76", "filename": "src/libstd/old_io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_io%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Futil.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -14,7 +14,7 @@\n \n use prelude::v1::*;\n use cmp;\n-use old_io;\n+use old_io::{self, Reader, Writer, Buffer};\n use slice::bytes::MutableByteVector;\n \n /// Wraps a `Reader`, limiting the number of bytes that can be read from it.\n@@ -325,7 +325,7 @@ impl<T: Iterator<Item=u8>> Reader for IterReader<T> {\n mod test {\n     use prelude::v1::*;\n \n-    use old_io::{MemReader, ByRefReader};\n+    use old_io::{MemReader, ByRefReader, Reader, Writer, Buffer};\n     use old_io;\n     use super::*;\n "}, {"sha": "909fa4062b6042086e0748061d613f0d530019cd", "filename": "src/libstd/old_path/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_path%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_path%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fmod.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -50,6 +50,7 @@\n //!\n //! ```rust\n //! use std::old_io::fs::PathExtensions;\n+//! use std::old_path::{Path, GenericPath};\n //!\n //! let mut path = Path::new(\"/tmp/path\");\n //! println!(\"path: {}\", path.display());\n@@ -142,6 +143,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -166,6 +168,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -188,6 +191,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -205,6 +209,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -219,6 +224,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -234,6 +240,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -252,6 +259,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -269,6 +277,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -284,6 +293,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -303,6 +313,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -318,6 +329,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -337,6 +349,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -364,6 +377,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -384,6 +398,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -411,6 +426,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -429,6 +445,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -455,6 +472,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -505,6 +523,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -530,6 +549,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -554,6 +574,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -573,6 +594,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -588,6 +610,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -612,6 +635,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -641,6 +665,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -658,6 +683,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -683,6 +709,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -705,6 +732,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -722,6 +750,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -740,6 +769,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -759,6 +789,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {\n@@ -775,6 +806,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n     /// # #[cfg(unix)] fn foo() {"}, {"sha": "0ab8612a7cb52eacc8ca7a5f65340876b94dfaec", "filename": "src/libstd/old_path/posix.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_path%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_path%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fposix.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -1224,7 +1224,8 @@ mod bench {\n     extern crate test;\n     use self::test::Bencher;\n     use super::*;\n-    use prelude::v1::{Clone, GenericPath};\n+    use old_path::GenericPath;\n+    use prelude::v1::Clone;\n \n     #[bench]\n     fn join_home_dir(b: &mut Bencher) {"}, {"sha": "cea2c238ecec29d2fe5e565bd1e72d363146e089", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -605,6 +605,7 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// println!(\"{}\", Path::new(r\"C:\\some\\path\").display());\n     /// ```\n     #[inline]\n@@ -619,6 +620,7 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n+    /// use std::old_path::{Path, GenericPath};\n     /// let path = Path::new_opt(r\"C:\\some\\path\");\n     ///\n     /// match path {"}, {"sha": "3870b8614ffdfe05fbdaafc4c698bb4b34d26dc9", "filename": "src/libstd/os.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -126,6 +126,7 @@ pub const TMPBUF_SZ : uint = 1000;\n ///\n /// ```\n /// use std::os;\n+/// use std::old_path::{Path, GenericPath};\n ///\n /// // We assume that we are in a valid directory.\n /// let current_working_directory = os::getcwd().unwrap();\n@@ -265,6 +266,7 @@ pub fn unsetenv(n: &str) {\n ///\n /// ```\n /// use std::os;\n+/// use std::old_path::{Path, GenericPath};\n ///\n /// let key = \"PATH\";\n /// match os::getenv_as_bytes(key) {\n@@ -358,6 +360,7 @@ pub fn dll_filename(base: &str) -> String {\n ///\n /// ```\n /// use std::os;\n+/// use std::old_path::{Path, GenericPath};\n ///\n /// match os::self_exe_name() {\n ///     Some(exe_path) => println!(\"Path of this executable is: {}\", exe_path.display()),\n@@ -378,6 +381,7 @@ pub fn self_exe_name() -> Option<Path> {\n ///\n /// ```\n /// use std::os;\n+/// use std::old_path::{Path, GenericPath};\n ///\n /// match os::self_exe_path() {\n ///     Some(exe_path) => println!(\"Executable's Path is: {}\", exe_path.display()),\n@@ -407,6 +411,7 @@ pub fn self_exe_path() -> Option<Path> {\n ///\n /// ```\n /// use std::os;\n+/// use std::old_path::{Path, GenericPath};\n ///\n /// match os::homedir() {\n ///     Some(ref p) => println!(\"{}\", p.display()),\n@@ -497,7 +502,7 @@ pub fn tmpdir() -> Path {\n ///\n /// ```\n /// use std::os;\n-/// use std::old_path::Path;\n+/// use std::old_path::{Path, GenericPath};\n ///\n /// // Assume we're in a path like /home/someuser\n /// let rel_path = Path::new(\"..\");\n@@ -529,7 +534,7 @@ pub fn make_absolute(p: &Path) -> IoResult<Path> {\n ///\n /// ```\n /// use std::os;\n-/// use std::old_path::Path;\n+/// use std::old_path::{Path, GenericPath};\n ///\n /// let root = Path::new(\"/\");\n /// assert!(os::change_dir(&root).is_ok());\n@@ -1496,6 +1501,8 @@ mod tests {\n     use os;\n     use rand::Rng;\n     use rand;\n+    use old_path::{Path, GenericPath};\n+    use old_io::{Reader, Writer, Seek};\n \n     #[test]\n     pub fn last_os_error() {"}, {"sha": "a0b4c80e9f3fa47e886a8434064e9621662f713c", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -48,12 +48,5 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use vec::Vec;\n \n-// NB: remove when path reform lands\n-#[doc(no_inline)] pub use old_path::{Path, GenericPath};\n-// NB: remove when I/O reform lands\n-#[doc(no_inline)] pub use old_io::{Buffer, Writer, Reader, Seek, BufferPrelude};\n-// NB: remove when range syntax lands\n-#[allow(deprecated)]\n-#[doc(no_inline)] pub use iter::range;\n-\n+// FIXME(#23454) should these be here?\n #[doc(no_inline)] pub use num::wrapping::{Wrapping, WrappingOps};"}, {"sha": "6b09636c1df1e8a370621a854db33ff569dbd05e", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -533,8 +533,8 @@ mod tests {\n     use io::prelude::*;\n     use prelude::v1::{Ok, Err, drop, Some, Vec};\n     use prelude::v1::{String, Clone};\n-    use prelude::v1::{Str, AsSlice, ToString, GenericPath};\n-    use old_path;\n+    use prelude::v1::{Str, AsSlice, ToString};\n+    use old_path::{self, GenericPath};\n     use old_io::fs::PathExtensions;\n     use rt::running_on_valgrind;\n     use str;"}, {"sha": "cf627ca254809c95cedafc730dba3d5ef942640a", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -10,7 +10,6 @@\n //\n // ignore-lexer-test FIXME #15677\n \n-use prelude::v1::*;\n use io::prelude::*;\n \n use env;"}, {"sha": "5292f78ca0e039bb0bebc46570ccb2310ba52ab6", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -20,6 +20,7 @@ use old_io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode\n use old_io::{IoResult, FileStat, SeekStyle};\n use old_io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n use old_io;\n+use old_path::{Path, GenericPath};\n use libc::{self, c_int, c_void};\n use mem;\n use ptr;"}, {"sha": "ffa4b37b48794c4a32f31a0a512cd69b241f3999", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -26,14 +26,15 @@\n #![allow(deprecated)] // for old path for dynamic lib\n \n use prelude::v1::*;\n+use io::prelude::*;\n \n use dynamic_lib::DynamicLibrary;\n-use io;\n-use io::prelude::*;\n use ffi::CStr;\n use intrinsics;\n+use io;\n use libc;\n use mem;\n+use old_path::Path;\n use ptr;\n use str;\n use sync::{StaticMutex, MUTEX_INIT};"}, {"sha": "e7a01478908bcafa22ec5db15e360489f4ad286f", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -22,6 +22,7 @@ use prelude::v1::*;\n use sys;\n use sys_common::{self, mkerr_libc};\n \n+use old_path::{Path, GenericPath};\n use old_io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n use old_io::{IoResult, IoError, FileStat, SeekStyle};\n use old_io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};"}, {"sha": "e08a6e6b3cd7bfed95efd98fb9d314e275d6a16d", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -24,7 +24,7 @@ use old_io::process::{ProcessExit, ExitStatus};\n use old_io::{IoResult, IoError};\n use old_io;\n use os;\n-use old_path::BytesContainer;\n+use old_path::{BytesContainer, GenericPath};\n use ptr;\n use str;\n use sync::{StaticMutex, MUTEX_INIT};"}, {"sha": "52f4cce4aa3bdff763e4d3fb0117589a5257467f", "filename": "src/libstd/sys/windows/tty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -29,7 +29,7 @@\n \n use prelude::v1::*;\n \n-use old_io::{self, IoError, IoResult, MemReader};\n+use old_io::{self, IoError, IoResult, MemReader, Reader};\n use iter::repeat;\n use libc::types::os::arch::extra::LPCVOID;\n use libc::{c_int, HANDLE, LPDWORD, DWORD, LPVOID};"}, {"sha": "6a316ee83fd74b74a6249b8eccdc4d8cae99a41d", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -150,11 +150,12 @@ use io;\n use marker::PhantomData;\n use rt::{self, unwind};\n use sync::{Mutex, Condvar, Arc};\n+use sys::thread as imp;\n+use sys_common::{stack, thread_info};\n use thunk::Thunk;\n use time::Duration;\n \n-use sys::thread as imp;\n-use sys_common::{stack, thread_info};\n+#[allow(deprecated)] use old_io::Writer;\n \n /// Thread configuration. Provides detailed control over the properties\n /// and behavior of new threads."}, {"sha": "e20e6d4f29bfab982cfcd71846711eee6f78cae8", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -333,7 +333,7 @@ pub fn winsorize<T: Float + FromPrimitive>(samples: &mut [T], pct: T) {\n mod tests {\n     use stats::Stats;\n     use stats::Summary;\n-    use std::old_io;\n+    use std::old_io::{self, Writer};\n     use std::f64;\n \n     macro_rules! assert_approx_eq {"}, {"sha": "03fe2fd94dd527587e50ea7f88f3b480e582f1f4", "filename": "src/test/auxiliary/linkage-visibility.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -27,8 +27,7 @@ fn bar() { }\n fn baz() { }\n \n pub fn test() {\n-    let none: Option<&Path> = None; // appease the typechecker\n-    let lib = DynamicLibrary::open(none).unwrap();\n+    let lib = DynamicLibrary::open(None).unwrap();\n     unsafe {\n         assert!(lib.symbol::<int>(\"foo\").is_ok());\n         assert!(lib.symbol::<int>(\"baz\").is_err());"}, {"sha": "c2ea097ed751f73940981847e20f29821dc8ab8c", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -13,7 +13,8 @@\n \n #![feature(unboxed_closures)]\n \n-use std::old_io::File;\n+use std::old_io::*;\n+use std::old_path::{Path, GenericPath};\n use std::iter::repeat;\n use std::mem::swap;\n use std::env;"}, {"sha": "289f05a299b9942205dd8c763033d1d99ea02a1a", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -39,7 +39,7 @@\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n use std::cmp::min;\n-use std::old_io::{stdout, IoResult};\n+use std::old_io::*;\n use std::iter::repeat;\n use std::env;\n use std::slice::bytes::copy_memory;"}, {"sha": "df839fc27eec8ee6d8495dfd2a5e64f9fa150992", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -39,8 +39,9 @@\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n use std::cmp::min;\n-use std::old_io::{BufferedWriter, File};\n+use std::old_io::*;\n use std::old_io;\n+use std::old_path::Path;\n use std::num::Float;\n use std::env;\n "}, {"sha": "88c9f43f6ec7ca434334ab32cf7e7c8e3592aafb", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -147,7 +147,7 @@ fn make_sequence_processor(sz: uint,\n \n // given a FASTA file on stdin, process sequence THREE\n fn main() {\n-    use std::old_io::{stdio, MemReader, BufferedReader};\n+    use std::old_io::*;\n \n     let rdr = if env::var_os(\"RUST_BENCH\").is_some() {\n         let foo = include_bytes!(\"shootout-k-nucleotide.data\");"}, {"sha": "128c92921fa8616162c88743baf74f3ee01218a3", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -43,6 +43,7 @@\n // ignore-pretty very bad with line comments\n \n use std::old_io;\n+use std::old_io::*;\n use std::env;\n use std::simd::f64x2;\n use std::sync::Arc;"}, {"sha": "93aa5f2571bfbd30a138d928c0c3c0feb87735d0", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -45,7 +45,7 @@\n extern crate libc;\n \n use std::old_io::stdio::{stdin_raw, stdout_raw};\n-use std::old_io::{IoResult, EndOfFile};\n+use std::old_io::*;\n use std::ptr::{copy_memory, Unique};\n use std::thread;\n "}, {"sha": "5ddde6460b01f9504bf283aa53675e186bb65bf2", "filename": "src/test/compile-fail/cannot-mutate-captured-non-mut-var.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -10,14 +10,16 @@\n \n #![feature(unboxed_closures)]\n \n+use std::io::Read;\n+\n fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     let x = 1;\n     to_fn_once(move|| { x = 2; });\n     //~^ ERROR: cannot assign to immutable captured outer variable\n \n-    let s = std::old_io::stdin();\n-    to_fn_once(move|| { s.read_to_end(); });\n+    let s = std::io::stdin();\n+    to_fn_once(move|| { s.read_to_end(&mut Vec::new()); });\n     //~^ ERROR: cannot borrow immutable captured outer variable\n }"}, {"sha": "f78786a2889dab5df60ce1d813fef94b1f00b6b8", "filename": "src/test/compile-fail/issue-11374.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::old_io;\n+use std::io::{self, Read};\n use std::vec;\n \n pub struct Container<'a> {\n-    reader: &'a mut Reader\n+    reader: &'a mut Read\n }\n \n impl<'a> Container<'a> {\n-    pub fn wrap<'s>(reader: &'s mut Reader) -> Container<'s> {\n+    pub fn wrap<'s>(reader: &'s mut io::Read) -> Container<'s> {\n         Container { reader: reader }\n     }\n \n@@ -26,8 +26,8 @@ impl<'a> Container<'a> {\n }\n \n pub fn for_stdin<'a>() -> Container<'a> {\n-    let mut r = old_io::stdin();\n-    Container::wrap(&mut r as &mut Reader)\n+    let mut r = io::stdin();\n+    Container::wrap(&mut r as &mut io::Read)\n }\n \n fn main() {"}, {"sha": "fd69d2786b8d0800adb74bc000a7b73b638e1c0f", "filename": "src/test/run-make/cannot-read-embedded-idents/create_and_compile.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -9,7 +9,10 @@\n // except according to those terms.\n \n use std::env;\n-use std::old_io::{File, Command};\n+use std::fs::File;\n+use std::process::Command;\n+use std::io::Write;\n+use std::path::Path;\n \n // creates broken.rs, which has the Ident \\x00name_0,ctxt_0\\x00\n // embedded within it, and then attempts to compile broken.rs with the\n@@ -22,21 +25,18 @@ fn main() {\n \n     let main_file = tmpdir.join(\"broken.rs\");\n     let _ = File::create(&main_file).unwrap()\n-        .write_str(\"pub fn main() {\n+        .write_all(b\"pub fn main() {\n                    let \\x00name_0,ctxt_0\\x00 = 3;\n                    println!(\\\"{}\\\", \\x00name_0,ctxt_0\\x00);\n-        }\");\n+        }\").unwrap();\n \n     // rustc is passed to us with --out-dir and -L etc., so we\n     // can't exec it directly\n     let result = Command::new(\"sh\")\n         .arg(\"-c\")\n-        .arg(&format!(\"{} {}\",\n-                      rustc,\n-                      main_file.as_str()\n-                      .unwrap()))\n+        .arg(&format!(\"{} {}\", rustc, main_file.display()))\n         .output().unwrap();\n-    let err = String::from_utf8_lossy(&result.error);\n+    let err = String::from_utf8_lossy(&result.stderr);\n \n     // positive test so that this test will be updated when the\n     // compiler changes."}, {"sha": "86eed9dbe0a92e1ae9a151d137496261a68ced11", "filename": "src/test/run-make/extern-fn-reachable/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -10,6 +10,7 @@\n \n use std::dynamic_lib::DynamicLibrary;\n use std::os;\n+use std::old_path::Path;\n \n pub fn main() {\n     unsafe {"}, {"sha": "1826e035e245805964bf7ec8bc91d02ee85d4cb7", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::{char, env};\n-use std::old_io::{File, Command};\n+use std::fs::File;\n+use std::io::prelude::*;\n+use std::path::Path;\n+use std::process::Command;\n use std::rand::{thread_rng, Rng};\n+use std::{char, env};\n \n // creates unicode_input_multiple_files_{main,chars}.rs, where the\n // former imports the latter. `_chars` just contains an identifier\n@@ -40,15 +43,15 @@ fn main() {\n     let main_file = tmpdir.join(\"unicode_input_multiple_files_main.rs\");\n     {\n         let _ = File::create(&main_file).unwrap()\n-            .write_str(\"mod unicode_input_multiple_files_chars;\");\n+            .write_all(b\"mod unicode_input_multiple_files_chars;\").unwrap();\n     }\n \n     for _ in 0..100 {\n         {\n             let randoms = tmpdir.join(\"unicode_input_multiple_files_chars.rs\");\n             let mut w = File::create(&randoms).unwrap();\n             for _ in 0..30 {\n-                let _ = w.write_char(random_char());\n+                write!(&mut w, \"{}\", random_char()).unwrap();\n             }\n         }\n \n@@ -58,10 +61,9 @@ fn main() {\n                              .arg(\"-c\")\n                              .arg(&format!(\"{} {}\",\n                                            rustc,\n-                                           main_file.as_str()\n-                                                    .unwrap()))\n+                                           main_file.display()))\n                              .output().unwrap();\n-        let err = String::from_utf8_lossy(&result.error);\n+        let err = String::from_utf8_lossy(&result.stderr);\n \n         // positive test so that this test will be updated when the\n         // compiler changes."}, {"sha": "9ed20ccaea5c97c07dffc6abf6a60c2d1f759e5d", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -8,8 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::old_io::{File, Command};\n+use std::fs::File;\n+use std::io::prelude::*;\n use std::iter::repeat;\n+use std::path::Path;\n+use std::process::Command;\n use std::rand::{thread_rng, Rng};\n use std::{char, env};\n \n@@ -54,11 +57,11 @@ fn main() {\n                              .arg(\"-c\")\n                              .arg(&format!(\"{} {}\",\n                                            rustc,\n-                                           main_file.as_str()\n+                                           main_file.to_str()\n                                                     .unwrap()))\n                              .output().unwrap();\n \n-        let err = String::from_utf8_lossy(&result.error);\n+        let err = String::from_utf8_lossy(&result.stderr);\n \n         // the span should end the line (e.g no extra ~'s)\n         let expected_span = format!(\"^{}\\n\", repeat(\"~\").take(n - 1)\n@@ -73,17 +76,16 @@ fn main() {\n     }\n \n     // Extra characters. Every line is preceded by `filename:lineno <actual code>`\n-    let offset = main_file.as_str().unwrap().len() + 3;\n+    let offset = main_file.to_str().unwrap().len() + 3;\n \n     let result = Command::new(\"sh\")\n                          .arg(\"-c\")\n                          .arg(format!(\"{} {}\",\n                                       rustc,\n-                                      main_file.as_str()\n-                                               .unwrap()))\n+                                      main_file.display()))\n                          .output().unwrap();\n \n-    let err = String::from_utf8_lossy(result.error.as_slice());\n+    let err = String::from_utf8_lossy(&result.stderr);\n \n     // Test both the length of the snake and the leading spaces up to it\n "}, {"sha": "2a74e36aff3ddd8f34beb5dd2b8ad0a2b7f33e26", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -11,7 +11,8 @@\n // compile-flags:-g\n // ignore-pretty as this critically relies on line numbers\n \n-use std::old_io::stderr;\n+use std::io;\n+use std::io::prelude::*;\n use std::env;\n \n #[path = \"backtrace-debuginfo-aux.rs\"] mod aux;\n@@ -124,17 +125,18 @@ fn check_trace(output: &str, error: &str) {\n \n fn run_test(me: &str) {\n     use std::str;\n-    use std::old_io::process::Command;\n+    use std::process::Command;\n \n     let mut template = Command::new(me);\n     template.env(\"RUST_BACKTRACE\", \"1\");\n \n     let mut i = 0;\n     loop {\n-        let p = template.clone().arg(i.to_string()).spawn().unwrap();\n-        let out = p.wait_with_output().unwrap();\n-        let output = str::from_utf8(&out.output).unwrap();\n-        let error = str::from_utf8(&out.error).unwrap();\n+        let out = Command::new(me)\n+                          .env(\"RUST_BACKTRACE\", \"1\")\n+                          .arg(i.to_string()).output().unwrap();\n+        let output = str::from_utf8(&out.stdout).unwrap();\n+        let error = str::from_utf8(&out.stderr).unwrap();\n         if out.status.success() {\n             assert!(output.contains(\"done.\"), \"bad output for successful run: {}\", output);\n             break;\n@@ -150,7 +152,7 @@ fn main() {\n     let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 {\n         let case = args[1].parse().unwrap();\n-        writeln!(&mut stderr(), \"test case {}\", case).unwrap();\n+        writeln!(&mut io::stderr(), \"test case {}\", case).unwrap();\n         outer(case, pos!());\n         println!(\"done.\");\n     } else {"}, {"sha": "be5bb628b7294f3e1b43cca2edffabb2043904f7", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -19,7 +19,7 @@ extern crate log;\n use log::{set_logger, Logger, LogRecord};\n use std::sync::mpsc::channel;\n use std::fmt;\n-use std::old_io::{ChanReader, ChanWriter};\n+use std::old_io::{ChanReader, ChanWriter, Reader, Writer};\n use std::thread::Thread;\n \n struct MyWriter(ChanWriter);"}, {"sha": "35fe447c5e657335dc32faa7ae5f466880770591", "filename": "src/test/run-pass/colorful-write-macros.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -10,12 +10,11 @@\n \n // no-pretty-expanded\n \n-#![allow(unused_must_use, dead_code, deprecated)]\n-use std::old_io::MemWriter;\n+use std::io::Write;\n use std::fmt;\n \n struct Foo<'a> {\n-    writer: &'a mut (Writer+'a),\n+    writer: &'a mut (Write+'a),\n     other: &'a str,\n }\n \n@@ -32,8 +31,8 @@ fn borrowing_writer_from_struct_and_formatting_struct_field(foo: Foo) {\n }\n \n fn main() {\n-    let mut w = MemWriter::new();\n-    write!(&mut w as &mut Writer, \"\");\n+    let mut w = Vec::new();\n+    write!(&mut w as &mut Write, \"\");\n     write!(&mut w, \"\"); // should coerce\n     println!(\"ok\");\n "}, {"sha": "01e305581f14e6129e7ffb4d23eea60556b58b8a", "filename": "src/test/run-pass/into-iterator-type-inference-shift.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Finto-iterator-type-inference-shift.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Finto-iterator-type-inference-shift.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finto-iterator-type-inference-shift.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -31,7 +31,7 @@ impl<I> IntoIterator for I where I: Iterator {\n \n fn desugared_for_loop_bad(byte: u8) -> u8 {\n     let mut result = 0;\n-    let mut x = IntoIterator::into_iter(range(0, u8::BITS));\n+    let mut x = IntoIterator::into_iter(0..u8::BITS);\n     let mut y = Iterator::next(&mut x);\n     let mut z = y.unwrap();\n     byte >> z;"}, {"sha": "098fa54207f39d8e592fed0feac8daa076444f0f", "filename": "src/test/run-pass/issue-14940.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14940.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -9,12 +9,13 @@\n // except according to those terms.\n \n use std::env;\n-use std::old_io::{stdio, Command};\n+use std::process::Command;\n+use std::io::{self, Write};\n \n fn main() {\n     let mut args = env::args();\n     if args.len() > 1 {\n-        let mut out = stdio::stdout();\n+        let mut out = io::stdout();\n         out.write(&['a' as u8; 128 * 1024]).unwrap();\n     } else {\n         let out = Command::new(&args.next().unwrap()).arg(\"child\").output();"}, {"sha": "6d32ffd6c43ca31791d0889a54a5ac4172ea7ef1", "filename": "src/test/run-pass/issue-17121.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fissue-17121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fissue-17121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17121.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -8,31 +8,29 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::old_io::BufReader;\n-use std::old_io::BufferedReader;\n-use std::old_io::File;\n-use std::old_io::IoResult;\n+use std::fs::File;\n+use std::io::{self, BufReader, Read};\n \n-struct Lexer<R: Reader>\n+struct Lexer<R: Read>\n {\n-    reader: BufferedReader<R>,\n+    reader: BufReader<R>,\n }\n \n-impl<R: Reader> Lexer<R>\n+impl<R: Read> Lexer<R>\n {\n     pub fn new_from_reader(r: R) -> Lexer<R>\n     {\n-        Lexer{reader: BufferedReader::new(r)}\n+        Lexer{reader: BufReader::new(r)}\n     }\n \n-    pub fn new_from_file(p: Path) -> IoResult<Lexer<File>>\n+    pub fn new_from_file(p: &str) -> io::Result<Lexer<File>>\n     {\n-        Ok(Lexer::new_from_reader(try!(File::open(&p))))\n+        Ok(Lexer::new_from_reader(try!(File::open(p))))\n     }\n \n-    pub fn new_from_str<'a>(s: &'a str) -> Lexer<BufReader<'a>>\n+    pub fn new_from_str<'a>(s: &'a str) -> Lexer<&'a [u8]>\n     {\n-        Lexer::new_from_reader(BufReader::new(s.as_bytes()))\n+        Lexer::new_from_reader(s.as_bytes())\n     }\n }\n "}, {"sha": "83b91c93a865f57706d9a81a2b6a55e218bb832a", "filename": "src/test/run-pass/issue-20644.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fissue-20644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fissue-20644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20644.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -11,24 +11,25 @@\n // A reduced version of the rustbook ice. The problem this encountered\n // had to do with trans ignoring binders.\n \n-#![feature(associated_types)]\n-#![feature(macro_rules)]\n-\n use std::iter;\n use std::os;\n-use std::old_io::File;\n+use std::fs::File;\n+use std::io::prelude::*;\n+use std::env;\n+use std::path::Path;\n \n-#[allow(unused)]\n-pub fn parse_summary<R: Reader>(_: R, _: &Path) {\n+pub fn parse_summary<R: Read>(_: R, _: &Path) {\n      let path_from_root = Path::new(\"\");\n-     Path::new(iter::repeat(\"../\")\n+     Path::new(&iter::repeat(\"../\")\n                .take(path_from_root.components().count() - 1)\n                .collect::<String>());\n  }\n \n-fn main() {\n-    let cwd = os::getcwd().unwrap();\n+fn foo() {\n+    let cwd = env::current_dir().unwrap();\n     let src = cwd.clone();\n-    let summary = File::open(&src.join(\"SUMMARY.md\"));\n+    let summary = File::open(&src.join(\"SUMMARY.md\")).unwrap();\n     let _ = parse_summary(summary, &src);\n }\n+\n+fn main() {}"}, {"sha": "c5badb614948f4cc738be3a1c6f94127a90e7b31", "filename": "src/test/run-pass/issue-20797.rs", "status": "modified", "additions": 54, "deletions": 47, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20797.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -8,35 +8,40 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-android\n-// ignore-windows\n-\n // Regression test for #20797.\n \n use std::default::Default;\n-use std::old_io::IoResult;\n-use std::old_io::fs;\n-use std::old_io::fs::PathExtensions;\n+use std::io;\n+use std::fs;\n+use std::path::{PathBuf, Path};\n+\n+pub trait PathExtensions {\n+    fn is_dir(&self) -> bool { false }\n+}\n+\n+impl PathExtensions for PathBuf {}\n \n /// A strategy for acquiring more subpaths to walk.\n pub trait Strategy {\n-  type P: PathExtensions;\n-  /// Get additional subpaths from a given path.\n-  fn get_more(&self, item: &Self::P) -> IoResult<Vec<Self::P>>;\n-  /// Determine whether a path should be walked further.\n-  /// This is run against each item from `get_more()`.\n-  fn prune(&self, p: &Self::P) -> bool;\n+    type P: PathExtensions;\n+    /// Get additional subpaths from a given path.\n+    fn get_more(&self, item: &Self::P) -> io::Result<Vec<Self::P>>;\n+    /// Determine whether a path should be walked further.\n+    /// This is run against each item from `get_more()`.\n+    fn prune(&self, p: &Self::P) -> bool;\n }\n \n /// The basic fully-recursive strategy. Nothing is pruned.\n #[derive(Copy, Default)]\n pub struct Recursive;\n \n impl Strategy for Recursive {\n-  type P = Path;\n-  fn get_more(&self, p: &Path) -> IoResult<Vec<Path>> { fs::readdir(p) }\n+    type P = PathBuf;\n+    fn get_more(&self, p: &PathBuf) -> io::Result<Vec<PathBuf>> {\n+        Ok(fs::read_dir(p).unwrap().map(|s| s.unwrap().path()).collect())\n+    }\n \n-  fn prune(&self, _: &Path) -> bool { false }\n+    fn prune(&self, _: &PathBuf) -> bool { false }\n }\n \n /// A directory walker of `P` using strategy `S`.\n@@ -46,49 +51,51 @@ pub struct Subpaths<S: Strategy> {\n }\n \n impl<S: Strategy> Subpaths<S> {\n-  /// Create a directory walker with a root path and strategy.\n-  pub fn new(p: &S::P, strategy: S) -> IoResult<Subpaths<S>> {\n-    let stack = try!(strategy.get_more(p));\n-    Ok(Subpaths { stack: stack, strategy: strategy })\n-  }\n+    /// Create a directory walker with a root path and strategy.\n+    pub fn new(p: &S::P, strategy: S) -> io::Result<Subpaths<S>> {\n+        let stack = try!(strategy.get_more(p));\n+        Ok(Subpaths { stack: stack, strategy: strategy })\n+    }\n }\n \n impl<S: Default + Strategy> Subpaths<S> {\n-  /// Create a directory walker with a root path and a default strategy.\n-  pub fn walk(p: &S::P) -> IoResult<Subpaths<S>> {\n-      Subpaths::new(p, Default::default())\n-  }\n+    /// Create a directory walker with a root path and a default strategy.\n+    pub fn walk(p: &S::P) -> io::Result<Subpaths<S>> {\n+        Subpaths::new(p, Default::default())\n+    }\n }\n \n impl<S: Default + Strategy> Default for Subpaths<S> {\n-  fn default() -> Subpaths<S> {\n-    Subpaths { stack: Vec::new(), strategy: Default::default() }\n-  }\n+    fn default() -> Subpaths<S> {\n+        Subpaths { stack: Vec::new(), strategy: Default::default() }\n+    }\n }\n \n impl<S: Strategy> Iterator for Subpaths<S> {\n-  type Item = S::P;\n-  fn next (&mut self) -> Option<S::P> {\n-    let mut opt_path = self.stack.pop();\n-    while opt_path.is_some() && self.strategy.prune(opt_path.as_ref().unwrap()) {\n-      opt_path = self.stack.pop();\n-    }\n-    match opt_path {\n-      Some(path) => {\n-        if PathExtensions::is_dir(&path) {\n-          let result = self.strategy.get_more(&path);\n-          match result {\n-            Ok(dirs) => { self.stack.extend(dirs.into_iter()); },\n-            Err(..) => { }\n-          }\n+    type Item = S::P;\n+    fn next (&mut self) -> Option<S::P> {\n+        let mut opt_path = self.stack.pop();\n+        while opt_path.is_some() && self.strategy.prune(opt_path.as_ref().unwrap()) {\n+            opt_path = self.stack.pop();\n+        }\n+        match opt_path {\n+            Some(path) => {\n+                if path.is_dir() {\n+                    let result = self.strategy.get_more(&path);\n+                    match result {\n+                        Ok(dirs) => { self.stack.extend(dirs.into_iter()); },\n+                        Err(..) => { }\n+                    }\n+                }\n+                Some(path)\n+            }\n+            None => None,\n         }\n-        Some(path)\n-      }\n-      None => None,\n     }\n-  }\n }\n \n-fn main() {\n-  let mut walker: Subpaths<Recursive> = Subpaths::walk(&Path::new(\"/home\")).unwrap();\n+fn foo() {\n+    let mut walker: Subpaths<Recursive> = Subpaths::walk(&PathBuf::new(\"/home\")).unwrap();\n }\n+\n+fn main() {}"}, {"sha": "d30a0be5feeb5873e89ca062c59e89e1d914ad28", "filename": "src/test/run-pass/issue22346.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fissue22346.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fissue22346.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue22346.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -10,7 +10,7 @@\n \n // This used to cause an ICE because the retslot for the \"return\" had the wrong type\n fn testcase<'a>() -> Box<Iterator<Item=usize> + 'a> {\n-    return Box::new(range(0, 3).map(|i| { return i; }));\n+    return Box::new((0..3).map(|i| { return i; }));\n }\n \n fn main() {"}, {"sha": "72998133af19ddecd89565b0b708e0b050854acd", "filename": "src/test/run-pass/process-spawn-with-unicode-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -28,9 +28,9 @@ use std::path::{Path, PathBuf};\n \n fn main() {\n     let my_args = env::args().collect::<Vec<_>>();\n-    let my_cwd  = PathBuf::new(os::getcwd().unwrap().as_str().unwrap());\n+    let my_cwd  = env::current_dir().unwrap();\n     let my_env  = env::vars().collect::<Vec<_>>();\n-    let my_path = PathBuf::new(os::self_exe_name().unwrap().as_str().unwrap());\n+    let my_path = env::current_exe().unwrap();\n     let my_dir  = my_path.parent().unwrap();\n     let my_ext  = my_path.extension().and_then(|s| s.to_str()).unwrap_or(\"\");\n "}, {"sha": "656fe89896932bf159e146b975d7abada6dcb9ee", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 14, "deletions": 36, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -11,45 +11,23 @@\n // This test can't be a unit test in std,\n // because it needs TempDir, which is in extra\n \n-extern crate libc;\n-\n use std::ffi::CString;\n-use std::old_io::TempDir;\n-use std::old_io::fs::PathExtensions;\n-use std::old_io::fs;\n-use std::old_io;\n-use std::os;\n+use std::fs::{self, TempDir, File, PathExt};\n \n fn rename_directory() {\n-    unsafe {\n-        static U_RWX: i32 = (libc::S_IRUSR | libc::S_IWUSR | libc::S_IXUSR) as i32;\n-\n-        let tmpdir = TempDir::new(\"rename_directory\").ok().expect(\"rename_directory failed\");\n-        let tmpdir = tmpdir.path();\n-        let old_path = tmpdir.join_many(&[\"foo\", \"bar\", \"baz\"]);\n-        fs::mkdir_recursive(&old_path, old_io::USER_RWX);\n-        let test_file = &old_path.join(\"temp.txt\");\n-\n-        /* Write the temp input file */\n-        let fromp = CString::new(test_file.as_vec()).unwrap();\n-        let modebuf = CString::new(&b\"w+b\"[..]).unwrap();\n-        let ostream = libc::fopen(fromp.as_ptr(), modebuf.as_ptr());\n-        assert!((ostream as uint != 0));\n-        let s = \"hello\".to_string();\n-        let buf = CString::new(&b\"hello\"[..]).unwrap();\n-        let write_len = libc::fwrite(buf.as_ptr() as *mut _,\n-                                     1_usize as libc::size_t,\n-                                     (s.len() + 1_usize) as libc::size_t,\n-                                     ostream);\n-        assert_eq!(write_len, (s.len() + 1) as libc::size_t);\n-        assert_eq!(libc::fclose(ostream), (0_usize as libc::c_int));\n-\n-        let new_path = tmpdir.join_many(&[\"quux\", \"blat\"]);\n-        fs::mkdir_recursive(&new_path, old_io::USER_RWX);\n-        fs::rename(&old_path, &new_path.join(\"newdir\"));\n-        assert!(new_path.join(\"newdir\").is_dir());\n-        assert!(new_path.join_many(&[\"newdir\", \"temp.txt\"]).exists());\n-    }\n+    let tmpdir = TempDir::new(\"rename_directory\").ok().expect(\"rename_directory failed\");\n+    let tmpdir = tmpdir.path();\n+    let old_path = tmpdir.join(\"foo/bar/baz\");\n+    fs::create_dir_all(&old_path).unwrap();\n+    let test_file = &old_path.join(\"temp.txt\");\n+\n+    File::create(test_file).unwrap();\n+\n+    let new_path = tmpdir.join(\"quux/blat\");\n+    fs::create_dir_all(&new_path).unwrap();\n+    fs::rename(&old_path, &new_path.join(\"newdir\"));\n+    assert!(new_path.join(\"newdir\").is_dir());\n+    assert!(new_path.join(\"newdir/temp.txt\").exists());\n }\n \n pub fn main() { rename_directory() }"}, {"sha": "665b582581cfb88f42745995fd31e183c76452e0", "filename": "src/test/run-pass/sigpipe-should-be-ignored.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -11,18 +11,15 @@\n // Be sure that when a SIGPIPE would have been received that the entire process\n // doesn't die in a ball of fire, but rather it's gracefully handled.\n \n-use std::os;\n use std::env;\n-use std::old_io::PipeStream;\n-use std::old_io::Command;\n+use std::io::prelude::*;\n+use std::io;\n+use std::process::{Command, Stdio};\n \n fn test() {\n-    let os::Pipe { reader, writer } = unsafe { os::pipe().unwrap() };\n-    let reader = PipeStream::open(reader);\n-    let mut writer = PipeStream::open(writer);\n-    drop(reader);\n-\n-    let _ = writer.write(&[1]);\n+    let _ = io::stdin().read_line(&mut String::new());\n+    io::stdout().write(&[1]);\n+    assert!(io::stdout().flush().is_err());\n }\n \n fn main() {\n@@ -32,6 +29,9 @@ fn main() {\n     }\n \n     let mut p = Command::new(&args[0])\n+                        .stdout(Stdio::piped())\n+                        .stdin(Stdio::piped())\n                         .arg(\"test\").spawn().unwrap();\n+    drop(p.stdout.take());\n     assert!(p.wait().unwrap().success());\n }"}, {"sha": "1ccc189dc81808f7479e5c03d6afab77ab20cf5b", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -8,25 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::old_io::fs::PathExtensions;\n-use std::old_io::{File, TempDir};\n+use std::fs::{File, TempDir};\n+use std::io::prelude::*;\n \n pub fn main() {\n-    let dir = TempDir::new_in(&Path::new(\".\"), \"\").unwrap();\n+    let dir = TempDir::new_in(\".\", \"\").unwrap();\n     let path = dir.path().join(\"file\");\n \n     {\n         match File::create(&path) {\n             Err(..) => unreachable!(),\n             Ok(f) => {\n                 let mut f = f;\n-                for _ in 0_usize..1000 {\n+                for _ in 0..1000 {\n                     f.write(&[0]);\n                 }\n             }\n         }\n     }\n \n     assert!(path.exists());\n-    assert_eq!(path.stat().unwrap().size, 1000);\n+    assert_eq!(path.metadata().unwrap().len(), 1000);\n }"}, {"sha": "e06e6883a75aa4d2e05532280d2c7ed6ca33f9ce", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -19,7 +19,7 @@ extern crate libc;\n \n use std::sync::mpsc::channel;\n use std::old_io::net::tcp::{TcpListener, TcpStream};\n-use std::old_io::{Acceptor, Listener};\n+use std::old_io::{Acceptor, Listener, Reader, Writer};\n use std::thread::{Builder, Thread};\n use std::time::Duration;\n "}, {"sha": "bc655837babb9d74a35b9ee73576afacb4fa8106", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -18,6 +18,7 @@\n // they're in a different location than before. Hence, these tests are all run\n // serially here.\n \n+use std::old_path::{Path, GenericPath};\n use std::old_io::fs::PathExtensions;\n use std::old_io::{fs, TempDir};\n use std::old_io;"}, {"sha": "d1af6b746ac421af95a2016adbf4714d226f61c8", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212e03181e422f569b6426bc08b713a9efc0d0eb/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=212e03181e422f569b6426bc08b713a9efc0d0eb", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-use std::old_io;\n+use std::io::{self, Write};\n \n trait Trait {\n     fn f(&self);\n@@ -29,9 +28,7 @@ impl Trait for Struct {\n     }\n }\n \n-fn foo(mut a: Box<Writer>) {\n-    a.write(b\"Hello\\n\");\n-}\n+fn foo(mut a: Box<Write>) {}\n \n // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n@@ -42,6 +39,6 @@ pub fn main() {\n     let c: &Trait = &a;\n     c.f();\n \n-    let out = old_io::stdout();\n+    let out = io::stdout();\n     foo(Box::new(out));\n }"}]}