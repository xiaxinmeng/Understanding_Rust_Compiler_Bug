{"sha": "ff047a8a25738badbb88b97edf0f8108b4bc356b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMDQ3YThhMjU3MzhiYWRiYjg4Yjk3ZWRmMGY4MTA4YjRiYzM1NmI=", "commit": {"author": {"name": "Hunter Praska", "email": "hunter@wiggin-labs.com", "date": "2017-08-16T23:46:48Z"}, "committer": {"name": "Hunter Praska", "email": "hunter@wiggin-labs.com", "date": "2017-08-16T23:46:48Z"}, "message": "Use direct references to CompilerDesugaringKind", "tree": {"sha": "63792345de00452d407ca805c6af0859989c3479", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63792345de00452d407ca805c6af0859989c3479"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff047a8a25738badbb88b97edf0f8108b4bc356b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niH4EABMJAAYFAlmU2YcACgkQPJ616gy8RBeOZwF+JmMryubuaEbsWMlqD/CVQeQ+\nnlX7EtlQb6K2Kz3jJFP8bHZWB+AQlxIEGF371O3dAYDUVS3Tb9bVi+TmqwvvCzkm\nsZ49xaZqbGMwFck7lZa53hH5MaMjmf6fFqW2QwHwZXQ=\n=caFL\n-----END PGP SIGNATURE-----", "payload": "tree 63792345de00452d407ca805c6af0859989c3479\nparent 4acfef8f6319a1ae724ba174b4d87e0988d7e47d\nauthor Hunter Praska <hunter@wiggin-labs.com> 1502927208 -0500\ncommitter Hunter Praska <hunter@wiggin-labs.com> 1502927208 -0500\n\nUse direct references to CompilerDesugaringKind\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff047a8a25738badbb88b97edf0f8108b4bc356b", "html_url": "https://github.com/rust-lang/rust/commit/ff047a8a25738badbb88b97edf0f8108b4bc356b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff047a8a25738badbb88b97edf0f8108b4bc356b/comments", "author": {"login": "huntiep", "id": 28681177, "node_id": "MDQ6VXNlcjI4NjgxMTc3", "avatar_url": "https://avatars.githubusercontent.com/u/28681177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huntiep", "html_url": "https://github.com/huntiep", "followers_url": "https://api.github.com/users/huntiep/followers", "following_url": "https://api.github.com/users/huntiep/following{/other_user}", "gists_url": "https://api.github.com/users/huntiep/gists{/gist_id}", "starred_url": "https://api.github.com/users/huntiep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huntiep/subscriptions", "organizations_url": "https://api.github.com/users/huntiep/orgs", "repos_url": "https://api.github.com/users/huntiep/repos", "events_url": "https://api.github.com/users/huntiep/events{/privacy}", "received_events_url": "https://api.github.com/users/huntiep/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huntiep", "id": 28681177, "node_id": "MDQ6VXNlcjI4NjgxMTc3", "avatar_url": "https://avatars.githubusercontent.com/u/28681177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huntiep", "html_url": "https://github.com/huntiep", "followers_url": "https://api.github.com/users/huntiep/followers", "following_url": "https://api.github.com/users/huntiep/following{/other_user}", "gists_url": "https://api.github.com/users/huntiep/gists{/gist_id}", "starred_url": "https://api.github.com/users/huntiep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huntiep/subscriptions", "organizations_url": "https://api.github.com/users/huntiep/orgs", "repos_url": "https://api.github.com/users/huntiep/repos", "events_url": "https://api.github.com/users/huntiep/events{/privacy}", "received_events_url": "https://api.github.com/users/huntiep/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4acfef8f6319a1ae724ba174b4d87e0988d7e47d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4acfef8f6319a1ae724ba174b4d87e0988d7e47d", "html_url": "https://github.com/rust-lang/rust/commit/4acfef8f6319a1ae724ba174b4d87e0988d7e47d"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "1fc780952d272dce0cd5aeaee2b0a86bdbc8b111", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ff047a8a25738badbb88b97edf0f8108b4bc356b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff047a8a25738badbb88b97edf0f8108b4bc356b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ff047a8a25738badbb88b97edf0f8108b4bc356b", "patch": "@@ -59,7 +59,7 @@ use syntax::ast::*;\n use syntax::errors;\n use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::ptr::P;\n-use syntax::codemap::{self, respan, Spanned};\n+use syntax::codemap::{self, respan, Spanned, CompilerDesugaringKind};\n use syntax::std_inject;\n use syntax::symbol::{Symbol, keywords};\n use syntax::util::small_vector::SmallVector;\n@@ -396,8 +396,9 @@ impl<'a> LoweringContext<'a> {\n         Symbol::gensym(s)\n     }\n \n-    fn allow_internal_unstable(&self, reason: &'static str, mut span: Span) -> Span {\n-        let reason = codemap::CompilerDesugaringKind::from(reason);\n+    fn allow_internal_unstable(&self, reason: CompilerDesugaringKind, mut span: Span)\n+        -> Span\n+    {\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(codemap::ExpnInfo {\n             call_site: span,\n@@ -1763,7 +1764,8 @@ impl<'a> LoweringContext<'a> {\n                 let move_val_init = [\"intrinsics\", \"move_val_init\"];\n                 let inplace_finalize = [\"ops\", \"InPlace\", \"finalize\"];\n \n-                let unstable_span = self.allow_internal_unstable(\"<-\", e.span);\n+                let unstable_span =\n+                    self.allow_internal_unstable(CompilerDesugaringKind::BackArrow, e.span);\n                 let make_call = |this: &mut LoweringContext, p, args| {\n                     let path = P(this.expr_std_path(unstable_span, p, ThinVec::new()));\n                     P(this.expr_call(e.span, path, args))\n@@ -1976,12 +1978,14 @@ impl<'a> LoweringContext<'a> {\n                     e1.iter().map(|e| (\"start\", e)).chain(e2.iter().map(|e| (\"end\", e)))\n                     .map(|(s, e)| {\n                         let expr = P(self.lower_expr(&e));\n-                        let unstable_span = self.allow_internal_unstable(\"...\", e.span);\n+                        let unstable_span =\n+                            self.allow_internal_unstable(CompilerDesugaringKind::DotFill, e.span);\n                         self.field(Symbol::intern(s), expr, unstable_span)\n                     }).collect::<P<[hir::Field]>>();\n \n                 let is_unit = fields.is_empty();\n-                let unstable_span = self.allow_internal_unstable(\"...\", e.span);\n+                let unstable_span =\n+                    self.allow_internal_unstable(CompilerDesugaringKind::DotFill, e.span);\n                 let struct_path =\n                     iter::once(\"ops\").chain(iter::once(path))\n                     .collect::<Vec<_>>();\n@@ -2317,7 +2321,8 @@ impl<'a> LoweringContext<'a> {\n                 //                 return Try::from_error(From::from(err)),\n                 // }\n \n-                let unstable_span = self.allow_internal_unstable(\"?\", e.span);\n+                let unstable_span =\n+                    self.allow_internal_unstable(CompilerDesugaringKind::QuestionMark, e.span);\n \n                 // Try::into_result(<expr>)\n                 let discr = {"}, {"sha": "4ebde2a01c229ff84481bde5504fd8165f598070", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff047a8a25738badbb88b97edf0f8108b4bc356b/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff047a8a25738badbb88b97edf0f8108b4bc356b/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=ff047a8a25738badbb88b97edf0f8108b4bc356b", "patch": "@@ -360,18 +360,6 @@ impl CompilerDesugaringKind {\n     }\n }\n \n-impl<'a> From<&'a str> for CompilerDesugaringKind {\n-    fn from(s: &'a str) -> Self {\n-        use CompilerDesugaringKind::*;\n-        match s {\n-            \"<-\" => BackArrow,\n-            \"...\" => DotFill,\n-            \"?\" => QuestionMark,\n-            _ => panic!(\"Invalid compiler desugaring\"),\n-        }\n-    }\n-}\n-\n impl Encodable for SyntaxContext {\n     fn encode<E: Encoder>(&self, _: &mut E) -> Result<(), E::Error> {\n         Ok(()) // FIXME(jseyfried) intercrate hygiene"}]}