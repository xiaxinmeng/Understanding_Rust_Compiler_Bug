{"sha": "e2d7e904ca621b72a7445e666baba4b282d2bb7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZDdlOTA0Y2E2MjFiNzJhNzQ0NWU2NjZiYWJhNGIyODJkMmJiN2Q=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-29T06:03:47Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-30T09:40:17Z"}, "message": "Remove Typer + ClosureTyper impls for ParameterEnv", "tree": {"sha": "c84af7854960ef712a986122fc9b2d66fbccae3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c84af7854960ef712a986122fc9b2d66fbccae3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d7e904ca621b72a7445e666baba4b282d2bb7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d7e904ca621b72a7445e666baba4b282d2bb7d", "html_url": "https://github.com/rust-lang/rust/commit/e2d7e904ca621b72a7445e666baba4b282d2bb7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d7e904ca621b72a7445e666baba4b282d2bb7d/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb295a60b37fc2bc60fab29fad1863a174fa587c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb295a60b37fc2bc60fab29fad1863a174fa587c", "html_url": "https://github.com/rust-lang/rust/commit/fb295a60b37fc2bc60fab29fad1863a174fa587c"}], "stats": {"total": 177, "additions": 60, "deletions": 117}, "files": [{"sha": "139750af6284abfb9746c07e13bf0b83d376e2d7", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -111,13 +111,16 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n \n     fn with_euv<'b, F, R>(&'b mut self, item_id: Option<ast::NodeId>, f: F) -> R where\n         F: for<'t> FnOnce(&mut euv::ExprUseVisitor<'b, 't, 'tcx,\n-                                    ty::ParameterEnvironment<'a, 'tcx>>) -> R,\n+                                    infer::InferCtxt<'a, 'tcx>>) -> R,\n     {\n         let param_env = match item_id {\n             Some(item_id) => ty::ParameterEnvironment::for_item(self.tcx, item_id),\n             None => self.tcx.empty_parameter_environment()\n         };\n-        f(&mut euv::ExprUseVisitor::new(self, &param_env))\n+\n+        let infcx = infer::new_infer_ctxt(self.tcx, &self.tcx.tables, Some(param_env), false);\n+\n+        f(&mut euv::ExprUseVisitor::new(self, &infcx))\n     }\n \n     fn global_expr(&mut self, mode: Mode, expr: &ast::Expr) -> ConstQualif {\n@@ -287,7 +290,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         let cause = traits::ObligationCause::new(e.span, e.id, traits::SharedStatic);\n         let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n         fulfill_cx.register_builtin_bound(&infcx, ty, ty::BoundSync, cause);\n-        match fulfill_cx.select_all_or_error(&infcx, &infcx.parameter_environment) {\n+        match fulfill_cx.select_all_or_error(&infcx, &infcx) {\n             Ok(()) => { },\n             Err(ref errors) => {\n                 traits::report_fulfillment_errors(&infcx, errors);"}, {"sha": "900a231835e597e367cc9a149a84e3d58c589295", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -20,6 +20,7 @@ use middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Init};\n use middle::expr_use_visitor::{JustWrite, LoanCause, MutateMode};\n use middle::expr_use_visitor::WriteAndRead;\n use middle::expr_use_visitor as euv;\n+use middle::infer;\n use middle::mem_categorization::{cmt, Typer};\n use middle::pat_util::*;\n use middle::ty::*;\n@@ -1111,7 +1112,9 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n                 match p.node {\n                     ast::PatIdent(ast::BindByValue(_), _, ref sub) => {\n                         let pat_ty = tcx.node_id_to_type(p.id);\n-                        if cx.param_env.type_moves_by_default(pat_ty, pat.span) {\n+                        //FIXME: (@jroesch) this code should be floated up as well\n+                        let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, Some(cx.param_env.clone()), false);\n+                        if infcx.type_moves_by_default(pat_ty, pat.span) {\n                             check_move(p, sub.as_ref().map(|p| &**p));\n                         }\n                     }\n@@ -1139,8 +1142,9 @@ fn check_for_mutation_in_guard<'a, 'tcx>(cx: &'a MatchCheckCtxt<'a, 'tcx>,\n     let mut checker = MutationChecker {\n         cx: cx,\n     };\n-    let mut visitor = ExprUseVisitor::new(&mut checker,\n-                                          &checker.cx.param_env);\n+\n+    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, Some(checker.cx.param_env.clone()), false);\n+    let mut visitor = ExprUseVisitor::new(&mut checker, &infcx);\n     visitor.walk_expr(guard);\n }\n "}, {"sha": "23accf88dc9d303bc0fbc0e89d8ef02e2d16201a", "filename": "src/librustc/middle/check_rvalues.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -12,6 +12,7 @@\n // is the public starting point.\n \n use middle::expr_use_visitor as euv;\n+use middle::infer;\n use middle::mem_categorization as mc;\n use middle::ty::ParameterEnvironment;\n use middle::ty;\n@@ -38,9 +39,11 @@ impl<'a, 'tcx, 'v> visit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n                 s: Span,\n                 fn_id: ast::NodeId) {\n         {\n+            // FIXME (@jroesch) change this to be an inference context\n             let param_env = ParameterEnvironment::for_item(self.tcx, fn_id);\n-            let mut delegate = RvalueContextDelegate { tcx: self.tcx, param_env: &param_env };\n-            let mut euv = euv::ExprUseVisitor::new(&mut delegate, &param_env);\n+            let infcx = infer::new_infer_ctxt(self.tcx, &self.tcx.tables, Some(param_env), false);\n+            let mut delegate = RvalueContextDelegate { tcx: self.tcx, param_env: &infcx.parameter_environment };\n+            let mut euv = euv::ExprUseVisitor::new(&mut delegate, &infcx);\n             euv.walk_fn(fd, b);\n         }\n         visit::walk_fn(self, fk, fd, b, s)"}, {"sha": "b98864304d25e0c9046905653b722ddba30211eb", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -1033,7 +1033,7 @@ fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n     tcx.populate_implementations_for_trait_if_necessary(trait_ref.def_id());\n     let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, false);\n \n-    let mut selcx = traits::SelectionContext::new(&infcx, &infcx.parameter_environment);\n+    let mut selcx = traits::SelectionContext::new(&infcx, &infcx);\n     let obligation = traits::Obligation::new(traits::ObligationCause::dummy(),\n                                              trait_ref.to_poly_trait_predicate());\n     let selection = match selcx.select(&obligation) {"}, {"sha": "31bfc01886c0fc5cb2f223dac4410953124a2f66", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -525,7 +525,7 @@ impl<'a, 'tcx> mc::Typer<'tcx> for InferCtxt<'a, 'tcx> {\n     }\n \n     fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<CodeExtent> {\n-        self.parameter_environment.temporary_scope(rvalue_id)\n+        self.tcx.region_maps.temporary_scope(rvalue_id)\n     }\n \n     fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture> {"}, {"sha": "25b336f0c7a6a9e3686872ff7b93eb0ec3d3dd08", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -38,8 +38,7 @@ pub fn overlapping_impls(infcx: &InferCtxt,\n            impl1_def_id,\n            impl2_def_id);\n \n-    let param_env = &infcx.tcx.empty_parameter_environment();\n-    let selcx = &mut SelectionContext::intercrate(infcx, param_env);\n+    let selcx = &mut SelectionContext::intercrate(infcx, infcx);\n     infcx.probe(|_| {\n         overlap(selcx, impl1_def_id, impl2_def_id) || overlap(selcx, impl2_def_id, impl1_def_id)\n     })"}, {"sha": "8c065e182cd4129d8b00beae189545e8529b5828", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -398,7 +398,7 @@ pub fn normalize_param_env_or_error<'a,'tcx>(unnormalized_env: ty::ParameterEnvi\n     let elaborated_env = unnormalized_env.with_caller_bounds(predicates);\n \n     let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(elaborated_env), false);\n-    let predicates = match fully_normalize(&infcx, &infcx.parameter_environment, cause,\n+    let predicates = match fully_normalize(&infcx, &infcx, cause,\n                                            &infcx.parameter_environment.caller_bounds) {\n         Ok(predicates) => predicates,\n         Err(errors) => {"}, {"sha": "23aa840703bbfbb9bc94c30be34330d23eddfe7e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 80, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -52,7 +52,6 @@ use middle::dependency_format;\n use middle::fast_reject;\n use middle::free_region::FreeRegionMap;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n-use middle::mem_categorization as mc;\n use middle::mem_categorization::Typer;\n use middle::region;\n use middle::resolve_lifetime;\n@@ -2919,11 +2918,14 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                                    -> Result<(),CopyImplementationError> {\n         let tcx = self.tcx;\n \n+        // FIXME: (@jroesch) float this code up\n+        let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(self.clone()), false);\n+\n         let did = match self_type.sty {\n             ty::TyStruct(struct_did, substs) => {\n                 let fields = tcx.struct_fields(struct_did, substs);\n                 for field in &fields {\n-                    if self.type_moves_by_default(field.mt.ty, span) {\n+                    if infcx.type_moves_by_default(field.mt.ty, span) {\n                         return Err(FieldDoesNotImplementCopy(field.name))\n                     }\n                 }\n@@ -2935,7 +2937,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                     for variant_arg_type in &variant.args {\n                         let substd_arg_type =\n                             variant_arg_type.subst(tcx, substs);\n-                        if self.type_moves_by_default(substd_arg_type, span) {\n+                        if infcx.type_moves_by_default(substd_arg_type, span) {\n                             return Err(VariantDoesNotImplementCopy(variant.name))\n                         }\n                     }\n@@ -4272,7 +4274,8 @@ impl<'tcx> TyS<'tcx> {\n                 TyClosure(did, substs) => {\n                     // FIXME(#14449): `borrowed_contents` below assumes `&mut` closure.\n                     let param_env = cx.empty_parameter_environment();\n-                    let upvars = param_env.closure_upvars(did, substs).unwrap();\n+                    let infcx = infer::new_infer_ctxt(cx, &cx.tables, Some(param_env), false);\n+                    let upvars = infcx.closure_upvars(did, substs).unwrap();\n                     TypeContents::union(&upvars, |f| tc_ty(cx, &f.ty, cache))\n                 }\n \n@@ -4400,10 +4403,10 @@ impl<'tcx> TyS<'tcx> {\n                        span: Span)\n                        -> bool\n     {\n-        let tcx = param_env.tcx();\n+        let tcx = param_env.tcx;\n         let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(param_env.clone()), false);\n \n-        let is_impld = traits::type_known_to_meet_builtin_bound(&infcx, param_env,\n+        let is_impld = traits::type_known_to_meet_builtin_bound(&infcx, &infcx,\n                                                                 self, bound, span);\n \n         debug!(\"Ty::impls_bound({:?}, {:?}) = {:?}\",\n@@ -4412,7 +4415,8 @@ impl<'tcx> TyS<'tcx> {\n         is_impld\n     }\n \n-    fn moves_by_default<'a>(&'tcx self, param_env: &ParameterEnvironment<'a,'tcx>,\n+    // temp hack, probably should be private\n+    pub fn moves_by_default<'a>(&'tcx self, param_env: &ParameterEnvironment<'a,'tcx>,\n                            span: Span) -> bool {\n         if self.flags.get().intersects(TypeFlags::MOVENESS_CACHED) {\n             return self.flags.get().intersects(TypeFlags::MOVES_BY_DEFAULT);\n@@ -6711,79 +6715,6 @@ impl<'tcx> ctxt<'tcx> {\n     }\n }\n \n-impl<'a,'tcx> Typer<'tcx> for ParameterEnvironment<'a,'tcx> {\n-    fn node_ty(&self, id: ast::NodeId) -> mc::McResult<Ty<'tcx>> {\n-        Ok(self.tcx.node_id_to_type(id))\n-    }\n-\n-    fn expr_ty_adjusted(&self, expr: &ast::Expr) -> mc::McResult<Ty<'tcx>> {\n-        Ok(self.tcx.expr_ty_adjusted(expr))\n-    }\n-\n-    fn node_method_ty(&self, method_call: ty::MethodCall) -> Option<Ty<'tcx>> {\n-        self.tcx.tables.borrow().method_map.get(&method_call).map(|method| method.ty)\n-    }\n-\n-    fn node_method_origin(&self, method_call: ty::MethodCall)\n-                          -> Option<ty::MethodOrigin<'tcx>>\n-    {\n-        self.tcx.tables.borrow().method_map.get(&method_call).map(|method| method.origin.clone())\n-    }\n-\n-    fn adjustments(&self) -> Ref<NodeMap<ty::AutoAdjustment<'tcx>>> {\n-        fn projection<'a, 'tcx>(tables: &'a Tables<'tcx>) -> &'a NodeMap<ty::AutoAdjustment<'tcx>> {\n-            &tables.adjustments\n-        }\n-\n-        Ref::map(self.tcx.tables.borrow(), projection)\n-    }\n-\n-    fn is_method_call(&self, id: ast::NodeId) -> bool {\n-        self.tcx.is_method_call(id)\n-    }\n-\n-    fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<region::CodeExtent> {\n-        self.tcx.region_maps.temporary_scope(rvalue_id)\n-    }\n-\n-    fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture> {\n-        self.tcx.upvar_capture(upvar_id)\n-    }\n-\n-    fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool {\n-        ty.moves_by_default(self, span)\n-    }\n-}\n-\n-impl<'a,'tcx> ClosureTyper<'tcx> for ty::ParameterEnvironment<'a,'tcx> {\n-    fn param_env<'b>(&'b self) -> &'b ty::ParameterEnvironment<'b,'tcx> {\n-        self\n-    }\n-\n-    fn closure_kind(&self,\n-                    def_id: ast::DefId)\n-                    -> Option<ty::ClosureKind>\n-    {\n-        Some(self.tcx.closure_kind(def_id))\n-    }\n-\n-    fn closure_type(&self,\n-                    def_id: ast::DefId,\n-                    substs: &subst::Substs<'tcx>)\n-                    -> ty::ClosureTy<'tcx>\n-    {\n-        self.tcx.closure_type(def_id, substs)\n-    }\n-\n-    fn closure_upvars(&self,\n-                      def_id: ast::DefId,\n-                      substs: &Substs<'tcx>)\n-                      -> Option<Vec<ClosureUpvar<'tcx>>> {\n-        ctxt::closure_upvars(self, def_id, substs)\n-    }\n-}\n-\n-\n /// The category of explicit self.\n #[derive(Clone, Copy, Eq, PartialEq, Debug)]\n pub enum ExplicitSelfCategory {"}, {"sha": "7c2318eef9cdd067157a9a2068582ce94ec9eb79", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -21,6 +21,7 @@ use self::UseError::*;\n use borrowck::*;\n use borrowck::InteriorKind::{InteriorElement, InteriorField};\n use rustc::middle::expr_use_visitor as euv;\n+use rustc::middle::infer;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::region;\n use rustc::middle::ty;\n@@ -198,17 +199,18 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     debug!(\"check_loans(body id={})\", body.id);\n \n     let param_env = ty::ParameterEnvironment::for_item(bccx.tcx, fn_id);\n+    let infcx = infer::new_infer_ctxt(bccx.tcx, &bccx.tcx.tables, Some(param_env), false);\n \n     let mut clcx = CheckLoanCtxt {\n         bccx: bccx,\n         dfcx_loans: dfcx_loans,\n         move_data: move_data,\n         all_loans: all_loans,\n-        param_env: &param_env,\n+        param_env: &infcx.parameter_environment\n     };\n \n     {\n-        let mut euv = euv::ExprUseVisitor::new(&mut clcx, &param_env);\n+        let mut euv = euv::ExprUseVisitor::new(&mut clcx, &infcx);\n         euv.walk_fn(decl, body);\n     }\n }"}, {"sha": "432d6289efec5a017d8d1144cc7662578138bb9a", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -19,6 +19,7 @@\n use borrowck::*;\n use borrowck::move_data::MoveData;\n use rustc::middle::expr_use_visitor as euv;\n+use rustc::middle::infer;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::region;\n use rustc::middle::ty;\n@@ -49,9 +50,9 @@ pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     };\n \n     let param_env = ty::ParameterEnvironment::for_item(bccx.tcx, fn_id);\n-\n+    let infcx = infer::new_infer_ctxt(bccx.tcx, &bccx.tcx.tables, Some(param_env), false);\n     {\n-        let mut euv = euv::ExprUseVisitor::new(&mut glcx, &param_env);\n+        let mut euv = euv::ExprUseVisitor::new(&mut glcx, &infcx);\n         euv.walk_fn(decl, body);\n     }\n \n@@ -490,8 +491,8 @@ struct StaticInitializerCtxt<'a, 'tcx: 'a> {\n impl<'a, 'tcx, 'v> Visitor<'v> for StaticInitializerCtxt<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &Expr) {\n         if let ast::ExprAddrOf(mutbl, ref base) = ex.node {\n-            let param_env = self.bccx.tcx.empty_parameter_environment();\n-            let mc = mc::MemCategorizationContext::new(&param_env);\n+            let infcx = infer::new_infer_ctxt(self.bccx.tcx, &self.bccx.tcx.tables, None, false);\n+            let mc = mc::MemCategorizationContext::new(&infcx);\n             let base_cmt = mc.cat_expr(&**base).unwrap();\n             let borrow_kind = ty::BorrowKind::from_mutbl(mutbl);\n             // Check that we don't allow borrows of unsafe static items."}, {"sha": "3cf2a62b3b6748bcda6c5fbf90b02e3e21735f34", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -747,7 +747,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                     -> (&'static str, &'static str) {\n             match ty.sty {\n                 _ => {\n-                    if param_env.type_moves_by_default(ty, span) {\n+                    if ty.moves_by_default(param_env, span) {\n                         (\"non-copyable\",\n                          \"perhaps you meant to use `clone()`?\")\n                     } else {"}, {"sha": "5661109ab45554c2475e07808625ac6e70987d8b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -1704,7 +1704,9 @@ impl LintPass for MissingCopyImplementations {\n             _ => return,\n         };\n         let parameter_environment = cx.tcx.empty_parameter_environment();\n-        if !parameter_environment.type_moves_by_default(ty, item.span) {\n+        // FIXME (@jroesch) should probably inver this so that the parameter env still impls this\n+        // method\n+        if !ty.moves_by_default(&parameter_environment, item.span) {\n             return;\n         }\n         if parameter_environment.can_type_implement_copy(ty, item.span).is_ok() {"}, {"sha": "9b293f7b1a783948551a03da0169a33f9c8355e7", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -197,7 +197,6 @@ use middle::def::{self, DefMap};\n use middle::expr_use_visitor as euv;\n use middle::lang_items::StrEqFnLangItem;\n use middle::mem_categorization as mc;\n-use middle::mem_categorization::Typer;\n use middle::pat_util::*;\n use trans::adt;\n use trans::base::*;\n@@ -1416,7 +1415,7 @@ fn create_bindings_map<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, pat: &ast::Pat,\n         let trmode;\n         match bm {\n             ast::BindByValue(_)\n-                if !param_env.type_moves_by_default(variable_ty, span) || reassigned =>\n+                if !variable_ty.moves_by_default(&param_env, span) || reassigned =>\n             {\n                 llmatch = alloca_no_lifetime(bcx,\n                                  llvariable_ty.ptr_to(),"}, {"sha": "d4f318a4258c3caa2d8be7b9fe3b09d6011fd230", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -154,7 +154,7 @@ fn type_needs_drop_given_env<'a,'tcx>(cx: &ty::ctxt<'tcx>,\n     // normalized version of the type, and therefore will definitely\n     // know whether the type implements Copy (and thus needs no\n     // cleanup/drop/zeroing) ...\n-    let implements_copy = !param_env.type_moves_by_default(ty, DUMMY_SP);\n+    let implements_copy = !ty.moves_by_default(param_env, DUMMY_SP);\n \n     if implements_copy { return false; }\n \n@@ -630,7 +630,7 @@ impl<'blk, 'tcx> mc::Typer<'tcx> for BlockS<'blk, 'tcx> {\n     }\n \n     fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool {\n-        self.fcx.param_env.type_moves_by_default(ty, span)\n+        ty.moves_by_default(&self.fcx.param_env, span)\n     }\n }\n "}, {"sha": "c0ebffb58afcf088ed10c9fab0cf63167261eda0", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -101,7 +101,6 @@ use trans::cleanup::CleanupMethods;\n use trans::expr;\n use trans::tvec;\n use trans::type_of;\n-use middle::mem_categorization::Typer;\n use middle::ty::Ty;\n \n use std::fmt;\n@@ -606,8 +605,8 @@ impl<'tcx, K: KindOps + fmt::Debug> Datum<'tcx, K> {\n          * affine values (since they must never be duplicated).\n          */\n \n-        assert!(!bcx.tcx().empty_parameter_environment()\n-                          .type_moves_by_default(self.ty, DUMMY_SP));\n+        assert!(!self.ty\n+                     .moves_by_default(&bcx.tcx().empty_parameter_environment(), DUMMY_SP));\n         self.shallow_copy_raw(bcx, dst)\n     }\n "}, {"sha": "c05b95f4aeb25b39dc35fc844a6dc58a5ae96cf9", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -246,7 +246,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     debug!(\"compare_impl_method: trait_bounds={:?}\",\n         infcx.parameter_environment.caller_bounds);\n \n-    let mut selcx = traits::SelectionContext::new(&infcx, &infcx.parameter_environment);\n+    let mut selcx = traits::SelectionContext::new(&infcx, &infcx);\n \n     for predicate in impl_pred.fns {\n         let traits::Normalized { value: predicate, .. } =\n@@ -293,7 +293,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n             impl_sig.subst(tcx, impl_to_skol_substs);\n         let impl_sig =\n             assoc::normalize_associated_types_in(&infcx,\n-                                                 &impl_param_env,\n+                                                 &infcx,\n                                                  &mut fulfillment_cx,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n@@ -312,7 +312,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n             trait_sig.subst(tcx, &trait_to_skol_substs);\n         let trait_sig =\n             assoc::normalize_associated_types_in(&infcx,\n-                                                 &impl_param_env,\n+                                                 &infcx,\n                                                  &mut fulfillment_cx,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n@@ -347,7 +347,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n     // Check that all obligations are satisfied by the implementation's\n     // version.\n-    match fulfillment_cx.select_all_or_error(&infcx, &infcx.parameter_environment) {\n+    match fulfillment_cx.select_all_or_error(&infcx, &infcx) {\n         Err(ref errors) => { traits::report_fulfillment_errors(&infcx, errors) }\n         Ok(_) => {}\n     }\n@@ -456,7 +456,7 @@ pub fn compare_const_impl<'tcx>(tcx: &ty::ctxt<'tcx>,\n         // There is no \"body\" here, so just pass dummy id.\n         let impl_ty =\n             assoc::normalize_associated_types_in(&infcx,\n-                                                 &impl_param_env,\n+                                                 &infcx,\n                                                  &mut fulfillment_cx,\n                                                  impl_c_span,\n                                                  0,\n@@ -466,7 +466,7 @@ pub fn compare_const_impl<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n         let trait_ty =\n             assoc::normalize_associated_types_in(&infcx,\n-                                                 &impl_param_env,\n+                                                 &infcx,\n                                                  &mut fulfillment_cx,\n                                                  impl_c_span,\n                                                  0,"}, {"sha": "4d750f88093f522dc001f09a97f207cf2186b07f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -431,7 +431,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 ccx.tcx.liberate_late_bound_regions(region::DestructionScopeData::new(body.id),\n                                                     &fn_sig);\n             let fn_sig =\n-                inh.normalize_associated_types_in(&inh.infcx.parameter_environment,\n+                inh.normalize_associated_types_in(&inh.infcx,\n                                                   body.span,\n                                                   body.id,\n                                                   &fn_sig);\n@@ -1504,7 +1504,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                      -> bool\n     {\n         traits::type_known_to_meet_builtin_bound(self.infcx(),\n-                                                 self.param_env(),\n+                                                 self.infcx(),\n                                                  ty,\n                                                  ty::BoundSized,\n                                                  span)"}, {"sha": "0650f7deb06f44d4e55335f1159c39402aedb533", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d7e904ca621b72a7445e666baba4b282d2bb7d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=e2d7e904ca621b72a7445e666baba4b282d2bb7d", "patch": "@@ -541,7 +541,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n \n             // Check that all transitive obligations are satisfied.\n             if let Err(errors) = fulfill_cx.select_all_or_error(&infcx,\n-                                                                &infcx.parameter_environment) {\n+                                                                &infcx) {\n                 traits::report_fulfillment_errors(&infcx, &errors);\n             }\n "}]}