{"sha": "f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNThkYmYxZTdjM2MzYjQ3NDE2NGYzZDhiYjRiZDlmOGU1NjNjMjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T23:24:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T23:24:52Z"}, "message": "rollup merge of #20557: cactorium/prettyprinters\n\nAs per https://github.com/rust-lang/rust/issues/20405. To be more precise, the changes just the processing of enums when the name is \"RUST$ENCODED$ENUM$...\" so it correctly parses when there is more than one number encoding the location of the field it's looking for to determine state of the enum", "tree": {"sha": "4f89b89075c76c44705aa0da56d47d487ab725a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f89b89075c76c44705aa0da56d47d487ab725a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29", "html_url": "https://github.com/rust-lang/rust/commit/f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2f97f51ad4cf902e5a5835b5332447fe59089c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f97f51ad4cf902e5a5835b5332447fe59089c4", "html_url": "https://github.com/rust-lang/rust/commit/e2f97f51ad4cf902e5a5835b5332447fe59089c4"}, {"sha": "d33857208f9af74fd414c79eeda40bdf50bf4574", "url": "https://api.github.com/repos/rust-lang/rust/commits/d33857208f9af74fd414c79eeda40bdf50bf4574", "html_url": "https://github.com/rust-lang/rust/commit/d33857208f9af74fd414c79eeda40bdf50bf4574"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "b6770c99975f13caf0f178e07533e6bdc2dbf021", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29", "patch": "@@ -51,7 +51,7 @@ def rust_pretty_printer_lookup_function(val):\n     enum_member_count = len(enum_members)\n \n     if enum_member_count == 0:\n-      return RustStructPrinter(val, false)\n+      return RustStructPrinter(val, False)\n \n     if enum_member_count == 1:\n       first_variant_name = enum_members[0].name\n@@ -60,21 +60,27 @@ def rust_pretty_printer_lookup_function(val):\n         return rust_pretty_printer_lookup_function(val[enum_members[0]])\n       else:\n         assert first_variant_name.startswith(\"RUST$ENCODED$ENUM$\")\n-        # This is a space-optimized enum\n+        # This is a space-optimized enum.\n+        # This means this enum has only two states, and Rust uses one of the\n+        # fields somewhere in the struct to determine which of the two states\n+        # it's in. The location of the field is encoded in the name as something\n+        # like RUST$ENCODED$ENUM$(num$)*name_of_zero_state\n         last_separator_index = first_variant_name.rfind(\"$\")\n-        second_last_separator_index = first_variant_name.rfind(\"$\", 0, last_separator_index)\n-        disr_field_index = first_variant_name[second_last_separator_index + 1 :\n-                                              last_separator_index]\n-        disr_field_index = int(disr_field_index)\n+        start_index = len(\"RUST$ENCODED$ENUM$\")\n+        disr_field_indices = first_variant_name[start_index :\n+                                              last_separator_index].split(\"$\")\n+        disr_field_indices = [int(index) for index in disr_field_indices]\n \n         sole_variant_val = val[enum_members[0]]\n-        disr_field = get_field_at_index(sole_variant_val, disr_field_index)\n-        discriminant = sole_variant_val[disr_field]\n+        discriminant = sole_variant_val\n+        for disr_field_index in disr_field_indices:\n+          disr_field = get_field_at_index(discriminant, disr_field_index)\n+          discriminant = discriminant[disr_field]\n \n         # If the discriminant field is a fat pointer we have to consider the\n         # first word as the true discriminant\n         if discriminant.type.code == gdb.TYPE_CODE_STRUCT:\n-            discriminant = discriminant[get_field_at_index(discriminant, 0)]\n+          discriminant = discriminant[get_field_at_index(discriminant, 0)]\n \n         if discriminant == 0:\n           null_variant_name = first_variant_name[last_separator_index + 1:]\n@@ -234,4 +240,5 @@ def get_field_at_index(val, index):\n   for field in val.type.fields():\n     if i == index:\n       return field\n+    i += 1\n   return None"}, {"sha": "05d71902904b46b5ee3b9eecf92d3e9595a70b0c", "filename": "src/etc/lldb_rust_formatters.py", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29/src%2Fetc%2Flldb_rust_formatters.py", "raw_url": "https://github.com/rust-lang/rust/raw/f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29/src%2Fetc%2Flldb_rust_formatters.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_rust_formatters.py?ref=f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29", "patch": "@@ -79,11 +79,11 @@ def print_struct_val_starting_from(field_start_index, val, internal_dict):\n   has_field_names = type_has_field_names(t)\n \n   if has_field_names:\n-      template = \"%(type_name)s {\\n%(body)s\\n}\"\n-      separator = \", \\n\"\n+    template = \"%(type_name)s {\\n%(body)s\\n}\"\n+    separator = \", \\n\"\n   else:\n-      template = \"%(type_name)s(%(body)s)\"\n-      separator = \", \"\n+    template = \"%(type_name)s(%(body)s)\"\n+    separator = \", \"\n \n   if type_name.startswith(\"(\"):\n     # this is a tuple, so don't print the type name\n@@ -125,25 +125,25 @@ def print_enum_val(val, internal_dict):\n       if last_separator_index == -1:\n         return \"<invalid enum encoding: %s>\" % first_variant_name\n \n-      second_last_separator_index = first_variant_name.rfind(\"$\", 0, last_separator_index)\n-      if second_last_separator_index == -1:\n-        return \"<invalid enum encoding: %s>\" % first_variant_name\n+      start_index = len(\"RUST$ENCODED$ENUM$\")\n \n-      # Extract index of the discriminator field\n+      # Extract indices of the discriminator field\n       try:\n-        disr_field_index = first_variant_name[second_last_separator_index + 1 :\n-                                              last_separator_index]\n-        disr_field_index = int(disr_field_index)\n+        disr_field_indices = first_variant_name[start_index :\n+                                              last_separator_index].split(\"$\")\n+        disr_field_indices = [int(index) for index in disr_field_indices]\n       except:\n         return \"<invalid enum encoding: %s>\" % first_variant_name\n \n       # Read the discriminant\n-      disr_val = val.GetChildAtIndex(0).GetChildAtIndex(disr_field_index)\n+      disr_val = val.GetChildAtIndex(0)\n+      for index in disr_field_indices:\n+        disr_val = disr_val.GetChildAtIndex(index)\n \n       # If the discriminant field is a fat pointer we have to consider the\n       # first word as the true discriminant\n       if disr_val.GetType().GetTypeClass() == lldb.eTypeClassStruct:\n-          disr_val = disr_val.GetChildAtIndex(0)\n+        disr_val = disr_val.GetChildAtIndex(0)\n \n       if disr_val.GetValueAsUnsigned() == 0:\n         # Null case: Print the name of the null-variant"}, {"sha": "4b2628b2a1f738202bd1cbeddd89e763faa031cf", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=f358dbf1e7c3c3b474164f3d8bb4bd9f8e563c29", "patch": "@@ -69,6 +69,12 @@\n // gdb-command: print nested_variant2\n // gdb-check:$16 = NestedVariant2 = {abc = NestedStruct = {regular_struct = RegularStruct = {the_first_field = 117, the_second_field = 118.5, the_third_field = false, the_fourth_field = \"NestedStructString10\"}, tuple_struct = TupleStruct = {119.5, 120}, empty_struct = EmptyStruct, c_style_enum = CStyleEnumVar3, mixed_enum = MixedEnumStructVar = {field1 = 121.5, field2 = -122}}}\n \n+// gdb-command: print none_check1\n+// gdb-check:$17 = None\n+\n+// gdb-command: print none_check2\n+// gdb-check:$18 = None\n+\n use self::CStyleEnum::{CStyleEnumVar1, CStyleEnumVar2, CStyleEnumVar3};\n use self::MixedEnum::{MixedEnumCStyleVar, MixedEnumTupleVar, MixedEnumStructVar};\n use self::NestedEnum::{NestedVariant1, NestedVariant2};\n@@ -170,6 +176,9 @@ fn main() {\n         }\n     };\n \n+    let none_check1: Option<(uint, Vec<uint>)> = None;\n+    let none_check2: Option<String> = None;\n+\n     zzz(); // #break\n }\n "}]}