{"sha": "5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYjY4YmFlOWEyODQxZmZmODA2YmYwZDJlNWYyNGI3ZDRiYWQxNjQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-13T16:46:22Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-13T16:46:22Z"}, "message": "Rollup merge of #53829 - alexcrichton:release-debuginfo, r=michaelwoerister\n\nAdd rustc SHA to released DWARF debuginfo\n\nThis commit updates the debuginfo that is encoded in all of our released\nartifacts by default. Currently it has paths like `/checkout/src/...` but these\nare a little inconsistent and have changed over time. This commit instead\nattempts to actually define the file paths in our debuginfo to be consistent\nbetween releases.\n\nAll debuginfo paths are now intended to be `/rustc/$sha` where `$sha` is the git\nsha of the released compiler. Sub-paths are all paths into the git repo at that\n`$sha`.", "tree": {"sha": "2aed643c19ec8643eb6b36cf9c4a0c4fa8fad45a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aed643c19ec8643eb6b36cf9c4a0c4fa8fad45a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlualF4ACgkQ/vbIBR0O\nATxHJhAAqTtPEan0waR11zRx2cJMVU4jMlV6Gx507LVfcDPBKKv0ALJZ6BGPkgQW\nATnZ2HimpuO+iOYV3X2rSuKosjeueQjz3wrO7ClFMqyUfZ9255f50HpRQGecHYvR\nk82Eaiu0Z8hMqZ5QN5/NksSFEVI6xtJDwlQWUZbjHfm5nTtR2JgM4sHvU3uFCYVJ\nRYkj0JeDz70TnvtuR7lyFsMZsedJ0dY/pOzAzN0a2WjWIHVu5sRE47OCGJXn0QbE\n3OJ18ccw2iBO+mT/ZzL7Pa0Dv8SzITQabTsw7j6afUjswUlIPgnRa0E82OUTpVkS\n43u1EbewNyVeBNdIAOHMCm33yt8FrPdWiBuVHFQSYoIaJngZIaBGGiHxnuRMo6kX\nLyBAjc5ztaNgraNSWit2TzJ3EsWb9kc0U9OTCpt1m53gys+254dJcFDjbNMwymVF\n32cDtwEwbmNoupesP3EFL3QXTofacH6LXuyEY1dPUEHYdmnulaMWycsn1MAxyMMv\nc5If7m163eoQ7CWnxzkavoJ7hsasCn0187Fs2evexM4zCRJH3stFSpPNBo5f/aSm\nLWPNt6SHnHbKLnxZy6gt3RQVLi8NuoLENTCEg3jO+uAzNBvvSyyUVISOo+EartBu\ncyuw9QUEf6meBOrA9qPcRRRwZENswX8g+znKvloMcq3at3xBGE8=\n=dP7j\n-----END PGP SIGNATURE-----", "payload": "tree 2aed643c19ec8643eb6b36cf9c4a0c4fa8fad45a\nparent e92f1b94ae3982f4cadc6476ad45b4f2449ab171\nparent 5595aeb6b7eda6b96cb2fe882401213c4fc04c6f\nauthor kennytm <kennytm@gmail.com> 1536857182 +0800\ncommitter kennytm <kennytm@gmail.com> 1536857182 +0800\n\nRollup merge of #53829 - alexcrichton:release-debuginfo, r=michaelwoerister\n\nAdd rustc SHA to released DWARF debuginfo\n\nThis commit updates the debuginfo that is encoded in all of our released\nartifacts by default. Currently it has paths like `/checkout/src/...` but these\nare a little inconsistent and have changed over time. This commit instead\nattempts to actually define the file paths in our debuginfo to be consistent\nbetween releases.\n\nAll debuginfo paths are now intended to be `/rustc/$sha` where `$sha` is the git\nsha of the released compiler. Sub-paths are all paths into the git repo at that\n`$sha`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "html_url": "https://github.com/rust-lang/rust/commit/5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e92f1b94ae3982f4cadc6476ad45b4f2449ab171", "url": "https://api.github.com/repos/rust-lang/rust/commits/e92f1b94ae3982f4cadc6476ad45b4f2449ab171", "html_url": "https://github.com/rust-lang/rust/commit/e92f1b94ae3982f4cadc6476ad45b4f2449ab171"}, {"sha": "5595aeb6b7eda6b96cb2fe882401213c4fc04c6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5595aeb6b7eda6b96cb2fe882401213c4fc04c6f", "html_url": "https://github.com/rust-lang/rust/commit/5595aeb6b7eda6b96cb2fe882401213c4fc04c6f"}], "stats": {"total": 86, "additions": 71, "deletions": 15}, "files": [{"sha": "3159c19528af5083495dc0e31670c547b6e9cd4a", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -377,6 +377,10 @@\n # Whether to verify generated LLVM IR\n #verify-llvm-ir = false\n \n+# Map all debuginfo paths for libstd and crates to `/rust/$sha/$crate/...`,\n+# generally only set for releases\n+#remap-debuginfo = false\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "f30f34acf5c6c74642ea685e8f6ea1fc0422e1e6", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -263,6 +263,10 @@ fn main() {\n         if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() {\n             cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n         }\n+\n+        if let Ok(map) = env::var(\"RUSTC_DEBUGINFO_MAP\") {\n+            cmd.arg(\"--remap-path-prefix\").arg(&map);\n+        }\n     } else {\n         // Override linker if necessary.\n         if let Ok(host_linker) = env::var(\"RUSTC_HOST_LINKER\") {"}, {"sha": "2f7f3058b04735bfb97b33af9e53291a7783ae8d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -32,7 +32,7 @@ use native;\n use test;\n use tool;\n use util::{add_lib_path, exe, libdir};\n-use {Build, DocTests, Mode};\n+use {Build, DocTests, Mode, GitRepo};\n \n pub use Compiler;\n \n@@ -876,6 +876,10 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_HOST_CRT_STATIC\", x.to_string());\n         }\n \n+        if let Some(map) = self.build.debuginfo_map(GitRepo::Rustc) {\n+            cargo.env(\"RUSTC_DEBUGINFO_MAP\", map);\n+        }\n+\n         // Enable usage of unstable features\n         cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         self.add_rust_test_threads(&mut cargo);\n@@ -964,7 +968,7 @@ impl<'a> Builder<'a> {\n             let cc = ccacheify(&self.cc(target));\n             cargo.env(format!(\"CC_{}\", target), &cc).env(\"CC\", &cc);\n \n-            let cflags = self.cflags(target).join(\" \");\n+            let cflags = self.cflags(target, GitRepo::Rustc).join(\" \");\n             cargo\n                 .env(format!(\"CFLAGS_{}\", target), cflags.clone())\n                 .env(\"CFLAGS\", cflags.clone());"}, {"sha": "d5da0cabec84aa7d5fc61cb3f65011831ca91761", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -39,7 +39,7 @@ use std::process::Command;\n use build_helper::output;\n use cc;\n \n-use Build;\n+use {Build, GitRepo};\n use config::Target;\n use cache::Interned;\n \n@@ -107,7 +107,7 @@ pub fn find(build: &mut Build) {\n \n         build.cc.insert(target, compiler);\n         build.verbose(&format!(\"CC_{} = {:?}\", &target, build.cc(target)));\n-        build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target, build.cflags(target)));\n+        build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target, build.cflags(target, GitRepo::Rustc)));\n         if let Some(ar) = ar {\n             build.verbose(&format!(\"AR_{} = {:?}\", &target, ar));\n             build.ar.insert(target, ar);"}, {"sha": "c0661a773e3a71d900504f640025d69fd0ed2024", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -30,7 +30,7 @@ use filetime::FileTime;\n use serde_json;\n \n use util::{exe, libdir, is_dylib, CiEnv};\n-use {Compiler, Mode};\n+use {Compiler, Mode, GitRepo};\n use native;\n use tool;\n \n@@ -895,7 +895,7 @@ pub fn compiler_file(builder: &Builder,\n                  target: Interned<String>,\n                  file: &str) -> PathBuf {\n     let mut cmd = Command::new(compiler);\n-    cmd.args(builder.cflags(target));\n+    cmd.args(builder.cflags(target, GitRepo::Rustc));\n     cmd.arg(format!(\"-print-file-name={}\", file));\n     let out = output(&mut cmd);\n     PathBuf::from(out.trim())"}, {"sha": "cc6d76c76f2f235781eeac7ac708c0c7cfc5de1c", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -109,6 +109,7 @@ pub struct Config {\n     pub rust_codegen_backends: Vec<Interned<String>>,\n     pub rust_codegen_backends_dir: String,\n     pub rust_verify_llvm_ir: bool,\n+    pub rust_remap_debuginfo: bool,\n \n     pub build: Interned<String>,\n     pub hosts: Vec<Interned<String>>,\n@@ -321,6 +322,7 @@ struct Rust {\n     deny_warnings: Option<bool>,\n     backtrace_on_ice: Option<bool>,\n     verify_llvm_ir: Option<bool>,\n+    remap_debuginfo: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -557,6 +559,7 @@ impl Config {\n             set(&mut config.deny_warnings, rust.deny_warnings.or(flags.warnings));\n             set(&mut config.backtrace_on_ice, rust.backtrace_on_ice);\n             set(&mut config.rust_verify_llvm_ir, rust.verify_llvm_ir);\n+            set(&mut config.rust_remap_debuginfo, rust.remap_debuginfo);\n \n             if let Some(ref backends) = rust.codegen_backends {\n                 config.rust_codegen_backends = backends.iter()"}, {"sha": "ed6a5f94d0d95fa1eb0adc2dd7a6d5a61066dbe4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -237,6 +237,11 @@ pub enum DocTests {\n     Only,\n }\n \n+pub enum GitRepo {\n+    Rustc,\n+    Llvm,\n+}\n+\n /// Global configuration for the build system.\n ///\n /// This structure transitively contains all configuration for the build system.\n@@ -738,14 +743,29 @@ impl Build {\n         self.config.jobs.unwrap_or_else(|| num_cpus::get() as u32)\n     }\n \n+    fn debuginfo_map(&self, which: GitRepo) -> Option<String> {\n+        if !self.config.rust_remap_debuginfo {\n+            return None\n+        }\n+\n+        let path = match which {\n+            GitRepo::Rustc => {\n+                let sha = self.rust_info.sha().expect(\"failed to find sha\");\n+                format!(\"/rustc/{}\", sha)\n+            }\n+            GitRepo::Llvm => format!(\"/rustc/llvm\"),\n+        };\n+        Some(format!(\"{}={}\", self.src.display(), path))\n+    }\n+\n     /// Returns the path to the C compiler for the target specified.\n     fn cc(&self, target: Interned<String>) -> &Path {\n         self.cc[&target].path()\n     }\n \n     /// Returns a list of flags to pass to the C compiler for the target\n     /// specified.\n-    fn cflags(&self, target: Interned<String>) -> Vec<String> {\n+    fn cflags(&self, target: Interned<String>, which: GitRepo) -> Vec<String> {\n         // Filter out -O and /O (the optimization flags) that we picked up from\n         // cc-rs because the build scripts will determine that for themselves.\n         let mut base = self.cc[&target].args().iter()\n@@ -767,6 +787,16 @@ impl Build {\n         if &*target == \"i686-pc-windows-gnu\" {\n             base.push(\"-fno-omit-frame-pointer\".into());\n         }\n+\n+        if let Some(map) = self.debuginfo_map(which) {\n+        let cc = self.cc(target);\n+            if cc.ends_with(\"clang\") || cc.ends_with(\"gcc\") {\n+                base.push(format!(\"-fdebug-prefix-map={}\", map).into());\n+            } else if cc.ends_with(\"clang-cl.exe\") {\n+                base.push(\"-Xclang\".into());\n+                base.push(format!(\"-fdebug-prefix-map={}\", map).into());\n+            }\n+        }\n         base\n     }\n "}, {"sha": "424264647f0be4d501e9d399e2a736a03e05eda5", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -33,6 +33,7 @@ use util::{self, exe};\n use build_helper::up_to_date;\n use builder::{Builder, RunConfig, ShouldRun, Step};\n use cache::Interned;\n+use GitRepo;\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Llvm {\n@@ -373,8 +374,8 @@ fn configure_cmake(builder: &Builder,\n     }\n \n     cfg.build_arg(\"-j\").build_arg(builder.jobs().to_string());\n-    cfg.define(\"CMAKE_C_FLAGS\", builder.cflags(target).join(\" \"));\n-    let mut cxxflags = builder.cflags(target).join(\" \");\n+    cfg.define(\"CMAKE_C_FLAGS\", builder.cflags(target, GitRepo::Llvm).join(\" \"));\n+    let mut cxxflags = builder.cflags(target, GitRepo::Llvm).join(\" \");\n     if building_dist_binaries {\n         if builder.config.llvm_static_stdcpp && !target.contains(\"windows\") {\n             cxxflags.push_str(\" -static-libstdc++\");\n@@ -680,7 +681,7 @@ impl Step for Openssl {\n         };\n         configure.arg(os);\n         configure.env(\"CC\", builder.cc(target));\n-        for flag in builder.cflags(target) {\n+        for flag in builder.cflags(target, GitRepo::Rustc) {\n             configure.arg(flag);\n         }\n         // There is no specific os target for android aarch64 or x86_64,"}, {"sha": "92665c09f72aa7bef15f0984ad7dd3b2fb32f4f5", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -34,7 +34,7 @@ use tool::{self, Tool, SourceType};\n use toolstate::ToolState;\n use util::{self, dylib_path, dylib_path_var};\n use Crate as CargoCrate;\n-use {DocTests, Mode};\n+use {DocTests, Mode, GitRepo};\n \n const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n \n@@ -1142,7 +1142,7 @@ impl Step for Compiletest {\n                     .arg(\"--cxx\")\n                     .arg(builder.cxx(target).unwrap())\n                     .arg(\"--cflags\")\n-                    .arg(builder.cflags(target).join(\" \"))\n+                    .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"))\n                     .arg(\"--llvm-components\")\n                     .arg(llvm_components.trim())\n                     .arg(\"--llvm-cxxflags\")"}, {"sha": "6a571bfad135d51bbd9a9f8ff7c328e6f1ab2f80", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -55,6 +55,7 @@ export RUST_RELEASE_CHANNEL=nightly\n if [ \"$DEPLOY$DEPLOY_ALT\" != \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\"\n+  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.remap-debuginfo\"\n \n   if [ \"$NO_LLVM_ASSERTIONS\" = \"1\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-llvm-assertions\""}, {"sha": "0831e29bdddbffe8c4dda533af2266cb881b141d", "filename": "src/libstd/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -97,6 +97,10 @@ fn build_libbacktrace(target: &str) -> Result<(), ()> {\n         .file(\"../libbacktrace/sort.c\")\n         .file(\"../libbacktrace/state.c\");\n \n+    let any_debug = env::var(\"RUSTC_DEBUGINFO\").unwrap_or(String::new()) == \"true\" ||\n+        env::var(\"RUSTC_DEBUGINFO_LINES\").unwrap_or(String::new()) == \"true\";\n+    build.debug(any_debug);\n+\n     if target.contains(\"darwin\") {\n         build.file(\"../libbacktrace/macho.c\");\n     } else if target.contains(\"windows\") {"}, {"sha": "1ea7b973c465be969fb873d44d5519b4ca975183", "filename": "src/test/ui/consts/const-size_of-cycle.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-musl\n+// ignore-x86\n // error-pattern: cycle detected\n \n struct Foo {"}, {"sha": "6cf8000f6ad2763198673cdaad1288999d503ff4", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-musl\n+// ignore-x86\n+\n use std::fmt::Debug;\n \n trait Foo {"}, {"sha": "d777779a881e04556b06ab81bea89abc3fac2cff", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5db68bae9a2841fff806bf0d2e5f24b7d4bad164/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr?ref=5db68bae9a2841fff806bf0d2e5f24b7d4bad164", "patch": "@@ -1,5 +1,5 @@\n error[E0643]: method `foo` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:18:12\n+  --> $DIR/impl-generic-mismatch.rs:21:12\n    |\n LL |     fn foo(&self, _: &impl Debug);\n    |                       ---------- declaration in trait here\n@@ -12,7 +12,7 @@ LL |     fn foo(&self, _: &impl Debug) { }\n    |          --           ^^^^^^^^^^\n \n error[E0643]: method `bar` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:27:23\n+  --> $DIR/impl-generic-mismatch.rs:30:23\n    |\n LL |     fn bar<U: Debug>(&self, _: &U);\n    |            - declaration in trait here\n@@ -25,7 +25,7 @@ LL |     fn bar<U: Debug>(&self, _: &U) { }\n    |           ^^^^^^^^^^            ^\n \n error[E0643]: method `hash` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:38:33\n+  --> $DIR/impl-generic-mismatch.rs:41:33\n    |\n LL |     fn hash(&self, hasher: &mut impl Hasher) {}\n    |                                 ^^^^^^^^^^^ expected generic parameter, found `impl Trait`"}]}