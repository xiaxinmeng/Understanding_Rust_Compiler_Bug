{"sha": "8afa2722b22f941544c6883285b5bd630e6f510f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZmEyNzIyYjIyZjk0MTU0NGM2ODgzMjg1YjViZDYzMGU2ZjUxMGY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-03T15:24:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-03T15:24:43Z"}, "message": "Revise TypeInfo::ty usage", "tree": {"sha": "ff496326bbe44c139fcdd19d8b0aa30a95fb4774", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff496326bbe44c139fcdd19d8b0aa30a95fb4774"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8afa2722b22f941544c6883285b5bd630e6f510f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8afa2722b22f941544c6883285b5bd630e6f510f", "html_url": "https://github.com/rust-lang/rust/commit/8afa2722b22f941544c6883285b5bd630e6f510f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8afa2722b22f941544c6883285b5bd630e6f510f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ff7171c4559284f462ddaadee491e4791d9f0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ff7171c4559284f462ddaadee491e4791d9f0a", "html_url": "https://github.com/rust-lang/rust/commit/25ff7171c4559284f462ddaadee491e4791d9f0a"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "f9cb043a7b5c67335362add4fb60f83773e53887", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -100,11 +100,11 @@ impl TypeInfo {\n         self.ty\n     }\n \n-    pub fn coerced(self) -> Option<Type> {\n-        self.coerced\n+    pub fn has_coercion(&self) -> bool {\n+        self.coerced.is_some()\n     }\n \n-    pub fn coerced_or_original(self) -> Type {\n+    pub fn coerced(self) -> Type {\n         self.coerced.unwrap_or(self.ty)\n     }\n }"}, {"sha": "9eab563ffff1cfec474d3d9abc04fdf5a565de67", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -555,7 +555,7 @@ fn highlight_method_call(\n                 if let Some(receiver_ty) =\n                     method_call.receiver().and_then(|it| sema.type_of_expr(&it))\n                 {\n-                    if !receiver_ty.ty.is_copy(sema.db) {\n+                    if !receiver_ty.coerced().is_copy(sema.db) {\n                         h |= HlMod::Consuming\n                     }\n                 }"}, {"sha": "275ef53861e8e53cae62197d9480437799477fd2", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -57,7 +57,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n         (ast::Pat::IdentPat(_), Some(expr)) => ctx.sema.type_of_expr(&expr)?,\n         (pat, _) => ctx.sema.type_of_pat(&pat)?,\n     }\n-    .coerced_or_original();\n+    .coerced();\n \n     // Unresolved or unnameable types can't be annotated\n     if ty.contains_unknown() || ty.is_closure() {"}, {"sha": "a24c9359cba5387d19389631b8f4599aa19148f4", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -86,7 +86,7 @@ fn validate_method_call_expr(\n     let receiver = expr.receiver()?;\n     let expr = ast::Expr::MethodCallExpr(expr);\n \n-    let it_type = sema.type_of_expr(&receiver)?.ty;\n+    let it_type = sema.type_of_expr(&receiver)?.coerced();\n     let module = sema.scope(receiver.syntax()).module()?;\n     let krate = module.krate();\n "}, {"sha": "a861755cbbbc5e4230051fb9aa54bd5308ef7257", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -345,7 +345,7 @@ impl FlowKind {\n             FlowKind::Return(Some(expr))\n             | FlowKind::Break(Some(expr))\n             | FlowKind::TryReturn { expr, .. } => {\n-                ctx.sema.type_of_expr(expr).map(TypeInfo::coerced_or_original)\n+                ctx.sema.type_of_expr(expr).map(TypeInfo::coerced)\n             }\n             FlowKind::Try { .. } => {\n                 stdx::never!(\"try does not have defined expr_ty\");"}, {"sha": "c94fa1271249b6affb2300b647d0113ba55d0bd5", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         .take_while(|it| it.text_range().contains_range(ctx.frange.range))\n         .find_map(valid_target_expr)?;\n     if let Some(ty_info) = ctx.sema.type_of_expr(&to_extract) {\n-        if ty_info.ty.is_unit() {\n+        if ty_info.coerced().is_unit() {\n             return None;\n         }\n     }"}, {"sha": "52f0851295c7d14633cc6bc974c2f0bc4653a624", "filename": "crates/ide_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -223,7 +223,7 @@ impl ExtendedEnum {\n }\n \n fn resolve_enum_def(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<ExtendedEnum> {\n-    sema.type_of_expr(expr)?.ty.autoderef(sema.db).find_map(|ty| match ty.as_adt() {\n+    sema.type_of_expr(expr)?.coerced().autoderef(sema.db).find_map(|ty| match ty.as_adt() {\n         Some(Adt::Enum(e)) => Some(ExtendedEnum::Enum(e)),\n         _ => ty.is_bool().then(|| ExtendedEnum::Bool),\n     })\n@@ -234,7 +234,7 @@ fn resolve_tuple_of_enum_def(\n     expr: &ast::Expr,\n ) -> Option<Vec<ExtendedEnum>> {\n     sema.type_of_expr(expr)?\n-        .ty\n+        .coerced()\n         .tuple_fields(sema.db)\n         .iter()\n         .map(|ty| {"}, {"sha": "d22929206b341bd529308a7b232509005af8153f", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -331,7 +331,7 @@ fn fn_arg_type(\n     target_module: hir::Module,\n     fn_arg: &ast::Expr,\n ) -> Option<String> {\n-    let ty = ctx.sema.type_of_expr(fn_arg)?.ty;\n+    let ty = ctx.sema.type_of_expr(fn_arg)?.coerced();\n     if ty.is_unknown() {\n         return None;\n     }"}, {"sha": "c4bb716071fc3daefac47a18090e4c9602ce859e", "filename": "crates/ide_assists/src/handlers/infer_function_return_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -18,7 +18,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let (fn_type, tail_expr, builder_edit_pos) = extract_tail(ctx)?;\n     let module = ctx.sema.scope(tail_expr.syntax()).module()?;\n-    let ty = ctx.sema.type_of_expr(&tail_expr)?.ty;\n+    let ty = ctx.sema.type_of_expr(&tail_expr)?.coerced();\n     if ty.is_unit() {\n         return None;\n     }"}, {"sha": "8bafae93f95db114b2f841e9578efb8134e1f14a", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -190,7 +190,7 @@ pub(crate) fn inline_(\n                         let ty = ctx\n                             .sema\n                             .type_of_expr(&expr)\n-                            .and_then(TypeInfo::coerced)\n+                            .filter(TypeInfo::has_coercion)\n                             .and_then(|_| param_ty);\n                         body.push_front(\n                             make::let_stmt(pat, ty, Some(expr)).clone_for_update().into(),"}, {"sha": "54c3f4a2a20ebb674a430a1033d8bafc7a459dd3", "filename": "crates/ide_assists/src/handlers/replace_for_loop_with_for_each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -80,7 +80,7 @@ fn is_ref_and_impls_iter_method(\n     };\n     let wanted_method = if ref_expr.mut_token().is_some() { known::iter_mut } else { known::iter };\n     let expr_behind_ref = ref_expr.expr()?;\n-    let ty = sema.type_of_expr(&expr_behind_ref)?.ty;\n+    let ty = sema.type_of_expr(&expr_behind_ref)?.coerced();\n     let scope = sema.scope(iterable.syntax());\n     let krate = scope.module()?.krate();\n     let traits_in_scope = scope.traits_in_scope();\n@@ -110,7 +110,7 @@ fn is_ref_and_impls_iter_method(\n /// Whether iterable implements core::Iterator\n fn impls_core_iter(sema: &hir::Semantics<ide_db::RootDatabase>, iterable: &ast::Expr) -> bool {\n     let it_typ = match sema.type_of_expr(iterable) {\n-        Some(it) => it.ty,\n+        Some(it) => it.coerced(),\n         None => return false,\n     };\n "}, {"sha": "45b3ce299096cce9ccad98ff13b5f59d8abbe5b1", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -127,7 +127,7 @@ fn make_else_arm(\n         let pattern = if let [(Either::Left(pat), _)] = conditionals {\n             ctx.sema\n                 .type_of_pat(&pat)\n-                .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty.ty))\n+                .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty.coerced()))\n                 .zip(Some(pat))\n         } else {\n             None\n@@ -268,7 +268,7 @@ fn binds_name(pat: &ast::Pat) -> bool {\n \n fn is_sad_pat(sema: &hir::Semantics<RootDatabase>, pat: &ast::Pat) -> bool {\n     sema.type_of_pat(pat)\n-        .and_then(|ty| TryEnum::from_ty(sema, &ty.ty))\n+        .and_then(|ty| TryEnum::from_ty(sema, &ty.coerced()))\n         .map_or(false, |it| does_pat_match_variant(pat, &it.sad_pattern()))\n }\n "}, {"sha": "190f302d5cd1deb8e92c6a5bbbc9886dfb08c18d", "filename": "crates/ide_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -49,8 +49,9 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n         target,\n         |edit| {\n             let ty = ctx.sema.type_of_expr(&init);\n-            let happy_variant =\n-                ty.and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty.ty)).map(|it| it.happy_case());\n+            let happy_variant = ty\n+                .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty.coerced()))\n+                .map(|it| it.happy_case());\n             let pat = match happy_variant {\n                 None => original_pat,\n                 Some(var_name) => {"}, {"sha": "1efac04db9130e51cd298903ec2c5ffbfd9bb658", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -270,12 +270,10 @@ fn invert_special_case(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Opti\n \n fn bin_impls_ord(sema: &Semantics<RootDatabase>, bin: &ast::BinExpr) -> bool {\n     match (\n-        bin.lhs().and_then(|lhs| sema.type_of_expr(&lhs)),\n-        bin.rhs().and_then(|rhs| sema.type_of_expr(&rhs)),\n+        bin.lhs().and_then(|lhs| sema.type_of_expr(&lhs)).map(hir::TypeInfo::coerced),\n+        bin.rhs().and_then(|rhs| sema.type_of_expr(&rhs)).map(hir::TypeInfo::coerced),\n     ) {\n-        (Some(hir::TypeInfo { ty: lhs_ty, .. }), Some(hir::TypeInfo { ty: rhs_ty, .. }))\n-            if lhs_ty == rhs_ty =>\n-        {\n+        (Some(lhs_ty), Some(rhs_ty)) if lhs_ty == rhs_ty => {\n             let krate = sema.scope(bin.syntax()).module().map(|it| it.krate());\n             let ord_trait = FamousDefs(sema, krate).core_cmp_Ord();\n             ord_trait.map_or(false, |ord_trait| {"}, {"sha": "6a2f0863825df58e96ff3d0746e772f2ba77ea4e", "filename": "crates/ide_assists/src/utils/suggest_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -197,7 +197,7 @@ fn from_param(expr: &ast::Expr, sema: &Semantics<'_, RootDatabase>) -> Option<St\n         match args_parent {\n             ast::CallExpr(call) => {\n                 let func = call.expr()?;\n-                let func_ty = sema.type_of_expr(&func)?.ty;\n+                let func_ty = sema.type_of_expr(&func)?.coerced();\n                 func_ty.as_callable(sema.db)?\n             },\n             ast::MethodCallExpr(method) => sema.resolve_method_call_as_callable(&method)?,\n@@ -225,7 +225,7 @@ fn var_name_from_pat(pat: &ast::Pat) -> Option<ast::Name> {\n }\n \n fn from_type(expr: &ast::Expr, sema: &Semantics<'_, RootDatabase>) -> Option<String> {\n-    let ty = sema.type_of_expr(expr)?.ty;\n+    let ty = sema.type_of_expr(expr)?.coerced();\n     let ty = ty.remove_ref().unwrap_or(ty);\n \n     name_of_type(&ty, sema.db)"}, {"sha": "a406e0d6f582ee445e7c190d51a080e272b85160", "filename": "crates/ide_db/src/call_info.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -118,7 +118,9 @@ fn call_info_impl(\n     let calling_node = FnCallNode::with_node(&token.parent()?)?;\n \n     let callable = match &calling_node {\n-        FnCallNode::CallExpr(call) => sema.type_of_expr(&call.expr()?)?.ty.as_callable(sema.db)?,\n+        FnCallNode::CallExpr(call) => {\n+            sema.type_of_expr(&call.expr()?)?.coerced().as_callable(sema.db)?\n+        }\n         FnCallNode::MethodCallExpr(call) => sema.resolve_method_call_as_callable(call)?,\n     };\n     let active_param = if let Some(arg_list) = calling_node.arg_list() {"}, {"sha": "52cd99ec910936dd9436d9ecea07e86ab51e3d1d", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -543,7 +543,7 @@ impl ImportCandidate {\n         match sema.resolve_method_call(method_call) {\n             Some(_) => None,\n             None => Some(Self::TraitMethod(TraitImportCandidate {\n-                receiver_ty: sema.type_of_expr(&method_call.receiver()?)?.ty,\n+                receiver_ty: sema.type_of_expr(&method_call.receiver()?)?.coerced(),\n                 assoc_item_name: NameToImport::Exact(method_call.name_ref()?.to_string()),\n             })),\n         }"}, {"sha": "2518dd8bb6954c4ba6fb4df84e69855bf75c12e7", "filename": "crates/ide_diagnostics/src/handlers/no_such_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa2722b22f941544c6883285b5bd630e6f510f/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs?ref=8afa2722b22f941544c6883285b5bd630e6f510f", "patch": "@@ -62,7 +62,7 @@ fn missing_record_expr_field_fixes(\n     };\n     let def_file_id = def_file_id.original_file(sema.db);\n \n-    let new_field_type = sema.type_of_expr(&record_expr_field.expr()?)?.ty;\n+    let new_field_type = sema.type_of_expr(&record_expr_field.expr()?)?.coerced();\n     if new_field_type.is_unknown() {\n         return None;\n     }"}]}