{"sha": "dd1264e90a47d9818d868276cd09363fe78056c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMTI2NGU5MGE0N2Q5ODE4ZDg2ODI3NmNkMDkzNjNmZTc4MDU2YzQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-11T20:36:00Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-15T15:23:51Z"}, "message": "rustc_metadata: replace Lazy<[Table<T>]> with Lazy<Table<T>>.", "tree": {"sha": "2ad33940cbfb198197697283718b3e98a77766e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ad33940cbfb198197697283718b3e98a77766e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd1264e90a47d9818d868276cd09363fe78056c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1264e90a47d9818d868276cd09363fe78056c4", "html_url": "https://github.com/rust-lang/rust/commit/dd1264e90a47d9818d868276cd09363fe78056c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd1264e90a47d9818d868276cd09363fe78056c4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffd18fc22c7dcfd59bb09567217046f6e0b71e7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f", "html_url": "https://github.com/rust-lang/rust/commit/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "c2ec9115d310dc2d0bdbcc78b90b4e2a7d9d6c85", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dd1264e90a47d9818d868276cd09363fe78056c4/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1264e90a47d9818d868276cd09363fe78056c4/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=dd1264e90a47d9818d868276cd09363fe78056c4", "patch": "@@ -2,6 +2,7 @@\n \n use crate::cstore::{self, CrateMetadata, MetadataBlob};\n use crate::schema::*;\n+use crate::table::Table;\n \n use rustc_index::vec::IndexVec;\n use rustc_data_structures::sync::{Lrc, ReadGuard};\n@@ -28,7 +29,7 @@ use std::mem;\n use std::num::NonZeroUsize;\n use std::u32;\n \n-use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n+use rustc_serialize::{Decodable, Decoder, Encodable, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, Ident};\n use syntax::source_map::{self, respan, Spanned};\n@@ -130,15 +131,15 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'tcx>) {\n     }\n }\n \n-impl<'a, 'tcx, T: Decodable> Lazy<T> {\n+impl<'a, 'tcx, T: Encodable + Decodable> Lazy<T> {\n     crate fn decode<M: Metadata<'a, 'tcx>>(self, meta: M) -> T {\n         let mut dcx = meta.decoder(self.position.get());\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n         T::decode(&mut dcx).unwrap()\n     }\n }\n \n-impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable> Lazy<[T]> {\n+impl<'a: 'x, 'tcx: 'x, 'x, T: Encodable + Decodable> Lazy<[T]> {\n     crate fn decode<M: Metadata<'a, 'tcx>>(\n         self,\n         meta: M,\n@@ -237,13 +238,13 @@ impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, T> SpecializedDecoder<Lazy<T>> for DecodeContext<'a, 'tcx> {\n+impl<'a, 'tcx, T: Encodable> SpecializedDecoder<Lazy<T>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Lazy<T>, Self::Error> {\n         self.read_lazy_with_meta(())\n     }\n }\n \n-impl<'a, 'tcx, T> SpecializedDecoder<Lazy<[T]>> for DecodeContext<'a, 'tcx> {\n+impl<'a, 'tcx, T: Encodable> SpecializedDecoder<Lazy<[T]>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Lazy<[T]>, Self::Error> {\n         let len = self.read_usize()?;\n         if len == 0 {\n@@ -254,6 +255,14 @@ impl<'a, 'tcx, T> SpecializedDecoder<Lazy<[T]>> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx, T> SpecializedDecoder<Lazy<Table<T>>> for DecodeContext<'a, 'tcx>\n+    where T: LazyMeta<Meta = ()>,\n+{\n+    fn specialized_decode(&mut self) -> Result<Lazy<Table<T>>, Self::Error> {\n+        let len = self.read_usize()?;\n+        self.read_lazy_with_meta(len)\n+    }\n+}\n \n impl<'a, 'tcx> SpecializedDecoder<DefId> for DecodeContext<'a, 'tcx> {\n     #[inline]"}, {"sha": "53d3039a2842f333d74df3e03053b5a01617d2e0", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dd1264e90a47d9818d868276cd09363fe78056c4/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1264e90a47d9818d868276cd09363fe78056c4/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=dd1264e90a47d9818d868276cd09363fe78056c4", "patch": "@@ -98,13 +98,13 @@ impl<'tcx> Encoder for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx, T> SpecializedEncoder<Lazy<T>> for EncodeContext<'tcx> {\n+impl<'tcx, T: Encodable> SpecializedEncoder<Lazy<T>> for EncodeContext<'tcx> {\n     fn specialized_encode(&mut self, lazy: &Lazy<T>) -> Result<(), Self::Error> {\n         self.emit_lazy_distance(*lazy)\n     }\n }\n \n-impl<'tcx, T> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n+impl<'tcx, T: Encodable> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n     fn specialized_encode(&mut self, lazy: &Lazy<[T]>) -> Result<(), Self::Error> {\n         self.emit_usize(lazy.meta)?;\n         if lazy.meta == 0 {\n@@ -114,6 +114,15 @@ impl<'tcx, T> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n     }\n }\n \n+impl<'tcx, T> SpecializedEncoder<Lazy<Table<T>>> for EncodeContext<'tcx>\n+    where T: LazyMeta<Meta = ()>,\n+{\n+    fn specialized_encode(&mut self, lazy: &Lazy<Table<T>>) -> Result<(), Self::Error> {\n+        self.emit_usize(lazy.meta)?;\n+        self.emit_lazy_distance(*lazy)\n+    }\n+}\n+\n impl<'tcx> SpecializedEncoder<CrateNum> for EncodeContext<'tcx> {\n     #[inline]\n     fn specialized_encode(&mut self, cnum: &CrateNum) -> Result<(), Self::Error> {\n@@ -258,7 +267,7 @@ impl<T: Encodable> EncodeContentsForLazy<T> for T {\n     }\n }\n \n-impl<I, T> EncodeContentsForLazy<[T]> for I\n+impl<I, T: Encodable> EncodeContentsForLazy<[T]> for I\n     where I: IntoIterator,\n           I::Item: EncodeContentsForLazy<T>,\n {"}, {"sha": "6ae20a9d438fa3ec14c986e21f13fdae55db96a6", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd1264e90a47d9818d868276cd09363fe78056c4/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1264e90a47d9818d868276cd09363fe78056c4/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=dd1264e90a47d9818d868276cd09363fe78056c4", "patch": "@@ -14,6 +14,7 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc_index::vec::IndexVec;\n use rustc_data_structures::svh::Svh;\n \n+use rustc_serialize::Encodable;\n use syntax::{ast, attr};\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n@@ -53,7 +54,7 @@ crate trait LazyMeta {\n     fn min_size(meta: Self::Meta) -> usize;\n }\n \n-impl<T> LazyMeta for T {\n+impl<T: Encodable> LazyMeta for T {\n     type Meta = ();\n \n     fn min_size(_: ()) -> usize {\n@@ -62,7 +63,7 @@ impl<T> LazyMeta for T {\n     }\n }\n \n-impl<T> LazyMeta for [T] {\n+impl<T: Encodable> LazyMeta for [T] {\n     type Meta = usize;\n \n     fn min_size(len: usize) -> usize {\n@@ -118,13 +119,13 @@ impl<T: ?Sized + LazyMeta> Lazy<T> {\n     }\n }\n \n-impl<T> Lazy<T> {\n+impl<T: Encodable> Lazy<T> {\n     crate fn from_position(position: NonZeroUsize) -> Lazy<T> {\n         Lazy::from_position_and_meta(position, ())\n     }\n }\n \n-impl<T> Lazy<[T]> {\n+impl<T: Encodable> Lazy<[T]> {\n     crate fn empty() -> Lazy<[T]> {\n         Lazy::from_position_and_meta(NonZeroUsize::new(1).unwrap(), 0)\n     }\n@@ -160,6 +161,7 @@ crate enum LazyState {\n // manually, instead of relying on the default, to get the correct variance.\n // Only needed when `T` itself contains a parameter (e.g. `'tcx`).\n macro_rules! Lazy {\n+    (Table<$T:ty>) => {Lazy<Table<$T>, usize>};\n     ([$T:ty]) => {Lazy<[$T], usize>};\n     ($T:ty) => {Lazy<$T, ()>};\n }\n@@ -194,7 +196,7 @@ crate struct CrateRoot<'tcx> {\n     pub exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),\n     pub interpret_alloc_index: Lazy<[u32]>,\n \n-    pub entries_table: Lazy!([Table<Entry<'tcx>>]),\n+    pub entries_table: Lazy!(Table<Entry<'tcx>>),\n \n     /// The DefIndex's of any proc macros delcared by\n     /// this crate"}, {"sha": "e18535060e6acafb5b4131254af52a8cc6046aa3", "filename": "src/librustc_metadata/table.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dd1264e90a47d9818d868276cd09363fe78056c4/src%2Flibrustc_metadata%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1264e90a47d9818d868276cd09363fe78056c4/src%2Flibrustc_metadata%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftable.rs?ref=dd1264e90a47d9818d868276cd09363fe78056c4", "patch": "@@ -1,7 +1,7 @@\n use crate::schema::*;\n \n use rustc::hir::def_id::{DefId, DefIndex};\n-use rustc_serialize::opaque::Encoder;\n+use rustc_serialize::{Encodable, opaque::Encoder};\n use std::convert::TryInto;\n use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n@@ -73,12 +73,12 @@ impl FixedSizeEncoding for u32 {\n /// (e.g. while visiting the definitions of a crate), and on-demand decoding\n /// of specific indices (e.g. queries for per-definition data).\n /// Similar to `Vec<Lazy<T>>`, but with zero-copy decoding.\n-crate struct Table<T> {\n+crate struct Table<T: LazyMeta<Meta = ()>> {\n     positions: Vec<u8>,\n     _marker: PhantomData<T>,\n }\n \n-impl<T> Table<T> {\n+impl<T: LazyMeta<Meta = ()>> Table<T> {\n     crate fn new(max_index: usize) -> Self {\n         Table {\n             positions: vec![0; max_index * 4],\n@@ -105,7 +105,7 @@ impl<T> Table<T> {\n         position.write_to_bytes_at(positions, array_index)\n     }\n \n-    crate fn encode(&self, buf: &mut Encoder) -> Lazy<[Self]> {\n+    crate fn encode(&self, buf: &mut Encoder) -> Lazy<Self> {\n         let pos = buf.position();\n         buf.emit_raw_bytes(&self.positions);\n         Lazy::from_position_and_meta(\n@@ -115,7 +115,15 @@ impl<T> Table<T> {\n     }\n }\n \n-impl<T> Lazy<[Table<T>]> {\n+impl<T: LazyMeta<Meta = ()>> LazyMeta for Table<T> {\n+    type Meta = usize;\n+\n+    fn min_size(len: usize) -> usize {\n+        len * 4\n+    }\n+}\n+\n+impl<T: Encodable> Lazy<Table<T>> {\n     /// Given the metadata, extract out the offset of a particular\n     /// DefIndex (if any).\n     #[inline(never)]"}]}