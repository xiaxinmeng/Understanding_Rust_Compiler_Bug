{"sha": "240734c31e529557583a0dc8e97abf858b4a375d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MDczNGMzMWU1Mjk1NTc1ODNhMGRjOGU5N2FiZjg1OGI0YTM3NWQ=", "commit": {"author": {"name": "bcoopers", "email": "coopersmithbrian@gmail.com", "date": "2015-03-30T17:59:32Z"}, "committer": {"name": "bcoopers", "email": "coopersmithbrian@gmail.com", "date": "2015-03-30T17:59:32Z"}, "message": "Only zero at most 64k at a time.  We still use the doubling\nreallocation strategy since extend() calls reserve() and/or\npush() for us.", "tree": {"sha": "0136110c2215ddf3e32ce737076d98249d773e0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0136110c2215ddf3e32ce737076d98249d773e0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/240734c31e529557583a0dc8e97abf858b4a375d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/240734c31e529557583a0dc8e97abf858b4a375d", "html_url": "https://github.com/rust-lang/rust/commit/240734c31e529557583a0dc8e97abf858b4a375d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/240734c31e529557583a0dc8e97abf858b4a375d/comments", "author": null, "committer": null, "parents": [{"sha": "8d3e55908ae0e51f04c170133c9f9739886b8e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3e55908ae0e51f04c170133c9f9739886b8e2e", "html_url": "https://github.com/rust-lang/rust/commit/8d3e55908ae0e51f04c170133c9f9739886b8e2e"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "6b03fb45c779d02d2cf102e8fba8054594e447ff", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/240734c31e529557583a0dc8e97abf858b4a375d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240734c31e529557583a0dc8e97abf858b4a375d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=240734c31e529557583a0dc8e97abf858b4a375d", "patch": "@@ -101,18 +101,14 @@ fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {\n     let start_len = buf.len();\n     let mut len = start_len;\n-    let min_cap_bump = 16;\n+    let mut new_write_size = 16;\n     let ret;\n     loop {\n         if len == buf.len() {\n-            if buf.capacity() == buf.len() {\n-                // reserve() rounds up our request such that every request\n-                // (with maybe the exception of the first request) for the\n-                // same amount of space doubles our capacity.\n-                buf.reserve(min_cap_bump);\n+            if new_write_size < DEFAULT_BUF_SIZE {\n+                new_write_size *= 2;\n             }\n-            let new_area = buf.capacity() - buf.len();\n-            buf.extend(iter::repeat(0).take(new_area));\n+            buf.extend(iter::repeat(0).take(new_write_size));\n         }\n \n         match r.read(&mut buf[len..]) {"}]}