{"sha": "dd0505cefc2a25702cfe33d8115ed2c536dc40b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMDUwNWNlZmMyYTI1NzAyY2ZlMzNkODExNWVkMmM1MzZkYzQwYjg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-07-10T23:43:55Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-07-10T23:43:55Z"}, "message": "Calculate the 2 largest variants using iterators\n\nNo need to store all sizes in a vector", "tree": {"sha": "2127c42e68d333746dd520b6ae66849a58073908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2127c42e68d333746dd520b6ae66849a58073908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd0505cefc2a25702cfe33d8115ed2c536dc40b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0505cefc2a25702cfe33d8115ed2c536dc40b8", "html_url": "https://github.com/rust-lang/rust/commit/dd0505cefc2a25702cfe33d8115ed2c536dc40b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd0505cefc2a25702cfe33d8115ed2c536dc40b8/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66fb62baf7a655e0b08f2d61f7e186ac0ac18045", "url": "https://api.github.com/repos/rust-lang/rust/commits/66fb62baf7a655e0b08f2d61f7e186ac0ac18045", "html_url": "https://github.com/rust-lang/rust/commit/66fb62baf7a655e0b08f2d61f7e186ac0ac18045"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "2dbe54fe7688b1904d7439781012e7405dd6e716", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dd0505cefc2a25702cfe33d8115ed2c536dc40b8/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0505cefc2a25702cfe33d8115ed2c536dc40b8/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=dd0505cefc2a25702cfe33d8115ed2c536dc40b8", "patch": "@@ -697,7 +697,6 @@ impl LateLintPass for VariantSizeDifferences {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         if let hir::ItemEnum(ref enum_definition, ref gens) = it.node {\n             if gens.ty_params.is_empty() {  // sizes only make sense for non-generic types\n-                let mut sizes = vec![];\n                 let t = cx.tcx.node_id_to_type(it.id);\n                 let layout = cx.tcx.normalizing_infer_ctxt(ProjectionMode::Any).enter(|infcx| {\n                     t.layout(&infcx).unwrap_or_else(|e| {\n@@ -710,26 +709,28 @@ impl LateLintPass for VariantSizeDifferences {\n \n                     debug!(\"enum `{}` is {} bytes large\", t, size.bytes());\n \n-                    for (variant, variant_layout) in enum_definition.variants.iter().zip(variants) {\n-                        // Subtract the size of the enum discriminant\n-                        let bytes = variant_layout.min_size().bytes().saturating_sub(discr_size);\n-                        sizes.push(bytes);\n-\n-                        debug!(\"- variant `{}` is {} bytes large\", variant.node.name, bytes);\n-                    }\n-\n-                    let (largest, slargest, largest_index) = sizes.iter()\n-                                                                  .enumerate()\n-                                                                  .fold((0, 0, 0),\n-                        |(l, s, li), (idx, &size)|\n-                            if size > l {\n-                                (size, l, idx)\n-                            } else if size > s {\n-                                (l, size, li)\n-                            } else {\n-                                (l, s, li)\n-                            }\n-                    );\n+                    let (largest, slargest, largest_index) = enum_definition.variants\n+                        .iter()\n+                        .zip(variants)\n+                        .map(|(variant, variant_layout)| {\n+                            // Subtract the size of the enum discriminant\n+                            let bytes = variant_layout.min_size().bytes()\n+                                                                 .saturating_sub(discr_size);\n+\n+                            debug!(\"- variant `{}` is {} bytes large\", variant.node.name, bytes);\n+                            bytes\n+                        })\n+                        .enumerate()\n+                        .fold((0, 0, 0),\n+                            |(l, s, li), (idx, size)|\n+                                if size > l {\n+                                    (size, l, idx)\n+                                } else if size > s {\n+                                    (l, size, li)\n+                                } else {\n+                                    (l, s, li)\n+                                }\n+                        );\n \n                     // we only warn if the largest variant is at least thrice as large as\n                     // the second-largest."}]}