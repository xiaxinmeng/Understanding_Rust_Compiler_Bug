{"sha": "127e080f62d557f0ea94b7f5b7f6cea2604b3122", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyN2UwODBmNjJkNTU3ZjBlYTk0YjdmNWI3ZjZjZWEyNjA0YjMxMjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-13T17:28:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-13T17:28:10Z"}, "message": "Implement ProjectionElem::ConstantIndex", "tree": {"sha": "26ed7cee80b8c2ab08392d390a0e780ee0e98953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ed7cee80b8c2ab08392d390a0e780ee0e98953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/127e080f62d557f0ea94b7f5b7f6cea2604b3122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/127e080f62d557f0ea94b7f5b7f6cea2604b3122", "html_url": "https://github.com/rust-lang/rust/commit/127e080f62d557f0ea94b7f5b7f6cea2604b3122", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/127e080f62d557f0ea94b7f5b7f6cea2604b3122/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5ab49e76251a2c4075f331a47c8d450592b65b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ab49e76251a2c4075f331a47c8d450592b65b3", "html_url": "https://github.com/rust-lang/rust/commit/e5ab49e76251a2c4075f331a47c8d450592b65b3"}], "stats": {"total": 100, "additions": 32, "deletions": 68}, "files": [{"sha": "1342bdd4e0c5e8eb1f94d5f804cc261b4d02c28c", "filename": "0006-alloc-Disable-some-unsupported-stuff.patch", "status": "modified", "additions": 3, "deletions": 41, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/127e080f62d557f0ea94b7f5b7f6cea2604b3122/0006-alloc-Disable-some-unsupported-stuff.patch", "raw_url": "https://github.com/rust-lang/rust/raw/127e080f62d557f0ea94b7f5b7f6cea2604b3122/0006-alloc-Disable-some-unsupported-stuff.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0006-alloc-Disable-some-unsupported-stuff.patch?ref=127e080f62d557f0ea94b7f5b7f6cea2604b3122", "patch": "@@ -5,7 +5,6 @@ Subject: [PATCH] [alloc] Disable some unsupported stuff\n \n ---\n  src/liballoc/boxed.rs | 6 ------\n- src/liballoc/str.rs   | 4 ++++\n  src/liballoc/vec.rs   | 2 --\n  3 files changed, 4 insertions(+), 8 deletions(-)\n \n@@ -33,42 +32,6 @@ index f989e70..597dd15 100644\n      fn write_isize(&mut self, i: isize) {\n          (**self).write_isize(i)\n      }\n-diff --git a/src/liballoc/str.rs b/src/liballoc/str.rs\n-index 2af8956..23dbb79 100644\n---- a/src/liballoc/str.rs\n-+++ b/src/liballoc/str.rs\n-@@ -361,6 +361,7 @@ impl str {\n-     #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n-     pub fn to_lowercase(&self) -> String {\n-         let mut s = String::with_capacity(self.len());\n-+        /*\n-         for (i, c) in self[..].char_indices() {\n-             if c == '\u03a3' {\n-                 // \u03a3 maps to \u03c3, except at the end of a word where it maps to \u03c2.\n-@@ -384,6 +385,7 @@ impl str {\n-                 }\n-             }\n-         }\n-+        */\n-         return s;\n- \n-         fn map_uppercase_sigma(from: &str, i: usize, to: &mut String) {\n-@@ -435,6 +437,7 @@ impl str {\n-     #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n-     pub fn to_uppercase(&self) -> String {\n-         let mut s = String::with_capacity(self.len());\n-+        /*\n-         for c in self[..].chars() {\n-             match conversions::to_upper(c) {\n-                 [a, '\\0', _] => s.push(a),\n-@@ -449,6 +452,7 @@ impl str {\n-                 }\n-             }\n-         }\n-+        */\n-         return s;\n-     }\n- \n diff --git a/src/liballoc/vec.rs b/src/liballoc/vec.rs\n index 2bc037e..2fe8894 100644\n --- a/src/liballoc/vec.rs\n@@ -79,14 +42,13 @@ index 2bc037e..2fe8894 100644\n  impl_is_zero!(i64, |x| x == 0);\n -impl_is_zero!(i128, |x| x == 0);\n  impl_is_zero!(isize, |x| x == 0);\n- \n+\n  impl_is_zero!(u16, |x| x == 0);\n  impl_is_zero!(u32, |x| x == 0);\n  impl_is_zero!(u64, |x| x == 0);\n -impl_is_zero!(u128, |x| x == 0);\n  impl_is_zero!(usize, |x| x == 0);\n- \n+\n  impl_is_zero!(char, |x| x == '\\0');\n--- \n+--\n 2.17.1 (Apple Git-112)\n-"}, {"sha": "402420644cd1c1c30791101c0db548ac7a90b2bf", "filename": "src/base.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/127e080f62d557f0ea94b7f5b7f6cea2604b3122/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127e080f62d557f0ea94b7f5b7f6cea2604b3122/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=127e080f62d557f0ea94b7f5b7f6cea2604b3122", "patch": "@@ -588,18 +588,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                 Rvalue::Len(place) => {\n                     let place = trans_place(fx, place);\n                     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n-                    let len = match place.layout().ty.sty {\n-                        ty::Array(_elem_ty, len) => {\n-                            let len = crate::constant::force_eval_const(fx, len)\n-                                .unwrap_usize(fx.tcx) as i64;\n-                            fx.bcx.ins().iconst(fx.pointer_type, len)\n-                        }\n-                        ty::Slice(_elem_ty) => match place {\n-                            CPlace::Addr(_, size, _) => size.unwrap(),\n-                            CPlace::Var(_, _) => unreachable!(),\n-                        },\n-                        _ => bug!(\"Rvalue::Len({:?})\", place),\n-                    };\n+                    let len = codegen_array_len(fx, place);\n                     lval.write_cvalue(fx, CValue::ByVal(len, usize_layout));\n                 }\n                 Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n@@ -660,6 +649,24 @@ fn trans_stmt<'a, 'tcx: 'a>(\n     }\n }\n \n+fn codegen_array_len<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+    place: CPlace<'tcx>,\n+) -> Value {\n+    match place.layout().ty.sty {\n+        ty::Array(_elem_ty, len) => {\n+            let len = crate::constant::force_eval_const(fx, len)\n+                .unwrap_usize(fx.tcx) as i64;\n+            fx.bcx.ins().iconst(fx.pointer_type, len)\n+        }\n+        ty::Slice(_elem_ty) => match place {\n+            CPlace::Addr(_, size, _) => size.unwrap(),\n+            CPlace::Var(_, _) => unreachable!(),\n+        },\n+        _ => bug!(\"Rvalue::Len({:?})\", place),\n+    }\n+}\n+\n pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     value: CValue<'tcx>,\n@@ -1060,21 +1067,16 @@ pub fn trans_place<'a, 'tcx: 'a>(\n                 ProjectionElem::ConstantIndex {\n                     offset,\n                     min_length: _,\n-                    from_end: false,\n-                } => unimpl!(\n-                    \"projection const index {:?} offset {:?} not from end\",\n-                    projection.base,\n-                    offset\n-                ),\n-                ProjectionElem::ConstantIndex {\n-                    offset,\n-                    min_length: _,\n-                    from_end: true,\n-                } => unimpl!(\n-                    \"projection const index {:?} offset {:?} from end\",\n-                    projection.base,\n-                    offset\n-                ),\n+                    from_end,\n+                } => {\n+                    let index = if !from_end {\n+                        fx.bcx.ins().iconst(fx.pointer_type, offset as i64)\n+                    } else {\n+                        let len = codegen_array_len(fx, base);\n+                        fx.bcx.ins().iadd_imm(len, -(offset as i64))\n+                    };\n+                    base.place_index(fx, index)\n+                },\n                 ProjectionElem::Subslice { from, to } => unimpl!(\n                     \"projection subslice {:?} from {} to {}\",\n                     projection.base,"}]}