{"sha": "bedd8108dc9b79402d1ea5349d766275f73398ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZGQ4MTA4ZGM5Yjc5NDAyZDFlYTUzNDlkNzY2Mjc1ZjczMzk4ZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-29T05:47:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-29T05:47:21Z"}, "message": "Auto merge of #21680 - japaric:slice, r=alexcrichton\n\nReplaces `slice_*` method calls with slicing syntax, and removes `as_slice()` calls that are redundant due to `Deref`.", "tree": {"sha": "33580f180481d78ead16c7a8d3af4513968f4007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33580f180481d78ead16c7a8d3af4513968f4007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bedd8108dc9b79402d1ea5349d766275f73398ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bedd8108dc9b79402d1ea5349d766275f73398ff", "html_url": "https://github.com/rust-lang/rust/commit/bedd8108dc9b79402d1ea5349d766275f73398ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bedd8108dc9b79402d1ea5349d766275f73398ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5961ad06d45689b44ff305c15d6ec7ec65755a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5961ad06d45689b44ff305c15d6ec7ec65755a9", "html_url": "https://github.com/rust-lang/rust/commit/c5961ad06d45689b44ff305c15d6ec7ec65755a9"}, {"sha": "bce81e24647507c82e02e9918f54e8e3a2431149", "url": "https://api.github.com/repos/rust-lang/rust/commits/bce81e24647507c82e02e9918f54e8e3a2431149", "html_url": "https://github.com/rust-lang/rust/commit/bce81e24647507c82e02e9918f54e8e3a2431149"}], "stats": {"total": 316, "additions": 156, "deletions": 160}, "files": [{"sha": "72966d835a6a0d90f1da75be0edb6aa056b7698b", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -369,8 +369,8 @@ pub fn make_metrics_test_closure(config: &Config, testfile: &Path) -> test::Test\n fn extract_gdb_version(full_version_line: Option<String>) -> Option<String> {\n     match full_version_line {\n         Some(ref full_version_line)\n-          if full_version_line.as_slice().trim().len() > 0 => {\n-            let full_version_line = full_version_line.as_slice().trim();\n+          if full_version_line.trim().len() > 0 => {\n+            let full_version_line = full_version_line.trim();\n \n             // used to be a regex \"(^|[^0-9])([0-9]\\.[0-9])([^0-9]|$)\"\n             for (pos, c) in full_version_line.char_indices() {\n@@ -409,8 +409,8 @@ fn extract_lldb_version(full_version_line: Option<String>) -> Option<String> {\n \n     match full_version_line {\n         Some(ref full_version_line)\n-          if full_version_line.as_slice().trim().len() > 0 => {\n-            let full_version_line = full_version_line.as_slice().trim();\n+          if full_version_line.trim().len() > 0 => {\n+            let full_version_line = full_version_line.trim();\n \n             for (pos, l) in full_version_line.char_indices() {\n                 if l != 'l' && l != 'L' { continue }"}, {"sha": "f83c27b75d6fc12188dd6a5aca7e1bb512ee2959", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -149,7 +149,7 @@ pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n     }\n     fn ignore_stage(config: &Config) -> String {\n         format!(\"ignore-{}\",\n-                config.stage_id.as_slice().split('-').next().unwrap())\n+                config.stage_id.split('-').next().unwrap())\n     }\n     fn ignore_gdb(config: &Config, line: &str) -> bool {\n         if config.mode != common::DebugInfoGdb {\n@@ -231,11 +231,11 @@ fn iter_header<F>(testfile: &Path, mut it: F) -> bool where\n         // module or function. This doesn't seem to be an optimization\n         // with a warm page cache. Maybe with a cold one.\n         let ln = ln.unwrap();\n-        if ln.as_slice().starts_with(\"fn\") ||\n-                ln.as_slice().starts_with(\"mod\") {\n+        if ln.starts_with(\"fn\") ||\n+                ln.starts_with(\"mod\") {\n             return true;\n         } else {\n-            if !(it(ln.as_slice().trim())) {\n+            if !(it(ln.trim())) {\n                 return false;\n             }\n         }"}, {"sha": "18cb3d1d5b006634158dc65a0b86737aaaacdec7", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -777,7 +777,7 @@ fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n     for line in reader.lines() {\n         match line {\n             Ok(line) => {\n-                if line.as_slice().contains(\"#break\") {\n+                if line.contains(\"#break\") {\n                     breakpoint_lines.push(counter);\n                 }\n \n@@ -843,7 +843,7 @@ fn check_debugger_output(debugger_run_result: &ProcRes, check_lines: &[String])\n         // check if each line in props.check_lines appears in the\n         // output (in order)\n         let mut i = 0u;\n-        for line in debugger_run_result.stdout.as_slice().lines() {\n+        for line in debugger_run_result.stdout.lines() {\n             let mut rest = line.trim();\n             let mut first = true;\n             let mut failed = false;\n@@ -895,7 +895,7 @@ fn check_error_patterns(props: &TestProps,\n     let mut next_err_idx = 0u;\n     let mut next_err_pat = &props.error_patterns[next_err_idx];\n     let mut done = false;\n-    for line in output_to_check.as_slice().lines() {\n+    for line in output_to_check.lines() {\n         if line.contains(next_err_pat.as_slice()) {\n             debug!(\"found error pattern {}\", next_err_pat);\n             next_err_idx += 1u;\n@@ -924,7 +924,7 @@ fn check_error_patterns(props: &TestProps,\n }\n \n fn check_no_compiler_crash(proc_res: &ProcRes) {\n-    for line in proc_res.stderr.as_slice().lines() {\n+    for line in proc_res.stderr.lines() {\n         if line.starts_with(\"error: internal compiler error:\") {\n             fatal_proc_rec(\"compiler encountered internal error\",\n                           proc_res);\n@@ -983,7 +983,7 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n     //    filename:line1:col1: line2:col2: *warning:* msg\n     // where line1:col1: is the starting point, line2:col2:\n     // is the ending point, and * represents ANSI color codes.\n-    for line in proc_res.stderr.as_slice().lines() {\n+    for line in proc_res.stderr.lines() {\n         let mut was_expected = false;\n         for (i, ee) in expected_errors.iter().enumerate() {\n             if !found_flags[i] {\n@@ -1536,7 +1536,7 @@ fn _arm_exec_compiled_test(config: &Config,\n         .expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());\n \n     let mut exitcode: int = 0;\n-    for c in exitcode_out.as_slice().chars() {\n+    for c in exitcode_out.chars() {\n         if !c.is_numeric() { break; }\n         exitcode = exitcode * 10 + match c {\n             '0' ... '9' => c as int - ('0' as int),"}, {"sha": "bb72b066e0963022a85117ba4557fdc5c491b536", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -43,8 +43,8 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             None => continue\n         };\n \n-        let val = line.slice_to(eq);\n-        let num = line.slice_from(eq + 1);\n+        let val = &line[..eq];\n+        let num = &line[eq + 1..];\n \n         let tok = match val {\n             \"SHR\"               => token::BinOp(token::Shr),\n@@ -136,27 +136,27 @@ fn str_to_binop(s: &str) -> token::BinOpToken {\n fn fix(mut lit: &str) -> ast::Name {\n     if lit.char_at(0) == 'r' {\n         if lit.char_at(1) == 'b' {\n-            lit = lit.slice_from(2)\n+            lit = &lit[2..]\n         } else {\n-            lit = lit.slice_from(1);\n+            lit = &lit[1..];\n         }\n     } else if lit.char_at(0) == 'b' {\n-        lit = lit.slice_from(1);\n+        lit = &lit[1..];\n     }\n \n     let leading_hashes = count(lit);\n \n     // +1/-1 to adjust for single quotes\n-    parse::token::intern(lit.slice(leading_hashes + 1, lit.len() - leading_hashes - 1))\n+    parse::token::intern(&lit[leading_hashes + 1..lit.len() - leading_hashes - 1])\n }\n \n /// Assuming a char/byte literal, strip the 'b' prefix and the single quotes.\n fn fixchar(mut lit: &str) -> ast::Name {\n     if lit.char_at(0) == 'b' {\n-        lit = lit.slice_from(1);\n+        lit = &lit[1..];\n     }\n \n-    parse::token::intern(lit.slice(1, lit.len() - 1))\n+    parse::token::intern(&lit[1..lit.len() - 1])\n }\n \n fn count(lit: &str) -> usize {\n@@ -187,8 +187,7 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>) -> TokenAn\n \n     let real_tok = match *proto_tok {\n         token::BinOp(..)           => token::BinOp(str_to_binop(content)),\n-        token::BinOpEq(..)         => token::BinOpEq(str_to_binop(content.slice_to(\n-                                                                    content.len() - 1))),\n+        token::BinOpEq(..)         => token::BinOpEq(str_to_binop(&content[..content.len() - 1])),\n         token::Literal(token::Str_(..), n)      => token::Literal(token::Str_(fix(content)), n),\n         token::Literal(token::StrRaw(..), n)    => token::Literal(token::StrRaw(fix(content),\n                                                                              count(content)), n),\n@@ -249,7 +248,7 @@ fn main() {\n     let mut stdin = std::io::stdin();\n     let mut lock = stdin.lock();\n     let lines = lock.lines();\n-    let mut antlr_tokens = lines.map(|l| parse_antlr_token(l.unwrap().as_slice().trim(),\n+    let mut antlr_tokens = lines.map(|l| parse_antlr_token(l.unwrap().trim(),\n                                                                    &token_map));\n \n     let code = File::open(&Path::new(args[1].as_slice())).unwrap().read_to_string().unwrap();"}, {"sha": "2b2670122d25dad9e3479929d888874437085c20", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -1594,21 +1594,21 @@ mod tests {\n     #[test]\n     fn test_get() {\n         let mut a = vec![11i];\n-        assert_eq!(a.as_slice().get(1), None);\n+        assert_eq!(a.get(1), None);\n         a = vec![11i, 12];\n-        assert_eq!(a.as_slice().get(1).unwrap(), &12);\n+        assert_eq!(a.get(1).unwrap(), &12);\n         a = vec![11i, 12, 13];\n-        assert_eq!(a.as_slice().get(1).unwrap(), &12);\n+        assert_eq!(a.get(1).unwrap(), &12);\n     }\n \n     #[test]\n     fn test_first() {\n         let mut a = vec![];\n-        assert_eq!(a.as_slice().first(), None);\n+        assert_eq!(a.first(), None);\n         a = vec![11i];\n-        assert_eq!(a.as_slice().first().unwrap(), &11);\n+        assert_eq!(a.first().unwrap(), &11);\n         a = vec![11i, 12];\n-        assert_eq!(a.as_slice().first().unwrap(), &11);\n+        assert_eq!(a.first().unwrap(), &11);\n     }\n \n     #[test]\n@@ -1692,11 +1692,11 @@ mod tests {\n     #[test]\n     fn test_last() {\n         let mut a = vec![];\n-        assert_eq!(a.as_slice().last(), None);\n+        assert_eq!(a.last(), None);\n         a = vec![11i];\n-        assert_eq!(a.as_slice().last().unwrap(), &11);\n+        assert_eq!(a.last().unwrap(), &11);\n         a = vec![11i, 12];\n-        assert_eq!(a.as_slice().last().unwrap(), &12);\n+        assert_eq!(a.last().unwrap(), &12);\n     }\n \n     #[test]\n@@ -1917,7 +1917,7 @@ mod tests {\n             let (min_size, max_opt) = it.size_hint();\n             assert_eq!(min_size, 1);\n             assert_eq!(max_opt.unwrap(), 1);\n-            assert_eq!(it.next(), Some(v.as_slice().to_vec()));\n+            assert_eq!(it.next(), Some(v.to_vec()));\n             assert_eq!(it.next(), None);\n         }\n         {\n@@ -1926,7 +1926,7 @@ mod tests {\n             let (min_size, max_opt) = it.size_hint();\n             assert_eq!(min_size, 1);\n             assert_eq!(max_opt.unwrap(), 1);\n-            assert_eq!(it.next(), Some(v.as_slice().to_vec()));\n+            assert_eq!(it.next(), Some(v.to_vec()));\n             assert_eq!(it.next(), None);\n         }\n         {\n@@ -2030,10 +2030,10 @@ mod tests {\n         assert!([].position_elem(&1i).is_none());\n \n         let v1 = vec![1i, 2, 3, 3, 2, 5];\n-        assert_eq!(v1.as_slice().position_elem(&1), Some(0u));\n-        assert_eq!(v1.as_slice().position_elem(&2), Some(1u));\n-        assert_eq!(v1.as_slice().position_elem(&5), Some(5u));\n-        assert!(v1.as_slice().position_elem(&4).is_none());\n+        assert_eq!(v1.position_elem(&1), Some(0u));\n+        assert_eq!(v1.position_elem(&2), Some(1u));\n+        assert_eq!(v1.position_elem(&5), Some(5u));\n+        assert!(v1.position_elem(&4).is_none());\n     }\n \n     #[test]\n@@ -2104,13 +2104,13 @@ mod tests {\n                 let mut v1 = v.clone();\n \n                 v.sort();\n-                assert!(v.as_slice().windows(2).all(|w| w[0] <= w[1]));\n+                assert!(v.windows(2).all(|w| w[0] <= w[1]));\n \n                 v1.sort_by(|a, b| a.cmp(b));\n-                assert!(v1.as_slice().windows(2).all(|w| w[0] <= w[1]));\n+                assert!(v1.windows(2).all(|w| w[0] <= w[1]));\n \n                 v1.sort_by(|a, b| b.cmp(a));\n-                assert!(v1.as_slice().windows(2).all(|w| w[0] >= w[1]));\n+                assert!(v1.windows(2).all(|w| w[0] >= w[1]));\n             }\n         }\n \n@@ -2149,7 +2149,7 @@ mod tests {\n                 // will need to be ordered with increasing\n                 // counts... i.e. exactly asserting that this sort is\n                 // stable.\n-                assert!(v.as_slice().windows(2).all(|w| w[0] <= w[1]));\n+                assert!(v.windows(2).all(|w| w[0] <= w[1]));\n             }\n         }\n     }\n@@ -2570,14 +2570,14 @@ mod tests {\n         assert!(a == [7i,2,3,4]);\n         let mut a = [1i,2,3,4,5];\n         let b = vec![5i,6,7,8,9,0];\n-        assert_eq!(a.slice_mut(2, 4).move_from(b,1,6), 2);\n+        assert_eq!(a[2..4].move_from(b,1,6), 2);\n         assert!(a == [1i,2,6,7,5]);\n     }\n \n     #[test]\n     fn test_reverse_part() {\n         let mut values = [1i,2,3,4,5];\n-        values.slice_mut(1, 4).reverse();\n+        values[1..4].reverse();\n         assert!(values == [1,4,3,2,5]);\n     }\n \n@@ -2624,9 +2624,9 @@ mod tests {\n     fn test_bytes_set_memory() {\n         use slice::bytes::MutableByteVector;\n         let mut values = [1u8,2,3,4,5];\n-        values.slice_mut(0, 5).set_memory(0xAB);\n+        values[0..5].set_memory(0xAB);\n         assert!(values == [0xAB, 0xAB, 0xAB, 0xAB, 0xAB]);\n-        values.slice_mut(2, 4).set_memory(0xFF);\n+        values[2..4].set_memory(0xFF);\n         assert!(values == [0xAB, 0xAB, 0xFF, 0xFF, 0xAB]);\n     }\n \n@@ -2884,7 +2884,7 @@ mod bench {\n         let xss: Vec<Vec<uint>> =\n             range(0, 100u).map(|i| range(0, i).collect()).collect();\n         b.iter(|| {\n-            xss.as_slice().concat();\n+            xss.concat();\n         });\n     }\n \n@@ -2893,7 +2893,7 @@ mod bench {\n         let xss: Vec<Vec<uint>> =\n             range(0, 100u).map(|i| range(0, i).collect()).collect();\n         b.iter(|| {\n-            xss.as_slice().connect(&0)\n+            xss.connect(&0)\n         });\n     }\n \n@@ -2910,15 +2910,15 @@ mod bench {\n     fn starts_with_same_vector(b: &mut Bencher) {\n         let vec: Vec<uint> = range(0, 100).collect();\n         b.iter(|| {\n-            vec.as_slice().starts_with(vec.as_slice())\n+            vec.starts_with(vec.as_slice())\n         })\n     }\n \n     #[bench]\n     fn starts_with_single_element(b: &mut Bencher) {\n         let vec: Vec<uint> = vec![0];\n         b.iter(|| {\n-            vec.as_slice().starts_with(vec.as_slice())\n+            vec.starts_with(vec.as_slice())\n         })\n     }\n \n@@ -2928,23 +2928,23 @@ mod bench {\n         let mut match_vec: Vec<uint> = range(0, 99).collect();\n         match_vec.push(0);\n         b.iter(|| {\n-            vec.as_slice().starts_with(match_vec.as_slice())\n+            vec.starts_with(match_vec.as_slice())\n         })\n     }\n \n     #[bench]\n     fn ends_with_same_vector(b: &mut Bencher) {\n         let vec: Vec<uint> = range(0, 100).collect();\n         b.iter(|| {\n-            vec.as_slice().ends_with(vec.as_slice())\n+            vec.ends_with(vec.as_slice())\n         })\n     }\n \n     #[bench]\n     fn ends_with_single_element(b: &mut Bencher) {\n         let vec: Vec<uint> = vec![0];\n         b.iter(|| {\n-            vec.as_slice().ends_with(vec.as_slice())\n+            vec.ends_with(vec.as_slice())\n         })\n     }\n \n@@ -2954,7 +2954,7 @@ mod bench {\n         let mut match_vec: Vec<uint> = range(0, 100).collect();\n         match_vec.as_mut_slice()[0] = 200;\n         b.iter(|| {\n-            vec.as_slice().starts_with(match_vec.as_slice())\n+            vec.starts_with(match_vec.as_slice())\n         })\n     }\n "}, {"sha": "dee70c03a06e76fb08bf1fb313d92769df5d3707", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -1430,28 +1430,28 @@ mod tests {\n         assert!(\"banana\".find_str(\"apple pie\").is_none());\n \n         let data = \"abcabc\";\n-        assert_eq!(data.slice(0u, 6u).find_str(\"ab\"), Some(0u));\n-        assert_eq!(data.slice(2u, 6u).find_str(\"ab\"), Some(3u - 2u));\n-        assert!(data.slice(2u, 4u).find_str(\"ab\").is_none());\n+        assert_eq!(data[0u..6u].find_str(\"ab\"), Some(0u));\n+        assert_eq!(data[2u..6u].find_str(\"ab\"), Some(3u - 2u));\n+        assert!(data[2u..4u].find_str(\"ab\").is_none());\n \n         let string = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let mut data = String::from_str(string);\n         data.push_str(string);\n         assert!(data.find_str(\"\u0e44\u0e17\u534e\").is_none());\n-        assert_eq!(data.slice(0u, 43u).find_str(\"\"), Some(0u));\n-        assert_eq!(data.slice(6u, 43u).find_str(\"\"), Some(6u - 6u));\n+        assert_eq!(data[0u..43u].find_str(\"\"), Some(0u));\n+        assert_eq!(data[6u..43u].find_str(\"\"), Some(6u - 6u));\n \n-        assert_eq!(data.slice(0u, 43u).find_str(\"\u0e1b\u0e23\u0e30\"), Some( 0u));\n-        assert_eq!(data.slice(0u, 43u).find_str(\"\u0e17\u0e28\u0e44\"), Some(12u));\n-        assert_eq!(data.slice(0u, 43u).find_str(\"\u0e22\u4e2d\"), Some(24u));\n-        assert_eq!(data.slice(0u, 43u).find_str(\"i\u1ec7t\"), Some(34u));\n-        assert_eq!(data.slice(0u, 43u).find_str(\"Nam\"), Some(40u));\n+        assert_eq!(data[0u..43u].find_str(\"\u0e1b\u0e23\u0e30\"), Some( 0u));\n+        assert_eq!(data[0u..43u].find_str(\"\u0e17\u0e28\u0e44\"), Some(12u));\n+        assert_eq!(data[0u..43u].find_str(\"\u0e22\u4e2d\"), Some(24u));\n+        assert_eq!(data[0u..43u].find_str(\"i\u1ec7t\"), Some(34u));\n+        assert_eq!(data[0u..43u].find_str(\"Nam\"), Some(40u));\n \n-        assert_eq!(data.slice(43u, 86u).find_str(\"\u0e1b\u0e23\u0e30\"), Some(43u - 43u));\n-        assert_eq!(data.slice(43u, 86u).find_str(\"\u0e17\u0e28\u0e44\"), Some(55u - 43u));\n-        assert_eq!(data.slice(43u, 86u).find_str(\"\u0e22\u4e2d\"), Some(67u - 43u));\n-        assert_eq!(data.slice(43u, 86u).find_str(\"i\u1ec7t\"), Some(77u - 43u));\n-        assert_eq!(data.slice(43u, 86u).find_str(\"Nam\"), Some(83u - 43u));\n+        assert_eq!(data[43u..86u].find_str(\"\u0e1b\u0e23\u0e30\"), Some(43u - 43u));\n+        assert_eq!(data[43u..86u].find_str(\"\u0e17\u0e28\u0e44\"), Some(55u - 43u));\n+        assert_eq!(data[43u..86u].find_str(\"\u0e22\u4e2d\"), Some(67u - 43u));\n+        assert_eq!(data[43u..86u].find_str(\"i\u1ec7t\"), Some(77u - 43u));\n+        assert_eq!(data[43u..86u].find_str(\"Nam\"), Some(83u - 43u));\n     }\n \n     #[test]\n@@ -1937,8 +1937,8 @@ mod tests {\n     #[test]\n     fn test_subslice_offset() {\n         let a = \"kernelsprite\";\n-        let b = a.slice(7, a.len());\n-        let c = a.slice(0, a.len() - 6);\n+        let b = &a[7..a.len()];\n+        let c = &a[0..a.len() - 6];\n         assert_eq!(a.subslice_offset(b), 7);\n         assert_eq!(a.subslice_offset(c), 0);\n "}, {"sha": "80b8d4f1cc87258021799e7d9d09468cafcd1885", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -1175,11 +1175,11 @@ mod tests {\n     fn test_push_str() {\n         let mut s = String::new();\n         s.push_str(\"\");\n-        assert_eq!(s.slice_from(0), \"\");\n+        assert_eq!(&s[0..], \"\");\n         s.push_str(\"abc\");\n-        assert_eq!(s.slice_from(0), \"abc\");\n+        assert_eq!(&s[0..], \"abc\");\n         s.push_str(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        assert_eq!(s.slice_from(0), \"abc\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        assert_eq!(&s[0..], \"abc\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n     }\n \n     #[test]"}, {"sha": "1af171ee7e38d7f60a2671d5263c576877e0e7d0", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -455,7 +455,7 @@ impl<T, E> Result<T, E> {\n     ///     let line: IoResult<String> = buffer.read_line();\n     ///     // Convert the string line to a number using `map` and `from_str`\n     ///     let val: IoResult<int> = line.map(|line| {\n-    ///         line.as_slice().trim_right().parse::<int>().unwrap_or(0)\n+    ///         line.trim_right().parse::<int>().unwrap_or(0)\n     ///     });\n     ///     // Add the value if there were no errors, otherwise add 0\n     ///     sum += val.ok().unwrap_or(0);"}, {"sha": "3d89b26be0489221473ef744346b3749003ed125", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -19,7 +19,7 @@ fn check_contains_all_substrings(s: &str) {\n     assert!(s.contains(\"\"));\n     for i in range(0, s.len()) {\n         for j in range(i+1, s.len() + 1) {\n-            assert!(s.contains(s.slice(i, j)));\n+            assert!(s.contains(&s[i..j]));\n         }\n     }\n }"}, {"sha": "d99ce8b64b0fbc904eb93bf1b607e4ba8c4cba23", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -139,14 +139,14 @@ impl FixedBuffer for FixedBuffer64 {\n             let buffer_remaining = size - self.buffer_idx;\n             if input.len() >= buffer_remaining {\n                     copy_memory(\n-                        self.buffer.slice_mut(self.buffer_idx, size),\n+                        &mut self.buffer[self.buffer_idx..size],\n                         &input[..buffer_remaining]);\n                 self.buffer_idx = 0;\n                 func(&self.buffer);\n                 i += buffer_remaining;\n             } else {\n                 copy_memory(\n-                    self.buffer.slice_mut(self.buffer_idx, self.buffer_idx + input.len()),\n+                    &mut self.buffer[self.buffer_idx..self.buffer_idx + input.len()],\n                     input);\n                 self.buffer_idx += input.len();\n                 return;\n@@ -165,7 +165,7 @@ impl FixedBuffer for FixedBuffer64 {\n         // be empty.\n         let input_remaining = input.len() - i;\n         copy_memory(\n-            self.buffer.slice_to_mut(input_remaining),\n+            &mut self.buffer[..input_remaining],\n             &input[i..]);\n         self.buffer_idx += input_remaining;\n     }\n@@ -176,13 +176,13 @@ impl FixedBuffer for FixedBuffer64 {\n \n     fn zero_until(&mut self, idx: uint) {\n         assert!(idx >= self.buffer_idx);\n-        self.buffer.slice_mut(self.buffer_idx, idx).set_memory(0);\n+        self.buffer[self.buffer_idx..idx].set_memory(0);\n         self.buffer_idx = idx;\n     }\n \n     fn next<'s>(&'s mut self, len: uint) -> &'s mut [u8] {\n         self.buffer_idx += len;\n-        return self.buffer.slice_mut(self.buffer_idx - len, self.buffer_idx);\n+        return &mut self.buffer[self.buffer_idx - len..self.buffer_idx];\n     }\n \n     fn full_buffer<'s>(&'s mut self) -> &'s [u8] {\n@@ -362,7 +362,7 @@ impl Engine256State {\n              )\n         }\n \n-        read_u32v_be(w.slice_mut(0, 16), data);\n+        read_u32v_be(&mut w[0..16], data);\n \n         // Putting the message schedule inside the same loop as the round calculations allows for\n         // the compiler to generate better code.\n@@ -498,14 +498,14 @@ impl Digest for Sha256 {\n     fn result(&mut self, out: &mut [u8]) {\n         self.engine.finish();\n \n-        write_u32_be(out.slice_mut(0, 4), self.engine.state.h0);\n-        write_u32_be(out.slice_mut(4, 8), self.engine.state.h1);\n-        write_u32_be(out.slice_mut(8, 12), self.engine.state.h2);\n-        write_u32_be(out.slice_mut(12, 16), self.engine.state.h3);\n-        write_u32_be(out.slice_mut(16, 20), self.engine.state.h4);\n-        write_u32_be(out.slice_mut(20, 24), self.engine.state.h5);\n-        write_u32_be(out.slice_mut(24, 28), self.engine.state.h6);\n-        write_u32_be(out.slice_mut(28, 32), self.engine.state.h7);\n+        write_u32_be(&mut out[0..4], self.engine.state.h0);\n+        write_u32_be(&mut out[4..8], self.engine.state.h1);\n+        write_u32_be(&mut out[8..12], self.engine.state.h2);\n+        write_u32_be(&mut out[12..16], self.engine.state.h3);\n+        write_u32_be(&mut out[16..20], self.engine.state.h4);\n+        write_u32_be(&mut out[20..24], self.engine.state.h5);\n+        write_u32_be(&mut out[24..28], self.engine.state.h6);\n+        write_u32_be(&mut out[28..32], self.engine.state.h7);\n     }\n \n     fn reset(&mut self) {\n@@ -571,8 +571,7 @@ mod tests {\n             let mut left = len;\n             while left > 0u {\n                 let take = (left + 1u) / 2u;\n-                sh.input_str(t.input\n-                              .slice(len - left, take + len - left));\n+                sh.input_str(&t.input[len - left..take + len - left]);\n                 left = left - take;\n             }\n             let out_str = sh.result_str();\n@@ -623,7 +622,7 @@ mod tests {\n             let next: uint = rng.gen_range(0, 2 * blocksize + 1);\n             let remaining = total_size - count;\n             let size = if next > remaining { remaining } else { next };\n-            digest.input(buffer.slice_to(size));\n+            digest.input(&buffer[..size]);\n             count += size;\n         }\n "}, {"sha": "a67c31bffba2b8a210fdbf70541aab20c7a507df", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -121,7 +121,7 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n                 })\n             };\n \n-            let ptr = bc_decoded.as_slice().as_ptr();\n+            let ptr = bc_decoded.as_ptr();\n             debug!(\"linking {}, part {}\", name, i);\n             time(sess.time_passes(),\n                  &format!(\"ll link {}.{}\", name, i)[],"}, {"sha": "eb7402b67c419a508b801fd3a23fc4b61f84b5fb", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -753,7 +753,7 @@ impl fmt::Display for ModuleSummary {\n \n             try!(write!(f, \"<tr>\"));\n             try!(write!(f, \"<td><a href='{}'>{}</a></td>\", {\n-                            let mut url = context.slice_from(1).to_vec();\n+                            let mut url = context[1..].to_vec();\n                             url.push(\"index.html\");\n                             url.connect(\"/\")\n                         },"}, {"sha": "de8454d220ad03ef0fa7ef43140d0cec8444f7ba", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -1348,7 +1348,7 @@ impl<'a> Item<'a> {\n             };\n             Some(format!(\"{root}{path}/{file}?gotosrc={goto}\",\n                          root = root,\n-                         path = path.slice_to(path.len() - 1).connect(\"/\"),\n+                         path = path[..path.len() - 1].connect(\"/\"),\n                          file = item_path(self.item),\n                          goto = self.item.def_id.node))\n         }\n@@ -1793,7 +1793,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                     cx.current.connect(\"/\")\n                 } else {\n                     let path = &cache.external_paths[it.def_id];\n-                    path.slice_to(path.len() - 1).connect(\"/\")\n+                    path[..path.len() - 1].connect(\"/\")\n                 },\n                 ty = shortty(it).to_static_str(),\n                 name = *it.name.as_ref().unwrap()));\n@@ -2197,9 +2197,7 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                 try!(write!(fmt, \"::<wbr>\"));\n             }\n             try!(write!(fmt, \"<a href='{}index.html'>{}</a>\",\n-                          cx.root_path\n-                            .as_slice()\n-                            .slice_to((cx.current.len() - i - 1) * 3),\n+                          &cx.root_path[..(cx.current.len() - i - 1) * 3],\n                           *name));\n         }\n         try!(write!(fmt, \"</p>\"));"}, {"sha": "f8ba2dc2a74837683290685bc73b43e4b5d3db3f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -229,7 +229,7 @@ pub fn main_args(args: &[String]) -> int {\n \n     let test_args = matches.opt_strs(\"test-args\");\n     let test_args: Vec<String> = test_args.iter()\n-                                          .flat_map(|s| s.as_slice().words())\n+                                          .flat_map(|s| s.words())\n                                           .map(|s| s.to_string())\n                                           .collect();\n "}, {"sha": "33c5d7402f093b02489df246d1fe839e1f09b7e0", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -107,7 +107,7 @@ impl FromHex for str {\n     /// fn main () {\n     ///     let hello_str = \"Hello, World\".as_bytes().to_hex();\n     ///     println!(\"{}\", hello_str);\n-    ///     let bytes = hello_str.as_slice().from_hex().unwrap();\n+    ///     let bytes = hello_str.from_hex().unwrap();\n     ///     println!(\"{:?}\", bytes);\n     ///     let result_str = String::from_utf8(bytes).unwrap();\n     ///     println!(\"{}\", result_str);"}, {"sha": "5a4ce24be0d351e0354471cc9776a82bb558ac32", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -936,11 +936,11 @@ mod test {\n         {\n             let mut read_stream = File::open_mode(filename, Open, Read);\n             {\n-                let read_buf = read_mem.slice_mut(0, 4);\n+                let read_buf = &mut read_mem[0..4];\n                 check!(read_stream.read(read_buf));\n             }\n             {\n-                let read_buf = read_mem.slice_mut(4, 8);\n+                let read_buf = &mut read_mem[4..8];\n                 check!(read_stream.read(read_buf));\n             }\n         }\n@@ -971,7 +971,7 @@ mod test {\n         }\n         check!(unlink(filename));\n         let read_str = str::from_utf8(&read_mem).unwrap();\n-        assert_eq!(read_str, message.slice(4, 8));\n+        assert_eq!(read_str, &message[4..8]);\n         assert_eq!(tell_pos_pre_read, set_cursor);\n         assert_eq!(tell_pos_post_read, message.len() as u64);\n     }"}, {"sha": "750bc50288affe957ef8a0a46d6da89e430f8aea", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -647,7 +647,7 @@ mod test {\n         assert!(r.read_at_least(buf.len(), &mut buf).is_ok());\n         let b: &[_] = &[1, 2, 3];\n         assert_eq!(buf, b);\n-        assert!(r.read_at_least(0, buf.slice_to_mut(0)).is_ok());\n+        assert!(r.read_at_least(0, &mut buf[..0]).is_ok());\n         assert_eq!(buf, b);\n         assert!(r.read_at_least(buf.len(), &mut buf).is_ok());\n         let b: &[_] = &[4, 5, 6];"}, {"sha": "de0752b36191cae434e0bf1077fc2c9ad698e9ab", "filename": "src/libstd/old_io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -47,7 +47,7 @@ use sys_common;\n ///     match socket.recv_from(&mut buf) {\n ///         Ok((amt, src)) => {\n ///             // Send a reply to the socket we received data from\n-///             let buf = buf.slice_to_mut(amt);\n+///             let buf = &mut buf[..amt];\n ///             buf.reverse();\n ///             socket.send_to(buf, src);\n ///         }"}, {"sha": "588f724134e5a2606de11d9a91724ee8f20021a9", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -109,7 +109,7 @@ impl GenericPathUnsafe for Path {\n     unsafe fn new_unchecked<T: BytesContainer>(path: T) -> Path {\n         let path = Path::normalize(path.container_as_bytes());\n         assert!(!path.is_empty());\n-        let idx = path.as_slice().rposition_elem(&SEP_BYTE);\n+        let idx = path.rposition_elem(&SEP_BYTE);\n         Path{ repr: path, sepidx: idx }\n     }\n \n@@ -290,7 +290,7 @@ impl GenericPath for Path {\n                     }\n                 }\n             }\n-            Some(Path::new(comps.as_slice().connect(&SEP_BYTE)))\n+            Some(Path::new(comps.connect(&SEP_BYTE)))\n         }\n     }\n "}, {"sha": "b71e8b4fd61e8dadebd3d9fa754e559b23ee4532", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -107,7 +107,7 @@ mod test {\n         let v = [1u8, 2, 3, 4, 5, 6, 7, 8];\n         let mut w = [0u8; 8];\n \n-        let mut rng = ReaderRng::new(MemReader::new(v.as_slice().to_vec()));\n+        let mut rng = ReaderRng::new(MemReader::new(v.to_vec()));\n         rng.fill_bytes(&mut w);\n \n         assert!(v == w);"}, {"sha": "c3e125868293cb6c559dd449d5d76a6651979602", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -94,7 +94,7 @@ pub fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n                         ($($pat:expr, => $demangled:expr),*) => ({\n                             $(if rest.starts_with($pat) {\n                                 try!(writer.write_str($demangled));\n-                                rest = rest.slice_from($pat.len());\n+                                rest = &rest[$pat.len()..];\n                               } else)*\n                             {\n                                 try!(writer.write_str(rest));"}, {"sha": "49c24bd5dc9ee38c43032d8630224ee12c144833", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -942,7 +942,7 @@ mod bench {\n         let v = range(0, 500).map(|i| nums[i%5]).collect::<Vec<_>>();\n \n         b.iter(|| {\n-            v.as_slice().sum();\n+            v.sum();\n         })\n     }\n }"}, {"sha": "3096adaaf11f38de7201099c70a09f120a528399", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -52,7 +52,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n             Some(&(rn, val)) => {\n                 total += val;\n-                text = text.slice_from(rn.len());\n+                text = &text[rn.len()..];\n             }\n             None => {\n                 cx.span_err(sp, \"invalid Roman numeral\");"}, {"sha": "34f46e80a64fbfc569b167fe5e663b2773c77fbc", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -25,7 +25,7 @@ use std::vec;\n \n fn main() {\n     let argv = os::args();\n-    let _tests = argv.slice(1, argv.len());\n+    let _tests = &argv[1..argv.len()];\n \n     macro_rules! bench {\n         ($id:ident) =>"}, {"sha": "5a0a4099389283d28bb174261a6de8f0ecaf8b19", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -50,7 +50,7 @@ fn rotate(x: &mut [i32]) {\n \n fn next_permutation(perm: &mut [i32], count: &mut [i32]) {\n     for i in range(1, perm.len()) {\n-        rotate(perm.slice_to_mut(i + 1));\n+        rotate(&mut perm[..i + 1]);\n         let count_i = &mut count[i];\n         if *count_i >= i as i32 {\n             *count_i = 0;\n@@ -127,7 +127,7 @@ impl Perm {\n \n \n fn reverse(tperm: &mut [i32], k: uint) {\n-    tperm.slice_to_mut(k).reverse()\n+    tperm[..k].reverse()\n }\n \n fn work(mut perm: Perm, n: uint, max: uint) -> (i32, i32) {"}, {"sha": "a9525104d6de56e6902560331b280355d539e316", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -126,15 +126,15 @@ impl<'a, W: Writer> RepeatFasta<'a, W> {\n \n         copy_memory(buf.as_mut_slice(), alu);\n         let buf_len = buf.len();\n-        copy_memory(buf.slice_mut(alu_len, buf_len),\n+        copy_memory(&mut buf[alu_len..buf_len],\n                     &alu[..LINE_LEN]);\n \n         let mut pos = 0;\n         let mut bytes;\n         let mut n = n;\n         while n > 0 {\n             bytes = min(LINE_LEN, n);\n-            try!(self.out.write(buf.slice(pos, pos + bytes)));\n+            try!(self.out.write(&buf[pos..pos + bytes]));\n             try!(self.out.write_u8('\\n' as u8));\n             pos += bytes;\n             if pos > alu_len {"}, {"sha": "33d3327c6abfe495262106caf66b7985ef3cdc91", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -184,15 +184,15 @@ fn main() {\n    let mut proc_mode = false;\n \n    for line in rdr.lines() {\n-       let line = line.unwrap().as_slice().trim().to_string();\n+       let line = line.unwrap().trim().to_string();\n \n        if line.len() == 0u { continue; }\n \n        match (line.as_bytes()[0] as char, proc_mode) {\n \n            // start processing if this is the one\n            ('>', false) => {\n-               match line.as_slice().slice_from(1).find_str(\"THREE\") {\n+               match line[1..].find_str(\"THREE\") {\n                    Some(_) => { proc_mode = true; }\n                    None    => { }\n                }"}, {"sha": "0d51eca8e8b7339851ebad6cc6575145a0f5da69", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -283,9 +283,9 @@ fn print_occurrences(frequencies: &mut Table, occurrence: &'static str) {\n fn get_sequence<R: Buffer>(r: &mut R, key: &str) -> Vec<u8> {\n     let mut res = Vec::new();\n     for l in r.lines().map(|l| l.ok().unwrap())\n-        .skip_while(|l| key != l.as_slice().slice_to(key.len())).skip(1)\n+        .skip_while(|l| key != &l[..key.len()]).skip(1)\n     {\n-        res.push_all(l.as_slice().trim().as_bytes());\n+        res.push_all(l.trim().as_bytes());\n     }\n     res.into_ascii_uppercase()\n }"}, {"sha": "192f363599cb15806f7222e601068a090417b9c7", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -133,7 +133,7 @@ fn mandelbrot<W: old_io::Writer>(w: uint, mut out: W) -> old_io::IoResult<()> {\n                 (i + 1) * chunk_size\n             };\n \n-            for &init_i in vec_init_i.slice(start, end).iter() {\n+            for &init_i in vec_init_i[start..end].iter() {\n                 write_line(init_i, init_r_slice, &mut res);\n             }\n "}, {"sha": "299691e400a307b4ba2a7614ec2943a69535007d", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -173,7 +173,7 @@ fn main() {\n     let n = if std::os::getenv(\"RUST_BENCH\").is_some() {\n         5000000\n     } else {\n-        std::os::args().as_slice().get(1)\n+        std::os::args().get(1)\n             .and_then(|arg| arg.parse())\n             .unwrap_or(1000)\n     };"}, {"sha": "c70495dd9116cd739782a811888350f01b0fec8d", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -55,7 +55,7 @@ fn parse_opts(argv: Vec<String> ) -> Config {\n     let opts = vec!(getopts::optflag(\"\", \"stress\", \"\"));\n \n     let argv = argv.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n-    let opt_args = argv.slice(1, argv.len());\n+    let opt_args = &argv[1..argv.len()];\n \n     match getopts::getopts(opt_args, opts.as_slice()) {\n       Ok(ref m) => {"}, {"sha": "3a35bea0d5997fc3ebf23a7de6437a36424dd0fa", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -155,7 +155,7 @@ impl<'a> Iterator for MutDnaSeqs<'a> {\n     fn next(&mut self) -> Option<&'a mut [u8]> {\n         let tmp = std::mem::replace(&mut self.s, &mut []);\n         let tmp = match memchr(tmp, b'\\n') {\n-            Some(i) => tmp.slice_from_mut(i + 1),\n+            Some(i) => &mut tmp[i + 1..],\n             None => return None,\n         };\n         let (seq, tmp) = match memchr(tmp, b'>') {"}, {"sha": "5f5fbd0f34808762321e40970d470976c44fcaef", "filename": "src/test/compile-fail/drop-with-active-borrows-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-1.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let a = \"\".to_string();\n-    let b: Vec<&str> = a.as_slice().lines().collect();\n+    let b: Vec<&str> = a.lines().collect();\n     drop(a);    //~ ERROR cannot move out of `a` because it is borrowed\n     for s in b.iter() {\n         println!(\"{}\", *s);"}, {"sha": "e6e1364dd2ca73f8173e1f31c7f88ab585d5aeeb", "filename": "src/test/compile-fail/drop-with-active-borrows-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -10,7 +10,7 @@\n \n fn read_lines_borrowed<'a>() -> Vec<&'a str> {\n     let raw_lines: Vec<String> = vec!(\"foo  \".to_string(), \"  bar\".to_string());\n-    raw_lines.iter().map(|l| l.as_slice().trim()).collect()\n+    raw_lines.iter().map(|l| l.trim()).collect()\n     //~^ ERROR `raw_lines` does not live long enough\n }\n "}, {"sha": "31716837493c7c0e71a9996b605ad6696eb2a2d9", "filename": "src/test/compile-fail/issue-13497-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fcompile-fail%2Fissue-13497-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fcompile-fail%2Fissue-13497-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13497-2.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -11,7 +11,7 @@\n fn read_lines_borrowed<'a>() -> Vec<&'a str> {\n     let rawLines: Vec<String> = vec![\"foo  \".to_string(), \"  bar\".to_string()];\n     rawLines //~ ERROR `rawLines` does not live long enough\n-        .iter().map(|l| l.as_slice().trim()).collect()\n+        .iter().map(|l| l.trim()).collect()\n }\n \n fn main() {}"}, {"sha": "d544a92d9c3b594a842daae30c37efc166b1976a", "filename": "src/test/compile-fail/issue-13497.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fcompile-fail%2Fissue-13497.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fcompile-fail%2Fissue-13497.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13497.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -12,7 +12,7 @@ fn read_lines_borrowed1() -> Vec<\n     &str //~ ERROR missing lifetime specifier\n > {\n     let rawLines: Vec<String> = vec![\"foo  \".to_string(), \"  bar\".to_string()];\n-    rawLines.iter().map(|l| l.as_slice().trim()).collect()\n+    rawLines.iter().map(|l| l.trim()).collect()\n }\n \n fn main() {}"}, {"sha": "817e4ae165031cd2fc47096f5c8363df68817ab4", "filename": "src/test/compile-fail/issue-15381.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fcompile-fail%2Fissue-15381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Fcompile-fail%2Fissue-15381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15381.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     for\n         [x,y,z]\n //~^ ERROR refutable pattern in `for` loop binding: `[]` not covered\n-        in values.as_slice().chunks(3).filter(|&xs| xs.len() == 3) {\n+        in values.chunks(3).filter(|&xs| xs.len() == 3) {\n         println!(\"y={}\", y);\n     }\n }"}, {"sha": "f9dffdf8928790d925fa2faf7bd55bea84220f99", "filename": "src/test/run-make/cannot-read-embedded-idents/create_and_compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -40,5 +40,5 @@ fn main() {\n \n     // positive test so that this test will be updated when the\n     // compiler changes.\n-    assert!(err.as_slice().contains(\"unknown start of token\"))\n+    assert!(err.contains(\"unknown start of token\"))\n }"}, {"sha": "e57f026889fa0915f7d650f9fa1f54d78dfb249a", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -65,6 +65,6 @@ fn main() {\n \n         // positive test so that this test will be updated when the\n         // compiler changes.\n-        assert!(err.as_slice().contains(\"expected item, found\"))\n+        assert!(err.contains(\"expected item, found\"))\n     }\n }"}, {"sha": "28b993ba69b4cced63ee687630ee8be0b4acdaba", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -63,6 +63,6 @@ fn main() {\n         // the span should end the line (e.g no extra ~'s)\n         let expected_span = format!(\"^{}\\n\", repeat(\"~\").take(n - 1)\n                                                         .collect::<String>());\n-        assert!(err.as_slice().contains(expected_span.as_slice()));\n+        assert!(err.contains(expected_span.as_slice()));\n     }\n }"}, {"sha": "92d4db573ad7bf1479596a698977187e7410ff2c", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -78,9 +78,9 @@ fn runtest(me: &str) {\n     let s = str::from_utf8(out.error.as_slice()).unwrap();\n     let mut i = 0;\n     for _ in range(0i, 2) {\n-        i += s.slice_from(i + 10).find_str(\"stack backtrace\").unwrap() + 10;\n+        i += s[i + 10..].find_str(\"stack backtrace\").unwrap() + 10;\n     }\n-    assert!(s.slice_from(i + 10).find_str(\"stack backtrace\").is_none(),\n+    assert!(s[i + 10..].find_str(\"stack backtrace\").is_none(),\n             \"bad output4: {}\", s);\n }\n "}, {"sha": "4cc39b4b5d79ab063310382bda15dc489142e511", "filename": "src/test/run-pass/borrow-by-val-method-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -19,5 +19,5 @@ impl<'a> Foo for &'a [int] {\n \n pub fn main() {\n     let items = vec!( 3, 5, 1, 2, 4 );\n-    items.as_slice().foo();\n+    items.foo();\n }"}, {"sha": "e2f9dcb8efa09f3a13895600fbcbda210e4b5595", "filename": "src/test/run-pass/byte-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -52,7 +52,7 @@ pub fn main() {\n     }\n \n     let buf = vec!(97u8, 98, 99, 100);\n-    assert_eq!(match buf.slice(0, 3) {\n+    assert_eq!(match &buf[0..3] {\n          b\"def\" => 1u,\n          b\"abc\" => 2u,\n          _ => 3u"}, {"sha": "308b225a344f7b566cb8c452314e69dc503de166", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -41,6 +41,6 @@ fn main() {\n         info!(\"info\");\n     });\n     let s = r.read_to_string().unwrap();\n-    assert!(s.as_slice().contains(\"info\"));\n-    assert!(!s.as_slice().contains(\"debug\"));\n+    assert!(s.contains(\"info\"));\n+    assert!(!s.contains(\"debug\"));\n }"}, {"sha": "f9fcf8ced28bbf661f352727e8c4be3805be5597", "filename": "src/test/run-pass/drop-with-type-ascription-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let foo = \"hello\".to_string();\n-    let foo: Vec<&str> = foo.as_slice().words().collect();\n+    let foo: Vec<&str> = foo.words().collect();\n     let invalid_string = &foo[0];\n     assert_eq!(*invalid_string, \"hello\");\n }"}, {"sha": "f3d79f0c7d558d78d565f1692aa18c3107fd3b7d", "filename": "src/test/run-pass/drop-with-type-ascription-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let args = vec!(\"foobie\", \"asdf::asdf\");\n-    let arr: Vec<&str> = args[1].as_slice().split_str(\"::\").collect();\n+    let arr: Vec<&str> = args[1].split_str(\"::\").collect();\n     assert_eq!(arr[0], \"asdf\");\n     assert_eq!(arr[0], \"asdf\");\n }"}, {"sha": "7f56e42a4830863d6ccaa82df9c88ab53f59e123", "filename": "src/test/run-pass/issue-5550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fissue-5550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fissue-5550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5550.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -13,5 +13,5 @@\n pub fn main() {\n     let s: String = \"foobar\".to_string();\n     let mut t: &str = s.as_slice();\n-    t = t.slice(0, 3); // for master: str::view(t, 0, 3) maybe\n+    t = &t[0..3]; // for master: str::view(t, 0, 3) maybe\n }"}, {"sha": "6a2140d49cd2f29edeac93c35c78236ae76718ba", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n     assert_eq!(y, 6);\n     let s = \"hello there\".to_string();\n     let mut i: int = 0;\n-    for c in s.as_slice().bytes() {\n+    for c in s.bytes() {\n         if i == 0 { assert!((c == 'h' as u8)); }\n         if i == 1 { assert!((c == 'e' as u8)); }\n         if i == 2 { assert!((c == 'l' as u8)); }"}, {"sha": "1ede5f546d7ff601400b3caf5b0d3bb58f3604e8", "filename": "src/test/run-pass/out-of-stack-new-thread-no-split.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -44,6 +44,6 @@ fn main() {\n         let error = String::from_utf8_lossy(recurse.error.as_slice());\n         println!(\"wut\");\n         println!(\"`{}`\", error);\n-        assert!(error.as_slice().contains(\"has overflowed its stack\"));\n+        assert!(error.contains(\"has overflowed its stack\"));\n     }\n }"}, {"sha": "adaa472c760444d01356efdddb194cdb77ecf670", "filename": "src/test/run-pass/out-of-stack-no-split.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -42,6 +42,6 @@ fn main() {\n         let recurse = Command::new(args[0].as_slice()).arg(\"recurse\").output().unwrap();\n         assert!(!recurse.status.success());\n         let error = String::from_utf8_lossy(recurse.error.as_slice());\n-        assert!(error.as_slice().contains(\"has overflowed its stack\"));\n+        assert!(error.contains(\"has overflowed its stack\"));\n     }\n }"}, {"sha": "9615cfab5c17c8e9437aff8048d989a7690ce351", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -44,11 +44,11 @@ fn main() {\n         let silent = Command::new(args[0].as_slice()).arg(\"silent\").output().unwrap();\n         assert!(!silent.status.success());\n         let error = String::from_utf8_lossy(silent.error.as_slice());\n-        assert!(error.as_slice().contains(\"has overflowed its stack\"));\n+        assert!(error.contains(\"has overflowed its stack\"));\n \n         let loud = Command::new(args[0].as_slice()).arg(\"loud\").output().unwrap();\n         assert!(!loud.status.success());\n         let error = String::from_utf8_lossy(silent.error.as_slice());\n-        assert!(error.as_slice().contains(\"has overflowed its stack\"));\n+        assert!(error.contains(\"has overflowed its stack\"));\n     }\n }"}, {"sha": "dcaca667fbb4f315331eb54b6c73f7a6b3173704", "filename": "src/test/run-pass/process-remove-from-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -48,6 +48,6 @@ fn main() {\n     let result = prog.wait_with_output().unwrap();\n     let output = String::from_utf8_lossy(result.output.as_slice());\n \n-    assert!(!output.as_slice().contains(\"RUN_TEST_NEW_ENV\"),\n+    assert!(!output.contains(\"RUN_TEST_NEW_ENV\"),\n             \"found RUN_TEST_NEW_ENV inside of:\\n\\n{}\", output);\n }"}, {"sha": "8682d18185fe41b0dbb4b62fec664e1b8e1243fe", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -29,12 +29,12 @@ pub fn main() {\n     assert_eq!(y, 6);\n \n     let x = vec!(1, 2, 3);\n-    let y = x.as_slice().sum_();\n+    let y = x.sum_();\n     println!(\"y=={}\", y);\n     assert_eq!(y, 6);\n \n     let x = vec!(1, 2, 3);\n-    let y = x.as_slice().sum_();\n+    let y = x.sum_();\n     println!(\"y=={}\", y);\n     assert_eq!(y, 6);\n }"}, {"sha": "2b2539fac0e2d59ccb13003ffea2e01ac1eb3665", "filename": "src/test/run-pass/segfault-no-out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -20,6 +20,6 @@ fn main() {\n         let segfault = Command::new(args[0].as_slice()).arg(\"segfault\").output().unwrap();\n         assert!(!segfault.status.success());\n         let error = String::from_utf8_lossy(segfault.error.as_slice());\n-        assert!(!error.as_slice().contains(\"has overflowed its stack\"));\n+        assert!(!error.contains(\"has overflowed its stack\"));\n     }\n }"}, {"sha": "349a676a433e366eceb45021cb10186a2f22453a", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -40,7 +40,7 @@ pub fn main() {\n         include_bytes!(\"syntax-extension-source-utils-files/includeme.fragment\")\n         [1] == (42 as u8)); // '*'\n     // The Windows tests are wrapped in an extra module for some reason\n-    assert!((m1::m2::where_am_i().as_slice().ends_with(\"m1::m2\")));\n+    assert!((m1::m2::where_am_i().ends_with(\"m1::m2\")));\n \n     assert!(match (45, \"( 2 * 3 ) + 5\") {\n         (line!(), stringify!((2*3) + 5)) => true,"}, {"sha": "5994b24dfdc59334ea8878402808aebf72325c98", "filename": "src/test/run-pass/task-stderr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-stderr.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -26,5 +26,5 @@ fn main() {\n     assert!(res.is_err());\n \n     let output = reader.read_to_string().unwrap();\n-    assert!(output.as_slice().contains(\"Hello, world!\"));\n+    assert!(output.contains(\"Hello, world!\"));\n }"}, {"sha": "96bba01068f2b3ecb722497931c7f9ba70c93688", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -44,7 +44,7 @@ pub fn main() {\n \n     fn check_str_eq(a: String, b: String) {\n         let mut i: int = 0;\n-        for ab in a.as_slice().bytes() {\n+        for ab in a.bytes() {\n             println!(\"{}\", i);\n             println!(\"{}\", ab);\n             let bb: u8 = b.as_bytes()[i as uint];"}, {"sha": "374913e3cfd7cdeb0b7b8c9461f5714e020d01f9", "filename": "src/test/run-pass/vec-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fvec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fvec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n     let  v = vec!(1i,2,3,4,5);\n-    let v2 = v.slice(1, 3);\n+    let v2 = &v[1..3];\n     assert_eq!(v2[0], 2);\n     assert_eq!(v2[1], 3);\n }"}, {"sha": "401d629c3821b1e5aa66659d782c614a823c5702", "filename": "src/test/run-pass/vec-tail-matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd8108dc9b79402d1ea5349d766275f73398ff/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs?ref=bedd8108dc9b79402d1ea5349d766275f73398ff", "patch": "@@ -31,8 +31,8 @@ pub fn main() {\n                     unreachable!();\n                 }\n                 [Foo { string: ref a }, Foo { string: ref b }] => {\n-                    assert_eq!(\"bar\", a.as_slice().slice(0, a.len()));\n-                    assert_eq!(\"baz\", b.as_slice().slice(0, b.len()));\n+                    assert_eq!(\"bar\", &a[0..a.len()]);\n+                    assert_eq!(\"baz\", &b[0..b.len()]);\n                 }\n                 _ => {\n                     unreachable!();"}]}