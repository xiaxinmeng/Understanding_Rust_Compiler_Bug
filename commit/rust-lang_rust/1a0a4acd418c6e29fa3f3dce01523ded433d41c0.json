{"sha": "1a0a4acd418c6e29fa3f3dce01523ded433d41c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMGE0YWNkNDE4YzZlMjlmYTNmM2RjZTAxNTIzZGVkNDMzZDQxYzA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-08-11T09:35:50Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-08-11T10:24:54Z"}, "message": "Add a function to `TyCtxt` for computing an `Allocation` for a `static` item's initializer", "tree": {"sha": "6a33f9cf8258f333f5898aa5ed0e0a7e2c3b6f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a33f9cf8258f333f5898aa5ed0e0a7e2c3b6f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a0a4acd418c6e29fa3f3dce01523ded433d41c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a0a4acd418c6e29fa3f3dce01523ded433d41c0", "html_url": "https://github.com/rust-lang/rust/commit/1a0a4acd418c6e29fa3f3dce01523ded433d41c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a0a4acd418c6e29fa3f3dce01523ded433d41c0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9025c571e81ea9adad4dbee0614f1ca37338328", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9025c571e81ea9adad4dbee0614f1ca37338328", "html_url": "https://github.com/rust-lang/rust/commit/a9025c571e81ea9adad4dbee0614f1ca37338328"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "dcc1f8b1a4b3cd673a198eab02a69b8d12abd111", "filename": "src/librustc_middle/mir/interpret/queries.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1a0a4acd418c6e29fa3f3dce01523ded433d41c0/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0a4acd418c6e29fa3f3dce01523ded433d41c0/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs?ref=1a0a4acd418c6e29fa3f3dce01523ded433d41c0", "patch": "@@ -74,4 +74,27 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.const_eval_validated(inputs)\n         }\n     }\n+\n+    /// Evaluate a static's initializer, returning the allocation of the initializer's memory.\n+    pub fn eval_static_initializer(\n+        self,\n+        def_id: DefId,\n+    ) -> Result<&'tcx mir::Allocation, ErrorHandled> {\n+        trace!(\"eval_static_initializer: Need to compute {:?}\", def_id);\n+        assert!(self.is_static(def_id));\n+        let instance = ty::Instance::mono(self, def_id);\n+        let gid = GlobalId { instance, promoted: None };\n+        self.eval_to_allocation(gid, ty::ParamEnv::reveal_all())\n+    }\n+\n+    /// Evaluate anything constant-like, returning the allocation of the final memory.\n+    fn eval_to_allocation(\n+        self,\n+        gid: GlobalId<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Result<&'tcx mir::Allocation, ErrorHandled> {\n+        trace!(\"eval_to_allocation: Need to compute {:?}\", gid);\n+        let raw_const = self.const_eval_raw(param_env.and(gid))?;\n+        Ok(self.global_alloc(raw_const.alloc_id).unwrap_memory())\n+    }\n }"}, {"sha": "6c9e013eb18ba890b8363c6911268701b5bc2b1a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a0a4acd418c6e29fa3f3dce01523ded433d41c0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0a4acd418c6e29fa3f3dce01523ded433d41c0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=1a0a4acd418c6e29fa3f3dce01523ded433d41c0", "patch": "@@ -14,13 +14,12 @@ use std::ptr;\n \n use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::{self, Instance, ParamEnv, TyCtxt};\n+use rustc_middle::ty::{Instance, ParamEnv, TyCtxt};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n-    AllocId, AllocMap, Allocation, AllocationExtra, CheckInAllocMsg, GlobalAlloc, GlobalId,\n-    InterpResult, Machine, MayLeak, Pointer, PointerArithmetic, Scalar,\n+    AllocId, AllocMap, Allocation, AllocationExtra, CheckInAllocMsg, GlobalAlloc, InterpResult,\n+    Machine, MayLeak, Pointer, PointerArithmetic, Scalar,\n };\n use crate::util::pretty;\n \n@@ -119,17 +118,6 @@ pub struct Memory<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n     pub tcx: TyCtxt<'tcx>,\n }\n \n-/// Return the `tcx` allocation containing the initial value of the given static\n-pub fn get_static(tcx: TyCtxt<'tcx>, def_id: DefId) -> InterpResult<'tcx, &'tcx Allocation> {\n-    trace!(\"get_static: Need to compute {:?}\", def_id);\n-    let instance = Instance::mono(tcx, def_id);\n-    let gid = GlobalId { instance, promoted: None };\n-    // Use the raw query here to break validation cycles. Later uses of the static\n-    // will call the full query anyway.\n-    let raw_const = tcx.const_eval_raw(ty::ParamEnv::reveal_all().and(gid))?;\n-    Ok(tcx.global_alloc(raw_const.alloc_id).unwrap_memory())\n-}\n-\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for Memory<'mir, 'tcx, M> {\n     #[inline]\n     fn data_layout(&self) -> &TargetDataLayout {\n@@ -489,7 +477,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     throw_unsup!(ReadExternStatic(def_id));\n                 }\n \n-                (get_static(tcx, def_id)?, Some(def_id))\n+                (tcx.eval_static_initializer(def_id)?, Some(def_id))\n             }\n         };\n         M::before_access_global(memory_extra, id, alloc, def_id, is_write)?;"}, {"sha": "a931b0bbe9777b4b02b9f831d96797b92293b9af", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a0a4acd418c6e29fa3f3dce01523ded433d41c0/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0a4acd418c6e29fa3f3dce01523ded433d41c0/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=1a0a4acd418c6e29fa3f3dce01523ded433d41c0", "patch": "@@ -21,7 +21,7 @@ pub use rustc_middle::mir::interpret::*; // have all the `interpret` symbols in\n pub use self::eval_context::{Frame, FrameInfo, InterpCx, LocalState, LocalValue, StackPopCleanup};\n pub use self::intern::{intern_const_alloc_recursive, InternKind};\n pub use self::machine::{compile_time_machine, AllocMap, Machine, MayLeak, StackPopJump};\n-pub use self::memory::{get_static, AllocCheck, FnVal, Memory, MemoryKind};\n+pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind};\n pub use self::operand::{ImmTy, Immediate, OpTy, Operand};\n pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n pub use self::validity::RefTracking;"}]}