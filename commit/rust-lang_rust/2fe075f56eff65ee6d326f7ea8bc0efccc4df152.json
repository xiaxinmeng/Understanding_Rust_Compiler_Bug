{"sha": "2fe075f56eff65ee6d326f7ea8bc0efccc4df152", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZTA3NWY1NmVmZjY1ZWU2ZDMyNmY3ZWE4YmMwZWZjY2M0ZGYxNTI=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-04-08T07:25:35Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-04-09T11:45:05Z"}, "message": "Normalize line-endings in display.rs\n\nThis changes from CRLF to LF", "tree": {"sha": "847d93a33cd5bb29cacbab039d2e136daafa8922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/847d93a33cd5bb29cacbab039d2e136daafa8922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe075f56eff65ee6d326f7ea8bc0efccc4df152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe075f56eff65ee6d326f7ea8bc0efccc4df152", "html_url": "https://github.com/rust-lang/rust/commit/2fe075f56eff65ee6d326f7ea8bc0efccc4df152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe075f56eff65ee6d326f7ea8bc0efccc4df152/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4aa15c16b352d4ac9a90c1668311e4762c5e494", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4aa15c16b352d4ac9a90c1668311e4762c5e494", "html_url": "https://github.com/rust-lang/rust/commit/f4aa15c16b352d4ac9a90c1668311e4762c5e494"}], "stats": {"total": 224, "additions": 112, "deletions": 112}, "files": [{"sha": "4ce362ebb19bf937751c6265fabf960fdebc87b4", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 112, "deletions": 112, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/2fe075f56eff65ee6d326f7ea8bc0efccc4df152/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe075f56eff65ee6d326f7ea8bc0efccc4df152/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=2fe075f56eff65ee6d326f7ea8bc0efccc4df152", "patch": "@@ -1,112 +1,112 @@\n-//! This module contains utilities for rendering turning things into something\r\n-//! that may be used to render in UI.\r\n-use super::*;\r\n-use std::fmt::{self, Display};\r\n-use join_to_string::join;\r\n-use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner, TypeParamsOwner};\r\n-use std::convert::From;\r\n-\r\n-/// Contains information about a function signature\r\n-#[derive(Debug)]\r\n-pub struct FunctionSignature {\r\n-    /// Optional visibility\r\n-    pub visibility: Option<String>,\r\n-    /// Name of the function\r\n-    pub name: Option<String>,\r\n-    /// Documentation for the function\r\n-    pub doc: Option<Documentation>,\r\n-    /// Generic parameters\r\n-    pub generic_parameters: Vec<String>,\r\n-    /// Parameters of the function\r\n-    pub parameters: Vec<String>,\r\n-    /// Optional return type\r\n-    pub ret_type: Option<String>,\r\n-    /// Where predicates\r\n-    pub where_predicates: Vec<String>,\r\n-}\r\n-\r\n-impl FunctionSignature {\r\n-    pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\r\n-        self.doc = doc;\r\n-        self\r\n-    }\r\n-}\r\n-\r\n-impl From<&'_ ast::FnDef> for FunctionSignature {\r\n-    fn from(node: &ast::FnDef) -> FunctionSignature {\r\n-        fn param_list(node: &ast::FnDef) -> Vec<String> {\r\n-            let mut res = vec![];\r\n-            if let Some(param_list) = node.param_list() {\r\n-                if let Some(self_param) = param_list.self_param() {\r\n-                    res.push(self_param.syntax().text().to_string())\r\n-                }\r\n-\r\n-                res.extend(param_list.params().map(|param| param.syntax().text().to_string()));\r\n-            }\r\n-            res\r\n-        }\r\n-\r\n-        FunctionSignature {\r\n-            visibility: node.visibility().map(|n| n.syntax().text().to_string()),\r\n-            name: node.name().map(|n| n.text().to_string()),\r\n-            ret_type: node\r\n-                .ret_type()\r\n-                .and_then(|r| r.type_ref())\r\n-                .map(|n| n.syntax().text().to_string()),\r\n-            parameters: param_list(node),\r\n-            generic_parameters: generic_parameters(node),\r\n-            where_predicates: where_predicates(node),\r\n-            // docs are processed separately\r\n-            doc: None,\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-impl Display for FunctionSignature {\r\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\r\n-        if let Some(t) = &self.visibility {\r\n-            write!(f, \"{} \", t)?;\r\n-        }\r\n-\r\n-        if let Some(name) = &self.name {\r\n-            write!(f, \"fn {}\", name)?;\r\n-        }\r\n-\r\n-        if !self.generic_parameters.is_empty() {\r\n-            join(self.generic_parameters.iter())\r\n-                .separator(\", \")\r\n-                .surround_with(\"<\", \">\")\r\n-                .to_fmt(f)?;\r\n-        }\r\n-\r\n-        join(self.parameters.iter()).separator(\", \").surround_with(\"(\", \")\").to_fmt(f)?;\r\n-\r\n-        if let Some(t) = &self.ret_type {\r\n-            write!(f, \" -> {}\", t)?;\r\n-        }\r\n-\r\n-        if !self.where_predicates.is_empty() {\r\n-            write!(f, \"\\nwhere \")?;\r\n-            join(self.where_predicates.iter()).separator(\",\\n      \").to_fmt(f)?;\r\n-        }\r\n-\r\n-        Ok(())\r\n-    }\r\n-}\r\n-\r\n-pub(crate) fn generic_parameters<N: TypeParamsOwner>(node: &N) -> Vec<String> {\r\n-    let mut res = vec![];\r\n-    if let Some(type_params) = node.type_param_list() {\r\n-        res.extend(type_params.lifetime_params().map(|p| p.syntax().text().to_string()));\r\n-        res.extend(type_params.type_params().map(|p| p.syntax().text().to_string()));\r\n-    }\r\n-    res\r\n-}\r\n-\r\n-pub(crate) fn where_predicates<N: TypeParamsOwner>(node: &N) -> Vec<String> {\r\n-    let mut res = vec![];\r\n-    if let Some(clause) = node.where_clause() {\r\n-        res.extend(clause.predicates().map(|p| p.syntax().text().to_string()));\r\n-    }\r\n-    res\r\n-}\r\n+//! This module contains utilities for rendering turning things into something\n+//! that may be used to render in UI.\n+use super::*;\n+use std::fmt::{self, Display};\n+use join_to_string::join;\n+use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner, TypeParamsOwner};\n+use std::convert::From;\n+\n+/// Contains information about a function signature\n+#[derive(Debug)]\n+pub struct FunctionSignature {\n+    /// Optional visibility\n+    pub visibility: Option<String>,\n+    /// Name of the function\n+    pub name: Option<String>,\n+    /// Documentation for the function\n+    pub doc: Option<Documentation>,\n+    /// Generic parameters\n+    pub generic_parameters: Vec<String>,\n+    /// Parameters of the function\n+    pub parameters: Vec<String>,\n+    /// Optional return type\n+    pub ret_type: Option<String>,\n+    /// Where predicates\n+    pub where_predicates: Vec<String>,\n+}\n+\n+impl FunctionSignature {\n+    pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\n+        self.doc = doc;\n+        self\n+    }\n+}\n+\n+impl From<&'_ ast::FnDef> for FunctionSignature {\n+    fn from(node: &ast::FnDef) -> FunctionSignature {\n+        fn param_list(node: &ast::FnDef) -> Vec<String> {\n+            let mut res = vec![];\n+            if let Some(param_list) = node.param_list() {\n+                if let Some(self_param) = param_list.self_param() {\n+                    res.push(self_param.syntax().text().to_string())\n+                }\n+\n+                res.extend(param_list.params().map(|param| param.syntax().text().to_string()));\n+            }\n+            res\n+        }\n+\n+        FunctionSignature {\n+            visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+            name: node.name().map(|n| n.text().to_string()),\n+            ret_type: node\n+                .ret_type()\n+                .and_then(|r| r.type_ref())\n+                .map(|n| n.syntax().text().to_string()),\n+            parameters: param_list(node),\n+            generic_parameters: generic_parameters(node),\n+            where_predicates: where_predicates(node),\n+            // docs are processed separately\n+            doc: None,\n+        }\n+    }\n+}\n+\n+impl Display for FunctionSignature {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if let Some(t) = &self.visibility {\n+            write!(f, \"{} \", t)?;\n+        }\n+\n+        if let Some(name) = &self.name {\n+            write!(f, \"fn {}\", name)?;\n+        }\n+\n+        if !self.generic_parameters.is_empty() {\n+            join(self.generic_parameters.iter())\n+                .separator(\", \")\n+                .surround_with(\"<\", \">\")\n+                .to_fmt(f)?;\n+        }\n+\n+        join(self.parameters.iter()).separator(\", \").surround_with(\"(\", \")\").to_fmt(f)?;\n+\n+        if let Some(t) = &self.ret_type {\n+            write!(f, \" -> {}\", t)?;\n+        }\n+\n+        if !self.where_predicates.is_empty() {\n+            write!(f, \"\\nwhere \")?;\n+            join(self.where_predicates.iter()).separator(\",\\n      \").to_fmt(f)?;\n+        }\n+\n+        Ok(())\n+    }\n+}\n+\n+pub(crate) fn generic_parameters<N: TypeParamsOwner>(node: &N) -> Vec<String> {\n+    let mut res = vec![];\n+    if let Some(type_params) = node.type_param_list() {\n+        res.extend(type_params.lifetime_params().map(|p| p.syntax().text().to_string()));\n+        res.extend(type_params.type_params().map(|p| p.syntax().text().to_string()));\n+    }\n+    res\n+}\n+\n+pub(crate) fn where_predicates<N: TypeParamsOwner>(node: &N) -> Vec<String> {\n+    let mut res = vec![];\n+    if let Some(clause) = node.where_clause() {\n+        res.extend(clause.predicates().map(|p| p.syntax().text().to_string()));\n+    }\n+    res\n+}"}]}