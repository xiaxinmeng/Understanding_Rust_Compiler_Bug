{"sha": "08b6cb46c6c5cc583ceccb2c29e65fc72c13f480", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YjZjYjQ2YzZjNWNjNTgzY2VjY2IyYzI5ZTY1ZmM3MmMxM2Y0ODA=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-03T21:13:34Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-04T20:32:40Z"}, "message": "std: add str.to_c_str()", "tree": {"sha": "e71b094901913cc89544830ab77aabf5530dc17b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e71b094901913cc89544830ab77aabf5530dc17b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08b6cb46c6c5cc583ceccb2c29e65fc72c13f480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08b6cb46c6c5cc583ceccb2c29e65fc72c13f480", "html_url": "https://github.com/rust-lang/rust/commit/08b6cb46c6c5cc583ceccb2c29e65fc72c13f480", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08b6cb46c6c5cc583ceccb2c29e65fc72c13f480/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6011f83dec61a33174652e4c76a463dd32626de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6011f83dec61a33174652e4c76a463dd32626de8", "html_url": "https://github.com/rust-lang/rust/commit/6011f83dec61a33174652e4c76a463dd32626de8"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "294fa3613248058ab2c7c6640a8a334943e33722", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08b6cb46c6c5cc583ceccb2c29e65fc72c13f480/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b6cb46c6c5cc583ceccb2c29e65fc72c13f480/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=08b6cb46c6c5cc583ceccb2c29e65fc72c13f480", "patch": "@@ -1948,7 +1948,7 @@ mod tests {\n           };\n           assert!((ostream as uint != 0u));\n           let s = ~\"hello\";\n-          let mut buf = s.as_bytes_with_null().to_owned();\n+          let mut buf = s.to_owned().to_c_str();\n           let len = buf.len();\n           do buf.as_mut_buf |b, _len| {\n               assert_eq!(libc::fwrite(b as *c_void, 1u as size_t,"}, {"sha": "c936c1e25db6009c94e3ea290137eaec71b54272", "filename": "src/libstd/str.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/08b6cb46c6c5cc583ceccb2c29e65fc72c13f480/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b6cb46c6c5cc583ceccb2c29e65fc72c13f480/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=08b6cb46c6c5cc583ceccb2c29e65fc72c13f480", "patch": "@@ -2024,6 +2024,13 @@ pub trait OwnedStr {\n     fn capacity(&self) -> uint;\n     fn to_bytes_with_null(self) -> ~[u8];\n \n+    /// Allocates a null terminate byte array.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if there are any null characters inside the byte array.\n+    fn to_c_str(self) -> ~[u8];\n+\n     /// Work with the mutable byte buffer and length of a slice.\n     ///\n     /// The given length is one byte longer than the 'official' indexable\n@@ -2215,6 +2222,13 @@ impl OwnedStr for ~str {\n         unsafe { cast::transmute(self) }\n     }\n \n+    #[inline]\n+    fn to_c_str(self) -> ~[u8] {\n+        let bytes = self.to_bytes_with_null();\n+        assert!(bytes.slice(0, bytes.len() - 1).iter().all(|byte| *byte != 0));\n+        bytes\n+    }\n+\n     #[inline]\n     fn as_mut_buf<T>(&mut self, f: &fn(*mut u8, uint) -> T) -> T {\n         let v: &mut ~[u8] = unsafe { cast::transmute(self) };\n@@ -3059,6 +3073,18 @@ mod tests {\n     }\n \n     #[test]\n+    fn test_to_c_str() {\n+        let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        let v = ~[\n+            224, 184, 168, 224, 185, 132, 224, 184, 151, 224, 184, 162, 228,\n+            184, 173, 229, 141, 142, 86, 105, 225, 187, 135, 116, 32, 78, 97,\n+            109, 0\n+        ];\n+        assert_eq!((~\"\").to_c_str(), ~[0]);\n+        assert_eq!((~\"abc\").to_c_str(), ~['a' as u8, 'b' as u8, 'c' as u8, 0]);\n+        assert_eq!(s.to_c_str(), v);\n+    }\n+\n     fn test_subslice_offset() {\n         let a = \"kernelsprite\";\n         let b = a.slice(7, a.len());"}]}