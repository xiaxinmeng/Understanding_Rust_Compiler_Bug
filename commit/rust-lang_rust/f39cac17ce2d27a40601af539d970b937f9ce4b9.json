{"sha": "f39cac17ce2d27a40601af539d970b937f9ce4b9", "node_id": "C_kwDOAAsO6NoAKGYzOWNhYzE3Y2UyZDI3YTQwNjAxYWY1MzlkOTcwYjkzN2Y5Y2U0Yjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T15:17:53Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T15:50:49Z"}, "message": "fix clippy::needless_late_init", "tree": {"sha": "d11d792bd84a9ffbac577f28bc16860880331a5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d11d792bd84a9ffbac577f28bc16860880331a5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f39cac17ce2d27a40601af539d970b937f9ce4b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f39cac17ce2d27a40601af539d970b937f9ce4b9", "html_url": "https://github.com/rust-lang/rust/commit/f39cac17ce2d27a40601af539d970b937f9ce4b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f39cac17ce2d27a40601af539d970b937f9ce4b9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0078c9d1141e060c43a13d21bfcc83cc169111", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0078c9d1141e060c43a13d21bfcc83cc169111", "html_url": "https://github.com/rust-lang/rust/commit/5a0078c9d1141e060c43a13d21bfcc83cc169111"}], "stats": {"total": 78, "additions": 31, "deletions": 47}, "files": [{"sha": "57ce34ceebf6fe8e57411ab58e54cb43f4dbbbb7", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 31, "deletions": 47, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f39cac17ce2d27a40601af539d970b937f9ce4b9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39cac17ce2d27a40601af539d970b937f9ce4b9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=f39cac17ce2d27a40601af539d970b937f9ce4b9", "patch": "@@ -190,15 +190,13 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n             }\n \n             if let Some(impl_) = impl_parent {\n-                let node_to_be_removed;\n-\n                 // Remove complete impl block if it has only one child (as such it will be empty\n                 // after deleting that child)\n-                if impl_child_count == 1 {\n-                    node_to_be_removed = impl_.syntax();\n+                let node_to_be_removed = if impl_child_count == 1 {\n+                    impl_.syntax()\n                 } else {\n                     //Remove selected node\n-                    node_to_be_removed = &node;\n+                    &node\n                 };\n \n                 builder.delete(node_to_be_removed.text_range());\n@@ -715,14 +713,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Function(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -732,14 +728,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Adt(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -749,14 +743,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Variant(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -766,14 +758,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Const(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -783,14 +773,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Static(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -800,14 +788,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::Trait(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod =\n@@ -817,14 +803,12 @@ fn does_source_exists_outside_sel_in_same_mod(\n         }\n         Definition::TypeAlias(x) => {\n             if let Some(source) = x.source(ctx.db()) {\n-                let have_same_parent;\n-                if let Some(ast_module) = &curr_parent_module {\n-                    have_same_parent =\n-                        compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some();\n+                let have_same_parent = if let Some(ast_module) = &curr_parent_module {\n+                    compare_hir_and_ast_module(ast_module, x.module(ctx.db()), ctx).is_some()\n                 } else {\n                     let source_file_id = source.file_id.original_file(ctx.db());\n-                    have_same_parent = source_file_id == curr_file_id;\n-                }\n+                    source_file_id == curr_file_id\n+                };\n \n                 if have_same_parent {\n                     source_exists_outside_sel_in_same_mod ="}]}