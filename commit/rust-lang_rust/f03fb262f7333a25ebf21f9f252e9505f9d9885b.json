{"sha": "f03fb262f7333a25ebf21f9f252e9505f9d9885b", "node_id": "C_kwDOAAsO6NoAKGYwM2ZiMjYyZjczMzNhMjVlYmYyMWY5ZjI1MmU5NTA1ZjlkOTg4NWI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-08T10:05:34Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-08T10:05:34Z"}, "message": "Allow specifying what proc-macro server to run in rust_analyzer::load_cargo API", "tree": {"sha": "8122f8308aaf0624d85a98ff69db727e8d362421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8122f8308aaf0624d85a98ff69db727e8d362421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f03fb262f7333a25ebf21f9f252e9505f9d9885b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f03fb262f7333a25ebf21f9f252e9505f9d9885b", "html_url": "https://github.com/rust-lang/rust/commit/f03fb262f7333a25ebf21f9f252e9505f9d9885b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f03fb262f7333a25ebf21f9f252e9505f9d9885b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c89945e78c5f164c03cabb1c5cd459a86ef963a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c89945e78c5f164c03cabb1c5cd459a86ef963a", "html_url": "https://github.com/rust-lang/rust/commit/3c89945e78c5f164c03cabb1c5cd459a86ef963a"}], "stats": {"total": 71, "additions": 42, "deletions": 29}, "files": [{"sha": "93297faa664d108066f3bdb695fe99a65266a732", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=f03fb262f7333a25ebf21f9f252e9505f9d9885b", "patch": "@@ -33,7 +33,7 @@ use vfs::{AbsPathBuf, Vfs, VfsPath};\n \n use crate::cli::{\n     flags::{self, OutputFormat},\n-    load_cargo::{load_workspace, LoadCargoConfig},\n+    load_cargo::{load_workspace, LoadCargoConfig, ProcMacroServerChoice},\n     print_memory_usage,\n     progress_report::ProgressReport,\n     report_metric, Result, Verbosity,\n@@ -59,11 +59,6 @@ impl flags::AnalysisStats {\n             true => None,\n             false => Some(RustcSource::Discover),\n         };\n-        let load_cargo_config = LoadCargoConfig {\n-            load_out_dirs_from_check: !self.disable_build_scripts,\n-            with_proc_macro: !self.disable_proc_macros,\n-            prefill_caches: false,\n-        };\n         let no_progress = &|_| ();\n \n         let mut db_load_sw = self.stop_watch();\n@@ -73,6 +68,11 @@ impl flags::AnalysisStats {\n \n         let mut workspace = ProjectWorkspace::load(manifest, &cargo_config, no_progress)?;\n         let metadata_time = db_load_sw.elapsed();\n+        let load_cargo_config = LoadCargoConfig {\n+            load_out_dirs_from_check: !self.disable_build_scripts,\n+            with_proc_macro_server: ProcMacroServerChoice::Sysroot,\n+            prefill_caches: false,\n+        };\n \n         let build_scripts_time = if self.disable_build_scripts {\n             None"}, {"sha": "ff821be53d83d16b9ee0fb77007fbf7bb835ab2d", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=f03fb262f7333a25ebf21f9f252e9505f9d9885b", "patch": "@@ -9,15 +9,15 @@ use ide_db::base_db::SourceDatabaseExt;\n \n use crate::cli::{\n     flags,\n-    load_cargo::{load_workspace_at, LoadCargoConfig},\n+    load_cargo::{load_workspace_at, LoadCargoConfig, ProcMacroServerChoice},\n };\n \n impl flags::Diagnostics {\n     pub fn run(self) -> anyhow::Result<()> {\n         let cargo_config = Default::default();\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: !self.disable_build_scripts,\n-            with_proc_macro: !self.disable_proc_macros,\n+            with_proc_macro_server: ProcMacroServerChoice::Sysroot,\n             prefill_caches: false,\n         };\n         let (host, _vfs, _proc_macro) ="}, {"sha": "5a958d963e4b5c74a3c9f5eb91e50c98ae04b855", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=f03fb262f7333a25ebf21f9f252e9505f9d9885b", "patch": "@@ -1,6 +1,6 @@\n //! Loads a Cargo project into a static instance of analysis, without support\n //! for incorporating changes.\n-use std::{path::Path, sync::Arc};\n+use std::{convert::identity, path::Path, sync::Arc};\n \n use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n@@ -17,10 +17,17 @@ use crate::reload::{load_proc_macro, ProjectFolders, SourceRootConfig};\n // what otherwise would be `pub(crate)` has to be `pub` here instead.\n pub struct LoadCargoConfig {\n     pub load_out_dirs_from_check: bool,\n-    pub with_proc_macro: bool,\n+    pub with_proc_macro_server: ProcMacroServerChoice,\n     pub prefill_caches: bool,\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ProcMacroServerChoice {\n+    Sysroot,\n+    Explicit(AbsPathBuf, Vec<String>),\n+    None,\n+}\n+\n // Note: Since this function is used by external tools that use rust-analyzer as a library\n // what otherwise would be `pub(crate)` has to be `pub` here instead.\n pub fn load_workspace_at(\n@@ -59,15 +66,17 @@ pub fn load_workspace(\n         Box::new(loader)\n     };\n \n-    let proc_macro_client = if load_config.with_proc_macro {\n-        let (server_path, args): (_, &[_]) = match ws.find_sysroot_proc_macro_srv() {\n-            Some(server_path) => (server_path, &[]),\n-            None => (AbsPathBuf::assert(std::env::current_exe()?), &[\"proc-macro\"]),\n-        };\n-\n-        ProcMacroServer::spawn(server_path, args).map_err(|e| e.to_string())\n-    } else {\n-        Err(\"proc macro server disabled\".to_owned())\n+    let proc_macro_client = match &load_config.with_proc_macro_server {\n+        ProcMacroServerChoice::Sysroot => ws\n+            .find_sysroot_proc_macro_srv()\n+            .ok_or_else(|| \"failed to find sysroot proc-macro server\".to_owned())\n+            .and_then(|it| {\n+                ProcMacroServer::spawn(it, identity::<&[&str]>(&[])).map_err(|e| e.to_string())\n+            }),\n+        ProcMacroServerChoice::Explicit(path, args) => {\n+            ProcMacroServer::spawn(path.clone(), args).map_err(|e| e.to_string())\n+        }\n+        ProcMacroServerChoice::None => Err(\"proc macro server disabled\".to_owned()),\n     };\n \n     let crate_graph = ws.to_crate_graph(\n@@ -157,7 +166,7 @@ mod tests {\n         let cargo_config = CargoConfig::default();\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: false,\n-            with_proc_macro: false,\n+            with_proc_macro_server: ProcMacroServerChoice::None,\n             prefill_caches: false,\n         };\n         let (host, _vfs, _proc_macro) ="}, {"sha": "60a7f99ccdb857a1fb35b122e36780d79c244458", "filename": "crates/rust-analyzer/src/cli/lsif.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs?ref=f03fb262f7333a25ebf21f9f252e9505f9d9885b", "patch": "@@ -15,6 +15,7 @@ use lsp_types::{self, lsif};\n use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace};\n use vfs::{AbsPathBuf, Vfs};\n \n+use crate::cli::load_cargo::ProcMacroServerChoice;\n use crate::cli::{\n     flags,\n     load_cargo::{load_workspace, LoadCargoConfig},\n@@ -291,7 +292,7 @@ impl flags::Lsif {\n         let no_progress = &|_| ();\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: true,\n-            with_proc_macro: true,\n+            with_proc_macro_server: ProcMacroServerChoice::Sysroot,\n             prefill_caches: false,\n         };\n         let path = AbsPathBuf::assert(env::current_dir()?.join(&self.path));"}, {"sha": "9a04fbea7747b2b18b79484b96c6f637e18e904b", "filename": "crates/rust-analyzer/src/cli/scip.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs?ref=f03fb262f7333a25ebf21f9f252e9505f9d9885b", "patch": "@@ -5,7 +5,10 @@ use std::{\n     time::Instant,\n };\n \n-use crate::line_index::{LineEndings, LineIndex, PositionEncoding};\n+use crate::{\n+    cli::load_cargo::ProcMacroServerChoice,\n+    line_index::{LineEndings, LineIndex, PositionEncoding},\n+};\n use hir::Name;\n use ide::{\n     LineCol, MonikerDescriptorKind, StaticIndex, StaticIndexedFile, TextRange, TokenId,\n@@ -31,7 +34,7 @@ impl flags::Scip {\n         let no_progress = &|s| (eprintln!(\"rust-analyzer: Loading {s}\"));\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: true,\n-            with_proc_macro: true,\n+            with_proc_macro_server: ProcMacroServerChoice::Sysroot,\n             prefill_caches: true,\n         };\n         let path = vfs::AbsPathBuf::assert(env::current_dir()?.join(&self.path));"}, {"sha": "3552f840a1b76804c233122615320254ff4eaf8c", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=f03fb262f7333a25ebf21f9f252e9505f9d9885b", "patch": "@@ -5,7 +5,7 @@ use project_model::CargoConfig;\n \n use crate::cli::{\n     flags,\n-    load_cargo::{load_workspace_at, LoadCargoConfig},\n+    load_cargo::{load_workspace_at, LoadCargoConfig, ProcMacroServerChoice},\n     Result,\n };\n \n@@ -15,7 +15,7 @@ impl flags::Ssr {\n         let cargo_config = CargoConfig::default();\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: true,\n-            with_proc_macro: true,\n+            with_proc_macro_server: ProcMacroServerChoice::Sysroot,\n             prefill_caches: false,\n         };\n         let (host, vfs, _proc_macro) = load_workspace_at(\n@@ -51,7 +51,7 @@ impl flags::Search {\n         let cargo_config = CargoConfig::default();\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: true,\n-            with_proc_macro: true,\n+            with_proc_macro_server: ProcMacroServerChoice::Sysroot,\n             prefill_caches: false,\n         };\n         let (host, _vfs, _proc_macro) = load_workspace_at("}, {"sha": "a6810e61499c3c8dbd6d0b34698bfa13511c52cc", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03fb262f7333a25ebf21f9f252e9505f9d9885b/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=f03fb262f7333a25ebf21f9f252e9505f9d9885b", "patch": "@@ -21,7 +21,7 @@ use project_model::CargoConfig;\n use test_utils::project_root;\n use vfs::{AbsPathBuf, VfsPath};\n \n-use crate::cli::load_cargo::{load_workspace_at, LoadCargoConfig};\n+use crate::cli::load_cargo::{load_workspace_at, LoadCargoConfig, ProcMacroServerChoice};\n \n #[test]\n fn integrated_highlighting_benchmark() {\n@@ -36,7 +36,7 @@ fn integrated_highlighting_benchmark() {\n     let cargo_config = CargoConfig::default();\n     let load_cargo_config = LoadCargoConfig {\n         load_out_dirs_from_check: true,\n-        with_proc_macro: false,\n+        with_proc_macro_server: ProcMacroServerChoice::None,\n         prefill_caches: false,\n     };\n \n@@ -90,7 +90,7 @@ fn integrated_completion_benchmark() {\n     let cargo_config = CargoConfig::default();\n     let load_cargo_config = LoadCargoConfig {\n         load_out_dirs_from_check: true,\n-        with_proc_macro: false,\n+        with_proc_macro_server: ProcMacroServerChoice::None,\n         prefill_caches: true,\n     };\n "}]}