{"sha": "9b90e7e9802499ef3b4299149e0da1a16668a2f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOTBlN2U5ODAyNDk5ZWYzYjQyOTkxNDllMGRhMWExNjY2OGEyZjE=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-06-09T19:56:41Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-08-02T03:17:01Z"}, "message": "Implement a `explicit_generic_args_with_impl_trait` feature gate\n\nWhen this gate is enabled, explicit generic arguments can be specified even\nif `impl Trait` is used in argument position. Generic arguments can only be\nspecified for explicit generic parameters but not for the synthetic type\nparameters from  `impl Trait`", "tree": {"sha": "19cf2491abdec03bec4ef8574d2cb0925501dad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19cf2491abdec03bec4ef8574d2cb0925501dad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b90e7e9802499ef3b4299149e0da1a16668a2f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b90e7e9802499ef3b4299149e0da1a16668a2f1", "html_url": "https://github.com/rust-lang/rust/commit/9b90e7e9802499ef3b4299149e0da1a16668a2f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b90e7e9802499ef3b4299149e0da1a16668a2f1/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "337181e07d3cd33c0aec2f17c12279bc9afca88f", "url": "https://api.github.com/repos/rust-lang/rust/commits/337181e07d3cd33c0aec2f17c12279bc9afca88f", "html_url": "https://github.com/rust-lang/rust/commit/337181e07d3cd33c0aec2f17c12279bc9afca88f"}], "stats": {"total": 143, "additions": 139, "deletions": 4}, "files": [{"sha": "db8d01e31b74dc243c34b56e00086d6468aef7b2", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b90e7e9802499ef3b4299149e0da1a16668a2f1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90e7e9802499ef3b4299149e0da1a16668a2f1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=9b90e7e9802499ef3b4299149e0da1a16668a2f1", "patch": "@@ -687,6 +687,9 @@ declare_features! (\n     /// Trait upcasting is casting, e.g., `dyn Foo -> dyn Bar` where `Foo: Bar`.\n     (incomplete, trait_upcasting, \"1.56.0\", Some(65991), None),\n \n+    /// Allows explicit generic arguments specification with `impl Trait` present.\n+    (active, explicit_generic_args_with_impl_trait, \"1.56.0\", Some(83701), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "a15eecd2414c27f8689754e5577e862ae2a14d16", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b90e7e9802499ef3b4299149e0da1a16668a2f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90e7e9802499ef3b4299149e0da1a16668a2f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=9b90e7e9802499ef3b4299149e0da1a16668a2f1", "patch": "@@ -769,7 +769,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n                 // (#83606): Do not emit a suggestion if the parent has an `impl Trait`\n                 // as an argument otherwise it will cause the E0282 error.\n-                if !has_impl_trait {\n+                if !has_impl_trait || self.tcx.features().explicit_generic_args_with_impl_trait {\n                     err.span_suggestion_verbose(\n                         span,\n                         \"consider specifying the const argument\","}, {"sha": "95b92fd34c8aa237b655b57f30a1b3df75aef6f8", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b90e7e9802499ef3b4299149e0da1a16668a2f1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90e7e9802499ef3b4299149e0da1a16668a2f1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9b90e7e9802499ef3b4299149e0da1a16668a2f1", "patch": "@@ -554,6 +554,7 @@ symbols! {\n         expected,\n         expf32,\n         expf64,\n+        explicit_generic_args_with_impl_trait,\n         export_name,\n         expr,\n         extended_key_value_attributes,"}, {"sha": "9e700d9e8d8ba632652b3988ac69cd91b850994e", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9b90e7e9802499ef3b4299149e0da1a16668a2f1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90e7e9802499ef3b4299149e0da1a16668a2f1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=9b90e7e9802499ef3b4299149e0da1a16668a2f1", "patch": "@@ -459,7 +459,32 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let default_counts = gen_params.own_defaults();\n         let param_counts = gen_params.own_counts();\n-        let named_type_param_count = param_counts.types - has_self as usize;\n+\n+        // Subtracting from param count to ensure type params synthesized from `impl Trait`\n+        // cannot be explictly specified even with `explicit_generic_args_with_impl_trait`\n+        // feature enabled.\n+        let synth_type_param_count = if tcx.features().explicit_generic_args_with_impl_trait {\n+            gen_params\n+                .params\n+                .iter()\n+                .filter(|param| {\n+                    matches!(\n+                        param.kind,\n+                        ty::GenericParamDefKind::Type {\n+                            synthetic: Some(\n+                                hir::SyntheticTyParamKind::ImplTrait\n+                                    | hir::SyntheticTyParamKind::FromAttr\n+                            ),\n+                            ..\n+                        }\n+                    )\n+                })\n+                .count()\n+        } else {\n+            0\n+        };\n+        let named_type_param_count =\n+            param_counts.types - has_self as usize - synth_type_param_count;\n         let infer_lifetimes =\n             gen_pos != GenericArgPosition::Type && !gen_args.has_lifetime_params();\n \n@@ -588,6 +613,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 param_counts.consts + named_type_param_count\n                     - default_counts.types\n                     - default_counts.consts\n+                    - synth_type_param_count\n             };\n             debug!(\"expected_min: {:?}\", expected_min);\n             debug!(\"arg_counts.lifetimes: {:?}\", gen_args.num_lifetime_params());\n@@ -617,7 +643,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         seg: &hir::PathSegment<'_>,\n         generics: &ty::Generics,\n     ) -> bool {\n-        let explicit = !seg.infer_args;\n+        if seg.infer_args || tcx.features().explicit_generic_args_with_impl_trait {\n+            return false;\n+        }\n+\n         let impl_trait = generics.params.iter().any(|param| {\n             matches!(\n                 param.kind,\n@@ -630,7 +659,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             )\n         });\n \n-        if explicit && impl_trait {\n+        if impl_trait {\n             let spans = seg\n                 .args()\n                 .args"}, {"sha": "479571d85fe0510f5bf16730230f6bcbfed972cf", "filename": "src/doc/unstable-book/src/language-features/explicit-generic-args-with-impl-trait.md", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md?ref=9b90e7e9802499ef3b4299149e0da1a16668a2f1", "patch": "@@ -0,0 +1,53 @@\n+# `explicit_generic_args_with_impl_trait`\n+\n+The tracking issue for this feature is: [#83701]\n+\n+[#83701]: https://github.com/rust-lang/rust/issues/83701\n+\n+------------------------\n+\n+The `explicit_generic_args_with_impl_trait` feature gate lets you specify generic arguments even\n+when `impl Trait` is used in argument position.\n+\n+A simple example is:\n+\n+```rust\n+#![feature(explicit_generic_args_with_impl_trait)]\n+\n+fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+\n+fn main() {\n+    foo::<str>(\"\".to_string());\n+}\n+```\n+\n+This is currently rejected:\n+\n+```text\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n+ --> src/main.rs:6:11\n+  |\n+6 |     foo::<str>(\"\".to_string());\n+  |           ^^^ explicit generic argument not allowed\n+\n+```\n+\n+However it would compile if `explicit_generic_args_with_impl_trait` is enabled.\n+\n+Note that the synthetic type parameters from `impl Trait` are still implicit and you\n+cannot explicitly specify these:\n+\n+```rust,compile_fail\n+#![feature(explicit_generic_args_with_impl_trait)]\n+\n+fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+fn bar<T: ?Sized, F: AsRef<T>>(_f: F) {}\n+\n+fn main() {\n+    bar::<str, _>(\"\".to_string()); // Okay\n+    bar::<str, String>(\"\".to_string()); // Okay\n+\n+    foo::<str>(\"\".to_string()); // Okay\n+    foo::<str, String>(\"\".to_string()); // Error, you cannot specify `impl Trait` explicitly\n+}\n+```"}, {"sha": "832a3e3b7b10d81d742fc54302c692c0f690035d", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs?ref=9b90e7e9802499ef3b4299149e0da1a16668a2f1", "patch": "@@ -0,0 +1,7 @@\n+#![feature(explicit_generic_args_with_impl_trait)]\n+\n+fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+\n+fn main() {\n+    foo::<str, String>(\"\".to_string()); //~ ERROR E0107\n+}"}, {"sha": "739e55e294381720b3339470ca36efae01e6595c", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr?ref=9b90e7e9802499ef3b4299149e0da1a16668a2f1", "patch": "@@ -0,0 +1,17 @@\n+error[E0107]: this function takes at most 1 generic argument but 2 generic arguments were supplied\n+  --> $DIR/explicit-generic-args-for-impl.rs:6:5\n+   |\n+LL |     foo::<str, String>(\"\".to_string());\n+   |     ^^^        ------ help: remove this generic argument\n+   |     |\n+   |     expected at most 1 generic argument\n+   |\n+note: function defined here, with at most 1 generic parameter: `T`\n+  --> $DIR/explicit-generic-args-for-impl.rs:3:4\n+   |\n+LL | fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+   |    ^^^ -\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "a6585bcf84862a159a3b81751fd4187c23fb8792", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs?ref=9b90e7e9802499ef3b4299149e0da1a16668a2f1", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(explicit_generic_args_with_impl_trait)]\n+\n+fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+\n+fn main() {\n+    foo::<str>(\"\".to_string());\n+}"}, {"sha": "0e4d6986d46ecdce76d7f08ba30c45cf6c83aa03", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/feature-gate.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs?ref=9b90e7e9802499ef3b4299149e0da1a16668a2f1", "patch": "@@ -0,0 +1,7 @@\n+// gate-test-explicit_generic_args_with_impl_trait\n+\n+fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+\n+fn main() {\n+    foo::<str>(\"\".to_string()); //~ ERROR E0632\n+}"}, {"sha": "6adc4e6b23968ed57e04443005c220aed915727d", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/feature-gate.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b90e7e9802499ef3b4299149e0da1a16668a2f1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr?ref=9b90e7e9802499ef3b4299149e0da1a16668a2f1", "patch": "@@ -0,0 +1,9 @@\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n+  --> $DIR/feature-gate.rs:6:11\n+   |\n+LL |     foo::<str>(\"\".to_string());\n+   |           ^^^ explicit generic argument not allowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0632`."}]}