{"sha": "6bb181341b05221df7b10a61eca60e6011292f52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYjE4MTM0MWIwNTIyMWRmN2IxMGE2MWVjYTYwZTYwMTEyOTJmNTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-15T00:21:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-16T19:31:34Z"}, "message": "core: Factor out int/i8/16/32/64 mods into int-template", "tree": {"sha": "b6674da064c6cb6deb487ad100c994be6a552c78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6674da064c6cb6deb487ad100c994be6a552c78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bb181341b05221df7b10a61eca60e6011292f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb181341b05221df7b10a61eca60e6011292f52", "html_url": "https://github.com/rust-lang/rust/commit/6bb181341b05221df7b10a61eca60e6011292f52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bb181341b05221df7b10a61eca60e6011292f52/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c", "html_url": "https://github.com/rust-lang/rust/commit/7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c"}], "stats": {"total": 331, "additions": 105, "deletions": 226}, "files": [{"sha": "9d07d42f2c329d901e0eb300421cf7b34a8926d8", "filename": "src/libcore/core.rc", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=6bb181341b05221df7b10a61eca60e6011292f52", "patch": "@@ -44,16 +44,48 @@ export priv;\n \n // Built-in-type support modules\n \n+#[doc = \"Operations and constants for `int`\"]\n+#[path = \"int-template\"]\n+mod int {\n+    import inst::{ hash, parse_buf, from_str, to_str, str, pow };\n+    export hash, parse_buf, from_str, to_str, str, pow;\n+    #[path = \"int.rs\"]\n+    mod inst;\n+}\n+\n+#[doc = \"Operations and constants for `i8`\"]\n+#[path = \"int-template\"]\n+mod i8 {\n+    #[path = \"i8.rs\"]\n+    mod inst;\n+}\n+\n+#[doc = \"Operations and constants for `i16`\"]\n+#[path = \"int-template\"]\n+mod i16 {\n+    #[path = \"i16.rs\"]\n+    mod inst;\n+}\n+\n+#[doc = \"Operations and constants for `i32`\"]\n+#[path = \"int-template\"]\n+mod i32 {\n+    #[path = \"i32.rs\"]\n+    mod inst;\n+}\n+\n+#[doc = \"Operations and constants for `i64`\"]\n+#[path = \"int-template\"]\n+mod i64 {\n+    #[path = \"i64.rs\"]\n+    mod inst;\n+}\n+\n mod box;\n mod char;\n mod float;\n mod f32;\n mod f64;\n-mod int;\n-mod i8;\n-mod i16;\n-mod i32;\n-mod i64;\n mod str;\n mod ptr;\n mod uint;"}, {"sha": "6ae13ae44423c59d56c0942302a61414baccf3ca", "filename": "src/libcore/i16.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c/src%2Flibcore%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c/src%2Flibcore%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi16.rs?ref=7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c", "patch": "@@ -1,41 +0,0 @@\n-#[doc = \"Operations and constants for `i16`\"];\n-\n-const min_value: i16 = -1i16 << 15i16;\n-const max_value: i16 = (-1i16 << 15i16) - 1i16;\n-\n-pure fn min(x: i16, y: i16) -> i16 { if x < y { x } else { y } }\n-pure fn max(x: i16, y: i16) -> i16 { if x > y { x } else { y } }\n-\n-pure fn add(x: i16, y: i16) -> i16 { x + y }\n-pure fn sub(x: i16, y: i16) -> i16 { x - y }\n-pure fn mul(x: i16, y: i16) -> i16 { x * y }\n-pure fn div(x: i16, y: i16) -> i16 { x / y }\n-pure fn rem(x: i16, y: i16) -> i16 { x % y }\n-\n-pure fn lt(x: i16, y: i16) -> bool { x < y }\n-pure fn le(x: i16, y: i16) -> bool { x <= y }\n-pure fn eq(x: i16, y: i16) -> bool { x == y }\n-pure fn ne(x: i16, y: i16) -> bool { x != y }\n-pure fn ge(x: i16, y: i16) -> bool { x >= y }\n-pure fn gt(x: i16, y: i16) -> bool { x > y }\n-\n-pure fn is_positive(x: i16) -> bool { x > 0i16 }\n-pure fn is_negative(x: i16) -> bool { x < 0i16 }\n-pure fn is_nonpositive(x: i16) -> bool { x <= 0i16 }\n-pure fn is_nonnegative(x: i16) -> bool { x >= 0i16 }\n-\n-#[doc = \"Iterate over the range [`lo`..`hi`)\"]\n-fn range(lo: i16, hi: i16, it: fn(i16)) {\n-    let mut i = lo;\n-    while i < hi { it(i); i += 1i16; }\n-}\n-\n-#[doc = \"Computes the bitwise complement\"]\n-pure fn compl(i: i16) -> i16 {\n-    u16::compl(i as u16) as i16\n-}\n-\n-#[doc = \"Computes the absolute value\"]\n-pure fn abs(i: i16) -> i16 {\n-    if is_negative(i) { -i } else { i }\n-}"}, {"sha": "9a6e4ff8a19eef6663199fa6ee7c1188c09cb9c7", "filename": "src/libcore/i32.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c/src%2Flibcore%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c/src%2Flibcore%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi32.rs?ref=7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c", "patch": "@@ -1,41 +0,0 @@\n-#[doc = \"Operations and constants for `i32`\"];\n-\n-const min_value: i32 = -1i32 << 31i32;\n-const max_value: i32 = (-1i32 << 31i32) - 1i32;\n-\n-pure fn min(x: i32, y: i32) -> i32 { if x < y { x } else { y } }\n-pure fn max(x: i32, y: i32) -> i32 { if x > y { x } else { y } }\n-\n-pure fn add(x: i32, y: i32) -> i32 { x + y }\n-pure fn sub(x: i32, y: i32) -> i32 { x - y }\n-pure fn mul(x: i32, y: i32) -> i32 { x * y }\n-pure fn div(x: i32, y: i32) -> i32 { x / y }\n-pure fn rem(x: i32, y: i32) -> i32 { x % y }\n-\n-pure fn lt(x: i32, y: i32) -> bool { x < y }\n-pure fn le(x: i32, y: i32) -> bool { x <= y }\n-pure fn eq(x: i32, y: i32) -> bool { x == y }\n-pure fn ne(x: i32, y: i32) -> bool { x != y }\n-pure fn ge(x: i32, y: i32) -> bool { x >= y }\n-pure fn gt(x: i32, y: i32) -> bool { x > y }\n-\n-pure fn is_positive(x: i32) -> bool { x > 0i32 }\n-pure fn is_negative(x: i32) -> bool { x < 0i32 }\n-pure fn is_nonpositive(x: i32) -> bool { x <= 0i32 }\n-pure fn is_nonnegative(x: i32) -> bool { x >= 0i32 }\n-\n-#[doc = \"Iterate over the range [`lo`..`hi`)\"]\n-fn range(lo: i32, hi: i32, it: fn(i32)) {\n-    let mut i = lo;\n-    while i < hi { it(i); i += 1i32; }\n-}\n-\n-#[doc = \"Computes the bitwise complement\"]\n-pure fn compl(i: i32) -> i32 {\n-    u32::compl(i as u32) as i32\n-}\n-\n-#[doc = \"Computes the absolute value\"]\n-pure fn abs(i: i32) -> i32 {\n-    if is_negative(i) { -i } else { i }\n-}"}, {"sha": "a0f8bf3e1ebdf9bcf67b26c1b8b6e2338e74fec3", "filename": "src/libcore/i64.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c/src%2Flibcore%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c/src%2Flibcore%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi64.rs?ref=7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c", "patch": "@@ -1,41 +0,0 @@\n-#[doc = \"Operations and constants for `i64`\"];\n-\n-const min_value: i64 = -1i64 << 63i64;\n-const max_value: i64 = (-1i64 << 63i64) - 1i64;\n-\n-pure fn min(x: i64, y: i64) -> i64 { if x < y { x } else { y } }\n-pure fn max(x: i64, y: i64) -> i64 { if x > y { x } else { y } }\n-\n-pure fn add(x: i64, y: i64) -> i64 { x + y }\n-pure fn sub(x: i64, y: i64) -> i64 { x - y }\n-pure fn mul(x: i64, y: i64) -> i64 { x * y }\n-pure fn div(x: i64, y: i64) -> i64 { x / y }\n-pure fn rem(x: i64, y: i64) -> i64 { x % y }\n-\n-pure fn lt(x: i64, y: i64) -> bool { x < y }\n-pure fn le(x: i64, y: i64) -> bool { x <= y }\n-pure fn eq(x: i64, y: i64) -> bool { x == y }\n-pure fn ne(x: i64, y: i64) -> bool { x != y }\n-pure fn ge(x: i64, y: i64) -> bool { x >= y }\n-pure fn gt(x: i64, y: i64) -> bool { x > y }\n-\n-pure fn is_positive(x: i64) -> bool { x > 0i64 }\n-pure fn is_negative(x: i64) -> bool { x < 0i64 }\n-pure fn is_nonpositive(x: i64) -> bool { x <= 0i64 }\n-pure fn is_nonnegative(x: i64) -> bool { x >= 0i64 }\n-\n-#[doc = \"Iterate over the range [`lo`..`hi`)\"]\n-fn range(lo: i64, hi: i64, it: fn(i64)) {\n-    let mut i = lo;\n-    while i < hi { it(i); i += 1i64; }\n-}\n-\n-#[doc = \"Computes the bitwise complement\"]\n-pure fn compl(i: i64) -> i64 {\n-    u64::compl(i as u64) as i64\n-}\n-\n-#[doc = \"Computes the absolute value\"]\n-pure fn abs(i: i64) -> i64 {\n-    if is_negative(i) { -i } else { i }\n-}"}, {"sha": "8d4e429ffc9ba05e7e88008e5f7672f27664a516", "filename": "src/libcore/i8.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c/src%2Flibcore%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c/src%2Flibcore%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi8.rs?ref=7a2d7aa5dee7832a9afc9ba18c8ffc3622e3c00c", "patch": "@@ -1,41 +0,0 @@\n-#[doc = \"Operations and constants for `i8`\"];\n-\n-const min_value: i8 = -1i8 << 7i8;\n-const max_value: i8 = (-1i8 << 7i8) - 1i8;\n-\n-pure fn min(x: i8, y: i8) -> i8 { if x < y { x } else { y } }\n-pure fn max(x: i8, y: i8) -> i8 { if x > y { x } else { y } }\n-\n-pure fn add(x: i8, y: i8) -> i8 { x + y }\n-pure fn sub(x: i8, y: i8) -> i8 { x - y }\n-pure fn mul(x: i8, y: i8) -> i8 { x * y }\n-pure fn div(x: i8, y: i8) -> i8 { x / y }\n-pure fn rem(x: i8, y: i8) -> i8 { x % y }\n-\n-pure fn lt(x: i8, y: i8) -> bool { x < y }\n-pure fn le(x: i8, y: i8) -> bool { x <= y }\n-pure fn eq(x: i8, y: i8) -> bool { x == y }\n-pure fn ne(x: i8, y: i8) -> bool { x != y }\n-pure fn ge(x: i8, y: i8) -> bool { x >= y }\n-pure fn gt(x: i8, y: i8) -> bool { x > y }\n-\n-pure fn is_positive(x: i8) -> bool { x > 0i8 }\n-pure fn is_negative(x: i8) -> bool { x < 0i8 }\n-pure fn is_nonpositive(x: i8) -> bool { x <= 0i8 }\n-pure fn is_nonnegative(x: i8) -> bool { x >= 0i8 }\n-\n-#[doc = \"Iterate over the range [`lo`..`hi`)\"]\n-fn range(lo: i8, hi: i8, it: fn(i8)) {\n-    let mut i = lo;\n-    while i < hi { it(i); i += 1i8; }\n-}\n-\n-#[doc = \"Computes the bitwise complement\"]\n-pure fn compl(i: i8) -> i8 {\n-    u8::compl(i as u8) as i8\n-}\n-\n-#[doc = \"Computes the absolute value\"]\n-pure fn abs(i: i8) -> i8 {\n-    if is_negative(i) { -i } else { i }\n-}"}, {"sha": "53413f3cdb67bf536a450a3d1d96114aa381fec8", "filename": "src/libcore/int-template.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=6bb181341b05221df7b10a61eca60e6011292f52", "patch": "@@ -0,0 +1,51 @@\n+import T = inst::T;\n+\n+export min_value, max_value;\n+export min, max;\n+export add, sub, mul, div, rem;\n+export lt, le, eq, ne, ge, gt;\n+export is_positive, is_negative;\n+export is_nonpositive, is_nonnegative;\n+export range;\n+export compl;\n+export abs;\n+\n+const min_value: T = -1 as T << (inst::bits - 1 as T);\n+const max_value: T = min_value - 1 as T;\n+\n+pure fn min(x: T, y: T) -> T { if x < y { x } else { y } }\n+pure fn max(x: T, y: T) -> T { if x > y { x } else { y } }\n+\n+pure fn add(x: T, y: T) -> T { x + y }\n+pure fn sub(x: T, y: T) -> T { x - y }\n+pure fn mul(x: T, y: T) -> T { x * y }\n+pure fn div(x: T, y: T) -> T { x / y }\n+pure fn rem(x: T, y: T) -> T { x % y }\n+\n+pure fn lt(x: T, y: T) -> bool { x < y }\n+pure fn le(x: T, y: T) -> bool { x <= y }\n+pure fn eq(x: T, y: T) -> bool { x == y }\n+pure fn ne(x: T, y: T) -> bool { x != y }\n+pure fn ge(x: T, y: T) -> bool { x >= y }\n+pure fn gt(x: T, y: T) -> bool { x > y }\n+\n+pure fn is_positive(x: T) -> bool { x > 0 as T }\n+pure fn is_negative(x: T) -> bool { x < 0 as T }\n+pure fn is_nonpositive(x: T) -> bool { x <= 0 as T }\n+pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n+\n+#[doc = \"Iterate over the range [`lo`..`hi`)\"]\n+fn range(lo: T, hi: T, it: fn(T)) {\n+    let mut i = lo;\n+    while i < hi { it(i); i += 1 as T; }\n+}\n+\n+#[doc = \"Computes the bitwise complement\"]\n+pure fn compl(i: T) -> T {\n+    -1 as T ^ i\n+}\n+\n+#[doc = \"Computes the absolute value\"]\n+pure fn abs(i: T) -> T {\n+    if is_negative(i) { -i } else { i }\n+}"}, {"sha": "06eb96ba59c693756397dfe22ccf589ee0395725", "filename": "src/libcore/int-template/i16.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi16.rs?ref=6bb181341b05221df7b10a61eca60e6011292f52", "patch": "@@ -0,0 +1,3 @@\n+type T = i16;\n+\n+const bits: T = 16 as T;"}, {"sha": "151f3582586243fa28e4c61b115e90f671d1e54d", "filename": "src/libcore/int-template/i32.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi32.rs?ref=6bb181341b05221df7b10a61eca60e6011292f52", "patch": "@@ -0,0 +1,3 @@\n+type T = i32;\n+\n+const bits: T = 32 as T;"}, {"sha": "1c8a181ab8e020ebf2bde174d765d07aeaf5fd65", "filename": "src/libcore/int-template/i64.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi64.rs?ref=6bb181341b05221df7b10a61eca60e6011292f52", "patch": "@@ -0,0 +1,3 @@\n+type T = i64;\n+\n+const bits: T = 64 as T;"}, {"sha": "c103f1cbca48a5d251ea24de259dee48fdced275", "filename": "src/libcore/int-template/i8.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fi8.rs?ref=6bb181341b05221df7b10a61eca60e6011292f52", "patch": "@@ -0,0 +1,3 @@\n+type T = i8;\n+\n+const bits: T = 8 as T;"}, {"sha": "7cc47a52679b9d283e32ea68c0dcdbb9f0435654", "filename": "src/libcore/int-template/int.rs", "status": "renamed", "additions": 5, "deletions": 57, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb181341b05221df7b10a61eca60e6011292f52/src%2Flibcore%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fint.rs?ref=6bb181341b05221df7b10a61eca60e6011292f52", "patch": "@@ -1,49 +1,14 @@\n-#[doc = \"Operations and constants for `int`\"];\n+type T = int;\n \n-#[cfg(target_arch=\"x86\")]\n-const min_value: int = -1 << 31;\n+#[cfg(target_arch = \"x86\")]\n+const bits: T = 32 as T;\n \n-#[cfg(target_arch=\"x86_64\")]\n-const min_value: int = -1 << 63;\n-\n-// FIXME: Find another way to access the machine word size in a const expr\n-// (See Issue #2001)\n-#[cfg(target_arch=\"x86\")]\n-const max_value: int = (-1 << 31)-1;\n-\n-#[cfg(target_arch=\"x86_64\")]\n-const max_value: int = (-1 << 63)-1;\n-\n-pure fn min(x: int, y: int) -> int { if x < y { x } else { y } }\n-pure fn max(x: int, y: int) -> int { if x > y { x } else { y } }\n-\n-pure fn add(x: int, y: int) -> int { ret x + y; }\n-pure fn sub(x: int, y: int) -> int { ret x - y; }\n-pure fn mul(x: int, y: int) -> int { ret x * y; }\n-pure fn div(x: int, y: int) -> int { ret x / y; }\n-pure fn rem(x: int, y: int) -> int { ret x % y; }\n-\n-pure fn lt(x: int, y: int) -> bool { ret x < y; }\n-pure fn le(x: int, y: int) -> bool { ret x <= y; }\n-pure fn eq(x: int, y: int) -> bool { ret x == y; }\n-pure fn ne(x: int, y: int) -> bool { ret x != y; }\n-pure fn ge(x: int, y: int) -> bool { ret x >= y; }\n-pure fn gt(x: int, y: int) -> bool { ret x > y; }\n-\n-pure fn is_positive(x: int) -> bool { ret x > 0; }\n-pure fn is_negative(x: int) -> bool { ret x < 0; }\n-pure fn is_nonpositive(x: int) -> bool { ret x <= 0; }\n-pure fn is_nonnegative(x: int) -> bool { ret x >= 0; }\n+#[cfg(target_arch = \"x86_64\")]\n+const bits: T = 64 as T;\n \n #[doc = \"Produce a uint suitable for use in a hash table\"]\n pure fn hash(x: int) -> uint { ret x as uint; }\n \n-#[doc = \"Iterate over the range `[lo..hi)`\"]\n-fn range(lo: int, hi: int, it: fn(int)) {\n-    let mut i = lo;\n-    while i < hi { it(i); i += 1; }\n-}\n-\n #[doc = \"\n Parse a buffer of bytes\n \n@@ -105,15 +70,6 @@ fn pow(base: int, exponent: uint) -> int {\n     ret acc;\n }\n \n-#[doc = \"Computes the bitwise complement\"]\n-pure fn compl(i: int) -> int {\n-    uint::compl(i as uint) as int\n-}\n-\n-#[doc = \"Computes the absolute value\"]\n-fn abs(i: int) -> int {\n-    if is_negative(i) { -i } else { i }\n-}\n \n #[test]\n fn test_from_str() {\n@@ -186,11 +142,3 @@ fn test_overflows() {\n    assert (min_value <= 0);\n    assert (min_value + max_value + 1 == 0);\n }\n-\n-// Local Variables:\n-// mode: rust;\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:", "previous_filename": "src/libcore/int.rs"}]}