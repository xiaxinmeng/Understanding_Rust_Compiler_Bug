{"sha": "79bf586d4b12456817578d75b305b3027e96d44e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YmY1ODZkNGIxMjQ1NjgxNzU3OGQ3NWIzMDViMzAyN2U5NmQ0NGU=", "commit": {"author": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-06-01T17:23:56Z"}, "committer": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-06-01T17:23:56Z"}, "message": "switch to BitVector, simplify target_block logic\n\nclarify comments and panic message", "tree": {"sha": "3aa59b70bc72547d5252b0256c455bd8cc4aadae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa59b70bc72547d5252b0256c455bd8cc4aadae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79bf586d4b12456817578d75b305b3027e96d44e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79bf586d4b12456817578d75b305b3027e96d44e", "html_url": "https://github.com/rust-lang/rust/commit/79bf586d4b12456817578d75b305b3027e96d44e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79bf586d4b12456817578d75b305b3027e96d44e/comments", "author": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d34c280d92e1bc443c9ae10744e5b73a71e8915", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d34c280d92e1bc443c9ae10744e5b73a71e8915", "html_url": "https://github.com/rust-lang/rust/commit/9d34c280d92e1bc443c9ae10744e5b73a71e8915"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "79d3f0cf688465cf222ac99e4aec9d2046e5fe4b", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79bf586d4b12456817578d75b305b3027e96d44e/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79bf586d4b12456817578d75b305b3027e96d44e/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=79bf586d4b12456817578d75b305b3027e96d44e", "patch": "@@ -11,7 +11,7 @@\n use std::iter::FromIterator;\n \n /// A very simple BitVector type.\n-#[derive(Clone)]\n+#[derive(Clone, Debug, PartialEq)]\n pub struct BitVector {\n     data: Vec<u64>,\n }"}, {"sha": "88d7e41bc616f0e07f642be80ac9e1d5bc343a81", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79bf586d4b12456817578d75b305b3027e96d44e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79bf586d4b12456817578d75b305b3027e96d44e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=79bf586d4b12456817578d75b305b3027e96d44e", "patch": "@@ -15,6 +15,7 @@\n \n use build::{BlockAnd, BlockAndExtension, Builder};\n use rustc_data_structures::fnv::FnvHashMap;\n+use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{AdtDef, Ty};\n use rustc::mir::repr::*;\n@@ -266,7 +267,7 @@ enum TestKind<'tcx> {\n     // test the branches of enum\n     Switch {\n         adt_def: AdtDef<'tcx>,\n-        variants: Vec<bool>,\n+        variants: BitVector,\n     },\n \n     // test the branches of enum"}, {"sha": "838597d1a1725e2b127d0e833b1a79ab864c9010", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/79bf586d4b12456817578d75b305b3027e96d44e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79bf586d4b12456817578d75b305b3027e96d44e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=79bf586d4b12456817578d75b305b3027e96d44e", "patch": "@@ -19,6 +19,7 @@ use build::Builder;\n use build::matches::{Candidate, MatchPair, Test, TestKind};\n use hair::*;\n use rustc_data_structures::fnv::FnvHashMap;\n+use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{self, Ty};\n use rustc::mir::repr::*;\n@@ -35,7 +36,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     span: match_pair.pattern.span,\n                     kind: TestKind::Switch { \n                         adt_def: adt_def.clone(), \n-                        variants: vec![false; self.hir.num_variants(adt_def)], \n+                        variants: BitVector::new(self.hir.num_variants(adt_def)),\n                     },\n                 }\n             }\n@@ -129,7 +130,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 true\n             }\n             PatternKind::Variant { .. } => {\n-                panic!(\"you should have called add_cases_to_switch_switch instead!\");\n+                panic!(\"you should have called add_variants_to_switch instead!\");\n             }\n             PatternKind::Range { .. } |\n             PatternKind::Slice { .. } |\n@@ -145,10 +146,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn add_variants_to_switch<'pat>(&mut self,\n-                                     test_lvalue: &Lvalue<'tcx>,\n-                                     candidate: &Candidate<'pat, 'tcx>,\n-                                     variants: &mut Vec<bool>)\n-                                     -> bool\n+                                        test_lvalue: &Lvalue<'tcx>,\n+                                        candidate: &Candidate<'pat, 'tcx>,\n+                                        variants: &mut BitVector)\n+                                        -> bool\n     {\n         let match_pair = match candidate.match_pairs.iter().find(|mp| mp.lvalue == *test_lvalue) {\n             Some(match_pair) => match_pair,\n@@ -157,8 +158,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         match *match_pair.pattern.kind {\n             PatternKind::Variant { adt_def: _ , variant_index,  .. } => {\n-                // Do I need to look at the PatternKind::Variant subpatterns?\n-                variants[variant_index] |= true;\n+                // We have a pattern testing for variant `variant_index`\n+                // set the corresponding index to true\n+                variants.insert(variant_index);\n                 true\n             }\n             _ => {\n@@ -178,24 +180,19 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         match test.kind {\n             TestKind::Switch { adt_def, ref variants } => {\n                 let num_enum_variants = self.hir.num_variants(adt_def);\n-                debug!(\"num_enum_variants: {}\", num_enum_variants);\n-                debug!(\"variants.len(): {}\", variants.len());\n-                debug!(\"variants: {:?}\", variants);\n-                let target_blocks: Vec<_> = if variants.into_iter().any(|b| {!b}) {\n-                    let otherwise_block = self.cfg.start_new_block();\n-                    debug!(\"basic block: {:?} is an otherwise block!\", otherwise_block);\n-                    (0..num_enum_variants).map(|i| \n-                        if variants[i] {\n-                            self.cfg.start_new_block()\n-                        } else {\n-                            otherwise_block\n+                let mut otherwise_block = None;\n+                let target_blocks: Vec<_> = (0..num_enum_variants).map(|i| {\n+                    if variants.contains(i) {\n+                        self.cfg.start_new_block()\n+                    } else {\n+                        if otherwise_block.is_none() {\n+                            otherwise_block = Some(self.cfg.start_new_block());\n                         }\n-                    )\n-                    .collect()\n-                } else {\n-                    (0..num_enum_variants).map(|_| self.cfg.start_new_block())\n-                                          .collect()\n-                };\n+                        otherwise_block.unwrap()\n+                    }\n+                }).collect();\n+                debug!(\"num_enum_variants: {}, num tested variants: {}, variants: {:?}\",\n+                       num_enum_variants, variants.iter().count(), variants);\n                 self.cfg.terminate(block, scope_id, test.span, TerminatorKind::Switch {\n                     discr: lvalue.clone(),\n                     adt_def: adt_def,"}]}