{"sha": "ad673daa6c990828ae0b1d13aeb3a7f24ad7631d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNjczZGFhNmM5OTA4MjhhZTBiMWQxM2FlYjNhN2YyNGFkNzYzMWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-09T23:48:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-09T23:50:19Z"}, "message": "Revert \"rustc: Switch over to resolve3\" due to Linux failures\n\nThis reverts commit 2c0aa257e293dde91042a8045100d9923d139a04.", "tree": {"sha": "6d3792f4fa96cb4e2a172acf3e19c9511a52af37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d3792f4fa96cb4e2a172acf3e19c9511a52af37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d", "html_url": "https://github.com/rust-lang/rust/commit/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "231bd084078cfda106c0e9ea36c4e0857e5722cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/231bd084078cfda106c0e9ea36c4e0857e5722cb", "html_url": "https://github.com/rust-lang/rust/commit/231bd084078cfda106c0e9ea36c4e0857e5722cb"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "4ca47254a943d4ba1abc30141aaf86818a37524a", "filename": "src/libsyntax/ext/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Flibsyntax%2Fext%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Flibsyntax%2Fext%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes.rs?ref=ad673daa6c990828ae0b1d13aeb3a7f24ad7631d", "patch": "@@ -8,7 +8,7 @@ import parse::common::parser_common;\n \n import pipes::parse_proto::proto_parser;\n \n-import pipes::pipec::methods;\n+import pipes::pipec::*;\n \n fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident, tt: ast::token_tree)\n     -> @ast::item\n@@ -26,4 +26,4 @@ fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident, tt: ast::token_tree)\n     let proto = rust_parser.parse_proto(id);\n \n     proto.compile(cx)\n-}\n+}\n\\ No newline at end of file"}, {"sha": "7a9ec6f32a4463d158d37ac3e522826391402ad9", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=ad673daa6c990828ae0b1d13aeb3a7f24ad7631d", "patch": "@@ -12,14 +12,17 @@ export parse_crate_from_source_str;\n export parse_expr_from_source_str, parse_item_from_source_str;\n export parse_from_source_str;\n \n+// this used to be `import common::parser_common`, but it was causing\n+// unresolved import errors. Maybe resolve3 will fix it.\n+import common::*;\n import parser::parser;\n import attr::parser_attr;\n import common::parser_common;\n import ast::node_id;\n import util::interner;\n+// FIXME (#1935): resolve badness\n+import lexer::*;\n import diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n-import lexer::{reader, string_reader, string_reader_as_reader};\n-import lexer::{tt_reader_as_reader};\n \n type parse_sess = @{\n     cm: codemap::codemap,"}, {"sha": "d351d492fb089594b981459e35ba7479b8659759", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=ad673daa6c990828ae0b1d13aeb3a7f24ad7631d", "patch": "@@ -1,8 +1,8 @@\n import io::reader_util;\n import io::println;//XXXXXXXXxxx\n import util::interner;\n-import lexer::{string_reader, bump, is_eof, nextch,\n-               is_whitespace, get_str_from, string_reader_as_reader, reader};\n+import lexer::{ string_reader, bump, is_eof, nextch,\n+               is_whitespace, get_str_from, string_reader_as_reader };\n \n export cmnt;\n export lit;"}, {"sha": "16059b473bbb6b172ac77bbc1cc8b96d6d644379", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=ad673daa6c990828ae0b1d13aeb3a7f24ad7631d", "patch": "@@ -1,7 +1,6 @@\n import std::map::{hashmap};\n import ast_util::spanned;\n import parser::parser;\n-import lexer::reader;\n \n type seq_sep = {\n     sep: option<token::token>,"}, {"sha": "7d36216aa9b26c684378e75feb749a78fbf57d8b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ad673daa6c990828ae0b1d13aeb3a7f24ad7631d", "patch": "@@ -5,7 +5,7 @@ import token::{can_begin_expr, is_ident, is_plain_ident, ACTUALLY};\n import codemap::{span,fss_none};\n import util::interner;\n import ast_util::{spanned, respan, mk_sp, ident_to_path, operator_prec};\n-import lexer::{reader, tt_reader_as_reader};\n+import lexer::reader;\n import prec::{as_prec, token_to_binop};\n import attr::parser_attr;\n import common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed,"}, {"sha": "799f34377ede4955bb503fd7982f8f6a5f97ba74", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad673daa6c990828ae0b1d13aeb3a7f24ad7631d/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=ad673daa6c990828ae0b1d13aeb3a7f24ad7631d", "patch": "@@ -168,9 +168,26 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n                              session::sess_os_to_meta_os(sess.targ_cfg.os),\n                              sess.opts.static));\n \n-    let { def_map: def_map, exp_map: exp_map, impl_map: impl_map } =\n-        time(time_passes, \"resolution\", ||\n-             middle::resolve3::resolve_crate(sess, ast_map, crate));\n+    let mut def_map;\n+    let mut impl_map;\n+    let mut exp_map;\n+    if sess.fast_resolve() {\n+        let { def_map: fast_dm, exp_map: fast_em, impl_map: fast_im } =\n+            time(time_passes, \"fast resolution\", ||\n+                 middle::resolve3::resolve_crate(sess, ast_map, crate));\n+\n+        def_map = fast_dm;\n+        impl_map = fast_im;\n+        exp_map = fast_em;\n+    } else {\n+        let { def_map: normal_dm, exp_map: normal_em, impl_map: normal_im } =\n+            time(time_passes, \"resolution\", ||\n+                 resolve::resolve_crate(sess, ast_map, crate));\n+\n+        def_map = normal_dm;\n+        impl_map = normal_im;\n+        exp_map = normal_em;\n+    }\n \n     let freevars = time(time_passes, \"freevar finding\", ||\n         freevars::annotate_freevars(def_map, crate));"}]}