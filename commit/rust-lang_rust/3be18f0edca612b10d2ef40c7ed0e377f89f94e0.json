{"sha": "3be18f0edca612b10d2ef40c7ed0e377f89f94e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZTE4ZjBlZGNhNjEyYjEwZDJlZjQwYzdlZDBlMzc3Zjg5Zjk0ZTA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-11T20:45:27Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-11T20:45:27Z"}, "message": "Prevent raw pointers from being used as an explicit self\n\nThis can't be made to work with the current setup.\n\nFixes #26194.", "tree": {"sha": "a6ad87a40c65ba1cd77cd546733315d70db266aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6ad87a40c65ba1cd77cd546733315d70db266aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3be18f0edca612b10d2ef40c7ed0e377f89f94e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3be18f0edca612b10d2ef40c7ed0e377f89f94e0", "html_url": "https://github.com/rust-lang/rust/commit/3be18f0edca612b10d2ef40c7ed0e377f89f94e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3be18f0edca612b10d2ef40c7ed0e377f89f94e0/comments", "author": null, "committer": null, "parents": [{"sha": "deff2f50a97342c8b2f92a124ded2d2ead7b2996", "url": "https://api.github.com/repos/rust-lang/rust/commits/deff2f50a97342c8b2f92a124ded2d2ead7b2996", "html_url": "https://github.com/rust-lang/rust/commit/deff2f50a97342c8b2f92a124ded2d2ead7b2996"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "8d057914748fd5e443fc812c9619783469a07ecf", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3be18f0edca612b10d2ef40c7ed0e377f89f94e0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be18f0edca612b10d2ef40c7ed0e377f89f94e0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3be18f0edca612b10d2ef40c7ed0e377f89f94e0", "patch": "@@ -2174,7 +2174,7 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n     if let ast::SelfExplicit(ref ast_type, _) = explicit_self.node {\n         let typ = ccx.icx(&method_type.predicates).to_ty(rs, &**ast_type);\n         let base_type = match typ.sty {\n-            ty::ty_ptr(tm) | ty::ty_rptr(_, tm) => tm.ty,\n+            ty::ty_rptr(_, tm) => tm.ty,\n             ty::ty_uniq(typ) => typ,\n             _ => typ,\n         };\n@@ -2220,7 +2220,7 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n                         ppaux::ty_to_string(tcx, required_type))\n         }));\n \n-        // We could conceviably add more free-reion relations here,\n+        // We could conceviably add more free-region relations here,\n         // but since this code is just concerned with checking that\n         // the `&Self` types etc match up, it's not really necessary.\n         // It would just allow people to be more approximate in some"}, {"sha": "b5c875cc4cbd200c57efa5d4bdcaacc319296b3e", "filename": "src/test/compile-fail/issue-26194.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3be18f0edca612b10d2ef40c7ed0e377f89f94e0/src%2Ftest%2Fcompile-fail%2Fissue-26194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be18f0edca612b10d2ef40c7ed0e377f89f94e0/src%2Ftest%2Fcompile-fail%2Fissue-26194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26194.rs?ref=3be18f0edca612b10d2ef40c7ed0e377f89f94e0", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S(String);\n+\n+impl S {\n+    fn f(self: *mut S) -> String { self.0 }\n+    //~^ ERROR mismatched self type\n+}\n+\n+fn main() { S(\"\".to_owned()).f(); }"}]}