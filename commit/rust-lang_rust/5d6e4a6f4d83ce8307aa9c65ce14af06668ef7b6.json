{"sha": "5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNmU0YTZmNGQ4M2NlODMwN2FhOWM2NWNlMTRhZjA2NjY4ZWY3YjY=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-07-03T20:36:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-03T20:36:00Z"}, "message": "Merge pull request #1068 from AtheMathmo/useless_vec-constant-expr\n\nCheck for constant expression in useless_vec lint", "tree": {"sha": "766e1fc5756ef3ae88b4c2a54dfe2b56076aaf33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/766e1fc5756ef3ae88b4c2a54dfe2b56076aaf33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6", "html_url": "https://github.com/rust-lang/rust/commit/5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e9ca25584afa2f8c639435f64ed6ccedb1f5b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9ca25584afa2f8c639435f64ed6ccedb1f5b52", "html_url": "https://github.com/rust-lang/rust/commit/4e9ca25584afa2f8c639435f64ed6ccedb1f5b52"}, {"sha": "10b545e30b18216d536fd4799da65589e499b588", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b545e30b18216d536fd4799da65589e499b588", "html_url": "https://github.com/rust-lang/rust/commit/10b545e30b18216d536fd4799da65589e499b588"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "a6289837d4e93c3786b2661f05cbe6733ccad054", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6", "patch": "@@ -1,6 +1,8 @@\n use rustc::lint::*;\n use rustc::ty::TypeVariants;\n use rustc::hir::*;\n+use rustc_const_eval::EvalHint::ExprTypeChecked;\n+use rustc_const_eval::eval_const_expr_partial;\n use syntax::codemap::Span;\n use syntax::ptr::P;\n use utils::{is_expn_of, match_path, paths, recover_for_loop, snippet, span_lint_and_then};\n@@ -52,9 +54,15 @@ impl LateLintPass for Pass {\n \n fn check_vec_macro(cx: &LateContext, vec: &Expr, span: Span) {\n     if let Some(vec_args) = unexpand(cx, vec) {\n+\n         let snippet = match vec_args {\n             Args::Repeat(elem, len) => {\n-                format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n+                // Check that the length is a constant expression\n+                if eval_const_expr_partial(cx.tcx, len, ExprTypeChecked, None).is_ok() {\n+                    format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n+                } else {\n+                    return;\n+                }\n             }\n             Args::Vec(args) => {\n                 if let Some(last) = args.iter().last() {"}, {"sha": "92c99c20e36ea8ce3f8656e865fb374bed3a9acc", "filename": "tests/compile-fail/vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6/tests%2Fcompile-fail%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6/tests%2Fcompile-fail%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvec.rs?ref=5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6", "patch": "@@ -7,6 +7,16 @@ fn on_slice(_: &[u8]) {}\n #[allow(ptr_arg)]\n fn on_vec(_: &Vec<u8>) {}\n \n+struct Line {\n+    length: usize,\n+}\n+\n+impl Line {\n+    fn length(&self) -> usize {\n+        self.length\n+    }\n+}\n+\n fn main() {\n     on_slice(&vec![]);\n     //~^ ERROR useless use of `vec!`\n@@ -42,6 +52,12 @@ fn main() {\n     on_vec(&vec![1, 2]);\n     on_vec(&vec![1; 2]);\n \n+    // Now with non-constant expressions\n+    let line = Line { length: 2 };\n+\n+    on_slice(&vec![2; line.length]);\n+    on_slice(&vec![2; line.length()]);\n+\n     for a in vec![1, 2, 3] {\n         //~^ ERROR useless use of `vec!`\n         //~| HELP you can use"}]}