{"sha": "d21e908175de9c70fffc9c07d676557392cf2b39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMWU5MDgxNzVkZTljNzBmZmZjOWMwN2Q2NzY1NTczOTJjZjJiMzk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-11T00:52:44Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-13T07:05:28Z"}, "message": "Disallow non-inline modules without path annotations inside blocks and fix fallout", "tree": {"sha": "52a6d8b864124612acc76c540dce8c7e96fc1a57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52a6d8b864124612acc76c540dce8c7e96fc1a57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d21e908175de9c70fffc9c07d676557392cf2b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d21e908175de9c70fffc9c07d676557392cf2b39", "html_url": "https://github.com/rust-lang/rust/commit/d21e908175de9c70fffc9c07d676557392cf2b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d21e908175de9c70fffc9c07d676557392cf2b39/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc2466f09269dd86285b0f52a31360d087a379b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc2466f09269dd86285b0f52a31360d087a379b", "html_url": "https://github.com/rust-lang/rust/commit/dbc2466f09269dd86285b0f52a31360d087a379b"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "e6ee01fd27e6467aef578013db6c4648ab8a4e5c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d21e908175de9c70fffc9c07d676557392cf2b39/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21e908175de9c70fffc9c07d676557392cf2b39/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=d21e908175de9c70fffc9c07d676557392cf2b39", "patch": "@@ -65,12 +65,13 @@ mod windows_msvc_base;\n \n macro_rules! supported_targets {\n     ( $(($triple:expr, $module:ident)),+ ) => (\n+        $(mod $module;)*\n+\n         /// List of supported targets\n         pub const TARGETS: &'static [&'static str] = &[$($triple),*];\n \n         // this would use a match if stringify! were allowed in pattern position\n         fn load_specific(target: &str) -> Option<Target> {\n-            $(mod $module;)*\n             let target = target.replace(\"-\", \"_\");\n             if false { }\n             $("}, {"sha": "d21b30e27f1d896f024a716ca8df0e11224bc207", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d21e908175de9c70fffc9c07d676557392cf2b39/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21e908175de9c70fffc9c07d676557392cf2b39/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d21e908175de9c70fffc9c07d676557392cf2b39", "patch": "@@ -73,6 +73,7 @@ bitflags! {\n     flags Restrictions: u8 {\n         const RESTRICTION_STMT_EXPR         = 1 << 0,\n         const RESTRICTION_NO_STRUCT_LITERAL = 1 << 1,\n+        const NO_NONINLINE_MOD  = 1 << 2,\n     }\n }\n \n@@ -3208,8 +3209,8 @@ impl<'a> Parser<'a> {\n     /// Evaluate the closure with restrictions in place.\n     ///\n     /// After the closure is evaluated, restrictions are reset.\n-    pub fn with_res<F>(&mut self, r: Restrictions, f: F) -> PResult<'a, P<Expr>>\n-        where F: FnOnce(&mut Self) -> PResult<'a,  P<Expr>>\n+    pub fn with_res<F, T>(&mut self, r: Restrictions, f: F) -> T\n+        where F: FnOnce(&mut Self) -> T\n     {\n         let old = self.restrictions;\n         self.restrictions = r;\n@@ -3767,7 +3768,9 @@ impl<'a> Parser<'a> {\n             }\n         } else {\n             // FIXME: Bad copy of attrs\n-            match try!(self.parse_item_(attrs.clone(), false, true)) {\n+            let restrictions = self.restrictions | Restrictions::NO_NONINLINE_MOD;\n+            match try!(self.with_res(restrictions,\n+                                     |this| this.parse_item_(attrs.clone(), false, true))) {\n                 Some(i) => {\n                     let hi = i.span.hi;\n                     let decl = P(spanned(lo, hi, DeclKind::Item(i)));\n@@ -5174,7 +5177,17 @@ impl<'a> Parser<'a> {\n \n         let paths = Parser::default_submod_path(id, &dir_path, self.sess.codemap());\n \n-        if !self.owns_directory {\n+        if self.restrictions.contains(Restrictions::NO_NONINLINE_MOD) {\n+            let msg =\n+                \"Cannot declare a non-inline module inside a block unless it has a path attribute\";\n+            let mut err = self.diagnostic().struct_span_err(id_sp, msg);\n+            if paths.path_exists {\n+                let msg = format!(\"Maybe `use` the module `{}` instead of redeclaring it\",\n+                                  paths.name);\n+                err.span_note(id_sp, &msg);\n+            }\n+            return Err(err);\n+        } else if !self.owns_directory {\n             let mut err = self.diagnostic().struct_span_err(id_sp,\n                 \"cannot declare a new module at this location\");\n             let this_module = match self.mod_path_stack.last() {"}, {"sha": "c4ede12e8208277d5a7dd272442ac3fa4ca774cd", "filename": "src/test/compile-fail/non-inline-mod-restriction.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d21e908175de9c70fffc9c07d676557392cf2b39/src%2Ftest%2Fcompile-fail%2Fnon-inline-mod-restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21e908175de9c70fffc9c07d676557392cf2b39/src%2Ftest%2Fcompile-fail%2Fnon-inline-mod-restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-inline-mod-restriction.rs?ref=d21e908175de9c70fffc9c07d676557392cf2b39", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that non-inline modules are not allowed inside blocks.\n+\n+fn main() {\n+    mod foo; //~ ERROR Cannot declare a non-inline module inside a block\n+}"}]}