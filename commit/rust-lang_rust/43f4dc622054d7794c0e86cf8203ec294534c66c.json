{"sha": "43f4dc622054d7794c0e86cf8203ec294534c66c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZjRkYzYyMjA1NGQ3Nzk0YzBlODZjZjgyMDNlYzI5NDUzNGM2NmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-06T17:49:59Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-06T17:49:59Z"}, "message": "Fix some warnings", "tree": {"sha": "7572a6126600ea0c040bd34140d7580214610735", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7572a6126600ea0c040bd34140d7580214610735"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43f4dc622054d7794c0e86cf8203ec294534c66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43f4dc622054d7794c0e86cf8203ec294534c66c", "html_url": "https://github.com/rust-lang/rust/commit/43f4dc622054d7794c0e86cf8203ec294534c66c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43f4dc622054d7794c0e86cf8203ec294534c66c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "059b589407186dbf17f25ab0eaa81dddb5b125f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/059b589407186dbf17f25ab0eaa81dddb5b125f9", "html_url": "https://github.com/rust-lang/rust/commit/059b589407186dbf17f25ab0eaa81dddb5b125f9"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "d7fbb932240e210f46dfccdc704feda631a7f1fb", "filename": "example/example.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43f4dc622054d7794c0e86cf8203ec294534c66c/example%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f4dc622054d7794c0e86cf8203ec294534c66c/example%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fexample.rs?ref=43f4dc622054d7794c0e86cf8203ec294534c66c", "patch": "@@ -77,7 +77,7 @@ fn debug_tuple() -> DebugTuple {\n }\n \n fn size_of<T>() -> usize {\n-    unsafe { intrinsics::size_of::<T>() }\n+    intrinsics::size_of::<T>()\n }\n \n fn use_size_of() -> usize {\n@@ -93,10 +93,10 @@ unsafe fn use_copy_intrinsic_ref(src: *const u8, dst: *mut u8) {\n     copy2(src, dst, 1);\n }\n \n-const Abc: u8 = 6 * 7;\n+const ABC: u8 = 6 * 7;\n \n fn use_const() -> u8 {\n-    Abc\n+    ABC\n }\n \n pub fn call_closure_3arg() {\n@@ -120,7 +120,7 @@ impl<'a, 'b> FnOnce<(&'a &'b [u16],)> for IsNotEmpty {\n \n impl<'a, 'b> FnMut<(&'a &'b [u16],)> for IsNotEmpty {\n     #[inline]\n-    extern \"rust-call\" fn call_mut(&mut self, arg: (&'a &'b [u16],)) -> (u8, u8) {\n+    extern \"rust-call\" fn call_mut(&mut self, _arg: (&'a &'b [u16],)) -> (u8, u8) {\n         (0, 42)\n     }\n }"}, {"sha": "e486afdbaa0c9cda36ea94c08472892c39a8b785", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43f4dc622054d7794c0e86cf8203ec294534c66c/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f4dc622054d7794c0e86cf8203ec294534c66c/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=43f4dc622054d7794c0e86cf8203ec294534c66c", "patch": "@@ -103,8 +103,8 @@ struct Unique<T: ?Sized> {\n \n impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> {}\n \n-fn take_f32(f: f32) {}\n-fn take_unique(u: Unique<()>) {}\n+fn take_f32(_f: f32) {}\n+fn take_unique(_u: Unique<()>) {}\n \n fn main() {\n     take_unique(Unique {"}, {"sha": "a7a9c7a3306bd678a4e2001dc28fd63e670fa533", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43f4dc622054d7794c0e86cf8203ec294534c66c/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f4dc622054d7794c0e86cf8203ec294534c66c/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=43f4dc622054d7794c0e86cf8203ec294534c66c", "patch": "@@ -203,7 +203,7 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n             Ok(mut file) => {\n                 let target_triple: ::target_lexicon::Triple = self.tcx.sess.target.target.llvm_target.parse().unwrap();\n                 writeln!(file, \"test compile\").unwrap();\n-                writeln!(file, \"set is_pic\");\n+                writeln!(file, \"set is_pic\").unwrap();\n                 writeln!(file, \"target {}\", target_triple).unwrap();\n                 writeln!(file, \"\").unwrap();\n                 file.write(clif.as_bytes()).unwrap();"}]}