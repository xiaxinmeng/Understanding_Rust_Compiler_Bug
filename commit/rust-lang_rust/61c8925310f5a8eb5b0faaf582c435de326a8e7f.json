{"sha": "61c8925310f5a8eb5b0faaf582c435de326a8e7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYzg5MjUzMTBmNWE4ZWI1YjBmYWFmNTgyYzQzNWRlMzI2YThlN2Y=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-19T12:29:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T12:29:35Z"}, "message": "Rollup merge of #73352 - ehuss:bootstrap-metadata, r=Mark-Simulacrum\n\nSpeed up bootstrap a little.\n\nThe bootstrap script was calling `cargo metadata` 3 times (or 6 with `-v`). This is a very expensive operation, and this attempts to avoid the extra calls. On my system, a simple command like `./x.py test -h -v` goes from about 3 seconds to 0.4.\n\nAn overview of the changes:\n\n- Call `cargo metadata` only once with `--no-deps`. Optional dependencies are filtered in `in_tree_crates` (handling `profiler_builtins` and `rustc_codegen_llvm` which are driven by the config).\n- Remove a duplicate call to `metadata::build` when using `-v`. I'm not sure why it was there, it looks like a mistake or vestigial from previous behavior.\n- Remove check for `_shim`, I believe all the `_shim` crates are now gone.\n- Remove check for `rustc_` and `*san` for `test::Crate::should_run`, these are no longer dependencies in the `test` tree.\n- Use relative paths in `./x.py test -h -v` output.\n- Some code cleanup (remove unnecessary `find_compiler_crates`, etc.).\n- Show suite paths (`src/test/ui/...`) in `./x.py test -h -v` output.\n- Some doc comments.", "tree": {"sha": "227579b6a22580e046493bb93b2adb946f9db021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/227579b6a22580e046493bb93b2adb946f9db021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61c8925310f5a8eb5b0faaf582c435de326a8e7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7K+vCRBK7hj4Ov3rIwAAdHIIACcLeyRScoHmXI8jiR2ZfPWG\ne13w1vS9H93iMrTG3GRwJ2xx1VqZk4jzyU4LWqDGVY8ntr8ViqsNNMNB6xJUgsoH\nK50MIVHwjxl54j4IbMQoYFX0NCip+rCzgI42Wk/SAOEtH6/3tE2gXLwiBo8VrMmS\nf4hfhazESOCugIL4rEvdeV33pLbyBHxEXnzJ2CxAhjlpCKRzkaHD+uVE6Em7qSm2\npB/7FqzweD+LEthGwVieLx4hFsHfTap6s1nTKxZVklEk7AQEgeFAaPyy1WApBvzT\nj3tljAH0YS9G+ERenvoI4EqgL5ayqMds8GEjQhBift/IyIKgfUHJ7Ck6D1yWLPY=\n=Xd7t\n-----END PGP SIGNATURE-----\n", "payload": "tree 227579b6a22580e046493bb93b2adb946f9db021\nparent a59d164490d0011b92613f514fdeb76e5c15c068\nparent f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd\nauthor Ralf Jung <post@ralfj.de> 1592569775 +0200\ncommitter GitHub <noreply@github.com> 1592569775 +0200\n\nRollup merge of #73352 - ehuss:bootstrap-metadata, r=Mark-Simulacrum\n\nSpeed up bootstrap a little.\n\nThe bootstrap script was calling `cargo metadata` 3 times (or 6 with `-v`). This is a very expensive operation, and this attempts to avoid the extra calls. On my system, a simple command like `./x.py test -h -v` goes from about 3 seconds to 0.4.\n\nAn overview of the changes:\n\n- Call `cargo metadata` only once with `--no-deps`. Optional dependencies are filtered in `in_tree_crates` (handling `profiler_builtins` and `rustc_codegen_llvm` which are driven by the config).\n- Remove a duplicate call to `metadata::build` when using `-v`. I'm not sure why it was there, it looks like a mistake or vestigial from previous behavior.\n- Remove check for `_shim`, I believe all the `_shim` crates are now gone.\n- Remove check for `rustc_` and `*san` for `test::Crate::should_run`, these are no longer dependencies in the `test` tree.\n- Use relative paths in `./x.py test -h -v` output.\n- Some code cleanup (remove unnecessary `find_compiler_crates`, etc.).\n- Show suite paths (`src/test/ui/...`) in `./x.py test -h -v` output.\n- Some doc comments.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61c8925310f5a8eb5b0faaf582c435de326a8e7f", "html_url": "https://github.com/rust-lang/rust/commit/61c8925310f5a8eb5b0faaf582c435de326a8e7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61c8925310f5a8eb5b0faaf582c435de326a8e7f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59d164490d0011b92613f514fdeb76e5c15c068", "url": "https://api.github.com/repos/rust-lang/rust/commits/a59d164490d0011b92613f514fdeb76e5c15c068", "html_url": "https://github.com/rust-lang/rust/commit/a59d164490d0011b92613f514fdeb76e5c15c068"}, {"sha": "f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd", "html_url": "https://github.com/rust-lang/rust/commit/f17fd7b0e692c59075db58ac2e7ca3ac2d5e19bd"}], "stats": {"total": 176, "additions": 76, "deletions": 100}, "files": [{"sha": "58e4bef677efb56426746477c06c796606fda7b6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=61c8925310f5a8eb5b0faaf582c435de326a8e7f", "patch": "@@ -99,9 +99,21 @@ struct StepDescription {\n     name: &'static str,\n }\n \n+/// Collection of paths used to match a task rule.\n #[derive(Debug, Clone, PartialOrd, Ord, PartialEq, Eq)]\n pub enum PathSet {\n+    /// A collection of individual paths.\n+    ///\n+    /// These are generally matched as a path suffix. For example, a\n+    /// command-line value of `libstd` will match if `src/libstd` is in the\n+    /// set.\n     Set(BTreeSet<PathBuf>),\n+    /// A \"suite\" of paths.\n+    ///\n+    /// These can match as a path suffix (like `Set`), or as a prefix. For\n+    /// example, a command-line value of `src/test/ui/abi/variadic-ffi.rs`\n+    /// will match `src/test/ui`. A command-line value of `ui` would also\n+    /// match `src/test/ui`.\n     Suite(PathBuf),\n }\n \n@@ -251,21 +263,33 @@ impl<'a> ShouldRun<'a> {\n         self\n     }\n \n-    // Unlike `krate` this will create just one pathset. As such, it probably shouldn't actually\n-    // ever be used, but as we transition to having all rules properly handle passing krate(...) by\n-    // actually doing something different for every crate passed.\n+    /// Indicates it should run if the command-line selects the given crate or\n+    /// any of its (local) dependencies.\n+    ///\n+    /// Compared to `krate`, this treats the dependencies as aliases for the\n+    /// same job. Generally it is preferred to use `krate`, and treat each\n+    /// individual path separately. For example `./x.py test src/liballoc`\n+    /// (which uses `krate`) will test just `liballoc`. However, `./x.py check\n+    /// src/liballoc` (which uses `all_krates`) will check all of `libtest`.\n+    /// `all_krates` should probably be removed at some point.\n     pub fn all_krates(mut self, name: &str) -> Self {\n         let mut set = BTreeSet::new();\n         for krate in self.builder.in_tree_crates(name) {\n-            set.insert(PathBuf::from(&krate.path));\n+            let path = krate.local_path(self.builder);\n+            set.insert(path);\n         }\n         self.paths.insert(PathSet::Set(set));\n         self\n     }\n \n+    /// Indicates it should run if the command-line selects the given crate or\n+    /// any of its (local) dependencies.\n+    ///\n+    /// `make_run` will be called separately for each matching command-line path.\n     pub fn krate(mut self, name: &str) -> Self {\n         for krate in self.builder.in_tree_crates(name) {\n-            self.paths.insert(PathSet::one(&krate.path));\n+            let path = krate.local_path(self.builder);\n+            self.paths.insert(PathSet::one(path));\n         }\n         self\n     }\n@@ -488,13 +512,19 @@ impl<'a> Builder<'a> {\n             should_run = (desc.should_run)(should_run);\n         }\n         let mut help = String::from(\"Available paths:\\n\");\n+        let mut add_path = |path: &Path| {\n+            help.push_str(&format!(\"    ./x.py {} {}\\n\", subcommand, path.display()));\n+        };\n         for pathset in should_run.paths {\n-            if let PathSet::Set(set) = pathset {\n-                set.iter().for_each(|path| {\n-                    help.push_str(\n-                        format!(\"    ./x.py {} {}\\n\", subcommand, path.display()).as_str(),\n-                    )\n-                })\n+            match pathset {\n+                PathSet::Set(set) => {\n+                    for path in set {\n+                        add_path(&path);\n+                    }\n+                }\n+                PathSet::Suite(path) => {\n+                    add_path(&path.join(\"...\"));\n+                }\n             }\n         }\n         Some(help)"}, {"sha": "6d7fb7acfcb04defd4be6336b5cb44839804d29f", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=61c8925310f5a8eb5b0faaf582c435de326a8e7f", "patch": "@@ -548,8 +548,8 @@ impl Step for Rustc {\n         // Find dependencies for top level crates.\n         let mut compiler_crates = HashSet::new();\n         for root_crate in &[\"rustc_driver\", \"rustc_codegen_llvm\", \"rustc_codegen_ssa\"] {\n-            let interned_root_crate = INTERNER.intern_str(root_crate);\n-            find_compiler_crates(builder, &interned_root_crate, &mut compiler_crates);\n+            compiler_crates\n+                .extend(builder.in_tree_crates(root_crate).into_iter().map(|krate| krate.name));\n         }\n \n         for krate in &compiler_crates {\n@@ -564,22 +564,6 @@ impl Step for Rustc {\n     }\n }\n \n-fn find_compiler_crates(\n-    builder: &Builder<'_>,\n-    name: &Interned<String>,\n-    crates: &mut HashSet<Interned<String>>,\n-) {\n-    // Add current crate.\n-    crates.insert(*name);\n-\n-    // Look for dependencies.\n-    for dep in builder.crates.get(name).unwrap().deps.iter() {\n-        if builder.crates.get(dep).unwrap().is_local(builder) {\n-            find_compiler_crates(builder, dep, crates);\n-        }\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustdoc {\n     stage: u32,"}, {"sha": "f477c752933856e0ffd07747f963dcf20fff026c", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=61c8925310f5a8eb5b0faaf582c435de326a8e7f", "patch": "@@ -10,12 +10,10 @@ use std::process;\n use getopts::Options;\n \n use crate::builder::Builder;\n+use crate::cache::{Interned, INTERNER};\n use crate::config::Config;\n-use crate::metadata;\n use crate::{Build, DocTests};\n \n-use crate::cache::{Interned, INTERNER};\n-\n /// Deserialized version of all flags for this compile.\n pub struct Flags {\n     pub verbose: usize, // number of -v args; each extra -v after the first is passed to Cargo\n@@ -443,8 +441,7 @@ Arguments:\n         // All subcommands except `clean` can have an optional \"Available paths\" section\n         if matches.opt_present(\"verbose\") {\n             let config = Config::parse(&[\"build\".to_string()]);\n-            let mut build = Build::new(config);\n-            metadata::build(&mut build);\n+            let build = Build::new(config);\n \n             let maybe_rules_help = Builder::get_help(&build, subcommand.as_str());\n             extra_help.push_str(maybe_rules_help.unwrap_or_default().as_str());"}, {"sha": "e7aeb08643c297c4c89d8b6c5ed2bb6f0abe5215", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=61c8925310f5a8eb5b0faaf582c435de326a8e7f", "patch": "@@ -270,12 +270,7 @@ struct Crate {\n }\n \n impl Crate {\n-    fn is_local(&self, build: &Build) -> bool {\n-        self.path.starts_with(&build.config.src) && !self.path.to_string_lossy().ends_with(\"_shim\")\n-    }\n-\n     fn local_path(&self, build: &Build) -> PathBuf {\n-        assert!(self.is_local(build));\n         self.path.strip_prefix(&build.config.src).unwrap().into()\n     }\n }\n@@ -1090,17 +1085,29 @@ impl Build {\n         }\n     }\n \n+    /// Returns a Vec of all the dependencies of the given root crate,\n+    /// including transitive dependencies and the root itself. Only includes\n+    /// \"local\" crates (those in the local source tree, not from a registry).\n     fn in_tree_crates(&self, root: &str) -> Vec<&Crate> {\n         let mut ret = Vec::new();\n         let mut list = vec![INTERNER.intern_str(root)];\n         let mut visited = HashSet::new();\n         while let Some(krate) = list.pop() {\n             let krate = &self.crates[&krate];\n-            if krate.is_local(self) {\n-                ret.push(krate);\n-            }\n+            ret.push(krate);\n             for dep in &krate.deps {\n-                if visited.insert(dep) && dep != \"build_helper\" {\n+                // Don't include optional deps if their features are not\n+                // enabled. Ideally this would be computed from `cargo\n+                // metadata --features \u2026`, but that is somewhat slow. Just\n+                // skip `build_helper` since there aren't any operations we\n+                // want to perform on it. In the future, we may want to\n+                // consider just filtering all build and dev dependencies in\n+                // metadata::build.\n+                if visited.insert(dep)\n+                    && dep != \"build_helper\"\n+                    && (dep != \"profiler_builtins\" || self.config.profiler)\n+                    && (dep != \"rustc_codegen_llvm\" || self.config.llvm_enabled())\n+                {\n                     list.push(*dep);\n                 }\n             }"}, {"sha": "a38391c7b88f28f31125681682e41bc4441e1d76", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 13, "deletions": 49, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=61c8925310f5a8eb5b0faaf582c435de326a8e7f", "patch": "@@ -1,5 +1,3 @@\n-use std::collections::HashMap;\n-use std::collections::HashSet;\n use std::path::PathBuf;\n use std::process::Command;\n \n@@ -12,7 +10,6 @@ use crate::{Build, Crate};\n #[derive(Deserialize)]\n struct Output {\n     packages: Vec<Package>,\n-    resolve: Resolve,\n }\n \n #[derive(Deserialize)]\n@@ -21,72 +18,39 @@ struct Package {\n     name: String,\n     source: Option<String>,\n     manifest_path: String,\n+    dependencies: Vec<Dependency>,\n }\n \n #[derive(Deserialize)]\n-struct Resolve {\n-    nodes: Vec<ResolveNode>,\n-}\n-\n-#[derive(Deserialize)]\n-struct ResolveNode {\n-    id: String,\n-    dependencies: Vec<String>,\n+struct Dependency {\n+    name: String,\n+    source: Option<String>,\n }\n \n pub fn build(build: &mut Build) {\n-    let mut resolves = Vec::new();\n-    build_krate(&build.std_features(), build, &mut resolves, \"src/libstd\");\n-    build_krate(\"\", build, &mut resolves, \"src/libtest\");\n-    build_krate(&build.rustc_features(), build, &mut resolves, \"src/rustc\");\n-\n-    let mut id2name = HashMap::with_capacity(build.crates.len());\n-    for (name, krate) in build.crates.iter() {\n-        id2name.insert(krate.id.clone(), name.clone());\n-    }\n-\n-    for node in resolves {\n-        let name = match id2name.get(&node.id) {\n-            Some(name) => name,\n-            None => continue,\n-        };\n-\n-        let krate = build.crates.get_mut(name).unwrap();\n-        for dep in node.dependencies.iter() {\n-            let dep = match id2name.get(dep) {\n-                Some(dep) => dep,\n-                None => continue,\n-            };\n-            krate.deps.insert(*dep);\n-        }\n-    }\n-}\n-\n-fn build_krate(features: &str, build: &mut Build, resolves: &mut Vec<ResolveNode>, krate: &str) {\n     // Run `cargo metadata` to figure out what crates we're testing.\n-    //\n-    // Down below we're going to call `cargo test`, but to test the right set\n-    // of packages we're going to have to know what `-p` arguments to pass it\n-    // to know what crates to test. Here we run `cargo metadata` to learn about\n-    // the dependency graph and what `-p` arguments there are.\n     let mut cargo = Command::new(&build.initial_cargo);\n     cargo\n         .arg(\"metadata\")\n         .arg(\"--format-version\")\n         .arg(\"1\")\n-        .arg(\"--features\")\n-        .arg(features)\n+        .arg(\"--no-deps\")\n         .arg(\"--manifest-path\")\n-        .arg(build.src.join(krate).join(\"Cargo.toml\"));\n+        .arg(build.src.join(\"Cargo.toml\"));\n     let output = output(&mut cargo);\n     let output: Output = serde_json::from_str(&output).unwrap();\n     for package in output.packages {\n         if package.source.is_none() {\n             let name = INTERNER.intern_string(package.name);\n             let mut path = PathBuf::from(package.manifest_path);\n             path.pop();\n-            build.crates.insert(name, Crate { name, id: package.id, deps: HashSet::new(), path });\n+            let deps = package\n+                .dependencies\n+                .into_iter()\n+                .filter(|dep| dep.source.is_none())\n+                .map(|dep| INTERNER.intern_string(dep.name))\n+                .collect();\n+            build.crates.insert(name, Crate { name, id: package.id, deps, path });\n         }\n     }\n-    resolves.extend(output.resolve.nodes);\n }"}, {"sha": "8a37a70d60d9a4fffa35f0a7fa3ea7261f1e7a27", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c8925310f5a8eb5b0faaf582c435de326a8e7f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=61c8925310f5a8eb5b0faaf582c435de326a8e7f", "patch": "@@ -1648,14 +1648,8 @@ impl Step for Crate {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n-    fn should_run(mut run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        let builder = run.builder;\n-        for krate in run.builder.in_tree_crates(\"test\") {\n-            if !(krate.name.starts_with(\"rustc_\") && krate.name.ends_with(\"san\")) {\n-                run = run.path(krate.local_path(&builder).to_str().unwrap());\n-            }\n-        }\n-        run\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.krate(\"test\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}]}