{"sha": "78108235d5182a6453a8eaa5a8ad5f2826f35f55", "node_id": "C_kwDOAAsO6NoAKDc4MTA4MjM1ZDUxODJhNjQ1M2E4ZWFhNWE4YWQ1ZjI4MjZmMzVmNTU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-29T13:01:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-29T13:01:49Z"}, "message": "Merge #10657\n\n10657: feat: Make unqualified derive attributes flyimportable r=Veykril a=Veykril\n\n![UuwpKODbpB](https://user-images.githubusercontent.com/3757771/139436613-1e6eb8fd-f591-4fca-9383-ff7408ee9b18.gif)\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10052\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "d58cb6b53574eca5732d068de4241fde30c00e01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d58cb6b53574eca5732d068de4241fde30c00e01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78108235d5182a6453a8eaa5a8ad5f2826f35f55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhe/C9CRBK7hj4Ov3rIwAAcBwIACa572OJA/lLYBh9ORhcvyJ5\n3+Nx0YfI3P5KyPg2qa16ydsp24wcYeXSWYQQJccUi/dUU8lBzpw4ktlLZBD5bqxk\nNU2a/rH430Zdm9LXi87cuyI06ruJ4hbrk2s2GXlNlyTPIreGyrym3KVyo2iMeGlk\nUuiedxCnKDJWvx02rz+xwf2BCb2ITv/6K9Zfi8bgYe7bjmUs4474LIid3Q/tiUWi\nozsww4OJFpkrexW9DFgGxfVjluAesqrk90vDjFnEJTHbrn+FnGEuTvh/P8k2dF5J\ntA5racUcXEB8ob6VJHEvwvNOrEx6hJrbKZmuiEmvVYmHoLNxnyi8JmLB9lWsiMg=\n=YUQQ\n-----END PGP SIGNATURE-----\n", "payload": "tree d58cb6b53574eca5732d068de4241fde30c00e01\nparent 057558b756c201076056bd44bba95eaef17224c2\nparent ebd63ec1cf7f04460481adefa771ddf291cc9ab2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635512509 +0000\ncommitter GitHub <noreply@github.com> 1635512509 +0000\n\nMerge #10657\n\n10657: feat: Make unqualified derive attributes flyimportable r=Veykril a=Veykril\n\n![UuwpKODbpB](https://user-images.githubusercontent.com/3757771/139436613-1e6eb8fd-f591-4fca-9383-ff7408ee9b18.gif)\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10052\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78108235d5182a6453a8eaa5a8ad5f2826f35f55", "html_url": "https://github.com/rust-lang/rust/commit/78108235d5182a6453a8eaa5a8ad5f2826f35f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78108235d5182a6453a8eaa5a8ad5f2826f35f55/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "057558b756c201076056bd44bba95eaef17224c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/057558b756c201076056bd44bba95eaef17224c2", "html_url": "https://github.com/rust-lang/rust/commit/057558b756c201076056bd44bba95eaef17224c2"}, {"sha": "ebd63ec1cf7f04460481adefa771ddf291cc9ab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebd63ec1cf7f04460481adefa771ddf291cc9ab2", "html_url": "https://github.com/rust-lang/rust/commit/ebd63ec1cf7f04460481adefa771ddf291cc9ab2"}], "stats": {"total": 155, "additions": 124, "deletions": 31}, "files": [{"sha": "eff2545268d702790e2fa49767a30dd852530a99", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78108235d5182a6453a8eaa5a8ad5f2826f35f55/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/78108235d5182a6453a8eaa5a8ad5f2826f35f55/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=78108235d5182a6453a8eaa5a8ad5f2826f35f55", "patch": "@@ -99,6 +99,7 @@ dependencies = [\n  \"profile\",\n  \"rustc-hash\",\n  \"salsa\",\n+ \"stdx\",\n  \"syntax\",\n  \"test_utils\",\n  \"tt\","}, {"sha": "5ba8255ddd82d9ac164416d14b9243ec186abf1c", "filename": "crates/base_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fbase_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fbase_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2FCargo.toml?ref=78108235d5182a6453a8eaa5a8ad5f2826f35f55", "patch": "@@ -14,6 +14,7 @@ salsa = \"0.17.0-pre.2\"\n rustc-hash = \"1.1.0\"\n \n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n tt = { path = \"../tt\", version = \"0.0.0\" }"}, {"sha": "84e295e0146d89b370bedee96fcfff9792056dcd", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=78108235d5182a6453a8eaa5a8ad5f2826f35f55", "patch": "@@ -270,7 +270,7 @@ fn test_proc_macros(proc_macros: &[String]) -> (Vec<ProcMacro>, String) {\n pub fn identity(_attr: TokenStream, item: TokenStream) -> TokenStream {\n     item\n }\n-#[proc_macro_derive(derive_identity)]\n+#[proc_macro_derive(DeriveIdentity)]\n pub fn derive_identity(item: TokenStream) -> TokenStream {\n     item\n }\n@@ -290,7 +290,7 @@ pub fn mirror(input: TokenStream) -> TokenStream {\n             expander: Arc::new(IdentityProcMacroExpander),\n         },\n         ProcMacro {\n-            name: \"derive_identity\".into(),\n+            name: \"DeriveIdentity\".into(),\n             kind: crate::ProcMacroKind::CustomDerive,\n             expander: Arc::new(IdentityProcMacroExpander),\n         },\n@@ -306,7 +306,7 @@ pub fn mirror(input: TokenStream) -> TokenStream {\n         },\n     ]\n     .into_iter()\n-    .filter(|pm| proc_macros.iter().any(|name| name == pm.name))\n+    .filter(|pm| proc_macros.iter().any(|name| name == &stdx::to_lower_snake_case(&pm.name)))\n     .collect();\n     (proc_macros, source.into())\n }"}, {"sha": "9c6531da2040c212799b50a6a4a93ae932ed8a57", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=78108235d5182a6453a8eaa5a8ad5f2826f35f55", "patch": "@@ -1623,7 +1623,12 @@ impl MacroDef {\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         match self.source(db)?.value {\n             Either::Left(it) => it.name().map(|it| it.as_name()),\n-            Either::Right(it) => it.name().map(|it| it.as_name()),\n+            Either::Right(_) => {\n+                let krate = self.id.krate;\n+                let def_map = db.crate_def_map(krate);\n+                let (_, name) = def_map.exported_proc_macros().find(|&(id, _)| id == self.id)?;\n+                Some(name)\n+            }\n         }\n     }\n "}, {"sha": "81f58fa2cef637ed13eb0337f33d324d2e52a974", "filename": "crates/hir_def/src/macro_expansion_tests/proc_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs?ref=78108235d5182a6453a8eaa5a8ad5f2826f35f55", "patch": "@@ -33,15 +33,15 @@ fn derive_censoring() {\n //- proc_macros: derive_identity\n #[attr1]\n #[derive(Foo)]\n-#[derive(proc_macros::derive_identity)]\n+#[derive(proc_macros::DeriveIdentity)]\n #[derive(Bar)]\n #[attr2]\n struct S;\n \"#,\n         expect![[r##\"\n #[attr1]\n #[derive(Foo)]\n-#[derive(proc_macros::derive_identity)]\n+#[derive(proc_macros::DeriveIdentity)]\n #[derive(Bar)]\n #[attr2]\n struct S;"}, {"sha": "d0b8248a34239662ef37efb8451d22ca66cff631", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=78108235d5182a6453a8eaa5a8ad5f2826f35f55", "patch": "@@ -103,7 +103,7 @@ pub struct DefMap {\n     /// Side table with additional proc. macro info, for use by name resolution in downstream\n     /// crates.\n     ///\n-    /// (the primary purpose is to resolve derive helpers)\n+    /// (the primary purpose is to resolve derive helpers and fetch a proc-macros name)\n     exported_proc_macros: FxHashMap<MacroDefId, ProcMacroDef>,\n \n     edition: Edition,\n@@ -279,7 +279,9 @@ impl DefMap {\n     pub fn modules(&self) -> impl Iterator<Item = (LocalModuleId, &ModuleData)> + '_ {\n         self.modules.iter()\n     }\n-\n+    pub fn exported_proc_macros(&self) -> impl Iterator<Item = (MacroDefId, Name)> + '_ {\n+        self.exported_proc_macros.iter().map(|(id, def)| (*id, def.name.clone()))\n+    }\n     pub fn root(&self) -> LocalModuleId {\n         self.root\n     }"}, {"sha": "0225ab425fcbbeb2b31f96b4162ed7e11948cca2", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=78108235d5182a6453a8eaa5a8ad5f2826f35f55", "patch": "@@ -63,8 +63,8 @@ impl Name {\n     /// Ideally, we want a `gensym` semantics for missing names -- each missing\n     /// name is equal only to itself. It's not clear how to implement this in\n     /// salsa though, so we punt on that bit for a moment.\n-    pub fn missing() -> Name {\n-        Name::new_text(\"[missing name]\".into())\n+    pub const fn missing() -> Name {\n+        Name::new_inline(\"[missing name]\")\n     }\n \n     /// Returns the tuple index this name represents if it is a tuple field."}, {"sha": "5c08d12ef2410f3e56a508d91b0bb7dbb2981eba", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=78108235d5182a6453a8eaa5a8ad5f2826f35f55", "patch": "@@ -1,14 +1,15 @@\n //! Completion for derives\n use hir::{HasAttrs, MacroDef, MacroKind};\n-use ide_db::helpers::FamousDefs;\n+use ide_db::helpers::{import_assets::ImportAssets, insert_use::ImportScope, FamousDefs};\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n-use syntax::ast;\n+use syntax::{ast, SyntaxKind};\n \n use crate::{\n+    completions::flyimport::compute_fuzzy_completion_order_key,\n     context::CompletionContext,\n     item::{CompletionItem, CompletionItemKind},\n-    Completions,\n+    Completions, ImportEdit,\n };\n \n pub(super) fn complete_derive(\n@@ -66,6 +67,8 @@ pub(super) fn complete_derive(\n         }\n         item.add_to(acc);\n     }\n+\n+    flyimport_attribute(ctx, acc);\n }\n \n fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, MacroDef)> {\n@@ -80,6 +83,50 @@ fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, MacroDef)> {\n     result\n }\n \n+fn flyimport_attribute(ctx: &CompletionContext, acc: &mut Completions) -> Option<()> {\n+    if ctx.token.kind() != SyntaxKind::IDENT {\n+        return None;\n+    };\n+    let potential_import_name = ctx.token.to_string();\n+    let module = ctx.scope.module()?;\n+    let parent = ctx.token.parent()?;\n+    let user_input_lowercased = potential_import_name.to_lowercase();\n+    let import_assets = ImportAssets::for_fuzzy_path(\n+        module,\n+        None,\n+        potential_import_name,\n+        &ctx.sema,\n+        parent.clone(),\n+    )?;\n+    let import_scope = ImportScope::find_insert_use_container_with_macros(&parent, &ctx.sema)?;\n+    acc.add_all(\n+        import_assets\n+            .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind)\n+            .into_iter()\n+            .filter_map(|import| match import.original_item {\n+                hir::ItemInNs::Macros(mac) => Some((import, mac)),\n+                _ => None,\n+            })\n+            .filter(|&(_, mac)| !ctx.is_item_hidden(&hir::ItemInNs::Macros(mac)))\n+            .sorted_by_key(|(import, _)| {\n+                compute_fuzzy_completion_order_key(&import.import_path, &user_input_lowercased)\n+            })\n+            .filter_map(|(import, mac)| {\n+                let mut item = CompletionItem::new(\n+                    CompletionItemKind::Attribute,\n+                    ctx.source_range(),\n+                    mac.name(ctx.db)?.to_string(),\n+                );\n+                item.add_import(ImportEdit { import, scope: import_scope.clone() });\n+                if let Some(docs) = mac.docs(ctx.db) {\n+                    item.documentation(docs);\n+                }\n+                Some(item.build())\n+            }),\n+    );\n+    Some(())\n+}\n+\n struct DeriveDependencies {\n     label: &'static str,\n     dependencies: &'static [&'static str],"}, {"sha": "a5c134714baa6a93cfa735a9f9147c9445e29ab7", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=78108235d5182a6453a8eaa5a8ad5f2826f35f55", "patch": "@@ -125,12 +125,12 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n         }\n     };\n \n-    let _p = profile::span(\"import_on_the_fly\").detail(|| potential_import_name.to_string());\n+    let _p = profile::span(\"import_on_the_fly\").detail(|| potential_import_name.clone());\n \n     let user_input_lowercased = potential_import_name.to_lowercase();\n     let import_assets = import_assets(ctx, potential_import_name)?;\n     let import_scope = ImportScope::find_insert_use_container_with_macros(\n-        position_for_import(ctx, Some(import_assets.import_candidate()))?,\n+        &position_for_import(ctx, Some(import_assets.import_candidate()))?,\n         &ctx.sema,\n     )?;\n \n@@ -158,21 +158,19 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     Some(())\n }\n \n-pub(crate) fn position_for_import<'a>(\n-    ctx: &'a CompletionContext,\n+pub(crate) fn position_for_import(\n+    ctx: &CompletionContext,\n     import_candidate: Option<&ImportCandidate>,\n-) -> Option<&'a SyntaxNode> {\n-    Some(match import_candidate {\n-        Some(ImportCandidate::Path(_)) => ctx.name_syntax.as_ref()?.syntax(),\n-        Some(ImportCandidate::TraitAssocItem(_)) => ctx.path_qual()?.syntax(),\n-        Some(ImportCandidate::TraitMethod(_)) => ctx.dot_receiver()?.syntax(),\n-        None => ctx\n-            .name_syntax\n-            .as_ref()\n-            .map(|name_ref| name_ref.syntax())\n-            .or_else(|| ctx.path_qual().map(|path| path.syntax()))\n-            .or_else(|| ctx.dot_receiver().map(|expr| expr.syntax()))?,\n-    })\n+) -> Option<SyntaxNode> {\n+    Some(\n+        match import_candidate {\n+            Some(ImportCandidate::Path(_)) => ctx.name_syntax.as_ref()?.syntax(),\n+            Some(ImportCandidate::TraitAssocItem(_)) => ctx.path_qual()?.syntax(),\n+            Some(ImportCandidate::TraitMethod(_)) => ctx.dot_receiver()?.syntax(),\n+            None => return ctx.original_token.parent(),\n+        }\n+        .clone(),\n+    )\n }\n \n fn import_assets(ctx: &CompletionContext, fuzzy_name: String) -> Option<ImportAssets> {\n@@ -205,7 +203,7 @@ fn import_assets(ctx: &CompletionContext, fuzzy_name: String) -> Option<ImportAs\n     }\n }\n \n-fn compute_fuzzy_completion_order_key(\n+pub(crate) fn compute_fuzzy_completion_order_key(\n     proposed_mod_path: &hir::ModPath,\n     user_input_lowercased: &str,\n ) -> usize {"}, {"sha": "463744f22afdebae988c2ded53d42f9d09a8f2a4", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=78108235d5182a6453a8eaa5a8ad5f2826f35f55", "patch": "@@ -182,7 +182,7 @@ pub fn resolve_completion_edits(\n ) -> Option<Vec<TextEdit>> {\n     let _p = profile::span(\"resolve_completion_edits\");\n     let ctx = CompletionContext::new(db, position, config)?;\n-    let position_for_import = position_for_import(&ctx, None)?;\n+    let position_for_import = &position_for_import(&ctx, None)?;\n     let scope = ImportScope::find_insert_use_container_with_macros(position_for_import, &ctx.sema)?;\n \n     let current_module = ctx.sema.scope(position_for_import).module()?;"}, {"sha": "45979d4828cd1f3acec28ed1bb5dc34aed9d671c", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78108235d5182a6453a8eaa5a8ad5f2826f35f55/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=78108235d5182a6453a8eaa5a8ad5f2826f35f55", "patch": "@@ -640,6 +640,45 @@ mod derive {\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn derive_flyimport() {\n+        check_derive(\n+            r#\"\n+//- proc_macros: derive_identity\n+#[derive(der$0)] struct Test;\n+\"#,\n+            expect![[r#\"\n+                at DeriveIdentity (use proc_macros::DeriveIdentity)\n+            \"#]],\n+        );\n+        check_derive(\n+            r#\"\n+//- proc_macros: derive_identity\n+use proc_macros::DeriveIdentity;\n+#[derive(der$0)] struct Test;\n+\"#,\n+            expect![[r#\"\n+                at DeriveIdentity\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn derive_flyimport_edit() {\n+        check_edit(\n+            \"DeriveIdentity\",\n+            r#\"\n+//- proc_macros: derive_identity\n+#[derive(der$0)] struct Test;\n+\"#,\n+            r#\"\n+use proc_macros::DeriveIdentity;\n+\n+#[derive(DeriveIdentity)] struct Test;\n+\"#,\n+        );\n+    }\n }\n \n mod lint {"}]}