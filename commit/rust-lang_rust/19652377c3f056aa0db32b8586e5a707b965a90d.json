{"sha": "19652377c3f056aa0db32b8586e5a707b965a90d", "node_id": "C_kwDOAAsO6NoAKDE5NjUyMzc3YzNmMDU2YWEwZGIzMmI4NTg2ZTVhNzA3Yjk2NWE5MGQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-07T14:58:40Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-13T10:17:28Z"}, "message": "Iterate ReferencePropagation to fixpoint.", "tree": {"sha": "1e68400801debbf1d36da6817ad501678033fe3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e68400801debbf1d36da6817ad501678033fe3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19652377c3f056aa0db32b8586e5a707b965a90d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19652377c3f056aa0db32b8586e5a707b965a90d", "html_url": "https://github.com/rust-lang/rust/commit/19652377c3f056aa0db32b8586e5a707b965a90d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19652377c3f056aa0db32b8586e5a707b965a90d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ef27759442b84c90af08dba348611b04d10654", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ef27759442b84c90af08dba348611b04d10654", "html_url": "https://github.com/rust-lang/rust/commit/25ef27759442b84c90af08dba348611b04d10654"}], "stats": {"total": 1201, "additions": 801, "deletions": 400}, "files": [{"sha": "b0f893939895497e48b537513e1cac9257205b05", "filename": "compiler/rustc_mir_transform/src/ref_prop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -77,11 +77,11 @@ impl<'tcx> MirPass<'tcx> for ReferencePropagation {\n     #[instrument(level = \"trace\", skip(self, tcx, body))]\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         debug!(def_id = ?body.source.def_id());\n-        propagate_ssa(tcx, body);\n+        while propagate_ssa(tcx, body) {}\n     }\n }\n \n-fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n     let ssa = SsaLocals::new(body);\n \n     let mut replacer = compute_replacement(tcx, body, &ssa);\n@@ -94,6 +94,8 @@ fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     if replacer.any_replacement {\n         crate::simplify::remove_unused_definitions(body);\n     }\n+\n+    replacer.any_replacement\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]"}, {"sha": "883a04171df74cecdd7308f163557059481b9bad", "filename": "tests/mir-opt/reference_prop.debuginfo.ReferencePropagation.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -28,7 +28,7 @@\n               let _5: &u8;                 // in scope 2 at $DIR/reference_prop.rs:+7:9: +7:17\n               scope 3 {\n -                 debug reborrow => _5;    // in scope 3 at $DIR/reference_prop.rs:+7:9: +7:17\n-+                 debug reborrow => _1;    // in scope 3 at $DIR/reference_prop.rs:+7:9: +7:17\n++                 debug reborrow => &_2;   // in scope 3 at $DIR/reference_prop.rs:+7:9: +7:17\n                   let _9: &i32;            // in scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n                   let mut _22: &std::option::Option<i32>; // in scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n                   scope 4 {\n@@ -50,14 +50,14 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+3:9: +3:19\n+-         StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+3:9: +3:19\n           StorageLive(_2);                 // scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n           _2 = const 5_u8;                 // scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n-          _1 = &mut _2;                    // scope 0 at $DIR/reference_prop.rs:+3:22: +3:31\n+-         _1 = &mut _2;                    // scope 0 at $DIR/reference_prop.rs:+3:22: +3:31\n -         StorageLive(_3);                 // scope 1 at $DIR/reference_prop.rs:+4:9: +4:14\n           _23 = const _;                   // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:463:17: 463:24\n+                                           // + span: $DIR/reference_prop.rs:535:17: 535:24\n                                            // + literal: Const { ty: &T, val: Unevaluated(debuginfo, [], Some(promoted[2])) }\n -         _3 = &((*_23).0: u8);            // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n -         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:9: +7:17\n@@ -73,7 +73,7 @@\n -         StorageLive(_9);                 // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n           _22 = const _;                   // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:470:14: 470:31\n+                                           // + span: $DIR/reference_prop.rs:542:14: 542:31\n                                            // + literal: Const { ty: &Option<i32>, val: Unevaluated(debuginfo, [], Some(promoted[1])) }\n -         _9 = &(((*_22) as Some).0: i32); // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n -         _6 = const ();                   // scope 4 at $DIR/reference_prop.rs:+11:36: +11:38\n@@ -98,14 +98,14 @@\n           StorageLive(_12);                // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n           _21 = const _;                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:475:83: 475:90\n+                                           // + span: $DIR/reference_prop.rs:547:83: 547:90\n                                            // + literal: Const { ty: &[i32; 10], val: Unevaluated(debuginfo, [], Some(promoted[0])) }\n           _12 = &(*_21);                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n           StorageLive(_14);                // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n           _14 = RangeFull;                 // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n           _11 = <[i32; 10] as Index<RangeFull>>::index(move _12, move _14) -> bb5; // scope 5 at $DIR/reference_prop.rs:+16:83: +16:94\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:475:83: 475:94\n+                                           // + span: $DIR/reference_prop.rs:547:83: 547:94\n                                            // + literal: Const { ty: for<'a> fn(&'a [i32; 10], RangeFull) -> &'a <[i32; 10] as Index<RangeFull>>::Output {<[i32; 10] as Index<RangeFull>>::index}, val: Value(<ZST>) }\n       }\n   \n@@ -142,7 +142,7 @@\n -         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+18:1: +18:2\n -         StorageDead(_3);                 // scope 1 at $DIR/reference_prop.rs:+18:1: +18:2\n           StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n-          StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n           StorageDead(_11);                // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n           StorageDead(_10);                // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n           return;                          // scope 0 at $DIR/reference_prop.rs:+18:2: +18:2"}, {"sha": "e158f64e9c3cfb439e8b099114417e16dbd8e790", "filename": "tests/mir-opt/reference_prop.dominate_storage.ReferencePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -24,7 +24,7 @@\n           _5 = (*_2);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_5) -> bb3;   // scope 0 at $DIR/reference_prop.rs:+16:13: +16:38\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:383:28: 383:34\n+                                           // + span: $DIR/reference_prop.rs:455:28: 455:34\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "38ab16cedb7cec251f31bda1d2bed62b4f2c5def", "filename": "tests/mir-opt/reference_prop.maybe_dead.ReferencePropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -29,23 +29,23 @@\n           StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+21:13: +21:27\n           _0 = opaque::<i32>(_6) -> bb2;   // scope 0 at $DIR/reference_prop.rs:+22:13: +22:38\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:417:28: 417:34\n+                                           // + span: $DIR/reference_prop.rs:489:28: 489:34\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _7 = (*_4);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_7) -> bb3;   // scope 0 at $DIR/reference_prop.rs:+27:13: +27:38\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:422:28: 422:34\n+                                           // + span: $DIR/reference_prop.rs:494:28: 494:34\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n           _8 = (*_5);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_8) -> bb4;   // scope 0 at $DIR/reference_prop.rs:+33:13: +33:43\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:428:33: 428:39\n+                                           // + span: $DIR/reference_prop.rs:500:33: 500:39\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "6e45178687068950f70581d4ae80f49e404ece65", "filename": "tests/mir-opt/reference_prop.multiple_storage.ReferencePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -16,7 +16,7 @@\n           _3 = (*_2);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_3) -> bb1;   // scope 0 at $DIR/reference_prop.rs:+14:13: +14:43\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:357:33: 357:39\n+                                           // + span: $DIR/reference_prop.rs:429:33: 429:39\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "d99e110359f7d1cc27de933ea391adcf281c463c", "filename": "tests/mir-opt/reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -18,11 +18,11 @@\n               let _3: *mut i32;            // in scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n               scope 3 {\n -                 debug xraw => _3;        // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n-+                 debug xraw => _4;        // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n++                 debug xraw => &_1;       // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n                   let _6: &i32;            // in scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n                   scope 4 {\n -                     debug xshr => _6;    // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n-+                     debug xshr => _2;    // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n++                     debug xshr => &_1;   // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n                       let _7: i32;         // in scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n                       scope 5 {\n                           debug a => _7;   // in scope 5 at $DIR/reference_prop.rs:+6:9: +6:10\n@@ -38,7 +38,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:14\n           _1 = const 2_i32;                // scope 0 at $DIR/reference_prop.rs:+1:17: +1:18\n -         StorageLive(_2);                 // scope 1 at $DIR/reference_prop.rs:+2:9: +2:13\n-          _2 = &mut _1;                    // scope 1 at $DIR/reference_prop.rs:+2:16: +2:22\n+-         _2 = &mut _1;                    // scope 1 at $DIR/reference_prop.rs:+2:16: +2:22\n -         StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n -         StorageLive(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n -         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n@@ -49,7 +49,6 @@\n -         StorageDead(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n -         StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n -         _6 = &(*_2);                     // scope 3 at $DIR/reference_prop.rs:+4:16: +4:22\n-+         _4 = &raw mut _1;                // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n           StorageLive(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n -         _7 = (*_6);                      // scope 4 at $DIR/reference_prop.rs:+6:13: +6:18\n -         StorageLive(_8);                 // scope 5 at $DIR/reference_prop.rs:+7:5: +7:26"}, {"sha": "7b31ee695cecc54575cc1133f4691c6dd4f440d5", "filename": "tests/mir-opt/reference_prop.reference_propagation.ReferencePropagation.diff", "status": "modified", "additions": 128, "deletions": 30, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -35,11 +35,19 @@\n       let _48: &T;                         // in scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n       let _50: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n       let mut _51: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n-      let _52: &T;                         // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-      let mut _53: &T;                     // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n-      let _54: &T;                         // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n-      let _56: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n-      let mut _57: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _52: ();                         // in scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+      let _53: &T;                         // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+      let mut _54: &T;                     // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n+      let _55: &T;                         // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _58: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _59: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let _60: usize;                      // in scope 0 at $DIR/reference_prop.rs:+76:13: +76:14\n+      let _64: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _65: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _66: usize;                      // in scope 0 at $DIR/reference_prop.rs:+85:13: +85:14\n+      let _70: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _71: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n       scope 1 {\n           debug a => _4;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n           let _5: &usize;                  // in scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n@@ -140,10 +148,44 @@\n           }\n       }\n       scope 27 {\n-          debug a => _52;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n-          let _55: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          debug a => _53;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n+          let _56: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n           scope 28 {\n-              debug b => _55;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+              debug b => _56;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+          }\n+      }\n+      scope 29 {\n+          debug a => _60;                  // in scope 29 at $DIR/reference_prop.rs:+76:13: +76:14\n+          let _61: &usize;                 // in scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+          scope 30 {\n+-             debug b => _61;              // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n++             debug b => &_60;             // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n+              let _62: &&usize;            // in scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+              scope 31 {\n+-                 debug d => _62;          // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n++                 debug d => &&_60;        // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n+                  let _63: usize;          // in scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  scope 32 {\n+                      debug c => _63;      // in scope 32 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 33 {\n+          debug a => _66;                  // in scope 33 at $DIR/reference_prop.rs:+85:13: +85:14\n+          let mut _67: &usize;             // in scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+          scope 34 {\n+-             debug b => _67;              // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n++             debug b => &_66;             // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n+              let _68: &mut &usize;        // in scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+              scope 35 {\n+-                 debug d => _68;          // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n++                 debug d => &&_66;        // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  let _69: usize;          // in scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  scope 36 {\n+                      debug c => _69;      // in scope 36 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  }\n+              }\n           }\n       }\n   \n@@ -344,34 +386,90 @@\n           StorageDead(_49);                // scope 25 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_47);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-          _52 = &(*_2);                    // scope 0 at $DIR/reference_prop.rs:+68:17: +68:27\n-          StorageLive(_53);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n--         StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n--         _54 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n--         _53 = &(*_54);                   // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n-+         _53 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n-          _2 = move _53;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:28\n-          StorageDead(_53);                // scope 27 at $DIR/reference_prop.rs:+69:27: +69:28\n--         StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:28: +69:29\n-          StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n-          _55 = (*_52);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n-          StorageLive(_56);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n-          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _57 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _56 = opaque::<()>(move _57) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+-         StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageLive(_53);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _53 = &(*_2);                    // scope 0 at $DIR/reference_prop.rs:+68:17: +68:27\n+          StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         _55 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         _54 = &(*_55);                   // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n++         _54 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+          _2 = move _54;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:28\n+          StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:27: +69:28\n+-         StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+69:28: +69:29\n+          StorageLive(_56);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _56 = (*_53);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_58);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _58 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _57 = opaque::<()>(move _58) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:81:9: 81:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb8: {\n-          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n-          StorageDead(_56);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n-          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n-          StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+          StorageDead(_58);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n+-         _52 = const ();                  // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_56);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_53);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageLive(_59);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_60);                // scope 0 at $DIR/reference_prop.rs:+76:13: +76:14\n+          _60 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+76:17: +76:24\n+-         StorageLive(_61);                // scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _61 = &_60;                      // scope 29 at $DIR/reference_prop.rs:+77:17: +77:19\n+-         StorageLive(_62);                // scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _62 = &_61;                      // scope 30 at $DIR/reference_prop.rs:+78:17: +78:19\n+          StorageLive(_63);                // scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _63 = (*_61);                    // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _63 = _60;                       // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_64);                // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_65);                // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _65 = ();                        // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _64 = opaque::<()>(move _65) -> bb9; // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:90:9: 90:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_65);                // scope 32 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_64);                // scope 32 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _59 = const ();                  // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_63);                // scope 31 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_62);                // scope 30 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_61);                // scope 29 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_60);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageLive(_66);                // scope 0 at $DIR/reference_prop.rs:+85:13: +85:14\n+          _66 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+85:17: +85:24\n+-         StorageLive(_67);                // scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+-         _67 = &_66;                      // scope 33 at $DIR/reference_prop.rs:+86:21: +86:23\n+-         StorageLive(_68);                // scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _68 = &mut _67;                  // scope 34 at $DIR/reference_prop.rs:+87:17: +87:23\n+          StorageLive(_69);                // scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _69 = (*_67);                    // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _69 = _66;                       // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_70);                // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_71);                // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _71 = ();                        // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _70 = opaque::<()>(move _71) -> bb10; // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:99:9: 99:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_71);                // scope 36 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_70);                // scope 36 at $DIR/reference_prop.rs:+89:19: +89:20\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_69);                // scope 35 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_68);                // scope 34 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_67);                // scope 33 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_66);                // scope 0 at $DIR/reference_prop.rs:+90:5: +90:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+91:2: +91:2\n       }\n   }\n   "}, {"sha": "ddeb04e50c79d956c69ec9ba98d4362c18c21394", "filename": "tests/mir-opt/reference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "status": "modified", "additions": 144, "deletions": 42, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -31,8 +31,14 @@\n       let mut _53: *const T;               // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:38\n       let _55: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n       let mut _56: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n-      let _61: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n-      let mut _62: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let _62: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _63: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _64: ();                         // in scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+      let _69: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _70: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n+      let _75: ();                         // in scope 0 at $DIR/reference_prop.rs:+98:9: +98:19\n+      let mut _76: ();                     // in scope 0 at $DIR/reference_prop.rs:+98:16: +98:18\n       scope 1 {\n           let _4: usize;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n           scope 2 {\n@@ -164,20 +170,60 @@\n           }\n       }\n       scope 37 {\n-          let _57: usize;                  // in scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n+          let _58: usize;                  // in scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n           scope 38 {\n-              debug a => _57;              // in scope 38 at $DIR/reference_prop.rs:+76:13: +76:14\n-              let _58: *const usize;       // in scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+              debug a => _58;              // in scope 38 at $DIR/reference_prop.rs:+76:13: +76:14\n+              let _59: *const usize;       // in scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n               scope 39 {\n--                 debug b => _58;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n-+                 debug b => &_57;         // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n-                  let _59: *const usize;   // in scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+-                 debug b => _59;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n++                 debug b => &_58;         // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n+                  let _60: *const usize;   // in scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n                   scope 40 {\n--                     debug c => _59;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n-+                     debug c => &_57;     // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n-                      let _60: usize;      // in scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+-                     debug c => _60;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n++                     debug c => &_58;     // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n+                      let _61: usize;      // in scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n                       scope 41 {\n-                          debug e => _60;  // in scope 41 at $DIR/reference_prop.rs:+79:13: +79:14\n+                          debug e => _61;  // in scope 41 at $DIR/reference_prop.rs:+79:13: +79:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 42 {\n+          let _65: usize;                  // in scope 42 at $DIR/reference_prop.rs:+85:13: +85:14\n+          scope 43 {\n+              debug a => _65;              // in scope 43 at $DIR/reference_prop.rs:+85:13: +85:14\n+              let _66: *const usize;       // in scope 43 at $DIR/reference_prop.rs:+86:13: +86:14\n+              scope 44 {\n+-                 debug b => _66;          // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:14\n++                 debug b => &_65;         // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:14\n+                  let _67: &*const usize;  // in scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  scope 45 {\n+-                     debug d => _67;      // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n++                     debug d => &&_65;    // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n+                      let _68: usize;      // in scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      scope 46 {\n+                          debug c => _68;  // in scope 46 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 47 {\n+          let _71: usize;                  // in scope 47 at $DIR/reference_prop.rs:+94:13: +94:14\n+          scope 48 {\n+              debug a => _71;              // in scope 48 at $DIR/reference_prop.rs:+94:13: +94:14\n+              let mut _72: *const usize;   // in scope 48 at $DIR/reference_prop.rs:+95:13: +95:18\n+              scope 49 {\n+-                 debug b => _72;          // in scope 49 at $DIR/reference_prop.rs:+95:13: +95:18\n++                 debug b => &_71;         // in scope 49 at $DIR/reference_prop.rs:+95:13: +95:18\n+                  let _73: &mut *const usize; // in scope 49 at $DIR/reference_prop.rs:+96:13: +96:14\n+                  scope 50 {\n+-                     debug d => _73;      // in scope 50 at $DIR/reference_prop.rs:+96:13: +96:14\n++                     debug d => &&_71;    // in scope 50 at $DIR/reference_prop.rs:+96:13: +96:14\n+                      let _74: usize;      // in scope 50 at $DIR/reference_prop.rs:+97:13: +97:14\n+                      scope 51 {\n+                          debug c => _74;  // in scope 51 at $DIR/reference_prop.rs:+97:13: +97:14\n                       }\n                   }\n               }\n@@ -198,7 +244,7 @@\n           _8 = ();                         // scope 4 at $DIR/reference_prop.rs:+6:16: +6:18\n           _7 = opaque::<()>(move _8) -> bb1; // scope 4 at $DIR/reference_prop.rs:+6:9: +6:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:166:9: 166:15\n+                                           // + span: $DIR/reference_prop.rs:202:9: 202:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -228,7 +274,7 @@\n           _16 = ();                        // scope 9 at $DIR/reference_prop.rs:+17:16: +17:18\n           _15 = opaque::<()>(move _16) -> bb2; // scope 9 at $DIR/reference_prop.rs:+17:9: +17:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:177:9: 177:15\n+                                           // + span: $DIR/reference_prop.rs:213:9: 213:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -255,7 +301,7 @@\n           _23 = _20;                       // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n           _22 = opaque::<&*const usize>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:186:9: 186:15\n+                                           // + span: $DIR/reference_prop.rs:222:9: 222:15\n                                            // + literal: Const { ty: fn(&*const usize) {opaque::<&*const usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -282,7 +328,7 @@\n           _30 = _27;                       // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n           _29 = opaque::<*mut *const usize>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:195:9: 195:15\n+                                           // + span: $DIR/reference_prop.rs:231:9: 231:15\n                                            // + literal: Const { ty: fn(*mut *const usize) {opaque::<*mut *const usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -308,7 +354,7 @@\n           _36 = _33;                       // scope 23 at $DIR/reference_prop.rs:+43:16: +43:17\n           _35 = opaque::<*const usize>(move _36) -> bb5; // scope 23 at $DIR/reference_prop.rs:+43:9: +43:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:203:9: 203:15\n+                                           // + span: $DIR/reference_prop.rs:239:9: 239:15\n                                            // + literal: Const { ty: fn(*const usize) {opaque::<*const usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -340,7 +386,7 @@\n           _45 = _43;                       // scope 30 at $DIR/reference_prop.rs:+56:16: +56:18\n           _44 = opaque::<*const usize>(move _45) -> bb6; // scope 30 at $DIR/reference_prop.rs:+56:9: +56:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:216:9: 216:15\n+                                           // + span: $DIR/reference_prop.rs:252:9: 252:15\n                                            // + literal: Const { ty: fn(*const usize) {opaque::<*const usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -366,7 +412,7 @@\n           _50 = ();                        // scope 33 at $DIR/reference_prop.rs:+63:16: +63:18\n           _49 = opaque::<()>(move _50) -> bb7; // scope 33 at $DIR/reference_prop.rs:+63:9: +63:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:223:9: 223:15\n+                                           // + span: $DIR/reference_prop.rs:259:9: 259:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -391,7 +437,7 @@\n           _56 = ();                        // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n           _55 = opaque::<()>(move _56) -> bb8; // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:231:9: 231:15\n+                                           // + span: $DIR/reference_prop.rs:267:9: 267:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -402,33 +448,89 @@\n           StorageDead(_54);                // scope 35 at $DIR/reference_prop.rs:+72:5: +72:6\n           StorageDead(_52);                // scope 34 at $DIR/reference_prop.rs:+72:5: +72:6\n -         StorageDead(_51);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageLive(_57);                // scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n-          _57 = const 13_usize;            // scope 37 at $DIR/reference_prop.rs:+76:17: +76:25\n--         StorageLive(_58);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n--         _58 = &raw const _57;            // scope 38 at $DIR/reference_prop.rs:+77:17: +77:29\n--         StorageLive(_59);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n--         _59 = &raw const (*_58);         // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n-          StorageLive(_60);                // scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n--         _60 = (*_59);                    // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n-+         _60 = _57;                       // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n-          StorageLive(_61);                // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n-          StorageLive(_62);                // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n-          _62 = ();                        // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n-          _61 = opaque::<()>(move _62) -> bb9; // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+-         StorageLive(_57);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_58);                // scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n+          _58 = const 13_usize;            // scope 37 at $DIR/reference_prop.rs:+76:17: +76:25\n+-         StorageLive(_59);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _59 = &raw const _58;            // scope 38 at $DIR/reference_prop.rs:+77:17: +77:29\n+-         StorageLive(_60);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _60 = &raw const (*_59);         // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n+          StorageLive(_61);                // scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _61 = (*_60);                    // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _61 = _58;                       // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_62);                // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_63);                // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _63 = ();                        // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _62 = opaque::<()>(move _63) -> bb9; // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:240:9: 240:15\n+                                           // + span: $DIR/reference_prop.rs:276:9: 276:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb9: {\n-          StorageDead(_62);                // scope 41 at $DIR/reference_prop.rs:+80:18: +80:19\n-          StorageDead(_61);                // scope 41 at $DIR/reference_prop.rs:+80:19: +80:20\n-          _0 = const ();                   // scope 37 at $DIR/reference_prop.rs:+75:5: +81:6\n-          StorageDead(_60);                // scope 40 at $DIR/reference_prop.rs:+81:5: +81:6\n--         StorageDead(_59);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n--         StorageDead(_58);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n-          StorageDead(_57);                // scope 37 at $DIR/reference_prop.rs:+81:5: +81:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+82:2: +82:2\n+          StorageDead(_63);                // scope 41 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_62);                // scope 41 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _57 = const ();                  // scope 37 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_61);                // scope 40 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_60);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_58);                // scope 37 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_57);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageLive(_64);                // scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageLive(_65);                // scope 42 at $DIR/reference_prop.rs:+85:13: +85:14\n+          _65 = const 5_usize;             // scope 42 at $DIR/reference_prop.rs:+85:17: +85:24\n+-         StorageLive(_66);                // scope 43 at $DIR/reference_prop.rs:+86:13: +86:14\n+-         _66 = &raw const _65;            // scope 43 at $DIR/reference_prop.rs:+86:17: +86:29\n+-         StorageLive(_67);                // scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _67 = &_66;                      // scope 44 at $DIR/reference_prop.rs:+87:17: +87:19\n+          StorageLive(_68);                // scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _68 = (*_66);                    // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _68 = _65;                       // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_69);                // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_70);                // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _70 = ();                        // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _69 = opaque::<()>(move _70) -> bb10; // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:285:9: 285:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_70);                // scope 46 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_69);                // scope 46 at $DIR/reference_prop.rs:+89:19: +89:20\n+-         _64 = const ();                  // scope 42 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_68);                // scope 45 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_67);                // scope 44 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_66);                // scope 43 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_65);                // scope 42 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_64);                // scope 0 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageLive(_71);                // scope 47 at $DIR/reference_prop.rs:+94:13: +94:14\n+          _71 = const 5_usize;             // scope 47 at $DIR/reference_prop.rs:+94:17: +94:24\n+-         StorageLive(_72);                // scope 48 at $DIR/reference_prop.rs:+95:13: +95:18\n+-         _72 = &raw const _71;            // scope 48 at $DIR/reference_prop.rs:+95:21: +95:33\n+-         StorageLive(_73);                // scope 49 at $DIR/reference_prop.rs:+96:13: +96:14\n+-         _73 = &mut _72;                  // scope 49 at $DIR/reference_prop.rs:+96:17: +96:23\n+          StorageLive(_74);                // scope 50 at $DIR/reference_prop.rs:+97:13: +97:14\n+-         _74 = (*_72);                    // scope 50 at $DIR/reference_prop.rs:+97:17: +97:19\n++         _74 = _71;                       // scope 50 at $DIR/reference_prop.rs:+97:17: +97:19\n+          StorageLive(_75);                // scope 51 at $DIR/reference_prop.rs:+98:9: +98:19\n+          StorageLive(_76);                // scope 51 at $DIR/reference_prop.rs:+98:16: +98:18\n+          _76 = ();                        // scope 51 at $DIR/reference_prop.rs:+98:16: +98:18\n+          _75 = opaque::<()>(move _76) -> bb11; // scope 51 at $DIR/reference_prop.rs:+98:9: +98:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:294:9: 294:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb11: {\n+          StorageDead(_76);                // scope 51 at $DIR/reference_prop.rs:+98:18: +98:19\n+          StorageDead(_75);                // scope 51 at $DIR/reference_prop.rs:+98:19: +98:20\n+          _0 = const ();                   // scope 47 at $DIR/reference_prop.rs:+93:5: +99:6\n+          StorageDead(_74);                // scope 50 at $DIR/reference_prop.rs:+99:5: +99:6\n+-         StorageDead(_73);                // scope 49 at $DIR/reference_prop.rs:+99:5: +99:6\n+-         StorageDead(_72);                // scope 48 at $DIR/reference_prop.rs:+99:5: +99:6\n+          StorageDead(_71);                // scope 47 at $DIR/reference_prop.rs:+99:5: +99:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+100:2: +100:2\n       }\n   }\n   "}, {"sha": "8d059de5b875577427f1354e5b4c8c39093dd354", "filename": "tests/mir-opt/reference_prop.reference_propagation_mut.ReferencePropagation.diff", "status": "modified", "additions": 135, "deletions": 37, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -35,11 +35,19 @@\n       let _48: &mut T;                     // in scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n       let _50: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n       let mut _51: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n-      let _52: &mut T;                     // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-      let mut _53: &mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:32\n+      let _52: ();                         // in scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+      let _53: &mut T;                     // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n       let mut _54: &mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:32\n-      let _56: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n-      let mut _57: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let mut _55: &mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:32\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _58: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _59: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let mut _60: usize;                  // in scope 0 at $DIR/reference_prop.rs:+76:13: +76:18\n+      let _64: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _65: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let mut _66: usize;                  // in scope 0 at $DIR/reference_prop.rs:+85:13: +85:18\n+      let _70: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _71: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n       scope 1 {\n           debug a => _4;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n           let _5: &mut usize;              // in scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n@@ -140,10 +148,44 @@\n           }\n       }\n       scope 27 {\n-          debug a => _52;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n-          let _55: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          debug a => _53;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n+          let _56: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n           scope 28 {\n-              debug b => _55;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+              debug b => _56;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+          }\n+      }\n+      scope 29 {\n+          debug a => _60;                  // in scope 29 at $DIR/reference_prop.rs:+76:13: +76:18\n+          let _61: &mut usize;             // in scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+          scope 30 {\n+-             debug b => _61;              // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n++             debug b => &_60;             // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n+              let _62: &&mut usize;        // in scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+              scope 31 {\n+-                 debug d => _62;          // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n++                 debug d => &&_60;        // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n+                  let _63: usize;          // in scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  scope 32 {\n+                      debug c => _63;      // in scope 32 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 33 {\n+          debug a => _66;                  // in scope 33 at $DIR/reference_prop.rs:+85:13: +85:18\n+          let mut _67: &mut usize;         // in scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+          scope 34 {\n+-             debug b => _67;              // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n++             debug b => &_66;             // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n+              let _68: &mut &mut usize;    // in scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+              scope 35 {\n+-                 debug d => _68;          // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n++                 debug d => &&_66;        // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  let _69: usize;          // in scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  scope 36 {\n+                      debug c => _69;      // in scope 36 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  }\n+              }\n           }\n       }\n   \n@@ -161,7 +203,7 @@\n           _8 = ();                         // scope 3 at $DIR/reference_prop.rs:+6:16: +6:18\n           _7 = opaque::<()>(move _8) -> bb1; // scope 3 at $DIR/reference_prop.rs:+6:9: +6:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:91:9: 91:15\n+                                           // + span: $DIR/reference_prop.rs:109:9: 109:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -195,7 +237,7 @@\n           _17 = ();                        // scope 7 at $DIR/reference_prop.rs:+17:16: +17:18\n           _16 = opaque::<()>(move _17) -> bb2; // scope 7 at $DIR/reference_prop.rs:+17:9: +17:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:102:9: 102:15\n+                                           // + span: $DIR/reference_prop.rs:120:9: 120:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -222,7 +264,7 @@\n           _24 = _21;                       // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n           _23 = opaque::<&&mut usize>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:111:9: 111:15\n+                                           // + span: $DIR/reference_prop.rs:129:9: 129:15\n                                            // + literal: Const { ty: fn(&&mut usize) {opaque::<&&mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -249,7 +291,7 @@\n           _31 = _28;                       // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n           _30 = opaque::<*mut &mut usize>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:120:9: 120:15\n+                                           // + span: $DIR/reference_prop.rs:138:9: 138:15\n                                            // + literal: Const { ty: fn(*mut &mut usize) {opaque::<*mut &mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -274,7 +316,7 @@\n           _37 = move _34;                  // scope 18 at $DIR/reference_prop.rs:+43:16: +43:17\n           _36 = opaque::<&mut usize>(move _37) -> bb5; // scope 18 at $DIR/reference_prop.rs:+43:9: +43:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:128:9: 128:15\n+                                           // + span: $DIR/reference_prop.rs:146:9: 146:15\n                                            // + literal: Const { ty: fn(&mut usize) {opaque::<&mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -304,7 +346,7 @@\n           _46 = move _44;                  // scope 24 at $DIR/reference_prop.rs:+56:16: +56:18\n           _45 = opaque::<&mut usize>(move _46) -> bb6; // scope 24 at $DIR/reference_prop.rs:+56:9: +56:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:141:9: 141:15\n+                                           // + span: $DIR/reference_prop.rs:159:9: 159:15\n                                            // + literal: Const { ty: fn(&mut usize) {opaque::<&mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -330,7 +372,7 @@\n           _51 = ();                        // scope 26 at $DIR/reference_prop.rs:+63:16: +63:18\n           _50 = opaque::<()>(move _51) -> bb7; // scope 26 at $DIR/reference_prop.rs:+63:9: +63:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:148:9: 148:15\n+                                           // + span: $DIR/reference_prop.rs:166:9: 166:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -341,34 +383,90 @@\n           StorageDead(_49);                // scope 25 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_47);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-          _52 = &mut (*_2);                // scope 0 at $DIR/reference_prop.rs:+68:17: +68:31\n-          StorageLive(_53);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n--         StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n--         _54 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n--         _53 = &mut (*_54);               // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n-+         _53 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n-          _2 = move _53;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:32\n-          StorageDead(_53);                // scope 27 at $DIR/reference_prop.rs:+69:31: +69:32\n--         StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:32: +69:33\n-          StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n-          _55 = (*_52);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n-          StorageLive(_56);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n-          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _57 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _56 = opaque::<()>(move _57) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+-         StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageLive(_53);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _53 = &mut (*_2);                // scope 0 at $DIR/reference_prop.rs:+68:17: +68:31\n+          StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         _55 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         _54 = &mut (*_55);               // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n++         _54 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+          _2 = move _54;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:32\n+          StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:31: +69:32\n+-         StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+69:32: +69:33\n+          StorageLive(_56);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _56 = (*_53);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_58);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _58 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _57 = opaque::<()>(move _58) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:156:9: 156:15\n+                                           // + span: $DIR/reference_prop.rs:174:9: 174:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb8: {\n-          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n-          StorageDead(_56);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n-          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n-          StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+          StorageDead(_58);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n+-         _52 = const ();                  // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_56);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_53);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageLive(_59);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_60);                // scope 0 at $DIR/reference_prop.rs:+76:13: +76:18\n+          _60 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+76:21: +76:28\n+-         StorageLive(_61);                // scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _61 = &mut _60;                  // scope 29 at $DIR/reference_prop.rs:+77:17: +77:23\n+-         StorageLive(_62);                // scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _62 = &_61;                      // scope 30 at $DIR/reference_prop.rs:+78:17: +78:19\n+          StorageLive(_63);                // scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _63 = (*_61);                    // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _63 = _60;                       // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_64);                // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_65);                // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _65 = ();                        // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _64 = opaque::<()>(move _65) -> bb9; // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:183:9: 183:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_65);                // scope 32 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_64);                // scope 32 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _59 = const ();                  // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_63);                // scope 31 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_62);                // scope 30 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_61);                // scope 29 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_60);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageLive(_66);                // scope 0 at $DIR/reference_prop.rs:+85:13: +85:18\n+          _66 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+85:21: +85:28\n+-         StorageLive(_67);                // scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+-         _67 = &mut _66;                  // scope 33 at $DIR/reference_prop.rs:+86:21: +86:27\n+-         StorageLive(_68);                // scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _68 = &mut _67;                  // scope 34 at $DIR/reference_prop.rs:+87:17: +87:23\n+          StorageLive(_69);                // scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _69 = (*_67);                    // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _69 = _66;                       // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_70);                // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_71);                // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _71 = ();                        // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _70 = opaque::<()>(move _71) -> bb10; // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:192:9: 192:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_71);                // scope 36 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_70);                // scope 36 at $DIR/reference_prop.rs:+89:19: +89:20\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_69);                // scope 35 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_68);                // scope 34 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_67);                // scope 33 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_66);                // scope 0 at $DIR/reference_prop.rs:+90:5: +90:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+91:2: +91:2\n       }\n   }\n   "}, {"sha": "c93aa52be111ab311351c3e12a29bec37f8a364e", "filename": "tests/mir-opt/reference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "status": "modified", "additions": 135, "deletions": 33, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -27,9 +27,15 @@\n       let _46: ();                         // in scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n       let _49: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n       let mut _50: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n-      let mut _52: *mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:36\n-      let _54: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n-      let mut _55: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _51: ();                         // in scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+      let mut _53: *mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:36\n+      let _55: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _56: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let _62: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _63: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _68: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _69: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n       scope 1 {\n           let mut _4: usize;               // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n           scope 2 {\n@@ -151,12 +157,52 @@\n           }\n       }\n       scope 34 {\n-          let _51: *mut T;                 // in scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n+          let _52: *mut T;                 // in scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n           scope 35 {\n-              debug a => _51;              // in scope 35 at $DIR/reference_prop.rs:+68:13: +68:14\n-              let _53: T;                  // in scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n+              debug a => _52;              // in scope 35 at $DIR/reference_prop.rs:+68:13: +68:14\n+              let _54: T;                  // in scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n               scope 36 {\n-                  debug b => _53;          // in scope 36 at $DIR/reference_prop.rs:+70:13: +70:14\n+                  debug b => _54;          // in scope 36 at $DIR/reference_prop.rs:+70:13: +70:14\n+              }\n+          }\n+      }\n+      scope 37 {\n+          let mut _58: usize;              // in scope 37 at $DIR/reference_prop.rs:+76:13: +76:18\n+          scope 38 {\n+              debug a => _58;              // in scope 38 at $DIR/reference_prop.rs:+76:13: +76:18\n+              let _59: *mut usize;         // in scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+              scope 39 {\n+-                 debug b => _59;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n++                 debug b => &_58;         // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n+                  let _60: &*mut usize;    // in scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+                  scope 40 {\n+-                     debug d => _60;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n++                     debug d => &&_58;    // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n+                      let _61: usize;      // in scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+                      scope 41 {\n+                          debug c => _61;  // in scope 41 at $DIR/reference_prop.rs:+79:13: +79:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 42 {\n+          let mut _64: usize;              // in scope 42 at $DIR/reference_prop.rs:+85:13: +85:18\n+          scope 43 {\n+              debug a => _64;              // in scope 43 at $DIR/reference_prop.rs:+85:13: +85:18\n+              let mut _65: *mut usize;     // in scope 43 at $DIR/reference_prop.rs:+86:13: +86:18\n+              scope 44 {\n+-                 debug b => _65;          // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:18\n++                 debug b => &_64;         // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:18\n+                  let _66: &mut *mut usize; // in scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  scope 45 {\n+-                     debug d => _66;      // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n++                     debug d => &&_64;    // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n+                      let _67: usize;      // in scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      scope 46 {\n+                          debug c => _67;  // in scope 46 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      }\n+                  }\n               }\n           }\n       }\n@@ -175,7 +221,7 @@\n           _8 = ();                         // scope 4 at $DIR/reference_prop.rs:+6:16: +6:18\n           _7 = opaque::<()>(move _8) -> bb1; // scope 4 at $DIR/reference_prop.rs:+6:9: +6:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:250:9: 250:15\n+                                           // + span: $DIR/reference_prop.rs:304:9: 304:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -205,7 +251,7 @@\n           _16 = ();                        // scope 9 at $DIR/reference_prop.rs:+17:16: +17:18\n           _15 = opaque::<()>(move _16) -> bb2; // scope 9 at $DIR/reference_prop.rs:+17:9: +17:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:261:9: 261:15\n+                                           // + span: $DIR/reference_prop.rs:315:9: 315:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -232,7 +278,7 @@\n           _23 = _20;                       // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n           _22 = opaque::<&*mut usize>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:270:9: 270:15\n+                                           // + span: $DIR/reference_prop.rs:324:9: 324:15\n                                            // + literal: Const { ty: fn(&*mut usize) {opaque::<&*mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -259,7 +305,7 @@\n           _30 = _27;                       // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n           _29 = opaque::<*mut *mut usize>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:279:9: 279:15\n+                                           // + span: $DIR/reference_prop.rs:333:9: 333:15\n                                            // + literal: Const { ty: fn(*mut *mut usize) {opaque::<*mut *mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -284,7 +330,7 @@\n           _36 = _33;                       // scope 23 at $DIR/reference_prop.rs:+43:16: +43:17\n           _35 = opaque::<*mut usize>(move _36) -> bb5; // scope 23 at $DIR/reference_prop.rs:+43:9: +43:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:287:9: 287:15\n+                                           // + span: $DIR/reference_prop.rs:341:9: 341:15\n                                            // + literal: Const { ty: fn(*mut usize) {opaque::<*mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -314,7 +360,7 @@\n           _45 = _43;                       // scope 30 at $DIR/reference_prop.rs:+56:16: +56:18\n           _44 = opaque::<*mut usize>(move _45) -> bb6; // scope 30 at $DIR/reference_prop.rs:+56:9: +56:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:300:9: 300:15\n+                                           // + span: $DIR/reference_prop.rs:354:9: 354:15\n                                            // + literal: Const { ty: fn(*mut usize) {opaque::<*mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -340,7 +386,7 @@\n           _50 = ();                        // scope 33 at $DIR/reference_prop.rs:+63:16: +63:18\n           _49 = opaque::<()>(move _50) -> bb7; // scope 33 at $DIR/reference_prop.rs:+63:9: +63:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:307:9: 307:15\n+                                           // + span: $DIR/reference_prop.rs:361:9: 361:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -351,30 +397,86 @@\n           StorageDead(_48);                // scope 32 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_46);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageLive(_51);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n-          _51 = &raw mut (*_2);            // scope 34 at $DIR/reference_prop.rs:+68:17: +68:35\n-          StorageLive(_52);                // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n-          _52 = &raw mut (*_1);            // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n-          _2 = move _52;                   // scope 35 at $DIR/reference_prop.rs:+69:9: +69:36\n-          StorageDead(_52);                // scope 35 at $DIR/reference_prop.rs:+69:35: +69:36\n-          StorageLive(_53);                // scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n-          _53 = (*_51);                    // scope 35 at $DIR/reference_prop.rs:+70:17: +70:19\n-          StorageLive(_54);                // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n-          StorageLive(_55);                // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _55 = ();                        // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _54 = opaque::<()>(move _55) -> bb8; // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n+-         StorageLive(_51);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageLive(_52);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _52 = &raw mut (*_2);            // scope 34 at $DIR/reference_prop.rs:+68:17: +68:35\n+          StorageLive(_53);                // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n+          _53 = &raw mut (*_1);            // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n+          _2 = move _53;                   // scope 35 at $DIR/reference_prop.rs:+69:9: +69:36\n+          StorageDead(_53);                // scope 35 at $DIR/reference_prop.rs:+69:35: +69:36\n+          StorageLive(_54);                // scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _54 = (*_52);                    // scope 35 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_55);                // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_56);                // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _56 = ();                        // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _55 = opaque::<()>(move _56) -> bb8; // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:315:9: 315:15\n+                                           // + span: $DIR/reference_prop.rs:369:9: 369:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb8: {\n-          StorageDead(_55);                // scope 36 at $DIR/reference_prop.rs:+71:18: +71:19\n-          StorageDead(_54);                // scope 36 at $DIR/reference_prop.rs:+71:19: +71:20\n-          _0 = const ();                   // scope 34 at $DIR/reference_prop.rs:+67:5: +72:6\n-          StorageDead(_53);                // scope 35 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageDead(_51);                // scope 34 at $DIR/reference_prop.rs:+72:5: +72:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+          StorageDead(_56);                // scope 36 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_55);                // scope 36 at $DIR/reference_prop.rs:+71:19: +71:20\n+-         _51 = const ();                  // scope 34 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_54);                // scope 35 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_52);                // scope 34 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageDead(_51);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageLive(_57);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_58);                // scope 37 at $DIR/reference_prop.rs:+76:13: +76:18\n+          _58 = const 5_usize;             // scope 37 at $DIR/reference_prop.rs:+76:21: +76:28\n+-         StorageLive(_59);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _59 = &raw mut _58;              // scope 38 at $DIR/reference_prop.rs:+77:17: +77:27\n+-         StorageLive(_60);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _60 = &_59;                      // scope 39 at $DIR/reference_prop.rs:+78:17: +78:19\n+          StorageLive(_61);                // scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _61 = (*_59);                    // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _61 = _58;                       // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_62);                // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_63);                // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _63 = ();                        // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _62 = opaque::<()>(move _63) -> bb9; // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:378:9: 378:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_63);                // scope 41 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_62);                // scope 41 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _57 = const ();                  // scope 37 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_61);                // scope 40 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_60);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_58);                // scope 37 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_57);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageLive(_64);                // scope 42 at $DIR/reference_prop.rs:+85:13: +85:18\n+          _64 = const 5_usize;             // scope 42 at $DIR/reference_prop.rs:+85:21: +85:28\n+-         StorageLive(_65);                // scope 43 at $DIR/reference_prop.rs:+86:13: +86:18\n+-         _65 = &raw mut _64;              // scope 43 at $DIR/reference_prop.rs:+86:21: +86:31\n+-         StorageLive(_66);                // scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _66 = &mut _65;                  // scope 44 at $DIR/reference_prop.rs:+87:17: +87:23\n+          StorageLive(_67);                // scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _67 = (*_65);                    // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _67 = _64;                       // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_68);                // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_69);                // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _69 = ();                        // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _68 = opaque::<()>(move _69) -> bb10; // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:387:9: 387:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_69);                // scope 46 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_68);                // scope 46 at $DIR/reference_prop.rs:+89:19: +89:20\n+          _0 = const ();                   // scope 42 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_67);                // scope 45 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_66);                // scope 44 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_65);                // scope 43 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_64);                // scope 42 at $DIR/reference_prop.rs:+90:5: +90:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+91:2: +91:2\n       }\n   }\n   "}, {"sha": "c8c29fb143ea3c164cd339fed085f132c5f13622", "filename": "tests/mir-opt/reference_prop.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.rs?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -80,6 +80,24 @@ fn reference_propagation<'a, T: Copy>(single: &'a T, mut multiple: &'a T) {\n         let b = *a; // This should not be optimized.\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let a = 5_usize;\n+        let b = &a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let a = 5_usize;\n+        let mut b = &a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n fn reference_propagation_mut<'a, T: Copy>(single: &'a mut T, mut multiple: &'a mut T) {\n@@ -155,6 +173,24 @@ fn reference_propagation_mut<'a, T: Copy>(single: &'a mut T, mut multiple: &'a m\n         let b = *a; // This should not be optimized.\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let mut a = 5_usize;\n+        let b = &mut a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let mut a = 5_usize;\n+        let mut b = &mut a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n fn reference_propagation_const_ptr<T: Copy>(single: *const T, mut multiple: *const T) {\n@@ -239,6 +275,24 @@ fn reference_propagation_const_ptr<T: Copy>(single: *const T, mut multiple: *con\n         let e = *c;\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let a = 5_usize;\n+        let b = &raw const a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let a = 5_usize;\n+        let mut b = &raw const a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n fn reference_propagation_mut_ptr<T: Copy>(single: *mut T, mut multiple: *mut T) {\n@@ -314,6 +368,24 @@ fn reference_propagation_mut_ptr<T: Copy>(single: *mut T, mut multiple: *mut T)\n         let b = *a; // This should not be optimized.\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let mut a = 5_usize;\n+        let b = &raw mut a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let mut a = 5_usize;\n+        let mut b = &raw mut a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n #[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]"}, {"sha": "b754aff47550d9c6544f32d9896d13e087370749", "filename": "tests/mir-opt/reference_prop.unique_with_copies.ReferencePropagation.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -36,7 +36,7 @@\n           _5 = (*_3);                      // scope 4 at $DIR/reference_prop.rs:+5:25: +5:27\n           _4 = opaque::<i32>(move _5) -> bb1; // scope 4 at $DIR/reference_prop.rs:+5:18: +5:28\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:452:18: 452:24\n+                                           // + span: $DIR/reference_prop.rs:524:18: 524:24\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   \n@@ -52,7 +52,7 @@\n +         _7 = (*_3);                      // scope 5 at $DIR/reference_prop.rs:+9:21: +9:23\n           _6 = opaque::<i32>(move _7) -> bb2; // scope 5 at $DIR/reference_prop.rs:+9:14: +9:24\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:456:14: 456:20\n+                                           // + span: $DIR/reference_prop.rs:528:14: 528:20\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "afdcf57815f387dd20e15a3c3cc05bdfd645ba13", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 93, "deletions": 177, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -3,128 +3,79 @@\n   \n   fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:8:25: 8:39], _2: &&(usize, usize, usize, usize)) -> bool {\n       let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n-      let _3: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-      let _4: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-      let _5: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-      let _6: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n-      let _9: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let mut _10: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n-      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n-      let mut _13: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n-      let _14: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n-      let _16: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let mut _17: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _18: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _19: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _20: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _3: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n+      let mut _4: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n+      let mut _5: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+      let mut _6: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n+      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n+      let mut _9: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _10: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _11: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _12: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n       scope 1 {\n--         debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n--         debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n--         debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n--         debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n-+         debug a => _14;                  // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n-+         debug b => _11;                  // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         debug c => _9;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         debug d => _16;                  // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+          debug a => &((*_9).0: usize);    // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+          debug b => &((*_10).1: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+          debug c => &((*_11).2: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+          debug d => &((*_12).3: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n           scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n--             debug self => &_3;           // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &_14;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => &_9;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _21: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _22: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_9).0: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_11).2: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _21;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _22;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _23: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _24: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_9).0: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_11).2: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _13: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _14: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n--             debug self => &_5;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &_9;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => &_14;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _25: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _26: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_11).2: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_9).0: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _25;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _26;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _27: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _28: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_11).2: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_9).0: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _15: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _16: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n--             debug self => &_6;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &_16;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => &_11;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _29: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _30: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_12).3: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_10).1: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _29;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _30;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _31: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _32: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_12).3: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_10).1: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _17: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _18: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n--             debug self => &_4;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &_11;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => &_16;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _33: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _34: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_10).1: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_12).3: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _33;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _34;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _35: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _36: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_10).1: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_12).3: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _19: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _20: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _17 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         _3 = &((*_17).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         _14 = &((*_17).0: usize);        // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _18 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         _4 = &((*_18).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         _11 = &((*_18).1: usize);        // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _19 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         _5 = &((*_19).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-+         _9 = &((*_19).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _20 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n--         _6 = &((*_20).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n--         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-+         _16 = &((*_20).3: usize);        // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _9 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _10 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _11 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _12 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         StorageLive(_3);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n--         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _9 = _5;                         // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _21 = deref_copy _3;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-+         _21 = deref_copy _14;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _22 = deref_copy _9;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_23);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _23 = (*_21);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_24);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _24 = (*_22);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _8 = Le(move _23, move _24);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_24);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_23);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageLive(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n+          StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _13 = ((*_9).0: usize);          // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _14 = ((*_11).2: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _4 = Le(move _13, move _14);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n       bb1: {\n@@ -133,115 +84,80 @@\n       }\n   \n       bb2: {\n--         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         StorageLive(_6);                 // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n--         StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _14 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _25 = deref_copy _5;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-+         _25 = deref_copy _9;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _26 = deref_copy _14;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _27 = (*_25);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_28);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _28 = (*_26);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _13 = Le(move _27, move _28);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_28);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_27);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          switchInt(move _13) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n+          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _15 = ((*_11).2: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _16 = ((*_9).0: usize);          // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _7 = Le(move _15, move _16);     // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_16);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_15);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          switchInt(move _7) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb3: {\n--         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_6);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_3);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   \n       bb4: {\n--         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n       bb5: {\n--         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n--         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _11 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _29 = deref_copy _6;             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         _29 = deref_copy _16;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _30 = deref_copy _11;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_31);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _31 = (*_29);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_32);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _32 = (*_30);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _10 = Le(move _31, move _32);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_32);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_31);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _7 = move _10;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n--         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageLive(_17);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _17 = ((*_12).3: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_18);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _18 = ((*_10).1: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _5 = Le(move _17, move _18);     // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_18);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_17);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _3 = move _5;                    // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+-         StorageDead(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-+         switchInt(move _10) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          StorageDead(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n++         switchInt(move _5) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }\n   \n       bb6: {\n--         _12 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         _6 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb7: {\n--         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n--         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _16 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _33 = deref_copy _4;             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         _33 = deref_copy _11;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _34 = deref_copy _16;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_35);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _35 = (*_33);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_36);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _36 = (*_34);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _15 = Le(move _35, move _36);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _0 = Le(move _35, move _36);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_36);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_35);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _12 = move _15;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageLive(_19);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _19 = ((*_10).1: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_20);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _20 = ((*_12).3: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _8 = Le(move _19, move _20);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _0 = Le(move _19, move _20);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_20);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_19);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _6 = move _8;                    // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb8: {\n--         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _0 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _0 = move _6;                    // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n           goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }"}, {"sha": "2534eeef43297c1278ecb8113c8b5775a8ce6d95", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.ReferencePropagation.diff", "status": "modified", "additions": 72, "deletions": 60, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19652377c3f056aa0db32b8586e5a707b965a90d/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff?ref=19652377c3f056aa0db32b8586e5a707b965a90d", "patch": "@@ -38,101 +38,113 @@\n       let mut _49: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n       let mut _50: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n       scope 1 {\n-          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n-          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n-          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n-          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n++         debug a => &((*_25).0: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n++         debug b => &((*_26).1: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n++         debug c => &((*_27).2: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n++         debug d => &((*_28).3: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n           scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n -             debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -             debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &_3;           // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug other => &_11;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_25).0: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_27).2: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_25).0: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_27).2: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _33: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _34: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n -             debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -             debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &_5;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug other => &_20;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_27).2: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_25).0: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _35: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _36: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_27).2: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_25).0: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _39: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _40: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n -             debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -             debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &_6;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug other => &_15;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_28).3: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_26).1: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _41: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _42: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_28).3: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_26).1: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _45: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _46: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n -             debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -             debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug self => &_4;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+             debug other => &_24;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_26).1: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_28).3: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _47: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _48: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_26).1: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_28).3: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _51: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _52: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n -         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n -         _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n -         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n -         _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n -         _29 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _30 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _29 = deref_copy _3;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _30 = deref_copy _11;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _33 = ((*_25).0: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _34 = ((*_27).2: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _8 = Le(move _33, move _34);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n -         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n -         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -149,21 +161,21 @@\n -         StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n -         _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n -         StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n -         _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n -         _35 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _36 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _35 = deref_copy _5;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _36 = deref_copy _20;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _39 = ((*_27).2: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _40 = ((*_25).0: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _17 = Le(move _39, move _40);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n -         StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n -         StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n@@ -172,10 +184,10 @@\n       bb3: {\n           StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   \n@@ -191,21 +203,21 @@\n -         StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n -         _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n -         StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         _41 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _42 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _41 = deref_copy _6;             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _42 = deref_copy _15;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _45 = ((*_28).3: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _46 = ((*_26).1: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _12 = Le(move _45, move _46);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -224,21 +236,21 @@\n -         StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n -         _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n -         StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         _47 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _48 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _47 = deref_copy _4;             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _48 = deref_copy _24;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _51 = ((*_26).1: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _52 = ((*_28).3: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _21 = Le(move _51, move _52);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76"}]}