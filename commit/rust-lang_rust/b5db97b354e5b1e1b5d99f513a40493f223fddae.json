{"sha": "b5db97b354e5b1e1b5d99f513a40493f223fddae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZGI5N2IzNTRlNWIxZTFiNWQ5OWY1MTNhNDA0OTNmMjIzZmRkYWU=", "commit": {"author": {"name": "John Gallagher", "email": "jgallagher@bignerdranch.com", "date": "2014-10-03T04:59:32Z"}, "committer": {"name": "John Gallagher", "email": "jgallagher@bignerdranch.com", "date": "2014-10-11T00:30:32Z"}, "message": "Add tests for `while let`", "tree": {"sha": "2b53653e1a266955839107836f3fbc74836ecc93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b53653e1a266955839107836f3fbc74836ecc93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5db97b354e5b1e1b5d99f513a40493f223fddae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5db97b354e5b1e1b5d99f513a40493f223fddae", "html_url": "https://github.com/rust-lang/rust/commit/b5db97b354e5b1e1b5d99f513a40493f223fddae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5db97b354e5b1e1b5d99f513a40493f223fddae/comments", "author": {"login": "hydhknn", "id": 62813007, "node_id": "MDQ6VXNlcjYyODEzMDA3", "avatar_url": "https://avatars.githubusercontent.com/u/62813007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hydhknn", "html_url": "https://github.com/hydhknn", "followers_url": "https://api.github.com/users/hydhknn/followers", "following_url": "https://api.github.com/users/hydhknn/following{/other_user}", "gists_url": "https://api.github.com/users/hydhknn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hydhknn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hydhknn/subscriptions", "organizations_url": "https://api.github.com/users/hydhknn/orgs", "repos_url": "https://api.github.com/users/hydhknn/repos", "events_url": "https://api.github.com/users/hydhknn/events{/privacy}", "received_events_url": "https://api.github.com/users/hydhknn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hydhknn", "id": 62813007, "node_id": "MDQ6VXNlcjYyODEzMDA3", "avatar_url": "https://avatars.githubusercontent.com/u/62813007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hydhknn", "html_url": "https://github.com/hydhknn", "followers_url": "https://api.github.com/users/hydhknn/followers", "following_url": "https://api.github.com/users/hydhknn/following{/other_user}", "gists_url": "https://api.github.com/users/hydhknn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hydhknn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hydhknn/subscriptions", "organizations_url": "https://api.github.com/users/hydhknn/orgs", "repos_url": "https://api.github.com/users/hydhknn/repos", "events_url": "https://api.github.com/users/hydhknn/events{/privacy}", "received_events_url": "https://api.github.com/users/hydhknn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45fd623762aca093ab913ed3a8fcd13c5798005d", "url": "https://api.github.com/repos/rust-lang/rust/commits/45fd623762aca093ab913ed3a8fcd13c5798005d", "html_url": "https://github.com/rust-lang/rust/commit/45fd623762aca093ab913ed3a8fcd13c5798005d"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "6c766dec9a3e9df51cff06c6c4c30dc2421ef154", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5db97b354e5b1e1b5d99f513a40493f223fddae/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5db97b354e5b1e1b5d99f513a40493f223fddae/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=b5db97b354e5b1e1b5d99f513a40493f223fddae", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![deny(unnecessary_parens)]\n-#![feature(if_let)]\n+#![feature(if_let,while_let)]\n \n #[deriving(Eq, PartialEq)]\n struct X { y: bool }\n@@ -34,6 +34,7 @@ fn main() {\n         _ => {}\n     }\n     if let 1i = (1i) {} //~ ERROR unnecessary parentheses around `if let` head expression\n+    while let 1i = (2i) {} //~ ERROR unnecessary parentheses around `while let` head expression\n     let v = X { y: false };\n     // struct lits needs parens, so these shouldn't warn.\n     if (v == X { y: true }) {}"}, {"sha": "0dd442ec3f66aad9ea73f739f8edde9d13889d3f", "filename": "src/test/compile-fail/while-let.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b5db97b354e5b1e1b5d99f513a40493f223fddae/src%2Ftest%2Fcompile-fail%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5db97b354e5b1e1b5d99f513a40493f223fddae/src%2Ftest%2Fcompile-fail%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-let.rs?ref=b5db97b354e5b1e1b5d99f513a40493f223fddae", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules,while_let)]\n+\n+fn macros() {\n+    macro_rules! foo{\n+        ($p:pat, $e:expr, $b:block) => {{\n+            while let $p = $e $b\n+        }}\n+    }\n+    macro_rules! bar{\n+        ($p:pat, $e:expr, $b:block) => {{\n+            foo!($p, $e, $b)\n+        }}\n+    }\n+\n+    foo!(a, 1i, { //~ ERROR irrefutable while-let\n+        println!(\"irrefutable pattern\");\n+    });\n+    bar!(a, 1i, { //~ ERROR irrefutable while-let\n+        println!(\"irrefutable pattern\");\n+    });\n+}\n+\n+pub fn main() {\n+    while let a = 1i { //~ ERROR irrefutable while-let\n+        println!(\"irrefutable pattern\");\n+    }\n+}"}, {"sha": "41f54d47ad42c2771655c7c40a08e2901807c9e8", "filename": "src/test/run-pass/while-let.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b5db97b354e5b1e1b5d99f513a40493f223fddae/src%2Ftest%2Frun-pass%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5db97b354e5b1e1b5d99f513a40493f223fddae/src%2Ftest%2Frun-pass%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-let.rs?ref=b5db97b354e5b1e1b5d99f513a40493f223fddae", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(while_let)]\n+\n+use std::collections::PriorityQueue;\n+\n+fn make_pq() -> PriorityQueue<int> {\n+    PriorityQueue::from_vec(vec![1i,2,3])\n+}\n+\n+pub fn main() {\n+    let mut pq = make_pq();\n+    let mut sum = 0i;\n+    while let Some(x) = pq.pop() {\n+        sum += x;\n+    }\n+    assert_eq!(sum, 6i);\n+\n+    pq = make_pq();\n+    sum = 0;\n+    'a: while let Some(x) = pq.pop() {\n+        sum += x;\n+        if x == 2 {\n+            break 'a;\n+        }\n+    }\n+    assert_eq!(sum, 5i);\n+\n+    pq = make_pq();\n+    sum = 0;\n+    'a: while let Some(x) = pq.pop() {\n+        if x == 3 {\n+            continue 'a;\n+        }\n+        sum += x;\n+    }\n+    assert_eq!(sum, 3i);\n+\n+    let mut pq1 = make_pq();\n+    sum = 0;\n+    while let Some(x) = pq1.pop() {\n+        let mut pq2 = make_pq();\n+        while let Some(y) = pq2.pop() {\n+            sum += x * y;\n+        }\n+    }\n+    assert_eq!(sum, 6i + 12 + 18);\n+}"}]}