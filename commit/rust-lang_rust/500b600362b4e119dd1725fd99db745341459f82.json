{"sha": "500b600362b4e119dd1725fd99db745341459f82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMGI2MDAzNjJiNGUxMTlkZDE3MjVmZDk5ZGI3NDUzNDE0NTlmODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-07T22:48:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:31:48Z"}, "message": "std: Remove Duration::new/new_opt/to_tuple\n\nThese all expose the underlying data representation and are\nnot the most convenient way of instantiation anyway.", "tree": {"sha": "e325c21b6ef9fe3d0c8590e8c31469af500f307d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e325c21b6ef9fe3d0c8590e8c31469af500f307d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/500b600362b4e119dd1725fd99db745341459f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/500b600362b4e119dd1725fd99db745341459f82", "html_url": "https://github.com/rust-lang/rust/commit/500b600362b4e119dd1725fd99db745341459f82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/500b600362b4e119dd1725fd99db745341459f82/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6b02f65589cd3d1e94fd585ad93a5e720789d5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b02f65589cd3d1e94fd585ad93a5e720789d5a", "html_url": "https://github.com/rust-lang/rust/commit/c6b02f65589cd3d1e94fd585ad93a5e720789d5a"}], "stats": {"total": 37, "additions": 0, "deletions": 37}, "files": [{"sha": "30e5ea44385d7c5c13a182ba6883fc2649e5db3b", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/500b600362b4e119dd1725fd99db745341459f82/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500b600362b4e119dd1725fd99db745341459f82/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=500b600362b4e119dd1725fd99db745341459f82", "patch": "@@ -50,25 +50,6 @@ pub static MAX: Duration = Duration { days: MAX_DAYS, secs: SECS_PER_DAY as u32\n                                       nanos: NANOS_PER_SEC as u32 - 1 };\n \n impl Duration {\n-    /// Makes a new `Duration` with given number of days, seconds and nanoseconds.\n-    ///\n-    /// Fails when the duration is out of bounds.\n-    #[inline]\n-    pub fn new(days: i32, secs: i32, nanos: i32) -> Duration {\n-        Duration::new_opt(days, secs, nanos).expect(\"Duration::new out of bounds\")\n-    }\n-\n-    /// Makes a new `Duration` with given number of days, seconds and nanoseconds.\n-    ///\n-    /// Returns `None` when the duration is out of bounds.\n-    pub fn new_opt(days: i32, secs: i32, nanos: i32) -> Option<Duration> {\n-        let (secs_, nanos) = div_mod_floor(nanos, NANOS_PER_SEC);\n-        let secs = try_opt!(secs.checked_add(&secs_));\n-        let (days_, secs) = div_mod_floor(secs, SECS_PER_DAY);\n-        let days = try_opt!(days.checked_add(&days_).and_then(|v| v.to_i32()));\n-        Some(Duration { days: days, secs: secs as u32, nanos: nanos as u32 })\n-    }\n-\n     /// Makes a new `Duration` with given number of weeks.\n     /// Equivalent to `Duration::new(weeks * 7, 0, 0)` with overflow checks.\n     ///\n@@ -138,14 +119,6 @@ impl Duration {\n         Duration { nanos: nanos as u32, ..Duration::seconds(secs) }\n     }\n \n-    /// Returns a tuple of the number of days, (non-leap) seconds and nanoseconds in the duration.\n-    /// Note that the number of seconds and nanoseconds are always positive,\n-    /// so that for example `-Duration::seconds(3)` has -1 days and 86,397 seconds.\n-    #[inline]\n-    pub fn to_tuple(&self) -> (i32, u32, u32) {\n-        (self.days, self.secs, self.nanos)\n-    }\n-\n     /// Same as `to_tuple` but returns a tuple compatible to `to_negated_tuple`.\n     #[inline]\n     fn to_tuple_64(&self) -> (i64, u32, u32) {\n@@ -514,8 +487,6 @@ mod tests {\n         assert_eq!(Duration::seconds(86401).num_days(), 1);\n         assert_eq!(Duration::seconds(-86399).num_days(), 0);\n         assert_eq!(Duration::seconds(-86401).num_days(), -1);\n-        assert_eq!(Duration::new(1, 2, 3_004_005).num_days(), 1);\n-        assert_eq!(Duration::new(-1, -2, -3_004_005).num_days(), -1);\n         assert_eq!(Duration::days(i32::MAX).num_days(), i32::MAX);\n         assert_eq!(Duration::days(i32::MIN).num_days(), i32::MIN);\n         assert_eq!(MAX.num_days(), MAX_DAYS);\n@@ -532,8 +503,6 @@ mod tests {\n         assert_eq!(Duration::milliseconds(1001).num_seconds(), 1);\n         assert_eq!(Duration::milliseconds(-999).num_seconds(), 0);\n         assert_eq!(Duration::milliseconds(-1001).num_seconds(), -1);\n-        assert_eq!(Duration::new(1, 2, 3_004_005).num_seconds(), 86402);\n-        assert_eq!(Duration::new(-1, -2, -3_004_005).num_seconds(), -86402);\n         assert_eq!(Duration::seconds(i32::MAX).num_seconds(), i32::MAX as i64);\n         assert_eq!(Duration::seconds(i32::MIN).num_seconds(), i32::MIN as i64);\n         assert_eq!(MAX.num_seconds(), (MAX_DAYS as i64 + 1) * 86400 - 1);\n@@ -550,8 +519,6 @@ mod tests {\n         assert_eq!(Duration::microseconds(1001).num_milliseconds(), 1);\n         assert_eq!(Duration::microseconds(-999).num_milliseconds(), 0);\n         assert_eq!(Duration::microseconds(-1001).num_milliseconds(), -1);\n-        assert_eq!(Duration::new(1, 2, 3_004_005).num_milliseconds(), 86402_003);\n-        assert_eq!(Duration::new(-1, -2, -3_004_005).num_milliseconds(), -86402_003);\n         assert_eq!(Duration::milliseconds(i32::MAX).num_milliseconds(), i32::MAX as i64);\n         assert_eq!(Duration::milliseconds(i32::MIN).num_milliseconds(), i32::MIN as i64);\n         assert_eq!(MAX.num_milliseconds(), (MAX_DAYS as i64 + 1) * 86400_000 - 1);\n@@ -568,8 +535,6 @@ mod tests {\n         assert_eq!(Duration::nanoseconds(1001).num_microseconds(), Some(1));\n         assert_eq!(Duration::nanoseconds(-999).num_microseconds(), Some(0));\n         assert_eq!(Duration::nanoseconds(-1001).num_microseconds(), Some(-1));\n-        assert_eq!(Duration::new(1, 2, 3_004_005).num_microseconds(), Some(86402_003_004));\n-        assert_eq!(Duration::new(-1, -2, -3_004_005).num_microseconds(), Some(-86402_003_004));\n         assert_eq!(Duration::microseconds(i32::MAX).num_microseconds(), Some(i32::MAX as i64));\n         assert_eq!(Duration::microseconds(i32::MIN).num_microseconds(), Some(i32::MIN as i64));\n         assert_eq!(MAX.num_microseconds(), None);\n@@ -591,8 +556,6 @@ mod tests {\n         assert_eq!(d.num_nanoseconds(), Some(0));\n         assert_eq!(Duration::nanoseconds(1).num_nanoseconds(), Some(1));\n         assert_eq!(Duration::nanoseconds(-1).num_nanoseconds(), Some(-1));\n-        assert_eq!(Duration::new(1, 2, 3_004_005).num_nanoseconds(), Some(86402_003_004_005));\n-        assert_eq!(Duration::new(-1, -2, -3_004_005).num_nanoseconds(), Some(-86402_003_004_005));\n         assert_eq!(Duration::nanoseconds(i32::MAX).num_nanoseconds(), Some(i32::MAX as i64));\n         assert_eq!(Duration::nanoseconds(i32::MIN).num_nanoseconds(), Some(i32::MIN as i64));\n         assert_eq!(MAX.num_nanoseconds(), None);"}]}