{"sha": "b8880e32544679561e3543dfb6b8097abfc22565", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ODgwZTMyNTQ0Njc5NTYxZTM1NDNkZmI2YjgwOTdhYmZjMjI1NjU=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-14T23:55:01Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-15T17:41:14Z"}, "message": "Remove `be` keyword.\n\nCloses #2227.", "tree": {"sha": "1bffff7e4898976b4c3e31639940f31a2da3505d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bffff7e4898976b4c3e31639940f31a2da3505d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8880e32544679561e3543dfb6b8097abfc22565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8880e32544679561e3543dfb6b8097abfc22565", "html_url": "https://github.com/rust-lang/rust/commit/b8880e32544679561e3543dfb6b8097abfc22565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8880e32544679561e3543dfb6b8097abfc22565/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "html_url": "https://github.com/rust-lang/rust/commit/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1"}], "stats": {"total": 144, "additions": 40, "deletions": 104}, "files": [{"sha": "3366a60de9bf8e9b07b134b0d5b8e65b0c9123e7", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -210,7 +210,7 @@ The keywords in [source files](#source-files) are the following strings:\n \n ~~~~~~~~ {.keyword}\n alt assert\n-be break\n+break\n check claim class const cont copy crust\n do\n else enum export"}, {"sha": "f91a3151def71cbc2a71856226f24ba8face3721", "filename": "src/librustsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -336,7 +336,6 @@ enum expr_ {\n     expr_break,\n     expr_cont,\n     expr_ret(option<@expr>),\n-    expr_be(@expr),\n     expr_log(int, @expr, @expr),\n \n     expr_new(/* arena */ @expr,"}, {"sha": "4a91dbd362828c847b7fdbb5e7fde059fbfc01dc", "filename": "src/librustsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Ffold.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -488,7 +488,6 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           expr_fail(e) { expr_fail(option::map(e, fld.fold_expr)) }\n           expr_break | expr_cont { e }\n           expr_ret(e) { expr_ret(option::map(e, fld.fold_expr)) }\n-          expr_be(e) { expr_be(fld.fold_expr(e)) }\n           expr_log(i, lv, e) { expr_log(i, fld.fold_expr(lv),\n                                         fld.fold_expr(e)) }\n           expr_assert(e) { expr_assert(fld.fold_expr(e)) }"}, {"sha": "471fe15788d7c4633fe288844b4e0768c3555a3c", "filename": "src/librustsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fclassify.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -42,7 +42,6 @@ fn need_parens(expr: @ast::expr, outer_prec: uint) -> bool {\n       ast::expr_swap(_, _) { true }\n       ast::expr_assign_op(_, _, _) { true }\n       ast::expr_ret(_) { true }\n-      ast::expr_be(_) { true }\n       ast::expr_assert(_) { true }\n       ast::expr_check(_, _) { true }\n       ast::expr_log(_, _, _) { true }\n@@ -55,7 +54,7 @@ fn ends_in_lit_int(ex: @ast::expr) -> bool {\n       ast::expr_lit(@{node: ast::lit_int(_, ast::ty_i), _}) { true }\n       ast::expr_binary(_, _, sub) | ast::expr_unary(_, sub) |\n       ast::expr_move(_, sub) | ast::expr_copy(sub) |\n-      ast::expr_assign(_, sub) | ast::expr_be(sub) |\n+      ast::expr_assign(_, sub) |\n       ast::expr_assign_op(_, _, sub) | ast::expr_swap(_, sub) |\n       ast::expr_log(_, _, sub) | ast::expr_assert(sub) |\n       ast::expr_check(_, sub) { ends_in_lit_int(sub) }"}, {"sha": "debdd3d57eb76744c3be5fcbd0db106e3a4aa7c1", "filename": "src/librustsyntax/parse/lexer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Flexer.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -104,7 +104,7 @@ fn is_bin_digit(c: char) -> bool { ret c == '0' || c == '1'; }\n \n fn consume_whitespace_and_comments(rdr: reader) {\n     while is_whitespace(rdr.curr) { rdr.bump(); }\n-    be consume_any_line_comment(rdr);\n+    ret consume_any_line_comment(rdr);\n }\n \n fn consume_any_line_comment(rdr: reader) {\n@@ -114,9 +114,9 @@ fn consume_any_line_comment(rdr: reader) {\n             while rdr.curr != '\\n' && !rdr.is_eof() { rdr.bump(); }\n             // Restart whitespace munch.\n \n-            be consume_whitespace_and_comments(rdr);\n+            ret consume_whitespace_and_comments(rdr);\n           }\n-          '*' { rdr.bump(); rdr.bump(); be consume_block_comment(rdr); }\n+          '*' { rdr.bump(); rdr.bump(); ret consume_block_comment(rdr); }\n           _ { ret; }\n         }\n     }\n@@ -140,7 +140,7 @@ fn consume_block_comment(rdr: reader) {\n     }\n     // restart whitespace munch.\n \n-    be consume_whitespace_and_comments(rdr);\n+    ret consume_whitespace_and_comments(rdr);\n }\n \n fn scan_exponent(rdr: reader) -> option<str> {"}, {"sha": "eb25660b45f0fb5cd322b1da17335ceea325f79f", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -825,10 +825,6 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n     } else if eat_keyword(p, \"cont\") {\n         ex = expr_cont;\n         hi = p.span.hi;\n-    } else if eat_keyword(p, \"be\") {\n-        let e = parse_expr(p);\n-        hi = e.span.hi;\n-        ex = expr_be(e);\n     } else if eat_keyword(p, \"copy\") {\n         let e = parse_expr(p);\n         ex = expr_copy(e);"}, {"sha": "70e3ec33c62093d38f7103f68caaf9fd4c1b4aa1", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -80,24 +80,24 @@ fn print_crate_(s: ps, &&crate: @ast::crate) {\n     eof(s.s);\n }\n \n-fn ty_to_str(ty: @ast::ty) -> str { be to_str(ty, print_type); }\n+fn ty_to_str(ty: @ast::ty) -> str { ret to_str(ty, print_type); }\n \n-fn pat_to_str(pat: @ast::pat) -> str { be to_str(pat, print_pat); }\n+fn pat_to_str(pat: @ast::pat) -> str { ret to_str(pat, print_pat); }\n \n-fn expr_to_str(e: @ast::expr) -> str { be to_str(e, print_expr); }\n+fn expr_to_str(e: @ast::expr) -> str { ret to_str(e, print_expr); }\n \n-fn stmt_to_str(s: ast::stmt) -> str { be to_str(s, print_stmt); }\n+fn stmt_to_str(s: ast::stmt) -> str { ret to_str(s, print_stmt); }\n \n-fn item_to_str(i: @ast::item) -> str { be to_str(i, print_item); }\n+fn item_to_str(i: @ast::item) -> str { ret to_str(i, print_item); }\n \n-fn attr_to_str(i: ast::attribute) -> str { be to_str(i, print_attribute); }\n+fn attr_to_str(i: ast::attribute) -> str { ret to_str(i, print_attribute); }\n \n fn typarams_to_str(tps: [ast::ty_param]) -> str {\n-    be to_str(tps, print_type_params)\n+    ret to_str(tps, print_type_params)\n }\n \n fn path_to_str(&&p: @ast::path) -> str {\n-    be to_str(p, bind print_path(_, _, false));\n+    ret to_str(p, bind print_path(_, _, false));\n }\n \n fn fun_to_str(decl: ast::fn_decl, name: ast::ident,\n@@ -174,11 +174,11 @@ fn meta_item_to_str(mi: ast::meta_item) -> str {\n }\n \n fn attribute_to_str(attr: ast::attribute) -> str {\n-    be to_str(attr, print_attribute);\n+    ret to_str(attr, print_attribute);\n }\n \n fn variant_to_str(var: ast::variant) -> str {\n-    be to_str(var, print_variant);\n+    ret to_str(var, print_variant);\n }\n \n #[test]\n@@ -1102,7 +1102,6 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n           _ { }\n         }\n       }\n-      ast::expr_be(result) { word_nbsp(s, \"be\"); print_expr(s, result); }\n       ast::expr_log(lvl, lexp, expr) {\n         alt check lvl {\n           1 { word_nbsp(s, \"log\"); print_expr(s, expr); }\n@@ -1149,7 +1148,7 @@ fn print_expr_parens_if_not_bot(s: ps, ex: @ast::expr) {\n       ast::expr_fail(_) | ast::expr_ret(_) |\n       ast::expr_binary(_, _, _) | ast::expr_unary(_, _) |\n       ast::expr_move(_, _) | ast::expr_copy(_) |\n-      ast::expr_assign(_, _) | ast::expr_be(_) |\n+      ast::expr_assign(_, _) |\n       ast::expr_assign_op(_, _, _) | ast::expr_swap(_, _) |\n       ast::expr_log(_, _, _) | ast::expr_assert(_) |\n       ast::expr_call(_, _, true) |\n@@ -1623,7 +1622,7 @@ fn print_literal(s: ps, &&lit: @ast::lit) {\n     }\n }\n \n-fn lit_to_str(l: @ast::lit) -> str { be to_str(l, print_literal); }\n+fn lit_to_str(l: @ast::lit) -> str { ret to_str(l, print_literal); }\n \n fn next_lit(s: ps, pos: uint) -> option<comments::lit> {\n     alt s.literals {"}, {"sha": "2a926c1fa9dca3bcc4425c8c3cdbeb09abf455df", "filename": "src/librustsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibrustsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fvisit.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -422,7 +422,6 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       expr_break { }\n       expr_cont { }\n       expr_ret(eo) { visit_expr_opt(eo, e, v); }\n-      expr_be(x) { v.visit_expr(x, e, v); }\n       expr_log(_, lv, x) {\n         v.visit_expr(lv, e, v);\n         v.visit_expr(x, e, v);"}, {"sha": "9a7483553dc092cb6014fa55ec2088ab00b94782", "filename": "src/libstd/ufind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibstd%2Fufind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Flibstd%2Fufind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fufind.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -28,7 +28,7 @@ fn grow(ufnd: ufind, n: uint) {\n fn find(ufnd: ufind, n: uint) -> uint {\n     alt ufnd.nodes[n] {\n       none { ret n; }\n-      some(m) { let m_ = m; be find(ufnd, m_); }\n+      some(m) { let m_ = m; ret find(ufnd, m_); }\n     }\n }\n "}, {"sha": "ed3104958130f9b4a84b8c4a69801634ce3e53ad", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -972,7 +972,7 @@ impl categorize_methods for borrowck_ctxt {\n           ast::expr_swap(*) | ast::expr_move(*) | ast::expr_assign(*) |\n           ast::expr_assign_op(*) | ast::expr_fn(*) | ast::expr_fn_block(*) |\n           ast::expr_assert(*) | ast::expr_check(*) | ast::expr_ret(*) |\n-          ast::expr_be(*) | ast::expr_loop_body(*) | ast::expr_unary(*) |\n+          ast::expr_loop_body(*) | ast::expr_unary(*) |\n           ast::expr_copy(*) | ast::expr_cast(*) | ast::expr_fail(*) |\n           ast::expr_vstore(*) | ast::expr_vec(*) | ast::expr_tup(*) |\n           ast::expr_if_check(*) | ast::expr_if(*) | ast::expr_log(*) |"}, {"sha": "098ec82ac0a5dc484024d64853f9bb075b94b0d4", "filename": "src/rustc/middle/check_loop.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_loop.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -44,12 +44,6 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n                 }\n                 visit::visit_expr_opt(oe, cx, v);\n               }\n-              expr_be(re) {\n-                if !cx.can_ret {\n-                    tcx.sess.span_err(e.span, \"`be` in block function\");\n-                }\n-                v.visit_expr(re, cx, v);\n-              }\n               _ { visit::visit_expr(e, cx, v); }\n             }\n         }"}, {"sha": "cec6f197da8cf07249fdad709727e93fa8c0b72c", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -3267,9 +3267,6 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n         assert dest == ignore;\n         ret trans_ret(bcx, ex);\n       }\n-      ast::expr_be(ex) {\n-        ret trans_be(bcx, ex);\n-      }\n       ast::expr_fail(expr) {\n         assert dest == ignore;\n         ret trans_fail_expr(bcx, some(e.span), expr);\n@@ -3641,13 +3638,6 @@ fn build_return(bcx: block) {\n     Br(bcx, bcx.fcx.llreturn);\n }\n \n-fn trans_be(cx: block, e: @ast::expr) -> block {\n-    // FIXME: Turn this into a real tail call once\n-    // calling convention issues are settled\n-    let _icx = cx.insn_ctxt(\"trans_be\");\n-    ret trans_ret(cx, some(e));\n-}\n-\n fn init_local(bcx: block, local: @ast::local) -> block {\n     let _icx = bcx.insn_ctxt(\"init_local\");\n     let ty = node_id_type(bcx, local.node.id);"}, {"sha": "38b0bd086977eb25eb019beae7e8b62fabdc715f", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -172,7 +172,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n         }\n       }\n       expr_assign(val, _) | expr_swap(val, _) | expr_assign_op(_, val, _) |\n-      expr_ret(some(val)) | expr_be(val) {\n+      expr_ret(some(val)) {\n         node_type_needs(cx, use_repr, val.id);\n       }\n       expr_index(base, _) | expr_field(base, _, _) {"}, {"sha": "ab8c921a00859a5bbf288588e4aca53ffab29cf7", "filename": "src/rustc/middle/tstate/ann.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftstate%2Fann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftstate%2Fann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fann.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -41,13 +41,15 @@ type pre_and_post_state = {prestate: prestate, poststate: poststate};\n \n type ts_ann = @{conditions: pre_and_post, states: pre_and_post_state};\n \n-fn true_precond(num_vars: uint) -> precond { be create_tritv(num_vars); }\n+fn true_precond(num_vars: uint) -> precond { ret create_tritv(num_vars); }\n \n-fn true_postcond(num_vars: uint) -> postcond { be true_precond(num_vars); }\n+fn true_postcond(num_vars: uint) -> postcond { ret true_precond(num_vars); }\n \n-fn empty_prestate(num_vars: uint) -> prestate { be true_precond(num_vars); }\n+fn empty_prestate(num_vars: uint) -> prestate { ret true_precond(num_vars); }\n \n-fn empty_poststate(num_vars: uint) -> poststate { be true_precond(num_vars); }\n+fn empty_poststate(num_vars: uint) -> poststate {\n+    ret true_precond(num_vars);\n+}\n \n fn false_postcond(num_vars: uint) -> postcond {\n     let rslt = create_tritv(num_vars);"}, {"sha": "7b8c864580d8d157675c77fa1a9fd17633e1eede", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -391,11 +391,6 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n           }\n         }\n       }\n-      expr_be(val) {\n-        find_pre_post_expr(fcx, val);\n-        set_pre_and_post(fcx.ccx, e.id, expr_prestate(fcx.ccx, val),\n-                         false_postcond(num_local_vars));\n-      }\n       expr_if(antec, conseq, maybe_alt) {\n         join_then_else(fcx, antec, conseq, maybe_alt, e.id, plain_if);\n       }"}, {"sha": "4e484fccd0784e9439e88e39b8539122fe11b8c6", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -483,14 +483,6 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         }\n         ret changed;\n       }\n-      expr_be(val) {\n-        let mut changed = set_prestate_ann(fcx.ccx, e.id, pres);\n-        let post = false_postcond(num_constrs);\n-        // except for the \"diverges\" bit...\n-        kill_poststate_(fcx, fcx.enclosing.i_diverge, post);\n-        set_poststate_ann(fcx.ccx, e.id, post);\n-        ret changed | find_pre_post_state_expr(fcx, pres, val);\n-      }\n       expr_if(antec, conseq, maybe_alt) {\n         ret join_then_else(fcx, antec, conseq, maybe_alt, e.id, plain_if,\n                            pres);"}, {"sha": "09a1ef7c4c35a77abf963156343810a7137aa718", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -1456,7 +1456,7 @@ fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n           ty_box(mt) |\n           ty_uniq(mt) |\n           ty_rptr(_, mt) {\n-            be type_requires(cx, seen, r_ty, mt.ty);\n+            ret type_requires(cx, seen, r_ty, mt.ty);\n           }\n \n           ty_ptr(mt) {"}, {"sha": "6f9b767a870c88e4ab435d36c1d475943e7058dd", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -3364,15 +3364,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         }\n         fcx.write_bot(id);\n       }\n-      ast::expr_be(e) {\n-        if !ast_util::is_call_expr(e) {\n-           tcx.sess.span_err(expr.span,\n-              \"non-call expression in tail call\");\n-        }\n-        check_expr_with(fcx, e, fcx.ret_ty);\n-        bot = true;\n-        fcx.write_nil(id);\n-      }\n       ast::expr_log(_, lv, e) {\n         bot = check_expr_with(fcx, lv, ty::mk_mach_uint(tcx, ast::ty_u32));\n         // Note: this does not always execute, so do not propagate bot:"}, {"sha": "ccd6b6ca098db31827fddd9f584b3b82a533f221", "filename": "src/test/bench/99bob-tail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Fbench%2F99bob-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Fbench%2F99bob-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-tail.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -12,21 +12,21 @@ fn main() {\n         #debug(\"Take one down and pass it around, %d \\\n                 bottles of beer on the wall.\", n-1);\n         #debug(\"\");\n-        if n > 3 { be multiple(n - 1); } else { be dual(); }\n+        if n > 3 { ret multiple(n - 1); } else { ret dual(); }\n     }\n     fn dual() {\n         #debug(\"2 bottles of beer on the wall, 2 bottles of beer,\");\n         #debug(\"Take one down and pass it around, \\\n                 1 bottle of beer on the wall.\");\n         #debug(\"\");\n-        be single();\n+        ret single();\n     }\n     fn single() {\n         #debug(\"1 bottle of beer on the wall, 1 bottle of beer,\");\n         #debug(\"Take one down and pass it around, \\\n                 no more bottles of beer on the wall.\");\n         #debug(\"\");\n-        be none();\n+        ret none();\n     }\n     fn none() {\n         #debug(\"No more bottles of beer on the wall, \\"}, {"sha": "bb1e4eab85c242adce347671acaf18e201764223", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -35,8 +35,8 @@ fn select_random(r: u32, genelist: [aminoacids]) -> char {\n         if hi > lo + 1u {\n             let mid: uint = lo + (hi - lo) / 2u;\n             if target < v[mid].prob {\n-                be bisect(v, lo, mid, target);\n-            } else { be bisect(v, mid, hi, target); }\n+                ret bisect(v, lo, mid, target);\n+            } else { ret bisect(v, mid, hi, target); }\n         } else { ret v[hi].ch; }\n     }\n     ret bisect(genelist, 0u, vec::len::<aminoacids>(genelist) - 1u, r);"}, {"sha": "bc7ec4491eeab10917847c24a16b37740201227a", "filename": "src/test/compile-fail/dead-code-be.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Ftest%2Fcompile-fail%2Fdead-code-be.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Ftest%2Fcompile-fail%2Fdead-code-be.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-be.rs?ref=452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "patch": "@@ -1,9 +0,0 @@\n-// xfail-test\n-// -*- rust -*-\n-\n-// error-pattern: dead\n-\n-fn f(caller: str) { log(debug, caller); }\n-\n-fn main() { be f(\"main\"); #debug(\"Paul is dead\"); }\n-"}, {"sha": "4d78b7a7aff91e7036d66545322c99d1565d09c5", "filename": "src/test/compile-fail/forgot-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -1,7 +1,7 @@\n // -*- rust -*-\n // error-pattern: not all control paths return a value\n \n-fn god_exists(a: int) -> bool { be god_exists(a); }\n+fn god_exists(a: int) -> bool { ret god_exists(a); }\n \n fn f(a: int) -> int { if god_exists(a) { ret 5; }; }\n "}, {"sha": "f2622bc4dfa18aff25782386f2d2a9a77f68b18e", "filename": "src/test/compile-fail/tail-non-call.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Ftest%2Fcompile-fail%2Ftail-non-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Ftest%2Fcompile-fail%2Ftail-non-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftail-non-call.rs?ref=452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "patch": "@@ -1,10 +0,0 @@\n-// error-pattern:non-call expression in tail call\n-\n-fn f() -> int {\n-  let x = 1;\n-  be x;\n-}\n-\n-fn main() {\n-  let y = f();\n-}"}, {"sha": "0c64e9d9556246fe2c087a13df79ba820477d621", "filename": "src/test/compile-fail/tail-typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: mismatched types\n \n-fn f() -> int { be g(); }\n+fn f() -> int { ret g(); }\n \n fn g() -> uint { ret 0u; }\n "}, {"sha": "269fa53211d0634d9889685d9c476059e25a2205", "filename": "src/test/run-pass/tail-call-arg-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Frun-pass%2Ftail-call-arg-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Frun-pass%2Ftail-call-arg-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-call-arg-leak.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -2,6 +2,6 @@\n \n \n // use of tail calls causes arg slot leaks, issue #160.\n-fn inner(dummy: str, b: bool) { if b { be inner(dummy, false); } }\n+fn inner(dummy: str, b: bool) { if b { ret inner(dummy, false); } }\n \n fn main() { inner(\"hi\", true); }"}, {"sha": "a5cb9c6f5fae67f1a03da959037ea8eecf6a29ab", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -9,11 +9,11 @@ fn main() { let k = checktrue; evenk(42, k); oddk(45, k); }\n fn evenk(n: int, k: native fn(bool) -> bool) -> bool {\n     #debug(\"evenk\");\n     log(debug, n);\n-    if n == 0 { be k(true); } else { be oddk(n - 1, k); }\n+    if n == 0 { ret k(true); } else { ret oddk(n - 1, k); }\n }\n \n fn oddk(n: int, k: native fn(bool) -> bool) -> bool {\n     #debug(\"oddk\");\n     log(debug, n);\n-    if n == 0 { be k(false); } else { be evenk(n - 1, k); }\n+    if n == 0 { ret k(false); } else { ret evenk(n - 1, k); }\n }"}, {"sha": "bfb0b19340ee8deb1128c36a3c4dce2060b30f14", "filename": "src/test/run-pass/tail-direct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Frun-pass%2Ftail-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8880e32544679561e3543dfb6b8097abfc22565/src%2Ftest%2Frun-pass%2Ftail-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-direct.rs?ref=b8880e32544679561e3543dfb6b8097abfc22565", "patch": "@@ -4,6 +4,6 @@\n // -*- rust -*-\n fn main() { assert (even(42)); assert (odd(45)); }\n \n-fn even(n: int) -> bool { if n == 0 { ret true; } else { be odd(n - 1); } }\n+fn even(n: int) -> bool { if n == 0 { ret true; } else { ret odd(n - 1); } }\n \n-fn odd(n: int) -> bool { if n == 0 { ret false; } else { be even(n - 1); } }\n+fn odd(n: int) -> bool { if n == 0 { ret false; } else { ret even(n - 1); } }"}]}