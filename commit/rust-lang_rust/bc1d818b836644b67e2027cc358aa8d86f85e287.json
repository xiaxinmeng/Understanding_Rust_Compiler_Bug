{"sha": "bc1d818b836644b67e2027cc358aa8d86f85e287", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMWQ4MThiODM2NjQ0YjY3ZTIwMjdjYzM1OGFhOGQ4NmY4NWUyODc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:04:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T17:27:35Z"}, "message": "rollup merge of #20057: nick29581/array-syntax\n\nThis does NOT break any existing programs because the `[_, ..n]` syntax is also supported.\n\nPart of #19999\n\nr? @nikomatsakis", "tree": {"sha": "11b330e75932bfa569665e03314fc2c8bcbc1c5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11b330e75932bfa569665e03314fc2c8bcbc1c5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc1d818b836644b67e2027cc358aa8d86f85e287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1d818b836644b67e2027cc358aa8d86f85e287", "html_url": "https://github.com/rust-lang/rust/commit/bc1d818b836644b67e2027cc358aa8d86f85e287", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc1d818b836644b67e2027cc358aa8d86f85e287/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e62684bb4cf10cef5f5335f5baaf838f3a541c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e62684bb4cf10cef5f5335f5baaf838f3a541c0", "html_url": "https://github.com/rust-lang/rust/commit/7e62684bb4cf10cef5f5335f5baaf838f3a541c0"}, {"sha": "2e86929a4a5a36f3993e577b4582ba70d84bbb40", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e86929a4a5a36f3993e577b4582ba70d84bbb40", "html_url": "https://github.com/rust-lang/rust/commit/2e86929a4a5a36f3993e577b4582ba70d84bbb40"}], "stats": {"total": 526, "additions": 260, "deletions": 266}, "files": [{"sha": "34d89162249fa21b4bb848446bc61b64bc35c20f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -453,7 +453,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         ty_vec(t, sz) => {\n             let inner_str = ty_to_string(cx, t);\n             match sz {\n-                Some(n) => format!(\"[{}, ..{}]\", inner_str, n),\n+                Some(n) => format!(\"[{}; {}]\", inner_str, n),\n                 None => format!(\"[{}]\", inner_str),\n             }\n         }"}, {"sha": "51e3a83f81f5a90c6b9e7c07dff3913a71630b7c", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -333,7 +333,7 @@ impl<'tcx> TypeMap<'tcx> {\n         // mut ptr (*mut)       -> {*mut :pointee-uid:}\n         // unique ptr (~)       -> {~ :pointee-uid:}\n         // @-ptr (@)            -> {@ :pointee-uid:}\n-        // sized vec ([T, ..x]) -> {[:size:] :element-uid:}\n+        // sized vec ([T; x])   -> {[:size:] :element-uid:}\n         // unsized vec ([T])    -> {[] :element-uid:}\n         // trait (T)            -> {trait_:svh: / :node-id:_<(:param-uid:),*> }\n         // closure              -> {<unsafe_> <once_> :store-sigil: |(:param-uid:),* <,_...>| -> \\\n@@ -3803,7 +3803,7 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             match optional_length {\n                 Some(len) => {\n-                    output.push_str(format!(\", ..{}\", len).as_slice());\n+                    output.push_str(format!(\"; {}\", len).as_slice());\n                 }\n                 None => { /* nothing to do */ }\n             };"}, {"sha": "19af118b190517d57591b43021ea101c8400af05", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -1545,7 +1545,7 @@ impl<'a> Parser<'a> {\n             self.expect(&token::OpenDelim(token::Bracket));\n             let t = self.parse_ty_sum();\n \n-            // Parse the `, ..e` in `[ int, ..e ]`\n+            // Parse the `; e` in `[ int; e ]`\n             // where `e` is a const expression\n             let t = match self.maybe_parse_fixed_vstore() {\n                 None => TyVec(t),\n@@ -1713,6 +1713,9 @@ impl<'a> Parser<'a> {\n             self.bump();\n             self.bump();\n             Some(self.parse_expr())\n+        } else if self.check(&token::Semi) {\n+            self.bump();\n+            Some(self.parse_expr())\n         } else {\n             None\n         }\n@@ -2259,6 +2262,12 @@ impl<'a> Parser<'a> {\n                         let count = self.parse_expr();\n                         self.expect(&token::CloseDelim(token::Bracket));\n                         ex = ExprRepeat(first_expr, count);\n+                    } else if self.check(&token::Semi) {\n+                        // Repeating vector syntax: [ 0; 512 ]\n+                        self.bump();\n+                        let count = self.parse_expr();\n+                        self.expect(&token::CloseDelim(token::Bracket));\n+                        ex = ExprRepeat(first_expr, count);\n                     } else if self.check(&token::Comma) {\n                         // Vector with two or more elements.\n                         self.bump();"}, {"sha": "a9717a526ad9db6cb28327ec56cc97d5df7c0e25", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -755,7 +755,7 @@ impl<'a> State<'a> {\n             ast::TyFixedLengthVec(ref ty, ref v) => {\n                 try!(word(&mut self.s, \"[\"));\n                 try!(self.print_type(&**ty));\n-                try!(word(&mut self.s, \", ..\"));\n+                try!(word(&mut self.s, \"; \"));\n                 try!(self.print_expr(&**v));\n                 try!(word(&mut self.s, \"]\"));\n             }\n@@ -1531,8 +1531,7 @@ impl<'a> State<'a> {\n                 try!(self.ibox(indent_unit));\n                 try!(word(&mut self.s, \"[\"));\n                 try!(self.print_expr(&**element));\n-                try!(word(&mut self.s, \",\"));\n-                try!(word(&mut self.s, \"..\"));\n+                try!(self.word_space(\";\"));\n                 try!(self.print_expr(&**count));\n                 try!(word(&mut self.s, \"]\"));\n                 try!(self.end());"}, {"sha": "d97a2e3cda129d9da850ae0acf5507ff21b3c033", "filename": "src/test/auxiliary/nested_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnested_item.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -28,7 +28,7 @@ impl<T> Foo {\n pub struct Parser<T>;\n impl<T: std::iter::Iterator<char>> Parser<T> {\n     fn in_doctype(&mut self) {\n-        static DOCTYPEPattern: [char, ..6] = ['O', 'C', 'T', 'Y', 'P', 'E'];\n+        static DOCTYPEPattern: [char; 6] = ['O', 'C', 'T', 'Y', 'P', 'E'];\n     }\n }\n "}, {"sha": "75cf864ce49612a00d48e336c4dd12ef8d03fd8e", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -37,20 +37,20 @@ fn gradient(orig: Vec2, grad: Vec2, p: Vec2) -> f32 {\n }\n \n struct Noise2DContext {\n-    rgradients: [Vec2, ..256],\n-    permutations: [i32, ..256],\n+    rgradients: [Vec2; 256],\n+    permutations: [i32; 256],\n }\n \n impl Noise2DContext {\n     fn new() -> Noise2DContext {\n         let mut rng = StdRng::new().unwrap();\n \n-        let mut rgradients = [Vec2 { x: 0.0, y: 0.0 }, ..256];\n+        let mut rgradients = [Vec2 { x: 0.0, y: 0.0 }; 256];\n         for x in rgradients.iter_mut() {\n             *x = random_gradient(&mut rng);\n         }\n \n-        let mut permutations = [0i32, ..256];\n+        let mut permutations = [0i32; 256];\n         for (i, x) in permutations.iter_mut().enumerate() {\n             *x = i as i32;\n         }\n@@ -65,7 +65,7 @@ impl Noise2DContext {\n         self.rgradients[(idx & 255) as uint]\n     }\n \n-    fn get_gradients(&self, x: f32, y: f32) -> ([Vec2, ..4], [Vec2, ..4]) {\n+    fn get_gradients(&self, x: f32, y: f32) -> ([Vec2; 4], [Vec2; 4]) {\n         let x0f = x.floor();\n         let y0f = y.floor();\n         let x1f = x0f + 1.0;\n@@ -102,7 +102,7 @@ impl Noise2DContext {\n \n fn main() {\n     let symbols = [' ', '\u2591', '\u2592', '\u2593', '\u2588', '\u2588'];\n-    let mut pixels = [0f32, ..256*256];\n+    let mut pixels = [0f32; 256*256];\n     let n2d = Noise2DContext::new();\n \n     for _ in range(0u, 100) {"}, {"sha": "723b2b722d7e12258380e0594f9418367cf29975", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -64,14 +64,14 @@ fn next_permutation(perm: &mut [i32], count: &mut [i32]) {\n }\n \n struct P {\n-    p: [i32, .. 16],\n+    p: [i32; 16],\n }\n \n impl Copy for P {}\n \n struct Perm {\n-    cnt: [i32, .. 16],\n-    fact: [u32, .. 16],\n+    cnt: [i32; 16],\n+    fact: [u32; 16],\n     n: u32,\n     permcount: u32,\n     perm: P,\n@@ -81,21 +81,21 @@ impl Copy for Perm {}\n \n impl Perm {\n     fn new(n: u32) -> Perm {\n-        let mut fact = [1, .. 16];\n+        let mut fact = [1; 16];\n         for i in range(1, n as uint + 1) {\n             fact[i] = fact[i - 1] * i as u32;\n         }\n         Perm {\n-            cnt: [0, .. 16],\n+            cnt: [0; 16],\n             fact: fact,\n             n: n,\n             permcount: 0,\n-            perm: P { p: [0, .. 16 ] }\n+            perm: P { p: [0; 16 ] }\n         }\n     }\n \n     fn get(&mut self, mut idx: i32) -> P {\n-        let mut pp = [0u8, .. 16];\n+        let mut pp = [0u8; 16];\n         self.permcount = idx as u32;\n         for (i, place) in self.perm.p.iter_mut().enumerate() {\n             *place = i as i32 + 1;"}, {"sha": "eb18cfdaed3ad73bfc6b92ddab96c9880416a6ff", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -64,7 +64,7 @@ const ALU: &'static str = \"GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTG\\\n \n const NULL_AMINO_ACID: AminoAcid = AminoAcid { c: ' ' as u8, p: 0.0 };\n \n-static IUB: [AminoAcid, ..15] = [\n+static IUB: [AminoAcid;15] = [\n     AminoAcid { c: 'a' as u8, p: 0.27 },\n     AminoAcid { c: 'c' as u8, p: 0.12 },\n     AminoAcid { c: 'g' as u8, p: 0.12 },\n@@ -82,7 +82,7 @@ static IUB: [AminoAcid, ..15] = [\n     AminoAcid { c: 'Y' as u8, p: 0.02 },\n ];\n \n-static HOMO_SAPIENS: [AminoAcid, ..4] = [\n+static HOMO_SAPIENS: [AminoAcid;4] = [\n     AminoAcid { c: 'a' as u8, p: 0.3029549426680 },\n     AminoAcid { c: 'c' as u8, p: 0.1979883004921 },\n     AminoAcid { c: 'g' as u8, p: 0.1975473066391 },\n@@ -148,8 +148,8 @@ impl<'a, W: Writer> RepeatFasta<'a, W> {\n     }\n }\n \n-fn make_lookup(a: &[AminoAcid]) -> [AminoAcid, ..LOOKUP_SIZE] {\n-    let mut lookup = [ NULL_AMINO_ACID, ..LOOKUP_SIZE ];\n+fn make_lookup(a: &[AminoAcid]) -> [AminoAcid;LOOKUP_SIZE] {\n+    let mut lookup = [ NULL_AMINO_ACID;LOOKUP_SIZE ];\n     let mut j = 0;\n     for (i, slot) in lookup.iter_mut().enumerate() {\n         while a[j].p < (i as f32) {\n@@ -162,7 +162,7 @@ fn make_lookup(a: &[AminoAcid]) -> [AminoAcid, ..LOOKUP_SIZE] {\n \n struct RandomFasta<'a, W:'a> {\n     seed: u32,\n-    lookup: [AminoAcid, ..LOOKUP_SIZE],\n+    lookup: [AminoAcid;LOOKUP_SIZE],\n     out: &'a mut W,\n }\n \n@@ -193,7 +193,7 @@ impl<'a, W: Writer> RandomFasta<'a, W> {\n     fn make(&mut self, n: uint) -> IoResult<()> {\n         let lines = n / LINE_LEN;\n         let chars_left = n % LINE_LEN;\n-        let mut buf = [0, ..LINE_LEN + 1];\n+        let mut buf = [0;LINE_LEN + 1];\n \n         for _ in range(0, lines) {\n             for i in range(0u, LINE_LEN) {"}, {"sha": "2de61cf3572c92c8cce0926f142df7ce48ff7e82", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -89,7 +89,7 @@ fn make_fasta<W: Writer, I: Iterator<u8>>(\n     -> std::io::IoResult<()>\n {\n     try!(wr.write(header.as_bytes()));\n-    let mut line = [0u8, .. LINE_LENGTH + 1];\n+    let mut line = [0u8; LINE_LENGTH + 1];\n     while n > 0 {\n         let nb = min(LINE_LENGTH, n);\n         for i in range(0, nb) {"}, {"sha": "8521e2216e93f607f4bd24836f5a3ea5fd011f1b", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -46,10 +46,10 @@ use std::string::String;\n use std::slice;\n use std::sync::{Arc, Future};\n \n-static TABLE: [u8, ..4] = [ 'A' as u8, 'C' as u8, 'G' as u8, 'T' as u8 ];\n+static TABLE: [u8;4] = [ 'A' as u8, 'C' as u8, 'G' as u8, 'T' as u8 ];\n static TABLE_SIZE: uint = 2 << 16;\n \n-static OCCURRENCES: [&'static str, ..5] = [\n+static OCCURRENCES: [&'static str;5] = [\n     \"GGT\",\n     \"GGTA\",\n     \"GGTATT\","}, {"sha": "dab67331120a9d6508477095c79c9891d30d2d13", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -45,7 +45,7 @@ const SOLAR_MASS: f64 = 4.0 * PI * PI;\n const YEAR: f64 = 365.24;\n const N_BODIES: uint = 5;\n \n-static BODIES: [Planet, ..N_BODIES] = [\n+static BODIES: [Planet;N_BODIES] = [\n     // Sun\n     Planet {\n         x: 0.0, y: 0.0, z: 0.0,\n@@ -102,7 +102,7 @@ struct Planet {\n \n impl Copy for Planet {}\n \n-fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: int) {\n+fn advance(bodies: &mut [Planet;N_BODIES], dt: f64, steps: int) {\n     for _ in range(0, steps) {\n         let mut b_slice = bodies.as_mut_slice();\n         loop {\n@@ -135,7 +135,7 @@ fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: int) {\n     }\n }\n \n-fn energy(bodies: &[Planet, ..N_BODIES]) -> f64 {\n+fn energy(bodies: &[Planet;N_BODIES]) -> f64 {\n     let mut e = 0.0;\n     let mut bodies = bodies.iter();\n     loop {\n@@ -155,7 +155,7 @@ fn energy(bodies: &[Planet, ..N_BODIES]) -> f64 {\n     e\n }\n \n-fn offset_momentum(bodies: &mut [Planet, ..N_BODIES]) {\n+fn offset_momentum(bodies: &mut [Planet;N_BODIES]) {\n     let mut px = 0.0;\n     let mut py = 0.0;\n     let mut pz = 0.0;"}, {"sha": "d746ec1dbabd555ca940a4765dbb7def04526db0", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -50,17 +50,17 @@ use std::ptr::{copy_memory};\n use std::io::{IoResult, EndOfFile};\n \n struct Tables {\n-    table8: [u8, ..1 << 8],\n-    table16: [u16, ..1 << 16]\n+    table8: [u8;1 << 8],\n+    table16: [u16;1 << 16]\n }\n \n impl Tables {\n     fn new() -> Tables {\n-        let mut table8 = [0, ..1 << 8];\n+        let mut table8 = [0;1 << 8];\n         for (i, v) in table8.iter_mut().enumerate() {\n             *v = Tables::computed_cpl8(i as u8);\n         }\n-        let mut table16 = [0, ..1 << 16];\n+        let mut table16 = [0;1 << 16];\n         for (i, v) in table16.iter_mut().enumerate() {\n             *v = table8[i & 255] as u16 << 8 |\n                  table8[i >> 8]  as u16;"}, {"sha": "5fb7e2c3a84989b9095fece1f3675c352a09dc51", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -46,7 +46,7 @@ impl Sudoku {\n         return Sudoku { grid: g }\n     }\n \n-    pub fn from_vec(vec: &[[u8, ..9], ..9]) -> Sudoku {\n+    pub fn from_vec(vec: &[[u8;9];9]) -> Sudoku {\n         let g = Vec::from_fn(9u, |i| {\n             Vec::from_fn(9u, |j| { vec[i][j] })\n         });\n@@ -198,7 +198,7 @@ impl Colors {\n     }\n }\n \n-static DEFAULT_SUDOKU: [[u8, ..9], ..9] = [\n+static DEFAULT_SUDOKU: [[u8;9];9] = [\n          /* 0    1    2    3    4    5    6    7    8    */\n   /* 0 */  [0u8, 4u8, 0u8, 6u8, 0u8, 0u8, 0u8, 3u8, 2u8],\n   /* 1 */  [0u8, 0u8, 8u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8],\n@@ -212,7 +212,7 @@ static DEFAULT_SUDOKU: [[u8, ..9], ..9] = [\n ];\n \n #[cfg(test)]\n-static DEFAULT_SOLUTION: [[u8, ..9], ..9] = [\n+static DEFAULT_SOLUTION: [[u8;9];9] = [\n          /* 0    1    2    3    4    5    6    7    8    */\n   /* 0 */  [1u8, 4u8, 9u8, 6u8, 7u8, 5u8, 8u8, 3u8, 2u8],\n   /* 1 */  [5u8, 3u8, 8u8, 1u8, 2u8, 9u8, 7u8, 4u8, 6u8],"}, {"sha": "2e0f2a174c606575242e7b3fc4bad62cb40152b7", "filename": "src/test/compile-fail/better-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let x: [int ..3]; //~ ERROR expected one of `(`, `+`, `,`, `::`, or `]`, found `..`\n+    let x: [int 3]; //~ ERROR expected one of `(`, `+`, `,`, `::`, `;`, or `]`, found `3`\n }"}, {"sha": "f0d42bb9ac115de19b410801e8a53c457cd399f3", "filename": "src/test/compile-fail/borrowck-for-loop-correct-cmt-for-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -11,7 +11,7 @@\n // Issue #16205.\n \n struct Foo {\n-    a: [Box<int>, ..3],\n+    a: [Box<int>; 3],\n }\n \n fn main() {"}, {"sha": "b6b46fadb13dae444559ffddb0dea65141e5c3ff", "filename": "src/test/compile-fail/coercion-slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Tests that we forbid coercion from `[T, ..n]` to `&[T]`\n+// Tests that we forbid coercion from `[T; n]` to `&[T]`\n \n fn main() {\n-    let _: &[int] = [0i]; //~ERROR: mismatched types: expected `&[int]`, found `[int, ..1]`\n+    let _: &[int] = [0i]; //~ERROR: mismatched types: expected `&[int]`, found `[int; 1]`\n }"}, {"sha": "b359744183418b3f0ceaee3e3961f5b8d0278d32", "filename": "src/test/compile-fail/const-cast-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static a: [u8, ..3] = ['h' as u8, 'i' as u8, 0 as u8];\n+static a: [u8; 3] = ['h' as u8, 'i' as u8, 0 as u8];\n static b: *const i8 = &a as *const i8; //~ ERROR mismatched types\n \n fn main() {"}, {"sha": "c77ae25e0cf519db4ff4c5a8fa95d9dd8b054228", "filename": "src/test/compile-fail/dst-bad-coerce1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -20,9 +20,9 @@ trait Bar {}\n pub fn main() {\n     // With a vec of ints.\n     let f1 = Fat { ptr: [1, 2, 3] };\n-    let f2: &Fat<[int, ..3]> = &f1;\n+    let f2: &Fat<[int; 3]> = &f1;\n     let f3: &Fat<[uint]> = f2;\n-    //~^ ERROR mismatched types: expected `&Fat<[uint]>`, found `&Fat<[int, ..3]>`\n+    //~^ ERROR mismatched types: expected `&Fat<[uint]>`, found `&Fat<[int; 3]>`\n \n     // With a trait.\n     let f1 = Fat { ptr: Foo };"}, {"sha": "6eb650e97811786065d054b8e208b480126fbca5", "filename": "src/test/compile-fail/dst-bad-coerce2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -21,7 +21,7 @@ impl Bar for Foo {}\n pub fn main() {\n     // With a vec of ints.\n     let f1 = Fat { ptr: [1, 2, 3] };\n-    let f2: &Fat<[int, ..3]> = &f1;\n+    let f2: &Fat<[int; 3]> = &f1;\n     let f3: &mut Fat<[int]> = f2; //~ ERROR mismatched types\n \n     // With a trait."}, {"sha": "b0bd517637464891a47ab5826900c13b325b9057", "filename": "src/test/compile-fail/dst-bad-coerce3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -21,7 +21,7 @@ impl Bar for Foo {}\n fn baz<'a>() {\n     // With a vec of ints.\n     let f1 = Fat { ptr: [1, 2, 3] };\n-    let f2: &Fat<[int, ..3]> = &f1; //~ ERROR `f1` does not live long enough\n+    let f2: &Fat<[int; 3]> = &f1; //~ ERROR `f1` does not live long enough\n     let f3: &'a Fat<[int]> = f2;\n \n     // With a trait."}, {"sha": "783a32d63028a9bb0492605e92b1938041c06c5c", "filename": "src/test/compile-fail/dst-bad-coerce4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -17,6 +17,6 @@ struct Fat<Sized? T> {\n pub fn main() {\n     // With a vec of ints.\n     let f1: &Fat<[int]> = &Fat { ptr: [1, 2, 3] };\n-    let f2: &Fat<[int, ..3]> = f1;\n-    //~^ ERROR mismatched types: expected `&Fat<[int, ..3]>`, found `&Fat<[int]>`\n+    let f2: &Fat<[int; 3]> = f1;\n+    //~^ ERROR mismatched types: expected `&Fat<[int; 3]>`, found `&Fat<[int]>`\n }"}, {"sha": "0833a74f1daf95f40033f642d8200e02b79ceefa", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -18,7 +18,7 @@ struct Fat<Sized? T> {\n }\n \n pub fn main() {\n-    let f: Fat<[int, ..3]> = Fat { ptr: [5i, 6, 7] };\n+    let f: Fat<[int; 3]> = Fat { ptr: [5i, 6, 7] };\n     let g: &Fat<[int]> = &f;\n     let h: &Fat<Fat<[int]>> = &Fat { ptr: *g };\n     //~^ ERROR the trait `core::kinds::Sized` is not implemented"}, {"sha": "a9dda771b7ff8b72cdf0c9d8f87985838961c30a", "filename": "src/test/compile-fail/huge-array-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -11,5 +11,5 @@\n // error-pattern: too big for the current\n \n fn main() {\n-   let fat : [u8, ..(1<<61)+(1<<31)] = [0, ..(1u64<<61) as uint +(1u64<<31) as uint];\n+   let fat : [u8; (1<<61)+(1<<31)] = [0; (1u64<<61) as uint +(1u64<<31) as uint];\n }"}, {"sha": "029e9651cb3cdd34c65ce848c94d59e930856608", "filename": "src/test/compile-fail/huge-array.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fhuge-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fhuge-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhuge-array.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: ..1518599999\n+// error-pattern:; 1518599999\n \n fn generic<T: Copy>(t: T) {\n-    let s: [T, ..1518600000] = [t, ..1518600000];\n+    let s: [T; 1518600000] = [t; 1518600000];\n }\n \n fn main() {\n-    let x: [u8, ..1518599999] = [0, ..1518599999];\n-    generic::<[u8, ..1518599999]>(x);\n+    let x: [u8; 1518599999] = [0; 1518599999];\n+    generic::<[u8; 1518599999]>(x);\n }"}, {"sha": "7c7a75abf3fc79705388cac0078d6b56df7afecd", "filename": "src/test/compile-fail/huge-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -14,10 +14,10 @@\n \n #[cfg(target_word_size = \"32\")]\n fn main() {\n-    let big: Option<[u32, ..(1<<29)-1]> = None;\n+    let big: Option<[u32; (1<<29)-1]> = None;\n }\n \n #[cfg(target_word_size = \"64\")]\n fn main() {\n-    let big: Option<[u32, ..(1<<45)-1]> = None;\n+    let big: Option<[u32; (1<<45)-1]> = None;\n }"}, {"sha": "a0a7660428d4106815906f0d7561c58802b01df7", "filename": "src/test/compile-fail/issue-13446.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-13446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-13446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13446.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -13,7 +13,7 @@\n \n // error-pattern: mismatched types\n \n-static VEC: [u32, ..256] = vec!();\n+static VEC: [u32; 256] = vec!();\n \n fn main() {}\n "}, {"sha": "ef7d3d4d158d9fdcb202c4e0a0944acf10f7d13c", "filename": "src/test/compile-fail/issue-13482-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let x = [1,2];\n     let y = match x {\n         [] => None,\n-        //~^ ERROR types: expected `[_#0i, ..2]`, found `[_#7t, ..0]`\n+        //~^ ERROR types: expected `[_#0i; 2]`, found `[_#7t; 0]`\n         //         (expected array of 2 elements, found array of 0 elements)\n         [a,_] => Some(a)\n     };"}, {"sha": "157280b1719ad2ca3a096f0c0692667b11421236", "filename": "src/test/compile-fail/issue-13482.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,7 +12,7 @@ fn main() {\n   let x = [1,2];\n   let y = match x {\n     [] => None,\n-//~^ ERROR types: expected `[_, ..2]`, found `[_, ..0]`\n+//~^ ERROR types: expected `[_; 2]`, found `[_; 0]`\n //         (expected array of 2 elements, found array of 0 elements)\n     [a,_] => Some(a)\n   };"}, {"sha": "5166d84a0254362f12a0503a282ad3f79440936a", "filename": "src/test/compile-fail/issue-14845.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -10,15 +10,15 @@\n \n \n struct X {\n-    a: [u8, ..1]\n+    a: [u8; 1]\n }\n \n fn main() {\n     let x = X { a: [0] };\n     let _f = &x.a as *mut u8;\n-    //~^ ERROR mismatched types: expected `*mut u8`, found `&[u8, ..1]`\n+    //~^ ERROR mismatched types: expected `*mut u8`, found `&[u8; 1]`\n \n     let local = [0u8];\n     let _v = &local as *mut u8;\n-    //~^ ERROR mismatched types: expected `*mut u8`, found `&[u8, ..1]`\n+    //~^ ERROR mismatched types: expected `*mut u8`, found `&[u8; 1]`\n }"}, {"sha": "4adb3f041a3f4254b2d971fed405c6829b7c8da0", "filename": "src/test/compile-fail/issue-17252.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-17252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-17252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17252.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -11,10 +11,10 @@\n static FOO: uint = FOO; //~ ERROR recursive constant\n \n fn main() {\n-    let _x: [u8, ..FOO]; // caused stack overflow prior to fix\n+    let _x: [u8; FOO]; // caused stack overflow prior to fix\n     let _y: uint = 1 + {\n         static BAR: uint = BAR; //~ ERROR recursive constant\n-        let _z: [u8, ..BAR]; // caused stack overflow prior to fix\n+        let _z: [u8; BAR]; // caused stack overflow prior to fix\n         1\n     };\n }"}, {"sha": "e5da5c5504ef3e1b728113a85abac6d621494bb7", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let _foo = &[1u, 2] as [uint];\n-    //~^ ERROR cast to unsized type: `&[uint, ..2]` as `[uint]`\n+    //~^ ERROR cast to unsized type: `&[uint; 2]` as `[uint]`\n     //~^^ HELP consider using an implicit coercion to `&[uint]` instead\n     let _bar = box 1u as std::fmt::Show;\n     //~^ ERROR cast to unsized type: `Box<uint>` as `core::fmt::Show`\n@@ -19,6 +19,6 @@ fn main() {\n     //~^ ERROR cast to unsized type: `uint` as `core::fmt::Show`\n     //~^^ HELP consider using a box or reference as appropriate\n     let _quux = [1u, 2] as [uint];\n-    //~^ ERROR cast to unsized type: `[uint, ..2]` as `[uint]`\n+    //~^ ERROR cast to unsized type: `[uint; 2]` as `[uint]`\n     //~^^ HELP consider using a box or reference as appropriate\n }"}, {"sha": "8aa5fdf1c4d21fb3256996dbf5e92ea5b10942d6", "filename": "src/test/compile-fail/issue-17718-borrow-interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-17718-borrow-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-17718-borrow-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-borrow-interior.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -15,7 +15,7 @@ static B: &'static uint = &A.a;\n static C: &'static uint = &(A.a);\n //~^ ERROR: cannot refer to the interior of another static\n \n-static D: [uint, ..1] = [1];\n+static D: [uint; 1] = [1];\n static E: uint = D[0];\n //~^ ERROR: cannot refer to other statics by value\n static F: &'static uint = &D[0];"}, {"sha": "fafe6377397a39343a3367d3dc465a984395a77d", "filename": "src/test/compile-fail/issue-19244-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-1.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -11,6 +11,6 @@\n const TUP: (uint,) = (42,);\n \n fn main() {\n-    let a: [int, ..TUP.1];\n+    let a: [int; TUP.1];\n     //~^ ERROR expected constant expr for array length: tuple index out of bounds\n }"}, {"sha": "95965ca35f944ed593fc3abe3f4fbef788855a8b", "filename": "src/test/compile-fail/issue-19244-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,6 +12,6 @@ struct MyStruct { field: uint }\n const STRUCT: MyStruct = MyStruct { field: 42 };\n \n fn main() {\n-    let a: [int, ..STRUCT.nonexistent_field];\n+    let a: [int; STRUCT.nonexistent_field];\n     //~^ ERROR expected constant expr for array length: nonexistent struct field\n }"}, {"sha": "3343e92252f8e4926e5de54b196221115bef095c", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -22,5 +22,5 @@ impl<A> vec_monad<A> for Vec<A> {\n }\n fn main() {\n     [\"hi\"].bind(|x| [x] );\n-    //~^ ERROR type `[&str, ..1]` does not implement any method in scope named `bind`\n+    //~^ ERROR type `[&str; 1]` does not implement any method in scope named `bind`\n }"}, {"sha": "1c5fd9be1bd4d24d1d3c26804aff580f60199f6c", "filename": "src/test/compile-fail/issue-4517.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -11,8 +11,8 @@\n fn bar(int_param: int) {}\n \n fn main() {\n-    let foo: [u8, ..4] = [1u8, ..4u];\n+    let foo: [u8; 4] = [1u8; 4u];\n     bar(foo);\n-    //~^ ERROR mismatched types: expected `int`, found `[u8, ..4]`\n+    //~^ ERROR mismatched types: expected `int`, found `[u8; 4]`\n     //         (expected int, found vector)\n }"}, {"sha": "19373c806f14d4da979f7c787e3c19d7292f13c1", "filename": "src/test/compile-fail/lint-uppercase-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -29,7 +29,7 @@ fn main() {\n     println!(\"{}\", Test);\n \n     let mut f = File::open(&Path::new(\"something.txt\"));\n-    let mut buff = [0u8, ..16];\n+    let mut buff = [0u8; 16];\n     match f.read(&mut buff) {\n         Ok(cnt) => println!(\"read this many bytes: {}\", cnt),\n         Err(IoError{ kind: EndOfFile, .. }) => println!(\"Got end of file: {}\", EndOfFile.to_string()),"}, {"sha": "0b095ff6f820dbc5b68863a89730bf13734cd699", "filename": "src/test/compile-fail/move-fragments-9.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test moving array structures, e.g. `[T, ..3]` as well as moving\n+// Test moving array structures, e.g. `[T; 3]` as well as moving\n // elements in and out of such arrays.\n //\n // Note also that the `test_move_array_then_overwrite` tests represent\n@@ -18,14 +18,14 @@ pub struct D { d: int }\n impl Drop for D { fn drop(&mut self) { } }\n \n #[rustc_move_fragments]\n-pub fn test_move_array_via_return(a: [D, ..3]) -> [D, ..3] {\n+pub fn test_move_array_via_return(a: [D; 3]) -> [D; 3] {\n     //~^ ERROR                  assigned_leaf_path: `$(local a)`\n     //~| ERROR                     moved_leaf_path: `$(local a)`\n     return a;\n }\n \n #[rustc_move_fragments]\n-pub fn test_move_array_into_recv(a: [D, ..3], recv: &mut [D, ..3]) {\n+pub fn test_move_array_into_recv(a: [D; 3], recv: &mut [D; 3]) {\n     //~^ ERROR                 parent_of_fragments: `$(local recv)`\n     //~| ERROR                  assigned_leaf_path: `$(local a)`\n     //~| ERROR                     moved_leaf_path: `$(local a)`\n@@ -34,7 +34,7 @@ pub fn test_move_array_into_recv(a: [D, ..3], recv: &mut [D, ..3]) {\n }\n \n #[rustc_move_fragments]\n-pub fn test_extract_array_elem(a: [D, ..3], i: uint) -> D {\n+pub fn test_extract_array_elem(a: [D; 3], i: uint) -> D {\n     //~^ ERROR                 parent_of_fragments: `$(local a)`\n     //~| ERROR                  assigned_leaf_path: `$(local i)`\n     //~| ERROR                     moved_leaf_path: `$(local a).[]`\n@@ -43,7 +43,7 @@ pub fn test_extract_array_elem(a: [D, ..3], i: uint) -> D {\n }\n \n #[rustc_move_fragments]\n-pub fn test_overwrite_array_elem(mut a: [D, ..3], i: uint, d: D) {\n+pub fn test_overwrite_array_elem(mut a: [D; 3], i: uint, d: D) {\n     //~^ ERROR                 parent_of_fragments: `$(local mut a)`\n     //~| ERROR                  assigned_leaf_path: `$(local i)`\n     //~| ERROR                  assigned_leaf_path: `$(local d)`\n@@ -59,7 +59,7 @@ pub fn test_overwrite_array_elem(mut a: [D, ..3], i: uint, d: D) {\n // See RFC PR 320 for more discussion.\n \n #[rustc_move_fragments]\n-pub fn test_move_array_then_overwrite_elem1(mut a: [D, ..3], i: uint, recv: &mut [D, ..3], d: D) {\n+pub fn test_move_array_then_overwrite_elem1(mut a: [D; 3], i: uint, recv: &mut [D; 3], d: D) {\n     //~^ ERROR                 parent_of_fragments: `$(local mut a)`\n     //~| ERROR                 parent_of_fragments: `$(local recv)`\n     //~| ERROR                  assigned_leaf_path: `$(local recv).*`\n@@ -76,8 +76,8 @@ pub fn test_move_array_then_overwrite_elem1(mut a: [D, ..3], i: uint, recv: &mut\n }\n \n #[rustc_move_fragments]\n-pub fn test_move_array_then_overwrite_elem2(mut a: [D, ..3], i: uint, j: uint,\n-                                            recv: &mut [D, ..3], d1: D, d2: D) {\n+pub fn test_move_array_then_overwrite_elem2(mut a: [D; 3], i: uint, j: uint,\n+                                            recv: &mut [D; 3], d1: D, d2: D) {\n     //~^^ ERROR                parent_of_fragments: `$(local mut a)`\n     //~| ERROR                 parent_of_fragments: `$(local recv)`\n     //~| ERROR                  assigned_leaf_path: `$(local recv).*`"}, {"sha": "d8d84e558a947ff734d4afa1b1b8283766eda956", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -89,7 +89,7 @@ fn f100() {\n \n fn f110() {\n     let x = vec!(\"hi\".to_string());\n-    let _y = [x.into_iter().next().unwrap(), ..1];\n+    let _y = [x.into_iter().next().unwrap(); 1];\n     touch(&x); //~ ERROR use of moved value: `x`\n }\n "}, {"sha": "a1dc2ab2041a5ea0e6199746b0fd47da449d43e3", "filename": "src/test/compile-fail/non-constant-enum-for-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -11,6 +11,6 @@\n enum State { ST_NULL, ST_WHITESPACE }\n \n fn main() {\n-    [State::ST_NULL, ..(State::ST_WHITESPACE as uint)];\n+    [State::ST_NULL; (State::ST_WHITESPACE as uint)];\n     //~^ ERROR expected constant integer for repeat count, found non-constant expression\n }"}, {"sha": "85d734ddaf2b9fab308f3616a8a8e2a9faecea0f", "filename": "src/test/compile-fail/non-constant-expr-for-fixed-len-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     fn bar(n: int) {\n-        let _x: [int, ..n];\n+        let _x: [int; n];\n         //~^ ERROR expected constant expr for array length: non-constant path in constant expr\n     }\n }"}, {"sha": "2e063e5237c44a4ad67c30a3ae96d639f5d06efe", "filename": "src/test/compile-fail/non-constant-expr-for-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     fn bar(n: uint) {\n-        let _x = [0, ..n]; //~ ERROR expected constant integer for repeat count, found variable\n+        let _x = [0; n]; //~ ERROR expected constant integer for repeat count, found variable\n     }\n }"}, {"sha": "d35e3ad3c55b02769e6cdf2d932bbcc5edf177bf", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,7 +12,7 @@\n \n struct Foo {\n     first: bool,\n-    second: Option<[uint, ..4]>\n+    second: Option<[uint; 4]>\n }\n \n enum Color {"}, {"sha": "5c0aba42b9683221374078f66c47d8a707eae9ae", "filename": "src/test/compile-fail/packed-struct-generic-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -33,7 +33,7 @@ struct Oof<T, S> {\n fn main() {\n     let foo = Foo { bar: [1u8, 2, 3, 4, 5], baz: 10i32 };\n     unsafe {\n-        let oof: Oof<[u8, .. 5], i32> = mem::transmute(foo);\n+        let oof: Oof<[u8; 5], i32> = mem::transmute(foo);\n         println!(\"{} {}\", oof.rab[], oof.zab);\n     }\n }"}, {"sha": "0a8420c19c33f2cbc0b3199d610ac5482e8c8476", "filename": "src/test/compile-fail/removed-syntax-fixed-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type v = [int * 3]; //~ ERROR expected one of `(`, `+`, `,`, `::`, or `]`, found `*`\n+type v = [int * 3]; //~ ERROR expected one of `(`, `+`, `,`, `::`, `;`, or `]`, found `*`"}, {"sha": "30302bbd16ef8e0387083285bba38b5c39f43647", "filename": "src/test/compile-fail/removed-syntax-mut-vec-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-expr.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -11,5 +11,5 @@\n fn f() {\n     let v = [mut 1, 2, 3, 4];\n     //~^  ERROR expected identifier, found keyword `mut`\n-    //~^^ ERROR expected one of `!`, `,`, `.`, `::`, `]`, `{`, or an operator, found `1`\n+    //~^^ ERROR expected one of `!`, `,`, `.`, `::`, `;`, `]`, `{`, or an operator, found `1`\n }"}, {"sha": "9c6056bd72a1c1c8f4c04119b5b966618c2c9b5a", "filename": "src/test/compile-fail/removed-syntax-mut-vec-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -10,4 +10,4 @@\n \n type v = [mut int];\n     //~^  ERROR expected identifier, found keyword `mut`\n-    //~^^ ERROR expected one of `(`, `+`, `,`, `::`, or `]`, found `int`\n+    //~^^ ERROR expected one of `(`, `+`, `,`, `::`, `;`, or `]`, found `int`"}, {"sha": "d3126cf44d1b152fcd01e39cfcd1f1bc09283832", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -24,6 +24,6 @@ impl Drop for Foo {\n \n fn main() {\n     let a = Foo { x: 3 };\n-    let _ = [ a, ..5 ];\n+    let _ = [ a; 5 ];\n     //~^ ERROR the trait `core::kinds::Copy` is not implemented for the type `Foo`\n }"}, {"sha": "3b0ef0c293af75c260e724a1195c3d2e3913862b", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,18 +12,18 @@\n \n fn main() {\n     let n = 1;\n-    let a = [0, ..n]; //~ ERROR expected constant integer for repeat count, found variable\n-    let b = [0, ..()];\n+    let a = [0; n]; //~ ERROR expected constant integer for repeat count, found variable\n+    let b = [0; ()];\n //~^ ERROR expected constant integer for repeat count, found non-constant expression\n //~^^ ERROR: expected `uint`, found `()`\n-    let c = [0, ..true]; //~ ERROR expected positive integer for repeat count, found boolean\n+    let c = [0; true]; //~ ERROR expected positive integer for repeat count, found boolean\n     //~^ ERROR: expected `uint`, found `bool`\n-    let d = [0, ..0.5]; //~ ERROR expected positive integer for repeat count, found float\n+    let d = [0; 0.5]; //~ ERROR expected positive integer for repeat count, found float\n     //~^ ERROR: expected `uint`, found `_`\n-    let e = [0, ..\"foo\"]; //~ ERROR expected positive integer for repeat count, found string\n+    let e = [0; \"foo\"]; //~ ERROR expected positive integer for repeat count, found string\n     //~^ ERROR: expected `uint`, found `&'static str`\n-    let f = [0, ..-4];\n+    let f = [0; -4];\n     //~^ ERROR expected positive integer for repeat count, found negative integer\n-    let f = [0u, ..-1];\n+    let f = [0u; -1];\n     //~^ ERROR expected positive integer for repeat count, found negative integer\n }"}, {"sha": "ff84ed5bf0cd499d72000663407b3c3d0c994faa", "filename": "src/test/compile-fail/static-vec-repeat-not-constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fstatic-vec-repeat-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fstatic-vec-repeat-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-vec-repeat-not-constant.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -10,7 +10,7 @@\n \n fn foo() -> int { 23 }\n \n-static a: [int, ..2] = [foo(), ..2];\n+static a: [int; 2] = [foo(); 2];\n //~^ ERROR: function calls in constants are limited to struct and enum constructors\n \n fn main() {}"}, {"sha": "dadd6571583844fda90af29b30c29c13c04444bf", "filename": "src/test/compile-fail/trailing-comma-array-repeat.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e62684bb4cf10cef5f5335f5baaf838f3a541c0/src%2Ftest%2Fcompile-fail%2Ftrailing-comma-array-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62684bb4cf10cef5f5335f5baaf838f3a541c0/src%2Ftest%2Fcompile-fail%2Ftrailing-comma-array-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrailing-comma-array-repeat.rs?ref=7e62684bb4cf10cef5f5335f5baaf838f3a541c0", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let [_, ..,] = [(), ()]; //~ ERROR unexpected token: `]`\n-}"}, {"sha": "2286c0e75bd9dcc22393e9fea52f5db052188c81", "filename": "src/test/compile-fail/transmute-type-parameters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Ftransmute-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Ftransmute-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftransmute-type-parameters.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -20,7 +20,7 @@ unsafe fn g<T>(x: (T, int)) {\n     let _: int = transmute(x);  //~ ERROR cannot transmute\n }\n \n-unsafe fn h<T>(x: [T, ..10]) {\n+unsafe fn h<T>(x: [T; 10]) {\n     let _: int = transmute(x);  //~ ERROR cannot transmute\n }\n "}, {"sha": "c5109ce473e9efebbcd5e191792769ca976758ce", "filename": "src/test/compile-fail/vector-cast-weirdness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,20 +12,20 @@\n // presence of the `_` type shorthand notation.\n \n struct X {\n-    y: [u8, ..2],\n+    y: [u8; 2],\n }\n \n fn main() {\n     let x1 = X { y: [0, 0] };\n \n     let p1: *const u8 = &x1.y as *const _;  //~ ERROR mismatched types\n-    let t1: *const [u8, ..2] = &x1.y as *const _;\n-    let h1: *const [u8, ..2] = &x1.y as *const [u8, ..2];\n+    let t1: *const [u8; 2] = &x1.y as *const _;\n+    let h1: *const [u8; 2] = &x1.y as *const [u8; 2];\n \n     let mut x1 = X { y: [0, 0] };\n \n     let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR mismatched types\n-    let t1: *mut [u8, ..2] = &mut x1.y as *mut _;\n-    let h1: *mut [u8, ..2] = &mut x1.y as *mut [u8, ..2];\n+    let t1: *mut [u8; 2] = &mut x1.y as *mut _;\n+    let h1: *mut [u8; 2] = &mut x1.y as *mut [u8; 2];\n }\n "}, {"sha": "786868f6b89ddab084dbce06cb0117fd821d42f9", "filename": "src/test/debuginfo/evec-in-struct.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fevec-in-struct.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -53,28 +53,28 @@\n #![allow(unused_variables)]\n \n struct NoPadding1 {\n-    x: [u32, ..3],\n+    x: [u32; 3],\n     y: i32,\n-    z: [f32, ..2]\n+    z: [f32; 2]\n }\n \n struct NoPadding2 {\n-    x: [u32, ..3],\n-    y: [[u32, ..2], ..2]\n+    x: [u32; 3],\n+    y: [[u32; 2]; 2]\n }\n \n struct StructInternalPadding {\n-    x: [i16, ..2],\n-    y: [i64, ..2]\n+    x: [i16; 2],\n+    y: [i64; 2]\n }\n \n struct SingleVec {\n-    x: [i16, ..5]\n+    x: [i16; 5]\n }\n \n struct StructPaddedAtEnd {\n-    x: [i64, ..2],\n-    y: [i16, ..2]\n+    x: [i64; 2],\n+    y: [i16; 2]\n }\n \n fn main() {"}, {"sha": "41dee642feacd9c4886d83e8e073a4523ac49e6a", "filename": "src/test/debuginfo/lexical-scopes-in-block-expression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scopes-in-block-expression.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -450,7 +450,7 @@ fn main() {\n         sentinel();\n \n         val\n-    }, ..10];\n+    }; 10];\n \n     zzz(); // #break\n     sentinel();\n@@ -491,7 +491,7 @@ fn main() {\n     sentinel();\n \n     // index expression\n-    let a_vector = [10i, ..20];\n+    let a_vector = [10i; 20];\n     let _ = a_vector[{\n         zzz(); // #break\n         sentinel();"}, {"sha": "8cc0fdabfc2e7b73cb7465dcaaf0b73597edd198", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -143,7 +143,7 @@ fn main() {\n         value: 2,\n     };\n \n-    let vec_unique: [UniqueNode<f32>, ..1] = [UniqueNode {\n+    let vec_unique: [UniqueNode<f32>; 1] = [UniqueNode {\n         next: Val {\n             val: box UniqueNode {\n                 next: Empty,"}, {"sha": "286c44667c5b46cdbfcf2ac4a246ceb4d2dcfaa9", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -99,10 +99,10 @@\n \n // VECTORS\n // gdb-command:whatis fixed_size_vec1\n-// gdb-check:type = struct ([type-names::Struct1, ..3], i16)\n+// gdb-check:type = struct ([type-names::Struct1; 3], i16)\n \n // gdb-command:whatis fixed_size_vec2\n-// gdb-check:type = struct ([uint, ..3], i16)\n+// gdb-check:type = struct ([uint; 3], i16)\n \n // gdb-command:whatis slice1\n // gdb-check:type = struct &[uint]"}, {"sha": "00c93653cf411892b4c4e7e7526ae36d4f5dbbc5", "filename": "src/test/debuginfo/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fdebuginfo%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fdebuginfo%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -30,7 +30,7 @@\n \n #![allow(unused_variables)]\n \n-static mut VECT: [i32, ..3] = [1, 2, 3];\n+static mut VECT: [i32; 3] = [1, 2, 3];\n \n fn main() {\n     let a = [1i, 2, 3];"}, {"sha": "1774edd3f76e2bc88bf0e71796d79bded267cdd6", "filename": "src/test/pretty/blank-lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fpretty%2Fblank-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fpretty%2Fblank-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblank-lines.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // pp-exact\n-fn f() -> [int, ..3] {\n+fn f() -> [int; 3] {\n     let picard = 0;\n \n     let data = 1;"}, {"sha": "974af1e6f3e108992f2a04178062ea9a46be60dd", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -21,26 +21,26 @@\n \n // #4264 fixed-length vector types\n \n-pub fn foo(_: [int, ..(3 as uint)]) { }\n+pub fn foo(_: [int; (3 as uint)]) { }\n \n pub fn bar() {\n     const FOO: uint = ((5u as uint) - (4u as uint) as uint);\n-    let _: [(), ..(FOO as uint)] = ([(() as ())] as [(), ..1]);\n+    let _: [(); (FOO as uint)] = ([(() as ())] as [(); 1]);\n \n-    let _: [(), ..(1u as uint)] = ([(() as ())] as [(), ..1]);\n+    let _: [(); (1u as uint)] = ([(() as ())] as [(); 1]);\n \n     let _ =\n-        (((&((([(1i as int), (2 as int), (3 as int)] as [int, ..3])) as\n-                [int, ..3]) as &[int, ..3]) as *const _ as *const [int, ..3])\n-            as *const [int, ..(3u as uint)] as *const [int, ..3]);\n+        (((&((([(1i as int), (2 as int), (3 as int)] as [int; 3])) as\n+                [int; 3]) as &[int; 3]) as *const _ as *const [int; 3]) as\n+            *const [int; (3u as uint)] as *const [int; 3]);\n \n     (match (() as ()) {\n          () => {\n              #[inline]\n              #[allow(dead_code)]\n              static __STATIC_FMTSTR: &'static [&'static str] =\n-                 (&([(\"test\" as &'static str)] as [&'static str, ..1]) as\n-                     &'static [&'static str, ..1]);\n+                 (&([(\"test\" as &'static str)] as [&'static str; 1]) as\n+                     &'static [&'static str; 1]);\n \n \n \n@@ -57,9 +57,9 @@\n                                                                                                                                                                 &'static [&'static str]),\n                                                                                                                                                             (&([]\n                                                                                                                                                                   as\n-                                                                                                                                                                  [core::fmt::Argument<'_>, ..0])\n+                                                                                                                                                                  [core::fmt::Argument<'_>; 0])\n                                                                                                                                                                 as\n-                                                                                                                                                                &[core::fmt::Argument<'_>, ..0]))\n+                                                                                                                                                                &[core::fmt::Argument<'_>; 0]))\n                                                                                       as\n                                                                                       core::fmt::Arguments<'_>)\n                                                                                     as\n@@ -68,18 +68,17 @@\n          }\n      } as collections::string::String);\n }\n-pub type Foo = [int, ..(3u as uint)];\n+pub type Foo = [int; (3u as uint)];\n pub struct Bar {\n-    pub x: [int, ..(3u as uint)],\n+    pub x: [int; (3u as uint)],\n }\n-pub struct TupleBar([int, ..(4u as uint)]);\n-pub enum Baz { BazVariant([int, ..(5u as uint)]), }\n+pub struct TupleBar([int; (4u as uint)]);\n+pub enum Baz { BazVariant([int; (5u as uint)]), }\n pub fn id<T>(x: T) -> T { (x as T) }\n pub fn use_id() {\n     let _ =\n-        ((id::<[int, ..(3u as uint)]> as\n-             fn([int, ..3]) -> [int, ..3])(([(1 as int), (2 as int),\n-                                             (3 as int)] as [int, ..3])) as\n-            [int, ..3]);\n+        ((id::<[int; (3u as uint)]> as\n+             fn([int; 3]) -> [int; 3])(([(1 as int), (2 as int), (3 as int)]\n+                                           as [int; 3])) as [int; 3]);\n }\n fn main() { }"}, {"sha": "7d0fc2d7fe503e618f2e300873d10bd4b86d753d", "filename": "src/test/run-make/no-stack-check/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-make%2Fno-stack-check%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-make%2Fno-stack-check%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-stack-check%2Fattr.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -20,6 +20,6 @@ extern {\n #[no_stack_check]\n pub unsafe fn foo() {\n     // Make sure we use the stack\n-    let x: [u8, ..50] = [0, ..50];\n+    let x: [u8; 50] = [0; 50];\n     black_box(x.as_ptr());\n }"}, {"sha": "2b6e7240d6fa857edf8a0e2a26dfb6e7d258124e", "filename": "src/test/run-make/no-stack-check/flag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-make%2Fno-stack-check%2Fflag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-make%2Fno-stack-check%2Fflag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-stack-check%2Fflag.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -19,6 +19,6 @@ extern {\n \n pub unsafe fn foo() {\n     // Make sure we use the stack\n-    let x: [u8, ..50] = [0, ..50];\n+    let x: [u8; 50] = [0; 50];\n     black_box(x.as_ptr());\n }"}, {"sha": "fd112034f40c50d3f53be37539e919fde84369d1", "filename": "src/test/run-make/target-specs/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -21,7 +21,7 @@ trait Sized { }\n fn start(_main: *const u8, _argc: int, _argv: *const *const u8) -> int { 0 }\n \n extern {\n-    fn _foo() -> [u8, ..16];\n+    fn _foo() -> [u8; 16];\n }\n \n fn _main() {"}, {"sha": "717ca3ff9feccb24bd9d289a2e7dfa4e9af20eb1", "filename": "src/test/run-pass/cast-in-array-size.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fcast-in-array-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fcast-in-array-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-in-array-size.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -13,8 +13,8 @@\n const SIZE: int = 25;\n \n fn main() {\n-    let _a: [bool, ..1 as uint];\n-    let _b: [int, ..SIZE as uint] = [1, ..SIZE as uint];\n-    let _c: [bool, ..'\\n' as uint] = [true, ..'\\n' as uint];\n-    let _d: [bool, ..true as uint] = [true, ..true as uint];\n+    let _a: [bool; 1 as uint];\n+    let _b: [int; SIZE as uint] = [1; SIZE as uint];\n+    let _c: [bool; '\\n' as uint] = [true; '\\n' as uint];\n+    let _d: [bool; true as uint] = [true; true as uint];\n }"}, {"sha": "6e2cfedf9ec3ebed8eabf9d6a166043bf8ec3a17", "filename": "src/test/run-pass/check-static-slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -11,11 +11,11 @@\n // Check that the various ways of getting to a reference to a vec (both sized\n // and unsized) work properly.\n \n-const aa: [int, ..3] = [1, 2, 3];\n-const ab: &'static [int, ..3] = &aa;\n+const aa: [int; 3] = [1, 2, 3];\n+const ab: &'static [int; 3] = &aa;\n const ac: &'static [int] = ab;\n const ad: &'static [int] = &aa;\n-const ae: &'static [int, ..3] = &[1, 2, 3];\n+const ae: &'static [int; 3] = &[1, 2, 3];\n const af: &'static [int] = &[1, 2, 3];\n \n static ca: int = aa[0];"}, {"sha": "71312fb387845b54f5bf18f5cb129fc2c4420f86", "filename": "src/test/run-pass/const-autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static A: [u8, ..1] = ['h' as u8];\n+static A: [u8; 1] = ['h' as u8];\n static B: u8 = (&A)[0];\n-static C: &'static &'static &'static &'static [u8, ..1] = & & & &A;\n+static C: &'static &'static &'static &'static [u8; 1] = & & & &A;\n static D: u8 = (&C)[0];\n \n pub fn main() {"}, {"sha": "4c8124d28a24157c02dbe6669849294674cce707", "filename": "src/test/run-pass/const-enum-vec-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,7 +12,7 @@ enum E { V1(int), V0 }\n const C: &'static [E] = &[E::V0, E::V1(0xDEADBEE)];\n static C0: E = C[0];\n static C1: E = C[1];\n-const D: &'static [E, ..2] = &[E::V0, E::V1(0xDEADBEE)];\n+const D: &'static [E; 2] = &[E::V0, E::V1(0xDEADBEE)];\n static D0: E = C[0];\n static D1: E = C[1];\n "}, {"sha": "6eb5c2dab38ba17fa680da8e14ccc31705d16292", "filename": "src/test/run-pass/const-enum-vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum E { V1(int), V0 }\n-static C: [E, ..3] = [E::V0, E::V1(0xDEADBEE), E::V0];\n+static C: [E; 3] = [E::V0, E::V1(0xDEADBEE), E::V0];\n \n pub fn main() {\n     match C[1] {"}, {"sha": "6317c2eec1801b34bf2a678a2c797fb43cc8108e", "filename": "src/test/run-pass/const-expr-in-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -14,6 +14,6 @@\n pub fn main() {\n \n     const FOO: uint = 2;\n-    let _v: [int, ..FOO*3];\n+    let _v: [int; FOO*3];\n \n }"}, {"sha": "d692f3a87e457b385f956ccb62d0aae6e599803e", "filename": "src/test/run-pass/const-expr-in-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -13,6 +13,6 @@\n pub fn main() {\n \n     const FOO: uint = 2;\n-    let _v = [0i, ..FOO*3*2/2];\n+    let _v = [0i; FOO*3*2/2];\n \n }"}, {"sha": "0819e0becbf9564cb1ac9738cc04147a65167182", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const x : [int, ..4] = [1,2,3,4];\n+const x : [int; 4] = [1,2,3,4];\n static p : int = x[2];\n const y : &'static [int] = &[1,2,3,4];\n static q : int = y[2];"}, {"sha": "e8081005d4a8ff4695ddc124e364ea86305fc53a", "filename": "src/test/run-pass/const-region-ptrs-noncopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type Big = [u64, ..8];\n+type Big = [u64; 8];\n struct Pair<'a> { a: int, b: &'a Big }\n const x: &'static Big = &([13, 14, 10, 13, 11, 14, 14, 15]);\n const y: &'static Pair<'static> = &Pair {a: 15, b: x};"}, {"sha": "d6f0296619ab4e7ff62ab4ff97af53964390d71a", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -10,8 +10,8 @@\n \n use std::{str, string};\n \n-const A: [u8, ..2] = ['h' as u8, 'i' as u8];\n-const B: &'static [u8, ..2] = &A;\n+const A: [u8; 2] = ['h' as u8, 'i' as u8];\n+const B: &'static [u8; 2] = &A;\n const C: *const u8 = B as *const u8;\n \n pub fn main() {"}, {"sha": "26874b9f9d52dfc1744b9db85931e1f30216241c", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static x : [int, ..4] = [1,2,3,4];\n+static x : [int; 4] = [1,2,3,4];\n static y : &'static [int] = &[1,2,3,4];\n-static z : &'static [int, ..4] = &[1,2,3,4];\n+static z : &'static [int; 4] = &[1,2,3,4];\n static zz : &'static [int] = &[1,2,3,4];\n \n pub fn main() {"}, {"sha": "3644ca81d5659f784a13c28718cf9c1b10e07774", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -120,7 +120,7 @@ pub fn main() {\n     assert!((*f2)[1] == 2);\n \n     // Nested Box.\n-    let f1 : Box<Fat<[int, ..3]>> = box Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n+    let f1 : Box<Fat<[int; 3]>> = box Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n     foo(&*f1);\n     let f2 : Box<Fat<[int]>> = f1;\n     foo(&*f2);"}, {"sha": "d436916c279673c30fed5d2f18a05483acf8a69b", "filename": "src/test/run-pass/enum-vec-initializer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -16,9 +16,9 @@ const BAR:uint = Flopsy::Bunny as uint;\n const BAR2:uint = BAR;\n \n pub fn main() {\n-    let _v = [0i, .. Flopsy::Bunny as uint];\n-    let _v = [0i, .. BAR];\n-    let _v = [0i, .. BAR2];\n+    let _v = [0i;  Flopsy::Bunny as uint];\n+    let _v = [0i;  BAR];\n+    let _v = [0i;  BAR2];\n     const BAR3:uint = BAR2;\n-    let _v = [0i, .. BAR3];\n+    let _v = [0i;  BAR3];\n }"}, {"sha": "28b5f781b5cfd7d962cd5d6b434e8adf35ac58f9", "filename": "src/test/run-pass/evec-internal.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -13,16 +13,16 @@\n // Doesn't work; needs a design decision.\n \n pub fn main() {\n-    let x : [int, ..5] = [1,2,3,4,5];\n-    let _y : [int, ..5] = [1,2,3,4,5];\n+    let x : [int; 5] = [1,2,3,4,5];\n+    let _y : [int; 5] = [1,2,3,4,5];\n     let mut z = [1,2,3,4,5];\n     z = x;\n     assert_eq!(z[0], 1);\n     assert_eq!(z[4], 5);\n \n-    let a : [int, ..5] = [1,1,1,1,1];\n-    let b : [int, ..5] = [2,2,2,2,2];\n-    let c : [int, ..5] = [2,2,2,2,3];\n+    let a : [int; 5] = [1,1,1,1,1];\n+    let b : [int; 5] = [2,2,2,2,2];\n+    let c : [int; 5] = [2,2,2,2,3];\n \n     log(debug, a);\n "}, {"sha": "e24731546edfe3cc035a3e2fe8c2e38424fd82a3", "filename": "src/test/run-pass/huge-largest-array.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,10 +12,10 @@ use std::mem::size_of;\n \n #[cfg(target_word_size = \"32\")]\n pub fn main() {\n-    assert_eq!(size_of::<[u8, ..(1 << 31) - 1]>(), (1 << 31) - 1);\n+    assert_eq!(size_of::<[u8; (1 << 31) - 1]>(), (1 << 31) - 1);\n }\n \n #[cfg(target_word_size = \"64\")]\n pub fn main() {\n-    assert_eq!(size_of::<[u8, ..(1 << 47) - 1]>(), (1 << 47) - 1);\n+    assert_eq!(size_of::<[u8; (1 << 47) - 1]>(), (1 << 47) - 1);\n }"}, {"sha": "549a70f19e334fb166149f2cee556d6b55523ec5", "filename": "src/test/run-pass/issue-11205.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11205.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,22 +12,22 @@\n \n trait Foo {}\n impl Foo for int {}\n-fn foo(_: [&Foo, ..2]) {}\n+fn foo(_: [&Foo; 2]) {}\n fn foos(_: &[&Foo]) {}\n fn foog<T>(_: &[T], _: &[T]) {}\n \n-fn bar(_: [Box<Foo>, ..2]) {}\n+fn bar(_: [Box<Foo>; 2]) {}\n fn bars(_: &[Box<Foo>]) {}\n \n fn main() {\n-    let x: [&Foo, ..2] = [&1i, &2i];\n+    let x: [&Foo; 2] = [&1i, &2i];\n     foo(x);\n     foo([&1i, &2i]);\n \n     let r = &1i;\n-    let x: [&Foo, ..2] = [r, ..2];\n+    let x: [&Foo; 2] = [r; 2];\n     foo(x);\n-    foo([&1i, ..2]);\n+    foo([&1i; 2]);\n \n     let x: &[&Foo] = &[&1i, &2i];\n     foos(x);\n@@ -37,7 +37,7 @@ fn main() {\n     let r = &1i;\n     foog(x, &[r]);\n \n-    let x: [Box<Foo>, ..2] = [box 1i, box 2i];\n+    let x: [Box<Foo>; 2] = [box 1i, box 2i];\n     bar(x);\n     bar([box 1i, box 2i]);\n \n@@ -49,16 +49,16 @@ fn main() {\n     foog(x, &[box 1i]);\n \n     struct T<'a> {\n-        t: [&'a (Foo+'a), ..2]\n+        t: [&'a (Foo+'a); 2]\n     }\n     let _n = T {\n         t: [&1i, &2i]\n     };\n     let r = &1i;\n     let _n = T {\n-        t: [r, ..2]\n+        t: [r; 2]\n     };\n-    let x: [&Foo, ..2] = [&1i, &2i];\n+    let x: [&Foo; 2] = [&1i, &2i];\n     let _n = T {\n         t: x\n     };\n@@ -70,11 +70,11 @@ fn main() {\n         t: &[&1i, &2i]\n     };\n     let r = &1i;\n-    let r: [&Foo, ..2] = [r, ..2];\n+    let r: [&Foo; 2] = [r; 2];\n     let _n = F {\n         t: &r\n     };\n-    let x: [&Foo, ..2] = [&1i, &2i];\n+    let x: [&Foo; 2] = [&1i, &2i];\n     let _n = F {\n         t: &x\n     };\n@@ -85,7 +85,7 @@ fn main() {\n     let _n = M {\n         t: &[box 1i, box 2i]\n     };\n-    let x: [Box<Foo>, ..2] = [box 1i, box 2i];\n+    let x: [Box<Foo>; 2] = [box 1i, box 2i];\n     let _n = M {\n         t: &x\n     };"}, {"sha": "329ab7c921dda3ebe476af0fb67d00ba0e6d6e3f", "filename": "src/test/run-pass/issue-13259-windows-tcb-trash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -27,7 +27,7 @@ mod imp {\n     }\n \n     pub fn test() {\n-        let mut buf: [u16, ..50] = [0, ..50];\n+        let mut buf: [u16; 50] = [0; 50];\n         let ret = unsafe {\n             FormatMessageW(0x1000, 0 as *mut c_void, 1, 0x400,\n                            buf.as_mut_ptr(), buf.len() as u32, 0 as *const c_void)"}, {"sha": "81b6892b0f97ac4f97922a6125b02c11c82a6f44", "filename": "src/test/run-pass/issue-13763.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-13763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-13763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13763.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,9 +12,9 @@ use std::u8;\n \n const NUM: uint = u8::BITS as uint;\n \n-struct MyStruct { nums: [uint, ..8] }\n+struct MyStruct { nums: [uint; 8] }\n \n \n fn main() {\n-    let _s = MyStruct { nums: [0, ..NUM] };\n+    let _s = MyStruct { nums: [0; NUM] };\n }"}, {"sha": "f62a45277b22a29c1b7c0923dd9edc96f94d3402", "filename": "src/test/run-pass/issue-13837.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-13837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-13837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13837.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static TEST_VALUE : *const [int, ..2] = 0x1234 as *const [int, ..2];\n+static TEST_VALUE : *const [int; 2] = 0x1234 as *const [int; 2];\n \n fn main() {}"}, {"sha": "d815620c9694d7f4fede8925019fd7f671e467c9", "filename": "src/test/run-pass/issue-14940.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14940.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     let args = os::args();\n     if args.len() > 1 {\n         let mut out = stdio::stdout();\n-        out.write(&['a' as u8, ..128 * 1024]).unwrap();\n+        out.write(&['a' as u8; 128 * 1024]).unwrap();\n     } else {\n         let out = Command::new(args[0].as_slice()).arg(\"child\").output();\n         let out = out.unwrap();"}, {"sha": "e66788a2c003779d020a725b2c6f51725bf17c5e", "filename": "src/test/run-pass/issue-15673.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15673.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -10,6 +10,6 @@\n \n use std::iter::AdditiveIterator;\n fn main() {\n-    let x: [u64, ..3] = [1, 2, 3];\n+    let x: [u64; 3] = [1, 2, 3];\n     assert_eq!(6, range(0, 3).map(|i| x[i]).sum());\n }"}, {"sha": "b2abf2d2b1a9c60238af56ad651827f953f8092a", "filename": "src/test/run-pass/issue-17302.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-17302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-17302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17302.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static mut DROPPED: [bool, ..2] = [false, false];\n+static mut DROPPED: [bool; 2] = [false, false];\n \n struct A(uint);\n struct Foo { _a: A, _b: int }"}, {"sha": "827e6a10abdfd12fcc064c1adb26f963cd44237b", "filename": "src/test/run-pass/issue-17877.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17877.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n fn main() {\n-    assert_eq!(match [0u8, ..1024] {\n+    assert_eq!(match [0u8; 1024] {\n         _ => 42u,\n     }, 42u);\n \n-    assert_eq!(match [0u8, ..1024] {\n+    assert_eq!(match [0u8; 1024] {\n         [1, _..] => 0u,\n         [0, _..] => 1u,\n         _ => 2u"}, {"sha": "f61530c741851e1c0d33180c1bae5523082832ff", "filename": "src/test/run-pass/issue-18425.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18425.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,5 +12,5 @@\n // expression with a count of 1 and a non-Copy element type.\n \n fn main() {\n-    let _ = [box 1u, ..1];\n+    let _ = [box 1u; 1];\n }"}, {"sha": "3ee5ce9bff93a089ffeb34a59e3cd50cf16939a0", "filename": "src/test/run-pass/issue-19244.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-19244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19244.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -13,8 +13,8 @@ const STRUCT: MyStruct = MyStruct { field: 42 };\n const TUP: (uint,) = (43,);\n \n fn main() {\n-    let a = [0i, ..STRUCT.field];\n-    let b = [0i, ..TUP.0];\n+    let a = [0i; STRUCT.field];\n+    let b = [0i; TUP.0];\n \n     assert!(a.len() == 42);\n     assert!(b.len() == 43);"}, {"sha": "f87eb46d553b77446686cbafb353285a0a40fcda", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -63,7 +63,7 @@ fn read_board_grid<rdr:'static + io::Reader>(mut input: rdr)\n                    -> Vec<Vec<square>> {\n     let mut input: &mut io::Reader = &mut input;\n     let mut grid = Vec::new();\n-    let mut line = [0, ..10];\n+    let mut line = [0; 10];\n     input.read(&mut line);\n     let mut row = Vec::new();\n     for c in line.iter() {"}, {"sha": "8a39676ca17ac44a40e7266c1523e41800e53872", "filename": "src/test/run-pass/issue-3656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3656.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -16,7 +16,7 @@ extern crate libc;\n use libc::{c_uint, uint32_t, c_void};\n \n pub struct KEYGEN {\n-    hash_algorithm: [c_uint, ..2],\n+    hash_algorithm: [c_uint; 2],\n     count: uint32_t,\n     salt: *const c_void,\n     salt_size: uint32_t,"}, {"sha": "43948ef4a45c52d7834ba37760862b0f589978ab", "filename": "src/test/run-pass/issue-4387.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-4387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-4387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4387.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    let _foo = [0i, ..2*4];\n+    let _foo = [0i; 2*4];\n }"}, {"sha": "7c8940aafbfbe82831d82363cc2a8f2ea8a8b315", "filename": "src/test/run-pass/issue-5688.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5688.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -13,7 +13,7 @@\n \n ...should print &[1, 2, 3] but instead prints something like\n &[4492532864, 24]. It is pretty evident that the compiler messed up\n-with the representation of [int, ..n] and [int] somehow, or at least\n+with the representation of [int; n] and [int] somehow, or at least\n failed to typecheck correctly.\n */\n "}, {"sha": "b936eb322fc5ffc17506cde105d74a5e6dcf449a", "filename": "src/test/run-pass/issue-7784.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7784.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -10,10 +10,10 @@\n \n #![feature(advanced_slice_patterns)]\n \n-fn foo<T: Add<T, T> + Clone>([x, y, z]: [T, ..3]) -> (T, T, T) {\n+fn foo<T: Add<T, T> + Clone>([x, y, z]: [T; 3]) -> (T, T, T) {\n     (x.clone(), x.clone() + y.clone(), x + y + z)\n }\n-fn bar(a: &'static str, b: &'static str) -> [&'static str, ..4] {\n+fn bar(a: &'static str, b: &'static str) -> [&'static str; 4] {\n     [a, b, b, a]\n }\n "}, {"sha": "321e22cd19c9268c0dd5dfc0ef44541cfbb4ee78", "filename": "src/test/run-pass/issue-9942.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-9942.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fissue-9942.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9942.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    const S: uint = 23 as uint; [0i, ..S]; ()\n+    const S: uint = 23 as uint; [0i; S]; ()\n }"}, {"sha": "ecd7c0458f701a391157fa7203b7ac80b5d8b631", "filename": "src/test/run-pass/macro-invocation-in-count-expr-fixed-array-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fmacro-invocation-in-count-expr-fixed-array-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fmacro-invocation-in-count-expr-fixed-array-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-invocation-in-count-expr-fixed-array-type.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -15,5 +15,5 @@ macro_rules! four (\n );\n \n fn main() {\n-    let _x: [u16, ..four!()];\n+    let _x: [u16; four!()];\n }"}, {"sha": "db512adc011646db661cbfa3bd41660648c0d112", "filename": "src/test/run-pass/match-arm-statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -64,7 +64,7 @@ fn issue_6533() {\n }\n \n fn issue_13626() {\n-    const VAL: [u8, ..1] = [0];\n+    const VAL: [u8; 1] = [0];\n     match [1] {\n         VAL => unreachable!(),\n         _ => ()"}, {"sha": "9ae7f49c75a154f22d97e2a237032b2df6810cb8", "filename": "src/test/run-pass/method-mut-self-modifies-mut-slice-lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -38,7 +38,7 @@ impl<'a> MyWriter for &'a mut [u8] {\n }\n \n fn main() {\n-    let mut buf = [0_u8, .. 6];\n+    let mut buf = [0_u8; 6];\n \n     {\n         let mut writer = buf.as_mut_slice();"}, {"sha": "fbecb6851b68758dd44ad067850761c22dafde8b", "filename": "src/test/run-pass/method-two-traits-distinguished-via-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -28,7 +28,7 @@ impl<T> B for *const [T] {\n }\n \n fn main() {\n-    let x: [int, ..4] = [1,2,3,4];\n+    let x: [int; 4] = [1,2,3,4];\n     let xptr = x.as_slice() as *const _;\n     xptr.foo();\n }"}, {"sha": "bf926a6c48ace0fcf29841d4c89b69e4f47cf49f", "filename": "src/test/run-pass/mutability-inherits-through-fixed-length-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutability-inherits-through-fixed-length-vec.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n fn test1() {\n-    let mut ints = [0i, ..32];\n+    let mut ints = [0i; 32];\n     ints[0] += 1;\n     assert_eq!(ints[0], 1);\n }\n \n fn test2() {\n-    let mut ints = [0i, ..32];\n+    let mut ints = [0i; 32];\n     for i in ints.iter_mut() { *i += 22; }\n     for i in ints.iter() { assert!(*i == 22); }\n }"}, {"sha": "e06461daed0c93c9afea708e96e195bf276283cc", "filename": "src/test/run-pass/new-style-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static FOO: [int, ..3] = [1, 2, 3];\n+static FOO: [int; 3] = [1, 2, 3];\n \n pub fn main() {\n     println!(\"{} {} {}\", FOO[0], FOO[1], FOO[2]);"}, {"sha": "2660de619e9c775f709159ac750df76c67845c96", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -20,7 +20,7 @@ use std::{option, mem};\n // trying to get assert failure messages that at least identify which case\n // failed.\n \n-enum E<T> { Thing(int, T), Nothing((), ((), ()), [i8, ..0]) }\n+enum E<T> { Thing(int, T), Nothing((), ((), ()), [i8; 0]) }\n impl<T> E<T> {\n     fn is_none(&self) -> bool {\n         match *self {\n@@ -54,7 +54,7 @@ macro_rules! check_fancy {\n         check_fancy!($e: $T, |ptr| assert!(*ptr == $e));\n     }};\n     ($e:expr: $T:ty, |$v:ident| $chk:expr) => {{\n-        assert!(E::Nothing::<$T>((), ((), ()), [23i8, ..0]).is_none());\n+        assert!(E::Nothing::<$T>((), ((), ()), [23i8; 0]).is_none());\n         let e = $e;\n         let t_ = E::Thing::<$T>(23, e);\n         match t_.get_ref() {"}, {"sha": "afc22be38b8a48b16b542a642f46a8418cea235e", "filename": "src/test/run-pass/nullable-pointer-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,7 +12,7 @@\n \n use std::mem;\n \n-enum E<T> { Thing(int, T), Nothing((), ((), ()), [i8, ..0]) }\n+enum E<T> { Thing(int, T), Nothing((), ((), ()), [i8; 0]) }\n struct S<T>(int, T);\n \n // These are macros so we get useful assert messages."}, {"sha": "a866be43a051473b5b8fcc9fe0921a10b8307414", "filename": "src/test/run-pass/order-drop-with-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Forder-drop-with-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Forder-drop-with-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Forder-drop-with-match.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -14,7 +14,7 @@\n // in ORDER matching up to when it ran.\n // Correct order is: matched, inner, outer\n \n-static mut ORDER: [uint, ..3] = [0, 0, 0];\n+static mut ORDER: [uint; 3] = [0, 0, 0];\n static mut INDEX: uint = 0;\n \n struct A;"}, {"sha": "674d0dc86da1cd35900a7e6ba06c0c6548a5551d", "filename": "src/test/run-pass/out-of-stack-new-thread-no-split.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -27,7 +27,7 @@ pub fn black_box<T>(dummy: T) { unsafe { asm!(\"\" : : \"r\"(&dummy)) } }\n \n #[no_stack_check]\n fn recurse() {\n-    let buf = [0i, ..10];\n+    let buf = [0i; 10];\n     black_box(buf);\n     recurse();\n }"}, {"sha": "79926776abf4c0284470a080158bf793c993290d", "filename": "src/test/run-pass/out-of-stack-no-split.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -28,7 +28,7 @@ pub fn black_box<T>(dummy: T) { unsafe { asm!(\"\" : : \"r\"(&dummy)) } }\n \n #[no_stack_check]\n fn recurse() {\n-    let buf = [0i, ..10];\n+    let buf = [0i; 10];\n     black_box(buf);\n     recurse();\n }"}, {"sha": "1594cca89e55b8ada6f50b385afd3922c1f72964", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -22,7 +22,7 @@ use std::os;\n pub fn black_box<T>(dummy: T) { unsafe { asm!(\"\" : : \"r\"(&dummy)) } }\n \n fn silent_recurse() {\n-    let buf = [0i, ..1000];\n+    let buf = [0i; 1000];\n     black_box(buf);\n     silent_recurse();\n }"}, {"sha": "004a30220183ed101a9b5b28010625286121a397", "filename": "src/test/run-pass/packed-struct-generic-layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -20,7 +20,7 @@ struct S<T, S> {\n pub fn main() {\n     unsafe {\n         let s = S { a: 0xff_ff_ff_ffu32, b: 1, c: 0xaa_aa_aa_aa as i32 };\n-        let transd : [u8, .. 9] = mem::transmute(s);\n+        let transd : [u8; 9] = mem::transmute(s);\n         // Don't worry about endianness, the numbers are palindromic.\n         assert!(transd ==\n                    [0xff, 0xff, 0xff, 0xff,\n@@ -29,7 +29,7 @@ pub fn main() {\n \n \n         let s = S { a: 1u8, b: 2u8, c: 0b10000001_10000001 as i16};\n-        let transd : [u8, .. 4] = mem::transmute(s);\n+        let transd : [u8; 4] = mem::transmute(s);\n         // Again, no endianness problems.\n         assert!(transd ==\n                    [1, 2, 0b10000001, 0b10000001]);"}, {"sha": "9e94502a92a6384199380bd85bc708ed62d80cea", "filename": "src/test/run-pass/packed-struct-layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -13,7 +13,7 @@ use std::mem;\n #[repr(packed)]\n struct S4 {\n     a: u8,\n-    b: [u8, .. 3],\n+    b: [u8; 3],\n }\n \n #[repr(packed)]\n@@ -25,11 +25,11 @@ struct S5 {\n pub fn main() {\n     unsafe {\n         let s4 = S4 { a: 1, b: [2,3,4] };\n-        let transd : [u8, .. 4] = mem::transmute(s4);\n+        let transd : [u8; 4] = mem::transmute(s4);\n         assert!(transd == [1, 2, 3, 4]);\n \n         let s5 = S5 { a: 1, b: 0xff_00_00_ff };\n-        let transd : [u8, .. 5] = mem::transmute(s5);\n+        let transd : [u8; 5] = mem::transmute(s5);\n         // Don't worry about endianness, the u32 is palindromic.\n         assert!(transd == [1, 0xff, 0, 0, 0xff]);\n     }"}, {"sha": "846d51e2e7ecc916e29e1fad89a53541ab5bc610", "filename": "src/test/run-pass/packed-struct-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -14,7 +14,7 @@ use std::mem;\n #[repr(packed)]\n struct S4 {\n     a: u8,\n-    b: [u8, .. 3],\n+    b: [u8;  3],\n }\n \n #[repr(packed)]"}, {"sha": "d2121aa775216d221b34ee7776744d263fb06b36", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -22,9 +22,9 @@ struct Foo {\n impl Copy for Foo {}\n \n pub fn main() {\n-    let foos = [Foo { bar: 1, baz: 2 }, .. 10];\n+    let foos = [Foo { bar: 1, baz: 2 }; 10];\n \n-    assert_eq!(mem::size_of::<[Foo, .. 10]>(), 90);\n+    assert_eq!(mem::size_of::<[Foo; 10]>(), 90);\n \n     for i in range(0u, 10) {\n         assert_eq!(foos[i], Foo { bar: 1, baz: 2});"}, {"sha": "c41d678b0f5b702826f1b7e098112bc9a5b37f5d", "filename": "src/test/run-pass/packed-tuple-struct-layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -11,19 +11,19 @@\n use std::mem;\n \n #[repr(packed)]\n-struct S4(u8,[u8, .. 3]);\n+struct S4(u8,[u8; 3]);\n \n #[repr(packed)]\n struct S5(u8,u32);\n \n pub fn main() {\n     unsafe {\n         let s4 = S4(1, [2,3,4]);\n-        let transd : [u8, .. 4] = mem::transmute(s4);\n+        let transd : [u8; 4] = mem::transmute(s4);\n         assert!(transd == [1, 2, 3, 4]);\n \n         let s5 = S5(1, 0xff_00_00_ff);\n-        let transd : [u8, .. 5] = mem::transmute(s5);\n+        let transd : [u8; 5] = mem::transmute(s5);\n         // Don't worry about endianness, the u32 is palindromic.\n         assert!(transd == [1, 0xff, 0, 0, 0xff]);\n     }"}, {"sha": "a0b88ea53c5a4f3d60d54de588ffbeba0e8cd883", "filename": "src/test/run-pass/packed-tuple-struct-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -12,7 +12,7 @@\n use std::mem;\n \n #[repr(packed)]\n-struct S4(u8,[u8, .. 3]);\n+struct S4(u8,[u8;  3]);\n \n #[repr(packed)]\n struct S5(u8, u32);"}, {"sha": "41396ef01bee8def070e284a246f9f2822bd2069", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -18,7 +18,7 @@ struct A {\n \n struct B {\n     v1: int,\n-    v2: [int, ..3],\n+    v2: [int; 3],\n     v3: Vec<int> ,\n     v4: C,\n     v5: Box<C>,"}, {"sha": "a53f1da4ce605ee7a1bdc3bbb8bd115c2ba10732", "filename": "src/test/run-pass/repeat-expr-in-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Frepeat-expr-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Frepeat-expr-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepeat-expr-in-static.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static FOO: [int, ..4] = [32, ..4];\n-static BAR: [int, ..4] = [32, 32, 32, 32];\n+static FOO: [int; 4] = [32; 4];\n+static BAR: [int; 4] = [32, 32, 32, 32];\n \n pub fn main() {\n     assert!(FOO == BAR);"}, {"sha": "0781822cb748203ac502305255d04a561904d0cd", "filename": "src/test/run-pass/repeated-vector-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -11,8 +11,8 @@\n #![feature(slicing_syntax)]\n \n pub fn main() {\n-    let x = [ [true], ..512 ];\n-    let y = [ 0i, ..1 ];\n+    let x = [ [true]; 512 ];\n+    let y = [ 0i; 1 ];\n \n     print!(\"[\");\n     for xi in x.iter() {"}, {"sha": "c2bd738b8a46bad1371ec7cb34342f03d69b57bb", "filename": "src/test/run-pass/uninit-empty-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -18,6 +18,6 @@ struct Foo;\n pub fn main() {\n     unsafe {\n         let _x: Foo = mem::uninitialized();\n-        let _x: [Foo, ..2] = mem::uninitialized();\n+        let _x: [Foo; 2] = mem::uninitialized();\n     }\n }"}, {"sha": "271f5817c9e79fd0a3c90012fe8bf9f804ae2524", "filename": "src/test/run-pass/unsized3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized3.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -60,7 +60,7 @@ pub fn main() {\n \n     unsafe {\n         struct Foo_<T> {\n-            f: [T, ..3]\n+            f: [T; 3]\n         }\n \n         let data = box Foo_{f: [1i32, 2, 3] };\n@@ -72,7 +72,7 @@ pub fn main() {\n \n         struct Baz_ {\n             f1: uint,\n-            f2: [u8, ..5],\n+            f2: [u8; 5],\n         }\n \n         let data = box Baz_{ f1: 42, f2: ['a' as u8, 'b' as u8, 'c' as u8, 'd' as u8, 'e' as u8] };"}, {"sha": "f8eef98856114a9e1703ba5a044ac2a9b5971377", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -19,7 +19,7 @@ extern {\n }\n \n unsafe fn check<T>(expected: &str, f: |*mut c_char| -> T) {\n-    let mut x = [0 as c_char, ..50];\n+    let mut x = [0 as c_char; 50];\n     f(&mut x[0] as *mut c_char);\n     let res = CString::new(&x[0], false);\n     assert_eq!(expected, res.as_str().unwrap());"}, {"sha": "4a36231e72b0af44aead25b0212a3a96ccdcd056", "filename": "src/test/run-pass/vec-dst.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fvec-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fvec-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-dst.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n pub fn main() {\n-    // Tests for indexing into box/& [T, ..n]\n-    let x: [int, ..3] = [1, 2, 3];\n-    let mut x: Box<[int, ..3]> = box x;\n+    // Tests for indexing into box/& [T; n]\n+    let x: [int; 3] = [1, 2, 3];\n+    let mut x: Box<[int; 3]> = box x;\n     assert!(x[0] == 1);\n     assert!(x[1] == 2);\n     assert!(x[2] == 3);\n@@ -20,8 +20,8 @@ pub fn main() {\n     assert!(x[1] == 45);\n     assert!(x[2] == 3);\n \n-    let mut x: [int, ..3] = [1, 2, 3];\n-    let x: &mut [int, ..3] = &mut x;\n+    let mut x: [int; 3] = [1, 2, 3];\n+    let x: &mut [int; 3] = &mut x;\n     assert!(x[0] == 1);\n     assert!(x[1] == 2);\n     assert!(x[2] == 3);"}, {"sha": "20e1becd008a52d2215b7068f658b2ad97c40cbb", "filename": "src/test/run-pass/vec-fixed-length.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -11,17 +11,17 @@\n use std::mem::size_of;\n \n pub fn main() {\n-    let x: [int, ..4] = [1, 2, 3, 4];\n+    let x: [int; 4] = [1, 2, 3, 4];\n     assert_eq!(x[0], 1);\n     assert_eq!(x[1], 2);\n     assert_eq!(x[2], 3);\n     assert_eq!(x[3], 4);\n \n-    assert_eq!(size_of::<[u8, ..4]>(), 4u);\n+    assert_eq!(size_of::<[u8; 4]>(), 4u);\n \n     // FIXME #10183\n     // FIXME #18069\n     //if cfg!(target_word_size = \"64\") {\n-    //    assert_eq!(size_of::<[u8, ..(1 << 32)]>(), (1u << 32));\n+    //    assert_eq!(size_of::<[u8; (1 << 32)]>(), (1u << 32));\n     //}\n }"}, {"sha": "97a443cb3b8e0fc0c6c55a7165e11b1b7eda03e7", "filename": "src/test/run-pass/vec-repeat-with-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fvec-repeat-with-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fvec-repeat-with-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-repeat-with-cast.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn main() { let _a = [0i, ..1 as uint]; }\n+pub fn main() { let _a = [0i; 1 as uint]; }"}, {"sha": "fe89c7532eebcc0ad429e6a9af5f2fd17a7e045c", "filename": "src/test/run-pass/vector-sort-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1d818b836644b67e2027cc358aa8d86f85e287/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs?ref=bc1d818b836644b67e2027cc358aa8d86f85e287", "patch": "@@ -14,7 +14,7 @@ use std::rand::{task_rng, Rng, Rand};\n \n const REPEATS: uint = 5;\n const MAX_LEN: uint = 32;\n-static drop_counts: [AtomicUint, .. MAX_LEN] =\n+static drop_counts: [AtomicUint;  MAX_LEN] =\n     // FIXME #5244: AtomicUint is not Copy.\n     [\n         INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT,"}]}