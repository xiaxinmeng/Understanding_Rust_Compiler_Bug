{"sha": "134c2910ec53016dd4319206921c623e8c9a57b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNGMyOTEwZWM1MzAxNmRkNDMxOTIwNjkyMWM2MjNlOGM5YTU3Yjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-02-20T09:32:33Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:18Z"}, "message": "Const eval will oom together with rustc now", "tree": {"sha": "81fbe8b495e8197b11dfa6743872f70b09d9a251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81fbe8b495e8197b11dfa6743872f70b09d9a251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/134c2910ec53016dd4319206921c623e8c9a57b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53oACgkQpp+NIls6\n19lD/g/+In2/yvHKdRrEcbh7Olk49GJZD6Nmdf4KsynGNWsgT97AExB+yhFK4eoO\n5mKuBt/8B/I041S6BqhvA4scJsBbP3sTbEf3AtfEyhiW91v2jVW2LxQLVAJnv2bz\nhZMsgEln+I78bnxmWKXTC/T9hrMANTW2LMVEBFfW2LIWhJk8ZQd6YrmPeTxwDywr\nEuNbpughRxcX7slnoRlTRjRu5DqjHpiQ32oMlU022FNh4x82ZBCo0+aPNvsCcYDU\n0KbJ8DQ++ikc44YAcby3d14U8WLFVIN+RJ76dmqaiLkKhjKW9ZKJEk+7ah/QcnTL\n3kr2gGk9FaPjJYJjMzVoPLPAjOocUHnVK/zFb7GwsnfnruPqDl9yENR8LjpXB0Nw\nPoRA6McUWhhtTurPW4ao1WvMQDY4eQ/6sUI6HoOVd6GPgaK4NUYBEvIqTvFkLNmv\nUXXsEyHibIAuZZcpvq6sIrl4uDGiXP3C124bFYnDMvRONMgNY8AoJUnInzaGSGzE\nSnwCtvAxMR+CPS0hwsdQaNGyg/4uIpOBg0fxr/c2md67+Wope8Rxz7FUkJP9jzhV\nMJBGbANrucp4Hrx6OnyMcVjlIoVcW7pBWBNnauxZcm5tLxo5ZML29RroTe5OKQzD\n+rNYMuG7GJyRPcHpSBiJ8MFz4wFznJWbWq04RZXoz4NG4Z/36iI=\n=L5Gf\n-----END PGP SIGNATURE-----", "payload": "tree 81fbe8b495e8197b11dfa6743872f70b09d9a251\nparent 0ca4b45a0ccf9e29a17f0613fb280411910b3dbd\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1519119153 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494458 +0100\n\nConst eval will oom together with rustc now\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/134c2910ec53016dd4319206921c623e8c9a57b7", "html_url": "https://github.com/rust-lang/rust/commit/134c2910ec53016dd4319206921c623e8c9a57b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/134c2910ec53016dd4319206921c623e8c9a57b7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca4b45a0ccf9e29a17f0613fb280411910b3dbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca4b45a0ccf9e29a17f0613fb280411910b3dbd", "html_url": "https://github.com/rust-lang/rust/commit/0ca4b45a0ccf9e29a17f0613fb280411910b3dbd"}], "stats": {"total": 44, "additions": 0, "deletions": 44}, "files": [{"sha": "874c7c27deaa6c438ec4734d4abba2daf2bea3ce", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/134c2910ec53016dd4319206921c623e8c9a57b7/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134c2910ec53016dd4319206921c623e8c9a57b7/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=134c2910ec53016dd4319206921c623e8c9a57b7", "patch": "@@ -562,15 +562,6 @@ for ::mir::interpret::EvalError<'gcx> {\n             },\n             Intrinsic(ref s) => s.hash_stable(hcx, hasher),\n             InvalidChar(c) => c.hash_stable(hcx, hasher),\n-            OutOfMemory {\n-                allocation_size,\n-                memory_size,\n-                memory_usage,\n-            } => {\n-                allocation_size.hash_stable(hcx, hasher);\n-                memory_size.hash_stable(hcx, hasher);\n-                memory_usage.hash_stable(hcx, hasher)\n-            },\n             AbiViolation(ref s) => s.hash_stable(hcx, hasher),\n             AlignmentCheckFailed {\n                 required,"}, {"sha": "51660b180cd980d0f7456d46287a3f78f41c2386", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/134c2910ec53016dd4319206921c623e8c9a57b7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134c2910ec53016dd4319206921c623e8c9a57b7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=134c2910ec53016dd4319206921c623e8c9a57b7", "patch": "@@ -65,11 +65,6 @@ pub enum EvalErrorKind<'tcx> {\n     Intrinsic(String),\n     OverflowingMath,\n     InvalidChar(u128),\n-    OutOfMemory {\n-        allocation_size: u64,\n-        memory_size: u64,\n-        memory_usage: u64,\n-    },\n     ExecutionTimeLimitReached,\n     StackFrameLimitReached,\n     OutOfTls,\n@@ -193,8 +188,6 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"mir not found\",\n             InvalidChar(..) =>\n                 \"tried to interpret an invalid 32-bit value as a char\",\n-            OutOfMemory{..} =>\n-                \"could not allocate more memory\",\n             ExecutionTimeLimitReached =>\n                 \"the expression was too complex to be evaluated or resulted in an infinite loop\",\n             StackFrameLimitReached =>\n@@ -297,9 +290,6 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"{}\", err),\n             InvalidChar(c) =>\n                 write!(f, \"tried to interpret an invalid 32-bit value as a char: {}\", c),\n-            OutOfMemory { allocation_size, memory_size, memory_usage } =>\n-                write!(f, \"tried to allocate {} more bytes, but only {} bytes are free of the {} byte memory\",\n-                       allocation_size, memory_size - memory_usage, memory_size),\n             AlignmentCheckFailed { required, has } =>\n                write!(f, \"tried to access memory with alignment {}, but alignment {} is required\",\n                       has, required),"}, {"sha": "defc5731f2f8aa9bf65fbfcee6d2c0a6d1347704", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/134c2910ec53016dd4319206921c623e8c9a57b7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134c2910ec53016dd4319206921c623e8c9a57b7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=134c2910ec53016dd4319206921c623e8c9a57b7", "patch": "@@ -107,8 +107,6 @@ pub struct Session {\n     pub const_eval_stack_frame_limit: Cell<usize>,\n     /// The maximum number miri steps per constant\n     pub const_eval_step_limit: Cell<usize>,\n-    /// The maximum number of virtual bytes per constant\n-    pub const_eval_memory_limit: Cell<u64>,\n \n     /// The metadata::creader module may inject an allocator/panic_runtime\n     /// dependency if it didn't already find one, and this tracks what was\n@@ -1013,7 +1011,6 @@ pub fn build_session_(sopts: config::Options,\n         type_length_limit: Cell::new(1048576),\n         const_eval_stack_frame_limit: Cell::new(100),\n         const_eval_step_limit: Cell::new(1_000_000),\n-        const_eval_memory_limit: Cell::new(100 * 1024 * 1024), // 100 MB\n         next_node_id: Cell::new(NodeId::new(1)),\n         injected_allocator: Cell::new(None),\n         allocator_kind: Cell::new(None),"}, {"sha": "78fccaa113106c80f65677061c14fbc4f285eafe", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/134c2910ec53016dd4319206921c623e8c9a57b7/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134c2910ec53016dd4319206921c623e8c9a57b7/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=134c2910ec53016dd4319206921c623e8c9a57b7", "patch": "@@ -625,11 +625,6 @@ impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n             Intrinsic(ref s) => Intrinsic(s.clone()),\n             OverflowingMath => OverflowingMath,\n             InvalidChar(c) => InvalidChar(c),\n-            OutOfMemory {\n-                allocation_size,\n-                memory_size,\n-                memory_usage,\n-            } => OutOfMemory { allocation_size, memory_size, memory_usage },\n             ExecutionTimeLimitReached => ExecutionTimeLimitReached,\n             StackFrameLimitReached => StackFrameLimitReached,\n             OutOfTls => OutOfTls,"}, {"sha": "72a966ab38d614f4b38333e3420cb093ce477063", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/134c2910ec53016dd4319206921c623e8c9a57b7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134c2910ec53016dd4319206921c623e8c9a57b7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=134c2910ec53016dd4319206921c623e8c9a57b7", "patch": "@@ -43,12 +43,6 @@ pub struct Memory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// Stores statics while they are being processed, before they are interned and thus frozen\n     uninitialized_statics: HashMap<AllocId, Allocation>,\n \n-    /// Number of virtual bytes allocated.\n-    memory_usage: u64,\n-\n-    /// Maximum number of virtual bytes that may be allocated.\n-    memory_size: u64,\n-\n     /// The current stack frame.  Used to check accesses against locks.\n     pub cur_frame: usize,\n \n@@ -63,8 +57,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             alloc_map: HashMap::new(),\n             uninitialized_statics: HashMap::new(),\n             tcx,\n-            memory_size: tcx.sess.const_eval_memory_limit.get(),\n-            memory_usage: 0,\n             cur_frame: usize::max_value(),\n         }\n     }\n@@ -92,14 +84,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         align: Align,\n         kind: Option<MemoryKind<M::MemoryKinds>>,\n     ) -> EvalResult<'tcx, MemoryPointer> {\n-        if self.memory_size - self.memory_usage < size {\n-            return err!(OutOfMemory {\n-                allocation_size: size,\n-                memory_size: self.memory_size,\n-                memory_usage: self.memory_usage,\n-            });\n-        }\n-        self.memory_usage += size;\n         assert_eq!(size as usize as u64, size);\n         let alloc = Allocation {\n             bytes: vec![0; size as usize],\n@@ -223,7 +207,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             }\n         }\n \n-        self.memory_usage -= alloc.bytes.len() as u64;\n         debug!(\"deallocated : {}\", ptr.alloc_id);\n \n         Ok(())"}]}