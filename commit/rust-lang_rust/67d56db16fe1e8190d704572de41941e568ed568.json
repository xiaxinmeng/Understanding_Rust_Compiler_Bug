{"sha": "67d56db16fe1e8190d704572de41941e568ed568", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZDU2ZGIxNmZlMWU4MTkwZDcwNDU3MmRlNDE5NDFlNTY4ZWQ1Njg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-11T00:50:31Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:39Z"}, "message": "Rearrange x86 intrinsics to prepare for AVX.", "tree": {"sha": "a946c2ea72e1a071271626616e4a3e540d9040fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a946c2ea72e1a071271626616e4a3e540d9040fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d56db16fe1e8190d704572de41941e568ed568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d56db16fe1e8190d704572de41941e568ed568", "html_url": "https://github.com/rust-lang/rust/commit/67d56db16fe1e8190d704572de41941e568ed568", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d56db16fe1e8190d704572de41941e568ed568/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "627784b186e49648f63af0dc24cd912a7b53d56d", "url": "https://api.github.com/repos/rust-lang/rust/commits/627784b186e49648f63af0dc24cd912a7b53d56d", "html_url": "https://github.com/rust-lang/rust/commit/627784b186e49648f63af0dc24cd912a7b53d56d"}], "stats": {"total": 160, "additions": 87, "deletions": 73}, "files": [{"sha": "a7dfc188417d1ce701855df1979884008f7701ee", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67d56db16fe1e8190d704572de41941e568ed568/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d56db16fe1e8190d704572de41941e568ed568/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=67d56db16fe1e8190d704572de41941e568ed568", "patch": "@@ -45,6 +45,14 @@ fn f(width: u8) -> Type { Type::Float(width) }\n fn v(x: Type, length: u8) -> Type { Type::Vector(Box::new(x), length) }\n \n macro_rules! ty {\n+    (f32x8) => (v(f(32), 8));\n+    (f64x4) => (v(f(64), 4));\n+\n+    (i8x32) => (v(i(8), 32));\n+    (i16x16) => (v(i(16), 16));\n+    (i32x8) => (v(i(32), 8));\n+    (i64x4) => (v(i(64), 4));\n+\n     (f32x4) => (v(f(32), 4));\n     (f64x2) => (v(f(64), 2));\n "}, {"sha": "cffcb5fa8be8a0ae67a25edbefc42ad03ea7aca5", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 79, "deletions": 73, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/67d56db16fe1e8190d704572de41941e568ed568/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d56db16fe1e8190d704572de41941e568ed568/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=67d56db16fe1e8190d704572de41941e568ed568", "patch": "@@ -18,82 +18,88 @@ macro_rules! p {\n }\n \n pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n-    if !name.starts_with(\"mm_\") { return None }\n+    if name.starts_with(\"mm_\") {\n+        Some(match &name[\"mm_\".len()..] {\n+            \"sqrt_ps\" => plain!(\"llvm.sqrt.v4f32\", (f32x4) -> f32x4),\n+            \"sqrt_pd\" => plain!(\"llvm.sqrt.v2f64\", (f64x2) -> f64x2),\n \n-    Some(match &name[\"mm_\".len()..] {\n-        \"sqrt_ps\" => plain!(\"llvm.sqrt.v4f32\", (f32x4) -> f32x4),\n-        \"sqrt_pd\" => plain!(\"llvm.sqrt.v2f64\", (f64x2) -> f64x2),\n+            \"movemask_ps\" => p!(\"sse.movmsk.ps\", (f32x4) -> i32),\n+            \"max_ps\" => p!(\"sse.max.ps\", (f32x4, f32x4) -> f32x4),\n+            \"min_ps\" => p!(\"sse.min.ps\", (f32x4, f32x4) -> f32x4),\n+            \"rsqrt_ps\" => p!(\"sse.rsqrt.ps\", (f32x4) -> f32x4),\n+            \"rcp_ps\" => p!(\"sse.rcp.ps\", (f32x4) -> f32x4),\n \n-        \"movemask_ps\" => p!(\"sse.movmsk.ps\", (f32x4) -> i32),\n-        \"max_ps\" => p!(\"sse.max.ps\", (f32x4, f32x4) -> f32x4),\n-        \"min_ps\" => p!(\"sse.min.ps\", (f32x4, f32x4) -> f32x4),\n-        \"rsqrt_ps\" => p!(\"sse.rsqrt.ps\", (f32x4) -> f32x4),\n-        \"rcp_ps\" => p!(\"sse.rcp.ps\", (f32x4) -> f32x4),\n+            \"adds_epi16\" => p!(\"sse2.padds.w\", (i16x8, i16x8) -> i16x8),\n+            \"adds_epi8\" => p!(\"sse2.padds.b\", (i8x16, i8x16) -> i8x16),\n+            \"adds_epu16\" => p!(\"sse2.paddus.w\", (i16x8, i16x8) -> i16x8),\n+            \"adds_epu8\" => p!(\"sse2.paddus.b\", (i8x16, i8x16) -> i8x16),\n+            \"avg_epu16\" => p!(\"sse2.pavg.w\", (i16x8, i16x8) -> i16x8),\n+            \"avg_epu8\" => p!(\"sse2.pavg.b\", (i8x16, i8x16) -> i8x16),\n+            \"madd_epi16\" => p!(\"sse2.pmadd.wd\", (i16x8, i16x8) -> i32x4),\n+            \"max_epi16\" => p!(\"sse2.pmaxs.w\", (i16x8, i16x8) -> i16x8),\n+            \"max_epu8\" => p!(\"sse2.pmaxu.b\", (i8x16, i8x16) -> i8x16),\n+            \"max_pd\" => p!(\"sse2.max.pd\", (f64x2, f64x2) -> f64x2),\n+            \"min_epi16\" => p!(\"sse2.pmins.w\", (i16x8, i16x8) -> i16x8),\n+            \"min_epu8\" => p!(\"sse2.pminu.b\", (i8x16, i8x16) -> i8x16),\n+            \"min_pd\" => p!(\"sse2.min.pd\", (f64x2, f64x2) -> f64x2),\n+            \"movemask_pd\" => p!(\"sse2.movmsk.pd\", (f64x2) -> i32),\n+            \"movemask_epi8\" => p!(\"sse2.pmovmskb.128\", (i8x16) -> i32),\n+            \"mul_epu32\" => p!(\"sse2.pmulu.dq\", (i32x4, i32x4) -> i64x2),\n+            \"mulhi_epi16\" => p!(\"sse2.pmulh.w\", (i8x16, i8x16) -> i8x16),\n+            \"mulhi_epu16\" => p!(\"sse2.pmulhu.w\", (i8x16, i8x16) -> i8x16),\n+            \"packs_epi16\" => p!(\"sse2.packsswb.128\", (i16x8, i16x8) -> i8x16),\n+            \"packs_epi32\" => p!(\"sse2.packssdw.128\", (i32x4, i32x4) -> i16x8),\n+            \"packus_epi16\" => p!(\"sse2.packuswb.128\", (i16x8, i16x8) -> i8x16),\n+            \"sad_epu8\" => p!(\"sse2.psad.bw\", (i8x16, i8x16) -> i64x2),\n+            \"subs_epi16\" => p!(\"sse2.psubs.w\", (i16x8, i16x8) -> i16x8),\n+            \"subs_epi8\" => p!(\"sse2.psubs.b\", (i8x16, i8x16) -> i8x16),\n+            \"subs_epu16\" => p!(\"sse2.psubus.w\", (i16x8, i16x8) -> i16x8),\n+            \"subs_epu8\" => p!(\"sse2.psubus.b\", (i8x16, i8x16) -> i8x16),\n \n-        \"adds_epi16\" => p!(\"sse2.padds.w\", (i16x8, i16x8) -> i16x8),\n-        \"adds_epi8\" => p!(\"sse2.padds.b\", (i8x16, i8x16) -> i8x16),\n-        \"adds_epu16\" => p!(\"sse2.paddus.w\", (i16x8, i16x8) -> i16x8),\n-        \"adds_epu8\" => p!(\"sse2.paddus.b\", (i8x16, i8x16) -> i8x16),\n-        \"avg_epu16\" => p!(\"sse2.pavg.w\", (i16x8, i16x8) -> i16x8),\n-        \"avg_epu8\" => p!(\"sse2.pavg.b\", (i8x16, i8x16) -> i8x16),\n-        \"madd_epi16\" => p!(\"sse2.pmadd.wd\", (i16x8, i16x8) -> i32x4),\n-        \"max_epi16\" => p!(\"sse2.pmaxs.w\", (i16x8, i16x8) -> i16x8),\n-        \"max_epu8\" => p!(\"sse2.pmaxu.b\", (i8x16, i8x16) -> i8x16),\n-        \"max_pd\" => p!(\"sse2.max.pd\", (f64x2, f64x2) -> f64x2),\n-        \"min_epi16\" => p!(\"sse2.pmins.w\", (i16x8, i16x8) -> i16x8),\n-        \"min_epu8\" => p!(\"sse2.pminu.b\", (i8x16, i8x16) -> i8x16),\n-        \"min_pd\" => p!(\"sse2.min.pd\", (f64x2, f64x2) -> f64x2),\n-        \"movemask_pd\" => p!(\"sse2.movmsk.pd\", (f64x2) -> i32),\n-        \"movemask_epi8\" => p!(\"sse2.pmovmskb.128\", (i8x16) -> i32),\n-        \"mul_epu32\" => p!(\"sse2.pmulu.dq\", (i32x4, i32x4) -> i64x2),\n-        \"mulhi_epi16\" => p!(\"sse2.pmulh.w\", (i8x16, i8x16) -> i8x16),\n-        \"mulhi_epu16\" => p!(\"sse2.pmulhu.w\", (i8x16, i8x16) -> i8x16),\n-        \"packs_epi16\" => p!(\"sse2.packsswb.128\", (i16x8, i16x8) -> i8x16),\n-        \"packs_epi32\" => p!(\"sse2.packssdw.128\", (i32x4, i32x4) -> i16x8),\n-        \"packus_epi16\" => p!(\"sse2.packuswb.128\", (i16x8, i16x8) -> i8x16),\n-        \"sad_epu8\" => p!(\"sse2.psad.bw\", (i8x16, i8x16) -> i64x2),\n-        \"subs_epi16\" => p!(\"sse2.psubs.w\", (i16x8, i16x8) -> i16x8),\n-        \"subs_epi8\" => p!(\"sse2.psubs.b\", (i8x16, i8x16) -> i8x16),\n-        \"subs_epu16\" => p!(\"sse2.psubus.w\", (i16x8, i16x8) -> i16x8),\n-        \"subs_epu8\" => p!(\"sse2.psubus.b\", (i8x16, i8x16) -> i8x16),\n+            \"addsub_pd\" => p!(\"sse3.addsub.pd\", (f64x2, f64x2) -> f64x2),\n+            \"addsub_ps\" => p!(\"sse3.addsub.ps\", (f32x4, f32x4) -> f32x4),\n+            \"hadd_pd\" => p!(\"sse3.hadd.pd\", (f64x2, f64x2) -> f64x2),\n+            \"hadd_ps\" => p!(\"sse3.hadd.ps\", (f32x4, f32x4) -> f32x4),\n+            \"hsub_pd\" => p!(\"sse3.hsub.pd\", (f64x2, f64x2) -> f64x2),\n+            \"hsub_ps\" => p!(\"sse3.hsub.ps\", (f32x4, f32x4) -> f32x4),\n \n-        \"addsub_pd\" => p!(\"sse3.addsub.pd\", (f64x2, f64x2) -> f64x2),\n-        \"addsub_ps\" => p!(\"sse3.addsub.ps\", (f32x4, f32x4) -> f32x4),\n-        \"hadd_pd\" => p!(\"sse3.hadd.pd\", (f64x2, f64x2) -> f64x2),\n-        \"hadd_ps\" => p!(\"sse3.hadd.ps\", (f32x4, f32x4) -> f32x4),\n-        \"hsub_pd\" => p!(\"sse3.hsub.pd\", (f64x2, f64x2) -> f64x2),\n-        \"hsub_ps\" => p!(\"sse3.hsub.ps\", (f32x4, f32x4) -> f32x4),\n+            \"abs_epi16\" => p!(\"ssse3.pabs.w.128\", (i16x8) -> i16x8),\n+            \"abs_epi32\" => p!(\"ssse3.pabs.d.128\", (i32x4) -> i32x4),\n+            \"abs_epi8\" => p!(\"ssse3.pabs.b.128\", (i8x16) -> i8x16),\n+            \"hadd_epi16\" => p!(\"ssse3.phadd.w.128\", (i16x8, i16x8) -> i16x8),\n+            \"hadd_epi32\" => p!(\"ssse3.phadd.d.128\", (i32x4, i32x4) -> i32x4),\n+            \"hadds_epi16\" => p!(\"ssse3.phadd.sw.128\", (i16x8, i16x8) -> i16x8),\n+            \"hsub_epi16\" => p!(\"ssse3.phsub.w.128\", (i16x8, i16x8) -> i16x8),\n+            \"hsub_epi32\" => p!(\"ssse3.phsub.d.128\", (i32x4, i32x4) -> i32x4),\n+            \"hsubs_epi16\" => p!(\"ssse3.phsub.sw.128\", (i16x8, i16x8) -> i16x8),\n+            \"maddubs_epi16\" => p!(\"ssse3.pmadd.ub.sw.128\", (i8x16, i8x16) -> i16x8),\n+            \"mulhrs_epi16\" => p!(\"ssse3.pmul.hr.sw.128\", (i16x8, i16x8) -> i16x8),\n+            \"shuffle_epi8\" => p!(\"ssse3.pshuf.b.128\", (i8x16, i8x16) -> i8x16),\n+            \"sign_epi16\" => p!(\"ssse3.psign.w.128\", (i16x8, i16x8) -> i16x8),\n+            \"sign_epi32\" => p!(\"ssse3.psign.d.128\", (i32x4, i32x4) -> i32x4),\n+            \"sign_epi8\" => p!(\"ssse3.psign.b.128\", (i8x16, i8x16) -> i8x16),\n \n-        \"abs_epi16\" => p!(\"ssse3.pabs.w.128\", (i16x8) -> i16x8),\n-        \"abs_epi32\" => p!(\"ssse3.pabs.d.128\", (i32x4) -> i32x4),\n-        \"abs_epi8\" => p!(\"ssse3.pabs.b.128\", (i8x16) -> i8x16),\n-        \"hadd_epi16\" => p!(\"ssse3.phadd.w.128\", (i16x8, i16x8) -> i16x8),\n-        \"hadd_epi32\" => p!(\"ssse3.phadd.d.128\", (i32x4, i32x4) -> i32x4),\n-        \"hadds_epi16\" => p!(\"ssse3.phadd.sw.128\", (i16x8, i16x8) -> i16x8),\n-        \"hsub_epi16\" => p!(\"ssse3.phsub.w.128\", (i16x8, i16x8) -> i16x8),\n-        \"hsub_epi32\" => p!(\"ssse3.phsub.d.128\", (i32x4, i32x4) -> i32x4),\n-        \"hsubs_epi16\" => p!(\"ssse3.phsub.sw.128\", (i16x8, i16x8) -> i16x8),\n-        \"maddubs_epi16\" => p!(\"ssse3.pmadd.ub.sw.128\", (i8x16, i8x16) -> i16x8),\n-        \"mulhrs_epi16\" => p!(\"ssse3.pmul.hr.sw.128\", (i16x8, i16x8) -> i16x8),\n-        \"shuffle_epi8\" => p!(\"ssse3.pshuf.b.128\", (i8x16, i8x16) -> i8x16),\n-        \"sign_epi16\" => p!(\"ssse3.psign.w.128\", (i16x8, i16x8) -> i16x8),\n-        \"sign_epi32\" => p!(\"ssse3.psign.d.128\", (i32x4, i32x4) -> i32x4),\n-        \"sign_epi8\" => p!(\"ssse3.psign.b.128\", (i8x16, i8x16) -> i8x16),\n-\n-        \"max_epi32\" => p!(\"sse41.pmaxsd\", (i32x4, i32x4) -> i32x4),\n-        \"max_epi8\" => p!(\"sse41.pmaxsb\", (i8x16, i8x16) -> i8x16),\n-        \"max_epu16\" => p!(\"sse41.pmaxuw\", (i16x8, i16x8) -> i16x8),\n-        \"max_epu32\" => p!(\"sse41.pmaxud\", (i32x4, i32x4) -> i32x4),\n-        \"min_epi32\" => p!(\"sse41.pminsd\", (i32x4, i32x4) -> i32x4),\n-        \"min_epi8\" => p!(\"sse41.pminsb\", (i8x16, i8x16) -> i8x16),\n-        \"min_epu16\" => p!(\"sse41.pminuw\", (i16x8, i16x8) -> i16x8),\n-        \"min_epu32\" => p!(\"sse41.pminud\", (i32x4, i32x4) -> i32x4),\n-        \"minpos_epu16\" => p!(\"sse41.phminposuw\", (i16x8) -> i16x8),\n-        \"mul_epi32\" => p!(\"sse41.muldq\", (i32x4, i32x4) -> i64x2),\n-        \"packus_epi32\" => p!(\"sse41.packusdw\", (i32x4, i32x4) -> i16x8),\n-        \"testc_si128\" => p!(\"sse41.ptestc\", (i64x2, i64x2) -> i32),\n-        \"testnzc_si128\" => p!(\"sse41.ptestnzc\", (i64x2, i64x2) -> i32),\n-        \"testz_si128\" => p!(\"sse41.ptestz\", (i64x2, i64x2) -> i32),\n-        _ => return None\n-    })\n+            \"max_epi32\" => p!(\"sse41.pmaxsd\", (i32x4, i32x4) -> i32x4),\n+            \"max_epi8\" => p!(\"sse41.pmaxsb\", (i8x16, i8x16) -> i8x16),\n+            \"max_epu16\" => p!(\"sse41.pmaxuw\", (i16x8, i16x8) -> i16x8),\n+            \"max_epu32\" => p!(\"sse41.pmaxud\", (i32x4, i32x4) -> i32x4),\n+            \"min_epi32\" => p!(\"sse41.pminsd\", (i32x4, i32x4) -> i32x4),\n+            \"min_epi8\" => p!(\"sse41.pminsb\", (i8x16, i8x16) -> i8x16),\n+            \"min_epu16\" => p!(\"sse41.pminuw\", (i16x8, i16x8) -> i16x8),\n+            \"min_epu32\" => p!(\"sse41.pminud\", (i32x4, i32x4) -> i32x4),\n+            \"minpos_epu16\" => p!(\"sse41.phminposuw\", (i16x8) -> i16x8),\n+            \"mul_epi32\" => p!(\"sse41.muldq\", (i32x4, i32x4) -> i64x2),\n+            \"packus_epi32\" => p!(\"sse41.packusdw\", (i32x4, i32x4) -> i16x8),\n+            \"testc_si128\" => p!(\"sse41.ptestc\", (i64x2, i64x2) -> i32),\n+            \"testnzc_si128\" => p!(\"sse41.ptestnzc\", (i64x2, i64x2) -> i32),\n+            \"testz_si128\" => p!(\"sse41.ptestz\", (i64x2, i64x2) -> i32),\n+            _ => return None\n+        })\n+    } else if name.starts_with(\"mm256_\") {\n+        Some(match &name[\"mm256_\".len()..] {\n+            _ => return None,\n+        })\n+    } else {\n+        None\n+    }\n }"}]}