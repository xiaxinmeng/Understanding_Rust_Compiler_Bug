{"sha": "0621ccac626ef4ca15e2cdf0aceed13ad0d3f848", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MjFjY2FjNjI2ZWY0Y2ExNWUyY2RmMGFjZWVkMTNhZDBkM2Y4NDg=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-10T03:56:28Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-10T23:58:17Z"}, "message": "vec: move some code inside alloc_or_realloc", "tree": {"sha": "311b3c6a84d3bc5f582356b1ce9e86e6fa9abee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/311b3c6a84d3bc5f582356b1ce9e86e6fa9abee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0621ccac626ef4ca15e2cdf0aceed13ad0d3f848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0621ccac626ef4ca15e2cdf0aceed13ad0d3f848", "html_url": "https://github.com/rust-lang/rust/commit/0621ccac626ef4ca15e2cdf0aceed13ad0d3f848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0621ccac626ef4ca15e2cdf0aceed13ad0d3f848/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e92cbbe3337974caca28b801efa26734b3c6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e92cbbe3337974caca28b801efa26734b3c6f9", "html_url": "https://github.com/rust-lang/rust/commit/f8e92cbbe3337974caca28b801efa26734b3c6f9"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "351d4f3eaffb04e9910ad8fcbfd37eeb276aaf3e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0621ccac626ef4ca15e2cdf0aceed13ad0d3f848/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0621ccac626ef4ca15e2cdf0aceed13ad0d3f848/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=0621ccac626ef4ca15e2cdf0aceed13ad0d3f848", "patch": "@@ -403,11 +403,11 @@ impl<T> Container for Vec<T> {\n \n // FIXME: #13996: need a way to mark the return value as `noalias`\n #[inline(never)]\n-unsafe fn alloc_or_realloc(ptr: *mut u8, size: uint, align: uint, old_size: uint) -> *mut u8 {\n+unsafe fn alloc_or_realloc<T>(ptr: *mut T, size: uint, old_size: uint) -> *mut T {\n     if old_size == 0 {\n-        allocate(size, align)\n+        allocate(size, min_align_of::<T>()) as *mut T\n     } else {\n-        reallocate(ptr, size, align, old_size)\n+        reallocate(ptr as *mut u8, size, min_align_of::<T>(), old_size) as *mut T\n     }\n }\n \n@@ -491,8 +491,7 @@ impl<T> Vec<T> {\n         if capacity > self.cap {\n             let size = capacity.checked_mul(&size_of::<T>()).expect(\"capacity overflow\");\n             unsafe {\n-                self.ptr = alloc_or_realloc(self.ptr as *mut u8, size, min_align_of::<T>(),\n-                                            self.cap * size_of::<T>()) as *mut T;\n+                self.ptr = alloc_or_realloc(self.ptr, size, self.cap * size_of::<T>());\n             }\n             self.cap = capacity;\n         }\n@@ -573,8 +572,7 @@ impl<T> Vec<T> {\n             let size = max(old_size, 2 * size_of::<T>()) * 2;\n             if old_size > size { fail!(\"capacity overflow\") }\n             unsafe {\n-                self.ptr = alloc_or_realloc(self.ptr as *mut u8, size, min_align_of::<T>(),\n-                                            self.cap * size_of::<T>()) as *mut u8 as *mut T;\n+                self.ptr = alloc_or_realloc(self.ptr, size, self.cap * size_of::<T>());\n             }\n             self.cap = max(self.cap, 2) * 2;\n         }"}]}