{"sha": "c6f12447193d3710a38ad2e069605fe1cc2847ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZjEyNDQ3MTkzZDM3MTBhMzhhZDJlMDY5NjA1ZmUxY2MyODQ3YmE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-04T20:00:15Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-04T20:00:15Z"}, "message": "Make PlaceRef lifetimes of is_upvar_field_projection be both 'tcx", "tree": {"sha": "13fd5de3de5fc7390ce6a7301b7c4f9d17d2e206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13fd5de3de5fc7390ce6a7301b7c4f9d17d2e206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6f12447193d3710a38ad2e069605fe1cc2847ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl5gCM8ACgkQgTGiTgx5\n769jxw/+N1+jC2CUMpqf8MbHWyAVmhYKAltPBq+s6fJORVWC2W2CnMApCUF0efVz\nSTV0Yy46imyDhvzLuFUhXXEfEu1YNMzT/pBnMiqFy2vxN+KPzJ6QZFHL/OTD8gop\nW/k8kBlh6gb8V4NObEOnPySC8JWpJ3EgrD2YnjXUqXywPF3lwFs3XBoBy1uDADa5\nxX+YRqQptRTWNASAKgPCTnAuuSfpr5ishKSMuNvtpDD2dhhp6HtPcuEnEBTSczNr\n7BYntdF0bqJ/yV93lxjuQ0BIXQzIIhMgfutSTBL/F0UYLUCY1JFQIplfvtRr3pfv\n2I9PpH1nfYt4h8Roeq4YkHiJbhyx60jK1ZqyL3ElLo5bapZPjuPhBAeJpllFTYTl\nzkRO2PJk/PpeiGa7LHLoFlq1+mq31ra2t0LnhU+95Ndbk/rENavsLLs+0l4Eu5aR\nguYxNUkXTJVyf7qTL5ByazMmPbsEh94MEF2JRRvfSKWKamXywf2WfWgJ2NA2hG97\nh9zrUsF/eIgAi4jTYGMZX/x5ZqOdYN0bXT1RAJJDuLDbtyX/ePprs25NSitXR71d\nd73X2T9Ks9WIFaiXzmTVKF6SwT90a7jtCMWY376GenHNRHQGlAGVmeVi/UYNGQLv\nb1I4EsFo63BDQ8Y7PhWf3VkL5HC3gwn6KbDMvlB2loPVe0b+1Jw=\n=zws0\n-----END PGP SIGNATURE-----", "payload": "tree 13fd5de3de5fc7390ce6a7301b7c4f9d17d2e206\nparent 634a167e0594330fb50bf9bd742fdafeb73ed963\nauthor Santiago Pastorino <spastorino@gmail.com> 1583352015 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1583352015 -0300\n\nMake PlaceRef lifetimes of is_upvar_field_projection be both 'tcx\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f12447193d3710a38ad2e069605fe1cc2847ba", "html_url": "https://github.com/rust-lang/rust/commit/c6f12447193d3710a38ad2e069605fe1cc2847ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6f12447193d3710a38ad2e069605fe1cc2847ba/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634a167e0594330fb50bf9bd742fdafeb73ed963", "url": "https://api.github.com/repos/rust-lang/rust/commits/634a167e0594330fb50bf9bd742fdafeb73ed963", "html_url": "https://github.com/rust-lang/rust/commit/634a167e0594330fb50bf9bd742fdafeb73ed963"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "3a74353605294bf9eec2cc9dc0d5311c5de944ce", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6f12447193d3710a38ad2e069605fe1cc2847ba/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f12447193d3710a38ad2e069605fe1cc2847ba/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=c6f12447193d3710a38ad2e069605fe1cc2847ba", "patch": "@@ -51,7 +51,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &mut self,\n         location: Location,\n         desired_action: InitializationRequiringAction,\n-        (moved_place, used_place, span): (PlaceRef<'cx, 'tcx>, PlaceRef<'tcx, 'tcx>, Span),\n+        (moved_place, used_place, span): (PlaceRef<'tcx, 'tcx>, PlaceRef<'tcx, 'tcx>, Span),\n         mpi: MovePathIndex,\n     ) {\n         debug!(\n@@ -647,7 +647,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // borrowed place and look for a access to a different field of the same union.\n                 let Place { local, projection } = second_borrowed_place;\n \n-                let mut cursor = projection.as_ref();\n+                let mut cursor = &projection[..];\n                 while let [proj_base @ .., elem] = cursor {\n                     cursor = proj_base;\n "}, {"sha": "01c022ac2c10f5fe4f9ff4679ac769ac0ed28398", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6f12447193d3710a38ad2e069605fe1cc2847ba/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f12447193d3710a38ad2e069605fe1cc2847ba/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=c6f12447193d3710a38ad2e069605fe1cc2847ba", "patch": "@@ -139,7 +139,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     /// End-user visible description of `place` if one can be found. If the\n     /// place is a temporary for instance, None will be returned.\n-    pub(super) fn describe_place(&self, place_ref: PlaceRef<'cx, 'tcx>) -> Option<String> {\n+    pub(super) fn describe_place(&self, place_ref: PlaceRef<'tcx, 'tcx>) -> Option<String> {\n         self.describe_place_with_options(place_ref, IncludingDowncast(false))\n     }\n \n@@ -149,7 +149,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// `Downcast` and `IncludingDowncast` is true\n     pub(super) fn describe_place_with_options(\n         &self,\n-        place: PlaceRef<'cx, 'tcx>,\n+        place: PlaceRef<'tcx, 'tcx>,\n         including_downcast: IncludingDowncast,\n     ) -> Option<String> {\n         let mut buf = String::new();\n@@ -162,7 +162,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// Appends end-user visible description of `place` to `buf`.\n     fn append_place_to_string(\n         &self,\n-        place: PlaceRef<'cx, 'tcx>,\n+        place: PlaceRef<'tcx, 'tcx>,\n         buf: &mut String,\n         mut autoderef: bool,\n         including_downcast: &IncludingDowncast,"}, {"sha": "89a81945a27b370d4ed42ab2c4d1aec5bf3c2dbe", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6f12447193d3710a38ad2e069605fe1cc2847ba/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f12447193d3710a38ad2e069605fe1cc2847ba/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=c6f12447193d3710a38ad2e069605fe1cc2847ba", "patch": "@@ -2220,7 +2220,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// then returns the index of the field being projected. Note that this closure will always\n     /// be `self` in the current MIR, because that is the only time we directly access the fields\n     /// of a closure type.\n-    pub fn is_upvar_field_projection(&self, place_ref: PlaceRef<'cx, 'tcx>) -> Option<Field> {\n+    pub fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx, 'tcx>) -> Option<Field> {\n         let mut place_projection = place_ref.projection;\n         let mut by_ref = false;\n "}]}