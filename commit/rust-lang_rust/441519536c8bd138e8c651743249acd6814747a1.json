{"sha": "441519536c8bd138e8c651743249acd6814747a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MTUxOTUzNmM4YmQxMzhlOGM2NTE3NDMyNDlhY2Q2ODE0NzQ3YTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-26T23:22:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-26T23:22:48Z"}, "message": "Auto merge of #54526 - nnethercote:shrink-StatementKind, r=nagisa\n\nShrink `StatementKind`\n\n`StatementKind` occurs in significant amounts in Massif profiles.", "tree": {"sha": "6cdd8a2358dc6f3d912023c6c795fa34de576885", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cdd8a2358dc6f3d912023c6c795fa34de576885"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/441519536c8bd138e8c651743249acd6814747a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/441519536c8bd138e8c651743249acd6814747a1", "html_url": "https://github.com/rust-lang/rust/commit/441519536c8bd138e8c651743249acd6814747a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/441519536c8bd138e8c651743249acd6814747a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7fe84e8cf7523f6853d9786e28e9d066d4e5cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7fe84e8cf7523f6853d9786e28e9d066d4e5cd", "html_url": "https://github.com/rust-lang/rust/commit/ae7fe84e8cf7523f6853d9786e28e9d066d4e5cd"}, {"sha": "e221b24cb6d0a5331bfa04a546cea16f22c41988", "url": "https://api.github.com/repos/rust-lang/rust/commits/e221b24cb6d0a5331bfa04a546cea16f22c41988", "html_url": "https://github.com/rust-lang/rust/commit/e221b24cb6d0a5331bfa04a546cea16f22c41988"}], "stats": {"total": 145, "additions": 83, "deletions": 62}, "files": [{"sha": "8fea749e5ab4973dc6b044df2d9bbff35ac257a9", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -1631,7 +1631,7 @@ impl<'tcx> Statement<'tcx> {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum StatementKind<'tcx> {\n     /// Write the RHS Rvalue to the LHS Place.\n-    Assign(Place<'tcx>, Rvalue<'tcx>),\n+    Assign(Place<'tcx>, Box<Rvalue<'tcx>>),\n \n     /// This represents all the reading that a pattern match may do\n     /// (e.g. inspecting constants and discriminant values), and the\n@@ -1654,8 +1654,8 @@ pub enum StatementKind<'tcx> {\n     /// Execute a piece of inline Assembly.\n     InlineAsm {\n         asm: Box<InlineAsm>,\n-        outputs: Vec<Place<'tcx>>,\n-        inputs: Vec<Operand<'tcx>>,\n+        outputs: Box<[Place<'tcx>]>,\n+        inputs: Box<[Operand<'tcx>]>,\n     },\n \n     /// Assert the given places to be valid inhabitants of their type.  These statements are"}, {"sha": "aab268c07c4fbf36473610facf7a79aff6daf3f8", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -720,6 +720,16 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n     }\n }\n \n+impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        self.iter().map(|t| t.fold_with(folder)).collect::<Vec<_>>().into_boxed_slice()\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.iter().any(|t| t.visit_with(visitor))\n+    }\n+}\n+\n impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         self.map_bound_ref(|ty| ty.fold_with(folder))"}, {"sha": "a4e9e9579950badf0574a158dbd88338771c80be", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -1319,7 +1319,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     );\n                     if let StatementKind::Assign(\n                         Place::Local(assigned_to),\n-                        rvalue,\n+                        box rvalue,\n                     ) = &stmt.kind {\n                         debug!(\"annotate_argument_and_return_for_borrow: assigned_to={:?} \\\n                                rvalue={:?}\", assigned_to, rvalue);\n@@ -1823,7 +1823,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             None => return OtherUse(self.mir.source_info(location).span),\n         };\n \n-        if let StatementKind::Assign(_, Rvalue::Aggregate(ref kind, ref places)) = stmt.kind {\n+        if let StatementKind::Assign(_, box Rvalue::Aggregate(ref kind, ref places)) = stmt.kind {\n             if let AggregateKind::Closure(def_id, _) = **kind {\n                 debug!(\"find_closure_move_span: found closure {:?}\", places);\n \n@@ -1886,7 +1886,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n \n         for stmt in &self.mir[location.block].statements[location.statement_index + 1..] {\n-            if let StatementKind::Assign(_, Rvalue::Aggregate(ref kind, ref places)) = stmt.kind {\n+            if let StatementKind::Assign(_, box Rvalue::Aggregate(ref kind, ref places))\n+                = stmt.kind {\n                 if let AggregateKind::Closure(def_id, _) = **kind {\n                     debug!(\"find_closure_borrow_span: found closure {:?}\", places);\n "}, {"sha": "6ecbc5ee727c1ddb1ef7b047175442b91d7ade13", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -534,7 +534,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 ref inputs,\n             } => {\n                 let context = ContextKind::InlineAsm.new(location);\n-                for (o, output) in asm.outputs.iter().zip(outputs) {\n+                for (o, output) in asm.outputs.iter().zip(outputs.iter()) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should\n                         // be encoeded through MIR place derefs instead.\n@@ -561,7 +561,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                         );\n                     }\n                 }\n-                for input in inputs {\n+                for input in inputs.iter() {\n                     self.consume_operand(context, (input, span), flow_state);\n                 }\n             }"}, {"sha": "1c55806872d57ce0430b609a63ce5f858bbc93e7", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 // flow could be used.\n                 if let Some(StatementKind::Assign(\n                     Place::Local(local),\n-                    Rvalue::Use(Operand::Move(move_from)),\n+                    box Rvalue::Use(Operand::Move(move_from)),\n                 )) = self.mir.basic_blocks()[location.block]\n                     .statements\n                     .get(location.statement_index)"}, {"sha": "5122fc7c959ed675b7a4322814d3e37e43c79303", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -109,7 +109,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                 ref inputs,\n             } => {\n                 let context = ContextKind::InlineAsm.new(location);\n-                for (o, output) in asm.outputs.iter().zip(outputs) {\n+                for (o, output) in asm.outputs.iter().zip(outputs.iter()) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should\n                         // be encoeded through MIR place derefs instead.\n@@ -128,7 +128,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                         );\n                     }\n                 }\n-                for input in inputs {\n+                for input in inputs.iter() {\n                     self.consume_operand(context, input);\n                 }\n             }"}, {"sha": "619ebb1675ca6155520b6d6ab544fb6f367d204e", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> CFG<'tcx> {\n                        rvalue: Rvalue<'tcx>) {\n         self.push(block, Statement {\n             source_info,\n-            kind: StatementKind::Assign(place.clone(), rvalue)\n+            kind: StatementKind::Assign(place.clone(), box rvalue)\n         });\n     }\n "}, {"sha": "32f09599ace82fd2e04913a1afa99d3989f8e3b3", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -143,11 +143,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let outputs = outputs\n                     .into_iter()\n                     .map(|output| unpack!(block = this.as_place(block, output)))\n-                    .collect();\n+                    .collect::<Vec<_>>()\n+                    .into_boxed_slice();\n                 let inputs = inputs\n                     .into_iter()\n                     .map(|input| unpack!(block = this.as_local_operand(block, input)))\n-                    .collect();\n+                    .collect::<Vec<_>>()\n+                    .into_boxed_slice();\n                 this.cfg.push(\n                     block,\n                     Statement {"}, {"sha": "caf87fdd5ccce675403f0ceda38d2b8ca609fb3d", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -270,7 +270,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                 // re-consider the current implementations of the\n                 // propagate_call_return method.\n \n-                if let mir::Rvalue::Ref(region, _, ref place) = *rhs {\n+                if let mir::Rvalue::Ref(region, _, ref place) = **rhs {\n                     if place.ignore_borrow(\n                         self.tcx,\n                         self.mir,"}, {"sha": "2884b15ca47db2bdce009f5380b9d83c81861039", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -290,7 +290,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                         self.gather_init(output, InitKind::Deep);\n                     }\n                 }\n-                for input in inputs {\n+                for input in inputs.iter() {\n                     self.gather_operand(input);\n                 }\n             }"}, {"sha": "7ba72366af73630907c228f317ae50594513d21a", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -407,7 +407,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         let ret_statement = self.make_statement(\n             StatementKind::Assign(\n                 Place::Local(RETURN_PLACE),\n-                Rvalue::Use(Operand::Copy(rcvr))\n+                box Rvalue::Use(Operand::Copy(rcvr))\n             )\n         );\n         self.block(vec![ret_statement], TerminatorKind::Return, false);\n@@ -458,7 +458,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         let statement = self.make_statement(\n             StatementKind::Assign(\n                 ref_loc.clone(),\n-                Rvalue::Ref(tcx.types.re_erased, BorrowKind::Shared, src)\n+                box Rvalue::Ref(tcx.types.re_erased, BorrowKind::Shared, src)\n             )\n         );\n \n@@ -485,7 +485,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         let compute_cond = self.make_statement(\n             StatementKind::Assign(\n                 cond.clone(),\n-                Rvalue::BinaryOp(BinOp::Ne, Operand::Copy(end), Operand::Copy(beg))\n+                box Rvalue::BinaryOp(BinOp::Ne, Operand::Copy(end), Operand::Copy(beg))\n             )\n         );\n \n@@ -521,13 +521,13 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             self.make_statement(\n                 StatementKind::Assign(\n                     Place::Local(beg),\n-                    Rvalue::Use(Operand::Constant(self.make_usize(0)))\n+                    box Rvalue::Use(Operand::Constant(self.make_usize(0)))\n                 )\n             ),\n             self.make_statement(\n                 StatementKind::Assign(\n                     end.clone(),\n-                    Rvalue::Use(Operand::Constant(self.make_usize(len)))\n+                    box Rvalue::Use(Operand::Constant(self.make_usize(len)))\n                 )\n             )\n         ];\n@@ -555,7 +555,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             self.make_statement(\n                 StatementKind::Assign(\n                     Place::Local(beg),\n-                    Rvalue::BinaryOp(\n+                    box Rvalue::BinaryOp(\n                         BinOp::Add,\n                         Operand::Copy(Place::Local(beg)),\n                         Operand::Constant(self.make_usize(1))\n@@ -578,7 +578,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         let init = self.make_statement(\n             StatementKind::Assign(\n                 Place::Local(beg),\n-                Rvalue::Use(Operand::Constant(self.make_usize(0)))\n+                box Rvalue::Use(Operand::Constant(self.make_usize(0)))\n             )\n         );\n         self.block(vec![init], TerminatorKind::Goto { target: BasicBlock::new(6) }, true);\n@@ -605,7 +605,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         let statement = self.make_statement(\n             StatementKind::Assign(\n                 Place::Local(beg),\n-                Rvalue::BinaryOp(\n+                box Rvalue::BinaryOp(\n                     BinOp::Add,\n                     Operand::Copy(Place::Local(beg)),\n                     Operand::Constant(self.make_usize(1))\n@@ -715,7 +715,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 source_info,\n                 kind: StatementKind::Assign(\n                     Place::Local(ref_rcvr),\n-                    Rvalue::Ref(tcx.types.re_erased, borrow_kind, rcvr_l)\n+                    box Rvalue::Ref(tcx.types.re_erased, borrow_kind, rcvr_l)\n                 )\n             });\n             Operand::Move(Place::Local(ref_rcvr))\n@@ -851,7 +851,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n             source_info,\n             kind: StatementKind::Assign(\n                 Place::Local(RETURN_PLACE),\n-                Rvalue::Aggregate(\n+                box Rvalue::Aggregate(\n                     box AggregateKind::Adt(adt_def, variant_no, substs, None, None),\n                     (1..sig.inputs().len()+1).map(|i| {\n                         Operand::Move(Place::Local(Local::new(i)))"}, {"sha": "5b489b5db942b1916db954bb776b7faa486cbd04", "filename": "src/librustc_mir/transform/add_validation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -320,12 +320,12 @@ impl MirPass for AddValidation {\n             for i in (0..block_data.statements.len()).rev() {\n                 match block_data.statements[i].kind {\n                     // When the borrow of this ref expires, we need to recover validation.\n-                    StatementKind::Assign(_, Rvalue::Ref(_, _, _)) => {\n+                    StatementKind::Assign(_, box Rvalue::Ref(_, _, _)) => {\n                         // Due to a lack of NLL; we can't capture anything directly here.\n                         // Instead, we have to re-match and clone there.\n                         let (dest_place, re, src_place) = match block_data.statements[i].kind {\n                             StatementKind::Assign(ref dest_place,\n-                                                  Rvalue::Ref(re, _, ref src_place)) => {\n+                                                  box Rvalue::Ref(re, _, ref src_place)) => {\n                                 (dest_place.clone(), re, src_place.clone())\n                             },\n                             _ => bug!(\"We already matched this.\"),\n@@ -354,17 +354,17 @@ impl MirPass for AddValidation {\n                         block_data.statements.insert(i, release_stmt);\n                     }\n                     // Casts can change what validation does (e.g. unsizing)\n-                    StatementKind::Assign(_, Rvalue::Cast(kind, Operand::Copy(_), _)) |\n-                    StatementKind::Assign(_, Rvalue::Cast(kind, Operand::Move(_), _))\n+                    StatementKind::Assign(_, box Rvalue::Cast(kind, Operand::Copy(_), _)) |\n+                    StatementKind::Assign(_, box Rvalue::Cast(kind, Operand::Move(_), _))\n                         if kind != CastKind::Misc =>\n                     {\n                         // Due to a lack of NLL; we can't capture anything directly here.\n                         // Instead, we have to re-match and clone there.\n                         let (dest_place, src_place) = match block_data.statements[i].kind {\n                             StatementKind::Assign(ref dest_place,\n-                                    Rvalue::Cast(_, Operand::Copy(ref src_place), _)) |\n+                                    box Rvalue::Cast(_, Operand::Copy(ref src_place), _)) |\n                             StatementKind::Assign(ref dest_place,\n-                                    Rvalue::Cast(_, Operand::Move(ref src_place), _)) =>\n+                                    box Rvalue::Cast(_, Operand::Move(ref src_place), _)) =>\n                             {\n                                 (dest_place.clone(), src_place.clone())\n                             },"}, {"sha": "6d0b25b2c694041bb3336e4ae99d086626536624", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -104,7 +104,7 @@ impl MirPass for CopyPropagation {\n \n                     // That use of the source must be an assignment.\n                     match statement.kind {\n-                        StatementKind::Assign(Place::Local(local), Rvalue::Use(ref operand)) if\n+                        StatementKind::Assign(Place::Local(local), box Rvalue::Use(ref operand)) if\n                                 local == dest_local => {\n                             let maybe_action = match *operand {\n                                 Operand::Copy(ref src_place) |\n@@ -155,11 +155,11 @@ fn eliminate_self_assignments<'tcx>(\n                 match stmt.kind {\n                     StatementKind::Assign(\n                         Place::Local(local),\n-                        Rvalue::Use(Operand::Copy(Place::Local(src_local))),\n+                        box Rvalue::Use(Operand::Copy(Place::Local(src_local))),\n                     ) |\n                     StatementKind::Assign(\n                         Place::Local(local),\n-                        Rvalue::Use(Operand::Move(Place::Local(src_local))),\n+                        box Rvalue::Use(Operand::Move(Place::Local(src_local))),\n                     ) if local == dest_local && dest_local == src_local => {}\n                     _ => {\n                         continue;"}, {"sha": "8a14890f92e1e7be7d29980dd7aa2f1a956c38ed", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -26,7 +26,7 @@ impl MirPass for Deaggregator {\n             bb.expand_statements(|stmt| {\n                 // FIXME(eddyb) don't match twice on `stmt.kind` (post-NLL).\n                 if let StatementKind::Assign(_, ref rhs) = stmt.kind {\n-                    if let Rvalue::Aggregate(ref kind, _) = *rhs {\n+                    if let Rvalue::Aggregate(ref kind, _) = **rhs {\n                         // FIXME(#48193) Deaggregate arrays when it's cheaper to do so.\n                         if let AggregateKind::Array(_) = **kind {\n                             return None;\n@@ -41,8 +41,12 @@ impl MirPass for Deaggregator {\n                 let stmt = stmt.replace_nop();\n                 let source_info = stmt.source_info;\n                 let (mut lhs, kind, operands) = match stmt.kind {\n-                    StatementKind::Assign(lhs, Rvalue::Aggregate(kind, operands))\n-                        => (lhs, kind, operands),\n+                    StatementKind::Assign(lhs, box rvalue) => {\n+                        match rvalue {\n+                            Rvalue::Aggregate(kind, operands) => (lhs, kind, operands),\n+                            _ => bug!()\n+                        }\n+                    }\n                     _ => bug!()\n                 };\n \n@@ -82,7 +86,7 @@ impl MirPass for Deaggregator {\n                     };\n                     Statement {\n                         source_info,\n-                        kind: StatementKind::Assign(lhs_field, Rvalue::Use(op)),\n+                        kind: StatementKind::Assign(lhs_field, box Rvalue::Use(op)),\n                     }\n                 }).chain(set_discriminant))\n             });"}, {"sha": "9d77289d7b9b172d64377269d4278498b58bc694", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -478,7 +478,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         assert!(!data.is_cleanup, \"DropAndReplace in unwind path not supported\");\n \n         let assign = Statement {\n-            kind: StatementKind::Assign(location.clone(), Rvalue::Use(value.clone())),\n+            kind: StatementKind::Assign(location.clone(), box Rvalue::Use(value.clone())),\n             source_info: terminator.source_info\n         };\n "}, {"sha": "62adbf1bdf7db91961c16001f7b3fc30213644cd", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -188,7 +188,7 @@ impl<'a, 'tcx> TransformVisitor<'a, 'tcx> {\n         });\n         Statement {\n             source_info,\n-            kind: StatementKind::Assign(state, Rvalue::Use(val)),\n+            kind: StatementKind::Assign(state, box Rvalue::Use(val)),\n         }\n     }\n }\n@@ -246,7 +246,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for TransformVisitor<'a, 'tcx> {\n             data.statements.push(Statement {\n                 source_info,\n                 kind: StatementKind::Assign(Place::Local(RETURN_PLACE),\n-                    self.make_state(state_idx, v)),\n+                                            box self.make_state(state_idx, v)),\n             });\n             let state = if let Some(resume) = resume { // Yield\n                 let state = 3 + self.suspension_points.len() as u32;"}, {"sha": "040ee35632cbba871067e03fbbb19e32a97cefa9", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -447,7 +447,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n                     let stmt = Statement {\n                         source_info: callsite.location,\n-                        kind: StatementKind::Assign(tmp.clone(), dest)\n+                        kind: StatementKind::Assign(tmp.clone(), box dest)\n                     };\n                     caller_mir[callsite.bb]\n                         .statements.push(stmt);\n@@ -594,7 +594,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         let stmt = Statement {\n             source_info: callsite.location,\n-            kind: StatementKind::Assign(Place::Local(arg_tmp), arg),\n+            kind: StatementKind::Assign(Place::Local(arg_tmp), box arg),\n         };\n         caller_mir[callsite.bb].statements.push(stmt);\n         arg_tmp"}, {"sha": "b2ddbe04d755f7073f79fa3e090f25fd6b325dd3", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -79,11 +79,14 @@ impl Lower128Bit {\n                 let bin_statement = block.statements.pop().unwrap();\n                 let source_info = bin_statement.source_info;\n                 let (place, lhs, mut rhs) = match bin_statement.kind {\n-                    StatementKind::Assign(place, Rvalue::BinaryOp(_, lhs, rhs))\n-                    | StatementKind::Assign(place, Rvalue::CheckedBinaryOp(_, lhs, rhs)) => {\n-                        (place, lhs, rhs)\n+                    StatementKind::Assign(place, box rvalue) => {\n+                        match rvalue {\n+                            Rvalue::BinaryOp(_, lhs, rhs)\n+                            | Rvalue::CheckedBinaryOp(_, lhs, rhs) => (place, lhs, rhs),\n+                            _ => bug!(),\n+                        }\n                     }\n-                    _ => bug!(\"Statement doesn't match pattern any more?\"),\n+                    _ => bug!()\n                 };\n \n                 if let Some(local) = cast_local {\n@@ -95,7 +98,7 @@ impl Lower128Bit {\n                         source_info: source_info,\n                         kind: StatementKind::Assign(\n                             Place::Local(local),\n-                            Rvalue::Cast(\n+                            box Rvalue::Cast(\n                                 CastKind::Misc,\n                                 rhs,\n                                 rhs_override_ty.unwrap())),\n@@ -154,13 +157,13 @@ fn lower_to<'a, 'tcx, D>(statement: &Statement<'tcx>, local_decls: &D, tcx: TyCt\n     where D: HasLocalDecls<'tcx>\n {\n     match statement.kind {\n-        StatementKind::Assign(_, Rvalue::BinaryOp(bin_op, ref lhs, _)) => {\n+        StatementKind::Assign(_, box Rvalue::BinaryOp(bin_op, ref lhs, _)) => {\n             let ty = lhs.ty(local_decls, tcx);\n             if let Some(is_signed) = sign_of_128bit(ty) {\n                 return item_for_op(bin_op, is_signed);\n             }\n         },\n-        StatementKind::Assign(_, Rvalue::CheckedBinaryOp(bin_op, ref lhs, _)) => {\n+        StatementKind::Assign(_, box Rvalue::CheckedBinaryOp(bin_op, ref lhs, _)) => {\n             let ty = lhs.ty(local_decls, tcx);\n             if let Some(is_signed) = sign_of_128bit(ty) {\n                 return item_for_checked_op(bin_op, is_signed);"}, {"sha": "34339b0634194906755684650f0942deb6a91f88", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            kind: StatementKind::Assign(Place::Local(dest), rvalue)\n+            kind: StatementKind::Assign(Place::Local(dest), box rvalue)\n         });\n     }\n \n@@ -217,7 +217,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         // First, take the Rvalue or Call out of the source MIR,\n         // or duplicate it, depending on keep_original.\n         if loc.statement_index < no_stmts {\n-            let (mut rvalue, source_info) = {\n+            let (rvalue, source_info) = {\n                 let statement = &mut self.source[loc.block].statements[loc.statement_index];\n                 let rhs = match statement.kind {\n                     StatementKind::Assign(_, ref mut rhs) => rhs,\n@@ -230,11 +230,12 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 (if self.keep_original {\n                     rhs.clone()\n                 } else {\n-                    let unit = Rvalue::Aggregate(box AggregateKind::Tuple, vec![]);\n+                    let unit = box Rvalue::Aggregate(box AggregateKind::Tuple, vec![]);\n                     mem::replace(rhs, unit)\n                 }, statement.source_info)\n             };\n \n+            let mut rvalue = *rvalue;\n             self.visit_rvalue(&mut rvalue, loc);\n             self.assign(new_temp, rvalue, source_info.span);\n         } else {\n@@ -301,7 +302,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 Candidate::Ref(loc) => {\n                     let ref mut statement = blocks[loc.block].statements[loc.statement_index];\n                     match statement.kind {\n-                        StatementKind::Assign(_, Rvalue::Ref(_, _, ref mut place)) => {\n+                        StatementKind::Assign(_, box Rvalue::Ref(_, _, ref mut place)) => {\n                             // Find the underlying local for this (necessarily interior) borrow.\n                             // HACK(eddyb) using a recursive function because of mutable borrows.\n                             fn interior_base<'a, 'tcx>(place: &'a mut Place<'tcx>)"}, {"sha": "cf45b541f80d32dfe48f4b15bfd8374771e64d9f", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -388,7 +388,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             match *candidate {\n                 Candidate::Ref(Location { block: bb, statement_index: stmt_idx }) => {\n                     match self.mir[bb].statements[stmt_idx].kind {\n-                        StatementKind::Assign(_, Rvalue::Ref(_, _, Place::Local(index))) => {\n+                        StatementKind::Assign(_, box Rvalue::Ref(_, _, Place::Local(index))) => {\n                             promoted_temps.insert(index);\n                         }\n                         _ => {}"}, {"sha": "4b4b284b02cd575a7a80bcd9420524bb8b0d3bd6", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -60,7 +60,7 @@ impl RemoveNoopLandingPads {\n                     // instructions, but this should all run after borrowck).\n                 }\n \n-                StatementKind::Assign(Place::Local(_), Rvalue::Use(_)) => {\n+                StatementKind::Assign(Place::Local(_), box Rvalue::Use(_)) => {\n                     // Writing to a local (e.g. a drop flag) does not\n                     // turn a landing pad to a non-nop\n                 }"}, {"sha": "05044574e5ca3a4f1485edacf093d1eff821d41d", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -171,7 +171,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n \n         if place == peek_arg_place {\n-            if let mir::Rvalue::Ref(_, mir::BorrowKind::Shared, ref peeking_at_place) = *rvalue {\n+            if let mir::Rvalue::Ref(_, mir::BorrowKind::Shared, ref peeking_at_place) = **rvalue {\n                 // Okay, our search is over.\n                 match move_data.rev_lookup.find(peeking_at_place) {\n                     LookupResult::Exact(peek_mpi) => {"}, {"sha": "b123a846596e593802a3249116e884ac3bfccc4d", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -184,7 +184,7 @@ impl MirPass for RestoreSubsliceArrayMoveOut {\n             for candidate in &visitor.candidates {\n                 let statement = &mir[candidate.block].statements[candidate.statement_index];\n                 if let StatementKind::Assign(ref dst_place, ref rval) = statement.kind {\n-                    if let Rvalue::Aggregate(box AggregateKind::Array(_), ref items) = *rval {\n+                    if let Rvalue::Aggregate(box AggregateKind::Array(_), ref items) = **rval {\n                         let items : Vec<_> = items.iter().map(|item| {\n                             if let Operand::Move(Place::Local(local)) = item {\n                                 let local_use = &visitor.locals_use[*local];\n@@ -268,7 +268,7 @@ impl RestoreSubsliceArrayMoveOut {\n                 let statement = &block.statements[location.statement_index];\n                 if let StatementKind::Assign(\n                     Place::Local(_),\n-                    Rvalue::Use(Operand::Move(Place::Projection(box PlaceProjection{\n+                    box Rvalue::Use(Operand::Move(Place::Projection(box PlaceProjection{\n                         ref base, elem: ProjectionElem::ConstantIndex{\n                             offset, min_length: _, from_end: false}})))) = statement.kind {\n                     return Some((offset, base))"}, {"sha": "9b8165181cc1d04687252913b5425464e6c32e10", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -977,7 +977,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     fn assign(&self, lhs: &Place<'tcx>, rhs: Rvalue<'tcx>) -> Statement<'tcx> {\n         Statement {\n             source_info: self.source_info,\n-            kind: StatementKind::Assign(lhs.clone(), rhs)\n+            kind: StatementKind::Assign(lhs.clone(), box rhs)\n         }\n     }\n }"}, {"sha": "807c8386693f8829bbc050d89a51a2345f6b81ea", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441519536c8bd138e8c651743249acd6814747a1/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=441519536c8bd138e8c651743249acd6814747a1", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> MirPatch<'tcx> {\n     }\n \n     pub fn add_assign(&mut self, loc: Location, place: Place<'tcx>, rv: Rvalue<'tcx>) {\n-        self.add_statement(loc, StatementKind::Assign(place, rv));\n+        self.add_statement(loc, StatementKind::Assign(place, box rv));\n     }\n \n     pub fn make_nop(&mut self, loc: Location) {"}]}