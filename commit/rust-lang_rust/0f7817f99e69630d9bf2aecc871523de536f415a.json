{"sha": "0f7817f99e69630d9bf2aecc871523de536f415a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNzgxN2Y5OWU2OTYzMGQ5YmYyYWVjYzg3MTUyM2RlNTM2ZjQxNWE=", "commit": {"author": {"name": "rodrimati1992", "email": "rodrimatt1985@gmail.com", "date": "2020-08-04T17:38:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-04T17:38:42Z"}, "message": "Constified str::from_utf8_unchecked", "tree": {"sha": "964e61a18f5c608bfac5131b9fa18fb30a3c4cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/964e61a18f5c608bfac5131b9fa18fb30a3c4cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f7817f99e69630d9bf2aecc871523de536f415a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfKZ0iCRBK7hj4Ov3rIwAAdHIIAHtWKh2wxxo7G/OpBgchU37x\ncWiTTMUIFR02S4V/28kqn+CFzmkjMZC/eT55aeYoASVdO4e65nfhezzuoG9y5Sk/\nwE1B98TPFPy9bkwDTDFtEQbYklw7FMoLpIbApw+kJ08cdcUBylKXoIcgf0z9D4Oq\nTOvfohTfvBnstso4U1cma4HX7L+dkgXM5SWcoj0Lq1HBKSPqD+/n2U8Lg5/uEAo7\nPRAorgxtLA9zimOKmJAhpSXnm5EXrygolc4v/1GORiufXjWCPOZ18fNF6OJFZXu6\n/WAR2BnNCZkercqLJYw3hkMGlY6XriAPJztd84VcmXFWVKEW3LxJttYrp6rGyb4=\n=4Gcb\n-----END PGP SIGNATURE-----\n", "payload": "tree 964e61a18f5c608bfac5131b9fa18fb30a3c4cbd\nparent 5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11\nauthor rodrimati1992 <rodrimatt1985@gmail.com> 1596562722 -0300\ncommitter GitHub <noreply@github.com> 1596562722 -0300\n\nConstified str::from_utf8_unchecked"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7817f99e69630d9bf2aecc871523de536f415a", "html_url": "https://github.com/rust-lang/rust/commit/0f7817f99e69630d9bf2aecc871523de536f415a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f7817f99e69630d9bf2aecc871523de536f415a/comments", "author": {"login": "rodrimati1992", "id": 18036327, "node_id": "MDQ6VXNlcjE4MDM2MzI3", "avatar_url": "https://avatars.githubusercontent.com/u/18036327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodrimati1992", "html_url": "https://github.com/rodrimati1992", "followers_url": "https://api.github.com/users/rodrimati1992/followers", "following_url": "https://api.github.com/users/rodrimati1992/following{/other_user}", "gists_url": "https://api.github.com/users/rodrimati1992/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodrimati1992/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodrimati1992/subscriptions", "organizations_url": "https://api.github.com/users/rodrimati1992/orgs", "repos_url": "https://api.github.com/users/rodrimati1992/repos", "events_url": "https://api.github.com/users/rodrimati1992/events{/privacy}", "received_events_url": "https://api.github.com/users/rodrimati1992/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11", "html_url": "https://github.com/rust-lang/rust/commit/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "d8698d6c41e5a34e3f0c70cf28abf02190feb43d", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0f7817f99e69630d9bf2aecc871523de536f415a/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7817f99e69630d9bf2aecc871523de536f415a/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=0f7817f99e69630d9bf2aecc871523de536f415a", "patch": "@@ -381,6 +381,15 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n     Ok(unsafe { from_utf8_unchecked_mut(v) })\n }\n \n+\n+#[repr(C)]\n+union StrOrSlice<'a> {\n+    str: &'a str,\n+    slice: &'a [u8],\n+}\n+\n+\n+\n /// Converts a slice of bytes to a string slice without checking\n /// that the string contains valid UTF-8.\n ///\n@@ -414,14 +423,16 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n-    // SAFETY: the caller must guarantee that the bytes `v`\n-    // are valid UTF-8, thus the cast to `*const str` is safe.\n-    // Also, the pointer dereference is safe because that pointer\n-    // comes from a reference which is guaranteed to be valid for reads.\n-    unsafe { &*(v as *const [u8] as *const str) }\n+#[rustc_const_unstable(feature = \"const_str_from_utf8_unchecked\", issue = \"none\")]\n+#[allow(unused_attributes)]\n+#[allow_internal_unstable(const_fn_union)]\n+pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n+    // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.\n+    // Also relies on `&str` and `&[u8]` having the same layout.\n+    unsafe{ StrOrSlice{ slice: v }.str }\n }\n \n+\n /// Converts a slice of bytes to a string slice without checking\n /// that the string contains valid UTF-8; mutable version.\n ///\n@@ -2350,13 +2361,9 @@ impl str {\n     #[allow(unused_attributes)]\n     #[allow_internal_unstable(const_fn_union)]\n     pub const fn as_bytes(&self) -> &[u8] {\n-        #[repr(C)]\n-        union Slices<'a> {\n-            str: &'a str,\n-            slice: &'a [u8],\n-        }\n+        \n         // SAFETY: const sound because we transmute two types with the same layout\n-        unsafe { Slices { str: self }.slice }\n+        unsafe { StrOrSlice { str: self }.slice }\n     }\n \n     /// Converts a mutable string slice to a mutable byte slice."}]}