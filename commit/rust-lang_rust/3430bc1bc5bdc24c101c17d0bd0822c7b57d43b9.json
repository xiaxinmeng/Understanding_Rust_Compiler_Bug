{"sha": "3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MzBiYzFiYzViZGMyNGMxMDFjMTdkMGJkMDgyMmM3YjU3ZDQzYjk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-11-27T22:34:32Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-11-27T23:09:48Z"}, "message": "Re-add wildcards for BorrowKind in some places", "tree": {"sha": "da4d7ef5b0e5dd357d5ba478bcfe321be61860f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da4d7ef5b0e5dd357d5ba478bcfe321be61860f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9", "html_url": "https://github.com/rust-lang/rust/commit/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341e266508ee9355f91938e3ff8b8186f7e076f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/341e266508ee9355f91938e3ff8b8186f7e076f2", "html_url": "https://github.com/rust-lang/rust/commit/341e266508ee9355f91938e3ff8b8186f7e076f2"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "e32e15be0530a344b723243bdcebe984dba6e71b", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9", "patch": "@@ -328,7 +328,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n             // ```\n             //\n             // TODO: fix this\n-            ExprKind::AddrOf(BorrowKind::Ref, _, _) => {\n+            ExprKind::AddrOf(_, _, _) => {\n                 return;\n             }\n             _ => {}"}, {"sha": "effd2dc58d4992714b7af26246fa349d0f08510e", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9", "patch": "@@ -656,7 +656,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                     tys.clear();\n                 }\n             },\n-            Assign(ref target, _) | AssignOp(_, ref target, _) | AddrOf(BorrowKind::Ref, hir::Mutability::Mutable, ref target) => {\n+            Assign(ref target, _) | AssignOp(_, ref target, _) | AddrOf(_, hir::Mutability::Mutable, ref target) => {\n                 self.mutates_static |= is_mutated_static(self.cx, target)\n             },\n             _ => {},"}, {"sha": "63cd44fb2a51bedaf2ec4fe564daaae5600029ac", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9", "patch": "@@ -58,7 +58,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n         | ExprKind::Type(ref inner, _)\n         | ExprKind::Unary(_, ref inner)\n         | ExprKind::Field(ref inner, _)\n-        | ExprKind::AddrOf(BorrowKind::Ref, _, ref inner)\n+        | ExprKind::AddrOf(_, _, ref inner)\n         | ExprKind::Box(ref inner) => has_no_effect(cx, inner),\n         ExprKind::Struct(_, ref fields, ref base) => {\n             !has_drop(cx, cx.tables.expr_ty(expr))\n@@ -134,7 +134,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec\n         | ExprKind::Type(ref inner, _)\n         | ExprKind::Unary(_, ref inner)\n         | ExprKind::Field(ref inner, _)\n-        | ExprKind::AddrOf(BorrowKind::Ref, _, ref inner)\n+        | ExprKind::AddrOf(_, _, ref inner)\n         | ExprKind::Box(ref inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n         ExprKind::Struct(_, ref fields, ref base) => {\n             if has_drop(cx, cx.tables.expr_ty(expr)) {"}, {"sha": "28ff690758578929396d0b6a1fdea0f6d1a294e8", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9", "patch": "@@ -37,7 +37,7 @@ impl EarlyLintPass for DerefAddrOf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n         if_chain! {\n             if let ExprKind::Unary(UnOp::Deref, ref deref_target) = e.kind;\n-            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref addrof_target) = without_parens(deref_target).kind;\n+            if let ExprKind::AddrOf(_, _, ref addrof_target) = without_parens(deref_target).kind;\n             if !in_macro(addrof_target.span);\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n@@ -80,7 +80,7 @@ impl EarlyLintPass for RefInDeref {\n         if_chain! {\n             if let ExprKind::Field(ref object, _) = e.kind;\n             if let ExprKind::Paren(ref parened) = object.kind;\n-            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref inner) = parened.kind;\n+            if let ExprKind::AddrOf(_, _, ref inner) = parened.kind;\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 span_lint_and_sugg("}, {"sha": "f6749a31419edc7ff9e061a026562d27a72d91a1", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9", "patch": "@@ -315,7 +315,7 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings:\n     match expr.kind {\n         ExprKind::Unary(_, ref e)\n         | ExprKind::Field(ref e, _)\n-        | ExprKind::AddrOf(BorrowKind::Ref, _, ref e)\n+        | ExprKind::AddrOf(_, _, ref e)\n         | ExprKind::Box(ref e) => check_expr(cx, e, bindings),\n         ExprKind::Block(ref block, _) | ExprKind::Loop(ref block, _, _) => check_block(cx, block, bindings),\n         // ExprKind::Call\n@@ -366,7 +366,7 @@ fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut V\n \n fn is_self_shadow(name: Name, expr: &Expr) -> bool {\n     match expr.kind {\n-        ExprKind::Box(ref inner) | ExprKind::AddrOf(BorrowKind::Ref, _, ref inner) => is_self_shadow(name, inner),\n+        ExprKind::Box(ref inner) | ExprKind::AddrOf(_, _, ref inner) => is_self_shadow(name, inner),\n         ExprKind::Block(ref block, _) => {\n             block.stmts.is_empty() && block.expr.as_ref().map_or(false, |e| is_self_shadow(name, e))\n         },"}, {"sha": "c95287f83d17fbe76f6ae99ce65152addc798dd3", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9", "patch": "@@ -78,8 +78,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n \n         match (&left.kind, &right.kind) {\n-            (&ExprKind::AddrOf(BorrowKind::Ref, l_mut, ref le), &ExprKind::AddrOf(BorrowKind::Ref, r_mut, ref re)) => {\n-                l_mut == r_mut && self.eq_expr(le, re)\n+            (&ExprKind::AddrOf(lb, l_mut, ref le), &ExprKind::AddrOf(rb, r_mut, ref re)) => {\n+                lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n             },\n             (&ExprKind::Continue(li), &ExprKind::Continue(ri)) => {\n                 both(&li.label, &ri.label, |l, r| l.ident.as_str() == r.ident.as_str())\n@@ -398,7 +398,12 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&e.kind).hash(&mut self.s);\n \n         match e.kind {\n-            ExprKind::AddrOf(BorrowKind::Ref, m, ref e) => {\n+            ExprKind::AddrOf(kind, m, ref e) => {\n+                match kind {\n+                    BorrowKind::Ref => 0,\n+                    BorrowKind::Raw => 1,\n+                }\n+                .hash(&mut self.s);\n                 m.hash(&mut self.s);\n                 self.hash_expr(e);\n             },"}, {"sha": "285ce1f5fc45a9566c43619981c86d409dae998b", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=3430bc1bc5bdc24c101c17d0bd0822c7b57d43b9", "patch": "@@ -264,8 +264,9 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n             println!(\"{}Relative Path, {:?}\", ind, ty);\n             println!(\"{}seg: {:?}\", ind, seg);\n         },\n-        hir::ExprKind::AddrOf(BorrowKind::Ref, ref muta, ref e) => {\n+        hir::ExprKind::AddrOf(kind, ref muta, ref e) => {\n             println!(\"{}AddrOf\", ind);\n+            println!(\"kind: {:?}\", kind);\n             println!(\"mutability: {:?}\", muta);\n             print_expr(cx, e, indent + 1);\n         },"}]}