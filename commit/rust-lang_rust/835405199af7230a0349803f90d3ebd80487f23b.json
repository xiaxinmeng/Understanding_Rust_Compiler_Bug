{"sha": "835405199af7230a0349803f90d3ebd80487f23b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNTQwNTE5OWFmNzIzMGEwMzQ5ODAzZjkwZDNlYmQ4MDQ4N2YyM2I=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-21T20:14:35Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-22T20:24:47Z"}, "message": "Refactor `match` + `if`", "tree": {"sha": "fe3a4d674581dd4bd58150408e13909715aa04ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe3a4d674581dd4bd58150408e13909715aa04ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/835405199af7230a0349803f90d3ebd80487f23b", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYKlojxUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLjtngD+IzqfOHjCNR6FK4cd+YmwW3AQRxmc\neupnySWxwSLswbEBALjR5Z4ADXOZryeUY5ZiM2cNMApuXMXmlW+SiIpxe8IO\n=jgNI\n-----END PGP SIGNATURE-----", "payload": "tree fe3a4d674581dd4bd58150408e13909715aa04ee\nparent da0abad492bfacd7bf96481c2d043f00312dfd5b\nauthor hyd-dev <yd-huang@outlook.com> 1621628075 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1621715087 +0800\n\nRefactor `match` + `if`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/835405199af7230a0349803f90d3ebd80487f23b", "html_url": "https://github.com/rust-lang/rust/commit/835405199af7230a0349803f90d3ebd80487f23b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/835405199af7230a0349803f90d3ebd80487f23b/comments", "author": null, "committer": null, "parents": [{"sha": "da0abad492bfacd7bf96481c2d043f00312dfd5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/da0abad492bfacd7bf96481c2d043f00312dfd5b", "html_url": "https://github.com/rust-lang/rust/commit/da0abad492bfacd7bf96481c2d043f00312dfd5b"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "8c61d4c0895de046180b4b6abaabf651a9b1fbdb", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/835405199af7230a0349803f90d3ebd80487f23b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/835405199af7230a0349803f90d3ebd80487f23b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=835405199af7230a0349803f90d3ebd80487f23b", "patch": "@@ -143,7 +143,7 @@ pub enum StackPopUnwind {\n     NotAllowed,\n }\n \n-#[derive(Clone, Eq, PartialEq, Debug, HashStable)] // Miri debug-prints these\n+#[derive(Clone, Copy, Eq, PartialEq, Debug, HashStable)] // Miri debug-prints these\n pub enum StackPopCleanup {\n     /// Jump to the next block in the caller, or cause UB if None (that's a function\n     /// that may never return). Also store layout of return place so\n@@ -815,21 +815,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Usually we want to clean up (deallocate locals), but in a few rare cases we don't.\n         // In that case, we return early. We also avoid validation in that case,\n         // because this is CTFE and the final value will be thoroughly validated anyway.\n-        let (cleanup, next_block) = match frame.return_to_block {\n-            StackPopCleanup::Goto { ret, unwind } => (\n+        let (cleanup, next_block) = match (frame.return_to_block, unwinding) {\n+            (StackPopCleanup::Goto { ret, .. }, false) => (true, Some(ret)),\n+            (StackPopCleanup::Goto { unwind, .. }, true) => (\n                 true,\n-                Some(if unwinding {\n-                    match unwind {\n-                        StackPopUnwind::Cleanup(unwind) => unwind,\n-                        StackPopUnwind::NotAllowed => {\n-                            throw_ub_format!(\"unwind past a frame that does not allow unwinding\")\n-                        }\n+                Some(match unwind {\n+                    StackPopUnwind::Cleanup(unwind) => unwind,\n+                    StackPopUnwind::NotAllowed => {\n+                        throw_ub_format!(\"unwind past a frame that does not allow unwinding\")\n                     }\n-                } else {\n-                    ret\n                 }),\n             ),\n-            StackPopCleanup::None { cleanup, .. } => (cleanup, None),\n+            (StackPopCleanup::None { cleanup, .. }, _) => (cleanup, None),\n         };\n \n         if !cleanup {"}]}