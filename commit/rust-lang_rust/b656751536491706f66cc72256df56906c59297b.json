{"sha": "b656751536491706f66cc72256df56906c59297b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NTY3NTE1MzY0OTE3MDZmNjZjYzcyMjU2ZGY1NjkwNmM1OTI5N2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-23T22:33:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-23T22:33:05Z"}, "message": "Merge #9380\n\n9380: feat: Implement goto_declaration support r=matklad a=Veykril\n\nThis is just a simple implementation that falls back to `goto_definition` for everything but modules where it goes to the actual module declaration if possible.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "6fe929b7708df79fe826776fffdc98067a11e1f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fe929b7708df79fe826776fffdc98067a11e1f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b656751536491706f66cc72256df56906c59297b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg07ahCRBK7hj4Ov3rIwAAPjIIAI9ZNJeqiGFKtq9pdQVOA98j\nUhvtN7FL/xgHAOz9iMY3SWffzA60BYOs/UekvR94mI+ABrGBMke36fmelUd1S5KL\nIOQw+ArdF6GC0+EVqX+/Lu8WZ8Ubxz5xy7fHKThqhyjlwDkQVtciMHfKw4zUWiuD\nFsYSpvgj7UT7PxoXoE4V8BeLIbGK/Da9LdTlJpA5bbHiZX/MLaFsHJvWyrdZpHn3\nOKoqjXBDCNv4TK+0dNvLy9rN4IRM3EpIeKY706IdzdZfAv2So6DTgEOPxXBrma88\nQNEaqwfznTIwXkghRaMNoVvjE9V9/YnAXi9LTvFaMxBnfTaTI59GiPyBOBblk+w=\n=JwtK\n-----END PGP SIGNATURE-----\n", "payload": "tree 6fe929b7708df79fe826776fffdc98067a11e1f7\nparent 85a59de39f636d69389730c9ea22d8f9bce4dac1\nparent 37d417868e575fe3da5ee23e7a35db88d2e7bc97\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624487585 +0000\ncommitter GitHub <noreply@github.com> 1624487585 +0000\n\nMerge #9380\n\n9380: feat: Implement goto_declaration support r=matklad a=Veykril\n\nThis is just a simple implementation that falls back to `goto_definition` for everything but modules where it goes to the actual module declaration if possible.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b656751536491706f66cc72256df56906c59297b", "html_url": "https://github.com/rust-lang/rust/commit/b656751536491706f66cc72256df56906c59297b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b656751536491706f66cc72256df56906c59297b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85a59de39f636d69389730c9ea22d8f9bce4dac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a59de39f636d69389730c9ea22d8f9bce4dac1", "html_url": "https://github.com/rust-lang/rust/commit/85a59de39f636d69389730c9ea22d8f9bce4dac1"}, {"sha": "37d417868e575fe3da5ee23e7a35db88d2e7bc97", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d417868e575fe3da5ee23e7a35db88d2e7bc97", "html_url": "https://github.com/rust-lang/rust/commit/37d417868e575fe3da5ee23e7a35db88d2e7bc97"}], "stats": {"total": 122, "additions": 119, "deletions": 3}, "files": [{"sha": "e390616365ff1c85f18d58d4a7cbae0822ce1dd8", "filename": "crates/ide/src/goto_declaration.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/b656751536491706f66cc72256df56906c59297b/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b656751536491706f66cc72256df56906c59297b/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=b656751536491706f66cc72256df56906c59297b", "patch": "@@ -0,0 +1,91 @@\n+use hir::Semantics;\n+use ide_db::{\n+    defs::{Definition, NameClass, NameRefClass},\n+    RootDatabase,\n+};\n+use syntax::{ast, match_ast, AstNode, SyntaxKind::*, T};\n+\n+use crate::{FilePosition, NavigationTarget, RangeInfo};\n+\n+// Feature: Go to Declaration\n+//\n+// Navigates to the declaration of an identifier.\n+pub(crate) fn goto_declaration(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n+    let sema = Semantics::new(db);\n+    let file = sema.parse(position.file_id).syntax().clone();\n+    let original_token = file\n+        .token_at_offset(position.offset)\n+        .find(|it| matches!(it.kind(), IDENT | T![self] | T![super] | T![crate]))?;\n+    let token = sema.descend_into_macros(original_token.clone());\n+    let parent = token.parent()?;\n+    let def = match_ast! {\n+        match parent {\n+            ast::NameRef(name_ref) => {\n+                let name_kind = NameRefClass::classify(&sema, &name_ref)?;\n+                name_kind.referenced(sema.db)\n+            },\n+            ast::Name(name) => {\n+                NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db)\n+            },\n+            _ => return None,\n+        }\n+    };\n+    match def {\n+        Definition::ModuleDef(hir::ModuleDef::Module(module)) => Some(RangeInfo::new(\n+            original_token.text_range(),\n+            vec![NavigationTarget::from_module_to_decl(db, module)],\n+        )),\n+        _ => return None,\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use ide_db::base_db::FileRange;\n+\n+    use crate::fixture;\n+\n+    fn check(ra_fixture: &str) {\n+        let (analysis, position, expected) = fixture::nav_target_annotation(ra_fixture);\n+        let mut navs = analysis\n+            .goto_declaration(position)\n+            .unwrap()\n+            .expect(\"no declaration or definition found\")\n+            .info;\n+        if navs.len() == 0 {\n+            panic!(\"unresolved reference\")\n+        }\n+        assert_eq!(navs.len(), 1);\n+\n+        let nav = navs.pop().unwrap();\n+        assert_eq!(expected, FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() });\n+    }\n+\n+    #[test]\n+    fn goto_decl_module_outline() {\n+        check(\n+            r#\"\n+//- /main.rs\n+mod foo;\n+ // ^^^\n+//- /foo.rs\n+use self$0;\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn goto_decl_module_inline() {\n+        check(\n+            r#\"\n+mod foo {\n+ // ^^^\n+    use self$0;\n+}\n+\"#,\n+        )\n+    }\n+}"}, {"sha": "0887af2ae338da2265a71c4b4b920d512989fe4d", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b656751536491706f66cc72256df56906c59297b/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b656751536491706f66cc72256df56906c59297b/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=b656751536491706f66cc72256df56906c59297b", "patch": "@@ -35,7 +35,7 @@ pub(crate) fn goto_definition(\n     let file = sema.parse(position.file_id).syntax().clone();\n     let original_token =\n         pick_best_token(file.token_at_offset(position.offset), |kind| match kind {\n-            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | COMMENT => 2,\n+            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] | COMMENT => 2,\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n         })?;"}, {"sha": "38606e097430ff96e9ef4b7c0a70de72e5ef5de6", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b656751536491706f66cc72256df56906c59297b/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b656751536491706f66cc72256df56906c59297b/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=b656751536491706f66cc72256df56906c59297b", "patch": "@@ -28,6 +28,7 @@ mod expand_macro;\n mod extend_selection;\n mod file_structure;\n mod folding_ranges;\n+mod goto_declaration;\n mod goto_definition;\n mod goto_implementation;\n mod goto_type_definition;\n@@ -374,6 +375,14 @@ impl Analysis {\n         self.with_db(|db| goto_definition::goto_definition(db, position))\n     }\n \n+    /// Returns the declaration from the symbol at `position`.\n+    pub fn goto_declaration(\n+        &self,\n+        position: FilePosition,\n+    ) -> Cancellable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n+        self.with_db(|db| goto_declaration::goto_declaration(db, position))\n+    }\n+\n     /// Returns the impls from the symbol at `position`.\n     pub fn goto_implementation(\n         &self,"}, {"sha": "ddee4750408c9011079e25ee356548d02c7a1899", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b656751536491706f66cc72256df56906c59297b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b656751536491706f66cc72256df56906c59297b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=b656751536491706f66cc72256df56906c59297b", "patch": "@@ -1,7 +1,7 @@\n //! Advertises the capabilities of the LSP Server.\n use lsp_types::{\n     CallHierarchyServerCapability, ClientCapabilities, CodeActionKind, CodeActionOptions,\n-    CodeActionProviderCapability, CodeLensOptions, CompletionOptions,\n+    CodeActionProviderCapability, CodeLensOptions, CompletionOptions, DeclarationCapability,\n     DocumentOnTypeFormattingOptions, FileOperationFilter, FileOperationPattern,\n     FileOperationPatternKind, FileOperationRegistrationOptions, FoldingRangeProviderCapability,\n     HoverProviderCapability, ImplementationProviderCapability, OneOf, RenameOptions, SaveOptions,\n@@ -38,7 +38,7 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n             retrigger_characters: None,\n             work_done_progress_options: WorkDoneProgressOptions { work_done_progress: None },\n         }),\n-        declaration_provider: None,\n+        declaration_provider: Some(DeclarationCapability::Simple(true)),\n         definition_provider: Some(OneOf::Left(true)),\n         type_definition_provider: Some(TypeDefinitionProviderCapability::Simple(true)),\n         implementation_provider: Some(ImplementationProviderCapability::Simple(true)),"}, {"sha": "bfed068fccb51cbc27aa711cf05a12c2055c7c64", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b656751536491706f66cc72256df56906c59297b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b656751536491706f66cc72256df56906c59297b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=b656751536491706f66cc72256df56906c59297b", "patch": "@@ -556,6 +556,21 @@ pub(crate) fn handle_goto_definition(\n     Ok(Some(res))\n }\n \n+pub(crate) fn handle_goto_declaration(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_types::request::GotoDeclarationParams,\n+) -> Result<Option<lsp_types::request::GotoDeclarationResponse>> {\n+    let _p = profile::span(\"handle_goto_declaration\");\n+    let position = from_proto::file_position(&snap, params.text_document_position_params.clone())?;\n+    let nav_info = match snap.analysis.goto_declaration(position)? {\n+        None => return handle_goto_definition(snap, params),\n+        Some(it) => it,\n+    };\n+    let src = FileRange { file_id: position.file_id, range: nav_info.range };\n+    let res = to_proto::goto_definition_response(&snap, Some(src), nav_info.info)?;\n+    Ok(Some(res))\n+}\n+\n pub(crate) fn handle_goto_implementation(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::request::GotoImplementationParams,"}, {"sha": "82a31362af647035f69708c8161b9b4cf9e47aad", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b656751536491706f66cc72256df56906c59297b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b656751536491706f66cc72256df56906c59297b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=b656751536491706f66cc72256df56906c59297b", "patch": "@@ -531,6 +531,7 @@ impl GlobalState {\n             .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)\n             .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)\n             .on::<lsp_types::request::GotoDefinition>(handlers::handle_goto_definition)\n+            .on::<lsp_types::request::GotoDeclaration>(handlers::handle_goto_declaration)\n             .on::<lsp_types::request::GotoImplementation>(handlers::handle_goto_implementation)\n             .on::<lsp_types::request::GotoTypeDefinition>(handlers::handle_goto_type_definition)\n             .on::<lsp_types::request::Completion>(handlers::handle_completion)"}]}