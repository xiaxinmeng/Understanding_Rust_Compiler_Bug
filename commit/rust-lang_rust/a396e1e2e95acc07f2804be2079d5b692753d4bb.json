{"sha": "a396e1e2e95acc07f2804be2079d5b692753d4bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOTZlMWUyZTk1YWNjMDdmMjgwNGJlMjA3OWQ1YjY5Mjc1M2Q0YmI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-29T04:02:20Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-30T11:17:47Z"}, "message": "Convert vec::{grow, grow_fn, grow_set} to methods.", "tree": {"sha": "3b016aca6250aa4a9160d4cd9a2ed9d3bb9473cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b016aca6250aa4a9160d4cd9a2ed9d3bb9473cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a396e1e2e95acc07f2804be2079d5b692753d4bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a396e1e2e95acc07f2804be2079d5b692753d4bb", "html_url": "https://github.com/rust-lang/rust/commit/a396e1e2e95acc07f2804be2079d5b692753d4bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a396e1e2e95acc07f2804be2079d5b692753d4bb/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eea642c3064e2de643cf155082f08dc141eafaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eea642c3064e2de643cf155082f08dc141eafaa", "html_url": "https://github.com/rust-lang/rust/commit/2eea642c3064e2de643cf155082f08dc141eafaa"}], "stats": {"total": 116, "additions": 48, "deletions": 68}, "files": [{"sha": "9cfe7cf5e4a1b302a09cf529ee5ba849dada74b4", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a396e1e2e95acc07f2804be2079d5b692753d4bb/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396e1e2e95acc07f2804be2079d5b692753d4bb/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=a396e1e2e95acc07f2804be2079d5b692753d4bb", "patch": "@@ -20,7 +20,6 @@ use std::cmp;\n use std::container::{Container, Mutable, Map, Set};\n use std::uint;\n use std::util::replace;\n-use std::vec;\n \n #[allow(missing_doc)]\n pub struct SmallIntMap<T> {\n@@ -86,7 +85,7 @@ impl<V> Map<uint, V> for SmallIntMap<V> {\n         let exists = self.contains_key(&key);\n         let len = self.v.len();\n         if len <= key {\n-            vec::grow_fn(&mut self.v, key - len + 1, |_| None);\n+            self.v.grow_fn(key - len + 1, |_| None);\n         }\n         self.v[key] = Some(value);\n         !exists"}, {"sha": "976a67ef4227b769d987920107126f01248e8fbe", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 46, "deletions": 63, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/a396e1e2e95acc07f2804be2079d5b692753d4bb/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396e1e2e95acc07f2804be2079d5b692753d4bb/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=a396e1e2e95acc07f2804be2079d5b692753d4bb", "patch": "@@ -363,63 +363,6 @@ pub fn append_one<T>(lhs: ~[T], x: T) -> ~[T] {\n     v\n }\n \n-/**\n- * Expands a vector in place, initializing the new elements to a given value\n- *\n- * # Arguments\n- *\n- * * v - The vector to grow\n- * * n - The number of elements to add\n- * * initval - The value for the new elements\n- */\n-pub fn grow<T:Copy>(v: &mut ~[T], n: uint, initval: &T) {\n-    let new_len = v.len() + n;\n-    v.reserve_at_least(new_len);\n-    let mut i: uint = 0u;\n-\n-    while i < n {\n-        v.push(copy *initval);\n-        i += 1u;\n-    }\n-}\n-\n-/**\n- * Expands a vector in place, initializing the new elements to the result of\n- * a function\n- *\n- * Function `init_op` is called `n` times with the values [0..`n`)\n- *\n- * # Arguments\n- *\n- * * v - The vector to grow\n- * * n - The number of elements to add\n- * * init_op - A function to call to retreive each appended element's\n- *             value\n- */\n-pub fn grow_fn<T>(v: &mut ~[T], n: uint, op: &fn(uint) -> T) {\n-    let new_len = v.len() + n;\n-    v.reserve_at_least(new_len);\n-    let mut i: uint = 0u;\n-    while i < n {\n-        v.push(op(i));\n-        i += 1u;\n-    }\n-}\n-\n-/**\n- * Sets the value of a vector element at a given index, growing the vector as\n- * needed\n- *\n- * Sets the element at position `index` to `val`. If `index` is past the end\n- * of the vector, expands the vector by replicating `initval` to fill the\n- * intervening space.\n- */\n-pub fn grow_set<T:Copy>(v: &mut ~[T], index: uint, initval: &T, val: T) {\n-    let l = v.len();\n-    if index >= l { grow(&mut *v, index - l + 1u, initval); }\n-    v[index] = val;\n-}\n-\n // Functional utilities\n \n /// Apply a function to each element of a vector and return the results\n@@ -1648,9 +1591,26 @@ impl<T> OwnedVector<T> for ~[T] {\n         (lefts, rights)\n     }\n \n-    #[inline]\n+    /**\n+     * Expands a vector in place, initializing the new elements to the result of\n+     * a function\n+     *\n+     * Function `init_op` is called `n` times with the values [0..`n`)\n+     *\n+     * # Arguments\n+     *\n+     * * n - The number of elements to add\n+     * * init_op - A function to call to retreive each appended element's\n+     *             value\n+     */\n     fn grow_fn(&mut self, n: uint, op: &fn(uint) -> T) {\n-        grow_fn(self, n, op);\n+        let new_len = self.len() + n;\n+        self.reserve_at_least(new_len);\n+        let mut i: uint = 0u;\n+        while i < n {\n+            self.push(op(i));\n+            i += 1u;\n+        }\n     }\n }\n \n@@ -1687,14 +1647,37 @@ impl<T:Copy> OwnedCopyableVector<T> for ~[T] {\n         }\n     }\n \n-    #[inline]\n+    /**\n+     * Expands a vector in place, initializing the new elements to a given value\n+     *\n+     * # Arguments\n+     *\n+     * * n - The number of elements to add\n+     * * initval - The value for the new elements\n+     */\n     fn grow(&mut self, n: uint, initval: &T) {\n-        grow(self, n, initval);\n+        let new_len = self.len() + n;\n+        self.reserve_at_least(new_len);\n+        let mut i: uint = 0u;\n+\n+        while i < n {\n+            self.push(copy *initval);\n+            i += 1u;\n+        }\n     }\n \n-    #[inline]\n+    /**\n+     * Sets the value of a vector element at a given index, growing the vector as\n+     * needed\n+     *\n+     * Sets the element at position `index` to `val`. If `index` is past the end\n+     * of the vector, expands the vector by replicating `initval` to fill the\n+     * intervening space.\n+     */\n     fn grow_set(&mut self, index: uint, initval: &T, val: T) {\n-        grow_set(self, index, initval, val);\n+        let l = self.len();\n+        if index >= l { self.grow(index - l + 1u, initval); }\n+        self[index] = val;\n     }\n }\n "}, {"sha": "a24800e4dbb25ec619356f69f8e378a876537134", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a396e1e2e95acc07f2804be2079d5b692753d4bb/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396e1e2e95acc07f2804be2079d5b692753d4bb/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=a396e1e2e95acc07f2804be2079d5b692753d4bb", "patch": "@@ -69,9 +69,7 @@ fn AsciiArt(width: uint, height: uint, fill: char) -> AsciiArt {\n     // blank characters for each position in our canvas.\n     let mut lines = do vec::build_sized(height) |push| {\n             for height.times {\n-                let mut line = ~[];\n-                vec::grow_set(&mut line, width-1, &'.', '.');\n-                push(line);\n+                push(vec::from_elem(width, '.'));\n             }\n         };\n "}]}