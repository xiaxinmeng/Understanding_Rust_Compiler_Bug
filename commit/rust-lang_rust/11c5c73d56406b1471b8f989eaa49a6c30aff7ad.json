{"sha": "11c5c73d56406b1471b8f989eaa49a6c30aff7ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYzVjNzNkNTY0MDZiMTQ3MWI4Zjk4OWVhYTQ5YTZjMzBhZmY3YWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-14T23:13:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-15T16:46:37Z"}, "message": "rustc: Introduce an attribute type to the AST\n\nRight now the only thing that it adds to meta_item is an indication of whether\nthe attribute was declared inside or outside the item, but I expect it will\nbecome more useful.\n\nIssue #487", "tree": {"sha": "e98b69995823f1fa8d981cf621a30cfed6709524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e98b69995823f1fa8d981cf621a30cfed6709524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11c5c73d56406b1471b8f989eaa49a6c30aff7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11c5c73d56406b1471b8f989eaa49a6c30aff7ad", "html_url": "https://github.com/rust-lang/rust/commit/11c5c73d56406b1471b8f989eaa49a6c30aff7ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11c5c73d56406b1471b8f989eaa49a6c30aff7ad/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eefa5f9d37253e00bd373b7c45857fd9c4e2836", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eefa5f9d37253e00bd373b7c45857fd9c4e2836", "html_url": "https://github.com/rust-lang/rust/commit/0eefa5f9d37253e00bd373b7c45857fd9c4e2836"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "4577e88457bc3226c579ca91edb5238bf548d204", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/11c5c73d56406b1471b8f989eaa49a6c30aff7ad/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c5c73d56406b1471b8f989eaa49a6c30aff7ad/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=11c5c73d56406b1471b8f989eaa49a6c30aff7ad", "patch": "@@ -448,11 +448,26 @@ tag view_item_ {\n \n type obj_def_ids = rec(def_id ty, def_id ctor);\n \n+\n+// Meta-data associated with an item\n+type attribute = spanned[attribute_];\n+\n+// Distinguishes between attributes that decorate items and attributes that\n+// are contained as statements within items. These two cases need to be\n+// distinguished for pretty-printing.\n+tag attr_style {\n+    attr_outer;\n+    attr_inner;\n+}\n+\n+type attribute_ = rec(attr_style style,\n+                      meta_item value);\n+\n type item = spanned[item_];\n tag item_ {\n     item_const(ident, @ty, @expr, def_id, ann);\n     item_fn(ident, _fn, vec[ty_param], def_id, ann);\n-    item_mod(ident, _mod, vec[meta_item], def_id);\n+    item_mod(ident, _mod, vec[attribute], def_id);\n     item_native_mod(ident, native_mod, def_id);\n     item_ty(ident, @ty, vec[ty_param], def_id, ann);\n     item_tag(ident, vec[variant], vec[ty_param], def_id, ann);"}, {"sha": "b85da77709c1f5a9e614a90bdb79dcf910d1abbd", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11c5c73d56406b1471b8f989eaa49a6c30aff7ad/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c5c73d56406b1471b8f989eaa49a6c30aff7ad/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=11c5c73d56406b1471b8f989eaa49a6c30aff7ad", "patch": "@@ -1912,7 +1912,7 @@ fn parse_item_const(&parser p) -> @ast::item {\n     ret @spanned(lo, hi, item);\n }\n \n-fn parse_item_mod(&parser p, vec[ast::meta_item] attrs) -> @ast::item {\n+fn parse_item_mod(&parser p, vec[ast::attribute] attrs) -> @ast::item {\n     auto lo = p.get_last_lo_pos();\n     auto id = parse_ident(p);\n     expect(p, token::LBRACE);\n@@ -2125,7 +2125,7 @@ tag parsed_item {\n     fn_no_item;\n }\n \n-fn parse_item(&parser p, vec[ast::meta_item] attrs) -> parsed_item {\n+fn parse_item(&parser p, vec[ast::attribute] attrs) -> parsed_item {\n \n     if (eat_word(p, \"const\")) {\n         ret got_item(parse_item_const(p));\n@@ -2156,19 +2156,27 @@ fn parse_item(&parser p, vec[ast::meta_item] attrs) -> parsed_item {\n     }\n }\n \n-fn parse_attributes(&parser p) -> vec[ast::meta_item] {\n-    let vec[ast::meta_item] attrs = [];\n+fn parse_attributes(&parser p) -> vec[ast::attribute] {\n+    let vec[ast::attribute] attrs = [];\n \n     while (p.peek() == token::POUND) {\n-        p.bump();\n-        expect(p, token::LBRACKET);\n-        attrs += [*parse_meta_item(p)];\n-        expect(p, token::RBRACKET);\n+        attrs += [parse_attribute(p)];\n     }\n \n     ret attrs;\n }\n \n+fn parse_attribute(&parser p) -> ast::attribute {\n+    auto lo = p.get_lo_pos();\n+    expect(p, token::POUND);\n+    expect(p, token::LBRACKET);\n+    auto meta_item = parse_meta_item(p);\n+    expect(p, token::RBRACKET);\n+    auto hi = p.get_hi_pos();\n+    ret spanned(lo, hi, rec(style = ast::attr_outer,\n+                            value = *meta_item));\n+}\n+\n fn parse_meta_item(&parser p) -> @ast::meta_item {\n     auto lo = p.get_lo_pos();\n     auto ident = parse_ident(p);"}]}