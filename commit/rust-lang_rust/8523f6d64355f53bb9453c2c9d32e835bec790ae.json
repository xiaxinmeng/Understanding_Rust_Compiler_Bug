{"sha": "8523f6d64355f53bb9453c2c9d32e835bec790ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MjNmNmQ2NDM1NWY1M2JiOTQ1M2MyYzlkMzJlODM1YmVjNzkwYWU=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-07T18:19:15Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-08T02:39:57Z"}, "message": "rustc: Fix for-range loops that can use iterators\n\nTransform range loops that can be regular iterator loops.", "tree": {"sha": "d14d83c66414637209b90c14662a39db7b0b65a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d14d83c66414637209b90c14662a39db7b0b65a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8523f6d64355f53bb9453c2c9d32e835bec790ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8523f6d64355f53bb9453c2c9d32e835bec790ae", "html_url": "https://github.com/rust-lang/rust/commit/8523f6d64355f53bb9453c2c9d32e835bec790ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8523f6d64355f53bb9453c2c9d32e835bec790ae/comments", "author": null, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7d4a9c7f248a87a1aa6b5008c7229da2b69a20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d4a9c7f248a87a1aa6b5008c7229da2b69a20f", "html_url": "https://github.com/rust-lang/rust/commit/e7d4a9c7f248a87a1aa6b5008c7229da2b69a20f"}], "stats": {"total": 50, "additions": 21, "deletions": 29}, "files": [{"sha": "9c176b504b2ee61fcb7440687d91412b294f0fad", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=8523f6d64355f53bb9453c2c9d32e835bec790ae", "patch": "@@ -412,8 +412,8 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n         }\n     }\n \n-    for i in range(0u, found_flags.len()) {\n-        if !found_flags[i] {\n+    for (i, &flag) in found_flags.iter().enumerate() {\n+        if !flag {\n             let ee = &expected_errors[i];\n             fatal_ProcRes(fmt!(\"expected %s on line %u not found: %s\",\n                                ee.kind, ee.line, ee.msg), ProcRes);"}, {"sha": "88e168db5584f7baabcd24290976f35e9a92cfb5", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=8523f6d64355f53bb9453c2c9d32e835bec790ae", "patch": "@@ -159,10 +159,10 @@ impl<'self> CheckLoanCtxt<'self> {\n             true\n         };\n \n-        for i in range(0u, new_loan_indices.len()) {\n-            let old_loan = &self.all_loans[new_loan_indices[i]];\n-            for j in range(i+1, new_loan_indices.len()) {\n-                let new_loan = &self.all_loans[new_loan_indices[j]];\n+        for (i, &x) in new_loan_indices.iter().enumerate() {\n+            let old_loan = &self.all_loans[x];\n+            for &y in new_loan_indices.slice_from(i+1).iter() {\n+                let new_loan = &self.all_loans[y];\n                 self.report_error_if_loans_conflict(old_loan, new_loan);\n             }\n         }"}, {"sha": "46b6d2214ae49dac47703d4c1de09fe3bb957171", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=8523f6d64355f53bb9453c2c9d32e835bec790ae", "patch": "@@ -983,10 +983,10 @@ fn bitwise(out_vec: &mut [uint],\n            op: &fn(uint, uint) -> uint) -> bool {\n     assert_eq!(out_vec.len(), in_vec.len());\n     let mut changed = false;\n-    for i in range(0u, out_vec.len()) {\n-        let old_val = out_vec[i];\n-        let new_val = op(old_val, in_vec[i]);\n-        out_vec[i] = new_val;\n+    for (out_elt, in_elt) in out_vec.mut_iter().zip(in_vec.iter()) {\n+        let old_val = *out_elt;\n+        let new_val = op(old_val, *in_elt);\n+        *out_elt = new_val;\n         changed |= (old_val != new_val);\n     }\n     changed"}, {"sha": "db8a86fe948dff3d38bb9fafcbd811ef2e0d9219", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8523f6d64355f53bb9453c2c9d32e835bec790ae", "patch": "@@ -1742,8 +1742,7 @@ pub fn copy_args_to_allocas(fcx: @mut FunctionContext,\n         _ => {}\n     }\n \n-    for arg_n in range(0u, arg_tys.len()) {\n-        let arg_ty = arg_tys[arg_n];\n+    for (arg_n, &arg_ty) in arg_tys.iter().enumerate() {\n         let raw_llarg = raw_llargs[arg_n];\n \n         // For certain mode/type combinations, the raw llarg values are passed"}, {"sha": "dd24ec3ff1ac198222cecf77cb54afb0b97cfa1d", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=8523f6d64355f53bb9453c2c9d32e835bec790ae", "patch": "@@ -145,8 +145,8 @@ fn classify_ty(ty: Type) -> ~[RegClass] {\n     }\n \n     fn all_mem(cls: &mut [RegClass]) {\n-        for i in range(0u, cls.len()) {\n-            cls[i] = Memory;\n+        for elt in cls.mut_iter() {\n+            *elt = Memory;\n         }\n     }\n "}, {"sha": "f25bf011f5d062f56c2130bb570bc725dc40e3d8", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=8523f6d64355f53bb9453c2c9d32e835bec790ae", "patch": "@@ -206,15 +206,8 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n \n pub fn type_needs(cx: &Context, use_: uint, ty: ty::t) {\n     // Optimization -- don't descend type if all params already have this use\n-    let len = {\n-        let uses = &*cx.uses;\n-        uses.len()\n-    };\n-    for i in range(0u, len) {\n-        if cx.uses[i] & use_ != use_ {\n-            type_needs_inner(cx, use_, ty, @Nil);\n-            return;\n-        }\n+    if cx.uses.iter().any(|&elt| elt & use_ != use_) {\n+        type_needs_inner(cx, use_, ty, @Nil);\n     }\n }\n "}, {"sha": "ae0a95688ed20dfef1b5c1607283f9518d0cd8b3", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=8523f6d64355f53bb9453c2c9d32e835bec790ae", "patch": "@@ -772,8 +772,8 @@ impl<'self> LookupContext<'self> {\n             self.tcx().sess.span_err(\n                 self.expr.span,\n                 \"multiple applicable methods in scope\");\n-            for idx in range(0u, relevant_candidates.len()) {\n-                self.report_candidate(idx, &relevant_candidates[idx].origin);\n+            for (idx, candidate) in relevant_candidates.iter().enumerate() {\n+                self.report_candidate(idx, &candidate.origin);\n             }\n         }\n "}, {"sha": "c3df0d06f83dd5bd78499100c1b9093f962e8e45", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=8523f6d64355f53bb9453c2c9d32e835bec790ae", "patch": "@@ -554,8 +554,8 @@ impl CoherenceChecker {\n \n         let mut provided_names = HashSet::new();\n         // Implemented methods\n-        for i in range(0u, all_methods.len()) {\n-            provided_names.insert(all_methods[i].ident);\n+        for elt in all_methods.iter() {\n+            provided_names.insert(elt.ident);\n         }\n \n         let r = ty::trait_methods(tcx, trait_did);"}, {"sha": "91b6a4ce3bce3820b8c26eeece0d95338d548c76", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8523f6d64355f53bb9453c2c9d32e835bec790ae/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=8523f6d64355f53bb9453c2c9d32e835bec790ae", "patch": "@@ -374,8 +374,8 @@ impl RegionVarBindings {\n     pub fn vars_created_since_snapshot(&mut self, snapshot: uint)\n                                        -> ~[RegionVid] {\n         do vec::build |push| {\n-            for i in range(snapshot, self.undo_log.len()) {\n-                match self.undo_log[i] {\n+            for &elt in self.undo_log.slice_from(snapshot).iter() {\n+                match elt {\n                     AddVar(vid) => push(vid),\n                     _ => ()\n                 }"}]}