{"sha": "673d0db5e393e9c64897005b470bfeb6d5aec61b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3M2QwZGI1ZTM5M2U5YzY0ODk3MDA1YjQ3MGJmZWI2ZDVhZWM2MWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-23T19:06:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-23T19:06:10Z"}, "message": "Auto merge of #82994 - camelid:rename-source-to-span, r=jyn514\n\nRename `source` to `span` and `span` to `source`\n\n- Rename `clean::Item.source` to `span`\n- Rename `clean::Span::span()` to `clean::Span::inner()`\n- Rename `rustdoc_json_types::Item.source` to `span`\n- rustdoc-json: Rename `Import.span` to `Import.source`\n\n*See also the [discussion on Zulip][z] (this is a bit more than discussed in\nthat conversation, but all the changes are related).*\n\nr? `@jyn514`\n\n[z]: https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/get.20span.20of.20file.20from.20name/near/229603729", "tree": {"sha": "50a80cd46d02534a170ace1276035ac136d285be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a80cd46d02534a170ace1276035ac136d285be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/673d0db5e393e9c64897005b470bfeb6d5aec61b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/673d0db5e393e9c64897005b470bfeb6d5aec61b", "html_url": "https://github.com/rust-lang/rust/commit/673d0db5e393e9c64897005b470bfeb6d5aec61b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/673d0db5e393e9c64897005b470bfeb6d5aec61b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e5814f4520f2c51b5307421db45cd82d134e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e5814f4520f2c51b5307421db45cd82d134e76", "html_url": "https://github.com/rust-lang/rust/commit/79e5814f4520f2c51b5307421db45cd82d134e76"}, {"sha": "d5f2bb2899ac152eddd8e4c6bd19e9d154c1497f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f2bb2899ac152eddd8e4c6bd19e9d154c1497f", "html_url": "https://github.com/rust-lang/rust/commit/d5f2bb2899ac152eddd8e4c6bd19e9d154c1497f"}], "stats": {"total": 106, "additions": 57, "deletions": 49}, "files": [{"sha": "9052e5954200f0753708f9bdff88f06b90234570", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         };\n \n         Some(Item {\n-            source: Span::dummy(),\n+            span: Span::dummy(),\n             name: None,\n             attrs: Default::default(),\n             visibility: Inherited,"}, {"sha": "6e7164457ceb654ec1a6842cc22b19e31de71469", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     .collect();\n \n                 impls.push(Item {\n-                    source: self.cx.tcx.def_span(impl_def_id).clean(self.cx),\n+                    span: self.cx.tcx.def_span(impl_def_id).clean(self.cx),\n                     name: None,\n                     attrs: Default::default(),\n                     visibility: Inherited,"}, {"sha": "0d32c14c3be9b38eea7def32dcddff33df976c39", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -459,7 +459,7 @@ fn build_module(\n                 items.push(clean::Item {\n                     name: None,\n                     attrs: box clean::Attributes::default(),\n-                    source: clean::Span::dummy(),\n+                    span: clean::Span::dummy(),\n                     def_id: DefId::local(CRATE_DEF_INDEX),\n                     visibility: clean::Public,\n                     kind: box clean::ImportItem(clean::Import::new_simple("}, {"sha": "e5fe1159928d5602e8417403c9796d59b873706b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -235,7 +235,7 @@ impl Clean<Item> for doctree::Module<'_> {\n             ModuleItem(Module { is_crate: self.is_crate, items }),\n             cx,\n         );\n-        Item { source: span.clean(cx), ..what_rustc_thinks }\n+        Item { span: span.clean(cx), ..what_rustc_thinks }\n     }\n }\n \n@@ -2132,7 +2132,7 @@ fn clean_extern_crate(\n     vec![Item {\n         name: Some(name),\n         attrs: box attrs.clean(cx),\n-        source: krate.span.clean(cx),\n+        span: krate.span.clean(cx),\n         def_id: crate_def_id,\n         visibility: krate.vis.clean(cx),\n         kind: box ExternCrateItem { src: orig_name },"}, {"sha": "3dd27933471be260962b7b9d15baf26bbc994af7", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -81,12 +81,14 @@ crate struct ExternalCrate {\n /// directly to the AST's concept of an item; it's a strict superset.\n #[derive(Clone)]\n crate struct Item {\n-    /// Stringified span\n-    crate source: Span,\n-    /// Not everything has a name. E.g., impls\n+    crate span: Span,\n+    /// The name of this item.\n+    /// Optional because not every item has a name, e.g. impls.\n     crate name: Option<Symbol>,\n     crate attrs: Box<Attributes>,\n     crate visibility: Visibility,\n+    /// Information about this item that is specific to what kind of item it is.\n+    /// E.g., struct vs enum vs function.\n     crate kind: Box<ItemKind>,\n     crate def_id: DefId,\n }\n@@ -100,7 +102,7 @@ impl fmt::Debug for Item {\n         let def_id: &dyn fmt::Debug = if self.is_fake() { &\"**FAKE**\" } else { &self.def_id };\n \n         fmt.debug_struct(\"Item\")\n-            .field(\"source\", &self.source)\n+            .field(\"source\", &self.span)\n             .field(\"name\", &self.name)\n             .field(\"attrs\", &self.attrs)\n             .field(\"kind\", &self.kind)\n@@ -165,7 +167,7 @@ impl Item {\n         debug!(\"name={:?}, def_id={:?}\", name, def_id);\n \n         // `span_if_local()` lies about functions and only gives the span of the function signature\n-        let source = def_id.as_local().map_or_else(\n+        let span = def_id.as_local().map_or_else(\n             || cx.tcx.def_span(def_id),\n             |local| {\n                 let hir = cx.tcx.hir();\n@@ -177,7 +179,7 @@ impl Item {\n             def_id,\n             kind: box kind,\n             name,\n-            source: source.clean(cx),\n+            span: span.clean(cx),\n             attrs,\n             visibility: cx.tcx.visibility(def_id).clean(cx),\n         }\n@@ -559,6 +561,8 @@ impl<'a> FromIterator<&'a DocFragment> for String {\n     }\n }\n \n+/// The attributes on an [`Item`], including attributes like `#[derive(...)]` and `#[inline]`,\n+/// as well as doc comments.\n #[derive(Clone, Debug, Default)]\n crate struct Attributes {\n     crate doc_strings: Vec<DocFragment>,\n@@ -1798,8 +1802,13 @@ impl From<hir::PrimTy> for PrimitiveType {\n \n #[derive(Copy, Clone, Debug)]\n crate enum Visibility {\n+    /// `pub`\n     Public,\n+    /// Visibility inherited from parent.\n+    ///\n+    /// For example, this is the visibility of private items and of enum variants.\n     Inherited,\n+    /// `pub(crate)`, `pub(super)`, or `pub(in path::to::somewhere)`\n     Restricted(DefId),\n }\n \n@@ -1848,7 +1857,8 @@ crate enum Variant {\n     Struct(VariantStruct),\n }\n \n-/// Small wrapper around `rustc_span::Span` that adds helper methods and enforces calling `source_callsite`.\n+/// Small wrapper around [`rustc_span::Span]` that adds helper methods\n+/// and enforces calling [`rustc_span::Span::source_callsite()`].\n #[derive(Clone, Debug)]\n crate struct Span(rustc_span::Span);\n \n@@ -1860,12 +1870,12 @@ impl Span {\n         Self(sp.source_callsite())\n     }\n \n-    crate fn dummy() -> Self {\n-        Self(rustc_span::DUMMY_SP)\n+    crate fn inner(&self) -> rustc_span::Span {\n+        self.0\n     }\n \n-    crate fn span(&self) -> rustc_span::Span {\n-        self.0\n+    crate fn dummy() -> Self {\n+        Self(rustc_span::DUMMY_SP)\n     }\n \n     crate fn is_dummy(&self) -> bool {"}, {"sha": "05993d8df6036ce4ec9e5fef4b585d634feae368", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -228,15 +228,15 @@ impl<'tcx> Context<'tcx> {\n     /// may happen, for example, with externally inlined items where the source\n     /// of their crate documentation isn't known.\n     pub(super) fn src_href(&self, item: &clean::Item) -> Option<String> {\n-        if item.source.is_dummy() {\n+        if item.span.is_dummy() {\n             return None;\n         }\n         let mut root = self.root_path();\n         let mut path = String::new();\n-        let cnum = item.source.cnum(self.sess());\n+        let cnum = item.span.cnum(self.sess());\n \n         // We can safely ignore synthetic `SourceFile`s.\n-        let file = match item.source.filename(self.sess()) {\n+        let file = match item.span.filename(self.sess()) {\n             FileName::Real(ref path) => path.local_path().to_path_buf(),\n             _ => return None,\n         };\n@@ -270,8 +270,8 @@ impl<'tcx> Context<'tcx> {\n             (&*symbol, &path)\n         };\n \n-        let loline = item.source.lo(self.sess()).line;\n-        let hiline = item.source.hi(self.sess()).line;\n+        let loline = item.span.lo(self.sess()).line;\n+        let hiline = item.span.hi(self.sess()).line;\n         let lines =\n             if loline == hiline { loline.to_string() } else { format!(\"{}-{}\", loline, hiline) };\n         Some(format!("}, {"sha": "c3c4c4952b3b48b34dbfde6eaa9ade9d96b2995b", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -937,7 +937,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             Some(\"macro\"),\n             None,\n             None,\n-            it.source.span().edition(),\n+            it.span.inner().edition(),\n         );\n     });\n     document(w, cx, it, None)"}, {"sha": "1b6a82fed1170723d0b5c5196cde281b28b1aac8", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -41,11 +41,11 @@ impl DocFolder for SourceCollector<'_, '_> {\n         // then we need to render it out to the filesystem.\n         if self.scx.include_sources\n             // skip all synthetic \"files\"\n-            && item.source.filename(self.sess()).is_real()\n+            && item.span.filename(self.sess()).is_real()\n             // skip non-local files\n-            && item.source.cnum(self.sess()) == LOCAL_CRATE\n+            && item.span.cnum(self.sess()) == LOCAL_CRATE\n         {\n-            let filename = item.source.filename(self.sess());\n+            let filename = item.span.filename(self.sess());\n             // If it turns out that we couldn't read this file, then we probably\n             // can't read any of the files (generating html output from json or\n             // something like that), so just don't include sources for the"}, {"sha": "073209c2468a0b4f6fe6e20e36a7b2812aa2cd0d", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -24,7 +24,7 @@ use std::collections::HashSet;\n impl JsonRenderer<'_> {\n     pub(super) fn convert_item(&self, item: clean::Item) -> Option<Item> {\n         let deprecation = item.deprecation(self.tcx);\n-        let clean::Item { source, name, attrs, kind, visibility, def_id } = item;\n+        let clean::Item { span, name, attrs, kind, visibility, def_id } = item;\n         let inner = match *kind {\n             clean::StrippedItem(_) => return None,\n             x => from_clean_item_kind(x, self.tcx, &name),\n@@ -33,7 +33,7 @@ impl JsonRenderer<'_> {\n             id: from_def_id(def_id),\n             crate_id: def_id.krate.as_u32(),\n             name: name.map(|sym| sym.to_string()),\n-            source: self.convert_span(source),\n+            span: self.convert_span(span),\n             visibility: self.convert_visibility(visibility),\n             docs: attrs.collapsed_doc_value(),\n             links: attrs\n@@ -503,13 +503,13 @@ impl From<clean::Import> for Import {\n         use clean::ImportKind::*;\n         match import.kind {\n             Simple(s) => Import {\n-                span: import.source.path.whole_name(),\n+                source: import.source.path.whole_name(),\n                 name: s.to_string(),\n                 id: import.source.did.map(from_def_id),\n                 glob: false,\n             },\n             Glob => Import {\n-                span: import.source.path.whole_name(),\n+                source: import.source.path.whole_name(),\n                 name: import.source.path.last_name().to_string(),\n                 id: import.source.did.map(from_def_id),\n                 glob: true,"}, {"sha": "c1dbb5dd33a961af3663598ff605a933514653e9", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -109,7 +109,7 @@ impl JsonRenderer<'tcx> {\n                                 .map(Clone::clone),\n                             visibility: types::Visibility::Public,\n                             inner: types::ItemEnum::Trait(trait_item.clone().into()),\n-                            source: None,\n+                            span: None,\n                             docs: Default::default(),\n                             links: Default::default(),\n                             attrs: Default::default(),\n@@ -246,7 +246,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 4,\n+            format_version: 5,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "a2f8eb3772efd056d9ea3ce06761927b07bfa864", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -212,7 +212,7 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                 return Some(i);\n             }\n             clean::ImplItem(ref impl_) => {\n-                let filename = i.source.filename(self.ctx.sess());\n+                let filename = i.span.filename(self.ctx.sess());\n                 if let Some(ref tr) = impl_.trait_ {\n                     debug!(\n                         \"impl {:#} for {:#} in {}\",\n@@ -243,7 +243,7 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                     None,\n                 );\n \n-                let filename = i.source.filename(self.ctx.sess());\n+                let filename = i.span.filename(self.ctx.sess());\n                 let has_doc_example = tests.found_tests != 0;\n                 let hir_id = self.ctx.tcx.hir().local_def_id_to_hir_id(i.def_id.expect_local());\n                 let (level, source) = self.ctx.tcx.lint_level_at_node(MISSING_DOCS, hir_id);"}, {"sha": "f98f524ca4072547e84ee19a12212c9340ce0dac", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                 // We couldn't calculate the span of the markdown block that had the error, so our\n                 // diagnostics are going to be a bit lacking.\n                 let mut diag = self.cx.sess().struct_span_warn(\n-                    super::span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n+                    super::span_of_attrs(&item.attrs).unwrap_or(item.span.inner()),\n                     \"doc comment contains an invalid Rust code block\",\n                 );\n \n@@ -110,7 +110,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n impl<'a, 'tcx> DocFolder for SyntaxChecker<'a, 'tcx> {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n         if let Some(dox) = &item.attrs.collapsed_doc_value() {\n-            let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n+            let sp = span_of_attrs(&item.attrs).unwrap_or(item.span.inner());\n             let extra = crate::html::markdown::ExtraInfo::new_did(self.cx.tcx, item.def_id, sp);\n             for code_block in markdown::rust_code_blocks(&dox, &extra) {\n                 self.check_rust_syntax(&item, &dox, code_block);"}, {"sha": "499931f7e963197989e58a21d5e100cee10b296f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -1226,9 +1226,7 @@ impl LinkCollector<'_, '_> {\n                             &ori_link.range,\n                             &item.attrs,\n                         )\n-                        .unwrap_or_else(|| {\n-                            span_of_attrs(&item.attrs).unwrap_or(item.source.span())\n-                        });\n+                        .unwrap_or_else(|| span_of_attrs(&item.attrs).unwrap_or(item.span.inner()));\n \n                         rustc_session::parse::feature_err(\n                             &self.cx.tcx.sess.parse_sess,\n@@ -1693,7 +1691,7 @@ fn report_diagnostic(\n     };\n \n     let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n+    let sp = span_of_attrs(attrs).unwrap_or(item.span.inner());\n \n     tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n         let mut diag = lint.build(msg);"}, {"sha": "b36358489900ed6f2a3b9de2d9189f8cc4e2bd3f", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -97,7 +97,7 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     if tests.found_tests == 0 && cx.tcx.sess.is_nightly_build() {\n         if should_have_doc_example(cx, &item) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n-            let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n+            let sp = span_of_attrs(&item.attrs).unwrap_or(item.span.inner());\n             cx.tcx.struct_span_lint_hir(\n                 crate::lint::MISSING_DOC_CODE_EXAMPLES,\n                 hir_id,\n@@ -109,7 +109,7 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n         cx.tcx.struct_span_lint_hir(\n             crate::lint::PRIVATE_DOC_TESTS,\n             hir_id,\n-            span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n+            span_of_attrs(&item.attrs).unwrap_or(item.span.inner()),\n             |lint| lint.build(\"documentation test in private item\").emit(),\n         );\n     }"}, {"sha": "881feb0d87a47304defe03598a15a48612f98e8d", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n                 let sp = match super::source_span_for_markdown_range(tcx, &dox, range, &item.attrs)\n                 {\n                     Some(sp) => sp,\n-                    None => span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n+                    None => span_of_attrs(&item.attrs).unwrap_or(item.span.inner()),\n                 };\n                 tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n                     lint.build(msg).emit()"}, {"sha": "9761a78577deab9191ebc58f817c465bd714a2fc", "filename": "src/librustdoc/passes/non_autolinks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'tcx> DocFolder for NonAutolinksLinter<'a, 'tcx> {\n             let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n                 let sp = super::source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)\n                     .or_else(|| span_of_attrs(&item.attrs))\n-                    .unwrap_or(item.source.span());\n+                    .unwrap_or(item.span.inner());\n                 cx.tcx.struct_span_lint_hir(crate::lint::NON_AUTOLINKS, hir_id, sp, |lint| {\n                     lint.build(msg)\n                         .span_suggestion("}, {"sha": "72a4d9a18301139ae16af1287c6a7a5772e31203", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -64,7 +64,7 @@ pub struct Item {\n     pub name: Option<String>,\n     /// The source location of this item (absent if it came from a macro expansion or inline\n     /// assembly).\n-    pub source: Option<Span>,\n+    pub span: Option<Span>,\n     /// By default all documented items are public, but you can tell rustdoc to output private items\n     /// so this field is needed to differentiate.\n     pub visibility: Visibility,\n@@ -461,7 +461,7 @@ pub struct Impl {\n #[serde(rename_all = \"snake_case\")]\n pub struct Import {\n     /// The full path being imported.\n-    pub span: String,\n+    pub source: String,\n     /// May be different from the last segment of `source` when renaming imports:\n     /// `use source as name;`\n     pub name: String,"}, {"sha": "b0e717d8a86ba11ee32825edbf9c417d390d799b", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -24,7 +24,7 @@ pub mod l1 {\n         // @has - \"$.index[*][?(@.name=='l3')].inner.items[*]\" $l4_id\n         pub struct L4;\n     }\n-    // @is nested.json \"$.index[*][?(@.inner.span=='l3::L4')].kind\" \\\"import\\\"\n-    // @is - \"$.index[*][?(@.inner.span=='l3::L4')].inner.glob\" false\n+    // @is nested.json \"$.index[*][?(@.inner.source=='l3::L4')].kind\" \\\"import\\\"\n+    // @is - \"$.index[*][?(@.inner.source=='l3::L4')].inner.glob\" false\n     pub use l3::L4;\n }"}, {"sha": "2dd438d223058204cb4634dd4cf536b87abfda7f", "filename": "src/test/rustdoc-json/reexport/rename_public.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -13,5 +13,5 @@ pub mod inner {\n // @set import_id = - \"$.index[*][?(@.inner.name=='NewName')].id\"\n // @!has - \"$.index[*][?(@.inner.name=='Public')]\"\n // @has - \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $import_id\n-// @is - \"$.index[*][?(@.inner.name=='NewName')].inner.span\" \\\"inner::Public\\\"\n+// @is - \"$.index[*][?(@.inner.name=='NewName')].inner.source\" \\\"inner::Public\\\"\n pub use inner::Public as NewName;"}, {"sha": "2e4de301f6f118a9bfb584ad084536f0f3f356b8", "filename": "src/test/rustdoc-json/reexport/simple_public.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/673d0db5e393e9c64897005b470bfeb6d5aec61b/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs?ref=673d0db5e393e9c64897005b470bfeb6d5aec61b", "patch": "@@ -14,5 +14,5 @@ pub mod inner {\n \n // @set import_id = - \"$.index[*][?(@.inner.name=='Public')].id\"\n // @has - \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $import_id\n-// @is - \"$.index[*][?(@.inner.name=='Public')].inner.span\" \\\"inner::Public\\\"\n+// @is - \"$.index[*][?(@.inner.name=='Public')].inner.source\" \\\"inner::Public\\\"\n pub use inner::Public;"}]}