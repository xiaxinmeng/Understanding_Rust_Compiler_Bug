{"sha": "276b75a843af8822ffe4e395266d9445679a57a4", "node_id": "C_kwDOAAsO6NoAKDI3NmI3NWE4NDNhZjg4MjJmZmU0ZTM5NTI2NmQ5NDQ1Njc5YTU3YTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-04T11:44:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-04T11:44:02Z"}, "message": "Auto merge of #108732 - Dylan-DPC:rollup-dy1l8sx, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #108298 (Fix ICE: check if snippet is `)`)\n - #108405 (Lazily compute crate name for consider_optimizing)\n - #108656 (Rustdoc search: Emit an error for unclosed generic)\n - #108660 (Remove ne implementations from strings)\n - #108669 (Allow checking whether a type allows being uninitialized)\n - #108727 (rustc_expand: make proc-macro derive error translatable)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "73ab77cc1f2e9f7437fec769331f7b7d396310ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73ab77cc1f2e9f7437fec769331f7b7d396310ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/276b75a843af8822ffe4e395266d9445679a57a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/276b75a843af8822ffe4e395266d9445679a57a4", "html_url": "https://github.com/rust-lang/rust/commit/276b75a843af8822ffe4e395266d9445679a57a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/276b75a843af8822ffe4e395266d9445679a57a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01b7a6a9eac151f82831c402f91894552f5ca36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b7a6a9eac151f82831c402f91894552f5ca36d", "html_url": "https://github.com/rust-lang/rust/commit/01b7a6a9eac151f82831c402f91894552f5ca36d"}, {"sha": "0965c7e0a995d7313387f820f84c3f6d469df4a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0965c7e0a995d7313387f820f84c3f6d469df4a3", "html_url": "https://github.com/rust-lang/rust/commit/0965c7e0a995d7313387f820f84c3f6d469df4a3"}], "stats": {"total": 92, "additions": 73, "deletions": 19}, "files": [{"sha": "a29cdade0234304cca3376a37302e1a492259353", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -444,6 +444,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             \"aborted execution: attempted to leave type `{}` uninitialized, which is invalid\",\n                             ty\n                         ),\n+                        ValidityRequirement::Uninit => bug!(\"assert_uninit_valid doesn't exist\"),\n                     };\n \n                     M::abort(self, msg)?;"}, {"sha": "23fcd22c52b8e02b0868a0a33d9b8a4bfa0f5efe", "filename": "compiler/rustc_const_eval/src/util/check_validity_requirement.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -30,7 +30,7 @@ pub fn check_validity_requirement<'tcx>(\n         return Ok(!layout.abi.is_uninhabited());\n     }\n \n-    if tcx.sess.opts.unstable_opts.strict_init_checks {\n+    if kind == ValidityRequirement::Uninit || tcx.sess.opts.unstable_opts.strict_init_checks {\n         might_permit_raw_init_strict(layout, tcx, kind)\n     } else {\n         let layout_cx = LayoutCx { tcx, param_env: param_env_and_ty.param_env };\n@@ -99,6 +99,9 @@ fn might_permit_raw_init_lax<'tcx>(\n                 }\n                 s.valid_range(cx).contains(val)\n             }\n+            ValidityRequirement::Uninit => {\n+                bug!(\"ValidityRequirement::Uninit should have been handled above\")\n+            }\n         }\n     };\n "}, {"sha": "cfae781bdee5fea39d1b0b6f3c648b16e0b60a47", "filename": "compiler/rustc_expand/locales/en-US.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_expand%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_expand%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Flocales%2Fen-US.ftl?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -133,3 +133,6 @@ expand_trace_macro = trace_macro\n expand_proc_macro_panicked =\n     proc macro panicked\n     .help = message: {$message}\n+\n+expand_proc_macro_derive_tokens =\n+    proc-macro derive produced unparseable tokens"}, {"sha": "e5102a952e741db5d6deec231c1eb3532ad2f0cd", "filename": "compiler/rustc_expand/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -390,3 +390,10 @@ pub(crate) struct ProcMacroPanicked {\n pub(crate) struct ProcMacroPanickedHelp {\n     pub message: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(expand_proc_macro_derive_tokens)]\n+pub struct ProcMacroDeriveTokens {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "ddba14417195be0e349abf6f7094463ff20d560f", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -176,7 +176,7 @@ impl MultiItemModifier for DeriveProcMacro {\n \n         // fail if there have been errors emitted\n         if ecx.sess.parse_sess.span_diagnostic.err_count() > error_count_before {\n-            ecx.struct_span_err(span, \"proc-macro derive produced unparseable tokens\").emit();\n+            ecx.sess.emit_err(errors::ProcMacroDeriveTokens { span });\n         }\n \n         ExpandResult::Ready(items)"}, {"sha": "d9af2fd74cee5057ddb375ebb1786563f9f27592", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -794,8 +794,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {\n-        let cname = self.crate_name(LOCAL_CRATE);\n-        self.sess.consider_optimizing(cname.as_str(), msg)\n+        self.sess.consider_optimizing(|| self.crate_name(LOCAL_CRATE), msg)\n     }\n \n     /// Obtain all lang items of this crate and all dependencies (recursively)"}, {"sha": "254ffc33c96f0147b20c84335a067edc73ed4335", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -170,13 +170,17 @@ pub const FAT_PTR_EXTRA: usize = 1;\n /// * Cranelift stores the base-2 log of the lane count in a 4 bit integer.\n pub const MAX_SIMD_LANES: u64 = 1 << 0xF;\n \n-/// Used in `might_permit_raw_init` to indicate the kind of initialisation\n+/// Used in `check_validity_requirement` to indicate the kind of initialization\n /// that is checked to be valid\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n pub enum ValidityRequirement {\n     Inhabited,\n     Zero,\n+    /// The return value of mem::uninitialized, 0x01\n+    /// (unless -Zstrict-init-checks is on, in which case it's the same as Uninit).\n     UninitMitigated0x01Fill,\n+    /// True uninitialized memory.\n+    Uninit,\n }\n \n impl ValidityRequirement {\n@@ -196,6 +200,7 @@ impl fmt::Display for ValidityRequirement {\n             Self::Inhabited => f.write_str(\"is inhabited\"),\n             Self::Zero => f.write_str(\"allows being left zeroed\"),\n             Self::UninitMitigated0x01Fill => f.write_str(\"allows being filled with 0x01\"),\n+            Self::Uninit => f.write_str(\"allows being left uninitialized\"),\n         }\n     }\n }"}, {"sha": "95a7ca80d5d738bb9caf1279b156209b6fa811a0", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -1210,8 +1210,13 @@ impl<'a> Parser<'a> {\n                         // `Enum::Foo { a: 3, b: 4 }` or `Enum::Foo(3, 4)`.\n                         self.restore_snapshot(snapshot);\n                         let close_paren = self.prev_token.span;\n-                        let span = lo.to(self.prev_token.span);\n-                        if !fields.is_empty() {\n+                        let span = lo.to(close_paren);\n+                        if !fields.is_empty() &&\n+                            // `token.kind` should not be compared here.\n+                            // This is because the `snapshot.token.kind` is treated as the same as\n+                            // that of the open delim in `TokenTreesReader::parse_token_tree`, even if they are different.\n+                            self.span_to_snippet(close_paren).map_or(false, |snippet| snippet == \")\")\n+                        {\n                             let mut replacement_err = errors::ParenthesesWithStructFields {\n                                 span,\n                                 r#type: path,"}, {"sha": "12634f67185fd94e200b3b2116279a4e5c905a33", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -882,10 +882,14 @@ impl Session {\n \n     /// We want to know if we're allowed to do an optimization for crate foo from -z fuel=foo=n.\n     /// This expends fuel if applicable, and records fuel if applicable.\n-    pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n+    pub fn consider_optimizing(\n+        &self,\n+        get_crate_name: impl Fn() -> Symbol,\n+        msg: impl Fn() -> String,\n+    ) -> bool {\n         let mut ret = true;\n         if let Some((ref c, _)) = self.opts.unstable_opts.fuel {\n-            if c == crate_name {\n+            if c == get_crate_name().as_str() {\n                 assert_eq!(self.threads(), 1);\n                 let mut fuel = self.optimization_fuel.lock();\n                 ret = fuel.remaining != 0;\n@@ -903,7 +907,7 @@ impl Session {\n             }\n         }\n         if let Some(ref c) = self.opts.unstable_opts.print_fuel {\n-            if c == crate_name {\n+            if c == get_crate_name().as_str() {\n                 assert_eq!(self.threads(), 1);\n                 self.print_fuel.fetch_add(1, SeqCst);\n             }"}, {"sha": "c7e7ed3e95e0282358297ecbeb10d5a371158024", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -2213,10 +2213,6 @@ impl PartialEq for String {\n     fn eq(&self, other: &String) -> bool {\n         PartialEq::eq(&self[..], &other[..])\n     }\n-    #[inline]\n-    fn ne(&self, other: &String) -> bool {\n-        PartialEq::ne(&self[..], &other[..])\n-    }\n }\n \n macro_rules! impl_eq {"}, {"sha": "68f62ce8be5f682d88905672c4eea0229b129540", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -28,10 +28,6 @@ impl PartialEq for str {\n     fn eq(&self, other: &str) -> bool {\n         self.as_bytes() == other.as_bytes()\n     }\n-    #[inline]\n-    fn ne(&self, other: &str) -> bool {\n-        !(*self).eq(other)\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "b98bced41261c2ca1dcc8fc79faa9bfb7da986a9", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -469,6 +469,15 @@ function initSearch(rawSearchIndex) {\n             }\n             const posBefore = parserState.pos;\n             getNextElem(query, parserState, elems, endChar === \">\");\n+            if (endChar !== \"\") {\n+                if (parserState.pos >= parserState.length) {\n+                    throw [\"Unclosed \", \"<\"];\n+                }\n+                const c2 = parserState.userQuery[parserState.pos];\n+                if (!isSeparatorCharacter(c2) && c2 !== endChar) {\n+                    throw [\"Expected \", endChar, \", found \", c2];\n+                }\n+            }\n             // This case can be encountered if `getNextElem` encountered a \"stop character\" right\n             // from the start. For example if you have `,,` or `<>`. In this case, we simply move up\n             // the current position to continue the parsing.\n@@ -477,7 +486,10 @@ function initSearch(rawSearchIndex) {\n             }\n             foundStopChar = false;\n         }\n-        // We are either at the end of the string or on the `endChar`` character, let's move forward\n+        if (parserState.pos >= parserState.length && endChar !== \"\") {\n+            throw [\"Unclosed \", \"<\"];\n+        }\n+        // We are either at the end of the string or on the `endChar` character, let's move forward\n         // in any case.\n         parserState.pos += 1;\n     }"}, {"sha": "98c6f27ca61b8983adab31e147465e0ca97d457c", "filename": "tests/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/tests%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/tests%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-errors.js?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -39,6 +39,7 @@ const QUERY = [\n     \"a!!\",\n     \"mod:a!\",\n     \"a!::a\",\n+    \"a<\",\n ];\n \n const PARSED = [\n@@ -402,4 +403,13 @@ const PARSED = [\n         userQuery: \"a!::a\",\n         error: 'Cannot have associated items in macros',\n     },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a<\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a<\",\n+        error: \"Unclosed `<`\",\n+    },\n ];"}, {"sha": "b80984fcdb0268256c00d293dbe846220a92d44a", "filename": "tests/ui/parser/issue-107705.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/tests%2Fui%2Fparser%2Fissue-107705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/tests%2Fui%2Fparser%2Fissue-107705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-107705.rs?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: -C debug-assertions\n+\n+fn f() {a(b:&, //~ ERROR this file contains an unclosed delimiter"}, {"sha": "d2d6134611863441d2ed22584f8dd309cef385f0", "filename": "tests/ui/parser/issue-107705.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/276b75a843af8822ffe4e395266d9445679a57a4/tests%2Fui%2Fparser%2Fissue-107705.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/276b75a843af8822ffe4e395266d9445679a57a4/tests%2Fui%2Fparser%2Fissue-107705.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-107705.stderr?ref=276b75a843af8822ffe4e395266d9445679a57a4", "patch": "@@ -0,0 +1,10 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-107705.rs:3:67\n+   |\n+LL | fn f() {a(b:&,\n+   |        - - unclosed delimiter                                     ^\n+   |        |\n+   |        unclosed delimiter\n+\n+error: aborting due to previous error\n+"}]}