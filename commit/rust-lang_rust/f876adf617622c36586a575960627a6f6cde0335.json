{"sha": "f876adf617622c36586a575960627a6f6cde0335", "node_id": "C_kwDOAAsO6NoAKGY4NzZhZGY2MTc2MjJjMzY1ODZhNTc1OTYwNjI3YTZmNmNkZTAzMzU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-26T13:37:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-26T13:37:41Z"}, "message": "Report flycheck errors via status", "tree": {"sha": "734a24733bd8490d8e176cf699740e584d2f23aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/734a24733bd8490d8e176cf699740e584d2f23aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f876adf617622c36586a575960627a6f6cde0335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f876adf617622c36586a575960627a6f6cde0335", "html_url": "https://github.com/rust-lang/rust/commit/f876adf617622c36586a575960627a6f6cde0335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f876adf617622c36586a575960627a6f6cde0335/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b59b110fc417ec90b7f24882a416dd8a8fe618", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b59b110fc417ec90b7f24882a416dd8a8fe618", "html_url": "https://github.com/rust-lang/rust/commit/a2b59b110fc417ec90b7f24882a416dd8a8fe618"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "b1d019cb113c7a37c249dd46c845749ba905bf0a", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f876adf617622c36586a575960627a6f6cde0335/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f876adf617622c36586a575960627a6f6cde0335/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=f876adf617622c36586a575960627a6f6cde0335", "patch": "@@ -734,7 +734,6 @@ impl fmt::Display for ConfigError {\n         write!(\n             f,\n             \"invalid config value{}:\\n{}\",\n-            self.errors.len(),\n             if self.errors.len() == 1 { \"\" } else { \"s\" },\n             errors\n         )"}, {"sha": "9f4dc4440202d191f428109aef60a3ccc46398f8", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f876adf617622c36586a575960627a6f6cde0335/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f876adf617622c36586a575960627a6f6cde0335/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=f876adf617622c36586a575960627a6f6cde0335", "patch": "@@ -75,6 +75,7 @@ pub(crate) struct GlobalState {\n     pub(crate) flycheck: Arc<[FlycheckHandle]>,\n     pub(crate) flycheck_sender: Sender<flycheck::Message>,\n     pub(crate) flycheck_receiver: Receiver<flycheck::Message>,\n+    pub(crate) last_flycheck_error: Option<String>,\n \n     // VFS\n     pub(crate) loader: Handle<Box<dyn vfs::loader::Handle>, Receiver<vfs::loader::Message>>,\n@@ -179,6 +180,7 @@ impl GlobalState {\n             flycheck: Arc::from(Vec::new()),\n             flycheck_sender,\n             flycheck_receiver,\n+            last_flycheck_error: None,\n \n             vfs: Arc::new(RwLock::new((vfs::Vfs::default(), IntMap::default()))),\n             vfs_config_version: 0,"}, {"sha": "7074ef018a13cf72a2aa9030bdb4d9f0469635aa", "filename": "crates/rust-analyzer/src/handlers/notification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f876adf617622c36586a575960627a6f6cde0335/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f876adf617622c36586a575960627a6f6cde0335/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs?ref=f876adf617622c36586a575960627a6f6cde0335", "patch": "@@ -169,7 +169,7 @@ pub(crate) fn handle_did_change_configuration(\n                         // Note that json can be null according to the spec if the client can't\n                         // provide a configuration. This is handled in Config::update below.\n                         let mut config = Config::clone(&*this.config);\n-                        config.update(json.take());\n+                        this.config_errors = config.update(json.take()).err();\n                         this.update_configuration(config);\n                     }\n                 }"}, {"sha": "16d683957f04131b7fbc820b70f9dba0534cccba", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f876adf617622c36586a575960627a6f6cde0335/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f876adf617622c36586a575960627a6f6cde0335/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f876adf617622c36586a575960627a6f6cde0335", "patch": "@@ -602,21 +602,18 @@ impl GlobalState {\n                         (Progress::Begin, None)\n                     }\n                     flycheck::Progress::DidCheckCrate(target) => (Progress::Report, Some(target)),\n-                    flycheck::Progress::DidCancel => (Progress::End, None),\n+                    flycheck::Progress::DidCancel => {\n+                        self.last_flycheck_error = None;\n+                        (Progress::End, None)\n+                    }\n                     flycheck::Progress::DidFailToRestart(err) => {\n-                        self.show_and_log_error(\n-                            \"cargo check failed to start\".to_string(),\n-                            Some(err),\n-                        );\n+                        self.last_flycheck_error =\n+                            Some(format!(\"cargo check failed to start: {err}\"));\n                         return;\n                     }\n                     flycheck::Progress::DidFinish(result) => {\n-                        if let Err(err) = result {\n-                            self.show_and_log_error(\n-                                \"cargo check failed\".to_string(),\n-                                Some(err.to_string()),\n-                            );\n-                        }\n+                        self.last_flycheck_error =\n+                            result.err().map(|err| format!(\"cargo check failed to start: {err}\"));\n                         (Progress::End, None)\n                     }\n                 };"}, {"sha": "4e29485573822fa05cbe828f6f959661e4b19c7b", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f876adf617622c36586a575960627a6f6cde0335/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f876adf617622c36586a575960627a6f6cde0335/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=f876adf617622c36586a575960627a6f6cde0335", "patch": "@@ -139,6 +139,11 @@ impl GlobalState {\n             status.health = lsp_ext::Health::Warning;\n             format_to!(message, \"{err}\\n\");\n         }\n+        if let Some(err) = &self.last_flycheck_error {\n+            status.health = lsp_ext::Health::Warning;\n+            message.push_str(err);\n+            message.push('\\n');\n+        }\n \n         for ws in self.workspaces.iter() {\n             let (ProjectWorkspace::Cargo { sysroot, .. }"}]}