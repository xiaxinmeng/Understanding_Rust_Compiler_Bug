{"sha": "61b810511c380c03b5f1e1b7325eb6cbfef6c29f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYjgxMDUxMWMzODBjMDNiNWYxZTFiNzMyNWViNmNiZmVmNmMyOWY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-27T21:28:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-27T21:28:42Z"}, "message": "Rollup merge of #66722 - matthewjasper:non_exhaustive_borrowck, r=varkor\n\nHandle non_exhaustive in borrow checking\n\nBorrow check can tell whether a pattern is exhaustive or not, make sure that `non_exhaustive` prevents this.", "tree": {"sha": "d18a2d6fd119060e775e0e1afee2b07a53b77b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d18a2d6fd119060e775e0e1afee2b07a53b77b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61b810511c380c03b5f1e1b7325eb6cbfef6c29f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3uqKCRBK7hj4Ov3rIwAAdHIIAFLIEzry7fcs+dxtNCKAvYBY\nV8ZmEq2rBUWPb1d89bOpXI9ddLdx5lbuHZrRz8EB+4XJMWRLJ+cEd0wiNoCoQaQ0\nMyYtM2V/JR3MW+3kJKLnUHaSBV1Sjc3gt8NZyCdy0iOcXb0/Tbvlk8X1sQu+s+Bh\nmgw2TNG4XIlUodQY432kVEIhY2IB59liCHUyPG8cMwrllAvVt2E9AeKFXMGuwQ5W\nsjKTs3bGqYJI/L1kR0fGAtbqycJjP2CB/hxs5CR/cfpKKpLe7wCBMJ/ABQHTOoJP\nN9oBuAcVPuuQoQZILQM4yptDqr6gTzpmNG5F/+QtZ8mmZoSreWkZ0tuUjVBJTmY=\n=nOrB\n-----END PGP SIGNATURE-----\n", "payload": "tree d18a2d6fd119060e775e0e1afee2b07a53b77b6b\nparent 71f20b89ef71ab5abee867782247d82814e1be04\nparent 294f7e479019d574dc4083cc9603e92957cc6368\nauthor Tyler Mandry <tmandry@gmail.com> 1574890122 -0600\ncommitter GitHub <noreply@github.com> 1574890122 -0600\n\nRollup merge of #66722 - matthewjasper:non_exhaustive_borrowck, r=varkor\n\nHandle non_exhaustive in borrow checking\n\nBorrow check can tell whether a pattern is exhaustive or not, make sure that `non_exhaustive` prevents this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61b810511c380c03b5f1e1b7325eb6cbfef6c29f", "html_url": "https://github.com/rust-lang/rust/commit/61b810511c380c03b5f1e1b7325eb6cbfef6c29f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61b810511c380c03b5f1e1b7325eb6cbfef6c29f/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f20b89ef71ab5abee867782247d82814e1be04", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f20b89ef71ab5abee867782247d82814e1be04", "html_url": "https://github.com/rust-lang/rust/commit/71f20b89ef71ab5abee867782247d82814e1be04"}, {"sha": "294f7e479019d574dc4083cc9603e92957cc6368", "url": "https://api.github.com/repos/rust-lang/rust/commits/294f7e479019d574dc4083cc9603e92957cc6368", "html_url": "https://github.com/rust-lang/rust/commit/294f7e479019d574dc4083cc9603e92957cc6368"}], "stats": {"total": 85, "additions": 84, "deletions": 1}, "files": [{"sha": "3e71b871801d1d21a79ccf2d705e27a034cc5b36", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61b810511c380c03b5f1e1b7325eb6cbfef6c29f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b810511c380c03b5f1e1b7325eb6cbfef6c29f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=61b810511c380c03b5f1e1b7325eb6cbfef6c29f", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         self.hir.tcx().features().exhaustive_patterns &&\n                         !v.uninhabited_from(self.hir.tcx(), substs, adt_def.adt_kind()).is_empty()\n                     }\n-                });\n+                }) && (adt_def.did.is_local() || !adt_def.is_variant_list_non_exhaustive());\n                 if irrefutable {\n                     let place = tcx.mk_place_downcast(match_pair.place, adt_def, variant_index);\n                     candidate.match_pairs.extend(self.field_match_pairs(place, subpatterns));"}, {"sha": "5f86db86d4477fab4b909c0945183c7f6d048aaa", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/monovariants.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61b810511c380c03b5f1e1b7325eb6cbfef6c29f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fmonovariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b810511c380c03b5f1e1b7325eb6cbfef6c29f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fmonovariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fmonovariants.rs?ref=61b810511c380c03b5f1e1b7325eb6cbfef6c29f", "patch": "@@ -0,0 +1,8 @@\n+#[non_exhaustive]\n+pub enum NonExhaustiveMonovariant {\n+    Variant(u32),\n+}\n+\n+pub enum ExhaustiveMonovariant {\n+    Variant(u32),\n+}"}, {"sha": "be775b37f7b779ddf7abfcc8fcb225ed2865de7d", "filename": "src/test/ui/rfc-2008-non-exhaustive/borrowck-exhaustive.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/61b810511c380c03b5f1e1b7325eb6cbfef6c29f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b810511c380c03b5f1e1b7325eb6cbfef6c29f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs?ref=61b810511c380c03b5f1e1b7325eb6cbfef6c29f", "patch": "@@ -0,0 +1,42 @@\n+// Test that the borrow checker doesn't consider checking an exhaustive pattern\n+// as an access.\n+\n+// check-pass\n+\n+// aux-build:monovariants.rs\n+extern crate monovariants;\n+\n+use monovariants::ExhaustiveMonovariant;\n+\n+enum Local {\n+    Variant(u32),\n+}\n+\n+#[non_exhaustive]\n+enum LocalNonExhaustive {\n+    Variant(u32),\n+}\n+\n+fn main() {\n+    let mut x = ExhaustiveMonovariant::Variant(1);\n+    let y = &mut x;\n+    match x {\n+        ExhaustiveMonovariant::Variant(_) => {},\n+        _ => {},\n+    }\n+    drop(y);\n+    let mut x = Local::Variant(1);\n+    let y = &mut x;\n+    match x {\n+        Local::Variant(_) => {},\n+        _ => {},\n+    }\n+    drop(y);\n+    let mut x = LocalNonExhaustive::Variant(1);\n+    let y = &mut x;\n+    match x {\n+        LocalNonExhaustive::Variant(_) => {},\n+        _ => {},\n+    }\n+    drop(y);\n+}"}, {"sha": "00dcf89c7aa674a2d3a2b1c416e870980b30150f", "filename": "src/test/ui/rfc-2008-non-exhaustive/borrowck-non-exhaustive.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/61b810511c380c03b5f1e1b7325eb6cbfef6c29f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b810511c380c03b5f1e1b7325eb6cbfef6c29f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.rs?ref=61b810511c380c03b5f1e1b7325eb6cbfef6c29f", "patch": "@@ -0,0 +1,18 @@\n+// Test that the borrow checker considers `#[non_exhaustive]` when checking\n+// whether a match contains a discriminant read.\n+\n+// aux-build:monovariants.rs\n+extern crate monovariants;\n+\n+use monovariants::NonExhaustiveMonovariant;\n+\n+fn main() {\n+    let mut x = NonExhaustiveMonovariant::Variant(1);\n+    let y = &mut x;\n+    match x {\n+        NonExhaustiveMonovariant::Variant(_) => {},\n+        //~^ ERROR cannot use `x` because it was mutably borrowed\n+        _ => {},\n+    }\n+    drop(y);\n+}"}, {"sha": "9edfa84cbc0852c4854e1cf08f1777c33a0efc68", "filename": "src/test/ui/rfc-2008-non-exhaustive/borrowck-non-exhaustive.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/61b810511c380c03b5f1e1b7325eb6cbfef6c29f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61b810511c380c03b5f1e1b7325eb6cbfef6c29f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr?ref=61b810511c380c03b5f1e1b7325eb6cbfef6c29f", "patch": "@@ -0,0 +1,15 @@\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/borrowck-non-exhaustive.rs:13:9\n+   |\n+LL |     let y = &mut x;\n+   |             ------ borrow of `x` occurs here\n+LL |     match x {\n+LL |         NonExhaustiveMonovariant::Variant(_) => {},\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of borrowed `x`\n+...\n+LL |     drop(y);\n+   |          - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0503`."}]}