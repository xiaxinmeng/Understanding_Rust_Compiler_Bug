{"sha": "2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e", "node_id": "C_kwDOAAsO6NoAKDJiMjBhMDVmYzZjZGQ2MjIzNzkzYmZmZTQ5OGUxYjFmYjJlNWIwOWU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-05-03T15:41:33Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-05-03T15:57:39Z"}, "message": "Add \"Sort items by trait definition\"", "tree": {"sha": "2063b23475b5aa316fd70648689c5376ccb020ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2063b23475b5aa316fd70648689c5376ccb020ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e", "html_url": "https://github.com/rust-lang/rust/commit/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7ed3515730ef9a0c58af0af23a044c1d92bc87a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ed3515730ef9a0c58af0af23a044c1d92bc87a", "html_url": "https://github.com/rust-lang/rust/commit/d7ed3515730ef9a0c58af0af23a044c1d92bc87a"}], "stats": {"total": 307, "additions": 307, "deletions": 0}, "files": [{"sha": "87bee6c1215851c27a8641f7e998da143331007f", "filename": "crates/ide-assists/src/handlers/reorder_impl_items.rs", "status": "added", "additions": 270, "deletions": 0, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl_items.rs?ref=2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e", "patch": "@@ -0,0 +1,270 @@\n+use hir::{PathResolution, Semantics};\n+use ide_db::{FxHashMap, RootDatabase};\n+use itertools::Itertools;\n+use syntax::{\n+    ast::{self, HasName},\n+    ted, AstNode,\n+};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: reorder_impl_items\n+//\n+// Reorder the items of an `impl Trait`. The items will be ordered\n+// in the same order as in the trait definition.\n+//\n+// ```\n+// trait Foo {\n+//     type A;\n+//     const B: u8;\n+//     fn c();\n+// }\n+//\n+// struct Bar;\n+// $0impl Foo for Bar {\n+//     const B: u8 = 17;\n+//     fn c() {}\n+//     type A = String;\n+// }\n+// ```\n+// ->\n+// ```\n+// trait Foo {\n+//     type A;\n+//     const B: u8;\n+//     fn c();\n+// }\n+//\n+// struct Bar;\n+// impl Foo for Bar {\n+//     type A = String;\n+//     const B: u8 = 17;\n+//     fn c() {}\n+// }\n+// ```\n+pub(crate) fn reorder_impl_items(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let impl_ast = ctx.find_node_at_offset::<ast::Impl>()?;\n+    let items = impl_ast.assoc_item_list()?;\n+    let assoc_items = items.assoc_items().collect::<Vec<_>>();\n+\n+    // If all items are either function or macro calls, then reorder_impl assist can be used\n+    if assoc_items.iter().all(|i| matches!(i, ast::AssocItem::Fn(_) | ast::AssocItem::MacroCall(_)))\n+    {\n+        cov_mark::hit!(not_applicable_if_all_functions);\n+        return None;\n+    }\n+\n+    let path = impl_ast\n+        .trait_()\n+        .and_then(|t| match t {\n+            ast::Type::PathType(path) => Some(path),\n+            _ => None,\n+        })?\n+        .path()?;\n+\n+    let ranks = compute_item_ranks(&path, ctx)?;\n+    let sorted: Vec<_> = assoc_items\n+        .iter()\n+        .cloned()\n+        .sorted_by_key(|i| {\n+            let name = match i {\n+                ast::AssocItem::Const(c) => c.name(),\n+                ast::AssocItem::Fn(f) => f.name(),\n+                ast::AssocItem::TypeAlias(t) => t.name(),\n+                ast::AssocItem::MacroCall(_) => None,\n+            };\n+\n+            name.and_then(|n| ranks.get(&n.to_string()).copied()).unwrap_or(usize::max_value())\n+        })\n+        .collect();\n+\n+    // Don't edit already sorted methods:\n+    if assoc_items == sorted {\n+        cov_mark::hit!(not_applicable_if_sorted);\n+        return None;\n+    }\n+\n+    let target = items.syntax().text_range();\n+    acc.add(\n+        AssistId(\"reorder_impl_items\", AssistKind::RefactorRewrite),\n+        \"Sort items by trait definition\",\n+        target,\n+        |builder| {\n+            let assoc_items =\n+                assoc_items.into_iter().map(|item| builder.make_mut(item)).collect::<Vec<_>>();\n+            assoc_items\n+                .into_iter()\n+                .zip(sorted)\n+                .for_each(|(old, new)| ted::replace(old.syntax(), new.clone_for_update().syntax()));\n+        },\n+    )\n+}\n+\n+fn compute_item_ranks(path: &ast::Path, ctx: &AssistContext) -> Option<FxHashMap<String, usize>> {\n+    let td = trait_definition(path, &ctx.sema)?;\n+\n+    Some(\n+        td.items(ctx.db())\n+            .iter()\n+            .flat_map(|i| i.name(ctx.db()))\n+            .enumerate()\n+            .map(|(idx, name)| (name.to_string(), idx))\n+            .collect(),\n+    )\n+}\n+\n+fn trait_definition(path: &ast::Path, sema: &Semantics<RootDatabase>) -> Option<hir::Trait> {\n+    match sema.resolve_path(path)? {\n+        PathResolution::Def(hir::ModuleDef::Trait(trait_)) => Some(trait_),\n+        _ => None,\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn not_applicable_if_sorted() {\n+        cov_mark::check!(not_applicable_if_sorted);\n+        check_assist_not_applicable(\n+            reorder_impl_items,\n+            r#\"\n+trait Bar {\n+    type T;\n+    const C: ();\n+    fn a() {}\n+    fn z() {}\n+    fn b() {}\n+}\n+struct Foo;\n+$0impl Bar for Foo {\n+    type T = ();\n+    const C: () = ();\n+    fn a() {}\n+    fn z() {}\n+    fn b() {}\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_all_functions() {\n+        cov_mark::check!(not_applicable_if_all_functions);\n+        check_assist_not_applicable(\n+            reorder_impl_items,\n+            r#\"\n+trait Bar {\n+    fn a() {}\n+    fn z() {}\n+    fn b() {}\n+}\n+struct Foo;\n+$0impl Bar for Foo {\n+    fn a() {}\n+    fn z() {}\n+    fn b() {}\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_empty() {\n+        check_assist_not_applicable(\n+            reorder_impl_items,\n+            r#\"\n+trait Bar {};\n+struct Foo;\n+$0impl Bar for Foo {}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn reorder_impl_trait_items() {\n+        check_assist(\n+            reorder_impl_items,\n+            r#\"\n+trait Bar {\n+    fn a() {}\n+    type T0;\n+    fn c() {}\n+    const C1: ();\n+    fn b() {}\n+    type T1;\n+    fn d() {}\n+    const C0: ();\n+}\n+\n+struct Foo;\n+$0impl Bar for Foo {\n+    type T1 = ();\n+    fn d() {}\n+    fn b() {}\n+    fn c() {}\n+    const C1: () = ();\n+    fn a() {}\n+    type T0 = ();\n+    const C0: () = ();\n+}\n+        \"#,\n+            r#\"\n+trait Bar {\n+    fn a() {}\n+    type T0;\n+    fn c() {}\n+    const C1: ();\n+    fn b() {}\n+    type T1;\n+    fn d() {}\n+    const C0: ();\n+}\n+\n+struct Foo;\n+impl Bar for Foo {\n+    fn a() {}\n+    type T0 = ();\n+    fn c() {}\n+    const C1: () = ();\n+    fn b() {}\n+    type T1 = ();\n+    fn d() {}\n+    const C0: () = ();\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn reorder_impl_trait_items_uneven_ident_lengths() {\n+        check_assist(\n+            reorder_impl_items,\n+            r#\"\n+trait Bar {\n+    type Foo;\n+    type Fooo;\n+}\n+\n+struct Foo;\n+impl Bar for Foo {\n+    type Fooo = ();\n+    type Foo = ();$0\n+}\"#,\n+            r#\"\n+trait Bar {\n+    type Foo;\n+    type Fooo;\n+}\n+\n+struct Foo;\n+impl Bar for Foo {\n+    type Foo = ();\n+    type Fooo = ();\n+}\"#,\n+        )\n+    }\n+}"}, {"sha": "7b2f733567c854e3ad58ddec70c78d613a0d8ed8", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e", "patch": "@@ -170,6 +170,7 @@ mod handlers {\n     mod remove_unused_param;\n     mod reorder_fields;\n     mod reorder_impl;\n+    mod reorder_impl_items;\n     mod replace_try_expr_with_match;\n     mod replace_derive_with_manual_impl;\n     mod replace_if_let_with_match;\n@@ -257,6 +258,7 @@ mod handlers {\n             remove_unused_param::remove_unused_param,\n             reorder_fields::reorder_fields,\n             reorder_impl::reorder_impl,\n+            reorder_impl_items::reorder_impl_items,\n             replace_try_expr_with_match::replace_try_expr_with_match,\n             replace_derive_with_manual_impl::replace_derive_with_manual_impl,\n             replace_if_let_with_match::replace_if_let_with_match,"}, {"sha": "b629364b880aa7ff8d15688a2d1c670a8aaccfe8", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e", "patch": "@@ -1771,6 +1771,41 @@ impl Foo for Bar {\n     )\n }\n \n+#[test]\n+fn doctest_reorder_impl_items() {\n+    check_doc_test(\n+        \"reorder_impl_items\",\n+        r#####\"\n+trait Foo {\n+    type A;\n+    const B: u8;\n+    fn c();\n+}\n+\n+struct Bar;\n+$0impl Foo for Bar {\n+    const B: u8 = 17;\n+    fn c() {}\n+    type A = String;\n+}\n+\"#####,\n+        r#####\"\n+trait Foo {\n+    type A;\n+    const B: u8;\n+    fn c();\n+}\n+\n+struct Bar;\n+impl Foo for Bar {\n+    type A = String;\n+    const B: u8 = 17;\n+    fn c() {}\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_char_with_string() {\n     check_doc_test("}]}