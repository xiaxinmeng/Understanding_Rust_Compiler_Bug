{"sha": "bfecb18771aa0249efe05dd7c35fa232f180bb70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZWNiMTg3NzFhYTAyNDllZmUwNWRkN2MzNWZhMjMyZjE4MGJiNzA=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-27T00:02:06Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-30T14:12:56Z"}, "message": "Fix some more clippy warnings", "tree": {"sha": "e7362add81a4839a9b4d30896210b30a58e9edff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7362add81a4839a9b4d30896210b30a58e9edff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfecb18771aa0249efe05dd7c35fa232f180bb70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfecb18771aa0249efe05dd7c35fa232f180bb70", "html_url": "https://github.com/rust-lang/rust/commit/bfecb18771aa0249efe05dd7c35fa232f180bb70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfecb18771aa0249efe05dd7c35fa232f180bb70/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388ef349043f20a1a8a3011eaf49dee220485e0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/388ef349043f20a1a8a3011eaf49dee220485e0a", "html_url": "https://github.com/rust-lang/rust/commit/388ef349043f20a1a8a3011eaf49dee220485e0a"}], "stats": {"total": 168, "additions": 71, "deletions": 97}, "files": [{"sha": "599599f415f1c9b988cf15b05ab71ddc80e2b33c", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -490,10 +490,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         let count = generics\n                             .params\n                             .iter()\n-                            .filter(|param| match param.kind {\n-                                ast::GenericParamKind::Lifetime { .. } => true,\n-                                _ => false,\n-                            })\n+                            .filter(|param| matches!(param.kind, ast::GenericParamKind::Lifetime { .. }))\n                             .count();\n                         self.lctx.type_def_lifetime_params.insert(def_id.to_def_id(), count);\n                     }"}, {"sha": "e1eed168b31bb94b8d8058aba22cb316f234d1c4", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -262,10 +262,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             self.lower_angle_bracketed_parameter_data(&Default::default(), param_mode, itctx)\n         };\n \n-        let has_lifetimes = generic_args.args.iter().any(|arg| match arg {\n-            GenericArg::Lifetime(_) => true,\n-            _ => false,\n-        });\n+        let has_lifetimes =\n+            generic_args.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)));\n         let first_generic_span = generic_args\n             .args\n             .iter()"}, {"sha": "eb4aab116f00f7218d031466934bdbe058914e2a", "filename": "compiler/rustc_expand/src/mbe.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -102,10 +102,7 @@ impl TokenTree {\n \n     /// Returns `true` if the given token tree is delimited.\n     fn is_delimited(&self) -> bool {\n-        match *self {\n-            TokenTree::Delimited(..) => true,\n-            _ => false,\n-        }\n+        matches!(*self, TokenTree::Delimited(..))\n     }\n \n     /// Returns `true` if the given token tree is a token of the given kind."}, {"sha": "91add4f921844c13b22447b5da74d994eb5c5240", "filename": "compiler/rustc_expand/src/mbe/macro_check.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -134,10 +134,7 @@ enum Stack<'a, T> {\n impl<'a, T> Stack<'a, T> {\n     /// Returns whether a stack is empty.\n     fn is_empty(&self) -> bool {\n-        match *self {\n-            Stack::Empty => true,\n-            _ => false,\n-        }\n+        matches!(*self, Stack::Empty)\n     }\n \n     /// Returns a new stack with an element of top."}, {"sha": "a074af0189a280d65ad073ba5f56505a4a45141a", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -1036,17 +1036,16 @@ fn token_can_be_followed_by_any(tok: &mbe::TokenTree) -> bool {\n /// a fragment specifier (indeed, these fragments can be followed by\n /// ANYTHING without fear of future compatibility hazards).\n fn frag_can_be_followed_by_any(kind: NonterminalKind) -> bool {\n-    match kind {\n+    matches!(\n+        kind,\n         NonterminalKind::Item           // always terminated by `}` or `;`\n         | NonterminalKind::Block        // exactly one token tree\n         | NonterminalKind::Ident        // exactly one token tree\n         | NonterminalKind::Literal      // exactly one token tree\n         | NonterminalKind::Meta         // exactly one token tree\n         | NonterminalKind::Lifetime     // exactly one token tree\n-        | NonterminalKind::TT => true,  // exactly one token tree\n-\n-        _ => false,\n-    }\n+        | NonterminalKind::TT // exactly one token tree\n+    )\n }\n \n enum IsInFollow {"}, {"sha": "1bc14ae41bf29106372e22776ea96705ebff1983", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -345,10 +345,10 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n \n     fn visit_mod(&mut self, module: &mut ast::Mod) {\n         noop_visit_mod(module, self);\n-        module.items.retain(|item| match item.kind {\n-            ast::ItemKind::MacCall(_) if !self.cx.ecfg.keep_macs => false, // remove macro definitions\n-            _ => true,\n-        });\n+        // remove macro definitions\n+        module.items.retain(\n+            |item| !matches!(item.kind, ast::ItemKind::MacCall(_) if !self.cx.ecfg.keep_macs),\n+        );\n     }\n \n     fn visit_mac(&mut self, _mac: &mut ast::MacCall) {"}, {"sha": "7e029aa7a1928afc2be1ed84dcec1f78942fb294", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -1369,10 +1369,9 @@ impl TypeAliasBounds {\n             hir::QPath::TypeRelative(ref ty, _) => {\n                 // If this is a type variable, we found a `T::Assoc`.\n                 match ty.kind {\n-                    hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => match path.res {\n-                        Res::Def(DefKind::TyParam, _) => true,\n-                        _ => false,\n-                    },\n+                    hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => {\n+                        matches!(path.res, Res::Def(DefKind::TyParam, _))\n+                    }\n                     _ => false,\n                 }\n             }\n@@ -2381,10 +2380,9 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                         return Some(InitKind::Zeroed);\n                     } else if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, def_id) {\n                         return Some(InitKind::Uninit);\n-                    } else if cx.tcx.is_diagnostic_item(sym::transmute, def_id) {\n-                        if is_zero(&args[0]) {\n-                            return Some(InitKind::Zeroed);\n-                        }\n+                    } else if cx.tcx.is_diagnostic_item(sym::transmute, def_id) && is_zero(&args[0])\n+                    {\n+                        return Some(InitKind::Zeroed);\n                     }\n                 }\n             } else if let hir::ExprKind::MethodCall(_, _, ref args, _) = expr.kind {\n@@ -2880,7 +2878,7 @@ impl<'tcx> LateLintPass<'tcx> for ClashingExternDeclarations {\n     fn check_foreign_item(&mut self, cx: &LateContext<'tcx>, this_fi: &hir::ForeignItem<'_>) {\n         trace!(\"ClashingExternDeclarations: check_foreign_item: {:?}\", this_fi);\n         if let ForeignItemKind::Fn(..) = this_fi.kind {\n-            let tcx = *&cx.tcx;\n+            let tcx = cx.tcx;\n             if let Some(existing_hid) = self.insert(tcx, this_fi) {\n                 let existing_decl_ty = tcx.type_of(tcx.hir().local_def_id(existing_hid));\n                 let this_decl_ty = tcx.type_of(tcx.hir().local_def_id(this_fi.hir_id));"}, {"sha": "f117ce1f80544576f45b846492b6686980b69d1c", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -320,7 +320,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n                                             .with_hi(lit.span.hi() - BytePos(right as u32)),\n                                     )\n                                 })\n-                                .unwrap_or_else(|| lit.span);\n+                                .unwrap_or(lit.span);\n \n                             Some(Ident::new(name, sp))\n                         } else {"}, {"sha": "32611fef1faf0b570453287dcfd653578790f4ab", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -544,15 +544,15 @@ impl<'tcx> LateLintPass<'tcx> for TypeLimits {\n         }\n \n         fn is_comparison(binop: hir::BinOp) -> bool {\n-            match binop.node {\n+            matches!(\n+                binop.node,\n                 hir::BinOpKind::Eq\n-                | hir::BinOpKind::Lt\n-                | hir::BinOpKind::Le\n-                | hir::BinOpKind::Ne\n-                | hir::BinOpKind::Ge\n-                | hir::BinOpKind::Gt => true,\n-                _ => false,\n-            }\n+                    | hir::BinOpKind::Lt\n+                    | hir::BinOpKind::Le\n+                    | hir::BinOpKind::Ne\n+                    | hir::BinOpKind::Ge\n+                    | hir::BinOpKind::Gt\n+            )\n         }\n     }\n }\n@@ -1233,15 +1233,10 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n \n     fn is_internal_abi(&self, abi: SpecAbi) -> bool {\n-        if let SpecAbi::Rust\n-        | SpecAbi::RustCall\n-        | SpecAbi::RustIntrinsic\n-        | SpecAbi::PlatformIntrinsic = abi\n-        {\n-            true\n-        } else {\n-            false\n-        }\n+        matches!(\n+            abi,\n+            SpecAbi::Rust | SpecAbi::RustCall | SpecAbi::RustIntrinsic | SpecAbi::PlatformIntrinsic\n+        )\n     }\n }\n "}, {"sha": "4bbc180b226a59ed104dc31f4f7f37f4f6498ed3", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -752,14 +752,11 @@ impl UnusedDelimLint for UnusedParens {\n                     && value.attrs.is_empty()\n                     && !value.span.from_expansion()\n                     && (ctx != UnusedDelimsCtx::LetScrutineeExpr\n-                        || match inner.kind {\n-                            ast::ExprKind::Binary(\n+                        || !matches!(inner.kind, ast::ExprKind::Binary(\n                                 rustc_span::source_map::Spanned { node, .. },\n                                 _,\n                                 _,\n-                            ) if node.lazy() => false,\n-                            _ => true,\n-                        })\n+                            ) if node.lazy()))\n                 {\n                     self.emit_unused_delims_expr(cx, value, ctx, left_pos, right_pos)\n                 }"}, {"sha": "33cbf0fb2345e0f34771e662422602cda74b88a6", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -752,10 +752,7 @@ impl<'a> CrateLoader<'a> {\n         // At this point we've determined that we need an allocator. Let's see\n         // if our compilation session actually needs an allocator based on what\n         // we're emitting.\n-        let all_rlib = self.sess.crate_types().iter().all(|ct| match *ct {\n-            CrateType::Rlib => true,\n-            _ => false,\n-        });\n+        let all_rlib = self.sess.crate_types().iter().all(|ct| matches!(*ct, CrateType::Rlib));\n         if all_rlib {\n             return;\n         }"}, {"sha": "d16985b9c2b3fbc69ba3373dfc86edc3e2e2732e", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -633,11 +633,9 @@ impl<'a> CrateLocator<'a> {\n             }\n         }\n \n-        if self.exact_paths.is_empty() {\n-            if self.crate_name != root.name() {\n-                info!(\"Rejecting via crate name\");\n-                return None;\n-            }\n+        if self.exact_paths.is_empty() && self.crate_name != root.name() {\n+            info!(\"Rejecting via crate name\");\n+            return None;\n         }\n \n         if root.triple() != &self.triple {"}, {"sha": "b5fb850e92e6d4e76a27050485eec88459104725", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -220,10 +220,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     missing_lang_items => { cdata.get_missing_lang_items(tcx) }\n \n     missing_extern_crate_item => {\n-        let r = match *cdata.extern_crate.borrow() {\n-            Some(extern_crate) if !extern_crate.is_direct() => true,\n-            _ => false,\n-        };\n+        let r = matches!(*cdata.extern_crate.borrow(), Some(extern_crate) if !extern_crate.is_direct());\n         r\n     }\n \n@@ -254,9 +251,11 @@ pub fn provide(providers: &mut Providers) {\n             }\n             _ => false,\n         },\n-        is_statically_included_foreign_item: |tcx, id| match tcx.native_library_kind(id) {\n-            Some(NativeLibKind::StaticBundle | NativeLibKind::StaticNoBundle) => true,\n-            _ => false,\n+        is_statically_included_foreign_item: |tcx, id| {\n+            matches!(\n+                tcx.native_library_kind(id),\n+                Some(NativeLibKind::StaticBundle | NativeLibKind::StaticNoBundle)\n+            )\n         },\n         native_library_kind: |tcx, id| {\n             tcx.native_libraries(id.krate)"}, {"sha": "fb0b50d1c248a71835ea9c83bc8f9e1a315c554f", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -1219,9 +1219,11 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n                 .maybe_typeck_results\n                 .and_then(|typeck_results| typeck_results.type_dependent_def(id)),\n         };\n-        let def = def.filter(|(kind, _)| match kind {\n-            DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static => true,\n-            _ => false,\n+        let def = def.filter(|(kind, _)| {\n+            matches!(\n+                kind,\n+                DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static\n+            )\n         });\n         if let Some((kind, def_id)) = def {\n             let is_local_static ="}, {"sha": "e5ae899a2f356cec904c3f0a4a1a120e3c9bd938", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -342,29 +342,29 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 }\n                 (ty::Bool, Scalar(Bool)) => true,\n                 (ty::Char, Scalar(Char)) => true,\n-                (ty::Int(ty1), Scalar(Int(ty2))) => match (ty1, ty2) {\n+                (ty::Int(ty1), Scalar(Int(ty2))) => matches!(\n+                    (ty1, ty2),\n                     (ast::IntTy::Isize, chalk_ir::IntTy::Isize)\n-                    | (ast::IntTy::I8, chalk_ir::IntTy::I8)\n-                    | (ast::IntTy::I16, chalk_ir::IntTy::I16)\n-                    | (ast::IntTy::I32, chalk_ir::IntTy::I32)\n-                    | (ast::IntTy::I64, chalk_ir::IntTy::I64)\n-                    | (ast::IntTy::I128, chalk_ir::IntTy::I128) => true,\n-                    _ => false,\n-                },\n-                (ty::Uint(ty1), Scalar(Uint(ty2))) => match (ty1, ty2) {\n+                        | (ast::IntTy::I8, chalk_ir::IntTy::I8)\n+                        | (ast::IntTy::I16, chalk_ir::IntTy::I16)\n+                        | (ast::IntTy::I32, chalk_ir::IntTy::I32)\n+                        | (ast::IntTy::I64, chalk_ir::IntTy::I64)\n+                        | (ast::IntTy::I128, chalk_ir::IntTy::I128)\n+                ),\n+                (ty::Uint(ty1), Scalar(Uint(ty2))) => matches!(\n+                    (ty1, ty2),\n                     (ast::UintTy::Usize, chalk_ir::UintTy::Usize)\n-                    | (ast::UintTy::U8, chalk_ir::UintTy::U8)\n-                    | (ast::UintTy::U16, chalk_ir::UintTy::U16)\n-                    | (ast::UintTy::U32, chalk_ir::UintTy::U32)\n-                    | (ast::UintTy::U64, chalk_ir::UintTy::U64)\n-                    | (ast::UintTy::U128, chalk_ir::UintTy::U128) => true,\n-                    _ => false,\n-                },\n-                (ty::Float(ty1), Scalar(Float(ty2))) => match (ty1, ty2) {\n+                        | (ast::UintTy::U8, chalk_ir::UintTy::U8)\n+                        | (ast::UintTy::U16, chalk_ir::UintTy::U16)\n+                        | (ast::UintTy::U32, chalk_ir::UintTy::U32)\n+                        | (ast::UintTy::U64, chalk_ir::UintTy::U64)\n+                        | (ast::UintTy::U128, chalk_ir::UintTy::U128)\n+                ),\n+                (ty::Float(ty1), Scalar(Float(ty2))) => matches!(\n+                    (ty1, ty2),\n                     (ast::FloatTy::F32, chalk_ir::FloatTy::F32)\n-                    | (ast::FloatTy::F64, chalk_ir::FloatTy::F64) => true,\n-                    _ => false,\n-                },\n+                        | (ast::FloatTy::F64, chalk_ir::FloatTy::F64)\n+                ),\n                 (&ty::Tuple(..), Tuple(..)) => true,\n                 (&ty::Array(..), Array) => true,\n                 (&ty::Slice(..), Slice) => true,"}, {"sha": "c44fd1d58593f1060775914aa7e42d37a61445a5", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfecb18771aa0249efe05dd7c35fa232f180bb70/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=bfecb18771aa0249efe05dd7c35fa232f180bb70", "patch": "@@ -62,7 +62,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n         // unresolved inference variables here anyway, but there might be\n         // during typeck under some circumstances.)\n         let obligations = wf::obligations(infcx, param_env, hir::CRATE_HIR_ID, 0, arg, DUMMY_SP)\n-            .unwrap_or(vec![]);\n+            .unwrap_or_default();\n \n         // N.B., all of these predicates *ought* to be easily proven\n         // true. In fact, their correctness is (mostly) implied by"}]}