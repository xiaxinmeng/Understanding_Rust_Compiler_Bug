{"sha": "0bcfff48a532f1ab974dff495ce006ec0604300a", "node_id": "C_kwDOAAsO6NoAKDBiY2ZmZjQ4YTUzMmYxYWI5NzRkZmY0OTVjZTAwNmVjMDYwNDMwMGE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-18T20:57:16Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-01T15:45:28Z"}, "message": "Simplify type_parameter_bounds_in_generics", "tree": {"sha": "56aae510fa69255c197dcf763ee1e17de4d41b12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56aae510fa69255c197dcf763ee1e17de4d41b12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bcfff48a532f1ab974dff495ce006ec0604300a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcfff48a532f1ab974dff495ce006ec0604300a", "html_url": "https://github.com/rust-lang/rust/commit/0bcfff48a532f1ab974dff495ce006ec0604300a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bcfff48a532f1ab974dff495ce006ec0604300a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7d8c88b64843d05761576aa093a34a8bc176817", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d8c88b64843d05761576aa093a34a8bc176817", "html_url": "https://github.com/rust-lang/rust/commit/b7d8c88b64843d05761576aa093a34a8bc176817"}], "stats": {"total": 87, "additions": 34, "deletions": 53}, "files": [{"sha": "40c689537881ad660f50029fa2d7d7f75bc3dded", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0bcfff48a532f1ab974dff495ce006ec0604300a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcfff48a532f1ab974dff495ce006ec0604300a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=0bcfff48a532f1ab974dff495ce006ec0604300a", "patch": "@@ -1007,7 +1007,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         param_ty: Ty<'tcx>,\n         ast_bounds: &[hir::GenericBound<'_>],\n     ) -> Bounds<'tcx> {\n-        self.compute_bounds_inner(param_ty, ast_bounds)\n+        let mut bounds = Bounds::default();\n+        self.add_bounds(param_ty, ast_bounds.iter(), &mut bounds, ty::List::empty());\n+        debug!(?bounds);\n+\n+        bounds\n     }\n \n     /// Convert the bounds in `ast_bounds` that refer to traits which define an associated type\n@@ -1029,17 +1033,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n-        self.compute_bounds_inner(param_ty, &result)\n-    }\n-\n-    fn compute_bounds_inner(\n-        &self,\n-        param_ty: Ty<'tcx>,\n-        ast_bounds: &[hir::GenericBound<'_>],\n-    ) -> Bounds<'tcx> {\n         let mut bounds = Bounds::default();\n-\n-        self.add_bounds(param_ty, ast_bounds.iter(), &mut bounds, ty::List::empty());\n+        self.add_bounds(param_ty, result.iter(), &mut bounds, ty::List::empty());\n         debug!(?bounds);\n \n         bounds"}, {"sha": "935b561945ca2f0f84252e53d64c9c303e0f0782", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0bcfff48a532f1ab974dff495ce006ec0604300a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcfff48a532f1ab974dff495ce006ec0604300a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=0bcfff48a532f1ab974dff495ce006ec0604300a", "patch": "@@ -774,32 +774,34 @@ impl<'tcx> ItemCtxt<'tcx> {\n         only_self_bounds: OnlySelfBounds,\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-        ast_generics\n-            .predicates\n-            .iter()\n-            .filter_map(|wp| match wp {\n-                hir::WherePredicate::BoundPredicate(bp) => Some(bp),\n-                _ => None,\n-            })\n-            .flat_map(|bp| {\n-                let bt = if bp.is_param_bound(param_def_id.to_def_id()) {\n-                    Some(ty)\n-                } else if !only_self_bounds.0 {\n-                    Some(self.to_ty(bp.bounded_ty))\n-                } else {\n-                    None\n-                };\n-                let bvars = self.tcx.late_bound_vars(bp.hir_id);\n-\n-                bp.bounds.iter().filter_map(move |b| bt.map(|bt| (bt, b, bvars))).filter(\n-                    |(_, b, _)| match assoc_name {\n-                        Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n-                        None => true,\n-                    },\n-                )\n-            })\n-            .flat_map(|(bt, b, bvars)| predicates_from_bound(self, bt, b, bvars))\n-            .collect()\n+        let mut bounds = Bounds::default();\n+\n+        for predicate in ast_generics.predicates {\n+            let hir::WherePredicate::BoundPredicate(predicate) = predicate else {\n+                continue;\n+            };\n+\n+            let bound_ty = if predicate.is_param_bound(param_def_id.to_def_id()) {\n+                ty\n+            } else if !only_self_bounds.0 {\n+                self.to_ty(predicate.bounded_ty)\n+            } else {\n+                continue;\n+            };\n+\n+            let bound_vars = self.tcx.late_bound_vars(predicate.hir_id);\n+            self.astconv().add_bounds(\n+                bound_ty,\n+                predicate.bounds.iter().filter(|bound| {\n+                    assoc_name\n+                        .map_or(true, |assoc_name| self.bound_defines_assoc_item(bound, assoc_name))\n+                }),\n+                &mut bounds,\n+                bound_vars,\n+            );\n+        }\n+\n+        bounds.predicates().collect()\n     }\n \n     #[instrument(level = \"trace\", skip(self))]\n@@ -817,19 +819,3 @@ impl<'tcx> ItemCtxt<'tcx> {\n         }\n     }\n }\n-\n-/// Converts a specific `GenericBound` from the AST into a set of\n-/// predicates that apply to the self type. A vector is returned\n-/// because this can be anywhere from zero predicates (`T: ?Sized` adds no\n-/// predicates) to one (`T: Foo`) to many (`T: Bar<X = i32>` adds `T: Bar`\n-/// and `<T as Bar>::X == i32`).\n-fn predicates_from_bound<'tcx>(\n-    astconv: &dyn AstConv<'tcx>,\n-    param_ty: Ty<'tcx>,\n-    bound: &'tcx hir::GenericBound<'tcx>,\n-    bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n-) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-    let mut bounds = Bounds::default();\n-    astconv.add_bounds(param_ty, [bound].into_iter(), &mut bounds, bound_vars);\n-    bounds.predicates().collect()\n-}"}]}