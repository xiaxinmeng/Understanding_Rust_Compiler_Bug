{"sha": "50b00252aeb77b10db04d65dc9e12ce758def4b5", "node_id": "C_kwDOAAsO6NoAKDUwYjAwMjUyYWViNzdiMTBkYjA0ZDY1ZGM5ZTEyY2U3NThkZWY0YjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T19:40:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T19:40:54Z"}, "message": "Auto merge of #97730 - flip1995:clippyup, r=Manishearth\n\nUpdate Clippy\n\nr? `@Manishearth`\n\nThis includes a bit bigger `Cargo.lock` update.", "tree": {"sha": "de10e6eb92609d8467cfe5b36fce256d2eba48c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de10e6eb92609d8467cfe5b36fce256d2eba48c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50b00252aeb77b10db04d65dc9e12ce758def4b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50b00252aeb77b10db04d65dc9e12ce758def4b5", "html_url": "https://github.com/rust-lang/rust/commit/50b00252aeb77b10db04d65dc9e12ce758def4b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50b00252aeb77b10db04d65dc9e12ce758def4b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "357bc27904d4a99c83d4b01272c34e0e54934fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/357bc27904d4a99c83d4b01272c34e0e54934fa5", "html_url": "https://github.com/rust-lang/rust/commit/357bc27904d4a99c83d4b01272c34e0e54934fa5"}, {"sha": "9525e0cb97fec55ecb6985e818365c6a2a278ba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9525e0cb97fec55ecb6985e818365c6a2a278ba1", "html_url": "https://github.com/rust-lang/rust/commit/9525e0cb97fec55ecb6985e818365c6a2a278ba1"}], "stats": {"total": 10199, "additions": 7545, "deletions": 2654}, "files": [{"sha": "4a9b35fe4aba901bae84d1087add1525d85ecc70", "filename": "Cargo.lock", "status": "modified", "additions": 87, "deletions": 32, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -354,7 +354,7 @@ dependencies = [\n  \"percent-encoding 2.1.0\",\n  \"pretty_env_logger\",\n  \"rustc-workspace-hack\",\n- \"rustfix 0.6.0\",\n+ \"rustfix\",\n  \"semver\",\n  \"serde\",\n  \"serde_ignored\",\n@@ -638,7 +638,7 @@ dependencies = [\n  \"futures 0.3.19\",\n  \"if_chain\",\n  \"itertools\",\n- \"parking_lot\",\n+ \"parking_lot 0.12.1\",\n  \"quote\",\n  \"regex\",\n  \"rustc-semver\",\n@@ -658,7 +658,7 @@ name = \"clippy_dev\"\n version = \"0.0.1\"\n dependencies = [\n  \"aho-corasick\",\n- \"clap 2.34.0\",\n+ \"clap 3.1.1\",\n  \"indoc\",\n  \"itertools\",\n  \"opener\",\n@@ -767,7 +767,7 @@ dependencies = [\n  \"libc\",\n  \"miow\",\n  \"regex\",\n- \"rustfix 0.6.0\",\n+ \"rustfix\",\n  \"serde\",\n  \"serde_json\",\n  \"tracing\",\n@@ -779,9 +779,9 @@ dependencies = [\n \n [[package]]\n name = \"compiletest_rs\"\n-version = \"0.7.1\"\n+version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"29843cb8d351febf86557681d049d1e1652b81a086a190fa1173c07fd17fbf83\"\n+checksum = \"262134ef87408da1ddfe45e33daa0ca43b75286d6b1076446e602d264cf9847e\"\n dependencies = [\n  \"diff\",\n  \"filetime\",\n@@ -791,7 +791,7 @@ dependencies = [\n  \"log\",\n  \"miow\",\n  \"regex\",\n- \"rustfix 0.5.1\",\n+ \"rustfix\",\n  \"serde\",\n  \"serde_derive\",\n  \"serde_json\",\n@@ -2041,7 +2041,7 @@ dependencies = [\n  \"jsonrpc-server-utils\",\n  \"log\",\n  \"parity-tokio-ipc\",\n- \"parking_lot\",\n+ \"parking_lot 0.11.2\",\n  \"tower-service\",\n ]\n \n@@ -2055,7 +2055,7 @@ dependencies = [\n  \"jsonrpc-core\",\n  \"lazy_static\",\n  \"log\",\n- \"parking_lot\",\n+ \"parking_lot 0.11.2\",\n  \"rand 0.7.3\",\n  \"serde\",\n ]\n@@ -2203,10 +2203,11 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"lock_api\"\n-version = \"0.4.5\"\n+version = \"0.4.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"712a4d093c9976e24e7dbca41db895dabcbac38eb5f4045393d17a95bdfb1109\"\n+checksum = \"327fa5b6a6940e4699ec49a9beae1ea4845c6bab9314e4f84ac68742139d8c53\"\n dependencies = [\n+ \"autocfg\",\n  \"scopeguard\",\n ]\n \n@@ -2341,7 +2342,7 @@ checksum = \"78f7a41bc6f856a2cf0e95094ad5121f82500e2d9a0f3c0171d98f6566d8117d\"\n dependencies = [\n  \"log\",\n  \"memmap2\",\n- \"parking_lot\",\n+ \"parking_lot 0.11.2\",\n  \"perf-event-open-sys\",\n  \"rustc-hash\",\n  \"smallvec\",\n@@ -2355,7 +2356,7 @@ checksum = \"bd460fad6e55ca82fa0cd9dab0d315294188fd9ec6efbf4105e5635d4872ef9c\"\n dependencies = [\n  \"log\",\n  \"memmap2\",\n- \"parking_lot\",\n+ \"parking_lot 0.11.2\",\n  \"perf-event-open-sys\",\n  \"rustc-hash\",\n  \"smallvec\",\n@@ -2704,7 +2705,17 @@ checksum = \"7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99\"\n dependencies = [\n  \"instant\",\n  \"lock_api\",\n- \"parking_lot_core\",\n+ \"parking_lot_core 0.8.5\",\n+]\n+\n+[[package]]\n+name = \"parking_lot\"\n+version = \"0.12.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f\"\n+dependencies = [\n+ \"lock_api\",\n+ \"parking_lot_core 0.9.3\",\n ]\n \n [[package]]\n@@ -2721,6 +2732,19 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"parking_lot_core\"\n+version = \"0.9.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"09a279cbf25cb0757810394fbc1e359949b59e348145c643a939a525692e6929\"\n+dependencies = [\n+ \"cfg-if 1.0.0\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"smallvec\",\n+ \"windows-sys\",\n+]\n+\n [[package]]\n name = \"pathdiff\"\n version = \"0.2.1\"\n@@ -3732,7 +3756,7 @@ dependencies = [\n  \"libc\",\n  \"measureme 10.0.0\",\n  \"memmap2\",\n- \"parking_lot\",\n+ \"parking_lot 0.11.2\",\n  \"rustc-hash\",\n  \"rustc-rayon\",\n  \"rustc-rayon-core\",\n@@ -4316,7 +4340,7 @@ dependencies = [\n name = \"rustc_query_system\"\n version = \"0.0.0\"\n dependencies = [\n- \"parking_lot\",\n+ \"parking_lot 0.11.2\",\n  \"rustc-rayon-core\",\n  \"rustc_arena\",\n  \"rustc_ast\",\n@@ -4619,21 +4643,9 @@ dependencies = [\n \n [[package]]\n name = \"rustfix\"\n-version = \"0.5.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f2c50b74badcddeb8f7652fa8323ce440b95286f8e4b64ebfd871c609672704e\"\n-dependencies = [\n- \"anyhow\",\n- \"log\",\n- \"serde\",\n- \"serde_json\",\n-]\n-\n-[[package]]\n-name = \"rustfix\"\n-version = \"0.6.0\"\n+version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6f0be05fc0675ef4f47119dc39cfc46636bb77d4fc4ef1bd851b9c3f7697f32a\"\n+checksum = \"ecd2853d9e26988467753bd9912c3a126f642d05d229a4b53f5752ee36c56481\"\n dependencies = [\n  \"anyhow\",\n  \"log\",\n@@ -5023,7 +5035,7 @@ checksum = \"33994d0838dc2d152d17a62adf608a869b5e846b65b389af7f3dbc1de45c5b26\"\n dependencies = [\n  \"lazy_static\",\n  \"new_debug_unreachable\",\n- \"parking_lot\",\n+ \"parking_lot 0.11.2\",\n  \"phf_shared\",\n  \"precomputed-hash\",\n  \"serde\",\n@@ -5467,7 +5479,7 @@ dependencies = [\n  \"ansi_term\",\n  \"lazy_static\",\n  \"matchers\",\n- \"parking_lot\",\n+ \"parking_lot 0.11.2\",\n  \"regex\",\n  \"sharded-slab\",\n  \"smallvec\",\n@@ -5869,6 +5881,49 @@ version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \n+[[package]]\n+name = \"windows-sys\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ea04155a16a59f9eab786fe12a4a450e75cdb175f9e0d80da1e17db09f55b8d2\"\n+dependencies = [\n+ \"windows_aarch64_msvc\",\n+ \"windows_i686_gnu\",\n+ \"windows_i686_msvc\",\n+ \"windows_x86_64_gnu\",\n+ \"windows_x86_64_msvc\",\n+]\n+\n+[[package]]\n+name = \"windows_aarch64_msvc\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9bb8c3fd39ade2d67e9874ac4f3db21f0d710bee00fe7cab16949ec184eeaa47\"\n+\n+[[package]]\n+name = \"windows_i686_gnu\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"180e6ccf01daf4c426b846dfc66db1fc518f074baa793aa7d9b9aaeffad6a3b6\"\n+\n+[[package]]\n+name = \"windows_i686_msvc\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e2e7917148b2812d1eeafaeb22a97e4813dfa60a3f8f78ebe204bcc88f12f024\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnu\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4dcd171b8776c41b97521e5da127a2d86ad280114807d0b2ab1e462bc764d9e1\"\n+\n+[[package]]\n+name = \"windows_x86_64_msvc\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c811ca4a8c853ef420abd8592ba53ddbbac90410fab6903b3e79972a631f7680\"\n+\n [[package]]\n name = \"xattr\"\n version = \"0.2.2\""}, {"sha": "6ef338b819d4dfac1cae7808eaf237a238ed1482", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -3276,9 +3276,11 @@ Released 2018-09-13\n <!-- begin autogenerated links to lint list -->\n [`absurd_extreme_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n [`allow_attributes_without_reason`]: https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\n+[`almost_complete_letter_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_letter_range\n [`almost_swapped`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped\n [`approx_constant`]: https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n [`as_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions\n+[`as_underscore`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_underscore\n [`assertions_on_constants`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n [`assign_op_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern\n [`assign_ops`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_ops\n@@ -3296,6 +3298,7 @@ Released 2018-09-13\n [`bool_assert_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n [`borrow_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr\n+[`borrow_deref_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_deref_ref\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box\n [`box_collection`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_collection\n@@ -3362,6 +3365,7 @@ Released 2018-09-13\n [`disallowed_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_type\n [`disallowed_types`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_types\n [`diverging_sub_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n+[`doc_link_with_quotes`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_link_with_quotes\n [`doc_markdown`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown\n [`double_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_comparisons\n [`double_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_must_use\n@@ -3435,6 +3439,7 @@ Released 2018-09-13\n [`from_over_into`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n [`from_str_radix_10`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_str_radix_10\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n+[`get_first`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_first\n [`get_last_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len\n [`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap\n [`identity_conversion`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_conversion\n@@ -3556,6 +3561,7 @@ Released 2018-09-13\n [`min_max`]: https://rust-lang.github.io/rust-clippy/master/index.html#min_max\n [`misaligned_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#misaligned_transmute\n [`mismatched_target_os`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatched_target_os\n+[`mismatching_type_param_order`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatching_type_param_order\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n [`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n@@ -3613,6 +3619,7 @@ Released 2018-09-13\n [`new_without_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n [`new_without_default_derive`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default_derive\n [`no_effect`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect\n+[`no_effect_replace`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_replace\n [`no_effect_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n [`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n@@ -3729,7 +3736,6 @@ Released 2018-09-13\n [`skip_while_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#skip_while_next\n [`slow_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n [`stable_sort_primitive`]: https://rust-lang.github.io/rust-clippy/master/index.html#stable_sort_primitive\n-[`significant_drop_in_scrutinee`]: https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_in_scrutinee\n [`str_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\n [`string_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add\n [`string_add_assign`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add_assign\n@@ -3750,6 +3756,7 @@ Released 2018-09-13\n [`suspicious_operation_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_operation_groupings\n [`suspicious_splitn`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_splitn\n [`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n+[`swap_ptr_to_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#swap_ptr_to_ref\n [`tabs_in_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#tabs_in_doc_comments\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment\n [`temporary_cstring_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr\n@@ -3820,6 +3827,7 @@ Released 2018-09-13\n [`unused_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_collect\n [`unused_io_amount`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_io_amount\n [`unused_label`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_label\n+[`unused_rounding`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_rounding\n [`unused_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_self\n [`unused_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n [`unusual_byte_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#unusual_byte_groupings"}, {"sha": "3c8b758d53dca74843349e28b8460495d2f4c105", "filename": "src/tools/clippy/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCargo.toml?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -28,7 +28,7 @@ tempfile = { version = \"3.2\", optional = true }\n termize = \"0.1\"\n \n [dev-dependencies]\n-compiletest_rs = { version = \"0.7.1\", features = [\"tmp\"] }\n+compiletest_rs = { version = \"0.8\", features = [\"tmp\"] }\n tester = \"0.9\"\n regex = \"1.5\"\n # This is used by the `collect-metadata` alias.\n@@ -48,7 +48,7 @@ quote = \"1.0\"\n serde = { version = \"1.0.125\", features = [\"derive\"] }\n syn = { version = \"1.0\", features = [\"full\"] }\n futures = \"0.3\"\n-parking_lot = \"0.11.2\"\n+parking_lot = \"0.12\"\n tokio = { version = \"1\", features = [\"io-util\"] }\n rustc-semver = \"1.1\"\n "}, {"sha": "b0d470a2124d86be497b1e46b7a959de4a0ef69b", "filename": "src/tools/clippy/clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2FCargo.toml?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -5,7 +5,7 @@ edition = \"2021\"\n \n [dependencies]\n aho-corasick = \"0.7\"\n-clap = \"2.33\"\n+clap = \"3.1\"\n indoc = \"1.0\"\n itertools = \"0.10.1\"\n opener = \"0.5\""}, {"sha": "ee535b1d3be8bb17d2a2283539bdc8e102a9c9f4", "filename": "src/tools/clippy/clippy_dev/src/main.rs", "status": "modified", "additions": 70, "deletions": 86, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -2,20 +2,20 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n-use clap::{App, AppSettings, Arg, ArgMatches, SubCommand};\n+use clap::{Arg, ArgMatches, Command};\n use clippy_dev::{bless, fmt, lint, new_lint, serve, setup, update_lints};\n use indoc::indoc;\n fn main() {\n     let matches = get_clap_config();\n \n     match matches.subcommand() {\n-        (\"bless\", Some(matches)) => {\n+        Some((\"bless\", matches)) => {\n             bless::bless(matches.is_present(\"ignore-timestamp\"));\n         },\n-        (\"fmt\", Some(matches)) => {\n+        Some((\"fmt\", matches)) => {\n             fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n         },\n-        (\"update_lints\", Some(matches)) => {\n+        Some((\"update_lints\", matches)) => {\n             if matches.is_present(\"print-only\") {\n                 update_lints::print_lints();\n             } else if matches.is_present(\"check\") {\n@@ -24,7 +24,7 @@ fn main() {\n                 update_lints::update(update_lints::UpdateMode::Change);\n             }\n         },\n-        (\"new_lint\", Some(matches)) => {\n+        Some((\"new_lint\", matches)) => {\n             match new_lint::create(\n                 matches.value_of(\"pass\"),\n                 matches.value_of(\"name\"),\n@@ -35,8 +35,8 @@ fn main() {\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n             }\n         },\n-        (\"setup\", Some(sub_command)) => match sub_command.subcommand() {\n-            (\"intellij\", Some(matches)) => {\n+        Some((\"setup\", sub_command)) => match sub_command.subcommand() {\n+            Some((\"intellij\", matches)) => {\n                 if matches.is_present(\"remove\") {\n                     setup::intellij::remove_rustc_src();\n                 } else {\n@@ -47,14 +47,14 @@ fn main() {\n                     );\n                 }\n             },\n-            (\"git-hook\", Some(matches)) => {\n+            Some((\"git-hook\", matches)) => {\n                 if matches.is_present(\"remove\") {\n                     setup::git_hook::remove_hook();\n                 } else {\n                     setup::git_hook::install_hook(matches.is_present(\"force-override\"));\n                 }\n             },\n-            (\"vscode-tasks\", Some(matches)) => {\n+            Some((\"vscode-tasks\", matches)) => {\n                 if matches.is_present(\"remove\") {\n                     setup::vscode::remove_tasks();\n                 } else {\n@@ -63,23 +63,23 @@ fn main() {\n             },\n             _ => {},\n         },\n-        (\"remove\", Some(sub_command)) => match sub_command.subcommand() {\n-            (\"git-hook\", Some(_)) => setup::git_hook::remove_hook(),\n-            (\"intellij\", Some(_)) => setup::intellij::remove_rustc_src(),\n-            (\"vscode-tasks\", Some(_)) => setup::vscode::remove_tasks(),\n+        Some((\"remove\", sub_command)) => match sub_command.subcommand() {\n+            Some((\"git-hook\", _)) => setup::git_hook::remove_hook(),\n+            Some((\"intellij\", _)) => setup::intellij::remove_rustc_src(),\n+            Some((\"vscode-tasks\", _)) => setup::vscode::remove_tasks(),\n             _ => {},\n         },\n-        (\"serve\", Some(matches)) => {\n+        Some((\"serve\", matches)) => {\n             let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n             let lint = matches.value_of(\"lint\");\n             serve::run(port, lint);\n         },\n-        (\"lint\", Some(matches)) => {\n+        Some((\"lint\", matches)) => {\n             let path = matches.value_of(\"path\").unwrap();\n             let args = matches.values_of(\"args\").into_iter().flatten();\n             lint::run(path, args);\n         },\n-        (\"rename_lint\", Some(matches)) => {\n+        Some((\"rename_lint\", matches)) => {\n             let old_name = matches.value_of(\"old_name\").unwrap();\n             let new_name = matches.value_of(\"new_name\").unwrap_or(old_name);\n             let uplift = matches.is_present(\"uplift\");\n@@ -89,35 +89,24 @@ fn main() {\n     }\n }\n \n-fn get_clap_config<'a>() -> ArgMatches<'a> {\n-    App::new(\"Clippy developer tooling\")\n-        .setting(AppSettings::ArgRequiredElseHelp)\n+fn get_clap_config() -> ArgMatches {\n+    Command::new(\"Clippy developer tooling\")\n+        .arg_required_else_help(true)\n         .subcommand(\n-            SubCommand::with_name(\"bless\")\n-                .about(\"bless the test output changes\")\n-                .arg(\n-                    Arg::with_name(\"ignore-timestamp\")\n-                        .long(\"ignore-timestamp\")\n-                        .help(\"Include files updated before clippy was built\"),\n-                ),\n+            Command::new(\"bless\").about(\"bless the test output changes\").arg(\n+                Arg::new(\"ignore-timestamp\")\n+                    .long(\"ignore-timestamp\")\n+                    .help(\"Include files updated before clippy was built\"),\n+            ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"fmt\")\n+            Command::new(\"fmt\")\n                 .about(\"Run rustfmt on all projects and tests\")\n-                .arg(\n-                    Arg::with_name(\"check\")\n-                        .long(\"check\")\n-                        .help(\"Use the rustfmt --check option\"),\n-                )\n-                .arg(\n-                    Arg::with_name(\"verbose\")\n-                        .short(\"v\")\n-                        .long(\"verbose\")\n-                        .help(\"Echo commands run\"),\n-                ),\n+                .arg(Arg::new(\"check\").long(\"check\").help(\"Use the rustfmt --check option\"))\n+                .arg(Arg::new(\"verbose\").short('v').long(\"verbose\").help(\"Echo commands run\")),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"update_lints\")\n+            Command::new(\"update_lints\")\n                 .about(\"Updates lint registration and information from the source code\")\n                 .long_about(\n                     \"Makes sure that:\\n \\\n@@ -127,40 +116,40 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                  * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n                  * all lints are registered in the lint store\",\n                 )\n-                .arg(Arg::with_name(\"print-only\").long(\"print-only\").help(\n+                .arg(Arg::new(\"print-only\").long(\"print-only\").help(\n                     \"Print a table of lints to STDOUT. \\\n                  This does not include deprecated and internal lints. \\\n                  (Does not modify any files)\",\n                 ))\n                 .arg(\n-                    Arg::with_name(\"check\")\n+                    Arg::new(\"check\")\n                         .long(\"check\")\n                         .help(\"Checks that `cargo dev update_lints` has been run. Used on CI.\"),\n                 ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"new_lint\")\n+            Command::new(\"new_lint\")\n                 .about(\"Create new lint and run `cargo dev update_lints`\")\n                 .arg(\n-                    Arg::with_name(\"pass\")\n-                        .short(\"p\")\n+                    Arg::new(\"pass\")\n+                        .short('p')\n                         .long(\"pass\")\n                         .help(\"Specify whether the lint runs during the early or late pass\")\n                         .takes_value(true)\n                         .possible_values(&[\"early\", \"late\"])\n                         .required(true),\n                 )\n                 .arg(\n-                    Arg::with_name(\"name\")\n-                        .short(\"n\")\n+                    Arg::new(\"name\")\n+                        .short('n')\n                         .long(\"name\")\n                         .help(\"Name of the new lint in snake case, ex: fn_too_long\")\n                         .takes_value(true)\n                         .required(true),\n                 )\n                 .arg(\n-                    Arg::with_name(\"category\")\n-                        .short(\"c\")\n+                    Arg::new(\"category\")\n+                        .short('c')\n                         .long(\"category\")\n                         .help(\"What category the lint belongs to\")\n                         .default_value(\"nursery\")\n@@ -179,29 +168,25 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         ])\n                         .takes_value(true),\n                 )\n-                .arg(\n-                    Arg::with_name(\"msrv\")\n-                        .long(\"msrv\")\n-                        .help(\"Add MSRV config code to the lint\"),\n-                ),\n+                .arg(Arg::new(\"msrv\").long(\"msrv\").help(\"Add MSRV config code to the lint\")),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"setup\")\n+            Command::new(\"setup\")\n                 .about(\"Support for setting up your personal development environment\")\n-                .setting(AppSettings::ArgRequiredElseHelp)\n+                .arg_required_else_help(true)\n                 .subcommand(\n-                    SubCommand::with_name(\"intellij\")\n+                    Command::new(\"intellij\")\n                         .about(\"Alter dependencies so Intellij Rust can find rustc internals\")\n                         .arg(\n-                            Arg::with_name(\"remove\")\n+                            Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the dependencies added with 'cargo dev setup intellij'\")\n                                 .required(false),\n                         )\n                         .arg(\n-                            Arg::with_name(\"rustc-repo-path\")\n+                            Arg::new(\"rustc-repo-path\")\n                                 .long(\"repo-path\")\n-                                .short(\"r\")\n+                                .short('r')\n                                 .help(\"The path to a rustc repo that will be used for setting the dependencies\")\n                                 .takes_value(true)\n                                 .value_name(\"path\")\n@@ -210,66 +195,65 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         ),\n                 )\n                 .subcommand(\n-                    SubCommand::with_name(\"git-hook\")\n+                    Command::new(\"git-hook\")\n                         .about(\"Add a pre-commit git hook that formats your code to make it look pretty\")\n                         .arg(\n-                            Arg::with_name(\"remove\")\n+                            Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the pre-commit hook added with 'cargo dev setup git-hook'\")\n                                 .required(false),\n                         )\n                         .arg(\n-                            Arg::with_name(\"force-override\")\n+                            Arg::new(\"force-override\")\n                                 .long(\"force-override\")\n-                                .short(\"f\")\n+                                .short('f')\n                                 .help(\"Forces the override of an existing git pre-commit hook\")\n                                 .required(false),\n                         ),\n                 )\n                 .subcommand(\n-                    SubCommand::with_name(\"vscode-tasks\")\n+                    Command::new(\"vscode-tasks\")\n                         .about(\"Add several tasks to vscode for formatting, validation and testing\")\n                         .arg(\n-                            Arg::with_name(\"remove\")\n+                            Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the tasks added with 'cargo dev setup vscode-tasks'\")\n                                 .required(false),\n                         )\n                         .arg(\n-                            Arg::with_name(\"force-override\")\n+                            Arg::new(\"force-override\")\n                                 .long(\"force-override\")\n-                                .short(\"f\")\n+                                .short('f')\n                                 .help(\"Forces the override of existing vscode tasks\")\n                                 .required(false),\n                         ),\n                 ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"remove\")\n+            Command::new(\"remove\")\n                 .about(\"Support for undoing changes done by the setup command\")\n-                .setting(AppSettings::ArgRequiredElseHelp)\n-                .subcommand(SubCommand::with_name(\"git-hook\").about(\"Remove any existing pre-commit git hook\"))\n-                .subcommand(SubCommand::with_name(\"vscode-tasks\").about(\"Remove any existing vscode tasks\"))\n+                .arg_required_else_help(true)\n+                .subcommand(Command::new(\"git-hook\").about(\"Remove any existing pre-commit git hook\"))\n+                .subcommand(Command::new(\"vscode-tasks\").about(\"Remove any existing vscode tasks\"))\n                 .subcommand(\n-                    SubCommand::with_name(\"intellij\")\n-                        .about(\"Removes rustc source paths added via `cargo dev setup intellij`\"),\n+                    Command::new(\"intellij\").about(\"Removes rustc source paths added via `cargo dev setup intellij`\"),\n                 ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"serve\")\n+            Command::new(\"serve\")\n                 .about(\"Launch a local 'ALL the Clippy Lints' website in a browser\")\n                 .arg(\n-                    Arg::with_name(\"port\")\n+                    Arg::new(\"port\")\n                         .long(\"port\")\n-                        .short(\"p\")\n+                        .short('p')\n                         .help(\"Local port for the http server\")\n                         .default_value(\"8000\")\n                         .validator_os(serve::validate_port),\n                 )\n-                .arg(Arg::with_name(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n+                .arg(Arg::new(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"lint\")\n+            Command::new(\"lint\")\n                 .about(\"Manually run clippy on a file or package\")\n                 .after_help(indoc! {\"\n                     EXAMPLES\n@@ -288,33 +272,33 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                             cargo dev lint ~/my-project -- -- -W clippy::pedantic\n                 \"})\n                 .arg(\n-                    Arg::with_name(\"path\")\n+                    Arg::new(\"path\")\n                         .required(true)\n                         .help(\"The path to a file or package directory to lint\"),\n                 )\n                 .arg(\n-                    Arg::with_name(\"args\")\n-                        .multiple(true)\n+                    Arg::new(\"args\")\n+                        .multiple_occurrences(true)\n                         .help(\"Pass extra arguments to cargo/clippy-driver\"),\n                 ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"rename_lint\")\n+            Command::new(\"rename_lint\")\n                 .about(\"Renames the given lint\")\n                 .arg(\n-                    Arg::with_name(\"old_name\")\n+                    Arg::new(\"old_name\")\n                         .index(1)\n                         .required(true)\n                         .help(\"The name of the lint to rename\"),\n                 )\n                 .arg(\n-                    Arg::with_name(\"new_name\")\n+                    Arg::new(\"new_name\")\n                         .index(2)\n-                        .required_unless(\"uplift\")\n+                        .required_unless_present(\"uplift\")\n                         .help(\"The new name of the lint\"),\n                 )\n                 .arg(\n-                    Arg::with_name(\"uplift\")\n+                    Arg::new(\"uplift\")\n                         .long(\"uplift\")\n                         .help(\"This lint will be uplifted into rustc\"),\n                 ),"}, {"sha": "d55b1a354d003cba512928e27b0b4e4310b7209b", "filename": "src/tools/clippy/clippy_dev/src/serve.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fserve.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,4 +1,5 @@\n-use std::ffi::{OsStr, OsString};\n+use std::ffi::OsStr;\n+use std::num::ParseIntError;\n use std::path::Path;\n use std::process::Command;\n use std::thread;\n@@ -59,9 +60,6 @@ fn mtime(path: impl AsRef<Path>) -> SystemTime {\n }\n \n #[allow(clippy::missing_errors_doc)]\n-pub fn validate_port(arg: &OsStr) -> Result<(), OsString> {\n-    match arg.to_string_lossy().parse::<u16>() {\n-        Ok(_port) => Ok(()),\n-        Err(err) => Err(OsString::from(err.to_string())),\n-    }\n+pub fn validate_port(arg: &OsStr) -> Result<(), ParseIntError> {\n+    arg.to_string_lossy().parse::<u16>().map(|_| ())\n }"}, {"sha": "b364a370efab5691f6d458ebe5db811de22de196", "filename": "src/tools/clippy/clippy_lints/src/almost_complete_letter_range.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Falmost_complete_letter_range.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,100 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::{trim_span, walk_span_to_context};\n+use clippy_utils::{meets_msrv, msrvs};\n+use rustc_ast::ast::{Expr, ExprKind, LitKind, Pat, PatKind, RangeEnd, RangeLimits};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for ranges which almost include the entire range of letters from 'a' to 'z', but\n+    /// don't because they're a half open range.\n+    ///\n+    /// ### Why is this bad?\n+    /// This (`'a'..'z'`) is almost certainly a typo meant to include all letters.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let _ = 'a'..'z';\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let _ = 'a'..='z';\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub ALMOST_COMPLETE_LETTER_RANGE,\n+    suspicious,\n+    \"almost complete letter range\"\n+}\n+impl_lint_pass!(AlmostCompleteLetterRange => [ALMOST_COMPLETE_LETTER_RANGE]);\n+\n+pub struct AlmostCompleteLetterRange {\n+    msrv: Option<RustcVersion>,\n+}\n+impl AlmostCompleteLetterRange {\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+impl EarlyLintPass for AlmostCompleteLetterRange {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n+        if let ExprKind::Range(Some(start), Some(end), RangeLimits::HalfOpen) = &e.kind {\n+            let ctxt = e.span.ctxt();\n+            let sugg = if let Some(start) = walk_span_to_context(start.span, ctxt)\n+                && let Some(end) = walk_span_to_context(end.span, ctxt)\n+                && meets_msrv(self.msrv, msrvs::RANGE_INCLUSIVE)\n+            {\n+                Some((trim_span(cx.sess().source_map(), start.between(end)), \"..=\"))\n+            } else {\n+                None\n+            };\n+            check_range(cx, e.span, start, end, sugg);\n+        }\n+    }\n+\n+    fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &Pat) {\n+        if let PatKind::Range(Some(start), Some(end), kind) = &p.kind\n+            && matches!(kind.node, RangeEnd::Excluded)\n+        {\n+            let sugg = if meets_msrv(self.msrv, msrvs::RANGE_INCLUSIVE) {\n+                \"..=\"\n+            } else {\n+                \"...\"\n+            };\n+            check_range(cx, p.span, start, end, Some((kind.span, sugg)));\n+        }\n+    }\n+\n+    extract_msrv_attr!(EarlyContext);\n+}\n+\n+fn check_range(cx: &EarlyContext<'_>, span: Span, start: &Expr, end: &Expr, sugg: Option<(Span, &str)>) {\n+    if let ExprKind::Lit(start_lit) = &start.peel_parens().kind\n+        && let ExprKind::Lit(end_lit) = &end.peel_parens().kind\n+        && matches!(\n+            (&start_lit.kind, &end_lit.kind),\n+            (LitKind::Byte(b'a') | LitKind::Char('a'), LitKind::Byte(b'z') | LitKind::Char('z'))\n+            | (LitKind::Byte(b'A') | LitKind::Char('A'), LitKind::Byte(b'Z') | LitKind::Char('Z'))\n+        )\n+    {\n+        span_lint_and_then(\n+            cx,\n+            ALMOST_COMPLETE_LETTER_RANGE,\n+            span,\n+            \"almost complete ascii letter range\",\n+            |diag| {\n+                if let Some((span, sugg)) = sugg {\n+                    diag.span_suggestion(\n+                        span,\n+                        \"use an inclusive range\",\n+                        sugg.to_owned(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+        );\n+    }\n+}"}, {"sha": "159f3b0cd014a5ce66d7994244750d5d9df4706f", "filename": "src/tools/clippy/clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -28,7 +28,7 @@ declare_clippy_lint! {\n     /// let x = 3.14;\n     /// let y = 1_f64 / x;\n     /// ```\n-    /// Use predefined constants instead:\n+    /// Use instead:\n     /// ```rust\n     /// let x = std::f32::consts::PI;\n     /// let y = std::f64::consts::FRAC_1_PI;"}, {"sha": "6e5c8f445818ebfb54bb5c45bbbe87b9a57b9cf9", "filename": "src/tools/clippy/clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_conversions.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -29,15 +29,14 @@ declare_clippy_lint! {\n     /// f(a as u16);\n     /// ```\n     ///\n-    /// Usually better represents the semantics you expect:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// f(a.try_into()?);\n-    /// ```\n-    /// or\n-    /// ```rust,ignore\n+    ///\n+    /// // or\n+    ///\n     /// f(a.try_into().expect(\"Unexpected u16 overflow in f\"));\n     /// ```\n-    ///\n     #[clippy::version = \"1.41.0\"]\n     pub AS_CONVERSIONS,\n     restriction,"}, {"sha": "464be4218dd4d519ec7ab3dfb8880f0b5af7ed04", "filename": "src/tools/clippy/clippy_lints/src/as_underscore.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_underscore.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,74 @@\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_then};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, TyKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Check for the usage of `as _` conversion using inferred type.\n+    ///\n+    /// ### Why is this bad?\n+    /// The conversion might include lossy conversion and dangerous cast that might go\n+    /// undetected du to the type being inferred.\n+    ///\n+    /// The lint is allowed by default as using `_` is less wordy than always specifying the type.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn foo(n: usize) {}\n+    /// let n: u16 = 256;\n+    /// foo(n as _);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo(n: usize) {}\n+    /// let n: u16 = 256;\n+    /// foo(n as usize);\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub AS_UNDERSCORE,\n+    restriction,\n+    \"detects `as _` conversion\"\n+}\n+declare_lint_pass!(AsUnderscore => [AS_UNDERSCORE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for AsUnderscore {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'tcx>) {\n+        if in_external_macro(cx.sess(), expr.span) {\n+            return;\n+        }\n+\n+        if let ExprKind::Cast(_, ty) = expr.kind && let TyKind::Infer = ty.kind {\n+\n+            let ty_resolved = cx.typeck_results().expr_ty(expr);\n+            if let ty::Error(_) = ty_resolved.kind() {\n+                span_lint_and_help(\n+                    cx,\n+                AS_UNDERSCORE,\n+                expr.span,\n+                \"using `as _` conversion\",\n+                None,\n+                \"consider giving the type explicitly\",\n+                );\n+            } else {\n+            span_lint_and_then(\n+                cx,\n+                AS_UNDERSCORE,\n+                expr.span,\n+                \"using `as _` conversion\",\n+                |diag| {\n+                    diag.span_suggestion(\n+                        ty.span,\n+                        \"consider giving the type explicitly\",\n+                        format!(\"{}\", ty_resolved),\n+                        Applicability::MachineApplicable,\n+                    );\n+            }\n+            );\n+        }\n+        }\n+    }\n+}"}, {"sha": "f81da2d42233380e9bd5a633b8b13237dfcac68a", "filename": "src/tools/clippy/clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -27,10 +27,16 @@ declare_clippy_lint! {\n     /// let mut a = 5;\n     /// let b = 0;\n     /// // ...\n-    /// // Bad\n+    ///\n     /// a = a + b;\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// let mut a = 5;\n+    /// let b = 0;\n+    /// // ...\n     ///\n-    /// // Good\n     /// a += b;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "770cb6a3d7b8baf0dab02cd28b97115387a314d7", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -89,13 +89,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```ignore\n-    /// // Bad\n     /// #[deny(dead_code)]\n     /// extern crate foo;\n     /// #[forbid(dead_code)]\n     /// use foo::bar;\n+    /// ```\n     ///\n-    /// // Ok\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// #[allow(unused_imports)]\n     /// use foo::baz;\n     /// #[allow(unused_imports)]\n@@ -146,15 +147,19 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n+    /// #[allow(dead_code)]\n+    ///\n+    /// fn not_quite_good_code() { }\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n     /// // Good (as inner attribute)\n     /// #![allow(dead_code)]\n     ///\n     /// fn this_is_fine() { }\n     ///\n-    /// // Bad\n-    /// #[allow(dead_code)]\n-    ///\n-    /// fn not_quite_good_code() { }\n+    /// // or\n     ///\n     /// // Good (as outer attribute)\n     /// #[allow(dead_code)]\n@@ -175,12 +180,11 @@ declare_clippy_lint! {\n     /// These lints should only be enabled on a lint-by-lint basis and with careful consideration.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// #![deny(clippy::restriction)]\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n     /// #![deny(clippy::as_conversions)]\n     /// ```\n@@ -205,13 +209,12 @@ declare_clippy_lint! {\n     /// [#3123](https://github.com/rust-lang/rust-clippy/pull/3123#issuecomment-422321765)\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// #[cfg_attr(rustfmt, rustfmt_skip)]\n     /// fn main() { }\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n     /// #[rustfmt::skip]\n     /// fn main() { }\n@@ -231,20 +234,20 @@ declare_clippy_lint! {\n     /// by the conditional compilation engine.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// #[cfg(linux)]\n     /// fn conditional() { }\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n+    /// # mod hidden {\n     /// #[cfg(target_os = \"linux\")]\n     /// fn conditional() { }\n-    /// ```\n+    /// # }\n+    ///\n+    /// // or\n     ///\n-    /// Or:\n-    /// ```rust\n     /// #[cfg(unix)]\n     /// fn conditional() { }\n     /// ```\n@@ -266,14 +269,13 @@ declare_clippy_lint! {\n     /// ensure that others understand the reasoning\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// #![feature(lint_reasons)]\n     ///\n     /// #![allow(clippy::some_lint)]\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n     /// #![feature(lint_reasons)]\n     ///\n@@ -585,15 +587,21 @@ impl EarlyLintPass for EarlyAttributes {\n }\n \n fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::Item) {\n-    for attr in &item.attrs {\n+    let mut iter = item.attrs.iter().peekable();\n+    while let Some(attr) = iter.next() {\n         if matches!(attr.kind, AttrKind::Normal(..))\n             && attr.style == AttrStyle::Outer\n             && is_present_in_source(cx, attr.span)\n         {\n             let begin_of_attr_to_item = Span::new(attr.span.lo(), item.span.lo(), item.span.ctxt(), item.span.parent());\n-            let end_of_attr_to_item = Span::new(attr.span.hi(), item.span.lo(), item.span.ctxt(), item.span.parent());\n+            let end_of_attr_to_next_attr_or_item = Span::new(\n+                attr.span.hi(),\n+                iter.peek().map_or(item.span.lo(), |next_attr| next_attr.span.lo()),\n+                item.span.ctxt(),\n+                item.span.parent(),\n+            );\n \n-            if let Some(snippet) = snippet_opt(cx, end_of_attr_to_item) {\n+            if let Some(snippet) = snippet_opt(cx, end_of_attr_to_next_attr_or_item) {\n                 let lines = snippet.split('\\n').collect::<Vec<_>>();\n                 let lines = without_block_comments(lines);\n \n@@ -623,8 +631,15 @@ fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute, msrv: Opti\n         if feature_item.has_name(sym::rustfmt);\n         // check for `rustfmt_skip` and `rustfmt::skip`\n         if let Some(skip_item) = &items[1].meta_item();\n-        if skip_item.has_name(sym!(rustfmt_skip)) ||\n-            skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym::skip;\n+        if skip_item.has_name(sym!(rustfmt_skip))\n+            || skip_item\n+                .path\n+                .segments\n+                .last()\n+                .expect(\"empty path in attribute\")\n+                .ident\n+                .name\n+                == sym::skip;\n         // Only lint outer attributes, because custom inner attributes are unstable\n         // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n         if attr.style == AttrStyle::Outer;"}, {"sha": "5bd7a342389fe50216553f483b4e3c236b35e969", "filename": "src/tools/clippy/clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -22,21 +22,17 @@ declare_clippy_lint! {\n     ///\n     /// ### Examples\n     /// ```rust\n-    /// // Bad\n+    /// # fn somefunc() -> bool { true };\n     /// if { true } { /* ... */ }\n     ///\n-    /// // Good\n-    /// if true { /* ... */ }\n+    /// if { let x = somefunc(); x } { /* ... */ }\n     /// ```\n     ///\n-    /// // or\n-    ///\n+    /// Use instead:\n     /// ```rust\n     /// # fn somefunc() -> bool { true };\n-    /// // Bad\n-    /// if { let x = somefunc(); x } { /* ... */ }\n+    /// if true { /* ... */ }\n     ///\n-    /// // Good\n     /// let res = { let x = somefunc(); x };\n     /// if res { /* ... */ }\n     /// ```"}, {"sha": "e4e122ba6eb59af48afd672470aad7d31fcab867", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -27,8 +27,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```ignore\n-    /// if a && true  // should be: if a\n-    /// if !(a == b)  // should be: if a != b\n+    /// if a && true {}\n+    /// if !(a == b) {}\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// if a {}\n+    /// if a != b {}\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NONMINIMAL_BOOL,\n@@ -48,10 +54,15 @@ declare_clippy_lint! {\n     /// Ignores short circuiting behavior.\n     ///\n     /// ### Example\n-    /// ```ignore\n+    /// ```rust,ignore\n+    /// // The `b` is unnecessary, the expression is equivalent to `if a`.\n     /// if a && b || a { ... }\n     /// ```\n-    /// The `b` is unnecessary, the expression is equivalent to `if a`.\n+    ///\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// if a {}\n+    /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub LOGIC_BUG,\n     correctness,"}, {"sha": "ec2f31cf6737415184740ec6be5cc6fdac9aaab7", "filename": "src/tools/clippy/clippy_lints/src/borrow_deref_ref.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_deref_ref.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,118 @@\n+use crate::reference::DEREF_ADDROF;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::{get_parent_expr, is_lint_allowed};\n+use rustc_errors::Applicability;\n+use rustc_hir::{ExprKind, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::mir::Mutability;\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `&*(&T)`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Dereferencing and then borrowing a reference value has no effect in most cases.\n+    ///\n+    /// ### Known problems\n+    /// false negative on such code:\n+    /// ```\n+    /// let x = &12;\n+    /// let addr_x = &x as *const _ as usize;\n+    /// let addr_y = &&*x as *const _ as usize; // assert ok now, and lint triggerd.\n+    ///                                         // But if we fix it, assert will fail.\n+    /// assert_ne!(addr_x, addr_y);\n+    /// ```\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let s = &String::new();\n+    ///\n+    /// // Bad\n+    /// let a: &String = &* s;\n+    /// foo(&*s);\n+    ///\n+    /// // Good\n+    /// let a: &String = s;\n+    /// foo(&**s);\n+    ///\n+    /// fn foo(_: &str){ }\n+    /// ```\n+    #[clippy::version = \"1.59.0\"]\n+    pub BORROW_DEREF_REF,\n+    complexity,\n+    \"deref on an immutable reference returns the same type as itself\"\n+}\n+\n+declare_lint_pass!(BorrowDerefRef => [BORROW_DEREF_REF]);\n+\n+impl LateLintPass<'_> for BorrowDerefRef {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, e: &rustc_hir::Expr<'_>) {\n+        if_chain! {\n+            if !e.span.from_expansion();\n+            if let ExprKind::AddrOf(_, Mutability::Not, addrof_target) = e.kind;\n+            if !addrof_target.span.from_expansion();\n+            if let ExprKind::Unary(UnOp::Deref, deref_target) = addrof_target.kind;\n+            if !deref_target.span.from_expansion();\n+            if !matches!(deref_target.kind, ExprKind::Unary(UnOp::Deref, ..) );\n+            let ref_ty = cx.typeck_results().expr_ty(deref_target);\n+            if let ty::Ref(_, inner_ty, Mutability::Not) = ref_ty.kind();\n+            then{\n+\n+                if let Some(parent_expr) = get_parent_expr(cx, e){\n+                    if matches!(parent_expr.kind, ExprKind::Unary(UnOp::Deref, ..)) &&\n+                       !is_lint_allowed(cx, DEREF_ADDROF, parent_expr.hir_id) {\n+                        return;\n+                    }\n+\n+                    // modification to `&mut &*x` is different from `&mut x`\n+                    if matches!(deref_target.kind, ExprKind::Path(..)\n+                                             | ExprKind::Field(..)\n+                                             | ExprKind::Index(..)\n+                                             | ExprKind::Unary(UnOp::Deref, ..))\n+                     && matches!(parent_expr.kind, ExprKind::AddrOf(_, Mutability::Mut, _)) {\n+                       return;\n+                    }\n+                }\n+\n+                span_lint_and_then(\n+                    cx,\n+                    BORROW_DEREF_REF,\n+                    e.span,\n+                    \"deref on an immutable reference\",\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            e.span,\n+                            \"if you would like to reborrow, try removing `&*`\",\n+                            snippet_opt(cx, deref_target.span).unwrap(),\n+                            Applicability::MachineApplicable\n+                        );\n+\n+                        // has deref trait -> give 2 help\n+                        // doesn't have deref trait -> give 1 help\n+                        if let Some(deref_trait_id) = cx.tcx.lang_items().deref_trait(){\n+                            if !implements_trait(cx, *inner_ty, deref_trait_id, &[]) {\n+                                return;\n+                            }\n+                        }\n+\n+                        diag.span_suggestion(\n+                            e.span,\n+                            \"if you would like to deref, try using `&**`\",\n+                            format!(\n+                                \"&**{}\",\n+                                &snippet_opt(cx, deref_target.span).unwrap(),\n+                             ),\n+                            Applicability::MaybeIncorrect\n+                        );\n+\n+                    }\n+                );\n+\n+            }\n+        }\n+    }\n+}"}, {"sha": "bfdbaf2413a2502030f6357a1b9c97f7ff3ae8b8", "filename": "src/tools/clippy/clippy_lints/src/bytecount.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -28,7 +28,13 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let vec = vec![1_u8];\n-    /// &vec.iter().filter(|x| **x == 0u8).count(); // use bytecount::count instead\n+    /// let count = vec.iter().filter(|x| **x == 0u8).count();\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// # let vec = vec![1_u8];\n+    /// let count = bytecount::count(&vec, 0u8);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NAIVE_BYTECOUNT,"}, {"sha": "64ea326b75a0d3335f7407a9f3e17e9176457190", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_abs_to_unsigned.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::{meets_msrv, msrvs};\n-use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{self, Ty};\n use rustc_semver::RustcVersion;\n \n use super::CAST_ABS_TO_UNSIGNED;\n@@ -18,25 +17,28 @@ pub(super) fn check(\n     cast_to: Ty<'_>,\n     msrv: Option<RustcVersion>,\n ) {\n-    if_chain! {\n-        if meets_msrv(msrv, msrvs::UNSIGNED_ABS);\n-        if cast_from.is_integral();\n-        if cast_to.is_integral();\n-        if cast_from.is_signed();\n-        if !cast_to.is_signed();\n-        if let ExprKind::MethodCall(method_path, args, _) = cast_expr.kind;\n-        if let method_name = method_path.ident.name.as_str();\n-        if method_name == \"abs\";\n-        then {\n-            span_lint_and_sugg(\n-                cx,\n-                CAST_ABS_TO_UNSIGNED,\n-                expr.span,\n-                &format!(\"casting the result of `{}::{}()` to {}\", cast_from, method_name, cast_to),\n-                \"replace with\",\n-                format!(\"{}.unsigned_abs()\", Sugg::hir(cx, &args[0], \"..\")),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n+    if meets_msrv(msrv, msrvs::UNSIGNED_ABS)\n+        && let ty::Int(from) = cast_from.kind()\n+        && let ty::Uint(to) = cast_to.kind()\n+        && let ExprKind::MethodCall(method_path, args, _) = cast_expr.kind\n+        && method_path.ident.name.as_str() == \"abs\"\n+    {\n+        let span = if from.bit_width() == to.bit_width() {\n+            expr.span\n+        } else {\n+            // if the result of `.unsigned_abs` would be a different type, keep the cast\n+            // e.g. `i64 -> usize`, `i16 -> u8`\n+            cast_expr.span\n+        };\n+\n+        span_lint_and_sugg(\n+            cx,\n+            CAST_ABS_TO_UNSIGNED,\n+            span,\n+            &format!(\"casting the result of `{cast_from}::abs()` to {cast_to}\"),\n+            \"replace with\",\n+            format!(\"{}.unsigned_abs()\", Sugg::hir(cx, &args[0], \"..\")),\n+            Applicability::MachineApplicable,\n+        );\n     }\n }"}, {"sha": "1010340c712139356cbe5475e2c4d7859a402a26", "filename": "src/tools/clippy/clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -318,7 +318,7 @@ fn get_implementing_type<'a>(path: &QPath<'_>, candidates: &'a [&str], function:\n         if let QPath::TypeRelative(ty, path) = &path;\n         if path.ident.name.as_str() == function;\n         if let TyKind::Path(QPath::Resolved(None, tp)) = &ty.kind;\n-        if let [int] = &*tp.segments;\n+        if let [int] = tp.segments;\n         then {\n             let name = int.ident.name.as_str();\n             candidates.iter().find(|c| &name == *c).copied()\n@@ -332,7 +332,7 @@ fn get_implementing_type<'a>(path: &QPath<'_>, candidates: &'a [&str], function:\n fn int_ty_to_sym<'tcx>(path: &QPath<'_>) -> Option<&'tcx str> {\n     if_chain! {\n         if let QPath::Resolved(_, path) = *path;\n-        if let [ty] = &*path.segments;\n+        if let [ty] = path.segments;\n         then {\n             let name = ty.ident.name.as_str();\n             INTS.iter().find(|c| &name == *c).copied()"}, {"sha": "33c44f8b2dba9199a40e7c460f95aa9e570157f2", "filename": "src/tools/clippy/clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -25,7 +25,7 @@ declare_clippy_lint! {\n     /// complexity.\n     ///\n     /// ### Example\n-    /// No. You'll see it when you get the warning.\n+    /// You'll see it when you get the warning.\n     #[clippy::version = \"1.35.0\"]\n     pub COGNITIVE_COMPLEXITY,\n     nursery,"}, {"sha": "3eceb848822e95bfca48bbd2f30d269757e767a2", "filename": "src/tools/clippy/clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -41,7 +41,7 @@ declare_clippy_lint! {\n     ///\n     /// ```\n     ///\n-    /// Should be written:\n+    /// Use instead:\n     ///\n     /// ```rust,ignore\n     /// if x && y {"}, {"sha": "913e081af3bdae6bb8ec557f0e11a66cd586fcb6", "filename": "src/tools/clippy/clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -34,7 +34,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n-    /// Could be written:\n+    /// Use instead:\n     ///\n     /// ```rust,ignore\n     /// use std::cmp::Ordering;"}, {"sha": "1e9a1153011000397b0b8fdf731935c4fd131973", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -141,7 +141,7 @@ declare_clippy_lint! {\n     /// };\n     /// ```\n     ///\n-    /// Could be written as:\n+    /// Use instead:\n     /// ```ignore\n     /// println!(\"Hello World\");\n     /// let foo = if \u2026 {"}, {"sha": "9b8a481b6eab796157268e671ca3ebcfabbd0cd6", "filename": "src/tools/clippy/clippy_lints/src/crate_in_macro_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -90,7 +90,7 @@ fn contains_unhygienic_crate_reference(tts: &TokenStream) -> Option<Span> {\n     while let Some(curr) = cursor.next() {\n         if_chain! {\n             if !prev_is_dollar;\n-            if let Some(span) = is_crate_keyword(&curr);\n+            if let Some(span) = is_crate_keyword(curr);\n             if let Some(next) = cursor.look_ahead(0);\n             if is_token(next, &TokenKind::ModSep);\n             then {\n@@ -103,7 +103,7 @@ fn contains_unhygienic_crate_reference(tts: &TokenStream) -> Option<Span> {\n                 return span;\n             }\n         }\n-        prev_is_dollar = is_token(&curr, &TokenKind::Dollar);\n+        prev_is_dollar = is_token(curr, &TokenKind::Dollar);\n     }\n     None\n }"}, {"sha": "17deccf8c3930b4fbc6f4ffc7e1077181345a010", "filename": "src/tools/clippy/clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{is_in_cfg_test, is_in_test_function};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n@@ -30,14 +30,27 @@ declare_clippy_lint! {\n     \"`dbg!` macro is intended as a debugging tool\"\n }\n \n-declare_lint_pass!(DbgMacro => [DBG_MACRO]);\n+#[derive(Copy, Clone)]\n+pub struct DbgMacro {\n+    allow_dbg_in_tests: bool,\n+}\n+\n+impl_lint_pass!(DbgMacro => [DBG_MACRO]);\n+\n+impl DbgMacro {\n+    pub fn new(allow_dbg_in_tests: bool) -> Self {\n+        DbgMacro { allow_dbg_in_tests }\n+    }\n+}\n \n impl LateLintPass<'_> for DbgMacro {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return };\n         if cx.tcx.is_diagnostic_item(sym::dbg_macro, macro_call.def_id) {\n-            // we make an exception for test code\n-            if is_in_test_function(cx.tcx, expr.hir_id) || is_in_cfg_test(cx.tcx, expr.hir_id) {\n+            // allows `dbg!` in test code if allow-dbg-in-test is set to true in clippy.toml\n+            if self.allow_dbg_in_tests\n+                && (is_in_test_function(cx.tcx, expr.hir_id) || is_in_cfg_test(cx.tcx, expr.hir_id))\n+            {\n                 return;\n             }\n             let mut applicability = Applicability::MachineApplicable;"}, {"sha": "e98691fd5bb0ac0988185898c174c4f6372af61c", "filename": "src/tools/clippy/clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -21,7 +21,7 @@ declare_clippy_lint! {\n     ///     bar: bool\n     /// }\n     ///\n-    /// impl std::default::Default for Foo {\n+    /// impl Default for Foo {\n     ///     fn default() -> Self {\n     ///         Self {\n     ///             bar: false"}, {"sha": "99347ebadc60277e7249796cd1048e1cafa388ff", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,16 +1,17 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::paths;\n-use clippy_utils::ty::{implements_trait, is_copy};\n+use clippy_utils::ty::{implements_trait, implements_trait_with_env, is_copy};\n use clippy_utils::{is_lint_allowed, match_def_path};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, Visitor};\n use rustc_hir::{\n-    BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n+    self as hir, BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, UnsafeSource, Unsafety,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::subst::GenericArg;\n+use rustc_middle::ty::{self, BoundConstness, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate, TraitRef, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n@@ -224,7 +225,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n fn check_hash_peq<'tcx>(\n     cx: &LateContext<'tcx>,\n     span: Span,\n-    trait_ref: &TraitRef<'_>,\n+    trait_ref: &hir::TraitRef<'_>,\n     ty: Ty<'tcx>,\n     hash_is_automatically_derived: bool,\n ) {\n@@ -277,7 +278,7 @@ fn check_hash_peq<'tcx>(\n fn check_ord_partial_ord<'tcx>(\n     cx: &LateContext<'tcx>,\n     span: Span,\n-    trait_ref: &TraitRef<'_>,\n+    trait_ref: &hir::TraitRef<'_>,\n     ty: Ty<'tcx>,\n     ord_is_automatically_derived: bool,\n ) {\n@@ -328,7 +329,7 @@ fn check_ord_partial_ord<'tcx>(\n }\n \n /// Implementation of the `EXPL_IMPL_CLONE_ON_COPY` lint.\n-fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &TraitRef<'_>, ty: Ty<'tcx>) {\n+fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &hir::TraitRef<'_>, ty: Ty<'tcx>) {\n     let clone_id = match cx.tcx.lang_items().clone_trait() {\n         Some(id) if trait_ref.trait_def_id() == Some(id) => id,\n         _ => return,\n@@ -378,7 +379,7 @@ fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &T\n fn check_unsafe_derive_deserialize<'tcx>(\n     cx: &LateContext<'tcx>,\n     item: &Item<'_>,\n-    trait_ref: &TraitRef<'_>,\n+    trait_ref: &hir::TraitRef<'_>,\n     ty: Ty<'tcx>,\n ) {\n     fn has_unsafe<'tcx>(cx: &LateContext<'tcx>, item: &'tcx Item<'_>) -> bool {\n@@ -455,13 +456,41 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n }\n \n /// Implementation of the `DERIVE_PARTIAL_EQ_WITHOUT_EQ` lint.\n-fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_ref: &TraitRef<'_>, ty: Ty<'tcx>) {\n+fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_ref: &hir::TraitRef<'_>, ty: Ty<'tcx>) {\n     if_chain! {\n         if let ty::Adt(adt, substs) = ty.kind();\n         if let Some(eq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::Eq);\n+        if let Some(peq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::PartialEq);\n         if let Some(def_id) = trait_ref.trait_def_id();\n         if cx.tcx.is_diagnostic_item(sym::PartialEq, def_id);\n-        if !implements_trait(cx, ty, eq_trait_def_id, substs);\n+        // New `ParamEnv` replacing `T: PartialEq` with `T: Eq`\n+        let param_env = ParamEnv::new(\n+            cx.tcx.mk_predicates(cx.param_env.caller_bounds().iter().map(|p| {\n+                let kind = p.kind();\n+                match kind.skip_binder() {\n+                    PredicateKind::Trait(p)\n+                        if p.trait_ref.def_id == peq_trait_def_id\n+                            && p.trait_ref.substs.get(0) == p.trait_ref.substs.get(1)\n+                            && matches!(p.trait_ref.self_ty().kind(), ty::Param(_))\n+                            && p.constness == BoundConstness::NotConst\n+                            && p.polarity == ImplPolarity::Positive =>\n+                    {\n+                        cx.tcx.mk_predicate(kind.rebind(PredicateKind::Trait(TraitPredicate {\n+                            trait_ref: TraitRef::new(\n+                                eq_trait_def_id,\n+                                cx.tcx.mk_substs([GenericArg::from(p.trait_ref.self_ty())].into_iter()),\n+                            ),\n+                            constness: BoundConstness::NotConst,\n+                            polarity: ImplPolarity::Positive,\n+                        })))\n+                    },\n+                    _ => p,\n+                }\n+            })),\n+            cx.param_env.reveal(),\n+            cx.param_env.constness(),\n+        );\n+        if !implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, substs);\n         then {\n             // If all of our fields implement `Eq`, we can implement `Eq` too\n             for variant in adt.variants() {"}, {"sha": "cb07f57e87006ff95368b8619b4bb559f983bc8a", "filename": "src/tools/clippy/clippy_lints/src/doc_link_with_quotes.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc_link_with_quotes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc_link_with_quotes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc_link_with_quotes.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,60 @@\n+use clippy_utils::diagnostics::span_lint;\n+use itertools::Itertools;\n+use rustc_ast::{AttrKind, Attribute};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detects the syntax `['foo']` in documentation comments (notice quotes instead of backticks)\n+    /// outside of code blocks\n+    /// ### Why is this bad?\n+    /// It is likely a typo when defining an intra-doc link\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// /// See also: ['foo']\n+    /// fn bar() {}\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// /// See also: [`foo`]\n+    /// fn bar() {}\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub DOC_LINK_WITH_QUOTES,\n+    pedantic,\n+    \"possible typo for an intra-doc link\"\n+}\n+declare_lint_pass!(DocLinkWithQuotes => [DOC_LINK_WITH_QUOTES]);\n+\n+impl EarlyLintPass for DocLinkWithQuotes {\n+    fn check_attribute(&mut self, ctx: &EarlyContext<'_>, attr: &Attribute) {\n+        if let AttrKind::DocComment(_, symbol) = attr.kind {\n+            if contains_quote_link(symbol.as_str()) {\n+                span_lint(\n+                    ctx,\n+                    DOC_LINK_WITH_QUOTES,\n+                    attr.span,\n+                    \"possible intra-doc link using quotes instead of backticks\",\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn contains_quote_link(s: &str) -> bool {\n+    let mut in_backticks = false;\n+    let mut found_opening = false;\n+\n+    for c in s.chars().tuple_windows::<(char, char)>() {\n+        match c {\n+            ('`', _) => in_backticks = !in_backticks,\n+            ('[', '\\'') if !in_backticks => found_opening = true,\n+            ('\\'', ']') if !in_backticks && found_opening => return true,\n+            _ => {},\n+        }\n+    }\n+\n+    false\n+}"}, {"sha": "ee0440e52ff85a1ec3bb65d8c88d4801348fa2d3", "filename": "src/tools/clippy/clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -24,7 +24,7 @@ declare_clippy_lint! {\n     /// if x == y || x < y {}\n     /// ```\n     ///\n-    /// Could be written as:\n+    /// Use instead:\n     ///\n     /// ```rust\n     /// # let x = 1;"}, {"sha": "a33ef5ce6e37c5a30b4c9586ffe5590bfba66235", "filename": "src/tools/clippy/clippy_lints/src/double_parens.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -13,23 +13,21 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// fn simple_double_parens() -> i32 {\n     ///     ((0))\n     /// }\n     ///\n-    /// // Good\n+    /// # fn foo(bar: usize) {}\n+    /// foo((0));\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n     /// fn simple_no_parens() -> i32 {\n     ///     0\n     /// }\n     ///\n-    /// // or\n-    ///\n     /// # fn foo(bar: usize) {}\n-    /// // Bad\n-    /// foo((0));\n-    ///\n-    /// // Good\n     /// foo(0);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "d85ace3a279b3b8e4b9d586301c06c75222f5246", "filename": "src/tools/clippy/clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -22,15 +22,17 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # use std::time::Duration;\n-    /// let dur = Duration::new(5, 0);\n-    ///\n-    /// // Bad\n-    /// let _micros = dur.subsec_nanos() / 1_000;\n-    /// let _millis = dur.subsec_nanos() / 1_000_000;\n+    /// # let duration = Duration::new(5, 0);\n+    /// let micros = duration.subsec_nanos() / 1_000;\n+    /// let millis = duration.subsec_nanos() / 1_000_000;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let _micros = dur.subsec_micros();\n-    /// let _millis = dur.subsec_millis();\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::time::Duration;\n+    /// # let duration = Duration::new(5, 0);\n+    /// let micros = duration.subsec_micros();\n+    /// let millis = duration.subsec_millis();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub DURATION_SUBSEC,"}, {"sha": "bf4488570eaf21d190f3c2d252098103070bfaaa", "filename": "src/tools/clippy/clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -26,7 +26,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n-    /// Could be written:\n+    /// Use instead:\n     ///\n     /// ```rust\n     /// # fn a() {}"}, {"sha": "bbebc02441412aa5ab36a72d8a9574ccea8c58fc", "filename": "src/tools/clippy/clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_enum.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -23,12 +23,11 @@ declare_clippy_lint! {\n     ///\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// enum Test {}\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n     /// #![feature(never_type)]\n     ///"}, {"sha": "27743a0ebec7e59dc688de5547043a4b2b60e95b", "filename": "src/tools/clippy/clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -46,7 +46,7 @@ declare_clippy_lint! {\n     ///     map.insert(k, v);\n     /// }\n     /// ```\n-    /// can both be rewritten as:\n+    /// Use instead:\n     /// ```rust\n     /// # use std::collections::HashMap;\n     /// # let mut map = HashMap::new();"}, {"sha": "263a5b573c9cf92420e066ff99d7c8183ebbeedf", "filename": "src/tools/clippy/clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -32,7 +32,7 @@ declare_clippy_lint! {\n     ///     BattenbergCake,\n     /// }\n     /// ```\n-    /// Could be written as:\n+    /// Use instead:\n     /// ```rust\n     /// enum Cake {\n     ///     BlackForest,"}, {"sha": "c3176d987c6371ef7f631dc4f2b409bcc68099ca", "filename": "src/tools/clippy/clippy_lints/src/eq_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -30,9 +30,9 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # let x = 1;\n     /// if x + 1 == x + 1 {}\n-    /// ```\n-    /// or\n-    /// ```rust\n+    ///\n+    /// // or\n+    ///\n     /// # let a = 3;\n     /// # let b = 4;\n     /// assert_eq!(a, a);"}, {"sha": "ef1216358dd97eb8eaa6dd00ddfbf3983c056e85", "filename": "src/tools/clippy/clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -26,7 +26,7 @@ declare_clippy_lint! {\n     ///     do_thing();\n     /// }\n     /// ```\n-    /// Should be written\n+    /// Use instead:\n     /// ```rust,ignore\n     /// if x == Some(2) {\n     ///     do_thing();"}, {"sha": "9d21dd71e0e8dd7c8edd8da762e8fd30df18baa6", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -31,12 +31,14 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # fn foo(bar: usize) {}\n-    /// // Bad\n     /// let x = Box::new(1);\n     /// foo(*x);\n     /// println!(\"{}\", *x);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn foo(bar: usize) {}\n     /// let x = 1;\n     /// foo(x);\n     /// println!(\"{}\", x);"}, {"sha": "a2af10e2ba5eabf5dd9ada51a7df0a22b8a2be81", "filename": "src/tools/clippy/clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -18,7 +18,6 @@ declare_clippy_lint! {\n     /// readability and API.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// struct S {\n     ///     is_pending: bool,\n@@ -27,7 +26,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n     /// enum S {\n     ///     Pending,"}, {"sha": "12d636cf41014853a919632681531c216423b327", "filename": "src/tools/clippy/clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -22,8 +22,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::io::Write;\n     /// # let bar = \"furchtbar\";\n-    /// // this would be clearer as `eprintln!(\"foo: {:?}\", bar);`\n     /// writeln!(&mut std::io::stderr(), \"foo: {:?}\", bar).unwrap();\n+    /// writeln!(&mut std::io::stdout(), \"foo: {:?}\", bar).unwrap();\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::io::Write;\n+    /// # let bar = \"furchtbar\";\n+    /// eprintln!(\"foo: {:?}\", bar);\n+    /// println!(\"foo: {:?}\", bar);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub EXPLICIT_WRITE,"}, {"sha": "b88e53aeca693d42f40d3d69f82a6ef17ac4b276", "filename": "src/tools/clippy/clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -20,16 +20,15 @@ declare_clippy_lint! {\n     /// ```rust\n     /// struct Foo(i32);\n     ///\n-    /// // Bad\n     /// impl From<String> for Foo {\n     ///     fn from(s: String) -> Self {\n     ///         Foo(s.parse().unwrap())\n     ///     }\n     /// }\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```rust\n-    /// // Good\n     /// struct Foo(i32);\n     ///\n     /// impl TryFrom<String> for Foo {"}, {"sha": "f850ea31f4d6e54b249587e0390df2685d4ed5dd", "filename": "src/tools/clippy/clippy_lints/src/float_literal.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -19,11 +19,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let v: f32 = 0.123_456_789_9;\n     /// println!(\"{}\", v); //  0.123_456_789\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let v: f64 = 0.123_456_789_9;\n     /// println!(\"{}\", v); //  0.123_456_789_9\n     /// ```"}, {"sha": "df9b41d2c98bef1fe10d2f1eca1fe10e41477aab", "filename": "src/tools/clippy/clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -35,8 +35,7 @@ declare_clippy_lint! {\n     /// let _ = a.exp() - 1.0;\n     /// ```\n     ///\n-    /// is better expressed as\n-    ///\n+    /// Use instead:\n     /// ```rust\n     /// let a = 3f32;\n     /// let _ = a.cbrt();"}, {"sha": "3084c70589fa331fe89206432622d0ead7fe36fc", "filename": "src/tools/clippy/clippy_lints/src/format.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -25,12 +25,13 @@ declare_clippy_lint! {\n     ///\n     /// ### Examples\n     /// ```rust\n-    ///\n-    /// // Bad\n     /// let foo = \"foo\";\n     /// format!(\"{}\", foo);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// let foo = \"foo\";\n     /// foo.to_owned();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "db0166da57f0e343fb65e3898b8320b3b42bd1f3", "filename": "src/tools/clippy/clippy_lints/src/formatting.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformatting.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -36,12 +36,18 @@ declare_clippy_lint! {\n     /// This is either a typo in the binary operator or confusing.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// if foo <- 30 { // this should be `foo < -30` but looks like a different operator\n-    /// }\n+    /// ```rust\n+    /// # let foo = true;\n+    /// # let bar = false;\n+    /// // &&! looks like a different operator\n+    /// if foo &&! bar {}\n+    /// ```\n     ///\n-    /// if foo &&! bar { // this should be `foo && !bar` but looks like a different operator\n-    /// }\n+    /// Use instead:\n+    /// ```rust\n+    /// # let foo = true;\n+    /// # let bar = false;\n+    /// if foo && !bar {}\n     /// ```\n     #[clippy::version = \"1.40.0\"]\n     pub SUSPICIOUS_UNARY_OP_FORMATTING,"}, {"sha": "0748ab45252ad3d8decd4ad9b8e80a99afc0f29c", "filename": "src/tools/clippy/clippy_lints/src/get_first.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_first.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,69 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{is_slice_of_primitives, match_def_path, paths};\n+use if_chain::if_chain;\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Spanned;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for using `x.get(0)` instead of\n+    /// `x.first()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Using `x.first()` is easier to read and has the same\n+    /// result.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // Bad\n+    /// let x = vec![2, 3, 5];\n+    /// let first_element = x.get(0);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // Good\n+    /// let x = vec![2, 3, 5];\n+    /// let first_element = x.first();\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub GET_FIRST,\n+    style,\n+    \"Using `x.get(0)` when `x.first()` is simpler\"\n+}\n+declare_lint_pass!(GetFirst => [GET_FIRST]);\n+\n+impl<'tcx> LateLintPass<'tcx> for GetFirst {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if_chain! {\n+            if let hir::ExprKind::MethodCall(_, [struct_calling_on, method_arg], _) = &expr.kind;\n+            if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+            if match_def_path(cx, expr_def_id, &paths::SLICE_GET);\n+\n+            if let Some(_) = is_slice_of_primitives(cx, struct_calling_on);\n+            if let hir::ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = method_arg.kind;\n+\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let slice_name = snippet_with_applicability(\n+                    cx,\n+                    struct_calling_on.span, \"..\",\n+                    &mut applicability,\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    GET_FIRST,\n+                    expr.span,\n+                    &format!(\"accessing first element with `{0}.get(0)`\", slice_name),\n+                    \"try\",\n+                    format!(\"{}.first()\", slice_name),\n+                    applicability,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "df29d9308e7124da07b112998729023abbba7e17", "filename": "src/tools/clippy/clippy_lints/src/get_last_with_len.rs", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=357bc27904d4a99c83d4b01272c34e0e54934fa5", "patch": "@@ -1,107 +0,0 @@\n-//! lint on using `x.get(x.len() - 1)` instead of `x.last()`\n-\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::SpanlessEq;\n-use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n-use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Spanned;\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for using `x.get(x.len() - 1)` instead of\n-    /// `x.last()`.\n-    ///\n-    /// ### Why is this bad?\n-    /// Using `x.last()` is easier to read and has the same\n-    /// result.\n-    ///\n-    /// Note that using `x[x.len() - 1]` is semantically different from\n-    /// `x.last()`.  Indexing into the array will panic on out-of-bounds\n-    /// accesses, while `x.get()` and `x.last()` will return `None`.\n-    ///\n-    /// There is another lint (get_unwrap) that covers the case of using\n-    /// `x.get(index).unwrap()` instead of `x[index]`.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// // Bad\n-    /// let x = vec![2, 3, 5];\n-    /// let last_element = x.get(x.len() - 1);\n-    ///\n-    /// // Good\n-    /// let x = vec![2, 3, 5];\n-    /// let last_element = x.last();\n-    /// ```\n-    #[clippy::version = \"1.37.0\"]\n-    pub GET_LAST_WITH_LEN,\n-    complexity,\n-    \"Using `x.get(x.len() - 1)` when `x.last()` is correct and simpler\"\n-}\n-\n-declare_lint_pass!(GetLastWithLen => [GET_LAST_WITH_LEN]);\n-\n-impl<'tcx> LateLintPass<'tcx> for GetLastWithLen {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            // Is a method call\n-            if let ExprKind::MethodCall(path, args, _) = expr.kind;\n-\n-            // Method name is \"get\"\n-            if path.ident.name == sym!(get);\n-\n-            // Argument 0 (the struct we're calling the method on) is a vector\n-            if let Some(struct_calling_on) = args.get(0);\n-            let struct_ty = cx.typeck_results().expr_ty(struct_calling_on);\n-            if is_type_diagnostic_item(cx, struct_ty, sym::Vec);\n-\n-            // Argument to \"get\" is a subtraction\n-            if let Some(get_index_arg) = args.get(1);\n-            if let ExprKind::Binary(\n-                Spanned {\n-                    node: BinOpKind::Sub,\n-                    ..\n-                },\n-                lhs,\n-                rhs,\n-            ) = &get_index_arg.kind;\n-\n-            // LHS of subtraction is \"x.len()\"\n-            if let ExprKind::MethodCall(arg_lhs_path, lhs_args, _) = &lhs.kind;\n-            if arg_lhs_path.ident.name == sym::len;\n-            if let Some(arg_lhs_struct) = lhs_args.get(0);\n-\n-            // The two vectors referenced (x in x.get(...) and in x.len())\n-            if SpanlessEq::new(cx).eq_expr(struct_calling_on, arg_lhs_struct);\n-\n-            // RHS of subtraction is 1\n-            if let ExprKind::Lit(rhs_lit) = &rhs.kind;\n-            if let LitKind::Int(1, ..) = rhs_lit.node;\n-\n-            then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                let vec_name = snippet_with_applicability(\n-                    cx,\n-                    struct_calling_on.span, \"vec\",\n-                    &mut applicability,\n-                );\n-\n-                span_lint_and_sugg(\n-                    cx,\n-                    GET_LAST_WITH_LEN,\n-                    expr.span,\n-                    &format!(\"accessing last element with `{0}.get({0}.len() - 1)`\", vec_name),\n-                    \"try\",\n-                    format!(\"{}.last()\", vec_name),\n-                    applicability,\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "419ea5a6811b87884acd5822d0e3fb979b7803ca", "filename": "src/tools/clippy/clippy_lints/src/identity_op.rs", "status": "modified", "additions": 72, "deletions": 53, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fidentity_op.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,15 +1,14 @@\n-use clippy_utils::get_parent_expr;\n-use clippy_utils::source::snippet;\n-use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind};\n+use clippy_utils::consts::{constant_full_int, constant_simple, Constant, FullInt};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{clip, unsext};\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n-use clippy_utils::consts::{constant_full_int, constant_simple, Constant, FullInt};\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{clip, unsext};\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for identity operations, e.g., `x + 0`.\n@@ -23,11 +22,6 @@ declare_clippy_lint! {\n     /// # let x = 1;\n     /// x / 1 + 0 * 1 - 0 | 0;\n     /// ```\n-    ///\n-    /// ### Known problems\n-    /// False negatives: `f(0 + if b { 1 } else { 2 } + 3);` is reducible to\n-    /// `f(if b { 1 } else { 2 } + 3);`. But the lint doesn't trigger for the code.\n-    /// See [#8724](https://github.com/rust-lang/rust-clippy/issues/8724)\n     #[clippy::version = \"pre 1.29.0\"]\n     pub IDENTITY_OP,\n     complexity,\n@@ -45,56 +39,73 @@ impl<'tcx> LateLintPass<'tcx> for IdentityOp {\n             if !is_allowed(cx, *cmp, left, right) {\n                 match cmp.node {\n                     BinOpKind::Add | BinOpKind::BitOr | BinOpKind::BitXor => {\n-                        if reducible_to_right(cx, expr, right) {\n-                            check(cx, left, 0, expr.span, right.span);\n-                        }\n-                        check(cx, right, 0, expr.span, left.span);\n+                        check(cx, left, 0, expr.span, right.span, needs_parenthesis(cx, expr, right));\n+                        check(cx, right, 0, expr.span, left.span, Parens::Unneeded);\n                     },\n                     BinOpKind::Shl | BinOpKind::Shr | BinOpKind::Sub => {\n-                        check(cx, right, 0, expr.span, left.span);\n+                        check(cx, right, 0, expr.span, left.span, Parens::Unneeded);\n                     },\n                     BinOpKind::Mul => {\n-                        if reducible_to_right(cx, expr, right) {\n-                            check(cx, left, 1, expr.span, right.span);\n-                        }\n-                        check(cx, right, 1, expr.span, left.span);\n+                        check(cx, left, 1, expr.span, right.span, needs_parenthesis(cx, expr, right));\n+                        check(cx, right, 1, expr.span, left.span, Parens::Unneeded);\n                     },\n-                    BinOpKind::Div => check(cx, right, 1, expr.span, left.span),\n+                    BinOpKind::Div => check(cx, right, 1, expr.span, left.span, Parens::Unneeded),\n                     BinOpKind::BitAnd => {\n-                        if reducible_to_right(cx, expr, right) {\n-                            check(cx, left, -1, expr.span, right.span);\n-                        }\n-                        check(cx, right, -1, expr.span, left.span);\n-                    },\n-                    BinOpKind::Rem => {\n-                        // Don't call reducible_to_right because N % N is always reducible to 1\n-                        check_remainder(cx, left, right, expr.span, left.span);\n+                        check(cx, left, -1, expr.span, right.span, needs_parenthesis(cx, expr, right));\n+                        check(cx, right, -1, expr.span, left.span, Parens::Unneeded);\n                     },\n+                    BinOpKind::Rem => check_remainder(cx, left, right, expr.span, left.span),\n                     _ => (),\n                 }\n             }\n         }\n     }\n }\n \n-/// Checks if `left op ..right` can be actually reduced to `right`\n-/// e.g. `0 + if b { 1 } else { 2 } + if b { 3 } else { 4 }`\n-/// cannot be reduced to `if b { 1 } else { 2 } +  if b { 3 } else { 4 }`\n+#[derive(Copy, Clone)]\n+enum Parens {\n+    Needed,\n+    Unneeded,\n+}\n+\n+/// Checks if `left op right` needs parenthesis when reduced to `right`\n+/// e.g. `0 + if b { 1 } else { 2 } + if b { 3 } else { 4 }` cannot be reduced\n+/// to `if b { 1 } else { 2 } + if b { 3 } else { 4 }` where the `if` could be\n+/// interpreted as a statement\n+///\n /// See #8724\n-fn reducible_to_right(cx: &LateContext<'_>, binary: &Expr<'_>, right: &Expr<'_>) -> bool {\n-    if let ExprKind::If(..) | ExprKind::Match(..) | ExprKind::Block(..) | ExprKind::Loop(..) = right.kind {\n-        is_toplevel_binary(cx, binary)\n-    } else {\n-        true\n+fn needs_parenthesis(cx: &LateContext<'_>, binary: &Expr<'_>, right: &Expr<'_>) -> Parens {\n+    match right.kind {\n+        ExprKind::Binary(_, lhs, _) | ExprKind::Cast(lhs, _) => {\n+            // ensure we're checking against the leftmost expression of `right`\n+            //\n+            //     ~~~ `lhs`\n+            // 0 + {4} * 2\n+            //     ~~~~~~~ `right`\n+            return needs_parenthesis(cx, binary, lhs);\n+        },\n+        ExprKind::If(..) | ExprKind::Match(..) | ExprKind::Block(..) | ExprKind::Loop(..) => {},\n+        _ => return Parens::Unneeded,\n     }\n-}\n \n-fn is_toplevel_binary(cx: &LateContext<'_>, must_be_binary: &Expr<'_>) -> bool {\n-    if let Some(parent) = get_parent_expr(cx, must_be_binary) && let ExprKind::Binary(..) = &parent.kind {\n-        false\n-    } else {\n-        true\n+    let mut prev_id = binary.hir_id;\n+    for (_, node) in cx.tcx.hir().parent_iter(binary.hir_id) {\n+        if let Node::Expr(expr) = node\n+            && let ExprKind::Binary(_, lhs, _) | ExprKind::Cast(lhs, _) = expr.kind\n+            && lhs.hir_id == prev_id\n+        {\n+            // keep going until we find a node that encompasses left of `binary`\n+            prev_id = expr.hir_id;\n+            continue;\n+        }\n+\n+        match node {\n+            Node::Block(_) | Node::Stmt(_) => break,\n+            _ => return Parens::Unneeded,\n+        };\n     }\n+\n+    Parens::Needed\n }\n \n fn is_allowed(cx: &LateContext<'_>, cmp: BinOp, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n@@ -115,11 +126,11 @@ fn check_remainder(cx: &LateContext<'_>, left: &Expr<'_>, right: &Expr<'_>, span\n         (Some(FullInt::U(lv)), Some(FullInt::U(rv))) => lv < rv,\n         _ => return,\n     } {\n-        span_ineffective_operation(cx, span, arg);\n+        span_ineffective_operation(cx, span, arg, Parens::Unneeded);\n     }\n }\n \n-fn check(cx: &LateContext<'_>, e: &Expr<'_>, m: i8, span: Span, arg: Span) {\n+fn check(cx: &LateContext<'_>, e: &Expr<'_>, m: i8, span: Span, arg: Span, parens: Parens) {\n     if let Some(Constant::Int(v)) = constant_simple(cx, cx.typeck_results(), e).map(Constant::peel_refs) {\n         let check = match *cx.typeck_results().expr_ty(e).peel_refs().kind() {\n             ty::Int(ity) => unsext(cx.tcx, -1_i128, ity),\n@@ -132,19 +143,27 @@ fn check(cx: &LateContext<'_>, e: &Expr<'_>, m: i8, span: Span, arg: Span) {\n             1 => v == 1,\n             _ => unreachable!(),\n         } {\n-            span_ineffective_operation(cx, span, arg);\n+            span_ineffective_operation(cx, span, arg, parens);\n         }\n     }\n }\n \n-fn span_ineffective_operation(cx: &LateContext<'_>, span: Span, arg: Span) {\n-    span_lint(\n+fn span_ineffective_operation(cx: &LateContext<'_>, span: Span, arg: Span, parens: Parens) {\n+    let mut applicability = Applicability::MachineApplicable;\n+    let expr_snippet = snippet_with_applicability(cx, arg, \"..\", &mut applicability);\n+\n+    let suggestion = match parens {\n+        Parens::Needed => format!(\"({expr_snippet})\"),\n+        Parens::Unneeded => expr_snippet.into_owned(),\n+    };\n+\n+    span_lint_and_sugg(\n         cx,\n         IDENTITY_OP,\n         span,\n-        &format!(\n-            \"the operation is ineffective. Consider reducing it to `{}`\",\n-            snippet(cx, arg, \"..\")\n-        ),\n+        \"this operation has no effect\",\n+        \"consider reducing it to\",\n+        suggestion,\n+        applicability,\n     );\n }"}, {"sha": "63ac092dfaf1230b0239da8f8dbdd89270673b2d", "filename": "src/tools/clippy/clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 57, "deletions": 31, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,12 +1,13 @@\n //! lint when there is a large size difference between variants on an enum\n \n-use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{diagnostics::span_lint_and_then, ty::is_copy};\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::layout::LayoutOf;\n+use rustc_middle::ty::{Adt, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n@@ -26,6 +27,15 @@ declare_clippy_lint! {\n     /// the overhead is negligible and the boxing is counter-productive. Always\n     /// measure the change this lint suggests.\n     ///\n+    /// For types that implement `Copy`, the suggestion to `Box` a variant's\n+    /// data would require removing the trait impl. The types can of course\n+    /// still be `Clone`, but that is worse ergonomically. Depending on the\n+    /// use case it may be possible to store the large data in an auxillary\n+    /// structure (e.g. Arena or ECS).\n+    ///\n+    /// The lint will ignore generic types if the layout depends on the\n+    /// generics, even if the size difference will be large anyway.\n+    ///\n     /// ### Example\n     /// ```rust\n     /// // Bad\n@@ -74,7 +84,7 @@ struct VariantInfo {\n impl_lint_pass!(LargeEnumVariant => [LARGE_ENUM_VARIANT]);\n \n impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n-    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &Item<'tcx>) {\n         if in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }\n@@ -132,41 +142,57 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n                         let fields = def.variants[variants_size[0].ind].data.fields();\n                         variants_size[0].fields_size.sort_by(|a, b| (a.size.cmp(&b.size)));\n                         let mut applicability = Applicability::MaybeIncorrect;\n-                        let sugg: Vec<(Span, String)> = variants_size[0]\n-                            .fields_size\n-                            .iter()\n-                            .rev()\n-                            .map_while(|val| {\n-                                if difference > self.maximum_size_difference_allowed {\n-                                    difference = difference.saturating_sub(val.size);\n-                                    Some((\n-                                        fields[val.ind].ty.span,\n-                                        format!(\n-                                            \"Box<{}>\",\n-                                            snippet_with_applicability(\n-                                                cx,\n-                                                fields[val.ind].ty.span,\n-                                                \"..\",\n-                                                &mut applicability\n-                                            )\n-                                            .into_owned()\n-                                        ),\n-                                    ))\n-                                } else {\n-                                    None\n-                                }\n-                            })\n-                            .collect();\n+                        if is_copy(cx, ty) || maybe_copy(cx, ty) {\n+                            diag.span_note(\n+                                item.ident.span,\n+                                \"boxing a variant would require the type no longer be `Copy`\",\n+                            );\n+                        } else {\n+                            let sugg: Vec<(Span, String)> = variants_size[0]\n+                                .fields_size\n+                                .iter()\n+                                .rev()\n+                                .map_while(|val| {\n+                                    if difference > self.maximum_size_difference_allowed {\n+                                        difference = difference.saturating_sub(val.size);\n+                                        Some((\n+                                            fields[val.ind].ty.span,\n+                                            format!(\n+                                                \"Box<{}>\",\n+                                                snippet_with_applicability(\n+                                                    cx,\n+                                                    fields[val.ind].ty.span,\n+                                                    \"..\",\n+                                                    &mut applicability\n+                                                )\n+                                                .into_owned()\n+                                            ),\n+                                        ))\n+                                    } else {\n+                                        None\n+                                    }\n+                                })\n+                                .collect();\n \n-                        if !sugg.is_empty() {\n-                            diag.multipart_suggestion(help_text, sugg, Applicability::MaybeIncorrect);\n-                            return;\n+                            if !sugg.is_empty() {\n+                                diag.multipart_suggestion(help_text, sugg, Applicability::MaybeIncorrect);\n+                                return;\n+                            }\n                         }\n-\n                         diag.span_help(def.variants[variants_size[0].ind].span, help_text);\n                     },\n                 );\n             }\n         }\n     }\n }\n+\n+fn maybe_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    if let Adt(_def, substs) = ty.kind()\n+        && substs.types().next().is_some()\n+        && let Some(copy_trait) = cx.tcx.lang_items().copy_trait()\n+    {\n+        return cx.tcx.non_blanket_impls_for_ty(copy_trait, ty).next().is_some();\n+    }\n+    false\n+}"}, {"sha": "56bbbbbc819e5aa58020185a6ddee98dc0be15d0", "filename": "src/tools/clippy/clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                 if let hir::ExprKind::If(hir::Expr { kind: hir::ExprKind::DropTemps(cond), ..}, then, else_) = if_.kind;\n                 if !is_local_used(cx, *cond, canonical_id);\n                 if let hir::ExprKind::Block(then, _) = then.kind;\n-                if let Some(value) = check_assign(cx, canonical_id, &*then);\n+                if let Some(value) = check_assign(cx, canonical_id, then);\n                 if !is_local_used(cx, value, canonical_id);\n                 then {\n                     let span = stmt.span.to(if_.span);"}, {"sha": "d4ec046d0bb08b2100dc3cc585123b473c2ce2d2", "filename": "src/tools/clippy/clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -4,6 +4,7 @@\n \n store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS),\n+    LintId::of(almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE),\n     LintId::of(approx_const::APPROX_CONSTANT),\n     LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n     LintId::of(assign_ops::ASSIGN_OP_PATTERN),\n@@ -24,6 +25,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n     LintId::of(booleans::LOGIC_BUG),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(borrow_deref_ref::BORROW_DEREF_REF),\n     LintId::of(bytes_count_to_len::BYTES_COUNT_TO_LEN),\n     LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n@@ -36,7 +38,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(casts::UNNECESSARY_CAST),\n     LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n     LintId::of(collapsible_if::COLLAPSIBLE_IF),\n-    LintId::of(collapsible_match::COLLAPSIBLE_MATCH),\n     LintId::of(comparison_chain::COMPARISON_CHAIN),\n     LintId::of(copies::IFS_SAME_COND),\n     LintId::of(copies::IF_SAME_THEN_ELSE),\n@@ -91,7 +92,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n     LintId::of(functions::RESULT_UNIT_ERR),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n-    LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n+    LintId::of(get_first::GET_FIRST),\n     LintId::of(identity_op::IDENTITY_OP),\n     LintId::of(if_let_mutex::IF_LET_MUTEX),\n     LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n@@ -132,23 +133,25 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(main_recursion::MAIN_RECURSION),\n     LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n     LintId::of(manual_bits::MANUAL_BITS),\n-    LintId::of(manual_map::MANUAL_MAP),\n     LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n     LintId::of(manual_strip::MANUAL_STRIP),\n-    LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n     LintId::of(map_clone::MAP_CLONE),\n     LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n     LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n     LintId::of(match_result_ok::MATCH_RESULT_OK),\n-    LintId::of(match_str_case_mismatch::MATCH_STR_CASE_MISMATCH),\n+    LintId::of(matches::COLLAPSIBLE_MATCH),\n     LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n+    LintId::of(matches::MANUAL_MAP),\n+    LintId::of(matches::MANUAL_UNWRAP_OR),\n     LintId::of(matches::MATCH_AS_REF),\n     LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n     LintId::of(matches::MATCH_OVERLAPPING_ARM),\n     LintId::of(matches::MATCH_REF_PATS),\n     LintId::of(matches::MATCH_SINGLE_BINDING),\n+    LintId::of(matches::MATCH_STR_CASE_MISMATCH),\n     LintId::of(matches::NEEDLESS_MATCH),\n     LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n+    LintId::of(matches::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(matches::SINGLE_MATCH),\n     LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n     LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n@@ -166,6 +169,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::FILTER_MAP_IDENTITY),\n     LintId::of(methods::FILTER_NEXT),\n     LintId::of(methods::FLAT_MAP_IDENTITY),\n+    LintId::of(methods::GET_LAST_WITH_LEN),\n     LintId::of(methods::INSPECT_FOR_EACH),\n     LintId::of(methods::INTO_ITER_ON_REF),\n     LintId::of(methods::IS_DIGIT_ASCII_RADIX),\n@@ -189,6 +193,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::NEEDLESS_OPTION_TAKE),\n     LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::NEW_RET_NO_SELF),\n+    LintId::of(methods::NO_EFFECT_REPLACE),\n     LintId::of(methods::OK_EXPECT),\n     LintId::of(methods::OPTION_AS_REF_DEREF),\n     LintId::of(methods::OPTION_FILTER_MAP),\n@@ -278,7 +283,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(self_assignment::SELF_ASSIGNMENT),\n     LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n     LintId::of(serde_api::SERDE_API_MISUSE),\n-    LintId::of(significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n     LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n     LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n@@ -289,6 +293,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n     LintId::of(swap::ALMOST_SWAPPED),\n     LintId::of(swap::MANUAL_SWAP),\n+    LintId::of(swap_ptr_to_ref::SWAP_PTR_TO_REF),\n     LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n     LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n     LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n@@ -302,6 +307,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(transmute::TRANSMUTE_NUM_TO_BYTES),\n     LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n     LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n+    LintId::of(transmute::USELESS_TRANSMUTE),\n     LintId::of(transmute::WRONG_TRANSMUTE),\n     LintId::of(transmuting_null::TRANSMUTING_NULL),\n     LintId::of(types::BORROWED_BOX),"}, {"sha": "4f1c3673f853cd9cf8fb451c2f3a2c8ac4e01985", "filename": "src/tools/clippy/clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -5,6 +5,7 @@\n store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n     LintId::of(attrs::DEPRECATED_CFG_ATTR),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(borrow_deref_ref::BORROW_DEREF_REF),\n     LintId::of(bytes_count_to_len::BYTES_COUNT_TO_LEN),\n     LintId::of(casts::CHAR_LIT_AS_U8),\n     LintId::of(casts::UNNECESSARY_CAST),\n@@ -15,7 +16,6 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(explicit_write::EXPLICIT_WRITE),\n     LintId::of(format::USELESS_FORMAT),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n-    LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n     LintId::of(identity_op::IDENTITY_OP),\n     LintId::of(int_plus_one::INT_PLUS_ONE),\n     LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n@@ -25,9 +25,9 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(loops::SINGLE_ELEMENT_LOOP),\n     LintId::of(loops::WHILE_LET_LOOP),\n     LintId::of(manual_strip::MANUAL_STRIP),\n-    LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n     LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n     LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n+    LintId::of(matches::MANUAL_UNWRAP_OR),\n     LintId::of(matches::MATCH_AS_REF),\n     LintId::of(matches::MATCH_SINGLE_BINDING),\n     LintId::of(matches::NEEDLESS_MATCH),\n@@ -37,6 +37,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(methods::FILTER_MAP_IDENTITY),\n     LintId::of(methods::FILTER_NEXT),\n     LintId::of(methods::FLAT_MAP_IDENTITY),\n+    LintId::of(methods::GET_LAST_WITH_LEN),\n     LintId::of(methods::INSPECT_FOR_EACH),\n     LintId::of(methods::ITER_COUNT),\n     LintId::of(methods::MANUAL_FILTER_MAP),\n@@ -90,6 +91,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n     LintId::of(transmute::TRANSMUTE_NUM_TO_BYTES),\n     LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n+    LintId::of(transmute::USELESS_TRANSMUTE),\n     LintId::of(types::BORROWED_BOX),\n     LintId::of(types::TYPE_COMPLEXITY),\n     LintId::of(types::VEC_BOX),"}, {"sha": "50cdd0af923051f2453dc36a62f3506f94a6bbac", "filename": "src/tools/clippy/clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -39,7 +39,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(loops::ITER_NEXT_LOOP),\n     LintId::of(loops::NEVER_LOOP),\n     LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n-    LintId::of(match_str_case_mismatch::MATCH_STR_CASE_MISMATCH),\n+    LintId::of(matches::MATCH_STR_CASE_MISMATCH),\n     LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n     LintId::of(methods::CLONE_DOUBLE_REF),\n     LintId::of(methods::ITERATOR_STEP_BY_ZERO),"}, {"sha": "b927ba3b17c0ec04ae34fd75ebfa46b9b130ff06", "filename": "src/tools/clippy/clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -34,10 +34,10 @@ store.register_lints(&[\n     #[cfg(feature = \"internal\")]\n     utils::internal_lints::UNNECESSARY_SYMBOL_STR,\n     absurd_extreme_comparisons::ABSURD_EXTREME_COMPARISONS,\n+    almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE,\n     approx_const::APPROX_CONSTANT,\n-    arithmetic::FLOAT_ARITHMETIC,\n-    arithmetic::INTEGER_ARITHMETIC,\n     as_conversions::AS_CONVERSIONS,\n+    as_underscore::AS_UNDERSCORE,\n     asm_syntax::INLINE_ASM_X86_ATT_SYNTAX,\n     asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX,\n     assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n@@ -64,6 +64,7 @@ store.register_lints(&[\n     booleans::LOGIC_BUG,\n     booleans::NONMINIMAL_BOOL,\n     borrow_as_ptr::BORROW_AS_PTR,\n+    borrow_deref_ref::BORROW_DEREF_REF,\n     bytecount::NAIVE_BYTECOUNT,\n     bytes_count_to_len::BYTES_COUNT_TO_LEN,\n     cargo::CARGO_COMMON_METADATA,\n@@ -93,7 +94,6 @@ store.register_lints(&[\n     cognitive_complexity::COGNITIVE_COMPLEXITY,\n     collapsible_if::COLLAPSIBLE_ELSE_IF,\n     collapsible_if::COLLAPSIBLE_IF,\n-    collapsible_match::COLLAPSIBLE_MATCH,\n     comparison_chain::COMPARISON_CHAIN,\n     copies::BRANCHES_SHARING_CODE,\n     copies::IFS_SAME_COND,\n@@ -124,6 +124,7 @@ store.register_lints(&[\n     doc::MISSING_PANICS_DOC,\n     doc::MISSING_SAFETY_DOC,\n     doc::NEEDLESS_DOCTEST_MAIN,\n+    doc_link_with_quotes::DOC_LINK_WITH_QUOTES,\n     double_comparison::DOUBLE_COMPARISONS,\n     double_parens::DOUBLE_PARENS,\n     drop_forget_ref::DROP_COPY,\n@@ -183,7 +184,7 @@ store.register_lints(&[\n     functions::TOO_MANY_ARGUMENTS,\n     functions::TOO_MANY_LINES,\n     future_not_send::FUTURE_NOT_SEND,\n-    get_last_with_len::GET_LAST_WITH_LEN,\n+    get_first::GET_FIRST,\n     identity_op::IDENTITY_OP,\n     if_let_mutex::IF_LET_MUTEX,\n     if_not_else::IF_NOT_ELSE,\n@@ -250,33 +251,36 @@ store.register_lints(&[\n     manual_assert::MANUAL_ASSERT,\n     manual_async_fn::MANUAL_ASYNC_FN,\n     manual_bits::MANUAL_BITS,\n-    manual_map::MANUAL_MAP,\n     manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n     manual_ok_or::MANUAL_OK_OR,\n     manual_strip::MANUAL_STRIP,\n-    manual_unwrap_or::MANUAL_UNWRAP_OR,\n     map_clone::MAP_CLONE,\n     map_err_ignore::MAP_ERR_IGNORE,\n     map_unit_fn::OPTION_MAP_UNIT_FN,\n     map_unit_fn::RESULT_MAP_UNIT_FN,\n-    match_on_vec_items::MATCH_ON_VEC_ITEMS,\n     match_result_ok::MATCH_RESULT_OK,\n-    match_str_case_mismatch::MATCH_STR_CASE_MISMATCH,\n+    matches::COLLAPSIBLE_MATCH,\n     matches::INFALLIBLE_DESTRUCTURING_MATCH,\n+    matches::MANUAL_MAP,\n+    matches::MANUAL_UNWRAP_OR,\n     matches::MATCH_AS_REF,\n     matches::MATCH_BOOL,\n     matches::MATCH_LIKE_MATCHES_MACRO,\n+    matches::MATCH_ON_VEC_ITEMS,\n     matches::MATCH_OVERLAPPING_ARM,\n     matches::MATCH_REF_PATS,\n     matches::MATCH_SAME_ARMS,\n     matches::MATCH_SINGLE_BINDING,\n+    matches::MATCH_STR_CASE_MISMATCH,\n     matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n     matches::MATCH_WILD_ERR_ARM,\n     matches::NEEDLESS_MATCH,\n     matches::REDUNDANT_PATTERN_MATCHING,\n     matches::REST_PAT_IN_FULLY_BOUND_STRUCTS,\n+    matches::SIGNIFICANT_DROP_IN_SCRUTINEE,\n     matches::SINGLE_MATCH,\n     matches::SINGLE_MATCH_ELSE,\n+    matches::TRY_ERR,\n     matches::WILDCARD_ENUM_MATCH_ARM,\n     matches::WILDCARD_IN_OR_PATTERNS,\n     mem_forget::MEM_FORGET,\n@@ -302,6 +306,7 @@ store.register_lints(&[\n     methods::FLAT_MAP_IDENTITY,\n     methods::FLAT_MAP_OPTION,\n     methods::FROM_ITER_INSTEAD_OF_COLLECT,\n+    methods::GET_LAST_WITH_LEN,\n     methods::GET_UNWRAP,\n     methods::IMPLICIT_CLONE,\n     methods::INEFFICIENT_TO_STRING,\n@@ -330,6 +335,7 @@ store.register_lints(&[\n     methods::NEEDLESS_OPTION_TAKE,\n     methods::NEEDLESS_SPLITN,\n     methods::NEW_RET_NO_SELF,\n+    methods::NO_EFFECT_REPLACE,\n     methods::OK_EXPECT,\n     methods::OPTION_AS_REF_DEREF,\n     methods::OPTION_FILTER_MAP,\n@@ -377,6 +383,7 @@ store.register_lints(&[\n     misc_early::UNNEEDED_WILDCARD_PATTERN,\n     misc_early::UNSEPARATED_LITERAL_SUFFIX,\n     misc_early::ZERO_PREFIXED_LITERAL,\n+    mismatching_type_param_order::MISMATCHING_TYPE_PARAM_ORDER,\n     missing_const_for_fn::MISSING_CONST_FOR_FN,\n     missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n     missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES,\n@@ -418,6 +425,8 @@ store.register_lints(&[\n     non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS,\n     non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY,\n     nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES,\n+    numeric_arithmetic::FLOAT_ARITHMETIC,\n+    numeric_arithmetic::INTEGER_ARITHMETIC,\n     octal_escapes::OCTAL_ESCAPES,\n     only_used_in_recursion::ONLY_USED_IN_RECURSION,\n     open_options::NONSENSICAL_OPEN_OPTIONS,\n@@ -473,7 +482,6 @@ store.register_lints(&[\n     shadow::SHADOW_REUSE,\n     shadow::SHADOW_SAME,\n     shadow::SHADOW_UNRELATED,\n-    significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE,\n     single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES,\n     single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n     size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n@@ -493,6 +501,7 @@ store.register_lints(&[\n     suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n     swap::ALMOST_SWAPPED,\n     swap::MANUAL_SWAP,\n+    swap_ptr_to_ref::SWAP_PTR_TO_REF,\n     tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n     temporary_assignment::TEMPORARY_ASSIGNMENT,\n     to_digit_is_some::TO_DIGIT_IS_SOME,\n@@ -514,7 +523,6 @@ store.register_lints(&[\n     transmute::USELESS_TRANSMUTE,\n     transmute::WRONG_TRANSMUTE,\n     transmuting_null::TRANSMUTING_NULL,\n-    try_err::TRY_ERR,\n     types::BORROWED_BOX,\n     types::BOX_COLLECTION,\n     types::LINKEDLIST,\n@@ -544,6 +552,7 @@ store.register_lints(&[\n     unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n     unused_async::UNUSED_ASYNC,\n     unused_io_amount::UNUSED_IO_AMOUNT,\n+    unused_rounding::UNUSED_ROUNDING,\n     unused_self::UNUSED_SELF,\n     unused_unit::UNUSED_UNIT,\n     unwrap::PANICKING_UNWRAP,"}, {"sha": "642d629971d90b678b0509bac6daec53d6882356", "filename": "src/tools/clippy/clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -25,11 +25,10 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n     LintId::of(redundant_pub_crate::REDUNDANT_PUB_CRATE),\n     LintId::of(regex::TRIVIAL_REGEX),\n-    LintId::of(significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(strings::STRING_LIT_AS_BYTES),\n     LintId::of(suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n     LintId::of(trailing_empty_array::TRAILING_EMPTY_ARRAY),\n     LintId::of(transmute::TRANSMUTE_UNDEFINED_REPR),\n-    LintId::of(transmute::USELESS_TRANSMUTE),\n+    LintId::of(unused_rounding::UNUSED_ROUNDING),\n     LintId::of(use_self::USE_SELF),\n ])"}, {"sha": "48de92ae9452315992114a26fcb9a23df788435f", "filename": "src/tools/clippy/clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -26,6 +26,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(doc::DOC_MARKDOWN),\n     LintId::of(doc::MISSING_ERRORS_DOC),\n     LintId::of(doc::MISSING_PANICS_DOC),\n+    LintId::of(doc_link_with_quotes::DOC_LINK_WITH_QUOTES),\n     LintId::of(empty_enum::EMPTY_ENUM),\n     LintId::of(enum_variants::MODULE_NAME_REPETITIONS),\n     LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n@@ -50,8 +51,8 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(macro_use::MACRO_USE_IMPORTS),\n     LintId::of(manual_assert::MANUAL_ASSERT),\n     LintId::of(manual_ok_or::MANUAL_OK_OR),\n-    LintId::of(match_on_vec_items::MATCH_ON_VEC_ITEMS),\n     LintId::of(matches::MATCH_BOOL),\n+    LintId::of(matches::MATCH_ON_VEC_ITEMS),\n     LintId::of(matches::MATCH_SAME_ARMS),\n     LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n     LintId::of(matches::MATCH_WILD_ERR_ARM),\n@@ -66,6 +67,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(methods::UNNECESSARY_JOIN),\n     LintId::of(misc::FLOAT_CMP),\n     LintId::of(misc::USED_UNDERSCORE_BINDING),\n+    LintId::of(mismatching_type_param_order::MISMATCHING_TYPE_PARAM_ORDER),\n     LintId::of(mut_mut::MUT_MUT),\n     LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n     LintId::of(needless_continue::NEEDLESS_CONTINUE),"}, {"sha": "3695012f552389f7d7e7062218c293aac6387db9", "filename": "src/tools/clippy/clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -3,9 +3,8 @@\n // Manual edits will be overwritten.\n \n store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n-    LintId::of(arithmetic::FLOAT_ARITHMETIC),\n-    LintId::of(arithmetic::INTEGER_ARITHMETIC),\n     LintId::of(as_conversions::AS_CONVERSIONS),\n+    LintId::of(as_underscore::AS_UNDERSCORE),\n     LintId::of(asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n     LintId::of(asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n     LintId::of(attrs::ALLOW_ATTRIBUTES_WITHOUT_REASON),\n@@ -32,6 +31,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n     LintId::of(map_err_ignore::MAP_ERR_IGNORE),\n     LintId::of(matches::REST_PAT_IN_FULLY_BOUND_STRUCTS),\n+    LintId::of(matches::TRY_ERR),\n     LintId::of(matches::WILDCARD_ENUM_MATCH_ARM),\n     LintId::of(mem_forget::MEM_FORGET),\n     LintId::of(methods::CLONE_ON_REF_PTR),\n@@ -50,6 +50,8 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(module_style::MOD_MODULE_FILES),\n     LintId::of(module_style::SELF_NAMED_MODULE_FILES),\n     LintId::of(modulo_arithmetic::MODULO_ARITHMETIC),\n+    LintId::of(numeric_arithmetic::FLOAT_ARITHMETIC),\n+    LintId::of(numeric_arithmetic::INTEGER_ARITHMETIC),\n     LintId::of(panic_in_result_fn::PANIC_IN_RESULT_FN),\n     LintId::of(panic_unimplemented::PANIC),\n     LintId::of(panic_unimplemented::TODO),\n@@ -67,7 +69,6 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(strings::STRING_SLICE),\n     LintId::of(strings::STRING_TO_STRING),\n     LintId::of(strings::STR_TO_STRING),\n-    LintId::of(try_err::TRY_ERR),\n     LintId::of(types::RC_BUFFER),\n     LintId::of(types::RC_MUTEX),\n     LintId::of(undocumented_unsafe_blocks::UNDOCUMENTED_UNSAFE_BLOCKS),"}, {"sha": "35575351784a287786eba32e8b2b7dfc3934227f", "filename": "src/tools/clippy/clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -12,7 +12,6 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n     LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),\n     LintId::of(collapsible_if::COLLAPSIBLE_IF),\n-    LintId::of(collapsible_match::COLLAPSIBLE_MATCH),\n     LintId::of(comparison_chain::COMPARISON_CHAIN),\n     LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n     LintId::of(dereference::NEEDLESS_BORROW),\n@@ -31,6 +30,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(functions::DOUBLE_MUST_USE),\n     LintId::of(functions::MUST_USE_UNIT),\n     LintId::of(functions::RESULT_UNIT_ERR),\n+    LintId::of(get_first::GET_FIRST),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n     LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),\n@@ -45,11 +45,12 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(main_recursion::MAIN_RECURSION),\n     LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n     LintId::of(manual_bits::MANUAL_BITS),\n-    LintId::of(manual_map::MANUAL_MAP),\n     LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n     LintId::of(map_clone::MAP_CLONE),\n     LintId::of(match_result_ok::MATCH_RESULT_OK),\n+    LintId::of(matches::COLLAPSIBLE_MATCH),\n     LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n+    LintId::of(matches::MANUAL_MAP),\n     LintId::of(matches::MATCH_LIKE_MATCHES_MACRO),\n     LintId::of(matches::MATCH_OVERLAPPING_ARM),\n     LintId::of(matches::MATCH_REF_PATS),"}, {"sha": "7b13713c36e59abdc34f34765d7c18c91bfd45ee", "filename": "src/tools/clippy/clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -3,6 +3,7 @@\n // Manual edits will be overwritten.\n \n store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec![\n+    LintId::of(almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE),\n     LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n     LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE),\n@@ -23,11 +24,13 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(loops::EMPTY_LOOP),\n     LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n     LintId::of(loops::MUT_RANGE_BOUND),\n+    LintId::of(matches::SIGNIFICANT_DROP_IN_SCRUTINEE),\n+    LintId::of(methods::NO_EFFECT_REPLACE),\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n     LintId::of(rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT),\n-    LintId::of(significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n+    LintId::of(swap_ptr_to_ref::SWAP_PTR_TO_REF),\n ])"}, {"sha": "ee0416fc0ff5e32400f85c80e09869f9bace1f98", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -168,9 +168,10 @@ mod renamed_lints;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n mod absurd_extreme_comparisons;\n+mod almost_complete_letter_range;\n mod approx_const;\n-mod arithmetic;\n mod as_conversions;\n+mod as_underscore;\n mod asm_syntax;\n mod assertions_on_constants;\n mod assign_ops;\n@@ -183,6 +184,7 @@ mod blocks_in_if_conditions;\n mod bool_assert_comparison;\n mod booleans;\n mod borrow_as_ptr;\n+mod borrow_deref_ref;\n mod bytecount;\n mod bytes_count_to_len;\n mod cargo;\n@@ -191,7 +193,6 @@ mod casts;\n mod checked_conversions;\n mod cognitive_complexity;\n mod collapsible_if;\n-mod collapsible_match;\n mod comparison_chain;\n mod copies;\n mod copy_iterator;\n@@ -208,6 +209,7 @@ mod disallowed_methods;\n mod disallowed_script_idents;\n mod disallowed_types;\n mod doc;\n+mod doc_link_with_quotes;\n mod double_comparison;\n mod double_parens;\n mod drop_forget_ref;\n@@ -242,7 +244,7 @@ mod from_over_into;\n mod from_str_radix_10;\n mod functions;\n mod future_not_send;\n-mod get_last_with_len;\n+mod get_first;\n mod identity_op;\n mod if_let_mutex;\n mod if_not_else;\n@@ -278,24 +280,21 @@ mod main_recursion;\n mod manual_assert;\n mod manual_async_fn;\n mod manual_bits;\n-mod manual_map;\n mod manual_non_exhaustive;\n mod manual_ok_or;\n mod manual_strip;\n-mod manual_unwrap_or;\n mod map_clone;\n mod map_err_ignore;\n mod map_unit_fn;\n-mod match_on_vec_items;\n mod match_result_ok;\n-mod match_str_case_mismatch;\n mod matches;\n mod mem_forget;\n mod mem_replace;\n mod methods;\n mod minmax;\n mod misc;\n mod misc_early;\n+mod mismatching_type_param_order;\n mod missing_const_for_fn;\n mod missing_doc;\n mod missing_enforced_import_rename;\n@@ -328,6 +327,7 @@ mod non_expressive_names;\n mod non_octal_unix_permissions;\n mod non_send_fields_in_send_ty;\n mod nonstandard_macro_braces;\n+mod numeric_arithmetic;\n mod octal_escapes;\n mod only_used_in_recursion;\n mod open_options;\n@@ -367,7 +367,6 @@ mod self_named_constructors;\n mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n-mod significant_drop_in_scrutinee;\n mod single_char_lifetime_names;\n mod single_component_path_imports;\n mod size_of_in_element_count;\n@@ -378,14 +377,14 @@ mod strlen_on_c_strings;\n mod suspicious_operation_groupings;\n mod suspicious_trait_impl;\n mod swap;\n+mod swap_ptr_to_ref;\n mod tabs_in_doc_comments;\n mod temporary_assignment;\n mod to_digit_is_some;\n mod trailing_empty_array;\n mod trait_bounds;\n mod transmute;\n mod transmuting_null;\n-mod try_err;\n mod types;\n mod undocumented_unsafe_blocks;\n mod unicode;\n@@ -402,6 +401,7 @@ mod unnested_or_patterns;\n mod unsafe_removed_from_name;\n mod unused_async;\n mod unused_io_amount;\n+mod unused_rounding;\n mod unused_self;\n mod unused_unit;\n mod unwrap;\n@@ -562,7 +562,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(len_zero::LenZero));\n     store.register_late_pass(|| Box::new(attrs::Attributes));\n     store.register_late_pass(|| Box::new(blocks_in_if_conditions::BlocksInIfConditions));\n-    store.register_late_pass(|| Box::new(collapsible_match::CollapsibleMatch));\n     store.register_late_pass(|| Box::new(unicode::Unicode));\n     store.register_late_pass(|| Box::new(uninit_vec::UninitVec));\n     store.register_late_pass(|| Box::new(unit_hash::UnitHash));\n@@ -636,6 +635,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(mutex_atomic::Mutex));\n     store.register_late_pass(|| Box::new(needless_update::NeedlessUpdate));\n     store.register_late_pass(|| Box::new(needless_borrowed_ref::NeedlessBorrowedRef));\n+    store.register_late_pass(|| Box::new(borrow_deref_ref::BorrowDerefRef));\n     store.register_late_pass(|| Box::new(no_effect::NoEffect));\n     store.register_late_pass(|| Box::new(temporary_assignment::TemporaryAssignment));\n     store.register_late_pass(|| Box::new(transmute::Transmute));\n@@ -652,7 +652,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(strings::StringLitAsBytes));\n     store.register_late_pass(|| Box::new(derive::Derive));\n     store.register_late_pass(|| Box::new(derivable_impls::DerivableImpls));\n-    store.register_late_pass(|| Box::new(get_last_with_len::GetLastWithLen));\n     store.register_late_pass(|| Box::new(drop_forget_ref::DropForgetRef));\n     store.register_late_pass(|| Box::new(empty_enum::EmptyEnum));\n     store.register_late_pass(|| Box::new(absurd_extreme_comparisons::AbsurdExtremeComparisons));\n@@ -678,7 +677,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n     store.register_late_pass(|| Box::new(neg_multiply::NegMultiply));\n     store.register_late_pass(|| Box::new(mem_forget::MemForget));\n-    store.register_late_pass(|| Box::new(arithmetic::Arithmetic::default()));\n+    store.register_late_pass(|| Box::new(numeric_arithmetic::NumericArithmetic::default()));\n     store.register_late_pass(|| Box::new(assign_ops::AssignOps));\n     store.register_late_pass(|| Box::new(let_if_seq::LetIfSeq));\n     store.register_late_pass(|| Box::new(mixed_read_write_in_expression::EvalOrderDependence));\n@@ -700,7 +699,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     );\n     store.register_late_pass(move || Box::new(pass_by_ref_or_value));\n     store.register_late_pass(|| Box::new(ref_option_ref::RefOptionRef));\n-    store.register_late_pass(|| Box::new(try_err::TryErr));\n     store.register_late_pass(|| Box::new(bytecount::ByteCount));\n     store.register_late_pass(|| Box::new(infinite_iter::InfiniteIter));\n     store.register_late_pass(|| Box::new(inline_fn_without_body::InlineFnWithoutBody));\n@@ -812,7 +810,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(if_not_else::IfNotElse));\n     store.register_late_pass(|| Box::new(equatable_if_let::PatternEquality));\n     store.register_late_pass(|| Box::new(mut_mutex_lock::MutMutexLock));\n-    store.register_late_pass(|| Box::new(match_on_vec_items::MatchOnVecItems));\n     store.register_late_pass(|| Box::new(manual_async_fn::ManualAsyncFn));\n     store.register_late_pass(|| Box::new(vec_resize_to_zero::VecResizeToZero));\n     store.register_late_pass(|| Box::new(panic_in_result_fn::PanicInResultFn));\n@@ -830,7 +827,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(repeat_once::RepeatOnce));\n     store.register_late_pass(|| Box::new(unwrap_in_result::UnwrapInResult));\n     store.register_late_pass(|| Box::new(self_assignment::SelfAssignment));\n-    store.register_late_pass(|| Box::new(manual_unwrap_or::ManualUnwrapOr));\n     store.register_late_pass(|| Box::new(manual_ok_or::ManualOkOr));\n     store.register_late_pass(|| Box::new(float_equality_without_abs::FloatEqualityWithoutAbs));\n     store.register_late_pass(|| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n@@ -849,7 +845,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     store.register_late_pass(|| Box::new(redundant_slicing::RedundantSlicing));\n     store.register_late_pass(|| Box::new(from_str_radix_10::FromStrRadix10));\n-    store.register_late_pass(|| Box::new(manual_map::ManualMap));\n     store.register_late_pass(move || Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));\n     store.register_late_pass(|| Box::new(bool_assert_comparison::BoolAssertComparison));\n     store.register_early_pass(move || Box::new(module_style::ModStyle));\n@@ -875,7 +870,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n-    store.register_late_pass(|| Box::new(match_str_case_mismatch::MatchStrCaseMismatch));\n     store.register_late_pass(move || Box::new(format_args::FormatArgs));\n     store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n@@ -886,9 +880,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(borrow_as_ptr::BorrowAsPtr::new(msrv)));\n     store.register_late_pass(move || Box::new(manual_bits::ManualBits::new(msrv)));\n     store.register_late_pass(|| Box::new(default_union_representation::DefaultUnionRepresentation));\n+    store.register_early_pass(|| Box::new(doc_link_with_quotes::DocLinkWithQuotes));\n     store.register_late_pass(|| Box::new(only_used_in_recursion::OnlyUsedInRecursion));\n-    store.register_late_pass(|| Box::new(significant_drop_in_scrutinee::SignificantDropInScrutinee));\n-    store.register_late_pass(|| Box::new(dbg_macro::DbgMacro));\n+    let allow_dbg_in_tests = conf.allow_dbg_in_tests;\n+    store.register_late_pass(move || Box::new(dbg_macro::DbgMacro::new(allow_dbg_in_tests)));\n     let cargo_ignore_publish = conf.cargo_ignore_publish;\n     store.register_late_pass(move || {\n         Box::new(cargo::Cargo {\n@@ -906,6 +901,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(strings::TrimSplitWhitespace));\n     store.register_late_pass(|| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n     store.register_early_pass(|| Box::new(duplicate_mod::DuplicateMod::default()));\n+    store.register_late_pass(|| Box::new(get_first::GetFirst));\n+    store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n+    store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n+    store.register_late_pass(|| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n+    store.register_late_pass(|| Box::new(mismatching_type_param_order::TypeParamMismatch));\n+    store.register_late_pass(|| Box::new(as_underscore::AsUnderscore));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "d61be78895ffc50a41da823a7e10e7dfe5509197", "filename": "src/tools/clippy/clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -180,29 +180,24 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let opt = Some(1);\n-    ///\n-    /// // Bad\n+    /// # let res: Result<i32, std::io::Error> = Ok(1);\n     /// for x in opt {\n     ///     // ..\n     /// }\n     ///\n-    /// // Good\n-    /// if let Some(x) = opt {\n+    /// for x in &res {\n     ///     // ..\n     /// }\n     /// ```\n     ///\n-    /// // or\n-    ///\n+    /// Use instead:\n     /// ```rust\n+    /// # let opt = Some(1);\n     /// # let res: Result<i32, std::io::Error> = Ok(1);\n-    ///\n-    /// // Bad\n-    /// for x in &res {\n+    /// if let Some(x) = opt {\n     ///     // ..\n     /// }\n     ///\n-    /// // Good\n     /// if let Ok(x) = res {\n     ///     // ..\n     /// }"}, {"sha": "a348bb465c8844f32a8164759f594ff16616051f", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 21, "deletions": 36, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -3,9 +3,7 @@ use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n use clippy_utils::source::snippet;\n use clippy_utils::ty::has_iter_method;\n use clippy_utils::visitors::is_local_used;\n-use clippy_utils::{\n-    contains_name, higher, is_integer_const, match_trait_method, paths, sugg, SpanlessEq,\n-};\n+use clippy_utils::{contains_name, higher, is_integer_const, match_trait_method, paths, sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -29,7 +27,12 @@ pub(super) fn check<'tcx>(\n     body: &'tcx Expr<'_>,\n     expr: &'tcx Expr<'_>,\n ) {\n-    if let Some(higher::Range { start: Some(start), ref end, limits }) = higher::Range::hir(arg) {\n+    if let Some(higher::Range {\n+        start: Some(start),\n+        ref end,\n+        limits,\n+    }) = higher::Range::hir(arg)\n+    {\n         // the var must be a single name\n         if let PatKind::Binding(_, canonical_id, ident, _) = pat.kind {\n             let mut visitor = VarVisitor {\n@@ -104,22 +107,19 @@ pub(super) fn check<'tcx>(\n                         }\n                     }\n \n-                    if is_len_call(end, indexed) || is_end_eq_array_len(cx, end, limits, indexed_ty)\n-                    {\n+                    if is_len_call(end, indexed) || is_end_eq_array_len(cx, end, limits, indexed_ty) {\n                         String::new()\n-                    } else if visitor.indexed_mut.contains(&indexed)\n-                        && contains_name(indexed, take_expr)\n-                    {\n+                    } else if visitor.indexed_mut.contains(&indexed) && contains_name(indexed, take_expr) {\n                         return;\n                     } else {\n                         match limits {\n                             ast::RangeLimits::Closed => {\n                                 let take_expr = sugg::Sugg::hir(cx, take_expr, \"<count>\");\n                                 format!(\".take({})\", take_expr + sugg::ONE)\n-                            }\n+                            },\n                             ast::RangeLimits::HalfOpen => {\n                                 format!(\".take({})\", snippet(cx, take_expr.span, \"..\"))\n-                            }\n+                            },\n                         }\n                     }\n                 } else {\n@@ -145,10 +145,7 @@ pub(super) fn check<'tcx>(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n                         arg.span,\n-                        &format!(\n-                            \"the loop variable `{}` is used to index `{}`\",\n-                            ident.name, indexed\n-                        ),\n+                        &format!(\"the loop variable `{}` is used to index `{}`\", ident.name, indexed),\n                         |diag| {\n                             multispan_sugg(\n                                 diag,\n@@ -157,10 +154,7 @@ pub(super) fn check<'tcx>(\n                                     (pat.span, format!(\"({}, <item>)\", ident.name)),\n                                     (\n                                         arg.span,\n-                                        format!(\n-                                            \"{}.{}().enumerate(){}{}\",\n-                                            indexed, method, method_1, method_2\n-                                        ),\n+                                        format!(\"{}.{}().enumerate(){}{}\", indexed, method, method_1, method_2),\n                                     ),\n                                 ],\n                             );\n@@ -177,10 +171,7 @@ pub(super) fn check<'tcx>(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n                         arg.span,\n-                        &format!(\n-                            \"the loop variable `{}` is only used to index `{}`\",\n-                            ident.name, indexed\n-                        ),\n+                        &format!(\"the loop variable `{}` is only used to index `{}`\", ident.name, indexed),\n                         |diag| {\n                             multispan_sugg(\n                                 diag,\n@@ -257,12 +248,7 @@ struct VarVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n-    fn check(\n-        &mut self,\n-        idx: &'tcx Expr<'_>,\n-        seqexpr: &'tcx Expr<'_>,\n-        expr: &'tcx Expr<'_>,\n-    ) -> bool {\n+    fn check(&mut self, idx: &'tcx Expr<'_>, seqexpr: &'tcx Expr<'_>, expr: &'tcx Expr<'_>) -> bool {\n         if_chain! {\n             // the indexed container is referenced by a name\n             if let ExprKind::Path(ref seqpath) = seqexpr.kind;\n@@ -351,13 +337,13 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 self.visit_expr(lhs);\n                 self.prefer_mutable = false;\n                 self.visit_expr(rhs);\n-            }\n+            },\n             ExprKind::AddrOf(BorrowKind::Ref, mutbl, expr) => {\n                 if mutbl == Mutability::Mut {\n                     self.prefer_mutable = true;\n                 }\n                 self.visit_expr(expr);\n-            }\n+            },\n             ExprKind::Call(f, args) => {\n                 self.visit_expr(f);\n                 for expr in args {\n@@ -370,11 +356,10 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     }\n                     self.visit_expr(expr);\n                 }\n-            }\n+            },\n             ExprKind::MethodCall(_, args, _) => {\n                 let def_id = self.cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n-                for (ty, expr) in iter::zip(self.cx.tcx.fn_sig(def_id).inputs().skip_binder(), args)\n-                {\n+                for (ty, expr) in iter::zip(self.cx.tcx.fn_sig(def_id).inputs().skip_binder(), args) {\n                     self.prefer_mutable = false;\n                     if let ty::Ref(_, _, mutbl) = *ty.kind() {\n                         if mutbl == Mutability::Mut {\n@@ -383,11 +368,11 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     }\n                     self.visit_expr(expr);\n                 }\n-            }\n+            },\n             ExprKind::Closure(_, _, body_id, ..) => {\n                 let body = self.cx.tcx.hir().body(body_id);\n                 self.visit_expr(&body.value);\n-            }\n+            },\n             _ => walk_expr(self, expr),\n         }\n         self.prefer_mutable = old;"}, {"sha": "c025f5972d5195ff67ea0f6e2c47c7ee65759a55", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -146,7 +146,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             if arms.is_empty() {\n                 e\n             } else {\n-                let arms = never_loop_expr_branch(&mut arms.iter().map(|a| &*a.body), main_loop_id);\n+                let arms = never_loop_expr_branch(&mut arms.iter().map(|a| a.body), main_loop_id);\n                 combine_seq(e, arms)\n             }\n         },"}, {"sha": "230ae029ed9d28978eeb256c40604e24e0df1d81", "filename": "src/tools/clippy/clippy_lints/src/manual_map.rs", "status": "removed", "additions": 0, "deletions": 316, "changes": 316, "blob_url": "https://github.com/rust-lang/rust/blob/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_map.rs?ref=357bc27904d4a99c83d4b01272c34e0e54934fa5", "patch": "@@ -1,316 +0,0 @@\n-use crate::{map_unit_fn::OPTION_MAP_UNIT_FN, matches::MATCH_AS_REF};\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::higher::IfLetOrMatch;\n-use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n-use clippy_utils::ty::{is_type_diagnostic_item, peel_mid_ty_refs_is_mutable, type_is_unsafe_function};\n-use clippy_utils::{\n-    can_move_expr_to_closure, in_constant, is_else_clause, is_lang_ctor, is_lint_allowed, path_to_local_id,\n-    peel_blocks, peel_hir_expr_refs, peel_hir_expr_while, CaptureKind,\n-};\n-use rustc_ast::util::parser::PREC_POSTFIX;\n-use rustc_errors::Applicability;\n-use rustc_hir::LangItem::{OptionNone, OptionSome};\n-use rustc_hir::{\n-    def::Res, Arm, BindingAnnotation, Block, BlockCheckMode, Expr, ExprKind, HirId, Mutability, Pat, PatKind, Path,\n-    QPath, UnsafeSource,\n-};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{sym, SyntaxContext};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for usages of `match` which could be implemented using `map`\n-    ///\n-    /// ### Why is this bad?\n-    /// Using the `map` method is clearer and more concise.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// match Some(0) {\n-    ///     Some(x) => Some(x + 1),\n-    ///     None => None,\n-    /// };\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// Some(0).map(|x| x + 1);\n-    /// ```\n-    #[clippy::version = \"1.52.0\"]\n-    pub MANUAL_MAP,\n-    style,\n-    \"reimplementation of `map`\"\n-}\n-\n-declare_lint_pass!(ManualMap => [MANUAL_MAP]);\n-\n-impl<'tcx> LateLintPass<'tcx> for ManualMap {\n-    #[expect(clippy::too_many_lines)]\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        let (scrutinee, then_pat, then_body, else_pat, else_body) = match IfLetOrMatch::parse(cx, expr) {\n-            Some(IfLetOrMatch::IfLet(scrutinee, pat, body, Some(r#else))) => (scrutinee, pat, body, None, r#else),\n-            Some(IfLetOrMatch::Match(\n-                scrutinee,\n-                [arm1 @ Arm { guard: None, .. }, arm2 @ Arm { guard: None, .. }],\n-                _,\n-            )) => (scrutinee, arm1.pat, arm1.body, Some(arm2.pat), arm2.body),\n-            _ => return,\n-        };\n-        if in_external_macro(cx.sess(), expr.span) || in_constant(cx, expr.hir_id) {\n-            return;\n-        }\n-\n-        let (scrutinee_ty, ty_ref_count, ty_mutability) =\n-            peel_mid_ty_refs_is_mutable(cx.typeck_results().expr_ty(scrutinee));\n-        if !(is_type_diagnostic_item(cx, scrutinee_ty, sym::Option)\n-            && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::Option))\n-        {\n-            return;\n-        }\n-\n-        let expr_ctxt = expr.span.ctxt();\n-        let (some_expr, some_pat, pat_ref_count, is_wild_none) = match (\n-            try_parse_pattern(cx, then_pat, expr_ctxt),\n-            else_pat.map_or(Some(OptionPat::Wild), |p| try_parse_pattern(cx, p, expr_ctxt)),\n-        ) {\n-            (Some(OptionPat::Wild), Some(OptionPat::Some { pattern, ref_count })) if is_none_expr(cx, then_body) => {\n-                (else_body, pattern, ref_count, true)\n-            },\n-            (Some(OptionPat::None), Some(OptionPat::Some { pattern, ref_count })) if is_none_expr(cx, then_body) => {\n-                (else_body, pattern, ref_count, false)\n-            },\n-            (Some(OptionPat::Some { pattern, ref_count }), Some(OptionPat::Wild)) if is_none_expr(cx, else_body) => {\n-                (then_body, pattern, ref_count, true)\n-            },\n-            (Some(OptionPat::Some { pattern, ref_count }), Some(OptionPat::None)) if is_none_expr(cx, else_body) => {\n-                (then_body, pattern, ref_count, false)\n-            },\n-            _ => return,\n-        };\n-\n-        // Top level or patterns aren't allowed in closures.\n-        if matches!(some_pat.kind, PatKind::Or(_)) {\n-            return;\n-        }\n-\n-        let some_expr = match get_some_expr(cx, some_expr, false, expr_ctxt) {\n-            Some(expr) => expr,\n-            None => return,\n-        };\n-\n-        // These two lints will go back and forth with each other.\n-        if cx.typeck_results().expr_ty(some_expr.expr) == cx.tcx.types.unit\n-            && !is_lint_allowed(cx, OPTION_MAP_UNIT_FN, expr.hir_id)\n-        {\n-            return;\n-        }\n-\n-        // `map` won't perform any adjustments.\n-        if !cx.typeck_results().expr_adjustments(some_expr.expr).is_empty() {\n-            return;\n-        }\n-\n-        // Determine which binding mode to use.\n-        let explicit_ref = some_pat.contains_explicit_ref_binding();\n-        let binding_ref = explicit_ref.or_else(|| (ty_ref_count != pat_ref_count).then(|| ty_mutability));\n-\n-        let as_ref_str = match binding_ref {\n-            Some(Mutability::Mut) => \".as_mut()\",\n-            Some(Mutability::Not) => \".as_ref()\",\n-            None => \"\",\n-        };\n-\n-        match can_move_expr_to_closure(cx, some_expr.expr) {\n-            Some(captures) => {\n-                // Check if captures the closure will need conflict with borrows made in the scrutinee.\n-                // TODO: check all the references made in the scrutinee expression. This will require interacting\n-                // with the borrow checker. Currently only `<local>[.<field>]*` is checked for.\n-                if let Some(binding_ref_mutability) = binding_ref {\n-                    let e = peel_hir_expr_while(scrutinee, |e| match e.kind {\n-                        ExprKind::Field(e, _) | ExprKind::AddrOf(_, _, e) => Some(e),\n-                        _ => None,\n-                    });\n-                    if let ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(l), .. })) = e.kind {\n-                        match captures.get(l) {\n-                            Some(CaptureKind::Value | CaptureKind::Ref(Mutability::Mut)) => return,\n-                            Some(CaptureKind::Ref(Mutability::Not)) if binding_ref_mutability == Mutability::Mut => {\n-                                return;\n-                            },\n-                            Some(CaptureKind::Ref(Mutability::Not)) | None => (),\n-                        }\n-                    }\n-                }\n-            },\n-            None => return,\n-        };\n-\n-        let mut app = Applicability::MachineApplicable;\n-\n-        // Remove address-of expressions from the scrutinee. Either `as_ref` will be called, or\n-        // it's being passed by value.\n-        let scrutinee = peel_hir_expr_refs(scrutinee).0;\n-        let (scrutinee_str, _) = snippet_with_context(cx, scrutinee.span, expr_ctxt, \"..\", &mut app);\n-        let scrutinee_str =\n-            if scrutinee.span.ctxt() == expr.span.ctxt() && scrutinee.precedence().order() < PREC_POSTFIX {\n-                format!(\"({})\", scrutinee_str)\n-            } else {\n-                scrutinee_str.into()\n-            };\n-\n-        let body_str = if let PatKind::Binding(annotation, id, some_binding, None) = some_pat.kind {\n-            if_chain! {\n-                if !some_expr.needs_unsafe_block;\n-                if let Some(func) = can_pass_as_func(cx, id, some_expr.expr);\n-                if func.span.ctxt() == some_expr.expr.span.ctxt();\n-                then {\n-                    snippet_with_applicability(cx, func.span, \"..\", &mut app).into_owned()\n-                } else {\n-                    if path_to_local_id(some_expr.expr, id)\n-                        && !is_lint_allowed(cx, MATCH_AS_REF, expr.hir_id)\n-                        && binding_ref.is_some()\n-                    {\n-                        return;\n-                    }\n-\n-                    // `ref` and `ref mut` annotations were handled earlier.\n-                    let annotation = if matches!(annotation, BindingAnnotation::Mutable) {\n-                        \"mut \"\n-                    } else {\n-                        \"\"\n-                    };\n-                    let expr_snip = snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0;\n-                    if some_expr.needs_unsafe_block {\n-                        format!(\"|{}{}| unsafe {{ {} }}\", annotation, some_binding, expr_snip)\n-                    } else {\n-                        format!(\"|{}{}| {}\", annotation, some_binding, expr_snip)\n-                    }\n-                }\n-            }\n-        } else if !is_wild_none && explicit_ref.is_none() {\n-            // TODO: handle explicit reference annotations.\n-            let pat_snip = snippet_with_context(cx, some_pat.span, expr_ctxt, \"..\", &mut app).0;\n-            let expr_snip = snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0;\n-            if some_expr.needs_unsafe_block {\n-                format!(\"|{}| unsafe {{ {} }}\", pat_snip, expr_snip)\n-            } else {\n-                format!(\"|{}| {}\", pat_snip, expr_snip)\n-            }\n-        } else {\n-            // Refutable bindings and mixed reference annotations can't be handled by `map`.\n-            return;\n-        };\n-\n-        span_lint_and_sugg(\n-            cx,\n-            MANUAL_MAP,\n-            expr.span,\n-            \"manual implementation of `Option::map`\",\n-            \"try this\",\n-            if else_pat.is_none() && is_else_clause(cx.tcx, expr) {\n-                format!(\"{{ {}{}.map({}) }}\", scrutinee_str, as_ref_str, body_str)\n-            } else {\n-                format!(\"{}{}.map({})\", scrutinee_str, as_ref_str, body_str)\n-            },\n-            app,\n-        );\n-    }\n-}\n-\n-// Checks whether the expression could be passed as a function, or whether a closure is needed.\n-// Returns the function to be passed to `map` if it exists.\n-fn can_pass_as_func<'tcx>(cx: &LateContext<'tcx>, binding: HirId, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n-    match expr.kind {\n-        ExprKind::Call(func, [arg])\n-            if path_to_local_id(arg, binding)\n-                && cx.typeck_results().expr_adjustments(arg).is_empty()\n-                && !type_is_unsafe_function(cx, cx.typeck_results().expr_ty(func).peel_refs()) =>\n-        {\n-            Some(func)\n-        },\n-        _ => None,\n-    }\n-}\n-\n-enum OptionPat<'a> {\n-    Wild,\n-    None,\n-    Some {\n-        // The pattern contained in the `Some` tuple.\n-        pattern: &'a Pat<'a>,\n-        // The number of references before the `Some` tuple.\n-        // e.g. `&&Some(_)` has a ref count of 2.\n-        ref_count: usize,\n-    },\n-}\n-\n-struct SomeExpr<'tcx> {\n-    expr: &'tcx Expr<'tcx>,\n-    needs_unsafe_block: bool,\n-}\n-\n-// Try to parse into a recognized `Option` pattern.\n-// i.e. `_`, `None`, `Some(..)`, or a reference to any of those.\n-fn try_parse_pattern<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>, ctxt: SyntaxContext) -> Option<OptionPat<'tcx>> {\n-    fn f<'tcx>(\n-        cx: &LateContext<'tcx>,\n-        pat: &'tcx Pat<'_>,\n-        ref_count: usize,\n-        ctxt: SyntaxContext,\n-    ) -> Option<OptionPat<'tcx>> {\n-        match pat.kind {\n-            PatKind::Wild => Some(OptionPat::Wild),\n-            PatKind::Ref(pat, _) => f(cx, pat, ref_count + 1, ctxt),\n-            PatKind::Path(ref qpath) if is_lang_ctor(cx, qpath, OptionNone) => Some(OptionPat::None),\n-            PatKind::TupleStruct(ref qpath, [pattern], _)\n-                if is_lang_ctor(cx, qpath, OptionSome) && pat.span.ctxt() == ctxt =>\n-            {\n-                Some(OptionPat::Some { pattern, ref_count })\n-            },\n-            _ => None,\n-        }\n-    }\n-    f(cx, pat, 0, ctxt)\n-}\n-\n-// Checks for an expression wrapped by the `Some` constructor. Returns the contained expression.\n-fn get_some_expr<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx Expr<'_>,\n-    needs_unsafe_block: bool,\n-    ctxt: SyntaxContext,\n-) -> Option<SomeExpr<'tcx>> {\n-    // TODO: Allow more complex expressions.\n-    match expr.kind {\n-        ExprKind::Call(\n-            Expr {\n-                kind: ExprKind::Path(ref qpath),\n-                ..\n-            },\n-            [arg],\n-        ) if ctxt == expr.span.ctxt() && is_lang_ctor(cx, qpath, OptionSome) => Some(SomeExpr {\n-            expr: arg,\n-            needs_unsafe_block,\n-        }),\n-        ExprKind::Block(\n-            Block {\n-                stmts: [],\n-                expr: Some(expr),\n-                rules,\n-                ..\n-            },\n-            _,\n-        ) => get_some_expr(\n-            cx,\n-            expr,\n-            needs_unsafe_block || *rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided),\n-            ctxt,\n-        ),\n-        _ => None,\n-    }\n-}\n-\n-// Checks for the `None` value.\n-fn is_none_expr(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    matches!(peel_blocks(expr).kind, ExprKind::Path(ref qpath) if is_lang_ctor(cx, qpath, OptionNone))\n-}"}, {"sha": "14f5faafd7cb9da8198f020ecfbf212bacccef0c", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -113,7 +113,7 @@ impl EarlyLintPass for ManualNonExhaustiveStruct {\n             let mut iter = fields.iter().filter_map(|f| match f.vis.kind {\n                 VisibilityKind::Public => None,\n                 VisibilityKind::Inherited => Some(Ok(f)),\n-                _ => Some(Err(())),\n+                VisibilityKind::Restricted { .. } => Some(Err(())),\n             });\n             if let Some(Ok(field)) = iter.next()\n                 && iter.next().is_none()"}, {"sha": "b3a91d9f18f5d94ff4d782900996310d161ed6f9", "filename": "src/tools/clippy/clippy_lints/src/manual_unwrap_or.rs", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=357bc27904d4a99c83d4b01272c34e0e54934fa5", "patch": "@@ -1,123 +0,0 @@\n-use clippy_utils::consts::constant_simple;\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::usage::contains_return_break_continue_macro;\n-use clippy_utils::{in_constant, is_lang_ctor, path_to_local_id, sugg};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::LangItem::{OptionNone, OptionSome, ResultErr, ResultOk};\n-use rustc_hir::{Arm, Expr, ExprKind, PatKind};\n-use rustc_lint::LintContext;\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Finds patterns that reimplement `Option::unwrap_or` or `Result::unwrap_or`.\n-    ///\n-    /// ### Why is this bad?\n-    /// Concise code helps focusing on behavior instead of boilerplate.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let foo: Option<i32> = None;\n-    /// match foo {\n-    ///     Some(v) => v,\n-    ///     None => 1,\n-    /// };\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// let foo: Option<i32> = None;\n-    /// foo.unwrap_or(1);\n-    /// ```\n-    #[clippy::version = \"1.49.0\"]\n-    pub MANUAL_UNWRAP_OR,\n-    complexity,\n-    \"finds patterns that can be encoded more concisely with `Option::unwrap_or` or `Result::unwrap_or`\"\n-}\n-\n-declare_lint_pass!(ManualUnwrapOr => [MANUAL_UNWRAP_OR]);\n-\n-impl<'tcx> LateLintPass<'tcx> for ManualUnwrapOr {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if in_external_macro(cx.sess(), expr.span) || in_constant(cx, expr.hir_id) {\n-            return;\n-        }\n-        lint_manual_unwrap_or(cx, expr);\n-    }\n-}\n-\n-fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-    fn applicable_or_arm<'a>(cx: &LateContext<'_>, arms: &'a [Arm<'a>]) -> Option<&'a Arm<'a>> {\n-        if_chain! {\n-            if arms.len() == 2;\n-            if arms.iter().all(|arm| arm.guard.is_none());\n-            if let Some((idx, or_arm)) = arms.iter().enumerate().find(|(_, arm)| {\n-                match arm.pat.kind {\n-                    PatKind::Path(ref qpath) => is_lang_ctor(cx, qpath, OptionNone),\n-                    PatKind::TupleStruct(ref qpath, [pat], _) =>\n-                        matches!(pat.kind, PatKind::Wild) && is_lang_ctor(cx, qpath, ResultErr),\n-                    _ => false,\n-                }\n-            });\n-            let unwrap_arm = &arms[1 - idx];\n-            if let PatKind::TupleStruct(ref qpath, [unwrap_pat], _) = unwrap_arm.pat.kind;\n-            if is_lang_ctor(cx, qpath, OptionSome) || is_lang_ctor(cx, qpath, ResultOk);\n-            if let PatKind::Binding(_, binding_hir_id, ..) = unwrap_pat.kind;\n-            if path_to_local_id(unwrap_arm.body, binding_hir_id);\n-            if cx.typeck_results().expr_adjustments(unwrap_arm.body).is_empty();\n-            if !contains_return_break_continue_macro(or_arm.body);\n-            then {\n-                Some(or_arm)\n-            } else {\n-                None\n-            }\n-        }\n-    }\n-\n-    if_chain! {\n-        if let ExprKind::Match(scrutinee, match_arms, _) = expr.kind;\n-        let ty = cx.typeck_results().expr_ty(scrutinee);\n-        if let Some(ty_name) = if is_type_diagnostic_item(cx, ty, sym::Option) {\n-            Some(\"Option\")\n-        } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n-            Some(\"Result\")\n-        } else {\n-            None\n-        };\n-        if let Some(or_arm) = applicable_or_arm(cx, match_arms);\n-        if let Some(or_body_snippet) = snippet_opt(cx, or_arm.body.span);\n-        if let Some(indent) = indent_of(cx, expr.span);\n-        if constant_simple(cx, cx.typeck_results(), or_arm.body).is_some();\n-        then {\n-            let reindented_or_body =\n-                reindent_multiline(or_body_snippet.into(), true, Some(indent));\n-\n-            let suggestion = if scrutinee.span.from_expansion() {\n-                    // we don't want parentheses around macro, e.g. `(some_macro!()).unwrap_or(0)`\n-                    sugg::Sugg::hir_with_macro_callsite(cx, scrutinee, \"..\")\n-                }\n-                else {\n-                    sugg::Sugg::hir(cx, scrutinee, \"..\").maybe_par()\n-                };\n-\n-            span_lint_and_sugg(\n-                cx,\n-                MANUAL_UNWRAP_OR, expr.span,\n-                &format!(\"this pattern reimplements `{}::unwrap_or`\", ty_name),\n-                \"replace with\",\n-                format!(\n-                    \"{}.unwrap_or({})\",\n-                    suggestion,\n-                    reindented_or_body,\n-                ),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n-    }\n-}"}, {"sha": "583b577ffe25d51ea72332b2e130b77c07b7ba20", "filename": "src/tools/clippy/clippy_lints/src/match_on_vec_items.rs", "status": "removed", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_on_vec_items.rs?ref=357bc27904d4a99c83d4b01272c34e0e54934fa5", "patch": "@@ -1,104 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet;\n-use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, LangItem, MatchSource};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for `match vec[idx]` or `match vec[n..m]`.\n-    ///\n-    /// ### Why is this bad?\n-    /// This can panic at runtime.\n-    ///\n-    /// ### Example\n-    /// ```rust, no_run\n-    /// let arr = vec![0, 1, 2, 3];\n-    /// let idx = 1;\n-    ///\n-    /// // Bad\n-    /// match arr[idx] {\n-    ///     0 => println!(\"{}\", 0),\n-    ///     1 => println!(\"{}\", 3),\n-    ///     _ => {},\n-    /// }\n-    /// ```\n-    /// Use instead:\n-    /// ```rust, no_run\n-    /// let arr = vec![0, 1, 2, 3];\n-    /// let idx = 1;\n-    ///\n-    /// // Good\n-    /// match arr.get(idx) {\n-    ///     Some(0) => println!(\"{}\", 0),\n-    ///     Some(1) => println!(\"{}\", 3),\n-    ///     _ => {},\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.45.0\"]\n-    pub MATCH_ON_VEC_ITEMS,\n-    pedantic,\n-    \"matching on vector elements can panic\"\n-}\n-\n-declare_lint_pass!(MatchOnVecItems => [MATCH_ON_VEC_ITEMS]);\n-\n-impl<'tcx> LateLintPass<'tcx> for MatchOnVecItems {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if_chain! {\n-            if !in_external_macro(cx.sess(), expr.span);\n-            if let ExprKind::Match(match_expr, _, MatchSource::Normal) = expr.kind;\n-            if let Some(idx_expr) = is_vec_indexing(cx, match_expr);\n-            if let ExprKind::Index(vec, idx) = idx_expr.kind;\n-\n-            then {\n-                // FIXME: could be improved to suggest surrounding every pattern with Some(_),\n-                // but only when `or_patterns` are stabilized.\n-                span_lint_and_sugg(\n-                    cx,\n-                    MATCH_ON_VEC_ITEMS,\n-                    match_expr.span,\n-                    \"indexing into a vector may panic\",\n-                    \"try this\",\n-                    format!(\n-                        \"{}.get({})\",\n-                        snippet(cx, vec.span, \"..\"),\n-                        snippet(cx, idx.span, \"..\")\n-                    ),\n-                    Applicability::MaybeIncorrect\n-                );\n-            }\n-        }\n-    }\n-}\n-\n-fn is_vec_indexing<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n-    if_chain! {\n-        if let ExprKind::Index(array, index) = expr.kind;\n-        if is_vector(cx, array);\n-        if !is_full_range(cx, index);\n-\n-        then {\n-            return Some(expr);\n-        }\n-    }\n-\n-    None\n-}\n-\n-fn is_vector(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    let ty = cx.typeck_results().expr_ty(expr);\n-    let ty = ty.peel_refs();\n-    is_type_diagnostic_item(cx, ty, sym::Vec)\n-}\n-\n-fn is_full_range(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    let ty = cx.typeck_results().expr_ty(expr);\n-    let ty = ty.peel_refs();\n-    is_type_lang_item(cx, ty, LangItem::RangeFull)\n-}"}, {"sha": "07021f1bcad8db24b6f625a618a2c03d24477392", "filename": "src/tools/clippy/clippy_lints/src/matches/collapsible_match.rs", "status": "renamed", "additions": 15, "deletions": 55, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fcollapsible_match.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -6,68 +6,28 @@ use if_chain::if_chain;\n use rustc_errors::MultiSpan;\n use rustc_hir::LangItem::OptionNone;\n use rustc_hir::{Arm, Expr, Guard, HirId, Let, Pat, PatKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_lint::LateContext;\n use rustc_span::Span;\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Finds nested `match` or `if let` expressions where the patterns may be \"collapsed\" together\n-    /// without adding any branches.\n-    ///\n-    /// Note that this lint is not intended to find _all_ cases where nested match patterns can be merged, but only\n-    /// cases where merging would most likely make the code more readable.\n-    ///\n-    /// ### Why is this bad?\n-    /// It is unnecessarily verbose and complex.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// fn func(opt: Option<Result<u64, String>>) {\n-    ///     let n = match opt {\n-    ///         Some(n) => match n {\n-    ///             Ok(n) => n,\n-    ///             _ => return,\n-    ///         }\n-    ///         None => return,\n-    ///     };\n-    /// }\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// fn func(opt: Option<Result<u64, String>>) {\n-    ///     let n = match opt {\n-    ///         Some(Ok(n)) => n,\n-    ///         _ => return,\n-    ///     };\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.50.0\"]\n-    pub COLLAPSIBLE_MATCH,\n-    style,\n-    \"Nested `match` or `if let` expressions where the patterns may be \\\"collapsed\\\" together.\"\n-}\n-\n-declare_lint_pass!(CollapsibleMatch => [COLLAPSIBLE_MATCH]);\n+use super::COLLAPSIBLE_MATCH;\n \n-impl<'tcx> LateLintPass<'tcx> for CollapsibleMatch {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'tcx>) {\n-        match IfLetOrMatch::parse(cx, expr) {\n-            Some(IfLetOrMatch::Match(_, arms, _)) => {\n-                if let Some(els_arm) = arms.iter().rfind(|arm| arm_is_wild_like(cx, arm)) {\n-                    for arm in arms {\n-                        check_arm(cx, true, arm.pat, arm.body, arm.guard.as_ref(), Some(els_arm.body));\n-                    }\n-                }\n-            },\n-            Some(IfLetOrMatch::IfLet(_, pat, body, els)) => {\n-                check_arm(cx, false, pat, body, None, els);\n-            },\n-            None => {},\n+pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n+    if let Some(els_arm) = arms.iter().rfind(|arm| arm_is_wild_like(cx, arm)) {\n+        for arm in arms {\n+            check_arm(cx, true, arm.pat, arm.body, arm.guard.as_ref(), Some(els_arm.body));\n         }\n     }\n }\n \n+pub(super) fn check_if_let<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    pat: &'tcx Pat<'_>,\n+    body: &'tcx Expr<'_>,\n+    else_expr: Option<&'tcx Expr<'_>>,\n+) {\n+    check_arm(cx, false, pat, body, None, else_expr);\n+}\n+\n fn check_arm<'tcx>(\n     cx: &LateContext<'tcx>,\n     outer_is_match: bool,", "previous_filename": "src/tools/clippy/clippy_lints/src/collapsible_match.rs"}, {"sha": "542905a2d763cffa4879b4f75d7acefa3e4aa7a3", "filename": "src/tools/clippy/clippy_lints/src/matches/manual_map.rs", "status": "added", "additions": 306, "deletions": 0, "changes": 306, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,306 @@\n+use crate::{map_unit_fn::OPTION_MAP_UNIT_FN, matches::MATCH_AS_REF};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n+use clippy_utils::ty::{is_type_diagnostic_item, peel_mid_ty_refs_is_mutable, type_is_unsafe_function};\n+use clippy_utils::{\n+    can_move_expr_to_closure, is_else_clause, is_lang_ctor, is_lint_allowed, path_to_local_id, peel_blocks,\n+    peel_hir_expr_refs, peel_hir_expr_while, CaptureKind,\n+};\n+use rustc_ast::util::parser::PREC_POSTFIX;\n+use rustc_errors::Applicability;\n+use rustc_hir::LangItem::{OptionNone, OptionSome};\n+use rustc_hir::{\n+    def::Res, Arm, BindingAnnotation, Block, BlockCheckMode, Expr, ExprKind, HirId, Mutability, Pat, PatKind, Path,\n+    QPath, UnsafeSource,\n+};\n+use rustc_lint::LateContext;\n+use rustc_span::{sym, SyntaxContext};\n+\n+use super::MANUAL_MAP;\n+\n+pub(super) fn check_match<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    scrutinee: &'tcx Expr<'_>,\n+    arms: &'tcx [Arm<'_>],\n+) {\n+    if let [arm1, arm2] = arms\n+        && arm1.guard.is_none()\n+        && arm2.guard.is_none()\n+    {\n+        check(cx, expr, scrutinee, arm1.pat, arm1.body, Some(arm2.pat), arm2.body);\n+    }\n+}\n+\n+pub(super) fn check_if_let<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    let_pat: &'tcx Pat<'_>,\n+    let_expr: &'tcx Expr<'_>,\n+    then_expr: &'tcx Expr<'_>,\n+    else_expr: &'tcx Expr<'_>,\n+) {\n+    check(cx, expr, let_expr, let_pat, then_expr, None, else_expr);\n+}\n+\n+#[expect(clippy::too_many_lines)]\n+fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    scrutinee: &'tcx Expr<'_>,\n+    then_pat: &'tcx Pat<'_>,\n+    then_body: &'tcx Expr<'_>,\n+    else_pat: Option<&'tcx Pat<'_>>,\n+    else_body: &'tcx Expr<'_>,\n+) {\n+    let (scrutinee_ty, ty_ref_count, ty_mutability) =\n+        peel_mid_ty_refs_is_mutable(cx.typeck_results().expr_ty(scrutinee));\n+    if !(is_type_diagnostic_item(cx, scrutinee_ty, sym::Option)\n+        && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::Option))\n+    {\n+        return;\n+    }\n+\n+    let expr_ctxt = expr.span.ctxt();\n+    let (some_expr, some_pat, pat_ref_count, is_wild_none) = match (\n+        try_parse_pattern(cx, then_pat, expr_ctxt),\n+        else_pat.map_or(Some(OptionPat::Wild), |p| try_parse_pattern(cx, p, expr_ctxt)),\n+    ) {\n+        (Some(OptionPat::Wild), Some(OptionPat::Some { pattern, ref_count })) if is_none_expr(cx, then_body) => {\n+            (else_body, pattern, ref_count, true)\n+        },\n+        (Some(OptionPat::None), Some(OptionPat::Some { pattern, ref_count })) if is_none_expr(cx, then_body) => {\n+            (else_body, pattern, ref_count, false)\n+        },\n+        (Some(OptionPat::Some { pattern, ref_count }), Some(OptionPat::Wild)) if is_none_expr(cx, else_body) => {\n+            (then_body, pattern, ref_count, true)\n+        },\n+        (Some(OptionPat::Some { pattern, ref_count }), Some(OptionPat::None)) if is_none_expr(cx, else_body) => {\n+            (then_body, pattern, ref_count, false)\n+        },\n+        _ => return,\n+    };\n+\n+    // Top level or patterns aren't allowed in closures.\n+    if matches!(some_pat.kind, PatKind::Or(_)) {\n+        return;\n+    }\n+\n+    let some_expr = match get_some_expr(cx, some_expr, false, expr_ctxt) {\n+        Some(expr) => expr,\n+        None => return,\n+    };\n+\n+    // These two lints will go back and forth with each other.\n+    if cx.typeck_results().expr_ty(some_expr.expr) == cx.tcx.types.unit\n+        && !is_lint_allowed(cx, OPTION_MAP_UNIT_FN, expr.hir_id)\n+    {\n+        return;\n+    }\n+\n+    // `map` won't perform any adjustments.\n+    if !cx.typeck_results().expr_adjustments(some_expr.expr).is_empty() {\n+        return;\n+    }\n+\n+    // Determine which binding mode to use.\n+    let explicit_ref = some_pat.contains_explicit_ref_binding();\n+    let binding_ref = explicit_ref.or_else(|| (ty_ref_count != pat_ref_count).then(|| ty_mutability));\n+\n+    let as_ref_str = match binding_ref {\n+        Some(Mutability::Mut) => \".as_mut()\",\n+        Some(Mutability::Not) => \".as_ref()\",\n+        None => \"\",\n+    };\n+\n+    match can_move_expr_to_closure(cx, some_expr.expr) {\n+        Some(captures) => {\n+            // Check if captures the closure will need conflict with borrows made in the scrutinee.\n+            // TODO: check all the references made in the scrutinee expression. This will require interacting\n+            // with the borrow checker. Currently only `<local>[.<field>]*` is checked for.\n+            if let Some(binding_ref_mutability) = binding_ref {\n+                let e = peel_hir_expr_while(scrutinee, |e| match e.kind {\n+                    ExprKind::Field(e, _) | ExprKind::AddrOf(_, _, e) => Some(e),\n+                    _ => None,\n+                });\n+                if let ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(l), .. })) = e.kind {\n+                    match captures.get(l) {\n+                        Some(CaptureKind::Value | CaptureKind::Ref(Mutability::Mut)) => return,\n+                        Some(CaptureKind::Ref(Mutability::Not)) if binding_ref_mutability == Mutability::Mut => {\n+                            return;\n+                        },\n+                        Some(CaptureKind::Ref(Mutability::Not)) | None => (),\n+                    }\n+                }\n+            }\n+        },\n+        None => return,\n+    };\n+\n+    let mut app = Applicability::MachineApplicable;\n+\n+    // Remove address-of expressions from the scrutinee. Either `as_ref` will be called, or\n+    // it's being passed by value.\n+    let scrutinee = peel_hir_expr_refs(scrutinee).0;\n+    let (scrutinee_str, _) = snippet_with_context(cx, scrutinee.span, expr_ctxt, \"..\", &mut app);\n+    let scrutinee_str = if scrutinee.span.ctxt() == expr.span.ctxt() && scrutinee.precedence().order() < PREC_POSTFIX {\n+        format!(\"({})\", scrutinee_str)\n+    } else {\n+        scrutinee_str.into()\n+    };\n+\n+    let body_str = if let PatKind::Binding(annotation, id, some_binding, None) = some_pat.kind {\n+        if_chain! {\n+            if !some_expr.needs_unsafe_block;\n+            if let Some(func) = can_pass_as_func(cx, id, some_expr.expr);\n+            if func.span.ctxt() == some_expr.expr.span.ctxt();\n+            then {\n+                snippet_with_applicability(cx, func.span, \"..\", &mut app).into_owned()\n+            } else {\n+                if path_to_local_id(some_expr.expr, id)\n+                    && !is_lint_allowed(cx, MATCH_AS_REF, expr.hir_id)\n+                    && binding_ref.is_some()\n+                {\n+                    return;\n+                }\n+\n+                // `ref` and `ref mut` annotations were handled earlier.\n+                let annotation = if matches!(annotation, BindingAnnotation::Mutable) {\n+                    \"mut \"\n+                } else {\n+                    \"\"\n+                };\n+                let expr_snip = snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0;\n+                if some_expr.needs_unsafe_block {\n+                    format!(\"|{}{}| unsafe {{ {} }}\", annotation, some_binding, expr_snip)\n+                } else {\n+                    format!(\"|{}{}| {}\", annotation, some_binding, expr_snip)\n+                }\n+            }\n+        }\n+    } else if !is_wild_none && explicit_ref.is_none() {\n+        // TODO: handle explicit reference annotations.\n+        let pat_snip = snippet_with_context(cx, some_pat.span, expr_ctxt, \"..\", &mut app).0;\n+        let expr_snip = snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0;\n+        if some_expr.needs_unsafe_block {\n+            format!(\"|{}| unsafe {{ {} }}\", pat_snip, expr_snip)\n+        } else {\n+            format!(\"|{}| {}\", pat_snip, expr_snip)\n+        }\n+    } else {\n+        // Refutable bindings and mixed reference annotations can't be handled by `map`.\n+        return;\n+    };\n+\n+    span_lint_and_sugg(\n+        cx,\n+        MANUAL_MAP,\n+        expr.span,\n+        \"manual implementation of `Option::map`\",\n+        \"try this\",\n+        if else_pat.is_none() && is_else_clause(cx.tcx, expr) {\n+            format!(\"{{ {}{}.map({}) }}\", scrutinee_str, as_ref_str, body_str)\n+        } else {\n+            format!(\"{}{}.map({})\", scrutinee_str, as_ref_str, body_str)\n+        },\n+        app,\n+    );\n+}\n+\n+// Checks whether the expression could be passed as a function, or whether a closure is needed.\n+// Returns the function to be passed to `map` if it exists.\n+fn can_pass_as_func<'tcx>(cx: &LateContext<'tcx>, binding: HirId, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n+    match expr.kind {\n+        ExprKind::Call(func, [arg])\n+            if path_to_local_id(arg, binding)\n+                && cx.typeck_results().expr_adjustments(arg).is_empty()\n+                && !type_is_unsafe_function(cx, cx.typeck_results().expr_ty(func).peel_refs()) =>\n+        {\n+            Some(func)\n+        },\n+        _ => None,\n+    }\n+}\n+\n+enum OptionPat<'a> {\n+    Wild,\n+    None,\n+    Some {\n+        // The pattern contained in the `Some` tuple.\n+        pattern: &'a Pat<'a>,\n+        // The number of references before the `Some` tuple.\n+        // e.g. `&&Some(_)` has a ref count of 2.\n+        ref_count: usize,\n+    },\n+}\n+\n+struct SomeExpr<'tcx> {\n+    expr: &'tcx Expr<'tcx>,\n+    needs_unsafe_block: bool,\n+}\n+\n+// Try to parse into a recognized `Option` pattern.\n+// i.e. `_`, `None`, `Some(..)`, or a reference to any of those.\n+fn try_parse_pattern<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>, ctxt: SyntaxContext) -> Option<OptionPat<'tcx>> {\n+    fn f<'tcx>(\n+        cx: &LateContext<'tcx>,\n+        pat: &'tcx Pat<'_>,\n+        ref_count: usize,\n+        ctxt: SyntaxContext,\n+    ) -> Option<OptionPat<'tcx>> {\n+        match pat.kind {\n+            PatKind::Wild => Some(OptionPat::Wild),\n+            PatKind::Ref(pat, _) => f(cx, pat, ref_count + 1, ctxt),\n+            PatKind::Path(ref qpath) if is_lang_ctor(cx, qpath, OptionNone) => Some(OptionPat::None),\n+            PatKind::TupleStruct(ref qpath, [pattern], _)\n+                if is_lang_ctor(cx, qpath, OptionSome) && pat.span.ctxt() == ctxt =>\n+            {\n+                Some(OptionPat::Some { pattern, ref_count })\n+            },\n+            _ => None,\n+        }\n+    }\n+    f(cx, pat, 0, ctxt)\n+}\n+\n+// Checks for an expression wrapped by the `Some` constructor. Returns the contained expression.\n+fn get_some_expr<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    needs_unsafe_block: bool,\n+    ctxt: SyntaxContext,\n+) -> Option<SomeExpr<'tcx>> {\n+    // TODO: Allow more complex expressions.\n+    match expr.kind {\n+        ExprKind::Call(\n+            Expr {\n+                kind: ExprKind::Path(ref qpath),\n+                ..\n+            },\n+            [arg],\n+        ) if ctxt == expr.span.ctxt() && is_lang_ctor(cx, qpath, OptionSome) => Some(SomeExpr {\n+            expr: arg,\n+            needs_unsafe_block,\n+        }),\n+        ExprKind::Block(\n+            Block {\n+                stmts: [],\n+                expr: Some(expr),\n+                rules,\n+                ..\n+            },\n+            _,\n+        ) => get_some_expr(\n+            cx,\n+            expr,\n+            needs_unsafe_block || *rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided),\n+            ctxt,\n+        ),\n+        _ => None,\n+    }\n+}\n+\n+// Checks for the `None` value.\n+fn is_none_expr(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    matches!(peel_blocks(expr).kind, ExprKind::Path(ref qpath) if is_lang_ctor(cx, qpath, OptionNone))\n+}"}, {"sha": "e1111c80f2fe287712dd64b73b656060b9038e3f", "filename": "src/tools/clippy/clippy_lints/src/matches/manual_unwrap_or.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,83 @@\n+use clippy_utils::consts::constant_simple;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::usage::contains_return_break_continue_macro;\n+use clippy_utils::{is_lang_ctor, path_to_local_id, sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::LangItem::{OptionNone, OptionSome, ResultErr, ResultOk};\n+use rustc_hir::{Arm, Expr, PatKind};\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::MANUAL_UNWRAP_OR;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, scrutinee: &'tcx Expr<'_>, arms: &'tcx [Arm<'_>]) {\n+    let ty = cx.typeck_results().expr_ty(scrutinee);\n+    if_chain! {\n+        if let Some(ty_name) = if is_type_diagnostic_item(cx, ty, sym::Option) {\n+            Some(\"Option\")\n+        } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n+            Some(\"Result\")\n+        } else {\n+            None\n+        };\n+        if let Some(or_arm) = applicable_or_arm(cx, arms);\n+        if let Some(or_body_snippet) = snippet_opt(cx, or_arm.body.span);\n+        if let Some(indent) = indent_of(cx, expr.span);\n+        if constant_simple(cx, cx.typeck_results(), or_arm.body).is_some();\n+        then {\n+            let reindented_or_body =\n+                reindent_multiline(or_body_snippet.into(), true, Some(indent));\n+\n+            let suggestion = if scrutinee.span.from_expansion() {\n+                    // we don't want parentheses around macro, e.g. `(some_macro!()).unwrap_or(0)`\n+                    sugg::Sugg::hir_with_macro_callsite(cx, scrutinee, \"..\")\n+                }\n+                else {\n+                    sugg::Sugg::hir(cx, scrutinee, \"..\").maybe_par()\n+                };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                MANUAL_UNWRAP_OR, expr.span,\n+                &format!(\"this pattern reimplements `{}::unwrap_or`\", ty_name),\n+                \"replace with\",\n+                format!(\n+                    \"{}.unwrap_or({})\",\n+                    suggestion,\n+                    reindented_or_body,\n+                ),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn applicable_or_arm<'a>(cx: &LateContext<'_>, arms: &'a [Arm<'a>]) -> Option<&'a Arm<'a>> {\n+    if_chain! {\n+        if arms.len() == 2;\n+        if arms.iter().all(|arm| arm.guard.is_none());\n+        if let Some((idx, or_arm)) = arms.iter().enumerate().find(|(_, arm)| {\n+            match arm.pat.kind {\n+                PatKind::Path(ref qpath) => is_lang_ctor(cx, qpath, OptionNone),\n+                PatKind::TupleStruct(ref qpath, [pat], _) =>\n+                    matches!(pat.kind, PatKind::Wild) && is_lang_ctor(cx, qpath, ResultErr),\n+                _ => false,\n+            }\n+        });\n+        let unwrap_arm = &arms[1 - idx];\n+        if let PatKind::TupleStruct(ref qpath, [unwrap_pat], _) = unwrap_arm.pat.kind;\n+        if is_lang_ctor(cx, qpath, OptionSome) || is_lang_ctor(cx, qpath, ResultOk);\n+        if let PatKind::Binding(_, binding_hir_id, ..) = unwrap_pat.kind;\n+        if path_to_local_id(unwrap_arm.body, binding_hir_id);\n+        if cx.typeck_results().expr_adjustments(unwrap_arm.body).is_empty();\n+        if !contains_return_break_continue_macro(or_arm.body);\n+        then {\n+            Some(or_arm)\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "1c216e135704c3ca4bdfba15937b5c5a64805cc0", "filename": "src/tools/clippy/clippy_lints/src/matches/match_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_bool.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -24,8 +24,8 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr:\n                     let exprs = if let PatKind::Lit(arm_bool) = arms[0].pat.kind {\n                         if let ExprKind::Lit(ref lit) = arm_bool.kind {\n                             match lit.node {\n-                                LitKind::Bool(true) => Some((&*arms[0].body, &*arms[1].body)),\n-                                LitKind::Bool(false) => Some((&*arms[1].body, &*arms[0].body)),\n+                                LitKind::Bool(true) => Some((arms[0].body, arms[1].body)),\n+                                LitKind::Bool(false) => Some((arms[1].body, arms[0].body)),\n                                 _ => None,\n                             }\n                         } else {"}, {"sha": "a68eec842abc51a08418e793c9b670e93e5b45a6", "filename": "src/tools/clippy/clippy_lints/src/matches/match_like_matches.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_wild;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{higher, is_wild};\n use rustc_ast::{Attribute, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::{Arm, BorrowKind, Expr, ExprKind, Guard, Pat};\n@@ -11,22 +11,24 @@ use rustc_span::source_map::Spanned;\n use super::MATCH_LIKE_MATCHES_MACRO;\n \n /// Lint a `match` or `if let .. { .. } else { .. }` expr that could be replaced by `matches!`\n-pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-    if let Some(higher::IfLet {\n-        let_pat,\n+pub(crate) fn check_if_let<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    let_pat: &'tcx Pat<'_>,\n+    let_expr: &'tcx Expr<'_>,\n+    then_expr: &'tcx Expr<'_>,\n+    else_expr: &'tcx Expr<'_>,\n+) {\n+    find_matches_sugg(\n+        cx,\n         let_expr,\n-        if_then,\n-        if_else: Some(if_else),\n-    }) = higher::IfLet::hir(cx, expr)\n-    {\n-        find_matches_sugg(\n-            cx,\n-            let_expr,\n-            IntoIterator::into_iter([(&[][..], Some(let_pat), if_then, None), (&[][..], None, if_else, None)]),\n-            expr,\n-            true,\n-        );\n-    }\n+        IntoIterator::into_iter([\n+            (&[][..], Some(let_pat), then_expr, None),\n+            (&[][..], None, else_expr, None),\n+        ]),\n+        expr,\n+        true,\n+    );\n }\n \n pub(super) fn check_match<'tcx>("}, {"sha": "2917f85c45f53250d889ec05242dfb5234ba15fa", "filename": "src/tools/clippy/clippy_lints/src/matches/match_on_vec_items.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_on_vec_items.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,61 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, LangItem};\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::MATCH_ON_VEC_ITEMS;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, scrutinee: &'tcx Expr<'_>) {\n+    if_chain! {\n+        if let Some(idx_expr) = is_vec_indexing(cx, scrutinee);\n+        if let ExprKind::Index(vec, idx) = idx_expr.kind;\n+\n+        then {\n+            // FIXME: could be improved to suggest surrounding every pattern with Some(_),\n+            // but only when `or_patterns` are stabilized.\n+            span_lint_and_sugg(\n+                cx,\n+                MATCH_ON_VEC_ITEMS,\n+                scrutinee.span,\n+                \"indexing into a vector may panic\",\n+                \"try this\",\n+                format!(\n+                    \"{}.get({})\",\n+                    snippet(cx, vec.span, \"..\"),\n+                    snippet(cx, idx.span, \"..\")\n+                ),\n+                Applicability::MaybeIncorrect\n+            );\n+        }\n+    }\n+}\n+\n+fn is_vec_indexing<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n+    if_chain! {\n+        if let ExprKind::Index(array, index) = expr.kind;\n+        if is_vector(cx, array);\n+        if !is_full_range(cx, index);\n+\n+        then {\n+            return Some(expr);\n+        }\n+    }\n+\n+    None\n+}\n+\n+fn is_vector(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    let ty = cx.typeck_results().expr_ty(expr);\n+    let ty = ty.peel_refs();\n+    is_type_diagnostic_item(cx, ty, sym::Vec)\n+}\n+\n+fn is_full_range(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    let ty = cx.typeck_results().expr_ty(expr);\n+    let ty = ty.peel_refs();\n+    is_type_lang_item(cx, ty, LangItem::RangeFull)\n+}"}, {"sha": "8302ce426e5707e257db4116b21740abb3e95a74", "filename": "src/tools/clippy/clippy_lints/src/matches/match_str_case_mismatch.rs", "status": "renamed", "additions": 18, "deletions": 57, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -3,48 +3,13 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::lint::in_external_macro;\n+use rustc_hir::{Arm, Expr, ExprKind, PatKind};\n+use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for `match` expressions modifying the case of a string with non-compliant arms\n-    ///\n-    /// ### Why is this bad?\n-    /// The arm is unreachable, which is likely a mistake\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let text = \"Foo\";\n-    ///\n-    /// match &*text.to_ascii_lowercase() {\n-    ///     \"foo\" => {},\n-    ///     \"Bar\" => {},\n-    ///     _ => {},\n-    /// }\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// # let text = \"Foo\";\n-    ///\n-    /// match &*text.to_ascii_lowercase() {\n-    ///     \"foo\" => {},\n-    ///     \"bar\" => {},\n-    ///     _ => {},\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.58.0\"]\n-    pub MATCH_STR_CASE_MISMATCH,\n-    correctness,\n-    \"creation of a case altering match expression with non-compliant arms\"\n-}\n-\n-declare_lint_pass!(MatchStrCaseMismatch => [MATCH_STR_CASE_MISMATCH]);\n+use super::MATCH_STR_CASE_MISMATCH;\n \n #[derive(Debug)]\n enum CaseMethod {\n@@ -54,25 +19,21 @@ enum CaseMethod {\n     AsciiUppercase,\n }\n \n-impl<'tcx> LateLintPass<'tcx> for MatchStrCaseMismatch {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if !in_external_macro(cx.tcx.sess, expr.span);\n-            if let ExprKind::Match(match_expr, arms, MatchSource::Normal) = expr.kind;\n-            if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty(match_expr).kind();\n-            if let ty::Str = ty.kind();\n-            then {\n-                let mut visitor = MatchExprVisitor {\n-                    cx,\n-                    case_method: None,\n-                };\n-\n-                visitor.visit_expr(match_expr);\n-\n-                if let Some(case_method) = visitor.case_method {\n-                    if let Some((bad_case_span, bad_case_sym)) = verify_case(&case_method, arms) {\n-                        lint(cx, &case_method, bad_case_span, bad_case_sym.as_str());\n-                    }\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, scrutinee: &'tcx Expr<'_>, arms: &'tcx [Arm<'_>]) {\n+    if_chain! {\n+        if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty(scrutinee).kind();\n+        if let ty::Str = ty.kind();\n+        then {\n+            let mut visitor = MatchExprVisitor {\n+                cx,\n+                case_method: None,\n+            };\n+\n+            visitor.visit_expr(scrutinee);\n+\n+            if let Some(case_method) = visitor.case_method {\n+                if let Some((bad_case_span, bad_case_sym)) = verify_case(&case_method, arms) {\n+                    lint(cx, &case_method, bad_case_span, bad_case_sym.as_str());\n                 }\n             }\n         }", "previous_filename": "src/tools/clippy/clippy_lints/src/match_str_case_mismatch.rs"}, {"sha": "d1e42f39e470dde07bdf5daee81a034846d5dd97", "filename": "src/tools/clippy/clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 338, "deletions": 13, "changes": 351, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,26 +1,34 @@\n use clippy_utils::source::{snippet_opt, span_starts_with, walk_span_to_context};\n-use clippy_utils::{meets_msrv, msrvs};\n+use clippy_utils::{higher, in_constant, meets_msrv, msrvs};\n use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n use rustc_lexer::{tokenize, TokenKind};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{Span, SpanData, SyntaxContext};\n \n+mod collapsible_match;\n mod infallible_destructuring_match;\n+mod manual_map;\n+mod manual_unwrap_or;\n mod match_as_ref;\n mod match_bool;\n mod match_like_matches;\n+mod match_on_vec_items;\n mod match_ref_pats;\n mod match_same_arms;\n mod match_single_binding;\n+mod match_str_case_mismatch;\n mod match_wild_enum;\n mod match_wild_err_arm;\n mod needless_match;\n mod overlapping_arms;\n mod redundant_pattern_match;\n mod rest_pat_in_fully_bound_struct;\n+mod significant_drop_in_scrutinee;\n mod single_match;\n+mod try_err;\n mod wild_in_or_pats;\n \n declare_clippy_lint! {\n@@ -610,6 +618,274 @@ declare_clippy_lint! {\n     \"`match` or match-like `if let` that are unnecessary\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Finds nested `match` or `if let` expressions where the patterns may be \"collapsed\" together\n+    /// without adding any branches.\n+    ///\n+    /// Note that this lint is not intended to find _all_ cases where nested match patterns can be merged, but only\n+    /// cases where merging would most likely make the code more readable.\n+    ///\n+    /// ### Why is this bad?\n+    /// It is unnecessarily verbose and complex.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn func(opt: Option<Result<u64, String>>) {\n+    ///     let n = match opt {\n+    ///         Some(n) => match n {\n+    ///             Ok(n) => n,\n+    ///             _ => return,\n+    ///         }\n+    ///         None => return,\n+    ///     };\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn func(opt: Option<Result<u64, String>>) {\n+    ///     let n = match opt {\n+    ///         Some(Ok(n)) => n,\n+    ///         _ => return,\n+    ///     };\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.50.0\"]\n+    pub COLLAPSIBLE_MATCH,\n+    style,\n+    \"Nested `match` or `if let` expressions where the patterns may be \\\"collapsed\\\" together.\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Finds patterns that reimplement `Option::unwrap_or` or `Result::unwrap_or`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Concise code helps focusing on behavior instead of boilerplate.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let foo: Option<i32> = None;\n+    /// match foo {\n+    ///     Some(v) => v,\n+    ///     None => 1,\n+    /// };\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// let foo: Option<i32> = None;\n+    /// foo.unwrap_or(1);\n+    /// ```\n+    #[clippy::version = \"1.49.0\"]\n+    pub MANUAL_UNWRAP_OR,\n+    complexity,\n+    \"finds patterns that can be encoded more concisely with `Option::unwrap_or` or `Result::unwrap_or`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `match vec[idx]` or `match vec[n..m]`.\n+    ///\n+    /// ### Why is this bad?\n+    /// This can panic at runtime.\n+    ///\n+    /// ### Example\n+    /// ```rust, no_run\n+    /// let arr = vec![0, 1, 2, 3];\n+    /// let idx = 1;\n+    ///\n+    /// // Bad\n+    /// match arr[idx] {\n+    ///     0 => println!(\"{}\", 0),\n+    ///     1 => println!(\"{}\", 3),\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust, no_run\n+    /// let arr = vec![0, 1, 2, 3];\n+    /// let idx = 1;\n+    ///\n+    /// // Good\n+    /// match arr.get(idx) {\n+    ///     Some(0) => println!(\"{}\", 0),\n+    ///     Some(1) => println!(\"{}\", 3),\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.45.0\"]\n+    pub MATCH_ON_VEC_ITEMS,\n+    pedantic,\n+    \"matching on vector elements can panic\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `match` expressions modifying the case of a string with non-compliant arms\n+    ///\n+    /// ### Why is this bad?\n+    /// The arm is unreachable, which is likely a mistake\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let text = \"Foo\";\n+    /// match &*text.to_ascii_lowercase() {\n+    ///     \"foo\" => {},\n+    ///     \"Bar\" => {},\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let text = \"Foo\";\n+    /// match &*text.to_ascii_lowercase() {\n+    ///     \"foo\" => {},\n+    ///     \"bar\" => {},\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.58.0\"]\n+    pub MATCH_STR_CASE_MISMATCH,\n+    correctness,\n+    \"creation of a case altering match expression with non-compliant arms\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Check for temporaries returned from function calls in a match scrutinee that have the\n+    /// `clippy::has_significant_drop` attribute.\n+    ///\n+    /// ### Why is this bad?\n+    /// The `clippy::has_significant_drop` attribute can be added to types whose Drop impls have\n+    /// an important side-effect, such as unlocking a mutex, making it important for users to be\n+    /// able to accurately understand their lifetimes. When a temporary is returned in a function\n+    /// call in a match scrutinee, its lifetime lasts until the end of the match block, which may\n+    /// be surprising.\n+    ///\n+    /// For `Mutex`es this can lead to a deadlock. This happens when the match scrutinee uses a\n+    /// function call that returns a `MutexGuard` and then tries to lock again in one of the match\n+    /// arms. In that case the `MutexGuard` in the scrutinee will not be dropped until the end of\n+    /// the match block and thus will not unlock.\n+    ///\n+    /// ### Example\n+    /// ```rust.ignore\n+    /// # use std::sync::Mutex;\n+    ///\n+    /// # struct State {}\n+    ///\n+    /// # impl State {\n+    /// #     fn foo(&self) -> bool {\n+    /// #         true\n+    /// #     }\n+    ///\n+    /// #     fn bar(&self) {}\n+    /// # }\n+    ///\n+    ///\n+    /// let mutex = Mutex::new(State {});\n+    ///\n+    /// match mutex.lock().unwrap().foo() {\n+    ///     true => {\n+    ///         mutex.lock().unwrap().bar(); // Deadlock!\n+    ///     }\n+    ///     false => {}\n+    /// };\n+    ///\n+    /// println!(\"All done!\");\n+    ///\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::sync::Mutex;\n+    ///\n+    /// # struct State {}\n+    ///\n+    /// # impl State {\n+    /// #     fn foo(&self) -> bool {\n+    /// #         true\n+    /// #     }\n+    ///\n+    /// #     fn bar(&self) {}\n+    /// # }\n+    ///\n+    /// let mutex = Mutex::new(State {});\n+    ///\n+    /// let is_foo = mutex.lock().unwrap().foo();\n+    /// match is_foo {\n+    ///     true => {\n+    ///         mutex.lock().unwrap().bar();\n+    ///     }\n+    ///     false => {}\n+    /// };\n+    ///\n+    /// println!(\"All done!\");\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub SIGNIFICANT_DROP_IN_SCRUTINEE,\n+    suspicious,\n+    \"warns when a temporary of a type with a drop with a significant side-effect might have a surprising lifetime\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for usages of `Err(x)?`.\n+    ///\n+    /// ### Why is this bad?\n+    /// The `?` operator is designed to allow calls that\n+    /// can fail to be easily chained. For example, `foo()?.bar()` or\n+    /// `foo(bar()?)`. Because `Err(x)?` can't be used that way (it will\n+    /// always return), it is more clear to write `return Err(x)`.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn foo(fail: bool) -> Result<i32, String> {\n+    ///     if fail {\n+    ///       Err(\"failed\")?;\n+    ///     }\n+    ///     Ok(0)\n+    /// }\n+    /// ```\n+    /// Could be written:\n+    ///\n+    /// ```rust\n+    /// fn foo(fail: bool) -> Result<i32, String> {\n+    ///     if fail {\n+    ///       return Err(\"failed\".into());\n+    ///     }\n+    ///     Ok(0)\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.38.0\"]\n+    pub TRY_ERR,\n+    restriction,\n+    \"return errors explicitly rather than hiding them behind a `?`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for usages of `match` which could be implemented using `map`\n+    ///\n+    /// ### Why is this bad?\n+    /// Using the `map` method is clearer and more concise.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// match Some(0) {\n+    ///     Some(x) => Some(x + 1),\n+    ///     None => None,\n+    /// };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// Some(0).map(|x| x + 1);\n+    /// ```\n+    #[clippy::version = \"1.52.0\"]\n+    pub MANUAL_MAP,\n+    style,\n+    \"reimplementation of `map`\"\n+}\n+\n #[derive(Default)]\n pub struct Matches {\n     msrv: Option<RustcVersion>,\n@@ -644,19 +920,42 @@ impl_lint_pass!(Matches => [\n     MATCH_LIKE_MATCHES_MACRO,\n     MATCH_SAME_ARMS,\n     NEEDLESS_MATCH,\n+    COLLAPSIBLE_MATCH,\n+    MANUAL_UNWRAP_OR,\n+    MATCH_ON_VEC_ITEMS,\n+    MATCH_STR_CASE_MISMATCH,\n+    SIGNIFICANT_DROP_IN_SCRUTINEE,\n+    TRY_ERR,\n+    MANUAL_MAP,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if expr.span.from_expansion() {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n+        let from_expansion = expr.span.from_expansion();\n \n         if let ExprKind::Match(ex, arms, source) = expr.kind {\n-            if !span_starts_with(cx, expr.span, \"match\") {\n+            if source == MatchSource::Normal && !span_starts_with(cx, expr.span, \"match\") {\n                 return;\n             }\n-            if !contains_cfg_arm(cx, expr, ex, arms) {\n+            if matches!(source, MatchSource::Normal | MatchSource::ForLoopDesugar) {\n+                significant_drop_in_scrutinee::check(cx, expr, ex, source);\n+            }\n+\n+            collapsible_match::check_match(cx, arms);\n+            if !from_expansion {\n+                // These don't depend on a relationship between multiple arms\n+                match_wild_err_arm::check(cx, ex, arms);\n+                wild_in_or_pats::check(cx, arms);\n+            }\n+\n+            if source == MatchSource::TryDesugar {\n+                try_err::check(cx, expr, ex);\n+            }\n+\n+            if !from_expansion && !contains_cfg_arm(cx, expr, ex, arms) {\n                 if source == MatchSource::Normal {\n                     if !(meets_msrv(self.msrv, msrvs::MATCHES_MACRO)\n                         && match_like_matches::check_match(cx, expr, ex, arms))\n@@ -671,6 +970,13 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n                     match_wild_enum::check(cx, ex, arms);\n                     match_as_ref::check(cx, ex, arms, expr);\n                     needless_match::check_match(cx, ex, arms, expr);\n+                    match_on_vec_items::check(cx, ex);\n+                    match_str_case_mismatch::check(cx, ex, arms);\n+\n+                    if !in_constant(cx, expr.hir_id) {\n+                        manual_unwrap_or::check(cx, expr, ex, arms);\n+                        manual_map::check_match(cx, expr, ex, arms);\n+                    }\n \n                     if self.infallible_destructuring_match_linted {\n                         self.infallible_destructuring_match_linted = false;\n@@ -680,16 +986,35 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n                 }\n                 match_ref_pats::check(cx, ex, arms.iter().map(|el| el.pat), expr);\n             }\n-\n-            // These don't depend on a relationship between multiple arms\n-            match_wild_err_arm::check(cx, ex, arms);\n-            wild_in_or_pats::check(cx, arms);\n-        } else {\n-            if meets_msrv(self.msrv, msrvs::MATCHES_MACRO) {\n-                match_like_matches::check(cx, expr);\n+        } else if let Some(if_let) = higher::IfLet::hir(cx, expr) {\n+            collapsible_match::check_if_let(cx, if_let.let_pat, if_let.if_then, if_let.if_else);\n+            if !from_expansion {\n+                if let Some(else_expr) = if_let.if_else {\n+                    if meets_msrv(self.msrv, msrvs::MATCHES_MACRO) {\n+                        match_like_matches::check_if_let(\n+                            cx,\n+                            expr,\n+                            if_let.let_pat,\n+                            if_let.let_expr,\n+                            if_let.if_then,\n+                            else_expr,\n+                        );\n+                    }\n+                    if !in_constant(cx, expr.hir_id) {\n+                        manual_map::check_if_let(cx, expr, if_let.let_pat, if_let.let_expr, if_let.if_then, else_expr);\n+                    }\n+                }\n+                redundant_pattern_match::check_if_let(\n+                    cx,\n+                    expr,\n+                    if_let.let_pat,\n+                    if_let.let_expr,\n+                    if_let.if_else.is_some(),\n+                );\n+                needless_match::check_if_let(cx, expr, &if_let);\n             }\n+        } else if !from_expansion {\n             redundant_pattern_match::check(cx, expr);\n-            needless_match::check(cx, expr);\n         }\n     }\n "}, {"sha": "fa19cddd35ec7afff4258f68eb901967e01b411b", "filename": "src/tools/clippy/clippy_lints/src/matches/needless_match.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -47,20 +47,18 @@ pub(crate) fn check_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>],\n ///     some_enum\n /// }\n /// ```\n-pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>) {\n-    if let Some(ref if_let) = higher::IfLet::hir(cx, ex) {\n-        if !is_else_clause(cx.tcx, ex) && expr_ty_matches_p_ty(cx, if_let.let_expr, ex) && check_if_let(cx, if_let) {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                NEEDLESS_MATCH,\n-                ex.span,\n-                \"this if-let expression is unnecessary\",\n-                \"replace it with\",\n-                snippet_with_applicability(cx, if_let.let_expr.span, \"..\", &mut applicability).to_string(),\n-                applicability,\n-            );\n-        }\n+pub(crate) fn check_if_let<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'_>, if_let: &higher::IfLet<'tcx>) {\n+    if !is_else_clause(cx.tcx, ex) && expr_ty_matches_p_ty(cx, if_let.let_expr, ex) && check_if_let_inner(cx, if_let) {\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_and_sugg(\n+            cx,\n+            NEEDLESS_MATCH,\n+            ex.span,\n+            \"this if-let expression is unnecessary\",\n+            \"replace it with\",\n+            snippet_with_applicability(cx, if_let.let_expr.span, \"..\", &mut applicability).to_string(),\n+            applicability,\n+        );\n     }\n }\n \n@@ -77,15 +75,15 @@ fn check_all_arms(cx: &LateContext<'_>, match_expr: &Expr<'_>, arms: &[Arm<'_>])\n     true\n }\n \n-fn check_if_let(cx: &LateContext<'_>, if_let: &higher::IfLet<'_>) -> bool {\n+fn check_if_let_inner(cx: &LateContext<'_>, if_let: &higher::IfLet<'_>) -> bool {\n     if let Some(if_else) = if_let.if_else {\n         if !pat_same_as_expr(if_let.let_pat, peel_blocks_with_stmt(if_let.if_then)) {\n             return false;\n         }\n \n         // Recursively check for each `else if let` phrase,\n         if let Some(ref nested_if_let) = higher::IfLet::hir(cx, if_else) {\n-            return check_if_let(cx, nested_if_let);\n+            return check_if_let_inner(cx, nested_if_let);\n         }\n \n         if matches!(if_else.kind, ExprKind::Block(..)) {"}, {"sha": "095cd43ea13fb2f9bda22d36d3a7d9dc690fd8b9", "filename": "src/tools/clippy/clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -18,19 +18,21 @@ use rustc_middle::ty::{self, subst::GenericArgKind, DefIdTree, Ty};\n use rustc_span::sym;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-    if let Some(higher::IfLet {\n-        if_else,\n-        let_pat,\n-        let_expr,\n-        ..\n-    }) = higher::IfLet::hir(cx, expr)\n-    {\n-        find_sugg_for_if_let(cx, expr, let_pat, let_expr, \"if\", if_else.is_some());\n-    } else if let Some(higher::WhileLet { let_pat, let_expr, .. }) = higher::WhileLet::hir(expr) {\n+    if let Some(higher::WhileLet { let_pat, let_expr, .. }) = higher::WhileLet::hir(expr) {\n         find_sugg_for_if_let(cx, expr, let_pat, let_expr, \"while\", false);\n     }\n }\n \n+pub(super) fn check_if_let<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    pat: &'tcx Pat<'_>,\n+    scrutinee: &'tcx Expr<'_>,\n+    has_else: bool,\n+) {\n+    find_sugg_for_if_let(cx, expr, pat, scrutinee, \"if\", has_else);\n+}\n+\n // Extract the generic arguments out of a type\n fn try_get_generic_ty(ty: Ty<'_>, index: usize) -> Option<Ty<'_>> {\n     if_chain! {"}, {"sha": "a211dc18f9e1e75c2676fcc371ec21694de5f9b0", "filename": "src/tools/clippy/clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "renamed", "additions": 71, "deletions": 145, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -4,103 +4,25 @@ use clippy_utils::get_attr;\n use clippy_utils::source::{indent_of, snippet};\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_hir::{Expr, ExprKind, MatchSource};\n+use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{Ty, TypeAndMut};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Check for temporaries returned from function calls in a match scrutinee that have the\n-    /// `clippy::has_significant_drop` attribute.\n-    ///\n-    /// ### Why is this bad?\n-    /// The `clippy::has_significant_drop` attribute can be added to types whose Drop impls have\n-    /// an important side-effect, such as unlocking a mutex, making it important for users to be\n-    /// able to accurately understand their lifetimes. When a temporary is returned in a function\n-    /// call in a match scrutinee, its lifetime lasts until the end of the match block, which may\n-    /// be surprising.\n-    ///\n-    /// For `Mutex`es this can lead to a deadlock. This happens when the match scrutinee uses a\n-    /// function call that returns a `MutexGuard` and then tries to lock again in one of the match\n-    /// arms. In that case the `MutexGuard` in the scrutinee will not be dropped until the end of\n-    /// the match block and thus will not unlock.\n-    ///\n-    /// ### Example\n-    /// ```rust.ignore\n-    /// # use std::sync::Mutex;\n-    ///\n-    /// # struct State {}\n-    ///\n-    /// # impl State {\n-    /// #     fn foo(&self) -> bool {\n-    /// #         true\n-    /// #     }\n-    ///\n-    /// #     fn bar(&self) {}\n-    /// # }\n-    ///\n-    ///\n-    /// let mutex = Mutex::new(State {});\n-    ///\n-    /// match mutex.lock().unwrap().foo() {\n-    ///     true => {\n-    ///         mutex.lock().unwrap().bar(); // Deadlock!\n-    ///     }\n-    ///     false => {}\n-    /// };\n-    ///\n-    /// println!(\"All done!\");\n-    ///\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// # use std::sync::Mutex;\n-    ///\n-    /// # struct State {}\n-    ///\n-    /// # impl State {\n-    /// #     fn foo(&self) -> bool {\n-    /// #         true\n-    /// #     }\n-    ///\n-    /// #     fn bar(&self) {}\n-    /// # }\n-    ///\n-    /// let mutex = Mutex::new(State {});\n-    ///\n-    /// let is_foo = mutex.lock().unwrap().foo();\n-    /// match is_foo {\n-    ///     true => {\n-    ///         mutex.lock().unwrap().bar();\n-    ///     }\n-    ///     false => {}\n-    /// };\n-    ///\n-    /// println!(\"All done!\");\n-    /// ```\n-    #[clippy::version = \"1.60.0\"]\n-    pub SIGNIFICANT_DROP_IN_SCRUTINEE,\n-    suspicious,\n-    \"warns when a temporary of a type with a drop with a significant side-effect might have a surprising lifetime\"\n-}\n-\n-declare_lint_pass!(SignificantDropInScrutinee => [SIGNIFICANT_DROP_IN_SCRUTINEE]);\n+use super::SIGNIFICANT_DROP_IN_SCRUTINEE;\n \n-impl<'tcx> LateLintPass<'tcx> for SignificantDropInScrutinee {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if let Some(suggestions) = has_significant_drop_in_scrutinee(cx, expr) {\n-            for found in suggestions {\n-                span_lint_and_then(\n-                    cx,\n-                    SIGNIFICANT_DROP_IN_SCRUTINEE,\n-                    found.found_span,\n-                    \"temporary with significant drop in match scrutinee\",\n-                    |diag| set_diagnostic(diag, cx, expr, found),\n-                );\n-            }\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'tcx>,\n+    scrutinee: &'tcx Expr<'_>,\n+    source: MatchSource,\n+) {\n+    if let Some((suggestions, message)) = has_significant_drop_in_scrutinee(cx, scrutinee, source) {\n+        for found in suggestions {\n+            span_lint_and_then(cx, SIGNIFICANT_DROP_IN_SCRUTINEE, found.found_span, message, |diag| {\n+                set_diagnostic(diag, cx, expr, found);\n+            });\n         }\n     }\n }\n@@ -152,13 +74,18 @@ fn set_diagnostic<'tcx>(diag: &mut Diagnostic, cx: &LateContext<'tcx>, expr: &'t\n /// may have a surprising lifetime.\n fn has_significant_drop_in_scrutinee<'tcx, 'a>(\n     cx: &'a LateContext<'tcx>,\n-    expr: &'tcx Expr<'tcx>,\n-) -> Option<Vec<FoundSigDrop>> {\n+    scrutinee: &'tcx Expr<'tcx>,\n+    source: MatchSource,\n+) -> Option<(Vec<FoundSigDrop>, &'static str)> {\n     let mut helper = SigDropHelper::new(cx);\n-    match expr.kind {\n-        ExprKind::Match(match_expr, _, _) => helper.find_sig_drop(match_expr),\n-        _ => None,\n-    }\n+    helper.find_sig_drop(scrutinee).map(|drops| {\n+        let message = if source == MatchSource::Normal {\n+            \"temporary with significant drop in match scrutinee\"\n+        } else {\n+            \"temporary with significant drop in for loop\"\n+        };\n+        (drops, message)\n+    })\n }\n \n struct SigDropHelper<'a, 'tcx> {\n@@ -213,6 +140,19 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n         self.sig_drop_spans.take()\n     }\n \n+    fn replace_current_sig_drop(\n+        &mut self,\n+        found_span: Span,\n+        is_unit_return_val: bool,\n+        lint_suggestion: LintSuggestion,\n+    ) {\n+        self.current_sig_drop.replace(FoundSigDrop {\n+            found_span,\n+            is_unit_return_val,\n+            lint_suggestion,\n+        });\n+    }\n+\n     /// This will try to set the current suggestion (so it can be moved into the suggestions vec\n     /// later). If `allow_move_and_clone` is false, the suggestion *won't* be set -- this gives us\n     /// an opportunity to look for another type in the chain that will be trivially copyable.\n@@ -229,25 +169,15 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n             // but let's avoid any chance of an ICE\n             if let Some(TypeAndMut { ty, .. }) = ty.builtin_deref(true) {\n                 if ty.is_trivially_pure_clone_copy() {\n-                    self.current_sig_drop.replace(FoundSigDrop {\n-                        found_span: expr.span,\n-                        is_unit_return_val: false,\n-                        lint_suggestion: LintSuggestion::MoveAndDerefToCopy,\n-                    });\n+                    self.replace_current_sig_drop(expr.span, false, LintSuggestion::MoveAndDerefToCopy);\n                 } else if allow_move_and_clone {\n-                    self.current_sig_drop.replace(FoundSigDrop {\n-                        found_span: expr.span,\n-                        is_unit_return_val: false,\n-                        lint_suggestion: LintSuggestion::MoveAndClone,\n-                    });\n+                    self.replace_current_sig_drop(expr.span, false, LintSuggestion::MoveAndClone);\n                 }\n             }\n         } else if ty.is_trivially_pure_clone_copy() {\n-            self.current_sig_drop.replace(FoundSigDrop {\n-                found_span: expr.span,\n-                is_unit_return_val: false,\n-                lint_suggestion: LintSuggestion::MoveOnly,\n-            });\n+            self.replace_current_sig_drop(expr.span, false, LintSuggestion::MoveOnly);\n+        } else if allow_move_and_clone {\n+            self.replace_current_sig_drop(expr.span, false, LintSuggestion::MoveAndClone);\n         }\n     }\n \n@@ -279,11 +209,7 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n         // If either side had a significant drop, suggest moving the entire scrutinee to avoid\n         // unnecessary copies and to simplify cases where both sides have significant drops.\n         if self.has_significant_drop {\n-            self.current_sig_drop.replace(FoundSigDrop {\n-                found_span: span,\n-                is_unit_return_val,\n-                lint_suggestion: LintSuggestion::MoveOnly,\n-            });\n+            self.replace_current_sig_drop(span, is_unit_return_val, LintSuggestion::MoveOnly);\n         }\n \n         self.special_handling_for_binary_op = false;\n@@ -363,34 +289,34 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n                 }\n             }\n             ExprKind::Box(..) |\n-                ExprKind::Array(..) |\n-                ExprKind::Call(..) |\n-                ExprKind::Unary(..) |\n-                ExprKind::If(..) |\n-                ExprKind::Match(..) |\n-                ExprKind::Field(..) |\n-                ExprKind::Index(..) |\n-                ExprKind::Ret(..) |\n-                ExprKind::Repeat(..) |\n-                ExprKind::Yield(..) |\n-                ExprKind::MethodCall(..) => walk_expr(self, ex),\n+            ExprKind::Array(..) |\n+            ExprKind::Call(..) |\n+            ExprKind::Unary(..) |\n+            ExprKind::If(..) |\n+            ExprKind::Match(..) |\n+            ExprKind::Field(..) |\n+            ExprKind::Index(..) |\n+            ExprKind::Ret(..) |\n+            ExprKind::Repeat(..) |\n+            ExprKind::Yield(..) |\n+            ExprKind::MethodCall(..) => walk_expr(self, ex),\n             ExprKind::AddrOf(_, _, _) |\n-                ExprKind::Block(_, _) |\n-                ExprKind::Break(_, _) |\n-                ExprKind::Cast(_, _) |\n-                // Don't want to check the closure itself, only invocation, which is covered by MethodCall\n-                ExprKind::Closure(_, _, _, _, _) |\n-                ExprKind::ConstBlock(_) |\n-                ExprKind::Continue(_) |\n-                ExprKind::DropTemps(_) |\n-                ExprKind::Err |\n-                ExprKind::InlineAsm(_) |\n-                ExprKind::Let(_) |\n-                ExprKind::Lit(_) |\n-                ExprKind::Loop(_, _, _, _) |\n-                ExprKind::Path(_) |\n-                ExprKind::Struct(_, _, _) |\n-                ExprKind::Type(_, _) => {\n+            ExprKind::Block(_, _) |\n+            ExprKind::Break(_, _) |\n+            ExprKind::Cast(_, _) |\n+            // Don't want to check the closure itself, only invocation, which is covered by MethodCall\n+            ExprKind::Closure(_, _, _, _, _) |\n+            ExprKind::ConstBlock(_) |\n+            ExprKind::Continue(_) |\n+            ExprKind::DropTemps(_) |\n+            ExprKind::Err |\n+            ExprKind::InlineAsm(_) |\n+            ExprKind::Let(_) |\n+            ExprKind::Lit(_) |\n+            ExprKind::Loop(_, _, _, _) |\n+            ExprKind::Path(_) |\n+            ExprKind::Struct(_, _, _) |\n+            ExprKind::Type(_, _) => {\n                 return;\n             }\n         }", "previous_filename": "src/tools/clippy/clippy_lints/src/significant_drop_in_scrutinee.rs"}, {"sha": "0491a0679f37abc89393aec264321c296316b721", "filename": "src/tools/clippy/clippy_lints/src/matches/try_err.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,145 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{get_parent_expr, is_lang_ctor, match_def_path, paths};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::LangItem::ResultErr;\n+use rustc_hir::{Expr, ExprKind, LangItem, MatchSource, QPath};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, Ty};\n+use rustc_span::{hygiene, sym};\n+\n+use super::TRY_ERR;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, scrutinee: &'tcx Expr<'_>) {\n+    // Looks for a structure like this:\n+    // match ::std::ops::Try::into_result(Err(5)) {\n+    //     ::std::result::Result::Err(err) =>\n+    //         #[allow(unreachable_code)]\n+    //         return ::std::ops::Try::from_error(::std::convert::From::from(err)),\n+    //     ::std::result::Result::Ok(val) =>\n+    //         #[allow(unreachable_code)]\n+    //         val,\n+    // };\n+    if_chain! {\n+        if let ExprKind::Call(match_fun, try_args) = scrutinee.kind;\n+        if let ExprKind::Path(ref match_fun_path) = match_fun.kind;\n+        if matches!(match_fun_path, QPath::LangItem(LangItem::TryTraitBranch, ..));\n+        if let Some(try_arg) = try_args.get(0);\n+        if let ExprKind::Call(err_fun, err_args) = try_arg.kind;\n+        if let Some(err_arg) = err_args.get(0);\n+        if let ExprKind::Path(ref err_fun_path) = err_fun.kind;\n+        if is_lang_ctor(cx, err_fun_path, ResultErr);\n+        if let Some(return_ty) = find_return_type(cx, &expr.kind);\n+        then {\n+            let prefix;\n+            let suffix;\n+            let err_ty;\n+\n+            if let Some(ty) = result_error_type(cx, return_ty) {\n+                prefix = \"Err(\";\n+                suffix = \")\";\n+                err_ty = ty;\n+            } else if let Some(ty) = poll_result_error_type(cx, return_ty) {\n+                prefix = \"Poll::Ready(Err(\";\n+                suffix = \"))\";\n+                err_ty = ty;\n+            } else if let Some(ty) = poll_option_result_error_type(cx, return_ty) {\n+                prefix = \"Poll::Ready(Some(Err(\";\n+                suffix = \")))\";\n+                err_ty = ty;\n+            } else {\n+                return;\n+            };\n+\n+            let expr_err_ty = cx.typeck_results().expr_ty(err_arg);\n+            let span = hygiene::walk_chain(err_arg.span, try_arg.span.ctxt());\n+            let mut applicability = Applicability::MachineApplicable;\n+            let origin_snippet = snippet_with_applicability(cx, span, \"_\", &mut applicability);\n+            let ret_prefix = if get_parent_expr(cx, expr).map_or(false, |e| matches!(e.kind, ExprKind::Ret(_))) {\n+                \"\" // already returns\n+            } else {\n+                \"return \"\n+            };\n+            let suggestion = if err_ty == expr_err_ty {\n+                format!(\"{}{}{}{}\", ret_prefix, prefix, origin_snippet, suffix)\n+            } else {\n+                format!(\"{}{}{}.into(){}\", ret_prefix, prefix, origin_snippet, suffix)\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                TRY_ERR,\n+                expr.span,\n+                \"returning an `Err(_)` with the `?` operator\",\n+                \"try this\",\n+                suggestion,\n+                applicability,\n+            );\n+        }\n+    }\n+}\n+\n+/// Finds function return type by examining return expressions in match arms.\n+fn find_return_type<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx ExprKind<'_>) -> Option<Ty<'tcx>> {\n+    if let ExprKind::Match(_, arms, MatchSource::TryDesugar) = expr {\n+        for arm in arms.iter() {\n+            if let ExprKind::Ret(Some(ret)) = arm.body.kind {\n+                return Some(cx.typeck_results().expr_ty(ret));\n+            }\n+        }\n+    }\n+    None\n+}\n+\n+/// Extracts the error type from Result<T, E>.\n+fn result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+    if_chain! {\n+        if let ty::Adt(_, subst) = ty.kind();\n+        if is_type_diagnostic_item(cx, ty, sym::Result);\n+        then {\n+            Some(subst.type_at(1))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Extracts the error type from Poll<Result<T, E>>.\n+fn poll_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+    if_chain! {\n+        if let ty::Adt(def, subst) = ty.kind();\n+        if match_def_path(cx, def.did(), &paths::POLL);\n+        let ready_ty = subst.type_at(0);\n+\n+        if let ty::Adt(ready_def, ready_subst) = ready_ty.kind();\n+        if cx.tcx.is_diagnostic_item(sym::Result, ready_def.did());\n+        then {\n+            Some(ready_subst.type_at(1))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Extracts the error type from Poll<Option<Result<T, E>>>.\n+fn poll_option_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+    if_chain! {\n+        if let ty::Adt(def, subst) = ty.kind();\n+        if match_def_path(cx, def.did(), &paths::POLL);\n+        let ready_ty = subst.type_at(0);\n+\n+        if let ty::Adt(ready_def, ready_subst) = ready_ty.kind();\n+        if cx.tcx.is_diagnostic_item(sym::Option, ready_def.did());\n+        let some_ty = ready_subst.type_at(0);\n+\n+        if let ty::Adt(some_def, some_subst) = some_ty.kind();\n+        if cx.tcx.is_diagnostic_item(sym::Result, some_def.did());\n+        then {\n+            Some(some_subst.type_at(1))\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "23368238ef5cce6511ff799e008287b5b9fc4ccd", "filename": "src/tools/clippy/clippy_lints/src/methods/get_last_with_len.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fget_last_with_len.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,55 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::SpanlessEq;\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::source_map::Spanned;\n+use rustc_span::sym;\n+\n+use super::GET_LAST_WITH_LEN;\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, arg: &Expr<'_>) {\n+    // Argument to \"get\" is a subtraction\n+    if let ExprKind::Binary(\n+        Spanned {\n+            node: BinOpKind::Sub, ..\n+        },\n+        lhs,\n+        rhs,\n+    ) = arg.kind\n+\n+        // LHS of subtraction is \"x.len()\"\n+        && let ExprKind::MethodCall(lhs_path, [lhs_recv], _) = &lhs.kind\n+        && lhs_path.ident.name == sym::len\n+\n+        // RHS of subtraction is 1\n+        && let ExprKind::Lit(rhs_lit) = &rhs.kind\n+        && let LitKind::Int(1, ..) = rhs_lit.node\n+\n+        // check that recv == lhs_recv `recv.get(lhs_recv.len() - 1)`\n+        && SpanlessEq::new(cx).eq_expr(recv, lhs_recv)\n+        && !recv.can_have_side_effects()\n+    {\n+        let method = match cx.typeck_results().expr_ty_adjusted(recv).peel_refs().kind() {\n+            ty::Adt(def, _) if cx.tcx.is_diagnostic_item(sym::VecDeque, def.did()) => \"back\",\n+            ty::Slice(_) => \"last\",\n+            _ => return,\n+        };\n+\n+        let mut applicability = Applicability::MachineApplicable;\n+        let recv_snippet = snippet_with_applicability(cx, recv.span, \"_\", &mut applicability);\n+\n+        span_lint_and_sugg(\n+            cx,\n+            GET_LAST_WITH_LEN,\n+            expr.span,\n+            &format!(\"accessing last element with `{recv_snippet}.get({recv_snippet}.len() - 1)`\"),\n+            \"try\",\n+            format!(\"{recv_snippet}.{method}()\"),\n+            applicability,\n+        );\n+    }\n+}"}, {"sha": "b8d1dabe007641423c65a180080412c750222117", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_next_slice.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -34,13 +34,18 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, cal\n             if let ast::LitKind::Int(start_idx, _) = start_lit.node;\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n+                let suggest = if start_idx == 0 {\n+                    format!(\"{}.first()\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability))\n+                } else {\n+                    format!(\"{}.get({})\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability), start_idx)\n+                };\n                 span_lint_and_sugg(\n                     cx,\n                     ITER_NEXT_SLICE,\n                     expr.span,\n                     \"using `.iter().next()` on a Slice without end index\",\n                     \"try calling\",\n-                    format!(\"{}.get({})\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability), start_idx),\n+                    suggest,\n                     applicability,\n                 );\n             }\n@@ -55,7 +60,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, cal\n             \"using `.iter().next()` on an array\",\n             \"try calling\",\n             format!(\n-                \"{}.get(0)\",\n+                \"{}.first()\",\n                 snippet_with_applicability(cx, caller_expr.span, \"..\", &mut applicability)\n             ),\n             applicability,"}, {"sha": "7308e74c323e3d542bcbe52fab2641695e230495", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 98, "deletions": 59, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -21,6 +21,7 @@ mod filter_next;\n mod flat_map_identity;\n mod flat_map_option;\n mod from_iter_instead_of_collect;\n+mod get_last_with_len;\n mod get_unwrap;\n mod implicit_clone;\n mod inefficient_to_string;\n@@ -44,6 +45,7 @@ mod map_identity;\n mod map_unwrap_or;\n mod needless_option_as_deref;\n mod needless_option_take;\n+mod no_effect_replace;\n mod ok_expect;\n mod option_as_ref_deref;\n mod option_map_or_none;\n@@ -192,25 +194,18 @@ declare_clippy_lint! {\n     ///\n     /// ### Examples\n     /// ```rust\n-    /// # let opt = Some(1);\n-    ///\n-    /// // Bad\n-    /// opt.unwrap();\n-    ///\n-    /// // Good\n-    /// opt.expect(\"more helpful message\");\n+    /// # let option = Some(1);\n+    /// # let result: Result<usize, ()> = Ok(1);\n+    /// option.unwrap();\n+    /// result.unwrap();\n     /// ```\n     ///\n-    /// // or\n-    ///\n+    /// Use instead:\n     /// ```rust\n-    /// # let res: Result<usize, ()> = Ok(1);\n-    ///\n-    /// // Bad\n-    /// res.unwrap();\n-    ///\n-    /// // Good\n-    /// res.expect(\"more helpful message\");\n+    /// # let option = Some(1);\n+    /// # let result: Result<usize, ()> = Ok(1);\n+    /// option.expect(\"more helpful message\");\n+    /// result.expect(\"more helpful message\");\n     /// ```\n     #[clippy::version = \"1.45.0\"]\n     pub UNWRAP_USED,\n@@ -233,27 +228,21 @@ declare_clippy_lint! {\n     ///\n     /// ### Examples\n     /// ```rust,ignore\n-    /// # let opt = Some(1);\n-    ///\n-    /// // Bad\n-    /// opt.expect(\"one\");\n-    ///\n-    /// // Good\n-    /// let opt = Some(1);\n-    /// opt?;\n+    /// # let option = Some(1);\n+    /// # let result: Result<usize, ()> = Ok(1);\n+    /// option.expect(\"one\");\n+    /// result.expect(\"one\");\n     /// ```\n     ///\n-    /// // or\n-    ///\n-    /// ```rust\n-    /// # let res: Result<usize, ()> = Ok(1);\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// # let option = Some(1);\n+    /// # let result: Result<usize, ()> = Ok(1);\n+    /// option?;\n     ///\n-    /// // Bad\n-    /// res.expect(\"one\");\n+    /// // or\n     ///\n-    /// // Good\n-    /// res?;\n-    /// # Ok::<(), ()>(())\n+    /// result?;\n     /// ```\n     #[clippy::version = \"1.45.0\"]\n     pub EXPECT_USED,\n@@ -429,26 +418,20 @@ declare_clippy_lint! {\n     ///\n     /// ### Examples\n     /// ```rust\n-    /// # let x = Some(1);\n-    ///\n-    /// // Bad\n-    /// x.map(|a| a + 1).unwrap_or(0);\n-    ///\n-    /// // Good\n-    /// x.map_or(0, |a| a + 1);\n+    /// # let option = Some(1);\n+    /// # let result: Result<usize, ()> = Ok(1);\n+    /// # fn some_function(foo: ()) -> usize { 1 }\n+    /// option.map(|a| a + 1).unwrap_or(0);\n+    /// result.map(|a| a + 1).unwrap_or_else(some_function);\n     /// ```\n     ///\n-    /// // or\n-    ///\n+    /// Use instead:\n     /// ```rust\n-    /// # let x: Result<usize, ()> = Ok(1);\n+    /// # let option = Some(1);\n+    /// # let result: Result<usize, ()> = Ok(1);\n     /// # fn some_function(foo: ()) -> usize { 1 }\n-    ///\n-    /// // Bad\n-    /// x.map(|a| a + 1).unwrap_or_else(some_function);\n-    ///\n-    /// // Good\n-    /// x.map_or_else(some_function, |a| a + 1);\n+    /// option.map_or(0, |a| a + 1);\n+    /// result.map_or_else(some_function, |a| a + 1);\n     /// ```\n     #[clippy::version = \"1.45.0\"]\n     pub MAP_UNWRAP_OR,\n@@ -791,13 +774,14 @@ declare_clippy_lint! {\n     /// # let foo = Some(String::new());\n     /// foo.unwrap_or(String::new());\n     /// ```\n-    /// this can instead be written:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let foo = Some(String::new());\n     /// foo.unwrap_or_else(String::new);\n-    /// ```\n-    /// or\n-    /// ```rust\n+    ///\n+    /// // or\n+    ///\n     /// # let foo = Some(String::new());\n     /// foo.unwrap_or_default();\n     /// ```\n@@ -861,15 +845,14 @@ declare_clippy_lint! {\n     /// # let err_code = \"418\";\n     /// # let err_msg = \"I'm a teapot\";\n     /// foo.expect(&format!(\"Err {}: {}\", err_code, err_msg));\n-    /// ```\n-    /// or\n-    /// ```rust\n+    ///\n+    /// // or\n+    ///\n     /// # let foo = Some(String::new());\n-    /// # let err_code = \"418\";\n-    /// # let err_msg = \"I'm a teapot\";\n     /// foo.expect(format!(\"Err {}: {}\", err_code, err_msg).as_str());\n     /// ```\n-    /// this can instead be written:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let foo = Some(String::new());\n     /// # let err_code = \"418\";\n@@ -1209,6 +1192,38 @@ declare_clippy_lint! {\n     \"replace `.drain(..)` with `.into_iter()`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for using `x.get(x.len() - 1)` instead of\n+    /// `x.last()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Using `x.last()` is easier to read and has the same\n+    /// result.\n+    ///\n+    /// Note that using `x[x.len() - 1]` is semantically different from\n+    /// `x.last()`.  Indexing into the array will panic on out-of-bounds\n+    /// accesses, while `x.get()` and `x.last()` will return `None`.\n+    ///\n+    /// There is another lint (get_unwrap) that covers the case of using\n+    /// `x.get(index).unwrap()` instead of `x[index]`.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // Bad\n+    /// let x = vec![2, 3, 5];\n+    /// let last_element = x.get(x.len() - 1);\n+    ///\n+    /// // Good\n+    /// let x = vec![2, 3, 5];\n+    /// let last_element = x.last();\n+    /// ```\n+    #[clippy::version = \"1.37.0\"]\n+    pub GET_LAST_WITH_LEN,\n+    complexity,\n+    \"Using `x.get(x.len() - 1)` when `x.last()` is correct and simpler\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for use of `.get().unwrap()` (or\n@@ -2195,6 +2210,24 @@ declare_clippy_lint! {\n     \"using `.as_ref().take()` on a temporary value\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `replace` statements which have no effect.\n+    ///\n+    /// ### Why is this bad?\n+    /// It's either a mistake or confusing.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// \"1234\".replace(\"12\", \"12\");\n+    /// \"1234\".replacen(\"12\", \"12\", 1);\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub NO_EFFECT_REPLACE,\n+    suspicious,\n+    \"replace with no effect\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2264,6 +2297,7 @@ impl_lint_pass!(Methods => [\n     BYTES_NTH,\n     ITER_SKIP_NEXT,\n     GET_UNWRAP,\n+    GET_LAST_WITH_LEN,\n     STRING_EXTEND_CHARS,\n     ITER_CLONED_COLLECT,\n     ITER_WITH_DRAIN,\n@@ -2294,6 +2328,7 @@ impl_lint_pass!(Methods => [\n     NEEDLESS_OPTION_AS_DEREF,\n     IS_DIGIT_ASCII_RADIX,\n     NEEDLESS_OPTION_TAKE,\n+    NO_EFFECT_REPLACE,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2590,6 +2625,7 @@ impl Methods {\n                         inspect_for_each::check(cx, expr, span2);\n                     }\n                 },\n+                (\"get\", [arg]) => get_last_with_len::check(cx, expr, recv, arg),\n                 (\"get_or_insert_with\", [arg]) => unnecessary_lazy_eval::check(cx, expr, recv, arg, \"get_or_insert\"),\n                 (\"is_file\", []) => filetype_is_file::check(cx, expr, recv),\n                 (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, self.msrv),\n@@ -2705,6 +2741,9 @@ impl Methods {\n                         unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\");\n                     },\n                 },\n+                (\"replace\" | \"replacen\", [arg1, arg2] | [arg1, arg2, _]) => {\n+                    no_effect_replace::check(cx, expr, arg1, arg2);\n+                },\n                 _ => {},\n             }\n         }"}, {"sha": "a76341855b6db8fbb34cb2fb56f98317091acb2b", "filename": "src/tools/clippy/clippy_lints/src/methods/no_effect_replace.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fno_effect_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fno_effect_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fno_effect_replace.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,47 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::SpanlessEq;\n+use if_chain::if_chain;\n+use rustc_ast::LitKind;\n+use rustc_hir::ExprKind;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::NO_EFFECT_REPLACE;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx rustc_hir::Expr<'_>,\n+    arg1: &'tcx rustc_hir::Expr<'_>,\n+    arg2: &'tcx rustc_hir::Expr<'_>,\n+) {\n+    let ty = cx.typeck_results().expr_ty(expr).peel_refs();\n+    if !(ty.is_str() || is_type_diagnostic_item(cx, ty, sym::String)) {\n+        return;\n+    }\n+\n+    if_chain! {\n+        if let ExprKind::Lit(spanned) = &arg1.kind;\n+        if let Some(param1) = lit_string_value(&spanned.node);\n+\n+        if let ExprKind::Lit(spanned) = &arg2.kind;\n+        if let LitKind::Str(param2, _) = &spanned.node;\n+        if param1 == param2.as_str();\n+\n+        then {\n+            span_lint(cx, NO_EFFECT_REPLACE, expr.span, \"replacing text with itself\");\n+        }\n+    }\n+\n+    if SpanlessEq::new(cx).eq_expr(arg1, arg2) {\n+        span_lint(cx, NO_EFFECT_REPLACE, expr.span, \"replacing text with itself\");\n+    }\n+}\n+\n+fn lit_string_value(node: &LitKind) -> Option<String> {\n+    match node {\n+        LitKind::Char(value) => Some(value.to_string()),\n+        LitKind::Str(value, _) => Some(value.as_str().to_owned()),\n+        _ => None,\n+    }\n+}"}, {"sha": "8989db54f6c5fb20bb19c3c3a1ef9540c32320d6", "filename": "src/tools/clippy/clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -97,7 +97,7 @@ pub(super) fn check<'tcx>(\n         let func_snippet = snippet(cx, map_arg.span, \"..\");\n         let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n                        `and_then(..)` instead\";\n-        return span_lint_and_sugg(\n+        span_lint_and_sugg(\n             cx,\n             OPTION_MAP_OR_NONE,\n             expr.span,\n@@ -110,7 +110,7 @@ pub(super) fn check<'tcx>(\n         let msg = \"called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling \\\n                        `ok()` instead\";\n         let self_snippet = snippet(cx, recv.span, \"..\");\n-        return span_lint_and_sugg(\n+        span_lint_and_sugg(\n             cx,\n             RESULT_MAP_OR_INTO_OPTION,\n             expr.span,"}, {"sha": "b4c6bfb31ed1cb54a59ff276b96235aa4b84d7e1", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -415,7 +415,7 @@ fn is_cloned_or_copied(cx: &LateContext<'_>, method_name: Symbol, method_def_id:\n /// Returns true if the named method can be used to convert the receiver to its \"owned\"\n /// representation.\n fn is_to_owned_like(cx: &LateContext<'_>, method_name: Symbol, method_def_id: DefId) -> bool {\n-    is_clone_like(cx, &*method_name.as_str(), method_def_id)\n+    is_clone_like(cx, method_name.as_str(), method_def_id)\n         || is_cow_into_owned(cx, method_name, method_def_id)\n         || is_to_string(cx, method_name, method_def_id)\n }"}, {"sha": "a081cde85725b3518b6f3ae863b2eee3d14f1e44", "filename": "src/tools/clippy/clippy_lints/src/minmax.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fminmax.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -18,11 +18,11 @@ declare_clippy_lint! {\n     /// the least it hurts readability of the code.\n     ///\n     /// ### Example\n-    /// ```ignore\n+    /// ```rust,ignore\n     /// min(0, max(100, x))\n-    /// ```\n-    /// or\n-    /// ```ignore\n+    ///\n+    /// // or\n+    ///\n     /// x.max(100).min(0)\n     /// ```\n     /// It will always be equal to `0`. Probably the author meant to clamp the value"}, {"sha": "5566569945322db0f70b110946eeca6b9bb02c00", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -103,11 +103,14 @@ declare_clippy_lint! {\n     /// let x = 1.2331f64;\n     /// let y = 1.2332f64;\n     ///\n-    /// // Bad\n     /// if y == 1.23f64 { }\n     /// if y != x {} // where both are floats\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = 1.2331f64;\n+    /// # let y = 1.2332f64;\n     /// let error_margin = f64::EPSILON; // Use an epsilon for comparison\n     /// // Or, if Rust <= 1.42, use `std::f64::EPSILON` constant instead.\n     /// // let error_margin = std::f64::EPSILON;\n@@ -258,10 +261,13 @@ declare_clippy_lint! {\n     /// let x: f64 = 1.0;\n     /// const ONE: f64 = 1.00;\n     ///\n-    /// // Bad\n     /// if x == ONE { } // where both are floats\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x: f64 = 1.0;\n+    /// # const ONE: f64 = 1.00;\n     /// let error_margin = f64::EPSILON; // Use an epsilon for comparison\n     /// // Or, if Rust <= 1.42, use `std::f64::EPSILON` constant instead.\n     /// // let error_margin = std::f64::EPSILON;"}, {"sha": "d466d54a6ba5db92c5af6f2f210644cbb73c9b55", "filename": "src/tools/clippy/clippy_lints/src/mismatching_type_param_order.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmismatching_type_param_order.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,116 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::{GenericArg, Item, ItemKind, QPath, Ty, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::GenericParamDefKind;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for type parameters which are positioned inconsistently between\n+    /// a type definition and impl block. Specifically, a paramater in an impl\n+    /// block which has the same name as a parameter in the type def, but is in\n+    /// a different place.\n+    ///\n+    /// ### Why is this bad?\n+    /// Type parameters are determined by their position rather than name.\n+    /// Naming type parameters inconsistently may cause you to refer to the\n+    /// wrong type parameter.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct Foo<A, B> {\n+    ///     x: A,\n+    ///     y: B,\n+    /// }\n+    /// // inside the impl, B refers to Foo::A\n+    /// impl<B, A> Foo<B, A> {}\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct Foo<A, B> {\n+    ///     x: A,\n+    ///     y: B,\n+    /// }\n+    /// impl<A, B> Foo<A, B> {}\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub MISMATCHING_TYPE_PARAM_ORDER,\n+    pedantic,\n+    \"type parameter positioned inconsistently between type def and impl block\"\n+}\n+declare_lint_pass!(TypeParamMismatch => [MISMATCHING_TYPE_PARAM_ORDER]);\n+\n+impl<'tcx> LateLintPass<'tcx> for TypeParamMismatch {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if_chain! {\n+            if !item.span.from_expansion();\n+            if let ItemKind::Impl(imp) = &item.kind;\n+            if let TyKind::Path(QPath::Resolved(_, path)) = &imp.self_ty.kind;\n+            if let Some(segment) = path.segments.iter().next();\n+            if let Some(generic_args) = segment.args;\n+            if !generic_args.args.is_empty();\n+            then {\n+                // get the name and span of the generic parameters in the Impl\n+                let impl_params = generic_args.args.iter()\n+                .filter_map(|p|\n+                    match p {\n+                        GenericArg::Type(Ty {kind: TyKind::Path(QPath::Resolved(_, path)), ..}) =>\n+                            Some((path.segments[0].ident.to_string(), path.span)),\n+                        _ => None,\n+                    }\n+                );\n+\n+                // find the type that the Impl is for\n+                // only lint on struct/enum/union for now\n+                let defid = match path.res {\n+                    Res::Def(DefKind::Struct | DefKind::Enum | DefKind::Union, defid) => defid,\n+                    _ => return,\n+                };\n+\n+                // get the names of the generic parameters in the type\n+                let type_params = &cx.tcx.generics_of(defid).params;\n+                let type_param_names: Vec<_> = type_params.iter()\n+                .filter_map(|p|\n+                    match p.kind {\n+                        GenericParamDefKind::Type {..} => Some(p.name.to_string()),\n+                        _ => None,\n+                    }\n+                ).collect();\n+                // hashmap of name -> index for mismatch_param_name\n+                let type_param_names_hashmap: FxHashMap<&String, usize> =\n+                    type_param_names.iter().enumerate().map(|(i, param)| (param, i)).collect();\n+\n+                let type_name = segment.ident;\n+                for (i, (impl_param_name, impl_param_span)) in impl_params.enumerate() {\n+                    if mismatch_param_name(i, &impl_param_name, &type_param_names_hashmap) {\n+                        let msg = format!(\"`{}` has a similarly named generic type parameter `{}` in its declaration, but in a different order\",\n+                                          type_name, impl_param_name);\n+                        let help = format!(\"try `{}`, or a name that does not conflict with `{}`'s generic params\",\n+                                           type_param_names[i], type_name);\n+                        span_lint_and_help(\n+                            cx,\n+                            MISMATCHING_TYPE_PARAM_ORDER,\n+                            impl_param_span,\n+                            &msg,\n+                            None,\n+                            &help\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+// Checks if impl_param_name is the same as one of type_param_names,\n+// and is in a different position\n+fn mismatch_param_name(i: usize, impl_param_name: &String, type_param_names: &FxHashMap<&String, usize>) -> bool {\n+    if let Some(j) = type_param_names.get(impl_param_name) {\n+        if i != *j {\n+            return true;\n+        }\n+    }\n+    false\n+}"}, {"sha": "024bd0760715e449fffa03f4bcb77f2cae98a79b", "filename": "src/tools/clippy/clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n                         self.visit_expr(if_expr);\n                     }\n                     // make sure top level arm expressions aren't linted\n-                    self.maybe_walk_expr(&*arm.body);\n+                    self.maybe_walk_expr(arm.body);\n                 }\n             },\n             _ => walk_expr(self, e),"}, {"sha": "7e2531c7ca5f0c6237292bc89245ce108b1d8b2d", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n         if let hir::PatKind::Wild = local.pat.kind {\n             return;\n         }\n-        check_ty(cx, local.span, cx.typeck_results().pat_ty(&*local.pat));\n+        check_ty(cx, local.span, cx.typeck_results().pat_ty(local.pat));\n     }\n }\n "}, {"sha": "44fdf84c6df79d6946f7cb923ff51abfa70fb72d", "filename": "src/tools/clippy/clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -22,9 +22,12 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust,ignore\n     /// debug_assert_eq!(vec![3].pop(), Some(3));\n+    ///\n     /// // or\n-    /// fn take_a_mut_parameter(_: &mut u32) -> bool { unimplemented!() }\n-    /// debug_assert!(take_a_mut_parameter(&mut 5));\n+    ///\n+    /// # let mut x = 5;\n+    /// # fn takes_a_mut_parameter(_: &mut u32) -> bool { unimplemented!() }\n+    /// debug_assert!(takes_a_mut_parameter(&mut x));\n     /// ```\n     #[clippy::version = \"1.40.0\"]\n     pub DEBUG_ASSERT_WITH_MUT_CALL,"}, {"sha": "26c694a71feddf4130a78ec63b7a83a3034d0002", "filename": "src/tools/clippy/clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -194,14 +194,15 @@ fn assignment_suggestions<'tcx>(\n         }))\n         .collect::<Option<Vec<(Span, String)>>>()?;\n \n-    let applicability = if suggestions.len() > 1 {\n+    match suggestions.len() {\n+        // All of `exprs` are never types\n+        // https://github.com/rust-lang/rust-clippy/issues/8911\n+        0 => None,\n+        1 => Some((Applicability::MachineApplicable, suggestions)),\n         // multiple suggestions don't work with rustfix in multipart_suggest\n         // https://github.com/rust-lang/rustfix/issues/141\n-        Applicability::Unspecified\n-    } else {\n-        Applicability::MachineApplicable\n-    };\n-    Some((applicability, suggestions))\n+        _ => Some((Applicability::Unspecified, suggestions)),\n+    }\n }\n \n struct Usage<'tcx> {"}, {"sha": "5c4de3381496cd839567ba17a5b2de1eef2e2b99", "filename": "src/tools/clippy/clippy_lints/src/numeric_arithmetic.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnumeric_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnumeric_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnumeric_arithmetic.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -51,16 +51,16 @@ declare_clippy_lint! {\n }\n \n #[derive(Copy, Clone, Default)]\n-pub struct Arithmetic {\n+pub struct NumericArithmetic {\n     expr_span: Option<Span>,\n     /// This field is used to check whether expressions are constants, such as in enum discriminants\n     /// and consts\n     const_span: Option<Span>,\n }\n \n-impl_lint_pass!(Arithmetic => [INTEGER_ARITHMETIC, FLOAT_ARITHMETIC]);\n+impl_lint_pass!(NumericArithmetic => [INTEGER_ARITHMETIC, FLOAT_ARITHMETIC]);\n \n-impl<'tcx> LateLintPass<'tcx> for Arithmetic {\n+impl<'tcx> LateLintPass<'tcx> for NumericArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if self.expr_span.is_some() {\n             return;", "previous_filename": "src/tools/clippy/clippy_lints/src/arithmetic.rs"}, {"sha": "21acf003d92b2a775d4068bcbcde535de7e7b531", "filename": "src/tools/clippy/clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -61,7 +61,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, body: &'tcx hir\n     expr_visitor_no_bodies(|expr| {\n         let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return true };\n         if matches!(\n-            &*cx.tcx.item_name(macro_call.def_id).as_str(),\n+            cx.tcx.item_name(macro_call.def_id).as_str(),\n             \"unimplemented\" | \"unreachable\" | \"panic\" | \"todo\" | \"assert\" | \"assert_eq\" | \"assert_ne\"\n         ) {\n             panics.push(macro_call.span);"}, {"sha": "5a93431f25a981f2db07e84f2da182814fbb8c13", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -233,7 +233,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         if let hir::TraitItemKind::Fn(method_sig, _) = &item.kind {\n-            self.check_poly_fn(cx, item.def_id, &*method_sig.decl, None);\n+            self.check_poly_fn(cx, item.def_id, method_sig.decl, None);\n         }\n     }\n "}, {"sha": "eea036178b83764cc5a4d163413ec78ee3aba2cd", "filename": "src/tools/clippy/clippy_lints/src/ranges.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -194,7 +194,7 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n             },\n             ExprKind::Binary(ref op, l, r) => {\n                 if meets_msrv(self.msrv, msrvs::RANGE_CONTAINS) {\n-                    check_possible_range_contains(cx, op.node, l, r, expr);\n+                    check_possible_range_contains(cx, op.node, l, r, expr, expr.span);\n                 }\n             },\n             _ => {},\n@@ -213,12 +213,12 @@ fn check_possible_range_contains(\n     left: &Expr<'_>,\n     right: &Expr<'_>,\n     expr: &Expr<'_>,\n+    span: Span,\n ) {\n     if in_constant(cx, expr.hir_id) {\n         return;\n     }\n \n-    let span = expr.span;\n     let combine_and = match op {\n         BinOpKind::And | BinOpKind::BitAnd => true,\n         BinOpKind::Or | BinOpKind::BitOr => false,\n@@ -294,6 +294,20 @@ fn check_possible_range_contains(\n             );\n         }\n     }\n+\n+    // If the LHS is the same operator, we have to recurse to get the \"real\" RHS, since they have\n+    // the same operator precedence\n+    if_chain! {\n+        if let ExprKind::Binary(ref lhs_op, _left, new_lhs) = left.kind;\n+        if op == lhs_op.node;\n+        let new_span = Span::new(new_lhs.span.lo(), right.span.hi(), expr.span.ctxt(), expr.span.parent());\n+        if let Some(snip) = &snippet_opt(cx, new_span);\n+        // Do not continue if we have mismatched number of parens, otherwise the suggestion is wrong\n+        if snip.matches('(').count() == snip.matches(')').count();\n+        then {\n+            check_possible_range_contains(cx, op, new_lhs, right, expr, new_span);\n+        }\n+    }\n }\n \n struct RangeBounds<'a> {"}, {"sha": "8db8c4e9b7870117d71022f7baa10809ab1c6bbf", "filename": "src/tools/clippy/clippy_lints/src/rc_clone_in_vec_init.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -2,7 +2,9 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::higher::VecArgs;\n use clippy_utils::last_path_segment;\n use clippy_utils::macros::root_macro_call_first_node;\n+use clippy_utils::paths;\n use clippy_utils::source::{indent_of, snippet};\n+use clippy_utils::ty::match_type;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -11,10 +13,11 @@ use rustc_span::{sym, Span, Symbol};\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for `Arc::new` or `Rc::new` in `vec![elem; len]`\n+    /// Checks for reference-counted pointers (`Arc`, `Rc`, `rc::Weak`, and `sync::Weak`)\n+    /// in `vec![elem; len]`\n     ///\n     /// ### Why is this bad?\n-    /// This will create `elem` once and clone it `len` times - doing so with `Arc` or `Rc`\n+    /// This will create `elem` once and clone it `len` times - doing so with `Arc`/`Rc`/`Weak`\n     /// is a bit misleading, as it will create references to the same pointer, rather\n     /// than different instances.\n     ///\n@@ -26,7 +29,6 @@ declare_clippy_lint! {\n     /// ```\n     /// Use instead:\n     /// ```rust\n-    ///\n     /// // Initialize each value separately:\n     /// let mut data = Vec::with_capacity(100);\n     /// for _ in 0..100 {\n@@ -42,34 +44,20 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.62.0\"]\n     pub RC_CLONE_IN_VEC_INIT,\n     suspicious,\n-    \"initializing `Arc` or `Rc` in `vec![elem; len]`\"\n+    \"initializing reference-counted pointer in `vec![elem; len]`\"\n }\n declare_lint_pass!(RcCloneInVecInit => [RC_CLONE_IN_VEC_INIT]);\n \n impl LateLintPass<'_> for RcCloneInVecInit {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return; };\n         let Some(VecArgs::Repeat(elem, len)) = VecArgs::hir(cx, expr) else { return; };\n-        let Some(symbol) = new_reference_call(cx, elem) else { return; };\n+        let Some((symbol, func_span)) = ref_init(cx, elem) else { return; };\n \n-        emit_lint(cx, symbol, macro_call.span, elem, len);\n+        emit_lint(cx, symbol, macro_call.span, elem, len, func_span);\n     }\n }\n \n-fn elem_snippet(cx: &LateContext<'_>, elem: &Expr<'_>, symbol_name: &str) -> String {\n-    let elem_snippet = snippet(cx, elem.span, \"..\").to_string();\n-    if elem_snippet.contains('\\n') {\n-        // This string must be found in `elem_snippet`, otherwise we won't be constructing\n-        // the snippet in the first place.\n-        let reference_creation = format!(\"{symbol_name}::new\");\n-        let (code_until_reference_creation, _right) = elem_snippet.split_once(&reference_creation).unwrap();\n-\n-        return format!(\"{code_until_reference_creation}{reference_creation}(..)\");\n-    }\n-\n-    elem_snippet\n-}\n-\n fn loop_init_suggestion(elem: &str, len: &str, indent: &str) -> String {\n     format!(\n         r#\"{{\n@@ -89,17 +77,17 @@ fn extract_suggestion(elem: &str, len: &str, indent: &str) -> String {\n     )\n }\n \n-fn emit_lint(cx: &LateContext<'_>, symbol: Symbol, lint_span: Span, elem: &Expr<'_>, len: &Expr<'_>) {\n+fn emit_lint(cx: &LateContext<'_>, symbol: Symbol, lint_span: Span, elem: &Expr<'_>, len: &Expr<'_>, func_span: Span) {\n     let symbol_name = symbol.as_str();\n \n     span_lint_and_then(\n         cx,\n         RC_CLONE_IN_VEC_INIT,\n         lint_span,\n-        &format!(\"calling `{symbol_name}::new` in `vec![elem; len]`\"),\n+        \"initializing a reference-counted pointer in `vec![elem; len]`\",\n         |diag| {\n             let len_snippet = snippet(cx, len.span, \"..\");\n-            let elem_snippet = elem_snippet(cx, elem, symbol_name);\n+            let elem_snippet = format!(\"{}(..)\", snippet(cx, elem.span.with_hi(func_span.hi()), \"..\"));\n             let indentation = \" \".repeat(indent_of(cx, lint_span).unwrap_or(0));\n             let loop_init_suggestion = loop_init_suggestion(&elem_snippet, len_snippet.as_ref(), &indentation);\n             let extract_suggestion = extract_suggestion(&elem_snippet, len_snippet.as_ref(), &indentation);\n@@ -109,31 +97,41 @@ fn emit_lint(cx: &LateContext<'_>, symbol: Symbol, lint_span: Span, elem: &Expr<\n                 lint_span,\n                 format!(\"consider initializing each `{symbol_name}` element individually\"),\n                 loop_init_suggestion,\n-                Applicability::Unspecified,\n+                Applicability::HasPlaceholders,\n             );\n             diag.span_suggestion(\n                 lint_span,\n                 format!(\n                     \"or if this is intentional, consider extracting the `{symbol_name}` initialization to a variable\"\n                 ),\n                 extract_suggestion,\n-                Applicability::Unspecified,\n+                Applicability::HasPlaceholders,\n             );\n         },\n     );\n }\n \n-/// Checks whether the given `expr` is a call to `Arc::new` or `Rc::new`\n-fn new_reference_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n+/// Checks whether the given `expr` is a call to `Arc::new`, `Rc::new`, or evaluates to a `Weak`\n+fn ref_init(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<(Symbol, Span)> {\n     if_chain! {\n         if let ExprKind::Call(func, _args) = expr.kind;\n         if let ExprKind::Path(ref func_path @ QPath::TypeRelative(ty, _)) = func.kind;\n         if let TyKind::Path(ref ty_path) = ty.kind;\n         if let Some(def_id) = cx.qpath_res(ty_path, ty.hir_id).opt_def_id();\n-        if last_path_segment(func_path).ident.name == sym::new;\n \n         then {\n-            return cx.tcx.get_diagnostic_name(def_id).filter(|symbol| symbol == &sym::Arc || symbol == &sym::Rc);\n+            if last_path_segment(func_path).ident.name == sym::new\n+                && let Some(symbol) = cx\n+                    .tcx\n+                    .get_diagnostic_name(def_id)\n+                    .filter(|symbol| symbol == &sym::Arc || symbol == &sym::Rc) {\n+                return Some((symbol, func.span));\n+            }\n+\n+            let ty_path = cx.typeck_results().expr_ty(expr);\n+            if match_type(cx, ty_path, &paths::WEAK_RC) || match_type(cx, ty_path, &paths::WEAK_ARC) {\n+                return Some((Symbol::intern(\"Weak\"), func.span));\n+            }\n         }\n     }\n "}, {"sha": "249f11f985082f7c55f7b6d3f37c28f15732661b", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -288,8 +288,8 @@ fn is_call_with_ref_arg<'tcx>(\n         if let mir::TerminatorKind::Call { func, args, destination, .. } = kind;\n         if args.len() == 1;\n         if let mir::Operand::Move(mir::Place { local, .. }) = &args[0];\n-        if let ty::FnDef(def_id, _) = *func.ty(&*mir, cx.tcx).kind();\n-        if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(&*mir, cx.tcx));\n+        if let ty::FnDef(def_id, _) = *func.ty(mir, cx.tcx).kind();\n+        if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(mir, cx.tcx));\n         if !is_copy(cx, inner_ty);\n         then {\n             Some((def_id, *local, inner_ty, destination.as_local()?))\n@@ -318,7 +318,7 @@ fn find_stmt_assigns_to<'tcx>(\n         None\n     })?;\n \n-    match (by_ref, &*rvalue) {\n+    match (by_ref, rvalue) {\n         (true, mir::Rvalue::Ref(_, _, place)) | (false, mir::Rvalue::Use(mir::Operand::Copy(place))) => {\n             Some(base_local_and_movability(cx, mir, *place))\n         },"}, {"sha": "0825f00f421c5b9a9762b2f66d5213bd55b506fd", "filename": "src/tools/clippy/clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -51,12 +51,12 @@ impl RedundantStaticLifetimes {\n     fn visit_type(&mut self, ty: &Ty, cx: &EarlyContext<'_>, reason: &str) {\n         match ty.kind {\n             // Be careful of nested structures (arrays and tuples)\n-            TyKind::Array(ref ty, _) => {\n-                self.visit_type(&*ty, cx, reason);\n+            TyKind::Array(ref ty, _) | TyKind::Slice(ref ty) => {\n+                self.visit_type(ty, cx, reason);\n             },\n             TyKind::Tup(ref tup) => {\n                 for tup_ty in tup {\n-                    self.visit_type(&*tup_ty, cx, reason);\n+                    self.visit_type(tup_ty, cx, reason);\n                 }\n             },\n             // This is what we are looking for !\n@@ -89,9 +89,6 @@ impl RedundantStaticLifetimes {\n                 }\n                 self.visit_type(&*borrow_type.ty, cx, reason);\n             },\n-            TyKind::Slice(ref ty) => {\n-                self.visit_type(ty, cx, reason);\n-            },\n             _ => {},\n         }\n     }"}, {"sha": "e525eba53e2aa6332852ad0d91ae7b4c67869b72", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::source::snippet_opt;\n+use clippy_utils::source::{snippet_opt, snippet_with_context};\n use clippy_utils::{fn_def_id, path_to_local_id};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n@@ -226,14 +226,10 @@ fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, inner_span: Option<Spa\n     }\n     match inner_span {\n         Some(inner_span) => {\n-            if in_external_macro(cx.tcx.sess, inner_span) || inner_span.from_expansion() {\n-                return;\n-            }\n-\n+            let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n-                if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                    diag.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n-                }\n+                let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n+                diag.span_suggestion(ret_span, \"remove `return`\", snippet, applicability);\n             });\n         },\n         None => match replacement {\n@@ -287,7 +283,7 @@ struct BorrowVisitor<'a, 'tcx> {\n \n impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if self.borrows {\n+        if self.borrows || expr.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "4f74c1e44c26d54c9d6cd0a2a9587dfee623820c", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -5,9 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::hir_id::ItemLocalId;\n-use rustc_hir::{\n-    Block, Body, BodyOwnerKind, Expr, ExprKind, HirId, Let, Node, Pat, PatKind, QPath, UnOp,\n-};\n+use rustc_hir::{Block, Body, BodyOwnerKind, Expr, ExprKind, HirId, Let, Node, Pat, PatKind, QPath, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{Span, Symbol};\n@@ -141,31 +139,34 @@ impl<'tcx> LateLintPass<'tcx> for Shadow {\n \n     fn check_body(&mut self, cx: &LateContext<'_>, body: &Body<'_>) {\n         let hir = cx.tcx.hir();\n-        if !matches!(hir.body_owner_kind(hir.body_owner_def_id(body.id())), BodyOwnerKind::Closure)\n-        {\n+        if !matches!(\n+            hir.body_owner_kind(hir.body_owner_def_id(body.id())),\n+            BodyOwnerKind::Closure\n+        ) {\n             self.bindings.push(FxHashMap::default());\n         }\n     }\n \n     fn check_body_post(&mut self, cx: &LateContext<'_>, body: &Body<'_>) {\n         let hir = cx.tcx.hir();\n-        if !matches!(hir.body_owner_kind(hir.body_owner_def_id(body.id())), BodyOwnerKind::Closure)\n-        {\n+        if !matches!(\n+            hir.body_owner_kind(hir.body_owner_def_id(body.id())),\n+            BodyOwnerKind::Closure\n+        ) {\n             self.bindings.pop();\n         }\n     }\n }\n \n-fn is_shadow(\n-    cx: &LateContext<'_>,\n-    owner: LocalDefId,\n-    first: ItemLocalId,\n-    second: ItemLocalId,\n-) -> bool {\n-    let scope_tree = cx.tcx.region_scope_tree(owner);\n-    let first_scope = scope_tree.var_scope(first).unwrap();\n-    let second_scope = scope_tree.var_scope(second).unwrap();\n-    scope_tree.is_subscope_of(second_scope, first_scope)\n+fn is_shadow(cx: &LateContext<'_>, owner: LocalDefId, first: ItemLocalId, second: ItemLocalId) -> bool {\n+    let scope_tree = cx.tcx.region_scope_tree(owner.to_def_id());\n+    if let Some(first_scope) = scope_tree.var_scope(first) {\n+        if let Some(second_scope) = scope_tree.var_scope(second) {\n+            return scope_tree.is_subscope_of(second_scope, first_scope);\n+        }\n+    }\n+\n+    false\n }\n \n fn lint_shadow(cx: &LateContext<'_>, pat: &Pat<'_>, shadowed: HirId, span: Span) {\n@@ -177,16 +178,15 @@ fn lint_shadow(cx: &LateContext<'_>, pat: &Pat<'_>, shadowed: HirId, span: Span)\n                 snippet(cx, expr.span, \"..\")\n             );\n             (SHADOW_SAME, msg)\n-        }\n+        },\n         Some(expr) if is_local_used(cx, expr, shadowed) => {\n             let msg = format!(\"`{}` is shadowed\", snippet(cx, pat.span, \"_\"));\n             (SHADOW_REUSE, msg)\n-        }\n+        },\n         _ => {\n-            let msg =\n-                format!(\"`{}` shadows a previous, unrelated binding\", snippet(cx, pat.span, \"_\"));\n+            let msg = format!(\"`{}` shadows a previous, unrelated binding\", snippet(cx, pat.span, \"_\"));\n             (SHADOW_UNRELATED, msg)\n-        }\n+        },\n     };\n     span_lint_and_note(\n         cx,\n@@ -215,7 +215,14 @@ fn is_self_shadow(cx: &LateContext<'_>, pat: &Pat<'_>, mut expr: &Expr<'_>, hir_\n         expr = match expr.kind {\n             ExprKind::Box(e)\n             | ExprKind::AddrOf(_, _, e)\n-            | ExprKind::Block(&Block { stmts: [], expr: Some(e), .. }, _)\n+            | ExprKind::Block(\n+                &Block {\n+                    stmts: [],\n+                    expr: Some(e),\n+                    ..\n+                },\n+                _,\n+            )\n             | ExprKind::Unary(UnOp::Deref, e) => e,\n             ExprKind::Path(QPath::Resolved(None, path)) => break path.res == Res::Local(hir_id),\n             _ => break false,"}, {"sha": "bfb9f0d01e1dc88a717b3b1317a2cae03f557228", "filename": "src/tools/clippy/clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -110,7 +110,7 @@ fn get_pointee_ty_and_count_expr<'tcx>(\n         // Find calls to copy_{from,to}{,_nonoverlapping} and write_bytes methods\n         if let ExprKind::MethodCall(method_path, [ptr_self, .., count], _) = expr.kind;\n         let method_ident = method_path.ident.as_str();\n-        if METHODS.iter().any(|m| *m == &*method_ident);\n+        if METHODS.iter().any(|m| *m == method_ident);\n \n         // Get the pointee type\n         if let ty::RawPtr(TypeAndMut { ty: pointee_ty, .. }) ="}, {"sha": "75d3b040c968f9b3f47889d9a164203e4357a1b6", "filename": "src/tools/clippy/clippy_lints/src/swap_ptr_to_ref.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,80 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_with_context;\n+use clippy_utils::{match_def_path, path_def_id, paths};\n+use rustc_errors::Applicability;\n+use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{Span, SyntaxContext};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for calls to `core::mem::swap` where either parameter is derived from a pointer\n+    ///\n+    /// ### Why is this bad?\n+    /// When at least one parameter to `swap` is derived from a pointer it may overlap with the\n+    /// other. This would then lead to undefined behavior.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// unsafe fn swap(x: &[*mut u32], y: &[*mut u32]) {\n+    ///     for (&x, &y) in x.iter().zip(y) {\n+    ///         core::mem::swap(&mut *x, &mut *y);\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// unsafe fn swap(x: &[*mut u32], y: &[*mut u32]) {\n+    ///     for (&x, &y) in x.iter().zip(y) {\n+    ///         core::ptr::swap(x, y);\n+    ///     }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub SWAP_PTR_TO_REF,\n+    suspicious,\n+    \"call to `mem::swap` using pointer derived references\"\n+}\n+declare_lint_pass!(SwapPtrToRef => [SWAP_PTR_TO_REF]);\n+\n+impl LateLintPass<'_> for SwapPtrToRef {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, e: &Expr<'_>) {\n+        if let ExprKind::Call(fn_expr, [arg1, arg2]) = e.kind\n+            && let Some(fn_id) = path_def_id(cx, fn_expr)\n+            && match_def_path(cx, fn_id, &paths::MEM_SWAP)\n+            && let ctxt = e.span.ctxt()\n+            && let (from_ptr1, arg1_span) = is_ptr_to_ref(cx, arg1, ctxt)\n+            && let (from_ptr2, arg2_span) = is_ptr_to_ref(cx, arg2, ctxt)\n+            && (from_ptr1 || from_ptr2)\n+        {\n+            span_lint_and_then(\n+                cx,\n+                SWAP_PTR_TO_REF,\n+                e.span,\n+                \"call to `core::mem::swap` with a parameter derived from a raw pointer\",\n+                |diag| {\n+                    if !((from_ptr1 && arg1_span.is_none()) || (from_ptr2 && arg2_span.is_none())) {\n+                        let mut app = Applicability::MachineApplicable;\n+                        let snip1 = snippet_with_context(cx, arg1_span.unwrap_or(arg1.span), ctxt, \"..\", &mut app).0;\n+                        let snip2 = snippet_with_context(cx, arg2_span.unwrap_or(arg2.span), ctxt, \"..\", &mut app).0;\n+                        diag.span_suggestion(e.span, \"use ptr::swap\", format!(\"core::ptr::swap({}, {})\", snip1, snip2), app);\n+                    }\n+                }\n+            );\n+        }\n+    }\n+}\n+\n+/// Checks if the expression converts a mutable pointer to a mutable reference. If it is, also\n+/// returns the span of the pointer expression if it's suitable for making a suggestion.\n+fn is_ptr_to_ref(cx: &LateContext<'_>, e: &Expr<'_>, ctxt: SyntaxContext) -> (bool, Option<Span>) {\n+    if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, borrowed_expr) = e.kind\n+        && let ExprKind::Unary(UnOp::Deref, derefed_expr) = borrowed_expr.kind\n+        && cx.typeck_results().expr_ty(derefed_expr).is_unsafe_ptr()\n+    {\n+        (true, (borrowed_expr.span.ctxt() == ctxt || derefed_expr.span.ctxt() == ctxt).then(|| derefed_expr.span))\n+    } else {\n+        (false, None)\n+    }\n+}"}, {"sha": "1e5b646f5f055b4404c4b29411fc1fde3488bf9f", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -54,14 +54,14 @@ declare_clippy_lint! {\n     /// fn func<T: Clone + Default>(arg: T) where T: Clone + Default {}\n     /// ```\n     ///\n-    /// Could be written as:\n-    ///\n+    /// Use instead:\n     /// ```rust\n+    /// # mod hidden {\n     /// fn func<T: Clone + Default>(arg: T) {}\n-    /// ```\n-    /// or\n+    /// # }\n+    ///\n+    /// // or\n     ///\n-    /// ```rust\n     /// fn func<T>(arg: T) where T: Clone + Default {}\n     /// ```\n     #[clippy::version = \"1.47.0\"]"}, {"sha": "cbe1406728bc7d61dd6c87b0d216cdaae85e5221", "filename": "src/tools/clippy/clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -59,7 +59,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub USELESS_TRANSMUTE,\n-    nursery,\n+    complexity,\n     \"transmutes that have the same to and from types or could be a cast/coercion\"\n }\n "}, {"sha": "a0d104e239042e6ce4b091a1c7b9e16a9151f359", "filename": "src/tools/clippy/clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TypeFoldable};\n \n /// Checks for `useless_transmute` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`.\n@@ -16,7 +16,7 @@ pub(super) fn check<'tcx>(\n     arg: &'tcx Expr<'_>,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n-        _ if from_ty == to_ty => {\n+        _ if from_ty == to_ty && !from_ty.has_erased_regions() => {\n             span_lint(\n                 cx,\n                 USELESS_TRANSMUTE,\n@@ -26,28 +26,31 @@ pub(super) fn check<'tcx>(\n             true\n         },\n         (ty::Ref(_, rty, rty_mutbl), ty::RawPtr(ptr_ty)) => {\n-            span_lint_and_then(\n-                cx,\n-                USELESS_TRANSMUTE,\n-                e.span,\n-                \"transmute from a reference to a pointer\",\n-                |diag| {\n-                    if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                        let rty_and_mut = ty::TypeAndMut {\n-                            ty: *rty,\n-                            mutbl: *rty_mutbl,\n-                        };\n+            // No way to give the correct suggestion here. Avoid linting for now.\n+            if !rty.has_erased_regions() {\n+                span_lint_and_then(\n+                    cx,\n+                    USELESS_TRANSMUTE,\n+                    e.span,\n+                    \"transmute from a reference to a pointer\",\n+                    |diag| {\n+                        if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n+                            let rty_and_mut = ty::TypeAndMut {\n+                                ty: *rty,\n+                                mutbl: *rty_mutbl,\n+                            };\n \n-                        let sugg = if *ptr_ty == rty_and_mut {\n-                            arg.as_ty(to_ty)\n-                        } else {\n-                            arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n-                        };\n+                            let sugg = if *ptr_ty == rty_and_mut {\n+                                arg.as_ty(to_ty)\n+                            } else {\n+                                arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n+                            };\n \n-                        diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n-                    }\n-                },\n-            );\n+                            diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n+                        }\n+                    },\n+                );\n+            }\n             true\n         },\n         (ty::Int(_) | ty::Uint(_), ty::RawPtr(_)) => {"}, {"sha": "e108f7be12e6a69c7835db14c506239fdc9e33fa", "filename": "src/tools/clippy/clippy_lints/src/try_err.rs", "status": "removed", "additions": 0, "deletions": 186, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs?ref=357bc27904d4a99c83d4b01272c34e0e54934fa5", "patch": "@@ -1,186 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{get_parent_expr, is_lang_ctor, match_def_path, paths};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::LangItem::ResultErr;\n-use rustc_hir::{Expr, ExprKind, LangItem, MatchSource, QPath};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Ty};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{hygiene, sym};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for usages of `Err(x)?`.\n-    ///\n-    /// ### Why is this bad?\n-    /// The `?` operator is designed to allow calls that\n-    /// can fail to be easily chained. For example, `foo()?.bar()` or\n-    /// `foo(bar()?)`. Because `Err(x)?` can't be used that way (it will\n-    /// always return), it is more clear to write `return Err(x)`.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// fn foo(fail: bool) -> Result<i32, String> {\n-    ///     if fail {\n-    ///       Err(\"failed\")?;\n-    ///     }\n-    ///     Ok(0)\n-    /// }\n-    /// ```\n-    /// Could be written:\n-    ///\n-    /// ```rust\n-    /// fn foo(fail: bool) -> Result<i32, String> {\n-    ///     if fail {\n-    ///       return Err(\"failed\".into());\n-    ///     }\n-    ///     Ok(0)\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.38.0\"]\n-    pub TRY_ERR,\n-    restriction,\n-    \"return errors explicitly rather than hiding them behind a `?`\"\n-}\n-\n-declare_lint_pass!(TryErr => [TRY_ERR]);\n-\n-impl<'tcx> LateLintPass<'tcx> for TryErr {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        // Looks for a structure like this:\n-        // match ::std::ops::Try::into_result(Err(5)) {\n-        //     ::std::result::Result::Err(err) =>\n-        //         #[allow(unreachable_code)]\n-        //         return ::std::ops::Try::from_error(::std::convert::From::from(err)),\n-        //     ::std::result::Result::Ok(val) =>\n-        //         #[allow(unreachable_code)]\n-        //         val,\n-        // };\n-        if_chain! {\n-            if !in_external_macro(cx.tcx.sess, expr.span);\n-            if let ExprKind::Match(match_arg, _, MatchSource::TryDesugar) = expr.kind;\n-            if let ExprKind::Call(match_fun, try_args) = match_arg.kind;\n-            if let ExprKind::Path(ref match_fun_path) = match_fun.kind;\n-            if matches!(match_fun_path, QPath::LangItem(LangItem::TryTraitBranch, ..));\n-            if let Some(try_arg) = try_args.get(0);\n-            if let ExprKind::Call(err_fun, err_args) = try_arg.kind;\n-            if let Some(err_arg) = err_args.get(0);\n-            if let ExprKind::Path(ref err_fun_path) = err_fun.kind;\n-            if is_lang_ctor(cx, err_fun_path, ResultErr);\n-            if let Some(return_ty) = find_return_type(cx, &expr.kind);\n-            then {\n-                let prefix;\n-                let suffix;\n-                let err_ty;\n-\n-                if let Some(ty) = result_error_type(cx, return_ty) {\n-                    prefix = \"Err(\";\n-                    suffix = \")\";\n-                    err_ty = ty;\n-                } else if let Some(ty) = poll_result_error_type(cx, return_ty) {\n-                    prefix = \"Poll::Ready(Err(\";\n-                    suffix = \"))\";\n-                    err_ty = ty;\n-                } else if let Some(ty) = poll_option_result_error_type(cx, return_ty) {\n-                    prefix = \"Poll::Ready(Some(Err(\";\n-                    suffix = \")))\";\n-                    err_ty = ty;\n-                } else {\n-                    return;\n-                };\n-\n-                let expr_err_ty = cx.typeck_results().expr_ty(err_arg);\n-                let span = hygiene::walk_chain(err_arg.span, try_arg.span.ctxt());\n-                let mut applicability = Applicability::MachineApplicable;\n-                let origin_snippet = snippet_with_applicability(cx, span, \"_\", &mut applicability);\n-                let ret_prefix = if get_parent_expr(cx, expr).map_or(false, |e| matches!(e.kind, ExprKind::Ret(_))) {\n-                    \"\" // already returns\n-                } else {\n-                    \"return \"\n-                };\n-                let suggestion = if err_ty == expr_err_ty {\n-                    format!(\"{}{}{}{}\", ret_prefix, prefix, origin_snippet, suffix)\n-                } else {\n-                    format!(\"{}{}{}.into(){}\", ret_prefix, prefix, origin_snippet, suffix)\n-                };\n-\n-                span_lint_and_sugg(\n-                    cx,\n-                    TRY_ERR,\n-                    expr.span,\n-                    \"returning an `Err(_)` with the `?` operator\",\n-                    \"try this\",\n-                    suggestion,\n-                    applicability,\n-                );\n-            }\n-        }\n-    }\n-}\n-\n-/// Finds function return type by examining return expressions in match arms.\n-fn find_return_type<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx ExprKind<'_>) -> Option<Ty<'tcx>> {\n-    if let ExprKind::Match(_, arms, MatchSource::TryDesugar) = expr {\n-        for arm in arms.iter() {\n-            if let ExprKind::Ret(Some(ret)) = arm.body.kind {\n-                return Some(cx.typeck_results().expr_ty(ret));\n-            }\n-        }\n-    }\n-    None\n-}\n-\n-/// Extracts the error type from Result<T, E>.\n-fn result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n-    if_chain! {\n-        if let ty::Adt(_, subst) = ty.kind();\n-        if is_type_diagnostic_item(cx, ty, sym::Result);\n-        then {\n-            Some(subst.type_at(1))\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-/// Extracts the error type from Poll<Result<T, E>>.\n-fn poll_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n-    if_chain! {\n-        if let ty::Adt(def, subst) = ty.kind();\n-        if match_def_path(cx, def.did(), &paths::POLL);\n-        let ready_ty = subst.type_at(0);\n-\n-        if let ty::Adt(ready_def, ready_subst) = ready_ty.kind();\n-        if cx.tcx.is_diagnostic_item(sym::Result, ready_def.did());\n-        then {\n-            Some(ready_subst.type_at(1))\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-/// Extracts the error type from Poll<Option<Result<T, E>>>.\n-fn poll_option_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n-    if_chain! {\n-        if let ty::Adt(def, subst) = ty.kind();\n-        if match_def_path(cx, def.did(), &paths::POLL);\n-        let ready_ty = subst.type_at(0);\n-\n-        if let ty::Adt(ready_def, ready_subst) = ready_ty.kind();\n-        if cx.tcx.is_diagnostic_item(sym::Option, ready_def.did());\n-        let some_ty = ready_subst.type_at(0);\n-\n-        if let ty::Adt(some_def, some_subst) = some_ty.kind();\n-        if cx.tcx.is_diagnostic_item(sym::Result, some_def.did());\n-        then {\n-            Some(some_subst.type_at(1))\n-        } else {\n-            None\n-        }\n-    }\n-}"}, {"sha": "306afe441484755d025289dee2a7992329ab2d9d", "filename": "src/tools/clippy/clippy_lints/src/unused_rounding.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,69 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_ast::ast::{Expr, ExprKind, LitFloatType, LitKind};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Detects cases where a whole-number literal float is being rounded, using\n+    /// the `floor`, `ceil`, or `round` methods.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// This is unnecessary and confusing to the reader. Doing this is probably a mistake.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x = 1f32.ceil();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = 1f32;\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub UNUSED_ROUNDING,\n+    nursery,\n+    \"Uselessly rounding a whole number floating-point literal\"\n+}\n+declare_lint_pass!(UnusedRounding => [UNUSED_ROUNDING]);\n+\n+fn is_useless_rounding(expr: &Expr) -> Option<(&str, String)> {\n+    if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind\n+        && let method_name = name_ident.ident.name.as_str()\n+        && (method_name == \"ceil\" || method_name == \"round\" || method_name == \"floor\")\n+        && !args.is_empty()\n+        && let ExprKind::Lit(spanned) = &args[0].kind\n+        && let LitKind::Float(symbol, ty) = spanned.kind {\n+            let f = symbol.as_str().parse::<f64>().unwrap();\n+            let f_str = symbol.to_string() + if let LitFloatType::Suffixed(ty) = ty {\n+                ty.name_str()\n+            } else {\n+                \"\"\n+            };\n+            if f.fract() == 0.0 {\n+                Some((method_name, f_str))\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        }\n+}\n+\n+impl EarlyLintPass for UnusedRounding {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        if let Some((method_name, float)) = is_useless_rounding(expr) {\n+            span_lint_and_sugg(\n+                cx,\n+                UNUSED_ROUNDING,\n+                expr.span,\n+                &format!(\"used the `{}` method with a whole number float\", method_name),\n+                &format!(\"remove the `{}` method call\", method_name),\n+                float,\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "486ea5e5ccfa90c54386b6e7da4971136f9717fd", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -258,13 +258,21 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if !pat.span.from_expansion();\n             if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n-            if let PatKind::Path(QPath::Resolved(_, path)) = pat.kind;\n-            if !matches!(path.res, Res::SelfTy { .. } | Res::Def(DefKind::TyParam, _));\n+            // get the path from the pattern\n+            if let PatKind::Path(QPath::Resolved(_, path))\n+                 | PatKind::TupleStruct(QPath::Resolved(_, path), _, _)\n+                 | PatKind::Struct(QPath::Resolved(_, path), _, _) = pat.kind;\n             if cx.typeck_results().pat_ty(pat) == cx.tcx.type_of(impl_id);\n-            if let [first, ..] = path.segments;\n-            if let Some(hir_id) = first.hir_id;\n             then {\n-                span_lint(cx, cx.tcx.hir().span(hir_id));\n+                match path.res {\n+                    Res::Def(DefKind::Ctor(ctor_of, _), ..) => match ctor_of {\n+                            CtorOf::Variant => lint_path_to_variant(cx, path),\n+                            CtorOf::Struct => span_lint(cx, path.span),\n+                    },\n+                    Res::Def(DefKind::Variant, ..) => lint_path_to_variant(cx, path),\n+                    Res::Def(DefKind::Struct, ..) => span_lint(cx, path.span),\n+                    _ => ()\n+                }\n             }\n         }\n     }"}, {"sha": "b5c5d35135f90e2ec74a139ecb6cf70d59710842", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -340,6 +340,10 @@ define_Conf! {\n     ///\n     /// Whether `unwrap` should be allowed in test functions\n     (allow_unwrap_in_tests: bool = false),\n+    /// Lint: DBG_MACRO.\n+    ///\n+    /// Whether `dbg!` should be allowed in test functions\n+    (allow_dbg_in_tests: bool = false),\n }\n \n /// Search for the configuration file."}, {"sha": "60f9887699498c2482f3f21c8284c40d4a6b7ed8", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -422,7 +422,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n             }\n         } else if let Some(macro_call) = root_macro_call_first_node(cx, item) {\n             if !matches!(\n-                &*cx.tcx.item_name(macro_call.def_id).as_str(),\n+                cx.tcx.item_name(macro_call.def_id).as_str(),\n                 \"impl_lint_pass\" | \"declare_lint_pass\"\n             ) {\n                 return;\n@@ -504,7 +504,7 @@ fn check_invalid_clippy_version_attribute(cx: &LateContext<'_>, item: &'_ Item<'\n             return;\n         }\n \n-        if RustcVersion::parse(&*value.as_str()).is_err() {\n+        if RustcVersion::parse(value.as_str()).is_err() {\n             span_lint_and_help(\n                 cx,\n                 INVALID_CLIPPY_VERSION_ATTRIBUTE,\n@@ -595,7 +595,7 @@ impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n         if_chain! {\n             if let ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind;\n             let fn_name = path.ident;\n-            if let Some(sugg) = self.map.get(&*fn_name.as_str());\n+            if let Some(sugg) = self.map.get(fn_name.as_str());\n             let ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n             if match_type(cx, ty, &paths::EARLY_CONTEXT)\n                 || match_type(cx, ty, &paths::LATE_CONTEXT);\n@@ -679,7 +679,7 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n             then {\n                 let and_then_snippets = get_and_then_snippets(cx, and_then_args);\n                 let mut sle = SpanlessEq::new(cx).deny_side_effects();\n-                match &*ps.ident.as_str() {\n+                match ps.ident.as_str() {\n                     \"span_suggestion\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {\n                         suggest_suggestion(cx, expr, &and_then_snippets, &span_suggestion_snippets(cx, span_call_args));\n                     },"}, {"sha": "cf2de6a42af36633607576db2fc5deecb0654a0a", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -7,6 +7,7 @@\n //! during any comparison or mapping. (Please take care of this, it's not fun to spend time on such\n //! a simple mistake)\n \n+use crate::renamed_lints::RENAMED_LINTS;\n use crate::utils::internal_lints::{extract_clippy_version_value, is_lint_ref_type};\n \n use clippy_utils::diagnostics::span_lint;\n@@ -26,6 +27,7 @@ use rustc_span::{sym, Loc, Span, Symbol};\n use serde::{ser::SerializeStruct, Serialize, Serializer};\n use std::collections::BinaryHeap;\n use std::fmt;\n+use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n use std::path::Path;\n@@ -85,6 +87,21 @@ macro_rules! CONFIGURATION_VALUE_TEMPLATE {\n     };\n }\n \n+macro_rules! RENAMES_SECTION_TEMPLATE {\n+    () => {\n+        r#\"\n+### Past names\n+\n+{names}\n+\"#\n+    };\n+}\n+macro_rules! RENAME_VALUE_TEMPLATE {\n+    () => {\n+        \"* `{name}`\\n\"\n+    };\n+}\n+\n const LINT_EMISSION_FUNCTIONS: [&[&str]; 8] = [\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_help\"],\n@@ -198,9 +215,10 @@ impl Drop for MetadataCollector {\n \n         // Mapping the final data\n         let mut lints = std::mem::take(&mut self.lints).into_sorted_vec();\n-        lints\n-            .iter_mut()\n-            .for_each(|x| x.applicability = Some(applicability_info.remove(&x.id).unwrap_or_default()));\n+        collect_renames(&mut lints);\n+        for x in &mut lints {\n+            x.applicability = Some(applicability_info.remove(&x.id).unwrap_or_default());\n+        }\n \n         // Outputting\n         if Path::new(OUTPUT_FILE).exists() {\n@@ -527,12 +545,11 @@ fn extract_attr_docs_or_lint(cx: &LateContext<'_>, item: &Item<'_>) -> Option<St\n fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n     let mut lines = attrs.iter().filter_map(ast::Attribute::doc_str);\n-    let mut docs = String::from(&*lines.next()?.as_str());\n+    let mut docs = String::from(lines.next()?.as_str());\n     let mut in_code_block = false;\n     let mut is_code_block_rust = false;\n     for line in lines {\n         let line = line.as_str();\n-        let line = &*line;\n \n         // Rustdoc hides code lines starting with `# ` and this removes them from Clippy's lint list :)\n         if is_code_block_rust && line.trim_start().starts_with(\"# \") {\n@@ -643,6 +660,37 @@ fn is_deprecated_lint(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n     false\n }\n \n+fn collect_renames(lints: &mut Vec<LintMetadata>) {\n+    for lint in lints {\n+        let mut collected = String::new();\n+        let mut names = vec![lint.id.clone()];\n+\n+        loop {\n+            if let Some(lint_name) = names.pop() {\n+                for (k, v) in RENAMED_LINTS {\n+                    if_chain! {\n+                        if let Some(name) = v.strip_prefix(CLIPPY_LINT_GROUP_PREFIX);\n+                        if name == lint_name;\n+                        if let Some(past_name) = k.strip_prefix(CLIPPY_LINT_GROUP_PREFIX);\n+                        then {\n+                            write!(collected, RENAME_VALUE_TEMPLATE!(), name = past_name).unwrap();\n+                            names.push(past_name.to_string());\n+                        }\n+                    }\n+                }\n+\n+                continue;\n+            }\n+\n+            break;\n+        }\n+\n+        if !collected.is_empty() {\n+            write!(&mut lint.docs, RENAMES_SECTION_TEMPLATE!(), names = collected).unwrap();\n+        }\n+    }\n+}\n+\n // ==================================================================\n // Lint emission\n // =================================================================="}, {"sha": "d487868cafe50e42b682aa56969453d4db69979d", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -478,7 +478,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n     fn ifthenelse(&mut self, cond: &Expr<'_>, then: &Expr<'_>, otherwise: Option<&Expr<'_>>) -> Option<Constant> {\n         if let Some(Constant::Bool(b)) = self.expr(cond) {\n             if b {\n-                self.expr(&*then)\n+                self.expr(then)\n             } else {\n                 otherwise.as_ref().and_then(|expr| self.expr(expr))\n             }"}, {"sha": "4604ae5c2c7f0486bbfda4424a5a6070a6534a6d", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -35,7 +35,7 @@ impl<'tcx> ForLoop<'tcx> {\n             if let hir::ExprKind::Match(iterexpr, [arm], hir::MatchSource::ForLoopDesugar) = e.kind;\n             if let hir::ExprKind::Call(_, [arg]) = iterexpr.kind;\n             if let hir::ExprKind::Loop(block, ..) = arm.body.kind;\n-            if let [stmt] = &*block.stmts;\n+            if let [stmt] = block.stmts;\n             if let hir::StmtKind::Expr(e) = stmt.kind;\n             if let hir::ExprKind::Match(_, [_, some_arm], _) = e.kind;\n             if let hir::PatKind::Struct(_, [field], _) = some_arm.pat.kind;"}, {"sha": "0603471c3431be2750b086d459c9b3a24dadce20", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -411,10 +411,10 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyKind::Array(lt, ll), &TyKind::Array(rt, rl)) => self.eq_ty(lt, rt) && self.eq_array_length(ll, rl),\n             (&TyKind::Ptr(ref l_mut), &TyKind::Ptr(ref r_mut)) => {\n-                l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty)\n+                l_mut.mutbl == r_mut.mutbl && self.eq_ty(l_mut.ty, r_mut.ty)\n             },\n             (&TyKind::Rptr(_, ref l_rmut), &TyKind::Rptr(_, ref r_rmut)) => {\n-                l_rmut.mutbl == r_rmut.mutbl && self.eq_ty(&*l_rmut.ty, &*r_rmut.ty)\n+                l_rmut.mutbl == r_rmut.mutbl && self.eq_ty(l_rmut.ty, r_rmut.ty)\n             },\n             (&TyKind::Path(ref l), &TyKind::Path(ref r)) => self.eq_qpath(l, r),\n             (&TyKind::Tup(l), &TyKind::Tup(r)) => over(l, r, |l, r| self.eq_ty(l, r)),\n@@ -608,7 +608,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_name(i.ident.name);\n                 }\n                 if let Some(j) = *j {\n-                    self.hash_expr(&*j);\n+                    self.hash_expr(j);\n                 }\n             },\n             ExprKind::Box(e) | ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {"}, {"sha": "5f051e3f444c0eac2906760ae8729241c6e47f94", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1443,7 +1443,7 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n         },\n         PatKind::Tuple(pats, _) => are_refutable(cx, pats),\n         PatKind::Struct(ref qpath, fields, _) => {\n-            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, fields.iter().map(|field| &*field.pat))\n+            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, fields.iter().map(|field| field.pat))\n         },\n         PatKind::TupleStruct(ref qpath, pats, _) => is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats),\n         PatKind::Slice(head, middle, tail) => {\n@@ -1658,7 +1658,7 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n     let mut blocks: Vec<&Block<'_>> = Vec::new();\n \n     while let Some(higher::IfOrIfLet { cond, then, r#else }) = higher::IfOrIfLet::hir(expr) {\n-        conds.push(&*cond);\n+        conds.push(cond);\n         if let ExprKind::Block(block, _) = then.kind {\n             blocks.push(block);\n         } else {\n@@ -1916,7 +1916,17 @@ pub fn fn_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<DefId> {\n                 ..\n             },\n             ..,\n-        ) => cx.typeck_results().qpath_res(qpath, *path_hir_id).opt_def_id(),\n+        ) => {\n+            // Only return Fn-like DefIds, not the DefIds of statics/consts/etc that contain or\n+            // deref to fn pointers, dyn Fn, impl Fn - #8850\n+            if let Res::Def(DefKind::Fn | DefKind::Ctor(..) | DefKind::AssocFn, id) =\n+                cx.typeck_results().qpath_res(qpath, *path_hir_id)\n+            {\n+                Some(id)\n+            } else {\n+                None\n+            }\n+        },\n         _ => None,\n     }\n }\n@@ -2073,7 +2083,8 @@ static TEST_ITEM_NAMES_CACHE: SyncOnceCell<Mutex<FxHashMap<LocalDefId, Vec<Symbo\n fn with_test_item_names<'tcx>(tcx: TyCtxt<'tcx>, module: LocalDefId, f: impl Fn(&[Symbol]) -> bool) -> bool {\n     let cache = TEST_ITEM_NAMES_CACHE.get_or_init(|| Mutex::new(FxHashMap::default()));\n     let mut map: MutexGuard<'_, FxHashMap<LocalDefId, Vec<Symbol>>> = cache.lock().unwrap();\n-    match map.entry(module) {\n+    let value = map.entry(module);\n+    match value {\n         Entry::Occupied(entry) => f(entry.get()),\n         Entry::Vacant(entry) => {\n             let mut names = Vec::new();"}, {"sha": "b9ec2c19fdd312a98bdfb289e9a41b7c1317ed8b", "filename": "src/tools/clippy/clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -30,6 +30,7 @@ msrv_aliases! {\n     1,34,0 { TRY_FROM }\n     1,30,0 { ITERATOR_FIND_MAP, TOOL_ATTRIBUTES }\n     1,28,0 { FROM_BOOL }\n+    1,26,0 { RANGE_INCLUSIVE }\n     1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST, EXPECT_ERR }\n     1,16,0 { STR_REPEAT }\n     1,24,0 { IS_ASCII_DIGIT }"}, {"sha": "89789c3d8513538179011a8f850d0ed021f1c7eb", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -73,6 +73,7 @@ pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LATE_LINT_PASS: [&str; 3] = [\"rustc_lint\", \"passes\", \"LateLintPass\"];\n #[cfg(feature = \"internal\")]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n+pub const MEM_SWAP: [&str; 3] = [\"core\", \"mem\", \"swap\"];\n pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n /// Preferably use the diagnostic item `sym::Option` where possible\n@@ -141,6 +142,7 @@ pub const SERDE_DESERIALIZE: [&str; 3] = [\"serde\", \"de\", \"Deserialize\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_FROM_RAW_PARTS: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts\"];\n pub const SLICE_FROM_RAW_PARTS_MUT: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts_mut\"];\n+pub const SLICE_GET: [&str; 4] = [\"core\", \"slice\", \"<impl [T]>\", \"get\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 4] = [\"core\", \"slice\", \"iter\", \"Iter\"];\n pub const STDERR: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stderr\"];"}, {"sha": "498dcbb89006d3fae3a62607e30e80f95bfc00ce", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -121,24 +121,18 @@ fn check_rvalue<'tcx>(\n ) -> McfResult {\n     match rvalue {\n         Rvalue::ThreadLocalRef(_) => Err((span, \"cannot access thread local storage in const fn\".into())),\n-        Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => check_operand(tcx, operand, span, body),\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n             check_place(tcx, *place, span, body)\n         },\n-        Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => {\n-            Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n-        },\n-        Rvalue::Cast(CastKind::Misc, operand, _) => {\n-            check_operand(tcx, operand, span, body)\n-        },\n-        Rvalue::Cast(\n+        Rvalue::Repeat(operand, _)\n+        | Rvalue::Use(operand)\n+        | Rvalue::Cast(\n             CastKind::PointerFromExposedAddress\n+            | CastKind::Misc\n             | CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n             operand,\n-            _\n-        ) => {\n-            check_operand(tcx, operand, span, body)\n-        },\n+            _,\n+        ) => check_operand(tcx, operand, span, body),\n         Rvalue::Cast(\n             CastKind::Pointer(\n                 PointerCast::UnsafeFnPointer | PointerCast::ClosureFnPointer(_) | PointerCast::ReifyFnPointer,\n@@ -163,6 +157,9 @@ fn check_rvalue<'tcx>(\n                 Err((span, \"unsizing casts are not allowed in const fn\".into()))\n             }\n         },\n+        Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => {\n+            Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n+        },\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             check_operand(tcx, lhs, span, body)?;"}, {"sha": "f88a92fb11c111146851e4213a6508c0ec26b2ac", "filename": "src/tools/clippy/clippy_utils/src/source.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_span::hygiene;\n use rustc_span::source_map::SourceMap;\n-use rustc_span::{BytePos, Pos, Span, SyntaxContext};\n+use rustc_span::{BytePos, Pos, Span, SpanData, SyntaxContext};\n use std::borrow::Cow;\n \n /// Checks if the span starts with the given text. This will return false if the span crosses\n@@ -389,6 +389,27 @@ pub fn without_block_comments(lines: Vec<&str>) -> Vec<&str> {\n     without\n }\n \n+/// Trims the whitespace from the start and the end of the span.\n+pub fn trim_span(sm: &SourceMap, span: Span) -> Span {\n+    let data = span.data();\n+    let sf: &_ = &sm.lookup_source_file(data.lo);\n+    let Some(src) = sf.src.as_deref() else {\n+        return span;\n+    };\n+    let Some(snip) = &src.get((data.lo - sf.start_pos).to_usize()..(data.hi - sf.start_pos).to_usize()) else {\n+        return span;\n+    };\n+    let trim_start = snip.len() - snip.trim_start().len();\n+    let trim_end = snip.len() - snip.trim_end().len();\n+    SpanData {\n+        lo: data.lo + BytePos::from_usize(trim_start),\n+        hi: data.hi - BytePos::from_usize(trim_end),\n+        ctxt: data.ctxt,\n+        parent: data.parent,\n+    }\n+    .span()\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{reindent_multiline, without_block_comments};"}, {"sha": "a10515d2fec635f70471ad01107081cb9eb43b22", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -13,7 +13,8 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, AdtDef, Binder, FnSig, IntTy, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy, VariantDiscr,\n+    self, AdtDef, Binder, FnSig, IntTy, ParamEnv, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy,\n+    VariantDiscr,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n@@ -151,18 +152,29 @@ pub fn implements_trait<'tcx>(\n     ty: Ty<'tcx>,\n     trait_id: DefId,\n     ty_params: &[GenericArg<'tcx>],\n+) -> bool {\n+    implements_trait_with_env(cx.tcx, cx.param_env, ty, trait_id, ty_params)\n+}\n+\n+/// Same as `implements_trait` but allows using a `ParamEnv` different from the lint context.\n+pub fn implements_trait_with_env<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n+    ty: Ty<'tcx>,\n+    trait_id: DefId,\n+    ty_params: &[GenericArg<'tcx>],\n ) -> bool {\n     // Clippy shouldn't have infer types\n     assert!(!ty.needs_infer());\n \n-    let ty = cx.tcx.erase_regions(ty);\n+    let ty = tcx.erase_regions(ty);\n     if ty.has_escaping_bound_vars() {\n         return false;\n     }\n-    let ty_params = cx.tcx.mk_substs(ty_params.iter());\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n+    let ty_params = tcx.mk_substs(ty_params.iter());\n+    tcx.infer_ctxt().enter(|infcx| {\n         infcx\n-            .type_implements_trait(trait_id, ty, ty_params, cx.param_env)\n+            .type_implements_trait(trait_id, ty, ty_params, param_env)\n             .must_apply_modulo_regions()\n     })\n }"}, {"sha": "3e0b1c5c4f782c3d55afab4ee2734b2451a1333c", "filename": "src/tools/clippy/doc/adding_lints.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -516,11 +516,12 @@ declare_clippy_lint! {\n     /// ### Example\n     ///\n     /// ```rust,ignore\n-    /// // Bad\n-    /// Insert a short example of code that triggers the lint\n-    ///\n-    /// // Good\n-    /// Insert a short example of improved code that doesn't trigger the lint\n+    /// // A short example of code that triggers the lint\n+    /// ```\n+    /// \n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// // A short example of improved code that doesn't trigger the lint\n     /// ```\n     #[clippy::version = \"1.29.0\"]\n     pub FOO_FUNCTIONS,"}, {"sha": "1d1aee0da2cc7be9c0cd84ad8613f35322df7b81", "filename": "src/tools/clippy/doc/common_tools_writing_lints.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fdoc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Fdoc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Fcommon_tools_writing_lints.md?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -159,7 +159,8 @@ A list of defined paths for Clippy can be found in [paths.rs][paths]\n To check if our type defines a method called `some_method`:\n \n ```rust\n-use clippy_utils::{is_type_diagnostic_item, return_ty};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::return_ty;\n \n impl<'tcx> LateLintPass<'tcx> for MyTypeImpl {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {"}, {"sha": "504d58b5197a105b4da50e5e3c43149dd29be060", "filename": "src/tools/clippy/lintcheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -11,7 +11,7 @@ publish = false\n \n [dependencies]\n cargo_metadata = \"0.14\"\n-clap = \"2.33\"\n+clap = \"3.1\"\n flate2 = \"1.0\"\n rayon = \"1.5.1\"\n serde = { version = \"1.0\", features = [\"derive\"] }"}, {"sha": "a6f93d2a1c0a62177f8b55a59c4a2b0ae549e18f", "filename": "src/tools/clippy/lintcheck/src/config.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fconfig.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,47 +1,47 @@\n-use clap::{App, Arg, ArgMatches};\n+use clap::{Arg, ArgMatches, Command};\n use std::env;\n use std::path::PathBuf;\n \n-fn get_clap_config<'a>() -> ArgMatches<'a> {\n-    App::new(\"lintcheck\")\n+fn get_clap_config() -> ArgMatches {\n+    Command::new(\"lintcheck\")\n         .about(\"run clippy on a set of crates and check output\")\n         .arg(\n-            Arg::with_name(\"only\")\n+            Arg::new(\"only\")\n                 .takes_value(true)\n                 .value_name(\"CRATE\")\n                 .long(\"only\")\n                 .help(\"Only process a single crate of the list\"),\n         )\n         .arg(\n-            Arg::with_name(\"crates-toml\")\n+            Arg::new(\"crates-toml\")\n                 .takes_value(true)\n                 .value_name(\"CRATES-SOURCES-TOML-PATH\")\n                 .long(\"crates-toml\")\n                 .help(\"Set the path for a crates.toml where lintcheck should read the sources from\"),\n         )\n         .arg(\n-            Arg::with_name(\"threads\")\n+            Arg::new(\"threads\")\n                 .takes_value(true)\n                 .value_name(\"N\")\n-                .short(\"j\")\n+                .short('j')\n                 .long(\"jobs\")\n                 .help(\"Number of threads to use, 0 automatic choice\"),\n         )\n         .arg(\n-            Arg::with_name(\"fix\")\n+            Arg::new(\"fix\")\n                 .long(\"--fix\")\n                 .help(\"Runs cargo clippy --fix and checks if all suggestions apply\"),\n         )\n         .arg(\n-            Arg::with_name(\"filter\")\n+            Arg::new(\"filter\")\n                 .long(\"--filter\")\n                 .takes_value(true)\n-                .multiple(true)\n+                .multiple_occurrences(true)\n                 .value_name(\"clippy_lint_name\")\n                 .help(\"Apply a filter to only collect specified lints, this also overrides `allow` attributes\"),\n         )\n         .arg(\n-            Arg::with_name(\"markdown\")\n+            Arg::new(\"markdown\")\n                 .long(\"--markdown\")\n                 .help(\"Change the reports table to use markdown links\"),\n         )"}, {"sha": "2386a751f04f6cefdf3aaa055d4d857093fbba09", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-05-19\"\n+channel = \"nightly-2022-06-04\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "04c2eeff08b6f0b32ec0dd2b666ee84d31de7140", "filename": "src/tools/clippy/tests/compile-test.rs", "status": "modified", "additions": 89, "deletions": 3, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,6 @@\n #![feature(test)] // compiletest_rs requires this attribute\n #![feature(once_cell)]\n+#![feature(is_sorted)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n@@ -109,8 +110,9 @@ static EXTERN_FLAGS: SyncLazy<String> = SyncLazy::new(|| {\n         not_found.is_empty(),\n         \"dependencies not found in depinfo: {:?}\\n\\\n         help: Make sure the `-Z binary-dep-depinfo` rust flag is enabled\\n\\\n-        help: Try adding to dev-dependencies in Cargo.toml\",\n-        not_found\n+        help: Try adding to dev-dependencies in Cargo.toml\\n\\\n+        help: Be sure to also add `extern crate ...;` to tests/compile-test.rs\",\n+        not_found,\n     );\n     crates\n         .into_iter()\n@@ -162,7 +164,8 @@ fn base_config(test_dir: &str) -> compiletest::Config {\n }\n \n fn run_ui() {\n-    let config = base_config(\"ui\");\n+    let mut config = base_config(\"ui\");\n+    config.rustfix_coverage = true;\n     // use tests/clippy.toml\n     let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", fs::canonicalize(\"tests\").unwrap());\n     let _threads = VarGuard::set(\n@@ -175,6 +178,7 @@ fn run_ui() {\n         }),\n     );\n     compiletest::run_tests(&config);\n+    check_rustfix_coverage();\n }\n \n fn run_internal_tests() {\n@@ -337,6 +341,88 @@ fn compile_test() {\n     run_internal_tests();\n }\n \n+const RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS: &[&str] = &[\n+    \"assign_ops2.rs\",\n+    \"borrow_deref_ref_unfixable.rs\",\n+    \"cast_size_32bit.rs\",\n+    \"char_lit_as_u8.rs\",\n+    \"cmp_owned/without_suggestion.rs\",\n+    \"dbg_macro.rs\",\n+    \"deref_addrof_double_trigger.rs\",\n+    \"doc/unbalanced_ticks.rs\",\n+    \"eprint_with_newline.rs\",\n+    \"explicit_counter_loop.rs\",\n+    \"iter_skip_next_unfixable.rs\",\n+    \"let_and_return.rs\",\n+    \"literals.rs\",\n+    \"map_flatten.rs\",\n+    \"map_unwrap_or.rs\",\n+    \"match_bool.rs\",\n+    \"mem_replace_macro.rs\",\n+    \"needless_arbitrary_self_type_unfixable.rs\",\n+    \"needless_borrow_pat.rs\",\n+    \"needless_for_each_unfixable.rs\",\n+    \"nonminimal_bool.rs\",\n+    \"print_literal.rs\",\n+    \"print_with_newline.rs\",\n+    \"redundant_static_lifetimes_multiple.rs\",\n+    \"ref_binding_to_reference.rs\",\n+    \"repl_uninit.rs\",\n+    \"result_map_unit_fn_unfixable.rs\",\n+    \"search_is_some.rs\",\n+    \"single_component_path_imports_nested_first.rs\",\n+    \"string_add.rs\",\n+    \"toplevel_ref_arg_non_rustfix.rs\",\n+    \"unit_arg.rs\",\n+    \"unnecessary_clone.rs\",\n+    \"unnecessary_lazy_eval_unfixable.rs\",\n+    \"write_literal.rs\",\n+    \"write_literal_2.rs\",\n+    \"write_with_newline.rs\",\n+];\n+\n+fn check_rustfix_coverage() {\n+    let missing_coverage_path = Path::new(\"target/debug/test/ui/rustfix_missing_coverage.txt\");\n+\n+    if let Ok(missing_coverage_contents) = std::fs::read_to_string(missing_coverage_path) {\n+        assert!(RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS.iter().is_sorted_by_key(Path::new));\n+\n+        for rs_path in missing_coverage_contents.lines() {\n+            if Path::new(rs_path).starts_with(\"tests/ui/crashes\") {\n+                continue;\n+            }\n+            let filename = Path::new(rs_path).strip_prefix(\"tests/ui/\").unwrap();\n+            assert!(\n+                RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS\n+                    .binary_search_by_key(&filename, Path::new)\n+                    .is_ok(),\n+                \"`{}` runs `MachineApplicable` diagnostics but is missing a `run-rustfix` annotation. \\\n+                Please either add `// run-rustfix` at the top of the file or add the file to \\\n+                `RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS` in `tests/compile-test.rs`.\",\n+                rs_path,\n+            );\n+        }\n+    }\n+}\n+\n+#[test]\n+fn rustfix_coverage_known_exceptions_accuracy() {\n+    for filename in RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS {\n+        let rs_path = Path::new(\"tests/ui\").join(filename);\n+        assert!(\n+            rs_path.exists(),\n+            \"`{}` does not exists\",\n+            rs_path.strip_prefix(env!(\"CARGO_MANIFEST_DIR\")).unwrap().display()\n+        );\n+        let fixed_path = rs_path.with_extension(\"fixed\");\n+        assert!(\n+            !fixed_path.exists(),\n+            \"`{}` exists\",\n+            fixed_path.strip_prefix(env!(\"CARGO_MANIFEST_DIR\")).unwrap().display()\n+        );\n+    }\n+}\n+\n /// Restores an env var on drop\n #[must_use]\n struct VarGuard {"}, {"sha": "6033d06e4f637b15bcf58282095d4c11866b2f01", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_symbol_str.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -2,6 +2,7 @@\n #![feature(rustc_private)]\n #![deny(clippy::internal)]\n #![allow(\n+    clippy::borrow_deref_ref,\n     clippy::unnecessary_operation,\n     unused_must_use,\n     clippy::missing_clippy_version_attribute"}, {"sha": "1bb5d55f0b60cb591a388f7edc300546beeb326d", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_symbol_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -2,6 +2,7 @@\n #![feature(rustc_private)]\n #![deny(clippy::internal)]\n #![allow(\n+    clippy::borrow_deref_ref,\n     clippy::unnecessary_operation,\n     unused_must_use,\n     clippy::missing_clippy_version_attribute"}, {"sha": "a1f507f331d26c5cb7545fd98817c5a575495b8c", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_symbol_str.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary `Symbol` to string conversion\n-  --> $DIR/unnecessary_symbol_str.rs:15:5\n+  --> $DIR/unnecessary_symbol_str.rs:16:5\n    |\n LL |     Symbol::intern(\"foo\").as_str() == \"clippy\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Symbol::intern(\"foo\") == rustc_span::sym::clippy`\n@@ -12,25 +12,25 @@ LL | #![deny(clippy::internal)]\n    = note: `#[deny(clippy::unnecessary_symbol_str)]` implied by `#[deny(clippy::internal)]`\n \n error: unnecessary `Symbol` to string conversion\n-  --> $DIR/unnecessary_symbol_str.rs:16:5\n+  --> $DIR/unnecessary_symbol_str.rs:17:5\n    |\n LL |     Symbol::intern(\"foo\").to_string() == \"self\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Symbol::intern(\"foo\") == rustc_span::symbol::kw::SelfLower`\n \n error: unnecessary `Symbol` to string conversion\n-  --> $DIR/unnecessary_symbol_str.rs:17:5\n+  --> $DIR/unnecessary_symbol_str.rs:18:5\n    |\n LL |     Symbol::intern(\"foo\").to_ident_string() != \"Self\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Symbol::intern(\"foo\") != rustc_span::symbol::kw::SelfUpper`\n \n error: unnecessary `Symbol` to string conversion\n-  --> $DIR/unnecessary_symbol_str.rs:18:5\n+  --> $DIR/unnecessary_symbol_str.rs:19:5\n    |\n LL |     &*Ident::empty().as_str() == \"clippy\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Ident::empty().name == rustc_span::sym::clippy`\n \n error: unnecessary `Symbol` to string conversion\n-  --> $DIR/unnecessary_symbol_str.rs:19:5\n+  --> $DIR/unnecessary_symbol_str.rs:20:5\n    |\n LL |     \"clippy\" == Ident::empty().to_string();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::clippy == Ident::empty().name`"}, {"sha": "4296655a040fa23a278eb5a1055ddcbb85fb8c71", "filename": "src/tools/clippy/tests/ui-toml/dbg_macro/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fclippy.toml?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1 @@\n+allow-dbg-in-tests = true"}, {"sha": "5d9ce18f631b6b947fe0b6a9f991436b81295317", "filename": "src/tools/clippy/tests/ui-toml/dbg_macro/dbg_macro.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,39 @@\n+// compile-flags: --test\n+#![warn(clippy::dbg_macro)]\n+\n+fn foo(n: u32) -> u32 {\n+    if let Some(n) = dbg!(n.checked_sub(4)) { n } else { n }\n+}\n+\n+fn factorial(n: u32) -> u32 {\n+    if dbg!(n <= 1) {\n+        dbg!(1)\n+    } else {\n+        dbg!(n * factorial(n - 1))\n+    }\n+}\n+\n+fn main() {\n+    dbg!(42);\n+    dbg!(dbg!(dbg!(42)));\n+    foo(3) + dbg!(factorial(4));\n+    dbg!(1, 2, dbg!(3, 4));\n+    dbg!(1, 2, 3, 4, 5);\n+}\n+\n+#[test]\n+pub fn issue8481() {\n+    dbg!(1);\n+}\n+\n+#[cfg(test)]\n+fn foo2() {\n+    dbg!(1);\n+}\n+\n+#[cfg(test)]\n+mod mod1 {\n+    fn func() {\n+        dbg!(1);\n+    }\n+}"}, {"sha": "46efb86dcfc5f5c1384b81628302619c396d53cb", "filename": "src/tools/clippy/tests/ui-toml/dbg_macro/dbg_macro.stderr", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,102 @@\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:5:22\n+   |\n+LL |     if let Some(n) = dbg!(n.checked_sub(4)) { n } else { n }\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::dbg-macro` implied by `-D warnings`\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     if let Some(n) = n.checked_sub(4) { n } else { n }\n+   |                      ~~~~~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:9:8\n+   |\n+LL |     if dbg!(n <= 1) {\n+   |        ^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     if n <= 1 {\n+   |        ~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:10:9\n+   |\n+LL |         dbg!(1)\n+   |         ^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |         1\n+   |\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:12:9\n+   |\n+LL |         dbg!(n * factorial(n - 1))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |         n * factorial(n - 1)\n+   |\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:17:5\n+   |\n+LL |     dbg!(42);\n+   |     ^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     42;\n+   |     ~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:18:5\n+   |\n+LL |     dbg!(dbg!(dbg!(42)));\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     dbg!(dbg!(42));\n+   |     ~~~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:19:14\n+   |\n+LL |     foo(3) + dbg!(factorial(4));\n+   |              ^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     foo(3) + factorial(4);\n+   |              ~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:20:5\n+   |\n+LL |     dbg!(1, 2, dbg!(3, 4));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     (1, 2, dbg!(3, 4));\n+   |     ~~~~~~~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:21:5\n+   |\n+LL |     dbg!(1, 2, 3, 4, 5);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     (1, 2, 3, 4, 5);\n+   |     ~~~~~~~~~~~~~~~\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "1d87fd91a2532a179fc8adb499558e6fa7e3ee29", "filename": "src/tools/clippy/tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,4 +1,5 @@\n error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of\n+           allow-dbg-in-tests\n            allow-expect-in-tests\n            allow-unwrap-in-tests\n            allowed-scripts"}, {"sha": "0e82fb20e45585817de8323ec873f8ad73623d1a", "filename": "src/tools/clippy/tests/ui-toml/unwrap_used/unwrap_used.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: --test\n \n-#![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n+#![allow(unused_mut, clippy::get_first, clippy::from_iter_instead_of_collect)]\n #![warn(clippy::unwrap_used)]\n #![deny(clippy::get_unwrap)]\n "}, {"sha": "39f8f0c29495bef4f5489c039d609de9193a733b", "filename": "src/tools/clippy/tests/ui/almost_complete_letter_range.fixed", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,66 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(custom_inner_attributes)]\n+#![feature(exclusive_range_pattern)]\n+#![feature(stmt_expr_attributes)]\n+#![warn(clippy::almost_complete_letter_range)]\n+#![allow(ellipsis_inclusive_range_patterns)]\n+\n+macro_rules! a {\n+    () => {\n+        'a'\n+    };\n+}\n+\n+fn main() {\n+    #[rustfmt::skip]\n+    {\n+        let _ = ('a') ..='z';\n+        let _ = 'A' ..= ('Z');\n+    }\n+\n+    let _ = 'b'..'z';\n+    let _ = 'B'..'Z';\n+\n+    let _ = (b'a')..=(b'z');\n+    let _ = b'A'..=b'Z';\n+\n+    let _ = b'b'..b'z';\n+    let _ = b'B'..b'Z';\n+\n+    let _ = a!()..='z';\n+\n+    let _ = match 0u8 {\n+        b'a'..=b'z' if true => 1,\n+        b'A'..=b'Z' if true => 2,\n+        b'b'..b'z' => 3,\n+        b'B'..b'Z' => 4,\n+        _ => 5,\n+    };\n+\n+    let _ = match 'x' {\n+        'a'..='z' if true => 1,\n+        'A'..='Z' if true => 2,\n+        'b'..'z' => 3,\n+        'B'..'Z' => 4,\n+        _ => 5,\n+    };\n+}\n+\n+fn _under_msrv() {\n+    #![clippy::msrv = \"1.25\"]\n+    let _ = match 'a' {\n+        'a'...'z' => 1,\n+        _ => 2,\n+    };\n+}\n+\n+fn _meets_msrv() {\n+    #![clippy::msrv = \"1.26\"]\n+    let _ = 'a'..='z';\n+    let _ = match 'a' {\n+        'a'..='z' => 1,\n+        _ => 2,\n+    };\n+}"}, {"sha": "3dc021992576079ec03384cf6a8b1dbfbabeff1d", "filename": "src/tools/clippy/tests/ui/almost_complete_letter_range.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,66 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(custom_inner_attributes)]\n+#![feature(exclusive_range_pattern)]\n+#![feature(stmt_expr_attributes)]\n+#![warn(clippy::almost_complete_letter_range)]\n+#![allow(ellipsis_inclusive_range_patterns)]\n+\n+macro_rules! a {\n+    () => {\n+        'a'\n+    };\n+}\n+\n+fn main() {\n+    #[rustfmt::skip]\n+    {\n+        let _ = ('a') ..'z';\n+        let _ = 'A' .. ('Z');\n+    }\n+\n+    let _ = 'b'..'z';\n+    let _ = 'B'..'Z';\n+\n+    let _ = (b'a')..(b'z');\n+    let _ = b'A'..b'Z';\n+\n+    let _ = b'b'..b'z';\n+    let _ = b'B'..b'Z';\n+\n+    let _ = a!()..'z';\n+\n+    let _ = match 0u8 {\n+        b'a'..b'z' if true => 1,\n+        b'A'..b'Z' if true => 2,\n+        b'b'..b'z' => 3,\n+        b'B'..b'Z' => 4,\n+        _ => 5,\n+    };\n+\n+    let _ = match 'x' {\n+        'a'..'z' if true => 1,\n+        'A'..'Z' if true => 2,\n+        'b'..'z' => 3,\n+        'B'..'Z' => 4,\n+        _ => 5,\n+    };\n+}\n+\n+fn _under_msrv() {\n+    #![clippy::msrv = \"1.25\"]\n+    let _ = match 'a' {\n+        'a'..'z' => 1,\n+        _ => 2,\n+    };\n+}\n+\n+fn _meets_msrv() {\n+    #![clippy::msrv = \"1.26\"]\n+    let _ = 'a'..'z';\n+    let _ = match 'a' {\n+        'a'..'z' => 1,\n+        _ => 2,\n+    };\n+}"}, {"sha": "74980ec1a923fc5d39abd8dd619e93e60f1ab365", "filename": "src/tools/clippy/tests/ui/almost_complete_letter_range.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,100 @@\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:19:17\n+   |\n+LL |         let _ = ('a') ..'z';\n+   |                 ^^^^^^--^^^\n+   |                       |\n+   |                       help: use an inclusive range: `..=`\n+   |\n+   = note: `-D clippy::almost-complete-letter-range` implied by `-D warnings`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:20:17\n+   |\n+LL |         let _ = 'A' .. ('Z');\n+   |                 ^^^^--^^^^^^\n+   |                     |\n+   |                     help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:26:13\n+   |\n+LL |     let _ = (b'a')..(b'z');\n+   |             ^^^^^^--^^^^^^\n+   |                   |\n+   |                   help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:27:13\n+   |\n+LL |     let _ = b'A'..b'Z';\n+   |             ^^^^--^^^^\n+   |                 |\n+   |                 help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:32:13\n+   |\n+LL |     let _ = a!()..'z';\n+   |             ^^^^--^^^\n+   |                 |\n+   |                 help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:35:9\n+   |\n+LL |         b'a'..b'z' if true => 1,\n+   |         ^^^^--^^^^\n+   |             |\n+   |             help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:36:9\n+   |\n+LL |         b'A'..b'Z' if true => 2,\n+   |         ^^^^--^^^^\n+   |             |\n+   |             help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:43:9\n+   |\n+LL |         'a'..'z' if true => 1,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:44:9\n+   |\n+LL |         'A'..'Z' if true => 2,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:54:9\n+   |\n+LL |         'a'..'z' => 1,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `...`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:61:13\n+   |\n+LL |     let _ = 'a'..'z';\n+   |             ^^^--^^^\n+   |                |\n+   |                help: use an inclusive range: `..=`\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:63:9\n+   |\n+LL |         'a'..'z' => 1,\n+   |         ^^^--^^^\n+   |            |\n+   |            help: use an inclusive range: `..=`\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "948f6d8e6b10b15266fb0b7fb49b0dc523d8ebf5", "filename": "src/tools/clippy/tests/ui/as_underscore.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_underscore.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_underscore.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_underscore.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+#![warn(clippy::as_underscore)]\n+\n+fn foo(_n: usize) {}\n+\n+fn main() {\n+    let n: u16 = 256;\n+    foo(n as usize);\n+\n+    let n = 0_u128;\n+    let _n: u8 = n as u8;\n+}"}, {"sha": "97785ed08a8d0a53a9aa5b3949e49faf5f723103", "filename": "src/tools/clippy/tests/ui/as_underscore.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_underscore.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+#![warn(clippy::as_underscore)]\n+\n+fn foo(_n: usize) {}\n+\n+fn main() {\n+    let n: u16 = 256;\n+    foo(n as _);\n+\n+    let n = 0_u128;\n+    let _n: u8 = n as _;\n+}"}, {"sha": "d7cd58d965acb8a334eca05a675304b395b9af9f", "filename": "src/tools/clippy/tests/ui/as_underscore.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fas_underscore.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,20 @@\n+error: using `as _` conversion\n+  --> $DIR/as_underscore.rs:9:9\n+   |\n+LL |     foo(n as _);\n+   |         ^^^^^-\n+   |              |\n+   |              help: consider giving the type explicitly: `usize`\n+   |\n+   = note: `-D clippy::as-underscore` implied by `-D warnings`\n+\n+error: using `as _` conversion\n+  --> $DIR/as_underscore.rs:12:18\n+   |\n+LL |     let _n: u8 = n as _;\n+   |                  ^^^^^-\n+   |                       |\n+   |                       help: consider giving the type explicitly: `u8`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ae2cc2492f414e8c9c033f38f920e188dc171785", "filename": "src/tools/clippy/tests/ui/auxiliary/proc_macro_attr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -19,6 +19,11 @@ use syn::{\n     parse_quote, FnArg, ImplItem, ItemImpl, ItemTrait, Lifetime, Pat, PatIdent, PatType, Signature, TraitItem, Type,\n };\n \n+#[proc_macro_attribute]\n+pub fn dummy(_args: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n #[proc_macro_attribute]\n pub fn fake_async_trait(_args: TokenStream, input: TokenStream) -> TokenStream {\n     let mut item = parse_macro_input!(input as ItemTrait);"}, {"sha": "e1589843226c4582fb4112b081889ced6bc13578", "filename": "src/tools/clippy/tests/ui/bind_instead_of_map_multipart.fixed", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,62 @@\n+// run-rustfix\n+#![deny(clippy::bind_instead_of_map)]\n+#![allow(clippy::blocks_in_if_conditions)]\n+\n+pub fn main() {\n+    let _ = Some(\"42\").map(|s| if s.len() < 42 { 0 } else { s.len() });\n+    let _ = Some(\"42\").and_then(|s| if s.len() < 42 { None } else { Some(s.len()) });\n+\n+    let _ = Ok::<_, ()>(\"42\").map(|s| if s.len() < 42 { 0 } else { s.len() });\n+    let _ = Ok::<_, ()>(\"42\").and_then(|s| if s.len() < 42 { Err(()) } else { Ok(s.len()) });\n+\n+    let _ = Err::<(), _>(\"42\").map_err(|s| if s.len() < 42 { s.len() + 20 } else { s.len() });\n+    let _ = Err::<(), _>(\"42\").or_else(|s| if s.len() < 42 { Ok(()) } else { Err(s.len()) });\n+\n+    hard_example();\n+    macro_example();\n+}\n+\n+fn hard_example() {\n+    Some(\"42\").map(|s| {\n+        if {\n+            if s == \"43\" {\n+                return 43;\n+            }\n+            s == \"42\"\n+        } {\n+            return 45;\n+        }\n+        match s.len() {\n+            10 => 2,\n+            20 => {\n+                if foo() {\n+                    return {\n+                        if foo() {\n+                            return 20;\n+                        }\n+                        println!(\"foo\");\n+                        3\n+                    };\n+                }\n+                20\n+            },\n+            40 => 30,\n+            _ => 1,\n+        }\n+    });\n+}\n+\n+fn foo() -> bool {\n+    true\n+}\n+\n+macro_rules! m {\n+    () => {\n+        Some(10)\n+    };\n+}\n+\n+fn macro_example() {\n+    let _ = Some(\"\").and_then(|s| if s.len() == 20 { m!() } else { Some(20) });\n+    let _ = Some(\"\").map(|s| if s.len() == 20 { m!() } else { Some(20) });\n+}"}, {"sha": "49944403f6ddddf76a0b12137ef542f2ebc0f70c", "filename": "src/tools/clippy/tests/ui/bind_instead_of_map_multipart.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![deny(clippy::bind_instead_of_map)]\n #![allow(clippy::blocks_in_if_conditions)]\n "}, {"sha": "f822b6f49fa35198906b9a5fe3b7bc7762ec16b3", "filename": "src/tools/clippy/tests/ui/bind_instead_of_map_multipart.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbind_instead_of_map_multipart.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,11 +1,11 @@\n error: using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\n-  --> $DIR/bind_instead_of_map_multipart.rs:5:13\n+  --> $DIR/bind_instead_of_map_multipart.rs:6:13\n    |\n LL |     let _ = Some(\"42\").and_then(|s| if s.len() < 42 { Some(0) } else { Some(s.len()) });\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/bind_instead_of_map_multipart.rs:1:9\n+  --> $DIR/bind_instead_of_map_multipart.rs:2:9\n    |\n LL | #![deny(clippy::bind_instead_of_map)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ LL |     let _ = Some(\"42\").map(|s| if s.len() < 42 { 0 } else { s.len() });\n    |                        ~~~                       ~          ~~~~~~~\n \n error: using `Result.and_then(|x| Ok(y))`, which is more succinctly expressed as `map(|x| y)`\n-  --> $DIR/bind_instead_of_map_multipart.rs:8:13\n+  --> $DIR/bind_instead_of_map_multipart.rs:9:13\n    |\n LL |     let _ = Ok::<_, ()>(\"42\").and_then(|s| if s.len() < 42 { Ok(0) } else { Ok(s.len()) });\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     let _ = Ok::<_, ()>(\"42\").map(|s| if s.len() < 42 { 0 } else { s.len()\n    |                               ~~~                       ~          ~~~~~~~\n \n error: using `Result.or_else(|x| Err(y))`, which is more succinctly expressed as `map_err(|x| y)`\n-  --> $DIR/bind_instead_of_map_multipart.rs:11:13\n+  --> $DIR/bind_instead_of_map_multipart.rs:12:13\n    |\n LL |     let _ = Err::<(), _>(\"42\").or_else(|s| if s.len() < 42 { Err(s.len() + 20) } else { Err(s.len()) });\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -37,7 +37,7 @@ LL |     let _ = Err::<(), _>(\"42\").map_err(|s| if s.len() < 42 { s.len() + 20 }\n    |                                ~~~~~~~                       ~~~~~~~~~~~~          ~~~~~~~\n \n error: using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\n-  --> $DIR/bind_instead_of_map_multipart.rs:19:5\n+  --> $DIR/bind_instead_of_map_multipart.rs:20:5\n    |\n LL | /     Some(\"42\").and_then(|s| {\n LL | |         if {\n@@ -59,7 +59,7 @@ LL |             s == \"42\"\n  ...\n \n error: using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\n-  --> $DIR/bind_instead_of_map_multipart.rs:60:13\n+  --> $DIR/bind_instead_of_map_multipart.rs:61:13\n    |\n LL |     let _ = Some(\"\").and_then(|s| if s.len() == 20 { Some(m!()) } else { Some(Some(20)) });\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "bf4691c5bc97e1df47e9224ed81410895ccab254", "filename": "src/tools/clippy/tests/ui/borrow_deref_ref.fixed", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,59 @@\n+// run-rustfix\n+\n+#![allow(dead_code, unused_variables)]\n+\n+fn main() {}\n+\n+mod should_lint {\n+    fn one_help() {\n+        let a = &12;\n+        let b = a;\n+\n+        let b = &mut bar(&12);\n+    }\n+\n+    fn bar(x: &u32) -> &u32 {\n+        x\n+    }\n+}\n+\n+// this mod explains why we should not lint `&mut &* (&T)`\n+mod should_not_lint1 {\n+    fn foo(x: &mut &u32) {\n+        *x = &1;\n+    }\n+\n+    fn main() {\n+        let mut x = &0;\n+        foo(&mut &*x); // should not lint\n+        assert_eq!(*x, 0);\n+\n+        foo(&mut x);\n+        assert_eq!(*x, 1);\n+    }\n+}\n+\n+// similar to should_not_lint1\n+mod should_not_lint2 {\n+    struct S<'a> {\n+        a: &'a u32,\n+        b: u32,\n+    }\n+\n+    fn main() {\n+        let s = S { a: &1, b: 1 };\n+        let x = &mut &*s.a;\n+        *x = &2;\n+    }\n+}\n+\n+// this mod explains why we should not lint `& &* (&T)`\n+mod false_negative {\n+    fn foo() {\n+        let x = &12;\n+        let addr_x = &x as *const _ as usize;\n+        let addr_y = &x as *const _ as usize; // assert ok\n+        // let addr_y = &x as *const _ as usize; // assert fail\n+        assert_ne!(addr_x, addr_y);\n+    }\n+}"}, {"sha": "28c005fdbef70de82d07fb5bf3245123a51fda70", "filename": "src/tools/clippy/tests/ui/borrow_deref_ref.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,59 @@\n+// run-rustfix\n+\n+#![allow(dead_code, unused_variables)]\n+\n+fn main() {}\n+\n+mod should_lint {\n+    fn one_help() {\n+        let a = &12;\n+        let b = &*a;\n+\n+        let b = &mut &*bar(&12);\n+    }\n+\n+    fn bar(x: &u32) -> &u32 {\n+        x\n+    }\n+}\n+\n+// this mod explains why we should not lint `&mut &* (&T)`\n+mod should_not_lint1 {\n+    fn foo(x: &mut &u32) {\n+        *x = &1;\n+    }\n+\n+    fn main() {\n+        let mut x = &0;\n+        foo(&mut &*x); // should not lint\n+        assert_eq!(*x, 0);\n+\n+        foo(&mut x);\n+        assert_eq!(*x, 1);\n+    }\n+}\n+\n+// similar to should_not_lint1\n+mod should_not_lint2 {\n+    struct S<'a> {\n+        a: &'a u32,\n+        b: u32,\n+    }\n+\n+    fn main() {\n+        let s = S { a: &1, b: 1 };\n+        let x = &mut &*s.a;\n+        *x = &2;\n+    }\n+}\n+\n+// this mod explains why we should not lint `& &* (&T)`\n+mod false_negative {\n+    fn foo() {\n+        let x = &12;\n+        let addr_x = &x as *const _ as usize;\n+        let addr_y = &&*x as *const _ as usize; // assert ok\n+        // let addr_y = &x as *const _ as usize; // assert fail\n+        assert_ne!(addr_x, addr_y);\n+    }\n+}"}, {"sha": "d72de37c69ff538a6eda4b77be4ae22a3d0c6a43", "filename": "src/tools/clippy/tests/ui/borrow_deref_ref.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,22 @@\n+error: deref on an immutable reference\n+  --> $DIR/borrow_deref_ref.rs:10:17\n+   |\n+LL |         let b = &*a;\n+   |                 ^^^ help: if you would like to reborrow, try removing `&*`: `a`\n+   |\n+   = note: `-D clippy::borrow-deref-ref` implied by `-D warnings`\n+\n+error: deref on an immutable reference\n+  --> $DIR/borrow_deref_ref.rs:12:22\n+   |\n+LL |         let b = &mut &*bar(&12);\n+   |                      ^^^^^^^^^^ help: if you would like to reborrow, try removing `&*`: `bar(&12)`\n+\n+error: deref on an immutable reference\n+  --> $DIR/borrow_deref_ref.rs:55:23\n+   |\n+LL |         let addr_y = &&*x as *const _ as usize; // assert ok\n+   |                       ^^^ help: if you would like to reborrow, try removing `&*`: `x`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "a8e2bbfef0f5aae09d2ea5058f645c955c427543", "filename": "src/tools/clippy/tests/ui/borrow_deref_ref_unfixable.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref_unfixable.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,10 @@\n+#![allow(dead_code, unused_variables)]\n+\n+fn main() {}\n+\n+mod should_lint {\n+    fn two_helps() {\n+        let s = &String::new();\n+        let x: &str = &*s;\n+    }\n+}"}, {"sha": "738b01e7ec1ee355cc962d74530a0f77229333d0", "filename": "src/tools/clippy/tests/ui/borrow_deref_ref_unfixable.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref_unfixable.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,18 @@\n+error: deref on an immutable reference\n+  --> $DIR/borrow_deref_ref_unfixable.rs:8:23\n+   |\n+LL |         let x: &str = &*s;\n+   |                       ^^^\n+   |\n+   = note: `-D clippy::borrow-deref-ref` implied by `-D warnings`\n+help: if you would like to reborrow, try removing `&*`\n+   |\n+LL |         let x: &str = s;\n+   |                       ~\n+help: if you would like to deref, try using `&**`\n+   |\n+LL |         let x: &str = &**s;\n+   |                       ~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "a68b32b097e85ae9c0d0877e9b67c4d18bd501ee", "filename": "src/tools/clippy/tests/ui/cast_abs_to_unsigned.fixed", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -5,4 +5,25 @@ fn main() {\n     let x: i32 = -42;\n     let y: u32 = x.unsigned_abs();\n     println!(\"The absolute value of {} is {}\", x, y);\n+\n+    let a: i32 = -3;\n+    let _: usize = a.unsigned_abs() as usize;\n+    let _: usize = a.unsigned_abs() as _;\n+    let _ = a.unsigned_abs() as usize;\n+\n+    let a: i64 = -3;\n+    let _ = a.unsigned_abs() as usize;\n+    let _ = a.unsigned_abs() as u8;\n+    let _ = a.unsigned_abs() as u16;\n+    let _ = a.unsigned_abs() as u32;\n+    let _ = a.unsigned_abs();\n+    let _ = a.unsigned_abs() as u128;\n+\n+    let a: isize = -3;\n+    let _ = a.unsigned_abs();\n+    let _ = a.unsigned_abs() as u8;\n+    let _ = a.unsigned_abs() as u16;\n+    let _ = a.unsigned_abs() as u32;\n+    let _ = a.unsigned_abs() as u64;\n+    let _ = a.unsigned_abs() as u128;\n }"}, {"sha": "110fbc6c2dfb637db23f49fd96e0b136e2bbd2bb", "filename": "src/tools/clippy/tests/ui/cast_abs_to_unsigned.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -5,4 +5,25 @@ fn main() {\n     let x: i32 = -42;\n     let y: u32 = x.abs() as u32;\n     println!(\"The absolute value of {} is {}\", x, y);\n+\n+    let a: i32 = -3;\n+    let _: usize = a.abs() as usize;\n+    let _: usize = a.abs() as _;\n+    let _ = a.abs() as usize;\n+\n+    let a: i64 = -3;\n+    let _ = a.abs() as usize;\n+    let _ = a.abs() as u8;\n+    let _ = a.abs() as u16;\n+    let _ = a.abs() as u32;\n+    let _ = a.abs() as u64;\n+    let _ = a.abs() as u128;\n+\n+    let a: isize = -3;\n+    let _ = a.abs() as usize;\n+    let _ = a.abs() as u8;\n+    let _ = a.abs() as u16;\n+    let _ = a.abs() as u32;\n+    let _ = a.abs() as u64;\n+    let _ = a.abs() as u128;\n }"}, {"sha": "02c24e10659aceb8a94a3d652f16156241e849cd", "filename": "src/tools/clippy/tests/ui/cast_abs_to_unsigned.stderr", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_abs_to_unsigned.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -6,5 +6,95 @@ LL |     let y: u32 = x.abs() as u32;\n    |\n    = note: `-D clippy::cast-abs-to-unsigned` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: casting the result of `i32::abs()` to usize\n+  --> $DIR/cast_abs_to_unsigned.rs:10:20\n+   |\n+LL |     let _: usize = a.abs() as usize;\n+   |                    ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i32::abs()` to usize\n+  --> $DIR/cast_abs_to_unsigned.rs:11:20\n+   |\n+LL |     let _: usize = a.abs() as _;\n+   |                    ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i32::abs()` to usize\n+  --> $DIR/cast_abs_to_unsigned.rs:12:13\n+   |\n+LL |     let _ = a.abs() as usize;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to usize\n+  --> $DIR/cast_abs_to_unsigned.rs:15:13\n+   |\n+LL |     let _ = a.abs() as usize;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to u8\n+  --> $DIR/cast_abs_to_unsigned.rs:16:13\n+   |\n+LL |     let _ = a.abs() as u8;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to u16\n+  --> $DIR/cast_abs_to_unsigned.rs:17:13\n+   |\n+LL |     let _ = a.abs() as u16;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to u32\n+  --> $DIR/cast_abs_to_unsigned.rs:18:13\n+   |\n+LL |     let _ = a.abs() as u32;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to u64\n+  --> $DIR/cast_abs_to_unsigned.rs:19:13\n+   |\n+LL |     let _ = a.abs() as u64;\n+   |             ^^^^^^^^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to u128\n+  --> $DIR/cast_abs_to_unsigned.rs:20:13\n+   |\n+LL |     let _ = a.abs() as u128;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to usize\n+  --> $DIR/cast_abs_to_unsigned.rs:23:13\n+   |\n+LL |     let _ = a.abs() as usize;\n+   |             ^^^^^^^^^^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to u8\n+  --> $DIR/cast_abs_to_unsigned.rs:24:13\n+   |\n+LL |     let _ = a.abs() as u8;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to u16\n+  --> $DIR/cast_abs_to_unsigned.rs:25:13\n+   |\n+LL |     let _ = a.abs() as u16;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to u32\n+  --> $DIR/cast_abs_to_unsigned.rs:26:13\n+   |\n+LL |     let _ = a.abs() as u32;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to u64\n+  --> $DIR/cast_abs_to_unsigned.rs:27:13\n+   |\n+LL |     let _ = a.abs() as u64;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to u128\n+  --> $DIR/cast_abs_to_unsigned.rs:28:13\n+   |\n+LL |     let _ = a.abs() as u128;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: aborting due to 16 previous errors\n "}, {"sha": "c8fb0a39e954cdeabf431e973c2cf19f830778b5", "filename": "src/tools/clippy/tests/ui/collapsible_match2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -57,7 +57,7 @@ fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>\n \n     // ref pattern and deref\n     match Some(&[1]) {\n-        Some(ref s) => match &*s {\n+        Some(ref s) => match s {\n             [n] => foo(n),\n             _ => (),\n         },"}, {"sha": "fe64e4693792dcc109bd4c79f7fac53c5117585a", "filename": "src/tools/clippy/tests/ui/collapsible_match2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_match2.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -78,7 +78,7 @@ LL |             [n] => foo(n),\n error: this `match` can be collapsed into the outer `match`\n   --> $DIR/collapsible_match2.rs:60:24\n    |\n-LL |           Some(ref s) => match &*s {\n+LL |           Some(ref s) => match s {\n    |  ________________________^\n LL | |             [n] => foo(n),\n LL | |             _ => (),\n@@ -88,7 +88,7 @@ LL | |         },\n help: the outer pattern can be modified to include the inner pattern\n   --> $DIR/collapsible_match2.rs:60:14\n    |\n-LL |         Some(ref s) => match &*s {\n+LL |         Some(ref s) => match s {\n    |              ^^^^^ replace this binding\n LL |             [n] => foo(n),\n    |             ^^^ with this pattern"}, {"sha": "f2747ab2239a683f0219ab6fbc40c41a5efc7f91", "filename": "src/tools/clippy/tests/ui/crashes/ice-8850.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8850.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,27 @@\n+fn fn_pointer_static() -> usize {\n+    static FN: fn() -> usize = || 1;\n+    let res = FN() + 1;\n+    res\n+}\n+\n+fn fn_pointer_const() -> usize {\n+    const FN: fn() -> usize = || 1;\n+    let res = FN() + 1;\n+    res\n+}\n+\n+fn deref_to_dyn_fn() -> usize {\n+    struct Derefs;\n+    impl std::ops::Deref for Derefs {\n+        type Target = dyn Fn() -> usize;\n+\n+        fn deref(&self) -> &Self::Target {\n+            &|| 2\n+        }\n+    }\n+    static FN: Derefs = Derefs;\n+    let res = FN() + 1;\n+    res\n+}\n+\n+fn main() {}"}, {"sha": "620fd1edaf790e81c8bfdcab2060f4c5af5f1a05", "filename": "src/tools/clippy/tests/ui/crashes/ice-8850.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8850.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8850.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8850.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,45 @@\n+error: returning the result of a `let` binding from a block\n+  --> $DIR/ice-8850.rs:4:5\n+   |\n+LL |     let res = FN() + 1;\n+   |     ------------------- unnecessary `let` binding\n+LL |     res\n+   |     ^^^\n+   |\n+   = note: `-D clippy::let-and-return` implied by `-D warnings`\n+help: return the expression directly\n+   |\n+LL ~     \n+LL ~     FN() + 1\n+   |\n+\n+error: returning the result of a `let` binding from a block\n+  --> $DIR/ice-8850.rs:10:5\n+   |\n+LL |     let res = FN() + 1;\n+   |     ------------------- unnecessary `let` binding\n+LL |     res\n+   |     ^^^\n+   |\n+help: return the expression directly\n+   |\n+LL ~     \n+LL ~     FN() + 1\n+   |\n+\n+error: returning the result of a `let` binding from a block\n+  --> $DIR/ice-8850.rs:24:5\n+   |\n+LL |     let res = FN() + 1;\n+   |     ------------------- unnecessary `let` binding\n+LL |     res\n+   |     ^^^\n+   |\n+help: return the expression directly\n+   |\n+LL ~     \n+LL ~     FN() + 1\n+   |\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "e6a65b46d975c80bdeb7eef62144efd45e19b1a7", "filename": "src/tools/clippy/tests/ui/dbg_macro.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -109,5 +109,38 @@ help: ensure to avoid having uses of it in version control\n LL |         2;\n    |         ~\n \n-error: aborting due to 10 previous errors\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:47:5\n+   |\n+LL |     dbg!(1);\n+   |     ^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     1;\n+   |     ~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:52:5\n+   |\n+LL |     dbg!(1);\n+   |     ^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     1;\n+   |     ~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:58:9\n+   |\n+LL |         dbg!(1);\n+   |         ^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |         1;\n+   |         ~\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "46faa0a7b9117f79dd456086a56a341b3a443993", "filename": "src/tools/clippy/tests/ui/debug_assert_with_mut_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdebug_assert_with_mut_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdebug_assert_with_mut_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdebug_assert_with_mut_call.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,7 +1,7 @@\n #![feature(custom_inner_attributes)]\n #![rustfmt::skip]\n #![warn(clippy::debug_assert_with_mut_call)]\n-#![allow(clippy::redundant_closure_call)]\n+#![allow(clippy::redundant_closure_call, clippy::get_first)]\n \n \n struct S;"}, {"sha": "257393e56ff0f766adb33cff0b920627502fadc5", "filename": "src/tools/clippy/tests/ui/deref_by_slicing.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderef_by_slicing.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderef_by_slicing.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderef_by_slicing.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::deref_by_slicing)]\n+#![allow(clippy::borrow_deref_ref)]\n \n use std::io::Read;\n "}, {"sha": "e288046f927fd44fa3f8585ec1a832102ad9ccfe", "filename": "src/tools/clippy/tests/ui/deref_by_slicing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderef_by_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderef_by_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderef_by_slicing.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::deref_by_slicing)]\n+#![allow(clippy::borrow_deref_ref)]\n \n use std::io::Read;\n "}, {"sha": "8f042ef47ebe326d6982a30ef2f1c2c357953d57", "filename": "src/tools/clippy/tests/ui/deref_by_slicing.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderef_by_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderef_by_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderef_by_slicing.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,55 +1,55 @@\n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:9:13\n+  --> $DIR/deref_by_slicing.rs:10:13\n    |\n LL |     let _ = &vec[..];\n    |             ^^^^^^^^ help: dereference the original value instead: `&*vec`\n    |\n    = note: `-D clippy::deref-by-slicing` implied by `-D warnings`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:10:13\n+  --> $DIR/deref_by_slicing.rs:11:13\n    |\n LL |     let _ = &mut vec[..];\n    |             ^^^^^^^^^^^^ help: dereference the original value instead: `&mut *vec`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:13:13\n+  --> $DIR/deref_by_slicing.rs:14:13\n    |\n LL |     let _ = &ref_vec[..];\n    |             ^^^^^^^^^^^^ help: dereference the original value instead: `&**ref_vec`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:14:21\n+  --> $DIR/deref_by_slicing.rs:15:21\n    |\n LL |     let mut_slice = &mut ref_vec[..];\n    |                     ^^^^^^^^^^^^^^^^ help: dereference the original value instead: `&mut **ref_vec`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:15:13\n+  --> $DIR/deref_by_slicing.rs:16:13\n    |\n LL |     let _ = &mut mut_slice[..]; // Err, re-borrows slice\n    |             ^^^^^^^^^^^^^^^^^^ help: reborrow the original value instead: `&mut *mut_slice`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:18:13\n+  --> $DIR/deref_by_slicing.rs:19:13\n    |\n LL |     let _ = &s[..];\n    |             ^^^^^^ help: dereference the original value instead: `&*s`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:21:18\n+  --> $DIR/deref_by_slicing.rs:22:18\n    |\n LL |     let _ = &mut &S[..]; // Err, re-borrows slice\n    |                  ^^^^^^ help: reborrow the original value instead: `&*S`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:25:13\n+  --> $DIR/deref_by_slicing.rs:26:13\n    |\n LL |     let _ = &slice_ref[..]; // Err, derefs slice\n    |             ^^^^^^^^^^^^^^ help: dereference the original value instead: `*slice_ref`\n \n error: slicing when dereferencing would work\n-  --> $DIR/deref_by_slicing.rs:28:13\n+  --> $DIR/deref_by_slicing.rs:29:13\n    |\n LL |     let _ = (&bytes[..]).read_to_end(&mut vec![]).unwrap(); // Err, re-borrows slice\n    |             ^^^^^^^^^^^^ help: reborrow the original value instead: `(&*bytes)`"}, {"sha": "012780258fc3a7bfb9ae2a92683705eaca9c00e8", "filename": "src/tools/clippy/tests/ui/derive_partial_eq_without_eq.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -95,4 +95,10 @@ enum EnumNotEq {\n #[derive(Debug, PartialEq, Eq, Clone)]\n struct RustFixWithOtherDerives;\n \n+#[derive(PartialEq)]\n+struct Generic<T>(T);\n+\n+#[derive(PartialEq, Eq)]\n+struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+\n fn main() {}"}, {"sha": "fc8285b0c6b753921d51eddc8388a876cfcd70cb", "filename": "src/tools/clippy/tests/ui/derive_partial_eq_without_eq.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -95,4 +95,10 @@ enum EnumNotEq {\n #[derive(Debug, PartialEq, Clone)]\n struct RustFixWithOtherDerives;\n \n+#[derive(PartialEq)]\n+struct Generic<T>(T);\n+\n+#[derive(PartialEq, Eq)]\n+struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+\n fn main() {}"}, {"sha": "ab52fb1a4a69eebe55c83af2599c4919f13f8532", "filename": "src/tools/clippy/tests/ui/doc_link_with_quotes.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_link_with_quotes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_link_with_quotes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_link_with_quotes.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,12 @@\n+#![warn(clippy::doc_link_with_quotes)]\n+\n+fn main() {\n+    foo()\n+}\n+\n+/// Calls ['bar']\n+pub fn foo() {\n+    bar()\n+}\n+\n+pub fn bar() {}"}, {"sha": "bf6d57d8afe8c8788eae2122b30a1e2f69963bb0", "filename": "src/tools/clippy/tests/ui/doc_link_with_quotes.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_link_with_quotes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_link_with_quotes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_link_with_quotes.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,10 @@\n+error: possible intra-doc link using quotes instead of backticks\n+  --> $DIR/doc_link_with_quotes.rs:7:1\n+   |\n+LL | /// Calls ['bar']\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::doc-link-with-quotes` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "697412c00275e5178db7bcac8656e81eab5ae179", "filename": "src/tools/clippy/tests/ui/empty_line_after_outer_attribute.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_line_after_outer_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_line_after_outer_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_line_after_outer_attribute.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -110,4 +110,11 @@ pub trait Bazz {\n     }\n }\n \n+#[derive(Clone, Copy)]\n+#[dummy(string = \"first line\n+\n+second line\n+\")]\n+pub struct Args;\n+\n fn main() {}"}, {"sha": "92f27e68549a397bf671441c962ae76912d9a4e8", "filename": "src/tools/clippy/tests/ui/explicit_deref_methods.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,6 +1,11 @@\n // run-rustfix\n \n-#![allow(unused_variables, clippy::clone_double_ref, clippy::needless_borrow)]\n+#![allow(\n+    unused_variables,\n+    clippy::clone_double_ref,\n+    clippy::needless_borrow,\n+    clippy::borrow_deref_ref\n+)]\n #![warn(clippy::explicit_deref_methods)]\n \n use std::ops::{Deref, DerefMut};"}, {"sha": "d118607f992b9e0cd48fec70cb3fb82c4d9c9b77", "filename": "src/tools/clippy/tests/ui/explicit_deref_methods.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,6 +1,11 @@\n // run-rustfix\n \n-#![allow(unused_variables, clippy::clone_double_ref, clippy::needless_borrow)]\n+#![allow(\n+    unused_variables,\n+    clippy::clone_double_ref,\n+    clippy::needless_borrow,\n+    clippy::borrow_deref_ref\n+)]\n #![warn(clippy::explicit_deref_methods)]\n \n use std::ops::{Deref, DerefMut};"}, {"sha": "8e8b358972be7e39808931940a6fec095dc03881", "filename": "src/tools/clippy/tests/ui/explicit_deref_methods.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,73 +1,73 @@\n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:30:19\n+  --> $DIR/explicit_deref_methods.rs:35:19\n    |\n LL |     let b: &str = a.deref();\n    |                   ^^^^^^^^^ help: try this: `&*a`\n    |\n    = note: `-D clippy::explicit-deref-methods` implied by `-D warnings`\n \n error: explicit `deref_mut` method call\n-  --> $DIR/explicit_deref_methods.rs:32:23\n+  --> $DIR/explicit_deref_methods.rs:37:23\n    |\n LL |     let b: &mut str = a.deref_mut();\n    |                       ^^^^^^^^^^^^^ help: try this: `&mut **a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:35:39\n+  --> $DIR/explicit_deref_methods.rs:40:39\n    |\n LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n    |                                       ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:35:50\n+  --> $DIR/explicit_deref_methods.rs:40:50\n    |\n LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n    |                                                  ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:37:20\n+  --> $DIR/explicit_deref_methods.rs:42:20\n    |\n LL |     println!(\"{}\", a.deref());\n    |                    ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:40:11\n+  --> $DIR/explicit_deref_methods.rs:45:11\n    |\n LL |     match a.deref() {\n    |           ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:44:28\n+  --> $DIR/explicit_deref_methods.rs:49:28\n    |\n LL |     let b: String = concat(a.deref());\n    |                            ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:46:13\n+  --> $DIR/explicit_deref_methods.rs:51:13\n    |\n LL |     let b = just_return(a).deref();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `just_return(a)`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:48:28\n+  --> $DIR/explicit_deref_methods.rs:53:28\n    |\n LL |     let b: String = concat(just_return(a).deref());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `just_return(a)`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:50:19\n+  --> $DIR/explicit_deref_methods.rs:55:19\n    |\n LL |     let b: &str = a.deref().deref();\n    |                   ^^^^^^^^^^^^^^^^^ help: try this: `&**a`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:53:13\n+  --> $DIR/explicit_deref_methods.rs:58:13\n    |\n LL |     let b = opt_a.unwrap().deref();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*opt_a.unwrap()`\n \n error: explicit `deref` method call\n-  --> $DIR/explicit_deref_methods.rs:79:31\n+  --> $DIR/explicit_deref_methods.rs:84:31\n    |\n LL |     let b: &str = expr_deref!(a.deref());\n    |                               ^^^^^^^^^ help: try this: `&*a`"}, {"sha": "031b415f56ff6d643554a033f3f06ee6d72b7e78", "filename": "src/tools/clippy/tests/ui/forget_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,6 +1,7 @@\n #![warn(clippy::forget_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n #![allow(clippy::unnecessary_wraps, clippy::forget_non_drop)]\n+#![allow(clippy::borrow_deref_ref)]\n \n use std::mem::forget;\n "}, {"sha": "df5cd8cacdb8dbb8566c4a0c680b70cfe85e3992", "filename": "src/tools/clippy/tests/ui/forget_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,108 +1,108 @@\n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:10:5\n+  --> $DIR/forget_ref.rs:11:5\n    |\n LL |     forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::forget-ref` implied by `-D warnings`\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:10:12\n+  --> $DIR/forget_ref.rs:11:12\n    |\n LL |     forget(&SomeStruct);\n    |            ^^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:13:5\n+  --> $DIR/forget_ref.rs:14:5\n    |\n LL |     forget(&owned);\n    |     ^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:13:12\n+  --> $DIR/forget_ref.rs:14:12\n    |\n LL |     forget(&owned);\n    |            ^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:14:5\n+  --> $DIR/forget_ref.rs:15:5\n    |\n LL |     forget(&&owned);\n    |     ^^^^^^^^^^^^^^^\n    |\n note: argument has type `&&SomeStruct`\n-  --> $DIR/forget_ref.rs:14:12\n+  --> $DIR/forget_ref.rs:15:12\n    |\n LL |     forget(&&owned);\n    |            ^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:15:5\n+  --> $DIR/forget_ref.rs:16:5\n    |\n LL |     forget(&mut owned);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:15:12\n+  --> $DIR/forget_ref.rs:16:12\n    |\n LL |     forget(&mut owned);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:19:5\n+  --> $DIR/forget_ref.rs:20:5\n    |\n LL |     forget(&*reference1);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:19:12\n+  --> $DIR/forget_ref.rs:20:12\n    |\n LL |     forget(&*reference1);\n    |            ^^^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:22:5\n+  --> $DIR/forget_ref.rs:23:5\n    |\n LL |     forget(reference2);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:22:12\n+  --> $DIR/forget_ref.rs:23:12\n    |\n LL |     forget(reference2);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:25:5\n+  --> $DIR/forget_ref.rs:26:5\n    |\n LL |     forget(reference3);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:25:12\n+  --> $DIR/forget_ref.rs:26:12\n    |\n LL |     forget(reference3);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:30:5\n+  --> $DIR/forget_ref.rs:31:5\n    |\n LL |     forget(&val);\n    |     ^^^^^^^^^^^^\n    |\n note: argument has type `&T`\n-  --> $DIR/forget_ref.rs:30:12\n+  --> $DIR/forget_ref.rs:31:12\n    |\n LL |     forget(&val);\n    |            ^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:38:5\n+  --> $DIR/forget_ref.rs:39:5\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:38:22\n+  --> $DIR/forget_ref.rs:39:22\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |                      ^^^^^^^^^^^"}, {"sha": "def58afa4fbf2316651aec3456ec1887c0099e49", "filename": "src/tools/clippy/tests/ui/get_first.fixed", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_first.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_first.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_first.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,42 @@\n+// run-rustfix\n+#![warn(clippy::get_first)]\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::VecDeque;\n+\n+struct Bar {\n+    arr: [u32; 3],\n+}\n+\n+impl Bar {\n+    fn get(&self, pos: usize) -> Option<&u32> {\n+        self.arr.get(pos)\n+    }\n+}\n+\n+fn main() {\n+    let x = vec![2, 3, 5];\n+    let _ = x.first(); // Use x.first()\n+    let _ = x.get(1);\n+    let _ = x[0];\n+\n+    let y = [2, 3, 5];\n+    let _ = y.first(); // Use y.first()\n+    let _ = y.get(1);\n+    let _ = y[0];\n+\n+    let z = &[2, 3, 5];\n+    let _ = z.first(); // Use z.first()\n+    let _ = z.get(1);\n+    let _ = z[0];\n+\n+    let vecdeque: VecDeque<_> = x.iter().cloned().collect();\n+    let hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let _ = vecdeque.get(0); // Do not lint, because VecDeque is not slice.\n+    let _ = hashmap.get(&0); // Do not lint, because HashMap is not slice.\n+    let _ = btreemap.get(&0); // Do not lint, because BTreeMap is not slice.\n+\n+    let bar = Bar { arr: [0, 1, 2] };\n+    let _ = bar.get(0); // Do not lint, because Bar is struct.\n+}"}, {"sha": "85a381854cd3be0a734306362f0961e0e21dbe08", "filename": "src/tools/clippy/tests/ui/get_first.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_first.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,42 @@\n+// run-rustfix\n+#![warn(clippy::get_first)]\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::VecDeque;\n+\n+struct Bar {\n+    arr: [u32; 3],\n+}\n+\n+impl Bar {\n+    fn get(&self, pos: usize) -> Option<&u32> {\n+        self.arr.get(pos)\n+    }\n+}\n+\n+fn main() {\n+    let x = vec![2, 3, 5];\n+    let _ = x.get(0); // Use x.first()\n+    let _ = x.get(1);\n+    let _ = x[0];\n+\n+    let y = [2, 3, 5];\n+    let _ = y.get(0); // Use y.first()\n+    let _ = y.get(1);\n+    let _ = y[0];\n+\n+    let z = &[2, 3, 5];\n+    let _ = z.get(0); // Use z.first()\n+    let _ = z.get(1);\n+    let _ = z[0];\n+\n+    let vecdeque: VecDeque<_> = x.iter().cloned().collect();\n+    let hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let _ = vecdeque.get(0); // Do not lint, because VecDeque is not slice.\n+    let _ = hashmap.get(&0); // Do not lint, because HashMap is not slice.\n+    let _ = btreemap.get(&0); // Do not lint, because BTreeMap is not slice.\n+\n+    let bar = Bar { arr: [0, 1, 2] };\n+    let _ = bar.get(0); // Do not lint, because Bar is struct.\n+}"}, {"sha": "466beff9c92df65d6989d6642c7eb1b635b763b6", "filename": "src/tools/clippy/tests/ui/get_first.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_first.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,22 @@\n+error: accessing first element with `x.get(0)`\n+  --> $DIR/get_first.rs:19:13\n+   |\n+LL |     let _ = x.get(0); // Use x.first()\n+   |             ^^^^^^^^ help: try: `x.first()`\n+   |\n+   = note: `-D clippy::get-first` implied by `-D warnings`\n+\n+error: accessing first element with `y.get(0)`\n+  --> $DIR/get_first.rs:24:13\n+   |\n+LL |     let _ = y.get(0); // Use y.first()\n+   |             ^^^^^^^^ help: try: `y.first()`\n+\n+error: accessing first element with `z.get(0)`\n+  --> $DIR/get_first.rs:29:13\n+   |\n+LL |     let _ = z.get(0); // Use z.first()\n+   |             ^^^^^^^^ help: try: `z.first()`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "1e90b37687a152bf2d0373ef8b2d525fc3697465", "filename": "src/tools/clippy/tests/ui/get_last_with_len.fixed", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_last_with_len.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_last_with_len.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_last_with_len.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,10 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::get_last_with_len)]\n+#![allow(unused)]\n+\n+use std::collections::VecDeque;\n \n fn dont_use_last() {\n     let x = vec![2, 3, 5];\n-    let _ = x.last(); // ~ERROR Use x.last()\n+    let _ = x.last();\n }\n \n fn indexing_two_from_end() {\n@@ -23,9 +26,24 @@ fn use_last_with_different_vec_length() {\n     let _ = x.get(y.len() - 1);\n }\n \n+struct S {\n+    field: Vec<usize>,\n+}\n+\n+fn in_field(s: &S) {\n+    let _ = s.field.last();\n+}\n+\n fn main() {\n-    dont_use_last();\n-    indexing_two_from_end();\n-    index_into_last();\n-    use_last_with_different_vec_length();\n+    let slice = &[1, 2, 3];\n+    let _ = slice.last();\n+\n+    let array = [4, 5, 6];\n+    let _ = array.last();\n+\n+    let deq = VecDeque::from([7, 8, 9]);\n+    let _ = deq.back();\n+\n+    let nested = [[1]];\n+    let _ = nested[0].last();\n }"}, {"sha": "d63a731bd524681b297b63bd7146d0f5a3c73af9", "filename": "src/tools/clippy/tests/ui/get_last_with_len.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_last_with_len.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,10 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::get_last_with_len)]\n+#![allow(unused)]\n+\n+use std::collections::VecDeque;\n \n fn dont_use_last() {\n     let x = vec![2, 3, 5];\n-    let _ = x.get(x.len() - 1); // ~ERROR Use x.last()\n+    let _ = x.get(x.len() - 1);\n }\n \n fn indexing_two_from_end() {\n@@ -23,9 +26,24 @@ fn use_last_with_different_vec_length() {\n     let _ = x.get(y.len() - 1);\n }\n \n+struct S {\n+    field: Vec<usize>,\n+}\n+\n+fn in_field(s: &S) {\n+    let _ = s.field.get(s.field.len() - 1);\n+}\n+\n fn main() {\n-    dont_use_last();\n-    indexing_two_from_end();\n-    index_into_last();\n-    use_last_with_different_vec_length();\n+    let slice = &[1, 2, 3];\n+    let _ = slice.get(slice.len() - 1);\n+\n+    let array = [4, 5, 6];\n+    let _ = array.get(array.len() - 1);\n+\n+    let deq = VecDeque::from([7, 8, 9]);\n+    let _ = deq.get(deq.len() - 1);\n+\n+    let nested = [[1]];\n+    let _ = nested[0].get(nested[0].len() - 1);\n }"}, {"sha": "ac8dd6c2e41a80fc7a9ba5b5444035e4f9f76414", "filename": "src/tools/clippy/tests/ui/get_last_with_len.stderr", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_last_with_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_last_with_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_last_with_len.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,10 +1,40 @@\n error: accessing last element with `x.get(x.len() - 1)`\n-  --> $DIR/get_last_with_len.rs:7:13\n+  --> $DIR/get_last_with_len.rs:10:13\n    |\n-LL |     let _ = x.get(x.len() - 1); // ~ERROR Use x.last()\n+LL |     let _ = x.get(x.len() - 1);\n    |             ^^^^^^^^^^^^^^^^^^ help: try: `x.last()`\n    |\n    = note: `-D clippy::get-last-with-len` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: accessing last element with `s.field.get(s.field.len() - 1)`\n+  --> $DIR/get_last_with_len.rs:34:13\n+   |\n+LL |     let _ = s.field.get(s.field.len() - 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `s.field.last()`\n+\n+error: accessing last element with `slice.get(slice.len() - 1)`\n+  --> $DIR/get_last_with_len.rs:39:13\n+   |\n+LL |     let _ = slice.get(slice.len() - 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `slice.last()`\n+\n+error: accessing last element with `array.get(array.len() - 1)`\n+  --> $DIR/get_last_with_len.rs:42:13\n+   |\n+LL |     let _ = array.get(array.len() - 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `array.last()`\n+\n+error: accessing last element with `deq.get(deq.len() - 1)`\n+  --> $DIR/get_last_with_len.rs:45:13\n+   |\n+LL |     let _ = deq.get(deq.len() - 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `deq.back()`\n+\n+error: accessing last element with `nested[0].get(nested[0].len() - 1)`\n+  --> $DIR/get_last_with_len.rs:48:13\n+   |\n+LL |     let _ = nested[0].get(nested[0].len() - 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `nested[0].last()`\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "5827fc7d76e60b8e71303caf3cbac793d1d585de", "filename": "src/tools/clippy/tests/ui/get_unwrap.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n+#![allow(unused_mut, clippy::from_iter_instead_of_collect, clippy::get_first)]\n #![warn(clippy::unwrap_used)]\n #![deny(clippy::get_unwrap)]\n "}, {"sha": "a2a323c14fb7c827f6a439e8495d17708b3fa3a3", "filename": "src/tools/clippy/tests/ui/get_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n+#![allow(unused_mut, clippy::from_iter_instead_of_collect, clippy::get_first)]\n #![warn(clippy::unwrap_used)]\n #![deny(clippy::get_unwrap)]\n "}, {"sha": "5f9cebe212abd89844733156582e3c64771c0524", "filename": "src/tools/clippy/tests/ui/identity_op.fixed", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,119 @@\n+// run-rustfix\n+\n+#![warn(clippy::identity_op)]\n+#![allow(\n+    clippy::eq_op,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::op_ref,\n+    clippy::double_parens,\n+    unused\n+)]\n+\n+use std::fmt::Write as _;\n+\n+const ONE: i64 = 1;\n+const NEG_ONE: i64 = -1;\n+const ZERO: i64 = 0;\n+\n+struct A(String);\n+\n+impl std::ops::Shl<i32> for A {\n+    type Output = A;\n+    fn shl(mut self, other: i32) -> Self {\n+        let _ = write!(self.0, \"{}\", other);\n+        self\n+    }\n+}\n+\n+struct Length(u8);\n+struct Meter;\n+\n+impl core::ops::Mul<Meter> for u8 {\n+    type Output = Length;\n+    fn mul(self, _: Meter) -> Length {\n+        Length(self)\n+    }\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    let x = 0;\n+\n+    x;\n+    x;\n+    x + 1;\n+    x;\n+    1 + x;\n+    x - ZERO; //no error, as we skip lookups (for now)\n+    x;\n+    ((ZERO)) | x; //no error, as we skip lookups (for now)\n+\n+    x;\n+    x;\n+    x / ONE; //no error, as we skip lookups (for now)\n+\n+    x / 2; //no false positive\n+\n+    x & NEG_ONE; //no error, as we skip lookups (for now)\n+    x;\n+\n+    let u: u8 = 0;\n+    u;\n+\n+    1 << 0; // no error, this case is allowed, see issue 3430\n+    42;\n+    1;\n+    42;\n+    &x;\n+    x;\n+\n+    let mut a = A(\"\".into());\n+    let b = a << 0; // no error: non-integer\n+\n+    1 * Meter; // no error: non-integer\n+\n+    2;\n+    -2;\n+    2 + x;\n+    -2 + x;\n+    x + 1;\n+    (x + 1) % 3; // no error\n+    4 % 3; // no error\n+    4 % -3; // no error\n+\n+    // See #8724\n+    let a = 0;\n+    let b = true;\n+    (if b { 1 } else { 2 });\n+    (if b { 1 } else { 2 }) + if b { 3 } else { 4 };\n+    (match a { 0 => 10, _ => 20 });\n+    (match a { 0 => 10, _ => 20 }) + match a { 0 => 30, _ => 40 };\n+    (if b { 1 } else { 2 }) + match a { 0 => 30, _ => 40 };\n+    (match a { 0 => 10, _ => 20 }) + if b { 3 } else { 4 };\n+    (if b { 1 } else { 2 });\n+\n+    ({ a }) + 3;\n+    ({ a } * 2);\n+    (loop { let mut c = 0; if c == 10 { break c; } c += 1; }) + { a * 2 };\n+\n+    fn f(_: i32) {\n+        todo!();\n+    }\n+    f(a + { 8 * 5 });\n+    f(if b { 1 } else { 2 } + 3);\n+    const _: i32 = { 2 * 4 } + 3;\n+    const _: i32 = { 1 + 2 * 3 } + 3;\n+\n+    a as usize;\n+    let _ = a as usize;\n+    ({ a } as usize);\n+\n+    2 * { a };\n+    (({ a } + 4));\n+    1;\n+}\n+\n+pub fn decide(a: bool, b: bool) -> u32 {\n+    (if a { 1 } else { 2 }) + if b { 3 } else { 5 }\n+}"}, {"sha": "ca799c9cfac0f8a4c7e82c24d2e605d770fec561", "filename": "src/tools/clippy/tests/ui/identity_op.rs", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,3 +1,15 @@\n+// run-rustfix\n+\n+#![warn(clippy::identity_op)]\n+#![allow(\n+    clippy::eq_op,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::op_ref,\n+    clippy::double_parens,\n+    unused\n+)]\n+\n use std::fmt::Write as _;\n \n const ONE: i64 = 1;\n@@ -24,14 +36,6 @@ impl core::ops::Mul<Meter> for u8 {\n     }\n }\n \n-#[allow(\n-    clippy::eq_op,\n-    clippy::no_effect,\n-    clippy::unnecessary_operation,\n-    clippy::op_ref,\n-    clippy::double_parens\n-)]\n-#[warn(clippy::identity_op)]\n #[rustfmt::skip]\n fn main() {\n     let x = 0;\n@@ -82,29 +86,34 @@ fn main() {\n     let a = 0;\n     let b = true;\n     0 + if b { 1 } else { 2 };\n-    0 + if b { 1 } else { 2 } + if b { 3 } else { 4 }; // no error\n+    0 + if b { 1 } else { 2 } + if b { 3 } else { 4 };\n     0 + match a { 0 => 10, _ => 20 };\n-    0 + match a { 0 => 10, _ => 20 } + match a { 0 => 30, _ => 40 }; // no error\n-    0 + if b { 1 } else { 2 } + match a { 0 => 30, _ => 40 }; // no error\n-    0 + match a { 0 => 10, _ => 20 } + if b { 3 } else { 4 }; // no error\n-    \n-    0 + if b { 0 + 1 } else { 2 };\n-    0 + match a { 0 =>  0 + 10, _ => 20 };\n-    0 + if b { 0 + 1 } else { 2 } + match a { 0 => 0 + 30, _ => 40 };\n-\n-    let _ = 0 + if 0 + 1 > 0 { 1 } else { 2 } + if 0 + 1 > 0 { 3 } else { 4 };\n-    let _ = 0 + match 0 + 1 { 0 => 10, _ => 20 } + match 0 + 1  { 0 => 30, _ => 40 };\n-\n-    0 + if b { 1 } else { 2 } + if b { 3 } else { 4 } + 0;\n-    \n-    0 + { a } + 3; // no error\n-    0 + loop { let mut c = 0; if c == 10 { break c; } c += 1; } + { a * 2 }; // no error\n-    \n+    0 + match a { 0 => 10, _ => 20 } + match a { 0 => 30, _ => 40 };\n+    0 + if b { 1 } else { 2 } + match a { 0 => 30, _ => 40 };\n+    0 + match a { 0 => 10, _ => 20 } + if b { 3 } else { 4 };\n+    (if b { 1 } else { 2 }) + 0;\n+\n+    0 + { a } + 3;\n+    0 + { a } * 2;\n+    0 + loop { let mut c = 0; if c == 10 { break c; } c += 1; } + { a * 2 };\n+\n     fn f(_: i32) {\n         todo!();\n     }\n     f(1 * a + { 8 * 5 });\n-    f(0 + if b { 1 } else { 2 } + 3); // no error\n+    f(0 + if b { 1 } else { 2 } + 3);\n     const _: i32 = { 2 * 4 } + 0 + 3;\n-    const _: i32 = 0 + { 1 + 2 * 3 } + 3; // no error\n+    const _: i32 = 0 + { 1 + 2 * 3 } + 3;\n+\n+    0 + a as usize;\n+    let _ = 0 + a as usize;\n+    0 + { a } as usize;\n+\n+    2 * (0 + { a });\n+    1 * ({ a } + 4);\n+    1 * 1;\n+}\n+\n+pub fn decide(a: bool, b: bool) -> u32 {\n+    0 + if a { 1 } else { 2 } + if b { 3 } else { 5 }\n }"}, {"sha": "1a104a20b841c1688e9412fffaf261867ef26905", "filename": "src/tools/clippy/tests/ui/identity_op.stderr", "status": "modified", "additions": 148, "deletions": 112, "changes": 260, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fidentity_op.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,202 +1,238 @@\n-error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:39:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:43:5\n    |\n LL |     x + 0;\n-   |     ^^^^^\n+   |     ^^^^^ help: consider reducing it to: `x`\n    |\n    = note: `-D clippy::identity-op` implied by `-D warnings`\n \n-error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:40:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:44:5\n    |\n LL |     x + (1 - 1);\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ help: consider reducing it to: `x`\n \n-error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:42:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:46:5\n    |\n LL |     0 + x;\n-   |     ^^^^^\n+   |     ^^^^^ help: consider reducing it to: `x`\n \n-error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:45:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:49:5\n    |\n LL |     x | (0);\n-   |     ^^^^^^^\n+   |     ^^^^^^^ help: consider reducing it to: `x`\n \n-error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:48:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:52:5\n    |\n LL |     x * 1;\n-   |     ^^^^^\n+   |     ^^^^^ help: consider reducing it to: `x`\n \n-error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:49:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:53:5\n    |\n LL |     1 * x;\n-   |     ^^^^^\n+   |     ^^^^^ help: consider reducing it to: `x`\n \n-error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:55:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:59:5\n    |\n LL |     -1 & x;\n-   |     ^^^^^^\n+   |     ^^^^^^ help: consider reducing it to: `x`\n \n-error: the operation is ineffective. Consider reducing it to `u`\n-  --> $DIR/identity_op.rs:58:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:62:5\n    |\n LL |     u & 255;\n-   |     ^^^^^^^\n+   |     ^^^^^^^ help: consider reducing it to: `u`\n \n-error: the operation is ineffective. Consider reducing it to `42`\n-  --> $DIR/identity_op.rs:61:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:65:5\n    |\n LL |     42 << 0;\n-   |     ^^^^^^^\n+   |     ^^^^^^^ help: consider reducing it to: `42`\n \n-error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:62:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:66:5\n    |\n LL |     1 >> 0;\n-   |     ^^^^^^\n+   |     ^^^^^^ help: consider reducing it to: `1`\n \n-error: the operation is ineffective. Consider reducing it to `42`\n-  --> $DIR/identity_op.rs:63:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:67:5\n    |\n LL |     42 >> 0;\n-   |     ^^^^^^^\n+   |     ^^^^^^^ help: consider reducing it to: `42`\n \n-error: the operation is ineffective. Consider reducing it to `&x`\n-  --> $DIR/identity_op.rs:64:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:68:5\n    |\n LL |     &x >> 0;\n-   |     ^^^^^^^\n+   |     ^^^^^^^ help: consider reducing it to: `&x`\n \n-error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:65:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:69:5\n    |\n LL |     x >> &0;\n-   |     ^^^^^^^\n+   |     ^^^^^^^ help: consider reducing it to: `x`\n \n-error: the operation is ineffective. Consider reducing it to `2`\n-  --> $DIR/identity_op.rs:72:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:76:5\n    |\n LL |     2 % 3;\n-   |     ^^^^^\n+   |     ^^^^^ help: consider reducing it to: `2`\n \n-error: the operation is ineffective. Consider reducing it to `-2`\n-  --> $DIR/identity_op.rs:73:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:77:5\n    |\n LL |     -2 % 3;\n-   |     ^^^^^^\n+   |     ^^^^^^ help: consider reducing it to: `-2`\n \n-error: the operation is ineffective. Consider reducing it to `2`\n-  --> $DIR/identity_op.rs:74:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:78:5\n    |\n LL |     2 % -3 + x;\n-   |     ^^^^^^\n+   |     ^^^^^^ help: consider reducing it to: `2`\n \n-error: the operation is ineffective. Consider reducing it to `-2`\n-  --> $DIR/identity_op.rs:75:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:79:5\n    |\n LL |     -2 % -3 + x;\n-   |     ^^^^^^^\n+   |     ^^^^^^^ help: consider reducing it to: `-2`\n \n-error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:76:9\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:80:9\n    |\n LL |     x + 1 % 3;\n-   |         ^^^^^\n+   |         ^^^^^ help: consider reducing it to: `1`\n \n-error: the operation is ineffective. Consider reducing it to `if b { 1 } else { 2 }`\n-  --> $DIR/identity_op.rs:84:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:88:5\n    |\n LL |     0 + if b { 1 } else { 2 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `(if b { 1 } else { 2 })`\n \n-error: the operation is ineffective. Consider reducing it to `match a { 0 => 10, _ => 20 }`\n-  --> $DIR/identity_op.rs:86:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:89:5\n+   |\n+LL |     0 + if b { 1 } else { 2 } + if b { 3 } else { 4 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `(if b { 1 } else { 2 })`\n+\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:90:5\n    |\n LL |     0 + match a { 0 => 10, _ => 20 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `(match a { 0 => 10, _ => 20 })`\n \n-error: the operation is ineffective. Consider reducing it to `if b { 0 + 1 } else { 2 }`\n+error: this operation has no effect\n   --> $DIR/identity_op.rs:91:5\n    |\n-LL |     0 + if b { 0 + 1 } else { 2 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     0 + match a { 0 => 10, _ => 20 } + match a { 0 => 30, _ => 40 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `(match a { 0 => 10, _ => 20 })`\n \n-error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:91:16\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:92:5\n    |\n-LL |     0 + if b { 0 + 1 } else { 2 };\n-   |                ^^^^^\n+LL |     0 + if b { 1 } else { 2 } + match a { 0 => 30, _ => 40 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `(if b { 1 } else { 2 })`\n \n-error: the operation is ineffective. Consider reducing it to `match a { 0 =>  0 + 10, _ => 20 }`\n-  --> $DIR/identity_op.rs:92:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:93:5\n+   |\n+LL |     0 + match a { 0 => 10, _ => 20 } + if b { 3 } else { 4 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `(match a { 0 => 10, _ => 20 })`\n+\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:94:5\n+   |\n+LL |     (if b { 1 } else { 2 }) + 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `(if b { 1 } else { 2 })`\n+\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:96:5\n    |\n-LL |     0 + match a { 0 =>  0 + 10, _ => 20 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     0 + { a } + 3;\n+   |     ^^^^^^^^^ help: consider reducing it to: `({ a })`\n \n-error: the operation is ineffective. Consider reducing it to `10`\n-  --> $DIR/identity_op.rs:92:25\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:97:5\n    |\n-LL |     0 + match a { 0 =>  0 + 10, _ => 20 };\n-   |                         ^^^^^^\n+LL |     0 + { a } * 2;\n+   |     ^^^^^^^^^^^^^ help: consider reducing it to: `({ a } * 2)`\n \n-error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:93:16\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:98:5\n    |\n-LL |     0 + if b { 0 + 1 } else { 2 } + match a { 0 => 0 + 30, _ => 40 };\n-   |                ^^^^^\n+LL |     0 + loop { let mut c = 0; if c == 10 { break c; } c += 1; } + { a * 2 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `(loop { let mut c = 0; if c == 10 { break c; } c += 1; })`\n \n-error: the operation is ineffective. Consider reducing it to `30`\n-  --> $DIR/identity_op.rs:93:52\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:103:7\n    |\n-LL |     0 + if b { 0 + 1 } else { 2 } + match a { 0 => 0 + 30, _ => 40 };\n-   |                                                    ^^^^^^\n+LL |     f(1 * a + { 8 * 5 });\n+   |       ^^^^^ help: consider reducing it to: `a`\n \n-error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:95:20\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:104:7\n    |\n-LL |     let _ = 0 + if 0 + 1 > 0 { 1 } else { 2 } + if 0 + 1 > 0 { 3 } else { 4 };\n-   |                    ^^^^^\n+LL |     f(0 + if b { 1 } else { 2 } + 3);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `if b { 1 } else { 2 }`\n \n-error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:95:52\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:105:20\n    |\n-LL |     let _ = 0 + if 0 + 1 > 0 { 1 } else { 2 } + if 0 + 1 > 0 { 3 } else { 4 };\n-   |                                                    ^^^^^\n+LL |     const _: i32 = { 2 * 4 } + 0 + 3;\n+   |                    ^^^^^^^^^^^^^ help: consider reducing it to: `{ 2 * 4 }`\n \n-error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:96:23\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:106:20\n    |\n-LL |     let _ = 0 + match 0 + 1 { 0 => 10, _ => 20 } + match 0 + 1  { 0 => 30, _ => 40 };\n-   |                       ^^^^^\n+LL |     const _: i32 = 0 + { 1 + 2 * 3 } + 3;\n+   |                    ^^^^^^^^^^^^^^^^^ help: consider reducing it to: `{ 1 + 2 * 3 }`\n \n-error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:96:58\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:108:5\n    |\n-LL |     let _ = 0 + match 0 + 1 { 0 => 10, _ => 20 } + match 0 + 1  { 0 => 30, _ => 40 };\n-   |                                                          ^^^^^\n+LL |     0 + a as usize;\n+   |     ^^^^^^^^^^^^^^ help: consider reducing it to: `a as usize`\n \n-error: the operation is ineffective. Consider reducing it to `0 + if b { 1 } else { 2 } + if b { 3 } else { 4 }`\n-  --> $DIR/identity_op.rs:98:5\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:109:13\n    |\n-LL |     0 + if b { 1 } else { 2 } + if b { 3 } else { 4 } + 0;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = 0 + a as usize;\n+   |             ^^^^^^^^^^^^^^ help: consider reducing it to: `a as usize`\n \n-error: the operation is ineffective. Consider reducing it to `a`\n-  --> $DIR/identity_op.rs:106:7\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:110:5\n    |\n-LL |     f(1 * a + { 8 * 5 });\n-   |       ^^^^^\n+LL |     0 + { a } as usize;\n+   |     ^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `({ a } as usize)`\n \n-error: the operation is ineffective. Consider reducing it to `{ 2 * 4 }`\n-  --> $DIR/identity_op.rs:108:20\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:112:9\n    |\n-LL |     const _: i32 = { 2 * 4 } + 0 + 3;\n-   |                    ^^^^^^^^^^^^^\n+LL |     2 * (0 + { a });\n+   |         ^^^^^^^^^^^ help: consider reducing it to: `{ a }`\n+\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:113:5\n+   |\n+LL |     1 * ({ a } + 4);\n+   |     ^^^^^^^^^^^^^^^ help: consider reducing it to: `(({ a } + 4))`\n+\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:114:5\n+   |\n+LL |     1 * 1;\n+   |     ^^^^^ help: consider reducing it to: `1`\n+\n+error: this operation has no effect\n+  --> $DIR/identity_op.rs:118:5\n+   |\n+LL |     0 + if a { 1 } else { 2 } + if b { 3 } else { 5 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider reducing it to: `(if a { 1 } else { 2 })`\n \n-error: aborting due to 33 previous errors\n+error: aborting due to 39 previous errors\n "}, {"sha": "33770fc2a2cf9cca67a956157de5fc83599d93d2", "filename": "src/tools/clippy/tests/ui/implicit_clone.fixed", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,118 @@\n+// run-rustfix\n+#![warn(clippy::implicit_clone)]\n+#![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n+use std::borrow::Borrow;\n+use std::ffi::{OsStr, OsString};\n+use std::path::PathBuf;\n+\n+fn return_owned_from_slice(slice: &[u32]) -> Vec<u32> {\n+    slice.to_owned()\n+}\n+\n+pub fn own_same<T>(v: T) -> T\n+where\n+    T: ToOwned<Owned = T>,\n+{\n+    v.to_owned()\n+}\n+\n+pub fn own_same_from_ref<T>(v: &T) -> T\n+where\n+    T: ToOwned<Owned = T>,\n+{\n+    v.to_owned()\n+}\n+\n+pub fn own_different<T, U>(v: T) -> U\n+where\n+    T: ToOwned<Owned = U>,\n+{\n+    v.to_owned()\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Kitten;\n+impl Kitten {\n+    // badly named method\n+    fn to_vec(self) -> Kitten {\n+        Kitten {}\n+    }\n+}\n+impl Borrow<BorrowedKitten> for Kitten {\n+    fn borrow(&self) -> &BorrowedKitten {\n+        static VALUE: BorrowedKitten = BorrowedKitten {};\n+        &VALUE\n+    }\n+}\n+\n+struct BorrowedKitten;\n+impl ToOwned for BorrowedKitten {\n+    type Owned = Kitten;\n+    fn to_owned(&self) -> Kitten {\n+        Kitten {}\n+    }\n+}\n+\n+mod weird {\n+    #[allow(clippy::ptr_arg)]\n+    pub fn to_vec(v: &Vec<u32>) -> Vec<u32> {\n+        v.clone()\n+    }\n+}\n+\n+fn main() {\n+    let vec = vec![5];\n+    let _ = return_owned_from_slice(&vec);\n+    let _ = vec.clone();\n+    let _ = vec.clone();\n+\n+    let vec_ref = &vec;\n+    let _ = return_owned_from_slice(vec_ref);\n+    let _ = vec_ref.clone();\n+    let _ = vec_ref.clone();\n+\n+    // we expect no lint for this\n+    let _ = weird::to_vec(&vec);\n+\n+    // we expect no lints for this\n+    let slice: &[u32] = &[1, 2, 3, 4, 5];\n+    let _ = return_owned_from_slice(slice);\n+    let _ = slice.to_owned();\n+    let _ = slice.to_vec();\n+\n+    let str = \"hello world\".to_string();\n+    let _ = str.clone();\n+\n+    // testing w/ an arbitrary type\n+    let kitten = Kitten {};\n+    let _ = kitten.clone();\n+    let _ = own_same_from_ref(&kitten);\n+    // this shouln't lint\n+    let _ = kitten.to_vec();\n+\n+    // we expect no lints for this\n+    let borrowed = BorrowedKitten {};\n+    let _ = borrowed.to_owned();\n+\n+    let pathbuf = PathBuf::new();\n+    let _ = pathbuf.clone();\n+    let _ = pathbuf.clone();\n+\n+    let os_string = OsString::from(\"foo\");\n+    let _ = os_string.clone();\n+    let _ = os_string.clone();\n+\n+    // we expect no lints for this\n+    let os_str = OsStr::new(\"foo\");\n+    let _ = os_str.to_owned();\n+    let _ = os_str.to_os_string();\n+\n+    // issue #8227\n+    let pathbuf_ref = &pathbuf;\n+    let pathbuf_ref = &pathbuf_ref;\n+    let _ = pathbuf_ref.to_owned(); // Don't lint. Returns `&PathBuf`\n+    let _ = (*pathbuf_ref).clone();\n+    let pathbuf_ref = &pathbuf_ref;\n+    let _ = pathbuf_ref.to_owned(); // Don't lint. Returns `&&PathBuf`\n+    let _ = (**pathbuf_ref).clone();\n+}"}, {"sha": "fc896525bd2709ba82b41b56073bf8418649488e", "filename": "src/tools/clippy/tests/ui/implicit_clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![warn(clippy::implicit_clone)]\n-#![allow(clippy::redundant_clone)]\n+#![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n use std::borrow::Borrow;\n use std::ffi::{OsStr, OsString};\n use std::path::PathBuf;"}, {"sha": "92c1aa58affb2411eeeafbaa816568b23440c7ec", "filename": "src/tools/clippy/tests/ui/implicit_clone.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fimplicit_clone.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,73 +1,73 @@\n error: implicitly cloning a `Vec` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:65:13\n+  --> $DIR/implicit_clone.rs:66:13\n    |\n LL |     let _ = vec.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using: `vec.clone()`\n    |\n    = note: `-D clippy::implicit-clone` implied by `-D warnings`\n \n error: implicitly cloning a `Vec` by calling `to_vec` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:66:13\n+  --> $DIR/implicit_clone.rs:67:13\n    |\n LL |     let _ = vec.to_vec();\n    |             ^^^^^^^^^^^^ help: consider using: `vec.clone()`\n \n error: implicitly cloning a `Vec` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:70:13\n+  --> $DIR/implicit_clone.rs:71:13\n    |\n LL |     let _ = vec_ref.to_owned();\n    |             ^^^^^^^^^^^^^^^^^^ help: consider using: `vec_ref.clone()`\n \n error: implicitly cloning a `Vec` by calling `to_vec` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:71:13\n+  --> $DIR/implicit_clone.rs:72:13\n    |\n LL |     let _ = vec_ref.to_vec();\n    |             ^^^^^^^^^^^^^^^^ help: consider using: `vec_ref.clone()`\n \n error: implicitly cloning a `String` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:83:13\n+  --> $DIR/implicit_clone.rs:84:13\n    |\n LL |     let _ = str.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using: `str.clone()`\n \n error: implicitly cloning a `Kitten` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:87:13\n+  --> $DIR/implicit_clone.rs:88:13\n    |\n LL |     let _ = kitten.to_owned();\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `kitten.clone()`\n \n error: implicitly cloning a `PathBuf` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:97:13\n+  --> $DIR/implicit_clone.rs:98:13\n    |\n LL |     let _ = pathbuf.to_owned();\n    |             ^^^^^^^^^^^^^^^^^^ help: consider using: `pathbuf.clone()`\n \n error: implicitly cloning a `PathBuf` by calling `to_path_buf` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:98:13\n+  --> $DIR/implicit_clone.rs:99:13\n    |\n LL |     let _ = pathbuf.to_path_buf();\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `pathbuf.clone()`\n \n error: implicitly cloning a `OsString` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:101:13\n+  --> $DIR/implicit_clone.rs:102:13\n    |\n LL |     let _ = os_string.to_owned();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `os_string.clone()`\n \n error: implicitly cloning a `OsString` by calling `to_os_string` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:102:13\n+  --> $DIR/implicit_clone.rs:103:13\n    |\n LL |     let _ = os_string.to_os_string();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `os_string.clone()`\n \n error: implicitly cloning a `PathBuf` by calling `to_path_buf` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:113:13\n+  --> $DIR/implicit_clone.rs:114:13\n    |\n LL |     let _ = pathbuf_ref.to_path_buf();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(*pathbuf_ref).clone()`\n \n error: implicitly cloning a `PathBuf` by calling `to_path_buf` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:116:13\n+  --> $DIR/implicit_clone.rs:117:13\n    |\n LL |     let _ = pathbuf_ref.to_path_buf();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(**pathbuf_ref).clone()`"}, {"sha": "942e99fa8787b0bae936f6997d0b5eec2176f965", "filename": "src/tools/clippy/tests/ui/issue_2356.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_2356.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_2356.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_2356.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+#![deny(clippy::while_let_on_iterator)]\n+#![allow(unused_mut)]\n+\n+use std::iter::Iterator;\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn foo1<I: Iterator<Item = usize>>(mut it: I) {\n+        while let Some(_) = it.next() {\n+            println!(\"{:?}\", it.size_hint());\n+        }\n+    }\n+\n+    fn foo2<I: Iterator<Item = usize>>(mut it: I) {\n+        for e in it {\n+            println!(\"{:?}\", e);\n+        }\n+    }\n+}\n+\n+fn main() {\n+    Foo::foo1(vec![].into_iter());\n+    Foo::foo2(vec![].into_iter());\n+}"}, {"sha": "b000234ea59662dac9c06ad0e05d4d2a2562824b", "filename": "src/tools/clippy/tests/ui/issue_2356.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_2356.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n #![deny(clippy::while_let_on_iterator)]\n+#![allow(unused_mut)]\n \n use std::iter::Iterator;\n "}, {"sha": "4e3ff7522e0bb7c346bcf4b2086792c0dfce4c2a", "filename": "src/tools/clippy/tests/ui/issue_2356.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue_2356.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,11 +1,11 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/issue_2356.rs:15:9\n+  --> $DIR/issue_2356.rs:17:9\n    |\n LL |         while let Some(e) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for e in it`\n    |\n note: the lint level is defined here\n-  --> $DIR/issue_2356.rs:1:9\n+  --> $DIR/issue_2356.rs:2:9\n    |\n LL | #![deny(clippy::while_let_on_iterator)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f612d26aaabccd26bb41e0c712de7ddb8327da8d", "filename": "src/tools/clippy/tests/ui/iter_next_slice.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_next_slice.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_next_slice.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_next_slice.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -6,17 +6,17 @@ fn main() {\n     let s = [1, 2, 3];\n     let v = vec![1, 2, 3];\n \n-    let _ = s.get(0);\n-    // Should be replaced by s.get(0)\n+    let _ = s.first();\n+    // Should be replaced by s.first()\n \n     let _ = s.get(2);\n     // Should be replaced by s.get(2)\n \n     let _ = v.get(5);\n     // Should be replaced by v.get(5)\n \n-    let _ = v.get(0);\n-    // Should be replaced by v.get(0)\n+    let _ = v.first();\n+    // Should be replaced by v.first()\n \n     let o = Some(5);\n     o.iter().next();"}, {"sha": "5195f1c86675fcde359783afbeb8468e5b59f17a", "filename": "src/tools/clippy/tests/ui/iter_next_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_next_slice.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let v = vec![1, 2, 3];\n \n     let _ = s.iter().next();\n-    // Should be replaced by s.get(0)\n+    // Should be replaced by s.first()\n \n     let _ = s[2..].iter().next();\n     // Should be replaced by s.get(2)\n@@ -16,7 +16,7 @@ fn main() {\n     // Should be replaced by v.get(5)\n \n     let _ = v.iter().next();\n-    // Should be replaced by v.get(0)\n+    // Should be replaced by v.first()\n \n     let o = Some(5);\n     o.iter().next();"}, {"sha": "d8b89061ff8954ebb4862cad8b0b5e443ab64949", "filename": "src/tools/clippy/tests/ui/iter_next_slice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_next_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_next_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_next_slice.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -2,7 +2,7 @@ error: using `.iter().next()` on an array\n   --> $DIR/iter_next_slice.rs:9:13\n    |\n LL |     let _ = s.iter().next();\n-   |             ^^^^^^^^^^^^^^^ help: try calling: `s.get(0)`\n+   |             ^^^^^^^^^^^^^^^ help: try calling: `s.first()`\n    |\n    = note: `-D clippy::iter-next-slice` implied by `-D warnings`\n \n@@ -22,7 +22,7 @@ error: using `.iter().next()` on an array\n   --> $DIR/iter_next_slice.rs:18:13\n    |\n LL |     let _ = v.iter().next();\n-   |             ^^^^^^^^^^^^^^^ help: try calling: `v.get(0)`\n+   |             ^^^^^^^^^^^^^^^ help: try calling: `v.first()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "23152a13322e82ab3b73d7bb4481db22cc1f9668", "filename": "src/tools/clippy/tests/ui/large_enum_variant.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -98,6 +98,38 @@ struct Struct2 {\n     a: [i32; 8000],\n }\n \n+#[derive(Copy, Clone)]\n+enum CopyableLargeEnum {\n+    A(bool),\n+    B([u128; 4000]),\n+}\n+\n+enum ManuallyCopyLargeEnum {\n+    A(bool),\n+    B([u128; 4000]),\n+}\n+\n+impl Clone for ManuallyCopyLargeEnum {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl Copy for ManuallyCopyLargeEnum {}\n+\n+enum SomeGenericPossiblyCopyEnum<T> {\n+    A(bool, std::marker::PhantomData<T>),\n+    B([u64; 4000]),\n+}\n+\n+impl<T: Copy> Clone for SomeGenericPossiblyCopyEnum<T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl<T: Copy> Copy for SomeGenericPossiblyCopyEnum<T> {}\n+\n fn main() {\n     large_enum_variant!();\n }"}, {"sha": "0248327262da0f63852ecfa684f6b38c058670f7", "filename": "src/tools/clippy/tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -127,5 +127,71 @@ help: consider boxing the large fields to reduce the total size of the enum\n LL |     B(Box<Struct2>),\n    |       ~~~~~~~~~~~~\n \n-error: aborting due to 8 previous errors\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:104:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^ this variant is 64000 bytes\n+   |\n+note: and the second-largest variant is 1 bytes:\n+  --> $DIR/large_enum_variant.rs:103:5\n+   |\n+LL |     A(bool),\n+   |     ^^^^^^^\n+note: boxing a variant would require the type no longer be `Copy`\n+  --> $DIR/large_enum_variant.rs:102:6\n+   |\n+LL | enum CopyableLargeEnum {\n+   |      ^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:104:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:109:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^ this variant is 64000 bytes\n+   |\n+note: and the second-largest variant is 1 bytes:\n+  --> $DIR/large_enum_variant.rs:108:5\n+   |\n+LL |     A(bool),\n+   |     ^^^^^^^\n+note: boxing a variant would require the type no longer be `Copy`\n+  --> $DIR/large_enum_variant.rs:107:6\n+   |\n+LL | enum ManuallyCopyLargeEnum {\n+   |      ^^^^^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:109:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:122:5\n+   |\n+LL |     B([u64; 4000]),\n+   |     ^^^^^^^^^^^^^^ this variant is 32000 bytes\n+   |\n+note: and the second-largest variant is 1 bytes:\n+  --> $DIR/large_enum_variant.rs:121:5\n+   |\n+LL |     A(bool, std::marker::PhantomData<T>),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: boxing a variant would require the type no longer be `Copy`\n+  --> $DIR/large_enum_variant.rs:120:6\n+   |\n+LL | enum SomeGenericPossiblyCopyEnum<T> {\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:122:5\n+   |\n+LL |     B([u64; 4000]),\n+   |     ^^^^^^^^^^^^^^\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "928e5bd509c3fbf6c358883647b747beba2abdc1", "filename": "src/tools/clippy/tests/ui/map_flatten_fixable.fixed", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -28,4 +28,41 @@ fn main() {\n \n     // mapping to Result on Result\n     let _: Result<_, &str> = (Ok(Ok(1))).and_then(|x| x);\n+\n+    issue8734();\n+    issue8878();\n+}\n+\n+fn issue8734() {\n+    //     let _ = [0u8, 1, 2, 3]\n+    //         .into_iter()\n+    //         .map(|n| match n {\n+    //             1 => [n\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)],\n+    //             n => [n],\n+    //         })\n+    //         .flatten();\n+}\n+\n+#[allow(clippy::bind_instead_of_map)] // map + flatten will be suggested to `and_then`, but afterwards `map` is suggested again\n+#[rustfmt::skip] // whitespace is important for this one\n+fn issue8878() {\n+    std::collections::HashMap::<u32, u32>::new()\n+        .get(&0)\n+        .and_then(|_| {\n+// we need some newlines\n+// so that the span is big enough\n+// we need some newlines\n+// so that the span is big enough\n+// for a splitted output of the diagnostic\n+            Some(\"\")\n+ // whitespace beforehand is important as well\n+        });\n }"}, {"sha": "4345c6eee746120afc03cb46fc3e6f79a2d94f40", "filename": "src/tools/clippy/tests/ui/map_flatten_fixable.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -28,4 +28,40 @@ fn main() {\n \n     // mapping to Result on Result\n     let _: Result<_, &str> = (Ok(Ok(1))).map(|x| x).flatten();\n+\n+    issue8734();\n+    issue8878();\n+}\n+\n+fn issue8734() {\n+    //     let _ = [0u8, 1, 2, 3]\n+    //         .into_iter()\n+    //         .map(|n| match n {\n+    //             1 => [n\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)\n+    //                 .saturating_add(1)],\n+    //             n => [n],\n+    //         })\n+    //         .flatten();\n+}\n+\n+#[allow(clippy::bind_instead_of_map)] // map + flatten will be suggested to `and_then`, but afterwards `map` is suggested again\n+#[rustfmt::skip] // whitespace is important for this one\n+fn issue8878() {\n+    std::collections::HashMap::<u32, u32>::new()\n+        .get(&0)\n+        .map(|_| {\n+// we need some newlines\n+// so that the span is big enough\n+// for a splitted output of the diagnostic\n+            Some(\"\")\n+ // whitespace beforehand is important as well\n+        })\n+        .flatten();\n }"}, {"sha": "828e24acaad6c71ce4de550f0f3bb2c02418d8ff", "filename": "src/tools/clippy/tests/ui/map_flatten_fixable.stderr", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_flatten_fixable.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -76,5 +76,31 @@ help: try replacing `map` with `and_then`, and remove the `.flatten()`\n LL |     let _: Result<_, &str> = (Ok(Ok(1))).and_then(|x| x);\n    |                                          ~~~~~~~~~~~~~~~\n \n-error: aborting due to 7 previous errors\n+error: called `map(..).flatten()` on `Option`\n+  --> $DIR/map_flatten_fixable.rs:59:10\n+   |\n+LL |           .map(|_| {\n+   |  __________^\n+LL | | // we need some newlines\n+LL | | // so that the span is big enough\n+LL | | // for a splitted output of the diagnostic\n+...  |\n+LL | |         })\n+LL | |         .flatten();\n+   | |__________________^\n+   |\n+help: try replacing `map` with `and_then`\n+   |\n+LL ~         .and_then(|_| {\n+LL + // we need some newlines\n+LL + // so that the span is big enough\n+   |\n+help: and remove the `.flatten()`\n+   |\n+LL +             Some(\"\")\n+LL +  // whitespace beforehand is important as well\n+LL ~         });\n+   |\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "1b6c2d92412185a30b5034e6336928b782d96537", "filename": "src/tools/clippy/tests/ui/match_ref_pats.fixed", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_ref_pats.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_ref_pats.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_ref_pats.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,118 @@\n+// run-rustfix\n+#![warn(clippy::match_ref_pats)]\n+#![allow(dead_code, unused_variables, clippy::equatable_if_let, clippy::enum_variant_names)]\n+\n+fn ref_pats() {\n+    {\n+        let v = &Some(0);\n+        match *v {\n+            Some(v) => println!(\"{:?}\", v),\n+            None => println!(\"none\"),\n+        }\n+        match v {\n+            // This doesn't trigger; we have a different pattern.\n+            &Some(v) => println!(\"some\"),\n+            other => println!(\"other\"),\n+        }\n+    }\n+    let tup = &(1, 2);\n+    match tup {\n+        &(v, 1) => println!(\"{}\", v),\n+        _ => println!(\"none\"),\n+    }\n+    // Special case: using `&` both in expr and pats.\n+    let w = Some(0);\n+    match w {\n+        Some(v) => println!(\"{:?}\", v),\n+        None => println!(\"none\"),\n+    }\n+    // False positive: only wildcard pattern.\n+    let w = Some(0);\n+    #[allow(clippy::match_single_binding)]\n+    match w {\n+        _ => println!(\"none\"),\n+    }\n+\n+    let a = &Some(0);\n+    if a.is_none() {\n+        println!(\"none\");\n+    }\n+\n+    let b = Some(0);\n+    if b.is_none() {\n+        println!(\"none\");\n+    }\n+}\n+\n+mod ice_3719 {\n+    macro_rules! foo_variant(\n+        ($idx:expr) => (Foo::get($idx).unwrap())\n+    );\n+\n+    enum Foo {\n+        A,\n+        B,\n+    }\n+\n+    impl Foo {\n+        fn get(idx: u8) -> Option<&'static Self> {\n+            match idx {\n+                0 => Some(&Foo::A),\n+                1 => Some(&Foo::B),\n+                _ => None,\n+            }\n+        }\n+    }\n+\n+    fn ice_3719() {\n+        // ICE #3719\n+        match foo_variant!(0) {\n+            &Foo::A => println!(\"A\"),\n+            _ => println!(\"Wild\"),\n+        }\n+    }\n+}\n+\n+mod issue_7740 {\n+    macro_rules! foobar_variant(\n+        ($idx:expr) => (FooBar::get($idx).unwrap())\n+    );\n+\n+    enum FooBar {\n+        Foo,\n+        Bar,\n+        FooBar,\n+        BarFoo,\n+    }\n+\n+    impl FooBar {\n+        fn get(idx: u8) -> Option<&'static Self> {\n+            match idx {\n+                0 => Some(&FooBar::Foo),\n+                1 => Some(&FooBar::Bar),\n+                2 => Some(&FooBar::FooBar),\n+                3 => Some(&FooBar::BarFoo),\n+                _ => None,\n+            }\n+        }\n+    }\n+\n+    fn issue_7740() {\n+        // Issue #7740\n+        match *foobar_variant!(0) {\n+            FooBar::Foo => println!(\"Foo\"),\n+            FooBar::Bar => println!(\"Bar\"),\n+            FooBar::FooBar => println!(\"FooBar\"),\n+            _ => println!(\"Wild\"),\n+        }\n+\n+        // This shouldn't trigger\n+        if let &FooBar::BarFoo = foobar_variant!(3) {\n+            println!(\"BarFoo\");\n+        } else {\n+            println!(\"Wild\");\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "68dfac4e2e978ba44c018e17701be7e7c2569664", "filename": "src/tools/clippy/tests/ui/match_ref_pats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_ref_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_ref_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_ref_pats.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![warn(clippy::match_ref_pats)]\n-#![allow(clippy::equatable_if_let, clippy::enum_variant_names)]\n+#![allow(dead_code, unused_variables, clippy::equatable_if_let, clippy::enum_variant_names)]\n \n fn ref_pats() {\n     {"}, {"sha": "353f7399d9c27007744c4f2cf79905405052ef82", "filename": "src/tools/clippy/tests/ui/match_ref_pats.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_ref_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_ref_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_ref_pats.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,5 @@\n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:7:9\n+  --> $DIR/match_ref_pats.rs:8:9\n    |\n LL | /         match v {\n LL | |             &Some(v) => println!(\"{:?}\", v),\n@@ -16,7 +16,7 @@ LL ~             None => println!(\"none\"),\n    |\n \n error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/match_ref_pats.rs:24:5\n+  --> $DIR/match_ref_pats.rs:25:5\n    |\n LL | /     match &w {\n LL | |         &Some(v) => println!(\"{:?}\", v),\n@@ -32,21 +32,21 @@ LL ~         None => println!(\"none\"),\n    |\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/match_ref_pats.rs:36:12\n+  --> $DIR/match_ref_pats.rs:37:12\n    |\n LL |     if let &None = a {\n    |     -------^^^^^---- help: try this: `if a.is_none()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/match_ref_pats.rs:41:12\n+  --> $DIR/match_ref_pats.rs:42:12\n    |\n LL |     if let &None = &b {\n    |     -------^^^^^----- help: try this: `if b.is_none()`\n \n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:101:9\n+  --> $DIR/match_ref_pats.rs:102:9\n    |\n LL | /         match foobar_variant!(0) {\n LL | |             &FooBar::Foo => println!(\"Foo\"),"}, {"sha": "e436bcf495fd23042108e31312e2927694d42026", "filename": "src/tools/clippy/tests/ui/match_str_case_mismatch.fixed", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_str_case_mismatch.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_str_case_mismatch.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_str_case_mismatch.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,186 @@\n+// run-rustfix\n+#![warn(clippy::match_str_case_mismatch)]\n+#![allow(dead_code)]\n+\n+// Valid\n+\n+fn as_str_match() {\n+    let var = \"BAR\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"foo\" => {},\n+        \"bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn non_alphabetic() {\n+    let var = \"~!@#$%^&*()-_=+FOO\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"1234567890\" => {},\n+        \"~!@#$%^&*()-_=+foo\" => {},\n+        \"\\n\\r\\t\\x7F\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn unicode_cased() {\n+    let var = \"\u0412\u041e\u0414\u042b\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"\u6c34\" => {},\n+        \"\u03bd\u03b5\u03c1\u03cc\" => {},\n+        \"\u0432\u043e\u0434\u044b\" => {},\n+        \"\ubb3c\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn titlecase() {\n+    let var = \"Bar\u01f2\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"foo\u01c9\" => {},\n+        \"bar\u01f3\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn no_case_equivalent() {\n+    let var = \"bar\u0281\";\n+\n+    match var.to_uppercase().as_str() {\n+        \"FOO\u0255\" => {},\n+        \"BAR\u0281\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn addrof_unary_match() {\n+    let var = \"BAR\";\n+\n+    match &*var.to_ascii_lowercase() {\n+        \"foo\" => {},\n+        \"bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn alternating_chain() {\n+    let var = \"BAR\";\n+\n+    match &*var\n+        .to_ascii_lowercase()\n+        .to_uppercase()\n+        .to_lowercase()\n+        .to_ascii_uppercase()\n+    {\n+        \"FOO\" => {},\n+        \"BAR\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn unrelated_method() {\n+    struct Item {\n+        a: String,\n+    }\n+\n+    impl Item {\n+        #[allow(clippy::wrong_self_convention)]\n+        fn to_lowercase(self) -> String {\n+            self.a\n+        }\n+    }\n+\n+    let item = Item { a: String::from(\"BAR\") };\n+\n+    match &*item.to_lowercase() {\n+        \"FOO\" => {},\n+        \"BAR\" => {},\n+        _ => {},\n+    }\n+}\n+\n+// Invalid\n+\n+fn as_str_match_mismatch() {\n+    let var = \"BAR\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"foo\" => {},\n+        \"bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn non_alphabetic_mismatch() {\n+    let var = \"~!@#$%^&*()-_=+FOO\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"1234567890\" => {},\n+        \"~!@#$%^&*()-_=+foo\" => {},\n+        \"\\n\\r\\t\\x7F\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn unicode_cased_mismatch() {\n+    let var = \"\u0412\u041e\u0414\u042b\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"\u6c34\" => {},\n+        \"\u03bd\u03b5\u03c1\u03cc\" => {},\n+        \"\u0432\u043e\u0434\u044b\" => {},\n+        \"\ubb3c\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn titlecase_mismatch() {\n+    let var = \"Bar\u01f2\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"foo\u01c9\" => {},\n+        \"bar\u01f3\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn no_case_equivalent_mismatch() {\n+    let var = \"bar\u0281\";\n+\n+    match var.to_uppercase().as_str() {\n+        \"FOO\u0255\" => {},\n+        \"BAR\u0281\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn addrof_unary_match_mismatch() {\n+    let var = \"BAR\";\n+\n+    match &*var.to_ascii_lowercase() {\n+        \"foo\" => {},\n+        \"bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn alternating_chain_mismatch() {\n+    let var = \"BAR\";\n+\n+    match &*var\n+        .to_ascii_lowercase()\n+        .to_uppercase()\n+        .to_lowercase()\n+        .to_ascii_uppercase()\n+    {\n+        \"FOO\" => {},\n+        \"BAR\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "92e2a000ade25077478a58ca265cbb6159dc5fd9", "filename": "src/tools/clippy/tests/ui/match_str_case_mismatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_str_case_mismatch.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n #![warn(clippy::match_str_case_mismatch)]\n+#![allow(dead_code)]\n \n // Valid\n "}, {"sha": "197520a3d608174bb8e639643d55a185e2cfb37f", "filename": "src/tools/clippy/tests/ui/match_str_case_mismatch.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_str_case_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_str_case_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_str_case_mismatch.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,5 @@\n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:111:9\n+  --> $DIR/match_str_case_mismatch.rs:113:9\n    |\n LL |         \"Bar\" => {},\n    |         ^^^^^\n@@ -11,7 +11,7 @@ LL |         \"bar\" => {},\n    |         ~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:121:9\n+  --> $DIR/match_str_case_mismatch.rs:123:9\n    |\n LL |         \"~!@#$%^&*()-_=+Foo\" => {},\n    |         ^^^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |         \"~!@#$%^&*()-_=+foo\" => {},\n    |         ~~~~~~~~~~~~~~~~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:133:9\n+  --> $DIR/match_str_case_mismatch.rs:135:9\n    |\n LL |         \"\u0412\u043e\u0434\u044b\" => {},\n    |         ^^^^^^\n@@ -33,7 +33,7 @@ LL |         \"\u0432\u043e\u0434\u044b\" => {},\n    |         ~~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:144:9\n+  --> $DIR/match_str_case_mismatch.rs:146:9\n    |\n LL |         \"bar\u01f2\" => {},\n    |         ^^^^^^\n@@ -44,7 +44,7 @@ LL |         \"bar\u01f3\" => {},\n    |         ~~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:154:9\n+  --> $DIR/match_str_case_mismatch.rs:156:9\n    |\n LL |         \"bAR\u0281\" => {},\n    |         ^^^^^^\n@@ -55,7 +55,7 @@ LL |         \"BAR\u0281\" => {},\n    |         ~~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:164:9\n+  --> $DIR/match_str_case_mismatch.rs:166:9\n    |\n LL |         \"Bar\" => {},\n    |         ^^^^^\n@@ -66,7 +66,7 @@ LL |         \"bar\" => {},\n    |         ~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:179:9\n+  --> $DIR/match_str_case_mismatch.rs:181:9\n    |\n LL |         \"bAR\" => {},\n    |         ^^^^^"}, {"sha": "8f286c9304ccb4b3859964c2292846bd376f8b76", "filename": "src/tools/clippy/tests/ui/mismatching_type_param_order.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatching_type_param_order.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,60 @@\n+#![warn(clippy::mismatching_type_param_order)]\n+#![allow(clippy::blacklisted_name)]\n+\n+fn main() {\n+    struct Foo<A, B> {\n+        x: A,\n+        y: B,\n+    }\n+\n+    // lint on both params\n+    impl<B, A> Foo<B, A> {}\n+\n+    // lint on the 2nd param\n+    impl<C, A> Foo<C, A> {}\n+\n+    // should not lint\n+    impl<A, B> Foo<A, B> {}\n+\n+    struct FooLifetime<'l, 'm, A, B> {\n+        x: &'l A,\n+        y: &'m B,\n+    }\n+\n+    // should not lint on lifetimes\n+    impl<'m, 'l, B, A> FooLifetime<'m, 'l, B, A> {}\n+\n+    struct Bar {\n+        x: i32,\n+    }\n+\n+    // should not lint\n+    impl Bar {}\n+\n+    // also works for enums\n+    enum FooEnum<A, B, C> {\n+        X(A),\n+        Y(B),\n+        Z(C),\n+    }\n+\n+    impl<C, A, B> FooEnum<C, A, B> {}\n+\n+    // also works for unions\n+    union FooUnion<A: Copy, B>\n+    where\n+        B: Copy,\n+    {\n+        x: A,\n+        y: B,\n+    }\n+\n+    impl<B: Copy, A> FooUnion<B, A> where A: Copy {}\n+\n+    impl<A, B> FooUnion<A, B>\n+    where\n+        A: Copy,\n+        B: Copy,\n+    {\n+    }\n+}"}, {"sha": "cb720256c50e5cdd6dd7a60ddeba60bc996bc468", "filename": "src/tools/clippy/tests/ui/mismatching_type_param_order.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatching_type_param_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatching_type_param_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatching_type_param_order.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,83 @@\n+error: `Foo` has a similarly named generic type parameter `B` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:11:20\n+   |\n+LL |     impl<B, A> Foo<B, A> {}\n+   |                    ^\n+   |\n+   = note: `-D clippy::mismatching-type-param-order` implied by `-D warnings`\n+   = help: try `A`, or a name that does not conflict with `Foo`'s generic params\n+\n+error: `Foo` has a similarly named generic type parameter `A` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:11:23\n+   |\n+LL |     impl<B, A> Foo<B, A> {}\n+   |                       ^\n+   |\n+   = help: try `B`, or a name that does not conflict with `Foo`'s generic params\n+\n+error: `Foo` has a similarly named generic type parameter `A` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:14:23\n+   |\n+LL |     impl<C, A> Foo<C, A> {}\n+   |                       ^\n+   |\n+   = help: try `B`, or a name that does not conflict with `Foo`'s generic params\n+\n+error: `FooLifetime` has a similarly named generic type parameter `B` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:25:44\n+   |\n+LL |     impl<'m, 'l, B, A> FooLifetime<'m, 'l, B, A> {}\n+   |                                            ^\n+   |\n+   = help: try `A`, or a name that does not conflict with `FooLifetime`'s generic params\n+\n+error: `FooLifetime` has a similarly named generic type parameter `A` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:25:47\n+   |\n+LL |     impl<'m, 'l, B, A> FooLifetime<'m, 'l, B, A> {}\n+   |                                               ^\n+   |\n+   = help: try `B`, or a name that does not conflict with `FooLifetime`'s generic params\n+\n+error: `FooEnum` has a similarly named generic type parameter `C` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:41:27\n+   |\n+LL |     impl<C, A, B> FooEnum<C, A, B> {}\n+   |                           ^\n+   |\n+   = help: try `A`, or a name that does not conflict with `FooEnum`'s generic params\n+\n+error: `FooEnum` has a similarly named generic type parameter `A` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:41:30\n+   |\n+LL |     impl<C, A, B> FooEnum<C, A, B> {}\n+   |                              ^\n+   |\n+   = help: try `B`, or a name that does not conflict with `FooEnum`'s generic params\n+\n+error: `FooEnum` has a similarly named generic type parameter `B` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:41:33\n+   |\n+LL |     impl<C, A, B> FooEnum<C, A, B> {}\n+   |                                 ^\n+   |\n+   = help: try `C`, or a name that does not conflict with `FooEnum`'s generic params\n+\n+error: `FooUnion` has a similarly named generic type parameter `B` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:52:31\n+   |\n+LL |     impl<B: Copy, A> FooUnion<B, A> where A: Copy {}\n+   |                               ^\n+   |\n+   = help: try `A`, or a name that does not conflict with `FooUnion`'s generic params\n+\n+error: `FooUnion` has a similarly named generic type parameter `A` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:52:34\n+   |\n+LL |     impl<B: Copy, A> FooUnion<B, A> where A: Copy {}\n+   |                                  ^\n+   |\n+   = help: try `B`, or a name that does not conflict with `FooUnion`'s generic params\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "adff08e5d1e8b206df72074f4ffb4da718b180bd", "filename": "src/tools/clippy/tests/ui/modulo_one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::modulo_one)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::identity_op)]\n \n static STATIC_ONE: usize = 2 - 1;\n static STATIC_NEG_ONE: i64 = 1 - 2;"}, {"sha": "04ecdef5e994e399002693fa0b08b9004159a2e0", "filename": "src/tools/clippy/tests/ui/modulo_one.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmodulo_one.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -38,14 +38,6 @@ error: any number modulo -1 will panic/overflow or result in 0\n LL |     i32::MIN % (-1); // also caught by rustc\n    |     ^^^^^^^^^^^^^^^\n \n-error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/modulo_one.rs:13:22\n-   |\n-LL |     const ONE: u32 = 1 * 1;\n-   |                      ^^^^^\n-   |\n-   = note: `-D clippy::identity-op` implied by `-D warnings`\n-\n error: any number modulo 1 will be 0\n   --> $DIR/modulo_one.rs:17:5\n    |\n@@ -64,5 +56,5 @@ error: any number modulo -1 will panic/overflow or result in 0\n LL |     INT_MIN % NEG_ONE; // also caught by rustc\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "fee8e3030b8087cb16a52a6ffa55f67967c9158f", "filename": "src/tools/clippy/tests/ui/needless_late_init.fixed", "status": "added", "additions": 273, "deletions": 0, "changes": 273, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,273 @@\n+// run-rustfix\n+#![feature(let_chains)]\n+#![allow(\n+    unused,\n+    clippy::assign_op_pattern,\n+    clippy::blocks_in_if_conditions,\n+    clippy::let_and_return,\n+    clippy::let_unit_value,\n+    clippy::nonminimal_bool\n+)]\n+\n+use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n+use std::rc::Rc;\n+\n+struct SignificantDrop;\n+impl std::ops::Drop for SignificantDrop {\n+    fn drop(&mut self) {\n+        println!(\"dropped\");\n+    }\n+}\n+\n+fn simple() {\n+    \n+    let a = \"zero\";\n+\n+    \n+    \n+    let b = 1;\n+    let c = 2;\n+\n+    \n+    let d: usize = 1;\n+\n+    \n+    let e = format!(\"{}\", d);\n+}\n+\n+fn main() {\n+    \n+    let n = 1;\n+    let a = match n {\n+        1 => \"one\",\n+        _ => {\n+            \"two\"\n+        },\n+    };\n+\n+    \n+    let b = if n == 3 {\n+        \"four\"\n+    } else {\n+        \"five\"\n+    };\n+\n+    \n+    let d = if true {\n+        let temp = 5;\n+        temp\n+    } else {\n+        15\n+    };\n+\n+    \n+    let e = if true {\n+        format!(\"{} {}\", a, b)\n+    } else {\n+        format!(\"{}\", n)\n+    };\n+\n+    \n+    let f = match 1 {\n+        1 => \"three\",\n+        _ => return,\n+    }; // has semi\n+\n+    \n+    let g: usize = if true {\n+        5\n+    } else {\n+        panic!();\n+    };\n+\n+    // Drop order only matters if both are significant\n+    \n+    let y = SignificantDrop;\n+    let x = 1;\n+\n+    \n+    let y = 1;\n+    let x = SignificantDrop;\n+\n+    \n+    // types that should be considered insignificant\n+    let y = 1;\n+    let y = \"2\";\n+    let y = String::new();\n+    let y = vec![3.0];\n+    let y = HashMap::<usize, usize>::new();\n+    let y = BTreeMap::<usize, usize>::new();\n+    let y = HashSet::<usize>::new();\n+    let y = BTreeSet::<usize>::new();\n+    let y = Box::new(4);\n+    let x = SignificantDrop;\n+}\n+\n+async fn in_async() -> &'static str {\n+    async fn f() -> &'static str {\n+        \"one\"\n+    }\n+\n+    \n+    let n = 1;\n+    let a = match n {\n+        1 => f().await,\n+        _ => {\n+            \"two\"\n+        },\n+    };\n+\n+    a\n+}\n+\n+const fn in_const() -> &'static str {\n+    const fn f() -> &'static str {\n+        \"one\"\n+    }\n+\n+    \n+    let n = 1;\n+    let a = match n {\n+        1 => f(),\n+        _ => {\n+            \"two\"\n+        },\n+    };\n+\n+    a\n+}\n+\n+fn does_not_lint() {\n+    let z;\n+    if false {\n+        z = 1;\n+    }\n+\n+    let x;\n+    let y;\n+    if true {\n+        x = 1;\n+    } else {\n+        y = 1;\n+    }\n+\n+    let mut x;\n+    if true {\n+        x = 5;\n+        x = 10 / x;\n+    } else {\n+        x = 2;\n+    }\n+\n+    let x;\n+    let _ = match 1 {\n+        1 => x = 10,\n+        _ => x = 20,\n+    };\n+\n+    // using tuples would be possible, but not always preferable\n+    let x;\n+    let y;\n+    if true {\n+        x = 1;\n+        y = 2;\n+    } else {\n+        x = 3;\n+        y = 4;\n+    }\n+\n+    // could match with a smarter heuristic to avoid multiple assignments\n+    let x;\n+    if true {\n+        let mut y = 5;\n+        y = 6;\n+        x = y;\n+    } else {\n+        x = 2;\n+    }\n+\n+    let (x, y);\n+    if true {\n+        x = 1;\n+    } else {\n+        x = 2;\n+    }\n+    y = 3;\n+\n+    macro_rules! assign {\n+        ($i:ident) => {\n+            $i = 1;\n+        };\n+    }\n+    let x;\n+    assign!(x);\n+\n+    let x;\n+    if true {\n+        assign!(x);\n+    } else {\n+        x = 2;\n+    }\n+\n+    macro_rules! in_macro {\n+        () => {\n+            let x;\n+            x = 1;\n+\n+            let x;\n+            if true {\n+                x = 1;\n+            } else {\n+                x = 2;\n+            }\n+        };\n+    }\n+    in_macro!();\n+\n+    // ignore if-lets - https://github.com/rust-lang/rust-clippy/issues/8613\n+    let x;\n+    if let Some(n) = Some(\"v\") {\n+        x = 1;\n+    } else {\n+        x = 2;\n+    }\n+\n+    let x;\n+    if true && let Some(n) = Some(\"let chains too\") {\n+        x = 1;\n+    } else {\n+        x = 2;\n+    }\n+\n+    // ignore mut bindings\n+    // https://github.com/shepmaster/twox-hash/blob/b169c16d86eb8ea4a296b0acb9d00ca7e3c3005f/src/sixty_four.rs#L88-L93\n+    // https://github.com/dtolnay/thiserror/blob/21c26903e29cb92ba1a7ff11e82ae2001646b60d/tests/test_generics.rs#L91-L100\n+    let mut x: usize;\n+    x = 1;\n+    x = 2;\n+    x = 3;\n+\n+    // should not move the declaration if `x` has a significant drop, and there\n+    // is another binding with a significant drop between it and the first usage\n+    let x;\n+    let y = SignificantDrop;\n+    x = SignificantDrop;\n+}\n+\n+#[rustfmt::skip]\n+fn issue8911() -> u32 {\n+    let x;\n+    match 1 {\n+        _ if { x = 1; false } => return 1,\n+        _ => return 2,\n+    }\n+\n+    let x;\n+    if { x = 1; true } {\n+        return 1;\n+    } else {\n+        return 2;\n+    }\n+\n+    3\n+}"}, {"sha": "402d9f9ef7f81945f4dd9087c314ca0dfe0f8b32", "filename": "src/tools/clippy/tests/ui/needless_late_init.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,13 @@\n+// run-rustfix\n #![feature(let_chains)]\n-#![allow(unused, clippy::nonminimal_bool, clippy::let_unit_value)]\n+#![allow(\n+    unused,\n+    clippy::assign_op_pattern,\n+    clippy::blocks_in_if_conditions,\n+    clippy::let_and_return,\n+    clippy::let_unit_value,\n+    clippy::nonminimal_bool\n+)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n use std::rc::Rc;\n@@ -11,6 +19,22 @@ impl std::ops::Drop for SignificantDrop {\n     }\n }\n \n+fn simple() {\n+    let a;\n+    a = \"zero\";\n+\n+    let b;\n+    let c;\n+    b = 1;\n+    c = 2;\n+\n+    let d: usize;\n+    d = 1;\n+\n+    let e;\n+    e = format!(\"{}\", d);\n+}\n+\n fn main() {\n     let a;\n     let n = 1;\n@@ -229,3 +253,21 @@ fn does_not_lint() {\n     let y = SignificantDrop;\n     x = SignificantDrop;\n }\n+\n+#[rustfmt::skip]\n+fn issue8911() -> u32 {\n+    let x;\n+    match 1 {\n+        _ if { x = 1; false } => return 1,\n+        _ => return 2,\n+    }\n+\n+    let x;\n+    if { x = 1; true } {\n+        return 1;\n+    } else {\n+        return 2;\n+    }\n+\n+    3\n+}"}, {"sha": "f320b5b9cbb378c2b14212b751c7f811fb640909", "filename": "src/tools/clippy/tests/ui/needless_late_init.stderr", "status": "modified", "additions": 80, "deletions": 13, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,12 +1,79 @@\n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:15:5\n+  --> $DIR/needless_late_init.rs:23:5\n    |\n LL |     let a;\n-   |     ^^^^^^\n+   |     ^^^^^^ created here\n+LL |     a = \"zero\";\n+   |     ^^^^^^^^^^ initialised here\n    |\n    = note: `-D clippy::needless-late-init` implied by `-D warnings`\n help: declare `a` here\n    |\n+LL |     let a = \"zero\";\n+   |     ~~~~~\n+\n+error: unneeded late initialization\n+  --> $DIR/needless_late_init.rs:26:5\n+   |\n+LL |     let b;\n+   |     ^^^^^^ created here\n+LL |     let c;\n+LL |     b = 1;\n+   |     ^^^^^ initialised here\n+   |\n+help: declare `b` here\n+   |\n+LL |     let b = 1;\n+   |     ~~~~~\n+\n+error: unneeded late initialization\n+  --> $DIR/needless_late_init.rs:27:5\n+   |\n+LL |     let c;\n+   |     ^^^^^^ created here\n+LL |     b = 1;\n+LL |     c = 2;\n+   |     ^^^^^ initialised here\n+   |\n+help: declare `c` here\n+   |\n+LL |     let c = 2;\n+   |     ~~~~~\n+\n+error: unneeded late initialization\n+  --> $DIR/needless_late_init.rs:31:5\n+   |\n+LL |     let d: usize;\n+   |     ^^^^^^^^^^^^^ created here\n+LL |     d = 1;\n+   |     ^^^^^ initialised here\n+   |\n+help: declare `d` here\n+   |\n+LL |     let d: usize = 1;\n+   |     ~~~~~~~~~~~~\n+\n+error: unneeded late initialization\n+  --> $DIR/needless_late_init.rs:34:5\n+   |\n+LL |     let e;\n+   |     ^^^^^^ created here\n+LL |     e = format!(\"{}\", d);\n+   |     ^^^^^^^^^^^^^^^^^^^^ initialised here\n+   |\n+help: declare `e` here\n+   |\n+LL |     let e = format!(\"{}\", d);\n+   |     ~~~~~\n+\n+error: unneeded late initialization\n+  --> $DIR/needless_late_init.rs:39:5\n+   |\n+LL |     let a;\n+   |     ^^^^^^\n+   |\n+help: declare `a` here\n+   |\n LL |     let a = match n {\n    |     +++++++\n help: remove the assignments from the `match` arms\n@@ -21,7 +88,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:24:5\n+  --> $DIR/needless_late_init.rs:48:5\n    |\n LL |     let b;\n    |     ^^^^^^\n@@ -42,7 +109,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:31:5\n+  --> $DIR/needless_late_init.rs:55:5\n    |\n LL |     let d;\n    |     ^^^^^^\n@@ -63,7 +130,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:39:5\n+  --> $DIR/needless_late_init.rs:63:5\n    |\n LL |     let e;\n    |     ^^^^^^\n@@ -84,7 +151,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:46:5\n+  --> $DIR/needless_late_init.rs:70:5\n    |\n LL |     let f;\n    |     ^^^^^^\n@@ -100,7 +167,7 @@ LL +         1 => \"three\",\n    | \n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:52:5\n+  --> $DIR/needless_late_init.rs:76:5\n    |\n LL |     let g: usize;\n    |     ^^^^^^^^^^^^^\n@@ -120,7 +187,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:60:5\n+  --> $DIR/needless_late_init.rs:84:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -134,7 +201,7 @@ LL |     let x = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:64:5\n+  --> $DIR/needless_late_init.rs:88:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -148,7 +215,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:68:5\n+  --> $DIR/needless_late_init.rs:92:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -162,7 +229,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:87:5\n+  --> $DIR/needless_late_init.rs:111:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -183,7 +250,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:104:5\n+  --> $DIR/needless_late_init.rs:128:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -203,5 +270,5 @@ help: add a semicolon after the `match` expression\n LL |     };\n    |      +\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 16 previous errors\n "}, {"sha": "724477e8691df1df790fcdb3efa62cccb49da932", "filename": "src/tools/clippy/tests/ui/needless_late_init_fixable.fixed", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.fixed?ref=357bc27904d4a99c83d4b01272c34e0e54934fa5", "patch": "@@ -1,19 +0,0 @@\n-// run-rustfix\n-\n-#![allow(unused, clippy::assign_op_pattern)]\n-\n-fn main() {\n-    \n-    let a = \"zero\";\n-\n-    \n-    \n-    let b = 1;\n-    let c = 2;\n-\n-    \n-    let d: usize = 1;\n-\n-    \n-    let e = format!(\"{}\", d);\n-}"}, {"sha": "3e6bd36367275dd2f2a55118f3da9dd0fd8da22d", "filename": "src/tools/clippy/tests/ui/needless_late_init_fixable.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.rs?ref=357bc27904d4a99c83d4b01272c34e0e54934fa5", "patch": "@@ -1,19 +0,0 @@\n-// run-rustfix\n-\n-#![allow(unused, clippy::assign_op_pattern)]\n-\n-fn main() {\n-    let a;\n-    a = \"zero\";\n-\n-    let b;\n-    let c;\n-    b = 1;\n-    c = 2;\n-\n-    let d: usize;\n-    d = 1;\n-\n-    let e;\n-    e = format!(\"{}\", d);\n-}"}, {"sha": "8c664309e3e83fe4838fbcfc12d7c5e586109c42", "filename": "src/tools/clippy/tests/ui/needless_late_init_fixable.stderr", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.stderr?ref=357bc27904d4a99c83d4b01272c34e0e54934fa5", "patch": "@@ -1,70 +0,0 @@\n-error: unneeded late initialization\n-  --> $DIR/needless_late_init_fixable.rs:6:5\n-   |\n-LL |     let a;\n-   |     ^^^^^^ created here\n-LL |     a = \"zero\";\n-   |     ^^^^^^^^^^ initialised here\n-   |\n-   = note: `-D clippy::needless-late-init` implied by `-D warnings`\n-help: declare `a` here\n-   |\n-LL |     let a = \"zero\";\n-   |     ~~~~~\n-\n-error: unneeded late initialization\n-  --> $DIR/needless_late_init_fixable.rs:9:5\n-   |\n-LL |     let b;\n-   |     ^^^^^^ created here\n-LL |     let c;\n-LL |     b = 1;\n-   |     ^^^^^ initialised here\n-   |\n-help: declare `b` here\n-   |\n-LL |     let b = 1;\n-   |     ~~~~~\n-\n-error: unneeded late initialization\n-  --> $DIR/needless_late_init_fixable.rs:10:5\n-   |\n-LL |     let c;\n-   |     ^^^^^^ created here\n-LL |     b = 1;\n-LL |     c = 2;\n-   |     ^^^^^ initialised here\n-   |\n-help: declare `c` here\n-   |\n-LL |     let c = 2;\n-   |     ~~~~~\n-\n-error: unneeded late initialization\n-  --> $DIR/needless_late_init_fixable.rs:14:5\n-   |\n-LL |     let d: usize;\n-   |     ^^^^^^^^^^^^^ created here\n-LL |     d = 1;\n-   |     ^^^^^ initialised here\n-   |\n-help: declare `d` here\n-   |\n-LL |     let d: usize = 1;\n-   |     ~~~~~~~~~~~~\n-\n-error: unneeded late initialization\n-  --> $DIR/needless_late_init_fixable.rs:17:5\n-   |\n-LL |     let e;\n-   |     ^^^^^^ created here\n-LL |     e = format!(\"{}\", d);\n-   |     ^^^^^^^^^^^^^^^^^^^^ initialised here\n-   |\n-help: declare `e` here\n-   |\n-LL |     let e = format!(\"{}\", d);\n-   |     ~~~~~\n-\n-error: aborting due to 5 previous errors\n-"}, {"sha": "fc686b1dac0e135900213be13f191040abcd10fb", "filename": "src/tools/clippy/tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -4,7 +4,8 @@\n     clippy::boxed_local,\n     clippy::needless_pass_by_value,\n     clippy::unnecessary_wraps,\n-    dyn_drop\n+    dyn_drop,\n+    clippy::get_first\n )]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}"}, {"sha": "3c428fd4674ce754b9ebc30f36961d0959a0923a", "filename": "src/tools/clippy/tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,187 +1,187 @@\n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:10:1\n+  --> $DIR/needless_lifetimes.rs:11:1\n    |\n LL | fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:12:1\n+  --> $DIR/needless_lifetimes.rs:13:1\n    |\n LL | fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:22:1\n+  --> $DIR/needless_lifetimes.rs:23:1\n    |\n LL | fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:56:1\n+  --> $DIR/needless_lifetimes.rs:57:1\n    |\n LL | fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:61:1\n+  --> $DIR/needless_lifetimes.rs:62:1\n    |\n LL | fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:73:1\n+  --> $DIR/needless_lifetimes.rs:74:1\n    |\n LL | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:97:1\n+  --> $DIR/needless_lifetimes.rs:98:1\n    |\n LL | fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:127:5\n+  --> $DIR/needless_lifetimes.rs:128:5\n    |\n LL |     fn self_and_out<'s>(&'s self) -> &'s u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:136:5\n+  --> $DIR/needless_lifetimes.rs:137:5\n    |\n LL |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:155:1\n+  --> $DIR/needless_lifetimes.rs:156:1\n    |\n LL | fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:185:1\n+  --> $DIR/needless_lifetimes.rs:186:1\n    |\n LL | fn trait_obj_elided2<'a>(_arg: &'a dyn Drop) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:191:1\n+  --> $DIR/needless_lifetimes.rs:192:1\n    |\n LL | fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:210:1\n+  --> $DIR/needless_lifetimes.rs:211:1\n    |\n LL | fn named_input_elided_output<'a>(_arg: &'a str) -> &str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:218:1\n+  --> $DIR/needless_lifetimes.rs:219:1\n    |\n LL | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:254:1\n+  --> $DIR/needless_lifetimes.rs:255:1\n    |\n LL | fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:261:9\n+  --> $DIR/needless_lifetimes.rs:262:9\n    |\n LL |         fn needless_lt<'a>(x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:265:9\n+  --> $DIR/needless_lifetimes.rs:266:9\n    |\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:278:9\n+  --> $DIR/needless_lifetimes.rs:279:9\n    |\n LL |         fn baz<'a>(&'a self) -> impl Foo + 'a {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:310:5\n+  --> $DIR/needless_lifetimes.rs:311:5\n    |\n LL |     fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:319:5\n+  --> $DIR/needless_lifetimes.rs:320:5\n    |\n LL |     fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:331:5\n+  --> $DIR/needless_lifetimes.rs:332:5\n    |\n LL |     fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:346:5\n+  --> $DIR/needless_lifetimes.rs:347:5\n    |\n LL |     fn pointer_fn_elidable<'a>(i: &'a i32, f: fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:359:5\n+  --> $DIR/needless_lifetimes.rs:360:5\n    |\n LL |     fn nested_fn_pointer_3<'a>(_: &'a i32) -> fn(fn(&i32) -> &i32) -> i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:362:5\n+  --> $DIR/needless_lifetimes.rs:363:5\n    |\n LL |     fn nested_fn_pointer_4<'a>(_: &'a i32) -> impl Fn(fn(&i32)) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:384:9\n+  --> $DIR/needless_lifetimes.rs:385:9\n    |\n LL |         fn implicit<'a>(&'a self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:387:9\n+  --> $DIR/needless_lifetimes.rs:388:9\n    |\n LL |         fn implicit_mut<'a>(&'a mut self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:398:9\n+  --> $DIR/needless_lifetimes.rs:399:9\n    |\n LL |         fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:404:9\n+  --> $DIR/needless_lifetimes.rs:405:9\n    |\n LL |         fn implicit<'a>(&'a self) -> &'a ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:405:9\n+  --> $DIR/needless_lifetimes.rs:406:9\n    |\n LL |         fn implicit_provided<'a>(&'a self) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:414:9\n+  --> $DIR/needless_lifetimes.rs:415:9\n    |\n LL |         fn lifetime_elsewhere<'a>(self: Box<Self>, here: &'a ()) -> &'a ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:415:9\n+  --> $DIR/needless_lifetimes.rs:416:9\n    |\n LL |         fn lifetime_elsewhere_provided<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7c828430b78533301ed3bd325a6787eca61de872", "filename": "src/tools/clippy/tests/ui/needless_return.fixed", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -53,7 +53,7 @@ fn test_closure() {\n }\n \n fn test_macro_call() -> i32 {\n-    return the_answer!();\n+    the_answer!()\n }\n \n fn test_void_fun() {\n@@ -175,7 +175,7 @@ async fn async_test_closure() {\n }\n \n async fn async_test_macro_call() -> i32 {\n-    return the_answer!();\n+    the_answer!()\n }\n \n async fn async_test_void_fun() {\n@@ -223,4 +223,10 @@ fn let_else() {\n     let Some(1) = Some(1) else { return };\n }\n \n+fn needless_return_macro() -> String {\n+    let _ = \"foo\";\n+    let _ = \"bar\";\n+    format!(\"Hello {}\", \"world!\")\n+}\n+\n fn main() {}"}, {"sha": "fe82af00e67503c9591cb4bc338cc20f49f03b98", "filename": "src/tools/clippy/tests/ui/needless_return.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -223,4 +223,10 @@ fn let_else() {\n     let Some(1) = Some(1) else { return };\n }\n \n+fn needless_return_macro() -> String {\n+    let _ = \"foo\";\n+    let _ = \"bar\";\n+    return format!(\"Hello {}\", \"world!\");\n+}\n+\n fn main() {}"}, {"sha": "4c8be47b025e21b60c8d348d4d908ce842175b6c", "filename": "src/tools/clippy/tests/ui/needless_return.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -48,6 +48,12 @@ error: unneeded `return` statement\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:56:5\n+   |\n+LL |     return the_answer!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n+\n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:60:5\n    |\n@@ -168,6 +174,12 @@ error: unneeded `return` statement\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:178:5\n+   |\n+LL |     return the_answer!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n+\n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:182:5\n    |\n@@ -204,5 +216,11 @@ error: unneeded `return` statement\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n-error: aborting due to 34 previous errors\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:229:5\n+   |\n+LL |     return format!(\"Hello {}\", \"world!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `format!(\"Hello {}\", \"world!\")`\n+\n+error: aborting due to 37 previous errors\n "}, {"sha": "ad17d53f78906d5c4cb309f53216d6866441a2d0", "filename": "src/tools/clippy/tests/ui/no_effect_replace.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect_replace.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,51 @@\n+#![warn(clippy::no_effect_replace)]\n+\n+fn main() {\n+    let _ = \"12345\".replace('1', \"1\");\n+    let _ = \"12345\".replace(\"12\", \"12\");\n+    let _ = String::new().replace(\"12\", \"12\");\n+\n+    let _ = \"12345\".replacen('1', \"1\", 1);\n+    let _ = \"12345\".replacen(\"12\", \"12\", 1);\n+    let _ = String::new().replacen(\"12\", \"12\", 1);\n+\n+    let _ = \"12345\".replace(\"12\", \"22\");\n+    let _ = \"12345\".replacen(\"12\", \"22\", 1);\n+\n+    let mut x = X::default();\n+    let _ = \"hello\".replace(&x.f(), &x.f());\n+    let _ = \"hello\".replace(&x.f(), &x.ff());\n+\n+    let _ = \"hello\".replace(&y(), &y());\n+    let _ = \"hello\".replace(&y(), &z());\n+\n+    let _ = Replaceme.replace(\"a\", \"a\");\n+}\n+\n+#[derive(Default)]\n+struct X {}\n+\n+impl X {\n+    fn f(&mut self) -> String {\n+        \"he\".to_string()\n+    }\n+\n+    fn ff(&mut self) -> String {\n+        \"hh\".to_string()\n+    }\n+}\n+\n+fn y() -> String {\n+    \"he\".to_string()\n+}\n+\n+fn z() -> String {\n+    \"hh\".to_string()\n+}\n+\n+struct Replaceme;\n+impl Replaceme {\n+    pub fn replace(&mut self, a: &str, b: &str) -> Self {\n+        Self\n+    }\n+}"}, {"sha": "53a28aa73b707e46ecae822e00e266bdace39e8a", "filename": "src/tools/clippy/tests/ui/no_effect_replace.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fno_effect_replace.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,52 @@\n+error: replacing text with itself\n+  --> $DIR/no_effect_replace.rs:4:13\n+   |\n+LL |     let _ = \"12345\".replace('1', \"1\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::no-effect-replace` implied by `-D warnings`\n+\n+error: replacing text with itself\n+  --> $DIR/no_effect_replace.rs:5:13\n+   |\n+LL |     let _ = \"12345\".replace(\"12\", \"12\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: replacing text with itself\n+  --> $DIR/no_effect_replace.rs:6:13\n+   |\n+LL |     let _ = String::new().replace(\"12\", \"12\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: replacing text with itself\n+  --> $DIR/no_effect_replace.rs:8:13\n+   |\n+LL |     let _ = \"12345\".replacen('1', \"1\", 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: replacing text with itself\n+  --> $DIR/no_effect_replace.rs:9:13\n+   |\n+LL |     let _ = \"12345\".replacen(\"12\", \"12\", 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: replacing text with itself\n+  --> $DIR/no_effect_replace.rs:10:13\n+   |\n+LL |     let _ = String::new().replacen(\"12\", \"12\", 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: replacing text with itself\n+  --> $DIR/no_effect_replace.rs:16:13\n+   |\n+LL |     let _ = \"hello\".replace(&x.f(), &x.f());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: replacing text with itself\n+  --> $DIR/no_effect_replace.rs:19:13\n+   |\n+LL |     let _ = \"hello\".replace(&y(), &y());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "aad44089de499507c09078348682efd8aad2a29b", "filename": "src/tools/clippy/tests/ui/nonminimal_bool_methods.fixed", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool_methods.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool_methods.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool_methods.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,111 @@\n+// run-rustfix\n+#![allow(unused, clippy::diverging_sub_expression)]\n+#![warn(clippy::nonminimal_bool)]\n+\n+fn methods_with_negation() {\n+    let a: Option<i32> = unimplemented!();\n+    let b: Result<i32, i32> = unimplemented!();\n+    let _ = a.is_some();\n+    let _ = a.is_none();\n+    let _ = a.is_none();\n+    let _ = a.is_some();\n+    let _ = b.is_err();\n+    let _ = b.is_ok();\n+    let _ = b.is_ok();\n+    let _ = b.is_err();\n+    let c = false;\n+    let _ = a.is_none() || c;\n+    let _ = a.is_none() && c;\n+    let _ = !(!c ^ c) || a.is_none();\n+    let _ = (!c ^ c) || a.is_none();\n+    let _ = !c ^ c || a.is_none();\n+}\n+\n+// Simplified versions of https://github.com/rust-lang/rust-clippy/issues/2638\n+// clippy::nonminimal_bool should only check the built-in Result and Some type, not\n+// any other types like the following.\n+enum CustomResultOk<E> {\n+    Ok,\n+    Err(E),\n+}\n+enum CustomResultErr<E> {\n+    Ok,\n+    Err(E),\n+}\n+enum CustomSomeSome<T> {\n+    Some(T),\n+    None,\n+}\n+enum CustomSomeNone<T> {\n+    Some(T),\n+    None,\n+}\n+\n+impl<E> CustomResultOk<E> {\n+    pub fn is_ok(&self) -> bool {\n+        true\n+    }\n+}\n+\n+impl<E> CustomResultErr<E> {\n+    pub fn is_err(&self) -> bool {\n+        true\n+    }\n+}\n+\n+impl<T> CustomSomeSome<T> {\n+    pub fn is_some(&self) -> bool {\n+        true\n+    }\n+}\n+\n+impl<T> CustomSomeNone<T> {\n+    pub fn is_none(&self) -> bool {\n+        true\n+    }\n+}\n+\n+fn dont_warn_for_custom_methods_with_negation() {\n+    let res = CustomResultOk::Err(\"Error\");\n+    // Should not warn and suggest 'is_err()' because the type does not\n+    // implement is_err().\n+    if !res.is_ok() {}\n+\n+    let res = CustomResultErr::Err(\"Error\");\n+    // Should not warn and suggest 'is_ok()' because the type does not\n+    // implement is_ok().\n+    if !res.is_err() {}\n+\n+    let res = CustomSomeSome::Some(\"thing\");\n+    // Should not warn and suggest 'is_none()' because the type does not\n+    // implement is_none().\n+    if !res.is_some() {}\n+\n+    let res = CustomSomeNone::Some(\"thing\");\n+    // Should not warn and suggest 'is_some()' because the type does not\n+    // implement is_some().\n+    if !res.is_none() {}\n+}\n+\n+// Only Built-in Result and Some types should suggest the negated alternative\n+fn warn_for_built_in_methods_with_negation() {\n+    let res: Result<usize, usize> = Ok(1);\n+    if res.is_err() {}\n+    if res.is_ok() {}\n+\n+    let res = Some(1);\n+    if res.is_none() {}\n+    if res.is_some() {}\n+}\n+\n+#[allow(clippy::neg_cmp_op_on_partial_ord)]\n+fn dont_warn_for_negated_partial_ord_comparison() {\n+    let a: f64 = unimplemented!();\n+    let b: f64 = unimplemented!();\n+    let _ = !(a < b);\n+    let _ = !(a <= b);\n+    let _ = !(a > b);\n+    let _ = !(a >= b);\n+}\n+\n+fn main() {}"}, {"sha": "b9074da842706c6f3f80d484baaa7013ea893ae5", "filename": "src/tools/clippy/tests/ui/nonminimal_bool_methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool_methods.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![allow(unused, clippy::diverging_sub_expression)]\n #![warn(clippy::nonminimal_bool)]\n "}, {"sha": "21b84db85890964b9dec175edbe00ae81a7a8b9b", "filename": "src/tools/clippy/tests/ui/nonminimal_bool_methods.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool_methods.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,79 +1,79 @@\n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:8:13\n+  --> $DIR/nonminimal_bool_methods.rs:9:13\n    |\n LL |     let _ = !a.is_some();\n    |             ^^^^^^^^^^^^ help: try: `a.is_none()`\n    |\n    = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:10:13\n+  --> $DIR/nonminimal_bool_methods.rs:11:13\n    |\n LL |     let _ = !a.is_none();\n    |             ^^^^^^^^^^^^ help: try: `a.is_some()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:12:13\n+  --> $DIR/nonminimal_bool_methods.rs:13:13\n    |\n LL |     let _ = !b.is_err();\n    |             ^^^^^^^^^^^ help: try: `b.is_ok()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:14:13\n+  --> $DIR/nonminimal_bool_methods.rs:15:13\n    |\n LL |     let _ = !b.is_ok();\n    |             ^^^^^^^^^^ help: try: `b.is_err()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:16:13\n+  --> $DIR/nonminimal_bool_methods.rs:17:13\n    |\n LL |     let _ = !(a.is_some() && !c);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: try: `a.is_none() || c`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:17:13\n+  --> $DIR/nonminimal_bool_methods.rs:18:13\n    |\n LL |     let _ = !(a.is_some() || !c);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: try: `a.is_none() && c`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:18:26\n+  --> $DIR/nonminimal_bool_methods.rs:19:26\n    |\n LL |     let _ = !(!c ^ c) || !a.is_some();\n    |                          ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:19:25\n+  --> $DIR/nonminimal_bool_methods.rs:20:25\n    |\n LL |     let _ = (!c ^ c) || !a.is_some();\n    |                         ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:20:23\n+  --> $DIR/nonminimal_bool_methods.rs:21:23\n    |\n LL |     let _ = !c ^ c || !a.is_some();\n    |                       ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:92:8\n+  --> $DIR/nonminimal_bool_methods.rs:93:8\n    |\n LL |     if !res.is_ok() {}\n    |        ^^^^^^^^^^^^ help: try: `res.is_err()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:93:8\n+  --> $DIR/nonminimal_bool_methods.rs:94:8\n    |\n LL |     if !res.is_err() {}\n    |        ^^^^^^^^^^^^^ help: try: `res.is_ok()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:96:8\n+  --> $DIR/nonminimal_bool_methods.rs:97:8\n    |\n LL |     if !res.is_some() {}\n    |        ^^^^^^^^^^^^^^ help: try: `res.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:97:8\n+  --> $DIR/nonminimal_bool_methods.rs:98:8\n    |\n LL |     if !res.is_none() {}\n    |        ^^^^^^^^^^^^^^ help: try: `res.is_some()`"}, {"sha": "85d021b2f25e2094435df55fc9e40bcaa39caa34", "filename": "src/tools/clippy/tests/ui/range_contains.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -49,6 +49,13 @@ fn main() {\n     x >= 10 && x <= -10;\n     (-3. ..=3.).contains(&y);\n     y >= 3. && y <= -3.;\n+\n+    // Fix #8745\n+    let z = 42;\n+    (0..=10).contains(&x) && (0..=10).contains(&z);\n+    !(0..10).contains(&x) || !(0..10).contains(&z);\n+    // Make sure operators in parens don't give a breaking suggestion\n+    ((x % 2 == 0) || (x < 0)) || (x >= 10);\n }\n \n // Fix #6373"}, {"sha": "9a7a75dc13254ed2883943eabbd0c350fd991b6a", "filename": "src/tools/clippy/tests/ui/range_contains.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -49,6 +49,13 @@ fn main() {\n     x >= 10 && x <= -10;\n     y >= -3. && y <= 3.;\n     y >= 3. && y <= -3.;\n+\n+    // Fix #8745\n+    let z = 42;\n+    (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n+    (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n+    // Make sure operators in parens don't give a breaking suggestion\n+    ((x % 2 == 0) || (x < 0)) || (x >= 10);\n }\n \n // Fix #6373"}, {"sha": "936859db5a1260ba217bcb91b31ef91e90fa9a2c", "filename": "src/tools/clippy/tests/ui/range_contains.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -96,5 +96,29 @@ error: manual `RangeInclusive::contains` implementation\n LL |     y >= -3. && y <= 3.;\n    |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-3. ..=3.).contains(&y)`\n \n-error: aborting due to 16 previous errors\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:55:30\n+   |\n+LL |     (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^ help: use: `(0..=10).contains(&z)`\n+\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:55:5\n+   |\n+LL |     (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: use: `(0..=10).contains(&x)`\n+\n+error: manual `!Range::contains` implementation\n+  --> $DIR/range_contains.rs:56:29\n+   |\n+LL |     (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n+   |                             ^^^^^^^^^^^^^^^^^^^^ help: use: `!(0..10).contains(&z)`\n+\n+error: manual `!Range::contains` implementation\n+  --> $DIR/range_contains.rs:56:5\n+   |\n+LL |     (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: use: `!(0..10).contains(&x)`\n+\n+error: aborting due to 20 previous errors\n "}, {"sha": "8910c01b1fcf9ebdee2d0eff39a0e864466172f6", "filename": "src/tools/clippy/tests/ui/rc_buffer.fixed", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,28 @@\n+// run-rustfix\n+#![warn(clippy::rc_buffer)]\n+#![allow(dead_code, unused_imports)]\n+\n+use std::cell::RefCell;\n+use std::ffi::OsString;\n+use std::path::PathBuf;\n+use std::rc::Rc;\n+\n+struct S {\n+    // triggers lint\n+    bad1: Rc<str>,\n+    bad2: Rc<std::path::Path>,\n+    bad3: Rc<[u8]>,\n+    bad4: Rc<std::ffi::OsStr>,\n+    // does not trigger lint\n+    good1: Rc<RefCell<String>>,\n+}\n+\n+// triggers lint\n+fn func_bad1(_: Rc<str>) {}\n+fn func_bad2(_: Rc<std::path::Path>) {}\n+fn func_bad3(_: Rc<[u8]>) {}\n+fn func_bad4(_: Rc<std::ffi::OsStr>) {}\n+// does not trigger lint\n+fn func_good1(_: Rc<RefCell<String>>) {}\n+\n+fn main() {}"}, {"sha": "1e63a43262ec197156ecace133090bf58a70c197", "filename": "src/tools/clippy/tests/ui/rc_buffer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n #![warn(clippy::rc_buffer)]\n+#![allow(dead_code, unused_imports)]\n \n use std::cell::RefCell;\n use std::ffi::OsString;"}, {"sha": "9ed028e3df41bf78e3f7c4d7f75cfe098ffa4b19", "filename": "src/tools/clippy/tests/ui/rc_buffer.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,49 +1,49 @@\n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:10:11\n+  --> $DIR/rc_buffer.rs:12:11\n    |\n LL |     bad1: Rc<String>,\n    |           ^^^^^^^^^^ help: try: `Rc<str>`\n    |\n    = note: `-D clippy::rc-buffer` implied by `-D warnings`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:11:11\n+  --> $DIR/rc_buffer.rs:13:11\n    |\n LL |     bad2: Rc<PathBuf>,\n    |           ^^^^^^^^^^^ help: try: `Rc<std::path::Path>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:12:11\n+  --> $DIR/rc_buffer.rs:14:11\n    |\n LL |     bad3: Rc<Vec<u8>>,\n    |           ^^^^^^^^^^^ help: try: `Rc<[u8]>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:13:11\n+  --> $DIR/rc_buffer.rs:15:11\n    |\n LL |     bad4: Rc<OsString>,\n    |           ^^^^^^^^^^^^ help: try: `Rc<std::ffi::OsStr>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:19:17\n+  --> $DIR/rc_buffer.rs:21:17\n    |\n LL | fn func_bad1(_: Rc<String>) {}\n    |                 ^^^^^^^^^^ help: try: `Rc<str>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:20:17\n+  --> $DIR/rc_buffer.rs:22:17\n    |\n LL | fn func_bad2(_: Rc<PathBuf>) {}\n    |                 ^^^^^^^^^^^ help: try: `Rc<std::path::Path>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:21:17\n+  --> $DIR/rc_buffer.rs:23:17\n    |\n LL | fn func_bad3(_: Rc<Vec<u8>>) {}\n    |                 ^^^^^^^^^^^ help: try: `Rc<[u8]>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:22:17\n+  --> $DIR/rc_buffer.rs:24:17\n    |\n LL | fn func_bad4(_: Rc<OsString>) {}\n    |                 ^^^^^^^^^^^^ help: try: `Rc<std::ffi::OsStr>`"}, {"sha": "13dd6f5fcd186a4d18d9ac6228d0b369be37d9cf", "filename": "src/tools/clippy/tests/ui/rc_buffer_arc.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer_arc.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer_arc.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer_arc.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+#![warn(clippy::rc_buffer)]\n+#![allow(dead_code, unused_imports)]\n+\n+use std::ffi::OsString;\n+use std::path::PathBuf;\n+use std::sync::{Arc, Mutex};\n+\n+struct S {\n+    // triggers lint\n+    bad1: Arc<str>,\n+    bad2: Arc<std::path::Path>,\n+    bad3: Arc<[u8]>,\n+    bad4: Arc<std::ffi::OsStr>,\n+    // does not trigger lint\n+    good1: Arc<Mutex<String>>,\n+}\n+\n+// triggers lint\n+fn func_bad1(_: Arc<str>) {}\n+fn func_bad2(_: Arc<std::path::Path>) {}\n+fn func_bad3(_: Arc<[u8]>) {}\n+fn func_bad4(_: Arc<std::ffi::OsStr>) {}\n+// does not trigger lint\n+fn func_good1(_: Arc<Mutex<String>>) {}\n+\n+fn main() {}"}, {"sha": "1a521bfeb7c8661f3a7fdabbc6759e38662e235d", "filename": "src/tools/clippy/tests/ui/rc_buffer_arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer_arc.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n #![warn(clippy::rc_buffer)]\n+#![allow(dead_code, unused_imports)]\n \n use std::ffi::OsString;\n use std::path::PathBuf;"}, {"sha": "911feea73529dcdc4f0c44bcad03125c961662ed", "filename": "src/tools/clippy/tests/ui/rc_buffer_arc.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer_arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer_arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_buffer_arc.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,49 +1,49 @@\n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:9:11\n+  --> $DIR/rc_buffer_arc.rs:11:11\n    |\n LL |     bad1: Arc<String>,\n    |           ^^^^^^^^^^^ help: try: `Arc<str>`\n    |\n    = note: `-D clippy::rc-buffer` implied by `-D warnings`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:10:11\n+  --> $DIR/rc_buffer_arc.rs:12:11\n    |\n LL |     bad2: Arc<PathBuf>,\n    |           ^^^^^^^^^^^^ help: try: `Arc<std::path::Path>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:11:11\n+  --> $DIR/rc_buffer_arc.rs:13:11\n    |\n LL |     bad3: Arc<Vec<u8>>,\n    |           ^^^^^^^^^^^^ help: try: `Arc<[u8]>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:12:11\n+  --> $DIR/rc_buffer_arc.rs:14:11\n    |\n LL |     bad4: Arc<OsString>,\n    |           ^^^^^^^^^^^^^ help: try: `Arc<std::ffi::OsStr>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:18:17\n+  --> $DIR/rc_buffer_arc.rs:20:17\n    |\n LL | fn func_bad1(_: Arc<String>) {}\n    |                 ^^^^^^^^^^^ help: try: `Arc<str>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:19:17\n+  --> $DIR/rc_buffer_arc.rs:21:17\n    |\n LL | fn func_bad2(_: Arc<PathBuf>) {}\n    |                 ^^^^^^^^^^^^ help: try: `Arc<std::path::Path>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:20:17\n+  --> $DIR/rc_buffer_arc.rs:22:17\n    |\n LL | fn func_bad3(_: Arc<Vec<u8>>) {}\n    |                 ^^^^^^^^^^^^ help: try: `Arc<[u8]>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:21:17\n+  --> $DIR/rc_buffer_arc.rs:23:17\n    |\n LL | fn func_bad4(_: Arc<OsString>) {}\n    |                 ^^^^^^^^^^^^^ help: try: `Arc<std::ffi::OsStr>`"}, {"sha": "cd7d91e120650490baffe5d139617c71c851f723", "filename": "src/tools/clippy/tests/ui/rc_clone_in_vec_init/arc.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,4 +1,4 @@\n-error: calling `Arc::new` in `vec![elem; len]`\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n   --> $DIR/arc.rs:7:13\n    |\n LL |     let v = vec![Arc::new(\"x\".to_string()); 2];\n@@ -10,19 +10,19 @@ help: consider initializing each `Arc` element individually\n    |\n LL ~     let v = {\n LL +         let mut v = Vec::with_capacity(2);\n-LL +         (0..2).for_each(|_| v.push(Arc::new(\"x\".to_string())));\n+LL +         (0..2).for_each(|_| v.push(Arc::new(..)));\n LL +         v\n LL ~     };\n    |\n help: or if this is intentional, consider extracting the `Arc` initialization to a variable\n    |\n LL ~     let v = {\n-LL +         let data = Arc::new(\"x\".to_string());\n+LL +         let data = Arc::new(..);\n LL +         vec![data; 2]\n LL ~     };\n    |\n \n-error: calling `Arc::new` in `vec![elem; len]`\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n   --> $DIR/arc.rs:15:21\n    |\n LL |             let v = vec![Arc::new(\"x\".to_string()); 2];\n@@ -33,19 +33,19 @@ help: consider initializing each `Arc` element individually\n    |\n LL ~             let v = {\n LL +                 let mut v = Vec::with_capacity(2);\n-LL +                 (0..2).for_each(|_| v.push(Arc::new(\"x\".to_string())));\n+LL +                 (0..2).for_each(|_| v.push(Arc::new(..)));\n LL +                 v\n LL ~             };\n    |\n help: or if this is intentional, consider extracting the `Arc` initialization to a variable\n    |\n LL ~             let v = {\n-LL +                 let data = Arc::new(\"x\".to_string());\n+LL +                 let data = Arc::new(..);\n LL +                 vec![data; 2]\n LL ~             };\n    |\n \n-error: calling `Arc::new` in `vec![elem; len]`\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n   --> $DIR/arc.rs:21:13\n    |\n LL |       let v = vec![\n@@ -75,7 +75,7 @@ LL +         vec![data; 2]\n LL ~     };\n    |\n \n-error: calling `Arc::new` in `vec![elem; len]`\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n   --> $DIR/arc.rs:30:14\n    |\n LL |       let v1 = vec!["}, {"sha": "fe861afe05491fff24dce5fd21623278fe882e61", "filename": "src/tools/clippy/tests/ui/rc_clone_in_vec_init/rc.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,4 +1,4 @@\n-error: calling `Rc::new` in `vec![elem; len]`\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n   --> $DIR/rc.rs:8:13\n    |\n LL |     let v = vec![Rc::new(\"x\".to_string()); 2];\n@@ -10,19 +10,19 @@ help: consider initializing each `Rc` element individually\n    |\n LL ~     let v = {\n LL +         let mut v = Vec::with_capacity(2);\n-LL +         (0..2).for_each(|_| v.push(Rc::new(\"x\".to_string())));\n+LL +         (0..2).for_each(|_| v.push(Rc::new(..)));\n LL +         v\n LL ~     };\n    |\n help: or if this is intentional, consider extracting the `Rc` initialization to a variable\n    |\n LL ~     let v = {\n-LL +         let data = Rc::new(\"x\".to_string());\n+LL +         let data = Rc::new(..);\n LL +         vec![data; 2]\n LL ~     };\n    |\n \n-error: calling `Rc::new` in `vec![elem; len]`\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n   --> $DIR/rc.rs:16:21\n    |\n LL |             let v = vec![Rc::new(\"x\".to_string()); 2];\n@@ -33,19 +33,19 @@ help: consider initializing each `Rc` element individually\n    |\n LL ~             let v = {\n LL +                 let mut v = Vec::with_capacity(2);\n-LL +                 (0..2).for_each(|_| v.push(Rc::new(\"x\".to_string())));\n+LL +                 (0..2).for_each(|_| v.push(Rc::new(..)));\n LL +                 v\n LL ~             };\n    |\n help: or if this is intentional, consider extracting the `Rc` initialization to a variable\n    |\n LL ~             let v = {\n-LL +                 let data = Rc::new(\"x\".to_string());\n+LL +                 let data = Rc::new(..);\n LL +                 vec![data; 2]\n LL ~             };\n    |\n \n-error: calling `Rc::new` in `vec![elem; len]`\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n   --> $DIR/rc.rs:22:13\n    |\n LL |       let v = vec![\n@@ -75,7 +75,7 @@ LL +         vec![data; 2]\n LL ~     };\n    |\n \n-error: calling `Rc::new` in `vec![elem; len]`\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n   --> $DIR/rc.rs:31:14\n    |\n LL |       let v1 = vec!["}, {"sha": "693c9b553c562fdeaf28629f2ae269b08f7e68bd", "filename": "src/tools/clippy/tests/ui/rc_clone_in_vec_init/weak.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Fweak.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,83 @@\n+#![warn(clippy::rc_clone_in_vec_init)]\n+use std::rc::{Rc, Weak as UnSyncWeak};\n+use std::sync::{Arc, Mutex, Weak as SyncWeak};\n+\n+fn main() {}\n+\n+fn should_warn_simple_case() {\n+    let v = vec![SyncWeak::<u32>::new(); 2];\n+    let v2 = vec![UnSyncWeak::<u32>::new(); 2];\n+\n+    let v = vec![Rc::downgrade(&Rc::new(\"x\".to_string())); 2];\n+    let v = vec![Arc::downgrade(&Arc::new(\"x\".to_string())); 2];\n+}\n+\n+fn should_warn_simple_case_with_big_indentation() {\n+    if true {\n+        let k = 1;\n+        dbg!(k);\n+        if true {\n+            let v = vec![Arc::downgrade(&Arc::new(\"x\".to_string())); 2];\n+            let v2 = vec![Rc::downgrade(&Rc::new(\"x\".to_string())); 2];\n+        }\n+    }\n+}\n+\n+fn should_warn_complex_case() {\n+    let v = vec![\n+        Arc::downgrade(&Arc::new(Mutex::new({\n+            let x = 1;\n+            dbg!(x);\n+            x\n+        })));\n+        2\n+    ];\n+\n+    let v1 = vec![\n+        Rc::downgrade(&Rc::new(Mutex::new({\n+            let x = 1;\n+            dbg!(x);\n+            x\n+        })));\n+        2\n+    ];\n+}\n+\n+fn should_not_warn_custom_weak() {\n+    #[derive(Clone)]\n+    struct Weak;\n+\n+    impl Weak {\n+        fn new() -> Self {\n+            Weak\n+        }\n+    }\n+\n+    let v = vec![Weak::new(); 2];\n+}\n+\n+fn should_not_warn_vec_from_elem_but_not_weak() {\n+    let v = vec![String::new(); 2];\n+    let v1 = vec![1; 2];\n+    let v2 = vec![\n+        Box::new(Arc::downgrade(&Arc::new({\n+            let y = 3;\n+            dbg!(y);\n+            y\n+        })));\n+        2\n+    ];\n+    let v3 = vec![\n+        Box::new(Rc::downgrade(&Rc::new({\n+            let y = 3;\n+            dbg!(y);\n+            y\n+        })));\n+        2\n+    ];\n+}\n+\n+fn should_not_warn_vec_macro_but_not_from_elem() {\n+    let v = vec![Arc::downgrade(&Arc::new(\"x\".to_string()))];\n+    let v = vec![Rc::downgrade(&Rc::new(\"x\".to_string()))];\n+}"}, {"sha": "4a21946ccdfa8dd74f25b2889055ae66c4a7366a", "filename": "src/tools/clippy/tests/ui/rc_clone_in_vec_init/weak.stderr", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Fweak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Fweak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Fweak.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,201 @@\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n+  --> $DIR/weak.rs:8:13\n+   |\n+LL |     let v = vec![SyncWeak::<u32>::new(); 2];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n+   = note: each element will point to the same `Weak` instance\n+help: consider initializing each `Weak` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(SyncWeak::<u32>::new(..)));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Weak` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = SyncWeak::<u32>::new(..);\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n+  --> $DIR/weak.rs:9:14\n+   |\n+LL |     let v2 = vec![UnSyncWeak::<u32>::new(); 2];\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: each element will point to the same `Weak` instance\n+help: consider initializing each `Weak` element individually\n+   |\n+LL ~     let v2 = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(UnSyncWeak::<u32>::new(..)));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Weak` initialization to a variable\n+   |\n+LL ~     let v2 = {\n+LL +         let data = UnSyncWeak::<u32>::new(..);\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n+  --> $DIR/weak.rs:11:13\n+   |\n+LL |     let v = vec![Rc::downgrade(&Rc::new(\"x\".to_string())); 2];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: each element will point to the same `Weak` instance\n+help: consider initializing each `Weak` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(Rc::downgrade(..)));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Weak` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = Rc::downgrade(..);\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n+  --> $DIR/weak.rs:12:13\n+   |\n+LL |     let v = vec![Arc::downgrade(&Arc::new(\"x\".to_string())); 2];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: each element will point to the same `Weak` instance\n+help: consider initializing each `Weak` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(Arc::downgrade(..)));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Weak` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = Arc::downgrade(..);\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n+  --> $DIR/weak.rs:20:21\n+   |\n+LL |             let v = vec![Arc::downgrade(&Arc::new(\"x\".to_string())); 2];\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: each element will point to the same `Weak` instance\n+help: consider initializing each `Weak` element individually\n+   |\n+LL ~             let v = {\n+LL +                 let mut v = Vec::with_capacity(2);\n+LL +                 (0..2).for_each(|_| v.push(Arc::downgrade(..)));\n+LL +                 v\n+LL ~             };\n+   |\n+help: or if this is intentional, consider extracting the `Weak` initialization to a variable\n+   |\n+LL ~             let v = {\n+LL +                 let data = Arc::downgrade(..);\n+LL +                 vec![data; 2]\n+LL ~             };\n+   |\n+\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n+  --> $DIR/weak.rs:21:22\n+   |\n+LL |             let v2 = vec![Rc::downgrade(&Rc::new(\"x\".to_string())); 2];\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: each element will point to the same `Weak` instance\n+help: consider initializing each `Weak` element individually\n+   |\n+LL ~             let v2 = {\n+LL +                 let mut v = Vec::with_capacity(2);\n+LL +                 (0..2).for_each(|_| v.push(Rc::downgrade(..)));\n+LL +                 v\n+LL ~             };\n+   |\n+help: or if this is intentional, consider extracting the `Weak` initialization to a variable\n+   |\n+LL ~             let v2 = {\n+LL +                 let data = Rc::downgrade(..);\n+LL +                 vec![data; 2]\n+LL ~             };\n+   |\n+\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n+  --> $DIR/weak.rs:27:13\n+   |\n+LL |       let v = vec![\n+   |  _____________^\n+LL | |         Arc::downgrade(&Arc::new(Mutex::new({\n+LL | |             let x = 1;\n+LL | |             dbg!(x);\n+...  |\n+LL | |         2\n+LL | |     ];\n+   | |_____^\n+   |\n+   = note: each element will point to the same `Weak` instance\n+help: consider initializing each `Weak` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(Arc::downgrade(..)));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Weak` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = Arc::downgrade(..);\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: initializing a reference-counted pointer in `vec![elem; len]`\n+  --> $DIR/weak.rs:36:14\n+   |\n+LL |       let v1 = vec![\n+   |  ______________^\n+LL | |         Rc::downgrade(&Rc::new(Mutex::new({\n+LL | |             let x = 1;\n+LL | |             dbg!(x);\n+...  |\n+LL | |         2\n+LL | |     ];\n+   | |_____^\n+   |\n+   = note: each element will point to the same `Weak` instance\n+help: consider initializing each `Weak` element individually\n+   |\n+LL ~     let v1 = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(Rc::downgrade(..)));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Weak` initialization to a variable\n+   |\n+LL ~     let v1 = {\n+LL +         let data = Rc::downgrade(..);\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "cb6ba36b14c809df2179f8f74f5d957de36c5dfe", "filename": "src/tools/clippy/tests/ui/recursive_format_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -2,7 +2,8 @@\n #![allow(\n     clippy::inherent_to_string_shadow_display,\n     clippy::to_string_in_format_args,\n-    clippy::deref_addrof\n+    clippy::deref_addrof,\n+    clippy::borrow_deref_ref\n )]\n \n use std::fmt;"}, {"sha": "84ce69df566968125334727af37af854056bf43e", "filename": "src/tools/clippy/tests/ui/recursive_format_impl.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,77 +1,77 @@\n error: using `self.to_string` in `fmt::Display` implementation will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:29:25\n+  --> $DIR/recursive_format_impl.rs:30:25\n    |\n LL |         write!(f, \"{}\", self.to_string())\n    |                         ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::recursive-format-impl` implied by `-D warnings`\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:73:9\n+  --> $DIR/recursive_format_impl.rs:74:9\n    |\n LL |         write!(f, \"{}\", self)\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:82:9\n+  --> $DIR/recursive_format_impl.rs:83:9\n    |\n LL |         write!(f, \"{}\", &self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Debug` in `impl Debug` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:88:9\n+  --> $DIR/recursive_format_impl.rs:89:9\n    |\n LL |         write!(f, \"{:?}\", &self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:97:9\n+  --> $DIR/recursive_format_impl.rs:98:9\n    |\n LL |         write!(f, \"{}\", &&&self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:171:9\n+  --> $DIR/recursive_format_impl.rs:172:9\n    |\n LL |         write!(f, \"{}\", &*self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Debug` in `impl Debug` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:177:9\n+  --> $DIR/recursive_format_impl.rs:178:9\n    |\n LL |         write!(f, \"{:?}\", &*self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:193:9\n+  --> $DIR/recursive_format_impl.rs:194:9\n    |\n LL |         write!(f, \"{}\", *self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:209:9\n+  --> $DIR/recursive_format_impl.rs:210:9\n    |\n LL |         write!(f, \"{}\", **&&*self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n-  --> $DIR/recursive_format_impl.rs:225:9\n+  --> $DIR/recursive_format_impl.rs:226:9\n    |\n LL |         write!(f, \"{}\", &&**&&*self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1fa9fc749a96a1fb1be91ef95e5fbddda482ae30", "filename": "src/tools/clippy/tests/ui/shadow.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshadow.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -88,4 +88,11 @@ pub async fn foo2(_a: i32, _b: i64) {\n     let _b = _a;\n }\n \n+fn ice_8748() {\n+    let _ = [0; {\n+        let x = 1;\n+        if let Some(x) = Some(1) { x } else { 1 }\n+    }];\n+}\n+\n fn main() {}"}, {"sha": "4347610f393f38678303b3f9684708369fc559ab", "filename": "src/tools/clippy/tests/ui/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -7,8 +7,10 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n \n+use std::num::ParseIntError;\n use std::ops::Deref;\n use std::sync::atomic::{AtomicU64, Ordering};\n+use std::sync::RwLock;\n use std::sync::{Mutex, MutexGuard};\n \n struct State {}\n@@ -552,4 +554,41 @@ fn should_not_cause_stack_overflow() {\n     }\n }\n \n+fn should_not_produce_lint_for_try_desugar() -> Result<u64, ParseIntError> {\n+    // TryDesugar (i.e. using `?` for a Result type) will turn into a match but is out of scope\n+    // for this lint\n+    let rwlock = RwLock::new(\"1\".to_string());\n+    let result = rwlock.read().unwrap().parse::<u64>()?;\n+    println!(\"{}\", result);\n+    rwlock.write().unwrap().push('2');\n+    Ok(result)\n+}\n+\n+struct ResultReturner {\n+    s: String,\n+}\n+\n+impl ResultReturner {\n+    fn to_number(&self) -> Result<i64, ParseIntError> {\n+        self.s.parse::<i64>()\n+    }\n+}\n+\n+fn should_trigger_lint_for_non_ref_move_and_clone_suggestion() {\n+    let rwlock = RwLock::<ResultReturner>::new(ResultReturner { s: \"1\".to_string() });\n+    match rwlock.read().unwrap().to_number() {\n+        Ok(n) => println!(\"Converted to number: {}\", n),\n+        Err(e) => println!(\"Could not convert {} to number\", e),\n+    };\n+}\n+\n+fn should_trigger_lint_for_read_write_lock_for_loop() {\n+    // For-in loops desugar to match expressions and are prone to the type of deadlock this lint is\n+    // designed to look for.\n+    let rwlock = RwLock::<Vec<String>>::new(vec![\"1\".to_string()]);\n+    for s in rwlock.read().unwrap().iter() {\n+        println!(\"{}\", s);\n+    }\n+}\n+\n fn main() {}"}, {"sha": "303f3c1df033cfcd1100747da442bccd82ef5ab3", "filename": "src/tools/clippy/tests/ui/significant_drop_in_scrutinee.stderr", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,5 @@\n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:57:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:59:11\n    |\n LL |     match mutex.lock().unwrap().foo() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -12,7 +12,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:130:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:132:11\n    |\n LL |     match s.lock_m().get_the_value() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -24,7 +24,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:151:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:153:11\n    |\n LL |     match s.lock_m_m().get_the_value() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:199:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:201:11\n    |\n LL |     match counter.temp_increment().len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -48,7 +48,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:222:16\n+  --> $DIR/significant_drop_in_scrutinee.rs:224:16\n    |\n LL |         match (mutex1.lock().unwrap().s.len(), true) {\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL ~         match (value, true) {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:231:22\n+  --> $DIR/significant_drop_in_scrutinee.rs:233:22\n    |\n LL |         match (true, mutex1.lock().unwrap().s.len(), true) {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL ~         match (true, value, true) {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:241:16\n+  --> $DIR/significant_drop_in_scrutinee.rs:243:16\n    |\n LL |         match (mutex1.lock().unwrap().s.len(), true, mutex2.lock().unwrap().s.len()) {\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -84,7 +84,7 @@ LL ~         match (value, true, mutex2.lock().unwrap().s.len()) {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:241:54\n+  --> $DIR/significant_drop_in_scrutinee.rs:243:54\n    |\n LL |         match (mutex1.lock().unwrap().s.len(), true, mutex2.lock().unwrap().s.len()) {\n    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -96,19 +96,19 @@ LL ~         match (mutex1.lock().unwrap().s.len(), true, value) {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:252:15\n+  --> $DIR/significant_drop_in_scrutinee.rs:254:15\n    |\n LL |         match mutex3.lock().unwrap().s.as_str() {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:262:22\n+  --> $DIR/significant_drop_in_scrutinee.rs:264:22\n    |\n LL |         match (true, mutex3.lock().unwrap().s.as_str()) {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:281:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:283:11\n    |\n LL |     match mutex.lock().unwrap().s.len() > 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:288:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:290:11\n    |\n LL |     match 1 < mutex.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -132,7 +132,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:306:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:308:11\n    |\n LL |     match mutex1.lock().unwrap().s.len() < mutex2.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -144,7 +144,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:317:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:319:11\n    |\n LL |     match mutex1.lock().unwrap().s.len() >= mutex2.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -156,7 +156,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:352:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:354:11\n    |\n LL |     match get_mutex_guard().s.len() > 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -168,7 +168,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:369:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:371:11\n    |\n LL |       match match i {\n    |  ___________^\n@@ -191,7 +191,7 @@ LL +     .len()\n  ...\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:395:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:397:11\n    |\n LL |       match if i > 1 {\n    |  ___________^\n@@ -214,7 +214,7 @@ LL +     .s\n  ...\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:449:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:451:11\n    |\n LL |     match s.lock().deref().deref() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -226,13 +226,13 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:477:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:479:11\n    |\n LL |     match s.lock().deref().deref() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:496:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:498:11\n    |\n LL |     match mutex.lock().unwrap().i = i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -244,7 +244,7 @@ LL ~     match () {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:502:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:504:11\n    |\n LL |     match i = mutex.lock().unwrap().i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -256,7 +256,7 @@ LL ~     match () {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:508:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:510:11\n    |\n LL |     match mutex.lock().unwrap().i += 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -268,7 +268,7 @@ LL ~     match () {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:514:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:516:11\n    |\n LL |     match i += mutex.lock().unwrap().i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -279,5 +279,17 @@ LL ~     i += mutex.lock().unwrap().i;\n LL ~     match () {\n    |\n \n-error: aborting due to 23 previous errors\n+error: temporary with significant drop in match scrutinee\n+  --> $DIR/significant_drop_in_scrutinee.rs:579:11\n+   |\n+LL |     match rwlock.read().unwrap().to_number() {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: temporary with significant drop in for loop\n+  --> $DIR/significant_drop_in_scrutinee.rs:589:14\n+   |\n+LL |     for s in rwlock.read().unwrap().iter() {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 25 previous errors\n "}, {"sha": "ede8a39fed718f9143223ebe1c1f89aa5363fbde", "filename": "src/tools/clippy/tests/ui/suspicious_operation_groupings.fixed", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,209 @@\n+// run-rustfix\n+#![warn(clippy::suspicious_operation_groupings)]\n+#![allow(dead_code, unused_parens, clippy::eq_op)]\n+\n+struct Vec3 {\n+    x: f64,\n+    y: f64,\n+    z: f64,\n+}\n+\n+impl Eq for Vec3 {}\n+\n+impl PartialEq for Vec3 {\n+    fn eq(&self, other: &Self) -> bool {\n+        // This should trigger the lint because `self.x` is compared to `other.y`\n+        self.x == other.x && self.y == other.y && self.z == other.z\n+    }\n+}\n+\n+struct S {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+}\n+\n+fn buggy_ab_cmp(s1: &S, s2: &S) -> bool {\n+    // There's no `s1.b`\n+    s1.a < s2.a && s1.b < s2.b\n+}\n+\n+struct SaOnly {\n+    a: i32,\n+}\n+\n+impl S {\n+    fn a(&self) -> i32 {\n+        0\n+    }\n+}\n+\n+fn do_not_give_bad_suggestions_for_this_unusual_expr(s1: &S, s2: &SaOnly) -> bool {\n+    // This is superficially similar to `buggy_ab_cmp`, but we should not suggest\n+    // `s2.b` since that is invalid.\n+    s1.a < s2.a && s1.a() < s1.b\n+}\n+\n+fn do_not_give_bad_suggestions_for_this_macro_expr(s1: &S, s2: &SaOnly) -> bool {\n+    macro_rules! s1 {\n+        () => {\n+            S {\n+                a: 1,\n+                b: 1,\n+                c: 1,\n+                d: 1,\n+            }\n+        };\n+    }\n+\n+    // This is superficially similar to `buggy_ab_cmp`, but we should not suggest\n+    // `s2.b` since that is invalid.\n+    s1.a < s2.a && s1!().a < s1.b\n+}\n+\n+fn do_not_give_bad_suggestions_for_this_incorrect_expr(s1: &S, s2: &SaOnly) -> bool {\n+    // There's two `s1.b`, but we should not suggest `s2.b` since that is invalid\n+    s1.a < s2.a && s1.b < s1.b\n+}\n+\n+fn permissable(s1: &S, s2: &S) -> bool {\n+    // Something like this seems like it might actually be what is desired.\n+    s1.a == s2.b\n+}\n+\n+fn non_boolean_operators(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c + s1.d * s2.d\n+}\n+\n+fn odd_number_of_pairs(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.b`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_middle_change_left(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_middle_change_right(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.b`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_start(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.a`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_end(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c\n+}\n+\n+fn the_cross_product_should_not_lint(s1: &S, s2: &S) -> (i32, i32, i32) {\n+    (\n+        s1.b * s2.c - s1.c * s2.b,\n+        s1.c * s2.a - s1.a * s2.c,\n+        s1.a * s2.b - s1.b * s2.a,\n+    )\n+}\n+\n+fn outer_parens_simple(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.b`\n+    (s1.a * s2.a + s1.b * s2.b)\n+}\n+\n+fn outer_parens(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (s1.a * s2.a + s1.b * s2.b + s1.c * s2.c + s1.d * s2.d)\n+}\n+\n+fn inner_parens(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.c) + (s1.d * s2.d)\n+}\n+\n+fn outer_and_some_inner_parens(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    ((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.c) + (s1.d * s2.d))\n+}\n+\n+fn all_parens_balanced_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (((s1.a * s2.a) + (s1.b * s2.b)) + ((s1.c * s2.c) + (s1.d * s2.d)))\n+}\n+\n+fn all_parens_left_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.c)) + (s1.d * s2.d))\n+}\n+\n+fn all_parens_right_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    ((s1.a * s2.a) + ((s1.b * s2.b) + (s1.c * s2.c) + (s1.d * s2.d)))\n+}\n+\n+fn inside_other_binop_expression(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    (s1.a * s2.a + s1.b * s2.b) / 2\n+}\n+\n+fn inside_function_call(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    i32::swap_bytes(s1.a * s2.a + s1.b * s2.b)\n+}\n+\n+fn inside_larger_boolean_expression(s1: &S, s2: &S) -> bool {\n+    // There's no `s1.c`\n+    s1.a > 0 && s1.b > 0 && s1.c == s2.c && s1.d == s2.d\n+}\n+\n+fn inside_larger_boolean_expression_with_unsorted_ops(s1: &S, s2: &S) -> bool {\n+    // There's no `s1.c`\n+    s1.a > 0 && s1.c == s2.c && s1.b > 0 && s1.d == s2.d\n+}\n+\n+struct Nested {\n+    inner: ((i32,), (i32,), (i32,)),\n+}\n+\n+fn changed_middle_ident(n1: &Nested, n2: &Nested) -> bool {\n+    // There's no `n2.inner.2.0`\n+    (n1.inner.0).0 == (n2.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.2).0\n+}\n+\n+// `eq_op` should catch this one.\n+fn changed_initial_ident(n1: &Nested, n2: &Nested) -> bool {\n+    // There's no `n2.inner.0.0`\n+    (n1.inner.0).0 == (n1.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.2).0\n+}\n+\n+fn inside_fn_with_similar_expression(s1: &S, s2: &S, strict: bool) -> bool {\n+    if strict {\n+        s1.a < s2.a && s1.b < s2.b\n+    } else {\n+        // There's no `s1.b` in this subexpression\n+        s1.a <= s2.a && s1.b <= s2.b\n+    }\n+}\n+\n+fn inside_an_if_statement(s1: &mut S, s2: &S) {\n+    // There's no `s1.b`\n+    if s1.a < s2.a && s1.b < s2.b {\n+        s1.c = s2.c;\n+    }\n+}\n+\n+fn maximum_unary_minus_right_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    -(-(-s1.a * -s2.a) + (-(-s1.b * -s2.b) + -(-s1.c * -s2.c) + -(-s1.d * -s2.d)))\n+}\n+\n+fn unary_minus_and_an_if_expression(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    -(if -s1.a < -s2.a && -s1.b < -s2.b { s1.c } else { s2.a })\n+}\n+\n+fn main() {}"}, {"sha": "26ce97bb37f84b5bf07ed1dfd52721e83a92517e", "filename": "src/tools/clippy/tests/ui/suspicious_operation_groupings.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![warn(clippy::suspicious_operation_groupings)]\n-#![allow(clippy::eq_op)]\n+#![allow(dead_code, unused_parens, clippy::eq_op)]\n \n struct Vec3 {\n     x: f64,"}, {"sha": "29f229245fed305d0477825641094deff7363c40", "filename": "src/tools/clippy/tests/ui/suspicious_operation_groupings.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_operation_groupings.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,157 +1,157 @@\n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:15:9\n+  --> $DIR/suspicious_operation_groupings.rs:16:9\n    |\n LL |         self.x == other.y && self.y == other.y && self.z == other.z\n    |         ^^^^^^^^^^^^^^^^^ help: did you mean: `self.x == other.x`\n    |\n    = note: `-D clippy::suspicious-operation-groupings` implied by `-D warnings`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:28:20\n+  --> $DIR/suspicious_operation_groupings.rs:29:20\n    |\n LL |     s1.a < s2.a && s1.a < s2.b\n    |                    ^^^^^^^^^^^ help: did you mean: `s1.b < s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:76:33\n+  --> $DIR/suspicious_operation_groupings.rs:77:33\n    |\n LL |     s1.a * s2.a + s1.b * s2.b + s1.c * s2.b + s1.d * s2.d\n    |                                 ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:81:19\n+  --> $DIR/suspicious_operation_groupings.rs:82:19\n    |\n LL |     s1.a * s2.a + s1.b * s2.c + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:81:19\n+  --> $DIR/suspicious_operation_groupings.rs:82:19\n    |\n LL |     s1.a * s2.a + s1.b * s2.c + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:86:19\n+  --> $DIR/suspicious_operation_groupings.rs:87:19\n    |\n LL |     s1.a * s2.a + s2.b * s2.b + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:91:19\n+  --> $DIR/suspicious_operation_groupings.rs:92:19\n    |\n LL |     s1.a * s2.a + s1.b * s1.b + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:96:5\n+  --> $DIR/suspicious_operation_groupings.rs:97:5\n    |\n LL |     s1.a * s1.a + s1.b * s2.b + s1.c * s2.c\n    |     ^^^^^^^^^^^ help: did you mean: `s1.a * s2.a`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:101:33\n+  --> $DIR/suspicious_operation_groupings.rs:102:33\n    |\n LL |     s1.a * s2.a + s1.b * s2.b + s1.c * s1.c\n    |                                 ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:114:20\n+  --> $DIR/suspicious_operation_groupings.rs:115:20\n    |\n LL |     (s1.a * s2.a + s1.b * s1.b)\n    |                    ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:119:34\n+  --> $DIR/suspicious_operation_groupings.rs:120:34\n    |\n LL |     (s1.a * s2.a + s1.b * s2.b + s1.c * s2.b + s1.d * s2.d)\n    |                                  ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:124:38\n+  --> $DIR/suspicious_operation_groupings.rs:125:38\n    |\n LL |     (s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d)\n    |                                      ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:129:39\n+  --> $DIR/suspicious_operation_groupings.rs:130:39\n    |\n LL |     ((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d))\n    |                                       ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:134:42\n+  --> $DIR/suspicious_operation_groupings.rs:135:42\n    |\n LL |     (((s1.a * s2.a) + (s1.b * s2.b)) + ((s1.c * s2.b) + (s1.d * s2.d)))\n    |                                          ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:134:42\n+  --> $DIR/suspicious_operation_groupings.rs:135:42\n    |\n LL |     (((s1.a * s2.a) + (s1.b * s2.b)) + ((s1.c * s2.b) + (s1.d * s2.d)))\n    |                                          ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:139:40\n+  --> $DIR/suspicious_operation_groupings.rs:140:40\n    |\n LL |     (((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b)) + (s1.d * s2.d))\n    |                                        ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:144:40\n+  --> $DIR/suspicious_operation_groupings.rs:145:40\n    |\n LL |     ((s1.a * s2.a) + ((s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d)))\n    |                                        ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:149:20\n+  --> $DIR/suspicious_operation_groupings.rs:150:20\n    |\n LL |     (s1.a * s2.a + s2.b * s2.b) / 2\n    |                    ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:154:35\n+  --> $DIR/suspicious_operation_groupings.rs:155:35\n    |\n LL |     i32::swap_bytes(s1.a * s2.a + s2.b * s2.b)\n    |                                   ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:159:29\n+  --> $DIR/suspicious_operation_groupings.rs:160:29\n    |\n LL |     s1.a > 0 && s1.b > 0 && s1.d == s2.c && s1.d == s2.d\n    |                             ^^^^^^^^^^^^ help: did you mean: `s1.c == s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:164:17\n+  --> $DIR/suspicious_operation_groupings.rs:165:17\n    |\n LL |     s1.a > 0 && s1.d == s2.c && s1.b > 0 && s1.d == s2.d\n    |                 ^^^^^^^^^^^^ help: did you mean: `s1.c == s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:173:77\n+  --> $DIR/suspicious_operation_groupings.rs:174:77\n    |\n LL |     (n1.inner.0).0 == (n2.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.1).0\n    |                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean: `(n1.inner.2).0 == (n2.inner.2).0`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:187:25\n+  --> $DIR/suspicious_operation_groupings.rs:188:25\n    |\n LL |         s1.a <= s2.a && s1.a <= s2.b\n    |                         ^^^^^^^^^^^^ help: did you mean: `s1.b <= s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:193:23\n+  --> $DIR/suspicious_operation_groupings.rs:194:23\n    |\n LL |     if s1.a < s2.a && s1.a < s2.b {\n    |                       ^^^^^^^^^^^ help: did you mean: `s1.b < s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:200:48\n+  --> $DIR/suspicious_operation_groupings.rs:201:48\n    |\n LL |     -(-(-s1.a * -s2.a) + (-(-s1.b * -s2.b) + -(-s1.c * -s2.b) + -(-s1.d * -s2.d)))\n    |                                                ^^^^^^^^^^^^^ help: did you mean: `-s1.c * -s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:205:27\n+  --> $DIR/suspicious_operation_groupings.rs:206:27\n    |\n LL |     -(if -s1.a < -s2.a && -s1.a < -s2.b { s1.c } else { s2.a })\n    |                           ^^^^^^^^^^^^^ help: did you mean: `-s1.b < -s2.b`"}, {"sha": "596b6ee919bb458c2ef71a9fdd8415bdfc6b1071", "filename": "src/tools/clippy/tests/ui/swap_ptr_to_ref.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+#![warn(clippy::swap_ptr_to_ref)]\n+\n+use core::ptr::addr_of_mut;\n+\n+fn main() {\n+    let mut x = 0u32;\n+    let y: *mut _ = &mut x;\n+    let z: *mut _ = &mut x;\n+\n+    unsafe {\n+        core::ptr::swap(y, z);\n+        core::ptr::swap(y, &mut x);\n+        core::ptr::swap(&mut x, y);\n+        core::ptr::swap(addr_of_mut!(x), addr_of_mut!(x));\n+    }\n+\n+    let y = &mut x;\n+    let mut z = 0u32;\n+    let z = &mut z;\n+\n+    core::mem::swap(y, z);\n+}"}, {"sha": "282f571211d957cbddfd5c2dc525f1713bbcbaad", "filename": "src/tools/clippy/tests/ui/swap_ptr_to_ref.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+#![warn(clippy::swap_ptr_to_ref)]\n+\n+use core::ptr::addr_of_mut;\n+\n+fn main() {\n+    let mut x = 0u32;\n+    let y: *mut _ = &mut x;\n+    let z: *mut _ = &mut x;\n+\n+    unsafe {\n+        core::mem::swap(&mut *y, &mut *z);\n+        core::mem::swap(&mut *y, &mut x);\n+        core::mem::swap(&mut x, &mut *y);\n+        core::mem::swap(&mut *addr_of_mut!(x), &mut *addr_of_mut!(x));\n+    }\n+\n+    let y = &mut x;\n+    let mut z = 0u32;\n+    let z = &mut z;\n+\n+    core::mem::swap(y, z);\n+}"}, {"sha": "401ce070869a230c434fe7ed6d4ca594550df348", "filename": "src/tools/clippy/tests/ui/swap_ptr_to_ref.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,28 @@\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref.rs:13:9\n+   |\n+LL |         core::mem::swap(&mut *y, &mut *z);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use ptr::swap: `core::ptr::swap(y, z)`\n+   |\n+   = note: `-D clippy::swap-ptr-to-ref` implied by `-D warnings`\n+\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref.rs:14:9\n+   |\n+LL |         core::mem::swap(&mut *y, &mut x);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use ptr::swap: `core::ptr::swap(y, &mut x)`\n+\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref.rs:15:9\n+   |\n+LL |         core::mem::swap(&mut x, &mut *y);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use ptr::swap: `core::ptr::swap(&mut x, y)`\n+\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref.rs:16:9\n+   |\n+LL |         core::mem::swap(&mut *addr_of_mut!(x), &mut *addr_of_mut!(x));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use ptr::swap: `core::ptr::swap(addr_of_mut!(x), addr_of_mut!(x))`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "66ea7c6529bd2b2bc6170b400351b4bc8692bc56", "filename": "src/tools/clippy/tests/ui/swap_ptr_to_ref_unfixable.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref_unfixable.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,18 @@\n+#![warn(clippy::swap_ptr_to_ref)]\n+\n+macro_rules! addr_of_mut_to_ref {\n+    ($e:expr) => {\n+        &mut *core::ptr::addr_of_mut!($e)\n+    };\n+}\n+\n+fn main() {\n+    let mut x = 0u32;\n+    let y: *mut _ = &mut x;\n+\n+    unsafe {\n+        core::mem::swap(addr_of_mut_to_ref!(x), &mut *y);\n+        core::mem::swap(&mut *y, addr_of_mut_to_ref!(x));\n+        core::mem::swap(addr_of_mut_to_ref!(x), addr_of_mut_to_ref!(x));\n+    }\n+}"}, {"sha": "c261205d556e49225122c8be41e7a46a2e6832a5", "filename": "src/tools/clippy/tests/ui/swap_ptr_to_ref_unfixable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fswap_ptr_to_ref_unfixable.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,22 @@\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref_unfixable.rs:14:9\n+   |\n+LL |         core::mem::swap(addr_of_mut_to_ref!(x), &mut *y);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::swap-ptr-to-ref` implied by `-D warnings`\n+\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref_unfixable.rs:15:9\n+   |\n+LL |         core::mem::swap(&mut *y, addr_of_mut_to_ref!(x));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: call to `core::mem::swap` with a parameter derived from a raw pointer\n+  --> $DIR/swap_ptr_to_ref_unfixable.rs:16:9\n+   |\n+LL |         core::mem::swap(addr_of_mut_to_ref!(x), addr_of_mut_to_ref!(x));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "001c910239affa60e9476ea9c0ed71844340db86", "filename": "src/tools/clippy/tests/ui/transmute.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -16,7 +16,8 @@ fn my_vec() -> MyVec<i32> {\n #[allow(clippy::needless_lifetimes, clippy::transmute_ptr_to_ptr)]\n #[warn(clippy::useless_transmute)]\n unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n-    let _: &'a T = core::intrinsics::transmute(t);\n+    // FIXME: should lint\n+    // let _: &'a T = core::intrinsics::transmute(t);\n \n     let _: &'a U = core::intrinsics::transmute(t);\n \n@@ -48,6 +49,22 @@ fn useless() {\n \n         let _ = (1 + 1_usize) as *const usize;\n     }\n+\n+    unsafe fn _f<'a, 'b>(x: &'a u32) -> &'b u32 {\n+        std::mem::transmute(x)\n+    }\n+\n+    unsafe fn _f2<'a, 'b>(x: *const (dyn Iterator<Item = u32> + 'a)) -> *const (dyn Iterator<Item = u32> + 'b) {\n+        std::mem::transmute(x)\n+    }\n+\n+    unsafe fn _f3<'a, 'b>(x: fn(&'a u32)) -> fn(&'b u32) {\n+        std::mem::transmute(x)\n+    }\n+\n+    unsafe fn _f4<'a, 'b>(x: std::borrow::Cow<'a, str>) -> std::borrow::Cow<'b, str> {\n+        std::mem::transmute(x)\n+    }\n }\n \n struct Usize(usize);"}, {"sha": "008b4a981d7e68126a9d96ed3742a454acba11be", "filename": "src/tools/clippy/tests/ui/transmute.stderr", "status": "modified", "additions": 41, "deletions": 47, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,250 +1,244 @@\n-error: transmute from a type (`&T`) to itself\n-  --> $DIR/transmute.rs:19:20\n-   |\n-LL |     let _: &'a T = core::intrinsics::transmute(t);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::useless-transmute` implied by `-D warnings`\n-\n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:23:23\n+  --> $DIR/transmute.rs:24:23\n    |\n LL |     let _: *const T = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T`\n+   |\n+   = note: `-D clippy::useless-transmute` implied by `-D warnings`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:25:21\n+  --> $DIR/transmute.rs:26:21\n    |\n LL |     let _: *mut T = core::intrinsics::transmute(t);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *mut T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:27:23\n+  --> $DIR/transmute.rs:28:23\n    |\n LL |     let _: *const U = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *const U`\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:33:27\n+  --> $DIR/transmute.rs:34:27\n    |\n LL |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:35:27\n+  --> $DIR/transmute.rs:36:27\n    |\n LL |         let _: Vec<i32> = core::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:37:27\n+  --> $DIR/transmute.rs:38:27\n    |\n LL |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:39:27\n+  --> $DIR/transmute.rs:40:27\n    |\n LL |         let _: Vec<i32> = std::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:41:27\n+  --> $DIR/transmute.rs:42:27\n    |\n LL |         let _: Vec<i32> = my_transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:43:31\n+  --> $DIR/transmute.rs:44:31\n    |\n LL |         let _: *const usize = std::mem::transmute(5_isize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `5_isize as *const usize`\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:47:31\n+  --> $DIR/transmute.rs:48:31\n    |\n LL |         let _: *const usize = std::mem::transmute(1 + 1usize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(1 + 1usize) as *const usize`\n \n error: transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:62:24\n+  --> $DIR/transmute.rs:79:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::crosspointer-transmute` implied by `-D warnings`\n \n error: transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:64:24\n+  --> $DIR/transmute.rs:81:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n-  --> $DIR/transmute.rs:66:31\n+  --> $DIR/transmute.rs:83:31\n    |\n LL |         let _: *const Usize = core::intrinsics::transmute(my_int());\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n-  --> $DIR/transmute.rs:68:29\n+  --> $DIR/transmute.rs:85:29\n    |\n LL |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a `u32` to a `char`\n-  --> $DIR/transmute.rs:74:28\n+  --> $DIR/transmute.rs:91:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_u32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32).unwrap()`\n    |\n    = note: `-D clippy::transmute-int-to-char` implied by `-D warnings`\n \n error: transmute from a `i32` to a `char`\n-  --> $DIR/transmute.rs:75:28\n+  --> $DIR/transmute.rs:92:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_i32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32).unwrap()`\n \n error: transmute from a `u8` to a `bool`\n-  --> $DIR/transmute.rs:84:28\n+  --> $DIR/transmute.rs:101:28\n    |\n LL |     let _: bool = unsafe { std::mem::transmute(0_u8) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `0_u8 != 0`\n    |\n    = note: `-D clippy::transmute-int-to-bool` implied by `-D warnings`\n \n error: transmute from a `u32` to a `f32`\n-  --> $DIR/transmute.rs:90:31\n+  --> $DIR/transmute.rs:107:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_u32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_u32)`\n    |\n    = note: `-D clippy::transmute-int-to-float` implied by `-D warnings`\n \n error: transmute from a `i32` to a `f32`\n-  --> $DIR/transmute.rs:91:31\n+  --> $DIR/transmute.rs:108:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_i32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n error: transmute from a `u64` to a `f64`\n-  --> $DIR/transmute.rs:92:31\n+  --> $DIR/transmute.rs:109:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_u64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_u64)`\n \n error: transmute from a `i64` to a `f64`\n-  --> $DIR/transmute.rs:93:31\n+  --> $DIR/transmute.rs:110:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_i64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_i64 as u64)`\n \n error: transmute from a `u8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:113:30\n+  --> $DIR/transmute.rs:130:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0u8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u8.to_ne_bytes()`\n    |\n    = note: `-D clippy::transmute-num-to-bytes` implied by `-D warnings`\n \n error: transmute from a `u32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:114:30\n+  --> $DIR/transmute.rs:131:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0u32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u32.to_ne_bytes()`\n \n error: transmute from a `u128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:115:31\n+  --> $DIR/transmute.rs:132:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0u128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u128.to_ne_bytes()`\n \n error: transmute from a `i8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:116:30\n+  --> $DIR/transmute.rs:133:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0i8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i8.to_ne_bytes()`\n \n error: transmute from a `i32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:117:30\n+  --> $DIR/transmute.rs:134:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0i32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i32.to_ne_bytes()`\n \n error: transmute from a `i128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:118:31\n+  --> $DIR/transmute.rs:135:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0i128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i128.to_ne_bytes()`\n \n error: transmute from a `f32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:119:30\n+  --> $DIR/transmute.rs:136:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0.0f32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0.0f32.to_ne_bytes()`\n \n error: transmute from a `f64` to a `[u8; 8]`\n-  --> $DIR/transmute.rs:120:30\n+  --> $DIR/transmute.rs:137:30\n    |\n LL |             let _: [u8; 8] = std::mem::transmute(0.0f64);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0.0f64.to_ne_bytes()`\n \n error: transmute from a `u8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:125:30\n+  --> $DIR/transmute.rs:142:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0u8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u8.to_ne_bytes()`\n \n error: transmute from a `u32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:126:30\n+  --> $DIR/transmute.rs:143:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0u32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u32.to_ne_bytes()`\n \n error: transmute from a `u128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:127:31\n+  --> $DIR/transmute.rs:144:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0u128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u128.to_ne_bytes()`\n \n error: transmute from a `i8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:128:30\n+  --> $DIR/transmute.rs:145:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0i8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i8.to_ne_bytes()`\n \n error: transmute from a `i32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:129:30\n+  --> $DIR/transmute.rs:146:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0i32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i32.to_ne_bytes()`\n \n error: transmute from a `i128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:130:31\n+  --> $DIR/transmute.rs:147:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0i128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i128.to_ne_bytes()`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:140:28\n+  --> $DIR/transmute.rs:157:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(B) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(B).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:141:32\n+  --> $DIR/transmute.rs:158:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:142:30\n+  --> $DIR/transmute.rs:159:30\n    |\n LL |     const _: &str = unsafe { std::mem::transmute(B) };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_unchecked(B)`\n \n-error: aborting due to 39 previous errors\n+error: aborting due to 38 previous errors\n "}, {"sha": "ebcaa7a84cfb1e9efc1601d6ac0691c4ad89f790", "filename": "src/tools/clippy/tests/ui/transmute_undefined_repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_undefined_repr.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::transmute_undefined_repr)]\n-#![allow(clippy::unit_arg, clippy::transmute_ptr_to_ref)]\n+#![allow(clippy::unit_arg, clippy::transmute_ptr_to_ref, clippy::useless_transmute)]\n \n use core::any::TypeId;\n use core::ffi::c_void;"}, {"sha": "328cda369e11bb89a59a5db907abb14deefbf91e", "filename": "src/tools/clippy/tests/ui/unicode.fixed", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funicode.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funicode.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funicode.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,36 @@\n+// run-rustfix\n+#[warn(clippy::invisible_characters)]\n+fn zero() {\n+    print!(\"Here >\\u{200B}< is a ZWS, and \\u{200B}another\");\n+    print!(\"This\\u{200B}is\\u{200B}fine\");\n+    print!(\"Here >\\u{AD}< is a SHY, and \\u{AD}another\");\n+    print!(\"This\\u{ad}is\\u{ad}fine\");\n+    print!(\"Here >\\u{2060}< is a WJ, and \\u{2060}another\");\n+    print!(\"This\\u{2060}is\\u{2060}fine\");\n+}\n+\n+#[warn(clippy::unicode_not_nfc)]\n+fn canon() {\n+    print!(\"\u0300\u00e0h?\");\n+    print!(\"a\\u{0300}h?\"); // also ok\n+}\n+\n+#[warn(clippy::non_ascii_literal)]\n+fn uni() {\n+    print!(\"\\u{dc}ben!\");\n+    print!(\"\\u{DC}ben!\"); // this is ok\n+}\n+\n+// issue 8013\n+#[warn(clippy::non_ascii_literal)]\n+fn single_quote() {\n+    const _EMPTY_BLOCK: char = '\\u{25b1}';\n+    const _FULL_BLOCK: char = '\\u{25b0}';\n+}\n+\n+fn main() {\n+    zero();\n+    uni();\n+    canon();\n+    single_quote();\n+}"}, {"sha": "7828d6bcbea7ad39e4a68c82ef69b9c9ede16015", "filename": "src/tools/clippy/tests/ui/unicode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funicode.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #[warn(clippy::invisible_characters)]\n fn zero() {\n     print!(\"Here >\u200b< is a ZWS, and \u200banother\");"}, {"sha": "01d3f3c0296799cc15b4cabcbc811b786e8da427", "filename": "src/tools/clippy/tests/ui/unicode.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funicode.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,47 +1,47 @@\n error: invisible character detected\n-  --> $DIR/unicode.rs:3:12\n+  --> $DIR/unicode.rs:4:12\n    |\n LL |     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{200B}< is a ZWS, and /u{200B}another\"`\n    |\n    = note: `-D clippy::invisible-characters` implied by `-D warnings`\n \n error: invisible character detected\n-  --> $DIR/unicode.rs:5:12\n+  --> $DIR/unicode.rs:6:12\n    |\n LL |     print!(\"Here >\u00ad< is a SHY, and \u00adanother\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{AD}< is a SHY, and /u{AD}another\"`\n \n error: invisible character detected\n-  --> $DIR/unicode.rs:7:12\n+  --> $DIR/unicode.rs:8:12\n    |\n LL |     print!(\"Here >\u2060< is a WJ, and \u2060another\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{2060}< is a WJ, and /u{2060}another\"`\n \n error: non-NFC Unicode sequence detected\n-  --> $DIR/unicode.rs:13:12\n+  --> $DIR/unicode.rs:14:12\n    |\n LL |     print!(\"\u0300a\u0300h?\");\n    |            ^^^^^ help: consider replacing the string with: `\"\u0300\u00e0h?\"`\n    |\n    = note: `-D clippy::unicode-not-nfc` implied by `-D warnings`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:19:12\n+  --> $DIR/unicode.rs:20:12\n    |\n LL |     print!(\"\u00dcben!\");\n    |            ^^^^^^^ help: consider replacing the string with: `\"/u{dc}ben!\"`\n    |\n    = note: `-D clippy::non-ascii-literal` implied by `-D warnings`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:26:32\n+  --> $DIR/unicode.rs:27:32\n    |\n LL |     const _EMPTY_BLOCK: char = '\u25b1';\n    |                                ^^^ help: consider replacing the string with: `'/u{25b1}'`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:27:31\n+  --> $DIR/unicode.rs:28:31\n    |\n LL |     const _FULL_BLOCK: char = '\u25b0';\n    |                               ^^^ help: consider replacing the string with: `'/u{25b0}'`"}, {"sha": "9400e93cac8390e52974d503356910c93bf22e83", "filename": "src/tools/clippy/tests/ui/unit_arg_empty_blocks.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+#![warn(clippy::unit_arg)]\n+#![allow(clippy::no_effect, unused_must_use, unused_variables)]\n+\n+use std::fmt::Debug;\n+\n+fn foo<T: Debug>(t: T) {\n+    println!(\"{:?}\", t);\n+}\n+\n+fn foo3<T1: Debug, T2: Debug, T3: Debug>(t1: T1, t2: T2, t3: T3) {\n+    println!(\"{:?}, {:?}, {:?}\", t1, t2, t3);\n+}\n+\n+fn bad() {\n+    foo(());\n+    foo3((), 2, 2);\n+    foo(0);\n+    taking_two_units((), ());\n+    foo(0);\n+    foo(1);\n+    taking_three_units((), (), ());\n+}\n+\n+fn taking_two_units(a: (), b: ()) {}\n+fn taking_three_units(a: (), b: (), c: ()) {}\n+\n+fn main() {\n+    bad();\n+}"}, {"sha": "5f52b6c5315fdded584a3e0266ff99ea2be7da64", "filename": "src/tools/clippy/tests/ui/unit_arg_empty_blocks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![warn(clippy::unit_arg)]\n #![allow(clippy::no_effect, unused_must_use, unused_variables)]\n "}, {"sha": "d35e931697d211fcfbf6ea6ac742a47f22456b8e", "filename": "src/tools/clippy/tests/ui/unit_arg_empty_blocks.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_arg_empty_blocks.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,5 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg_empty_blocks.rs:15:5\n+  --> $DIR/unit_arg_empty_blocks.rs:16:5\n    |\n LL |     foo({});\n    |     ^^^^--^\n@@ -9,15 +9,15 @@ LL |     foo({});\n    = note: `-D clippy::unit-arg` implied by `-D warnings`\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg_empty_blocks.rs:16:5\n+  --> $DIR/unit_arg_empty_blocks.rs:17:5\n    |\n LL |     foo3({}, 2, 2);\n    |     ^^^^^--^^^^^^^\n    |          |\n    |          help: use a unit literal instead: `()`\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg_empty_blocks.rs:17:5\n+  --> $DIR/unit_arg_empty_blocks.rs:18:5\n    |\n LL |     taking_two_units({}, foo(0));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -29,7 +29,7 @@ LL ~     taking_two_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg_empty_blocks.rs:18:5\n+  --> $DIR/unit_arg_empty_blocks.rs:19:5\n    |\n LL |     taking_three_units({}, foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b352b285c86267f42fed1f4be2ce85d51c544afd", "filename": "src/tools/clippy/tests/ui/unnecessary_cast.fixed", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,91 @@\n+// run-rustfix\n+#![warn(clippy::unnecessary_cast)]\n+#![allow(\n+    unused_must_use,\n+    clippy::borrow_as_ptr,\n+    clippy::no_effect,\n+    clippy::nonstandard_macro_braces,\n+    clippy::unnecessary_operation\n+)]\n+\n+#[rustfmt::skip]\n+fn main() {\n+    // Test cast_unnecessary\n+    1_i32;\n+    1_f32;\n+    false;\n+    &1i32 as &i32;\n+\n+    -1_i32;\n+    - 1_i32;\n+    -1_f32;\n+    1_i32;\n+    1_f32;\n+\n+    // macro version\n+    macro_rules! foo {\n+        ($a:ident, $b:ident) => {\n+            #[allow(unused)]\n+            pub fn $a() -> $b {\n+                1 as $b\n+            }\n+        };\n+    }\n+    foo!(a, i32);\n+    foo!(b, f32);\n+    foo!(c, f64);\n+\n+    // do not lint cast to cfg-dependant type\n+    1 as std::os::raw::c_char;\n+\n+    // do not lint cast to alias type\n+    1 as I32Alias;\n+    &1 as &I32Alias;\n+}\n+\n+type I32Alias = i32;\n+\n+mod fixable {\n+    #![allow(dead_code)]\n+\n+    fn main() {\n+        // casting integer literal to float is unnecessary\n+        100_f32;\n+        100_f64;\n+        100_f64;\n+        let _ = -100_f32;\n+        let _ = -100_f64;\n+        let _ = -100_f64;\n+        100_f32;\n+        100_f64;\n+        // Should not trigger\n+        #[rustfmt::skip]\n+        let v = vec!(1);\n+        &v as &[i32];\n+        0x10 as f32;\n+        0o10 as f32;\n+        0b10 as f32;\n+        0x11 as f64;\n+        0o11 as f64;\n+        0b11 as f64;\n+\n+        1_u32;\n+        0x10_i32;\n+        0b10_usize;\n+        0o73_u16;\n+        1_000_000_000_u32;\n+\n+        1.0_f64;\n+        0.5_f32;\n+\n+        1.0 as u16;\n+\n+        let _ = -1_i32;\n+        let _ = -1.0_f32;\n+\n+        let _ = 1 as I32Alias;\n+        let _ = &1 as &I32Alias;\n+    }\n+\n+    type I32Alias = i32;\n+}"}, {"sha": "6c8cc3effe8fefcc9ca0cf5c806549bd0037b0f2", "filename": "src/tools/clippy/tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,5 +1,12 @@\n+// run-rustfix\n #![warn(clippy::unnecessary_cast)]\n-#![allow(clippy::no_effect)]\n+#![allow(\n+    unused_must_use,\n+    clippy::borrow_as_ptr,\n+    clippy::no_effect,\n+    clippy::nonstandard_macro_braces,\n+    clippy::unnecessary_operation\n+)]\n \n #[rustfmt::skip]\n fn main() {\n@@ -37,3 +44,48 @@ fn main() {\n }\n \n type I32Alias = i32;\n+\n+mod fixable {\n+    #![allow(dead_code)]\n+\n+    fn main() {\n+        // casting integer literal to float is unnecessary\n+        100 as f32;\n+        100 as f64;\n+        100_i32 as f64;\n+        let _ = -100 as f32;\n+        let _ = -100 as f64;\n+        let _ = -100_i32 as f64;\n+        100. as f32;\n+        100. as f64;\n+        // Should not trigger\n+        #[rustfmt::skip]\n+        let v = vec!(1);\n+        &v as &[i32];\n+        0x10 as f32;\n+        0o10 as f32;\n+        0b10 as f32;\n+        0x11 as f64;\n+        0o11 as f64;\n+        0b11 as f64;\n+\n+        1 as u32;\n+        0x10 as i32;\n+        0b10 as usize;\n+        0o73 as u16;\n+        1_000_000_000 as u32;\n+\n+        1.0 as f64;\n+        0.5 as f32;\n+\n+        1.0 as u16;\n+\n+        let _ = -1 as i32;\n+        let _ = -1.0 as f32;\n+\n+        let _ = 1 as I32Alias;\n+        let _ = &1 as &I32Alias;\n+    }\n+\n+    type I32Alias = i32;\n+}"}, {"sha": "bad45f0025b2292fe0360c52ec59effefac4c361", "filename": "src/tools/clippy/tests/ui/unnecessary_cast.stderr", "status": "modified", "additions": 111, "deletions": 9, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -1,52 +1,154 @@\n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:7:5\n+  --> $DIR/unnecessary_cast.rs:14:5\n    |\n LL |     1i32 as i32;\n    |     ^^^^^^^^^^^ help: try: `1_i32`\n    |\n    = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:8:5\n+  --> $DIR/unnecessary_cast.rs:15:5\n    |\n LL |     1f32 as f32;\n    |     ^^^^^^^^^^^ help: try: `1_f32`\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/unnecessary_cast.rs:9:5\n+  --> $DIR/unnecessary_cast.rs:16:5\n    |\n LL |     false as bool;\n    |     ^^^^^^^^^^^^^ help: try: `false`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:12:5\n+  --> $DIR/unnecessary_cast.rs:19:5\n    |\n LL |     -1_i32 as i32;\n    |     ^^^^^^^^^^^^^ help: try: `-1_i32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:13:5\n+  --> $DIR/unnecessary_cast.rs:20:5\n    |\n LL |     - 1_i32 as i32;\n    |     ^^^^^^^^^^^^^^ help: try: `- 1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:14:5\n+  --> $DIR/unnecessary_cast.rs:21:5\n    |\n LL |     -1f32 as f32;\n    |     ^^^^^^^^^^^^ help: try: `-1_f32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:15:5\n+  --> $DIR/unnecessary_cast.rs:22:5\n    |\n LL |     1_i32 as i32;\n    |     ^^^^^^^^^^^^ help: try: `1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:16:5\n+  --> $DIR/unnecessary_cast.rs:23:5\n    |\n LL |     1_f32 as f32;\n    |     ^^^^^^^^^^^^ help: try: `1_f32`\n \n-error: aborting due to 8 previous errors\n+error: casting integer literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:53:9\n+   |\n+LL |         100 as f32;\n+   |         ^^^^^^^^^^ help: try: `100_f32`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:54:9\n+   |\n+LL |         100 as f64;\n+   |         ^^^^^^^^^^ help: try: `100_f64`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:55:9\n+   |\n+LL |         100_i32 as f64;\n+   |         ^^^^^^^^^^^^^^ help: try: `100_f64`\n+\n+error: casting integer literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:56:17\n+   |\n+LL |         let _ = -100 as f32;\n+   |                 ^^^^^^^^^^^ help: try: `-100_f32`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:57:17\n+   |\n+LL |         let _ = -100 as f64;\n+   |                 ^^^^^^^^^^^ help: try: `-100_f64`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:58:17\n+   |\n+LL |         let _ = -100_i32 as f64;\n+   |                 ^^^^^^^^^^^^^^^ help: try: `-100_f64`\n+\n+error: casting float literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:59:9\n+   |\n+LL |         100. as f32;\n+   |         ^^^^^^^^^^^ help: try: `100_f32`\n+\n+error: casting float literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:60:9\n+   |\n+LL |         100. as f64;\n+   |         ^^^^^^^^^^^ help: try: `100_f64`\n+\n+error: casting integer literal to `u32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:72:9\n+   |\n+LL |         1 as u32;\n+   |         ^^^^^^^^ help: try: `1_u32`\n+\n+error: casting integer literal to `i32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:73:9\n+   |\n+LL |         0x10 as i32;\n+   |         ^^^^^^^^^^^ help: try: `0x10_i32`\n+\n+error: casting integer literal to `usize` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:74:9\n+   |\n+LL |         0b10 as usize;\n+   |         ^^^^^^^^^^^^^ help: try: `0b10_usize`\n+\n+error: casting integer literal to `u16` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:75:9\n+   |\n+LL |         0o73 as u16;\n+   |         ^^^^^^^^^^^ help: try: `0o73_u16`\n+\n+error: casting integer literal to `u32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:76:9\n+   |\n+LL |         1_000_000_000 as u32;\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n+\n+error: casting float literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:78:9\n+   |\n+LL |         1.0 as f64;\n+   |         ^^^^^^^^^^ help: try: `1.0_f64`\n+\n+error: casting float literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:79:9\n+   |\n+LL |         0.5 as f32;\n+   |         ^^^^^^^^^^ help: try: `0.5_f32`\n+\n+error: casting integer literal to `i32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:83:17\n+   |\n+LL |         let _ = -1 as i32;\n+   |                 ^^^^^^^^^ help: try: `-1_i32`\n+\n+error: casting float literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast.rs:84:17\n+   |\n+LL |         let _ = -1.0 as f32;\n+   |                 ^^^^^^^^^^^ help: try: `-1.0_f32`\n+\n+error: aborting due to 25 previous errors\n "}, {"sha": "36800c5340db21d665070b288040e00958bd612a", "filename": "src/tools/clippy/tests/ui/unnecessary_cast_fixable.fixed", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.fixed?ref=357bc27904d4a99c83d4b01272c34e0e54934fa5", "patch": "@@ -1,50 +0,0 @@\n-// run-rustfix\n-\n-#![warn(clippy::unnecessary_cast)]\n-#![allow(\n-    clippy::no_effect,\n-    clippy::unnecessary_operation,\n-    clippy::nonstandard_macro_braces,\n-    clippy::borrow_as_ptr\n-)]\n-\n-fn main() {\n-    // casting integer literal to float is unnecessary\n-    100_f32;\n-    100_f64;\n-    100_f64;\n-    let _ = -100_f32;\n-    let _ = -100_f64;\n-    let _ = -100_f64;\n-    100_f32;\n-    100_f64;\n-    // Should not trigger\n-    #[rustfmt::skip]\n-    let v = vec!(1);\n-    &v as &[i32];\n-    0x10 as f32;\n-    0o10 as f32;\n-    0b10 as f32;\n-    0x11 as f64;\n-    0o11 as f64;\n-    0b11 as f64;\n-\n-    1_u32;\n-    0x10_i32;\n-    0b10_usize;\n-    0o73_u16;\n-    1_000_000_000_u32;\n-\n-    1.0_f64;\n-    0.5_f32;\n-\n-    1.0 as u16;\n-\n-    let _ = -1_i32;\n-    let _ = -1.0_f32;\n-\n-    let _ = 1 as I32Alias;\n-    let _ = &1 as &I32Alias;\n-}\n-\n-type I32Alias = i32;"}, {"sha": "d4b6bb952ab3508261198212ba394d20b5cd3d4c", "filename": "src/tools/clippy/tests/ui/unnecessary_cast_fixable.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.rs?ref=357bc27904d4a99c83d4b01272c34e0e54934fa5", "patch": "@@ -1,50 +0,0 @@\n-// run-rustfix\n-\n-#![warn(clippy::unnecessary_cast)]\n-#![allow(\n-    clippy::no_effect,\n-    clippy::unnecessary_operation,\n-    clippy::nonstandard_macro_braces,\n-    clippy::borrow_as_ptr\n-)]\n-\n-fn main() {\n-    // casting integer literal to float is unnecessary\n-    100 as f32;\n-    100 as f64;\n-    100_i32 as f64;\n-    let _ = -100 as f32;\n-    let _ = -100 as f64;\n-    let _ = -100_i32 as f64;\n-    100. as f32;\n-    100. as f64;\n-    // Should not trigger\n-    #[rustfmt::skip]\n-    let v = vec!(1);\n-    &v as &[i32];\n-    0x10 as f32;\n-    0o10 as f32;\n-    0b10 as f32;\n-    0x11 as f64;\n-    0o11 as f64;\n-    0b11 as f64;\n-\n-    1 as u32;\n-    0x10 as i32;\n-    0b10 as usize;\n-    0o73 as u16;\n-    1_000_000_000 as u32;\n-\n-    1.0 as f64;\n-    0.5 as f32;\n-\n-    1.0 as u16;\n-\n-    let _ = -1 as i32;\n-    let _ = -1.0 as f32;\n-\n-    let _ = 1 as I32Alias;\n-    let _ = &1 as &I32Alias;\n-}\n-\n-type I32Alias = i32;"}, {"sha": "a281143281b54fa591f29d71559da82fd7fca74f", "filename": "src/tools/clippy/tests/ui/unnecessary_cast_fixable.stderr", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/357bc27904d4a99c83d4b01272c34e0e54934fa5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_cast_fixable.stderr?ref=357bc27904d4a99c83d4b01272c34e0e54934fa5", "patch": "@@ -1,106 +0,0 @@\n-error: casting integer literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:13:5\n-   |\n-LL |     100 as f32;\n-   |     ^^^^^^^^^^ help: try: `100_f32`\n-   |\n-   = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n-\n-error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:14:5\n-   |\n-LL |     100 as f64;\n-   |     ^^^^^^^^^^ help: try: `100_f64`\n-\n-error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:15:5\n-   |\n-LL |     100_i32 as f64;\n-   |     ^^^^^^^^^^^^^^ help: try: `100_f64`\n-\n-error: casting integer literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:16:13\n-   |\n-LL |     let _ = -100 as f32;\n-   |             ^^^^^^^^^^^ help: try: `-100_f32`\n-\n-error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:17:13\n-   |\n-LL |     let _ = -100 as f64;\n-   |             ^^^^^^^^^^^ help: try: `-100_f64`\n-\n-error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:18:13\n-   |\n-LL |     let _ = -100_i32 as f64;\n-   |             ^^^^^^^^^^^^^^^ help: try: `-100_f64`\n-\n-error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:19:5\n-   |\n-LL |     100. as f32;\n-   |     ^^^^^^^^^^^ help: try: `100_f32`\n-\n-error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:20:5\n-   |\n-LL |     100. as f64;\n-   |     ^^^^^^^^^^^ help: try: `100_f64`\n-\n-error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:32:5\n-   |\n-LL |     1 as u32;\n-   |     ^^^^^^^^ help: try: `1_u32`\n-\n-error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:33:5\n-   |\n-LL |     0x10 as i32;\n-   |     ^^^^^^^^^^^ help: try: `0x10_i32`\n-\n-error: casting integer literal to `usize` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:34:5\n-   |\n-LL |     0b10 as usize;\n-   |     ^^^^^^^^^^^^^ help: try: `0b10_usize`\n-\n-error: casting integer literal to `u16` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:35:5\n-   |\n-LL |     0o73 as u16;\n-   |     ^^^^^^^^^^^ help: try: `0o73_u16`\n-\n-error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:36:5\n-   |\n-LL |     1_000_000_000 as u32;\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n-\n-error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:38:5\n-   |\n-LL |     1.0 as f64;\n-   |     ^^^^^^^^^^ help: try: `1.0_f64`\n-\n-error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:39:5\n-   |\n-LL |     0.5 as f32;\n-   |     ^^^^^^^^^^ help: try: `0.5_f32`\n-\n-error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:43:13\n-   |\n-LL |     let _ = -1 as i32;\n-   |             ^^^^^^^^^ help: try: `-1_i32`\n-\n-error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast_fixable.rs:44:13\n-   |\n-LL |     let _ = -1.0 as f32;\n-   |             ^^^^^^^^^^^ help: try: `-1.0_f32`\n-\n-error: aborting due to 17 previous errors\n-"}, {"sha": "54f85806ac3b3e5c402e18a573896fc14aa2acc2", "filename": "src/tools/clippy/tests/ui/unused_rounding.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_rounding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_rounding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_rounding.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+#![warn(clippy::unused_rounding)]\n+\n+fn main() {\n+    let _ = 1f32;\n+    let _ = 1.0f64;\n+    let _ = 1.00f32;\n+    let _ = 2e-54f64.floor();\n+}"}, {"sha": "8d007bc4a1dc8f3333ab72ac2f230fa56808b011", "filename": "src/tools/clippy/tests/ui/unused_rounding.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_rounding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_rounding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_rounding.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+#![warn(clippy::unused_rounding)]\n+\n+fn main() {\n+    let _ = 1f32.ceil();\n+    let _ = 1.0f64.floor();\n+    let _ = 1.00f32.round();\n+    let _ = 2e-54f64.floor();\n+}"}, {"sha": "6cfb02e040283f615f1162618993fe7709dbe05c", "filename": "src/tools/clippy/tests/ui/unused_rounding.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_rounding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_rounding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_rounding.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -0,0 +1,22 @@\n+error: used the `ceil` method with a whole number float\n+  --> $DIR/unused_rounding.rs:5:13\n+   |\n+LL |     let _ = 1f32.ceil();\n+   |             ^^^^^^^^^^^ help: remove the `ceil` method call: `1f32`\n+   |\n+   = note: `-D clippy::unused-rounding` implied by `-D warnings`\n+\n+error: used the `floor` method with a whole number float\n+  --> $DIR/unused_rounding.rs:6:13\n+   |\n+LL |     let _ = 1.0f64.floor();\n+   |             ^^^^^^^^^^^^^^ help: remove the `floor` method call: `1.0f64`\n+\n+error: used the `round` method with a whole number float\n+  --> $DIR/unused_rounding.rs:7:13\n+   |\n+LL |     let _ = 1.00f32.round();\n+   |             ^^^^^^^^^^^^^^^ help: remove the `round` method call: `1.00f32`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "4f80aaecc902d1d49aa1d2c09ab19ce76787b26d", "filename": "src/tools/clippy/tests/ui/use_self.fixed", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -542,3 +542,69 @@ mod use_self_in_pat {\n         }\n     }\n }\n+\n+mod issue8845 {\n+    pub enum Something {\n+        Num(u8),\n+        TupleNums(u8, u8),\n+        StructNums { one: u8, two: u8 },\n+    }\n+\n+    struct Foo(u8);\n+\n+    struct Bar {\n+        x: u8,\n+        y: usize,\n+    }\n+\n+    impl Something {\n+        fn get_value(&self) -> u8 {\n+            match self {\n+                Self::Num(n) => *n,\n+                Self::TupleNums(n, _m) => *n,\n+                Self::StructNums { one, two: _ } => *one,\n+            }\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            match self {\n+                Self::Num(n) => *n,\n+                Self::TupleNums(n, _m) => *n,\n+                Self::StructNums { one, two: _ } => *one,\n+            }\n+        }\n+\n+        fn imported_values(&self) -> u8 {\n+            use Something::*;\n+            match self {\n+                Num(n) => *n,\n+                TupleNums(n, _m) => *n,\n+                StructNums { one, two: _ } => *one,\n+            }\n+        }\n+    }\n+\n+    impl Foo {\n+        fn get_value(&self) -> u8 {\n+            let Self(x) = self;\n+            *x\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            let Self(x) = self;\n+            *x\n+        }\n+    }\n+\n+    impl Bar {\n+        fn get_value(&self) -> u8 {\n+            let Self { x, .. } = self;\n+            *x\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            let Self { x, .. } = self;\n+            *x\n+        }\n+    }\n+}"}, {"sha": "52da72db53ce3a9706847825d85b8a0fe062eb65", "filename": "src/tools/clippy/tests/ui/use_self.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -542,3 +542,69 @@ mod use_self_in_pat {\n         }\n     }\n }\n+\n+mod issue8845 {\n+    pub enum Something {\n+        Num(u8),\n+        TupleNums(u8, u8),\n+        StructNums { one: u8, two: u8 },\n+    }\n+\n+    struct Foo(u8);\n+\n+    struct Bar {\n+        x: u8,\n+        y: usize,\n+    }\n+\n+    impl Something {\n+        fn get_value(&self) -> u8 {\n+            match self {\n+                Something::Num(n) => *n,\n+                Something::TupleNums(n, _m) => *n,\n+                Something::StructNums { one, two: _ } => *one,\n+            }\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            match self {\n+                crate::issue8845::Something::Num(n) => *n,\n+                crate::issue8845::Something::TupleNums(n, _m) => *n,\n+                crate::issue8845::Something::StructNums { one, two: _ } => *one,\n+            }\n+        }\n+\n+        fn imported_values(&self) -> u8 {\n+            use Something::*;\n+            match self {\n+                Num(n) => *n,\n+                TupleNums(n, _m) => *n,\n+                StructNums { one, two: _ } => *one,\n+            }\n+        }\n+    }\n+\n+    impl Foo {\n+        fn get_value(&self) -> u8 {\n+            let Foo(x) = self;\n+            *x\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            let crate::issue8845::Foo(x) = self;\n+            *x\n+        }\n+    }\n+\n+    impl Bar {\n+        fn get_value(&self) -> u8 {\n+            let Bar { x, .. } = self;\n+            *x\n+        }\n+\n+        fn use_crate(&self) -> u8 {\n+            let crate::issue8845::Bar { x, .. } = self;\n+            *x\n+        }\n+    }\n+}"}, {"sha": "f06bb959b3bdefe38cd776bf016403187e09b1e4", "filename": "src/tools/clippy/tests/ui/use_self.stderr", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.stderr?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -186,5 +186,65 @@ error: unnecessary structure name repetition\n LL |             if let Foo::Bar = self {\n    |                    ^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 31 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:563:17\n+   |\n+LL |                 Something::Num(n) => *n,\n+   |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:564:17\n+   |\n+LL |                 Something::TupleNums(n, _m) => *n,\n+   |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:565:17\n+   |\n+LL |                 Something::StructNums { one, two: _ } => *one,\n+   |                 ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:571:17\n+   |\n+LL |                 crate::issue8845::Something::Num(n) => *n,\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:572:17\n+   |\n+LL |                 crate::issue8845::Something::TupleNums(n, _m) => *n,\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:573:17\n+   |\n+LL |                 crate::issue8845::Something::StructNums { one, two: _ } => *one,\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:589:17\n+   |\n+LL |             let Foo(x) = self;\n+   |                 ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:594:17\n+   |\n+LL |             let crate::issue8845::Foo(x) = self;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:601:17\n+   |\n+LL |             let Bar { x, .. } = self;\n+   |                 ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:606:17\n+   |\n+LL |             let crate::issue8845::Bar { x, .. } = self;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 41 previous errors\n "}, {"sha": "6909fbcae09ff7c2d89fd748d140aee29ac8dbb9", "filename": "src/tools/clippy/util/gh-pages/script.js", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Fscript.js", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Fscript.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Fscript.js?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -232,6 +232,9 @@\n                     return true;\n                 }\n                 searchStr = searchStr.toLowerCase();\n+                if (searchStr.startsWith(\"clippy::\")) {\n+                    searchStr = searchStr.slice(8);\n+                }\n \n                 // Search by id\n                 if (lint.id.indexOf(searchStr.replace(\"-\", \"_\")) !== -1) {\n@@ -343,17 +346,23 @@ function setTheme(theme, store) {\n     let enableNight = false;\n     let enableAyu = false;\n \n-    if (theme == \"ayu\") {\n-        enableAyu = true;\n-    } else if (theme == \"coal\" || theme == \"navy\") {\n-        enableNight = true;\n-    } else if (theme == \"rust\") {\n-        enableHighlight = true;\n-    } else {\n-        enableHighlight = true;\n-        // this makes sure that an unknown theme request gets set to a known one\n-        theme = \"light\";\n+    switch(theme) {\n+        case \"ayu\":\n+            enableAyu = true;\n+            break;\n+        case \"coal\":\n+        case \"navy\":\n+            enableNight = true;\n+            break;\n+        case \"rust\":\n+            enableHighlight = true;\n+            break;\n+        default:\n+            enableHighlight = true;\n+            theme = \"light\";\n+            break;\n     }\n+\n     document.getElementsByTagName(\"body\")[0].className = theme;\n \n     document.getElementById(\"styleHighlight\").disabled = !enableHighlight;\n@@ -368,4 +377,10 @@ function setTheme(theme, store) {\n }\n \n // loading the theme after the initial load\n-setTheme(localStorage.getItem('clippy-lint-list-theme'), false);\n+const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\");\n+const theme = localStorage.getItem('clippy-lint-list-theme');\n+if (prefersDark.matches && !theme) {\n+    setTheme(\"coal\", false);\n+} else {\n+    setTheme(theme, false);\n+}"}, {"sha": "a79290e7a6bc36fec531f8700dc5fdc141fe2c7d", "filename": "src/tools/rustc-workspace-hack/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50b00252aeb77b10db04d65dc9e12ce758def4b5/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml?ref=50b00252aeb77b10db04d65dc9e12ce758def4b5", "patch": "@@ -61,6 +61,7 @@ features = [\n   \"wincrypt\",\n   \"windef\",\n   \"winioctl\",\n+  \"winnt\",\n   \"winreg\",\n   \"winsock2\",\n   \"winuser\","}]}