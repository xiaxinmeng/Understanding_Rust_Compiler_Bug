{"sha": "dee05ab2cca6d6d19cc73c6f900eee32e2dd5cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZTA1YWIyY2NhNmQ2ZDE5Y2M3M2M2ZjkwMGVlZTMyZTJkZDVjYmQ=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-05-20T09:46:33Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-06-06T12:31:54Z"}, "message": "[const-prop] Handle Rvalue::Len", "tree": {"sha": "d3c946fe8a4f2fbb6bd7480c6b12e0c5aa4796f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c946fe8a4f2fbb6bd7480c6b12e0c5aa4796f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee05ab2cca6d6d19cc73c6f900eee32e2dd5cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee05ab2cca6d6d19cc73c6f900eee32e2dd5cbd", "html_url": "https://github.com/rust-lang/rust/commit/dee05ab2cca6d6d19cc73c6f900eee32e2dd5cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee05ab2cca6d6d19cc73c6f900eee32e2dd5cbd/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e50e01bb7c3200c48c8739435d4e7cece83ed6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e50e01bb7c3200c48c8739435d4e7cece83ed6c", "html_url": "https://github.com/rust-lang/rust/commit/1e50e01bb7c3200c48c8739435d4e7cece83ed6c"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "0d389b31f907536878eea4f3cfe09c393871ce4a", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dee05ab2cca6d6d19cc73c6f900eee32e2dd5cbd/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee05ab2cca6d6d19cc73c6f900eee32e2dd5cbd/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=dee05ab2cca6d6d19cc73c6f900eee32e2dd5cbd", "patch": "@@ -17,8 +17,7 @@ use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::layout::{\n-    LayoutOf, TyLayout, LayoutError,\n-    HasTyCtxt, TargetDataLayout, HasDataLayout,\n+    LayoutOf, TyLayout, LayoutError, HasTyCtxt, TargetDataLayout, HasDataLayout, Size,\n };\n \n use crate::interpret::{\n@@ -386,10 +385,30 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                     this.ecx.cast(op, kind, dest.into())?;\n                     Ok(dest.into())\n                 })\n-            }\n+            },\n+            Rvalue::Len(ref place) => {\n+                let place = self.eval_place(&place, source_info)?;\n+                let mplace = place.try_as_mplace().ok()?;\n+\n+                if let ty::Slice(_) = mplace.layout.ty.sty {\n+                    let len = mplace.meta.unwrap().to_usize(&self.ecx).unwrap();\n \n-            // FIXME(oli-obk): evaluate static/constant slice lengths\n-            Rvalue::Len(_) => None,\n+                    Some(ImmTy {\n+                        imm: Immediate::Scalar(\n+                            Scalar::from_uint(\n+                                len,\n+                                Size::from_bits(\n+                                    self.tcx.sess.target.usize_ty.bit_width().unwrap() as u64\n+                                )\n+                            ).into(),\n+                        ),\n+                        layout: self.tcx.layout_of(self.param_env.and(self.tcx.types.usize)).ok()?,\n+                    }.into())\n+                } else {\n+                    trace!(\"not slice: {:?}\", mplace.layout.ty.sty);\n+                    None\n+                }\n+            },\n             Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n                 type_size_of(self.tcx, self.param_env, ty).and_then(|n| Some(\n                     ImmTy {"}, {"sha": "5babeb195a826f0fbf7e2b5ebfb36a4a58d77d60", "filename": "src/test/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dee05ab2cca6d6d19cc73c6f900eee32e2dd5cbd/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee05ab2cca6d6d19cc73c6f900eee32e2dd5cbd/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=dee05ab2cca6d6d19cc73c6f900eee32e2dd5cbd", "patch": "@@ -1,36 +1,40 @@\n-fn test() -> &'static [u32] {\n-    &[1, 2]\n-}\n-\n fn main() {\n-    let x = test()[0];\n+    (&[1u32, 2, 3] as &[u32])[1];\n }\n \n // END RUST SOURCE\n // START rustc.main.ConstProp.before.mir\n-//  bb1: {\n+//  bb0: {\n //      ...\n-//      _3 = const 0usize;\n-//      _4 = Len((*_2));\n-//      _5 = Lt(_3, _4);\n-//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb2;\n+//      _4 = &(promoted[0]: [u32; 3]);\n+//      _3 = _4;\n+//      _2 = move _3 as &[u32] (Pointer(Unsize));\n+//      ...\n+//      _6 = const 1usize;\n+//      _7 = Len((*_2));\n+//      _8 = Lt(_6, _7);\n+//      assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1;\n //  }\n-//  bb2: {\n-//      _1 = (*_2)[_3];\n+//  bb1: {\n+//      _1 = (*_2)[_6];\n //      ...\n //      return;\n //  }\n // END rustc.main.ConstProp.before.mir\n // START rustc.main.ConstProp.after.mir\n //  bb0: {\n //      ...\n-//      _3 = const 0usize;\n-//      _4 = Len((*_2));\n-//      _5 = Lt(_3, _4);\n-//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb2;\n+//      _4 = const Scalar(AllocId(0).0x0) : &[u32; 3];\n+//      _3 = const Scalar(AllocId(0).0x0) : &[u32; 3];\n+//      _2 = move _3 as &[u32] (Pointer(Unsize));\n+//      ...\n+//      _6 = const 1usize;\n+//      _7 = const 3usize;\n+//      _8 = const true;\n+//      assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1;\n //  }\n-//  bb2: {\n-//      _1 = (*_2)[_3];\n+//  bb1: {\n+//      _1 = (*_2)[_6];\n //      ...\n //      return;\n //  }"}]}