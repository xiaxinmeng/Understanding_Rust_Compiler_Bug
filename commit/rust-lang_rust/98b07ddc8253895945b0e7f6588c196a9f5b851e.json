{"sha": "98b07ddc8253895945b0e7f6588c196a9f5b851e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YjA3ZGRjODI1Mzg5NTk0NWIwZTdmNjU4OGMxOTZhOWY1Yjg1MWU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-05T21:09:32Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-05T21:09:32Z"}, "message": "Rename task::task_builder to task::builder\n\nCloses #2120.", "tree": {"sha": "a65c14e555130977d62028cb8005bb2988276cf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a65c14e555130977d62028cb8005bb2988276cf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98b07ddc8253895945b0e7f6588c196a9f5b851e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98b07ddc8253895945b0e7f6588c196a9f5b851e", "html_url": "https://github.com/rust-lang/rust/commit/98b07ddc8253895945b0e7f6588c196a9f5b851e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98b07ddc8253895945b0e7f6588c196a9f5b851e/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552677e598b4b6adad3bc48bc8a334414b54dccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/552677e598b4b6adad3bc48bc8a334414b54dccd", "html_url": "https://github.com/rust-lang/rust/commit/552677e598b4b6adad3bc48bc8a334414b54dccd"}], "stats": {"total": 146, "additions": 73, "deletions": 73}, "files": [{"sha": "748eb82215df0dbcc621938655d1500d8b01ac55", "filename": "src/libcore/task.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -30,7 +30,7 @@ export notification;\n export sched_mode;\n export sched_opts;\n export task_opts;\n-export task_builder::{};\n+export builder::{};\n \n export default_task_opts;\n export get_opts;\n@@ -162,8 +162,8 @@ Provides detailed control over the properties and behavior of new tasks.\n // when you try to reuse the builder to spawn a new task. We'll just\n // sidestep that whole issue by making builder's uncopyable and making\n // the run function move them in.\n-enum task_builder {\n-    task_builder_({\n+enum builder {\n+    builder_({\n         mut opts: task_opts,\n         mut gen_body: fn@(+fn~()) -> fn~(),\n         can_not_copy: option<comm::port<()>>\n@@ -188,27 +188,27 @@ fn default_task_opts() -> task_opts {\n     }\n }\n \n-fn task_builder() -> task_builder {\n-    #[doc = \"Construct a task_builder\"];\n+fn builder() -> builder {\n+    #[doc = \"Construct a builder\"];\n \n     let body_identity = fn@(+body: fn~()) -> fn~() { body };\n \n-    task_builder_({\n+    builder_({\n         mut opts: default_task_opts(),\n         mut gen_body: body_identity,\n         can_not_copy: none\n     })\n }\n \n-fn get_opts(builder: task_builder) -> task_opts {\n-    #[doc = \"Get the task_opts associated with a task_builder\"];\n+fn get_opts(builder: builder) -> task_opts {\n+    #[doc = \"Get the task_opts associated with a builder\"];\n \n     builder.opts\n }\n \n-fn set_opts(builder: task_builder, opts: task_opts) {\n+fn set_opts(builder: builder, opts: task_opts) {\n     #[doc = \"\n-    Set the task_opts associated with a task_builder\n+    Set the task_opts associated with a builder\n \n     To update a single option use a pattern like the following:\n \n@@ -221,7 +221,7 @@ fn set_opts(builder: task_builder, opts: task_opts) {\n     builder.opts = opts;\n }\n \n-fn add_wrapper(builder: task_builder, gen_body: fn@(+fn~()) -> fn~()) {\n+fn add_wrapper(builder: builder, gen_body: fn@(+fn~()) -> fn~()) {\n     #[doc = \"\n     Add a wrapper to the body of the spawned task.\n \n@@ -241,7 +241,7 @@ fn add_wrapper(builder: task_builder, gen_body: fn@(+fn~()) -> fn~()) {\n     };\n }\n \n-fn run(-builder: task_builder, +f: fn~()) {\n+fn run(-builder: builder, +f: fn~()) {\n     #[doc = \"\n     Creates and exucutes a new child task\n \n@@ -262,7 +262,7 @@ fn run(-builder: task_builder, +f: fn~()) {\n \n /* Builder convenience functions */\n \n-fn future_result(builder: task_builder) -> future::future<task_result> {\n+fn future_result(builder: builder) -> future::future<task_result> {\n     #[doc = \"\n     Get a future representing the exit status of the task.\n \n@@ -295,7 +295,7 @@ fn future_result(builder: task_builder) -> future::future<task_result> {\n     }\n }\n \n-fn future_task(builder: task_builder) -> future::future<task> {\n+fn future_task(builder: builder) -> future::future<task> {\n     #[doc = \"Get a future representing the handle to the new task\"];\n \n     let mut po = comm::port();\n@@ -309,7 +309,7 @@ fn future_task(builder: task_builder) -> future::future<task> {\n     future::from_port(po)\n }\n \n-fn unsupervise(builder: task_builder) {\n+fn unsupervise(builder: builder) {\n     #[doc = \"Configures the new task to not propagate failure to its parent\"];\n \n     set_opts(builder, {\n@@ -318,7 +318,7 @@ fn unsupervise(builder: task_builder) {\n     });\n }\n \n-fn run_listener<A:send>(-builder: task_builder,\n+fn run_listener<A:send>(-builder: builder,\n                         +f: fn~(comm::port<A>)) -> comm::chan<A> {\n     #[doc = \"\n     Runs a new task while providing a channel from the parent to the child\n@@ -355,10 +355,10 @@ fn spawn(+f: fn~()) {\n     Sets up a new task with its own call stack and schedules it to run\n     the provided unique closure.\n \n-    This function is equivalent to `run(new_task_builder(), f)`.\n+    This function is equivalent to `run(new_builder(), f)`.\n     \"];\n \n-    run(task_builder(), f);\n+    run(builder(), f);\n }\n \n fn spawn_listener<A:send>(+f: fn~(comm::port<A>)) -> comm::chan<A> {\n@@ -384,10 +384,10 @@ fn spawn_listener<A:send>(+f: fn~(comm::port<A>)) -> comm::chan<A> {\n         };\n         // Likewise, the parent has both a 'po' and 'ch'\n \n-    This function is equivalent to `run_listener(new_task_builder(), f)`.\n+    This function is equivalent to `run_listener(new_builder(), f)`.\n     \"];\n \n-    run_listener(task_builder(), f)\n+    run_listener(builder(), f)\n }\n \n fn spawn_sched(mode: sched_mode, +f: fn~()) {\n@@ -404,7 +404,7 @@ fn spawn_sched(mode: sched_mode, +f: fn~()) {\n     greater than zero.\n     \"];\n \n-    let mut builder = task_builder();\n+    let mut builder = builder();\n     set_opts(builder, {\n         sched: some({\n             mode: mode,\n@@ -429,7 +429,7 @@ fn try<T:send>(+f: fn~() -> T) -> result<T,()> {\n \n     let po = comm::port();\n     let ch = comm::chan(po);\n-    let mut builder = task_builder();\n+    let mut builder = builder();\n     unsupervise(builder);\n     let result = future_result(builder);\n     run(builder) {||\n@@ -626,8 +626,8 @@ fn test_spawn_raw_notify() {\n fn test_run_basic() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    let builder = task_builder();\n-    run(builder) {||\n+    let buildr = builder();\n+    run(buildr) {||\n         comm::send(ch, ());\n     }\n     comm::recv(po);\n@@ -637,39 +637,39 @@ fn test_run_basic() {\n fn test_add_wrapper() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    let builder = task_builder();\n-    add_wrapper(builder) {|body|\n+    let buildr = builder();\n+    add_wrapper(buildr) {|body|\n         fn~() {\n             body();\n             comm::send(ch, ());\n         }\n     }\n-    run(builder) {||}\n+    run(buildr) {||}\n     comm::recv(po);\n }\n \n #[test]\n #[ignore(cfg(target_os = \"win32\"))]\n fn test_future_result() {\n-    let builder = task_builder();\n-    let result = future_result(builder);\n-    run(builder) {||}\n+    let buildr = builder();\n+    let result = future_result(buildr);\n+    run(buildr) {||}\n     assert future::get(result) == success;\n \n-    let builder = task_builder();\n-    let result = future_result(builder);\n-    unsupervise(builder);\n-    run(builder) {|| fail }\n+    let buildr = builder();\n+    let result = future_result(buildr);\n+    unsupervise(buildr);\n+    run(buildr) {|| fail }\n     assert future::get(result) == failure;\n }\n \n #[test]\n fn test_future_task() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n-    let builder = task_builder();\n-    let task1 = future_task(builder);\n-    run(builder) {|| comm::send(ch, get_task()) }\n+    let buildr = builder();\n+    let task1 = future_task(buildr);\n+    run(buildr) {|| comm::send(ch, get_task()) }\n     assert future::get(task1) == comm::recv(po);\n }\n \n@@ -863,8 +863,8 @@ fn test_avoid_copying_the_body_spawn_listener() {\n #[test]\n fn test_avoid_copying_the_body_run() {\n     avoid_copying_the_body {|f|\n-        let builder = task_builder();\n-        run(builder) {||\n+        let buildr = builder();\n+        run(buildr) {||\n             f();\n         }\n     }\n@@ -873,8 +873,8 @@ fn test_avoid_copying_the_body_run() {\n #[test]\n fn test_avoid_copying_the_body_run_listener() {\n     avoid_copying_the_body {|f|\n-        let builder = task_builder();\n-        run_listener(builder, fn~[move f](_po: comm::port<int>) {\n+        let buildr = builder();\n+        run_listener(buildr, fn~[move f](_po: comm::port<int>) {\n             f();\n         });\n     }\n@@ -892,9 +892,9 @@ fn test_avoid_copying_the_body_try() {\n #[test]\n fn test_avoid_copying_the_body_future_task() {\n     avoid_copying_the_body {|f|\n-        let builder = task_builder();\n-        future_task(builder);\n-        run(builder) {||\n+        let buildr = builder();\n+        future_task(buildr);\n+        run(buildr) {||\n             f();\n         }\n     }\n@@ -903,29 +903,29 @@ fn test_avoid_copying_the_body_future_task() {\n #[test]\n fn test_avoid_copying_the_body_unsupervise() {\n     avoid_copying_the_body {|f|\n-        let builder = task_builder();\n-        unsupervise(builder);\n-        run(builder) {||\n+        let buildr = builder();\n+        unsupervise(buildr);\n+        run(buildr) {||\n             f();\n         }\n     }\n }\n \n #[test]\n fn test_osmain() {\n-    let builder = task_builder();\n+    let buildr = builder();\n     let opts = {\n         sched: some({\n             mode: osmain,\n             native_stack_size: none\n         })\n-        with get_opts(builder)\n+        with get_opts(buildr)\n     };\n-    set_opts(builder, opts);\n+    set_opts(buildr, opts);\n \n     let po = comm::port();\n     let ch = comm::chan(po);\n-    run(builder) {||\n+    run(buildr) {||\n         comm::send(ch, ());\n     }\n     comm::recv(po);"}, {"sha": "ad3ab9fef796960c4f94e852c3cbf53a651ef28c", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -390,7 +390,7 @@ fn run_test(+test: test_desc, monitor_ch: comm::chan<monitor_msg>) {\n \n     task::spawn {||\n         let testfn = test.fn;\n-        let mut builder = task::task_builder();\n+        let mut builder = task::builder();\n         let result_future = task::future_result(builder);\n         task::unsupervise(builder);\n         task::run(builder, testfn);"}, {"sha": "dad3e6d836a7ea5d35a7c964b1b2efc41838549b", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -39,7 +39,7 @@ fn run(args: [str]) {\n     let to_child = to_child;\n     let mut worker_results = [];\n     uint::range(0u, workers) {|_i|\n-        let builder = task::task_builder();\n+        let builder = task::builder();\n         worker_results += [task::future_result(builder)];\n         task::run(builder) {||\n             uint::range(0u, size / workers) {|_i|"}, {"sha": "f84923aa47727d48d7b09bd7bf3a30f5810bafa9", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -71,7 +71,7 @@ fn stress_task(&&id: int) {\n fn stress(num_tasks: int) {\n     let mut results = [];\n     range(0, num_tasks) {|i|\n-        let builder = task::task_builder();\n+        let builder = task::builder();\n         results += [task::future_result(builder)];\n         task::run(builder) {|| stress_task(i); }\n     }"}, {"sha": "eba2030c961956c0d6697f27ae78e43dc130f083", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -62,7 +62,7 @@ mod map_reduce {\n        [future::future<task::task_result>] {\n         let mut results = [];\n         for i: str in inputs {\n-            let builder = task::task_builder();\n+            let builder = task::builder();\n             results += [task::future_result(builder)];\n             task::run(builder) {|| map_task(ctrl, i)}\n         }\n@@ -160,7 +160,7 @@ mod map_reduce {\n                     // log(error, \"creating new reducer for \" + k);\n                     let p = port();\n                     let ch = chan(p);\n-                    let builder = task::task_builder();\n+                    let builder = task::builder();\n                     results += [task::future_result(builder)];\n                     task::run(builder) {||reduce_task(k, ch)}\n                     c = recv(p);"}, {"sha": "99e18ef87dd915f09fcd31273534c3098fdd16c8", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -14,7 +14,7 @@ fn iloop() {\n \n fn main() {\n     uint::range(0u, 100u) {|_i|\n-        let builder = task::task_builder();\n+        let builder = task::builder();\n         task::unsupervise(builder);\n         task::run(builder) {|| iloop(); };\n     }"}, {"sha": "04b58f908bc20915865fc2c10debf9e4816992b9", "filename": "src/test/run-pass/osmain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Fosmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Fosmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fosmain.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -14,7 +14,7 @@ fn run(i: int) {\n         ret;\n     }\n \n-    let builder = task::task_builder();\n+    let builder = task::builder();\n     let opts = {\n         sched: some({\n             mode: task::osmain,\n@@ -26,7 +26,7 @@ fn run(i: int) {\n     task::unsupervise(builder);\n     task::run(builder) {||\n         task::yield();\n-        let builder = task::task_builder();\n+        let builder = task::builder();\n         let opts = {\n             sched: some({\n                 mode: task::single_threaded,"}, {"sha": "bfd9b477d8e0ac0ef1630dce9f6dc04d3c40ed1d", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -22,7 +22,7 @@ fn iloop() {\n \n fn main() {\n     uint::range(0u, 16u) {|_i|\n-        let builder = task::task_builder();\n+        let builder = task::builder();\n         task::unsupervise(builder);\n         task::run(builder) {|| iloop(); }\n     }"}, {"sha": "51e61298290dc8eb0ad5bc5ca4a525f8412337fa", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -7,7 +7,7 @@ fn start(&&task_number: int) { #debug(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: int = 0;\n-    let builder = task::task_builder();\n+    let builder = task::builder();\n     let r = task::future_result(builder);\n     task::run(builder) {|| start(i); };\n "}, {"sha": "d59fe84aa022805ca987ac85d73569d06ad99db7", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -32,7 +32,7 @@ fn test00() {\n     // Create and spawn tasks...\n     let mut results = [];\n     while i < number_of_tasks {\n-        let builder = task::task_builder();\n+        let builder = task::builder();\n         results += [task::future_result(builder)];\n         task::run(builder) {||\n             test00_start(ch, i, number_of_messages)"}, {"sha": "e5c2433473441a047ffc95510126b90b0487224e", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -16,7 +16,7 @@ fn test00() {\n     let number_of_messages: int = 10;\n     let ch = comm::chan(p);\n \n-    let builder = task::task_builder();\n+    let builder = task::builder();\n     let r = task::future_result(builder);\n     task::run(builder) {||\n         test00_start(ch, number_of_messages);"}, {"sha": "dc49687b69bbe110f314cb7e1d7bbf7a3a374f96", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -41,7 +41,7 @@ fn test00() {\n     let mut results = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        let builder = task::task_builder();\n+        let builder = task::builder();\n         results += [task::future_result(builder)];\n         task::run(builder) {|| test00_start(ch, i, number_of_messages);}\n     }\n@@ -126,7 +126,7 @@ fn test06() {\n     let mut results = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        let builder = task::task_builder();\n+        let builder = task::builder();\n         results += [task::future_result(builder)];\n         task::run(builder) {|| test06_start(i);};\n     }"}, {"sha": "77d6bc9e5657427f75618199b8747933f38eba4d", "filename": "src/test/run-pass/task-killjoin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -24,7 +24,7 @@ fn supervisor() {\n }\n \n fn main() {\n-    let builder = task::task_builder();\n+    let builder = task::builder();\n     task::unsupervise(builder);\n     task::run(builder) {|| supervisor(); }\n }"}, {"sha": "3dd2ebb38592ef7246cb97ad6807cc9fa2663069", "filename": "src/test/run-pass/too-much-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -5,7 +5,7 @@\n // that it doesn't bring down the whole proc\n \n fn main() {\n-    let builder = task::task_builder();\n+    let builder = task::builder();\n     task::unsupervise(builder);\n     task::run(builder) {||\n         fn f() { f() };"}, {"sha": "5634b818794b8a6b9c39c69d7eaafeabd67dc837", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -8,7 +8,7 @@ fn f() {\n }\n \n fn main() {\n-    let builder = task::task_builder();\n+    let builder = task::builder();\n     task::unsupervise(builder);\n     task::run(builder) {|| f(); }\n }\n\\ No newline at end of file"}, {"sha": "f8e3d93f431ddde714268751a215a7770f0188b5", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -15,7 +15,7 @@ fn f(c: comm::chan<bool>) {\n fn main() {\n     let p = comm::port();\n     let c = comm::chan(p);\n-    let builder = task::task_builder();\n+    let builder = task::builder();\n     task::unsupervise(builder);\n     task::run(builder) {|| f(c); }\n     assert comm::recv(p);"}, {"sha": "6b0e82928f4e7fadf8a2eeaad8fb1d0ad40a2397", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -12,7 +12,7 @@ fn f() {\n }\n \n fn main() {\n-    let builder = task::task_builder();\n+    let builder = task::builder();\n     task::unsupervise(builder);\n     task::run(builder) {|| f(); }\n }\n\\ No newline at end of file"}, {"sha": "2b733dcf9c1a4e431ab5d8a892587d1a231666fc", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -8,7 +8,7 @@ fn f() {\n }\n \n fn main() {\n-    let builder = task::task_builder();\n+    let builder = task::builder();\n     task::unsupervise(builder);\n     task::run(builder) {|| f(); }\n }\n\\ No newline at end of file"}, {"sha": "041d8470a6f6ca383eab32c758f6ccca541f6048", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -4,7 +4,7 @@ import task;\n import task::*;\n \n fn main() {\n-    let builder = task::task_builder();\n+    let builder = task::builder();\n     let result = task::future_result(builder);\n     task::run(builder) {|| child(); }\n     #error(\"1\");"}, {"sha": "6218baa29bc5e8e219efd3b21dafd594c6af91c0", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b07ddc8253895945b0e7f6588c196a9f5b851e/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=98b07ddc8253895945b0e7f6588c196a9f5b851e", "patch": "@@ -4,7 +4,7 @@ import task;\n import task::*;\n \n fn main() {\n-    let builder = task::task_builder();\n+    let builder = task::builder();\n     let result = task::future_result(builder);\n     task::run(builder) {|| child(); }\n     #error(\"1\");"}]}