{"sha": "acd8e59b6650deab3979e82b49c8c26e0f4ceefa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZDhlNTliNjY1MGRlYWIzOTc5ZTgyYjQ5YzhjMjZlMGY0Y2VlZmE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-01T15:15:12Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-01T15:30:24Z"}, "message": "build-manifest: calculate checksums lazily and in parallel\n\nThis commit improves the way build-manifest calculates the checksums\nincluded in the manifest, speeding it up:\n\n* Instead of calculating all the hashes beforehand and then using the\n  ones we need, the manifest is first generated with placeholder hashes,\n  and then a function walks through the manifest and calculates only the\n  needed checksums.\n\n* Calculating the checksums is now done in parallel with rayon, to\n  better utilize all the available disk bandwidth.\n\n* Calculating the checksums now uses the sha2 crate instead of the\n  sha256sum CLI tool: this avoids the overhead of calling another\n  process, but more importantly uses hardware acceleration whenever\n  available (the CLI tool doesn't support it at all).", "tree": {"sha": "3e04475b5e1a4603b588aadb97903998426e0c45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e04475b5e1a4603b588aadb97903998426e0c45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acd8e59b6650deab3979e82b49c8c26e0f4ceefa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl919hAACgkQPgar6Auq\n8ZzdCA//TXR+mIP/5Xd/5wX5ZuuX6Z+TDw2695yC/mjxEI5cgM5T4M6FIu9hNoQL\n4C/p3bgiBKxNQEUTUsUFlv3mIHSgaDfW/HG82uP3jBfHGLb4rnNdqQE5in97sCx7\nl+dy9JsB6b54v+/IHi46tpq7wqeE5ercCrKMXWYSHULjuVyVzXsC/A2WvXHOQmae\nRBCymrB8lMfPODjF9sPVzEnB3GkkkQFTnLf24AyndTMAG5kBETqya5CyqCHVKtXm\niYwMcb7OxpHVkdDXT7Lo9f5bufcflmP9qIdi49svjmOXzxwjARgu/REZl4HSZ3I0\nNq41rxQOZE769O4bf1eRJjGE8drJ4bYQh1wdmGl2skoxdWRHZNP4NMRNb09m/yeL\n6g1qM4W7pMnGQdeoIIsNx/mMNpW6afeCOkzp534FiZKJQ0Joxi8bcPJ8RKQNL75c\n1DffoFhXTCY+JMIkWnI/GUV9M87N2q4QyYQwDZASgdAwgAPArAWyWODzu+SOVZer\npJ+A/HwwTiWxGGhCb5+ow53K9uhIXaqVTg0cxgLQnNo5jnB9trgXA+p/ywwvHkeR\n+mz5Q5burQIwXMrMqLf1FOqTACY86c1XM76XrqUYP8SYN4Yp7X7dW6as5yyFkYUG\nzLT82CQfMaDZWSn73llNxQBePlfTp8y33ALz0Q3Q1kcU5L2lQps=\n=F1v+\n-----END PGP SIGNATURE-----", "payload": "tree 3e04475b5e1a4603b588aadb97903998426e0c45\nparent 0375ee8b55becd14ca73ad420b7311fb6e9dfaeb\nauthor Pietro Albini <pietro@pietroalbini.org> 1601565312 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1601566224 +0200\n\nbuild-manifest: calculate checksums lazily and in parallel\n\nThis commit improves the way build-manifest calculates the checksums\nincluded in the manifest, speeding it up:\n\n* Instead of calculating all the hashes beforehand and then using the\n  ones we need, the manifest is first generated with placeholder hashes,\n  and then a function walks through the manifest and calculates only the\n  needed checksums.\n\n* Calculating the checksums is now done in parallel with rayon, to\n  better utilize all the available disk bandwidth.\n\n* Calculating the checksums now uses the sha2 crate instead of the\n  sha256sum CLI tool: this avoids the overhead of calling another\n  process, but more importantly uses hardware acceleration whenever\n  available (the CLI tool doesn't support it at all).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acd8e59b6650deab3979e82b49c8c26e0f4ceefa", "html_url": "https://github.com/rust-lang/rust/commit/acd8e59b6650deab3979e82b49c8c26e0f4ceefa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acd8e59b6650deab3979e82b49c8c26e0f4ceefa/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0375ee8b55becd14ca73ad420b7311fb6e9dfaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0375ee8b55becd14ca73ad420b7311fb6e9dfaeb", "html_url": "https://github.com/rust-lang/rust/commit/0375ee8b55becd14ca73ad420b7311fb6e9dfaeb"}], "stats": {"total": 193, "additions": 164, "deletions": 29}, "files": [{"sha": "649972e61d7e94b7855a4577a058e7f847ad5731", "filename": "Cargo.lock", "status": "modified", "additions": 64, "deletions": 8, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/acd8e59b6650deab3979e82b49c8c26e0f4ceefa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/acd8e59b6650deab3979e82b49c8c26e0f4ceefa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=acd8e59b6650deab3979e82b49c8c26e0f4ceefa", "patch": "@@ -183,7 +183,16 @@ dependencies = [\n  \"block-padding\",\n  \"byte-tools\",\n  \"byteorder\",\n- \"generic-array\",\n+ \"generic-array 0.12.3\",\n+]\n+\n+[[package]]\n+name = \"block-buffer\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4\"\n+dependencies = [\n+ \"generic-array 0.14.4\",\n ]\n \n [[package]]\n@@ -233,8 +242,11 @@ version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n  \"flate2\",\n+ \"hex 0.4.2\",\n+ \"rayon\",\n  \"serde\",\n  \"serde_json\",\n+ \"sha2\",\n  \"tar\",\n  \"toml\",\n ]\n@@ -687,6 +699,12 @@ version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9a21fa21941700a3cd8fcb4091f361a6a712fac632f85d9f487cc892045d55c6\"\n \n+[[package]]\n+name = \"cpuid-bool\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8aebca1129a03dc6dc2b127edd729435bbc4a37e1d5f4d7513165089ceb02634\"\n+\n [[package]]\n name = \"crates-io\"\n version = \"0.31.1\"\n@@ -884,7 +902,16 @@ version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n dependencies = [\n- \"generic-array\",\n+ \"generic-array 0.12.3\",\n+]\n+\n+[[package]]\n+name = \"digest\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066\"\n+dependencies = [\n+ \"generic-array 0.14.4\",\n ]\n \n [[package]]\n@@ -1166,6 +1193,16 @@ dependencies = [\n  \"typenum\",\n ]\n \n+[[package]]\n+name = \"generic-array\"\n+version = \"0.14.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817\"\n+dependencies = [\n+ \"typenum\",\n+ \"version_check\",\n+]\n+\n [[package]]\n name = \"getopts\"\n version = \"0.2.21\"\n@@ -1844,9 +1881,9 @@ version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"a18af3dcaf2b0219366cdb4e2af65a6101457b415c3d1a5c71dd9c2b7c77b9c8\"\n dependencies = [\n- \"block-buffer\",\n- \"digest\",\n- \"opaque-debug\",\n+ \"block-buffer 0.7.3\",\n+ \"digest 0.8.1\",\n+ \"opaque-debug 0.2.3\",\n ]\n \n [[package]]\n@@ -2106,6 +2143,12 @@ version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n \n+[[package]]\n+name = \"opaque-debug\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5\"\n+\n [[package]]\n name = \"open\"\n version = \"1.4.0\"\n@@ -4371,10 +4414,23 @@ version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df\"\n dependencies = [\n- \"block-buffer\",\n- \"digest\",\n+ \"block-buffer 0.7.3\",\n+ \"digest 0.8.1\",\n  \"fake-simd\",\n- \"opaque-debug\",\n+ \"opaque-debug 0.2.3\",\n+]\n+\n+[[package]]\n+name = \"sha2\"\n+version = \"0.9.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2933378ddfeda7ea26f48c555bdad8bb446bf8a3d17832dc83e380d444cfb8c1\"\n+dependencies = [\n+ \"block-buffer 0.9.0\",\n+ \"cfg-if\",\n+ \"cpuid-bool\",\n+ \"digest 0.9.0\",\n+ \"opaque-debug 0.3.0\",\n ]\n \n [[package]]"}, {"sha": "4ae4dbfc06edead6bd990ceef7a23301b2c06006", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acd8e59b6650deab3979e82b49c8c26e0f4ceefa/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/acd8e59b6650deab3979e82b49c8c26e0f4ceefa/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=acd8e59b6650deab3979e82b49c8c26e0f4ceefa", "patch": "@@ -11,3 +11,6 @@ serde_json = \"1.0\"\n anyhow = \"1.0.32\"\n flate2 = \"1.0.16\"\n tar = \"0.4.29\"\n+sha2 = \"0.9.1\"\n+rayon = \"1.3.1\"\n+hex = \"0.4.2\""}, {"sha": "91f042a07d4bbea4cae7b7cc4860c993829c350c", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 61, "deletions": 10, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/acd8e59b6650deab3979e82b49c8c26e0f4ceefa/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd8e59b6650deab3979e82b49c8c26e0f4ceefa/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=acd8e59b6650deab3979e82b49c8c26e0f4ceefa", "patch": "@@ -7,14 +7,19 @@\n mod manifest;\n mod versions;\n \n-use crate::manifest::{Component, Manifest, Package, Rename, Target};\n+use crate::manifest::{Component, FileHash, Manifest, Package, Rename, Target};\n use crate::versions::{PkgType, Versions};\n-use std::collections::{BTreeMap, HashMap};\n+use rayon::prelude::*;\n+use sha2::Digest;\n+use std::collections::{BTreeMap, HashMap, HashSet};\n use std::env;\n+use std::error::Error;\n use std::fs::{self, File};\n use std::io::{self, Read, Write};\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n+use std::sync::Mutex;\n+use std::time::Instant;\n \n static HOSTS: &[&str] = &[\n     \"aarch64-unknown-linux-gnu\",\n@@ -181,7 +186,6 @@ struct Builder {\n \n     input: PathBuf,\n     output: PathBuf,\n-    digests: BTreeMap<String, String>,\n     s3_address: String,\n     date: String,\n \n@@ -223,7 +227,6 @@ fn main() {\n \n         input,\n         output,\n-        digests: BTreeMap::new(),\n         s3_address,\n         date,\n \n@@ -236,7 +239,9 @@ fn main() {\n impl Builder {\n     fn build(&mut self) {\n         self.check_toolstate();\n-        self.digest_and_sign();\n+        if self.legacy {\n+            self.digest_and_sign();\n+        }\n         let manifest = self.build_manifest();\n \n         let rust_version = self.versions.package_version(&PkgType::Rust).unwrap();\n@@ -270,10 +275,9 @@ impl Builder {\n     /// Hash all files, compute their signatures, and collect the hashes in `self.digests`.\n     fn digest_and_sign(&mut self) {\n         for file in t!(self.input.read_dir()).map(|e| t!(e).path()) {\n-            let filename = file.file_name().unwrap().to_str().unwrap();\n-            let digest = self.hash(&file);\n+            file.file_name().unwrap().to_str().unwrap();\n+            self.hash(&file);\n             self.sign(&file);\n-            assert!(self.digests.insert(filename.to_string(), digest).is_none());\n         }\n     }\n \n@@ -289,6 +293,9 @@ impl Builder {\n         self.add_profiles_to(&mut manifest);\n         self.add_renames_to(&mut manifest);\n         manifest.pkg.insert(\"rust\".to_string(), self.rust_package(&manifest));\n+\n+        self.fill_missing_hashes(&mut manifest);\n+\n         manifest\n     }\n \n@@ -561,6 +568,41 @@ impl Builder {\n         assert!(t!(child.wait()).success());\n     }\n \n+    fn fill_missing_hashes(&self, manifest: &mut Manifest) {\n+        // First collect all files that need hashes\n+        let mut need_hashes = HashSet::new();\n+        crate::manifest::visit_file_hashes(manifest, |file_hash| {\n+            if let FileHash::Missing(path) = file_hash {\n+                need_hashes.insert(path.clone());\n+            }\n+        });\n+\n+        let collected = Mutex::new(HashMap::new());\n+        let collection_start = Instant::now();\n+        println!(\n+            \"collecting hashes for {} tarballs across {} threads\",\n+            need_hashes.len(),\n+            rayon::current_num_threads().min(need_hashes.len()),\n+        );\n+        need_hashes.par_iter().for_each(|path| match fetch_hash(path) {\n+            Ok(hash) => {\n+                collected.lock().unwrap().insert(path, hash);\n+            }\n+            Err(err) => eprintln!(\"error while fetching the hash for {}: {}\", path.display(), err),\n+        });\n+        let collected = collected.into_inner().unwrap();\n+        println!(\"collected {} hashes in {:.2?}\", collected.len(), collection_start.elapsed());\n+\n+        crate::manifest::visit_file_hashes(manifest, |file_hash| {\n+            if let FileHash::Missing(path) = file_hash {\n+                match collected.get(path) {\n+                    Some(hash) => *file_hash = FileHash::Present(hash.clone()),\n+                    None => panic!(\"missing hash for file {}\", path.display()),\n+                }\n+            }\n+        })\n+    }\n+\n     fn write_channel_files(&self, channel_name: &str, manifest: &Manifest) {\n         self.write(&toml::to_string(&manifest).unwrap(), channel_name, \".toml\");\n         self.write(&manifest.date, channel_name, \"-date.txt\");\n@@ -574,7 +616,16 @@ impl Builder {\n     fn write(&self, contents: &str, channel_name: &str, suffix: &str) {\n         let dst = self.output.join(format!(\"channel-rust-{}{}\", channel_name, suffix));\n         t!(fs::write(&dst, contents));\n-        self.hash(&dst);\n-        self.sign(&dst);\n+        if self.legacy {\n+            self.hash(&dst);\n+            self.sign(&dst);\n+        }\n     }\n }\n+\n+fn fetch_hash(path: &Path) -> Result<String, Box<dyn Error>> {\n+    let mut file = File::open(path)?;\n+    let mut sha256 = sha2::Sha256::default();\n+    std::io::copy(&mut file, &mut sha256)?;\n+    Ok(hex::encode(sha256.finalize()))\n+}"}, {"sha": "20e62abb54cfa33bfa3f6fc4ffcd8e0c86903d0a", "filename": "src/tools/build-manifest/src/manifest.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/acd8e59b6650deab3979e82b49c8c26e0f4ceefa/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd8e59b6650deab3979e82b49c8c26e0f4ceefa/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs?ref=acd8e59b6650deab3979e82b49c8c26e0f4ceefa", "patch": "@@ -1,5 +1,5 @@\n use crate::Builder;\n-use serde::Serialize;\n+use serde::{Serialize, Serializer};\n use std::collections::BTreeMap;\n use std::path::{Path, PathBuf};\n \n@@ -29,9 +29,9 @@ pub(crate) struct Rename {\n pub(crate) struct Target {\n     pub(crate) available: bool,\n     pub(crate) url: Option<String>,\n-    pub(crate) hash: Option<String>,\n+    pub(crate) hash: Option<FileHash>,\n     pub(crate) xz_url: Option<String>,\n-    pub(crate) xz_hash: Option<String>,\n+    pub(crate) xz_hash: Option<FileHash>,\n     pub(crate) components: Option<Vec<Component>>,\n     pub(crate) extensions: Option<Vec<Component>>,\n }\n@@ -52,10 +52,10 @@ impl Target {\n             extensions: None,\n             // .gz\n             url: gz.as_ref().map(|path| builder.url(path)),\n-            hash: gz.map(|path| Self::digest_of(builder, &path)),\n+            hash: gz.map(FileHash::Missing),\n             // .xz\n             xz_url: xz.as_ref().map(|path| builder.url(path)),\n-            xz_hash: xz.map(|path| Self::digest_of(builder, &path)),\n+            xz_hash: xz.map(FileHash::Missing),\n         }\n     }\n \n@@ -65,12 +65,6 @@ impl Target {\n         if path.is_file() { Some(path) } else { None }\n     }\n \n-    fn digest_of(builder: &Builder, path: &Path) -> String {\n-        // TEMPORARY CODE -- DON'T REVIEW :)\n-        let file_name = path.file_name().unwrap().to_str().unwrap();\n-        builder.digests.get(file_name).unwrap().clone()\n-    }\n-\n     pub(crate) fn unavailable() -> Self {\n         Self::default()\n     }\n@@ -87,3 +81,34 @@ impl Component {\n         Self { pkg: pkg.to_string(), target: target.to_string() }\n     }\n }\n+\n+#[allow(unused)]\n+pub(crate) enum FileHash {\n+    Missing(PathBuf),\n+    Present(String),\n+}\n+\n+impl Serialize for FileHash {\n+    fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {\n+        match self {\n+            FileHash::Missing(path) => Err(serde::ser::Error::custom(format!(\n+                \"can't serialize a missing hash for file {}\",\n+                path.display()\n+            ))),\n+            FileHash::Present(inner) => inner.serialize(serializer),\n+        }\n+    }\n+}\n+\n+pub(crate) fn visit_file_hashes(manifest: &mut Manifest, mut f: impl FnMut(&mut FileHash)) {\n+    for pkg in manifest.pkg.values_mut() {\n+        for target in pkg.target.values_mut() {\n+            if let Some(hash) = &mut target.hash {\n+                f(hash);\n+            }\n+            if let Some(hash) = &mut target.xz_hash {\n+                f(hash);\n+            }\n+        }\n+    }\n+}"}]}