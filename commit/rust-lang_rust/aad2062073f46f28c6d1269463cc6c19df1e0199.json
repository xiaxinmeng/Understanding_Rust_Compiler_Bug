{"sha": "aad2062073f46f28c6d1269463cc6c19df1e0199", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZDIwNjIwNzNmNDZmMjhjNmQxMjY5NDYzY2M2YzE5ZGYxZTAxOTk=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2017-03-10T16:19:42Z"}, "committer": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2017-04-15T16:01:56Z"}, "message": "Specialize Vec::from_elem for other numeric types", "tree": {"sha": "4cc57e0c924feb0018424d13f63aa7be2dca1ac6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cc57e0c924feb0018424d13f63aa7be2dca1ac6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aad2062073f46f28c6d1269463cc6c19df1e0199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aad2062073f46f28c6d1269463cc6c19df1e0199", "html_url": "https://github.com/rust-lang/rust/commit/aad2062073f46f28c6d1269463cc6c19df1e0199", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aad2062073f46f28c6d1269463cc6c19df1e0199/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "675475c4d3e3b1ebff5b761570f4a3f9a0ca23df", "url": "https://api.github.com/repos/rust-lang/rust/commits/675475c4d3e3b1ebff5b761570f4a3f9a0ca23df", "html_url": "https://github.com/rust-lang/rust/commit/675475c4d3e3b1ebff5b761570f4a3f9a0ca23df"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "31af6c2f28430b941afcec0403e354637b2177d9", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aad2062073f46f28c6d1269463cc6c19df1e0199/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad2062073f46f28c6d1269463cc6c19df1e0199/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=aad2062073f46f28c6d1269463cc6c19df1e0199", "patch": "@@ -35,13 +35,15 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![cfg_attr(not(test), feature(char_escape_debug))]\n+#![cfg_attr(not(test), feature(core_float))]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]\n #![feature(fused)]\n #![feature(generic_param_attrs)]\n #![feature(heap_api)]\n+#![feature(i128_type)]\n #![feature(inclusive_range)]\n #![feature(lang_items)]\n #![feature(manually_drop)]"}, {"sha": "a3c529f35859837789ab5554f79fd1a8e9a04de1", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/aad2062073f46f28c6d1269463cc6c19df1e0199/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad2062073f46f28c6d1269463cc6c19df1e0199/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=aad2062073f46f28c6d1269463cc6c19df1e0199", "patch": "@@ -77,6 +77,8 @@ use core::hash::{self, Hash};\n use core::intrinsics::{arith_offset, assume};\n use core::iter::{FromIterator, FusedIterator, TrustedLen};\n use core::mem;\n+#[cfg(not(test))]\n+use core::num::Float;\n use core::ops::{InPlace, Index, IndexMut, Place, Placer};\n use core::ops;\n use core::ptr;\n@@ -1404,6 +1406,41 @@ impl SpecFromElem for u8 {\n     }\n }\n \n+macro_rules! impl_spec_from_elem {\n+    ($t: ty, $is_zero: expr) => {\n+        impl SpecFromElem for $t {\n+            #[inline]\n+            fn from_elem(elem: $t, n: usize) -> Vec<$t> {\n+                if $is_zero(elem) {\n+                    return Vec {\n+                        buf: RawVec::with_capacity_zeroed(n),\n+                        len: n,\n+                    }\n+                }\n+                let mut v = Vec::with_capacity(n);\n+                v.extend_with_element(n, elem);\n+                v\n+            }\n+        }\n+    };\n+}\n+\n+impl_spec_from_elem!(i8, |x| x == 0);\n+impl_spec_from_elem!(i16, |x| x == 0);\n+impl_spec_from_elem!(i32, |x| x == 0);\n+impl_spec_from_elem!(i64, |x| x == 0);\n+impl_spec_from_elem!(i128, |x| x == 0);\n+impl_spec_from_elem!(isize, |x| x == 0);\n+\n+impl_spec_from_elem!(u16, |x| x == 0);\n+impl_spec_from_elem!(u32, |x| x == 0);\n+impl_spec_from_elem!(u64, |x| x == 0);\n+impl_spec_from_elem!(u128, |x| x == 0);\n+impl_spec_from_elem!(usize, |x| x == 0);\n+\n+impl_spec_from_elem!(f32, |x: f32| x == 0. && x.is_sign_positive());\n+impl_spec_from_elem!(f64, |x: f64| x == 0. && x.is_sign_positive());\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Common trait implementations for Vec\n ////////////////////////////////////////////////////////////////////////////////"}]}