{"sha": "6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZTM3ZmFiOTVkZGQ5YWM4NzE2YWU5NmRjMmY4NjI1MWE4YzRhNjE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-08T22:35:55Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:07:37Z"}, "message": "introduce PredicateAtom", "tree": {"sha": "a084130eaca7ac392772be5fd90ff0ac9e392ac1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a084130eaca7ac392772be5fd90ff0ac9e392ac1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61", "html_url": "https://github.com/rust-lang/rust/commit/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88787083f43edc49cfa9c9e6191372fbad323791", "url": "https://api.github.com/repos/rust-lang/rust/commits/88787083f43edc49cfa9c9e6191372fbad323791", "html_url": "https://github.com/rust-lang/rust/commit/88787083f43edc49cfa9c9e6191372fbad323791"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "0fdb5b8c2a48e9a6217c96f58dec7808be398e1b", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{Opaque, PredicateKind::Trait};\n+use rustc_middle::ty::{Opaque, PredicateAtom::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt;\n@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n                                     infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                    if let Trait(trait_pred, _) = obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n+                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "2c70183d87666d7aa0ac5ea93fc94d4406c7579d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61", "patch": "@@ -1559,7 +1559,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let ty::Opaque(def_id, _) = ret_ty.kind {\n                 // one of the associated types must be Self\n                 for &(predicate, _span) in cx.tcx.predicates_of(def_id).predicates {\n-                    if let ty::PredicateKind::Projection(projection_predicate) = predicate.ignore_quantifiers().skip_binder().kind() {\n+                    if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n                         // walk the associated type and check for Self\n                         if contains_self_ty(projection_predicate.ty) {\n                             return;"}, {"sha": "095778777449831305e59398bda6ce891da4de73", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n-                if let ty::PredicateKind::Trait(pred, _) = obligation.predicate.kind() {\n+                if let ty::PredicateKind::Atom(ty::PredicateAtom::Trait(pred, _)) = obligation.predicate.kind() {\n                     if pred.def_id() == sized_trait {\n                         return None;\n                     }"}, {"sha": "655b1133cf74f14430d2a2a3415a70a53cfde184", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61", "patch": "@@ -1263,7 +1263,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n-                if let ty::PredicateKind::Trait(trait_predicate, _) = predicate.ignore_quantifiers().skip_binder().kind() {\n+                if let ty::PredicateAtom::Trait(trait_predicate, _) = predicate.skip_binders() {\n                     if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n                         return true;\n                     }"}]}