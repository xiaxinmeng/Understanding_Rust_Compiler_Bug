{"sha": "93a8fcf7a8328054e47e8775c94552a488a5ff58", "node_id": "C_kwDOAAsO6NoAKDkzYThmY2Y3YTgzMjgwNTRlNDdlODc3NWM5NDU1MmE0ODhhNWZmNTg", "commit": {"author": {"name": "Jake Vossen", "email": "jake@vossen.dev", "date": "2022-04-01T20:22:49Z"}, "committer": {"name": "Jake Vossen", "email": "jake@vossen.dev", "date": "2022-04-01T20:22:49Z"}, "message": "enum variant wording", "tree": {"sha": "b0a4912e62a1d1553caa1871542395db050a75ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0a4912e62a1d1553caa1871542395db050a75ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93a8fcf7a8328054e47e8775c94552a488a5ff58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93a8fcf7a8328054e47e8775c94552a488a5ff58", "html_url": "https://github.com/rust-lang/rust/commit/93a8fcf7a8328054e47e8775c94552a488a5ff58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93a8fcf7a8328054e47e8775c94552a488a5ff58/comments", "author": {"login": "jakevossen5", "id": 16298666, "node_id": "MDQ6VXNlcjE2Mjk4NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/16298666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevossen5", "html_url": "https://github.com/jakevossen5", "followers_url": "https://api.github.com/users/jakevossen5/followers", "following_url": "https://api.github.com/users/jakevossen5/following{/other_user}", "gists_url": "https://api.github.com/users/jakevossen5/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevossen5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevossen5/subscriptions", "organizations_url": "https://api.github.com/users/jakevossen5/orgs", "repos_url": "https://api.github.com/users/jakevossen5/repos", "events_url": "https://api.github.com/users/jakevossen5/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevossen5/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakevossen5", "id": 16298666, "node_id": "MDQ6VXNlcjE2Mjk4NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/16298666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevossen5", "html_url": "https://github.com/jakevossen5", "followers_url": "https://api.github.com/users/jakevossen5/followers", "following_url": "https://api.github.com/users/jakevossen5/following{/other_user}", "gists_url": "https://api.github.com/users/jakevossen5/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevossen5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevossen5/subscriptions", "organizations_url": "https://api.github.com/users/jakevossen5/orgs", "repos_url": "https://api.github.com/users/jakevossen5/repos", "events_url": "https://api.github.com/users/jakevossen5/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevossen5/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee84622c92610e79f13b047642322f9767c072ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee84622c92610e79f13b047642322f9767c072ea", "html_url": "https://github.com/rust-lang/rust/commit/ee84622c92610e79f13b047642322f9767c072ea"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "28e0b433a637cb900b66269192188698731b0965", "filename": "crates/ide_assists/src/handlers/generate_enum_is_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93a8fcf7a8328054e47e8775c94552a488a5ff58/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a8fcf7a8328054e47e8775c94552a488a5ff58/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs?ref=93a8fcf7a8328054e47e8775c94552a488a5ff58", "patch": "@@ -10,7 +10,7 @@ use crate::{\n \n // Assist: generate_enum_is_method\n //\n-// Generate an `is_` method for an enum variant.\n+// Generate an `is_` method for this enum variant.\n //\n // ```\n // enum Version {\n@@ -56,9 +56,9 @@ pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext) ->\n \n     let target = variant.syntax().text_range();\n     acc.add_group(\n-        &GroupLabel(\"Generate `is_`,`as_`,`try_into_`\".to_owned()),\n+        &GroupLabel(\"Generate an `is_`,`as_`, or `try_into_` for this enum variant\".to_owned()),\n         AssistId(\"generate_enum_is_method\", AssistKind::Generate),\n-        \"Generate an `is_` method for an enum variant\",\n+        \"Generate an `is_` method for this enum variant\",\n         target,\n         |builder| {\n             let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));"}, {"sha": "fe7a3cd53572638491a71f3861df56b17eec2c06", "filename": "crates/ide_assists/src/handlers/generate_enum_projection_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93a8fcf7a8328054e47e8775c94552a488a5ff58/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a8fcf7a8328054e47e8775c94552a488a5ff58/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs?ref=93a8fcf7a8328054e47e8775c94552a488a5ff58", "patch": "@@ -11,7 +11,7 @@ use crate::{\n \n // Assist: generate_enum_try_into_method\n //\n-// Generate an `try_into_` method for an enum variant.\n+// Generate a `try_into_` method for this enum variant.\n //\n // ```\n // enum Value {\n@@ -41,7 +41,7 @@ pub(crate) fn generate_enum_try_into_method(acc: &mut Assists, ctx: &AssistConte\n         acc,\n         ctx,\n         \"generate_enum_try_into_method\",\n-        \"Generate an `try_into_` method for an enum variant\",\n+        \"Generate a `try_into_` method for this enum variant\",\n         ProjectionProps {\n             fn_name_prefix: \"try_into\",\n             self_param: \"self\",\n@@ -55,7 +55,7 @@ pub(crate) fn generate_enum_try_into_method(acc: &mut Assists, ctx: &AssistConte\n \n // Assist: generate_enum_as_method\n //\n-// Generate an `as_` method for an enum variant.\n+// Generate an `as_` method for this enum variant.\n //\n // ```\n // enum Value {\n@@ -85,7 +85,7 @@ pub(crate) fn generate_enum_as_method(acc: &mut Assists, ctx: &AssistContext) ->\n         acc,\n         ctx,\n         \"generate_enum_as_method\",\n-        \"Generate an `as_` method for an enum variant\",\n+        \"Generate an `as_` method for this enum variant\",\n         ProjectionProps {\n             fn_name_prefix: \"as\",\n             self_param: \"&self\",\n@@ -141,7 +141,7 @@ fn generate_enum_projection_method(\n \n     let target = variant.syntax().text_range();\n     acc.add_group(\n-        &GroupLabel(\"Generate `is_`,`as_`,`try_into_`\".to_owned()),\n+        &GroupLabel(\"Generate an `is_`,`as_`, or `try_into_` for this enum variant\".to_owned()),\n         AssistId(assist_id, AssistKind::Generate),\n         assist_description,\n         target,"}, {"sha": "f7be3238241695f3784043837ab3f3714a393d39", "filename": "crates/ide_assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93a8fcf7a8328054e47e8775c94552a488a5ff58/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a8fcf7a8328054e47e8775c94552a488a5ff58/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=93a8fcf7a8328054e47e8775c94552a488a5ff58", "patch": "@@ -5,7 +5,7 @@ use crate::{utils::generate_trait_impl_text, AssistContext, AssistId, AssistKind\n \n // Assist: generate_from_impl_for_enum\n //\n-// Adds a From impl for an enum variant with one tuple field.\n+// Adds a From impl for this enum variant with one tuple field.\n //\n // ```\n // enum A { $0One(u32) }"}]}