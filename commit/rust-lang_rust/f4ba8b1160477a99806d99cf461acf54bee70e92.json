{"sha": "f4ba8b1160477a99806d99cf461acf54bee70e92", "node_id": "C_kwDOAAsO6NoAKGY0YmE4YjExNjA0NzdhOTk4MDZkOTljZjQ2MWFjZjU0YmVlNzBlOTI", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-08-24T23:07:17Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-08-27T14:24:24Z"}, "message": "Improve SC comments", "tree": {"sha": "0f0c0cd9957992fdabee2d7afa5553c73c68d69a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f0c0cd9957992fdabee2d7afa5553c73c68d69a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ba8b1160477a99806d99cf461acf54bee70e92", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmMKKRgACgkQGBtJ+fOP\nM3T9twv/QTdv+m2YwLo+jUGnUNtD68/bIdaoeS3i6calmhTujfN9DXFvO2grY7WU\nKI+l39BdHu8aQp5DJ0t7q7apvgl/GuuuBQudmYxwKBt9nK0SEgedYgP/qpKFq8aP\nN0o9DtuJ3th3E2e11jGOMXIsyggrvmrM5WvFwX8IK+yB4/ARYAwuewjS/yhVxIOO\nyDUE9FAmr4og0tzIrWmFWVnQudGKQeNiLt4p9GCTPQ6hsAJH3Y0JfaxzzCJFAs3p\n1un8nKWz1YxH+LNrqTITlDB5h2RtuP8gVsIwIjD9RKvTpXegxJgVMZrqUnq5A+Kl\nlcMD+dUPQqxgHaIDgz+eSYBK7dtnspuNxxxuvx9lrKYTIoCIqNE0aMpHxPJBwp8g\ncdDgfhOyTL6xeHqRHvSt6E2bXmm7GDDeNRquU/K1oZE0T0zjrmwrnLc9ShU1MUFr\nGy4QWhK2PXQGD1CDy+acGKlIxfjJtYFxvCzk0NOcUeMuBJcaT+AeEC9nN9t25lhc\nnoq55+nr\n=kxxX\n-----END PGP SIGNATURE-----", "payload": "tree 0f0c0cd9957992fdabee2d7afa5553c73c68d69a\nparent bb8212484f848439fc61b1f2d50de2444459da59\nauthor Andy Wang <cbeuw.andy@gmail.com> 1661382437 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1661610264 +0100\n\nImprove SC comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ba8b1160477a99806d99cf461acf54bee70e92", "html_url": "https://github.com/rust-lang/rust/commit/f4ba8b1160477a99806d99cf461acf54bee70e92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ba8b1160477a99806d99cf461acf54bee70e92/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8212484f848439fc61b1f2d50de2444459da59", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8212484f848439fc61b1f2d50de2444459da59", "html_url": "https://github.com/rust-lang/rust/commit/bb8212484f848439fc61b1f2d50de2444459da59"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "a5f59137c22cdfa8121c61cfdecbb1ad24343942", "filename": "src/concurrency/weak_memory.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4ba8b1160477a99806d99cf461acf54bee70e92/src%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ba8b1160477a99806d99cf461acf54bee70e92/src%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fweak_memory.rs?ref=f4ba8b1160477a99806d99cf461acf54bee70e92", "patch": "@@ -319,31 +319,35 @@ impl<'mir, 'tcx: 'mir> StoreBuffer {\n                 keep_searching = if store_elem.timestamp <= clocks.clock[store_elem.store_index] {\n                     // CoWR: if a store happens-before the current load,\n                     // then we can't read-from anything earlier in modification order.\n+                    // C++20 \u00a76.9.2.2 [intro.races] paragraph 18\n                     log::info!(\"Stopping due to coherent write-read\");\n                     false\n                 } else if store_elem.loads.borrow().iter().any(|(&load_index, &load_timestamp)| {\n                     load_timestamp <= clocks.clock[load_index]\n                 }) {\n                     // CoRR: if there was a load from this store which happened-before the current load,\n                     // then we cannot read-from anything earlier in modification order.\n+                    // C++20 \u00a76.9.2.2 [intro.races] paragraph 16\n                     log::info!(\"Stopping due to coherent read-read\");\n                     false\n                 } else if store_elem.timestamp <= clocks.fence_seqcst[store_elem.store_index] {\n-                    // The current load, which may be sequenced-after an SC fence, can only read-from\n-                    // the last store sequenced-before an SC fence in another thread (or any stores\n-                    // later than that SC fence)\n+                    // The current load, which may be sequenced-after an SC fence, cannot read-before\n+                    // the last store sequenced-before an SC fence in another thread.\n+                    // C++17 \u00a732.4 [atomics.order] paragraph 6\n                     log::info!(\"Stopping due to coherent load sequenced after sc fence\");\n                     false\n                 } else if store_elem.timestamp <= clocks.write_seqcst[store_elem.store_index]\n                     && store_elem.is_seqcst\n                 {\n-                    // The current non-SC load can only read-from the latest SC store (or any stores later than that\n-                    // SC store)\n+                    // The current non-SC load, which may be sequenced-after an SC fence,\n+                    // cannot read-before the last SC store executed before the fence.\n+                    // C++17 \u00a732.4 [atomics.order] paragraph 4\n                     log::info!(\"Stopping due to needing to load from the last SC store\");\n                     false\n                 } else if is_seqcst && store_elem.timestamp <= clocks.read_seqcst[store_elem.store_index] {\n-                    // The current SC load can only read-from the last store sequenced-before\n-                    // the last SC fence (or any stores later than the SC fence)\n+                    // The current SC load cannot read-before the last store sequenced-before\n+                    // the last SC fence.\n+                    // C++17 \u00a732.4 [atomics.order] paragraph 5\n                     log::info!(\"Stopping due to sc load needing to load from the last SC store before an SC fence\");\n                     false\n                 } else {true};"}]}