{"sha": "dd6ec81d658f7cd06b7ed37174b170f0e8930eed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNmVjODFkNjU4ZjdjZDA2YjdlZDM3MTc0YjE3MGYwZTg5MzBlZWQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-10T21:00:41Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-10T21:08:02Z"}, "message": "Add test for macro expansion in various expressions", "tree": {"sha": "34754becb9ab974946d04729c76dc31ba0ba49d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34754becb9ab974946d04729c76dc31ba0ba49d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd6ec81d658f7cd06b7ed37174b170f0e8930eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6ec81d658f7cd06b7ed37174b170f0e8930eed", "html_url": "https://github.com/rust-lang/rust/commit/dd6ec81d658f7cd06b7ed37174b170f0e8930eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd6ec81d658f7cd06b7ed37174b170f0e8930eed/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19eb7fa1db7da8417314ddfafe7addbbd9c3b46a", "url": "https://api.github.com/repos/rust-lang/rust/commits/19eb7fa1db7da8417314ddfafe7addbbd9c3b46a", "html_url": "https://github.com/rust-lang/rust/commit/19eb7fa1db7da8417314ddfafe7addbbd9c3b46a"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "af5b22d1c63449912cb468b6de15fc0dd928c94f", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd6ec81d658f7cd06b7ed37174b170f0e8930eed/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6ec81d658f7cd06b7ed37174b170f0e8930eed/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=dd6ec81d658f7cd06b7ed37174b170f0e8930eed", "patch": "@@ -190,7 +190,6 @@ fn to_fragment_kind(db: &dyn AstDatabase, macro_call_id: MacroCallId) -> Fragmen\n         TUPLE_EXPR => FragmentKind::Expr,\n         PAREN_EXPR => FragmentKind::Expr,\n \n-        // FIXME: Add tests for following cases in hir_ty\n         FOR_EXPR => FragmentKind::Expr,\n         PATH_EXPR => FragmentKind::Expr,\n         LAMBDA_EXPR => FragmentKind::Expr,"}, {"sha": "9d09d93a7c64a150bbbf74b96382396314717261", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/dd6ec81d658f7cd06b7ed37174b170f0e8930eed/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6ec81d658f7cd06b7ed37174b170f0e8930eed/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=dd6ec81d658f7cd06b7ed37174b170f0e8930eed", "patch": "@@ -135,6 +135,87 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn expr_macro_expanded_in_various_places() {\n+    assert_snapshot!(\n+        infer(r#\"\n+macro_rules! spam {\n+    () => (1isize);\n+}\n+\n+fn spam() {\n+    spam!();\n+    (spam!());\n+    spam!().spam(spam!());\n+    for _ in spam!() {}\n+    || spam!();\n+    while spam!() {}\n+    break spam!();\n+    return spam!();\n+    match spam!() {\n+        _ if spam!() => spam!(),\n+    }\n+    spam!()(spam!());\n+    Spam { spam: spam!() };\n+    spam!()[spam!()];\n+    await spam!();\n+    spam!() as usize;\n+    &spam!();\n+    -spam!();\n+    spam!()..spam!();\n+    spam!() + spam!();\n+}\n+\"#),\n+        @r###\"\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    ![0; 6) '1isize': isize\n+    [54; 457) '{     ...!(); }': !\n+    [88; 109) 'spam!(...am!())': {unknown}\n+    [115; 134) 'for _ ...!() {}': ()\n+    [119; 120) '_': {unknown}\n+    [132; 134) '{}': ()\n+    [139; 149) '|| spam!()': || -> isize\n+    [155; 171) 'while ...!() {}': ()\n+    [169; 171) '{}': ()\n+    [176; 189) 'break spam!()': !\n+    [195; 209) 'return spam!()': !\n+    [215; 269) 'match ...     }': isize\n+    [239; 240) '_': isize\n+    [274; 290) 'spam!(...am!())': {unknown}\n+    [296; 318) 'Spam {...m!() }': {unknown}\n+    [324; 340) 'spam!(...am!()]': {unknown}\n+    [365; 381) 'spam!(... usize': usize\n+    [387; 395) '&spam!()': &isize\n+    [401; 409) '-spam!()': isize\n+    [415; 431) 'spam!(...pam!()': {unknown}\n+    [437; 454) 'spam!(...pam!()': isize\n+    \"###\n+    );\n+}\n+\n #[test]\n fn infer_type_value_macro_having_same_name() {\n     assert_snapshot!("}]}