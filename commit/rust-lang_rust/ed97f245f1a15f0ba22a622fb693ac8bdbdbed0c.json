{"sha": "ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "node_id": "C_kwDOAAsO6NoAKGVkOTdmMjQ1ZjFhMTVmMGJhMjJhNjIyZmI2OTNhYzhiZGJkYmVkMGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-17T21:33:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-17T21:33:19Z"}, "message": "Rollup merge of #104483 - oli-obk:santa-clauses-make-goals, r=compiler-errors\n\nConvert predicates into Predicate in the Obligation constructor\n\ninstead of having almost all callers do that.\n\nThis reduces a bit of boilerplate, and also paves the way for my work towards https://github.com/rust-lang/compiler-team/issues/531 (as it makes it easier to accept both goals and clauses where right now it only accepts predicates).", "tree": {"sha": "a9a34f97b542b69da55fd6243c21fd3e18f1a08f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9a34f97b542b69da55fd6243c21fd3e18f1a08f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjdqifCRBK7hj4Ov3rIwAAA9oIABTBxQsMdVtoIc2h4uvDpFKR\n/HFu4+10KTDLcgwFRE0CNsux0bVfIfQW66sBEYL5tlLwRJqGv0OA/YHkAPI6q1pj\neMnZpM7kWipnwjcENzllfQLSNsmDfGH2BtGbag+qOpasHb+tcPF1tmpsVZhvaqOl\nc28elXzS0gFCPchrDN0aKZ7UpsxnQIgDXWsGIcGyivnrQjH/jdoLoZESvQZEHxl5\n1I7hOJ2RymxTPUjWHQdBXFbLUg3ogaxHdU2kl/+9OXwk/Z9eAoURAO5aRsLoTiRO\nW94n/yewx0TgMyhR71svD+ideNF0d65AyNmt1d4/MV5Z0eq4YA0dXTszzDY04EE=\n=OaLh\n-----END PGP SIGNATURE-----\n", "payload": "tree a9a34f97b542b69da55fd6243c21fd3e18f1a08f\nparent 1c52c247f98fd66b11be0179b1e3f80f05b5ddfe\nparent 4f11f3b2571c895c08757aa91af57fc1091e45ef\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668720799 +0100\ncommitter GitHub <noreply@github.com> 1668720799 +0100\n\nRollup merge of #104483 - oli-obk:santa-clauses-make-goals, r=compiler-errors\n\nConvert predicates into Predicate in the Obligation constructor\n\ninstead of having almost all callers do that.\n\nThis reduces a bit of boilerplate, and also paves the way for my work towards https://github.com/rust-lang/compiler-team/issues/531 (as it makes it easier to accept both goals and clauses where right now it only accepts predicates).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "html_url": "https://github.com/rust-lang/rust/commit/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c52c247f98fd66b11be0179b1e3f80f05b5ddfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c52c247f98fd66b11be0179b1e3f80f05b5ddfe", "html_url": "https://github.com/rust-lang/rust/commit/1c52c247f98fd66b11be0179b1e3f80f05b5ddfe"}, {"sha": "4f11f3b2571c895c08757aa91af57fc1091e45ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f11f3b2571c895c08757aa91af57fc1091e45ef", "html_url": "https://github.com/rust-lang/rust/commit/4f11f3b2571c895c08757aa91af57fc1091e45ef"}], "stats": {"total": 494, "additions": 259, "deletions": 235}, "files": [{"sha": "b2db77944fd1e9a5141e32aa579bd44c45793e4c", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -7,9 +7,7 @@ use rustc_infer::infer::{DefiningAnchor, InferCtxt};\n use rustc_infer::traits::{Obligation, ObligationCause};\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{\n-    self, OpaqueHiddenType, OpaqueTypeKey, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-};\n+use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n use rustc_trait_selection::traits::ObligationCtxt;\n@@ -256,8 +254,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         // Require the hidden type to be well-formed with only the generics of the opaque type.\n         // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n         // hidden type is well formed even without those bounds.\n-        let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(definition_ty.into()))\n-            .to_predicate(infcx.tcx);\n+        let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(definition_ty.into()));\n \n         let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id.to_def_id());\n \n@@ -282,6 +279,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         }\n \n         ocx.register_obligation(Obligation::misc(\n+            infcx.tcx,\n             instantiated_ty.span,\n             body_id,\n             param_env,"}, {"sha": "d0cf8622a4470e6c90f7bd54608203c913ec796a", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -92,8 +92,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 trait_ref,\n                 constness: ty::BoundConstness::NotConst,\n                 polarity: ty::ImplPolarity::Positive,\n-            }))\n-            .to_predicate(self.tcx()),\n+            })),\n             locations,\n             category,\n         );\n@@ -122,26 +121,26 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n     pub(super) fn prove_predicates(\n         &mut self,\n-        predicates: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n+        predicates: impl IntoIterator<\n+            Item = impl ToPredicate<'tcx, ty::Predicate<'tcx>> + std::fmt::Debug,\n+        >,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n     ) {\n         for predicate in predicates {\n-            let predicate = predicate.to_predicate(self.tcx());\n-            debug!(\"prove_predicates(predicate={:?}, locations={:?})\", predicate, locations,);\n-\n             self.prove_predicate(predicate, locations, category);\n         }\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n     pub(super) fn prove_predicate(\n         &mut self,\n-        predicate: ty::Predicate<'tcx>,\n+        predicate: impl ToPredicate<'tcx, ty::Predicate<'tcx>> + std::fmt::Debug,\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n     ) {\n         let param_env = self.param_env;\n+        let predicate = predicate.to_predicate(self.tcx());\n         self.fully_perform_op(\n             locations,\n             category,"}, {"sha": "7d36a63943c56a46008c93bf860cb9739a47598c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -33,8 +33,7 @@ use rustc_middle::ty::subst::{SubstsRef, UserSubsts};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n     self, Binder, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, Dynamic,\n-    OpaqueHiddenType, OpaqueTypeKey, RegionVid, ToPredicate, Ty, TyCtxt, UserType,\n-    UserTypeAnnotationIndex,\n+    OpaqueHiddenType, OpaqueTypeKey, RegionVid, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n@@ -1069,8 +1068,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     }\n \n                     self.prove_predicate(\n-                        ty::Binder::dummy(ty::PredicateKind::WellFormed(inferred_ty.into()))\n-                            .to_predicate(self.tcx()),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(inferred_ty.into())),\n                         Locations::All(span),\n                         ConstraintCategory::TypeAnnotation,\n                     );"}, {"sha": "36956f5dd6d96da367c9e11fa5d362a3101d4beb", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -732,7 +732,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                         polarity: ty::ImplPolarity::Positive,\n                     });\n                     let obligation =\n-                        Obligation::new(ObligationCause::dummy(), param_env, poly_trait_pred);\n+                        Obligation::new(tcx, ObligationCause::dummy(), param_env, poly_trait_pred);\n \n                     let implsrc = {\n                         let infcx = tcx.infer_ctxt().build();\n@@ -816,6 +816,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n                             if !nonconst_call_permission {\n                                 let obligation = Obligation::new(\n+                                    tcx,\n                                     ObligationCause::dummy_with_span(*fn_span),\n                                     param_env,\n                                     tcx.mk_predicate("}, {"sha": "2d4afd0dc356bbe34e75944e808096c3bd2ba86b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -147,6 +147,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                 }\n                 Adt(..) => {\n                     let obligation = Obligation::new(\n+                        tcx,\n                         ObligationCause::dummy(),\n                         param_env,\n                         Binder::dummy(TraitPredicate {"}, {"sha": "6fd12985170e637e31b578cef69f90ece55336ca", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -156,6 +156,7 @@ impl Qualif for NeedsNonConstDrop {\n         let destruct = cx.tcx.require_lang_item(LangItem::Destruct, None);\n \n         let obligation = Obligation::new(\n+            cx.tcx,\n             ObligationCause::dummy(),\n             cx.param_env,\n             ty::Binder::dummy(ty::TraitPredicate {"}, {"sha": "f76b282fa76d54123c3dd95ad12c7d7d2389f479", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -19,9 +19,7 @@ use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{\n-    self, ParamEnv, ToPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n use rustc_span::{self, Span};\n@@ -464,9 +462,8 @@ fn check_opaque_meets_bounds<'tcx>(\n     // Additionally require the hidden type to be well-formed with only the generics of the opaque type.\n     // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n     // hidden type is well formed even without those bounds.\n-    let predicate =\n-        ty::Binder::dummy(ty::PredicateKind::WellFormed(hidden_ty.into())).to_predicate(tcx);\n-    ocx.register_obligation(Obligation::new(misc_cause, param_env, predicate));\n+    let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(hidden_ty.into()));\n+    ocx.register_obligation(Obligation::new(tcx, misc_cause, param_env, predicate));\n \n     // Check that all obligations are satisfied by the implementation's\n     // version."}, {"sha": "5a222031c5610eacb43303ef8aa6daa239701a79", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -238,7 +238,7 @@ fn compare_predicate_entailment<'tcx>(\n                 kind: impl_m.kind,\n             },\n         );\n-        ocx.register_obligation(traits::Obligation::new(cause, param_env, predicate));\n+        ocx.register_obligation(traits::Obligation::new(tcx, cause, param_env, predicate));\n     }\n \n     // We now need to check that the signature of the impl method is\n@@ -611,6 +611,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n                 );\n \n                 self.ocx.register_obligation(traits::Obligation::new(\n+                    self.tcx(),\n                     ObligationCause::new(\n                         self.span,\n                         self.body_id,\n@@ -1585,7 +1586,7 @@ fn compare_type_predicate_entailment<'tcx>(\n             },\n         );\n         ocx.register_obligations(obligations);\n-        ocx.register_obligation(traits::Obligation::new(cause, param_env, predicate));\n+        ocx.register_obligation(traits::Obligation::new(tcx, cause, param_env, predicate));\n     }\n \n     // Check that all obligations are satisfied by the implementation's\n@@ -1790,7 +1791,7 @@ pub fn check_type_bounds<'tcx>(\n         .subst_iter_copied(tcx, rebased_substs)\n         .map(|(concrete_ty_bound, span)| {\n             debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n-            traits::Obligation::new(mk_cause(span), param_env, concrete_ty_bound)\n+            traits::Obligation::new(tcx, mk_cause(span), param_env, concrete_ty_bound)\n         })\n         .collect();\n     debug!(\"check_type_bounds: item_bounds={:?}\", obligations);"}, {"sha": "1d7ceda725a3986cd1773324fce2e71383845aab", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -14,8 +14,8 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n-    self, AdtKind, DefIdTree, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, AdtKind, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n+    TypeVisitable, TypeVisitor,\n };\n use rustc_middle::ty::{GenericArgKind, InternalSubsts};\n use rustc_session::parse::feature_err;\n@@ -75,9 +75,10 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n         // for a type to be WF, we do not need to check if const trait predicates satisfy.\n         let param_env = self.param_env.without_const();\n         self.ocx.register_obligation(traits::Obligation::new(\n+            self.tcx(),\n             cause,\n             param_env,\n-            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(self.tcx()),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n         ));\n     }\n }\n@@ -1111,12 +1112,12 @@ fn check_type_defn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'tcx>, all_sized: b\n                     traits::MiscObligation,\n                 );\n                 wfcx.register_obligation(traits::Obligation::new(\n+                    tcx,\n                     cause,\n                     wfcx.param_env,\n                     ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(\n                         ty::Const::from_anon_const(tcx, discr_def_id.expect_local()),\n-                    ))\n-                    .to_predicate(tcx),\n+                    )),\n                 ));\n             }\n         }\n@@ -1453,7 +1454,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                 wfcx.body_id,\n                 traits::ItemObligation(def_id.to_def_id()),\n             );\n-            traits::Obligation::new(cause, wfcx.param_env, pred)\n+            traits::Obligation::new(tcx, cause, wfcx.param_env, pred)\n         });\n \n     let predicates = predicates.0.instantiate_identity(tcx);\n@@ -1783,8 +1784,7 @@ fn receiver_is_implemented<'tcx>(\n         substs: tcx.mk_substs_trait(receiver_ty, &[]),\n     });\n \n-    let obligation =\n-        traits::Obligation::new(cause, wfcx.param_env, trait_ref.without_const().to_predicate(tcx));\n+    let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref.without_const());\n \n     if wfcx.infcx.predicate_must_hold_modulo_regions(&obligation) {\n         true\n@@ -1931,6 +1931,7 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n                 }\n \n                 let obligation = traits::Obligation::new(\n+                    tcx,\n                     traits::ObligationCause::new(span, self.body_id, traits::TrivialBound),\n                     empty_env,\n                     pred,"}, {"sha": "4f9d5826583c303875f609dbf62a4462024c53d6", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{ForeignItem, ForeignItemKind, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{ObligationCause, WellFormedLoc};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Region, ToPredicate, TyCtxt, TypeFoldable, TypeFolder};\n+use rustc_middle::ty::{self, Region, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_trait_selection::traits;\n \n pub fn provide(providers: &mut Providers) {\n@@ -74,10 +74,10 @@ fn diagnostic_hir_wf_check<'tcx>(\n             let errors = traits::fully_solve_obligation(\n                 &infcx,\n                 traits::Obligation::new(\n+                    self.tcx,\n                     cause,\n                     self.param_env,\n-                    ty::Binder::dummy(ty::PredicateKind::WellFormed(tcx_ty.into()))\n-                        .to_predicate(self.tcx),\n+                    ty::Binder::dummy(ty::PredicateKind::WellFormed(tcx_ty.into())),\n                 ),\n             );\n             if !errors.is_empty() {"}, {"sha": "139f2e84136625a6d7561cfd4829e94380ef2546", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir::{self as hir, ExprKind};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::traits::Obligation;\n-use rustc_middle::ty::{self, ToPredicate, Ty};\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n@@ -538,23 +538,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .bound_explicit_item_bounds(rpit_def_id)\n                         .subst_iter_copied(self.tcx, substs)\n                     {\n-                        let pred = match pred.kind().skip_binder() {\n+                        let pred = pred.kind().rebind(match pred.kind().skip_binder() {\n                             ty::PredicateKind::Trait(mut trait_pred) => {\n                                 assert_eq!(trait_pred.trait_ref.self_ty(), opaque_ty);\n                                 trait_pred.trait_ref.substs =\n                                     self.tcx.mk_substs_trait(ty, &trait_pred.trait_ref.substs[1..]);\n-                                pred.kind().rebind(trait_pred).to_predicate(self.tcx)\n+                                ty::PredicateKind::Trait(trait_pred)\n                             }\n                             ty::PredicateKind::Projection(mut proj_pred) => {\n                                 assert_eq!(proj_pred.projection_ty.self_ty(), opaque_ty);\n                                 proj_pred.projection_ty.substs = self\n                                     .tcx\n                                     .mk_substs_trait(ty, &proj_pred.projection_ty.substs[1..]);\n-                                pred.kind().rebind(proj_pred).to_predicate(self.tcx)\n+                                ty::PredicateKind::Projection(proj_pred)\n                             }\n                             _ => continue,\n-                        };\n+                        });\n                         if !self.predicate_must_hold_modulo_regions(&Obligation::new(\n+                            self.tcx,\n                             ObligationCause::misc(span, self.body_id),\n                             self.param_env,\n                             pred,"}, {"sha": "302d512c71d13229bf0c97f2b97d4be60d1435a7", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -380,6 +380,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         predicates.predicates.iter().zip(&predicates.spans)\n                     {\n                         let obligation = Obligation::new(\n+                            self.tcx,\n                             ObligationCause::dummy_with_span(callee_expr.span),\n                             self.param_env,\n                             *predicate,"}, {"sha": "174b43313825e1b770760d191e3249529beacc89", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -55,7 +55,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TypeAndMut};\n+use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{self, BytePos, DesugaringKind, Span};\n@@ -278,13 +278,13 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             for &source_ty in &[a, b] {\n                 if source_ty != target_ty {\n                     obligations.push(Obligation::new(\n+                        self.tcx(),\n                         self.cause.clone(),\n                         self.param_env,\n                         ty::Binder::dummy(ty::PredicateKind::Coerce(ty::CoercePredicate {\n                             a: source_ty,\n                             b: target_ty,\n-                        }))\n-                        .to_predicate(self.tcx()),\n+                        })),\n                     ));\n                 }\n             }\n@@ -669,7 +669,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                     continue;\n                 }\n             };\n-            match selcx.select(&obligation.with(trait_pred)) {\n+            match selcx.select(&obligation.with(selcx.tcx(), trait_pred)) {\n                 // Uncertain or unimplemented.\n                 Ok(None) => {\n                     if trait_pred.def_id() == unsize_did {\n@@ -783,10 +783,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 // and then require that the resulting predicate (e.g., `usize: Clone`)\n                 // holds (it does).\n                 let predicate = predicate.with_self_ty(self.tcx, a);\n-                Obligation::new(self.cause.clone(), self.param_env, predicate)\n+                Obligation::new(self.tcx, self.cause.clone(), self.param_env, predicate)\n             })\n             // Enforce the region bound (e.g., `usize: 'static`, in our example).\n             .chain([Obligation::new(\n+                self.tcx,\n                 self.cause.clone(),\n                 self.param_env,\n                 self.tcx.mk_predicate(ty::Binder::dummy(ty::PredicateKind::TypeOutlives("}, {"sha": "c826a886ca6415ea099c145cc7ee1416f85d1500", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -22,8 +22,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n-    self, AdtKind, CanonicalUserType, DefIdTree, EarlyBinder, GenericParamDefKind, ToPredicate, Ty,\n-    UserType,\n+    self, AdtKind, CanonicalUserType, DefIdTree, EarlyBinder, GenericParamDefKind, Ty, UserType,\n };\n use rustc_middle::ty::{GenericArgKind, InternalSubsts, SubstsRef, UserSelfTy, UserSubsts};\n use rustc_session::lint;\n@@ -559,9 +558,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // WF obligations never themselves fail, so no real need to give a detailed cause:\n         let cause = traits::ObligationCause::new(span, self.body_id, code);\n         self.register_predicate(traits::Obligation::new(\n+            self.tcx,\n             cause,\n             self.param_env,\n-            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(self.tcx),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n         ));\n     }\n "}, {"sha": "b339a5f34ab5b7549ba8f379fce296a9cff662b9", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -2150,6 +2150,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             ),\n                         );\n                         let obligation = traits::Obligation::new(\n+                            self.tcx,\n                             traits::ObligationCause::dummy(),\n                             self.param_env,\n                             ty::Binder::dummy(ty::TraitPredicate {"}, {"sha": "316ecb0ed52e43ede435315efc195462f63f4bc8", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -1090,14 +1090,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let Some(into_def_id) = self.tcx.get_diagnostic_item(sym::Into)\n             && self.predicate_must_hold_modulo_regions(&traits::Obligation::new(\n+                self.tcx,\n                 self.misc(expr.span),\n                 self.param_env,\n                 ty::Binder::dummy(ty::TraitRef {\n                     def_id: into_def_id,\n                     substs: self.tcx.mk_substs_trait(expr_ty, &[expected_ty.into()]),\n                 })\n-                .to_poly_trait_predicate()\n-                .to_predicate(self.tcx),\n+                .to_poly_trait_predicate(),\n             ))\n         {\n             let sugg = if expr.precedence().order() >= PREC_POSTFIX {"}, {"sha": "37336edd1fda59d6a513c283f5dfdf181bb0b760", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer::{self, InferOk};\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, ToPredicate, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, Ty, TypeVisitable};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n@@ -293,10 +293,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let poly_trait_ref = ty::Binder::dummy(trait_ref);\n         (\n             traits::Obligation::misc(\n+                self.tcx,\n                 span,\n                 self.body_id,\n                 self.param_env,\n-                poly_trait_ref.without_const().to_predicate(self.tcx),\n+                poly_trait_ref.without_const(),\n             ),\n             substs,\n         )\n@@ -335,6 +336,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         (\n             traits::Obligation::new(\n+                self.tcx,\n                 traits::ObligationCause::new(\n                     span,\n                     self.body_id,\n@@ -346,7 +348,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     },\n                 ),\n                 self.param_env,\n-                poly_trait_ref.without_const().to_predicate(self.tcx),\n+                poly_trait_ref.without_const(),\n             ),\n             substs,\n         )\n@@ -523,9 +525,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             method_ty, obligation\n         );\n         obligations.push(traits::Obligation::new(\n+            tcx,\n             cause,\n             self.param_env,\n-            ty::Binder::dummy(ty::PredicateKind::WellFormed(method_ty.into())).to_predicate(tcx),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(method_ty.into())),\n         ));\n \n         let callee = MethodCallee { def_id, substs, sig: fn_sig };"}, {"sha": "9d75ccad133dd6b20e37daca7fe138d8baf21613", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -19,7 +19,8 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::AssocItem;\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::ToPredicate;\n+use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_session::lint;\n use rustc_span::def_id::DefId;\n@@ -1429,7 +1430,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) -> traits::SelectionResult<'tcx, traits::Selection<'tcx>> {\n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n         let predicate = ty::Binder::dummy(trait_ref).to_poly_trait_predicate();\n-        let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n+        let obligation = traits::Obligation::new(self.tcx, cause, self.param_env, predicate);\n         traits::SelectionContext::new(self).select(&obligation)\n     }\n \n@@ -1560,7 +1561,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     let predicate =\n                         ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx);\n                     parent_pred = Some(predicate);\n-                    let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n+                    let obligation =\n+                        traits::Obligation::new(self.tcx, cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {\n                         result = ProbeResult::NoMatch;\n                         if self.probe(|_| {"}, {"sha": "e2c5edd0e8833bfa32936b65faa2e1c748d6ab69", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::DeepRejectCtxt;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::print::with_crate_prefix;\n-use rustc_middle::ty::{self, DefIdTree, GenericArgKind, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, DefIdTree, GenericArgKind, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::ty::{IsSuggestable, ToPolyTraitRef};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n@@ -80,10 +80,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let trait_ref = ty::TraitRef::new(fn_once, fn_once_substs);\n                         let poly_trait_ref = ty::Binder::dummy(trait_ref);\n                         let obligation = Obligation::misc(\n+                            tcx,\n                             span,\n                             self.body_id,\n                             self.param_env,\n-                            poly_trait_ref.without_const().to_predicate(tcx),\n+                            poly_trait_ref.without_const(),\n                         );\n                         self.predicate_may_hold(&obligation)\n                     })"}, {"sha": "34f54328230f43720e12497fbcfdfb9134c4714a", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -581,9 +581,9 @@ impl<'tcx> InferCtxt<'tcx> {\n                 span_bug!(cause.span, \"unexpected const outlives {:?}\", predicate);\n             }\n         };\n-        let predicate = predicate.0.rebind(atom).to_predicate(self.tcx);\n+        let predicate = predicate.0.rebind(atom);\n \n-        Obligation::new(cause, param_env, predicate)\n+        Obligation::new(self.tcx, cause, param_env, predicate)\n     }\n \n     /// Given two sets of values for the same set of canonical variables, unify them."}, {"sha": "37f071a19acd62c8f749a4c60a551609135946e4", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -37,7 +37,7 @@ use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, InferConst, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -347,10 +347,10 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n \n         if needs_wf {\n             self.obligations.push(Obligation::new(\n+                self.tcx(),\n                 self.trace.cause.clone(),\n                 self.param_env,\n-                ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))\n-                    .to_predicate(self.infcx.tcx),\n+                ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into())),\n             ));\n         }\n \n@@ -444,9 +444,10 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             ty::PredicateKind::ConstEquate(b, a)\n         };\n         self.obligations.push(Obligation::new(\n+            self.tcx(),\n             self.trace.cause.clone(),\n             self.param_env,\n-            ty::Binder::dummy(predicate).to_predicate(self.tcx()),\n+            ty::Binder::dummy(predicate),\n         ));\n     }\n }"}, {"sha": "1fa95f8d62ab9294d81e5b23de55f002e8744ebb", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -595,7 +595,12 @@ impl<'tcx> InferCtxt<'tcx> {\n             }\n             // Require that the predicate holds for the concrete type.\n             debug!(?predicate);\n-            obligations.push(traits::Obligation::new(cause.clone(), param_env, predicate));\n+            obligations.push(traits::Obligation::new(\n+                self.tcx,\n+                cause.clone(),\n+                param_env,\n+                predicate,\n+            ));\n         }\n         Ok(InferOk { value: (), obligations })\n     }"}, {"sha": "eb6deee291cf7ab1b236be9e1c9283348538ee82", "filename": "compiler/rustc_infer/src/infer/projection.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::traits::ObligationCause;\n-use rustc_middle::ty::{self, ToPredicate, Ty};\n+use rustc_middle::ty::{self, Ty};\n \n use crate::traits::{Obligation, PredicateObligation};\n \n@@ -28,12 +28,8 @@ impl<'tcx> InferCtxt<'tcx> {\n         });\n         let projection =\n             ty::Binder::dummy(ty::ProjectionPredicate { projection_ty, term: ty_var.into() });\n-        let obligation = Obligation::with_depth(\n-            cause,\n-            recursion_depth,\n-            param_env,\n-            projection.to_predicate(self.tcx),\n-        );\n+        let obligation =\n+            Obligation::with_depth(self.tcx, cause, recursion_depth, param_env, projection);\n         obligations.push(obligation);\n         ty_var\n     }"}, {"sha": "8c8445a4d9eb847695970878ea591acacce012d6", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -6,7 +6,7 @@ use crate::traits::Obligation;\n use rustc_middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::TyVar;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::mem;\n \n /// Ensures `a` is made a subtype of `b`. Returns `a` on success.\n@@ -95,14 +95,14 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n                 // can't make progress on `A <: B` if both A and B are\n                 // type variables, so record an obligation.\n                 self.fields.obligations.push(Obligation::new(\n+                    self.tcx(),\n                     self.fields.trace.cause.clone(),\n                     self.fields.param_env,\n                     ty::Binder::dummy(ty::PredicateKind::Subtype(ty::SubtypePredicate {\n                         a_is_expected: self.a_is_expected,\n                         a,\n                         b,\n-                    }))\n-                    .to_predicate(self.tcx()),\n+                    })),\n                 ));\n \n                 Ok(a)"}, {"sha": "a9e6241bf6b51feee1a5d733d836bdd64f1c5a75", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -10,7 +10,7 @@ pub mod util;\n \n use rustc_hir as hir;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Const, ToPredicate, Ty, TyCtxt};\n use rustc_span::Span;\n \n pub use self::FulfillmentErrorCode::*;\n@@ -124,38 +124,41 @@ pub enum FulfillmentErrorCode<'tcx> {\n \n impl<'tcx, O> Obligation<'tcx, O> {\n     pub fn new(\n+        tcx: TyCtxt<'tcx>,\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        predicate: O,\n+        predicate: impl ToPredicate<'tcx, O>,\n     ) -> Obligation<'tcx, O> {\n-        Obligation { cause, param_env, recursion_depth: 0, predicate }\n+        Self::with_depth(tcx, cause, 0, param_env, predicate)\n     }\n \n     pub fn with_depth(\n+        tcx: TyCtxt<'tcx>,\n         cause: ObligationCause<'tcx>,\n         recursion_depth: usize,\n         param_env: ty::ParamEnv<'tcx>,\n-        predicate: O,\n+        predicate: impl ToPredicate<'tcx, O>,\n     ) -> Obligation<'tcx, O> {\n+        let predicate = predicate.to_predicate(tcx);\n         Obligation { cause, param_env, recursion_depth, predicate }\n     }\n \n     pub fn misc(\n+        tcx: TyCtxt<'tcx>,\n         span: Span,\n         body_id: hir::HirId,\n         param_env: ty::ParamEnv<'tcx>,\n-        trait_ref: O,\n+        trait_ref: impl ToPredicate<'tcx, O>,\n     ) -> Obligation<'tcx, O> {\n-        Obligation::new(ObligationCause::misc(span, body_id), param_env, trait_ref)\n+        Obligation::new(tcx, ObligationCause::misc(span, body_id), param_env, trait_ref)\n     }\n \n-    pub fn with<P>(&self, value: P) -> Obligation<'tcx, P> {\n-        Obligation {\n-            cause: self.cause.clone(),\n-            param_env: self.param_env,\n-            recursion_depth: self.recursion_depth,\n-            predicate: value,\n-        }\n+    pub fn with<P>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        value: impl ToPredicate<'tcx, P>,\n+    ) -> Obligation<'tcx, P> {\n+        Obligation::with_depth(tcx, self.cause.clone(), self.recursion_depth, self.param_env, value)\n     }\n }\n "}, {"sha": "7e0a8a0df16c02228bc6d419c5c6b6098244190c", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -108,6 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n                 // then we must've taken advantage of the hack in `project_and_unify_types` where\n                 // we replace opaques with inference vars. Emit a warning!\n                 if !infcx.predicate_must_hold_modulo_regions(&traits::Obligation::new(\n+                    cx.tcx,\n                     traits::ObligationCause::dummy(),\n                     cx.param_env,\n                     assoc_pred,"}, {"sha": "f9a762261e2cea1f20765e41ee8654b492309e1d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -1125,42 +1125,42 @@ impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {\n     }\n }\n \n-pub trait ToPredicate<'tcx> {\n-    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n+pub trait ToPredicate<'tcx, Predicate> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate;\n }\n \n-impl<'tcx> ToPredicate<'tcx> for Predicate<'tcx> {\n-    fn to_predicate(self, _tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+impl<'tcx, T> ToPredicate<'tcx, T> for T {\n+    fn to_predicate(self, _tcx: TyCtxt<'tcx>) -> T {\n         self\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for Binder<'tcx, PredicateKind<'tcx>> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         tcx.mk_predicate(self)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyTraitPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(PredicateKind::Trait).to_predicate(tcx)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyRegionOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyTypeOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyProjectionPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(PredicateKind::Projection).to_predicate(tcx)\n     }"}, {"sha": "b7240a82897301edf12a14e0ccb84aa7e447961b", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -3,8 +3,8 @@ use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n+use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt};\n-use rustc_middle::ty::{ToPredicate, TypeVisitable};\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::Span;\n@@ -130,9 +130,10 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n \n         let obligation = traits::Obligation::new(\n+            tcx,\n             cause.clone(),\n             self.param_env,\n-            ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n+            ty::Binder::dummy(trait_ref).without_const(),\n         );\n         if !self.infcx.predicate_may_hold(&obligation) {\n             debug!(\"overloaded_deref_ty: cannot match obligation\");"}, {"sha": "5869bc76b596cf34a33459e4a080526a16158275", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -96,8 +96,12 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             PolyTraitRef::to_poly_trait_predicate,\n             PolyTraitRef::to_poly_trait_predicate_negative_polarity,\n         ] {\n-            let result =\n-                selcx.select(&Obligation::new(ObligationCause::dummy(), orig_env, f(&trait_pred)));\n+            let result = selcx.select(&Obligation::new(\n+                tcx,\n+                ObligationCause::dummy(),\n+                orig_env,\n+                f(&trait_pred),\n+            ));\n             if let Ok(Some(ImplSource::UserDefined(_))) = result {\n                 debug!(\n                     \"find_auto_trait_generics({:?}): \\\n@@ -280,8 +284,12 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n \n             // Call `infcx.resolve_vars_if_possible` to see if we can\n             // get rid of any inference variables.\n-            let obligation =\n-                infcx.resolve_vars_if_possible(Obligation::new(dummy_cause.clone(), new_env, pred));\n+            let obligation = infcx.resolve_vars_if_possible(Obligation::new(\n+                tcx,\n+                dummy_cause.clone(),\n+                new_env,\n+                pred,\n+            ));\n             let result = select.select(&obligation);\n \n             match result {\n@@ -706,7 +714,10 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                     // and turn them into an explicit negative impl for our type.\n                     debug!(\"Projecting and unifying projection predicate {:?}\", predicate);\n \n-                    match project::poly_project_and_unify_type(select, &obligation.with(p)) {\n+                    match project::poly_project_and_unify_type(\n+                        select,\n+                        &obligation.with(self.tcx, p),\n+                    ) {\n                         ProjectAndUnifyResult::MismatchedProjectionTypes(e) => {\n                             debug!(\n                                 \"evaluate_nested_obligations: Unable to unify predicate \\"}, {"sha": "ca4299f7db394abb8df48cb1d075b36ca0199de1", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -40,7 +40,7 @@ pub fn codegen_select_candidate<'tcx>(\n \n     let obligation_cause = ObligationCause::dummy();\n     let obligation =\n-        Obligation::new(obligation_cause, param_env, trait_ref.to_poly_trait_predicate());\n+        Obligation::new(tcx, obligation_cause, param_env, trait_ref.to_poly_trait_predicate());\n \n     let selection = match selcx.select(&obligation) {\n         Ok(Some(selection)) => selection,"}, {"sha": "6a5744f5f762b7496ca957d3c55e5c41c0dcf01f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -32,7 +32,7 @@ pub fn recompute_applicable_impls<'tcx>(\n             impl_predicates\n                 .predicates\n                 .iter()\n-                .map(|&predicate| Obligation::new(dummy_cause.clone(), param_env, predicate)),\n+                .map(|&predicate| Obligation::new(tcx, dummy_cause.clone(), param_env, predicate)),\n         );\n \n         ocx.select_where_possible().is_empty()"}, {"sha": "f087afa20bacaabaafa023a54787cb4788820be0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -344,14 +344,14 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                 });\n                 let substs = self.tcx.mk_substs_trait(ty.skip_binder(), &[var.into()]);\n                 let obligation = Obligation::new(\n+                    self.tcx,\n                     ObligationCause::dummy(),\n                     param_env,\n                     ty.rebind(ty::TraitPredicate {\n                         trait_ref: ty::TraitRef::new(trait_def_id, substs),\n                         constness,\n                         polarity,\n-                    })\n-                    .to_predicate(self.tcx),\n+                    }),\n                 );\n                 let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new_in_snapshot(self.tcx);\n                 fulfill_cx.register_predicate_obligation(self, obligation);\n@@ -984,7 +984,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 );\n                                 trait_pred\n                             });\n-                            let unit_obligation = obligation.with(predicate.to_predicate(tcx));\n+                            let unit_obligation = obligation.with(tcx, predicate);\n                             if self.predicate_may_hold(&unit_obligation) {\n                                 err.note(\n                                     \"this error might have been caused by changes to \\\n@@ -2012,7 +2012,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ..*tr\n         });\n \n-        Obligation::new(ObligationCause::dummy(), param_env, trait_pred.to_predicate(self.tcx))\n+        Obligation::new(self.tcx, ObligationCause::dummy(), param_env, trait_pred)\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n@@ -2100,11 +2100,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     )\n                 };\n \n-                let obligation = Obligation::new(\n-                    obligation.cause.clone(),\n-                    obligation.param_env,\n-                    trait_ref.to_poly_trait_predicate(),\n-                );\n+                let obligation = obligation.with(self.tcx, trait_ref.to_poly_trait_predicate());\n                 let mut selcx = SelectionContext::with_query_mode(\n                     &self,\n                     crate::traits::TraitQueryMode::Standard,\n@@ -2534,11 +2530,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             )\n             .value;\n \n-            let obligation = Obligation::new(\n-                ObligationCause::dummy(),\n-                param_env,\n-                cleaned_pred.to_predicate(selcx.tcx()),\n-            );\n+            let obligation =\n+                Obligation::new(self.tcx, ObligationCause::dummy(), param_env, cleaned_pred);\n \n             self.predicate_may_hold(&obligation)\n         })"}, {"sha": "b8609077036f47286c5fcc3e42a6b4e5374f7859", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -301,7 +301,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n         obligated_types: &mut Vec<Ty<'tcx>>,\n         seen_requirements: &mut FxHashSet<DefId>,\n     ) where\n-        T: fmt::Display;\n+        T: fmt::Display + ToPredicate<'tcx, T>;\n \n     /// Suggest to await before try: future? => future.await?\n     fn suggest_await_before_try(\n@@ -334,7 +334,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n     );\n }\n \n-fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n+fn predicate_constraint(generics: &hir::Generics<'_>, pred: ty::Predicate<'_>) -> (Span, String) {\n     (\n         generics.tail_span_for_predicate_suggestion(),\n         format!(\"{} {}\", generics.add_where_or_trailing_comma(), pred),\n@@ -416,7 +416,7 @@ fn suggest_restriction<'tcx>(\n             },\n             // `fn foo(t: impl Trait)`\n             //                       ^ suggest `where <T as Trait>::A: Bound`\n-            predicate_constraint(hir_generics, trait_pred.to_predicate(tcx).to_string()),\n+            predicate_constraint(hir_generics, trait_pred.to_predicate(tcx)),\n         ];\n         sugg.extend(ty_spans.into_iter().map(|s| (s, type_param_name.to_string())));\n \n@@ -440,9 +440,7 @@ fn suggest_restriction<'tcx>(\n                 .find(|p| !matches!(p.kind, hir::GenericParamKind::Type { synthetic: true, .. })),\n             super_traits,\n         ) {\n-            (_, None) => {\n-                predicate_constraint(hir_generics, trait_pred.to_predicate(tcx).to_string())\n-            }\n+            (_, None) => predicate_constraint(hir_generics, trait_pred.to_predicate(tcx)),\n             (None, Some((ident, []))) => (\n                 ident.span.shrink_to_hi(),\n                 format!(\": {}\", trait_pred.print_modifiers_and_trait_path()),\n@@ -1162,7 +1160,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         for predicate in predicates.iter() {\n             if !self.predicate_must_hold_modulo_regions(\n-                &obligation.with(predicate.with_self_ty(self.tcx, self_ref_ty)),\n+                &obligation.with(self.tcx, predicate.with_self_ty(self.tcx, self_ref_ty)),\n             ) {\n                 return;\n             }\n@@ -1523,7 +1521,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         let self_ty_satisfies_dyn_predicates = |self_ty| {\n                             predicates.iter().all(|predicate| {\n                                 let pred = predicate.with_self_ty(self.tcx, self_ty);\n-                                let obl = Obligation::new(cause.clone(), param_env, pred);\n+                                let obl = Obligation::new(self.tcx, cause.clone(), param_env, pred);\n                                 self.predicate_may_hold(&obl)\n                             })\n                         };\n@@ -2704,7 +2702,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n                 obligated_types.push(ty);\n \n-                let parent_predicate = parent_trait_ref.to_predicate(tcx);\n+                let parent_predicate = parent_trait_ref;\n                 if !self.is_recursive_obligation(obligated_types, &data.parent_code) {\n                     // #74711: avoid a stack overflow\n                     ensure_sufficient_stack(|| {\n@@ -2766,7 +2764,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     _ => err.note(&msg),\n                 };\n \n-                let mut parent_predicate = parent_trait_pred.to_predicate(tcx);\n+                let mut parent_predicate = parent_trait_pred;\n                 let mut data = &data.derived;\n                 let mut count = 0;\n                 seen_requirements.insert(parent_def_id);\n@@ -2826,7 +2824,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n             ObligationCauseCode::DerivedObligation(ref data) => {\n                 let parent_trait_ref = self.resolve_vars_if_possible(data.parent_trait_pred);\n-                let parent_predicate = parent_trait_ref.to_predicate(tcx);\n+                let parent_predicate = parent_trait_ref;\n                 // #74711: avoid a stack overflow\n                 ensure_sufficient_stack(|| {\n                     self.note_obligation_cause_code(\n@@ -3070,9 +3068,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         ..*tr\n                     });\n                     let field_obl = Obligation::new(\n+                        self.tcx,\n                         obligation.cause.clone(),\n                         obligation.param_env,\n-                        trait_pred.to_predicate(self.tcx),\n+                        trait_pred,\n                     );\n                     self.predicate_must_hold_modulo_regions(&field_obl)\n                 })"}, {"sha": "d84f768cce4d722ec2e03760158336627c82602c", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -9,7 +9,6 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{self, Binder, Const, Ty, TypeVisitable};\n use std::marker::PhantomData;\n \n@@ -296,7 +295,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 &mut obligations,\n             );\n             if predicate != obligation.predicate {\n-                obligations.push(obligation.with(predicate));\n+                obligations.push(obligation.with(infcx.tcx, predicate));\n                 return ProcessResult::Changed(mk_pending(obligations));\n             }\n         }\n@@ -307,7 +306,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 // This means we need to pass it the bound version of our\n                 // predicate.\n                 ty::PredicateKind::Trait(trait_ref) => {\n-                    let trait_obligation = obligation.with(binder.rebind(trait_ref));\n+                    let trait_obligation = obligation.with(infcx.tcx, binder.rebind(trait_ref));\n \n                     self.process_trait_obligation(\n                         obligation,\n@@ -316,7 +315,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                     )\n                 }\n                 ty::PredicateKind::Projection(data) => {\n-                    let project_obligation = obligation.with(binder.rebind(data));\n+                    let project_obligation = obligation.with(infcx.tcx, binder.rebind(data));\n \n                     self.process_projection_obligation(\n                         obligation,\n@@ -335,17 +334,15 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 | ty::PredicateKind::ConstEquate(..) => {\n                     let pred =\n                         ty::Binder::dummy(infcx.replace_bound_vars_with_placeholders(binder));\n-                    ProcessResult::Changed(mk_pending(vec![\n-                        obligation.with(pred.to_predicate(self.selcx.tcx())),\n-                    ]))\n+                    ProcessResult::Changed(mk_pending(vec![obligation.with(infcx.tcx, pred)]))\n                 }\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n             },\n             Some(pred) => match pred {\n                 ty::PredicateKind::Trait(data) => {\n-                    let trait_obligation = obligation.with(Binder::dummy(data));\n+                    let trait_obligation = obligation.with(infcx.tcx, Binder::dummy(data));\n \n                     self.process_trait_obligation(\n                         obligation,\n@@ -370,7 +367,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 }\n \n                 ty::PredicateKind::Projection(ref data) => {\n-                    let project_obligation = obligation.with(Binder::dummy(*data));\n+                    let project_obligation = obligation.with(infcx.tcx, Binder::dummy(*data));\n \n                     self.process_projection_obligation(\n                         obligation,\n@@ -697,7 +694,7 @@ impl<'a, 'tcx> FulfillProcessor<'a, 'tcx> {\n             }\n             // Let the caller handle the recursion\n             ProjectAndUnifyResult::Recursive => ProcessResult::Changed(mk_pending(vec![\n-                project_obligation.with(project_obligation.predicate.to_predicate(tcx)),\n+                project_obligation.with(tcx, project_obligation.predicate),\n             ])),\n             ProjectAndUnifyResult::MismatchedProjectionTypes(e) => {\n                 ProcessResult::Error(CodeProjectionError(e))"}, {"sha": "ddc9b768f07e0b288495e7b4b6cfe4cafaf32045", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -440,7 +440,7 @@ pub fn impossible_predicates<'tcx>(\n     let ocx = ObligationCtxt::new(&infcx);\n     let predicates = ocx.normalize(ObligationCause::dummy(), param_env, predicates);\n     for predicate in predicates {\n-        let obligation = Obligation::new(ObligationCause::dummy(), param_env, predicate);\n+        let obligation = Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate);\n         ocx.register_obligation(obligation);\n     }\n     let errors = ocx.select_all_or_error();\n@@ -530,6 +530,7 @@ fn is_impossible_method<'tcx>(\n     let predicates_for_trait = predicates.predicates.iter().filter_map(|(pred, span)| {\n         if pred.visit_with(&mut visitor).is_continue() {\n             Some(Obligation::new(\n+                tcx,\n                 ObligationCause::dummy_with_span(*span),\n                 param_env,\n                 ty::EarlyBinder(*pred).subst(tcx, impl_trait_ref.substs),"}, {"sha": "eaca3eaef0c1fa5f6c2a769a4573283398cc31ae", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -723,10 +723,9 @@ fn receiver_is_dispatchable<'tcx>(\n             def_id: dispatch_from_dyn_did,\n             substs: tcx.mk_substs_trait(receiver_ty, &[unsized_receiver_ty.into()]),\n         })\n-        .without_const()\n-        .to_predicate(tcx);\n+        .without_const();\n \n-        Obligation::new(ObligationCause::dummy(), param_env, predicate)\n+        Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate)\n     };\n \n     let infcx = tcx.infer_ctxt().build();"}, {"sha": "ede6cd607b7fe82d580ae21e34b0c2f6b9f188e0", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -200,7 +200,7 @@ pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n             infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n         let new_universe = infcx.universe();\n \n-        let placeholder_obligation = obligation.with(placeholder_predicate);\n+        let placeholder_obligation = obligation.with(infcx.tcx, placeholder_predicate);\n         match project_and_unify_type(selcx, &placeholder_obligation) {\n             ProjectAndUnifyResult::MismatchedProjectionTypes(e) => Err(e),\n             ProjectAndUnifyResult::Holds(obligations)\n@@ -517,6 +517,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.depth) {\n                             let obligation = Obligation::with_depth(\n+                                self.tcx(),\n                                 self.cause.clone(),\n                                 recursion_limit.0,\n                                 self.param_env,\n@@ -573,6 +574,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                     && !self.tcx().sess.opts.actually_rustdoc\n                 {\n                     let obligation = Obligation::with_depth(\n+                        self.selcx.tcx(),\n                         self.cause.clone(),\n                         recursion_limit.0,\n                         self.param_env,\n@@ -1110,7 +1112,8 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n         }\n     }\n \n-    let obligation = Obligation::with_depth(cause.clone(), depth, param_env, projection_ty);\n+    let obligation =\n+        Obligation::with_depth(selcx.tcx(), cause.clone(), depth, param_env, projection_ty);\n \n     match project(selcx, &obligation) {\n         Ok(Projected::Progress(Progress {\n@@ -1343,8 +1346,8 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n             ty::Binder::dummy(ty::TraitRef { def_id: trait_def_id, substs: trait_substs })\n                 .to_poly_trait_predicate();\n \n-        let _ =\n-            selcx.infcx().commit_if_ok(|_| match selcx.select(&obligation.with(trait_predicate)) {\n+        let _ = selcx.infcx().commit_if_ok(|_| {\n+            match selcx.select(&obligation.with(tcx, trait_predicate)) {\n                 Ok(Some(super::ImplSource::UserDefined(data))) => {\n                     candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n                         ImplTraitInTraitCandidate::Impl(data),\n@@ -1364,7 +1367,8 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n                     candidate_set.mark_error(e);\n                     return Err(());\n                 }\n-            });\n+            }\n+        });\n     }\n }\n \n@@ -1538,7 +1542,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n     // If we are resolving `<T as TraitRef<...>>::Item == Type`,\n     // start out by selecting the predicate `T as TraitRef<...>`:\n     let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));\n-    let trait_obligation = obligation.with(poly_trait_ref.to_poly_trait_predicate());\n+    let trait_obligation = obligation.with(selcx.tcx(), poly_trait_ref.to_poly_trait_predicate());\n     let _ = selcx.infcx().commit_if_ok(|_| {\n         let impl_source = match selcx.select(&trait_obligation) {\n             Ok(Some(impl_source)) => impl_source,\n@@ -1705,12 +1709,12 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     ty::Param(_) | ty::Projection(..) | ty::Opaque(..)\n                         if selcx.infcx().predicate_must_hold_modulo_regions(\n                             &obligation.with(\n+                                selcx.tcx(),\n                                 ty::Binder::dummy(ty::TraitRef::new(\n                                     selcx.tcx().require_lang_item(LangItem::Sized, None),\n                                     selcx.tcx().mk_substs_trait(self_ty, &[]),\n                                 ))\n-                                .without_const()\n-                                .to_predicate(selcx.tcx()),\n+                                .without_const(),\n                             ),\n                         ) =>\n                     {\n@@ -1966,13 +1970,8 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n             tcx.require_lang_item(LangItem::Sized, None),\n             tcx.mk_substs_trait(self_ty, &[]),\n         ))\n-        .without_const()\n-        .to_predicate(tcx);\n-        obligations.push(Obligation::new(\n-            obligation.cause.clone(),\n-            obligation.param_env,\n-            sized_predicate,\n-        ));\n+        .without_const();\n+        obligations.push(obligation.with(tcx, sized_predicate));\n     }\n \n     let substs = tcx.mk_substs([self_ty.into()].iter());\n@@ -2289,6 +2288,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     obligations.extend(std::iter::zip(predicates.predicates, predicates.spans).map(\n         |(pred, span)| {\n             Obligation::with_depth(\n+                tcx,\n                 ObligationCause::new(\n                     obligation.cause.span,\n                     obligation.cause.body_id,\n@@ -2342,6 +2342,7 @@ fn assoc_ty_own_obligations<'cx, 'tcx>(\n             nested,\n         );\n         nested.push(Obligation::with_depth(\n+            tcx,\n             obligation.cause.clone(),\n             obligation.recursion_depth + 1,\n             obligation.param_env,"}, {"sha": "f5c98558a25256cdb288b89b00c32f3844044775", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -208,6 +208,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n                             let obligation = Obligation::with_depth(\n+                                self.tcx(),\n                                 self.cause.clone(),\n                                 recursion_limit.0,\n                                 self.param_env,"}, {"sha": "dfe19a5a86d3bf40dc0816c6b733bf4269a05df0", "filename": "compiler/rustc_trait_selection/src/traits/relationships.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -1,8 +1,8 @@\n use crate::infer::InferCtxt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n-use crate::traits::{ObligationCause, PredicateObligation};\n+use crate::traits::PredicateObligation;\n use rustc_infer::traits::TraitEngine;\n-use rustc_middle::ty::{self, ToPredicate};\n+use rustc_middle::ty;\n \n pub(crate) fn update<'tcx, T>(\n     engine: &mut T,\n@@ -25,9 +25,7 @@ pub(crate) fn update<'tcx, T>(\n \n         // Then construct a new obligation with Self = () added\n         // to the ParamEnv, and see if it holds.\n-        let o = rustc_infer::traits::Obligation::new(\n-            ObligationCause::dummy(),\n-            obligation.param_env,\n+        let o = obligation.with(infcx.tcx,\n             obligation\n                 .predicate\n                 .kind()\n@@ -38,8 +36,7 @@ pub(crate) fn update<'tcx, T>(\n                         constness: tpred.constness,\n                         polarity: tpred.polarity,\n                     })\n-                )\n-                .to_predicate(infcx.tcx),\n+                ),\n         );\n         // Don't report overflow errors. Otherwise equivalent to may_hold.\n         if let Ok(result) = infcx.probe(|_| infcx.evaluate_obligation(&o)) && result.may_apply() {"}, {"sha": "3995ea58db16cad7cec3749f3f0787792e1eaa0f", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -13,7 +13,7 @@ use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeVisitable};\n use rustc_target::spec::abi::Abi;\n \n use crate::traits;\n@@ -718,9 +718,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n \n         let obligation = traits::Obligation::new(\n+            tcx,\n             cause.clone(),\n             param_env,\n-            ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n+            ty::Binder::dummy(trait_ref).without_const(),\n         );\n         if !self.infcx.predicate_may_hold(&obligation) {\n             return None;"}, {"sha": "9d43f72b85f15dbaf717e540ad4a16e8792d2d15", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 31, "deletions": 38, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -194,6 +194,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     &mut obligations,\n                 );\n                 obligations.push(Obligation::with_depth(\n+                    self.tcx(),\n                     obligation.cause.clone(),\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n@@ -482,11 +483,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 super_trait,\n                 &mut nested,\n             );\n-            nested.push(Obligation::new(\n-                obligation.cause.clone(),\n-                obligation.param_env,\n-                normalized_super_trait,\n-            ));\n+            nested.push(obligation.with(tcx, normalized_super_trait));\n         }\n \n         let assoc_types: Vec<_> = tcx\n@@ -581,11 +578,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     subst_bound,\n                     &mut nested,\n                 );\n-                nested.push(Obligation::new(\n-                    obligation.cause.clone(),\n-                    obligation.param_env,\n-                    normalized_bound,\n-                ));\n+                nested.push(obligation.with(tcx, normalized_bound));\n             }\n         }\n \n@@ -644,9 +637,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             self.tcx().mk_substs_trait(output_ty, &[]),\n         ));\n         nested.push(Obligation::new(\n+            self.infcx.tcx,\n             cause,\n             obligation.param_env,\n-            tr.to_poly_trait_predicate().to_predicate(self.tcx()),\n+            tr.to_poly_trait_predicate(),\n         ));\n \n         Ok(ImplSourceFnPointerData { fn_ty: self_ty, nested })\n@@ -727,11 +721,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // FIXME: Chalk\n \n         if !self.tcx().sess.opts.unstable_opts.chalk {\n-            nested.push(Obligation::new(\n-                obligation.cause.clone(),\n-                obligation.param_env,\n-                ty::Binder::dummy(ty::PredicateKind::ClosureKind(closure_def_id, substs, kind))\n-                    .to_predicate(self.tcx()),\n+            nested.push(obligation.with(\n+                self.tcx(),\n+                ty::Binder::dummy(ty::PredicateKind::ClosureKind(closure_def_id, substs, kind)),\n             ));\n         }\n \n@@ -860,10 +852,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n+                    tcx,\n                     cause,\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n-                    obligation.predicate.rebind(outlives).to_predicate(tcx),\n+                    obligation.predicate.rebind(outlives),\n                 ));\n             }\n             _ => bug!(),\n@@ -957,10 +950,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n+                    tcx,\n                     cause,\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n-                    obligation.predicate.rebind(outlives).to_predicate(tcx),\n+                    obligation.predicate.rebind(outlives),\n                 ));\n             }\n \n@@ -979,6 +973,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 let predicate_to_obligation = |predicate| {\n                     Obligation::with_depth(\n+                        tcx,\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         obligation.param_env,\n@@ -1255,20 +1250,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         obligation.param_env,\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n-                        self_ty\n-                            .rebind(ty::TraitPredicate {\n-                                trait_ref: ty::TraitRef {\n-                                    def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n-                                    substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n-                                },\n-                                constness: ty::BoundConstness::ConstIfConst,\n-                                polarity: ty::ImplPolarity::Positive,\n-                            })\n-                            .to_predicate(tcx),\n+                        self_ty.rebind(ty::TraitPredicate {\n+                            trait_ref: ty::TraitRef {\n+                                def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n+                                substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n+                            },\n+                            constness: ty::BoundConstness::ConstIfConst,\n+                            polarity: ty::ImplPolarity::Positive,\n+                        }),\n                         &mut nested,\n                     );\n \n                     nested.push(Obligation::with_depth(\n+                        tcx,\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         obligation.param_env,\n@@ -1280,18 +1274,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // since it's either not `const Drop` (and we raise an error during selection),\n                 // or it's an ADT (and we need to check for a custom impl during selection)\n                 _ => {\n-                    let predicate = self_ty\n-                        .rebind(ty::TraitPredicate {\n-                            trait_ref: ty::TraitRef {\n-                                def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n-                                substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n-                            },\n-                            constness: ty::BoundConstness::ConstIfConst,\n-                            polarity: ty::ImplPolarity::Positive,\n-                        })\n-                        .to_predicate(tcx);\n+                    let predicate = self_ty.rebind(ty::TraitPredicate {\n+                        trait_ref: ty::TraitRef {\n+                            def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n+                            substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n+                        },\n+                        constness: ty::BoundConstness::ConstIfConst,\n+                        polarity: ty::ImplPolarity::Positive,\n+                    });\n \n                     nested.push(Obligation::with_depth(\n+                        tcx,\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         obligation.param_env,"}, {"sha": "c369c5de52bb1a0e992f2610054412d914a5ea0a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -445,7 +445,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::PredicateKind::Trait(t) => {\n                     let t = bound_predicate.rebind(t);\n                     debug_assert!(!t.has_escaping_bound_vars());\n-                    let obligation = obligation.with(t);\n+                    let obligation = obligation.with(self.tcx(), t);\n                     self.evaluate_trait_predicate_recursively(previous_stack, obligation)\n                 }\n \n@@ -596,7 +596,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 ty::PredicateKind::Projection(data) => {\n                     let data = bound_predicate.rebind(data);\n-                    let project_obligation = obligation.with(data);\n+                    let project_obligation = obligation.with(self.tcx(), data);\n                     match project::poly_project_and_unify_type(self, &project_obligation) {\n                         ProjectAndUnifyResult::Holds(mut subobligations) => {\n                             'compute_res: {"}, {"sha": "d05e893de433abfaa6de92de04751b2e81e48858", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -4,7 +4,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n use rustc_span::Span;\n \n use std::iter;\n@@ -324,7 +324,7 @@ impl<'tcx> WfPredicates<'tcx> {\n             extend_cause_with_original_assoc_item_obligation(\n                 tcx, trait_ref, item, &mut cause, predicate,\n             );\n-            traits::Obligation::with_depth(cause, depth, param_env, predicate)\n+            traits::Obligation::with_depth(tcx, cause, depth, param_env, predicate)\n         };\n \n         if let Elaborate::All = elaborate {\n@@ -356,10 +356,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                         }\n                     }\n                     traits::Obligation::with_depth(\n+                        tcx,\n                         cause,\n                         depth,\n                         param_env,\n-                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n                     )\n                 }),\n         );\n@@ -407,10 +408,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                 .filter(|arg| !arg.has_escaping_bound_vars())\n                 .map(|arg| {\n                     traits::Obligation::with_depth(\n+                        tcx,\n                         cause.clone(),\n                         depth,\n                         param_env,\n-                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n                     )\n                 }),\n         );\n@@ -424,10 +426,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                 substs: self.tcx.mk_substs_trait(subty, &[]),\n             };\n             self.out.push(traits::Obligation::with_depth(\n+                self.tcx,\n                 cause,\n                 self.recursion_depth,\n                 self.param_env,\n-                ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx),\n+                ty::Binder::dummy(trait_ref).without_const(),\n             ));\n         }\n     }\n@@ -454,10 +457,10 @@ impl<'tcx> WfPredicates<'tcx> {\n                             self.out.extend(obligations);\n \n                             let predicate =\n-                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct))\n-                                    .to_predicate(self.tcx());\n+                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct));\n                             let cause = self.cause(traits::WellFormed(None));\n                             self.out.push(traits::Obligation::with_depth(\n+                                self.tcx(),\n                                 cause,\n                                 self.recursion_depth,\n                                 self.param_env,\n@@ -468,11 +471,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                             let cause = self.cause(traits::WellFormed(None));\n \n                             self.out.push(traits::Obligation::with_depth(\n+                                self.tcx(),\n                                 cause,\n                                 self.recursion_depth,\n                                 self.param_env,\n-                                ty::Binder::dummy(ty::PredicateKind::WellFormed(ct.into()))\n-                                    .to_predicate(self.tcx()),\n+                                ty::Binder::dummy(ty::PredicateKind::WellFormed(ct.into())),\n                             ));\n                         }\n                         ty::ConstKind::Error(_)\n@@ -556,13 +559,13 @@ impl<'tcx> WfPredicates<'tcx> {\n                     if !r.has_escaping_bound_vars() && !rty.has_escaping_bound_vars() {\n                         let cause = self.cause(traits::ReferenceOutlivesReferent(ty));\n                         self.out.push(traits::Obligation::with_depth(\n+                            self.tcx(),\n                             cause,\n                             depth,\n                             param_env,\n                             ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n                                 ty::OutlivesPredicate(rty, r),\n-                            ))\n-                            .to_predicate(self.tcx()),\n+                            )),\n                         ));\n                     }\n                 }\n@@ -656,11 +659,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                         let tcx = self.tcx();\n                         self.out.extend(component_traits.map(|did| {\n                             traits::Obligation::with_depth(\n+                                tcx,\n                                 cause.clone(),\n                                 depth,\n                                 param_env,\n-                                ty::Binder::dummy(ty::PredicateKind::ObjectSafe(did))\n-                                    .to_predicate(tcx),\n+                                ty::Binder::dummy(ty::PredicateKind::ObjectSafe(did)),\n                             )\n                         }));\n                     }\n@@ -681,11 +684,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                 ty::Infer(_) => {\n                     let cause = self.cause(traits::WellFormed(None));\n                     self.out.push(traits::Obligation::with_depth(\n+                        self.tcx(),\n                         cause,\n                         self.recursion_depth,\n                         param_env,\n-                        ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))\n-                            .to_predicate(self.tcx()),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into())),\n                     ));\n                 }\n             }\n@@ -724,7 +727,13 @@ impl<'tcx> WfPredicates<'tcx> {\n                 if remap_constness {\n                     pred = pred.without_const(self.tcx);\n                 }\n-                traits::Obligation::with_depth(cause, self.recursion_depth, self.param_env, pred)\n+                traits::Obligation::with_depth(\n+                    self.tcx,\n+                    cause,\n+                    self.recursion_depth,\n+                    self.param_env,\n+                    pred,\n+                )\n             })\n             .filter(|pred| !pred.has_escaping_bound_vars())\n             .collect()\n@@ -794,10 +803,11 @@ impl<'tcx> WfPredicates<'tcx> {\n                 let outlives =\n                     ty::Binder::dummy(ty::OutlivesPredicate(explicit_bound, implicit_bound));\n                 self.out.push(traits::Obligation::with_depth(\n+                    self.tcx,\n                     cause,\n                     self.recursion_depth,\n                     self.param_env,\n-                    outlives.to_predicate(self.tcx),\n+                    outlives,\n                 ));\n             }\n         }"}, {"sha": "e94c8efe69a92052a168aaeedc3dd1af91e10999", "filename": "compiler/rustc_traits/src/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -26,7 +26,7 @@ fn evaluate_obligation<'tcx>(\n     let ParamEnvAnd { param_env, value: predicate } = goal;\n \n     let mut selcx = SelectionContext::with_query_mode(&infcx, TraitQueryMode::Canonical);\n-    let obligation = Obligation::new(ObligationCause::dummy(), param_env, predicate);\n+    let obligation = Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate);\n \n     selcx.evaluate_root_obligation(&obligation)\n }"}, {"sha": "9eceae8b44f8e8d0f088d6039e21455914d8109a", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -91,7 +91,12 @@ impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n     }\n \n     fn prove_predicate(&self, predicate: Predicate<'tcx>, cause: ObligationCause<'tcx>) {\n-        self.ocx.register_obligation(Obligation::new(cause, self.param_env, predicate));\n+        self.ocx.register_obligation(Obligation::new(\n+            self.ocx.infcx.tcx,\n+            cause,\n+            self.param_env,\n+            predicate,\n+        ));\n     }\n \n     fn tcx(&self) -> TyCtxt<'tcx> {\n@@ -256,5 +261,5 @@ pub fn type_op_prove_predicate_with_cause<'tcx>(\n     cause: ObligationCause<'tcx>,\n ) {\n     let (param_env, ProvePredicate { predicate }) = key.into_parts();\n-    ocx.register_obligation(Obligation::new(cause, param_env, predicate));\n+    ocx.register_obligation(Obligation::new(ocx.infcx.tcx, cause, param_env, predicate));\n }"}, {"sha": "cb0b8d4a9bc195a9604da69798cc686515ee4751", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -76,6 +76,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                 for predicate in predicates {\n                     debug!(\"testing predicate {:?}\", predicate);\n                     let obligation = traits::Obligation::new(\n+                        infcx.tcx,\n                         traits::ObligationCause::dummy(),\n                         param_env,\n                         predicate,"}, {"sha": "218dbeaddcadee32539160ee831786d991e5edc7", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -1156,7 +1156,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n             }\n \n             let predicate = EarlyBinder(predicate).subst(cx.tcx, &substs_with_referent_ty);\n-            let obligation = Obligation::new(ObligationCause::dummy(), cx.param_env, predicate);\n+            let obligation = Obligation::new(cx.tcx, ObligationCause::dummy(), cx.param_env, predicate);\n             let infcx = cx.tcx.infer_ctxt().build();\n             infcx.predicate_must_hold_modulo_regions(&obligation)\n         })"}, {"sha": "c7775313ecd0284a38bd866ac0a34fa4f07486af", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -419,7 +419,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n \n                         if trait_predicates.any(|predicate| {\n                             let predicate = EarlyBinder(predicate).subst(cx.tcx, new_subst);\n-                            let obligation = Obligation::new(ObligationCause::dummy(), cx.param_env, predicate);\n+                            let obligation = Obligation::new(cx.tcx, ObligationCause::dummy(), cx.param_env, predicate);\n                             !cx.tcx.infer_ctxt().build().predicate_must_hold_modulo_regions(&obligation)\n                         }) {\n                             return false;"}, {"sha": "c8c6f32c6c98966cd4d794b0afcbe3f56f105d14", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=ed97f245f1a15f0ba22a622fb693ac8bdbdbed0c", "patch": "@@ -695,6 +695,7 @@ fn matches_preds<'tcx>(\n             .type_implements_trait(p.def_id, ty, p.substs, cx.param_env)\n             .must_apply_modulo_regions(),\n         ExistentialPredicate::Projection(p) => infcx.predicate_must_hold_modulo_regions(&Obligation::new(\n+            cx.tcx,\n             ObligationCause::dummy(),\n             cx.param_env,\n             cx.tcx.mk_predicate(Binder::bind_with_vars("}]}