{"sha": "9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliN2NmZDNjNzI0YmJhZDlkZDhhMDExNWJiMjYxOWYzMDdiNzNmOGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-19T00:11:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-19T00:11:32Z"}, "message": "auto merge of #13513 : alexcrichton/rust/up-llvm, r=brson\n\nThis is a bit of an interesting upgrade to LLVM. Upstream LLVM has started using C++11 features, so they require a C++11 compiler to build. I've updated all the bots to have a C++11 compiler, and they appear to be building LLVM successfully:\r\n\r\n* Linux bots - I added gcc/g++ 4.7 (good enough)\r\n* Android bots - same as the linux ones\r\n* Mac bots - I installed the most recent command line tools for Lion which gives us clang 3.2, but LLVM wouldn't build unless it was explicitly asked to link to `libc++` instead of `libstdc++`. This involved tweaking `mklldeps.py` and the `configure` script to get things to work out\r\n* Windows bots - mingw-w64 has gcc 4.8.1 which is sufficient for building LLVM (hurray!)\r\n* BSD bots - I updated FreeBSD to 10.0 which brought with it a relevant version of clang.\r\n\r\nThe largest fallout I've seen so far is that the test suite doesn't work at all on FreeBSD 10. We've already stopped gating on FreeBSD due to #13427 (we used to be on freebsd 9), so I don't think this puts us in too bad of a situation. I will continue to attempt to fix FreeBSD and the breakage on there.\r\n\r\nThe LLVM update brings with it all of the recently upstreamed LLVM patches. We only have one local patch now which is just an optimization, and isn't required to use upstream LLVM. I want to maintain compatibility with LLVM 3.3 and 3.4 while we can, and this upgrade is keeping us up to date with the 3.5 release. Once 3.5 is release we will in theory no longer require a bundled LLVM.", "tree": {"sha": "a82c2fd5f1fdafa7a3667a8b8eedd56e7ebb70a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a82c2fd5f1fdafa7a3667a8b8eedd56e7ebb70a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "html_url": "https://github.com/rust-lang/rust/commit/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75683cadf6c4c55360202cd6a0106be80532451", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75683cadf6c4c55360202cd6a0106be80532451", "html_url": "https://github.com/rust-lang/rust/commit/b75683cadf6c4c55360202cd6a0106be80532451"}, {"sha": "426d701f8bbd22aa22fefb69d71eaa7dc8bbe170", "url": "https://api.github.com/repos/rust-lang/rust/commits/426d701f8bbd22aa22fefb69d71eaa7dc8bbe170", "html_url": "https://github.com/rust-lang/rust/commit/426d701f8bbd22aa22fefb69d71eaa7dc8bbe170"}], "stats": {"total": 282, "additions": 199, "deletions": 83}, "files": [{"sha": "983be4e8a0c0a72cc9fdcf9b2f8221bd412d8bce", "filename": "configure", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/configure", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -388,6 +388,7 @@ opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n opt pax-flags 0 \"apply PaX flags to rustc binaries (required for GRSecurity/PaX-patched kernels)\"\n opt inject-std-version 1 \"inject the current compiler version of libstd into programs\"\n+opt llvm-static-stdcpp 0 \"statically link to libstdc++ for LLVM\"\n opt rpath 1 \"build rpaths into rustc itself\"\n opt nightly 0 \"build nightly packages\"\n opt verify-install 1 \"verify installed binaries work\"\n@@ -579,26 +580,32 @@ then\n         CFG_ENABLE_CLANG=1\n         putvar CFG_ENABLE_CLANG\n     else\n-        # on OS X, with xcode 5 and newer, certain developers may have\n-        # cc, gcc and g++ point to a  mixture of clang and gcc\n-        # if so, this will create very strange build errors\n-        # this last stanza is to detect some such problems and save the future rust\n-        # contributor some time solving that issue.\n-        # this detection could be generalized to other OSes aside from OS X\n-        # but the issue seems most likely to happen on OS X\n-\n-        chk_cc () {\n-            $1 --version 2> /dev/null | grep -q $2\n-        }\n-        # check that gcc, cc and g++ all point to the same compiler.\n-        # note that for xcode 5, g++ points to clang, not clang++\n-        if !((chk_cc gcc clang  && chk_cc g++ clang) ||\n-            (chk_cc gcc gcc  &&( chk_cc g++ g++ || chk g++ gcc))) then\n-            err \"the gcc and g++ in your path point to different compilers.\n-Check which versions are in your path with  cc --version and g++ --version.\n-To resolve this problem, either fix your PATH  or run configure with --enable-clang\"\n-        fi\n+        if [ $(\"$CFG_GCC\" --version 2>&1 | grep -c ' 4\\.[0-6]') -ne 0 ]; then\n+            step_msg \"older GCC found, using clang instead\"\n+            CFG_ENABLE_CLANG=1\n+            putvar CFG_ENABLE_CLANG\n+        else\n+            # on OS X, with xcode 5 and newer, certain developers may have\n+            # cc, gcc and g++ point to a  mixture of clang and gcc\n+            # if so, this will create very strange build errors\n+            # this last stanza is to detect some such problems and save the future rust\n+            # contributor some time solving that issue.\n+            # this detection could be generalized to other OSes aside from OS X\n+            # but the issue seems most likely to happen on OS X\n+\n+            chk_cc () {\n+                $1 --version 2> /dev/null | grep -q $2\n+            }\n+            # check that gcc, cc and g++ all point to the same compiler.\n+            # note that for xcode 5, g++ points to clang, not clang++\n+            if !((chk_cc gcc clang  && chk_cc g++ clang) ||\n+                (chk_cc gcc gcc  &&( chk_cc g++ g++ || chk g++ gcc))) then\n+                err \"the gcc and g++ in your path point to different compilers.\n+    Check which versions are in your path with  cc --version and g++ --version.\n+    To resolve this problem, either fix your PATH  or run configure with --enable-clang\"\n+            fi\n \n+        fi\n     fi\n fi\n \n@@ -921,10 +928,6 @@ do\n         LLVM_OPTS=\"$LLVM_OPTS --disable-terminfo\"\n         # Try to have LLVM pull in as few dependencies as possible (#9397)\n         LLVM_OPTS=\"$LLVM_OPTS --disable-zlib --disable-libffi\"\n-        # LLVM says it needs a \"new\" clang/gcc, but we seem to get by ok with\n-        # older versions on the bots. Get by for a little longer by asking it to\n-        # not do version detection\n-        LLVM_OPTS=\"$LLVM_OPTS --disable-compiler-version-checks\"\n \n         # Use win32 native thread/lock apis instead of pthread wrapper.\n         # (llvm's configure tries to find pthread first, so we have to disable it explicitly.)\n@@ -942,13 +945,15 @@ do\n \n             LLVM_CXX_64=\"ccache clang++ -Qunused-arguments\"\n             LLVM_CC_64=\"ccache clang -Qunused-arguments\"\n+            LLVM_OPTS=\"$LLVM_OPTS --enable-libcpp\"\n             ;;\n             (\"clang\")\n             LLVM_CXX_32=\"clang++ -m32 -Qunused-arguments\"\n             LLVM_CC_32=\"clang -m32 -Qunused-arguments\"\n \n             LLVM_CXX_64=\"clang++ -Qunused-arguments\"\n             LLVM_CC_64=\"clang -Qunused-arguments\"\n+            LLVM_OPTS=\"$LLVM_OPTS --enable-libcpp\"\n             ;;\n             (\"ccache gcc\")\n             LLVM_CXX_32=\"ccache g++ -m32\""}, {"sha": "789ce2dabc25edc056bee81f2e7fb926e04071a1", "filename": "mk/llvm.mk", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -42,16 +42,25 @@ $$(LLVM_STAMP_$(1)): $(S)src/rustllvm/llvm-auto-clean-trigger\n \t@$$(call E, make: done cleaning llvm)\n \ttouch $$@\n \n+ifeq ($$(CFG_ENABLE_LLVM_STATIC_STDCPP),1)\n+LLVM_STDCPP_LOCATION_$(1) = $$(shell $$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n+\t\t\t\t\t-print-file-name=libstdc++.a)\n+else\n+LLVM_STDCPP_LOCATION_$(1) =\n+endif\n+\n endef\n \n $(foreach host,$(CFG_HOST), \\\n-    $(eval LLVM_CONFIGS := $(LLVM_CONFIGS) $(LLVM_CONFIG_$(host))))\n+ $(eval $(call DEF_LLVM_RULES,$(host))))\n \n $(foreach host,$(CFG_HOST), \\\n- $(eval $(call DEF_LLVM_RULES,$(host))))\n+ $(eval LLVM_CONFIGS := $(LLVM_CONFIGS) $(LLVM_CONFIG_$(host))))\n \n $(S)src/librustc/lib/llvmdeps.rs: \\\n \t\t    $(LLVM_CONFIGS) \\\n-\t\t    $(S)src/etc/mklldeps.py\n+\t\t    $(S)src/etc/mklldeps.py \\\n+\t\t    $(MKFILE_DEPS)\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/mklldeps.py \\\n-\t    \"$@\" \"$(LLVM_COMPONENTS)\" $(LLVM_CONFIGS)\n+\t\t\"$@\" \"$(LLVM_COMPONENTS)\" \"$(CFG_ENABLE_LLVM_STATIC_STDCPP)\" \\\n+\t\t$(LLVM_CONFIGS)"}, {"sha": "448299965a853e999688b2a8bde24a455c509079", "filename": "mk/target.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -83,6 +83,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4):\t\t\t\t    \\\n \t\t$$(WFLAGS_ST$(1)) \\\n \t\t-L \"$$(RT_OUTPUT_DIR_$(2))\" \\\n \t\t-L \"$$(LLVM_LIBDIR_$(2))\" \\\n+\t\t-L \"$$(dir $$(LLVM_STDCPP_LOCATION_$(2)))\" \\\n \t\t--out-dir $$(@D) $$<\n \t@touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES,\\"}, {"sha": "f745f5d61cb9a19e3065e33303a67ed5412d618b", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 46, "deletions": 25, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -11,11 +11,14 @@\n import os\n import sys\n import subprocess\n+import itertools\n+from os import path\n \n f = open(sys.argv[1], 'wb')\n \n components = sys.argv[2].split(' ')\n components = [i for i in components if i]  # ignore extra whitespaces\n+enable_static = sys.argv[3]\n \n f.write(\"\"\"// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n@@ -31,11 +34,20 @@\n //          take a look at src/etc/mklldeps.py if you're interested\n \"\"\")\n \n-for llconfig in sys.argv[3:]:\n+def run(args):\n+    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+    out, err = proc.communicate()\n+\n+    if err:\n+        print(\"failed to run llconfig: args = `{}`\".format(args))\n+        print(err)\n+        sys.exit(1)\n+    return out\n+\n+for llconfig in sys.argv[4:]:\n     f.write(\"\\n\")\n \n-    proc = subprocess.Popen([llconfig, '--host-target'], stdout = subprocess.PIPE)\n-    out, err = proc.communicate()\n+    out = run([llconfig, '--host-target'])\n     arch, os = out.split('-', 1)\n     arch = 'x86' if arch == 'i686' or arch == 'i386' else arch\n     if 'darwin' in os:\n@@ -55,35 +67,44 @@\n \n     f.write(\"#[cfg(\" + ', '.join(cfg) + \")]\\n\")\n \n+    version = run([llconfig, '--version']).strip()\n+\n     # LLVM libs\n-    args = [llconfig, '--libs']\n+    if version < '3.5':\n+      args = [llconfig, '--libs']\n+    else:\n+      args = [llconfig, '--libs', '--system-libs']\n     args.extend(components)\n-    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-    out, err = proc.communicate()\n-\n-    if err:\n-        print(\"failed to run llconfig: args = `{}`\".format(args))\n-        sys.exit(1)\n+    out = run(args)\n+    for lib in out.strip().replace(\"\\n\", ' ').split(' '):\n+        lib = lib.strip()[2:] # chop of the leading '-l'\n+        f.write(\"#[link(name = \\\"\" + lib + \"\\\"\")\n+        # LLVM libraries are all static libraries\n+        if 'LLVM' in lib:\n+            f.write(\", kind = \\\"static\\\"\")\n+        f.write(\")]\\n\")\n \n-    for lib in out.strip().split(' '):\n-        lib = lib[2:] # chop of the leading '-l'\n-        f.write(\"#[link(name = \\\"\" + lib + \"\\\", kind = \\\"static\\\")]\\n\")\n+    # llvm-config before 3.5 didn't have a system-libs flag\n+    if version < '3.5':\n+      if os == 'win32':\n+        f.write(\"#[link(name = \\\"imagehlp\\\")]\")\n \n     # LLVM ldflags\n-    args = [llconfig, '--ldflags']\n-    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-    out, err = proc.communicate()\n-\n-    if err:\n-        print(\"failed to run llconfig: args = `{}`\".format(args))\n-        sys.exit(1)\n-\n+    out = run([llconfig, '--ldflags'])\n     for lib in out.strip().split(' '):\n         if lib[:2] == \"-l\":\n             f.write(\"#[link(name = \\\"\" + lib[2:] + \"\\\")]\\n\")\n \n-    #extra\n-    f.write(\"#[link(name = \\\"stdc++\\\")]\\n\")\n-    if os == 'win32':\n-        f.write(\"#[link(name = \\\"imagehlp\\\")]\\n\")\n+    # C++ runtime library\n+    out = run([llconfig, '--cxxflags'])\n+    if enable_static == '1':\n+      assert('stdlib=libc++' not in out)\n+      f.write(\"#[link(name = \\\"stdc++\\\", kind = \\\"static\\\")]\\n\")\n+    else:\n+      if 'stdlib=libc++' in out:\n+        f.write(\"#[link(name = \\\"c++\\\")]\\n\")\n+      else:\n+        f.write(\"#[link(name = \\\"stdc++\\\")]\\n\")\n+\n+    # Attach everything to an extern block\n     f.write(\"extern {}\\n\")"}, {"sha": "8ef5677db2764aaaa02dec9e3e67e8d5fe273e41", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -1298,9 +1298,22 @@ fn add_local_native_libraries(args: &mut Vec<~str>, sess: &Session) {\n         args.push(\"-L\" + path.as_str().unwrap().to_owned());\n     }\n \n+    // Some platforms take hints about whether a library is static or dynamic.\n+    // For those that support this, we ensure we pass the option if the library\n+    // was flagged \"static\" (most defaults are dynamic) to ensure that if\n+    // libfoo.a and libfoo.so both exist that the right one is chosen.\n+    let takes_hints = sess.targ_cfg.os != abi::OsMacos;\n+\n     for &(ref l, kind) in sess.cstore.get_used_libraries().borrow().iter() {\n         match kind {\n             cstore::NativeUnknown | cstore::NativeStatic => {\n+                if takes_hints {\n+                    if kind == cstore::NativeStatic {\n+                        args.push(\"-Wl,-Bstatic\".to_owned());\n+                    } else {\n+                        args.push(\"-Wl,-Bdynamic\".to_owned());\n+                    }\n+                }\n                 args.push(\"-l\" + *l);\n             }\n             cstore::NativeFramework => {\n@@ -1309,6 +1322,9 @@ fn add_local_native_libraries(args: &mut Vec<~str>, sess: &Session) {\n             }\n         }\n     }\n+    if takes_hints {\n+        args.push(\"-Wl,-Bdynamic\".to_owned());\n+    }\n }\n \n // # Rust Crate linking"}, {"sha": "10e717e550d1fc8c1105f5268af4ff1344026a78", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -1261,7 +1261,8 @@ pub mod llvm {\n                                       LHS: ValueRef,\n                                       CMP: ValueRef,\n                                       RHS: ValueRef,\n-                                      Order: AtomicOrdering)\n+                                      Order: AtomicOrdering,\n+                                      FailureOrder: AtomicOrdering)\n                                       -> ValueRef;\n         pub fn LLVMBuildAtomicRMW(B: BuilderRef,\n                                   Op: AtomicBinOp,\n@@ -1586,7 +1587,8 @@ pub mod llvm {\n                                                Scope: DIDescriptor,\n                                                File: DIFile,\n                                                Line: c_uint,\n-                                               Col: c_uint)\n+                                               Col: c_uint,\n+                                               Discriminator: c_uint)\n                                                -> DILexicalBlock;\n \n         pub fn LLVMDIBuilderCreateStaticVariable(Builder: DIBuilderRef,"}, {"sha": "95b928587c4d100749c29edf04d9dd0b0e057c65", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -445,8 +445,8 @@ pub fn set_llvm_fn_attrs(attrs: &[ast::Attribute], llfn: ValueRef) {\n     }\n \n     // Add the no-split-stack attribute if requested\n-    if contains_name(attrs, \"no_split_stack\") {\n-        set_no_split_stack(llfn);\n+    if !contains_name(attrs, \"no_split_stack\") {\n+        set_split_stack(llfn);\n     }\n \n     if contains_name(attrs, \"cold\") {\n@@ -458,8 +458,8 @@ pub fn set_always_inline(f: ValueRef) {\n     lib::llvm::SetFunctionAttribute(f, lib::llvm::AlwaysInlineAttribute)\n }\n \n-pub fn set_no_split_stack(f: ValueRef) {\n-    \"no-split-stack\".with_c_str(|buf| {\n+pub fn set_split_stack(f: ValueRef) {\n+    \"split-stack\".with_c_str(|buf| {\n         unsafe { llvm::LLVMAddFunctionAttrString(f, buf); }\n     })\n }"}, {"sha": "65db4bdc9ab9d26c7a8c07f979c68be0b36189e4", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -814,8 +814,9 @@ pub fn Resume(cx: &Block, exn: ValueRef) -> ValueRef {\n // Atomic Operations\n pub fn AtomicCmpXchg(cx: &Block, dst: ValueRef,\n                      cmp: ValueRef, src: ValueRef,\n-                     order: AtomicOrdering) -> ValueRef {\n-    B(cx).atomic_cmpxchg(dst, cmp, src, order)\n+                     order: AtomicOrdering,\n+                     failure_order: AtomicOrdering) -> ValueRef {\n+    B(cx).atomic_cmpxchg(dst, cmp, src, order, failure_order)\n }\n pub fn AtomicRMW(cx: &Block, op: AtomicBinOp,\n                  dst: ValueRef, src: ValueRef,"}, {"sha": "a02453a2554f4e4acdf1516851c8d07009358069", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -949,9 +949,11 @@ impl<'a> Builder<'a> {\n     // Atomic Operations\n     pub fn atomic_cmpxchg(&self, dst: ValueRef,\n                          cmp: ValueRef, src: ValueRef,\n-                         order: AtomicOrdering) -> ValueRef {\n+                         order: AtomicOrdering,\n+                         failure_order: AtomicOrdering) -> ValueRef {\n         unsafe {\n-            llvm::LLVMBuildAtomicCmpXchg(self.llbuilder, dst, cmp, src, order)\n+            llvm::LLVMBuildAtomicCmpXchg(self.llbuilder, dst, cmp, src,\n+                                         order, failure_order)\n         }\n     }\n     pub fn atomic_rmw(&self, op: AtomicBinOp,"}, {"sha": "2968935ee1425e4ea0d05134f1923bd29bb8af36", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -278,6 +278,12 @@ pub fn finalize(cx: &CrateContext) {\n         if cx.sess().targ_cfg.os == abi::OsMacos {\n             \"Dwarf Version\".with_c_str(\n                 |s| llvm::LLVMRustAddModuleFlag(cx.llmod, s, 2));\n+        } else {\n+            // FIXME(#13611) this is a kludge fix because the linux bots have\n+            //               gdb 7.4 which doesn't understand dwarf4, we should\n+            //               do something more graceful here.\n+            \"Dwarf Version\".with_c_str(\n+                |s| llvm::LLVMRustAddModuleFlag(cx.llmod, s, 3));\n         }\n \n         // Prevent bitcode readers from deleting the debug info.\n@@ -2421,7 +2427,8 @@ fn populate_scope_map(cx: &CrateContext,\n                 parent_scope,\n                 file_metadata,\n                 loc.line as c_uint,\n-                loc.col.to_uint() as c_uint)\n+                loc.col.to_uint() as c_uint,\n+                0)\n         };\n \n         scope_stack.push(ScopeStackEntry { scope_metadata: scope_metadata, ident: None });\n@@ -2538,7 +2545,8 @@ fn populate_scope_map(cx: &CrateContext,\n                                 parent_scope,\n                                 file_metadata,\n                                 loc.line as c_uint,\n-                                loc.col.to_uint() as c_uint)\n+                                loc.col.to_uint() as c_uint,\n+                                0)\n                         };\n \n                         scope_stack.push(ScopeStackEntry {"}, {"sha": "9e5213e6a99a2971fac1dd0c5ca35f02d2514b10", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -223,10 +223,23 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n \n         match *split.get(1) {\n             \"cxchg\" => {\n+                // See include/llvm/IR/Instructions.h for their implementation\n+                // of this, I assume that it's good enough for us to use for\n+                // now.\n+                let strongest_failure_ordering = match order {\n+                    lib::llvm::NotAtomic | lib::llvm::Unordered =>\n+                        ccx.sess().fatal(\"cmpxchg must be atomic\"),\n+                    lib::llvm::Monotonic | lib::llvm::Release =>\n+                        lib::llvm::Monotonic,\n+                    lib::llvm::Acquire | lib::llvm::AcquireRelease =>\n+                        lib::llvm::Acquire,\n+                    lib::llvm::SequentiallyConsistent =>\n+                        lib::llvm::SequentiallyConsistent,\n+                };\n                 let old = AtomicCmpXchg(bcx, get_param(decl, first_real_arg),\n                                         get_param(decl, first_real_arg + 1u),\n                                         get_param(decl, first_real_arg + 2u),\n-                                        order);\n+                                        order, strongest_failure_ordering);\n                 Ret(bcx, old);\n             }\n             \"load\" => {"}, {"sha": "20b468a067014f92df5a1bb97ac8aeeac3464a0a", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use back::link::mangle_exported_name;\n+use back::link::exported_name;\n use driver::session;\n use lib::llvm::ValueRef;\n use middle::trans::base::{set_llvm_fn_attrs, set_inline_hint};\n@@ -27,6 +26,7 @@ use syntax::abi;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::local_def;\n+use std::hash::sip;\n \n pub fn monomorphic_fn(ccx: &CrateContext,\n                       fn_id: ast::DefId,\n@@ -178,7 +178,8 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n     }\n \n     let s = ccx.tcx.map.with_path(fn_id.node, |path| {\n-        mangle_exported_name(ccx, path, mono_ty, fn_id.node)\n+        exported_name(path, format!(\"h{}\", sip::hash(&(hash_id, mono_ty))),\n+                      ccx.link_meta.crateid.version_or_default())\n     });\n     debug!(\"monomorphize_fn mangled to {}\", s);\n "}, {"sha": "4b4d0533b4f76cc3fbba31bd9e7ac02e0c738b1d", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -1 +1 @@\n-Subproject commit 263c617d66005999afa27d00809c1568a26112ee\n+Subproject commit 4b4d0533b4f76cc3fbba31bd9e7ac02e0c738b1d"}, {"sha": "32bac73debfb9609bc0d228a226e4c69ef0671e8", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -81,7 +81,9 @@ LLVMRustCreateTargetMachine(const char *triple,\n \n     TargetOptions Options;\n     Options.NoFramePointerElim = NoFramePointerElim;\n+#if LLVM_VERSION_MINOR < 5\n     Options.EnableSegmentedStacks = EnableSegmentedStacks;\n+#endif\n     Options.FloatABIType = FloatABI::Default;\n     Options.UseSoftFloat = UseSoftFloat;\n     if (UseSoftFloat) {\n@@ -111,7 +113,11 @@ LLVMRustAddAnalysisPasses(LLVMTargetMachineRef TM,\n                           LLVMPassManagerRef PMR,\n                           LLVMModuleRef M) {\n     PassManagerBase *PM = unwrap(PMR);\n+#if LLVM_VERSION_MINOR >= 5\n+    PM->add(new DataLayoutPass(unwrap(M)));\n+#else\n     PM->add(new DataLayout(unwrap(M)));\n+#endif\n     unwrap(TM)->addAnalysisPasses(*PM);\n }\n "}, {"sha": "035a39669de8d4323b52b2f4cb95cbdc6458205c", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -129,9 +129,14 @@ extern \"C\" LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,\n                                                LLVMValueRef target,\n                                                LLVMValueRef old,\n                                                LLVMValueRef source,\n-                                               AtomicOrdering order) {\n+                                               AtomicOrdering order,\n+                                               AtomicOrdering failure_order) {\n     return wrap(unwrap(B)->CreateAtomicCmpXchg(unwrap(target), unwrap(old),\n-                                               unwrap(source), order));\n+                                               unwrap(source), order\n+#if LLVM_VERSION_MINOR >= 5\n+                                               , failure_order\n+#endif\n+                                               ));\n }\n extern \"C\" LLVMValueRef LLVMBuildAtomicFence(LLVMBuilderRef B, AtomicOrdering order) {\n     return wrap(unwrap(B)->CreateFence(order));\n@@ -289,10 +294,9 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateStructType(\n         RunTimeLang,\n         unwrapDI<DIType>(VTableHolder)\n #if LLVM_VERSION_MINOR >= 5\n-        ,UniqueId));\n-#else\n-        ));\n+        ,UniqueId\n #endif\n+        ));\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderCreateMemberType(\n@@ -318,10 +322,15 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateLexicalBlock(\n     LLVMValueRef Scope,\n     LLVMValueRef File,\n     unsigned Line,\n-    unsigned Col) {\n+    unsigned Col,\n+    unsigned Discriminator) {\n     return wrap(Builder->createLexicalBlock(\n         unwrapDI<DIDescriptor>(Scope),\n-        unwrapDI<DIFile>(File), Line, Col));\n+        unwrapDI<DIFile>(File), Line, Col\n+#if LLVM_VERSION_MINOR >= 5\n+        , Discriminator\n+#endif\n+        ));\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderCreateStaticVariable(\n@@ -477,15 +486,16 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateUnionType(\n         unwrapDI<DIArray>(Elements),\n         RunTimeLang\n #if LLVM_VERSION_MINOR >= 5\n-        ,UniqueId));\n-#else\n-        ));\n+        ,UniqueId\n #endif\n+        ));\n }\n \n+#if LLVM_VERSION_MINOR < 5\n extern \"C\" void LLVMSetUnnamedAddr(LLVMValueRef Value, LLVMBool Unnamed) {\n     unwrap<GlobalValue>(Value)->setUnnamedAddr(Unnamed);\n }\n+#endif\n \n extern \"C\" LLVMValueRef LLVMDIBuilderCreateTemplateTypeParameter(\n     DIBuilderRef Builder,\n@@ -620,6 +630,23 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n }\n #endif\n \n+#if LLVM_VERSION_MINOR >= 5\n+extern \"C\" void*\n+LLVMRustOpenArchive(char *path) {\n+    std::unique_ptr<MemoryBuffer> buf;\n+    error_code err = MemoryBuffer::getFile(path, buf);\n+    if (err) {\n+        LLVMRustError = err.message().c_str();\n+        return NULL;\n+    }\n+    Archive *ret = new Archive(buf.release(), err);\n+    if (err) {\n+        LLVMRustError = err.message().c_str();\n+        return NULL;\n+    }\n+    return ret;\n+}\n+#else\n extern \"C\" void*\n LLVMRustOpenArchive(char *path) {\n     OwningPtr<MemoryBuffer> buf;\n@@ -635,6 +662,7 @@ LLVMRustOpenArchive(char *path) {\n     }\n     return ret;\n }\n+#endif\n \n extern \"C\" const char*\n LLVMRustArchiveReadSection(Archive *ar, char *name, size_t *size) {"}, {"sha": "340a491527710eb8c574852cf8660823562854d4", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2014-02-25\n+2014-04-14"}, {"sha": "42c60e72baba7e0c3aab7dd0f99ec54139daac63", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=9b7cfd3c724bbad9dd8a0115bb2619f307b73f8c", "patch": "@@ -12,7 +12,6 @@\n #include \"llvm/IR/InlineAsm.h\"\n #include \"llvm/IR/LLVMContext.h\"\n #include \"llvm/IR/Module.h\"\n-#include \"llvm/Linker.h\"\n #include \"llvm/PassManager.h\"\n #include \"llvm/IR/InlineAsm.h\"\n #include \"llvm/IR/LLVMContext.h\"\n@@ -43,8 +42,6 @@\n #include \"llvm/Transforms/IPO.h\"\n #include \"llvm/Transforms/Instrumentation.h\"\n #include \"llvm/Transforms/Vectorize.h\"\n-#include \"llvm/DebugInfo.h\"\n-#include \"llvm/DIBuilder.h\"\n #include \"llvm/Bitcode/ReaderWriter.h\"\n #include \"llvm-c/Core.h\"\n #include \"llvm-c/BitReader.h\"\n@@ -53,8 +50,14 @@\n \n #if LLVM_VERSION_MINOR >= 5\n #include \"llvm/IR/IRPrintingPasses.h\"\n+#include \"llvm/IR/DebugInfo.h\"\n+#include \"llvm/IR/DIBuilder.h\"\n+#include \"llvm/Linker/Linker.h\"\n #else\n #include \"llvm/Assembly/PrintModulePass.h\"\n+#include \"llvm/DebugInfo.h\"\n+#include \"llvm/DIBuilder.h\"\n+#include \"llvm/Linker.h\"\n #endif\n \n // Used by RustMCJITMemoryManager::getPointerToNamedFunction()"}]}