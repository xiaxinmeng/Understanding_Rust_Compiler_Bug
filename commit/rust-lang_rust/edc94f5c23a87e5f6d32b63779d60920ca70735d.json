{"sha": "edc94f5c23a87e5f6d32b63779d60920ca70735d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYzk0ZjVjMjNhODdlNWY2ZDMyYjYzNzc5ZDYwOTIwY2E3MDczNWQ=", "commit": {"author": {"name": "Tyler Bindon", "email": "martica@martica.org", "date": "2013-01-25T19:31:45Z"}, "committer": {"name": "Tyler Bindon", "email": "martica@martica.org", "date": "2013-01-26T02:42:23Z"}, "message": "Fix Option camel case in xfailed/ignored tests", "tree": {"sha": "cbc303a91eaf4f2c6cb0c8b824ab8f813beafec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbc303a91eaf4f2c6cb0c8b824ab8f813beafec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edc94f5c23a87e5f6d32b63779d60920ca70735d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edc94f5c23a87e5f6d32b63779d60920ca70735d", "html_url": "https://github.com/rust-lang/rust/commit/edc94f5c23a87e5f6d32b63779d60920ca70735d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edc94f5c23a87e5f6d32b63779d60920ca70735d/comments", "author": {"login": "martica", "id": 84769, "node_id": "MDQ6VXNlcjg0NzY5", "avatar_url": "https://avatars.githubusercontent.com/u/84769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martica", "html_url": "https://github.com/martica", "followers_url": "https://api.github.com/users/martica/followers", "following_url": "https://api.github.com/users/martica/following{/other_user}", "gists_url": "https://api.github.com/users/martica/gists{/gist_id}", "starred_url": "https://api.github.com/users/martica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martica/subscriptions", "organizations_url": "https://api.github.com/users/martica/orgs", "repos_url": "https://api.github.com/users/martica/repos", "events_url": "https://api.github.com/users/martica/events{/privacy}", "received_events_url": "https://api.github.com/users/martica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "martica", "id": 84769, "node_id": "MDQ6VXNlcjg0NzY5", "avatar_url": "https://avatars.githubusercontent.com/u/84769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martica", "html_url": "https://github.com/martica", "followers_url": "https://api.github.com/users/martica/followers", "following_url": "https://api.github.com/users/martica/following{/other_user}", "gists_url": "https://api.github.com/users/martica/gists{/gist_id}", "starred_url": "https://api.github.com/users/martica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martica/subscriptions", "organizations_url": "https://api.github.com/users/martica/orgs", "repos_url": "https://api.github.com/users/martica/repos", "events_url": "https://api.github.com/users/martica/events{/privacy}", "received_events_url": "https://api.github.com/users/martica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a5d2cdbf3aff91b57bc6b70dd429ae5e771d054", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5d2cdbf3aff91b57bc6b70dd429ae5e771d054", "html_url": "https://github.com/rust-lang/rust/commit/3a5d2cdbf3aff91b57bc6b70dd429ae5e771d054"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "d0ca133b39e4a9b92bb618fc4a5780e6534049a8", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=edc94f5c23a87e5f6d32b63779d60920ca70735d", "patch": "@@ -255,7 +255,7 @@ mod test {\n             };\n \n             match recv_timeout(hl_loop, 10u, test_po) {\n-              some(val) => {\n+              Some(val) => {\n                 assert val == expected;\n                 successes += 1;\n               }"}, {"sha": "2505859a737a36f305eceea8ca5f67a8747ed8c2", "filename": "src/test/compile-fail/issue-2354.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs?ref=edc94f5c23a87e5f6d32b63779d60920ca70735d", "patch": "@@ -15,9 +15,9 @@\n   xfailed for now (see Issue #2354)\n  */\n fn foo() { //~ ERROR this open brace is not closed\n-  match some(x) {\n-      some(y) { fail; }\n-      none    { fail; }\n+  match Some(x) {\n+      Some(y) { fail; }\n+      None    { fail; }\n }\n \n fn bar() {"}, {"sha": "5a82d0104383ba31ec2d43a0f7551d1639fd8f6b", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=edc94f5c23a87e5f6d32b63779d60920ca70735d", "patch": "@@ -69,8 +69,8 @@ fn main() {\n     let stmt = quote_stmt!(let x = 20;);\n     check_pp(ext_cx, *stmt, pprust::print_stmt, ~\"let x = 20;\");\n \n-    let pat = quote_pat!(some(_));\n-    check_pp(ext_cx, pat, pprust::print_refutable_pat, ~\"some(_)\");\n+    let pat = quote_pat!(Some(_));\n+    check_pp(ext_cx, pat, pprust::print_refutable_pat, ~\"Some(_)\");\n \n }\n "}, {"sha": "eda015cce1840a47ce086ecb20bd4357a38af3ad", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=edc94f5c23a87e5f6d32b63779d60920ca70735d", "patch": "@@ -16,9 +16,9 @@ fn dispose(+_x: arc::ARC<bool>) unsafe { }\n \n fn main() {\n     let p = arc::arc(true);\n-    let x = some(p);\n+    let x = Some(p);\n     match move x {\n-        some(move z) => { dispose(z); },\n-        none => fail\n+        Some(move z) => { dispose(z); },\n+        None => fail\n     }\n }"}, {"sha": "0bf5b7de75d3caa4e6e8f463439d0ca44f4dfc9a", "filename": "src/test/run-pass/class-impl-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs?ref=edc94f5c23a87e5f6d32b63779d60920ca70735d", "patch": "@@ -55,8 +55,8 @@ class cat : map<int, bool> {\n   fn contains_key(&&k: int) -> bool { k <= self.meows }\n   fn get(&&k:int) -> bool { k <= self.meows }\n   fn [](&&k:int) -> bool { k <= self.meows }\n-  fn find(&&k:int) -> option<bool> { some(self.get(k)) }\n-  fn remove(&&k:int) -> option<bool> { self.meows -= k; some(true) }\n+  fn find(&&k:int) -> Option<bool> { Some(self.get(k)) }\n+  fn remove(&&k:int) -> Option<bool> { self.meows -= k; Some(true) }\n   fn each(f: fn(&&int, &&bool) -> bool) {\n     let mut n = int::abs(self.meows);\n     while n > 0 {"}, {"sha": "f80e3956eda716ada0cb9d22735b04ac09495f71", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=edc94f5c23a87e5f6d32b63779d60920ca70735d", "patch": "@@ -23,7 +23,7 @@ trait noisy {\n }\n \n trait scratchy {\n-  fn scratch() -> option<furniture>;\n+  fn scratch() -> Option<furniture>;\n }\n \n trait bitey {\n@@ -72,13 +72,13 @@ class cat : noisy, scratchy, bitey {\n \n   fn speak() -> int { self.meow() as int }\n   fn meow_count() -> uint { *self.meows }\n-  fn scratch() -> option<furniture> {\n+  fn scratch() -> Option<furniture> {\n     let all = ~[chair, couch, bed];\n     log(error, self.scratched);\n-    let mut rslt = none;\n+    let mut rslt = None;\n     for each(all) |thing| { if !self.scratched.contains(thing) {\n           self.scratched.push(thing);\n-          return some(thing); }}\n+          return Some(thing); }}\n     rslt\n   }\n   fn bite() -> body_part {"}, {"sha": "b6e9d66ec7260c671e65a79277f18e0ee35f406e", "filename": "src/test/run-pass/class-trait-bounded-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs?ref=edc94f5c23a87e5f6d32b63779d60920ca70735d", "patch": "@@ -23,7 +23,7 @@ class keys<K: Copy, V: Copy, M: Copy map<K,V>>\n     }\n \n     fn each(blk: fn(K) -> bool) { self.map.each(|k, _v| blk(k) ) }\n-    fn size_hint() -> option<uint> { some(self.map.size()) }\n+    fn size_hint() -> Option<uint> { Some(self.map.size()) }\n     fn eachi(blk: fn(uint, K) -> bool) { iter::eachi(self, blk) }\n }\n "}, {"sha": "fddc41a3761458bf3a5f90a73b9256d680233b95", "filename": "src/test/run-pass/issue-2869.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fissue-2869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fissue-2869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2869.rs?ref=edc94f5c23a87e5f6d32b63779d60920ca70735d", "patch": "@@ -9,16 +9,16 @@\n // except according to those terms.\n \n // xfail-test\n-enum pat { pat_ident(option<uint>) }\n+enum pat { pat_ident(Option<uint>) }\n \n fn f(pat: pat) -> bool { true }\n \n fn num_bindings(pat: pat) -> uint {\n     match pat {\n       pat_ident(_) if f(pat) { 0 }\n-      pat_ident(none) { 1 }\n-      pat_ident(some(sub)) { sub }\n+      pat_ident(None) { 1 }\n+      pat_ident(Some(sub)) { sub }\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "8ed85b957ee73f791626c095f2e56ebb4aba7b97", "filename": "src/test/run-pass/region-return-interior-of-option-in-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option-in-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc94f5c23a87e5f6d32b63779d60920ca70735d/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option-in-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-return-interior-of-option-in-self.rs?ref=edc94f5c23a87e5f6d32b63779d60920ca70735d", "patch": "@@ -15,14 +15,14 @@ struct cell<T> {\n }\n \n struct cells<T> {\n-    vals: ~[option<cell<T>>];\n+    vals: ~[Option<cell<T>>];\n }\n \n impl<T> &cells<T> {\n     fn get(idx: uint) -> &self/T {\n         match self.vals[idx] {\n-          some(ref v) => &v.value,\n-          none => fail\n+          Some(ref v) => &v.value,\n+          None => fail\n         }\n     }\n }"}]}