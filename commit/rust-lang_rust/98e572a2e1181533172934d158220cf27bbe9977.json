{"sha": "98e572a2e1181533172934d158220cf27bbe9977", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZTU3MmEyZTExODE1MzMxNzI5MzRkMTU4MjIwY2YyN2JiZTk5Nzc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-05T00:07:58Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-05T00:07:58Z"}, "message": "Merge pull request #94 from marcusklaas/fixes\n\nFix two TODO items", "tree": {"sha": "5a8dc42c53e0a7ed2c6d0e5a3f4a26b1b6c1dba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a8dc42c53e0a7ed2c6d0e5a3f4a26b1b6c1dba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98e572a2e1181533172934d158220cf27bbe9977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98e572a2e1181533172934d158220cf27bbe9977", "html_url": "https://github.com/rust-lang/rust/commit/98e572a2e1181533172934d158220cf27bbe9977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98e572a2e1181533172934d158220cf27bbe9977/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "826a2fb144d9cd5d92c5c836427c8554a04ddb23", "url": "https://api.github.com/repos/rust-lang/rust/commits/826a2fb144d9cd5d92c5c836427c8554a04ddb23", "html_url": "https://github.com/rust-lang/rust/commit/826a2fb144d9cd5d92c5c836427c8554a04ddb23"}, {"sha": "13141e261b4df0ee99fd196466f0bb04c8ce0632", "url": "https://api.github.com/repos/rust-lang/rust/commits/13141e261b4df0ee99fd196466f0bb04c8ce0632", "html_url": "https://github.com/rust-lang/rust/commit/13141e261b4df0ee99fd196466f0bb04c8ce0632"}], "stats": {"total": 73, "additions": 25, "deletions": 48}, "files": [{"sha": "c5fb9355b84815cb532172e6dc989246c64f85a3", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98e572a2e1181533172934d158220cf27bbe9977/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e572a2e1181533172934d158220cf27bbe9977/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=98e572a2e1181533172934d158220cf27bbe9977", "patch": "@@ -105,14 +105,8 @@ impl<'a> FmtVisitor<'a> {\n             let args: Vec<_> = args.iter().map(|e| (self.rewrite_expr(e,\n                                                                       remaining_width,\n                                                                       offset), String::new())).collect();\n-            // TODO move this into write_list\n-            let tactics = if args.iter().any(|&(ref s, _)| s.contains('\\n')) {\n-                ListTactic::Vertical\n-            } else {\n-                ListTactic::HorizontalVertical\n-            };\n             let fmt = ListFormatting {\n-                tactic: tactics,\n+                tactic: ListTactic::HorizontalVertical,\n                 separator: \",\",\n                 trailing_separator: SeparatorTactic::Never,\n                 indent: offset,\n@@ -161,13 +155,8 @@ impl<'a> FmtVisitor<'a> {\n \n         // FIXME comments\n         let field_strs: Vec<_> = field_strs.into_iter().map(|s| (s, String::new())).collect();\n-        let tactics = if field_strs.iter().any(|&(ref s, _)| s.contains('\\n')) {\n-            ListTactic::Vertical\n-        } else {\n-            ListTactic::HorizontalVertical\n-        };\n         let fmt = ListFormatting {\n-            tactic: tactics,\n+            tactic: ListTactic::HorizontalVertical,\n             separator: \",\",\n             trailing_separator: if base.is_some() {\n                     SeparatorTactic::Never"}, {"sha": "2817b23b33e929dfea47f4089b8eefebe7af0d9c", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98e572a2e1181533172934d158220cf27bbe9977/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e572a2e1181533172934d158220cf27bbe9977/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=98e572a2e1181533172934d158220cf27bbe9977", "patch": "@@ -341,8 +341,7 @@ impl<'a> FmtVisitor<'a> {\n         // The fix is comments in the AST or a span for the closing paren.\n         let snippet = self.snippet(codemap::mk_sp(prev_end, next_span_start));\n         let snippet = snippet.trim();\n-        let snippet = &snippet[..snippet.find(terminator)\n-                                    .unwrap_or(snippet.find(separator).unwrap_or(snippet.len()))];\n+        let snippet = &snippet[..snippet.find(terminator).unwrap_or(snippet.len())];\n         let snippet = snippet.trim();\n         result.push(snippet.to_owned());\n "}, {"sha": "868f0ca663b944198f7897fe8d32667bf4c94ed3", "filename": "src/lib.rs", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/98e572a2e1181533172934d158220cf27bbe9977/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e572a2e1181533172934d158220cf27bbe9977/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=98e572a2e1181533172934d158220cf27bbe9977", "patch": "@@ -64,6 +64,23 @@ const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";\n \n static mut CONFIG: Option<config::Config> = None;\n \n+// Macro for deriving implementations of Decodable for enums\n+macro_rules! impl_enum_decodable {\n+    ( $e:ident, $( $x:ident ),* ) => {\n+        impl Decodable for $e {\n+            fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+                let s = try!(d.read_str());\n+                match &*s {\n+                    $(\n+                        stringify!($x) => Ok($e::$x),\n+                    )*\n+                    _ => Err(d.error(\"Bad variant\")),\n+                }\n+            }\n+        }\n+    };\n+}\n+\n #[derive(Copy, Clone)]\n pub enum WriteMode {\n     Overwrite,\n@@ -81,16 +98,7 @@ pub enum NewlineStyle {\n     Unix, // \\n\n }\n \n-impl Decodable for NewlineStyle {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        let s = try!(d.read_str());\n-        match &*s {\n-            \"Windows\" => Ok(NewlineStyle::Windows),\n-            \"Unix\" => Ok(NewlineStyle::Unix),\n-            _ => Err(d.error(\"Bad variant\")),\n-        }\n-    }\n-}\n+impl_enum_decodable!(NewlineStyle, Windows, Unix);\n \n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n pub enum BraceStyle {\n@@ -101,17 +109,7 @@ pub enum BraceStyle {\n     SameLineWhere,\n }\n \n-impl Decodable for BraceStyle {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        let s = try!(d.read_str());\n-        match &*s {\n-            \"AlwaysNextLine\" => Ok(BraceStyle::AlwaysNextLine),\n-            \"PreferSameLine\" => Ok(BraceStyle::PreferSameLine),\n-            \"SameLineWhere\" => Ok(BraceStyle::SameLineWhere),\n-            _ => Err(d.error(\"Bad variant\")),\n-        }\n-    }\n-}\n+impl_enum_decodable!(BraceStyle, AlwaysNextLine, PreferSameLine, SameLineWhere);\n \n // How to indent a function's return type.\n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n@@ -122,17 +120,7 @@ pub enum ReturnIndent {\n     WithWhereClause,\n }\n \n-// TODO could use a macro for all these Decodable impls.\n-impl Decodable for ReturnIndent {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        let s = try!(d.read_str());\n-        match &*s {\n-            \"WithArgs\" => Ok(ReturnIndent::WithArgs),\n-            \"WithWhereClause\" => Ok(ReturnIndent::WithWhereClause),\n-            _ => Err(d.error(\"Bad variant\")),\n-        }\n-    }\n-}\n+impl_enum_decodable!(ReturnIndent, WithArgs, WithWhereClause);\n \n // Formatting which depends on the AST.\n fn fmt_ast<'a>(krate: &ast::Crate, codemap: &'a CodeMap) -> ChangeSet<'a> {"}, {"sha": "61ad8c08a0c29576bbe18653b7534c03afbbea71", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98e572a2e1181533172934d158220cf27bbe9977/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e572a2e1181533172934d158220cf27bbe9977/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=98e572a2e1181533172934d158220cf27bbe9977", "patch": "@@ -79,7 +79,8 @@ pub fn write_list<'b>(items: &[(String, String)], formatting: &ListFormatting<'b\n     if tactic == ListTactic::HorizontalVertical {\n         debug!(\"write_list: total_width: {}, total_sep_len: {}, h_width: {}\",\n                total_width, total_sep_len, formatting.h_width);\n-        tactic = if fits_single {\n+        tactic = if fits_single &&\n+                    !items.iter().any(|&(ref s, _)| s.contains('\\n')) {\n             ListTactic::Horizontal\n         } else {\n             ListTactic::Vertical"}]}