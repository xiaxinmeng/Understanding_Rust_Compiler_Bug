{"sha": "41028def11c2d72e7ba32386cf8d15ec8b8849b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMDI4ZGVmMTFjMmQ3MmU3YmEzMjM4NmNmOGQxNWVjOGI4ODQ5Yjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-26T05:26:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-26T05:26:56Z"}, "message": "Auto merge of #33204 - Manishearth:rollup, r=Manishearth\n\nRollup of 7 pull requests\n\n- Successful merges: #33107, #33133, #33160, #33167, #33194, #33196, #33200\n- Failed merges:", "tree": {"sha": "b635af8390bba9e5343171c532e5f46a0154642b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b635af8390bba9e5343171c532e5f46a0154642b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41028def11c2d72e7ba32386cf8d15ec8b8849b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41028def11c2d72e7ba32386cf8d15ec8b8849b8", "html_url": "https://github.com/rust-lang/rust/commit/41028def11c2d72e7ba32386cf8d15ec8b8849b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41028def11c2d72e7ba32386cf8d15ec8b8849b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce735858d97fbabffa1d78d29fb644cd7c4f845", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce735858d97fbabffa1d78d29fb644cd7c4f845", "html_url": "https://github.com/rust-lang/rust/commit/8ce735858d97fbabffa1d78d29fb644cd7c4f845"}, {"sha": "3dc0b55a470e7966e8b77567ef0359e26b5e2825", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc0b55a470e7966e8b77567ef0359e26b5e2825", "html_url": "https://github.com/rust-lang/rust/commit/3dc0b55a470e7966e8b77567ef0359e26b5e2825"}], "stats": {"total": 390, "additions": 301, "deletions": 89}, "files": [{"sha": "859fbd974fedc113f46af2297750fad25d47e422", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -34,9 +34,7 @@ use CrateCtxt;\n use rustc::infer::{self, InferCtxt, TypeOrigin, new_infer_ctxt};\n use std::cell::RefCell;\n use std::rc::Rc;\n-use syntax::ast;\n use syntax::codemap::Span;\n-use syntax::errors::DiagnosticBuilder;\n use util::nodemap::{DefIdMap, FnvHashMap};\n use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n@@ -517,13 +515,6 @@ fn enforce_trait_manually_implementable(tcx: &TyCtxt, sp: Span, trait_def_id: De\n     err.emit();\n }\n \n-// Factored out into helper because the error cannot be defined in multiple locations.\n-pub fn report_duplicate_item<'tcx>(tcx: &TyCtxt<'tcx>, sp: Span, name: ast::Name)\n-                                   -> DiagnosticBuilder<'tcx>\n-{\n-    struct_span_err!(tcx.sess, sp, E0201, \"duplicate definitions with name `{}`:\", name)\n-}\n-\n pub fn check_coherence(crate_context: &CrateCtxt) {\n     let _task = crate_context.tcx.dep_graph.in_task(DepNode::Coherence);\n     let infcx = new_infer_ctxt(crate_context.tcx,"}, {"sha": "ffcf4277156676cc84d463c9c7f6359afb4e03d3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -63,7 +63,6 @@ use lint;\n use hir::def::Def;\n use hir::def_id::DefId;\n use constrained_type_params as ctp;\n-use coherence;\n use middle::lang_items::SizedTraitLangItem;\n use middle::resolve_lifetime;\n use middle::const_val::ConstVal;\n@@ -80,13 +79,14 @@ use rscope::*;\n use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n use util::common::{ErrorReported, MemoizationMap};\n-use util::nodemap::{FnvHashMap, FnvHashSet};\n+use util::nodemap::FnvHashMap;\n use write_ty_to_tcx;\n \n use rustc_const_math::ConstInt;\n \n use std::cell::RefCell;\n use std::collections::HashSet;\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::rc::Rc;\n \n use syntax::abi;\n@@ -746,16 +746,27 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n             // Convert all the associated consts.\n             // Also, check if there are any duplicate associated items\n-            let mut seen_type_items = FnvHashSet();\n-            let mut seen_value_items = FnvHashSet();\n+            let mut seen_type_items = FnvHashMap();\n+            let mut seen_value_items = FnvHashMap();\n \n             for impl_item in impl_items {\n                 let seen_items = match impl_item.node {\n                     hir::ImplItemKind::Type(_) => &mut seen_type_items,\n                     _                    => &mut seen_value_items,\n                 };\n-                if !seen_items.insert(impl_item.name) {\n-                    coherence::report_duplicate_item(tcx, impl_item.span, impl_item.name).emit();\n+                match seen_items.entry(impl_item.name) {\n+                    Occupied(entry) => {\n+                        let mut err = struct_span_err!(tcx.sess, impl_item.span, E0201,\n+                                                       \"duplicate definitions with name `{}`:\",\n+                                                       impl_item.name);\n+                        span_note!(&mut err, *entry.get(),\n+                                   \"previous definition of `{}` here\",\n+                                   impl_item.name);\n+                        err.emit();\n+                    }\n+                    Vacant(entry) => {\n+                        entry.insert(impl_item.span);\n+                    }\n                 }\n \n                 if let hir::ImplItemKind::Const(ref ty, _) = impl_item.node {"}, {"sha": "e13b2688788904e5d480dde122d505d5f7ddeaa5", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -76,6 +76,7 @@ fn try_inline_def(cx: &DocContext, tcx: &TyCtxt,\n     let inner = match def {\n         Def::Trait(did) => {\n             record_extern_fqn(cx, did, clean::TypeTrait);\n+            ret.extend(build_impls(cx, tcx, did));\n             clean::TraitItem(build_external_trait(cx, tcx, did))\n         }\n         Def::Fn(did) => {\n@@ -247,12 +248,10 @@ pub fn build_impls(cx: &DocContext,\n     // Primarily, the impls will be used to populate the documentation for this\n     // type being inlined, but impls can also be used when generating\n     // documentation for primitives (no way to find those specifically).\n-    if !cx.all_crate_impls.borrow_mut().contains_key(&did.krate) {\n-        let mut impls = Vec::new();\n+    if cx.populated_crate_impls.borrow_mut().insert(did.krate) {\n         for item in tcx.sess.cstore.crate_top_level_items(did.krate) {\n             populate_impls(cx, tcx, item.def, &mut impls);\n         }\n-        cx.all_crate_impls.borrow_mut().insert(did.krate, impls);\n \n         fn populate_impls(cx: &DocContext, tcx: &TyCtxt,\n                           def: cstore::DefLike,\n@@ -269,21 +268,7 @@ pub fn build_impls(cx: &DocContext,\n         }\n     }\n \n-    let mut candidates = cx.all_crate_impls.borrow_mut();\n-    let candidates = candidates.get_mut(&did.krate).unwrap();\n-    for i in (0..candidates.len()).rev() {\n-        let remove = match candidates[i].inner {\n-            clean::ImplItem(ref i) => {\n-                i.for_.def_id() == Some(did) || i.for_.primitive_type().is_some()\n-            }\n-            _ => continue,\n-        };\n-        if remove {\n-            impls.push(candidates.swap_remove(i));\n-        }\n-    }\n-\n-    return impls;\n+    impls\n }\n \n pub fn build_impl(cx: &DocContext,"}, {"sha": "23215fd9d478a3580d2d7d2f23d386091327889a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -38,7 +38,7 @@ use rustc_trans::back::link;\n use rustc::middle::cstore::{self, CrateStore};\n use rustc::middle::privacy::AccessLevels;\n use rustc::hir::def::Def;\n-use rustc::hir::def_id::{DefId, DefIndex};\n+use rustc::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n use rustc::ty::subst::{self, ParamSpace, VecPerParamSpace};\n use rustc::ty;\n use rustc::middle::stability;\n@@ -2388,7 +2388,7 @@ impl Clean<Item> for doctree::ExternCrate {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.map.local_def_id(0),\n+            def_id: DefId { krate: self.cnum, index: CRATE_DEF_INDEX },\n             visibility: self.vis.clean(cx),\n             stability: None,\n             deprecation: None,"}, {"sha": "0b3a0c19dacc46151bc8fe048597acb6a60927b6", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -30,7 +30,7 @@ use syntax::feature_gate::UnstableFeatures;\n use syntax::parse::token;\n \n use std::cell::{RefCell, Cell};\n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::rc::Rc;\n \n use visit_ast::RustdocVisitor;\n@@ -54,7 +54,7 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     pub map: &'a hir_map::Map<'tcx>,\n     pub maybe_typed: MaybeTyped<'a, 'tcx>,\n     pub input: Input,\n-    pub all_crate_impls: RefCell<HashMap<ast::CrateNum, Vec<clean::Item>>>,\n+    pub populated_crate_impls: RefCell<HashSet<ast::CrateNum>>,\n     pub deref_trait_did: Cell<Option<DefId>>,\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n@@ -189,7 +189,7 @@ pub fn run_core(search_paths: SearchPaths,\n             map: &tcx.map,\n             maybe_typed: Typed(tcx),\n             input: input,\n-            all_crate_impls: RefCell::new(HashMap::new()),\n+            populated_crate_impls: RefCell::new(HashSet::new()),\n             deref_trait_did: Cell::new(None),\n             access_levels: RefCell::new(access_levels),\n             external_traits: RefCell::new(HashMap::new()),"}, {"sha": "408782a698a2ac3474a444f73a4c8aeea5583208", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -232,6 +232,7 @@ pub struct Macro {\n \n pub struct ExternCrate {\n     pub name: Name,\n+    pub cnum: ast::CrateNum,\n     pub path: Option<String>,\n     pub vis: hir::Visibility,\n     pub attrs: hir::HirVec<ast::Attribute>,"}, {"sha": "739da1b49d46c73c11d782ddb84e6edd37722454", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -57,6 +57,11 @@ pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n pub struct CommaSep<'a, T: 'a>(pub &'a [T]);\n pub struct AbiSpace(pub Abi);\n \n+pub struct HRef<'a> {\n+    pub did: DefId,\n+    pub text: &'a str,\n+}\n+\n impl<'a> VisSpace<'a> {\n     pub fn get(self) -> &'a Option<clean::Visibility> {\n         let VisSpace(v) = self; v\n@@ -291,17 +296,19 @@ impl fmt::Display for clean::Path {\n \n pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n     let cache = cache();\n+    if !did.is_local() && !cache.access_levels.is_doc_reachable(did) {\n+        return None\n+    }\n+\n     let loc = CURRENT_LOCATION_KEY.with(|l| l.borrow().clone());\n     let &(ref fqp, shortty) = match cache.paths.get(&did) {\n         Some(p) => p,\n         None => return None,\n     };\n+\n     let mut url = if did.is_local() || cache.inlined.contains(&did) {\n         repeat(\"../\").take(loc.len()).collect::<String>()\n     } else {\n-        if !cache.access_levels.is_doc_reachable(did) {\n-            return None\n-        }\n         match cache.extern_locations[&did.krate] {\n             (_, render::Remote(ref s)) => s.to_string(),\n             (_, render::Local) => repeat(\"../\").take(loc.len()).collect(),\n@@ -361,15 +368,7 @@ fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n             }\n         }\n     }\n-\n-    match href(did) {\n-        Some((url, shortty, fqp)) => {\n-            write!(w, \"<a class='{}' href='{}' title='{}'>{}</a>\",\n-                   shortty, url, fqp.join(\"::\"), last.name)?;\n-        }\n-        _ => write!(w, \"{}\", last.name)?,\n-    }\n-    write!(w, \"{}\", last.params)?;\n+    write!(w, \"{}{}\", HRef::new(did, &last.name), last.params)?;\n     Ok(())\n }\n \n@@ -435,6 +434,24 @@ fn tybounds(w: &mut fmt::Formatter,\n     }\n }\n \n+impl<'a> HRef<'a> {\n+    pub fn new(did: DefId, text: &'a str) -> HRef<'a> {\n+        HRef { did: did, text: text }\n+    }\n+}\n+\n+impl<'a> fmt::Display for HRef<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match href(self.did) {\n+            Some((url, shortty, fqp)) => {\n+                write!(f, \"<a class='{}' href='{}' title='{}'>{}</a>\",\n+                       shortty, url, fqp.join(\"::\"), self.text)\n+            }\n+            _ => write!(f, \"{}\", self.text),\n+        }\n+    }\n+}\n+\n impl fmt::Display for clean::Type {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "a8f1fe7d46f904f1dda9a829e69b73638605483e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 46, "deletions": 33, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -1640,8 +1640,8 @@ fn plain_summary_line(s: Option<&str>) -> String {\n }\n \n fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Result {\n-    if let Some(s) = short_stability(item, cx, true) {\n-        write!(w, \"<div class='stability'>{}</div>\", s)?;\n+    for stability in short_stability(item, cx, true) {\n+        write!(w, \"<div class='stability'>{}</div>\", stability)?;\n     }\n     if let Some(s) = item.doc_value() {\n         write!(w, \"<div class='docblock'>{}</div>\", Markdown(s))?;\n@@ -1739,16 +1739,19 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n \n         match myitem.inner {\n             clean::ExternCrateItem(ref name, ref src) => {\n+                use html::format::HRef;\n+\n                 match *src {\n                     Some(ref src) => {\n                         write!(w, \"<tr><td><code>{}extern crate {} as {};\",\n                                VisSpace(&myitem.visibility),\n-                               src,\n+                               HRef::new(myitem.def_id, src),\n                                name)?\n                     }\n                     None => {\n                         write!(w, \"<tr><td><code>{}extern crate {};\",\n-                               VisSpace(&myitem.visibility), name)?\n+                               VisSpace(&myitem.visibility),\n+                               HRef::new(myitem.def_id, name))?\n                     }\n                 }\n                 write!(w, \"</code></td></tr>\")?;\n@@ -1761,8 +1764,15 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n \n             _ => {\n                 if myitem.name.is_none() { continue }\n-                let stab_docs = if let Some(s) = short_stability(myitem, cx, false) {\n-                    format!(\"[{}]\", s)\n+\n+                let stabilities = short_stability(myitem, cx, false);\n+\n+                let stab_docs = if !stabilities.is_empty() {\n+                    stabilities.iter()\n+                               .map(|s| format!(\"[{}]\", s))\n+                               .collect::<Vec<_>>()\n+                               .as_slice()\n+                               .join(\" \")\n                 } else {\n                     String::new()\n                 };\n@@ -1789,21 +1799,26 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     write!(w, \"</table>\")\n }\n \n-fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Option<String> {\n-    item.stability.as_ref().and_then(|stab| {\n+fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<String> {\n+    let mut stability = vec![];\n+\n+    if let Some(stab) = item.stability.as_ref() {\n         let reason = if show_reason && !stab.reason.is_empty() {\n             format!(\": {}\", stab.reason)\n         } else {\n             String::new()\n         };\n-        let text = if !stab.deprecated_since.is_empty() {\n+        if !stab.deprecated_since.is_empty() {\n             let since = if show_reason {\n                 format!(\" since {}\", Escape(&stab.deprecated_since))\n             } else {\n                 String::new()\n             };\n-            format!(\"Deprecated{}{}\", since, Markdown(&reason))\n-        } else if stab.level == stability::Unstable {\n+            let text = format!(\"Deprecated{}{}\", since, Markdown(&reason));\n+            stability.push(format!(\"<em class='stab deprecated'>{}</em>\", text))\n+        };\n+\n+        if stab.level == stability::Unstable {\n             let unstable_extra = if show_reason {\n                 match (!stab.feature.is_empty(), &cx.shared.issue_tracker_base_url, stab.issue) {\n                     (true, &Some(ref tracker_url), Some(issue_no)) if issue_no > 0 =>\n@@ -1819,29 +1834,26 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Optio\n             } else {\n                 String::new()\n             };\n-            format!(\"Unstable{}{}\", unstable_extra, Markdown(&reason))\n+            let text = format!(\"Unstable{}{}\", unstable_extra, Markdown(&reason));\n+            stability.push(format!(\"<em class='stab unstable'>{}</em>\", text))\n+        };\n+    } else if let Some(depr) = item.deprecation.as_ref() {\n+        let note = if show_reason && !depr.note.is_empty() {\n+            format!(\": {}\", depr.note)\n         } else {\n-            return None\n+            String::new()\n+        };\n+        let since = if show_reason && !depr.since.is_empty() {\n+            format!(\" since {}\", Escape(&depr.since))\n+        } else {\n+            String::new()\n         };\n-        Some(format!(\"<em class='stab {}'>{}</em>\",\n-                     item.stability_class(), text))\n-    }).or_else(|| {\n-        item.deprecation.as_ref().and_then(|depr| {\n-            let note = if show_reason && !depr.note.is_empty() {\n-                format!(\": {}\", depr.note)\n-            } else {\n-                String::new()\n-            };\n-            let since = if show_reason && !depr.since.is_empty() {\n-                format!(\" since {}\", Escape(&depr.since))\n-            } else {\n-                String::new()\n-            };\n \n-            let text = format!(\"Deprecated{}{}\", since, Markdown(&note));\n-            Some(format!(\"<em class='stab deprecated'>{}</em>\", text))\n-        })\n-    })\n+        let text = format!(\"Deprecated{}{}\", since, Markdown(&note));\n+        stability.push(format!(\"<em class='stab deprecated'>{}</em>\", text))\n+    }\n+\n+    stability\n }\n \n struct Initializer<'a>(&'a str);\n@@ -2548,10 +2560,11 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                 if !is_static || render_static {\n                     let id = derive_id(format!(\"{}.{}\", shortty, name));\n                     write!(w, \"<h4 id='{}' class='{}'>\", id, shortty)?;\n-                    render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                     write!(w, \"<code>\")?;\n                     render_assoc_item(w, item, link.anchor(&id))?;\n-                    write!(w, \"</code></h4>\\n\")?;\n+                    write!(w, \"</code>\")?;\n+                    render_stability_since_raw(w, item.stable_since(), outer_version)?;\n+                    write!(w, \"</h4>\\n\")?;\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {"}, {"sha": "a368b4197a3950e4fa22c459c47ba3641b0fe221", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -981,7 +981,7 @@\n         $(\".method\").each(function() {\n             if ($(this).next().is(\".docblock\") ||\n                 ($(this).next().is(\".stability\") && $(this).next().next().is(\".docblock\"))) {\n-                    $(this).children().first().after(toggle.clone());\n+                    $(this).children().last().after(toggle.clone());\n             }\n         });\n "}, {"sha": "81fd1128afac84c16b31c92d70cf339d26209edd", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cell::{RefCell, Cell};\n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::env;\n use std::ffi::OsString;\n use std::io::prelude::*;\n@@ -111,7 +111,7 @@ pub fn run(input: &str,\n         maybe_typed: core::NotTyped(&sess),\n         input: input,\n         external_traits: RefCell::new(HashMap::new()),\n-        all_crate_impls: RefCell::new(HashMap::new()),\n+        populated_crate_impls: RefCell::new(HashSet::new()),\n         deref_trait_did: Cell::new(None),\n         access_levels: Default::default(),\n         renderinfo: Default::default(),"}, {"sha": "d9ea82acbea359330c04339146f80bf7fc9cfd01", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -316,7 +316,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let name = renamed.unwrap_or(item.name);\n         match item.node {\n             hir::ItemExternCrate(ref p) => {\n+                let cstore = &self.cx.sess().cstore;\n                 om.extern_crates.push(ExternCrate {\n+                    cnum: cstore.extern_mod_stmt_cnum(item.id)\n+                                .unwrap_or(ast::CrateNum::max_value()),\n                     name: name,\n                     path: p.map(|x|x.to_string()),\n                     vis: item.vis.clone(),"}, {"sha": "f6d89f7c1dc894a687e9a0a6f38cc0b52652c591", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -44,6 +44,7 @@ impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n \n     pub fn visit_lib(&mut self, cnum: ast::CrateNum) {\n         let did = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+        self.update(did, Some(AccessLevel::Public));\n         self.visit_mod(did);\n     }\n "}, {"sha": "5ab0d5a0877b7fee92d85e95b0c3806e3ab0a0bc", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -86,6 +86,8 @@ impl TcpStream {\n     /// `addr` is an address of the remote host. Anything which implements\n     /// `ToSocketAddrs` trait can be supplied for the address; see this trait\n     /// documentation for concrete examples.\n+    /// In case `ToSocketAddrs::to_socket_addrs()` returns more than one entry,\n+    /// then the first valid and reachable address is used.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn connect<A: ToSocketAddrs>(addr: A) -> io::Result<TcpStream> {\n         super::each_addr(addr, net_imp::TcpStream::connect).map(TcpStream)"}, {"sha": "9d0279deb1bcb2bfc33ae32e4a8158c8cdb9d73a", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -324,7 +324,7 @@ impl UdpSocket {\n         self.0.recv(buf)\n     }\n \n-    /// Moves this TCP stream into or out of nonblocking mode.\n+    /// Moves this UDP socket into or out of nonblocking mode.\n     ///\n     /// On Unix this corresponds to calling fcntl, and on Windows this\n     /// corresponds to calling ioctlsocket."}, {"sha": "c476dda26902907040368bf2a447c156ffc5de31", "filename": "src/test/auxiliary/issue-33113.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Fauxiliary%2Fissue-33113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Fauxiliary%2Fissue-33113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-33113.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"bar\"]\n+\n+pub trait Bar {}\n+pub struct Foo;\n+\n+impl<'a> Bar for &'a char {}\n+impl Bar for Foo {}"}, {"sha": "aae3eb84fb5dd6151e269a83be0d0355c6d6aefe", "filename": "src/test/auxiliary/rustdoc-hidden.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Fauxiliary%2Frustdoc-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Fauxiliary%2Frustdoc-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-hidden.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[doc(hidden)]\n+pub struct Foo;\n+\n+pub struct Bar;"}, {"sha": "317262f417512f2c37bc6b8ac4b843e76b54e1c1", "filename": "src/test/auxiliary/rustdoc-trait-object-impl.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Fauxiliary%2Frustdoc-trait-object-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Fauxiliary%2Frustdoc-trait-object-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-trait-object-impl.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+\n+pub trait Bar {}\n+\n+impl<'a> Bar + 'a {\n+    pub fn bar(&self) -> usize { 42 }\n+}\n+\n+impl<'a> fmt::Debug for Bar + 'a {\n+    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+"}, {"sha": "981eddc9dd96b20d502cf8523615be8bf7e3233f", "filename": "src/test/compile-fail/impl-duplicate-methods.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n struct Foo;\n+\n impl Foo {\n-    fn orange(&self){}\n-    fn orange(&self){}   //~ ERROR duplicate definitions\n+    fn orange(&self) {} //~ NOTE previous definition of `orange` here\n+    fn orange(&self) {} //~ ERROR duplicate definitions with name `orange`\n }\n \n fn main() {}"}, {"sha": "c59b5afd1c48311db934d2c5bd037ce937fb3645", "filename": "src/test/rustdoc/inline_cross/inline_hidden.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Finline_cross%2Finline_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Finline_cross%2Finline_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Finline_hidden.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-hidden.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate rustdoc_hidden;\n+\n+#[doc(no_inline)]\n+pub use rustdoc_hidden::Foo;\n+\n+// @has inline_hidden/fn.foo.html\n+// @!has - '//a/@title' 'Foo'\n+pub fn foo(_: Foo) {}"}, {"sha": "948061bdcbed58fef6bb39215c6081be9fc30121", "filename": "src/test/rustdoc/inline_cross/issue-32881.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-trait-object-impl.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate rustdoc_trait_object_impl;\n+\n+// @has issue_32881/trait.Bar.html\n+// @has - '//code' \"impl<'a> Bar\"\n+// @has - '//code' \"impl<'a> Debug for Bar\"\n+\n+pub use rustdoc_trait_object_impl::Bar;\n+"}, {"sha": "9ae8fefe730effd1f6f68d7c46a7b1f2d6148623", "filename": "src/test/rustdoc/inline_cross/issue-33113.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-33113.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate bar;\n+\n+// @has issue_33113/trait.Bar.html\n+// @has - '//code' \"for &'a char\"\n+// @has - '//code' \"for Foo\"\n+pub use bar::Bar;"}, {"sha": "cdb4094ffe051519d11404c7a3b2e2962f891ca1", "filename": "src/test/rustdoc/issue-32374.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32374.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(staged_api)]\n+#![doc(issue_tracker_base_url = \"http://issue_url/\")]\n+\n+#![unstable(feature=\"test\", issue = \"32374\")]\n+\n+// @has issue_32374/index.html '//*[@class=\"docblock short\"]' \\\n+//      '[Deprecated] [Unstable]'\n+\n+// @has issue_32374/struct.T.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecated since 1.0.0: text'\n+// @has - '<code>test</code>'\n+// @has - '<a href=\"http://issue_url/32374\">#32374</a>'\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[unstable(feature = \"test\", issue = \"32374\")]\n+pub struct T;"}, {"sha": "a368d6b68b9aa782c48310520336d4574a88c1b5", "filename": "src/test/rustdoc/issue-33178-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Fissue-33178-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Fissue-33178-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-33178-1.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:empty.rs\n+// aux-build:variant-struct.rs\n+// ignore-cross-compile\n+\n+// @has issue_33178_1/index.html\n+// @!has - //a/@title empty\n+pub extern crate empty;\n+\n+// @!has - //a/@title variant_struct\n+pub extern crate variant_struct as foo;"}, {"sha": "2ecb7d9ec44f343939e4155c9db0ec029fd22f6b", "filename": "src/test/rustdoc/issue-33178.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Fissue-33178.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41028def11c2d72e7ba32386cf8d15ec8b8849b8/src%2Ftest%2Frustdoc%2Fissue-33178.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-33178.rs?ref=41028def11c2d72e7ba32386cf8d15ec8b8849b8", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:empty.rs\n+// aux-build:variant-struct.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+// @has issue_33178/index.html\n+// @has - //a/@title empty\n+// @has - //a/@href ../empty/index.html\n+pub extern crate empty;\n+\n+// @has - //a/@title variant_struct\n+// @has - //a/@href ../variant_struct/index.html\n+pub extern crate variant_struct as foo;"}]}