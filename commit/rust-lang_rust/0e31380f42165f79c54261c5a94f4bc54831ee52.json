{"sha": "0e31380f42165f79c54261c5a94f4bc54831ee52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMzEzODBmNDIxNjVmNzljNTQyNjFjNWE5NGY0YmM1NDgzMWVlNTI=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-11T18:08:33Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-19T09:35:44Z"}, "message": "save_analysis: improve handling of enum struct variant\n\nFixes #61385", "tree": {"sha": "177fc62026f055597ecf640ec63ba5c90ed9fc9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/177fc62026f055597ecf640ec63ba5c90ed9fc9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e31380f42165f79c54261c5a94f4bc54831ee52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e31380f42165f79c54261c5a94f4bc54831ee52", "html_url": "https://github.com/rust-lang/rust/commit/0e31380f42165f79c54261c5a94f4bc54831ee52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e31380f42165f79c54261c5a94f4bc54831ee52/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39c7787ba246353178e099373b9240be0d9e603", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39c7787ba246353178e099373b9240be0d9e603", "html_url": "https://github.com/rust-lang/rust/commit/a39c7787ba246353178e099373b9240be0d9e603"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "f5c3e84c624267788ac42e888ff06da83a631a0c", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0e31380f42165f79c54261c5a94f4bc54831ee52/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e31380f42165f79c54261c5a94f4bc54831ee52/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=0e31380f42165f79c54261c5a94f4bc54831ee52", "patch": "@@ -518,24 +518,13 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     }\n \n     pub fn get_expr_data(&self, expr: &hir::Expr<'_>) -> Option<Data> {\n-        let hir_node = self.tcx.hir().expect_expr(expr.hir_id);\n-        let ty = self.tables.expr_ty_adjusted_opt(&hir_node);\n-        if ty.is_none() || matches!(ty.unwrap().kind, ty::Error(_)) {\n+        let ty = self.tables.expr_ty_adjusted_opt(expr)?;\n+        if matches!(ty.kind, ty::Error(_)) {\n             return None;\n         }\n         match expr.kind {\n             hir::ExprKind::Field(ref sub_ex, ident) => {\n-                let hir_node = match self.tcx.hir().find(sub_ex.hir_id) {\n-                    Some(Node::Expr(expr)) => expr,\n-                    _ => {\n-                        debug!(\n-                            \"Missing or weird node for sub-expression {} in {:?}\",\n-                            sub_ex.hir_id, expr\n-                        );\n-                        return None;\n-                    }\n-                };\n-                match self.tables.expr_ty_adjusted(&hir_node).kind {\n+                match self.tables.expr_ty_adjusted(&sub_ex).kind {\n                     ty::Adt(def, _) if !def.is_enum() => {\n                         let variant = &def.non_enum_variant();\n                         filter!(self.span_utils, ident.span);\n@@ -562,8 +551,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     hir::QPath::Resolved(_, path) => path.segments.last().unwrap(),\n                     hir::QPath::TypeRelative(_, segment) => segment,\n                 };\n-                match self.tables.expr_ty_adjusted(&hir_node).kind {\n-                    ty::Adt(def, _) if !def.is_enum() => {\n+                match ty.kind {\n+                    ty::Adt(def, _) => {\n                         let sub_span = segment.ident.span;\n                         filter!(self.span_utils, sub_span);\n                         let span = self.span_from_span(sub_span);\n@@ -574,9 +563,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                         }))\n                     }\n                     _ => {\n-                        // FIXME ty could legitimately be an enum, but then we will fail\n-                        // later if we try to look up the fields.\n-                        debug!(\"expected struct or union, found {:?}\", ty);\n+                        debug!(\"expected adt, found {:?}\", ty);\n                         None\n                     }\n                 }"}]}