{"sha": "62d01dd4dfc8feb52c006b84f9d1a1a7142cc060", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZDAxZGQ0ZGZjOGZlYjUyYzAwNmI4NGY5ZDFhMWE3MTQyY2MwNjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T08:00:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T08:00:15Z"}, "message": "hide resolver", "tree": {"sha": "82c6e8b1b51f5a0de63e038fd6d872cd39882015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c6e8b1b51f5a0de63e038fd6d872cd39882015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060", "html_url": "https://github.com/rust-lang/rust/commit/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4a94e74bcd6c8f9275a57a775e64314af1878da", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a94e74bcd6c8f9275a57a775e64314af1878da", "html_url": "https://github.com/rust-lang/rust/commit/f4a94e74bcd6c8f9275a57a775e64314af1878da"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "b5e2f86becf4081f3c1164383f0d73c02dd33ec6", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=62d01dd4dfc8feb52c006b84f9d1a1a7142cc060", "patch": "@@ -7,7 +7,7 @@\n /// purely for \"IDE needs\".\n use std::sync::Arc;\n \n-use rustc_hash::FxHashSet;\n+use rustc_hash::{FxHashSet, FxHashMap};\n use ra_db::{FileId, FilePosition};\n use ra_syntax::{\n     SyntaxNode, AstPtr, TextUnit, SyntaxNodePtr,\n@@ -17,7 +17,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    HirDatabase, Function, Struct, Enum, Const, Static, Either, DefWithBody,\n+    HirDatabase, Function, Struct, Enum, Const, Static, Either, DefWithBody, PerNs, Name,\n     AsName, Module, HirFileId, Crate, Trait, Resolver,\n     expr::{BodySourceMap, scope::{ReferenceDescriptor, ScopeEntryWithSyntax, ScopeId, ExprScopes}},\n     ids::LocationCtx,\n@@ -222,10 +222,6 @@ impl SourceAnalyzer {\n         }\n     }\n \n-    pub fn resolver(&self) -> &Resolver {\n-        &self.resolver\n-    }\n-\n     pub fn type_of(&self, _db: &impl HirDatabase, expr: &ast::Expr) -> Option<crate::Ty> {\n         let expr_id = self.body_source_map.as_ref()?.node_expr(expr)?;\n         Some(self.infer.as_ref()?[expr_id].clone())\n@@ -246,6 +242,18 @@ impl SourceAnalyzer {\n         self.infer.as_ref()?.field_resolution(expr_id)\n     }\n \n+    pub fn resolve_hir_path(\n+        &self,\n+        db: &impl HirDatabase,\n+        path: &crate::Path,\n+    ) -> PerNs<crate::Resolution> {\n+        self.resolver.resolve_path(db, path)\n+    }\n+\n+    pub fn all_names(&self, db: &impl HirDatabase) -> FxHashMap<Name, PerNs<crate::Resolution>> {\n+        self.resolver.all_names(db)\n+    }\n+\n     pub fn resolve_path(&self, db: &impl HirDatabase, path: &ast::Path) -> Option<PathResolution> {\n         if let Some(path_expr) = path.syntax().parent().and_then(ast::PathExpr::cast) {\n             let expr_id = self.body_source_map.as_ref()?.node_expr(path_expr.into())?;"}, {"sha": "bc03a70957a3a21bab0a75c32dcfcb9f248f49e7", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=62d01dd4dfc8feb52c006b84f9d1a1a7142cc060", "patch": "@@ -9,7 +9,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         Some(path) => path.clone(),\n         _ => return,\n     };\n-    let def = match ctx.analyzer.resolver().resolve_path(ctx.db, &path).take_types() {\n+    let def = match ctx.analyzer.resolve_hir_path(ctx.db, &path).take_types() {\n         Some(Resolution::Def(def)) => def,\n         _ => return,\n     };"}, {"sha": "0ef248687964cdbb25950f77e6c676d82772895a", "filename": "crates/ra_ide_api/src/completion/complete_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=62d01dd4dfc8feb52c006b84f9d1a1a7142cc060", "patch": "@@ -7,7 +7,7 @@ pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n     // FIXME: ideally, we should look at the type we are matching against and\n     // suggest variants + auto-imports\n-    let names = ctx.analyzer.resolver().all_names(ctx.db);\n+    let names = ctx.analyzer.all_names(ctx.db);\n     for (name, res) in names.into_iter() {\n         let r = res.as_ref();\n         let def = match r.take_types().or(r.take_values()) {"}, {"sha": "fd256fc3b342ba7f754cec66e005d6bebb51bf34", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=62d01dd4dfc8feb52c006b84f9d1a1a7142cc060", "patch": "@@ -4,7 +4,7 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path {\n         return;\n     }\n-    let names = ctx.analyzer.resolver().all_names(ctx.db);\n+    let names = ctx.analyzer.all_names(ctx.db);\n \n     names.into_iter().for_each(|(name, res)| acc.add_resolution(ctx, name.to_string(), &res));\n }"}]}