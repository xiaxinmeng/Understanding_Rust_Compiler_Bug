{"sha": "abe8959339c7fafbc4cba85bda1f64a59f88a88e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZTg5NTkzMzljN2ZhZmJjNGNiYTg1YmRhMWY2NGE1OWY4OGE4OGU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-17T14:22:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-17T14:22:33Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: RalfJung <post@ralfj.de>", "tree": {"sha": "7172876771e4c48bd23d9f8ec05634254675310f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7172876771e4c48bd23d9f8ec05634254675310f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe8959339c7fafbc4cba85bda1f64a59f88a88e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe8959339c7fafbc4cba85bda1f64a59f88a88e", "html_url": "https://github.com/rust-lang/rust/commit/abe8959339c7fafbc4cba85bda1f64a59f88a88e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe8959339c7fafbc4cba85bda1f64a59f88a88e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1ed855a441dc6f7234104b4c3a6751b23ae588d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ed855a441dc6f7234104b4c3a6751b23ae588d", "html_url": "https://github.com/rust-lang/rust/commit/e1ed855a441dc6f7234104b4c3a6751b23ae588d"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "dc2a78d2960cb698592dc9626c27e580da0fe715", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abe8959339c7fafbc4cba85bda1f64a59f88a88e/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe8959339c7fafbc4cba85bda1f64a59f88a88e/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=abe8959339c7fafbc4cba85bda1f64a59f88a88e", "patch": "@@ -296,7 +296,7 @@ impl<'tcx> Stack {\n         // keep the items immediately above `granting_idx` that are compatible, and then pop the rest.\n         // However, that kills off entire \"branches\" of pointer derivation too easily:\n         // in `let raw = &mut *x as *mut _; let _val = *x;`, the second statement would pop the `Unique`\n-        // from the reborrow of the first statement, and subequently also pop the `SharedReadWrite` for `raw`.\n+        // from the reborrow of the first statement, and subsequently also pop the `SharedReadWrite` for `raw`.\n         // This pattern occurs a lot in the standard library: create a raw pointer, then also create a shared\n         // reference and use that.\n         {\n@@ -343,7 +343,7 @@ impl<'tcx> Stack {\n \n         // We must make sure there are no protected items remaining on the stack.\n         // Also clear the stack, no more accesses are possible.\n-        while let Some(item) = self.borrows.pop() {\n+        for item in self.borrows.drain(..) {\n             if let Some(call) = item.protector {\n                 if global.is_active(call) {\n                     return err!(MachineError(format!(\n@@ -394,7 +394,7 @@ impl<'tcx> Stack {\n         // We use that to determine where to put the new item.\n         let (derived_from_idx, _) = self.find_granting(access, derived_from)\n             .ok_or_else(|| InterpError::MachineError(format!(\n-                    \"no item to reborrow for {:?} from tag {} found in borrow stack\", new.perm, derived_from,\n+                \"no item to reborrow for {:?} from tag {} found in borrow stack\", new.perm, derived_from,\n             )))?;\n \n         // Compute where to put the new item.\n@@ -410,7 +410,7 @@ impl<'tcx> Stack {\n             // and we'd allow write access without invalidating frozen shared references!\n             // This ensures F2b for `SharedReadWrite` by adding the new item below any\n             // potentially existing `SharedReadOnly`.\n-            derived_from_idx+1\n+            derived_from_idx + 1\n         } else {\n             // A \"safe\" reborrow for a pointer that actually expects some aliasing guarantees.\n             // Here, creating a reference actually counts as an access, and pops incompatible"}]}