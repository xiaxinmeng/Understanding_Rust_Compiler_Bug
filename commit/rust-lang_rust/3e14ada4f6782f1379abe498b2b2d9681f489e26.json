{"sha": "3e14ada4f6782f1379abe498b2b2d9681f489e26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMTRhZGE0ZjY3ODJmMTM3OWFiZTQ5OGIyYjJkOTY4MWY0ODllMjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-13T22:07:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-14T19:26:00Z"}, "message": "rustc: Implement let assignability. r=nmatsakis", "tree": {"sha": "e6975e425555e16dd60349c76511608b89ad86fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6975e425555e16dd60349c76511608b89ad86fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e14ada4f6782f1379abe498b2b2d9681f489e26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e14ada4f6782f1379abe498b2b2d9681f489e26", "html_url": "https://github.com/rust-lang/rust/commit/3e14ada4f6782f1379abe498b2b2d9681f489e26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e14ada4f6782f1379abe498b2b2d9681f489e26/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bad62dcb04d78c53911dc464663c04b47c5215ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/bad62dcb04d78c53911dc464663c04b47c5215ac", "html_url": "https://github.com/rust-lang/rust/commit/bad62dcb04d78c53911dc464663c04b47c5215ac"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "3d56ad3595d06c3f4f7822e0c77a6463c24d732d", "filename": "src/librustc/middle/typeck/check.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3e14ada4f6782f1379abe498b2b2d9681f489e26/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e14ada4f6782f1379abe498b2b2d9681f489e26/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=3e14ada4f6782f1379abe498b2b2d9681f489e26", "patch": "@@ -868,6 +868,16 @@ fn check_expr_with(fcx: @fn_ctxt, expr: @ast::expr, expected: ty::t) -> bool {\n     check_expr(fcx, expr, Some(expected))\n }\n \n+fn check_expr_with_assignability(fcx: @fn_ctxt,\n+                                 expr: @ast::expr,\n+                                 expected: ty::t)\n+                              -> bool {\n+    do check_expr_with_unifier(fcx, expr, Some(expected)) {\n+        demand::assign(fcx, expr.span, expected, expr)\n+    }\n+}\n+\n+\n fn check_expr(fcx: @fn_ctxt, expr: @ast::expr,\n               expected: Option<ty::t>) -> bool {\n     return do check_expr_with_unifier(fcx, expr, expected) {\n@@ -1072,11 +1082,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                         DontDerefArgs => {}\n                     }\n \n-                    bot |= check_expr_with_unifier(\n-                        fcx, *arg, Some(formal_ty),\n-                        || demand::assign(fcx, arg.span,\n-                                           formal_ty, *arg)\n-                    );\n+                    bot |= check_expr_with_assignability(fcx, *arg, formal_ty);\n                     fcx.write_ty(arg.id, fcx.expr_ty(*arg));\n \n                 }\n@@ -1087,10 +1093,14 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n     }\n \n     // A generic function for checking assignment expressions\n-    fn check_assignment(fcx: @fn_ctxt, _sp: span, lhs: @ast::expr,\n-                        rhs: @ast::expr, id: ast::node_id) -> bool {\n+    fn check_assignment(fcx: @fn_ctxt,\n+                        lhs: @ast::expr,\n+                        rhs: @ast::expr,\n+                        id: ast::node_id)\n+                     -> bool {\n         let mut bot = check_expr(fcx, lhs, None);\n-        bot |= check_expr_with(fcx, rhs, fcx.expr_ty(lhs));\n+        let lhs_type = fcx.expr_ty(lhs);\n+        bot |= check_expr_with_assignability(fcx, rhs, lhs_type);\n         fcx.write_ty(id, ty::mk_nil(fcx.ccx.tcx));\n         return bot;\n     }\n@@ -1908,10 +1918,10 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         };\n       }\n       ast::expr_assign(lhs, rhs) => {\n-        bot = check_assignment(fcx, expr.span, lhs, rhs, id);\n+        bot = check_assignment(fcx, lhs, rhs, id);\n       }\n       ast::expr_swap(lhs, rhs) => {\n-        bot = check_assignment(fcx, expr.span, lhs, rhs, id);\n+        bot = check_assignment(fcx, lhs, rhs, id);\n       }\n       ast::expr_if(cond, thn, elsopt) => {\n         bot = check_expr_with(fcx, cond, ty::mk_bool(tcx)) |\n@@ -2246,7 +2256,7 @@ fn require_integral(fcx: @fn_ctxt, sp: span, t: ty::t) {\n fn check_decl_initializer(fcx: @fn_ctxt, nid: ast::node_id,\n                           init: @ast::expr) -> bool {\n     let lty = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, init.span, nid));\n-    return check_expr_with(fcx, init, lty);\n+    return check_expr_with_assignability(fcx, init, lty);\n }\n \n fn check_decl_local(fcx: @fn_ctxt, local: @ast::local) -> bool {"}, {"sha": "750ebbfac0260339adc2d3d1cc5c8a1bc297731f", "filename": "src/test/run-pass/let-assignability.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e14ada4f6782f1379abe498b2b2d9681f489e26/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e14ada4f6782f1379abe498b2b2d9681f489e26/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-assignability.rs?ref=3e14ada4f6782f1379abe498b2b2d9681f489e26", "patch": "@@ -0,0 +1,18 @@\n+fn f() {\n+    let a = ~\"hello\";\n+    let b: &str = a;\n+    io::println(b);\n+}\n+\n+fn g() {\n+    let c = ~\"world\";\n+    let d: &str;\n+    d = c;\n+    io::println(d);\n+}\n+\n+fn main() {\n+    f();\n+    g();\n+}\n+"}]}