{"sha": "438d1da6c6becf28c07570e301d80989ffc0febe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOGQxZGE2YzZiZWNmMjhjMDc1NzBlMzAxZDgwOTg5ZmZjMGZlYmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-16T11:45:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-16T11:45:54Z"}, "message": "minor: simplify", "tree": {"sha": "f7916b2b60bee00e7e36f2bdaee0bea1a2a86a7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7916b2b60bee00e7e36f2bdaee0bea1a2a86a7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/438d1da6c6becf28c07570e301d80989ffc0febe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/438d1da6c6becf28c07570e301d80989ffc0febe", "html_url": "https://github.com/rust-lang/rust/commit/438d1da6c6becf28c07570e301d80989ffc0febe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/438d1da6c6becf28c07570e301d80989ffc0febe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d29c52354c9ee5715426bd66c45464f06dd1afd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d29c52354c9ee5715426bd66c45464f06dd1afd5", "html_url": "https://github.com/rust-lang/rust/commit/d29c52354c9ee5715426bd66c45464f06dd1afd5"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "795980660d18a64b1661154ecb4911d5e4eddcf0", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438d1da6c6becf28c07570e301d80989ffc0febe/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438d1da6c6becf28c07570e301d80989ffc0febe/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=438d1da6c6becf28c07570e301d80989ffc0febe", "patch": "@@ -272,7 +272,7 @@ fn macro_arg(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<(tt::Subtree,\n fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n     let loc = db.lookup_intern_macro(id);\n     let arg = loc.kind.arg(db)?;\n-    let arg = process_macro_input(db, arg, id);\n+    let arg = process_macro_input(&loc.kind, arg);\n     if matches!(loc.kind, MacroCallKind::FnLike { .. }) {\n         let first = arg.first_child_or_token().map_or(T![.], |it| it.kind());\n         let last = arg.last_child_or_token().map_or(T![.], |it| it.kind());"}, {"sha": "55935ed3dd70eab490548b1521b085088fc7ca1f", "filename": "crates/hir_expand/src/input.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/438d1da6c6becf28c07570e301d80989ffc0febe/crates%2Fhir_expand%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438d1da6c6becf28c07570e301d80989ffc0febe/crates%2Fhir_expand%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Finput.rs?ref=438d1da6c6becf28c07570e301d80989ffc0febe", "patch": "@@ -6,35 +6,28 @@ use syntax::{\n };\n \n use crate::{\n-    db::AstDatabase,\n     name::{name, AsName},\n-    MacroCallId, MacroCallKind, MacroCallLoc,\n+    MacroCallKind,\n };\n \n-pub(crate) fn process_macro_input(\n-    db: &dyn AstDatabase,\n-    node: SyntaxNode,\n-    id: MacroCallId,\n-) -> SyntaxNode {\n-    let loc: MacroCallLoc = db.lookup_intern_macro(id);\n-\n-    match loc.kind {\n+pub(crate) fn process_macro_input(macro_call_kind: &MacroCallKind, node: SyntaxNode) -> SyntaxNode {\n+    match macro_call_kind {\n         MacroCallKind::FnLike { .. } => node,\n         MacroCallKind::Derive { derive_attr_index, .. } => {\n             let item = match ast::Item::cast(node.clone()) {\n                 Some(item) => item,\n                 None => return node,\n             };\n \n-            remove_derives_up_to(item, derive_attr_index as usize).syntax().clone()\n+            remove_derives_up_to(item, *derive_attr_index as usize).syntax().clone()\n         }\n         MacroCallKind::Attr { invoc_attr_index, .. } => {\n             let item = match ast::Item::cast(node.clone()) {\n                 Some(item) => item,\n                 None => return node,\n             };\n \n-            remove_attr_invoc(item, invoc_attr_index as usize).syntax().clone()\n+            remove_attr_invoc(item, *invoc_attr_index as usize).syntax().clone()\n         }\n     }\n }"}]}