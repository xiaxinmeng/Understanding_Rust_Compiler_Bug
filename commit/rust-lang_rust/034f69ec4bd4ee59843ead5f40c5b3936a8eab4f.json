{"sha": "034f69ec4bd4ee59843ead5f40c5b3936a8eab4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNGY2OWVjNGJkNGVlNTk4NDNlYWQ1ZjQwYzViMzkzNmE4ZWFiNGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-22T14:05:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-25T11:08:36Z"}, "message": "Remove redundant local variable checks.", "tree": {"sha": "c0a15f9e096ebf0e6a7fce0c3f499626ceda6208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0a15f9e096ebf0e6a7fce0c3f499626ceda6208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/034f69ec4bd4ee59843ead5f40c5b3936a8eab4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/034f69ec4bd4ee59843ead5f40c5b3936a8eab4f", "html_url": "https://github.com/rust-lang/rust/commit/034f69ec4bd4ee59843ead5f40c5b3936a8eab4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/034f69ec4bd4ee59843ead5f40c5b3936a8eab4f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62e5dc929c1e8535d4185073507e681f26ab7e6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/62e5dc929c1e8535d4185073507e681f26ab7e6a", "html_url": "https://github.com/rust-lang/rust/commit/62e5dc929c1e8535d4185073507e681f26ab7e6a"}], "stats": {"total": 41, "additions": 0, "deletions": 41}, "files": [{"sha": "680278120702415b6f9fe012eceb30d82ba21c63", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/034f69ec4bd4ee59843ead5f40c5b3936a8eab4f/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69ec4bd4ee59843ead5f40c5b3936a8eab4f/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=034f69ec4bd4ee59843ead5f40c5b3936a8eab4f", "patch": "@@ -150,7 +150,6 @@ register_diagnostics!(\n     E0144,\n     E0145,\n     E0146,\n-    E0151,\n     E0152,\n     E0153,\n     E0154,"}, {"sha": "08e640f597a4cf307d034791ed6af14079facbf6", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/034f69ec4bd4ee59843ead5f40c5b3936a8eab4f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/034f69ec4bd4ee59843ead5f40c5b3936a8eab4f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=034f69ec4bd4ee59843ead5f40c5b3936a8eab4f", "patch": "@@ -15,7 +15,6 @@ use util::ppaux::UserString;\n \n use syntax::ast::*;\n use syntax::codemap::Span;\n-use syntax::print::pprust::{ident_to_string};\n use syntax::visit::Visitor;\n use syntax::visit;\n \n@@ -39,10 +38,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     fn visit_ty(&mut self, t: &Ty) {\n         check_ty(self, t);\n     }\n-\n-    fn visit_pat(&mut self, p: &Pat) {\n-        check_pat(self, p);\n-    }\n }\n \n pub fn check_crate(tcx: &ty::ctxt) {\n@@ -239,38 +234,3 @@ pub fn check_freevar_bounds(cx: &Context, fn_span: Span, sp: Span, ty: ty::t,\n     });\n }\n \n-// Ensure that `ty` has a statically known size (i.e., it has the `Sized` bound).\n-fn check_sized(tcx: &ty::ctxt, ty: ty::t, name: String, sp: Span) {\n-    if !ty::type_is_sized(tcx, ty) {\n-        span_err!(tcx.sess, sp, E0151,\n-            \"variable `{}` has dynamically sized type `{}`\",\n-            name, ty_to_string(tcx, ty));\n-    }\n-}\n-\n-// Check that any variables in a pattern have types with statically known size.\n-fn check_pat(cx: &mut Context, pat: &Pat) {\n-    let var_name = match pat.node {\n-        PatWild(PatWildSingle) => Some(\"_\".to_string()),\n-        PatIdent(_, ref path1, _) => Some(ident_to_string(&path1.node).to_string()),\n-        _ => None\n-    };\n-\n-    match var_name {\n-        Some(name) => {\n-            let types = cx.tcx.node_types.borrow();\n-            let ty = types.find(&(pat.id as uint));\n-            match ty {\n-                Some(ty) => {\n-                    debug!(\"kind: checking sized-ness of variable {}: {}\",\n-                           name, ty_to_string(cx.tcx, *ty));\n-                    check_sized(cx.tcx, *ty, name, pat.span);\n-                }\n-                None => {} // extern fn args\n-            }\n-        }\n-        None => {}\n-    }\n-\n-    visit::walk_pat(cx, pat);\n-}"}]}