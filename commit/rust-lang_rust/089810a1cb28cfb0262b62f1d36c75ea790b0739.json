{"sha": "089810a1cb28cfb0262b62f1d36c75ea790b0739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OTgxMGExY2IyOGNmYjAyNjJiNjJmMWQzNmM3NWVhNzkwYjA3Mzk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-10T04:02:58Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-10T19:04:10Z"}, "message": "Do not suggest similarly named enclosing item", "tree": {"sha": "c41c13a294beb77c7e4f2354cdb2b6770fc6f2d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c41c13a294beb77c7e4f2354cdb2b6770fc6f2d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/089810a1cb28cfb0262b62f1d36c75ea790b0739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/089810a1cb28cfb0262b62f1d36c75ea790b0739", "html_url": "https://github.com/rust-lang/rust/commit/089810a1cb28cfb0262b62f1d36c75ea790b0739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/089810a1cb28cfb0262b62f1d36c75ea790b0739/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eef284be59bbbe50e4d5369542a80e1ccd2ba7ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/eef284be59bbbe50e4d5369542a80e1ccd2ba7ab", "html_url": "https://github.com/rust-lang/rust/commit/eef284be59bbbe50e4d5369542a80e1ccd2ba7ab"}], "stats": {"total": 95, "additions": 41, "deletions": 54}, "files": [{"sha": "de92204a7c2f07e33b875a264e12e33ce351f321", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=089810a1cb28cfb0262b62f1d36c75ea790b0739", "patch": "@@ -942,17 +942,6 @@ impl<'a> Resolver<'a> {\n             Some(suggestion) if suggestion.candidate == kw::Underscore => return false,\n             Some(suggestion) => suggestion,\n         };\n-        let msg = format!(\n-            \"{} {} with a similar name exists\",\n-            suggestion.res.article(),\n-            suggestion.res.descr()\n-        );\n-        err.span_suggestion(\n-            span,\n-            &msg,\n-            suggestion.candidate.to_string(),\n-            Applicability::MaybeIncorrect,\n-        );\n         let def_span = suggestion.res.opt_def_id().and_then(|def_id| match def_id.krate {\n             LOCAL_CRATE => self.opt_span(def_id),\n             _ => Some(\n@@ -961,16 +950,48 @@ impl<'a> Resolver<'a> {\n                     .guess_head_span(self.cstore().get_span_untracked(def_id, self.session)),\n             ),\n         });\n-        if let Some(span) = def_span {\n+        if let Some(def_span) = def_span {\n+            if span.overlaps(def_span) {\n+                // Don't suggest typo suggestion for itself like in the followoing:\n+                // error[E0423]: expected function, tuple struct or tuple variant, found struct `X`\n+                //   --> $DIR/issue-64792-bad-unicode-ctor.rs:3:14\n+                //    |\n+                // LL | struct X {}\n+                //    | ----------- `X` defined here\n+                // LL |\n+                // LL | const Y: X = X(\"\u00f6\");\n+                //    | -------------^^^^^^- similarly named constant `Y` defined here\n+                //    |\n+                // help: use struct literal syntax instead\n+                //    |\n+                // LL | const Y: X = X {};\n+                //    |              ^^^^\n+                // help: a constant with a similar name exists\n+                //    |\n+                // LL | const Y: X = Y(\"\u00f6\");\n+                //    |              ^\n+                return false;\n+            }\n             err.span_label(\n-                self.session.source_map().guess_head_span(span),\n+                self.session.source_map().guess_head_span(def_span),\n                 &format!(\n                     \"similarly named {} `{}` defined here\",\n                     suggestion.res.descr(),\n                     suggestion.candidate.as_str(),\n                 ),\n             );\n         }\n+        let msg = format!(\n+            \"{} {} with a similar name exists\",\n+            suggestion.res.article(),\n+            suggestion.res.descr()\n+        );\n+        err.span_suggestion(\n+            span,\n+            &msg,\n+            suggestion.candidate.to_string(),\n+            Applicability::MaybeIncorrect,\n+        );\n         true\n     }\n "}, {"sha": "47617c7849f4a3d4e8a774208ea4fe910924bfbf", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr?ref=089810a1cb28cfb0262b62f1d36c75ea790b0739", "patch": "@@ -2,10 +2,7 @@ error[E0573]: expected type, found const parameter `C`\n   --> $DIR/struct-with-invalid-const-param.rs:4:23\n    |\n LL | struct S<const C: u8>(C);\n-   | ----------------------^--\n-   | |                     |\n-   | |                     help: a struct with a similar name exists: `S`\n-   | similarly named struct `S` defined here\n+   |                       ^ not a type\n \n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/struct-with-invalid-const-param.rs:1:12"}, {"sha": "56281938559d0fc7dbe0411da859b7a07ffc5fe9", "filename": "src/test/ui/issues/issue-31845.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr?ref=089810a1cb28cfb0262b62f1d36c75ea790b0739", "patch": "@@ -1,10 +1,8 @@\n error[E0425]: cannot find function `g` in this scope\n   --> $DIR/issue-31845.rs:7:12\n    |\n-LL |         fn h() {\n-   |         ------ similarly named function `h` defined here\n LL |            g();\n-   |            ^ help: a function with a similar name exists: `h`\n+   |            ^ not found in this scope\n \n error: aborting due to previous error\n "}, {"sha": "c3dda704b0e9363e168db1c0acd48e8dd9b9760b", "filename": "src/test/ui/issues/issue-64792-bad-unicode-ctor.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr?ref=089810a1cb28cfb0262b62f1d36c75ea790b0739", "patch": "@@ -5,16 +5,7 @@ LL | struct X {}\n    | ----------- `X` defined here\n LL | \n LL | const Y: X = X(\"\u00f6\");\n-   | -------------^^^^^^- similarly named constant `Y` defined here\n-   |\n-help: use struct literal syntax instead\n-   |\n-LL | const Y: X = X {};\n-   |              ^^^^\n-help: a constant with a similar name exists\n-   |\n-LL | const Y: X = Y(\"\u00f6\");\n-   |              ^\n+   |              ^^^^^^ help: use struct literal syntax instead: `X {}`\n \n error: aborting due to previous error\n "}, {"sha": "c8057d85ed1d07a062f99ea2562c425097cdb65d", "filename": "src/test/ui/privacy/legacy-ctor-visibility.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr?ref=089810a1cb28cfb0262b62f1d36c75ea790b0739", "patch": "@@ -1,10 +1,8 @@\n error[E0423]: expected function, tuple struct or tuple variant, found struct `S`\n   --> $DIR/legacy-ctor-visibility.rs:9:13\n    |\n-LL |         fn f() {\n-   |         ------ similarly named function `f` defined here\n LL |             S(10);\n-   |             ^ help: a function with a similar name exists: `f`\n+   |             ^\n \n error: aborting due to previous error\n "}, {"sha": "97b2f22e161ec28d287333680dbeb5de8712466a", "filename": "src/test/ui/proc-macro/attributes-on-modules-fail.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr?ref=089810a1cb28cfb0262b62f1d36c75ea790b0739", "patch": "@@ -44,12 +44,8 @@ error[E0412]: cannot find type `Y` in this scope\n   --> $DIR/attributes-on-modules-fail.rs:10:14\n    |\n LL |     type A = Y;\n-   |     ---------^- similarly named type alias `A` defined here\n+   |              ^ not found in this scope\n    |\n-help: a type alias with a similar name exists\n-   |\n-LL |     type A = A;\n-   |              ^\n help: consider importing this struct\n    |\n LL |     use Y;\n@@ -59,12 +55,8 @@ error[E0412]: cannot find type `X` in this scope\n   --> $DIR/attributes-on-modules-fail.rs:14:10\n    |\n LL | type A = X;\n-   | ---------^- similarly named type alias `A` defined here\n-   |\n-help: a type alias with a similar name exists\n+   |          ^ not found in this scope\n    |\n-LL | type A = A;\n-   |          ^\n help: consider importing this struct\n    |\n LL | use m::X;"}, {"sha": "f1ed7aaa86779ee9617eb3819d2ee104c2c40256", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=089810a1cb28cfb0262b62f1d36c75ea790b0739", "patch": "@@ -16,9 +16,6 @@ LL |         m::Z::Unit;\n error[E0423]: expected value, found enum `Z`\n   --> $DIR/privacy-enum-ctor.rs:25:9\n    |\n-LL |     fn f() {\n-   |     ------ similarly named function `f` defined here\n-...\n LL |         Z;\n    |         ^\n    |\n@@ -30,10 +27,6 @@ LL |         m::Z::Struct;\n    |         ^^^^^^^^^^^^\n LL |         m::Z::Unit;\n    |         ^^^^^^^^^^\n-help: a function with a similar name exists\n-   |\n-LL |         f;\n-   |         ^\n \n error[E0423]: expected value, found struct variant `Z::Struct`\n   --> $DIR/privacy-enum-ctor.rs:29:20"}, {"sha": "652c472c0bcfe54c21756cd8fc522cfb1aa25bcb", "filename": "src/test/ui/ui-testing-optout.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fui-testing-optout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089810a1cb28cfb0262b62f1d36c75ea790b0739/src%2Ftest%2Fui%2Fui-testing-optout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fui-testing-optout.stderr?ref=089810a1cb28cfb0262b62f1d36c75ea790b0739", "patch": "@@ -2,10 +2,7 @@ error[E0412]: cannot find type `B` in this scope\n  --> $DIR/ui-testing-optout.rs:4:10\n   |\n 4 | type A = B;\n-  | ---------^-\n-  | |        |\n-  | |        help: a type alias with a similar name exists: `A`\n-  | similarly named type alias `A` defined here\n+  |          ^ not found in this scope\n \n error[E0412]: cannot find type `D` in this scope\n  --> $DIR/ui-testing-optout.rs:7:10"}]}