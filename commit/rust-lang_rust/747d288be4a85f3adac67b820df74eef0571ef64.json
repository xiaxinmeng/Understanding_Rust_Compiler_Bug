{"sha": "747d288be4a85f3adac67b820df74eef0571ef64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0N2QyODhiZTRhODVmM2FkYWM2N2I4MjBkZjc0ZWVmMDU3MWVmNjQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-24T21:22:54Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-28T19:19:25Z"}, "message": "Implement internal lints\n\n- USAGE_OF_QUALIFIED_TY\n\n- TY_PASS_BY_REFERENCE", "tree": {"sha": "46eb735940eb52eaf8b2ebbfdb2798ff31419824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46eb735940eb52eaf8b2ebbfdb2798ff31419824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/747d288be4a85f3adac67b820df74eef0571ef64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlzF/L0ACgkQaTCGhp1Q\nZjeTKQ//QxVLvl4dqAcUb2JFQKwF5pR+x1q1G/CJ7I8aUliQ3CE8TVGlurr+hOZm\nYxltIGDend6rSQAEaO/85lg+qPMFavfr9+qH42kxtL2x/OmDJZ1oENDcnXp0k39Y\nSUjTpSgdEksEvfGjxdx8BbOyXL83MRtN1YizljTA+PPRyn6MetR4zzaEfe82uTw7\nttEXxvEW/jmWCvCkBvF3T4YJ17pNp7dOGih3JkokLRqAoPslYtPw2UvqkA0hWg53\nt7r9gDq8QA0gHBdIv1QGere4iVDyYpzX6gZYqXtu76Sm/Hyw/gUHHtd9ZapViV2P\nW3A7YZ9lDpNsGNs/uIySaJ1FfHGdLqLcOfKHuj7jmK3DNaFcabJoylZwSodqkUaL\nrVAcyI5LdkxGtw/rE+Hk30Sey4ftUw4LvMGDWnFDb3rBXIYFbX/zzSxESQMnbeza\npZwOvE0u9QPjs5yIeMeciOegU2BTt7AV6lKbwNzjg5xeynenKDu7fzAcLHblknRH\n8l1oEWM+hBGLsd7Fu1giMBZ4zMJegboK+lr6UD1Qo62Bh4gWiT0TAwwXZDEbvy4+\nNXp6TONBJWHC4+Ul8xgL97Z+RGT7cfS16R3CzBr3EfatLvIi3rOoM5pD3/T3fLOx\nXHgc+iyLZ4RvSHEX0VJxKGygves+2s10RwWt1uKfF+SEOq5Hap0=\n=T8LP\n-----END PGP SIGNATURE-----", "payload": "tree 46eb735940eb52eaf8b2ebbfdb2798ff31419824\nparent bdfdbcd44d457b2ac6d0cea4fb71739d3166cb98\nauthor flip1995 <hello@philkrones.com> 1556140974 +0200\ncommitter flip1995 <hello@philkrones.com> 1556479165 +0200\n\nImplement internal lints\n\n- USAGE_OF_QUALIFIED_TY\n\n- TY_PASS_BY_REFERENCE\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/747d288be4a85f3adac67b820df74eef0571ef64", "html_url": "https://github.com/rust-lang/rust/commit/747d288be4a85f3adac67b820df74eef0571ef64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/747d288be4a85f3adac67b820df74eef0571ef64/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdfdbcd44d457b2ac6d0cea4fb71739d3166cb98", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdfdbcd44d457b2ac6d0cea4fb71739d3166cb98", "html_url": "https://github.com/rust-lang/rust/commit/bdfdbcd44d457b2ac6d0cea4fb71739d3166cb98"}], "stats": {"total": 138, "additions": 126, "deletions": 12}, "files": [{"sha": "126a7cd3349153db422e7449df28c464b6f28c9b", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 122, "deletions": 10, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/747d288be4a85f3adac67b820df74eef0571ef64/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747d288be4a85f3adac67b820df74eef0571ef64/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=747d288be4a85f3adac67b820df74eef0571ef64", "patch": "@@ -1,7 +1,7 @@\n //! Some lints that are only useful in the compiler or crates that use compiler internals, such as\n //! Clippy.\n \n-use crate::hir::{HirId, Path, PathSegment, QPath, Ty, TyKind};\n+use crate::hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n use crate::lint::{\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n };\n@@ -57,12 +57,28 @@ impl EarlyLintPass for DefaultHashTypes {\n declare_lint! {\n     pub USAGE_OF_TY_TYKIND,\n     Allow,\n-    \"Usage of `ty::TyKind` outside of the `ty::sty` module\"\n+    \"usage of `ty::TyKind` outside of the `ty::sty` module\"\n }\n \n-declare_lint_pass!(TyKindUsage => [USAGE_OF_TY_TYKIND]);\n+declare_lint! {\n+    pub TY_PASS_BY_REFERENCE,\n+    Allow,\n+    \"passing `Ty` or `TyCtxt` by reference\"\n+}\n+\n+declare_lint! {\n+    pub USAGE_OF_QUALIFIED_TY,\n+    Allow,\n+    \"using `ty::{Ty,TyCtxt}` instead of importing it\"\n+}\n+\n+declare_lint_pass!(TyTyKind => [\n+    USAGE_OF_TY_TYKIND,\n+    TY_PASS_BY_REFERENCE,\n+    USAGE_OF_QUALIFIED_TY,\n+]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyTyKind {\n     fn check_path(&mut self, cx: &LateContext<'_, '_>, path: &'tcx Path, _: HirId) {\n         let segments = path.segments.iter().rev().skip(1).rev();\n \n@@ -82,16 +98,72 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'_, '_>, ty: &'tcx Ty) {\n-        if let TyKind::Path(qpath) = &ty.node {\n-            if let QPath::Resolved(_, path) = qpath {\n-                if let Some(last) = path.segments.iter().last() {\n-                    if lint_ty_kind_usage(cx, last) {\n-                        cx.struct_span_lint(USAGE_OF_TY_TYKIND, path.span, \"usage of `ty::TyKind`\")\n-                            .help(\"try using `ty::Ty` instead\")\n+        match &ty.node {\n+            TyKind::Path(qpath) => {\n+                if let QPath::Resolved(_, path) = qpath {\n+                    if let Some(last) = path.segments.iter().last() {\n+                        if lint_ty_kind_usage(cx, last) {\n+                            cx.struct_span_lint(\n+                                USAGE_OF_TY_TYKIND,\n+                                path.span,\n+                                \"usage of `ty::TyKind`\",\n+                            )\n+                            .help(\"try using `Ty` instead\")\n                             .emit();\n+                        } else {\n+                            if ty.span.ctxt().outer().expn_info().is_some() {\n+                                return;\n+                            }\n+                            if let Some(t) = is_ty_or_ty_ctxt(cx, ty) {\n+                                if path.segments.len() > 1 {\n+                                    cx.struct_span_lint(\n+                                        USAGE_OF_QUALIFIED_TY,\n+                                        path.span,\n+                                        &format!(\"usage of qualified `ty::{}`\", t),\n+                                    )\n+                                    .span_suggestion(\n+                                        path.span,\n+                                        \"try using it unqualified\",\n+                                        t,\n+                                        // The import probably needs to be changed\n+                                        Applicability::MaybeIncorrect,\n+                                    )\n+                                    .emit();\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            TyKind::Rptr(\n+                _,\n+                MutTy {\n+                    ty: inner_ty,\n+                    mutbl: Mutability::MutImmutable,\n+                },\n+            ) => {\n+                if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner_def_id()) {\n+                    if cx.tcx.impl_trait_ref(impl_did).is_some() {\n+                        return;\n                     }\n                 }\n+                if let Some(t) = is_ty_or_ty_ctxt(cx, &inner_ty) {\n+                    cx.struct_span_lint(\n+                        TY_PASS_BY_REFERENCE,\n+                        ty.span,\n+                        &format!(\"passing `{}` by reference\", t),\n+                    )\n+                    .span_suggestion(\n+                        ty.span,\n+                        \"try passing by value\",\n+                        t,\n+                        // Changing type of function argument\n+                        Applicability::MaybeIncorrect,\n+                    )\n+                    .emit();\n+                }\n             }\n+            _ => {}\n         }\n     }\n }\n@@ -107,3 +179,43 @@ fn lint_ty_kind_usage(cx: &LateContext<'_, '_>, segment: &PathSegment) -> bool {\n \n     false\n }\n+\n+fn is_ty_or_ty_ctxt(cx: &LateContext<'_, '_>, ty: &Ty) -> Option<String> {\n+    match &ty.node {\n+        TyKind::Path(qpath) => {\n+            if let QPath::Resolved(_, path) = qpath {\n+                let did = path.def.opt_def_id()?;\n+                if cx.match_def_path(did, &[\"rustc\", \"ty\", \"Ty\"]) {\n+                    return Some(format!(\"Ty{}\", gen_args(path.segments.last().unwrap())));\n+                } else if cx.match_def_path(did, &[\"rustc\", \"ty\", \"context\", \"TyCtxt\"]) {\n+                    return Some(format!(\"TyCtxt{}\", gen_args(path.segments.last().unwrap())));\n+                }\n+            }\n+        }\n+        _ => {}\n+    }\n+\n+    None\n+}\n+\n+fn gen_args(segment: &PathSegment) -> String {\n+    if let Some(args) = &segment.args {\n+        let lifetimes = args\n+            .args\n+            .iter()\n+            .filter_map(|arg| {\n+                if let GenericArg::Lifetime(lt) = arg {\n+                    Some(lt.name.ident().to_string())\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect::<Vec<_>>();\n+\n+        if !lifetimes.is_empty() {\n+            return format!(\"<{}>\", lifetimes.join(\", \"));\n+        }\n+    }\n+\n+    String::new()\n+}"}, {"sha": "0bb9d4389dd0b7eb0e773f1a34077b5ca590b2ab", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/747d288be4a85f3adac67b820df74eef0571ef64/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747d288be4a85f3adac67b820df74eef0571ef64/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=747d288be4a85f3adac67b820df74eef0571ef64", "patch": "@@ -495,7 +495,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_early_pass(sess, false, false, box DefaultHashTypes::new());\n-    store.register_late_pass(sess, false, false, false, box TyKindUsage);\n+    store.register_late_pass(sess, false, false, false, box TyTyKind);\n     store.register_group(\n         sess,\n         false,\n@@ -504,6 +504,8 @@ pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {\n         vec![\n             LintId::of(DEFAULT_HASH_TYPES),\n             LintId::of(USAGE_OF_TY_TYKIND),\n+            LintId::of(TY_PASS_BY_REFERENCE),\n+            LintId::of(USAGE_OF_QUALIFIED_TY),\n         ],\n     );\n }"}, {"sha": "9581b6b52f7ab2fa4b06846c8ddb4ea43d933cdf", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/747d288be4a85f3adac67b820df74eef0571ef64/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747d288be4a85f3adac67b820df74eef0571ef64/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=747d288be4a85f3adac67b820df74eef0571ef64", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'gcx, 'tcx> GatherBorrows<'a, 'gcx, 'tcx> {\n             start_location, assigned_place, borrow_index,\n         );\n \n-        if !allow_two_phase_borrow(&self.tcx, kind) {\n+        if !allow_two_phase_borrow(self.tcx, kind) {\n             debug!(\"  -> {:?}\", start_location);\n             return;\n         }"}]}