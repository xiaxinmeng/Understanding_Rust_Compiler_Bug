{"sha": "6f495f3466f510ac3db45fc3057b96efed971b7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNDk1ZjM0NjZmNTEwYWMzZGI0NWZjMzA1N2I5NmVmZWQ5NzFiN2Y=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-04-17T07:15:28Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-05T09:25:12Z"}, "message": "Improve naming", "tree": {"sha": "7ed3281ffe446c2bcfaae400e98638e501a3a8d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ed3281ffe446c2bcfaae400e98638e501a3a8d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f495f3466f510ac3db45fc3057b96efed971b7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f495f3466f510ac3db45fc3057b96efed971b7f", "html_url": "https://github.com/rust-lang/rust/commit/6f495f3466f510ac3db45fc3057b96efed971b7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f495f3466f510ac3db45fc3057b96efed971b7f/comments", "author": null, "committer": null, "parents": [{"sha": "0d448cfcf8a8ebb4109d817b2aa416e9ba33610d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d448cfcf8a8ebb4109d817b2aa416e9ba33610d", "html_url": "https://github.com/rust-lang/rust/commit/0d448cfcf8a8ebb4109d817b2aa416e9ba33610d"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "53fd70a28e8dd987f975391d86b3d8a383757102", "filename": "src/librustc_infer/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f495f3466f510ac3db45fc3057b96efed971b7f/src%2Flibrustc_infer%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f495f3466f510ac3db45fc3057b96efed971b7f/src%2Flibrustc_infer%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffudge.rs?ref=6f495f3466f510ac3db45fc3057b96efed971b7f", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     {\n         debug!(\"fudge_inference_if_ok()\");\n \n-        let (mut fudger, value) = self.probe_full(|snapshot| {\n+        let (mut fudger, value) = self.probe_fudge(|snapshot| {\n             match f() {\n                 Ok(value) => {\n                     let value = self.resolve_vars_if_possible(&value);"}, {"sha": "e92008c68eba54b94d54c55266b41e6fb6a2912b", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f495f3466f510ac3db45fc3057b96efed971b7f/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f495f3466f510ac3db45fc3057b96efed971b7f/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=6f495f3466f510ac3db45fc3057b96efed971b7f", "patch": "@@ -167,7 +167,7 @@ pub struct InferCtxtInner<'tcx> {\n     /// `resolve_regions_and_report_errors` is invoked, this gets set to `None`\n     /// -- further attempts to perform unification, etc., may fail if new\n     /// region constraints would've been added.\n-    region_constraints: Option<RegionConstraintStorage<'tcx>>,\n+    region_constraint_storage: Option<RegionConstraintStorage<'tcx>>,\n \n     /// A set of constraints that regionck must validate. Each\n     /// constraint has the form `T:'a`, meaning \"some type `T` must\n@@ -214,7 +214,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n             const_unification_storage: ut::UnificationTableStorage::new(),\n             int_unification_storage: ut::UnificationTableStorage::new(),\n             float_unification_storage: ut::UnificationTableStorage::new(),\n-            region_constraints: Some(RegionConstraintStorage::new()),\n+            region_constraint_storage: Some(RegionConstraintStorage::new()),\n             region_obligations: vec![],\n         }\n     }\n@@ -268,7 +268,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n     }\n \n     pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'tcx, '_> {\n-        self.region_constraints\n+        self.region_constraint_storage\n             .as_mut()\n             .expect(\"region constraints already solved\")\n             .with_log(&mut self.undo_log)\n@@ -705,8 +705,9 @@ impl<'tcx> InferOk<'tcx, ()> {\n     }\n }\n \n+/// Extends `CombinedSnapshot` by tracking which variables were added in the snapshot\n #[must_use = \"once you start a snapshot, you should always consume it\"]\n-pub struct FullSnapshot<'a, 'tcx> {\n+pub struct FudgeSnapshot<'a, 'tcx> {\n     snapshot: CombinedSnapshot<'a, 'tcx>,\n     region_constraints_snapshot: RegionSnapshot,\n     type_snapshot: type_variable::Snapshot<'tcx>,\n@@ -830,10 +831,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         result\n     }\n \n-    fn start_full_snapshot(&self) -> FullSnapshot<'a, 'tcx> {\n+    fn start_fudge_snapshot(&self) -> FudgeSnapshot<'a, 'tcx> {\n         let snapshot = self.start_snapshot();\n         let mut inner = self.inner.borrow_mut();\n-        FullSnapshot {\n+        FudgeSnapshot {\n             snapshot,\n             type_snapshot: inner.type_variables().snapshot(),\n             const_var_len: inner.const_unification_table().len(),\n@@ -925,12 +926,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         r\n     }\n \n-    pub fn probe_full<R, F>(&self, f: F) -> R\n+    /// Like `probe` but provides information about which variables were created in the snapshot,\n+    /// allowing for inference fudging\n+    pub fn probe_fudge<R, F>(&self, f: F) -> R\n     where\n-        F: FnOnce(&FullSnapshot<'a, 'tcx>) -> R,\n+        F: FnOnce(&FudgeSnapshot<'a, 'tcx>) -> R,\n     {\n         debug!(\"probe()\");\n-        let snapshot = self.start_full_snapshot();\n+        let snapshot = self.start_fudge_snapshot();\n         let r = f(&snapshot);\n         self.rollback_to(\"probe\", snapshot.snapshot);\n         r\n@@ -1294,7 +1297,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 inner.region_obligations\n             );\n             inner\n-                .region_constraints\n+                .region_constraint_storage\n                 .take()\n                 .expect(\"regions already resolved\")\n                 .with_log(&mut inner.undo_log)\n@@ -1362,7 +1365,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn take_region_var_origins(&self) -> VarInfos {\n         let mut inner = self.inner.borrow_mut();\n         let (var_infos, data) = inner\n-            .region_constraints\n+            .region_constraint_storage\n             .take()\n             .expect(\"regions already resolved\")\n             .with_log(&mut inner.undo_log)"}, {"sha": "ed8ee3b655d1bfe3ea122a4c2a0ee9daad3a458d", "filename": "src/librustc_infer/infer/type_variable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f495f3466f510ac3db45fc3057b96efed971b7f/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f495f3466f510ac3db45fc3057b96efed971b7f/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs?ref=6f495f3466f510ac3db45fc3057b96efed971b7f", "patch": "@@ -13,30 +13,35 @@ use std::ops::Range;\n \n use rustc_data_structures::undo_log::{Rollback, UndoLogs};\n \n+/// Represents a single undo-able action that affects a type inference variable.\n pub(crate) enum UndoLog<'tcx> {\n     EqRelation(sv::UndoLog<ut::Delegate<TyVidEqKey<'tcx>>>),\n     SubRelation(sv::UndoLog<ut::Delegate<ty::TyVid>>),\n     Values(sv::UndoLog<Delegate>),\n }\n \n+/// Convert from a specific kind of undo to the more general UndoLog\n impl<'tcx> From<sv::UndoLog<ut::Delegate<TyVidEqKey<'tcx>>>> for UndoLog<'tcx> {\n     fn from(l: sv::UndoLog<ut::Delegate<TyVidEqKey<'tcx>>>) -> Self {\n         UndoLog::EqRelation(l)\n     }\n }\n \n+/// Convert from a specific kind of undo to the more general UndoLog\n impl<'tcx> From<sv::UndoLog<ut::Delegate<ty::TyVid>>> for UndoLog<'tcx> {\n     fn from(l: sv::UndoLog<ut::Delegate<ty::TyVid>>) -> Self {\n         UndoLog::SubRelation(l)\n     }\n }\n \n+/// Convert from a specific kind of undo to the more general UndoLog\n impl<'tcx> From<sv::UndoLog<Delegate>> for UndoLog<'tcx> {\n     fn from(l: sv::UndoLog<Delegate>) -> Self {\n         UndoLog::Values(l)\n     }\n }\n \n+/// Convert from a specific kind of undo to the more general UndoLog\n impl<'tcx> From<Instantiate> for UndoLog<'tcx> {\n     fn from(l: Instantiate) -> Self {\n         UndoLog::Values(sv::UndoLog::Other(l))"}, {"sha": "56cb182dbf0f96bfa1d287f013e6058518d6d27c", "filename": "src/librustc_infer/infer/undo_log.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f495f3466f510ac3db45fc3057b96efed971b7f/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f495f3466f510ac3db45fc3057b96efed971b7f/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs?ref=6f495f3466f510ac3db45fc3057b96efed971b7f", "patch": "@@ -59,6 +59,7 @@ impl_from! {\n     ProjectionCache(traits::UndoLog<'tcx>),\n }\n \n+/// The Rollback trait defines how to rollback a particular action.\n impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {\n     fn reverse(&mut self, undo: UndoLog<'tcx>) {\n         match undo {\n@@ -67,10 +68,10 @@ impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {\n             UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),\n             UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),\n             UndoLog::RegionConstraintCollector(undo) => {\n-                self.region_constraints.as_mut().unwrap().reverse(undo)\n+                self.region_constraint_storage.as_mut().unwrap().reverse(undo)\n             }\n             UndoLog::RegionUnificationTable(undo) => {\n-                self.region_constraints.as_mut().unwrap().unification_table.reverse(undo)\n+                self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)\n             }\n             UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),\n             UndoLog::PushRegionObligation => {\n@@ -80,6 +81,8 @@ impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {\n     }\n }\n \n+/// The combined undo log for all the various unification tables. For each change to the storage\n+/// for any kind of inference variable, we record an UndoLog entry in the vector here.\n pub(crate) struct InferCtxtUndoLogs<'tcx> {\n     logs: Vec<UndoLog<'tcx>>,\n     num_open_snapshots: usize,\n@@ -91,22 +94,27 @@ impl Default for InferCtxtUndoLogs<'_> {\n     }\n }\n \n+/// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any\n+/// action that is convertable into a UndoLog (per the From impls above).\n impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>\n where\n     UndoLog<'tcx>: From<T>,\n {\n     fn num_open_snapshots(&self) -> usize {\n         self.num_open_snapshots\n     }\n+\n     fn push(&mut self, undo: T) {\n         if self.in_snapshot() {\n             self.logs.push(undo.into())\n         }\n     }\n+\n     fn clear(&mut self) {\n         self.logs.clear();\n         self.num_open_snapshots = 0;\n     }\n+\n     fn extend<J>(&mut self, undos: J)\n     where\n         Self: Sized,\n@@ -196,6 +204,7 @@ impl<'tcx> InferCtxtUndoLogs<'tcx> {\n \n impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {\n     type Output = UndoLog<'tcx>;\n+\n     fn index(&self, key: usize) -> &Self::Output {\n         &self.logs[key]\n     }"}]}