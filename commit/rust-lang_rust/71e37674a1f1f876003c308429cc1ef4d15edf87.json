{"sha": "71e37674a1f1f876003c308429cc1ef4d15edf87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZTM3Njc0YTFmMWY4NzYwMDNjMzA4NDI5Y2MxZWY0ZDE1ZWRmODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-17T01:51:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-17T01:51:55Z"}, "message": "Auto merge of #44634 - alexcrichton:rollup, r=alexcrichton\n\nRollup of 19 pull requests\n\n- Successful merges: #44273, #44356, #44395, #44531, #44537, #44542, #44560, #44567, #44574, #44577, #44586, #44589, #44590, #44593, #44598, #44606, #44609, #44616, #44631\n- Failed merges:", "tree": {"sha": "aa0010f1e01317cbc540f2e38c0b6371c09fce3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa0010f1e01317cbc540f2e38c0b6371c09fce3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71e37674a1f1f876003c308429cc1ef4d15edf87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71e37674a1f1f876003c308429cc1ef4d15edf87", "html_url": "https://github.com/rust-lang/rust/commit/71e37674a1f1f876003c308429cc1ef4d15edf87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71e37674a1f1f876003c308429cc1ef4d15edf87/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b492405b1fcfb8243481582182a0232fb5177021", "url": "https://api.github.com/repos/rust-lang/rust/commits/b492405b1fcfb8243481582182a0232fb5177021", "html_url": "https://github.com/rust-lang/rust/commit/b492405b1fcfb8243481582182a0232fb5177021"}, {"sha": "2bd4dcf891d9cfe567c607fa8607f46b212b1aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd4dcf891d9cfe567c607fa8607f46b212b1aa3", "html_url": "https://github.com/rust-lang/rust/commit/2bd4dcf891d9cfe567c607fa8607f46b212b1aa3"}], "stats": {"total": 678, "additions": 480, "deletions": 198}, "files": [{"sha": "dd619c945d4aaa06e46f82d8baa2e01e2eddc787", "filename": ".travis.yml", "status": "modified", "additions": 54, "deletions": 31, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -12,14 +12,19 @@ matrix:\n   fast_finish: true\n   include:\n     # Images used in testing PR and try-build should be run first.\n-    - env: IMAGE=x86_64-gnu-llvm-3.7 ALLOW_PR=1 RUST_BACKTRACE=1\n-    - env: IMAGE=dist-x86_64-linux DEPLOY=1 ALLOW_TRY=1\n+    - env: IMAGE=x86_64-gnu-llvm-3.7 RUST_BACKTRACE=1\n+      if: type = pull_request OR branch = auto\n+\n+    - env: IMAGE=dist-x86_64-linux DEPLOY=1\n+      if: branch = try OR branch = auto\n \n     # \"alternate\" deployments, these are \"nightlies\" but don't have assertions\n     # turned on, they're deployed to a different location primarily for projects\n     # which are stuck on nightly and don't want llvm assertions in the artifacts\n     # that they use.\n     - env: IMAGE=dist-x86_64-linux DEPLOY_ALT=1\n+      if: branch = auto\n+\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--enable-extended --enable-profiler\"\n@@ -31,6 +36,7 @@ matrix:\n         NO_LLVM_ASSERTIONS=1\n       os: osx\n       osx_image: xcode7\n+      if: branch = auto\n \n     # macOS builders. These are placed near the beginning because they are very\n     # slow to run.\n@@ -50,6 +56,8 @@ matrix:\n         NO_LLVM_ASSERTIONS=1\n       os: osx\n       osx_image: xcode8.2\n+      if: branch = auto\n+\n     - env: >\n         RUST_CHECK_TARGET=check\n         RUST_CONFIGURE_ARGS=--build=i686-apple-darwin\n@@ -61,6 +69,7 @@ matrix:\n         NO_LLVM_ASSERTIONS=1\n       os: osx\n       osx_image: xcode8.2\n+      if: branch = auto\n \n     # OSX builders producing releases. These do not run the full test suite and\n     # just produce a bunch of artifacts.\n@@ -79,6 +88,8 @@ matrix:\n         NO_LLVM_ASSERTIONS=1\n       os: osx\n       osx_image: xcode7\n+      if: branch = auto\n+\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers --enable-profiler\"\n@@ -90,79 +101,92 @@ matrix:\n         NO_LLVM_ASSERTIONS=1\n       os: osx\n       osx_image: xcode7\n+      if: branch = auto\n \n     # Linux builders, remaining docker images\n     - env: IMAGE=arm-android\n+      if: branch = auto\n     - env: IMAGE=armhf-gnu\n+      if: branch = auto\n     - env: IMAGE=cross DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-aarch64-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-android DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-arm-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-armhf-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-armv7-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-fuchsia DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-i586-gnu-i686-musl DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-i686-freebsd DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-i686-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-mips-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-mips64-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-mips64el-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-mipsel-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-powerpc-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-powerpc64-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-powerpc64le-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-s390x-linux DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-x86_64-freebsd DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-x86_64-musl DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=dist-x86_64-netbsd DEPLOY=1\n+      if: branch = auto\n     - env: IMAGE=asmjs\n+      if: branch = auto\n     - env: IMAGE=i686-gnu\n+      if: branch = auto\n     - env: IMAGE=i686-gnu-nopt\n+      if: branch = auto\n     # - env: IMAGE=wasm32 issue 42646\n+    #   if: branch = auto\n     - env: IMAGE=x86_64-gnu\n+      if: branch = auto\n     - env: IMAGE=x86_64-gnu-full-bootstrap\n+      if: branch = auto\n     - env: IMAGE=x86_64-gnu-aux\n+      if: branch = auto\n     - env: IMAGE=x86_64-gnu-debug\n+      if: branch = auto\n     - env: IMAGE=x86_64-gnu-nopt\n+      if: branch = auto\n     - env: IMAGE=x86_64-gnu-distcheck\n+      if: branch = auto\n     - env: IMAGE=x86_64-gnu-incremental\n+      if: branch = auto\n \n env:\n   global:\n-    - SCCACHE_BUCKET=rust-lang-ci-sccache\n+    - SCCACHE_BUCKET=rust-lang-ci-sccache2\n+    - SCCACHE_REGION=us-west-1\n     - AWS_ACCESS_KEY_ID=AKIAJAMV3QAMMA6AXHFQ\n     # AWS_SECRET_ACCESS_KEY=...\n     - secure: \"j96XxTVOSUf4s4r4htIxn/fvIa5DWbMgLqWl7r8z2QfgUwscmkMXAwXuFNc7s7bGTpV/+CgDiMFFM6BAFLGKutytIF6oA02s9b+usQYnM0th7YQ2AIgm9GtMTJCJp4AoyfFmh8F2faUICBZlfVLUJ34udHEe35vOklix+0k4WDo=\"\n \n before_install:\n-  # If we are building a pull request, do the build if $ALLOW_PR == 1\n-  # Otherwise, do the build if we are on the auto branch, or the try branch and $ALLOW_TRY == 1\n-  - >\n-    if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then\n-        if [[ \"$ALLOW_PR\" == \"1\" ]]; then\n-            export SKIP_BUILD=false;\n-        else\n-            export SKIP_BUILD=true;\n-        fi;\n-    elif [[ \"$TRAVIS_BRANCH\" == \"auto\" || ( \"$ALLOW_TRY\" == \"1\" && \"$TRAVIS_BRANCH\" == \"try\" ) ]]; then\n-        export SKIP_BUILD=false;\n-    else\n-        export SKIP_BUILD=true;\n-    fi\n-  - >\n-    if [[ \"$SKIP_BUILD\" == false ]]; then\n-      zcat $HOME/docker/rust-ci.tar.gz | docker load || true\n-    fi\n+  - zcat $HOME/docker/rust-ci.tar.gz | docker load || true\n   - mkdir -p $HOME/rustsrc\n \n install:\n-  - >\n-    if [[ \"$SKIP_BUILD\" == true ]]; then\n-      echo echo skipping, not a full build > $HOME/stamp &&\n-        chmod +x $HOME/stamp &&\n-        export PATH=$PATH:$HOME;\n-    else\n-      case \"$TRAVIS_OS_NAME\" in\n+  - case \"$TRAVIS_OS_NAME\" in\n         linux)\n           travis_retry curl -fo $HOME/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-unknown-linux-musl &&\n             chmod +x $HOME/stamp &&\n@@ -178,8 +202,7 @@ install:\n           travis_retry curl -fo /usr/local/bin/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n             chmod +x /usr/local/bin/stamp\n           ;;\n-      esac\n-    fi\n+    esac\n \n before_script:\n   - >\n@@ -284,7 +307,7 @@ deploy:\n       secure: \"kUGd3t7JcVWFESgIlzvsM8viZgCA9Encs3creW0xLJaLSeI1iVjlJK4h/2/nO6y224AFrh/GUfsNr4/4AlxPuYb8OU5oC5Lv+Ff2JiRDYtuNpyQSKAQp+bRYytWMtrmhja91h118Mbm90cUfcLPwkdiINgJNTXhPKg5Cqu3VYn0=\"\n     on:\n       branch: try\n-      condition: $DEPLOY = 1 && $ALLOW_TRY = 1\n+      condition: $DEPLOY = 1\n \n   # this is the same as the above deployment provider except that it uploads to\n   # a slightly different directory and has a different trigger"}, {"sha": "e922b930675ebfd620681cbbf4b5ca7376aa257a", "filename": "appveyor.yml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -1,5 +1,6 @@\n environment:\n-  SCCACHE_BUCKET: rust-lang-ci-sccache\n+  SCCACHE_BUCKET: rust-lang-ci-sccache2\n+  SCCACHE_REGION: us-west-1\n   AWS_ACCESS_KEY_ID: AKIAJAMV3QAMMA6AXHFQ\n   AWS_SECRET_ACCESS_KEY:\n     secure: 7Y+JiquYedOAgnUU26uL0DPzrxmTtR+qIwG6rNKSuWDffqU3vVZxbGXim9QpTO80"}, {"sha": "3e09b6fefd0b136f8adfbca1d9fc20b5ba8737a3", "filename": "src/Cargo.lock", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -47,7 +47,7 @@ dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n ]\n \n@@ -103,7 +103,7 @@ name = \"backtrace-sys\"\n version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -135,9 +135,9 @@ name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -267,10 +267,10 @@ dependencies = [\n \n [[package]]\n name = \"cmake\"\n-version = \"0.1.24\"\n+version = \"0.1.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -286,7 +286,7 @@ name = \"compiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"core 0.0.0\",\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -402,7 +402,7 @@ name = \"curl-sys\"\n version = \"0.3.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -582,7 +582,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.53\"\n+version = \"0.3.54\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -840,9 +840,9 @@ name = \"libgit2-sys\"\n version = \"0.6.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -855,7 +855,7 @@ name = \"libssh2-sys\"\n version = \"0.2.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -867,7 +867,7 @@ name = \"libz-sys\"\n version = \"1.0.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -888,7 +888,7 @@ version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -974,7 +974,7 @@ name = \"miniz-sys\"\n version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1110,7 +1110,7 @@ name = \"openssl-sys\"\n version = \"0.9.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1215,7 +1215,7 @@ name = \"profiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"core 0.0.0\",\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1476,7 +1476,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1611,7 +1611,7 @@ name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n ]\n \n@@ -1622,7 +1622,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1667,7 +1667,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1741,7 +1741,7 @@ name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n  \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1779,7 +1779,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -1806,7 +1806,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"html-diff 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1979,7 +1979,7 @@ dependencies = [\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n@@ -2455,7 +2455,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum clap 2.26.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2267a8fdd4dce6956ba6649e130f62fb279026e5e84b92aa939ac8f85ce3f9f0\"\n-\"checksum cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8ebbb35d3dc9cd09497168f33de1acb79b265d350ab0ac34133b98f8509af1f\"\n+\"checksum cmake 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c8a6541a55bcd72d3de4faee2d101a5a66df29790282c7f797082a7228a9b3d\"\n \"checksum conv 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78ff10625fd0ac447827aa30ea8b861fead473bb60aeb73af6c1c58caf0d1299\"\n \"checksum core-foundation 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5909502e547762013619f4c4e01cc7393c20fe2d52d7fa471c1210adb2320dc7\"\n \"checksum core-foundation-sys 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc9fb3d6cb663e6fd7cf1c63f9b144ee2b1e4a78595a0451dd34bff85b9a3387\"\n@@ -2484,7 +2484,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum fs2 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ab76cfd2aaa59b7bf6688ad9ba15bbae64bff97f04ea02144cfd3443e5c2866\"\n \"checksum futf 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51f93f3de6ba1794dcd5810b3546d004600a59a98266487c8407bc4b24e398f3\"\n \"checksum futures 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a82bdc62350ca9d7974c760e9665102fc9d740992a528c2254aa930e53b783c4\"\n-\"checksum gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8310f7e9c890398b0e80e301c4f474e9918d2b27fca8f48486ca775fa9ffc5a\"\n+\"checksum gcc 0.3.54 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5e33ec290da0d127825013597dbdfc28bee4964690c7ce1166cbc2a7bd08b1bb\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum git2 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c1c0203d653f4140241da0c1375a404f0a397249ec818cd2076c6280c50f6fa\"\n \"checksum git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"68676bc784bf0bef83278898929bf64a251e87c0340723d0b93fa096c9c5bf8e\""}, {"sha": "85e3b65c1953cf080d0e35afdbff226514f6d18a", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -34,7 +34,7 @@ cmake = \"0.1.23\"\n filetime = \"0.1\"\n num_cpus = \"1.0\"\n getopts = \"0.2\"\n-gcc = \"0.3.50\"\n+gcc = \"0.3.54\"\n libc = \"0.2\"\n serde = \"1.0.8\"\n serde_derive = \"1.0.8\""}, {"sha": "5853d5ae3204e034e1050427e4146e30c17bbd61", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -1118,10 +1118,11 @@ impl Step for Rustdoc {\n         let compiler = builder.compiler(builder.top_stage, self.host);\n         let target = compiler.host;\n \n-        builder.ensure(RemoteCopyLibs { compiler, target });\n-\n-        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, test_kind.subcommand());\n-        compile::rustc_cargo(build, &compiler, target, &mut cargo);\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 target,\n+                                                 test_kind.subcommand(),\n+                                                 \"src/tools/rustdoc\");\n         let _folder = build.fold_output(|| {\n             format!(\"{}_stage{}-rustdoc\", test_kind.subcommand(), compiler.stage)\n         });"}, {"sha": "7bca088dbd5a8f8529738b5fce536ca66a030576", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -1098,8 +1098,14 @@ impl Step for Rls {\n            .arg(\"--output-dir\").arg(&distdir(build))\n            .arg(\"--non-installed-overlay\").arg(&overlay)\n            .arg(format!(\"--package-name={}-{}\", name, target))\n-           .arg(\"--component-name=rls\")\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        if build.config.channel == \"nightly\" {\n+            cmd.arg(\"--component-name=rls\");\n+        } else {\n+            cmd.arg(\"--component-name=rls-preview\");\n+        }\n+\n         build.run(&mut cmd);\n         distdir(build).join(format!(\"{}-{}.tar.gz\", name, target))\n     }\n@@ -1302,9 +1308,12 @@ impl Step for Extended {\n             cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-std\"), target))\n                         .join(format!(\"rust-std-{}\", target)),\n                     &exe.join(\"rust-std\"));\n-            cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rls\"), target))\n-                        .join(\"rls\"),\n-                    &exe.join(\"rls\"));\n+            let rls_path = if build.config.channel == \"nightly\" {\n+                work.join(&format!(\"{}-{}\", pkgname(build, \"rls\"), target)).join(\"rls\")\n+            } else {\n+                work.join(&format!(\"{}-{}\", pkgname(build, \"rls\"), target)).join(\"rls-preview\")\n+            };\n+            cp_r(&rls_path, &exe.join(\"rls\"));\n             cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-analysis\"), target))\n                         .join(format!(\"rust-analysis-{}\", target)),\n                     &exe.join(\"rust-analysis\"));"}, {"sha": "a4e9f682358d3ddf4b59ac3f4627735698e53cd4", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -94,20 +94,21 @@ impl Step for ToolBuild {\n         let _folder = build.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n         println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n \n-        let mut cargo = prepare_tool_cargo(builder, compiler, target, path);\n+        let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n         build.run(&mut cargo);\n         build.cargo_out(compiler, Mode::Tool, target).join(exe(tool, &compiler.host))\n     }\n }\n \n-fn prepare_tool_cargo(\n+pub fn prepare_tool_cargo(\n     builder: &Builder,\n     compiler: Compiler,\n     target: Interned<String>,\n+    command: &'static str,\n     path: &'static str,\n ) -> Command {\n     let build = builder.build;\n-    let mut cargo = builder.cargo(compiler, Mode::Tool, target, \"build\");\n+    let mut cargo = builder.cargo(compiler, Mode::Tool, target, command);\n     let dir = build.src.join(path);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n@@ -295,6 +296,7 @@ impl Step for Rustdoc {\n         let mut cargo = prepare_tool_cargo(builder,\n                                            build_compiler,\n                                            target,\n+                                           \"build\",\n                                            \"src/tools/rustdoc\");\n         build.run(&mut cargo);\n         // Cargo adds a number of paths to the dylib search path on windows, which results in"}, {"sha": "7087033e117a23b5d277450361ae48f7eb25668b", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -57,9 +57,10 @@ mkdir -p $objdir/tmp\n \n args=\n if [ \"$SCCACHE_BUCKET\" != \"\" ]; then\n-    args=\"$args --env SCCACHE_BUCKET=$SCCACHE_BUCKET\"\n-    args=\"$args --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\"\n-    args=\"$args --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\"\n+    args=\"$args --env SCCACHE_BUCKET\"\n+    args=\"$args --env SCCACHE_REGION\"\n+    args=\"$args --env AWS_ACCESS_KEY_ID\"\n+    args=\"$args --env AWS_SECRET_ACCESS_KEY\"\n     args=\"$args --env SCCACHE_ERROR_LOG=/tmp/sccache/sccache.log\"\n     args=\"$args --volume $objdir/tmp:/tmp/sccache\"\n else\n@@ -82,10 +83,10 @@ exec docker \\\n   --env SRC=/checkout \\\n   $args \\\n   --env CARGO_HOME=/cargo \\\n-  --env DEPLOY=$DEPLOY \\\n-  --env DEPLOY_ALT=$DEPLOY_ALT \\\n+  --env DEPLOY \\\n+  --env DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n-  --env TRAVIS=${TRAVIS-false} \\\n+  --env TRAVIS \\\n   --env TRAVIS_BRANCH \\\n   --volume \"$HOME/.cargo:/cargo\" \\\n   --volume \"$HOME/rustsrc:$HOME/rustsrc\" \\"}, {"sha": "58c589697f41c75127334a8e79d6604733ff0981", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -244,6 +244,7 @@ use boxed::Box;\n #[cfg(test)]\n use std::boxed::Box;\n \n+use core::any::Any;\n use core::borrow;\n use core::cell::Cell;\n use core::cmp::Ordering;\n@@ -608,6 +609,46 @@ impl<T: Clone> Rc<T> {\n     }\n }\n \n+impl Rc<Any> {\n+    #[inline]\n+    #[unstable(feature = \"rc_downcast\", issue = \"44608\")]\n+    /// Attempt to downcast the `Rc<Any>` to a concrete type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(rc_downcast)]\n+    /// use std::any::Any;\n+    /// use std::rc::Rc;\n+    ///\n+    /// fn print_if_string(value: Rc<Any>) {\n+    ///     if let Ok(string) = value.downcast::<String>() {\n+    ///         println!(\"String ({}): {}\", string.len(), string);\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let my_string = \"Hello World\".to_string();\n+    ///     print_if_string(Rc::new(my_string));\n+    ///     print_if_string(Rc::new(0i8));\n+    /// }\n+    /// ```\n+    pub fn downcast<T: Any>(self) -> Result<Rc<T>, Rc<Any>> {\n+        if (*self).is::<T>() {\n+            // avoid the pointer arithmetic in from_raw\n+            unsafe {\n+                let raw: *const RcBox<Any> = self.ptr.as_ptr();\n+                forget(self);\n+                Ok(Rc {\n+                    ptr: Shared::new_unchecked(raw as *const RcBox<T> as *mut _),\n+                })\n+            }\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}\n+\n impl<T: ?Sized> Rc<T> {\n     // Allocates an `RcBox<T>` with sufficient space for an unsized value\n     unsafe fn allocate_for_ptr(ptr: *const T) -> *mut RcBox<T> {\n@@ -1696,6 +1737,26 @@ mod tests {\n \n         assert_eq!(&r[..], [1, 2, 3]);\n     }\n+\n+    #[test]\n+    fn test_downcast() {\n+        use std::any::Any;\n+\n+        let r1: Rc<Any> = Rc::new(i32::max_value());\n+        let r2: Rc<Any> = Rc::new(\"abc\");\n+\n+        assert!(r1.clone().downcast::<u32>().is_err());\n+\n+        let r1i32 = r1.downcast::<i32>();\n+        assert!(r1i32.is_ok());\n+        assert_eq!(r1i32.unwrap(), Rc::new(i32::max_value()));\n+\n+        assert!(r2.clone().downcast::<i32>().is_err());\n+\n+        let r2str = r2.downcast::<&'static str>();\n+        assert!(r2str.is_ok());\n+        assert_eq!(r2str.unwrap(), Rc::new(\"abc\"));\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "827c6354c60baccab3033212df5ec052c0a14df7", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -146,3 +146,41 @@ fn bench_for_each_chain_ref_fold(b: &mut Bencher) {\n         acc\n     });\n }\n+\n+#[bench]\n+fn bench_flat_map_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000).flat_map(|x| x..x+1000)\n+            .map(black_box)\n+            .sum()\n+    });\n+}\n+\n+#[bench]\n+fn bench_flat_map_ref_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000).flat_map(|x| x..x+1000)\n+            .map(black_box)\n+            .by_ref()\n+            .sum()\n+    });\n+}\n+\n+#[bench]\n+fn bench_flat_map_chain_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000000).flat_map(|x| once(x).chain(once(x)))\n+            .map(black_box)\n+            .sum()\n+    });\n+}\n+\n+#[bench]\n+fn bench_flat_map_chain_ref_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000000).flat_map(|x| once(x).chain(once(x)))\n+            .map(black_box)\n+            .by_ref()\n+            .sum()\n+    });\n+}"}, {"sha": "6f86f8caad07343cc87f94310fc75040a00a2856", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -453,12 +453,10 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ord_max_min)]\n-    ///\n     /// assert_eq!(2, 1.max(2));\n     /// assert_eq!(2, 2.max(2));\n     /// ```\n-    #[unstable(feature = \"ord_max_min\", issue = \"25663\")]\n+    #[stable(feature = \"ord_max_min\", since = \"1.22.0\")]\n     fn max(self, other: Self) -> Self\n     where Self: Sized {\n         if other >= self { other } else { self }\n@@ -471,12 +469,10 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ord_max_min)]\n-    ///\n     /// assert_eq!(1, 1.min(2));\n     /// assert_eq!(2, 2.min(2));\n     /// ```\n-    #[unstable(feature = \"ord_max_min\", issue = \"25663\")]\n+    #[stable(feature = \"ord_max_min\", since = \"1.22.0\")]\n     fn min(self, other: Self) -> Self\n     where Self: Sized {\n         if self <= other { self } else { other }"}, {"sha": "a596ffd6ae8fc9caf840b117cc7857ff0bf4e4c3", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -1902,6 +1902,16 @@ impl<I: Iterator, U: IntoIterator, F> Iterator for FlatMap<I, U, F>\n             _ => (lo, None)\n         }\n     }\n+\n+    #[inline]\n+    fn fold<Acc, Fold>(self, init: Acc, mut fold: Fold) -> Acc\n+        where Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        self.frontiter.into_iter()\n+            .chain(self.iter.map(self.f).map(U::into_iter))\n+            .chain(self.backiter)\n+            .fold(init, |acc, iter| iter.fold(acc, &mut fold))\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "59ae30de452c96f9f41ff28cbfbf56779f875502", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -654,6 +654,22 @@ fn test_iterator_flat_map() {\n     assert_eq!(i, ys.len());\n }\n \n+/// Test `FlatMap::fold` with items already picked off the front and back,\n+/// to make sure all parts of the `FlatMap` are folded correctly.\n+#[test]\n+fn test_iterator_flat_map_fold() {\n+    let xs = [0, 3, 6];\n+    let ys = [1, 2, 3, 4, 5, 6, 7];\n+    let mut it = xs.iter().flat_map(|&x| x..x+3);\n+    it.next();\n+    it.next_back();\n+    let i = it.fold(0, |i, x| {\n+        assert_eq!(x, ys[i]);\n+        i + 1\n+    });\n+    assert_eq!(i, ys.len());\n+}\n+\n #[test]\n fn test_inspect() {\n     let xs = [1, 2, 3, 4];"}, {"sha": "47995597a0a91d16e039dacb7a02a895c2da2290", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -26,7 +26,6 @@\n #![feature(inclusive_range_syntax)]\n #![feature(iter_rfind)]\n #![feature(nonzero)]\n-#![feature(ord_max_min)]\n #![feature(rand)]\n #![feature(raw)]\n #![feature(refcell_replace_swap)]"}, {"sha": "ea83a4f8b3104dd2de1113fa6eba381d1d043444", "filename": "src/librustc/dep_graph/query.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fdep_graph%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fdep_graph%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fquery.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -22,11 +22,10 @@ impl DepGraphQuery {\n     pub fn new(nodes: &[DepNode],\n                edges: &[(DepNode, DepNode)])\n                -> DepGraphQuery {\n-        let mut graph = Graph::new();\n+        let mut graph = Graph::with_capacity(nodes.len(), edges.len());\n         let mut indices = FxHashMap();\n         for node in nodes {\n-            indices.insert(node.clone(), graph.next_node_index());\n-            graph.add_node(node.clone());\n+            indices.insert(node.clone(), graph.add_node(node.clone()));\n         }\n \n         for &(ref source, ref target) in edges {"}, {"sha": "5c011042deeee26ebcd8c420c480ce28c852351b", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -13,7 +13,7 @@ use hir::def_id::DefId;\n use hir::map::DefPathHash;\n use ich::{self, CachingCodemapView};\n use session::config::DebugInfoLevel::NoDebugInfo;\n-use ty;\n+use ty::TyCtxt;\n use util::nodemap::{NodeMap, ItemLocalMap};\n \n use std::hash as std_hash;\n@@ -34,7 +34,7 @@ use rustc_data_structures::accumulate_vec::AccumulateVec;\n /// a reference to the TyCtxt) and it holds a few caches for speeding up various\n /// things (e.g. each DefId/DefPath is only hashed once).\n pub struct StableHashingContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     codemap: CachingCodemapView<'gcx>,\n     hash_spans: bool,\n     hash_bodies: bool,\n@@ -53,7 +53,7 @@ pub enum NodeIdHashingMode {\n \n impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n \n-    pub fn new(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n         let hash_spans_initial = tcx.sess.opts.debuginfo != NoDebugInfo;\n         let check_overflow_initial = tcx.sess.overflow_checks();\n \n@@ -111,7 +111,7 @@ impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn tcx(&self) -> ty::TyCtxt<'a, 'gcx, 'tcx> {\n+    pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "a88e90caee3076608b93427b332259000ead0b91", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -66,7 +66,7 @@ use hir::map as hir_map;\n use hir::def_id::DefId;\n use middle::region;\n use traits::{ObligationCause, ObligationCauseCode};\n-use ty::{self, Region, TyCtxt, TypeFoldable};\n+use ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n use ty::error::TypeError;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n@@ -418,7 +418,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                        name: String,\n                        sub: &ty::subst::Substs<'tcx>,\n                        pos: usize,\n-                       other_ty: &ty::Ty<'tcx>) {\n+                       other_ty: &Ty<'tcx>) {\n         // `value` and `other_value` hold two incomplete type representation for display.\n         // `name` is the path of both types being compared. `sub`\n         value.push_highlighted(name);\n@@ -491,7 +491,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     path: String,\n                     sub: &ty::subst::Substs<'tcx>,\n                     other_path: String,\n-                    other_ty: &ty::Ty<'tcx>) -> Option<()> {\n+                    other_ty: &Ty<'tcx>) -> Option<()> {\n         for (i, ta) in sub.types().enumerate() {\n             if &ta == other_ty {\n                 self.highlight_outer(&mut t1_out, &mut t2_out, path, sub, i, &other_ty);\n@@ -522,7 +522,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     /// Compare two given types, eliding parts that are the same between them and highlighting\n     /// relevant differences, and return two representation of those types for highlighted printing.\n-    fn cmp(&self, t1: ty::Ty<'tcx>, t2: ty::Ty<'tcx>)\n+    fn cmp(&self, t1: Ty<'tcx>, t2: Ty<'tcx>)\n         -> (DiagnosticStyledString, DiagnosticStyledString)\n     {\n         match (&t1.sty, &t2.sty) {\n@@ -743,7 +743,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn expected_found_str_ty(&self,\n-                             exp_found: &ty::error::ExpectedFound<ty::Ty<'tcx>>)\n+                             exp_found: &ty::error::ExpectedFound<Ty<'tcx>>)\n                              -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n         let exp_found = self.resolve_type_vars_if_possible(exp_found);\n         if exp_found.references_error() {"}, {"sha": "94faec464b24414f0508fc75e053ef0eac244239", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -12,7 +12,7 @@\n //! anonymous regions.\n use hir;\n use infer::InferCtxt;\n-use ty::{self, Region};\n+use ty::{self, Region, Ty};\n use hir::def_id::DefId;\n use hir::map as hir_map;\n \n@@ -35,7 +35,7 @@ pub struct AnonymousArgInfo<'tcx> {\n     // the argument corresponding to the anonymous region\n     pub arg: &'tcx hir::Arg,\n     // the type corresponding to the anonymopus region argument\n-    pub arg_ty: ty::Ty<'tcx>,\n+    pub arg_ty: Ty<'tcx>,\n     // the ty::BoundRegion corresponding to the anonymous region\n     pub bound_region: ty::BoundRegion,\n     // corresponds to id the argument is the first parameter"}, {"sha": "39bcd7035742e38e0058ee4ff0aeefb1c31a7c97", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -644,7 +644,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn unsolved_variables(&self) -> Vec<ty::Ty<'tcx>> {\n+    pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {\n         let mut variables = Vec::new();\n \n         let unbound_ty_vars = self.type_variables"}, {"sha": "7a6f4fdbb03ac4c966df745375ff664ee1b6f349", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -315,7 +315,7 @@ language_item_table! {\n     DebugTraitLangItem,              \"debug_trait\",             debug_trait;\n }\n \n-impl<'a, 'tcx, 'gcx> ty::TyCtxt<'a, 'tcx, 'gcx> {\n+impl<'a, 'tcx, 'gcx> TyCtxt<'a, 'tcx, 'gcx> {\n     pub fn require_lang_item(&self, lang_item: LangItem) -> DefId {\n         self.lang_items().require(lang_item).unwrap_or_else(|msg| {\n             self.sess.fatal(&msg)"}, {"sha": "d43504b77ba0c40c9ef182b5f40cd398df9be471", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::control_flow_graph::ControlFlowGraph;\n use hir::def::CtorKind;\n use hir::def_id::DefId;\n use ty::subst::{Subst, Substs};\n-use ty::{self, AdtDef, ClosureSubsts, Region, Ty, GeneratorInterior};\n+use ty::{self, AdtDef, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use util::ppaux;\n use rustc_back::slice;\n@@ -644,7 +644,7 @@ impl<'tcx> Terminator<'tcx> {\n }\n \n impl<'tcx> TerminatorKind<'tcx> {\n-    pub fn if_<'a, 'gcx>(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>, cond: Operand<'tcx>,\n+    pub fn if_<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>, cond: Operand<'tcx>,\n                          t: BasicBlock, f: BasicBlock) -> TerminatorKind<'tcx> {\n         static BOOL_SWITCH_FALSE: &'static [ConstInt] = &[ConstInt::U8(0)];\n         TerminatorKind::SwitchInt {\n@@ -1182,7 +1182,7 @@ impl<'tcx> Debug for Operand<'tcx> {\n \n impl<'tcx> Operand<'tcx> {\n     pub fn function_handle<'a>(\n-        tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         def_id: DefId,\n         substs: &'tcx Substs<'tcx>,\n         span: Span,"}, {"sha": "a1817f181066c54c8b5ed844d96c1161c9684fd8", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -381,7 +381,7 @@ pub struct VtableObjectData<'tcx, N> {\n \n #[derive(Clone, PartialEq, Eq)]\n pub struct VtableFnPointerData<'tcx, N> {\n-    pub fn_ty: ty::Ty<'tcx>,\n+    pub fn_ty: Ty<'tcx>,\n     pub nested: Vec<N>\n }\n "}, {"sha": "d9c6843fad73a64d5cc92ff1eb39071607bd18a2", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use ty::{self, Ty, TypeFoldable, Substs};\n+use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n use util::ppaux;\n \n use std::fmt;\n@@ -57,12 +57,12 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_ty<'a>(&self, tcx: ty::TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> {\n+    pub fn def_ty<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> {\n         tcx.type_of(self.def_id())\n     }\n \n     #[inline]\n-    pub fn attrs<'a>(&self, tcx: ty::TyCtxt<'a, 'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n+    pub fn attrs<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n         tcx.get_attrs(self.def_id())\n     }\n }\n@@ -103,7 +103,7 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n         Instance { def: InstanceDef::Item(def_id), substs: substs }\n     }\n \n-    pub fn mono(tcx: ty::TyCtxt<'a, 'tcx, 'b>, def_id: DefId) -> Instance<'tcx> {\n+    pub fn mono(tcx: TyCtxt<'a, 'tcx, 'b>, def_id: DefId) -> Instance<'tcx> {\n         Instance::new(def_id, tcx.global_tcx().empty_substs_for_def_id(def_id))\n     }\n "}, {"sha": "84d7745a64f0a2218f81ff4d646da86b9553f602", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -386,7 +386,7 @@ impl Integer {\n         }\n     }\n \n-    pub fn to_ty<'a, 'tcx>(&self, tcx: &ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    pub fn to_ty<'a, 'tcx>(&self, tcx: &TyCtxt<'a, 'tcx, 'tcx>,\n                            signed: bool) -> Ty<'tcx> {\n         match (*self, signed) {\n             (I1, false) => tcx.types.u8,"}, {"sha": "45654b0f870201fcbb8aa37240e71ea2fba9275a", "filename": "src/librustc_back/target/armv7_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -16,7 +16,7 @@ use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n-    base.features = \"+v7,+thumb2,+vfp3,+d16,-neon\".to_string();\n+    base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,+d16,-neon\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args\n         .get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-march=armv7-a\".to_string());"}, {"sha": "6fb49a0908ff4cd5744f9d16f923fe21e48a33eb", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -34,7 +34,7 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::mem_categorization::ImmutabilityBlame;\n use rustc::middle::region;\n use rustc::middle::free_region::RegionRelations;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n \n@@ -275,7 +275,7 @@ impl<'tcx> Loan<'tcx> {\n #[derive(Eq)]\n pub struct LoanPath<'tcx> {\n     kind: LoanPathKind<'tcx>,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n }\n \n impl<'tcx> PartialEq for LoanPath<'tcx> {\n@@ -299,11 +299,11 @@ pub enum LoanPathKind<'tcx> {\n }\n \n impl<'tcx> LoanPath<'tcx> {\n-    fn new(kind: LoanPathKind<'tcx>, ty: ty::Ty<'tcx>) -> LoanPath<'tcx> {\n+    fn new(kind: LoanPathKind<'tcx>, ty: Ty<'tcx>) -> LoanPath<'tcx> {\n         LoanPath { kind: kind, ty: ty }\n     }\n \n-    fn to_type(&self) -> ty::Ty<'tcx> { self.ty }\n+    fn to_type(&self) -> Ty<'tcx> { self.ty }\n }\n \n // FIXME (pnkfelix): See discussion here"}, {"sha": "474622f3669131a0c54623a53376a8e942f3d864", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -114,6 +114,13 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         }\n     }\n \n+    pub fn with_capacity(nodes: usize, edges: usize) -> Graph<N, E> {\n+        Graph {\n+            nodes: SnapshotVec::with_capacity(nodes),\n+            edges: SnapshotVec::with_capacity(edges),\n+        }\n+    }\n+\n     // # Simple accessors\n \n     #[inline]"}, {"sha": "2da91918288bab77ff8266086a662ea150fc4aad", "filename": "src/librustc_data_structures/snapshot_vec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_data_structures%2Fsnapshot_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_data_structures%2Fsnapshot_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_vec.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -66,6 +66,13 @@ impl<D: SnapshotVecDelegate> SnapshotVec<D> {\n         }\n     }\n \n+    pub fn with_capacity(n: usize) -> SnapshotVec<D> {\n+        SnapshotVec {\n+            values: Vec::with_capacity(n),\n+            undo_log: Vec::new(),\n+        }\n+    }\n+\n     fn in_snapshot(&self) -> bool {\n         !self.undo_log.is_empty()\n     }"}, {"sha": "439cc3a4b844eafe0860a84c02e7d3e2545e03f2", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -85,20 +85,12 @@ impl LintPass for UnusedMut {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedMut {\n-    fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n-        if let hir::ExprMatch(_, ref arms, _) = e.node {\n-            for a in arms {\n-                self.check_unused_mut_pat(cx, &a.pats)\n-            }\n-        }\n+    fn check_arm(&mut self, cx: &LateContext, a: &hir::Arm) {\n+        self.check_unused_mut_pat(cx, &a.pats)\n     }\n \n-    fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n-        if let hir::StmtDecl(ref d, _) = s.node {\n-            if let hir::DeclLocal(ref l) = d.node {\n-                self.check_unused_mut_pat(cx, slice::ref_slice(&l.pat));\n-            }\n-        }\n+    fn check_local(&mut self, cx: &LateContext, l: &hir::Local) {\n+        self.check_unused_mut_pat(cx, slice::ref_slice(&l.pat));\n     }\n \n     fn check_fn(&mut self,"}, {"sha": "ade2612855e02e8462deb2dc7e7a48d3eefeb8a5", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -14,7 +14,7 @@ use isolated_encoder::IsolatedEncoder;\n use schema::*;\n \n use rustc::hir;\n-use rustc::ty;\n+use rustc::ty::{self, TyCtxt};\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct Ast<'tcx> {\n@@ -59,7 +59,7 @@ impl<'a, 'b, 'tcx> IsolatedEncoder<'a, 'b, 'tcx> {\n }\n \n struct NestedBodyCollector<'a, 'tcx: 'a> {\n-    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     bodies_found: Vec<&'tcx hir::Body>,\n }\n "}, {"sha": "dfddbfe485dd961fd2fd373d78b3c22e4a7cd391", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -16,7 +16,7 @@\n use build::CFG;\n use rustc::middle::region;\n use rustc::mir::*;\n-use rustc::ty;\n+use rustc::ty::TyCtxt;\n \n impl<'tcx> CFG<'tcx> {\n     pub fn block_data(&self, blk: BasicBlock) -> &BasicBlockData<'tcx> {\n@@ -46,7 +46,7 @@ impl<'tcx> CFG<'tcx> {\n     }\n \n     pub fn push_end_region<'a, 'gcx:'a+'tcx>(&mut self,\n-                                             tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n+                                             tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                              block: BasicBlock,\n                                              source_info: SourceInfo,\n                                              region_scope: region::Scope) {"}, {"sha": "f0b6a4fcfd9d757404f34de0ab43785035e91149", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -22,7 +22,7 @@ use hair::*;\n use rustc_const_math::{ConstInt, ConstIsize};\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::region;\n-use rustc::ty;\n+use rustc::ty::{self, Ty};\n use rustc::mir::*;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -291,7 +291,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn build_binary_op(&mut self, mut block: BasicBlock,\n-                           op: BinOp, span: Span, ty: ty::Ty<'tcx>,\n+                           op: BinOp, span: Span, ty: Ty<'tcx>,\n                            lhs: Operand<'tcx>, rhs: Operand<'tcx>) -> BlockAnd<Rvalue<'tcx>> {\n         let source_info = self.source_info(span);\n         let bool_ty = self.hir.bool_ty();\n@@ -378,7 +378,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n \n     // Helper to get a `-1` value of the appropriate type\n-    fn neg_1_literal(&mut self, span: Span, ty: ty::Ty<'tcx>) -> Operand<'tcx> {\n+    fn neg_1_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n         let literal = match ty.sty {\n             ty::TyInt(ity) => {\n                 let val = match ity {\n@@ -410,7 +410,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n \n     // Helper to get the minimum value of the appropriate type\n-    fn minval_literal(&mut self, span: Span, ty: ty::Ty<'tcx>) -> Operand<'tcx> {\n+    fn minval_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n         let literal = match ty.sty {\n             ty::TyInt(ity) => {\n                 let val = match ity {"}, {"sha": "3162242de66c51b8be59e7ce5c1adc27d22ea8a0", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -19,7 +19,7 @@ use rustc::mir::{BinOp, BorrowKind, Field, Literal, UnOp};\n use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, AdtDef, ClosureSubsts, Region, Ty, GeneratorInterior};\n+use rustc::ty::{AdtDef, ClosureSubsts, Region, Ty, GeneratorInterior};\n use rustc::hir;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -117,7 +117,7 @@ pub enum ExprKind<'tcx> {\n         value: ExprRef<'tcx>,\n     },\n     Call {\n-        ty: ty::Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         fun: ExprRef<'tcx>,\n         args: Vec<ExprRef<'tcx>>,\n     },"}, {"sha": "3c9d95ca215744a240ed87b4ad50597b5edd80ab", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -14,7 +14,7 @@ use rustc::infer;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::ty::maps::Providers;\n use rustc_const_math::{ConstInt, ConstUsize};\n@@ -36,7 +36,7 @@ pub fn provide(providers: &mut Providers) {\n     providers.mir_shims = make_shim;\n }\n \n-fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        instance: ty::InstanceDef<'tcx>)\n                        -> &'tcx Mir<'tcx>\n {\n@@ -154,7 +154,7 @@ fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>, span: Span)\n         .collect()\n }\n \n-fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              def_id: DefId,\n                              ty: Option<Ty<'tcx>>)\n                              -> Mir<'tcx>\n@@ -235,7 +235,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n pub struct DropShimElaborator<'a, 'tcx: 'a> {\n     pub mir: &'a Mir<'tcx>,\n     pub patch: MirPatch<'tcx>,\n-    pub tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n }\n \n@@ -250,7 +250,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx> { &mut self.patch }\n     fn mir(&self) -> &'a Mir<'tcx> { self.mir }\n-    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n+    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n     fn param_env(&self) -> ty::ParamEnv<'tcx> { self.param_env }\n \n     fn drop_style(&self, _path: Self::Path, mode: DropFlagMode) -> DropStyle {\n@@ -280,9 +280,9 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n }\n \n /// Build a `Clone::clone` shim for `self_ty`. Here, `def_id` is `Clone::clone`.\n-fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn build_clone_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               def_id: DefId,\n-                              self_ty: ty::Ty<'tcx>)\n+                              self_ty: Ty<'tcx>)\n                               -> Mir<'tcx>\n {\n     debug!(\"build_clone_shim(def_id={:?})\", def_id);\n@@ -306,7 +306,7 @@ fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n struct CloneShimBuilder<'a, 'tcx: 'a> {\n-    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n@@ -315,7 +315,7 @@ struct CloneShimBuilder<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n-    fn new(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Self {\n+    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Self {\n         let sig = tcx.fn_sig(def_id);\n         let sig = tcx.erase_late_bound_regions(&sig);\n         let span = tcx.def_span(def_id);\n@@ -382,7 +382,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         self.block(vec![ret_statement], TerminatorKind::Return, false);\n     }\n \n-    fn make_lvalue(&mut self, mutability: Mutability, ty: ty::Ty<'tcx>) -> Lvalue<'tcx> {\n+    fn make_lvalue(&mut self, mutability: Mutability, ty: Ty<'tcx>) -> Lvalue<'tcx> {\n         let span = self.span;\n         Lvalue::Local(\n             self.local_decls.push(temp_decl(mutability, ty, span))\n@@ -391,7 +391,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n \n     fn make_clone_call(\n         &mut self,\n-        ty: ty::Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         rcvr_field: Lvalue<'tcx>,\n         next: BasicBlock,\n         cleanup: BasicBlock\n@@ -487,7 +487,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         }\n     }\n \n-    fn array_shim(&mut self, ty: ty::Ty<'tcx>, len: u64) {\n+    fn array_shim(&mut self, ty: Ty<'tcx>, len: u64) {\n         let tcx = self.tcx;\n         let span = self.span;\n         let rcvr = Lvalue::Local(Local::new(1+0)).deref();\n@@ -613,7 +613,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         self.block(vec![], TerminatorKind::Resume, true);\n     }\n \n-    fn tuple_shim(&mut self, tys: &ty::Slice<ty::Ty<'tcx>>) {\n+    fn tuple_shim(&mut self, tys: &ty::Slice<Ty<'tcx>>) {\n         let rcvr = Lvalue::Local(Local::new(1+0)).deref();\n \n         let mut returns = Vec::new();\n@@ -666,7 +666,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n ///\n /// If `untuple_args` is a vec of types, the second argument of the\n /// function will be untupled as these types.\n-fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              def_id: DefId,\n                              rcvr_adjustment: Adjustment,\n                              call_kind: CallKind,"}, {"sha": "c833904adbaea6b7dab2067a375887e9ff8f37e3", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n         self.ctxt.mir\n     }\n \n-    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> {\n         self.ctxt.tcx\n     }\n "}, {"sha": "3b9772079adb9c90546cdec00bb07b5137010d8f", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -13,7 +13,7 @@ use rustc::hir;\n use rustc::mir::*;\n use rustc::middle::const_val::{ConstInt, ConstVal};\n use rustc::middle::lang_items;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, Substs};\n use rustc::ty::util::IntTypeExt;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -84,7 +84,7 @@ pub trait DropElaborator<'a, 'tcx: 'a> : fmt::Debug {\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx>;\n     fn mir(&self) -> &'a Mir<'tcx>;\n-    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx>;\n+    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx>;\n     fn param_env(&self) -> ty::ParamEnv<'tcx>;\n \n     fn drop_style(&self, path: Self::Path, mode: DropFlagMode) -> DropStyle;\n@@ -133,7 +133,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         lvalue.ty(self.elaborator.mir(), self.tcx()).to_ty(self.tcx())\n     }\n \n-    fn tcx(&self) -> ty::TyCtxt<'b, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'b, 'tcx, 'tcx> {\n         self.elaborator.tcx()\n     }\n "}, {"sha": "08266e86f97933e491a861022f369ecb70ebc5b5", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -107,14 +107,32 @@ pub fn build_link_meta(incremental_hashes_map: &IncrementalHashesMap) -> LinkMet\n pub fn get_linker(sess: &Session) -> (String, Command, Vec<(OsString, OsString)>) {\n     let envs = vec![(\"PATH\".into(), command_path(sess))];\n \n+    // If our linker looks like a batch script on Windows then to execute this\n+    // we'll need to spawn `cmd` explicitly. This is primarily done to handle\n+    // emscripten where the linker is `emcc.bat` and needs to be spawned as\n+    // `cmd /c emcc.bat ...`.\n+    //\n+    // This worked historically but is needed manually since #42436 (regression\n+    // was tagged as #42791) and some more info can be found on #44443 for\n+    // emscripten itself.\n+    let cmd = |linker: &str| {\n+        if cfg!(windows) && linker.ends_with(\".bat\") {\n+            let mut cmd = Command::new(\"cmd\");\n+            cmd.arg(\"/c\").arg(linker);\n+            cmd\n+        } else {\n+            Command::new(linker)\n+        }\n+    };\n+\n     if let Some(ref linker) = sess.opts.cg.linker {\n-        (linker.clone(), Command::new(linker), envs)\n+        (linker.clone(), cmd(linker), envs)\n     } else if sess.target.target.options.is_like_msvc {\n         let (cmd, envs) = msvc_link_exe_cmd(sess);\n         (\"link.exe\".to_string(), cmd, envs)\n     } else {\n         let linker = &sess.target.target.options.linker;\n-        (linker.clone(), Command::new(&linker), envs)\n+        (linker.clone(), cmd(linker), envs)\n     }\n }\n "}, {"sha": "f0d8c7e9bfbca2cbcd3f04780bc1d4c07877a6c4", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -197,7 +197,7 @@ use rustc::middle::const_val::ConstVal;\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem};\n use rustc::traits;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, TypeFoldable, TyCtxt};\n+use rustc::ty::{self, TypeFoldable, Ty, TyCtxt};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::mir::{self, Location};\n use rustc::mir::visit::Visitor as MirVisitor;\n@@ -648,7 +648,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n }\n \n fn visit_drop_use<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n-                            ty: ty::Ty<'tcx>,\n+                            ty: Ty<'tcx>,\n                             is_direct_call: bool,\n                             output: &mut Vec<TransItem<'tcx>>)\n {\n@@ -657,7 +657,7 @@ fn visit_drop_use<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n }\n \n fn visit_fn_use<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n-                          ty: ty::Ty<'tcx>,\n+                          ty: Ty<'tcx>,\n                           is_direct_call: bool,\n                           output: &mut Vec<TransItem<'tcx>>)\n {\n@@ -776,10 +776,10 @@ fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instan\n /// Finally, there is also the case of custom unsizing coercions, e.g. for\n /// smart pointers such as `Rc` and `Arc`.\n fn find_vtable_types_for_unsizing<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n-                                            source_ty: ty::Ty<'tcx>,\n-                                            target_ty: ty::Ty<'tcx>)\n-                                            -> (ty::Ty<'tcx>, ty::Ty<'tcx>) {\n-    let ptr_vtable = |inner_source: ty::Ty<'tcx>, inner_target: ty::Ty<'tcx>| {\n+                                            source_ty: Ty<'tcx>,\n+                                            target_ty: Ty<'tcx>)\n+                                            -> (Ty<'tcx>, Ty<'tcx>) {\n+    let ptr_vtable = |inner_source: Ty<'tcx>, inner_target: Ty<'tcx>| {\n         if !scx.type_is_sized(inner_source) {\n             (inner_source, inner_target)\n         } else {\n@@ -836,8 +836,8 @@ fn create_fn_trans_item<'a, 'tcx>(instance: Instance<'tcx>) -> TransItem<'tcx> {\n /// Creates a `TransItem` for each method that is referenced by the vtable for\n /// the given trait/impl pair.\n fn create_trans_items_for_vtable_methods<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n-                                                   trait_ty: ty::Ty<'tcx>,\n-                                                   impl_ty: ty::Ty<'tcx>,\n+                                                   trait_ty: Ty<'tcx>,\n+                                                   impl_ty: Ty<'tcx>,\n                                                    output: &mut Vec<TransItem<'tcx>>) {\n     assert!(!trait_ty.needs_subst() && !trait_ty.has_escaping_regions() &&\n             !impl_ty.needs_subst() && !impl_ty.has_escaping_regions());"}, {"sha": "4211be362ef19e0a0bcd7d96326701e11ef31160", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -104,7 +104,7 @@ pub struct LocalCrateContext<'a, 'tcx: 'a> {\n     /// Cache instances of monomorphic and polymorphic items\n     instances: RefCell<FxHashMap<Instance<'tcx>, ValueRef>>,\n     /// Cache generated vtables\n-    vtables: RefCell<FxHashMap<(ty::Ty<'tcx>,\n+    vtables: RefCell<FxHashMap<(Ty<'tcx>,\n                                 Option<ty::PolyExistentialTraitRef<'tcx>>), ValueRef>>,\n     /// Cache of constant strings,\n     const_cstr_cache: RefCell<FxHashMap<InternedString, ValueRef>>,\n@@ -512,7 +512,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     }\n \n     pub fn vtables<'a>(&'a self)\n-        -> &'a RefCell<FxHashMap<(ty::Ty<'tcx>,\n+        -> &'a RefCell<FxHashMap<(Ty<'tcx>,\n                                   Option<ty::PolyExistentialTraitRef<'tcx>>), ValueRef>> {\n         &self.local().vtables\n     }"}, {"sha": "3c8ff45499780e5481ad8d4381da880340add6dc", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -22,7 +22,7 @@\n \n use llvm::{self, ValueRef};\n use llvm::AttributePlace::Function;\n-use rustc::ty;\n+use rustc::ty::Ty;\n use rustc::session::config::Sanitizer;\n use abi::{Abi, FnType};\n use attributes;\n@@ -119,7 +119,7 @@ pub fn declare_cfn(ccx: &CrateContext, name: &str, fn_type: Type) -> ValueRef {\n /// If there\u2019s a value with the same name already declared, the function will\n /// update the declaration and return existing ValueRef instead.\n pub fn declare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n-                            fn_type: ty::Ty<'tcx>) -> ValueRef {\n+                            fn_type: Ty<'tcx>) -> ValueRef {\n     debug!(\"declare_rust_fn(name={:?}, fn_type={:?})\", name, fn_type);\n     let sig = common::ty_fn_sig(ccx, fn_type);\n     let sig = ccx.tcx().erase_late_bound_regions_and_normalize(&sig);\n@@ -164,7 +164,7 @@ pub fn define_global(ccx: &CrateContext, name: &str, ty: Type) -> Option<ValueRe\n /// can happen with #[no_mangle] or #[export_name], for example.\n pub fn define_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                            name: &str,\n-                           fn_type: ty::Ty<'tcx>) -> ValueRef {\n+                           fn_type: Ty<'tcx>) -> ValueRef {\n     if get_defined_value(ccx, name).is_some() {\n         ccx.sess().fatal(&format!(\"symbol `{}` already defined\", name))\n     } else {\n@@ -179,7 +179,7 @@ pub fn define_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n /// can happen with #[no_mangle] or #[export_name], for example.\n pub fn define_internal_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                     name: &str,\n-                                    fn_type: ty::Ty<'tcx>) -> ValueRef {\n+                                    fn_type: Ty<'tcx>) -> ValueRef {\n     let llfn = define_fn(ccx, name, fn_type);\n     unsafe { llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::InternalLinkage) };\n     llfn"}, {"sha": "9abfbb3279ce0315f9e404c2fa7701f0a6d99032", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -18,7 +18,7 @@ use machine;\n use monomorphize;\n use type_::Type;\n use value::Value;\n-use rustc::ty;\n+use rustc::ty::{self, Ty};\n \n #[derive(Copy, Clone, Debug)]\n pub struct VirtualIndex(usize);\n@@ -63,7 +63,7 @@ impl<'a, 'tcx> VirtualIndex {\n /// making an object `Foo<Trait>` from a value of type `Foo<T>`, then\n /// `trait_ref` would map `T:Trait`.\n pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                            ty: ty::Ty<'tcx>,\n+                            ty: Ty<'tcx>,\n                             trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>)\n                             -> ValueRef\n {"}, {"sha": "1105da436189fe29e0f8d0d966d1a7a122532f58", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -11,7 +11,7 @@\n use llvm::{self, ValueRef, BasicBlockRef};\n use rustc::middle::lang_items;\n use rustc::middle::const_val::{ConstEvalErr, ConstInt, ErrKind};\n-use rustc::ty::{self, TypeFoldable};\n+use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, LayoutTyper};\n use rustc::mir;\n use abi::{Abi, FnType, ArgType};\n@@ -119,7 +119,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             fn_ty: FnType<'tcx>,\n             fn_ptr: ValueRef,\n             llargs: &[ValueRef],\n-            destination: Option<(ReturnDest, ty::Ty<'tcx>, mir::BasicBlock)>,\n+            destination: Option<(ReturnDest, Ty<'tcx>, mir::BasicBlock)>,\n             cleanup: Option<mir::BasicBlock>\n         | {\n             if let Some(cleanup) = cleanup {"}, {"sha": "610d07efa359df0d82dca7a02c8c7ee38bfeb57b", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -268,7 +268,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(\n ///\n pub fn check_safety_of_destructor_if_necessary<'a, 'gcx, 'tcx>(\n     rcx: &mut RegionCtxt<'a, 'gcx, 'tcx>,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n     span: Span,\n     scope: region::Scope)\n     -> Result<(), ErrorReported>"}, {"sha": "3861a358b23e0bace364eff331501ac590090dc7", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -423,8 +423,8 @@ fn match_intrinsic_type_to_type<'a, 'tcx>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         position: &str,\n         span: Span,\n-        structural_to_nominal: &mut FxHashMap<&'a intrinsics::Type, ty::Ty<'tcx>>,\n-        expected: &'a intrinsics::Type, t: ty::Ty<'tcx>)\n+        structural_to_nominal: &mut FxHashMap<&'a intrinsics::Type, Ty<'tcx>>,\n+        expected: &'a intrinsics::Type, t: Ty<'tcx>)\n {\n     use intrinsics::Type::*;\n "}, {"sha": "0afc482cb79db769a0ac7988169322826bfa51ec", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -15,7 +15,7 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::traits;\n-use rustc::ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n+use rustc::ty::{self, Ty, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n use rustc::ty::subst::Subst;\n use rustc::infer::{self, InferOk};\n \n@@ -102,7 +102,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn method_exists(&self,\n                          span: Span,\n                          method_name: ast::Name,\n-                         self_ty: ty::Ty<'tcx>,\n+                         self_ty: Ty<'tcx>,\n                          call_expr_id: ast::NodeId,\n                          allow_private: bool)\n                          -> bool {\n@@ -136,7 +136,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// * `supplied_method_types`: the explicit method type parameters, if any (`T1..Tn`)\n     /// * `self_expr`:             the self expression (`foo`)\n     pub fn lookup_method(&self,\n-                         self_ty: ty::Ty<'tcx>,\n+                         self_ty: Ty<'tcx>,\n                          segment: &hir::PathSegment,\n                          span: Span,\n                          call_expr: &'gcx hir::Expr,\n@@ -206,7 +206,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn lookup_probe(&self,\n                     span: Span,\n                     method_name: ast::Name,\n-                    self_ty: ty::Ty<'tcx>,\n+                    self_ty: Ty<'tcx>,\n                     call_expr: &'gcx hir::Expr,\n                     scope: ProbeScope)\n                     -> probe::PickResult<'tcx> {\n@@ -229,8 +229,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   span: Span,\n                                   m_name: ast::Name,\n                                   trait_def_id: DefId,\n-                                  self_ty: ty::Ty<'tcx>,\n-                                  opt_input_types: Option<&[ty::Ty<'tcx>]>)\n+                                  self_ty: Ty<'tcx>,\n+                                  opt_input_types: Option<&[Ty<'tcx>]>)\n                                   -> Option<InferOk<'tcx, MethodCallee<'tcx>>> {\n         debug!(\"lookup_in_trait_adjusted(self_ty={:?}, \\\n                 m_name={}, trait_def_id={:?})\",\n@@ -347,7 +347,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn resolve_ufcs(&self,\n                         span: Span,\n                         method_name: ast::Name,\n-                        self_ty: ty::Ty<'tcx>,\n+                        self_ty: Ty<'tcx>,\n                         expr_id: ast::NodeId)\n                         -> Result<Def, MethodError<'tcx>> {\n         let mode = probe::Mode::Path;"}, {"sha": "d179b390a291868130709077558d33211a1ce055", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -45,7 +45,7 @@ use super::FnCtxt;\n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::infer::UpvarRegion;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -586,7 +586,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn var_name(tcx: ty::TyCtxt, var_hir_id: hir::HirId) -> ast::Name {\n+fn var_name(tcx: TyCtxt, var_hir_id: hir::HirId) -> ast::Name {\n     let var_node_id = tcx.hir.hir_to_node_id(var_hir_id);\n     tcx.hir.name(var_node_id)\n }"}, {"sha": "f17df8b22f3934e0c4943524d1d73148bf083bac", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -449,7 +449,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                                          fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n                                          method_sig: &hir::MethodSig,\n                                          method: &ty::AssociatedItem,\n-                                         self_ty: ty::Ty<'tcx>)\n+                                         self_ty: Ty<'tcx>)\n     {\n         // check that the type of the method's receiver matches the\n         // method's first parameter."}, {"sha": "b0f3ff3ef35bf13b0ba9270dc98b8b2d8a78771a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -1580,7 +1580,7 @@ pub enum SizedByDefault { Yes, No, }\n /// a region) to ty's notion of ty param bounds, which can either be user-defined traits, or the\n /// built-in trait (formerly known as kind): Send.\n pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n-                                        param_ty: ty::Ty<'tcx>,\n+                                        param_ty: Ty<'tcx>,\n                                         ast_bounds: &[hir::TyParamBound],\n                                         sized_by_default: SizedByDefault,\n                                         span: Span)\n@@ -1673,7 +1673,7 @@ fn compute_sig_of_foreign_fn_decl<'a, 'tcx>(\n     // ABIs are handled at all correctly.\n     if abi != abi::Abi::RustIntrinsic && abi != abi::Abi::PlatformIntrinsic\n             && !tcx.sess.features.borrow().simd_ffi {\n-        let check = |ast_ty: &hir::Ty, ty: ty::Ty| {\n+        let check = |ast_ty: &hir::Ty, ty: Ty| {\n             if ty.is_simd() {\n                 tcx.sess.struct_span_err(ast_ty.span,\n                               &format!(\"use of SIMD type `{}` in FFI is highly experimental and \\"}, {"sha": "5f55b9b06ef1b122d804e090a99b53c6be398b38", "filename": "src/librustc_typeck/constrained_type_params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_type_params.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc::util::nodemap::FxHashSet;\n \n@@ -86,7 +86,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n     }\n }\n \n-pub fn identify_constrained_type_params<'tcx>(tcx: ty::TyCtxt,\n+pub fn identify_constrained_type_params<'tcx>(tcx: TyCtxt,\n                                               predicates: &[ty::Predicate<'tcx>],\n                                               impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                               input_parameters: &mut FxHashSet<Parameter>)\n@@ -136,7 +136,7 @@ pub fn identify_constrained_type_params<'tcx>(tcx: ty::TyCtxt,\n /// which is determined by 1, which requires `U`, that is determined\n /// by 0. I should probably pick a less tangled example, but I can't\n /// think of any.\n-pub fn setup_constraining_predicates<'tcx>(tcx: ty::TyCtxt,\n+pub fn setup_constraining_predicates<'tcx>(tcx: TyCtxt,\n                                            predicates: &mut [ty::Predicate<'tcx>],\n                                            impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                            input_parameters: &mut FxHashSet<Parameter>)"}, {"sha": "658b42da9535084f0b6763844014ffead3f98b89", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -35,7 +35,7 @@ use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::traits::Reveal;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, AdtKind};\n+use rustc::ty::{self, Ty, AdtKind};\n use rustc::middle::stability;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_typeck::hir_ty_to_ty;\n@@ -978,7 +978,7 @@ impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<ty::Region<'tcx>, ty:\n     }\n }\n \n-impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<ty::Ty<'tcx>, ty::Region<'tcx>> {\n+impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>> {\n     fn clean(&self, cx: &DocContext) -> WherePredicate {\n         let ty::OutlivesPredicate(ref ty, ref lt) = *self;\n \n@@ -1895,7 +1895,7 @@ impl Clean<Type> for hir::Ty {\n     }\n }\n \n-impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n+impl<'tcx> Clean<Type> for Ty<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Type {\n         match self.sty {\n             ty::TyNever => Never,"}, {"sha": "96af22725782460e9f23e0d9f01e21306f222885", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -588,6 +588,9 @@ impl<K, V, S> HashMap<K, V, S>\n impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n     /// Creates an empty `HashMap`.\n     ///\n+    /// The hash map is initially created with a capacity of 0, so it will not allocate until it\n+    /// is first inserted into.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "51698ce7c17ca6caafc765cf14007946d44e84ec", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -125,6 +125,9 @@ pub struct HashSet<T, S = RandomState> {\n impl<T: Hash + Eq> HashSet<T, RandomState> {\n     /// Creates an empty `HashSet`.\n     ///\n+    /// The hash set is initially created with a capacity of 0, so it will not allocate until it\n+    /// is first inserted into.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "eea604943af8bd8f2f7177de7c80781fc7432053", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 89, "deletions": 1, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -10,7 +10,7 @@\n \n #![unstable(feature = \"ip\", reason = \"extra functionality has not been \\\n                                       scrutinized to the level that it should \\\n-                                      be stable\",\n+                                      be to be stable\",\n             issue = \"27709\")]\n \n use cmp::Ordering;\n@@ -342,6 +342,42 @@ impl Ipv4Addr {\n         }\n     }\n \n+    /// Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip_constructors)]\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// let addr = Ipv4Addr::localhost();\n+    /// assert_eq!(addr, Ipv4Addr::new(127, 0, 0, 1));\n+    /// ```\n+    #[unstable(feature = \"ip_constructors\",\n+               reason = \"requires greater scrutiny before stabilization\",\n+               issue = \"44582\")]\n+    pub fn localhost() -> Ipv4Addr {\n+        Ipv4Addr::new(127, 0, 0, 1)\n+    }\n+\n+    /// Creates a new IPv4 address representing an unspecified address: 0.0.0.0\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip_constructors)]\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// let addr = Ipv4Addr::unspecified();\n+    /// assert_eq!(addr, Ipv4Addr::new(0, 0, 0, 0));\n+    /// ```\n+    #[unstable(feature = \"ip_constructors\",\n+               reason = \"requires greater scrutiny before stabilization\",\n+               issue = \"44582\")]\n+    pub fn unspecified() -> Ipv4Addr {\n+        Ipv4Addr::new(0, 0, 0, 0)\n+    }\n+\n     /// Returns the four eight-bit integers that make up this address.\n     ///\n     /// # Examples\n@@ -788,6 +824,42 @@ impl Ipv6Addr {\n         Ipv6Addr { inner: addr }\n     }\n \n+    /// Creates a new IPv6 address representing localhost: `::1`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip_constructors)]\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::localhost();\n+    /// assert_eq!(addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n+    /// ```\n+    #[unstable(feature = \"ip_constructors\",\n+               reason = \"requires greater scrutiny before stabilization\",\n+               issue = \"44582\")]\n+    pub fn localhost() -> Ipv6Addr {\n+        Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1)\n+    }\n+\n+    /// Creates a new IPv6 address representing the unspecified address: `::`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip_constructors)]\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::unspecified();\n+    /// assert_eq!(addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));\n+    /// ```\n+    #[unstable(feature = \"ip_constructors\",\n+               reason = \"requires greater scrutiny before stabilization\",\n+               issue = \"44582\")]\n+    pub fn unspecified() -> Ipv6Addr {\n+        Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)\n+    }\n+\n     /// Returns the eight 16-bit segments that make up this address.\n     ///\n     /// # Examples\n@@ -1681,6 +1753,22 @@ mod tests {\n         assert_eq!(Ipv6Addr::from(0x112233445566778899aabbccddeeff11u128), a);\n     }\n \n+    #[test]\n+    fn ipv4_from_constructors() {\n+        assert_eq!(Ipv4Addr::localhost(), Ipv4Addr::new(127, 0, 0, 1));\n+        assert!(Ipv4Addr::localhost().is_loopback());\n+        assert_eq!(Ipv4Addr::unspecified(), Ipv4Addr::new(0, 0, 0, 0));\n+        assert!(Ipv4Addr::unspecified().is_unspecified());\n+    }\n+\n+    #[test]\n+    fn ipv6_from_contructors() {\n+        assert_eq!(Ipv6Addr::localhost(), Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n+        assert!(Ipv6Addr::localhost().is_loopback());\n+        assert_eq!(Ipv6Addr::unspecified(), Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));\n+        assert!(Ipv6Addr::unspecified().is_unspecified());\n+    }\n+\n     #[test]\n     fn ipv4_from_octets() {\n         assert_eq!(Ipv4Addr::from([127, 0, 0, 1]), Ipv4Addr::new(127, 0, 0, 1))"}, {"sha": "3c76740d2b5dd3ab8c080170abb0fbcf88588bd3", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71e37674a1f1f876003c308429cc1ef4d15edf87/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -110,3 +110,11 @@ fn foo(mut a: isize) {\n     let mut a = 3;\n     let mut b = vec![2];\n }\n+\n+// make sure the lint attribute can be turned off on let statements\n+#[deny(unused_mut)]\n+fn bar() {\n+    #[allow(unused_mut)]\n+    let mut a = 3;\n+    let mut b = vec![2]; //~ ERROR: variable does not need to be mutable\n+}"}, {"sha": "0ddd53c4bc2a76df565a1c1fc0cc6f19f254b51e", "filename": "src/tools/rust-installer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer?ref=71e37674a1f1f876003c308429cc1ef4d15edf87", "patch": "@@ -1 +1 @@\n-Subproject commit adea17e1b22231a9036a619264b72565e3a3962f\n+Subproject commit 0ddd53c4bc2a76df565a1c1fc0cc6f19f254b51e"}]}