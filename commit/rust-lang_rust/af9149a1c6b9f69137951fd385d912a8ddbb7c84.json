{"sha": "af9149a1c6b9f69137951fd385d912a8ddbb7c84", "node_id": "C_kwDOAAsO6NoAKGFmOTE0OWExYzZiOWY2OTEzNzk1MWZkMzg1ZDkxMmE4ZGRiYjdjODQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-03T16:59:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-03T16:59:04Z"}, "message": "Add tool to generate intrinsics conversion automatically", "tree": {"sha": "835f9e2d422eb43befd4cc5e732b17073704eee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/835f9e2d422eb43befd4cc5e732b17073704eee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af9149a1c6b9f69137951fd385d912a8ddbb7c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af9149a1c6b9f69137951fd385d912a8ddbb7c84", "html_url": "https://github.com/rust-lang/rust/commit/af9149a1c6b9f69137951fd385d912a8ddbb7c84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af9149a1c6b9f69137951fd385d912a8ddbb7c84/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "035ac03521cd65bd9b5daf1128a0a3f67b939478", "url": "https://api.github.com/repos/rust-lang/rust/commits/035ac03521cd65bd9b5daf1128a0a3f67b939478", "html_url": "https://github.com/rust-lang/rust/commit/035ac03521cd65bd9b5daf1128a0a3f67b939478"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "ba11981a5e3c96b24df17e7339f8783486f4abac", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af9149a1c6b9f69137951fd385d912a8ddbb7c84/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/af9149a1c6b9f69137951fd385d912a8ddbb7c84/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=af9149a1c6b9f69137951fd385d912a8ddbb7c84", "patch": "@@ -20,3 +20,4 @@ res\n test-backend\n gcc_path\n benchmarks\n+tools/llvm-project"}, {"sha": "587db3679ef4e7429c7f0693131988443dc303aa", "filename": "tools/generate_intrinsics.py", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/af9149a1c6b9f69137951fd385d912a8ddbb7c84/tools%2Fgenerate_intrinsics.py", "raw_url": "https://github.com/rust-lang/rust/raw/af9149a1c6b9f69137951fd385d912a8ddbb7c84/tools%2Fgenerate_intrinsics.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fgenerate_intrinsics.py?ref=af9149a1c6b9f69137951fd385d912a8ddbb7c84", "patch": "@@ -0,0 +1,119 @@\n+import os\n+import re\n+import sys\n+import subprocess\n+from os import walk\n+\n+\n+LLVM_PATH = llvm_path = os.path.join(\n+    os.path.dirname(os.path.abspath(__file__)),\n+    \"llvm-project\",\n+)\n+\n+def run_command(command, cwd=None):\n+    p = subprocess.Popen(command, cwd=cwd)\n+    if p.wait() != 0:\n+        print(\"command `{}` failed...\".format(\" \".join(command)))\n+        sys.exit(1)\n+\n+\n+def clone_llvm_repository():\n+    if os.path.exists(LLVM_PATH):\n+        while True:\n+            choice = input(\"There is already a llvm-project folder, do you want to update it? [y/N]\")\n+            if choice == \"\" or choice.lower() == \"n\":\n+                print(\"Skipping repository update.\")\n+                return\n+            elif choice.lower() == \"y\":\n+                print(\"Updating repository...\")\n+                run_command([\"git\", \"pull\", \"origin\"], cwd=\"llvm-project\")\n+                return\n+            else:\n+                print(\"Didn't understand answer...\")\n+    print(\"Cloning LLVM repository...\")\n+    run_command([\"git\", \"clone\", \"https://github.com/llvm/llvm-project\", \"--depth\", \"1\", LLVM_PATH])\n+\n+\n+def extract_instrinsics(intrinsics, file):\n+    print(\"Extracting intrinsics from `{}`...\".format(file))\n+    with open(file, \"r\", encoding=\"utf8\") as f:\n+        content = f.read()\n+\n+    lines = content.splitlines()\n+    pos = 0\n+    current_arch = None\n+    while pos < len(lines):\n+        line = lines[pos].strip()\n+        if line.startswith(\"let TargetPrefix =\"):\n+            current_arch = line.split('\"')[1].strip()\n+            if len(current_arch) == 0:\n+                current_arch = None\n+        elif current_arch is None:\n+            pass\n+        elif line == \"}\":\n+            current_arch = None\n+        elif line.startswith(\"def \"):\n+            content = \"\"\n+            while not content.endswith(\";\") and pos < len(lines):\n+                line = lines[pos].split(\" // \")[0].strip()\n+                content += line\n+                pos += 1\n+            entries = re.findall('GCCBuiltin<\"(\\\\w+)\">', content)\n+            if len(entries) > 0:\n+                intrinsic = content.split(\":\")[0].split(\" \")[1].strip()\n+                intrinsic = intrinsic.split(\"_\")\n+                if len(intrinsic) < 2 or intrinsic[0] != \"int\":\n+                    continue\n+                intrinsic[0] = \"llvm\"\n+                intrinsic = \".\".join(intrinsic)\n+                if current_arch not in intrinsics:\n+                    intrinsics[current_arch] = []\n+                for entry in entries:\n+                    intrinsics[current_arch].append('\"{}\" => \"{}\",'.format(intrinsic, entry))\n+            continue\n+        pos += 1\n+        continue\n+    print(\"Done!\")\n+\n+\n+def update_intrinsics():\n+    files = []\n+    intrinsics_path = os.path.join(LLVM_PATH, \"llvm/include/llvm/IR\")\n+    for (dirpath, dirnames, filenames) in walk(intrinsics_path):\n+        files.extend([os.path.join(intrinsics_path, f) for f in filenames if f.endswith(\".td\")])\n+\n+    intrinsics = {}\n+    for file in files:\n+        extract_instrinsics(intrinsics, file)\n+\n+    archs = [arch for arch in intrinsics]\n+    archs.sort()\n+    output_file = os.path.join(\n+        os.path.dirname(os.path.abspath(__file__)),\n+        \"../src/intrinsic/archs.rs\",\n+    )\n+    print(\"Updating content of `{}`...\".format(output_file))\n+    with open(output_file, \"w\", encoding=\"utf8\") as out:\n+        out.write(\"// File generated by `rustc_codegen_gcc/tools/generate_intrinsics.py`\\n\")\n+        out.write(\"// DO NOT EDIT IT!\\n\")\n+        out.write(\"match name {\\n\")\n+        for arch in archs:\n+            if len(intrinsics[arch]) == 0:\n+                continue\n+            intrinsics[arch].sort()\n+            out.write('    // {}\\n'.format(arch))\n+            out.write('\\n'.join(['    {}'.format(x) for x in intrinsics[arch]]))\n+            out.write('\\n')\n+        out.write('    _ => unimplemented!(\"***** unsupported LLVM intrinsic {}\", name),\\n')\n+        out.write(\"}\\n\")\n+    print(\"Done!\")\n+\n+\n+def main():\n+    # First, we clone the LLVM repository if it's not already here.\n+    clone_llvm_repository()\n+    update_intrinsics()\n+\n+\n+if __name__ == \"__main__\":\n+    sys.exit(main())"}]}