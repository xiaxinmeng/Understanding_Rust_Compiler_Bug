{"sha": "bc9d13e65890ea79f429ba404d2771b97290215f", "node_id": "C_kwDOAAsO6NoAKGJjOWQxM2U2NTg5MGVhNzlmNDI5YmE0MDRkMjc3MWI5NzI5MDIxNWY", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-10T02:35:00Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-10T02:43:32Z"}, "message": "Add #[must_use] to math and bit manipulation methods\n\nAlso tidied up a few other nearby `#[must_use]`s.", "tree": {"sha": "265fce254683918cdc7c1962c9fba06d34176cc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/265fce254683918cdc7c1962c9fba06d34176cc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9d13e65890ea79f429ba404d2771b97290215f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9d13e65890ea79f429ba404d2771b97290215f", "html_url": "https://github.com/rust-lang/rust/commit/bc9d13e65890ea79f429ba404d2771b97290215f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9d13e65890ea79f429ba404d2771b97290215f/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb918d0a5bf22211df0423f7474e4e4056978007", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb918d0a5bf22211df0423f7474e4e4056978007", "html_url": "https://github.com/rust-lang/rust/commit/bb918d0a5bf22211df0423f7474e4e4056978007"}], "stats": {"total": 274, "additions": 255, "deletions": 19}, "files": [{"sha": "d214e90ea8419b96b7959803933887e72108f0da", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=bc9d13e65890ea79f429ba404d2771b97290215f", "patch": "@@ -636,6 +636,8 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"f32_deg_rad_conversions\", since = \"1.7.0\")]\n     #[inline]\n     pub fn to_degrees(self) -> f32 {\n@@ -653,6 +655,8 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"f32_deg_rad_conversions\", since = \"1.7.0\")]\n     #[inline]\n     pub fn to_radians(self) -> f32 {\n@@ -712,6 +716,8 @@ impl f32 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_approx_unchecked_to\", since = \"1.44.0\")]\n     #[inline]\n     pub unsafe fn to_int_unchecked<Int>(self) -> Int\n@@ -740,6 +746,8 @@ impl f32 {\n     /// assert_eq!((12.5f32).to_bits(), 0x41480000);\n     ///\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -802,6 +810,8 @@ impl f32 {\n     /// let bytes = 12.5f32.to_be_bytes();\n     /// assert_eq!(bytes, [0x41, 0x48, 0x00, 0x00]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -818,6 +828,8 @@ impl f32 {\n     /// let bytes = 12.5f32.to_le_bytes();\n     /// assert_eq!(bytes, [0x00, 0x00, 0x48, 0x41]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -847,6 +859,8 @@ impl f32 {\n     ///     }\n     /// );\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]"}, {"sha": "1d474ba00dec5cefc1703239e140d108cb912af3", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=bc9d13e65890ea79f429ba404d2771b97290215f", "patch": "@@ -649,6 +649,8 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_degrees(self) -> f64 {\n@@ -667,6 +669,8 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_radians(self) -> f64 {\n@@ -726,6 +730,8 @@ impl f64 {\n     /// * Not be `NaN`\n     /// * Not be infinite\n     /// * Be representable in the return type `Int`, after truncating off its fractional part\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_approx_unchecked_to\", since = \"1.44.0\")]\n     #[inline]\n     pub unsafe fn to_int_unchecked<Int>(self) -> Int\n@@ -754,6 +760,8 @@ impl f64 {\n     /// assert_eq!((12.5f64).to_bits(), 0x4029000000000000);\n     ///\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -816,6 +824,8 @@ impl f64 {\n     /// let bytes = 12.5f64.to_be_bytes();\n     /// assert_eq!(bytes, [0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -832,6 +842,8 @@ impl f64 {\n     /// let bytes = 12.5f64.to_le_bytes();\n     /// assert_eq!(bytes, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]);\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n@@ -861,6 +873,8 @@ impl f64 {\n     ///     }\n     /// );\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n     #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]"}, {"sha": "89c29208c0a33fe8fe14e143c2a122673e3ed92d", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=bc9d13e65890ea79f429ba404d2771b97290215f", "patch": "@@ -81,6 +81,8 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[doc(alias = \"popcount\")]\n         #[doc(alias = \"popcnt\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n \n@@ -95,6 +97,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_zeros(self) -> u32 {\n             (!self).count_ones()\n@@ -113,6 +117,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_zeros(self) -> u32 {\n             (self as $UnsignedT).leading_zeros()\n@@ -131,6 +137,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_zeros(self) -> u32 {\n             (self as $UnsignedT).trailing_zeros()\n@@ -149,6 +157,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_ones(self) -> u32 {\n             (self as $UnsignedT).leading_ones()\n@@ -167,6 +177,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_ones(self) -> u32 {\n             (self as $UnsignedT).trailing_ones()\n@@ -236,6 +248,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn swap_bytes(self) -> Self {\n             (self as $UnsignedT).swap_bytes() as Self\n@@ -257,8 +271,9 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.37.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n-        #[must_use]\n         pub const fn reverse_bits(self) -> Self {\n             (self as $UnsignedT).reverse_bits() as Self\n         }\n@@ -344,6 +359,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_be(self) -> Self { // or not to be?\n             #[cfg(target_endian = \"big\")]\n@@ -375,6 +392,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_le(self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -689,6 +708,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_neg(self) -> Option<Self> {\n             let (a, b) = self.overflowing_neg();\n@@ -801,6 +822,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_abs(self) -> Option<Self> {\n             if self.is_negative() {\n@@ -959,6 +982,8 @@ macro_rules! int_impl {\n \n         #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n         #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn saturating_neg(self) -> Self {\n             intrinsics::saturating_sub(0, self)\n@@ -980,6 +1005,8 @@ macro_rules! int_impl {\n \n         #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n         #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn saturating_abs(self) -> Self {\n             if self.is_negative() {\n@@ -1308,6 +1335,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn wrapping_neg(self) -> Self {\n             (0 as $SelfT).wrapping_sub(self)\n@@ -1390,6 +1419,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[allow(unused_attributes)]\n         #[inline]\n         pub const fn wrapping_abs(self) -> Self {\n@@ -1415,6 +1446,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"unsigned_abs\", since = \"1.51.0\")]\n         #[rustc_const_stable(feature = \"unsigned_abs\", since = \"1.51.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn unsigned_abs(self) -> $UnsignedT {\n              self.wrapping_abs() as $UnsignedT\n@@ -1781,6 +1814,8 @@ macro_rules! int_impl {\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[allow(unused_attributes)]\n         pub const fn overflowing_neg(self) -> (Self, bool) {\n             if unlikely!(self == Self::MIN) {\n@@ -1855,6 +1890,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn overflowing_abs(self) -> (Self, bool) {\n             (self.wrapping_abs(), self == Self::MIN)\n@@ -2219,7 +2256,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -2253,7 +2290,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -2287,7 +2324,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -2321,7 +2358,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log(self, base: Self) -> Option<u32> {\n             if self <= 0 || base <= 1 {\n@@ -2357,7 +2394,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log2(self) -> Option<u32> {\n             if self <= 0 {\n@@ -2381,7 +2418,7 @@ macro_rules! int_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log10(self) -> Option<u32> {\n             int_log10::$ActualT(self as $ActualT)\n@@ -2412,6 +2449,8 @@ macro_rules! int_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[allow(unused_attributes)]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn abs(self) -> Self {\n@@ -2443,6 +2482,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.abs_diff(\", stringify!($SelfT), \"::MAX), \", stringify!($UnsignedT), \"::MAX);\")]\n         /// ```\n         #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn abs_diff(self, other: Self) -> $UnsignedT {\n             if self < other {\n@@ -2482,6 +2523,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_sign\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn signum(self) -> Self {\n             match self {\n@@ -2536,6 +2579,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_be().to_ne_bytes()\n@@ -2554,6 +2599,8 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_le().to_ne_bytes()\n@@ -2588,6 +2635,8 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute them to arrays of bytes\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             // SAFETY: integers are plain old datatypes so we can always transmute them to"}, {"sha": "7314a4b23f9a17631398022bd70e9412476e966d", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=bc9d13e65890ea79f429ba404d2771b97290215f", "patch": "@@ -198,6 +198,8 @@ macro_rules! nonzero_leading_trailing_zeros {\n                 /// ```\n                 #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n                 #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn leading_zeros(self) -> u32 {\n                     // SAFETY: since `self` can not be zero it is safe to call ctlz_nonzero\n@@ -220,6 +222,8 @@ macro_rules! nonzero_leading_trailing_zeros {\n                 /// ```\n                 #[stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n                 #[rustc_const_stable(feature = \"nonzero_leading_trailing_zeros\", since = \"1.53.0\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn trailing_zeros(self) -> u32 {\n                     // SAFETY: since `self` can not be zero it is safe to call cttz_nonzero\n@@ -315,6 +319,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_add(self, other: $Int) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_add(other) {\n@@ -348,6 +354,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_add(self, other: $Int) -> $Ty {\n                     // SAFETY: $Int::saturating_add returns $Int::MAX on overflow\n@@ -378,6 +386,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const unsafe fn unchecked_add(self, other: $Int) -> $Ty {\n                     // SAFETY: The caller ensures there is no overflow.\n@@ -410,6 +420,8 @@ macro_rules! nonzero_unsigned_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_next_power_of_two(self) -> Option<$Ty> {\n                     if let Some(nz) = self.get().checked_next_power_of_two() {\n@@ -460,6 +472,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn abs(self) -> $Ty {\n                     // SAFETY: This cannot overflow to zero.\n@@ -490,6 +504,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_abs(self) -> Option<$Ty> {\n                     if let Some(nz) = self.get().checked_abs() {\n@@ -524,6 +540,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn overflowing_abs(self) -> ($Ty, bool) {\n                     let (nz, flag) = self.get().overflowing_abs();\n@@ -562,6 +580,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_abs(self) -> $Ty {\n                     // SAFETY: absolute value of nonzero cannot yield zero values.\n@@ -595,6 +615,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn wrapping_abs(self) -> $Ty {\n                     // SAFETY: absolute value of nonzero cannot yield zero values.\n@@ -628,6 +650,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn unsigned_abs(self) -> $Uty {\n                     // SAFETY: absolute value of nonzero cannot yield zero values.\n@@ -675,6 +699,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_mul(self, other: $Ty) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_mul(other.get()) {\n@@ -709,6 +735,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_mul(self, other: $Ty) -> $Ty {\n                     // SAFETY: saturating_mul returns u*::MAX on overflow\n@@ -749,6 +777,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const unsafe fn unchecked_mul(self, other: $Ty) -> $Ty {\n                     // SAFETY: The caller ensures there is no overflow.\n@@ -778,6 +808,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn checked_pow(self, other: u32) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_pow(other) {\n@@ -820,6 +852,8 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n                 #[inline]\n                 pub const fn saturating_pow(self, other: u32) -> $Ty {\n                     // SAFETY: saturating_pow returns u*::MAX on overflow"}, {"sha": "6e0401062890a417b8520f9221da9777bba1b9c0", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=bc9d13e65890ea79f429ba404d2771b97290215f", "patch": "@@ -474,6 +474,8 @@ macro_rules! saturating_int_impl {\n             #[inline]\n             #[doc(alias = \"popcount\")]\n             #[doc(alias = \"popcnt\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn count_ones(self) -> u32 {\n                 self.0.count_ones()\n@@ -492,6 +494,8 @@ macro_rules! saturating_int_impl {\n             #[doc = concat!(\"assert_eq!(Saturating(!0\", stringify!($t), \").count_zeros(), 0);\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn count_zeros(self) -> u32 {\n                 self.0.count_zeros()\n@@ -512,6 +516,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn trailing_zeros(self) -> u32 {\n                 self.0.trailing_zeros()\n@@ -538,6 +544,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(n.rotate_left(32), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 Saturating(self.0.rotate_left(n))\n@@ -564,6 +572,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(n.rotate_right(4), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 Saturating(self.0.rotate_right(n))\n@@ -588,6 +598,8 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(m, Saturating(21760));\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             pub const fn swap_bytes(self) -> Self {\n                 Saturating(self.0.swap_bytes())\n@@ -614,10 +626,11 @@ macro_rules! saturating_int_impl {\n             /// assert_eq!(m.0 as u16, 0b10101010_00000000);\n             /// assert_eq!(m, Saturating(-22016));\n             /// ```\n+            #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n             #[rustc_const_stable(feature = \"const_reverse_bits\", since = \"1.37.0\")]\n-            #[inline]\n-            #[must_use]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn reverse_bits(self) -> Self {\n                 Saturating(self.0.reverse_bits())\n             }\n@@ -699,6 +712,8 @@ macro_rules! saturating_int_impl {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn to_be(self) -> Self {\n                 Saturating(self.0.to_be())\n             }\n@@ -726,6 +741,8 @@ macro_rules! saturating_int_impl {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn to_le(self) -> Self {\n                 Saturating(self.0.to_le())\n             }\n@@ -754,6 +771,8 @@ macro_rules! saturating_int_impl {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn pow(self, exp: u32) -> Self {\n                 Saturating(self.0.saturating_pow(exp))\n             }\n@@ -782,6 +801,8 @@ macro_rules! saturating_int_impl_signed {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n             }\n@@ -805,6 +826,8 @@ macro_rules! saturating_int_impl_signed {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn abs(self) -> Saturating<$t> {\n                 Saturating(self.0.saturating_abs())\n             }\n@@ -829,6 +852,8 @@ macro_rules! saturating_int_impl_signed {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub fn signum(self) -> Saturating<$t> {\n                 Saturating(self.0.signum())\n             }\n@@ -908,6 +933,8 @@ macro_rules! saturating_int_impl_unsigned {\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n             }"}, {"sha": "b8f7da343a8b6c341cc4ed232945bba0474253f6", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=bc9d13e65890ea79f429ba404d2771b97290215f", "patch": "@@ -80,6 +80,8 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n         #[doc(alias = \"popcount\")]\n         #[doc(alias = \"popcnt\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_ones(self) -> u32 {\n             intrinsics::ctpop(self as $ActualT) as u32\n@@ -96,6 +98,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn count_zeros(self) -> u32 {\n             (!self).count_ones()\n@@ -114,6 +118,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_zeros(self) -> u32 {\n             intrinsics::ctlz(self as $ActualT) as u32\n@@ -133,6 +139,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_zeros(self) -> u32 {\n             intrinsics::cttz(self) as u32\n@@ -151,6 +159,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn leading_ones(self) -> u32 {\n             (!self).leading_zeros()\n@@ -170,6 +180,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn trailing_ones(self) -> u32 {\n             (!self).trailing_zeros()\n@@ -238,6 +250,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn swap_bytes(self) -> Self {\n             intrinsics::bswap(self as $ActualT) as Self\n@@ -259,8 +273,9 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.37.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n-        #[must_use]\n         pub const fn reverse_bits(self) -> Self {\n             intrinsics::bitreverse(self as $ActualT) as Self\n         }\n@@ -349,6 +364,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn to_be(self) -> Self { // or not to be?\n             #[cfg(target_endian = \"big\")]\n@@ -381,6 +398,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn to_le(self) -> Self {\n             #[cfg(target_endian = \"little\")]\n@@ -678,7 +697,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -712,7 +731,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -746,7 +765,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n@@ -780,7 +799,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log(self, base: Self) -> Option<u32> {\n             if self <= 0 || base <= 1 {\n@@ -816,7 +835,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log2(self) -> Option<u32> {\n             if self <= 0 {\n@@ -840,7 +859,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[unstable(feature = \"int_log\", issue = \"70887\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                        without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_log10(self) -> Option<u32> {\n             int_log10::$ActualT(self as $ActualT)\n@@ -861,6 +880,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn checked_neg(self) -> Option<Self> {\n             let (a, b) = self.overflowing_neg();\n@@ -1222,7 +1243,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                          without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n             intrinsics::wrapping_mul(self, rhs)\n@@ -1347,6 +1368,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         pub const fn wrapping_neg(self) -> Self {\n             (0 as $SelfT).wrapping_sub(self)\n@@ -1602,6 +1625,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(110), 10\", stringify!($SelfT), \");\")]\n         /// ```\n         #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn abs_diff(self, other: Self) -> Self {\n             if mem::size_of::<Self>() == 1 {\n@@ -1776,6 +1801,8 @@ macro_rules! uint_impl {\n         #[inline(always)]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         pub const fn overflowing_neg(self) -> (Self, bool) {\n             ((!self).wrapping_add(1), self != 0)\n         }\n@@ -1892,7 +1919,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n-                          without modifying the original\"]\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn pow(self, mut exp: u32) -> Self {\n@@ -1989,6 +2016,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_floor(4), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline(always)]\n         #[rustc_inherit_overflow_checks]\n         pub const fn unstable_div_floor(self, rhs: Self) -> Self {\n@@ -2010,6 +2039,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_ceil(4), 2);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn unstable_div_ceil(self, rhs: Self) -> Self {\n@@ -2133,6 +2164,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         pub const fn next_power_of_two(self) -> Self {\n@@ -2155,6 +2188,8 @@ macro_rules! uint_impl {\n         #[inline]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         pub const fn checked_next_power_of_two(self) -> Option<Self> {\n             self.one_less_than_next_power_of_two().checked_add(1)\n         }\n@@ -2177,6 +2212,8 @@ macro_rules! uint_impl {\n         #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n                    reason = \"needs decision on wrapping behaviour\")]\n         #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         pub const fn wrapping_next_power_of_two(self) -> Self {\n             self.one_less_than_next_power_of_two().wrapping_add(1)\n         }\n@@ -2194,6 +2231,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_be().to_ne_bytes()\n@@ -2212,6 +2251,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         #[inline]\n         pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_le().to_ne_bytes()\n@@ -2244,6 +2285,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute them to arrays of bytes\n         #[inline]"}, {"sha": "91c1981ca176caeb23c5b7df87466f99111988c5", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=bc9d13e65890ea79f429ba404d2771b97290215f", "patch": "@@ -469,6 +469,8 @@ macro_rules! wrapping_int_impl {\n             #[inline]\n             #[doc(alias = \"popcount\")]\n             #[doc(alias = \"popcnt\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn count_ones(self) -> u32 {\n                 self.0.count_ones()\n@@ -487,6 +489,8 @@ macro_rules! wrapping_int_impl {\n             #[doc = concat!(\"assert_eq!(Wrapping(!0\", stringify!($t), \").count_zeros(), 0);\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn count_zeros(self) -> u32 {\n                 self.0.count_zeros()\n@@ -507,6 +511,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn trailing_zeros(self) -> u32 {\n                 self.0.trailing_zeros()\n@@ -533,6 +539,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(n.rotate_left(32), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 Wrapping(self.0.rotate_left(n))\n@@ -559,6 +567,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(n.rotate_right(4), m);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 Wrapping(self.0.rotate_right(n))\n@@ -583,6 +593,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(m, Wrapping(21760));\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn swap_bytes(self) -> Self {\n                 Wrapping(self.0.swap_bytes())\n@@ -610,8 +622,9 @@ macro_rules! wrapping_int_impl {\n             /// ```\n             #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n             #[rustc_const_stable(feature = \"const_reverse_bits\", since = \"1.37.0\")]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[inline]\n-            #[must_use]\n             pub const fn reverse_bits(self) -> Self {\n                 Wrapping(self.0.reverse_bits())\n             }\n@@ -692,6 +705,8 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn to_be(self) -> Self {\n                 Wrapping(self.0.to_be())\n@@ -719,6 +734,8 @@ macro_rules! wrapping_int_impl {\n             /// }\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn to_le(self) -> Self {\n                 Wrapping(self.0.to_le())\n@@ -747,6 +764,8 @@ macro_rules! wrapping_int_impl {\n             /// assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn pow(self, exp: u32) -> Self {\n                 Wrapping(self.0.wrapping_pow(exp))\n@@ -775,6 +794,8 @@ macro_rules! wrapping_int_impl_signed {\n             /// assert_eq!(n.leading_zeros(), 3);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n@@ -801,6 +822,8 @@ macro_rules! wrapping_int_impl_signed {\n             /// assert_eq!(Wrapping(-128i8).abs().0 as u8, 128u8);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn abs(self) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_abs())\n@@ -825,6 +848,8 @@ macro_rules! wrapping_int_impl_signed {\n             #[doc = concat!(\"assert_eq!(Wrapping(-10\", stringify!($t), \").signum(), Wrapping(-1));\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub fn signum(self) -> Wrapping<$t> {\n                 Wrapping(self.0.signum())\n@@ -893,6 +918,8 @@ macro_rules! wrapping_int_impl_unsigned {\n             /// assert_eq!(n.leading_zeros(), 2);\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const fn leading_zeros(self) -> u32 {\n                 self.0.leading_zeros()\n@@ -935,6 +962,8 @@ macro_rules! wrapping_int_impl_unsigned {\n             #[doc = concat!(\"assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\")]\n             /// ```\n             #[inline]\n+            #[must_use = \"this returns the result of the operation, \\\n+                          without modifying the original\"]\n             #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n                        reason = \"needs decision on wrapping behaviour\")]\n             pub fn next_power_of_two(self) -> Self {"}, {"sha": "611e4111f57fc0897a86a6c7f05d27f4609080d1", "filename": "library/core/src/time.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9d13e65890ea79f429ba404d2771b97290215f/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=bc9d13e65890ea79f429ba404d2771b97290215f", "patch": "@@ -464,6 +464,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(1, 0).checked_add(Duration::new(u64::MAX, 0)), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_add(self, rhs: Duration) -> Option<Duration> {\n@@ -497,6 +499,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(1, 0).saturating_add(Duration::new(u64::MAX, 0)), Duration::MAX);\n     /// ```\n     #[stable(feature = \"duration_saturating_ops\", since = \"1.53.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn saturating_add(self, rhs: Duration) -> Duration {\n@@ -520,6 +524,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(0, 0).checked_sub(Duration::new(0, 1)), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n@@ -551,6 +557,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(0, 0).saturating_sub(Duration::new(0, 1)), Duration::ZERO);\n     /// ```\n     #[stable(feature = \"duration_saturating_ops\", since = \"1.53.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn saturating_sub(self, rhs: Duration) -> Duration {\n@@ -574,6 +582,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(u64::MAX - 1, 0).checked_mul(2), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_mul(self, rhs: u32) -> Option<Duration> {\n@@ -603,6 +613,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(u64::MAX - 1, 0).saturating_mul(2), Duration::MAX);\n     /// ```\n     #[stable(feature = \"duration_saturating_ops\", since = \"1.53.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn saturating_mul(self, rhs: u32) -> Duration {\n@@ -627,6 +639,8 @@ impl Duration {\n     /// assert_eq!(Duration::new(2, 0).checked_div(0), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn checked_div(self, rhs: u32) -> Option<Duration> {\n@@ -814,6 +828,8 @@ impl Duration {\n     /// assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn mul_f64(self, rhs: f64) -> Duration {\n@@ -836,6 +852,8 @@ impl Duration {\n     /// assert_eq!(dur.mul_f32(3.14e5), Duration::new(847799, 969_120_256));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn mul_f32(self, rhs: f32) -> Duration {\n@@ -857,6 +875,8 @@ impl Duration {\n     /// assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_598));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_f64(self, rhs: f64) -> Duration {\n@@ -880,6 +900,8 @@ impl Duration {\n     /// assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_598));\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_f32(self, rhs: f32) -> Duration {\n@@ -898,6 +920,8 @@ impl Duration {\n     /// assert_eq!(dur1.div_duration_f64(dur2), 0.5);\n     /// ```\n     #[unstable(feature = \"div_duration\", issue = \"63139\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_duration_f64(self, rhs: Duration) -> f64 {\n@@ -916,6 +940,8 @@ impl Duration {\n     /// assert_eq!(dur1.div_duration_f32(dur2), 0.5);\n     /// ```\n     #[unstable(feature = \"div_duration\", issue = \"63139\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     pub const fn div_duration_f32(self, rhs: Duration) -> f32 {"}]}