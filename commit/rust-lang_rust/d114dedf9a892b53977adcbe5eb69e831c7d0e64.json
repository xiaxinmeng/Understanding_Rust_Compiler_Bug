{"sha": "d114dedf9a892b53977adcbe5eb69e831c7d0e64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMTRkZWRmOWE4OTJiNTM5NzdhZGNiZTVlYjY5ZTgzMWM3ZDBlNjQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-23T19:13:38Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-23T20:28:05Z"}, "message": "Don't return unused values from zero_alloca and trans_stmt", "tree": {"sha": "93fa4bf5ae5bf74720766049357bb479cc10817f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93fa4bf5ae5bf74720766049357bb479cc10817f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d114dedf9a892b53977adcbe5eb69e831c7d0e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d114dedf9a892b53977adcbe5eb69e831c7d0e64", "html_url": "https://github.com/rust-lang/rust/commit/d114dedf9a892b53977adcbe5eb69e831c7d0e64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d114dedf9a892b53977adcbe5eb69e831c7d0e64/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abf002ad602e83cfc9b877c43f455a727f9ac477", "url": "https://api.github.com/repos/rust-lang/rust/commits/abf002ad602e83cfc9b877c43f455a727f9ac477", "html_url": "https://github.com/rust-lang/rust/commit/abf002ad602e83cfc9b877c43f455a727f9ac477"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "be5376bc2b6bf2720d5b62eaa3c9fe07acd74c78", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d114dedf9a892b53977adcbe5eb69e831c7d0e64/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d114dedf9a892b53977adcbe5eb69e831c7d0e64/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=d114dedf9a892b53977adcbe5eb69e831c7d0e64", "patch": "@@ -38,7 +38,7 @@ fn add_gc_root(cx: @block_ctxt, llval: ValueRef, ty: ty::t) -> @block_ctxt {\n \n     // FIXME (issue #839): For now, we are unconditionally zeroing out all\n     // GC-relevant types. Eventually we should use typestate for this.\n-    bcx = trans::zero_alloca(bcx, llval, ty).bcx;\n+    bcx = trans::zero_alloca(bcx, llval, ty);\n \n     let ti = none;\n     let td_r = get_tydesc(bcx, ty, false, tps_normal, ti);"}, {"sha": "68e6ed7d7da4ce45e3655d659b4180c0b583a3f2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d114dedf9a892b53977adcbe5eb69e831c7d0e64/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d114dedf9a892b53977adcbe5eb69e831c7d0e64/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d114dedf9a892b53977adcbe5eb69e831c7d0e64", "patch": "@@ -2073,15 +2073,15 @@ fn move_val(cx: @block_ctxt, action: copy_action, dst: ValueRef,\n         if src.is_mem { src_val = Load(cx, src_val); }\n         if action == DROP_EXISTING { cx = drop_ty(cx, dst, t); }\n         Store(cx, src_val, dst);\n-        if src.is_mem { ret zero_alloca(cx, src.val, t).bcx; }\n+        if src.is_mem { ret zero_alloca(cx, src.val, t); }\n \n         // If we're here, it must be a temporary.\n         ret revoke_clean(cx, src_val);\n     } else if ty::type_is_unique(tcx, t) ||\n                   type_is_structural_or_param(tcx, t) {\n         if action == DROP_EXISTING { cx = drop_ty(cx, dst, t); }\n         cx = memmove_ty(cx, dst, src_val, t);\n-        if src.is_mem { ret zero_alloca(cx, src_val, t).bcx; }\n+        if src.is_mem { ret zero_alloca(cx, src_val, t); }\n \n         // If we're here, it must be a temporary.\n         ret revoke_clean(cx, src_val);\n@@ -3798,7 +3798,7 @@ fn zero_and_revoke(bcx: @block_ctxt,\n                    to_revoke: [{v: ValueRef, t: ty::t}]) -> @block_ctxt {\n     let bcx = bcx;\n     for {v, t} in to_zero {\n-        bcx = zero_alloca(bcx, v, t).bcx;\n+        bcx = zero_alloca(bcx, v, t);\n     }\n     for {v, _} in to_revoke {\n         bcx = revoke_clean(bcx, v);\n@@ -4268,7 +4268,7 @@ fn with_out_method(work: fn(out_method) -> result, cx: @block_ctxt,\n         let tp = node_id_type(ccx, id);\n         if ty::type_is_nil(ccx.tcx, tp) { ret work(return); }\n         let res_alloca = alloc_ty(cx, tp);\n-        cx = zero_alloca(res_alloca.bcx, res_alloca.val, tp).bcx;\n+        cx = zero_alloca(res_alloca.bcx, res_alloca.val, tp);\n         let done = work(save_in(res_alloca.val));\n         let loaded = load_if_immediate(done.bcx, res_alloca.val, tp);\n         add_clean_temp(cx, loaded, tp);\n@@ -4590,7 +4590,7 @@ fn init_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n     add_clean(bcx, llptr, ty);\n \n     if must_zero(bcx_ccx(bcx), local) {\n-        bcx = zero_alloca(bcx, llptr, ty).bcx;\n+        bcx = zero_alloca(bcx, llptr, ty);\n     }\n \n     alt local.node.init {\n@@ -4661,7 +4661,8 @@ fn init_ref_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n                                         val.val, bcx.fcx.lllocals, false);\n }\n \n-fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t) -> result {\n+fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t)\n+    -> @block_ctxt {\n     let bcx = cx;\n     let ccx = bcx_ccx(cx);\n     if check type_has_static_size(ccx, t) {\n@@ -4674,10 +4675,10 @@ fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t) -> result {\n         // let llalign = align_of(llsz.bcx, t);\n         bcx = call_bzero(llsz.bcx, llptr, llsz.val, C_int(0)).bcx;\n     }\n-    rslt(bcx, llptr)\n+    ret bcx;\n }\n \n-fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> result {\n+fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n     // FIXME Fill in cx.sp\n \n     let bcx = cx;\n@@ -4699,7 +4700,7 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> result {\n       }\n       _ { bcx_ccx(cx).sess.unimpl(\"stmt variant\"); }\n     }\n-    rslt(bcx, C_nil())\n+    ret bcx;\n }\n \n // You probably don't want to use this one. See the\n@@ -4909,8 +4910,7 @@ fn trans_block(cx: @block_ctxt, b: ast::blk, output: out_method) -> result {\n     }\n     let r = rslt(bcx, C_nil());\n     for s: @ast::stmt in b.node.stmts {\n-        r = trans_stmt(bcx, *s);\n-        bcx = r.bcx;\n+        bcx = trans_stmt(bcx, *s);\n     }\n     fn accept_out_method(expr: @ast::expr) -> bool {\n         ret alt expr.node {"}]}