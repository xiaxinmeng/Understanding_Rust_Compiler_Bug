{"sha": "7ebd48d0061335d5c797a735721d0b16b322df6c", "node_id": "C_kwDOAAsO6NoAKDdlYmQ0OGQwMDYxMzM1ZDVjNzk3YTczNTcyMWQwYjE2YjMyMmRmNmM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-25T07:42:52Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-01T10:21:26Z"}, "message": "remove `TyS::same_type`\n\nit ignored regions and constants in adts,\nbut didn't do so for references or any other types.\nThis seemed quite weird", "tree": {"sha": "151d852a6b22a4ba27b1cb9cd909c896b813a620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/151d852a6b22a4ba27b1cb9cd909c896b813a620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ebd48d0061335d5c797a735721d0b16b322df6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebd48d0061335d5c797a735721d0b16b322df6c", "html_url": "https://github.com/rust-lang/rust/commit/7ebd48d0061335d5c797a735721d0b16b322df6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ebd48d0061335d5c797a735721d0b16b322df6c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25862ffc8d360b34dd8ec82a2f01750aaab976b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/25862ffc8d360b34dd8ec82a2f01750aaab976b7", "html_url": "https://github.com/rust-lang/rust/commit/25862ffc8d360b34dd8ec82a2f01750aaab976b7"}], "stats": {"total": 80, "additions": 30, "deletions": 50}, "files": [{"sha": "734b32bb92f1e88d4233b44de19690cc1769bbc1", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -2833,7 +2833,7 @@ impl ClashingExternDeclarations {\n                 return true;\n             }\n             let tcx = cx.tcx;\n-            if a == b || rustc_middle::ty::TyS::same_type(a, b) {\n+            if a == b {\n                 // All nominally-same types are structurally same, too.\n                 true\n             } else {"}, {"sha": "3e3473bea0ed2e5f70b6f0b8f7e5921a9cc338d6", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -893,19 +893,6 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n     }\n \n-    pub fn same_type(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n-        match (&a.kind(), &b.kind()) {\n-            (&Adt(did_a, substs_a), &Adt(did_b, substs_b)) => {\n-                if did_a != did_b {\n-                    return false;\n-                }\n-\n-                substs_a.types().zip(substs_b.types()).all(|(a, b)| Self::same_type(a, b))\n-            }\n-            _ => a == b,\n-        }\n-    }\n-\n     /// Peel off all reference types in this type until there are none left.\n     ///\n     /// This method is idempotent, i.e. `ty.peel_refs().peel_refs() == ty.peel_refs()`."}, {"sha": "2ed14b917781d695ffdbbd3da756119a70647801", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{\n     self,\n     subst::{GenericArgKind, Subst, SubstsRef},\n-    PredicateKind, Ty, TyCtxt, TyS,\n+    PredicateKind, Ty, TyCtxt,\n };\n use rustc_session::lint::builtin::FUNCTION_ITEM_REFERENCES;\n use rustc_span::{symbol::sym, Span};\n@@ -88,7 +88,7 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n                     for generic_inner_ty in arg_def.walk() {\n                         if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n                             // If the inner type matches the type bound by `Pointer`\n-                            if TyS::same_type(inner_ty, bound_ty) {\n+                            if inner_ty == bound_ty {\n                                 // Do a substitution using the parameters from the callsite\n                                 let subst_ty = inner_ty.subst(self.tcx, substs_ref);\n                                 if let Some((fn_id, fn_substs)) ="}, {"sha": "8cde93ed9d82a7b1c1cf0232cbab7d2eb1d87675", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -1555,7 +1555,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // `erase_late_bound_regions`.\n             let ty_erased = self.tcx.erase_late_bound_regions(ty);\n             let ty_erased = self.tcx.erase_regions(ty_erased);\n-            let eq = ty::TyS::same_type(ty_erased, target_ty_erased);\n+            let eq = ty_erased == target_ty_erased;\n             debug!(\n                 \"maybe_note_obligation_cause_for_async_await: ty_erased={:?} \\\n                     target_ty_erased={:?} eq={:?}\","}, {"sha": "1717959acc1586b0164df16a510d29a9a8b90efa", "filename": "compiler/rustc_ty_utils/src/representability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -322,7 +322,7 @@ fn is_type_structurally_recursive_inner<'tcx>(\n                 // struct Foo { Option<Option<Foo>> }\n \n                 for &seen_adt in iter {\n-                    if ty::TyS::same_type(ty, seen_adt) {\n+                    if ty == seen_adt {\n                         debug!(\"ContainsRecursive: {:?} contains {:?}\", seen_adt, ty);\n                         return Representability::ContainsRecursive;\n                     }"}, {"sha": "6d0851d804c26936e2fdb2c876a7f4ea370efac6", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TyS, TypeckResults};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeckResults};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span};\n \n@@ -448,7 +448,7 @@ fn try_parse_ref_op<'tcx>(\n // the reference.\n fn deref_method_same_type(result_ty: Ty<'_>, arg_ty: Ty<'_>) -> bool {\n     match (result_ty.kind(), arg_ty.kind()) {\n-        (ty::Ref(_, result_ty, _), ty::Ref(_, arg_ty, _)) => TyS::same_type(result_ty, arg_ty),\n+        (ty::Ref(_, result_ty, _), ty::Ref(_, arg_ty, _)) => result_ty == arg_ty,\n \n         // The result type for a deref method is always a reference\n         // Not matching the previous pattern means the argument type is not a reference"}, {"sha": "a2f943b03ef42c4f3f2e7518148e68d0ad615bec", "filename": "src/tools/clippy/clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind}\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{Ty, TyS, TypeckResults};\n+use rustc_middle::ty::{Ty, TypeckResults};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n@@ -346,7 +346,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n             if let TyKind::Path(QPath::Resolved(None, ty_path)) = ty.kind;\n             if let Some(ty_did) = ty_path.res.opt_def_id();\n             then {\n-                if !TyS::same_type(self.target.ty(), self.maybe_typeck_results.unwrap().expr_ty(e)) {\n+                if self.target.ty() != self.maybe_typeck_results.unwrap().expr_ty(e) {\n                     return;\n                 }\n "}, {"sha": "3418d276c53549d1cd55fc0bbad490fd782d3b08", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{\n     ItemKind, Mutability, Node, TraitItemRef, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, AssocKind, FnSig, Ty, TyS};\n+use rustc_middle::ty::{self, AssocKind, FnSig, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{\n     source_map::{Span, Spanned, Symbol},\n@@ -265,7 +265,7 @@ impl LenOutput<'_> {\n             (_, &ty::Bool) => true,\n             (Self::Option(id), &ty::Adt(adt, subs)) if id == adt.did => subs.type_at(0).is_bool(),\n             (Self::Result(id, err_ty), &ty::Adt(adt, subs)) if id == adt.did => {\n-                subs.type_at(0).is_bool() && TyS::same_type(subs.type_at(1), err_ty)\n+                subs.type_at(0).is_bool() && subs.type_at(1) == err_ty\n             },\n             _ => false,\n         }"}, {"sha": "175e2b382e3f6d03b3afef51d5259e6dbcbddd15", "filename": "src/tools/clippy/clippy_lints/src/loops/explicit_into_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -5,13 +5,12 @@ use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TyS;\n use rustc_span::symbol::sym;\n \n pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, call_expr: &Expr<'_>) {\n     let self_ty = cx.typeck_results().expr_ty(self_arg);\n     let self_ty_adjusted = cx.typeck_results().expr_ty_adjusted(self_arg);\n-    if !(TyS::same_type(self_ty, self_ty_adjusted) && is_trait_method(cx, call_expr, sym::IntoIterator)) {\n+    if !(self_ty == self_ty_adjusted && is_trait_method(cx, call_expr, sym::IntoIterator)) {\n         return;\n     }\n "}, {"sha": "5f5beccd030c171c4a1c80566b1c8e75fc16a59d", "filename": "src/tools/clippy/clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty, TyS};\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::sym;\n \n pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, method_name: &str) {\n@@ -22,7 +22,7 @@ pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, m\n                     mutbl: Mutability::Not,\n                 },\n             );\n-            TyS::same_type(receiver_ty_adjusted, ref_receiver_ty)\n+            receiver_ty_adjusted == ref_receiver_ty\n         },\n         _ => false,\n     };"}, {"sha": "e61cb4d227363c67529be6ecbef20cddb9122c16", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -26,7 +26,7 @@ use rustc_hir::{\n };\n use rustc_hir::{HirIdMap, HirIdSet};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, Ty, TyS, VariantDef};\n+use rustc_middle::ty::{self, Ty, VariantDef};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n@@ -2262,7 +2262,7 @@ fn lint_match_arms<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n                     };\n                     // the names technically don't have to match; this makes the lint more conservative\n                     if cx.tcx.hir().name(a_id) == cx.tcx.hir().name(b_id);\n-                    if TyS::same_type(cx.typeck_results().expr_ty(a), cx.typeck_results().expr_ty(b));\n+                    if cx.typeck_results().expr_ty(a) == cx.typeck_results().expr_ty(b);\n                     if pat_contains_local(lhs.pat, a_id);\n                     if pat_contains_local(rhs.pat, b_id);\n                     then {"}, {"sha": "30c68186b3aef1468033f63161c9c5a7f1d1d724", "filename": "src/tools/clippy/clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -8,7 +8,6 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TyS;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol};\n use std::borrow::Cow;\n@@ -149,7 +148,7 @@ pub(super) fn check<'tcx>(\n                 if_chain! {\n                     if path_to_local_id(a_path, filter_param_id);\n                     if path_to_local_id(b, map_param_id);\n-                    if TyS::same_type(cx.typeck_results().expr_ty_adjusted(a), cx.typeck_results().expr_ty_adjusted(b));\n+                    if cx.typeck_results().expr_ty_adjusted(a) == cx.typeck_results().expr_ty_adjusted(b);\n                     then {\n                         return true;\n                     }"}, {"sha": "7a255baffd745aa7855fb9a78be1f0762bbb0080", "filename": "src/tools/clippy/clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -6,7 +6,6 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TyS;\n use rustc_span::sym;\n \n use super::IMPLICIT_CLONE;\n@@ -19,7 +18,7 @@ pub fn check(cx: &LateContext<'_>, method_name: &str, expr: &hir::Expr<'_>, recv\n         let input_type = cx.typeck_results().expr_ty(recv);\n         let (input_type, ref_count) = peel_mid_ty_refs(input_type);\n         if let Some(ty_name) = input_type.ty_adt_def().map(|adt_def| cx.tcx.item_name(adt_def.did));\n-        if TyS::same_type(return_type, input_type);\n+        if return_type == input_type;\n         then {\n             let mut app = Applicability::MachineApplicable;\n             let recv_snip = snippet_with_context(cx, recv.span, expr.span.ctxt(), \"..\", &mut app).0;"}, {"sha": "80e1eb86e6c6c10aecc7d38f0afbc37b1f405c76", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -78,7 +78,7 @@ use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, PrimTy, QPath, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n+use rustc_middle::ty::{self, TraitRef, Ty};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n@@ -2195,7 +2195,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 }\n             }\n \n-            if name == \"new\" && !TyS::same_type(ret_ty, self_ty) {\n+            if name == \"new\" && ret_ty != self_ty {\n                 span_lint(\n                     cx,\n                     NEW_RET_NO_SELF,"}, {"sha": "ccfce31713f93469b7e620b8b65770abc1e2ad9f", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -5,7 +5,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, TyS};\n+use rustc_middle::ty;\n use rustc_span::sym;\n \n use super::UNNECESSARY_FILTER_MAP;\n@@ -34,7 +34,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n             let in_ty = cx.typeck_results().node_type(body.params[0].hir_id);\n             match cx.typeck_results().expr_ty(&body.value).kind() {\n                 ty::Adt(adt, subst)\n-                    if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && TyS::same_type(in_ty, subst.type_at(0)) =>\n+                    if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && in_ty == subst.type_at(0) =>\n                 {\n                     \"filter\"\n                 },"}, {"sha": "9d3d7d1f24cbc3dfa86f5a8166fd38eadc02ecd2", "filename": "src/tools/clippy/clippy_lints/src/needless_option_as_deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -4,7 +4,6 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n@@ -49,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n             if let ExprKind::MethodCall(path, [sub_expr], _) = expr.kind;\n             let symbol = path.ident.as_str();\n             if symbol == \"as_deref\" || symbol == \"as_deref_mut\";\n-            if TyS::same_type( outer_ty, typeck.expr_ty(sub_expr) );\n+            if outer_ty == typeck.expr_ty(sub_expr);\n             then{\n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "8f85b00596c019f248a290b2087771977257e377", "filename": "src/tools/clippy/clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::Applicability;\n use rustc_hir::LangItem::{OptionSome, ResultOk};\n use rustc_hir::{AsyncGeneratorKind, Block, Body, Expr, ExprKind, GeneratorKind, LangItem, MatchSource, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -128,7 +127,7 @@ fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if expr.span.ctxt() == inner_expr.span.ctxt();\n         let expr_ty = cx.typeck_results().expr_ty(expr);\n         let inner_ty = cx.typeck_results().expr_ty(inner_expr);\n-        if TyS::same_type(expr_ty, inner_ty);\n+        if expr_ty == inner_ty;\n         then {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "f86af7a7bb6eaddb736730d7ab682a417f90d3f0", "filename": "src/tools/clippy/clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -8,7 +8,6 @@ use rustc_hir as hir;\n use rustc_hir::HirIdSet;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n@@ -103,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             if cx.access_levels.is_reachable(impl_item.def_id);\n                             let self_def_id = cx.tcx.hir().get_parent_item(id);\n                             let self_ty = cx.tcx.type_of(self_def_id);\n-                            if TyS::same_type(self_ty, return_ty(cx, id));\n+                            if self_ty == return_ty(cx, id);\n                             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n                             then {\n                                 if self.impling_types.is_none() {"}, {"sha": "cd3aee5565538aa07cda95414baca765cb26f1b8", "filename": "src/tools/clippy/clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -6,7 +6,6 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, LangItem, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -54,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n             if addressee.span.ctxt() == ctxt;\n             if let ExprKind::Index(indexed, range) = addressee.kind;\n             if is_type_lang_item(cx, cx.typeck_results().expr_ty_adjusted(range), LangItem::RangeFull);\n-            if TyS::same_type(cx.typeck_results().expr_ty(expr), cx.typeck_results().expr_ty(indexed));\n+            if cx.typeck_results().expr_ty(expr) == cx.typeck_results().expr_ty(indexed);\n             then {\n                 let mut app = Applicability::MachineApplicable;\n                 let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;"}, {"sha": "971729e5c54b35d2bc05866d567fb08954247062", "filename": "src/tools/clippy/clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -7,7 +7,7 @@ use if_chain::if_chain;\n use rustc_hir::BinOpKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, Ty, TyS, TypeAndMut};\n+use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for SizeOfInElementCount {\n             // Find a size_of call in the count parameter expression and\n             // check that it's the same type\n             if let Some(ty_used_for_size_of) = get_size_of_ty(cx, count_expr, false);\n-            if TyS::same_type(pointee_ty, ty_used_for_size_of);\n+            if pointee_ty == ty_used_for_size_of;\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "7b5c5af8f79bfb1d761e92db4597a77443ea0160", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -102,7 +102,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 if let Some(typeck) = self.inner.maybe_typeck_results {\n                     let l_ty = typeck.pat_ty(l.pat);\n                     let r_ty = typeck.pat_ty(r.pat);\n-                    if !rustc_middle::ty::TyS::same_type(l_ty, r_ty) {\n+                    if l_ty != r_ty {\n                         return false;\n                     }\n                 }"}, {"sha": "819ff917b63364ac837ebf05477bd69707889ffb", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd48d0061335d5c797a735721d0b16b322df6c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=7ebd48d0061335d5c797a735721d0b16b322df6c", "patch": "@@ -42,7 +42,7 @@ pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool\n /// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n     ty.walk().any(|inner| match inner.unpack() {\n-        GenericArgKind::Type(inner_ty) => ty::TyS::same_type(other_ty, inner_ty),\n+        GenericArgKind::Type(inner_ty) => other_ty == inner_ty,\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n     })\n }"}]}