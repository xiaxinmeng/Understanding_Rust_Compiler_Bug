{"sha": "58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad", "node_id": "C_kwDOAAsO6NoAKDU4YTg4OGZjYzFmY2JjNTAwOTJkM2QwMGJjY2JhMWJkYmQyNGE2YWQ", "commit": {"author": {"name": "Anuvrat", "email": "anuvrats06@gmail.com", "date": "2021-12-14T18:00:34Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-30T18:59:19Z"}, "message": "Removed `in_band_lifetimes` from `rustc_traits`", "tree": {"sha": "e24250057fe384b992e8a57e2d6cc1159722a8f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e24250057fe384b992e8a57e2d6cc1159722a8f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmHOAY8ACgkQtAh+UQ6Y\nsWQQhw//dgt//b0ij0PoHXncqJRU12/XChq2EOzfRYnMUseV6Yur4XNWbNJciMeU\n0Tg2Q3eBevLH7q5LlMw30OoGAsxbfICrF/xX4LF4VkFJr6RZhdrtJrUj2xmK2Ro0\n/a++e3FURjjL4e6ODoAEbqH6StBAaW7+avtJMfcr3P3WxM4FAmqZqDTHj/2AoR58\ngVBQ1kxU08BLOVVh5uX2ohecv9B98eG9YhxNZp2xnmVyFpIXOarDOEx6O0u71WjI\nevYQrrc5GaNpmQWyFT7yEeDMaC7tqM03/L4wH1NFpXw0sAZuxPmcn7XDUVVF0FbV\n/kS0ROOgjmXUvWK4SF/AnVHASJ8EGbB1aXDj8ZTZmzZpmEQj381gkew//D6nROBp\n5l9wIONAM9wNWfuH503wkI3fJHIbpTS71QwbGNnrJiTsCHDqHzRrEQY26lPdjI0N\nDaZhHNRVw+C2b2+CU7MlwAxThRrQgsHH/CcX4FDiXke20Xw1EKW65yve7t55e/Yf\nPvLgwfb4a9ElM/NWsRSfjUuwdarAn7zam1Mbi3jqVEgEpOjeSfrsvpwj7qe1iPKv\nhoqf2U/SY81sSwNdMoeQmcBrvBRx2KfUnumfBHlLmHnTTdxlW4gaGCJyoB4PAwOd\nYk7h/L3DnW64Hcp2HrplV3Fu3SbEdWPj8R3klm/hi4V+BrfeARI=\n=O8N1\n-----END PGP SIGNATURE-----", "payload": "tree e24250057fe384b992e8a57e2d6cc1159722a8f2\nparent 7ca74ea0afe87b2cb173ea1fea190853c3c3d860\nauthor Anuvrat <anuvrats06@gmail.com> 1639504834 +0530\ncommitter Aaron Hill <aa1ronham@gmail.com> 1640890759 -0500\n\nRemoved `in_band_lifetimes` from `rustc_traits`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad", "html_url": "https://github.com/rust-lang/rust/commit/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad/comments", "author": {"login": "anuvratsingh", "id": 48148198, "node_id": "MDQ6VXNlcjQ4MTQ4MTk4", "avatar_url": "https://avatars.githubusercontent.com/u/48148198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anuvratsingh", "html_url": "https://github.com/anuvratsingh", "followers_url": "https://api.github.com/users/anuvratsingh/followers", "following_url": "https://api.github.com/users/anuvratsingh/following{/other_user}", "gists_url": "https://api.github.com/users/anuvratsingh/gists{/gist_id}", "starred_url": "https://api.github.com/users/anuvratsingh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anuvratsingh/subscriptions", "organizations_url": "https://api.github.com/users/anuvratsingh/orgs", "repos_url": "https://api.github.com/users/anuvratsingh/repos", "events_url": "https://api.github.com/users/anuvratsingh/events{/privacy}", "received_events_url": "https://api.github.com/users/anuvratsingh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ca74ea0afe87b2cb173ea1fea190853c3c3d860", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca74ea0afe87b2cb173ea1fea190853c3c3d860", "html_url": "https://github.com/rust-lang/rust/commit/7ca74ea0afe87b2cb173ea1fea190853c3c3d860"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "1ce2e922872c1144a97cc1630394f4015a526d31", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad", "patch": "@@ -722,7 +722,7 @@ impl<'tcx> chalk_ir::UnificationDatabase<RustInterner<'tcx>> for RustIrDatabase<\n /// var bound at index `0`. For types, we use a `BoundVar` index equal to\n /// the type parameter index. For regions, we use the `BoundRegionKind::BrNamed`\n /// variant (which has a `DefId`).\n-fn bound_vars_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n+fn bound_vars_for_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n     InternalSubsts::for_item(tcx, def_id, |param, substs| match param.kind {\n         ty::GenericParamDefKind::Type { .. } => tcx\n             .mk_ty(ty::Bound("}, {"sha": "90c698db8fb542eb212b88623332213d1ab8e7f6", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad", "patch": "@@ -138,7 +138,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n /// this down to determine what relationships would have to hold for\n /// `T: 'a` to hold. We get to assume that the caller has validated\n /// those relationships.\n-fn implied_bounds_from_components(\n+fn implied_bounds_from_components<'tcx>(\n     sub_region: ty::Region<'tcx>,\n     sup_components: SmallVec<[Component<'tcx>; 4]>,\n ) -> Vec<OutlivesBound<'tcx>> {"}, {"sha": "b814b984daeefcbd47ca7bb0f9a5bee18cdf28a8", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad", "patch": "@@ -2,7 +2,6 @@\n //! the guts are broken up into modules; see the comments in those modules.\n \n #![feature(crate_visibility_modifier)]\n-#![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "cee3e0ed1043ba975cf7aa831a1b48a567c53ae2", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad", "patch": "@@ -96,7 +96,7 @@ fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq +\n     })\n }\n \n-fn not_outlives_predicate(p: &ty::Predicate<'tcx>) -> bool {\n+fn not_outlives_predicate<'tcx>(p: &ty::Predicate<'tcx>) -> bool {\n     match p.kind().skip_binder() {\n         ty::PredicateKind::RegionOutlives(..) | ty::PredicateKind::TypeOutlives(..) => false,\n         ty::PredicateKind::Trait(..)"}, {"sha": "6fcac9fcdc622aa0fdedcfcff850a9d99854aee0", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=58a888fcc1fcbc50092d3d00bccba1bdbd24a6ad", "patch": "@@ -70,7 +70,7 @@ struct AscribeUserTypeCx<'me, 'tcx> {\n     fulfill_cx: &'me mut dyn TraitEngine<'tcx>,\n }\n \n-impl AscribeUserTypeCx<'me, 'tcx> {\n+impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n     fn normalize<T>(&mut self, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n@@ -195,7 +195,7 @@ fn type_op_eq<'tcx>(\n     })\n }\n \n-fn type_op_normalize<T>(\n+fn type_op_normalize<'tcx, T>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     key: ParamEnvAnd<'tcx, Normalize<T>>,\n@@ -210,28 +210,28 @@ where\n     Ok(value)\n }\n \n-fn type_op_normalize_ty(\n+fn type_op_normalize_ty<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Ty<'tcx>>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n-fn type_op_normalize_predicate(\n+fn type_op_normalize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Predicate<'tcx>>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, Predicate<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n-fn type_op_normalize_fn_sig(\n+fn type_op_normalize_fn_sig<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<FnSig<'tcx>>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, FnSig<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n-fn type_op_normalize_poly_fn_sig(\n+fn type_op_normalize_poly_fn_sig<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<PolyFnSig<'tcx>>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, PolyFnSig<'tcx>>>, NoSolution> {"}]}