{"sha": "f8d6d6f23bfb15021be91031ba983da19f0d3ada", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZDZkNmYyM2JmYjE1MDIxYmU5MTAzMWJhOTgzZGExOWYwZDNhZGE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-10T20:14:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-10T20:14:08Z"}, "message": "Merge #3074\n\n3074: Or patterns r=matthewjasper a=matthewjasper\n\nWorks towards #2458\n\nCo-authored-by: Matthew Jasper <mjjasper1@gmail.com>", "tree": {"sha": "9c6ab9425ba72c440b2a475d92ed984ccf1aebcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c6ab9425ba72c440b2a475d92ed984ccf1aebcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8d6d6f23bfb15021be91031ba983da19f0d3ada", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQbmQCRBK7hj4Ov3rIwAAdHIIAK7a/Oc3c5i7EpvFTqph0Hq9\nRmZol3aVORV6Tp48CV/ABBMirQQgHpUq0O1bmmOBEFt/U90SzyM60+EGxgQ+pQHM\nBZV2cObHYJsnOO2YsLIg/LUuOHjmW30f6yx31gcipadadB6W5wuVzTqbjc0//8H/\n6qppBZVcjsjWFsLb1XXzWJw98EwmBr+cbSWkrbDgnplibpyX7YDy4b8Qaq777GJZ\nPcR78WOUYsYLz4DlJMXbyqeDVMUrFb6M9wA9RI3Gn4+SB+OZr19DxjY0fYkI0lm1\nd3habMNqQEn07vSaAKb/ca4weUyprqov9y1bLm1jU2JltGrTG0Ut/qXuulU3q6A=\n=I2Rv\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c6ab9425ba72c440b2a475d92ed984ccf1aebcc\nparent 29f5e7eebf606c1929d5a77ad66624cd4f3fcf49\nparent 49b53cd7a0861cdba65643e3da441eefbe18d6e6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581365648 +0000\ncommitter GitHub <noreply@github.com> 1581365648 +0000\n\nMerge #3074\n\n3074: Or patterns r=matthewjasper a=matthewjasper\n\nWorks towards #2458\n\nCo-authored-by: Matthew Jasper <mjjasper1@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d6d6f23bfb15021be91031ba983da19f0d3ada", "html_url": "https://github.com/rust-lang/rust/commit/f8d6d6f23bfb15021be91031ba983da19f0d3ada", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8d6d6f23bfb15021be91031ba983da19f0d3ada/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29f5e7eebf606c1929d5a77ad66624cd4f3fcf49", "url": "https://api.github.com/repos/rust-lang/rust/commits/29f5e7eebf606c1929d5a77ad66624cd4f3fcf49", "html_url": "https://github.com/rust-lang/rust/commit/29f5e7eebf606c1929d5a77ad66624cd4f3fcf49"}, {"sha": "49b53cd7a0861cdba65643e3da441eefbe18d6e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b53cd7a0861cdba65643e3da441eefbe18d6e6", "html_url": "https://github.com/rust-lang/rust/commit/49b53cd7a0861cdba65643e3da441eefbe18d6e6"}], "stats": {"total": 540, "additions": 427, "deletions": 113}, "files": [{"sha": "ae2437ed32f1f785cd277936b11f02e626b757fd", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -75,10 +75,10 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx) -> Option<Assist> {\n }\n \n fn is_trivial(arm: &ast::MatchArm) -> bool {\n-    arm.pats().any(|pat| match pat {\n-        ast::Pat::PlaceholderPat(..) => true,\n+    match arm.pat() {\n+        Some(ast::Pat::PlaceholderPat(..)) => true,\n         _ => false,\n-    })\n+    }\n }\n \n fn resolve_enum_def("}, {"sha": "b2a194cb5f2d02eddc5372deae2d9d21780784b1", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -75,7 +75,7 @@ pub(crate) fn merge_match_arms(ctx: AssistCtx) -> Option<Assist> {\n         } else {\n             arms_to_merge\n                 .iter()\n-                .flat_map(ast::MatchArm::pats)\n+                .filter_map(ast::MatchArm::pat)\n                 .map(|x| x.syntax().to_string())\n                 .collect::<Vec<String>>()\n                 .join(\" | \")\n@@ -96,10 +96,10 @@ pub(crate) fn merge_match_arms(ctx: AssistCtx) -> Option<Assist> {\n }\n \n fn contains_placeholder(a: &ast::MatchArm) -> bool {\n-    a.pats().any(|x| match x {\n-        ra_syntax::ast::Pat::PlaceholderPat(..) => true,\n+    match a.pat() {\n+        Some(ra_syntax::ast::Pat::PlaceholderPat(..)) => true,\n         _ => false,\n-    })\n+    }\n }\n \n fn next_arm(arm: &ast::MatchArm) -> Option<ast::MatchArm> {"}, {"sha": "a61a2ba3e12aa4a2e3f9a8e3907e9f1e82500b4a", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -90,7 +90,7 @@ pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx) -> Option<Assist> {\n // ```\n pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx) -> Option<Assist> {\n     let match_arm: MatchArm = ctx.find_node_at_offset::<MatchArm>()?;\n-    let last_match_pat = match_arm.pats().last()?;\n+    let match_pat = match_arm.pat()?;\n \n     let arm_body = match_arm.expr()?;\n     let if_expr: IfExpr = IfExpr::cast(arm_body.syntax().clone())?;\n@@ -122,8 +122,8 @@ pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx) -> Option<Assist> {\n                 _ => edit.replace(if_expr.syntax().text_range(), then_block.syntax().text()),\n             }\n \n-            edit.insert(last_match_pat.syntax().text_range().end(), buf);\n-            edit.set_cursor(last_match_pat.syntax().text_range().end() + TextUnit::from(1));\n+            edit.insert(match_pat.syntax().text_range().end(), buf);\n+            edit.set_cursor(match_pat.syntax().text_range().end() + TextUnit::from(1));\n         },\n     )\n }"}, {"sha": "fe0973fc764c17a94f5e278dcb9a200d9cd6e8be", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -164,9 +164,9 @@ where\n                             let match_expr = self.collect_expr_opt(condition.expr());\n                             let placeholder_pat = self.missing_pat();\n                             let arms = vec![\n-                                MatchArm { pats: vec![pat], expr: then_branch, guard: None },\n+                                MatchArm { pat, expr: then_branch, guard: None },\n                                 MatchArm {\n-                                    pats: vec![placeholder_pat],\n+                                    pat: placeholder_pat,\n                                     expr: else_branch.unwrap_or_else(|| self.empty_block()),\n                                     guard: None,\n                                 },\n@@ -203,8 +203,8 @@ where\n                             let placeholder_pat = self.missing_pat();\n                             let break_ = self.alloc_expr_desugared(Expr::Break { expr: None });\n                             let arms = vec![\n-                                MatchArm { pats: vec![pat], expr: body, guard: None },\n-                                MatchArm { pats: vec![placeholder_pat], expr: break_, guard: None },\n+                                MatchArm { pat, expr: body, guard: None },\n+                                MatchArm { pat: placeholder_pat, expr: break_, guard: None },\n                             ];\n                             let match_expr =\n                                 self.alloc_expr_desugared(Expr::Match { expr: match_expr, arms });\n@@ -250,7 +250,7 @@ where\n                     match_arm_list\n                         .arms()\n                         .map(|arm| MatchArm {\n-                            pats: arm.pats().map(|p| self.collect_pat(p)).collect(),\n+                            pat: self.collect_pat_opt(arm.pat()),\n                             expr: self.collect_expr_opt(arm.expr()),\n                             guard: arm\n                                 .guard()\n@@ -587,6 +587,11 @@ where\n                 let path = p.path().and_then(|path| self.expander.parse_path(path));\n                 path.map(Pat::Path).unwrap_or(Pat::Missing)\n             }\n+            ast::Pat::OrPat(p) => {\n+                let pats = p.pats().map(|p| self.collect_pat(p)).collect();\n+                Pat::Or(pats)\n+            }\n+            ast::Pat::ParenPat(p) => return self.collect_pat_opt(p.pat()),\n             ast::Pat::TuplePat(p) => {\n                 let args = p.args().map(|p| self.collect_pat(p)).collect();\n                 Pat::Tuple(args)"}, {"sha": "a58a7b21f921dcdeffbd7064fc19b1bc0afef081", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -158,9 +158,7 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n             compute_expr_scopes(*expr, body, scopes, scope);\n             for arm in arms {\n                 let scope = scopes.new_scope(scope);\n-                for pat in &arm.pats {\n-                    scopes.add_bindings(body, scope, *pat);\n-                }\n+                scopes.add_bindings(body, scope, arm.pat);\n                 scopes.set_scope(arm.expr, scope);\n                 compute_expr_scopes(arm.expr, body, scopes, scope);\n             }"}, {"sha": "5a84e08ededcf2be52fa66e3451d87585970b9f1", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -202,7 +202,7 @@ pub enum Array {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MatchArm {\n-    pub pats: Vec<PatId>,\n+    pub pat: PatId,\n     pub guard: Option<ExprId>,\n     pub expr: ExprId,\n }\n@@ -382,6 +382,7 @@ pub enum Pat {\n     Missing,\n     Wild,\n     Tuple(Vec<PatId>),\n+    Or(Vec<PatId>),\n     Record {\n         path: Option<Path>,\n         args: Vec<RecordFieldPat>,\n@@ -420,7 +421,7 @@ impl Pat {\n             Pat::Bind { subpat, .. } => {\n                 subpat.iter().copied().for_each(f);\n             }\n-            Pat::Tuple(args) | Pat::TupleStruct { args, .. } => {\n+            Pat::Or(args) | Pat::Tuple(args) | Pat::TupleStruct { args, .. } => {\n                 args.iter().copied().for_each(f);\n             }\n             Pat::Ref { pat, .. } => f(*pat),"}, {"sha": "186857b8b214b7170604028b67cd9416a7a91a25", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -168,9 +168,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let mut result_ty = self.table.new_maybe_never_type_var();\n \n                 for arm in arms {\n-                    for &pat in &arm.pats {\n-                        let _pat_ty = self.infer_pat(pat, &input_ty, BindingMode::default());\n-                    }\n+                    let _pat_ty = self.infer_pat(arm.pat, &input_ty, BindingMode::default());\n                     if let Some(guard_expr) = arm.guard {\n                         self.infer_expr(\n                             guard_expr,"}, {"sha": "a5dfdf6c4be4db3032a3546576f36b0bddde5740", "filename": "crates/ra_hir_ty/src/infer/pat.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -82,6 +82,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         let is_non_ref_pat = match &body[pat] {\n             Pat::Tuple(..)\n+            | Pat::Or(..)\n             | Pat::TupleStruct { .. }\n             | Pat::Record { .. }\n             | Pat::Range { .. }\n@@ -126,6 +127,17 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n                 Ty::apply(TypeCtor::Tuple { cardinality: args.len() as u16 }, Substs(inner_tys))\n             }\n+            Pat::Or(ref pats) => {\n+                if let Some((first_pat, rest)) = pats.split_first() {\n+                    let ty = self.infer_pat(*first_pat, expected, default_bm);\n+                    for pat in rest {\n+                        self.infer_pat(*pat, expected, default_bm);\n+                    }\n+                    ty\n+                } else {\n+                    Ty::Unknown\n+                }\n+            }\n             Pat::Ref { pat, mutability } => {\n                 let expectation = match expected.as_reference() {\n                     Some((inner_ty, exp_mut)) => {"}, {"sha": "2ae97e65f506020df3330e0e1826e45b7c3cfd3a", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -80,8 +80,7 @@ fn get_inlay_hints(\n             },\n             ast::MatchArmList(it) => {\n                 it.arms()\n-                    .map(|match_arm| match_arm.pats())\n-                    .flatten()\n+                    .filter_map(|match_arm| match_arm.pat())\n                     .for_each(|root_pat| get_pat_type_hints(acc, db, &analyzer, root_pat, true, max_inlay_hint_length));\n             },\n             ast::CallExpr(it) => {\n@@ -202,6 +201,7 @@ fn get_leaf_pats(root_pat: ast::Pat) -> Vec<ast::Pat> {\n                 Some(pat) => pats_to_process.push_back(pat),\n                 _ => leaf_pats.push(maybe_leaf_pat),\n             },\n+            ast::Pat::OrPat(ref_pat) => pats_to_process.extend(ref_pat.pats()),\n             ast::Pat::TuplePat(tuple_pat) => pats_to_process.extend(tuple_pat.args()),\n             ast::Pat::RecordPat(record_pat) => {\n                 if let Some(pat_list) = record_pat.record_field_pat_list() {\n@@ -222,6 +222,7 @@ fn get_leaf_pats(root_pat: ast::Pat) -> Vec<ast::Pat> {\n             ast::Pat::TupleStructPat(tuple_struct_pat) => {\n                 pats_to_process.extend(tuple_struct_pat.args())\n             }\n+            ast::Pat::ParenPat(inner_pat) => pats_to_process.extend(inner_pat.pat()),\n             ast::Pat::RefPat(ref_pat) => pats_to_process.extend(ref_pat.pat()),\n             _ => (),\n         }"}, {"sha": "b72d2e9e64880f6f037583e4e8db83da7ada5d94", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -336,7 +336,7 @@ fn for_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n fn cond(p: &mut Parser) {\n     let m = p.start();\n     if p.eat(T![let]) {\n-        patterns::pattern_list(p);\n+        patterns::pattern_top(p);\n         p.expect(T![=]);\n     }\n     expr_no_struct(p);\n@@ -430,7 +430,7 @@ fn match_arm(p: &mut Parser) -> BlockLike {\n     // }\n     attributes::outer_attributes(p);\n \n-    patterns::pattern_list_r(p, TokenSet::EMPTY);\n+    patterns::pattern_top_r(p, TokenSet::EMPTY);\n     if p.at(T![if]) {\n         match_guard(p);\n     }"}, {"sha": "ed4f93347a2ad2c43e2350087f2a59435db62f2e", "filename": "crates/ra_parser/src/grammar/params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fparams.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -116,7 +116,7 @@ fn value_parameter(p: &mut Parser, flavor: Flavor) {\n         // type Qux = fn(baz: Bar::Baz);\n         Flavor::FnPointer => {\n             if p.at(IDENT) && p.nth(1) == T![:] && !p.nth_at(1, T![::]) {\n-                patterns::pattern(p);\n+                patterns::pattern_single(p);\n                 types::ascription(p);\n             } else {\n                 types::type_(p);\n@@ -127,7 +127,7 @@ fn value_parameter(p: &mut Parser, flavor: Flavor) {\n         //    let foo = |bar, baz: Baz, qux: Qux::Quux| ();\n         // }\n         Flavor::Closure => {\n-            patterns::pattern(p);\n+            patterns::pattern_single(p);\n             if p.at(T![:]) && !p.at(T![::]) {\n                 types::ascription(p);\n             }"}, {"sha": "3afbaa82b84249c154cea96411b22b0a01043d3e", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 57, "deletions": 10, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -11,22 +11,47 @@ pub(crate) fn pattern(p: &mut Parser) {\n }\n \n /// Parses a pattern list separated by pipes `|`\n-pub(super) fn pattern_list(p: &mut Parser) {\n-    pattern_list_r(p, PAT_RECOVERY_SET)\n+pub(super) fn pattern_top(p: &mut Parser) {\n+    pattern_top_r(p, PAT_RECOVERY_SET)\n+}\n+\n+pub(crate) fn pattern_single(p: &mut Parser) {\n+    pattern_single_r(p, PAT_RECOVERY_SET);\n }\n \n /// Parses a pattern list separated by pipes `|`\n /// using the given `recovery_set`\n-pub(super) fn pattern_list_r(p: &mut Parser, recovery_set: TokenSet) {\n+pub(super) fn pattern_top_r(p: &mut Parser, recovery_set: TokenSet) {\n     p.eat(T![|]);\n     pattern_r(p, recovery_set);\n+}\n \n+/// Parses a pattern list separated by pipes `|`, with no leading `|`,using the\n+/// given `recovery_set`\n+// test or_pattern\n+// fn main() {\n+//     match () {\n+//         (_ | _) => (),\n+//         &(_ | _) => (),\n+//         (_ | _,) => (),\n+//         [_ | _,] => (),\n+//     }\n+// }\n+fn pattern_r(p: &mut Parser, recovery_set: TokenSet) {\n+    let m = p.start();\n+    pattern_single_r(p, recovery_set);\n+\n+    if !p.at(T![|]) {\n+        m.abandon(p);\n+        return;\n+    }\n     while p.eat(T![|]) {\n-        pattern_r(p, recovery_set);\n+        pattern_single_r(p, recovery_set);\n     }\n+    m.complete(p, OR_PAT);\n }\n \n-pub(super) fn pattern_r(p: &mut Parser, recovery_set: TokenSet) {\n+fn pattern_single_r(p: &mut Parser, recovery_set: TokenSet) {\n     if let Some(lhs) = atom_pat(p, recovery_set) {\n         // test range_pat\n         // fn main() {\n@@ -258,19 +283,41 @@ fn ref_pat(p: &mut Parser) -> CompletedMarker {\n     let m = p.start();\n     p.bump(T![&]);\n     p.eat(T![mut]);\n-    pattern(p);\n+    pattern_single(p);\n     m.complete(p, REF_PAT)\n }\n \n // test tuple_pat\n // fn main() {\n //     let (a, b, ..) = ();\n+//     let (a,) = ();\n+//     let (..) = ();\n+//     let () = ();\n // }\n fn tuple_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T!['(']));\n     let m = p.start();\n-    tuple_pat_fields(p);\n-    m.complete(p, TUPLE_PAT)\n+    p.bump(T!['(']);\n+    let mut has_comma = false;\n+    let mut has_pat = false;\n+    let mut has_rest = false;\n+    while !p.at(EOF) && !p.at(T![')']) {\n+        has_pat = true;\n+        if !p.at_ts(PATTERN_FIRST) {\n+            p.error(\"expected a pattern\");\n+            break;\n+        }\n+        has_rest |= p.at(T![..]);\n+\n+        pattern(p);\n+        if !p.at(T![')']) {\n+            has_comma = true;\n+            p.expect(T![,]);\n+        }\n+    }\n+    p.expect(T![')']);\n+\n+    m.complete(p, if !has_comma && !has_rest && has_pat { PAREN_PAT } else { TUPLE_PAT })\n }\n \n // test slice_pat\n@@ -315,7 +362,7 @@ fn bind_pat(p: &mut Parser, with_at: bool) -> CompletedMarker {\n     p.eat(T![mut]);\n     name(p);\n     if with_at && p.eat(T![@]) {\n-        pattern(p);\n+        pattern_single(p);\n     }\n     m.complete(p, BIND_PAT)\n }\n@@ -330,6 +377,6 @@ fn box_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![box]));\n     let m = p.start();\n     p.bump(T![box]);\n-    pattern(p);\n+    pattern_single(p);\n     m.complete(p, BOX_PAT)\n }"}, {"sha": "1068da0a06316a5c1bc3882dec91849cb903a581", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -151,6 +151,8 @@ pub enum SyntaxKind {\n     FOR_TYPE,\n     IMPL_TRAIT_TYPE,\n     DYN_TRAIT_TYPE,\n+    OR_PAT,\n+    PAREN_PAT,\n     REF_PAT,\n     BOX_PAT,\n     BIND_PAT,"}, {"sha": "8d640642d275242fc1f4154ffcde8917b4ff1da0", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 75, "deletions": 6, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -1759,8 +1759,8 @@ impl AstNode for MatchArm {\n }\n impl ast::AttrsOwner for MatchArm {}\n impl MatchArm {\n-    pub fn pats(&self) -> AstChildren<Pat> {\n-        AstChildren::new(&self.syntax)\n+    pub fn pat(&self) -> Option<Pat> {\n+        AstChildren::new(&self.syntax).next()\n     }\n     pub fn guard(&self) -> Option<MatchGuard> {\n         AstChildren::new(&self.syntax).next()\n@@ -1887,6 +1887,60 @@ impl RecordField {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct OrPat {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for OrPat {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            OR_PAT => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl OrPat {\n+    pub fn pats(&self) -> AstChildren<Pat> {\n+        AstChildren::new(&self.syntax)\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ParenPat {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for ParenPat {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            PAREN_PAT => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl ParenPat {\n+    pub fn pat(&self) -> Option<Pat> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RefPat {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -3900,6 +3954,8 @@ impl AstNode for Expr {\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Pat {\n+    OrPat(OrPat),\n+    ParenPat(ParenPat),\n     RefPat(RefPat),\n     BoxPat(BoxPat),\n     BindPat(BindPat),\n@@ -3913,6 +3969,16 @@ pub enum Pat {\n     RangePat(RangePat),\n     LiteralPat(LiteralPat),\n }\n+impl From<OrPat> for Pat {\n+    fn from(node: OrPat) -> Pat {\n+        Pat::OrPat(node)\n+    }\n+}\n+impl From<ParenPat> for Pat {\n+    fn from(node: ParenPat) -> Pat {\n+        Pat::ParenPat(node)\n+    }\n+}\n impl From<RefPat> for Pat {\n     fn from(node: RefPat) -> Pat {\n         Pat::RefPat(node)\n@@ -3976,15 +4042,16 @@ impl From<LiteralPat> for Pat {\n impl AstNode for Pat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            REF_PAT | BOX_PAT | BIND_PAT | PLACEHOLDER_PAT | DOT_DOT_PAT | PATH_PAT\n-            | RECORD_PAT | TUPLE_STRUCT_PAT | TUPLE_PAT | SLICE_PAT | RANGE_PAT | LITERAL_PAT => {\n-                true\n-            }\n+            OR_PAT | PAREN_PAT | REF_PAT | BOX_PAT | BIND_PAT | PLACEHOLDER_PAT | DOT_DOT_PAT\n+            | PATH_PAT | RECORD_PAT | TUPLE_STRUCT_PAT | TUPLE_PAT | SLICE_PAT | RANGE_PAT\n+            | LITERAL_PAT => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n+            OR_PAT => Pat::OrPat(OrPat { syntax }),\n+            PAREN_PAT => Pat::ParenPat(ParenPat { syntax }),\n             REF_PAT => Pat::RefPat(RefPat { syntax }),\n             BOX_PAT => Pat::BoxPat(BoxPat { syntax }),\n             BIND_PAT => Pat::BindPat(BindPat { syntax }),\n@@ -4003,6 +4070,8 @@ impl AstNode for Pat {\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n+            Pat::OrPat(it) => &it.syntax,\n+            Pat::ParenPat(it) => &it.syntax,\n             Pat::RefPat(it) => &it.syntax,\n             Pat::BoxPat(it) => &it.syntax,\n             Pat::BindPat(it) => &it.syntax,"}, {"sha": "6fd49c7bc629e8805a8a1eec1cc0355915d444cf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0030_cond.txt", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0030_cond.txt?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -63,27 +63,28 @@ SOURCE_FILE@[0; 197)\n             CONDITION@[56; 84)\n               LET_KW@[56; 59) \"let\"\n               WHITESPACE@[59; 60) \" \"\n-              TUPLE_STRUCT_PAT@[60; 67)\n-                PATH@[60; 64)\n-                  PATH_SEGMENT@[60; 64)\n-                    NAME_REF@[60; 64)\n-                      IDENT@[60; 64) \"Some\"\n-                L_PAREN@[64; 65) \"(\"\n-                PLACEHOLDER_PAT@[65; 66)\n-                  UNDERSCORE@[65; 66) \"_\"\n-                R_PAREN@[66; 67) \")\"\n-              WHITESPACE@[67; 68) \" \"\n-              PIPE@[68; 69) \"|\"\n-              WHITESPACE@[69; 70) \" \"\n-              TUPLE_STRUCT_PAT@[70; 77)\n-                PATH@[70; 74)\n-                  PATH_SEGMENT@[70; 74)\n-                    NAME_REF@[70; 74)\n-                      IDENT@[70; 74) \"Some\"\n-                L_PAREN@[74; 75) \"(\"\n-                PLACEHOLDER_PAT@[75; 76)\n-                  UNDERSCORE@[75; 76) \"_\"\n-                R_PAREN@[76; 77) \")\"\n+              OR_PAT@[60; 77)\n+                TUPLE_STRUCT_PAT@[60; 67)\n+                  PATH@[60; 64)\n+                    PATH_SEGMENT@[60; 64)\n+                      NAME_REF@[60; 64)\n+                        IDENT@[60; 64) \"Some\"\n+                  L_PAREN@[64; 65) \"(\"\n+                  PLACEHOLDER_PAT@[65; 66)\n+                    UNDERSCORE@[65; 66) \"_\"\n+                  R_PAREN@[66; 67) \")\"\n+                WHITESPACE@[67; 68) \" \"\n+                PIPE@[68; 69) \"|\"\n+                WHITESPACE@[69; 70) \" \"\n+                TUPLE_STRUCT_PAT@[70; 77)\n+                  PATH@[70; 74)\n+                    PATH_SEGMENT@[70; 74)\n+                      NAME_REF@[70; 74)\n+                        IDENT@[70; 74) \"Some\"\n+                  L_PAREN@[74; 75) \"(\"\n+                  PLACEHOLDER_PAT@[75; 76)\n+                    UNDERSCORE@[75; 76) \"_\"\n+                  R_PAREN@[76; 77) \")\"\n               WHITESPACE@[77; 78) \" \"\n               EQ@[78; 79) \"=\"\n               WHITESPACE@[79; 80) \" \"\n@@ -137,27 +138,28 @@ SOURCE_FILE@[0; 197)\n             CONDITION@[129; 157)\n               LET_KW@[129; 132) \"let\"\n               WHITESPACE@[132; 133) \" \"\n-              TUPLE_STRUCT_PAT@[133; 140)\n-                PATH@[133; 137)\n-                  PATH_SEGMENT@[133; 137)\n-                    NAME_REF@[133; 137)\n-                      IDENT@[133; 137) \"Some\"\n-                L_PAREN@[137; 138) \"(\"\n-                PLACEHOLDER_PAT@[138; 139)\n-                  UNDERSCORE@[138; 139) \"_\"\n-                R_PAREN@[139; 140) \")\"\n-              WHITESPACE@[140; 141) \" \"\n-              PIPE@[141; 142) \"|\"\n-              WHITESPACE@[142; 143) \" \"\n-              TUPLE_STRUCT_PAT@[143; 150)\n-                PATH@[143; 147)\n-                  PATH_SEGMENT@[143; 147)\n-                    NAME_REF@[143; 147)\n-                      IDENT@[143; 147) \"Some\"\n-                L_PAREN@[147; 148) \"(\"\n-                PLACEHOLDER_PAT@[148; 149)\n-                  UNDERSCORE@[148; 149) \"_\"\n-                R_PAREN@[149; 150) \")\"\n+              OR_PAT@[133; 150)\n+                TUPLE_STRUCT_PAT@[133; 140)\n+                  PATH@[133; 137)\n+                    PATH_SEGMENT@[133; 137)\n+                      NAME_REF@[133; 137)\n+                        IDENT@[133; 137) \"Some\"\n+                  L_PAREN@[137; 138) \"(\"\n+                  PLACEHOLDER_PAT@[138; 139)\n+                    UNDERSCORE@[138; 139) \"_\"\n+                  R_PAREN@[139; 140) \")\"\n+                WHITESPACE@[140; 141) \" \"\n+                PIPE@[141; 142) \"|\"\n+                WHITESPACE@[142; 143) \" \"\n+                TUPLE_STRUCT_PAT@[143; 150)\n+                  PATH@[143; 147)\n+                    PATH_SEGMENT@[143; 147)\n+                      NAME_REF@[143; 147)\n+                        IDENT@[143; 147) \"Some\"\n+                  L_PAREN@[147; 148) \"(\"\n+                  PLACEHOLDER_PAT@[148; 149)\n+                    UNDERSCORE@[148; 149) \"_\"\n+                  R_PAREN@[149; 150) \")\"\n               WHITESPACE@[150; 151) \" \"\n               EQ@[151; 152) \"=\"\n               WHITESPACE@[152; 153) \" \""}, {"sha": "2f07af4e19780e155a35ab4f574fe270eb8b839b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0066_match_arm.txt", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.txt?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -74,15 +74,16 @@ SOURCE_FILE@[0; 167)\n               COMMA@[83; 84) \",\"\n               WHITESPACE@[84; 93) \"\\n        \"\n               MATCH_ARM@[93; 109)\n-                BIND_PAT@[93; 94)\n-                  NAME@[93; 94)\n-                    IDENT@[93; 94) \"X\"\n-                WHITESPACE@[94; 95) \" \"\n-                PIPE@[95; 96) \"|\"\n-                WHITESPACE@[96; 97) \" \"\n-                BIND_PAT@[97; 98)\n-                  NAME@[97; 98)\n-                    IDENT@[97; 98) \"Y\"\n+                OR_PAT@[93; 98)\n+                  BIND_PAT@[93; 94)\n+                    NAME@[93; 94)\n+                      IDENT@[93; 94) \"X\"\n+                  WHITESPACE@[94; 95) \" \"\n+                  PIPE@[95; 96) \"|\"\n+                  WHITESPACE@[96; 97) \" \"\n+                  BIND_PAT@[97; 98)\n+                    NAME@[97; 98)\n+                      IDENT@[97; 98) \"Y\"\n                 WHITESPACE@[98; 99) \" \"\n                 MATCH_GUARD@[99; 103)\n                   IF_KW@[99; 101) \"if\"\n@@ -103,15 +104,16 @@ SOURCE_FILE@[0; 167)\n               MATCH_ARM@[119; 137)\n                 PIPE@[119; 120) \"|\"\n                 WHITESPACE@[120; 121) \" \"\n-                BIND_PAT@[121; 122)\n-                  NAME@[121; 122)\n-                    IDENT@[121; 122) \"X\"\n-                WHITESPACE@[122; 123) \" \"\n-                PIPE@[123; 124) \"|\"\n-                WHITESPACE@[124; 125) \" \"\n-                BIND_PAT@[125; 126)\n-                  NAME@[125; 126)\n-                    IDENT@[125; 126) \"Y\"\n+                OR_PAT@[121; 126)\n+                  BIND_PAT@[121; 122)\n+                    NAME@[121; 122)\n+                      IDENT@[121; 122) \"X\"\n+                  WHITESPACE@[122; 123) \" \"\n+                  PIPE@[123; 124) \"|\"\n+                  WHITESPACE@[124; 125) \" \"\n+                  BIND_PAT@[125; 126)\n+                    NAME@[125; 126)\n+                      IDENT@[125; 126) \"Y\"\n                 WHITESPACE@[126; 127) \" \"\n                 MATCH_GUARD@[127; 131)\n                   IF_KW@[127; 129) \"if\""}, {"sha": "ba719879d4c1acad2e13ddef6392072e1532e35a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0111_tuple_pat.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -1,3 +1,6 @@\n fn main() {\n     let (a, b, ..) = ();\n+    let (a,) = ();\n+    let (..) = ();\n+    let () = ();\n }"}, {"sha": "4680c267e7e3d71a085da71c909633d7a6b4fd53", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0111_tuple_pat.txt", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0111_tuple_pat.txt?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 39)\n-  FN_DEF@[0; 38)\n+SOURCE_FILE@[0; 94)\n+  FN_DEF@[0; 93)\n     FN_KW@[0; 2) \"fn\"\n     WHITESPACE@[2; 3) \" \"\n     NAME@[3; 7)\n@@ -8,8 +8,8 @@ SOURCE_FILE@[0; 39)\n       L_PAREN@[7; 8) \"(\"\n       R_PAREN@[8; 9) \")\"\n     WHITESPACE@[9; 10) \" \"\n-    BLOCK_EXPR@[10; 38)\n-      BLOCK@[10; 38)\n+    BLOCK_EXPR@[10; 93)\n+      BLOCK@[10; 93)\n         L_CURLY@[10; 11) \"{\"\n         WHITESPACE@[11; 16) \"\\n    \"\n         LET_STMT@[16; 36)\n@@ -37,6 +37,54 @@ SOURCE_FILE@[0; 39)\n             L_PAREN@[33; 34) \"(\"\n             R_PAREN@[34; 35) \")\"\n           SEMI@[35; 36) \";\"\n-        WHITESPACE@[36; 37) \"\\n\"\n-        R_CURLY@[37; 38) \"}\"\n-  WHITESPACE@[38; 39) \"\\n\"\n+        WHITESPACE@[36; 41) \"\\n    \"\n+        LET_STMT@[41; 55)\n+          LET_KW@[41; 44) \"let\"\n+          WHITESPACE@[44; 45) \" \"\n+          TUPLE_PAT@[45; 49)\n+            L_PAREN@[45; 46) \"(\"\n+            BIND_PAT@[46; 47)\n+              NAME@[46; 47)\n+                IDENT@[46; 47) \"a\"\n+            COMMA@[47; 48) \",\"\n+            R_PAREN@[48; 49) \")\"\n+          WHITESPACE@[49; 50) \" \"\n+          EQ@[50; 51) \"=\"\n+          WHITESPACE@[51; 52) \" \"\n+          TUPLE_EXPR@[52; 54)\n+            L_PAREN@[52; 53) \"(\"\n+            R_PAREN@[53; 54) \")\"\n+          SEMI@[54; 55) \";\"\n+        WHITESPACE@[55; 60) \"\\n    \"\n+        LET_STMT@[60; 74)\n+          LET_KW@[60; 63) \"let\"\n+          WHITESPACE@[63; 64) \" \"\n+          TUPLE_PAT@[64; 68)\n+            L_PAREN@[64; 65) \"(\"\n+            DOT_DOT_PAT@[65; 67)\n+              DOTDOT@[65; 67) \"..\"\n+            R_PAREN@[67; 68) \")\"\n+          WHITESPACE@[68; 69) \" \"\n+          EQ@[69; 70) \"=\"\n+          WHITESPACE@[70; 71) \" \"\n+          TUPLE_EXPR@[71; 73)\n+            L_PAREN@[71; 72) \"(\"\n+            R_PAREN@[72; 73) \")\"\n+          SEMI@[73; 74) \";\"\n+        WHITESPACE@[74; 79) \"\\n    \"\n+        LET_STMT@[79; 91)\n+          LET_KW@[79; 82) \"let\"\n+          WHITESPACE@[82; 83) \" \"\n+          TUPLE_PAT@[83; 85)\n+            L_PAREN@[83; 84) \"(\"\n+            R_PAREN@[84; 85) \")\"\n+          WHITESPACE@[85; 86) \" \"\n+          EQ@[86; 87) \"=\"\n+          WHITESPACE@[87; 88) \" \"\n+          TUPLE_EXPR@[88; 90)\n+            L_PAREN@[88; 89) \"(\"\n+            R_PAREN@[89; 90) \")\"\n+          SEMI@[90; 91) \";\"\n+        WHITESPACE@[91; 92) \"\\n\"\n+        R_CURLY@[92; 93) \"}\"\n+  WHITESPACE@[93; 94) \"\\n\""}, {"sha": "a2631660550f38fa62aa3f635a7b87f50f653099", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0156_or_pattern.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_or_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_or_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_or_pattern.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    match () {\n+        (_ | _) => (),\n+        &(_ | _) => (),\n+        (_ | _,) => (),\n+        [_ | _,] => (),\n+    }\n+}"}, {"sha": "3a196d3c030a691ac910a9d526815ad41a6d7996", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0156_or_pattern.txt", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_or_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_or_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0156_or_pattern.txt?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -0,0 +1,112 @@\n+SOURCE_FILE@[0; 130)\n+  FN_DEF@[0; 129)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK_EXPR@[10; 129)\n+      BLOCK@[10; 129)\n+        L_CURLY@[10; 11) \"{\"\n+        WHITESPACE@[11; 16) \"\\n    \"\n+        MATCH_EXPR@[16; 127)\n+          MATCH_KW@[16; 21) \"match\"\n+          WHITESPACE@[21; 22) \" \"\n+          TUPLE_EXPR@[22; 24)\n+            L_PAREN@[22; 23) \"(\"\n+            R_PAREN@[23; 24) \")\"\n+          WHITESPACE@[24; 25) \" \"\n+          MATCH_ARM_LIST@[25; 127)\n+            L_CURLY@[25; 26) \"{\"\n+            WHITESPACE@[26; 35) \"\\n        \"\n+            MATCH_ARM@[35; 48)\n+              PAREN_PAT@[35; 42)\n+                L_PAREN@[35; 36) \"(\"\n+                OR_PAT@[36; 41)\n+                  PLACEHOLDER_PAT@[36; 37)\n+                    UNDERSCORE@[36; 37) \"_\"\n+                  WHITESPACE@[37; 38) \" \"\n+                  PIPE@[38; 39) \"|\"\n+                  WHITESPACE@[39; 40) \" \"\n+                  PLACEHOLDER_PAT@[40; 41)\n+                    UNDERSCORE@[40; 41) \"_\"\n+                R_PAREN@[41; 42) \")\"\n+              WHITESPACE@[42; 43) \" \"\n+              FAT_ARROW@[43; 45) \"=>\"\n+              WHITESPACE@[45; 46) \" \"\n+              TUPLE_EXPR@[46; 48)\n+                L_PAREN@[46; 47) \"(\"\n+                R_PAREN@[47; 48) \")\"\n+            COMMA@[48; 49) \",\"\n+            WHITESPACE@[49; 58) \"\\n        \"\n+            MATCH_ARM@[58; 72)\n+              REF_PAT@[58; 66)\n+                AMP@[58; 59) \"&\"\n+                PAREN_PAT@[59; 66)\n+                  L_PAREN@[59; 60) \"(\"\n+                  OR_PAT@[60; 65)\n+                    PLACEHOLDER_PAT@[60; 61)\n+                      UNDERSCORE@[60; 61) \"_\"\n+                    WHITESPACE@[61; 62) \" \"\n+                    PIPE@[62; 63) \"|\"\n+                    WHITESPACE@[63; 64) \" \"\n+                    PLACEHOLDER_PAT@[64; 65)\n+                      UNDERSCORE@[64; 65) \"_\"\n+                  R_PAREN@[65; 66) \")\"\n+              WHITESPACE@[66; 67) \" \"\n+              FAT_ARROW@[67; 69) \"=>\"\n+              WHITESPACE@[69; 70) \" \"\n+              TUPLE_EXPR@[70; 72)\n+                L_PAREN@[70; 71) \"(\"\n+                R_PAREN@[71; 72) \")\"\n+            COMMA@[72; 73) \",\"\n+            WHITESPACE@[73; 82) \"\\n        \"\n+            MATCH_ARM@[82; 96)\n+              TUPLE_PAT@[82; 90)\n+                L_PAREN@[82; 83) \"(\"\n+                OR_PAT@[83; 88)\n+                  PLACEHOLDER_PAT@[83; 84)\n+                    UNDERSCORE@[83; 84) \"_\"\n+                  WHITESPACE@[84; 85) \" \"\n+                  PIPE@[85; 86) \"|\"\n+                  WHITESPACE@[86; 87) \" \"\n+                  PLACEHOLDER_PAT@[87; 88)\n+                    UNDERSCORE@[87; 88) \"_\"\n+                COMMA@[88; 89) \",\"\n+                R_PAREN@[89; 90) \")\"\n+              WHITESPACE@[90; 91) \" \"\n+              FAT_ARROW@[91; 93) \"=>\"\n+              WHITESPACE@[93; 94) \" \"\n+              TUPLE_EXPR@[94; 96)\n+                L_PAREN@[94; 95) \"(\"\n+                R_PAREN@[95; 96) \")\"\n+            COMMA@[96; 97) \",\"\n+            WHITESPACE@[97; 106) \"\\n        \"\n+            MATCH_ARM@[106; 120)\n+              SLICE_PAT@[106; 114)\n+                L_BRACK@[106; 107) \"[\"\n+                OR_PAT@[107; 112)\n+                  PLACEHOLDER_PAT@[107; 108)\n+                    UNDERSCORE@[107; 108) \"_\"\n+                  WHITESPACE@[108; 109) \" \"\n+                  PIPE@[109; 110) \"|\"\n+                  WHITESPACE@[110; 111) \" \"\n+                  PLACEHOLDER_PAT@[111; 112)\n+                    UNDERSCORE@[111; 112) \"_\"\n+                COMMA@[112; 113) \",\"\n+                R_BRACK@[113; 114) \"]\"\n+              WHITESPACE@[114; 115) \" \"\n+              FAT_ARROW@[115; 117) \"=>\"\n+              WHITESPACE@[117; 118) \" \"\n+              TUPLE_EXPR@[118; 120)\n+                L_PAREN@[118; 119) \"(\"\n+                R_PAREN@[119; 120) \")\"\n+            COMMA@[120; 121) \",\"\n+            WHITESPACE@[121; 126) \"\\n    \"\n+            R_CURLY@[126; 127) \"}\"\n+        WHITESPACE@[127; 128) \"\\n\"\n+        R_CURLY@[128; 129) \"}\"\n+  WHITESPACE@[129; 130) \"\\n\""}, {"sha": "3f530e4899c7cdb2424c73402f6aa0e0b57f754b", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6d6f23bfb15021be91031ba983da19f0d3ada/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6d6f23bfb15021be91031ba983da19f0d3ada/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=f8d6d6f23bfb15021be91031ba983da19f0d3ada", "patch": "@@ -120,6 +120,8 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"FOR_TYPE\",\n         \"IMPL_TRAIT_TYPE\",\n         \"DYN_TRAIT_TYPE\",\n+        \"OR_PAT\",\n+        \"PAREN_PAT\",\n         \"REF_PAT\",\n         \"BOX_PAT\",\n         \"BIND_PAT\",\n@@ -412,7 +414,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct MatchExpr { Expr, MatchArmList }\n         struct MatchArmList: AttrsOwner { arms: [MatchArm] }\n         struct MatchArm: AttrsOwner {\n-            pats: [Pat],\n+            pat: Pat,\n             guard: MatchGuard,\n             Expr,\n          }\n@@ -425,6 +427,8 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n          }\n         struct RecordField { NameRef, Expr }\n \n+        struct OrPat { pats: [Pat] }\n+        struct ParenPat { Pat }\n         struct RefPat { Pat }\n         struct BoxPat { Pat }\n         struct BindPat: NameOwner { Pat }\n@@ -601,6 +605,8 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n \n         enum Pat {\n+            OrPat,\n+            ParenPat,\n             RefPat,\n             BoxPat,\n             BindPat,"}]}