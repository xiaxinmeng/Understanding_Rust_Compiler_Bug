{"sha": "7f5a2841eaefab4e37b44d4c9fd9f60019f68c82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNWEyODQxZWFlZmFiNGUzN2I0NGQ0YzlmZDlmNjAwMTlmNjhjODI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-10T20:44:53Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-17T18:15:40Z"}, "message": "Rename `from_u32_const` -> `from_u32`", "tree": {"sha": "8c3d806769ca1bda2d2532125c3e12b9f85e3422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c3d806769ca1bda2d2532125c3e12b9f85e3422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82", "html_url": "https://github.com/rust-lang/rust/commit/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "429b16e907238ef7f39dc7119263e661ec270b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/429b16e907238ef7f39dc7119263e661ec270b71", "html_url": "https://github.com/rust-lang/rust/commit/429b16e907238ef7f39dc7119263e661ec270b71"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "ba1665fb530835a4284a656d904696b285976d21", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=7f5a2841eaefab4e37b44d4c9fd9f60019f68c82", "patch": "@@ -346,7 +346,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     fn get_entry(&self, id: HirId) -> Entry<'hir> {\n-        if id.local_id == ItemLocalId::from_u32_const(0) {\n+        if id.local_id == ItemLocalId::from_u32(0) {\n             let owner = self.tcx.hir_owner(id.owner_def_id());\n             Entry { parent: owner.parent, node: owner.node }\n         } else {"}, {"sha": "3f5c6c5f31028ae093cd352c7d6137a4dbf30f1d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7f5a2841eaefab4e37b44d4c9fd9f60019f68c82", "patch": "@@ -1697,7 +1697,7 @@ rustc_index::newtype_index! {\n }\n \n impl UniverseIndex {\n-    pub const ROOT: UniverseIndex = UniverseIndex::from_u32_const(0);\n+    pub const ROOT: UniverseIndex = UniverseIndex::from_u32(0);\n \n     /// Returns the \"next\" universe index in order -- this new index\n     /// is considered to extend all previous universes. This"}, {"sha": "cd562c48e9115eb24f12bd73bf5eb138d974f533", "filename": "src/librustc_ast/node_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc_ast%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc_ast%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fnode_id.rs?ref=7f5a2841eaefab4e37b44d4c9fd9f60019f68c82", "patch": "@@ -12,7 +12,7 @@ rustc_index::newtype_index! {\n rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeId);\n \n /// `NodeId` used to represent the root of the crate.\n-pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n+pub const CRATE_NODE_ID: NodeId = NodeId::from_u32(0);\n \n /// When parsing and doing expansions, we initially give all AST nodes this AST\n /// node value. Then later, in the renumber pass, we renumber them to have"}, {"sha": "a11638a3bb24fb9217188f8f5961f1f199770bae", "filename": "src/librustc_hir/hir_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=7f5a2841eaefab4e37b44d4c9fd9f60019f68c82", "patch": "@@ -71,7 +71,7 @@ rustc_data_structures::impl_stable_hash_via_hash!(ItemLocalId);\n \n /// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_INDEX`.\n pub const CRATE_HIR_ID: HirId =\n-    HirId { owner: CRATE_DEF_INDEX, local_id: ItemLocalId::from_u32_const(0) };\n+    HirId { owner: CRATE_DEF_INDEX, local_id: ItemLocalId::from_u32(0) };\n \n pub const DUMMY_HIR_ID: HirId = HirId { owner: CRATE_DEF_INDEX, local_id: DUMMY_ITEM_LOCAL_ID };\n "}, {"sha": "d8c67f6210c7500d5c1ed399fae5a91edec373e1", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=7f5a2841eaefab4e37b44d4c9fd9f60019f68c82", "patch": "@@ -482,7 +482,7 @@ macro_rules! newtype_index {\n                    const $name:ident = $constant:expr,\n                    $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n-        $v const $name: $type = $type::from_u32_const($constant);\n+        $v const $name: $type = $type::from_u32($constant);\n         $crate::newtype_index!(\n             @derives      [$($derives,)*]\n             @attrs        [$(#[$attrs])*]"}, {"sha": "af8d5ce09b52de5f8b66b26f8d6ef03be80b0abb", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=7f5a2841eaefab4e37b44d4c9fd9f60019f68c82", "patch": "@@ -25,7 +25,7 @@ pub enum CrateNum {\n \n /// Item definitions in the currently-compiled crate would have the `CrateNum`\n /// `LOCAL_CRATE` in their `DefId`.\n-pub const LOCAL_CRATE: CrateNum = CrateNum::Index(CrateId::from_u32_const(0));\n+pub const LOCAL_CRATE: CrateNum = CrateNum::Index(CrateId::from_u32(0));\n \n impl Idx for CrateNum {\n     #[inline]"}, {"sha": "3a6847878cf41d668d62726bc0cb4c30e214c574", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5a2841eaefab4e37b44d4c9fd9f60019f68c82/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=7f5a2841eaefab4e37b44d4c9fd9f60019f68c82", "patch": "@@ -997,7 +997,7 @@ rustc_index::newtype_index! {\n \n impl Symbol {\n     const fn new(n: u32) -> Self {\n-        Symbol(SymbolIndex::from_u32_const(n))\n+        Symbol(SymbolIndex::from_u32(n))\n     }\n \n     /// Maps a string to its interned representation."}]}