{"sha": "1ae1d71938e2a177f3edb60fc30991ce2c8e4536", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZTFkNzE5MzhlMmExNzdmM2VkYjYwZmMzMDk5MWNlMmM4ZTQ1MzY=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-28T22:20:50Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-28T22:57:35Z"}, "message": "Add -Zmiri-env-exclude flag", "tree": {"sha": "a5c74b7cca3bfad14772d073baa92a148e88d27a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5c74b7cca3bfad14772d073baa92a148e88d27a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ae1d71938e2a177f3edb60fc30991ce2c8e4536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae1d71938e2a177f3edb60fc30991ce2c8e4536", "html_url": "https://github.com/rust-lang/rust/commit/1ae1d71938e2a177f3edb60fc30991ce2c8e4536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ae1d71938e2a177f3edb60fc30991ce2c8e4536/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26615807de144faefdea97ee4e7f4e024aa57d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/26615807de144faefdea97ee4e7f4e024aa57d9f", "html_url": "https://github.com/rust-lang/rust/commit/26615807de144faefdea97ee4e7f4e024aa57d9f"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "3cc4872eb7f099e7c00b63e43a963a5d8dc47eef", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ae1d71938e2a177f3edb60fc30991ce2c8e4536/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ae1d71938e2a177f3edb60fc30991ce2c8e4536/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1ae1d71938e2a177f3edb60fc30991ce2c8e4536", "patch": "@@ -160,6 +160,8 @@ Several `-Z` flags are relevant for Miri:\n * `-Zmiri-disable-isolation` disables host host isolation.  As a consequence,\n   the program has access to host resources such as environment variables and\n   randomness (and, eventually, file systems and more).\n+* `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from \n+  the host. It can be used multiple times to exclude several variables.\n * `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n   overrides the default to be `0`; be advised that using any higher level can\n   make Miri miss bugs in your program because they got optimized away."}, {"sha": "f8bd92afbec7f07648f65ae66bb04850c99f7867", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ae1d71938e2a177f3edb60fc30991ce2c8e4536/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae1d71938e2a177f3edb60fc30991ce2c8e4536/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=1ae1d71938e2a177f3edb60fc30991ce2c8e4536", "patch": "@@ -51,6 +51,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                                 let config = MiriConfig {\n                                     validate: true,\n                                     communicate: false,\n+                                    excluded_env_vars: vec![],\n                                     args: vec![],\n                                     seed: None,\n                                 };"}, {"sha": "6e4bf4a6c269ea10f016a2fb12b6f5d2823be532", "filename": "src/bin/miri.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ae1d71938e2a177f3edb60fc30991ce2c8e4536/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae1d71938e2a177f3edb60fc30991ce2c8e4536/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=1ae1d71938e2a177f3edb60fc30991ce2c8e4536", "patch": "@@ -135,6 +135,7 @@ fn main() {\n     let mut rustc_args = vec![];\n     let mut miri_args = vec![];\n     let mut after_dashdash = false;\n+    let mut excluded_env_vars = vec![];\n     for arg in std::env::args() {\n         if rustc_args.is_empty() {\n             // Very first arg: for `rustc`.\n@@ -175,6 +176,9 @@ fn main() {\n                     seed = Some(u64::from_be_bytes(bytes));\n \n                 },\n+                arg if arg.starts_with(\"-Zmiri-env-exclude=\") => {\n+                    excluded_env_vars.push(arg.trim_start_matches(\"-Zmiri-env-exclude=\").to_owned());\n+                },\n                 _ => {\n                     rustc_args.push(arg);\n                 }\n@@ -200,7 +204,13 @@ fn main() {\n \n     debug!(\"rustc arguments: {:?}\", rustc_args);\n     debug!(\"miri arguments: {:?}\", miri_args);\n-    let miri_config = miri::MiriConfig { validate, communicate, args: miri_args, seed };\n+    let miri_config = miri::MiriConfig {\n+        validate,\n+        communicate,\n+        excluded_env_vars,\n+        seed,\n+        args: miri_args,\n+    };\n     let result = rustc_driver::report_ices_to_stderr_if_any(move || {\n         rustc_driver::run_compiler(&rustc_args, &mut MiriCompilerCalls { miri_config }, None, None)\n     }).and_then(|result| result);"}, {"sha": "463f21d30ec7a9336b7e2c0fd216f7f80722a055", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ae1d71938e2a177f3edb60fc30991ce2c8e4536/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae1d71938e2a177f3edb60fc30991ce2c8e4536/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=1ae1d71938e2a177f3edb60fc30991ce2c8e4536", "patch": "@@ -22,6 +22,8 @@ pub struct MiriConfig {\n     pub validate: bool,\n     /// Determines if communication with the host environment is enabled.\n     pub communicate: bool,\n+    /// Environment variables that should always be isolated from the host.\n+    pub excluded_env_vars: Vec<String>,\n     pub args: Vec<String>,\n     /// The seed to use when non-determinism or randomness are required (e.g. ptr-to-int cast, `getrandom()`).\n     pub seed: Option<u64>,"}]}