{"sha": "96e843ce6ae42e0aa519ba45e148269de347fd84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZTg0M2NlNmFlNDJlMGFhNTE5YmE0NWUxNDgyNjlkZTM0N2ZkODQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-06T16:01:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-06T16:01:49Z"}, "message": "Rollup merge of #81738 - camelid:misc-small-diag-cleanup, r=lcnr\n\nMiscellaneous small diagnostics cleanup", "tree": {"sha": "0694af307b17fd5dea590ce76249c2510d93e598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0694af307b17fd5dea590ce76249c2510d93e598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96e843ce6ae42e0aa519ba45e148269de347fd84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgHr1tCRBK7hj4Ov3rIwAAdHIIAGgG1vaaO9wS2Mgfy+1yb4vg\nvo0l/CmcSn0rSKjj+ul2hr2DO83cR4G4ViknAz0S++Mn6GiCDx8CWnVhaV0AxnvH\nZJhP8LGhwyguRSBEMav68zhYH8V/C2TC2ZwR5KFb2k0ZDmLJpEDEIlZXOyb6U4+K\nhy7Y5odeYR2peoTtoF4PHKyJqnw51UxlhPC+N4hGIq4FAnGM7F+GNBGR6uUw8COQ\njepeKrPTppG1E18HFlNBH1QmeVBcR5qeYcE6wXZhaKdSkKIo7RYVxy2OfULRddgO\nJzg4MXBbZqIGN3n8JsThp4exCghLXoZt7k7aaVKYRUH6zmJrA1Q1h4jefMbw5m0=\n=cM0a\n-----END PGP SIGNATURE-----\n", "payload": "tree 0694af307b17fd5dea590ce76249c2510d93e598\nparent f631410159d99280c98e2df6db89a61f73d8b541\nparent 253a970c3dd35bf92040e819b7a60a5136728e59\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612627309 +0100\ncommitter GitHub <noreply@github.com> 1612627309 +0100\n\nRollup merge of #81738 - camelid:misc-small-diag-cleanup, r=lcnr\n\nMiscellaneous small diagnostics cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96e843ce6ae42e0aa519ba45e148269de347fd84", "html_url": "https://github.com/rust-lang/rust/commit/96e843ce6ae42e0aa519ba45e148269de347fd84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96e843ce6ae42e0aa519ba45e148269de347fd84/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f631410159d99280c98e2df6db89a61f73d8b541", "url": "https://api.github.com/repos/rust-lang/rust/commits/f631410159d99280c98e2df6db89a61f73d8b541", "html_url": "https://github.com/rust-lang/rust/commit/f631410159d99280c98e2df6db89a61f73d8b541"}, {"sha": "253a970c3dd35bf92040e819b7a60a5136728e59", "url": "https://api.github.com/repos/rust-lang/rust/commits/253a970c3dd35bf92040e819b7a60a5136728e59", "html_url": "https://github.com/rust-lang/rust/commit/253a970c3dd35bf92040e819b7a60a5136728e59"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "b1ac02d9fed5a0175ee2c03c9d95fefbc10c2891", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -117,7 +117,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                         {\n                             err.span_help(\n                                 tcx.def_span(def.did),\n-                                &format!(\"try adding a `where` bound using this expression: where [u8; {}]: Sized\", snippet),\n+                                &format!(\"try adding a `where` bound using this expression: `where [u8; {}]: Sized`\", snippet),\n                             );\n                         } else {\n                             err.span_help("}, {"sha": "756281450d723a261ed3e394a640481d7996a331", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -1780,7 +1780,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             multispan.push_span_label(\n                                 sp,\n                                 format!(\n-                                    \"...if indirection was used here: `Box<{}>`\",\n+                                    \"...if indirection were used here: `Box<{}>`\",\n                                     param.name.ident(),\n                                 ),\n                             );"}, {"sha": "34bd332951c06ae9a8ac343250cb273d5df8101a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -1103,7 +1103,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // This is currently not possible to trigger because E0038 takes precedence, but\n                 // leave it in for completeness in case anything changes in an earlier stage.\n                 err.note(&format!(\n-                    \"if trait `{}` was object safe, you could return a trait object\",\n+                    \"if trait `{}` were object-safe, you could return a trait object\",\n                     trait_obj,\n                 ));\n             }"}, {"sha": "229127e95d93c95dc486598a69c6382e760f7349", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -838,7 +838,7 @@ fn missing_items_err(\n     // Obtain the level of indentation ending in `sugg_sp`.\n     let indentation = tcx.sess.source_map().span_to_margin(sugg_sp).unwrap_or(0);\n     // Make the whitespace that will make the suggestion have the right indentation.\n-    let padding: String = (0..indentation).map(|_| \" \").collect();\n+    let padding: String = std::iter::repeat(\" \").take(indentation).collect();\n \n     for trait_item in missing_items {\n         let snippet = suggestion_signature(&trait_item, tcx);"}, {"sha": "1beb5315d1055615ad0a7c49abd1d801422211b8", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -4,7 +4,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n+help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n@@ -16,7 +16,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n+help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n@@ -28,7 +28,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n+help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n@@ -40,7 +40,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n+help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]"}, {"sha": "8cdc9b57750ee35f1a4c0861fe1173d69856948d", "filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -4,7 +4,7 @@ error: unconstrained generic constant\n LL |     [0; size_of::<Foo<T>>()]\n    |         ^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: where [u8; size_of::<Foo<T>>()]: Sized\n+help: try adding a `where` bound using this expression: `where [u8; size_of::<Foo<T>>()]: Sized`\n   --> $DIR/different-fn.rs:10:9\n    |\n LL |     [0; size_of::<Foo<T>>()]"}, {"sha": "945105d1a2dc6180c1643418f6adcfc16c81be8f", "filename": "src/test/ui/const_evaluatable/needs_where_clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -4,7 +4,7 @@ error: unconstrained generic constant\n LL |   b: [f32; complex_maths::<T>(N)],\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: where [u8; complex_maths::<T>(N)]: Sized\n+help: try adding a `where` bound using this expression: `where [u8; complex_maths::<T>(N)]: Sized`\n   --> $DIR/needs_where_clause.rs:11:12\n    |\n LL |   b: [f32; complex_maths::<T>(N)],"}, {"sha": "84a65f0d1d29bd8bdcda5a688ddc2cfbc2855ed0", "filename": "src/test/ui/const_evaluatable/no_where_clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -4,7 +4,7 @@ error: unconstrained generic constant\n LL |   b: [f32; complex_maths(N)],\n    |      ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: where [u8; complex_maths(N)]: Sized\n+help: try adding a `where` bound using this expression: `where [u8; complex_maths(N)]: Sized`\n   --> $DIR/no_where_clause.rs:10:12\n    |\n LL |   b: [f32; complex_maths(N)],"}, {"sha": "d4b93eb074cfed063bfca773fd53b03cde242c26", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -14,7 +14,7 @@ help: you could relax the implicit `Sized` bound on `T` if it were used through\n LL | enum Option<T> {\n    |             ^ this could be changed to `T: ?Sized`...\n LL |     Some(T),\n-   |          - ...if indirection was used here: `Box<T>`\n+   |          - ...if indirection were used here: `Box<T>`\n \n error: aborting due to previous error\n "}, {"sha": "a3d2583292551a18d7d0c852ae66500a5f58cc5d", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -14,7 +14,7 @@ help: you could relax the implicit `Sized` bound on `T` if it were used through\n LL | struct Vec<T> {\n    |            ^ this could be changed to `T: ?Sized`...\n LL |     t: T,\n-   |        - ...if indirection was used here: `Box<T>`\n+   |        - ...if indirection were used here: `Box<T>`\n \n error: aborting due to previous error\n "}, {"sha": "9437fbe61cc7e94ca92ea364c2b41335908c5af6", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -13,7 +13,7 @@ help: you could relax the implicit `Sized` bound on `T` if it were used through\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10\n    |\n LL | struct X<T>(T);\n-   |          ^  - ...if indirection was used here: `Box<T>`\n+   |          ^  - ...if indirection were used here: `Box<T>`\n    |          |\n    |          this could be changed to `T: ?Sized`...\n \n@@ -68,7 +68,7 @@ help: you could relax the implicit `Sized` bound on `T` if it were used through\n LL | struct Struct3<T>{\n    |                ^ this could be changed to `T: ?Sized`...\n LL |     _t: T,\n-   |         - ...if indirection was used here: `Box<T>`\n+   |         - ...if indirection were used here: `Box<T>`\n help: consider further restricting `Self`\n    |\n LL |     fn func3() -> Struct3<Self> where Self: Sized;"}, {"sha": "3057d4789bd81df00f41fec9f7e23a52c24ddc87", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -13,7 +13,7 @@ help: you could relax the implicit `Sized` bound on `U` if it were used through\n   --> $DIR/unsized-enum.rs:4:10\n    |\n LL | enum Foo<U> { FooSome(U), FooNone }\n-   |          ^            - ...if indirection was used here: `Box<U>`\n+   |          ^            - ...if indirection were used here: `Box<U>`\n    |          |\n    |          this could be changed to `U: ?Sized`...\n "}, {"sha": "9d8a1c67734a416adaf1c8c26d593581bcf1c4ad", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -13,7 +13,7 @@ help: you could relax the implicit `Sized` bound on `Y` if it were used through\n   --> $DIR/unsized-inherent-impl-self-type.rs:5:11\n    |\n LL | struct S5<Y>(Y);\n-   |           ^  - ...if indirection was used here: `Box<Y>`\n+   |           ^  - ...if indirection were used here: `Box<Y>`\n    |           |\n    |           this could be changed to `Y: ?Sized`...\n "}, {"sha": "6661cf358b3ab07ff5e94412f70a9ec78b845cf1", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -13,7 +13,7 @@ help: you could relax the implicit `Sized` bound on `T` if it were used through\n   --> $DIR/unsized-struct.rs:4:12\n    |\n LL | struct Foo<T> { data: T }\n-   |            ^          - ...if indirection was used here: `Box<T>`\n+   |            ^          - ...if indirection were used here: `Box<T>`\n    |            |\n    |            this could be changed to `T: ?Sized`...\n "}, {"sha": "d1b590d81330707d17f3db9093871def120d267f", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -13,7 +13,7 @@ help: you could relax the implicit `Sized` bound on `Y` if it were used through\n   --> $DIR/unsized-trait-impl-self-type.rs:8:11\n    |\n LL | struct S5<Y>(Y);\n-   |           ^  - ...if indirection was used here: `Box<Y>`\n+   |           ^  - ...if indirection were used here: `Box<Y>`\n    |           |\n    |           this could be changed to `Y: ?Sized`...\n "}, {"sha": "22598e58bd744647d086f15feb3c3c72e60a60b9", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96e843ce6ae42e0aa519ba45e148269de347fd84/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=96e843ce6ae42e0aa519ba45e148269de347fd84", "patch": "@@ -28,7 +28,7 @@ help: you could relax the implicit `Sized` bound on `T` if it were used through\n LL | struct Vec<T> {\n    |            ^ this could be changed to `T: ?Sized`...\n LL |     t: T,\n-   |        - ...if indirection was used here: `Box<T>`\n+   |        - ...if indirection were used here: `Box<T>`\n \n error[E0038]: the trait `Copy` cannot be made into an object\n   --> $DIR/wf-fn-where-clause.rs:12:16"}]}