{"sha": "49297337b46eabef906a41f2c438bdd569b9227d", "node_id": "C_kwDOAAsO6NoAKDQ5Mjk3MzM3YjQ2ZWFiZWY5MDZhNDFmMmM0MzhiZGQ1NjliOTIyN2Q", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-02-09T19:56:37Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:08Z"}, "message": "Simplify parser syntax", "tree": {"sha": "a2b2c802aa310585fb1c3fcde8e3ecd5f65c6558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b2c802aa310585fb1c3fcde8e3ecd5f65c6558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49297337b46eabef906a41f2c438bdd569b9227d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49297337b46eabef906a41f2c438bdd569b9227d", "html_url": "https://github.com/rust-lang/rust/commit/49297337b46eabef906a41f2c438bdd569b9227d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49297337b46eabef906a41f2c438bdd569b9227d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "html_url": "https://github.com/rust-lang/rust/commit/99d552092c7a0c154b98c8d5120b1e3ad729cfcd"}], "stats": {"total": 255, "additions": 50, "deletions": 205}, "files": [{"sha": "65a1dfe269e915a90d03fbfe802a6b5b835690a5", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 39, "deletions": 41, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/49297337b46eabef906a41f2c438bdd569b9227d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/49297337b46eabef906a41f2c438bdd569b9227d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=49297337b46eabef906a41f2c438bdd569b9227d", "patch": "@@ -129,17 +129,21 @@ window.initSearch = function(rawSearchIndex) {\n     }\n \n     function isSpecialStartCharacter(c) {\n-        return \"(<\\\"\".indexOf(c) !== -1;\n+        return \"<\\\"\".indexOf(c) !== -1;\n     }\n \n     function isEndCharacter(c) {\n-        return \"),>-\".indexOf(c) !== -1;\n+        return \",>-\".indexOf(c) !== -1;\n     }\n \n     function isStopCharacter(c) {\n         return isWhitespace(c) || isEndCharacter(c);\n     }\n \n+    function isErrorCharacter(c) {\n+        return \"()\".indexOf(c) !== -1;\n+    }\n+\n     function itemTypeFromName(typename) {\n         for (var i = 0, len = itemTypes.length; i < len; ++i) {\n             if (itemTypes[i] === typename) {\n@@ -267,7 +271,9 @@ window.initSearch = function(rawSearchIndex) {\n         } else {\n             while (parserState.pos < parserState.length) {\n                 var c = parserState.userQuery[parserState.pos];\n-                if (isStopCharacter(c) || isSpecialStartCharacter(c)) {\n+                if (isErrorCharacter(c)) {\n+                    throw new Error(`Unexpected \\`${c}\\``);\n+                } else if (isStopCharacter(c) || isSpecialStartCharacter(c)) {\n                     break;\n                 }\n                 // If we allow paths (\"str::string\" for example).\n@@ -285,6 +291,9 @@ window.initSearch = function(rawSearchIndex) {\n         if (parserState.pos < parserState.length &&\n             parserState.userQuery[parserState.pos] === \"<\")\n         {\n+            if (isInGenerics) {\n+                throw new Error(\"Unexpected `<` after `<`\");\n+            }\n             parserState.pos += 1;\n             getItemsBefore(query, parserState, generics, \">\");\n         }\n@@ -317,12 +326,10 @@ window.initSearch = function(rawSearchIndex) {\n                 continue;\n             } else if (c === \":\" && isPathStart(parserState)) {\n                 throw new Error(\"Unexpected `::`: paths cannot start with `::`\");\n-            } else if (c === \"(\" || c === \":\" || isEndCharacter(c)) {\n+            } else if (c === \":\" || isEndCharacter(c)) {\n                 var extra = \"\";\n                 if (limit === \">\") {\n                     extra = \"`<`\";\n-                } else if (limit === \")\") {\n-                    extra = \"`(`\";\n                 } else if (limit === \"\") {\n                     extra = \"`->`\";\n                 }\n@@ -356,8 +363,6 @@ window.initSearch = function(rawSearchIndex) {\n                 } else if (c === \"-\" && isReturnArrow(parserState)) {\n                     break;\n                 }\n-            } else if (c == \"(\") {\n-                break;\n             } else if (c === \":\" &&\n                 parserState.typeFilter === null &&\n                 !isPathStart(parserState))\n@@ -391,11 +396,7 @@ window.initSearch = function(rawSearchIndex) {\n         }\n         while (parserState.pos < parserState.length) {\n             c = parserState.userQuery[parserState.pos];\n-            if (query.args.length === 0 && c === \"(\") {\n-                parserState.pos += 1;\n-                // Check for function/method arguments.\n-                getItemsBefore(query, parserState, query.args, \")\");\n-            } else if (isReturnArrow(parserState)) {\n+            if (isReturnArrow(parserState)) {\n                 parserState.pos += 2;\n                 // Get returned elements.\n                 getItemsBefore(query, parserState, query.returned, \"\");\n@@ -419,7 +420,6 @@ window.initSearch = function(rawSearchIndex) {\n             userQuery: userQuery.toLowerCase(),\n             typeFilter: NO_TYPE_FILTER,\n             elems: [],\n-            args: [],\n             returned: [],\n             // Total number of \"top\" elements (does not include generics).\n             foundElems: 0,\n@@ -466,19 +466,19 @@ window.initSearch = function(rawSearchIndex) {\n      *\n      * The supported syntax by this parser is as follow:\n      *\n-     * ident = *1(ALPHA / DIGIT)\n-     * path = ident *WS *(DOUBLE-COLON *WS ident)\n-     * arg = path *WS [generics]\n+     * ident = *(ALPHA / DIGIT)\n+     * path = ident *(DOUBLE-COLON ident)\n+     * arg = path [generics]\n+     * arg-without-generic = path\n      * nonempty-arg-list = arg *WS *(COMMA *WS arg)\n-     * generics = OPEN-ANGLE-BRACKET *WS nonempty-arg-list *WS CLOSE-ANGLE-BRACKET\n-     * function-args = OPEN-PAREN *WS [nonempty-arg-list] *WS END-PAREN\n-     * return-args = RETURN-ARROW *WS function-args\n+     * nonempty-arg-list-without-generics = arg-without-generic *WS *(COMMA *WS arg-without-generic)\n+     * generics = OPEN-ANGLE-BRACKET *WS nonempty-arg-list-without-generics *WS CLOSE-ANGLE-BRACKET\n+     * return-args = RETURN-ARROW *WS nonempty-arg-list\n      *\n      * exact-search = [type-filter *WS COLON] *WS QUOTE ident QUOTE *WS [generics]\n      * type-search = [type-filter *WS COLON] *WS path *WS generics\n-     * function-search = path *WS function-args *WS [return-args]\n      *\n-     * query = *WS (exact-search / type-search / function-search / return-args) *WS\n+     * query = *WS (exact-search / type-search / return-args) *WS\n      *\n      * type-filter = (\n      *     \"mod\" /\n@@ -510,8 +510,6 @@ window.initSearch = function(rawSearchIndex) {\n      *\n      * OPEN-ANGLE-BRACKET = \"<\"\n      * CLOSE-ANGLE-BRACKET = \">\"\n-     * OPEN-PAREN = \"(\"\n-     * END-PAREN = \")\"\n      * COLON = \":\"\n      * DOUBLE-COLON = \"::\"\n      * QUOTE = %x22\n@@ -554,7 +552,7 @@ window.initSearch = function(rawSearchIndex) {\n             // case.\n             query.literalSearch = parserState.totalElems > 1;\n         }\n-        query.foundElems = query.elems.length + query.args.length + query.returned.length;\n+        query.foundElems = query.elems.length + query.returned.length;\n         if (query.foundElems === 0 && parserState.length !== 0) {\n             // In this case, we'll simply keep whatever was entered by the user...\n             createQueryElement(query, parserState, query.elems, userQuery, []);\n@@ -743,6 +741,11 @@ window.initSearch = function(rawSearchIndex) {\n         function checkGenerics(row, elem, defaultLev) {\n             if (row.length <= GENERICS_DATA || row[GENERICS_DATA].length === 0) {\n                 return elem.generics.length === 0 ? defaultLev : MAX_LEV_DISTANCE + 1;\n+            } else if (row[GENERICS_DATA].length > 0 && row[GENERICS_DATA][0][NAME] === \"\") {\n+                if (row.length > GENERICS_DATA) {\n+                    return checkGenerics(row[GENERICS_DATA][0], elem, defaultLev);\n+                }\n+                return elem.generics.length === 0 ? defaultLev : MAX_LEV_DISTANCE + 1;\n             }\n             // The names match, but we need to be sure that all generics kinda\n             // match as well.\n@@ -751,7 +754,15 @@ window.initSearch = function(rawSearchIndex) {\n                 var elems = {};\n                 for (var x = 0, length = row[GENERICS_DATA].length; x < length; ++x) {\n                     elem_name = row[GENERICS_DATA][x][NAME];\n-                    if (!elems[elem_name]) {\n+                    if (elem_name === \"\") {\n+                        // Pure generic, needs to check into it.\n+                        if (checkGenerics(\n+                                row[GENERICS_DATA][x], elem, MAX_LEV_DISTANCE + 1) !== 0) {\n+                            return MAX_LEV_DISTANCE + 1;\n+                        }\n+                        continue;\n+                    }\n+                    if (elems[elem_name] === undefined) {\n                         elems[elem_name] = 0;\n                     }\n                     elems[elem_name] += 1;\n@@ -1216,9 +1227,6 @@ window.initSearch = function(rawSearchIndex) {\n             if (!checkArgs(parsedQuery.elems, findArg)) {\n                 return;\n             }\n-            if (!checkArgs(parsedQuery.args, findArg)) {\n-                return;\n-            }\n             if (!checkArgs(parsedQuery.returned, checkReturned)) {\n                 return;\n             }\n@@ -1231,7 +1239,7 @@ window.initSearch = function(rawSearchIndex) {\n         }\n \n         function innerRunQuery() {\n-            var elem, i, nSearchWords, in_args, in_returned, row;\n+            var elem, i, nSearchWords, in_returned, row;\n \n             if (parsedQuery.foundElems === 1) {\n                 if (parsedQuery.elems.length === 1) {\n@@ -1241,14 +1249,6 @@ window.initSearch = function(rawSearchIndex) {\n                         // returned).\n                         handleSingleArg(searchIndex[i], i, elem);\n                     }\n-                } else if (parsedQuery.args.length === 1) {\n-                    // We received one argument to check, so looking into args.\n-                    elem = parsedQuery.args[0];\n-                    for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {\n-                        row = searchIndex[i];\n-                        in_args = findArg(row, elem, parsedQuery.typeFilter);\n-                        addIntoResults(results_in_args, row.id, i, -1, in_args);\n-                    }\n                 } else if (parsedQuery.returned.length === 1) {\n                     // We received one returned argument to check, so looking into returned values.\n                     elem = parsedQuery.returned[0];\n@@ -1262,9 +1262,7 @@ window.initSearch = function(rawSearchIndex) {\n                 var container = results_others;\n                 // In the special case where only a \"returned\" information is available, we want to\n                 // put the information into the \"results_returned\" dict.\n-                if (parsedQuery.returned.length !== 0 && parsedQuery.args.length === 0 &&\n-                    parsedQuery.elems.length === 0)\n-                {\n+                if (parsedQuery.returned.length !== 0 && parsedQuery.elems.length === 0) {\n                     container = results_returned;\n                 }\n                 for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {"}, {"sha": "7d00b7fed59cdb9dc8e56a18696dfdf6ab8b4e39", "filename": "src/test/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js?ref=49297337b46eabef906a41f2c438bdd569b9227d", "patch": "@@ -19,7 +19,6 @@ const QUERY = [\n \n const PARSED = [\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"<\\\"P\\\">\",\n@@ -29,7 +28,6 @@ const PARSED = [\n         error: \"`\\\"` cannot be used in generics\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"\\\"P\\\" \\\"P\\\"\",\n@@ -39,7 +37,6 @@ const PARSED = [\n         error: \"Cannot have more than one literal search element\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"P \\\"P\\\"\",\n@@ -49,7 +46,6 @@ const PARSED = [\n         error: \"Cannot use literal search when there is more than one element\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"\\\"p\\\" p\",\n@@ -59,7 +55,6 @@ const PARSED = [\n         error: \"You cannot have more than one element if you use quotes\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"\\\"const\\\": p\",\n@@ -69,7 +64,6 @@ const PARSED = [\n         error: \"You cannot use quotes on type filter\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"<:a>\",\n@@ -79,7 +73,6 @@ const PARSED = [\n         error: \"Unexpected `:` after `<`\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"<::a>\",\n@@ -89,17 +82,15 @@ const PARSED = [\n         error: \"Unexpected `::`: paths cannot start with `::`\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"((a))\",\n         returned: [],\n         typeFilter: -1,\n         userQuery: \"((a))\",\n-        error: \"Unexpected `(` after `(`\",\n+        error: \"Unexpected `(`\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"->,a\",\n@@ -109,17 +100,15 @@ const PARSED = [\n         error: \"Unexpected `,` after `->`\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"(p -> p\",\n         returned: [],\n         typeFilter: -1,\n         userQuery: \"(p -> p\",\n-        error: \"Unexpected `-` after `(`\",\n+        error: \"Unexpected `(`\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"::a::b\",\n@@ -129,7 +118,6 @@ const PARSED = [\n         error: \"Paths cannot start with `::`\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"a::::b\",\n@@ -139,7 +127,6 @@ const PARSED = [\n         error: \"Unexpected `::::`\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"a::b::\",\n@@ -149,7 +136,6 @@ const PARSED = [\n         error: \"Paths cannot end with `::`\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \":a\",\n@@ -159,7 +145,6 @@ const PARSED = [\n         error: \"Expected type filter before `:`\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"a b:\",\n@@ -169,17 +154,15 @@ const PARSED = [\n         error: \"Unexpected `:`\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"a (b:\",\n         returned: [],\n         typeFilter: -1,\n         userQuery: \"a (b:\",\n-        error: \"Unexpected `:` after `(`\",\n+        error: \"Unexpected `(`\",\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"{:\","}, {"sha": "e5a87a415ac476e8bdf59920435f7550627ff172", "filename": "src/test/rustdoc-js-std/parser-filter.js", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js", "raw_url": "https://github.com/rust-lang/rust/raw/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js?ref=49297337b46eabef906a41f2c438bdd569b9227d", "patch": "@@ -2,7 +2,6 @@ const QUERY = ['fn:foo', 'enum : foo', 'macro<f>:foo'];\n \n const PARSED = [\n     {\n-        args: [],\n         elems: [{\n             name: \"foo\",\n             fullPath: [\"foo\"],\n@@ -18,7 +17,6 @@ const PARSED = [\n         error: null,\n     },\n     {\n-        args: [],\n         elems: [{\n             name: \"foo\",\n             fullPath: [\"foo\"],\n@@ -34,7 +32,6 @@ const PARSED = [\n         error: null,\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 0,\n         original: \"macro<f>:foo\","}, {"sha": "cf8d99ef22a481a91c2ca53874513c2c45ca29aa", "filename": "src/test/rustdoc-js-std/parser-generics.js", "status": "modified", "additions": 3, "deletions": 43, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "raw_url": "https://github.com/rust-lang/rust/raw/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js?ref=49297337b46eabef906a41f2c438bdd569b9227d", "patch": "@@ -2,7 +2,6 @@ const QUERY = ['<P>', 'A<B<C<D>,  E>', 'p<> u8'];\n \n const PARSED = [\n     {\n-        args: [],\n         elems: [{\n             name: \"\",\n             fullPath: [\"\"],\n@@ -26,54 +25,15 @@ const PARSED = [\n         error: null,\n     },\n     {\n-        args: [],\n-        elems: [{\n-            name: \"a\",\n-            fullPath: [\"a\"],\n-            pathWithoutLast: [],\n-            pathLast: \"a\",\n-            generics: [\n-                {\n-                    name: \"b\",\n-                    fullPath: [\"b\"],\n-                    pathWithoutLast: [],\n-                    pathLast: \"b\",\n-                    generics: [\n-                        {\n-                            name: \"c\",\n-                            fullPath: [\"c\"],\n-                            pathWithoutLast: [],\n-                            pathLast: \"c\",\n-                            generics: [\n-                                {\n-                                    name: \"d\",\n-                                    fullPath: [\"d\"],\n-                                    pathWithoutLast: [],\n-                                    pathLast: \"d\",\n-                                    generics: [],\n-                                },\n-                            ],\n-                        },\n-                        {\n-                            name: \"e\",\n-                            fullPath: [\"e\"],\n-                            pathWithoutLast: [],\n-                            pathLast: \"e\",\n-                            generics: [],\n-                        },\n-                    ],\n-                },\n-            ],\n-        }],\n-        foundElems: 1,\n+        elems: [],\n+        foundElems: 0,\n         original: 'A<B<C<D>,  E>',\n         returned: [],\n         typeFilter: -1,\n         userQuery: 'a<b<c<d>,  e>',\n-        error: null,\n+        error: 'Unexpected `<` after `<`',\n     },\n     {\n-        args: [],\n         elems: [\n             {\n                 name: \"p\","}, {"sha": "e74e423ceed8220b427cd5628b59ec7e822b232a", "filename": "src/test/rustdoc-js-std/parser-in_args.js", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-in_args.js", "raw_url": "https://github.com/rust-lang/rust/raw/99d552092c7a0c154b98c8d5120b1e3ad729cfcd/src%2Ftest%2Frustdoc-js-std%2Fparser-in_args.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-in_args.js?ref=99d552092c7a0c154b98c8d5120b1e3ad729cfcd", "patch": "@@ -1,44 +0,0 @@\n-const QUERY = ['(whatever)', '(<P>)'];\n-\n-const PARSED = [\n-    {\n-        args: [{\n-            name: \"whatever\",\n-            fullPath: [\"whatever\"],\n-            pathWithoutLast: [],\n-            pathLast: \"whatever\",\n-            generics: [],\n-        }],\n-        elems: [],\n-        foundElems: 1,\n-        original: \"(whatever)\",\n-        returned: [],\n-        typeFilter: -1,\n-        userQuery: \"(whatever)\",\n-        error: null,\n-    },\n-    {\n-        args: [{\n-            name: \"\",\n-            fullPath: [\"\"],\n-            pathWithoutLast: [],\n-            pathLast: \"\",\n-            generics: [\n-                {\n-                    name: \"p\",\n-                    fullPath: [\"p\"],\n-                    pathWithoutLast: [],\n-                    pathLast: \"p\",\n-                    generics: [],\n-                },\n-            ],\n-        }],\n-        elems: [],\n-        foundElems: 1,\n-        original: \"(<P>)\",\n-        returned: [],\n-        typeFilter: -1,\n-        userQuery: \"(<p>)\",\n-        error: null,\n-    },\n-];"}, {"sha": "87ebe21c49ba195cc9447cd3cd86e5734661f3c1", "filename": "src/test/rustdoc-js-std/parser-invalid.js", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js", "raw_url": "https://github.com/rust-lang/rust/raw/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js?ref=49297337b46eabef906a41f2c438bdd569b9227d", "patch": "@@ -5,7 +5,6 @@ const QUERY = ['a b', 'a   b', 'a,b(c)'];\n \n const PARSED = [\n     {\n-        args: [],\n         elems: [\n             {\n                 name: \"a\",\n@@ -30,7 +29,6 @@ const PARSED = [\n         error: null,\n     },\n     {\n-        args: [],\n         elems: [\n             {\n                 name: \"a\",\n@@ -55,36 +53,12 @@ const PARSED = [\n         error: null,\n     },\n     {\n-        args: [\n-            {\n-                name: \"c\",\n-                fullPath: [\"c\"],\n-                pathWithoutLast: [],\n-                pathLast: \"c\",\n-                generics: [],\n-            },\n-        ],\n-        elems: [\n-            {\n-                name: \"a\",\n-                fullPath: [\"a\"],\n-                pathWithoutLast: [],\n-                pathLast: \"a\",\n-                generics: [],\n-            },\n-            {\n-                name: \"b\",\n-                fullPath: [\"b\"],\n-                pathWithoutLast: [],\n-                pathLast: \"b\",\n-                generics: [],\n-            },\n-        ],\n-        foundElems: 3,\n+        elems: [],\n+        foundElems: 0,\n         original: \"a,b(c)\",\n         returned: [],\n         typeFilter: -1,\n         userQuery: \"a,b(c)\",\n-        error: null,\n+        error: \"Unexpected `(`\",\n     },\n ];"}, {"sha": "87b3baff1e2a4bcdedf0ddfab5d82f44bdfac641", "filename": "src/test/rustdoc-js-std/parser-literal.js", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-literal.js", "raw_url": "https://github.com/rust-lang/rust/raw/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-literal.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-literal.js?ref=49297337b46eabef906a41f2c438bdd569b9227d", "patch": "@@ -2,7 +2,6 @@ const QUERY = ['R<P>'];\n \n const PARSED = [\n     {\n-        args: [],\n         elems: [{\n             name: \"r\",\n             fullPath: [\"r\"],"}, {"sha": "c8c7f21b9bde043570f2bc36eacac856b059d26b", "filename": "src/test/rustdoc-js-std/parser-paths.js", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js", "raw_url": "https://github.com/rust-lang/rust/raw/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js?ref=49297337b46eabef906a41f2c438bdd569b9227d", "patch": "@@ -2,7 +2,6 @@ const QUERY = ['A::B', 'A::B,C',  'A::B<f>,C'];\n \n const PARSED = [\n     {\n-        args: [],\n         elems: [{\n             name: \"a::b\",\n             fullPath: [\"a\", \"b\"],\n@@ -18,7 +17,6 @@ const PARSED = [\n         error: null,\n     },\n     {\n-        args: [],\n         elems: [\n             {\n                 name: \"a::b\",\n@@ -43,7 +41,6 @@ const PARSED = [\n         error: null,\n     },\n     {\n-        args: [],\n         elems: [\n             {\n                 name: \"a::b\","}, {"sha": "e8b1c9a7719c6e46ac0ebd3f612e3f5a8c3918f1", "filename": "src/test/rustdoc-js-std/parser-quote.js", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-quote.js", "raw_url": "https://github.com/rust-lang/rust/raw/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-quote.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-quote.js?ref=49297337b46eabef906a41f2c438bdd569b9227d", "patch": "@@ -1,8 +1,7 @@\n-const QUERY = ['-> \"p\"', '(\"p\")'];\n+const QUERY = ['-> \"p\"'];\n \n const PARSED = [\n     {\n-        args: [],\n         elems: [],\n         foundElems: 1,\n         original: \"-> \\\"p\\\"\",\n@@ -17,20 +16,4 @@ const PARSED = [\n         userQuery: \"-> \\\"p\\\"\",\n         error: null,\n     },\n-    {\n-        args: [{\n-            name: \"p\",\n-            fullPath: [\"p\"],\n-            pathWithoutLast: [],\n-            pathLast: \"p\",\n-            generics: [],\n-        }],\n-        elems: [],\n-        foundElems: 1,\n-        original: \"(\\\"p\\\")\",\n-        returned: [],\n-        typeFilter: -1,\n-        userQuery: \"(\\\"p\\\")\",\n-        error: null,\n-    },\n ];"}, {"sha": "db64b03c0b3ad554554510f2ceb03bd759758efb", "filename": "src/test/rustdoc-js-std/parser-returned.js", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js", "raw_url": "https://github.com/rust-lang/rust/raw/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js?ref=49297337b46eabef906a41f2c438bdd569b9227d", "patch": "@@ -2,7 +2,6 @@ const QUERY = ['-> <P>', '-> P'];\n \n const PARSED = [\n     {\n-        args: [],\n         elems: [],\n         foundElems: 1,\n         original: \"-> <P>\",\n@@ -26,7 +25,6 @@ const PARSED = [\n         error: null,\n     },\n     {\n-        args: [],\n         elems: [],\n         foundElems: 1,\n         original: \"-> P\","}, {"sha": "afd878423c0a6b2d01d1988ea30627814f6188e7", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/49297337b46eabef906a41f2c438bdd569b9227d/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=49297337b46eabef906a41f2c438bdd569b9227d", "patch": "@@ -274,7 +274,7 @@ function loadSearchJsAndIndex(searchJs, searchIndex, storageJs, crate) {\n                            \"isWhitespace\", \"isSpecialStartCharacter\", \"isStopCharacter\",\n                            \"parseInput\", \"getItemsBefore\", \"getNextElem\", \"createQueryElement\",\n                            \"isReturnArrow\", \"isPathStart\", \"getStringElem\", \"newParsedQuery\",\n-                           \"itemTypeFromName\", \"isEndCharacter\"];\n+                           \"itemTypeFromName\", \"isEndCharacter\", \"isErrorCharacter\"];\n \n     const functions = [\"hasOwnPropertyRustdoc\", \"onEach\"];\n     ALIASES = {};"}]}