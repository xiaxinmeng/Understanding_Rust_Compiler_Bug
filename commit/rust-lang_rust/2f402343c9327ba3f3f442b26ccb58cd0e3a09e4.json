{"sha": "2f402343c9327ba3f3f442b26ccb58cd0e3a09e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNDAyMzQzYzkzMjdiYTNmM2Y0NDJiMjZjY2I1OGNkMGUzYTA5ZTQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-13T10:31:16Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-13T11:05:59Z"}, "message": "Make for loop alias-safe", "tree": {"sha": "b193d017da9003948df562ed857df97c3b5b1e1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b193d017da9003948df562ed857df97c3b5b1e1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4", "html_url": "https://github.com/rust-lang/rust/commit/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e92f90952a2f9afc64079dc0f2dd02dd6484388", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e92f90952a2f9afc64079dc0f2dd02dd6484388", "html_url": "https://github.com/rust-lang/rust/commit/3e92f90952a2f9afc64079dc0f2dd02dd6484388"}], "stats": {"total": 100, "additions": 46, "deletions": 54}, "files": [{"sha": "be996ae39ec9fa746e8ffbd31338bc5525c36c43", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 28, "deletions": 38, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=2f402343c9327ba3f3f442b26ccb58cd0e3a09e4", "patch": "@@ -59,23 +59,12 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate) -> copy_map {\n fn visit_fn(f: ast::_fn, _tp: [ast::ty_param], _sp: span, _name: fn_ident,\n             _id: ast::node_id, sc: scope, v: vt<scope>) {\n     visit::visit_fn_decl(f.decl, sc, v);\n-    let scope =\n-        alt f.proto {\n-\n-\n-\n-          // Blocks need to obey any restrictions from the enclosing scope.\n-          ast::proto_block. | ast::proto_closure. {\n-            sc\n-          }\n-\n-\n-\n-          // Non capturing functions start out fresh.\n-          _ {\n-            @[]\n-          }\n-        };\n+    let scope = alt f.proto {\n+      // Blocks need to obey any restrictions from the enclosing scope.\n+      ast::proto_block. | ast::proto_closure. { sc }\n+      // Non capturing functions start out fresh.\n+      _ { @[] }\n+    };\n     v.visit_block(f.body, scope, v);\n }\n \n@@ -279,7 +268,7 @@ fn check_alt(cx: ctx, input: @ast::expr, arms: [ast::arm], sc: scope,\n         type info = {id: node_id, mutable unsafe: [ty::t], span: span};\n         let binding_info: [info] = [];\n         for pat in a.pats {\n-            for proot in *pattern_roots(cx.tcx, root.ds, pat) {\n+            for proot in *pattern_roots(cx.tcx, *root.ds, pat) {\n                 let canon_id = pat_id_map.get(proot.name);\n                 // FIXME I wanted to use a block, but that hit a\n                 // typestate bug.\n@@ -327,33 +316,34 @@ fn check_for(cx: ctx, local: @ast::local, seq: @ast::expr, blk: ast::blk,\n              sc: scope, v: vt<scope>) {\n     v.visit_expr(seq, sc, v);\n     let root = expr_root(cx.tcx, seq, false);\n-    let unsafe = inner_mut(root.ds);\n \n     // If this is a mutable vector, don't allow it to be touched.\n     let seq_t = ty::expr_ty(cx.tcx, seq);\n-    let elt_t;\n+    let ext_ds = *root.ds;\n     alt ty::struct(cx.tcx, seq_t) {\n       ty::ty_vec(mt) {\n-        if mt.mut != ast::imm { unsafe = [seq_t]; }\n-        elt_t = mt.ty;\n+        if mt.mut != ast::imm {\n+            ext_ds += [@{mut: true, kind: index, outer_t: seq_t}];\n+        }\n       }\n-      ty::ty_str. { elt_t = ty::mk_mach(cx.tcx, ast::ty_u8); }\n+      _ {}\n     }\n     let root_var = path_def_id(cx, root.ex);\n-    let new_sc =\n-        @{root_var: root_var,\n-          // FIXME reenable when trans knows how to copy for vars\n-          node_id: 0, // blk.node.id,\n-          ty: elt_t,\n-          span: local.node.pat.span,\n-          local_id: cx.next_local,\n-          bindings: ast_util::pat_binding_ids(local.node.pat),\n-          unsafe_tys: unsafe,\n-          depends_on: deps(sc, root_var),\n-          mutable ok: valid,\n-          mutable given_up: false};\n+    let new_sc = *sc;\n+    for proot in *pattern_roots(cx.tcx, ext_ds, local.node.pat) {\n+        new_sc += [@{root_var: root_var,\n+                     node_id: proot.id,\n+                     ty: ty::node_id_to_type(cx.tcx, proot.id),\n+                     span: proot.span,\n+                     local_id: cx.next_local,\n+                     bindings: [proot.id],\n+                     unsafe_tys: inner_mut(proot.ds),\n+                     depends_on: deps(sc, root_var),\n+                     mutable ok: valid,\n+                     mutable given_up: false}];\n+    }\n     register_locals(cx, local.node.pat);\n-    visit::visit_block(blk, @(*sc + [new_sc]), v);\n+    visit::visit_block(blk, @new_sc, v);\n }\n \n fn check_var(cx: ctx, ex: @ast::expr, p: ast::path, id: ast::node_id,\n@@ -555,7 +545,7 @@ fn copy_is_expensive(tcx: ty::ctxt, ty: ty::t) -> bool {\n \n type pattern_root = {id: node_id, name: ident, ds: @[deref], span: span};\n \n-fn pattern_roots(tcx: ty::ctxt, base: @[deref], pat: @ast::pat)\n+fn pattern_roots(tcx: ty::ctxt, base: [deref], pat: @ast::pat)\n     -> @[pattern_root] {\n     fn walk(tcx: ty::ctxt, base: [deref], pat: @ast::pat,\n             &set: [pattern_root]) {\n@@ -587,7 +577,7 @@ fn pattern_roots(tcx: ty::ctxt, base: @[deref], pat: @ast::pat)\n         }\n     }\n     let set = [];\n-    walk(tcx, *base, pat, set);\n+    walk(tcx, base, pat, set);\n     ret @set;\n }\n "}, {"sha": "419b8fb4ae40b212264f3573bd02228928b5e97e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2f402343c9327ba3f3f442b26ccb58cd0e3a09e4", "patch": "@@ -2418,22 +2418,16 @@ fn trans_if(cx: @block_ctxt, cond: @ast::expr, thn: ast::blk,\n \n fn trans_for(cx: @block_ctxt, local: @ast::local, seq: @ast::expr,\n              body: ast::blk) -> result {\n-    fn inner(cx: @block_ctxt, local: @ast::local, curr: ValueRef, t: ty::t,\n+    fn inner(bcx: @block_ctxt, local: @ast::local, curr: ValueRef, t: ty::t,\n              body: ast::blk, outer_next_cx: @block_ctxt) -> @block_ctxt {\n-        let next_cx = new_sub_block_ctxt(cx, \"next\");\n+        let next_cx = new_sub_block_ctxt(bcx, \"next\");\n         let scope_cx =\n-            new_loop_scope_block_ctxt(cx,\n-                                      option::some::<@block_ctxt>(next_cx),\n+            new_loop_scope_block_ctxt(bcx, option::some(next_cx),\n                                       outer_next_cx, \"for loop scope\");\n-        Br(cx, scope_cx.llbb);\n-        let {bcx: bcx, val: dst} = alloc_local(scope_cx, local);\n-        let val =\n-            load_if_immediate(bcx, PointerCast(bcx, curr, val_ty(dst)), t);\n-        let bcx = copy_val(bcx, INIT, dst, val, t);\n-        add_clean(scope_cx, dst, t);\n-        let bcx =\n-            trans_alt::bind_irrefutable_pat(bcx, local.node.pat, dst,\n-                                            cx.fcx.lllocals, false);\n+        Br(bcx, scope_cx.llbb);\n+        curr = PointerCast(bcx, curr, T_ptr(type_of_or_i8(bcx, t)));\n+        bcx = trans_alt::bind_irrefutable_pat(scope_cx, local.node.pat, curr,\n+                                              bcx.fcx.lllocals, false);\n         bcx = trans_block(bcx, body, return).bcx;\n         if !is_terminated(bcx) {\n             Br(bcx, next_cx.llbb);"}, {"sha": "2410cd2ea477e55ff37a667311f8e1c1ae230eca", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=2f402343c9327ba3f3f442b26ccb58cd0e3a09e4", "patch": "@@ -571,7 +571,7 @@ fn bind_irrefutable_pat(bcx: @block_ctxt, pat: @ast::pat, val: ValueRef,\n     let ccx = bcx.fcx.lcx.ccx;\n     alt pat.node {\n       ast::pat_bind(_) {\n-        if make_copy {\n+        if make_copy || ccx.copy_map.contains_key(pat.id) {\n             let ty = ty::node_id_to_monotype(ccx.tcx, pat.id);\n             // FIXME: Could constrain pat_bind to make this\n             // check unnecessary."}, {"sha": "11d8d894269f867dfba4f4fc88027a2572911ea7", "filename": "src/test/compile-fail/unsafe-for.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs?ref=2f402343c9327ba3f3f442b26ccb58cd0e3a09e4", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:invalidate reference x\n \n fn main() {\n-    let v: [mutable int] = [mutable 1, 2, 3];\n-    for x: int in v { v[0] = 10; log x; }\n+    let v: [mutable {mutable x: int}] = [mutable {mutable x: 1}];\n+    for x in v { v[0] = {mutable x: 2}; log x; }\n }"}, {"sha": "a91b572e70342f65e8b58ff07d21ae9f909436fe", "filename": "src/test/run-pass/for-implicit-copy.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4/src%2Ftest%2Frun-pass%2Ffor-implicit-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f402343c9327ba3f3f442b26ccb58cd0e3a09e4/src%2Ftest%2Frun-pass%2Ffor-implicit-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-implicit-copy.rs?ref=2f402343c9327ba3f3f442b26ccb58cd0e3a09e4", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let x = [@{mutable a: @10, b: @20}];\n+    for @{a, b} in x {\n+        assert *a == 10;\n+        (*x[0]).a = @30;\n+        assert *a == 10;\n+    }\n+}"}]}