{"sha": "a3deca46754448ff3dfbbd0487e249b98e753a11", "node_id": "C_kwDOAAsO6NoAKGEzZGVjYTQ2NzU0NDQ4ZmYzZGZiYmQwNDg3ZTI0OWI5OGU3NTNhMTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-02T06:11:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-02T06:11:07Z"}, "message": "Rollup merge of #93493 - GKFX:char-docs-2, r=scottmcm\n\nDocument valid values of the char type\n\nAs discussed at #93392, the current documentation on what constitutes a valid char isn't very detailed and is partly on the MAX constant rather than the type itself.\n\nThis PR expands on that information, stating the actual numerical range, giving examples of what won't work, and also mentions how a `char` might be a valid USV but still not be a defined character (terminology checked against [Unicode 14.0, table 2-3](https://www.unicode.org/versions/Unicode14.0.0/ch02.pdf#M9.61673.TableTitle.Table.22.Types.of.Code.Points)).", "tree": {"sha": "5b94ff1abaa491cf5640f06257de5cef92e72e71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b94ff1abaa491cf5640f06257de5cef92e72e71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3deca46754448ff3dfbbd0487e249b98e753a11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+iB7CRBK7hj4Ov3rIwAAbWYIAK4jjYZTpsw4LfCmND6F0LjU\n3kN70bNJOc1LDqdOHzckgBd1ysDl8iKqrBOO9Er2cNjJcCSVWk3FjVyYe1Uva1gn\n2gziHqm5vEHqc3J048WYBLRFh4WAPxxQt2C/7GOzrp8ohKNn1j/hFez9uaozCQ8p\nGr8keriZFzj+GQkfoPrhX6nNOYy99aaNWeZw99J0K/8q/T6aUD8kuee2qs10Jlcd\ni0Jj6XJWfZJZAylRrKV6yWNGMhitImIEp6C0nEs2fwqAOMMLJBpFqvecmKUTTt4v\n43AMvkn64lXloK50WJ+iqLO/krsf5QNIyqzYIsfqGEsVaarZA1xgH3vOewMUqPk=\n=Jp/N\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b94ff1abaa491cf5640f06257de5cef92e72e71\nparent 2484cb8327e3138ac8d7ca32b372a6ddaa928339\nparent d372baf3f9a6401fdd4f74e3385ba553667b287d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643782267 +0100\ncommitter GitHub <noreply@github.com> 1643782267 +0100\n\nRollup merge of #93493 - GKFX:char-docs-2, r=scottmcm\n\nDocument valid values of the char type\n\nAs discussed at #93392, the current documentation on what constitutes a valid char isn't very detailed and is partly on the MAX constant rather than the type itself.\n\nThis PR expands on that information, stating the actual numerical range, giving examples of what won't work, and also mentions how a `char` might be a valid USV but still not be a defined character (terminology checked against [Unicode 14.0, table 2-3](https://www.unicode.org/versions/Unicode14.0.0/ch02.pdf#M9.61673.TableTitle.Table.22.Types.of.Code.Points)).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3deca46754448ff3dfbbd0487e249b98e753a11", "html_url": "https://github.com/rust-lang/rust/commit/a3deca46754448ff3dfbbd0487e249b98e753a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3deca46754448ff3dfbbd0487e249b98e753a11/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2484cb8327e3138ac8d7ca32b372a6ddaa928339", "url": "https://api.github.com/repos/rust-lang/rust/commits/2484cb8327e3138ac8d7ca32b372a6ddaa928339", "html_url": "https://github.com/rust-lang/rust/commit/2484cb8327e3138ac8d7ca32b372a6ddaa928339"}, {"sha": "d372baf3f9a6401fdd4f74e3385ba553667b287d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d372baf3f9a6401fdd4f74e3385ba553667b287d", "html_url": "https://github.com/rust-lang/rust/commit/d372baf3f9a6401fdd4f74e3385ba553667b287d"}], "stats": {"total": 118, "additions": 108, "deletions": 10}, "files": [{"sha": "ebb1d8971b99ddd63cf89315cea88df043983ebd", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a3deca46754448ff3dfbbd0487e249b98e753a11/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3deca46754448ff3dfbbd0487e249b98e753a11/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=a3deca46754448ff3dfbbd0487e249b98e753a11", "patch": "@@ -275,20 +275,69 @@ mod prim_bool {}\n mod prim_never {}\n \n #[doc(primitive = \"char\")]\n+#[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n /// The `char` type represents a single character. More specifically, since\n /// 'character' isn't a well-defined concept in Unicode, `char` is a '[Unicode\n-/// scalar value]', which is similar to, but not the same as, a '[Unicode code\n-/// point]'.\n-///\n-/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// scalar value]'.\n ///\n /// This documentation describes a number of methods and trait implementations on the\n /// `char` type. For technical reasons, there is additional, separate\n /// documentation in [the `std::char` module](char/index.html) as well.\n ///\n+/// # Validity\n+///\n+/// A `char` is a '[Unicode scalar value]', which is any '[Unicode code point]'\n+/// other than a [surrogate code point]. This has a fixed numerical definition:\n+/// code points are in the range 0 to 0x10FFFF, inclusive.\n+/// Surrogate code points, used by UTF-16, are in the range 0xD800 to 0xDFFF.\n+///\n+/// No `char` may be constructed, whether as a literal or at runtime, that is not a\n+/// Unicode scalar value:\n+///\n+/// ```compile_fail\n+/// // Each of these is a compiler error\n+/// ['\\u{D800}', '\\u{DFFF}', '\\u{110000}'];\n+/// ```\n+///\n+/// ```should_panic\n+/// // Panics; from_u32 returns None.\n+/// char::from_u32(0xDE01).unwrap();\n+/// ```\n+///\n+/// ```no_run\n+/// // Undefined behaviour\n+/// unsafe { char::from_u32_unchecked(0x110000) };\n+/// ```\n+///\n+/// USVs are also the exact set of values that may be encoded in UTF-8. Because\n+/// `char` values are USVs and `str` values are valid UTF-8, it is safe to store\n+/// any `char` in a `str` or read any character from a `str` as a `char`.\n+///\n+/// The gap in valid `char` values is understood by the compiler, so in the\n+/// below example the two ranges are understood to cover the whole range of\n+/// possible `char` values and there is no error for a [non-exhaustive match].\n+///\n+/// ```\n+/// let c: char = 'a';\n+/// match c {\n+///     '\\0' ..= '\\u{D7FF}' => false,\n+///     '\\u{E000}' ..= '\\u{10FFFF}' => true,\n+/// };\n+/// ```\n+///\n+/// All USVs are valid `char` values, but not all of them represent a real\n+/// character. Many USVs are not currently assigned to a character, but may be\n+/// in the future (\"reserved\"); some will never be a character\n+/// (\"noncharacters\"); and some may be given different meanings by different\n+/// users (\"private use\").\n+///\n+/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+/// [non-exhaustive match]: ../book/ch06-02-match.html#matches-are-exhaustive\n+/// [surrogate code point]: https://www.unicode.org/glossary/#surrogate_code_point\n+///\n /// # Representation\n ///\n /// `char` is always four bytes in size. This is a different representation than"}, {"sha": "ebb1d8971b99ddd63cf89315cea88df043983ebd", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a3deca46754448ff3dfbbd0487e249b98e753a11/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3deca46754448ff3dfbbd0487e249b98e753a11/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=a3deca46754448ff3dfbbd0487e249b98e753a11", "patch": "@@ -275,20 +275,69 @@ mod prim_bool {}\n mod prim_never {}\n \n #[doc(primitive = \"char\")]\n+#[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n /// The `char` type represents a single character. More specifically, since\n /// 'character' isn't a well-defined concept in Unicode, `char` is a '[Unicode\n-/// scalar value]', which is similar to, but not the same as, a '[Unicode code\n-/// point]'.\n-///\n-/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// scalar value]'.\n ///\n /// This documentation describes a number of methods and trait implementations on the\n /// `char` type. For technical reasons, there is additional, separate\n /// documentation in [the `std::char` module](char/index.html) as well.\n ///\n+/// # Validity\n+///\n+/// A `char` is a '[Unicode scalar value]', which is any '[Unicode code point]'\n+/// other than a [surrogate code point]. This has a fixed numerical definition:\n+/// code points are in the range 0 to 0x10FFFF, inclusive.\n+/// Surrogate code points, used by UTF-16, are in the range 0xD800 to 0xDFFF.\n+///\n+/// No `char` may be constructed, whether as a literal or at runtime, that is not a\n+/// Unicode scalar value:\n+///\n+/// ```compile_fail\n+/// // Each of these is a compiler error\n+/// ['\\u{D800}', '\\u{DFFF}', '\\u{110000}'];\n+/// ```\n+///\n+/// ```should_panic\n+/// // Panics; from_u32 returns None.\n+/// char::from_u32(0xDE01).unwrap();\n+/// ```\n+///\n+/// ```no_run\n+/// // Undefined behaviour\n+/// unsafe { char::from_u32_unchecked(0x110000) };\n+/// ```\n+///\n+/// USVs are also the exact set of values that may be encoded in UTF-8. Because\n+/// `char` values are USVs and `str` values are valid UTF-8, it is safe to store\n+/// any `char` in a `str` or read any character from a `str` as a `char`.\n+///\n+/// The gap in valid `char` values is understood by the compiler, so in the\n+/// below example the two ranges are understood to cover the whole range of\n+/// possible `char` values and there is no error for a [non-exhaustive match].\n+///\n+/// ```\n+/// let c: char = 'a';\n+/// match c {\n+///     '\\0' ..= '\\u{D7FF}' => false,\n+///     '\\u{E000}' ..= '\\u{10FFFF}' => true,\n+/// };\n+/// ```\n+///\n+/// All USVs are valid `char` values, but not all of them represent a real\n+/// character. Many USVs are not currently assigned to a character, but may be\n+/// in the future (\"reserved\"); some will never be a character\n+/// (\"noncharacters\"); and some may be given different meanings by different\n+/// users (\"private use\").\n+///\n+/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+/// [non-exhaustive match]: ../book/ch06-02-match.html#matches-are-exhaustive\n+/// [surrogate code point]: https://www.unicode.org/glossary/#surrogate_code_point\n+///\n /// # Representation\n ///\n /// `char` is always four bytes in size. This is a different representation than"}]}