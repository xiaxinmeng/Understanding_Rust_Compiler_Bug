{"sha": "acc83c0b02fcf5c8f7b9bd93d7571117f2b5284a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYzgzYzBiMDJmY2Y1YzhmN2I5YmQ5M2Q3NTcxMTE3ZjJiNTI4NGE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-17T05:43:26Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-17T05:43:26Z"}, "message": "Merge pull request #336 from Manishearth/issue335\n\nref matches: false positive with only wildcard pattern match", "tree": {"sha": "a89c22b59c9ca2867409315c120e29aec0b28983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a89c22b59c9ca2867409315c120e29aec0b28983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acc83c0b02fcf5c8f7b9bd93d7571117f2b5284a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acc83c0b02fcf5c8f7b9bd93d7571117f2b5284a", "html_url": "https://github.com/rust-lang/rust/commit/acc83c0b02fcf5c8f7b9bd93d7571117f2b5284a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acc83c0b02fcf5c8f7b9bd93d7571117f2b5284a/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3124d2b8df3f9a2f265778555f67a6eb54f81834", "url": "https://api.github.com/repos/rust-lang/rust/commits/3124d2b8df3f9a2f265778555f67a6eb54f81834", "html_url": "https://github.com/rust-lang/rust/commit/3124d2b8df3f9a2f265778555f67a6eb54f81834"}, {"sha": "e3ee87965e577a6520c2596c3a1b9dc16794427e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ee87965e577a6520c2596c3a1b9dc16794427e", "html_url": "https://github.com/rust-lang/rust/commit/e3ee87965e577a6520c2596c3a1b9dc16794427e"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "8e5a7f5157710a982687ffe6bdff112aa1bd6322", "filename": "src/matches.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/acc83c0b02fcf5c8f7b9bd93d7571117f2b5284a/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc83c0b02fcf5c8f7b9bd93d7571117f2b5284a/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=acc83c0b02fcf5c8f7b9bd93d7571117f2b5284a", "patch": "@@ -46,6 +46,7 @@ impl LintPass for MatchPass {\n \n             // check preconditions for MATCH_REF_PATS\n             if has_only_ref_pats(arms) {\n+                if in_external_macro(cx, expr.span) { return; }\n                 if let ExprAddrOf(Mutability::MutImmutable, ref inner) = ex.node {\n                     span_lint(cx, MATCH_REF_PATS, expr.span, &format!(\n                         \"you don't need to add `&` to both the expression to match \\\n@@ -69,9 +70,11 @@ fn is_unit_expr(expr: &Expr) -> bool {\n }\n \n fn has_only_ref_pats(arms: &[Arm]) -> bool {\n-    arms.iter().flat_map(|a| &a.pats).all(|p| match p.node {\n-        PatRegion(..) => true,  // &-patterns\n-        PatWild(..) => true,    // an \"anything\" wildcard is also fine\n-        _ => false,\n-    })\n+    let mapped = arms.iter().flat_map(|a| &a.pats).map(|p| match p.node {\n+        PatRegion(..) => Some(true),  // &-patterns\n+        PatWild(..) => Some(false),   // an \"anything\" wildcard is also fine\n+        _ => None,                    // any other pattern is not fine\n+    }).collect::<Option<Vec<bool>>>();\n+    // look for Some(v) where there's at least one true element\n+    mapped.map_or(false, |v| v.iter().any(|el| *el))\n }"}, {"sha": "2fd9df33ef519786f65dcd4ea20a318ece82528e", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/acc83c0b02fcf5c8f7b9bd93d7571117f2b5284a/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc83c0b02fcf5c8f7b9bd93d7571117f2b5284a/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=acc83c0b02fcf5c8f7b9bd93d7571117f2b5284a", "patch": "@@ -61,6 +61,11 @@ fn ref_pats() {\n         &Some(v) => println!(\"{:?}\", v),\n         &None => println!(\"none\"),\n     }\n+    // false positive: only wildcard pattern\n+    let w = Some(0);\n+    match w {\n+        _ => println!(\"none\"),\n+    }\n }\n \n fn main() {"}]}