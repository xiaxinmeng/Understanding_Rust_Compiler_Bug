{"sha": "b6bcf0c51b0d719cfd141c1c010b41ebe74f2abb", "node_id": "C_kwDOAAsO6NoAKGI2YmNmMGM1MWIwZDcxOWNmZDE0MWMxYzAxMGI0MWViZTc0ZjJhYmI", "commit": {"author": {"name": "Nick Mathewson", "email": "nickm@torproject.org", "date": "2021-12-31T17:20:02Z"}, "committer": {"name": "Nick Mathewson", "email": "nickm@torproject.org", "date": "2021-12-31T17:21:43Z"}, "message": "unused_io_amount: Use span_lint_and_help.\n\nThis improves the quality of the genrated output and makes it\nmore in line with other lint messages.\n\nchangelog: [`unused_io_amount`]: Improve help text", "tree": {"sha": "e6acb595faa37bad0bcb31c64800a501643d40b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6acb595faa37bad0bcb31c64800a501643d40b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6bcf0c51b0d719cfd141c1c010b41ebe74f2abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6bcf0c51b0d719cfd141c1c010b41ebe74f2abb", "html_url": "https://github.com/rust-lang/rust/commit/b6bcf0c51b0d719cfd141c1c010b41ebe74f2abb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6bcf0c51b0d719cfd141c1c010b41ebe74f2abb/comments", "author": {"login": "nmathewson", "id": 162054, "node_id": "MDQ6VXNlcjE2MjA1NA==", "avatar_url": "https://avatars.githubusercontent.com/u/162054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nmathewson", "html_url": "https://github.com/nmathewson", "followers_url": "https://api.github.com/users/nmathewson/followers", "following_url": "https://api.github.com/users/nmathewson/following{/other_user}", "gists_url": "https://api.github.com/users/nmathewson/gists{/gist_id}", "starred_url": "https://api.github.com/users/nmathewson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nmathewson/subscriptions", "organizations_url": "https://api.github.com/users/nmathewson/orgs", "repos_url": "https://api.github.com/users/nmathewson/repos", "events_url": "https://api.github.com/users/nmathewson/events{/privacy}", "received_events_url": "https://api.github.com/users/nmathewson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nmathewson", "id": 162054, "node_id": "MDQ6VXNlcjE2MjA1NA==", "avatar_url": "https://avatars.githubusercontent.com/u/162054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nmathewson", "html_url": "https://github.com/nmathewson", "followers_url": "https://api.github.com/users/nmathewson/followers", "following_url": "https://api.github.com/users/nmathewson/following{/other_user}", "gists_url": "https://api.github.com/users/nmathewson/gists{/gist_id}", "starred_url": "https://api.github.com/users/nmathewson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nmathewson/subscriptions", "organizations_url": "https://api.github.com/users/nmathewson/orgs", "repos_url": "https://api.github.com/users/nmathewson/repos", "events_url": "https://api.github.com/users/nmathewson/events{/privacy}", "received_events_url": "https://api.github.com/users/nmathewson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65d1f83d2c593c7997b4fe781814eb0fb69272e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d1f83d2c593c7997b4fe781814eb0fb69272e9", "html_url": "https://github.com/rust-lang/rust/commit/65d1f83d2c593c7997b4fe781814eb0fb69272e9"}], "stats": {"total": 81, "additions": 58, "deletions": 23}, "files": [{"sha": "287ac5b4a90835d162e12b4c9407e29f563e5578", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b6bcf0c51b0d719cfd141c1c010b41ebe74f2abb/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6bcf0c51b0d719cfd141c1c010b41ebe74f2abb/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=b6bcf0c51b0d719cfd141c1c010b41ebe74f2abb", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::{is_try, match_trait_method, paths};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -126,32 +126,40 @@ fn check_method_call(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Exp\n         };\n \n         match (read_trait, write_trait, symbol, is_await) {\n-            (true, _, \"read\", false) => span_lint(\n+            (true, _, \"read\", false) => span_lint_and_help(\n                 cx,\n                 UNUSED_IO_AMOUNT,\n                 expr.span,\n-                \"read amount is not handled. Use `Read::read_exact` instead\",\n+                \"read amount is not handled\",\n+                None,\n+                \"use `Read::read_exact` instead, or handle partial reads\",\n             ),\n-            (true, _, \"read\", true) => span_lint(\n+            (true, _, \"read\", true) => span_lint_and_help(\n                 cx,\n                 UNUSED_IO_AMOUNT,\n                 expr.span,\n-                \"read amount is not handled. Use `AsyncReadExt::read_exact` instead\",\n+                \"read amount is not handled\",\n+                None,\n+                \"use `AsyncReadExt::read_exact` instead, or handle partial reads\",\n             ),\n             (true, _, \"read_vectored\", _) => {\n                 span_lint(cx, UNUSED_IO_AMOUNT, expr.span, \"read amount is not handled\");\n             },\n-            (_, true, \"write\", false) => span_lint(\n+            (_, true, \"write\", false) => span_lint_and_help(\n                 cx,\n                 UNUSED_IO_AMOUNT,\n                 expr.span,\n-                \"written amount is not handled. Use `Write::write_all` instead\",\n+                \"written amount is not handled\",\n+                None,\n+                \"use `Write::write_all` instead, or handle partial writes\",\n             ),\n-            (_, true, \"write\", true) => span_lint(\n+            (_, true, \"write\", true) => span_lint_and_help(\n                 cx,\n                 UNUSED_IO_AMOUNT,\n                 expr.span,\n-                \"written amount is not handled. Use `AsyncWriteExt::write_all` instead\",\n+                \"written amount is not handled\",\n+                None,\n+                \"use `AsyncWriteExt::write_all` instead, or handle partial writes\",\n             ),\n             (_, true, \"write_vectored\", _) => {\n                 span_lint(cx, UNUSED_IO_AMOUNT, expr.span, \"written amount is not handled\");"}, {"sha": "e5bdd993aa1ad260736e52313562233762107b36", "filename": "tests/ui/unused_io_amount.stderr", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b6bcf0c51b0d719cfd141c1c010b41ebe74f2abb/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6bcf0c51b0d719cfd141c1c010b41ebe74f2abb/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=b6bcf0c51b0d719cfd141c1c010b41ebe74f2abb", "patch": "@@ -1,28 +1,35 @@\n-error: written amount is not handled. Use `Write::write_all` instead\n+error: written amount is not handled\n   --> $DIR/unused_io_amount.rs:9:5\n    |\n LL |     s.write(b\"test\")?;\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unused-io-amount` implied by `-D warnings`\n+   = help: use `Write::write_all` instead, or handle partial writes\n \n-error: read amount is not handled. Use `Read::read_exact` instead\n+error: read amount is not handled\n   --> $DIR/unused_io_amount.rs:11:5\n    |\n LL |     s.read(&mut buf)?;\n    |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Read::read_exact` instead, or handle partial reads\n \n-error: written amount is not handled. Use `Write::write_all` instead\n+error: written amount is not handled\n   --> $DIR/unused_io_amount.rs:16:5\n    |\n LL |     s.write(b\"test\").unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Write::write_all` instead, or handle partial writes\n \n-error: read amount is not handled. Use `Read::read_exact` instead\n+error: read amount is not handled\n   --> $DIR/unused_io_amount.rs:18:5\n    |\n LL |     s.read(&mut buf).unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Read::read_exact` instead, or handle partial reads\n \n error: read amount is not handled\n   --> $DIR/unused_io_amount.rs:22:5\n@@ -36,25 +43,31 @@ error: written amount is not handled\n LL |     s.write_vectored(&[io::IoSlice::new(&[])])?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: read amount is not handled. Use `Read::read_exact` instead\n+error: read amount is not handled\n   --> $DIR/unused_io_amount.rs:30:5\n    |\n LL |     reader.read(&mut result).ok()?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Read::read_exact` instead, or handle partial reads\n \n-error: read amount is not handled. Use `Read::read_exact` instead\n+error: read amount is not handled\n   --> $DIR/unused_io_amount.rs:39:5\n    |\n LL |     reader.read(&mut result).or_else(|err| Err(err))?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Read::read_exact` instead, or handle partial reads\n \n-error: read amount is not handled. Use `Read::read_exact` instead\n+error: read amount is not handled\n   --> $DIR/unused_io_amount.rs:51:5\n    |\n LL |     reader.read(&mut result).or(Err(Error::Kind))?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Read::read_exact` instead, or handle partial reads\n \n-error: read amount is not handled. Use `Read::read_exact` instead\n+error: read amount is not handled\n   --> $DIR/unused_io_amount.rs:58:5\n    |\n LL | /     reader\n@@ -63,42 +76,56 @@ LL | |         .or(Err(Error::Kind))\n LL | |         .or(Err(Error::Kind))\n LL | |         .expect(\"error\");\n    | |________________________^\n+   |\n+   = help: use `Read::read_exact` instead, or handle partial reads\n \n-error: written amount is not handled. Use `AsyncWriteExt::write_all` instead\n+error: written amount is not handled\n   --> $DIR/unused_io_amount.rs:67:5\n    |\n LL |     w.write(b\"hello world\").await.unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `AsyncWriteExt::write_all` instead, or handle partial writes\n \n-error: read amount is not handled. Use `AsyncReadExt::read_exact` instead\n+error: read amount is not handled\n   --> $DIR/unused_io_amount.rs:72:5\n    |\n LL |     r.read(&mut buf[..]).await.unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `AsyncReadExt::read_exact` instead, or handle partial reads\n \n-error: written amount is not handled. Use `AsyncWriteExt::write_all` instead\n+error: written amount is not handled\n   --> $DIR/unused_io_amount.rs:85:9\n    |\n LL |         w.write(b\"hello world\").await?;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `AsyncWriteExt::write_all` instead, or handle partial writes\n \n-error: read amount is not handled. Use `AsyncReadExt::read_exact` instead\n+error: read amount is not handled\n   --> $DIR/unused_io_amount.rs:93:9\n    |\n LL |         r.read(&mut buf[..]).await.or(Err(Error::Kind))?;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `AsyncReadExt::read_exact` instead, or handle partial reads\n \n-error: written amount is not handled. Use `AsyncWriteExt::write_all` instead\n+error: written amount is not handled\n   --> $DIR/unused_io_amount.rs:101:5\n    |\n LL |     w.write(b\"hello world\").await.unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `AsyncWriteExt::write_all` instead, or handle partial writes\n \n-error: read amount is not handled. Use `AsyncReadExt::read_exact` instead\n+error: read amount is not handled\n   --> $DIR/unused_io_amount.rs:106:5\n    |\n LL |     r.read(&mut buf[..]).await.unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `AsyncReadExt::read_exact` instead, or handle partial reads\n \n error: aborting due to 16 previous errors\n "}]}