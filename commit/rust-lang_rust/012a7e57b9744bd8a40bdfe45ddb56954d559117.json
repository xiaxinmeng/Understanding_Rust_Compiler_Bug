{"sha": "012a7e57b9744bd8a40bdfe45ddb56954d559117", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMmE3ZTU3Yjk3NDRiZDhhNDBiZGZlNDVkZGI1Njk1NGQ1NTkxMTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T22:35:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T23:02:08Z"}, "message": "Reduce visibility", "tree": {"sha": "e104e716c008927054214b604a75cf5df3c0f4b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e104e716c008927054214b604a75cf5df3c0f4b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/012a7e57b9744bd8a40bdfe45ddb56954d559117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/012a7e57b9744bd8a40bdfe45ddb56954d559117", "html_url": "https://github.com/rust-lang/rust/commit/012a7e57b9744bd8a40bdfe45ddb56954d559117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/012a7e57b9744bd8a40bdfe45ddb56954d559117/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19b063e055e9621a3af93b9bc6cfa20150ab0824", "url": "https://api.github.com/repos/rust-lang/rust/commits/19b063e055e9621a3af93b9bc6cfa20150ab0824", "html_url": "https://github.com/rust-lang/rust/commit/19b063e055e9621a3af93b9bc6cfa20150ab0824"}], "stats": {"total": 69, "additions": 29, "deletions": 40}, "files": [{"sha": "0b42b88ac3496e3144fb708e36318f778041cba8", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/012a7e57b9744bd8a40bdfe45ddb56954d559117/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012a7e57b9744bd8a40bdfe45ddb56954d559117/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=012a7e57b9744bd8a40bdfe45ddb56954d559117", "patch": "@@ -167,7 +167,7 @@ impl GlobalState {\n         res\n     }\n \n-    pub fn update_configuration(&mut self, config: Config) {\n+    pub(crate) fn update_configuration(&mut self, config: Config) {\n         self.analysis_host.update_lru_capacity(config.lru_capacity);\n         if config.check != self.config.check {\n             self.flycheck =\n@@ -177,7 +177,7 @@ impl GlobalState {\n         self.config = config;\n     }\n \n-    pub fn process_changes(&mut self) -> bool {\n+    pub(crate) fn process_changes(&mut self) -> bool {\n         let change = {\n             let mut change = AnalysisChange::new();\n             let (vfs, line_endings_map) = &mut *self.vfs.write();\n@@ -215,7 +215,7 @@ impl GlobalState {\n         true\n     }\n \n-    pub fn snapshot(&self) -> GlobalStateSnapshot {\n+    pub(crate) fn snapshot(&self) -> GlobalStateSnapshot {\n         GlobalStateSnapshot {\n             config: self.config.clone(),\n             workspaces: Arc::clone(&self.workspaces),\n@@ -226,11 +226,11 @@ impl GlobalState {\n         }\n     }\n \n-    pub fn maybe_collect_garbage(&mut self) {\n+    pub(crate) fn maybe_collect_garbage(&mut self) {\n         self.analysis_host.maybe_collect_garbage()\n     }\n \n-    pub fn collect_garbage(&mut self) {\n+    pub(crate) fn collect_garbage(&mut self) {\n         self.analysis_host.collect_garbage()\n     }\n "}, {"sha": "d6cd043031a1c6516daea94186c20eb28b08617f", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/012a7e57b9744bd8a40bdfe45ddb56954d559117/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012a7e57b9744bd8a40bdfe45ddb56954d559117/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=012a7e57b9744bd8a40bdfe45ddb56954d559117", "patch": "@@ -37,12 +37,32 @@ use serde::de::DeserializeOwned;\n pub type Result<T, E = Box<dyn std::error::Error + Send + Sync>> = std::result::Result<T, E>;\n pub use crate::{\n     caps::server_capabilities,\n-    main_loop::LspError,\n     main_loop::{main_loop, show_message},\n };\n+use std::fmt;\n \n pub fn from_json<T: DeserializeOwned>(what: &'static str, json: serde_json::Value) -> Result<T> {\n     let res = T::deserialize(&json)\n         .map_err(|e| format!(\"Failed to deserialize {}: {}; {}\", what, e, json))?;\n     Ok(res)\n }\n+\n+#[derive(Debug)]\n+struct LspError {\n+    code: i32,\n+    message: String,\n+}\n+\n+impl LspError {\n+    fn new(code: i32, message: String) -> LspError {\n+        LspError { code, message }\n+    }\n+}\n+\n+impl fmt::Display for LspError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"Language Server request failed with {}. ({})\", self.code, self.message)\n+    }\n+}\n+\n+impl std::error::Error for LspError {}"}, {"sha": "1787e8c161adec2ad5da90731bc3405d9d9647aa", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/012a7e57b9744bd8a40bdfe45ddb56954d559117/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012a7e57b9744bd8a40bdfe45ddb56954d559117/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=012a7e57b9744bd8a40bdfe45ddb56954d559117", "patch": "@@ -1,9 +1,7 @@\n //! The main loop of `rust-analyzer` responsible for dispatching LSP\n //! requests/replies and notifications back to the client.\n use std::{\n-    env,\n-    error::Error,\n-    fmt,\n+    env, fmt,\n     ops::Range,\n     panic,\n     sync::Arc,\n@@ -28,31 +26,9 @@ use crate::{\n     global_state::{file_id_to_url, GlobalState, GlobalStateSnapshot, Status},\n     handlers, lsp_ext,\n     request_metrics::RequestMetrics,\n-    Result,\n+    LspError, Result,\n };\n \n-#[derive(Debug)]\n-pub struct LspError {\n-    pub code: i32,\n-    pub message: String,\n-}\n-\n-impl LspError {\n-    pub const UNKNOWN_FILE: i32 = -32900;\n-\n-    pub fn new(code: i32, message: String) -> LspError {\n-        LspError { code, message }\n-    }\n-}\n-\n-impl fmt::Display for LspError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Language Server request failed with {}. ({})\", self.code, self.message)\n-    }\n-}\n-\n-impl Error for LspError {}\n-\n pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n     log::info!(\"initial config: {:#?}\", config);\n \n@@ -848,14 +824,7 @@ where\n     let response = match result {\n         Ok(resp) => Response::new_ok(id, &resp),\n         Err(e) => match e.downcast::<LspError>() {\n-            Ok(lsp_error) => {\n-                if lsp_error.code == LspError::UNKNOWN_FILE {\n-                    // Work-around for https://github.com/rust-analyzer/rust-analyzer/issues/1521\n-                    Response::new_ok(id, ())\n-                } else {\n-                    Response::new_err(id, lsp_error.code, lsp_error.message)\n-                }\n-            }\n+            Ok(lsp_error) => Response::new_err(id, lsp_error.code, lsp_error.message),\n             Err(e) => {\n                 if is_canceled(&e) {\n                     Response::new_err("}]}